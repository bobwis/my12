
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028460  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000ba4d4  08028660  08028660  00038660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080e2b34  080e2b34  001006bc  2**0
                  CONTENTS
  4 .ARM          00000008  080e2b34  080e2b34  000f2b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080e2b3c  080e2b3c  001006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080e2b3c  080e2b3c  000f2b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080e2b40  080e2b40  000f2b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006bc  20000000  080e2b44  00100000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f264  200006c0  080e3200  001006c0  2**3
                  ALLOC
 10 ._user_heap_stack 0001c804  2002f924  080e3200  0010f924  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  001006bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00089d3f  00000000  00000000  001006ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00012a12  00000000  00000000  0018a429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0004fae1  00000000  00000000  0019ce3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000035b8  00000000  00000000  001ec920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00008fd0  00000000  00000000  001efed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00047fb3  00000000  00000000  001f8ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0008d09b  00000000  00000000  00240e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013ae0e  00000000  00000000  002cdef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00408d04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d04c  00000000  00000000  00408d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006c0 	.word	0x200006c0
 800021c:	00000000 	.word	0x00000000
 8000220:	08028648 	.word	0x08028648

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006c4 	.word	0x200006c4
 800023c:	08028648 	.word	0x08028648

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200006f0 	.word	0x200006f0
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	2000076c 	.word	0x2000076c

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	200006f0 	.word	0x200006f0
 8000708:	40000c00 	.word	0x40000c00
 800070c:	2000076c 	.word	0x2000076c

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f023 ff66 	bl	80245f4 <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f007 b9eb 	b.w	8007b08 <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	0802884c 	.word	0x0802884c

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219a      	movs	r1, #154	; 0x9a
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f003 fbfa 	bl	8003f4c <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219c      	movs	r1, #156	; 0x9c
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f003 fbee 	bl	8003f4c <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f008 fab3 	bl	8008d8c <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219b      	movs	r1, #155	; 0x9b
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f003 fb78 	bl	8003f4c <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	08028864 	.word	0x08028864
 800086c:	2000027c 	.word	0x2000027c
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <ADC_Conv_complete+0x1dc>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a77      	ldr	r2, [pc, #476]	; (8000a6c <ADC_Conv_complete+0x1e0>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4977      	ldr	r1, [pc, #476]	; (8000a70 <ADC_Conv_complete+0x1e4>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b77      	ldr	r3, [pc, #476]	; (8000a74 <ADC_Conv_complete+0x1e8>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4877      	ldr	r0, [pc, #476]	; (8000a78 <ADC_Conv_complete+0x1ec>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681d      	ldr	r5, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b76      	ldr	r3, [pc, #472]	; (8000a7c <ADC_Conv_complete+0x1f0>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7814      	ldrb	r4, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f505 65b8 	addeq.w	r5, r5, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60eb      	str	r3, [r5, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	0223      	lsls	r3, r4, #8
 80008b6:	9405      	str	r4, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460c      	mov	r4, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a70      	ldr	r2, [pc, #448]	; (8000a80 <ADC_Conv_complete+0x1f4>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a9      	str	r1, [r5, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8000ac8 <ADC_Conv_complete+0x23c>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	606b      	str	r3, [r5, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8da 3000 	ldr.w	r3, [sl]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67a3      	str	r3, [r4, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8ca 3000 	str.w	r3, [sl]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008f0:	4b64      	ldr	r3, [pc, #400]	; (8000a84 <ADC_Conv_complete+0x1f8>)
 80008f2:	f04f 0e00 	mov.w	lr, #0
 80008f6:	350e      	adds	r5, #14
 80008f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000acc <ADC_Conv_complete+0x240>
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000ad0 <ADC_Conv_complete+0x244>
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <ADC_Conv_complete+0x1fc>)
 8000906:	f8cd e010 	str.w	lr, [sp, #16]
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	9303      	str	r3, [sp, #12]
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <ADC_Conv_complete+0x200>)
 8000910:	681e      	ldr	r6, [r3, #0]
 8000912:	4b5f      	ldr	r3, [pc, #380]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <ADC_Conv_complete+0x208>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b5f      	ldr	r3, [pc, #380]	; (8000a98 <ADC_Conv_complete+0x20c>)
 800091c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000920:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <ADC_Conv_complete+0x210>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	9301      	str	r3, [sp, #4]
		lastmeanwindiff = abs(meanwindiff);
 8000926:	2900      	cmp	r1, #0
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000928:	f00e 041f 	and.w	r4, lr, #31
		thissamp = (*adcbuf16)[i];
 800092c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000930:	f10e 0e01 	add.w	lr, lr, #1
		lastmeanwindiff = abs(meanwindiff);
 8000934:	bfb8      	it	lt
 8000936:	4249      	neglt	r1, r1
		if (sigsend)
 8000938:	f8da b000 	ldr.w	fp, [sl]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 800093c:	4418      	add	r0, r3
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 800093e:	441e      	add	r6, r3
		lastmeanwindiff = abs(meanwindiff);
 8000940:	b28f      	uxth	r7, r1
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000942:	9903      	ldr	r1, [sp, #12]
 8000944:	eb07 0c01 	add.w	ip, r7, r1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000948:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
		lastsamp[j] = thissamp;			// save last samples
 800094c:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000950:	1a40      	subs	r0, r0, r1
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000952:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8000956:	1a52      	subs	r2, r2, r1
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000958:	f340 114f 	sbfx	r1, r0, #5, #16
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	2b00      	cmp	r3, #0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000964:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000966:	f342 114f 	sbfx	r1, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800096a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800096e:	f848 1024 	str.w	r1, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	9c02      	ldr	r4, [sp, #8]
 8000974:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8000978:	b29b      	uxth	r3, r3
 800097a:	191c      	adds	r4, r3, r4
 800097c:	4564      	cmp	r4, ip
 800097e:	dd04      	ble.n	800098a <ADC_Conv_complete+0xfe>
			pretrigcnt++;
 8000980:	9c01      	ldr	r4, [sp, #4]
 8000982:	3401      	adds	r4, #1
 8000984:	9401      	str	r4, [sp, #4]
 8000986:	2401      	movs	r4, #1
 8000988:	9404      	str	r4, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 800098a:	f1bb 0f00 	cmp.w	fp, #0
 800098e:	d104      	bne.n	800099a <ADC_Conv_complete+0x10e>
 8000990:	4563      	cmp	r3, ip
 8000992:	dd02      	ble.n	800099a <ADC_Conv_complete+0x10e>
			sigsend = 1; // the real trigger
 8000994:	2301      	movs	r3, #1
 8000996:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 800099a:	f5be 7f36 	cmp.w	lr, #728	; 0x2d8
 800099e:	d1c2      	bne.n	8000926 <ADC_Conv_complete+0x9a>
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <ADC_Conv_complete+0x204>)
 80009a2:	6018      	str	r0, [r3, #0]
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <ADC_Conv_complete+0x208>)
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <ADC_Conv_complete+0x20c>)
 80009aa:	8019      	strh	r1, [r3, #0]
 80009ac:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <ADC_Conv_complete+0x200>)
 80009ae:	601e      	str	r6, [r3, #0]
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <ADC_Conv_complete+0x214>)
 80009b2:	801f      	strh	r7, [r3, #0]
 80009b4:	9b04      	ldr	r3, [sp, #16]
 80009b6:	b113      	cbz	r3, 80009be <ADC_Conv_complete+0x132>
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <ADC_Conv_complete+0x210>)
 80009ba:	9a01      	ldr	r2, [sp, #4]
 80009bc:	601a      	str	r2, [r3, #0]
	if (sigsend) {
 80009be:	f8da 3000 	ldr.w	r3, [sl]
 80009c2:	b33b      	cbz	r3, 8000a14 <ADC_Conv_complete+0x188>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <ADC_Conv_complete+0x218>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d02c      	beq.n	8000a26 <ADC_Conv_complete+0x19a>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009cc:	4928      	ldr	r1, [pc, #160]	; (8000a70 <ADC_Conv_complete+0x1e4>)
 80009ce:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80009d0:	3201      	adds	r2, #1
 80009d2:	67ca      	str	r2, [r1, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009d8:	220f      	movs	r2, #15
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80009dc:	601a      	str	r2, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009de:	4a33      	ldr	r2, [pc, #204]	; (8000aac <ADC_Conv_complete+0x220>)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	d10a      	bne.n	8000a02 <ADC_Conv_complete+0x176>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009ec:	08f3      	lsrs	r3, r6, #3
 80009ee:	4830      	ldr	r0, [pc, #192]	; (8000ab0 <ADC_Conv_complete+0x224>)
 80009f0:	4930      	ldr	r1, [pc, #192]	; (8000ab4 <ADC_Conv_complete+0x228>)
 80009f2:	fba0 0303 	umull	r0, r3, r0, r3
 80009f6:	0b9b      	lsrs	r3, r3, #14
 80009f8:	600b      	str	r3, [r1, #0]
		adcbgbaseacc = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	4923      	ldr	r1, [pc, #140]	; (8000a8c <ADC_Conv_complete+0x200>)
		samplecnt = 0;
 80009fe:	6013      	str	r3, [r2, #0]
		adcbgbaseacc = 0;
 8000a00:	600b      	str	r3, [r1, #0]
	if (xTaskToNotify == NULL) {
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	b342      	cbz	r2, 8000a5a <ADC_Conv_complete+0x1ce>
	} else if (sigsend) {
 8000a08:	f8da 2000 	ldr.w	r2, [sl]
 8000a0c:	b982      	cbnz	r2, 8000a30 <ADC_Conv_complete+0x1a4>
}
 8000a0e:	b007      	add	sp, #28
 8000a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <ADC_Conv_complete+0x218>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	b112      	cbz	r2, 8000a20 <ADC_Conv_complete+0x194>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <ADC_Conv_complete+0x230>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e7db      	b.n	80009de <ADC_Conv_complete+0x152>
			++adcbatchid; // start a new adc batch number
 8000a26:	9a05      	ldr	r2, [sp, #20]
 8000a28:	4910      	ldr	r1, [pc, #64]	; (8000a6c <ADC_Conv_complete+0x1e0>)
 8000a2a:	3201      	adds	r2, #1
 8000a2c:	700a      	strb	r2, [r1, #0]
 8000a2e:	e7cd      	b.n	80009cc <ADC_Conv_complete+0x140>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a30:	4c23      	ldr	r4, [pc, #140]	; (8000ac0 <ADC_Conv_complete+0x234>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4621      	mov	r1, r4
 8000a36:	f015 f9ab 	bl	8015d90 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0e6      	beq.n	8000a0e <ADC_Conv_complete+0x182>
 8000a40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	f3bf 8f6f 	isb	sy
}
 8000a54:	b007      	add	sp, #28
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <ADC_Conv_complete+0x238>)
}
 8000a5c:	b007      	add	sp, #28
 8000a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a62:	f023 bdc7 	b.w	80245f4 <puts>
 8000a66:	bf00      	nop
 8000a68:	200006f0 	.word	0x200006f0
 8000a6c:	200006dc 	.word	0x200006dc
 8000a70:	20002b24 	.word	0x20002b24
 8000a74:	2000074c 	.word	0x2000074c
 8000a78:	200006ec 	.word	0x200006ec
 8000a7c:	2000076c 	.word	0x2000076c
 8000a80:	20000754 	.word	0x20000754
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000002 	.word	0x20000002
 8000a8c:	200006e0 	.word	0x200006e0
 8000a90:	200007f4 	.word	0x200007f4
 8000a94:	20000770 	.word	0x20000770
 8000a98:	20000748 	.word	0x20000748
 8000a9c:	20000750 	.word	0x20000750
 8000aa0:	20000700 	.word	0x20000700
 8000aa4:	20000760 	.word	0x20000760
 8000aa8:	20000744 	.word	0x20000744
 8000aac:	20000758 	.word	0x20000758
 8000ab0:	16816817 	.word	0x16816817
 8000ab4:	200006f4 	.word	0x200006f4
 8000ab8:	200007fc 	.word	0x200007fc
 8000abc:	2000075c 	.word	0x2000075c
 8000ac0:	200007f8 	.word	0x200007f8
 8000ac4:	0802887c 	.word	0x0802887c
 8000ac8:	20000764 	.word	0x20000764
 8000acc:	20000704 	.word	0x20000704
 8000ad0:	20000774 	.word	0x20000774

08000ad4 <startadc>:

void startadc() {
 8000ad4:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000ad6:	492b      	ldr	r1, [pc, #172]	; (8000b84 <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000ad8:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000adc:	482b      	ldr	r0, [pc, #172]	; (8000b8c <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000ade:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ae0:	4d2b      	ldr	r5, [pc, #172]	; (8000b90 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ae6:	f023 fd85 	bl	80245f4 <puts>
	osDelay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f013 fb8a 	bl	8014204 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000af0:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000af4:	f015 fe38 	bl	8016768 <pvPortMalloc>
 8000af8:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d03d      	beq.n	8000b7a <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000afe:	0783      	lsls	r3, r0, #30
 8000b00:	4604      	mov	r4, r0
 8000b02:	d128      	bne.n	8000b56 <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b04:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b08:	2155      	movs	r1, #85	; 0x55
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f022 fd3a 	bl	8023584 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b10:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b14:	21aa      	movs	r1, #170	; 0xaa
 8000b16:	18a0      	adds	r0, r4, r2
 8000b18:	f022 fd34 	bl	8023584 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b1c:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b22:	f104 0110 	add.w	r1, r4, #16
 8000b26:	4c1c      	ldr	r4, [pc, #112]	; (8000b98 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b28:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b2c:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b30:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b32:	f7ff fe01 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <startadc+0xcc>)
 8000b38:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3a:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b3c:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3e:	f006 ff35 	bl	80079ac <HAL_ADC_Start>
 8000b42:	b9b0      	cbnz	r0, 8000b72 <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <startadc+0xd4>)
 8000b46:	f006 ff31 	bl	80079ac <HAL_ADC_Start>
 8000b4a:	b970      	cbnz	r0, 8000b6a <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b4c:	4813      	ldr	r0, [pc, #76]	; (8000b9c <startadc+0xc8>)
 8000b4e:	f006 ff2d 	bl	80079ac <HAL_ADC_Start>
 8000b52:	b928      	cbnz	r0, 8000b60 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b54:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <startadc+0xd8>)
 8000b58:	f023 fd4c 	bl	80245f4 <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b5c:	682c      	ldr	r4, [r5, #0]
 8000b5e:	e7d1      	b.n	8000b04 <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <startadc+0xdc>)
}
 8000b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b66:	f023 bd45 	b.w	80245f4 <puts>
		printf("ADC2 failed start\r\n");
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <startadc+0xe0>)
 8000b6c:	f023 fd42 	bl	80245f4 <puts>
 8000b70:	e7ec      	b.n	8000b4c <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <startadc+0xe4>)
 8000b74:	f023 fd3e 	bl	80245f4 <puts>
 8000b78:	e7e4      	b.n	8000b44 <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <startadc+0xe8>)
 8000b7c:	f023 fd3a 	bl	80245f4 <puts>
		for (;;)
 8000b80:	e7fe      	b.n	8000b80 <startadc+0xac>
 8000b82:	bf00      	nop
 8000b84:	066ff300 	.word	0x066ff300
 8000b88:	20002b24 	.word	0x20002b24
 8000b8c:	08028890 	.word	0x08028890
 8000b90:	2000074c 	.word	0x2000074c
 8000b94:	200006e8 	.word	0x200006e8
 8000b98:	200006e4 	.word	0x200006e4
 8000b9c:	20001cc4 	.word	0x20001cc4
 8000ba0:	200006ed 	.word	0x200006ed
 8000ba4:	20001d54 	.word	0x20001d54
 8000ba8:	20001d0c 	.word	0x20001d0c
 8000bac:	080288cc 	.word	0x080288cc
 8000bb0:	0802892c 	.word	0x0802892c
 8000bb4:	08028918 	.word	0x08028918
 8000bb8:	08028904 	.word	0x08028904
 8000bbc:	080288a4 	.word	0x080288a4

08000bc0 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <vApplicationMallocFailedHook>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <vApplicationGetIdleTaskMemory+0x18>)
{
 8000bce:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bd0:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bd6:	4c04      	ldr	r4, [pc, #16]	; (8000be8 <vApplicationGetIdleTaskMemory+0x1c>)
 8000bd8:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000bda:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000c00 	.word	0x20000c00
 8000be8:	20000800 	.word	0x20000800

08000bec <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <vApplicationGetTimerTaskMemory+0x18>)
{
 8000bee:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bf0:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000bf6:	4c04      	ldr	r4, [pc, #16]	; (8000c08 <vApplicationGetTimerTaskMemory+0x1c>)
 8000bf8:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20001454 	.word	0x20001454
 8000c08:	20000c54 	.word	0x20000c54

08000c0c <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000c0c:	2200      	movs	r2, #0
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
 8000c0e:	4603      	mov	r3, r0

	return (ERR_OK);
}
 8000c10:	4610      	mov	r0, r2
	state->ConnectionTimeout = 0;
 8000c12:	749a      	strb	r2, [r3, #18]
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000c18:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000c20:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c22:	b082      	sub	sp, #8
 8000c24:	4605      	mov	r5, r0
 8000c26:	460f      	mov	r7, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000c28:	4616      	mov	r6, r2
 8000c2a:	b10a      	cbz	r2, 8000c30 <hc_recv+0x18>
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d15d      	bne.n	8000cec <hc_recv+0xd4>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000c30:	bb6e      	cbnz	r6, 8000c8e <hc_recv+0x76>
 8000c32:	b363      	cbz	r3, 8000c8e <hc_recv+0x76>
		for (i = 0; i < state->Len; i++) {
 8000c34:	8a2b      	ldrh	r3, [r5, #16]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 809f 	beq.w	8000d7a <hc_recv+0x162>
 8000c3c:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000c3e:	f04f 0804 	mov.w	r8, #4
 8000c42:	68ec      	ldr	r4, [r5, #12]
 8000c44:	e002      	b.n	8000c4c <hc_recv+0x34>
		for (i = 0; i < state->Len; i++) {
 8000c46:	3201      	adds	r2, #1
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	dd0d      	ble.n	8000c68 <hc_recv+0x50>
			if (errormsg == GEN_ERROR) {
 8000c4c:	f1b8 0f04 	cmp.w	r8, #4
 8000c50:	d021      	beq.n	8000c96 <hc_recv+0x7e>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c52:	5ca6      	ldrb	r6, [r4, r2]
 8000c54:	2e0d      	cmp	r6, #13
 8000c56:	d1f6      	bne.n	8000c46 <hc_recv+0x2e>
 8000c58:	1c51      	adds	r1, r2, #1
 8000c5a:	5c60      	ldrb	r0, [r4, r1]
 8000c5c:	280a      	cmp	r0, #10
 8000c5e:	d029      	beq.n	8000cb4 <hc_recv+0x9c>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000c60:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000c62:	3201      	adds	r2, #1
 8000c64:	4293      	cmp	r3, r2
 8000c66:	dcf1      	bgt.n	8000c4c <hc_recv+0x34>
	char *page = NULL;
 8000c68:	2600      	movs	r6, #0
		if (errormsg == OK) {
 8000c6a:	f1b8 0f00 	cmp.w	r8, #0
 8000c6e:	d11a      	bne.n	8000ca6 <hc_recv+0x8e>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000c70:	696c      	ldr	r4, [r5, #20]
 8000c72:	4632      	mov	r2, r6
 8000c74:	2100      	movs	r1, #0
 8000c76:	7828      	ldrb	r0, [r5, #0]
 8000c78:	47a0      	blx	r4
	if (pcb != NULL) {
 8000c7a:	b117      	cbz	r7, 8000c82 <hc_recv+0x6a>
		tcp_close(pcb);
 8000c7c:	4638      	mov	r0, r7
 8000c7e:	f01a fe33 	bl	801b8e8 <tcp_close>
		free(state->RecvData);
 8000c82:	68e8      	ldr	r0, [r5, #12]
 8000c84:	f022 fc3e 	bl	8023504 <free>
		free(state);
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f022 fc3b 	bl	8023504 <free>
}
 8000c8e:	2000      	movs	r0, #0
 8000c90:	b002      	add	sp, #8
 8000c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000c96:	5ca1      	ldrb	r1, [r4, r2]
 8000c98:	2932      	cmp	r1, #50	; 0x32
 8000c9a:	d05e      	beq.n	8000d5a <hc_recv+0x142>
				if (*(state->RecvData + i) == '\n')
 8000c9c:	290a      	cmp	r1, #10
 8000c9e:	d055      	beq.n	8000d4c <hc_recv+0x134>
		for (i = 0; i < state->Len; i++) {
 8000ca0:	3201      	adds	r2, #1
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	dcf7      	bgt.n	8000c96 <hc_recv+0x7e>
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	696c      	ldr	r4, [r5, #20]
 8000caa:	4641      	mov	r1, r8
 8000cac:	7828      	ldrb	r0, [r5, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	47a0      	blx	r4
 8000cb2:	e7e2      	b.n	8000c7a <hc_recv+0x62>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000cb4:	1c91      	adds	r1, r2, #2
 8000cb6:	5c60      	ldrb	r0, [r4, r1]
 8000cb8:	280d      	cmp	r0, #13
 8000cba:	d1d1      	bne.n	8000c60 <hc_recv+0x48>
 8000cbc:	1cd1      	adds	r1, r2, #3
 8000cbe:	5c60      	ldrb	r0, [r4, r1]
 8000cc0:	280a      	cmp	r0, #10
 8000cc2:	d1cd      	bne.n	8000c60 <hc_recv+0x48>
					i++;
 8000cc4:	3204      	adds	r2, #4
 8000cc6:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000cc8:	18a1      	adds	r1, r4, r2
 8000cca:	4608      	mov	r0, r1
 8000ccc:	9100      	str	r1, [sp, #0]
 8000cce:	f7ff fac1 	bl	8000254 <strlen>
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	f022 fc0e 	bl	80234f4 <malloc>
					strcpy(page, state->RecvData + i);
 8000cd8:	9900      	ldr	r1, [sp, #0]
 8000cda:	1c72      	adds	r2, r6, #1
					page = malloc(strlen(state->RecvData + i));
 8000cdc:	4606      	mov	r6, r0
					strcpy(page, state->RecvData + i);
 8000cde:	f022 fc29 	bl	8023534 <memcpy>
					break;
 8000ce2:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000ce4:	f1b8 0f00 	cmp.w	r8, #0
 8000ce8:	d0c2      	beq.n	8000c70 <hc_recv+0x58>
 8000cea:	e7dc      	b.n	8000ca6 <hc_recv+0x8e>
		tcp_recved(pcb, p->tot_len);
 8000cec:	8911      	ldrh	r1, [r2, #8]
 8000cee:	4638      	mov	r0, r7
 8000cf0:	f019 fde2 	bl	801a8b8 <tcp_recved>
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000cf4:	4634      	mov	r4, r6
 8000cf6:	8a29      	ldrh	r1, [r5, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000cf8:	2700      	movs	r7, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000cfa:	8963      	ldrh	r3, [r4, #10]
 8000cfc:	68e8      	ldr	r0, [r5, #12]
 8000cfe:	4419      	add	r1, r3
 8000d00:	3101      	adds	r1, #1
 8000d02:	f023 fcbd 	bl	8024680 <realloc>
 8000d06:	60e8      	str	r0, [r5, #12]
			if (state->RecvData == NULL) {
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d03b      	beq.n	8000d84 <hc_recv+0x16c>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000d0c:	8a2b      	ldrh	r3, [r5, #16]
 8000d0e:	8962      	ldrh	r2, [r4, #10]
 8000d10:	6861      	ldr	r1, [r4, #4]
 8000d12:	4418      	add	r0, r3
 8000d14:	f024 fb58 	bl	80253c8 <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000d18:	8961      	ldrh	r1, [r4, #10]
 8000d1a:	68eb      	ldr	r3, [r5, #12]
 8000d1c:	8a2a      	ldrh	r2, [r5, #16]
 8000d1e:	440b      	add	r3, r1
 8000d20:	549f      	strb	r7, [r3, r2]
			state->Len += temp_p->len;
 8000d22:	8963      	ldrh	r3, [r4, #10]
 8000d24:	8a29      	ldrh	r1, [r5, #16]
			temp_p = temp_p->next;
 8000d26:	6824      	ldr	r4, [r4, #0]
			state->Len += temp_p->len;
 8000d28:	4419      	add	r1, r3
 8000d2a:	b289      	uxth	r1, r1
 8000d2c:	8229      	strh	r1, [r5, #16]
		while (temp_p != NULL) {
 8000d2e:	2c00      	cmp	r4, #0
 8000d30:	d1e3      	bne.n	8000cfa <hc_recv+0xe2>
			temp_p = p->next;
 8000d32:	4630      	mov	r0, r6
 8000d34:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000d36:	f015 ff33 	bl	8016ba0 <pbuf_free_callback>
		while (p != NULL) {
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d0a7      	beq.n	8000c8e <hc_recv+0x76>
			temp_p = p->next;
 8000d3e:	4630      	mov	r0, r6
 8000d40:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000d42:	f015 ff2d 	bl	8016ba0 <pbuf_free_callback>
		while (p != NULL) {
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	d1f3      	bne.n	8000d32 <hc_recv+0x11a>
 8000d4a:	e7a0      	b.n	8000c8e <hc_recv+0x76>
		for (i = 0; i < state->Len; i++) {
 8000d4c:	3201      	adds	r2, #1
					errormsg = NOT_FOUND;
 8000d4e:	f04f 0803 	mov.w	r8, #3
		for (i = 0; i < state->Len; i++) {
 8000d52:	4293      	cmp	r3, r2
 8000d54:	f73f af7d 	bgt.w	8000c52 <hc_recv+0x3a>
 8000d58:	e7a5      	b.n	8000ca6 <hc_recv+0x8e>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000d5a:	1c50      	adds	r0, r2, #1
 8000d5c:	5c21      	ldrb	r1, [r4, r0]
 8000d5e:	2930      	cmp	r1, #48	; 0x30
 8000d60:	d001      	beq.n	8000d66 <hc_recv+0x14e>
 8000d62:	4602      	mov	r2, r0
 8000d64:	e79a      	b.n	8000c9c <hc_recv+0x84>
						&& (*(state->RecvData + ++i) == '0'))
 8000d66:	1c90      	adds	r0, r2, #2
 8000d68:	5c21      	ldrb	r1, [r4, r0]
 8000d6a:	2930      	cmp	r1, #48	; 0x30
 8000d6c:	d1f9      	bne.n	8000d62 <hc_recv+0x14a>
		for (i = 0; i < state->Len; i++) {
 8000d6e:	3203      	adds	r2, #3
 8000d70:	4293      	cmp	r3, r2
 8000d72:	dd05      	ble.n	8000d80 <hc_recv+0x168>
					errormsg = OK;
 8000d74:	f04f 0800 	mov.w	r8, #0
 8000d78:	e76b      	b.n	8000c52 <hc_recv+0x3a>
	hc_errormsg errormsg = GEN_ERROR;
 8000d7a:	f04f 0804 	mov.w	r8, #4
 8000d7e:	e792      	b.n	8000ca6 <hc_recv+0x8e>
	char *page = NULL;
 8000d80:	2600      	movs	r6, #0
 8000d82:	e775      	b.n	8000c70 <hc_recv+0x58>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8000d84:	4603      	mov	r3, r0
 8000d86:	4602      	mov	r2, r0
 8000d88:	696c      	ldr	r4, [r5, #20]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	7828      	ldrb	r0, [r5, #0]
 8000d8e:	47a0      	blx	r4
				return (ERR_OK);
 8000d90:	e77d      	b.n	8000c8e <hc_recv+0x76>
 8000d92:	bf00      	nop

08000d94 <hc_error>:
static void hc_error(void *arg, err_t err) {
 8000d94:	b570      	push	{r4, r5, r6, lr}
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d96:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8000d98:	4604      	mov	r4, r0
 8000d9a:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d9c:	7800      	ldrb	r0, [r0, #0]
 8000d9e:	2104      	movs	r1, #4
 8000da0:	461a      	mov	r2, r3
 8000da2:	6966      	ldr	r6, [r4, #20]
 8000da4:	47b0      	blx	r6
	free(state->RecvData);
 8000da6:	68e0      	ldr	r0, [r4, #12]
 8000da8:	f022 fbac 	bl	8023504 <free>
	free(state->PostVars);
 8000dac:	68a0      	ldr	r0, [r4, #8]
 8000dae:	f022 fba9 	bl	8023504 <free>
	free(state->Page);
 8000db2:	6860      	ldr	r0, [r4, #4]
 8000db4:	f022 fba6 	bl	8023504 <free>
	free(state);
 8000db8:	4620      	mov	r0, r4
 8000dba:	f022 fba3 	bl	8023504 <free>
	printf("hc_error: err=%d\n", err);
 8000dbe:	4629      	mov	r1, r5
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <hc_error+0x38>)
}
 8000dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8000dc6:	f023 bb79 	b.w	80244bc <iprintf>
 8000dca:	bf00      	nop
 8000dcc:	08028940 	.word	0x08028940

08000dd0 <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	4605      	mov	r5, r0
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	460c      	mov	r4, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d13f      	bne.n	8000e5c <hc_connected+0x8c>

		return (ERR_OK);
	}

	// Define Headers
	if (state->PostVars == NULL) {
 8000ddc:	6887      	ldr	r7, [r0, #8]
 8000dde:	2f00      	cmp	r7, #0
 8000de0:	d04f      	beq.n	8000e82 <hc_connected+0xb2>
		headers = malloc(19 + strlen(state->Page));
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
	} else {
		// POST headers (without PostVars or Page)(+ \0) = 91
		// Content-length: %d <== 						   ??? (max 10)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000de2:	4638      	mov	r0, r7
 8000de4:	f7ff fa36 	bl	8000254 <strlen>
 8000de8:	686a      	ldr	r2, [r5, #4]
 8000dea:	4606      	mov	r6, r0
 8000dec:	4610      	mov	r0, r2
 8000dee:	9203      	str	r2, [sp, #12]
 8000df0:	f7ff fa30 	bl	8000254 <strlen>
 8000df4:	4430      	add	r0, r6
 8000df6:	3065      	adds	r0, #101	; 0x65
 8000df8:	f022 fb7c 	bl	80234f4 <malloc>
		sprintf(headers,
 8000dfc:	4633      	mov	r3, r6
 8000dfe:	9a03      	ldr	r2, [sp, #12]
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000e00:	4606      	mov	r6, r0
		sprintf(headers,
 8000e02:	4927      	ldr	r1, [pc, #156]	; (8000ea0 <hc_connected+0xd0>)
 8000e04:	9700      	str	r7, [sp, #0]
 8000e06:	f023 fce1 	bl	80247cc <siprintf>

		return (ERR_OK);
	}

	// Setup the TCP receive function
	tcp_recv(pcb, hc_recv);
 8000e0a:	4926      	ldr	r1, [pc, #152]	; (8000ea4 <hc_connected+0xd4>)
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f019 fe97 	bl	801ab40 <tcp_recv>

	// Setup the TCP error function
	tcp_err(pcb, hc_error);
 8000e12:	4925      	ldr	r1, [pc, #148]	; (8000ea8 <hc_connected+0xd8>)
 8000e14:	4620      	mov	r0, r4
 8000e16:	f019 fecb 	bl	801abb0 <tcp_err>

	// Setup the TCP polling function/interval	 //TCP_POLL IS NOT CORRECT DEFINED @ DOC!!!
	tcp_poll(pcb, hc_poll, 10);
 8000e1a:	220a      	movs	r2, #10
 8000e1c:	4923      	ldr	r1, [pc, #140]	; (8000eac <hc_connected+0xdc>)
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f019 fee8 	bl	801abf4 <tcp_poll>

	// Setup the TCP sent callback function
	tcp_sent(pcb, hc_sent);
 8000e24:	4922      	ldr	r1, [pc, #136]	; (8000eb0 <hc_connected+0xe0>)
 8000e26:	4620      	mov	r0, r4
 8000e28:	f019 fea6 	bl	801ab78 <tcp_sent>

	// Send data
	tcp_write(pcb, headers, strlen(headers), 1);
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	f7ff fa11 	bl	8000254 <strlen>
 8000e32:	2301      	movs	r3, #1
 8000e34:	4602      	mov	r2, r0
 8000e36:	4631      	mov	r1, r6
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f01c fcd7 	bl	801d7ec <tcp_write>
	tcp_output(pcb);
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f01d fb2c 	bl	801e49c <tcp_output>

	// remove headers
	free(headers);
 8000e44:	4630      	mov	r0, r6
 8000e46:	f022 fb5d 	bl	8023504 <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 8000e4a:	68a8      	ldr	r0, [r5, #8]
 8000e4c:	f022 fb5a 	bl	8023504 <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 8000e50:	6868      	ldr	r0, [r5, #4]
 8000e52:	f022 fb57 	bl	8023504 <free>

	return (ERR_OK);
}
 8000e56:	2000      	movs	r0, #0
 8000e58:	b005      	add	sp, #20
 8000e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (pcb != NULL) {
 8000e5c:	b111      	cbz	r1, 8000e64 <hc_connected+0x94>
		tcp_close(pcb);
 8000e5e:	4608      	mov	r0, r1
 8000e60:	f01a fd42 	bl	801b8e8 <tcp_close>
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000e64:	2300      	movs	r3, #0
 8000e66:	2104      	movs	r1, #4
 8000e68:	7828      	ldrb	r0, [r5, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	696c      	ldr	r4, [r5, #20]
 8000e6e:	47a0      	blx	r4
		free(state->RecvData);
 8000e70:	68e8      	ldr	r0, [r5, #12]
 8000e72:	f022 fb47 	bl	8023504 <free>
		free(state);
 8000e76:	4628      	mov	r0, r5
 8000e78:	f022 fb44 	bl	8023504 <free>
}
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	b005      	add	sp, #20
 8000e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		headers = malloc(19 + strlen(state->Page));
 8000e82:	6842      	ldr	r2, [r0, #4]
 8000e84:	4610      	mov	r0, r2
 8000e86:	9203      	str	r2, [sp, #12]
 8000e88:	f7ff f9e4 	bl	8000254 <strlen>
 8000e8c:	3013      	adds	r0, #19
 8000e8e:	f022 fb31 	bl	80234f4 <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000e92:	9a03      	ldr	r2, [sp, #12]
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <hc_connected+0xe4>)
		headers = malloc(19 + strlen(state->Page));
 8000e96:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000e98:	f023 fc98 	bl	80247cc <siprintf>
 8000e9c:	e7b5      	b.n	8000e0a <hc_connected+0x3a>
 8000e9e:	bf00      	nop
 8000ea0:	0802896c 	.word	0x0802896c
 8000ea4:	08000c19 	.word	0x08000c19
 8000ea8:	08000d95 	.word	0x08000d95
 8000eac:	08000eb9 	.word	0x08000eb9
 8000eb0:	08000c0d 	.word	0x08000c0d
 8000eb4:	08028954 	.word	0x08028954

08000eb8 <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8000eb8:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 8000eba:	7c83      	ldrb	r3, [r0, #18]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 8000ec0:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 8000ec2:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8000ec4:	d801      	bhi.n	8000eca <hc_poll+0x12>
}
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	bd38      	pop	{r3, r4, r5, pc}
 8000eca:	4604      	mov	r4, r0
		tcp_abort(pcb);
 8000ecc:	4608      	mov	r0, r1
 8000ece:	f01a faf7 	bl	801b4c0 <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	7820      	ldrb	r0, [r4, #0]
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	6965      	ldr	r5, [r4, #20]
 8000eda:	461a      	mov	r2, r3
 8000edc:	47a8      	blx	r5
}
 8000ede:	2000      	movs	r0, #0
 8000ee0:	bd38      	pop	{r3, r4, r5, pc}
 8000ee2:	bf00      	nop

08000ee4 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ee8:	b085      	sub	sp, #20
 8000eea:	460f      	mov	r7, r1
 8000eec:	4614      	mov	r4, r2
 8000eee:	4698      	mov	r8, r3
 8000ef0:	9001      	str	r0, [sp, #4]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 8000ef2:	2018      	movs	r0, #24
 8000ef4:	f022 fafe 	bl	80234f4 <malloc>
 8000ef8:	4605      	mov	r5, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 8000efa:	f01a fc1d 	bl	801b738 <tcp_new>
	if (pcb == NULL || state == NULL) {
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d069      	beq.n	8000fd6 <hc_open+0xf2>
 8000f02:	fab5 f285 	clz	r2, r5
 8000f06:	0952      	lsrs	r2, r2, #5
 8000f08:	2d00      	cmp	r5, #0
 8000f0a:	d064      	beq.n	8000fd6 <hc_open+0xf2>
	num++;
	state->Num = num;
	state->RecvData = NULL;
	state->ConnectionTimeout = 0;
	state->Len = 0;
	state->ReturnPage = returnpage;
 8000f0c:	f8c5 8014 	str.w	r8, [r5, #20]
 8000f10:	4606      	mov	r6, r0
	num++;
 8000f12:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001008 <hc_open+0x124>
	state->RecvData = NULL;
 8000f16:	60ea      	str	r2, [r5, #12]
	num++;
 8000f18:	f898 3000 	ldrb.w	r3, [r8]
	state->ConnectionTimeout = 0;
 8000f1c:	74aa      	strb	r2, [r5, #18]
	num++;
 8000f1e:	3301      	adds	r3, #1
	state->Len = 0;
 8000f20:	822a      	strh	r2, [r5, #16]
	num++;
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f888 3000 	strb.w	r3, [r8]
	state->Num = num;
 8000f28:	702b      	strb	r3, [r5, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 8000f2a:	b134      	cbz	r4, 8000f3a <hc_open+0x56>
		state->PostVars = malloc(strlen(PostVars) + 1);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff f991 	bl	8000254 <strlen>
 8000f32:	3001      	adds	r0, #1
 8000f34:	f022 fade 	bl	80234f4 <malloc>
 8000f38:	60a8      	str	r0, [r5, #8]
	state->Page = malloc(strlen(Page) + 1);
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	f7ff f98a 	bl	8000254 <strlen>
 8000f40:	1c42      	adds	r2, r0, #1
 8000f42:	4610      	mov	r0, r2
 8000f44:	9200      	str	r2, [sp, #0]
 8000f46:	f022 fad5 	bl	80234f4 <malloc>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6068      	str	r0, [r5, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f4e:	b390      	cbz	r0, 8000fb6 <hc_open+0xd2>
 8000f50:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8000f54:	9a00      	ldr	r2, [sp, #0]
 8000f56:	f1b9 0f00 	cmp.w	r9, #0
 8000f5a:	d02b      	beq.n	8000fb4 <hc_open+0xd0>
		printf("httpclient: no pcb memory\n");
#endif
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	f022 fae9 	bl	8023534 <memcpy>
	if (PostVars != NULL)
 8000f62:	2c00      	cmp	r4, #0
 8000f64:	d03e      	beq.n	8000fe4 <hc_open+0x100>
		strcpy(state->PostVars, PostVars);
 8000f66:	4621      	mov	r1, r4
 8000f68:	4648      	mov	r0, r9
 8000f6a:	f023 fcd6 	bl	802491a <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000f6e:	f641 7490 	movw	r4, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f72:	4f21      	ldr	r7, [pc, #132]	; (8000ff8 <hc_open+0x114>)
 8000f74:	e000      	b.n	8000f78 <hc_open+0x94>
		// Local port in use, use port+1
		port++;
 8000f76:	b2a4      	uxth	r4, r4
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f78:	4622      	mov	r2, r4
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	4630      	mov	r0, r6
		port++;
 8000f7e:	3401      	adds	r4, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f80:	f019 fb78 	bl	801a674 <tcp_bind>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d1f6      	bne.n	8000f76 <hc_open+0x92>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8000f88:	4629      	mov	r1, r5
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f019 fdd4 	bl	801ab38 <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <hc_open+0x118>)
 8000f92:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000f96:	a901      	add	r1, sp, #4
 8000f98:	4630      	mov	r0, r6
 8000f9a:	f019 fcc7 	bl	801a92c <tcp_connect>
 8000f9e:	b243      	sxtb	r3, r0
 8000fa0:	f88d 300f 	strb.w	r3, [sp, #15]

	if (err != ERR_OK) {
 8000fa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000fa8:	b9fb      	cbnz	r3, 8000fea <hc_open+0x106>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 8000faa:	f898 0000 	ldrb.w	r0, [r8]
}
 8000fae:	b005      	add	sp, #20
 8000fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000fb4:	b19c      	cbz	r4, 8000fde <hc_open+0xfa>
		free(state->Page);
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f022 faa4 	bl	8023504 <free>
		free(state->PostVars);
 8000fbc:	68a8      	ldr	r0, [r5, #8]
 8000fbe:	f022 faa1 	bl	8023504 <free>
		free(state);
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	f022 fa9e 	bl	8023504 <free>
		tcp_close(pcb);
 8000fc8:	4630      	mov	r0, r6
 8000fca:	f01a fc8d 	bl	801b8e8 <tcp_close>
		return 0;
 8000fce:	2000      	movs	r0, #0
}
 8000fd0:	b005      	add	sp, #20
 8000fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("hc_open: Not enough memory for pcb or state\n");
 8000fd6:	480a      	ldr	r0, [pc, #40]	; (8001000 <hc_open+0x11c>)
 8000fd8:	f023 fb0c 	bl	80245f4 <puts>
		for (;;)
 8000fdc:	e7fe      	b.n	8000fdc <hc_open+0xf8>
	strcpy(state->Page, Page);
 8000fde:	4639      	mov	r1, r7
 8000fe0:	f022 faa8 	bl	8023534 <memcpy>
		state->PostVars = NULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60ab      	str	r3, [r5, #8]
 8000fe8:	e7c1      	b.n	8000f6e <hc_open+0x8a>
		printf("hc_open failed with %d\n", err);
 8000fea:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <hc_open+0x120>)
 8000ff0:	b249      	sxtb	r1, r1
 8000ff2:	f023 fa63 	bl	80244bc <iprintf>
 8000ff6:	e7d8      	b.n	8000faa <hc_open+0xc6>
 8000ff8:	080e1ff0 	.word	0x080e1ff0
 8000ffc:	08000dd1 	.word	0x08000dd1
 8001000:	080289d0 	.word	0x080289d0
 8001004:	080289fc 	.word	0x080289fc
 8001008:	200014a8 	.word	0x200014a8

0800100c <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 800100c:	2300      	movs	r3, #0
int wait_armtx(void) {
 800100e:	b510      	push	{r4, lr}
 8001010:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8001012:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8001014:	9b01      	ldr	r3, [sp, #4]
 8001016:	2b95      	cmp	r3, #149	; 0x95
 8001018:	dc0d      	bgt.n	8001036 <wait_armtx+0x2a>
 800101a:	4c0e      	ldr	r4, [pc, #56]	; (8001054 <wait_armtx+0x48>)
 800101c:	e007      	b.n	800102e <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 800101e:	9b01      	ldr	r3, [sp, #4]
 8001020:	4403      	add	r3, r0
 8001022:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001024:	f013 f8ee 	bl	8014204 <osDelay>
	while (timeoutcnt < 150) {
 8001028:	9b01      	ldr	r3, [sp, #4]
 800102a:	2b95      	cmp	r3, #149	; 0x95
 800102c:	dc03      	bgt.n	8001036 <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 800102e:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	4283      	cmp	r3, r0
 8001034:	d1f3      	bne.n	800101e <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001036:	9b01      	ldr	r3, [sp, #4]
 8001038:	2bf9      	cmp	r3, #249	; 0xf9
 800103a:	dc02      	bgt.n	8001042 <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 800103c:	2000      	movs	r0, #0
}
 800103e:	b002      	add	sp, #8
 8001040:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <wait_armtx+0x4c>)
 8001044:	f023 fad6 	bl	80245f4 <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <wait_armtx+0x48>)
 800104a:	2201      	movs	r2, #1
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	601a      	str	r2, [r3, #0]
		return (-1);
 8001052:	e7f4      	b.n	800103e <wait_armtx+0x32>
 8001054:	20001c6c 	.word	0x20001c6c
 8001058:	08028a14 	.word	0x08028a14

0800105c <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_UART_TxCpltCallback+0x14>)
 8001062:	6802      	ldr	r2, [r0, #0]
 8001064:	429a      	cmp	r2, r3
 8001066:	d000      	beq.n	800106a <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8001068:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 800106a:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_UART_TxCpltCallback+0x18>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40005000 	.word	0x40005000
 8001078:	20001c6c 	.word	0x20001c6c

0800107c <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	4606      	mov	r6, r0
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8001080:	4c1b      	ldr	r4, [pc, #108]	; (80010f0 <lcd_uart_init+0x74>)
void lcd_uart_init(int baud) {
 8001082:	b082      	sub	sp, #8
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001084:	481b      	ldr	r0, [pc, #108]	; (80010f4 <lcd_uart_init+0x78>)
 8001086:	4631      	mov	r1, r6
	lcdrxoutidx = 0;		// buffer consumer index
 8001088:	2500      	movs	r5, #0
	printf("lcd_uart_init: LCD %d ***\n", baud);
 800108a:	f023 fa17 	bl	80244bc <iprintf>
	lcdrxoutidx = 0;		// buffer consumer index
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <lcd_uart_init+0x7c>)
	HAL_UART_Abort(&huart5);
 8001090:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8001092:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001094:	f00f fe70 	bl	8010d78 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8001098:	4620      	mov	r0, r4
 800109a:	f00f fdbb 	bl	8010c14 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <lcd_uart_init+0x80>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 80010a0:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 80010a2:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 80010a4:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80010a8:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80010ac:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 80010b8:	f010 fe58 	bl	8011d6c <HAL_UART_Init>
 80010bc:	b958      	cbnz	r0, 80010d6 <lcd_uart_init+0x5a>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	490f      	ldr	r1, [pc, #60]	; (8001100 <lcd_uart_init+0x84>)
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <lcd_uart_init+0x74>)
 80010c4:	f011 f842 	bl	801214c <HAL_UART_Receive_DMA>
 80010c8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 80010cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010d0:	b933      	cbnz	r3, 80010e0 <lcd_uart_init+0x64>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 80010d2:	b002      	add	sp, #8
 80010d4:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 80010d6:	4631      	mov	r1, r6
 80010d8:	480a      	ldr	r0, [pc, #40]	; (8001104 <lcd_uart_init+0x88>)
 80010da:	f023 f9ef 	bl	80244bc <iprintf>
 80010de:	e7ee      	b.n	80010be <lcd_uart_init+0x42>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80010e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <lcd_uart_init+0x8c>)
}
 80010e6:	b002      	add	sp, #8
 80010e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80010ec:	f023 b9e6 	b.w	80244bc <iprintf>
 80010f0:	200026f0 	.word	0x200026f0
 80010f4:	08028a28 	.word	0x08028a28
 80010f8:	20001674 	.word	0x20001674
 80010fc:	40005000 	.word	0x40005000
 8001100:	20001534 	.word	0x20001534
 8001104:	08028a44 	.word	0x08028a44
 8001108:	08028a74 	.word	0x08028a74

0800110c <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800110e:	4a3a      	ldr	r2, [pc, #232]	; (80011f8 <lcd_init+0xec>)
void lcd_init(int baud) {
 8001110:	b08d      	sub	sp, #52	; 0x34
 8001112:	4605      	mov	r5, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8001114:	4b39      	ldr	r3, [pc, #228]	; (80011fc <lcd_init+0xf0>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8001116:	af02      	add	r7, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8001118:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 800111a:	4e39      	ldr	r6, [pc, #228]	; (8001200 <lcd_init+0xf4>)
 800111c:	f10d 0c10 	add.w	ip, sp, #16
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8001120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001124:	e887 0003 	stmia.w	r7, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8001128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112a:	c407      	stmia	r4!, {r0, r1, r2}
 800112c:	f824 3b02 	strh.w	r3, [r4], #2
 8001130:	0c1b      	lsrs	r3, r3, #16
 8001132:	7023      	strb	r3, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001134:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001138:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	int siz, page;
	volatile char *cmd;

	printf("lcd_init: baud=%d\n", baud);
 800113c:	4629      	mov	r1, r5
 800113e:	4831      	ldr	r0, [pc, #196]	; (8001204 <lcd_init+0xf8>)
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001140:	f88c 3000 	strb.w	r3, [ip]
	printf("lcd_init: baud=%d\n", baud);
 8001144:	f023 f9ba 	bl	80244bc <iprintf>
	if (!((baud == 9600) || (baud == 230400))) {
 8001148:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 800114c:	d008      	beq.n	8001160 <lcd_init+0x54>
 800114e:	f5b5 3f61 	cmp.w	r5, #230400	; 0x38400
 8001152:	d005      	beq.n	8001160 <lcd_init+0x54>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 8001154:	4629      	mov	r1, r5
 8001156:	482c      	ldr	r0, [pc, #176]	; (8001208 <lcd_init+0xfc>)
 8001158:	f023 f9b0 	bl	80244bc <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 800115c:	b00d      	add	sp, #52	; 0x34
 800115e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	txdmadone = 0;	// TX is NOT free
 8001160:	2300      	movs	r3, #0
 8001162:	4c2a      	ldr	r4, [pc, #168]	; (800120c <lcd_init+0x100>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8001164:	4639      	mov	r1, r7
 8001166:	2207      	movs	r2, #7
 8001168:	4829      	ldr	r0, [pc, #164]	; (8001210 <lcd_init+0x104>)
	txdmadone = 0;	// TX is NOT free
 800116a:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 800116c:	f00f fdae 	bl	8010ccc <HAL_UART_Transmit_DMA>
 8001170:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8001174:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001178:	b14b      	cbz	r3, 800118e <lcd_init+0x82>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800117a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800117e:	4825      	ldr	r0, [pc, #148]	; (8001214 <lcd_init+0x108>)
 8001180:	f023 f99c 	bl	80244bc <iprintf>
	while (!(txdmadone)) {
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	b92b      	cbnz	r3, 8001194 <lcd_init+0x88>
		osDelay(1);		// wait for comms to complete
 8001188:	2001      	movs	r0, #1
 800118a:	f013 f83b 	bl	8014204 <osDelay>
	while (!(txdmadone)) {
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f9      	beq.n	8001188 <lcd_init+0x7c>
	txdmadone = 0;	// TX is NOT free
 8001194:	2300      	movs	r3, #0
	osDelay(800);
 8001196:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 800119a:	6023      	str	r3, [r4, #0]
	osDelay(800);
 800119c:	f013 f832 	bl	8014204 <osDelay>
	if (baud == 9600)
 80011a0:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 80011a4:	d017      	beq.n	80011d6 <lcd_init+0xca>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 80011a6:	220e      	movs	r2, #14
 80011a8:	a908      	add	r1, sp, #32
 80011aa:	4819      	ldr	r0, [pc, #100]	; (8001210 <lcd_init+0x104>)
 80011ac:	f00f fd8e 	bl	8010ccc <HAL_UART_Transmit_DMA>
 80011b0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80011b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011b8:	b11b      	cbz	r3, 80011c2 <lcd_init+0xb6>
 80011ba:	e017      	b.n	80011ec <lcd_init+0xe0>
		osDelay(1);		// wait for comms to complete
 80011bc:	2001      	movs	r0, #1
 80011be:	f013 f821 	bl	8014204 <osDelay>
	while (!(txdmadone)) {
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f9      	beq.n	80011bc <lcd_init+0xb0>
	txdmadone = 0;	// TX is NOT free
 80011c8:	2300      	movs	r3, #0
	osDelay(120);
 80011ca:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 80011cc:	6023      	str	r3, [r4, #0]
	osDelay(120);
 80011ce:	f013 f819 	bl	8014204 <osDelay>
}
 80011d2:	b00d      	add	sp, #52	; 0x34
 80011d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 80011d6:	220c      	movs	r2, #12
 80011d8:	a904      	add	r1, sp, #16
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <lcd_init+0x104>)
 80011dc:	f00f fd76 	bl	8010ccc <HAL_UART_Transmit_DMA>
 80011e0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80011e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0ea      	beq.n	80011c2 <lcd_init+0xb6>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80011ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <lcd_init+0x108>)
 80011f2:	f023 f963 	bl	80244bc <iprintf>
 80011f6:	e7e4      	b.n	80011c2 <lcd_init+0xb6>
 80011f8:	08028b1c 	.word	0x08028b1c
 80011fc:	08028b24 	.word	0x08028b24
 8001200:	08028b34 	.word	0x08028b34
 8001204:	08028aa4 	.word	0x08028aa4
 8001208:	08028ab8 	.word	0x08028ab8
 800120c:	20001c6c 	.word	0x20001c6c
 8001210:	200026f0 	.word	0x200026f0
 8001214:	08028aec 	.word	0x08028aec

08001218 <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 8001218:	b530      	push	{r4, r5, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 800121e:	f7ff fef5 	bl	800100c <wait_armtx>
 8001222:	4605      	mov	r5, r0
 8001224:	3001      	adds	r0, #1
 8001226:	d01d      	beq.n	8001264 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <lcd_puts+0x60>)
 800122c:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 800122e:	9b01      	ldr	r3, [sp, #4]
 8001230:	5ce3      	ldrb	r3, [r4, r3]
 8001232:	b153      	cbz	r3, 800124a <lcd_puts+0x32>
		buffer[i] = str[i];
 8001234:	9901      	ldr	r1, [sp, #4]
 8001236:	9a01      	ldr	r2, [sp, #4]
		i++;
 8001238:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 800123a:	5c61      	ldrb	r1, [r4, r1]
		i++;
 800123c:	3301      	adds	r3, #1
		buffer[i] = str[i];
 800123e:	5481      	strb	r1, [r0, r2]
		i++;
 8001240:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 8001242:	9b01      	ldr	r3, [sp, #4]
 8001244:	5ce3      	ldrb	r3, [r4, r3]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f4      	bne.n	8001234 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 800124a:	9901      	ldr	r1, [sp, #4]
 800124c:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 800124e:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 8001250:	4c0a      	ldr	r4, [pc, #40]	; (800127c <lcd_puts+0x64>)
	buffer[i] = '\0';
 8001252:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001254:	b292      	uxth	r2, r2
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <lcd_puts+0x60>)
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 800125a:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 800125c:	f00f fd36 	bl	8010ccc <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8001260:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 8001262:	b910      	cbnz	r0, 800126a <lcd_puts+0x52>
	}
	return (stat);
}
 8001264:	4628      	mov	r0, r5
 8001266:	b003      	add	sp, #12
 8001268:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800126a:	4629      	mov	r1, r5
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <lcd_puts+0x6c>)
 800126e:	f023 f925 	bl	80244bc <iprintf>
}
 8001272:	4628      	mov	r0, r5
 8001274:	b003      	add	sp, #12
 8001276:	bd30      	pop	{r4, r5, pc}
 8001278:	200014d4 	.word	0x200014d4
 800127c:	20001c6c 	.word	0x20001c6c
 8001280:	200026f0 	.word	0x200026f0
 8001284:	08028b44 	.word	0x08028b44

08001288 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 8001288:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 800128a:	2300      	movs	r3, #0
int lcd_rxdma() {
 800128c:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <lcd_rxdma+0x64>)
	volatile int count = 0;
 8001290:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 8001292:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001294:	6953      	ldr	r3, [r2, #20]
 8001296:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800129a:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 800129c:	9a01      	ldr	r2, [sp, #4]
 800129e:	2a80      	cmp	r2, #128	; 0x80
 80012a0:	d016      	beq.n	80012d0 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80012a2:	4d13      	ldr	r5, [pc, #76]	; (80012f0 <lcd_rxdma+0x68>)
 80012a4:	9a01      	ldr	r2, [sp, #4]
 80012a6:	682b      	ldr	r3, [r5, #0]
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d00e      	beq.n	80012ca <lcd_rxdma+0x42>
 80012ac:	4c11      	ldr	r4, [pc, #68]	; (80012f4 <lcd_rxdma+0x6c>)
 80012ae:	4812      	ldr	r0, [pc, #72]	; (80012f8 <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 80012b0:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 80012b2:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 80012b4:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 80012b6:	3301      	adds	r3, #1
		count++;
 80012b8:	3201      	adds	r2, #1
		return (0);
 80012ba:	2b80      	cmp	r3, #128	; 0x80
		count++;
 80012bc:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80012be:	9a01      	ldr	r2, [sp, #4]
		return (0);
 80012c0:	bfa8      	it	ge
 80012c2:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d1f3      	bne.n	80012b0 <lcd_rxdma+0x28>
 80012c8:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 80012ca:	9800      	ldr	r0, [sp, #0]
}
 80012cc:	b003      	add	sp, #12
 80012ce:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <lcd_rxdma+0x70>)
 80012d2:	480a      	ldr	r0, [pc, #40]	; (80012fc <lcd_rxdma+0x74>)
 80012d4:	f010 ff3a 	bl	801214c <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 80012d8:	b910      	cbnz	r0, 80012e0 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 80012da:	2300      	movs	r3, #0
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	e7e0      	b.n	80012a2 <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80012e0:	4601      	mov	r1, r0
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <lcd_rxdma+0x78>)
 80012e4:	f023 f8ea 	bl	80244bc <iprintf>
 80012e8:	e7f7      	b.n	80012da <lcd_rxdma+0x52>
 80012ea:	bf00      	nop
 80012ec:	40026000 	.word	0x40026000
 80012f0:	20001674 	.word	0x20001674
 80012f4:	200015f4 	.word	0x200015f4
 80012f8:	20001534 	.word	0x20001534
 80012fc:	200026f0 	.word	0x200026f0
 8001300:	08028b74 	.word	0x08028b74

08001304 <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 8001304:	b500      	push	{lr}
 8001306:	b099      	sub	sp, #100	; 0x64
 8001308:	4601      	mov	r1, r0
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 800130a:	4668      	mov	r0, sp
 800130c:	f023 faef 	bl	80248ee <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001310:	4907      	ldr	r1, [pc, #28]	; (8001330 <writelcdcmd+0x2c>)
	if (!(lcd_txblocked))
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <writelcdcmd+0x30>)
	strcpy(pkt, str);
 8001314:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8001316:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8001318:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 800131a:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 800131c:	b92b      	cbnz	r3, 800132a <writelcdcmd+0x26>
		return (lcd_puts(pkt));
 800131e:	4668      	mov	r0, sp
 8001320:	f7ff ff7a 	bl	8001218 <lcd_puts>
	else
		return (-1);
}
 8001324:	b019      	add	sp, #100	; 0x64
 8001326:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 800132a:	f04f 30ff 	mov.w	r0, #4294967295
 800132e:	e7f9      	b.n	8001324 <writelcdcmd+0x20>
 8001330:	08028b20 	.word	0x08028b20
 8001334:	200015f0 	.word	0x200015f0

08001338 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 8001338:	b510      	push	{r4, lr}
 800133a:	b0b2      	sub	sp, #200	; 0xc8
	int i;
	char str[96];
	volatile int result = 0;
 800133c:	2400      	movs	r4, #0
int setlcdtext(char id[], char string[]) {
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1

	sprintf(str, "%s=\"%s\"", id, string);
 8001342:	a802      	add	r0, sp, #8
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <setlcdtext+0x40>)
	volatile int result = 0;
 8001346:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8001348:	f023 fa40 	bl	80247cc <siprintf>
	strcpy(pkt, str);
 800134c:	a902      	add	r1, sp, #8
 800134e:	a81a      	add	r0, sp, #104	; 0x68
 8001350:	f023 facd 	bl	80248ee <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001354:	4909      	ldr	r1, [pc, #36]	; (800137c <setlcdtext+0x44>)
	if (!(lcd_txblocked))
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <setlcdtext+0x48>)
	strcpy(pkt, str);
 8001358:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 800135a:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 800135c:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 800135e:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8001360:	b933      	cbnz	r3, 8001370 <setlcdtext+0x38>
		return (lcd_puts(pkt));
 8001362:	a81a      	add	r0, sp, #104	; 0x68
 8001364:	f7ff ff58 	bl	8001218 <lcd_puts>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 8001368:	9001      	str	r0, [sp, #4]
	return (result);
 800136a:	9801      	ldr	r0, [sp, #4]
}
 800136c:	b032      	add	sp, #200	; 0xc8
 800136e:	bd10      	pop	{r4, pc}
		return (-1);
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	e7f8      	b.n	8001368 <setlcdtext+0x30>
 8001376:	bf00      	nop
 8001378:	08028ba4 	.word	0x08028ba4
 800137c:	08028b20 	.word	0x08028b20
 8001380:	200015f0 	.word	0x200015f0

08001384 <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 8001384:	b500      	push	{lr}
 8001386:	b0a1      	sub	sp, #132	; 0x84
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 800138c:	4911      	ldr	r1, [pc, #68]	; (80013d4 <setlcdbin+0x50>)
 800138e:	4668      	mov	r0, sp
 8001390:	f023 fa1c 	bl	80247cc <siprintf>
	strcpy(pkt, str);
 8001394:	4669      	mov	r1, sp
 8001396:	a808      	add	r0, sp, #32
 8001398:	f023 faa9 	bl	80248ee <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 800139c:	490e      	ldr	r1, [pc, #56]	; (80013d8 <setlcdbin+0x54>)
	if (!(lcd_txblocked))
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <setlcdbin+0x58>)
	strcpy(pkt, str);
 80013a0:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 80013a2:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 80013a4:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 80013a6:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80013a8:	b98b      	cbnz	r3, 80013ce <setlcdbin+0x4a>
		return (lcd_puts(pkt));
 80013aa:	a808      	add	r0, sp, #32
 80013ac:	f7ff ff34 	bl	8001218 <lcd_puts>
	result = writelcdcmd(buffer);
 80013b0:	9008      	str	r0, [sp, #32]
	if (result == -1) {		// wait for response
 80013b2:	9b08      	ldr	r3, [sp, #32]
 80013b4:	3301      	adds	r3, #1
 80013b6:	d003      	beq.n	80013c0 <setlcdbin+0x3c>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
	}
	return (result);
 80013b8:	9808      	ldr	r0, [sp, #32]
}
 80013ba:	b021      	add	sp, #132	; 0x84
 80013bc:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <setlcdbin+0x5c>)
 80013c2:	f023 f87b 	bl	80244bc <iprintf>
	return (result);
 80013c6:	9808      	ldr	r0, [sp, #32]
}
 80013c8:	b021      	add	sp, #132	; 0x84
 80013ca:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 80013ce:	f04f 30ff 	mov.w	r0, #4294967295
 80013d2:	e7ed      	b.n	80013b0 <setlcdbin+0x2c>
 80013d4:	08028bac 	.word	0x08028bac
 80013d8:	08028b20 	.word	0x08028b20
 80013dc:	200015f0 	.word	0x200015f0
 80013e0:	08028bb4 	.word	0x08028bb4

080013e4 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80013e4:	b570      	push	{r4, r5, r6, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 80013e6:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <isnexpkt+0xb4>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80013e8:	b082      	sub	sp, #8
	if (lastidx != lcdrxoutidx) {		// something there
 80013ea:	4c2c      	ldr	r4, [pc, #176]	; (800149c <isnexpkt+0xb8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6822      	ldr	r2, [r4, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d04f      	beq.n	8001494 <isnexpkt+0xb0>
	if (++index >= limit)
 80013f4:	1c53      	adds	r3, r2, #1
		rxtimeout = 100;
 80013f6:	4d2a      	ldr	r5, [pc, #168]	; (80014a0 <isnexpkt+0xbc>)
		return (0);
 80013f8:	2b80      	cmp	r3, #128	; 0x80
 80013fa:	bfa8      	it	ge
 80013fc:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80013fe:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 8001400:	2364      	movs	r3, #100	; 0x64
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 8001402:	4c28      	ldr	r4, [pc, #160]	; (80014a4 <isnexpkt+0xc0>)
		rxtimeout = 100;
 8001404:	602b      	str	r3, [r5, #0]
		ch = lcdrxbuffer[lastidx];
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <isnexpkt+0xc4>)
 8001408:	5c9b      	ldrb	r3, [r3, r2]
		ch = rawchar & 0xff;
 800140a:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 800140e:	7823      	ldrb	r3, [r4, #0]
 8001410:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001414:	54c2      	strb	r2, [r0, r3]
 8001416:	3301      	adds	r3, #1
		if (ch == 0xff) {
 8001418:	f89d 2007 	ldrb.w	r2, [sp, #7]
		buffer[i++] = ch;
 800141c:	b2db      	uxtb	r3, r3
		if (ch == 0xff) {
 800141e:	2aff      	cmp	r2, #255	; 0xff
		buffer[i++] = ch;
 8001420:	7023      	strb	r3, [r4, #0]
		if (ch == 0xff) {
 8001422:	d021      	beq.n	8001468 <isnexpkt+0x84>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8001424:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8001428:	4a20      	ldr	r2, [pc, #128]	; (80014ac <isnexpkt+0xc8>)
 800142a:	7016      	strb	r6, [r2, #0]
			termcnt = 0;
 800142c:	2200      	movs	r2, #0
 800142e:	4e20      	ldr	r6, [pc, #128]	; (80014b0 <isnexpkt+0xcc>)
 8001430:	7032      	strb	r2, [r6, #0]
		}

		if (i == size) { // overrun
 8001432:	428b      	cmp	r3, r1
 8001434:	d027      	beq.n	8001486 <isnexpkt+0xa2>
			i = 0;
			termcnt = 0;
		}
	}
	if (rxtimeout > 0)
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	b133      	cbz	r3, 8001448 <isnexpkt+0x64>
		rxtimeout--;
 800143a:	3b01      	subs	r3, #1
 800143c:	602b      	str	r3, [r5, #0]
	if (rxtimeout == 0) {
 800143e:	b11b      	cbz	r3, 8001448 <isnexpkt+0x64>
		for (i = 0; i < size; buffer[i++] = 0)
			;
		i = 0;
		return (-1);
	}
	return (-2);  // no char available
 8001440:	f06f 0001 	mvn.w	r0, #1
}
 8001444:	b002      	add	sp, #8
 8001446:	bd70      	pop	{r4, r5, r6, pc}
		termcnt = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <isnexpkt+0xcc>)
		for (i = 0; i < size; buffer[i++] = 0)
 800144c:	4c15      	ldr	r4, [pc, #84]	; (80014a4 <isnexpkt+0xc0>)
		termcnt = 0;
 800144e:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 8001450:	7023      	strb	r3, [r4, #0]
 8001452:	b119      	cbz	r1, 800145c <isnexpkt+0x78>
 8001454:	460a      	mov	r2, r1
 8001456:	4619      	mov	r1, r3
 8001458:	f022 f894 	bl	8023584 <memset>
		i = 0;
 800145c:	2300      	movs	r3, #0
		return (-1);
 800145e:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 8001462:	7023      	strb	r3, [r4, #0]
}
 8001464:	b002      	add	sp, #8
 8001466:	bd70      	pop	{r4, r5, r6, pc}
			termcnt++;
 8001468:	4e11      	ldr	r6, [pc, #68]	; (80014b0 <isnexpkt+0xcc>)
 800146a:	7832      	ldrb	r2, [r6, #0]
 800146c:	3201      	adds	r2, #1
 800146e:	b2d2      	uxtb	r2, r2
			if (termcnt == 3) {
 8001470:	2a03      	cmp	r2, #3
			termcnt++;
 8001472:	7032      	strb	r2, [r6, #0]
			if (termcnt == 3) {
 8001474:	d1dd      	bne.n	8001432 <isnexpkt+0x4e>
				printf(" # ");		// found terminator
 8001476:	480f      	ldr	r0, [pc, #60]	; (80014b4 <isnexpkt+0xd0>)
 8001478:	f023 f820 	bl	80244bc <iprintf>
				i = 0;
 800147c:	2300      	movs	r3, #0
				index = i;
 800147e:	7820      	ldrb	r0, [r4, #0]
				termcnt = 0;
 8001480:	7033      	strb	r3, [r6, #0]
				i = 0;
 8001482:	7023      	strb	r3, [r4, #0]
				return (index);
 8001484:	e7de      	b.n	8001444 <isnexpkt+0x60>
			i = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 800148a:	7033      	strb	r3, [r6, #0]
	if (rxtimeout > 0)
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1d3      	bne.n	800143a <isnexpkt+0x56>
 8001492:	e7d9      	b.n	8001448 <isnexpkt+0x64>
 8001494:	4d02      	ldr	r5, [pc, #8]	; (80014a0 <isnexpkt+0xbc>)
 8001496:	e7ce      	b.n	8001436 <isnexpkt+0x52>
 8001498:	20001674 	.word	0x20001674
 800149c:	200015e0 	.word	0x200015e0
 80014a0:	20001a54 	.word	0x20001a54
 80014a4:	200015d8 	.word	0x200015d8
 80014a8:	200015f4 	.word	0x200015f4
 80014ac:	20001a50 	.word	0x20001a50
 80014b0:	20001a58 	.word	0x20001a58
 80014b4:	08028bd0 	.word	0x08028bd0

080014b8 <lcd_time>:

// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80014b8:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <lcd_time+0x7c>)
 80014ba:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80014be:	481e      	ldr	r0, [pc, #120]	; (8001538 <lcd_time+0x80>)
 80014c0:	e9d2 3200 	ldrd	r3, r2, [r2]
void lcd_time() {
 80014c4:	b510      	push	{r4, lr}
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80014c6:	185b      	adds	r3, r3, r1
void lcd_time() {
 80014c8:	b084      	sub	sp, #16
	timeinfo = *localtime(&localepochtime);
 80014ca:	4c1c      	ldr	r4, [pc, #112]	; (800153c <lcd_time+0x84>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80014cc:	f142 0200 	adc.w	r2, r2, #0
 80014d0:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 80014d4:	f021 fef6 	bl	80232c4 <localtime>
 80014d8:	4684      	mov	ip, r0
 80014da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80014de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80014e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e6:	4623      	mov	r3, r4
 80014e8:	f8dc 4000 	ldr.w	r4, [ip]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <lcd_time+0x88>)
 80014ee:	2128      	movs	r1, #40	; 0x28
	timeinfo = *localtime(&localepochtime);
 80014f0:	f843 4920 	str.w	r4, [r3], #-32
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80014f4:	4813      	ldr	r0, [pc, #76]	; (8001544 <lcd_time+0x8c>)
 80014f6:	f023 ff51 	bl	802539c <strftime>
	setlcdtext("t0.txt", buffer);
 80014fa:	4912      	ldr	r1, [pc, #72]	; (8001544 <lcd_time+0x8c>)
 80014fc:	4812      	ldr	r0, [pc, #72]	; (8001548 <lcd_time+0x90>)
 80014fe:	f7ff ff1b 	bl	8001338 <setlcdtext>

	if (gpslocked) {
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <lcd_time+0x94>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b12b      	cbz	r3, 8001514 <lcd_time+0x5c>
		writelcdcmd("vis t3,0");	// hide warning
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <lcd_time+0x98>)
	} else {
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,1");
	}
}
 800150a:	b004      	add	sp, #16
 800150c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		writelcdcmd("vis t3,0");	// hide warning
 8001510:	f7ff bef8 	b.w	8001304 <writelcdcmd>
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <lcd_time+0x9c>)
 8001516:	4668      	mov	r0, sp
 8001518:	490f      	ldr	r1, [pc, #60]	; (8001558 <lcd_time+0xa0>)
 800151a:	7eda      	ldrb	r2, [r3, #27]
 800151c:	f023 f956 	bl	80247cc <siprintf>
		setlcdtext("t3.txt", str);
 8001520:	4669      	mov	r1, sp
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <lcd_time+0xa4>)
 8001524:	f7ff ff08 	bl	8001338 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <lcd_time+0xa8>)
 800152a:	f7ff feeb 	bl	8001304 <writelcdcmd>
}
 800152e:	b004      	add	sp, #16
 8001530:	bd10      	pop	{r4, pc}
 8001532:	bf00      	nop
 8001534:	200029d8 	.word	0x200029d8
 8001538:	20001680 	.word	0x20001680
 800153c:	20001a5c 	.word	0x20001a5c
 8001540:	08028bd4 	.word	0x08028bd4
 8001544:	200014ac 	.word	0x200014ac
 8001548:	08028be0 	.word	0x08028be0
 800154c:	20002cd0 	.word	0x20002cd0
 8001550:	08028be8 	.word	0x08028be8
 8001554:	20002b24 	.word	0x20002b24
 8001558:	08028bf4 	.word	0x08028bf4
 800155c:	08028c04 	.word	0x08028c04
 8001560:	08028c0c 	.word	0x08028c0c

08001564 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <lcd_date+0x50>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001566:	2128      	movs	r1, #40	; 0x28
	lastday = timeinfo.tm_yday;
 8001568:	4813      	ldr	r0, [pc, #76]	; (80015b8 <lcd_date+0x54>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 800156a:	4a14      	ldr	r2, [pc, #80]	; (80015bc <lcd_date+0x58>)
void lcd_date() {
 800156c:	b510      	push	{r4, lr}
	lastday = timeinfo.tm_yday;
 800156e:	69dc      	ldr	r4, [r3, #28]
void lcd_date() {
 8001570:	b0b2      	sub	sp, #200	; 0xc8
	lastday = timeinfo.tm_yday;
 8001572:	6004      	str	r4, [r0, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <lcd_date+0x5c>)
 8001576:	f023 ff11 	bl	802539c <strftime>
	volatile int result = 0;
 800157a:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <lcd_date+0x5c>)
 800157e:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <lcd_date+0x60>)
 8001580:	4911      	ldr	r1, [pc, #68]	; (80015c8 <lcd_date+0x64>)
	volatile int result = 0;
 8001582:	9001      	str	r0, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8001584:	a802      	add	r0, sp, #8
 8001586:	f023 f921 	bl	80247cc <siprintf>
	strcpy(pkt, str);
 800158a:	a902      	add	r1, sp, #8
 800158c:	a81a      	add	r0, sp, #104	; 0x68
 800158e:	f023 f9ae 	bl	80248ee <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001592:	490e      	ldr	r1, [pc, #56]	; (80015cc <lcd_date+0x68>)
	if (!(lcd_txblocked))
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <lcd_date+0x6c>)
	strcpy(pkt, str);
 8001596:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8001598:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 800159a:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 800159c:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 800159e:	b933      	cbnz	r3, 80015ae <lcd_date+0x4a>
		return (lcd_puts(pkt));
 80015a0:	a81a      	add	r0, sp, #104	; 0x68
 80015a2:	f7ff fe39 	bl	8001218 <lcd_puts>
	result = writelcdcmd(str);
 80015a6:	9001      	str	r0, [sp, #4]
	return (result);
 80015a8:	9b01      	ldr	r3, [sp, #4]
	setlcdtext("t1.txt", buffer);
}
 80015aa:	b032      	add	sp, #200	; 0xc8
 80015ac:	bd10      	pop	{r4, pc}
		return (-1);
 80015ae:	f04f 30ff 	mov.w	r0, #4294967295
 80015b2:	e7f8      	b.n	80015a6 <lcd_date+0x42>
 80015b4:	20001a5c 	.word	0x20001a5c
 80015b8:	200015dc 	.word	0x200015dc
 80015bc:	08028c18 	.word	0x08028c18
 80015c0:	200014ac 	.word	0x200014ac
 80015c4:	08028c28 	.word	0x08028c28
 80015c8:	08028ba4 	.word	0x08028ba4
 80015cc:	08028b20 	.word	0x08028b20
 80015d0:	200015f0 	.word	0x200015f0

080015d4 <lcd_showvars>:

// populate the page2 vars
void lcd_showvars() {
 80015d4:	b530      	push	{r4, r5, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 80015d6:	4c62      	ldr	r4, [pc, #392]	; (8001760 <lcd_showvars+0x18c>)
void lcd_showvars() {
 80015d8:	b09f      	sub	sp, #124	; 0x7c
	switch (toggle) {
 80015da:	8823      	ldrh	r3, [r4, #0]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d81f      	bhi.n	8001620 <lcd_showvars+0x4c>
 80015e0:	e8df f003 	tbb	[pc, r3]
 80015e4:	02203760 	.word	0x02203760
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, pcb,
 80015e8:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <lcd_showvars+0x190>)
 80015ea:	495f      	ldr	r1, [pc, #380]	; (8001768 <lcd_showvars+0x194>)
 80015ec:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 80015f0:	6808      	ldr	r0, [r1, #0]
 80015f2:	9204      	str	r2, [sp, #16]
 80015f4:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 80015f8:	9203      	str	r2, [sp, #12]
 80015fa:	f242 722b 	movw	r2, #10027	; 0x272b
 80015fe:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 8001602:	230f      	movs	r3, #15
 8001604:	e9cd 2000 	strd	r2, r0, [sp]
 8001608:	9102      	str	r1, [sp, #8]
 800160a:	2200      	movs	r2, #0
 800160c:	4957      	ldr	r1, [pc, #348]	; (800176c <lcd_showvars+0x198>)
 800160e:	a806      	add	r0, sp, #24
 8001610:	f023 f8dc 	bl	80247cc <siprintf>
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
 8001614:	a906      	add	r1, sp, #24
 8001616:	4856      	ldr	r0, [pc, #344]	; (8001770 <lcd_showvars+0x19c>)
 8001618:	f7ff fe8e 	bl	8001338 <setlcdtext>
		toggle = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	8023      	strh	r3, [r4, #0]
		break;
	}
}
 8001620:	b01f      	add	sp, #124	; 0x7c
 8001622:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8001624:	4d53      	ldr	r5, [pc, #332]	; (8001774 <lcd_showvars+0x1a0>)
 8001626:	a806      	add	r0, sp, #24
 8001628:	4953      	ldr	r1, [pc, #332]	; (8001778 <lcd_showvars+0x1a4>)
 800162a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800162c:	f023 f8ce 	bl	80247cc <siprintf>
		setlcdtext("t4.txt", str);
 8001630:	a906      	add	r1, sp, #24
 8001632:	4852      	ldr	r0, [pc, #328]	; (800177c <lcd_showvars+0x1a8>)
 8001634:	f7ff fe80 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 8001638:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800163a:	494f      	ldr	r1, [pc, #316]	; (8001778 <lcd_showvars+0x1a4>)
 800163c:	a806      	add	r0, sp, #24
 800163e:	f023 f8c5 	bl	80247cc <siprintf>
		setlcdtext("t5.txt", str);
 8001642:	a906      	add	r1, sp, #24
 8001644:	484e      	ldr	r0, [pc, #312]	; (8001780 <lcd_showvars+0x1ac>)
 8001646:	f7ff fe77 	bl	8001338 <setlcdtext>
		toggle = 3;
 800164a:	2303      	movs	r3, #3
 800164c:	8023      	strh	r3, [r4, #0]
}
 800164e:	b01f      	add	sp, #124	; 0x7c
 8001650:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 8001652:	4d48      	ldr	r5, [pc, #288]	; (8001774 <lcd_showvars+0x1a0>)
 8001654:	a806      	add	r0, sp, #24
 8001656:	4948      	ldr	r1, [pc, #288]	; (8001778 <lcd_showvars+0x1a4>)
 8001658:	7eea      	ldrb	r2, [r5, #27]
 800165a:	f023 f8b7 	bl	80247cc <siprintf>
		setlcdtext("t0.txt", str);
 800165e:	a906      	add	r1, sp, #24
 8001660:	4848      	ldr	r0, [pc, #288]	; (8001784 <lcd_showvars+0x1b0>)
 8001662:	f7ff fe69 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 8001666:	6a2a      	ldr	r2, [r5, #32]
 8001668:	4943      	ldr	r1, [pc, #268]	; (8001778 <lcd_showvars+0x1a4>)
 800166a:	a806      	add	r0, sp, #24
 800166c:	f023 f8ae 	bl	80247cc <siprintf>
		setlcdtext("t1.txt", str);
 8001670:	a906      	add	r1, sp, #24
 8001672:	4845      	ldr	r0, [pc, #276]	; (8001788 <lcd_showvars+0x1b4>)
 8001674:	f7ff fe60 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 8001678:	69ea      	ldr	r2, [r5, #28]
 800167a:	493f      	ldr	r1, [pc, #252]	; (8001778 <lcd_showvars+0x1a4>)
 800167c:	a806      	add	r0, sp, #24
 800167e:	f023 f8a5 	bl	80247cc <siprintf>
		setlcdtext("t2.txt", str);
 8001682:	a906      	add	r1, sp, #24
 8001684:	4841      	ldr	r0, [pc, #260]	; (800178c <lcd_showvars+0x1b8>)
 8001686:	f7ff fe57 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 800168a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800168c:	493a      	ldr	r1, [pc, #232]	; (8001778 <lcd_showvars+0x1a4>)
 800168e:	a806      	add	r0, sp, #24
 8001690:	f023 f89c 	bl	80247cc <siprintf>
		setlcdtext("t3.txt", str);
 8001694:	a906      	add	r1, sp, #24
 8001696:	483e      	ldr	r0, [pc, #248]	; (8001790 <lcd_showvars+0x1bc>)
 8001698:	f7ff fe4e 	bl	8001338 <setlcdtext>
		toggle = 2;
 800169c:	2302      	movs	r3, #2
 800169e:	8023      	strh	r3, [r4, #0]
}
 80016a0:	b01f      	add	sp, #124	; 0x7c
 80016a2:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80016a4:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <lcd_showvars+0x1c0>)
 80016a6:	a806      	add	r0, sp, #24
		sprintf(str, "%d", statuspkt.uid);
 80016a8:	4d32      	ldr	r5, [pc, #200]	; (8001774 <lcd_showvars+0x1a0>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	0e11      	lsrs	r1, r2, #24
 80016ae:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80016b2:	e9cd 3100 	strd	r3, r1, [sp]
 80016b6:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80016ba:	4937      	ldr	r1, [pc, #220]	; (8001798 <lcd_showvars+0x1c4>)
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	f023 f885 	bl	80247cc <siprintf>
		setlcdtext("t11.txt", str);
 80016c2:	a906      	add	r1, sp, #24
 80016c4:	4835      	ldr	r0, [pc, #212]	; (800179c <lcd_showvars+0x1c8>)
 80016c6:	f7ff fe37 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", statuspkt.uid);
 80016ca:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
 80016ce:	492a      	ldr	r1, [pc, #168]	; (8001778 <lcd_showvars+0x1a4>)
 80016d0:	a806      	add	r0, sp, #24
 80016d2:	b292      	uxth	r2, r2
 80016d4:	f023 f87a 	bl	80247cc <siprintf>
		setlcdtext("t10.txt", str);
 80016d8:	a906      	add	r1, sp, #24
 80016da:	4831      	ldr	r0, [pc, #196]	; (80017a0 <lcd_showvars+0x1cc>)
 80016dc:	f7ff fe2c 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcpktssent);
 80016e0:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 80016e4:	4924      	ldr	r1, [pc, #144]	; (8001778 <lcd_showvars+0x1a4>)
 80016e6:	a806      	add	r0, sp, #24
 80016e8:	b292      	uxth	r2, r2
 80016ea:	f023 f86f 	bl	80247cc <siprintf>
		setlcdtext("t9.txt", str);
 80016ee:	a906      	add	r1, sp, #24
 80016f0:	482c      	ldr	r0, [pc, #176]	; (80017a4 <lcd_showvars+0x1d0>)
 80016f2:	f7ff fe21 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <lcd_showvars+0x1d4>)
 80016f8:	491f      	ldr	r1, [pc, #124]	; (8001778 <lcd_showvars+0x1a4>)
 80016fa:	a806      	add	r0, sp, #24
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001702:	f023 f863 	bl	80247cc <siprintf>
		setlcdtext("t8.txt", str);
 8001706:	a906      	add	r1, sp, #24
 8001708:	4828      	ldr	r0, [pc, #160]	; (80017ac <lcd_showvars+0x1d8>)
 800170a:	f7ff fe15 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800170e:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <lcd_showvars+0x1dc>)
 8001710:	4919      	ldr	r1, [pc, #100]	; (8001778 <lcd_showvars+0x1a4>)
 8001712:	a806      	add	r0, sp, #24
 8001714:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001718:	2a00      	cmp	r2, #0
 800171a:	bfb8      	it	lt
 800171c:	4252      	neglt	r2, r2
 800171e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001722:	f023 f853 	bl	80247cc <siprintf>
		setlcdtext("t7.txt", str);
 8001726:	a906      	add	r1, sp, #24
 8001728:	4822      	ldr	r0, [pc, #136]	; (80017b4 <lcd_showvars+0x1e0>)
 800172a:	f7ff fe05 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", pgagain);	// gain
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <lcd_showvars+0x1e4>)
 8001730:	4911      	ldr	r1, [pc, #68]	; (8001778 <lcd_showvars+0x1a4>)
 8001732:	a806      	add	r0, sp, #24
 8001734:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001738:	f023 f848 	bl	80247cc <siprintf>
		setlcdtext("t6.txt", str);
 800173c:	a906      	add	r1, sp, #24
 800173e:	481f      	ldr	r0, [pc, #124]	; (80017bc <lcd_showvars+0x1e8>)
 8001740:	f7ff fdfa 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 8001744:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8001746:	490c      	ldr	r1, [pc, #48]	; (8001778 <lcd_showvars+0x1a4>)
 8001748:	a806      	add	r0, sp, #24
 800174a:	f023 f83f 	bl	80247cc <siprintf>
		setlcdtext("t24.txt", str);
 800174e:	a906      	add	r1, sp, #24
 8001750:	481b      	ldr	r0, [pc, #108]	; (80017c0 <lcd_showvars+0x1ec>)
 8001752:	f7ff fdf1 	bl	8001338 <setlcdtext>
		toggle = 1;
 8001756:	2301      	movs	r3, #1
 8001758:	8023      	strh	r3, [r4, #0]
}
 800175a:	b01f      	add	sp, #124	; 0x7c
 800175c:	bd30      	pop	{r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	20001a80 	.word	0x20001a80
 8001764:	1ff0f000 	.word	0x1ff0f000
 8001768:	20002928 	.word	0x20002928
 800176c:	08028c90 	.word	0x08028c90
 8001770:	08028cbc 	.word	0x08028cbc
 8001774:	20002b24 	.word	0x20002b24
 8001778:	08028cf4 	.word	0x08028cf4
 800177c:	08028c80 	.word	0x08028c80
 8001780:	08028c88 	.word	0x08028c88
 8001784:	08028be0 	.word	0x08028be0
 8001788:	08028c28 	.word	0x08028c28
 800178c:	08028c78 	.word	0x08028c78
 8001790:	08028c04 	.word	0x08028c04
 8001794:	20002920 	.word	0x20002920
 8001798:	08028c30 	.word	0x08028c30
 800179c:	08028c40 	.word	0x08028c40
 80017a0:	08028c48 	.word	0x08028c48
 80017a4:	08028c50 	.word	0x08028c50
 80017a8:	200006f4 	.word	0x200006f4
 80017ac:	08028c58 	.word	0x08028c58
 80017b0:	20000748 	.word	0x20000748
 80017b4:	08028c60 	.word	0x08028c60
 80017b8:	20002c58 	.word	0x20002c58
 80017bc:	08028c68 	.word	0x08028c68
 80017c0:	08028c70 	.word	0x08028c70

080017c4 <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 80017c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	trigvec[i] = i % 120;
}
#endif

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Triggers");
 80017c8:	4931      	ldr	r1, [pc, #196]	; (8001890 <lcd_trigcharts+0xcc>)
void lcd_trigcharts() {
 80017ca:	b089      	sub	sp, #36	; 0x24
	setlcdtext("t3.txt", "Triggers");
 80017cc:	4831      	ldr	r0, [pc, #196]	; (8001894 <lcd_trigcharts+0xd0>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 80017ce:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Triggers");
 80017d2:	f7ff fdb1 	bl	8001338 <setlcdtext>
	setlcdtext("t18.txt", "Triggers");
 80017d6:	492e      	ldr	r1, [pc, #184]	; (8001890 <lcd_trigcharts+0xcc>)
 80017d8:	482f      	ldr	r0, [pc, #188]	; (8001898 <lcd_trigcharts+0xd4>)
 80017da:	f7ff fdad 	bl	8001338 <setlcdtext>
	setlcdtext("t4.txt", "Noise");
 80017de:	492f      	ldr	r1, [pc, #188]	; (800189c <lcd_trigcharts+0xd8>)
 80017e0:	482f      	ldr	r0, [pc, #188]	; (80018a0 <lcd_trigcharts+0xdc>)
 80017e2:	f7ff fda9 	bl	8001338 <setlcdtext>
	setlcdtext("t1.txt", "Noise");
 80017e6:	492d      	ldr	r1, [pc, #180]	; (800189c <lcd_trigcharts+0xd8>)
 80017e8:	482e      	ldr	r0, [pc, #184]	; (80018a4 <lcd_trigcharts+0xe0>)
 80017ea:	f7ff fda5 	bl	8001338 <setlcdtext>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <lcd_trigcharts+0xe4>)
 80017f0:	492e      	ldr	r1, [pc, #184]	; (80018ac <lcd_trigcharts+0xe8>)
 80017f2:	4668      	mov	r0, sp
 80017f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80017f6:	f022 ffe9 	bl	80247cc <siprintf>
	setlcdtext("t0.txt", str);
 80017fa:	4669      	mov	r1, sp
 80017fc:	482c      	ldr	r0, [pc, #176]	; (80018b0 <lcd_trigcharts+0xec>)
 80017fe:	f7ff fd9b 	bl	8001338 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001802:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <lcd_trigcharts+0xf0>)
 8001804:	4929      	ldr	r1, [pc, #164]	; (80018ac <lcd_trigcharts+0xe8>)
 8001806:	4668      	mov	r0, sp
 8001808:	f9b3 2000 	ldrsh.w	r2, [r3]
 800180c:	4f2a      	ldr	r7, [pc, #168]	; (80018b8 <lcd_trigcharts+0xf4>)
 800180e:	2a00      	cmp	r2, #0
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001810:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80018d4 <lcd_trigcharts+0x110>
 8001814:	4e29      	ldr	r6, [pc, #164]	; (80018bc <lcd_trigcharts+0xf8>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001816:	bfb8      	it	lt
 8001818:	4252      	neglt	r2, r2
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 800181a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80018d8 <lcd_trigcharts+0x114>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800181e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001822:	f022 ffd3 	bl	80247cc <siprintf>
	setlcdtext("t2.txt", str);
 8001826:	4669      	mov	r1, sp
 8001828:	4825      	ldr	r0, [pc, #148]	; (80018c0 <lcd_trigcharts+0xfc>)
 800182a:	f7ff fd85 	bl	8001338 <setlcdtext>
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 800182e:	4825      	ldr	r0, [pc, #148]	; (80018c4 <lcd_trigcharts+0x100>)
 8001830:	f7ff fd68 	bl	8001304 <writelcdcmd>
	buffi = trigindex;
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <lcd_trigcharts+0x104>)
 8001836:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8001838:	e01c      	b.n	8001874 <lcd_trigcharts+0xb0>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 800183a:	f819 2004 	ldrb.w	r2, [r9, r4]
 800183e:	f022 ffc5 	bl	80247cc <siprintf>
		writelcdcmd(str);
 8001842:	4668      	mov	r0, sp
 8001844:	f7ff fd5e 	bl	8001304 <writelcdcmd>
		osDelay(15);
 8001848:	200f      	movs	r0, #15
 800184a:	f012 fcdb 	bl	8014204 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 800184e:	f818 2004 	ldrb.w	r2, [r8, r4]
 8001852:	491e      	ldr	r1, [pc, #120]	; (80018cc <lcd_trigcharts+0x108>)
 8001854:	4668      	mov	r0, sp
 8001856:	f022 ffb9 	bl	80247cc <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 800185a:	3401      	adds	r4, #1
		writelcdcmd(str);
 800185c:	4668      	mov	r0, sp
 800185e:	f7ff fd51 	bl	8001304 <writelcdcmd>
		osDelay(15);
 8001862:	200f      	movs	r0, #15
 8001864:	f012 fcce 	bl	8014204 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8001868:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 800186c:	bfc8      	it	gt
 800186e:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8001870:	3d01      	subs	r5, #1
 8001872:	d007      	beq.n	8001884 <lcd_trigcharts+0xc0>
		if (our_currentpage != 2)		// impatient user
 8001874:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001876:	4631      	mov	r1, r6
 8001878:	4668      	mov	r0, sp
		if (our_currentpage != 2)		// impatient user
 800187a:	2b02      	cmp	r3, #2
 800187c:	d0dd      	beq.n	800183a <lcd_trigcharts+0x76>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 800187e:	b009      	add	sp, #36	; 0x24
 8001880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8001884:	4812      	ldr	r0, [pc, #72]	; (80018d0 <lcd_trigcharts+0x10c>)
 8001886:	f7ff fd3d 	bl	8001304 <writelcdcmd>
}
 800188a:	b009      	add	sp, #36	; 0x24
 800188c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001890:	08028cc4 	.word	0x08028cc4
 8001894:	08028c04 	.word	0x08028c04
 8001898:	08028cd0 	.word	0x08028cd0
 800189c:	08028cd8 	.word	0x08028cd8
 80018a0:	08028c80 	.word	0x08028c80
 80018a4:	08028c28 	.word	0x08028c28
 80018a8:	20002b24 	.word	0x20002b24
 80018ac:	08028cf4 	.word	0x08028cf4
 80018b0:	08028be0 	.word	0x08028be0
 80018b4:	20000748 	.word	0x20000748
 80018b8:	20001868 	.word	0x20001868
 80018bc:	08028cec 	.word	0x08028cec
 80018c0:	08028c78 	.word	0x08028c78
 80018c4:	08028ce0 	.word	0x08028ce0
 80018c8:	20001a84 	.word	0x20001a84
 80018cc:	08028cf8 	.word	0x08028cf8
 80018d0:	08028d04 	.word	0x08028d04
 80018d4:	20001a88 	.word	0x20001a88
 80018d8:	20001688 	.word	0x20001688

080018dc <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
void lcd_trigplot() {
 80018dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 80018e0:	493a      	ldr	r1, [pc, #232]	; (80019cc <lcd_trigplot+0xf0>)
void lcd_trigplot() {
 80018e2:	b088      	sub	sp, #32
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 80018e4:	4d3a      	ldr	r5, [pc, #232]	; (80019d0 <lcd_trigplot+0xf4>)
 80018e6:	680b      	ldr	r3, [r1, #0]
 80018e8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 80018ea:	4e3a      	ldr	r6, [pc, #232]	; (80019d4 <lcd_trigplot+0xf8>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 80018ec:	1ad2      	subs	r2, r2, r3

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 80018ee:	483a      	ldr	r0, [pc, #232]	; (80019d8 <lcd_trigplot+0xfc>)
	val = abs(meanwindiff) & 0xfff;
 80018f0:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = val * 32;		// scale up: n pixels per trigger
 80018f4:	0152      	lsls	r2, r2, #5
	lasttrig = statuspkt.trigcount;
 80018f6:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
	trigvec[trigindex] = val;
 80018fa:	4c38      	ldr	r4, [pc, #224]	; (80019dc <lcd_trigplot+0x100>)
 80018fc:	2a77      	cmp	r2, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 80018fe:	7800      	ldrb	r0, [r0, #0]
	trigvec[trigindex] = val;
 8001900:	4f37      	ldr	r7, [pc, #220]	; (80019e0 <lcd_trigplot+0x104>)
 8001902:	bfa8      	it	ge
 8001904:	2277      	movge	r2, #119	; 0x77
	val = abs(meanwindiff) & 0xfff;
 8001906:	2b00      	cmp	r3, #0
	noisevec[trigindex] = val;
 8001908:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001a18 <lcd_trigplot+0x13c>
	val = abs(meanwindiff) & 0xfff;
 800190c:	bfb8      	it	lt
 800190e:	425b      	neglt	r3, r3
	lasttrig = statuspkt.trigcount;
 8001910:	f8c1 c000 	str.w	ip, [r1]
	trigvec[trigindex] = val;
 8001914:	6821      	ldr	r1, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8001916:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 800191a:	547a      	strb	r2, [r7, r1]
	noisevec[trigindex] = val;
 800191c:	2b77      	cmp	r3, #119	; 0x77
 800191e:	bfa8      	it	ge
 8001920:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001922:	2802      	cmp	r0, #2
	noisevec[trigindex] = val;
 8001924:	f808 3001 	strb.w	r3, [r8, r1]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001928:	d00c      	beq.n	8001944 <lcd_trigplot+0x68>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 800192a:	3101      	adds	r1, #1
	if (trigindex >= LCDXPIXELS)
 800192c:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8001930:	da03      	bge.n	800193a <lcd_trigplot+0x5e>
	trigindex++;
 8001932:	6021      	str	r1, [r4, #0]
		trigindex = 0;
}
 8001934:	b008      	add	sp, #32
 8001936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		trigindex = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	6023      	str	r3, [r4, #0]
}
 800193e:	b008      	add	sp, #32
 8001940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		setlcdtext("t3.txt", "Triggers");
 8001944:	4927      	ldr	r1, [pc, #156]	; (80019e4 <lcd_trigplot+0x108>)
 8001946:	4828      	ldr	r0, [pc, #160]	; (80019e8 <lcd_trigplot+0x10c>)
 8001948:	f7ff fcf6 	bl	8001338 <setlcdtext>
		setlcdtext("t18.txt", "Triggers");
 800194c:	4925      	ldr	r1, [pc, #148]	; (80019e4 <lcd_trigplot+0x108>)
 800194e:	4827      	ldr	r0, [pc, #156]	; (80019ec <lcd_trigplot+0x110>)
 8001950:	f7ff fcf2 	bl	8001338 <setlcdtext>
		setlcdtext("t4.txt", "Noise");
 8001954:	4926      	ldr	r1, [pc, #152]	; (80019f0 <lcd_trigplot+0x114>)
 8001956:	4827      	ldr	r0, [pc, #156]	; (80019f4 <lcd_trigplot+0x118>)
 8001958:	f7ff fcee 	bl	8001338 <setlcdtext>
		setlcdtext("t1.txt", "Noise");
 800195c:	4924      	ldr	r1, [pc, #144]	; (80019f0 <lcd_trigplot+0x114>)
 800195e:	4826      	ldr	r0, [pc, #152]	; (80019f8 <lcd_trigplot+0x11c>)
 8001960:	f7ff fcea 	bl	8001338 <setlcdtext>
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	4925      	ldr	r1, [pc, #148]	; (80019fc <lcd_trigplot+0x120>)
 8001968:	4668      	mov	r0, sp
 800196a:	5cfa      	ldrb	r2, [r7, r3]
 800196c:	f022 ff2e 	bl	80247cc <siprintf>
		writelcdcmd(str);
 8001970:	4668      	mov	r0, sp
 8001972:	f7ff fcc7 	bl	8001304 <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	4921      	ldr	r1, [pc, #132]	; (8001a00 <lcd_trigplot+0x124>)
 800197a:	4668      	mov	r0, sp
 800197c:	f818 2003 	ldrb.w	r2, [r8, r3]
 8001980:	f022 ff24 	bl	80247cc <siprintf>
		writelcdcmd(str);
 8001984:	4668      	mov	r0, sp
 8001986:	f7ff fcbd 	bl	8001304 <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 800198a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800198c:	491d      	ldr	r1, [pc, #116]	; (8001a04 <lcd_trigplot+0x128>)
 800198e:	4668      	mov	r0, sp
 8001990:	f022 ff1c 	bl	80247cc <siprintf>
		setlcdtext("t0.txt", str);
 8001994:	4669      	mov	r1, sp
 8001996:	481c      	ldr	r0, [pc, #112]	; (8001a08 <lcd_trigplot+0x12c>)
 8001998:	f7ff fcce 	bl	8001338 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800199c:	f9b6 2000 	ldrsh.w	r2, [r6]
 80019a0:	4918      	ldr	r1, [pc, #96]	; (8001a04 <lcd_trigplot+0x128>)
 80019a2:	4668      	mov	r0, sp
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	bfb8      	it	lt
 80019a8:	4252      	neglt	r2, r2
 80019aa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80019ae:	f022 ff0d 	bl	80247cc <siprintf>
		setlcdtext("t2.txt", str);
 80019b2:	4669      	mov	r1, sp
 80019b4:	4815      	ldr	r0, [pc, #84]	; (8001a0c <lcd_trigplot+0x130>)
 80019b6:	f7ff fcbf 	bl	8001338 <setlcdtext>
		writelcdcmd("vis t3,1");
 80019ba:	4815      	ldr	r0, [pc, #84]	; (8001a10 <lcd_trigplot+0x134>)
 80019bc:	f7ff fca2 	bl	8001304 <writelcdcmd>
		writelcdcmd("vis t4,1");
 80019c0:	4814      	ldr	r0, [pc, #80]	; (8001a14 <lcd_trigplot+0x138>)
 80019c2:	f7ff fc9f 	bl	8001304 <writelcdcmd>
	trigindex++;
 80019c6:	6821      	ldr	r1, [r4, #0]
 80019c8:	e7af      	b.n	800192a <lcd_trigplot+0x4e>
 80019ca:	bf00      	nop
 80019cc:	200015e4 	.word	0x200015e4
 80019d0:	20002b24 	.word	0x20002b24
 80019d4:	20000748 	.word	0x20000748
 80019d8:	20001868 	.word	0x20001868
 80019dc:	20001a84 	.word	0x20001a84
 80019e0:	20001a88 	.word	0x20001a88
 80019e4:	08028cc4 	.word	0x08028cc4
 80019e8:	08028c04 	.word	0x08028c04
 80019ec:	08028cd0 	.word	0x08028cd0
 80019f0:	08028cd8 	.word	0x08028cd8
 80019f4:	08028c80 	.word	0x08028c80
 80019f8:	08028c28 	.word	0x08028c28
 80019fc:	08028cec 	.word	0x08028cec
 8001a00:	08028cf8 	.word	0x08028cf8
 8001a04:	08028cf4 	.word	0x08028cf4
 8001a08:	08028be0 	.word	0x08028be0
 8001a0c:	08028c78 	.word	0x08028c78
 8001a10:	08028c0c 	.word	0x08028c0c
 8001a14:	08028d14 	.word	0x08028d14
 8001a18:	20001688 	.word	0x20001688

08001a1c <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8001a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, buffi;
	unsigned char str[32];

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Pressure");
 8001a20:	4920      	ldr	r1, [pc, #128]	; (8001aa4 <lcd_presscharts+0x88>)
void lcd_presscharts() {
 8001a22:	b088      	sub	sp, #32
	setlcdtext("t3.txt", "Pressure");
 8001a24:	4820      	ldr	r0, [pc, #128]	; (8001aa8 <lcd_presscharts+0x8c>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8001a26:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Pressure");
 8001a2a:	f7ff fc85 	bl	8001338 <setlcdtext>
	setlcdtext("t18.txt", "Pressure");
 8001a2e:	491d      	ldr	r1, [pc, #116]	; (8001aa4 <lcd_presscharts+0x88>)
 8001a30:	481e      	ldr	r0, [pc, #120]	; (8001aac <lcd_presscharts+0x90>)
 8001a32:	f7ff fc81 	bl	8001338 <setlcdtext>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <lcd_presscharts+0x94>)
 8001a38:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <lcd_presscharts+0x98>)
 8001a3a:	4668      	mov	r0, sp
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	491d      	ldr	r1, [pc, #116]	; (8001ab8 <lcd_presscharts+0x9c>)
 8001a44:	f022 fec2 	bl	80247cc <siprintf>
	setlcdtext("t0.txt", str);
 8001a48:	4669      	mov	r1, sp
 8001a4a:	481c      	ldr	r0, [pc, #112]	; (8001abc <lcd_presscharts+0xa0>)
 8001a4c:	f7ff fc74 	bl	8001338 <setlcdtext>
	writelcdcmd("b2.bco=123");		// normal grey
 8001a50:	481b      	ldr	r0, [pc, #108]	; (8001ac0 <lcd_presscharts+0xa4>)
 8001a52:	f7ff fc57 	bl	8001304 <writelcdcmd>
	buffi = pressindex;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <lcd_presscharts+0xa8>)
 8001a58:	4f1b      	ldr	r7, [pc, #108]	; (8001ac8 <lcd_presscharts+0xac>)
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001a5a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001ad4 <lcd_presscharts+0xb8>
	buffi = pressindex;
 8001a5e:	681c      	ldr	r4, [r3, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001a60:	4e1a      	ldr	r6, [pc, #104]	; (8001acc <lcd_presscharts+0xb0>)
 8001a62:	e010      	b.n	8001a86 <lcd_presscharts+0x6a>
 8001a64:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8001a68:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001a6a:	f022 feaf 	bl	80247cc <siprintf>
		writelcdcmd(str);
 8001a6e:	4668      	mov	r0, sp
 8001a70:	f7ff fc48 	bl	8001304 <writelcdcmd>
		osDelay(15);
 8001a74:	200f      	movs	r0, #15
 8001a76:	f012 fbc5 	bl	8014204 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8001a7a:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8001a7e:	bfc8      	it	gt
 8001a80:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8001a82:	3d01      	subs	r5, #1
 8001a84:	d007      	beq.n	8001a96 <lcd_presscharts+0x7a>
		if (our_currentpage != 3)		// impatient user
 8001a86:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001a88:	4631      	mov	r1, r6
 8001a8a:	4668      	mov	r0, sp
		if (our_currentpage != 3)		// impatient user
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d0e9      	beq.n	8001a64 <lcd_presscharts+0x48>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8001a90:	b008      	add	sp, #32
 8001a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <lcd_presscharts+0xb4>)
 8001a98:	f7ff fc34 	bl	8001304 <writelcdcmd>
}
 8001a9c:	b008      	add	sp, #32
 8001a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08028d20 	.word	0x08028d20
 8001aa8:	08028c04 	.word	0x08028c04
 8001aac:	08028cd0 	.word	0x08028cd0
 8001ab0:	20002c5c 	.word	0x20002c5c
 8001ab4:	20002c60 	.word	0x20002c60
 8001ab8:	08028d2c 	.word	0x08028d2c
 8001abc:	08028be0 	.word	0x08028be0
 8001ac0:	08028ce0 	.word	0x08028ce0
 8001ac4:	2000186c 	.word	0x2000186c
 8001ac8:	20001868 	.word	0x20001868
 8001acc:	08028cec 	.word	0x08028cec
 8001ad0:	08028d04 	.word	0x08028d04
 8001ad4:	20001870 	.word	0x20001870

08001ad8 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
void lcd_pressplot() {
 8001ad8:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8001ada:	4d2c      	ldr	r5, [pc, #176]	; (8001b8c <lcd_pressplot+0xb4>)
void lcd_pressplot() {
 8001adc:	b08c      	sub	sp, #48	; 0x30
	p = pressure;
 8001ade:	4c2c      	ldr	r4, [pc, #176]	; (8001b90 <lcd_pressplot+0xb8>)

	p = pressure * 1000 + pf;
 8001ae0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 8001ae4:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 8001ae6:	6821      	ldr	r1, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001ae8:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 8001aea:	482a      	ldr	r0, [pc, #168]	; (8001b94 <lcd_pressplot+0xbc>)
	p = pressure;
 8001aec:	9101      	str	r1, [sp, #4]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001aee:	9202      	str	r2, [sp, #8]
	p = pressure * 1000 + pf;
 8001af0:	9b02      	ldr	r3, [sp, #8]
 8001af2:	fb06 3301 	mla	r3, r6, r1, r3
 8001af6:	9301      	str	r3, [sp, #4]
	if (p < 93000)
 8001af8:	9b01      	ldr	r3, [sp, #4]
 8001afa:	4283      	cmp	r3, r0
 8001afc:	dc01      	bgt.n	8001b02 <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <lcd_pressplot+0xc0>)
 8001b00:	9301      	str	r3, [sp, #4]
	if (p > 103000)
 8001b02:	9a01      	ldr	r2, [sp, #4]
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <lcd_pressplot+0xc4>)
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dd00      	ble.n	8001b0c <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8001b0a:	9b01      	ldr	r3, [sp, #4]

	p = p - 93000;
 8001b0c:	9901      	ldr	r1, [sp, #4]
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <lcd_pressplot+0xc8>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8001b10:	4a24      	ldr	r2, [pc, #144]	; (8001ba4 <lcd_pressplot+0xcc>)
	p = p - 93000;
 8001b12:	440b      	add	r3, r1
 8001b14:	9301      	str	r3, [sp, #4]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8001b16:	9b01      	ldr	r3, [sp, #4]
 8001b18:	fb82 1203 	smull	r1, r2, r2, r3
 8001b1c:	17db      	asrs	r3, r3, #31
 8001b1e:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8001b22:	9303      	str	r3, [sp, #12]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8001b24:	9b03      	ldr	r3, [sp, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	da01      	bge.n	8001b2e <lcd_pressplot+0x56>
		val = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9303      	str	r3, [sp, #12]
	if (val >= 240)
 8001b2e:	9b03      	ldr	r3, [sp, #12]
 8001b30:	2bef      	cmp	r3, #239	; 0xef
 8001b32:	dd01      	ble.n	8001b38 <lcd_pressplot+0x60>
		val = 239;		// max Y
 8001b34:	23ef      	movs	r3, #239	; 0xef
 8001b36:	9303      	str	r3, [sp, #12]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001b38:	491b      	ldr	r1, [pc, #108]	; (8001ba8 <lcd_pressplot+0xd0>)
	pressvec[pressindex] = val;
 8001b3a:	9a03      	ldr	r2, [sp, #12]
 8001b3c:	4e1b      	ldr	r6, [pc, #108]	; (8001bac <lcd_pressplot+0xd4>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001b3e:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8001b40:	6833      	ldr	r3, [r6, #0]
 8001b42:	481b      	ldr	r0, [pc, #108]	; (8001bb0 <lcd_pressplot+0xd8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001b44:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8001b46:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001b48:	d007      	beq.n	8001b5a <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8001b4a:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8001b4c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8001b50:	bfa8      	it	ge
 8001b52:	2300      	movge	r3, #0
 8001b54:	6033      	str	r3, [r6, #0]
}
 8001b56:	b00c      	add	sp, #48	; 0x30
 8001b58:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	4915      	ldr	r1, [pc, #84]	; (8001bb4 <lcd_pressplot+0xdc>)
 8001b5e:	a804      	add	r0, sp, #16
 8001b60:	f022 fe34 	bl	80247cc <siprintf>
		writelcdcmd(str);
 8001b64:	a804      	add	r0, sp, #16
 8001b66:	f7ff fbcd 	bl	8001304 <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8001b6a:	682b      	ldr	r3, [r5, #0]
 8001b6c:	6822      	ldr	r2, [r4, #0]
 8001b6e:	a804      	add	r0, sp, #16
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	4911      	ldr	r1, [pc, #68]	; (8001bb8 <lcd_pressplot+0xe0>)
 8001b74:	f022 fe2a 	bl	80247cc <siprintf>
		setlcdtext("t0.txt", str);
 8001b78:	a904      	add	r1, sp, #16
 8001b7a:	4810      	ldr	r0, [pc, #64]	; (8001bbc <lcd_pressplot+0xe4>)
 8001b7c:	f7ff fbdc 	bl	8001338 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001b80:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <lcd_pressplot+0xe8>)
 8001b82:	f7ff fbbf 	bl	8001304 <writelcdcmd>
	pressindex++;
 8001b86:	6833      	ldr	r3, [r6, #0]
 8001b88:	e7df      	b.n	8001b4a <lcd_pressplot+0x72>
 8001b8a:	bf00      	nop
 8001b8c:	20002c5c 	.word	0x20002c5c
 8001b90:	20002c60 	.word	0x20002c60
 8001b94:	00016b47 	.word	0x00016b47
 8001b98:	00016b48 	.word	0x00016b48
 8001b9c:	00019258 	.word	0x00019258
 8001ba0:	fffe94b8 	.word	0xfffe94b8
 8001ba4:	63e7063f 	.word	0x63e7063f
 8001ba8:	20001868 	.word	0x20001868
 8001bac:	2000186c 	.word	0x2000186c
 8001bb0:	20001870 	.word	0x20001870
 8001bb4:	08028cec 	.word	0x08028cec
 8001bb8:	08028d2c 	.word	0x08028d2c
 8001bbc:	08028be0 	.word	0x08028be0
 8001bc0:	08028c0c 	.word	0x08028c0c

08001bc4 <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 8001bc4:	b500      	push	{lr}
	unsigned char str[48];

	osDelay(100);
 8001bc6:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 8001bc8:	b08d      	sub	sp, #52	; 0x34
	osDelay(100);
 8001bca:	f012 fb1b 	bl	8014204 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <lcd_controls+0x48>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d002      	beq.n	8001bdc <lcd_controls+0x18>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 8001bd6:	b00d      	add	sp, #52	; 0x34
 8001bd8:	f85d fb04 	ldr.w	pc, [sp], #4
		setlcdtext("t0.txt", "Sound");
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <lcd_controls+0x4c>)
 8001bde:	480d      	ldr	r0, [pc, #52]	; (8001c14 <lcd_controls+0x50>)
 8001be0:	f7ff fbaa 	bl	8001338 <setlcdtext>
		setlcdtext("t1.txt", "LEDS");
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <lcd_controls+0x54>)
 8001be6:	480d      	ldr	r0, [pc, #52]	; (8001c1c <lcd_controls+0x58>)
 8001be8:	f7ff fba6 	bl	8001338 <setlcdtext>
		setlcdtext("t2.txt", "LCD Brightness");
 8001bec:	490c      	ldr	r1, [pc, #48]	; (8001c20 <lcd_controls+0x5c>)
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <lcd_controls+0x60>)
 8001bf0:	f7ff fba2 	bl	8001338 <setlcdtext>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <lcd_controls+0x64>)
 8001bf6:	490d      	ldr	r1, [pc, #52]	; (8001c2c <lcd_controls+0x68>)
 8001bf8:	4668      	mov	r0, sp
 8001bfa:	f022 fde7 	bl	80247cc <siprintf>
		setlcdtext("t3.txt", str);
 8001bfe:	4669      	mov	r1, sp
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <lcd_controls+0x6c>)
 8001c02:	f7ff fb99 	bl	8001338 <setlcdtext>
}
 8001c06:	b00d      	add	sp, #52	; 0x34
 8001c08:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c0c:	20001868 	.word	0x20001868
 8001c10:	08028d38 	.word	0x08028d38
 8001c14:	08028be0 	.word	0x08028be0
 8001c18:	08028d40 	.word	0x08028d40
 8001c1c:	08028c28 	.word	0x08028c28
 8001c20:	08028d48 	.word	0x08028d48
 8001c24:	08028c78 	.word	0x08028c78
 8001c28:	20002d38 	.word	0x20002d38
 8001c2c:	08028d58 	.word	0x08028d58
 8001c30:	08028c04 	.word	0x08028c04

08001c34 <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 8001c34:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 8001c36:	4c1b      	ldr	r4, [pc, #108]	; (8001ca4 <lcd_pagechange+0x70>)
 8001c38:	7823      	ldrb	r3, [r4, #0]
 8001c3a:	4283      	cmp	r3, r0
 8001c3c:	d016      	beq.n	8001c6c <lcd_pagechange+0x38>
	our_currentpage = newpage;
 8001c3e:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8001c40:	2805      	cmp	r0, #5
 8001c42:	d82a      	bhi.n	8001c9a <lcd_pagechange+0x66>
 8001c44:	e8df f000 	tbb	[pc, r0]
 8001c48:	241f1a03 	.word	0x241f1a03
 8001c4c:	1215      	.short	0x1215
		lcd_time();
 8001c4e:	f7ff fc33 	bl	80014b8 <lcd_time>
	lastday = timeinfo.tm_yday;
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <lcd_pagechange+0x74>)
 8001c54:	4915      	ldr	r1, [pc, #84]	; (8001cac <lcd_pagechange+0x78>)
 8001c56:	69d8      	ldr	r0, [r3, #28]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001c58:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <lcd_pagechange+0x7c>)
	lastday = timeinfo.tm_yday;
 8001c5a:	6008      	str	r0, [r1, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001c5c:	2128      	movs	r1, #40	; 0x28
 8001c5e:	4815      	ldr	r0, [pc, #84]	; (8001cb4 <lcd_pagechange+0x80>)
 8001c60:	f023 fb9c 	bl	802539c <strftime>
	setlcdtext("t1.txt", buffer);
 8001c64:	4913      	ldr	r1, [pc, #76]	; (8001cb4 <lcd_pagechange+0x80>)
 8001c66:	4814      	ldr	r0, [pc, #80]	; (8001cb8 <lcd_pagechange+0x84>)
 8001c68:	f7ff fb66 	bl	8001338 <setlcdtext>
	return (our_currentpage);
 8001c6c:	7820      	ldrb	r0, [r4, #0]
 8001c6e:	b2c0      	uxtb	r0, r0
}
 8001c70:	bd10      	pop	{r4, pc}
		lcd_controls();
 8001c72:	f7ff ffa7 	bl	8001bc4 <lcd_controls>
	return (our_currentpage);
 8001c76:	7820      	ldrb	r0, [r4, #0]
 8001c78:	b2c0      	uxtb	r0, r0
}
 8001c7a:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 8001c7c:	f7ff fcaa 	bl	80015d4 <lcd_showvars>
	return (our_currentpage);
 8001c80:	7820      	ldrb	r0, [r4, #0]
 8001c82:	b2c0      	uxtb	r0, r0
}
 8001c84:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 8001c86:	f7ff fd9d 	bl	80017c4 <lcd_trigcharts>
	return (our_currentpage);
 8001c8a:	7820      	ldrb	r0, [r4, #0]
 8001c8c:	b2c0      	uxtb	r0, r0
}
 8001c8e:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8001c90:	f7ff fec4 	bl	8001a1c <lcd_presscharts>
	return (our_currentpage);
 8001c94:	7820      	ldrb	r0, [r4, #0]
 8001c96:	b2c0      	uxtb	r0, r0
}
 8001c98:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8001c9a:	4808      	ldr	r0, [pc, #32]	; (8001cbc <lcd_pagechange+0x88>)
 8001c9c:	f022 fcaa 	bl	80245f4 <puts>
		break;
 8001ca0:	e7e4      	b.n	8001c6c <lcd_pagechange+0x38>
 8001ca2:	bf00      	nop
 8001ca4:	20001868 	.word	0x20001868
 8001ca8:	20001a5c 	.word	0x20001a5c
 8001cac:	200015dc 	.word	0x200015dc
 8001cb0:	08028c18 	.word	0x08028c18
 8001cb4:	200014ac 	.word	0x200014ac
 8001cb8:	08028c28 	.word	0x08028c28
 8001cbc:	08028d70 	.word	0x08028d70

08001cc0 <lcd_event_process>:
int lcd_event_process(void) {
 8001cc0:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001cc2:	4c8f      	ldr	r4, [pc, #572]	; (8001f00 <lcd_event_process+0x240>)
int lcd_event_process(void) {
 8001cc4:	b083      	sub	sp, #12
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff fb8b 	bl	80013e4 <isnexpkt>
 8001cce:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8001cd0:	9b01      	ldr	r3, [sp, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dd47      	ble.n	8001d66 <lcd_event_process+0xa6>
		lcdstatus = eventbuffer[0];
 8001cd6:	7821      	ldrb	r1, [r4, #0]
 8001cd8:	4b8a      	ldr	r3, [pc, #552]	; (8001f04 <lcd_event_process+0x244>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001cda:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8001cdc:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001cde:	d925      	bls.n	8001d2c <lcd_event_process+0x6c>
			switch (eventbuffer[0]) {
 8001ce0:	2965      	cmp	r1, #101	; 0x65
 8001ce2:	d067      	beq.n	8001db4 <lcd_event_process+0xf4>
 8001ce4:	2966      	cmp	r1, #102	; 0x66
 8001ce6:	d046      	beq.n	8001d76 <lcd_event_process+0xb6>
 8001ce8:	2924      	cmp	r1, #36	; 0x24
 8001cea:	d03f      	beq.n	8001d6c <lcd_event_process+0xac>
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8001cec:	4886      	ldr	r0, [pc, #536]	; (8001f08 <lcd_event_process+0x248>)
 8001cee:	f022 fbe5 	bl	80244bc <iprintf>
				i = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	9300      	str	r3, [sp, #0]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001cf6:	9b00      	ldr	r3, [sp, #0]
 8001cf8:	5ce3      	ldrb	r3, [r4, r3]
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d00f      	beq.n	8001d1e <lcd_event_process+0x5e>
					printf(" 0x%02x", eventbuffer[i++]);
 8001cfe:	4d83      	ldr	r5, [pc, #524]	; (8001f0c <lcd_event_process+0x24c>)
 8001d00:	e009      	b.n	8001d16 <lcd_event_process+0x56>
 8001d02:	9b00      	ldr	r3, [sp, #0]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	5ce1      	ldrb	r1, [r4, r3]
 8001d08:	9200      	str	r2, [sp, #0]
 8001d0a:	f022 fbd7 	bl	80244bc <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001d0e:	9b00      	ldr	r3, [sp, #0]
 8001d10:	5ce3      	ldrb	r3, [r4, r3]
 8001d12:	2bff      	cmp	r3, #255	; 0xff
 8001d14:	d003      	beq.n	8001d1e <lcd_event_process+0x5e>
 8001d16:	9b00      	ldr	r3, [sp, #0]
					printf(" 0x%02x", eventbuffer[i++]);
 8001d18:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001d1a:	2b1f      	cmp	r3, #31
 8001d1c:	d9f1      	bls.n	8001d02 <lcd_event_process+0x42>
				printf("\n");
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f022 fbe4 	bl	80244ec <putchar>
				return (-1);
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001d28:	b003      	add	sp, #12
 8001d2a:	bd30      	pop	{r4, r5, pc}
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8001d2c:	2901      	cmp	r1, #1
 8001d2e:	d0fb      	beq.n	8001d28 <lcd_event_process+0x68>
				printf("Nextion reported: ");
 8001d30:	4877      	ldr	r0, [pc, #476]	; (8001f10 <lcd_event_process+0x250>)
 8001d32:	f022 fbc3 	bl	80244bc <iprintf>
				switch (eventbuffer[0]) {
 8001d36:	7821      	ldrb	r1, [r4, #0]
 8001d38:	2924      	cmp	r1, #36	; 0x24
 8001d3a:	d846      	bhi.n	8001dca <lcd_event_process+0x10a>
 8001d3c:	e8df f001 	tbb	[pc, r1]
 8001d40:	4582878c 	.word	0x4582878c
 8001d44:	45454545 	.word	0x45454545
 8001d48:	45454545 	.word	0x45454545
 8001d4c:	45454545 	.word	0x45454545
 8001d50:	457a4545 	.word	0x457a4545
 8001d54:	45454545 	.word	0x45454545
 8001d58:	45724545 	.word	0x45724545
 8001d5c:	4566456c 	.word	0x4566456c
 8001d60:	5a454560 	.word	0x5a454560
 8001d64:	54          	.byte	0x54
 8001d65:	00          	.byte	0x00
		return (result);		// 0 = nothing found, -1 = timeout
 8001d66:	9801      	ldr	r0, [sp, #4]
}
 8001d68:	b003      	add	sp, #12
 8001d6a:	bd30      	pop	{r4, r5, pc}
				printf("Serial Buffer Overflow!\n");
 8001d6c:	4869      	ldr	r0, [pc, #420]	; (8001f14 <lcd_event_process+0x254>)
 8001d6e:	f022 fc41 	bl	80245f4 <puts>
				return (1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	e7d8      	b.n	8001d28 <lcd_event_process+0x68>
				setlcddim(lcdbright);
 8001d76:	4968      	ldr	r1, [pc, #416]	; (8001f18 <lcd_event_process+0x258>)
	dimtimer = DIMTIME;
 8001d78:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001d7c:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <lcd_event_process+0x25c>)
				setlcddim(lcdbright);
 8001d7e:	6809      	ldr	r1, [r1, #0]
	setlcdbin("dim", level);
 8001d80:	4867      	ldr	r0, [pc, #412]	; (8001f20 <lcd_event_process+0x260>)
 8001d82:	2963      	cmp	r1, #99	; 0x63
	dimtimer = DIMTIME;
 8001d84:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8001d86:	bf28      	it	cs
 8001d88:	2163      	movcs	r1, #99	; 0x63
 8001d8a:	f7ff fafb 	bl	8001384 <setlcdbin>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8001d8e:	7860      	ldrb	r0, [r4, #1]
 8001d90:	f7ff ff50 	bl	8001c34 <lcd_pagechange>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	db04      	blt.n	8001da2 <lcd_event_process+0xe2>
 8001d98:	7860      	ldrb	r0, [r4, #1]
 8001d9a:	f7ff ff4b 	bl	8001c34 <lcd_pagechange>
 8001d9e:	2805      	cmp	r0, #5
 8001da0:	dd19      	ble.n	8001dd6 <lcd_event_process+0x116>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8001da2:	7860      	ldrb	r0, [r4, #1]
 8001da4:	f7ff ff46 	bl	8001c34 <lcd_pagechange>
 8001da8:	4601      	mov	r1, r0
 8001daa:	485e      	ldr	r0, [pc, #376]	; (8001f24 <lcd_event_process+0x264>)
 8001dac:	f022 fb86 	bl	80244bc <iprintf>
			return (0);
 8001db0:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8001db2:	e7b9      	b.n	8001d28 <lcd_event_process+0x68>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 8001db4:	78e3      	ldrb	r3, [r4, #3]
 8001db6:	78a2      	ldrb	r2, [r4, #2]
 8001db8:	7861      	ldrb	r1, [r4, #1]
 8001dba:	485b      	ldr	r0, [pc, #364]	; (8001f28 <lcd_event_process+0x268>)
 8001dbc:	f022 fb7e 	bl	80244bc <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8001dc0:	7863      	ldrb	r3, [r4, #1]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d04e      	beq.n	8001e64 <lcd_event_process+0x1a4>
			return (0);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	e7ae      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 8001dca:	4858      	ldr	r0, [pc, #352]	; (8001f2c <lcd_event_process+0x26c>)
 8001dcc:	f022 fb76 	bl	80244bc <iprintf>
				return (-1);		// some kindof error
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001dd4:	e7a8      	b.n	8001d28 <lcd_event_process+0x68>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001dd6:	7860      	ldrb	r0, [r4, #1]
 8001dd8:	f7ff ff2c 	bl	8001c34 <lcd_pagechange>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a54      	ldr	r2, [pc, #336]	; (8001f30 <lcd_event_process+0x270>)
			return (0);
 8001de0:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	7013      	strb	r3, [r2, #0]
 8001de6:	e79f      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Ser Buffer overflow\n");
 8001de8:	4852      	ldr	r0, [pc, #328]	; (8001f34 <lcd_event_process+0x274>)
 8001dea:	f022 fc03 	bl	80245f4 <puts>
				return (-1);		// some kindof error
 8001dee:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001df2:	e799      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Variable name too long\n");
 8001df4:	4850      	ldr	r0, [pc, #320]	; (8001f38 <lcd_event_process+0x278>)
 8001df6:	f022 fbfd 	bl	80245f4 <puts>
				return (-1);		// some kindof error
 8001dfa:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001dfe:	e793      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Invalid escape char\n");
 8001e00:	484e      	ldr	r0, [pc, #312]	; (8001f3c <lcd_event_process+0x27c>)
 8001e02:	f022 fbf7 	bl	80245f4 <puts>
				return (-1);		// some kindof error
 8001e06:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001e0a:	e78d      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Invalid number of parameters\n");
 8001e0c:	484c      	ldr	r0, [pc, #304]	; (8001f40 <lcd_event_process+0x280>)
 8001e0e:	f022 fbf1 	bl	80245f4 <puts>
				return (-1);		// some kindof error
 8001e12:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001e16:	e787      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Attribute assignment failed\n");
 8001e18:	484a      	ldr	r0, [pc, #296]	; (8001f44 <lcd_event_process+0x284>)
 8001e1a:	f022 fbeb 	bl	80245f4 <puts>
				return (-1);		// some kindof error
 8001e1e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001e22:	e781      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 8001e24:	4848      	ldr	r0, [pc, #288]	; (8001f48 <lcd_event_process+0x288>)
 8001e26:	f022 fbe5 	bl	80245f4 <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8001e2a:	f000 f961 	bl	80020f0 <getlcdpage>
				return (-1);		// some kindof error
 8001e2e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001e32:	e779      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Invalid waveform ID\n");
 8001e34:	4845      	ldr	r0, [pc, #276]	; (8001f4c <lcd_event_process+0x28c>)
 8001e36:	f022 fbdd 	bl	80245f4 <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8001e3a:	f000 f959 	bl	80020f0 <getlcdpage>
				return (-1);		// some kindof error
 8001e3e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001e42:	e771      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Invalid Component ID\n");
 8001e44:	4842      	ldr	r0, [pc, #264]	; (8001f50 <lcd_event_process+0x290>)
 8001e46:	f022 fbd5 	bl	80245f4 <puts>
					return (0);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	e76c      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Successful execution\n");
 8001e4e:	4841      	ldr	r0, [pc, #260]	; (8001f54 <lcd_event_process+0x294>)
 8001e50:	f022 fbd0 	bl	80245f4 <puts>
					return (0);
 8001e54:	2000      	movs	r0, #0
 8001e56:	e767      	b.n	8001d28 <lcd_event_process+0x68>
					printf("Invalid command\n");
 8001e58:	483f      	ldr	r0, [pc, #252]	; (8001f58 <lcd_event_process+0x298>)
 8001e5a:	f022 fbcb 	bl	80245f4 <puts>
				return (-1);		// some kindof error
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001e62:	e761      	b.n	8001d28 <lcd_event_process+0x68>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8001e64:	78a3      	ldrb	r3, [r4, #2]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d012      	beq.n	8001e90 <lcd_event_process+0x1d0>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d039      	beq.n	8001ee2 <lcd_event_process+0x222>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d026      	beq.n	8001ec0 <lcd_event_process+0x200>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d1a7      	bne.n	8001dc6 <lcd_event_process+0x106>
					if (eventbuffer[3] == 1) 		// sound on
 8001e76:	78e3      	ldrb	r3, [r4, #3]
 8001e78:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <lcd_event_process+0x29c>)
 8001e7a:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 8001e7e:	4838      	ldr	r0, [pc, #224]	; (8001f60 <lcd_event_process+0x2a0>)
					if (eventbuffer[3] == 1) 		// sound on
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8001e88:	f022 fbb4 	bl	80245f4 <puts>
			return (0);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	e74b      	b.n	8001d28 <lcd_event_process+0x68>
					lcdbright = eventbuffer[3];
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <lcd_event_process+0x258>)
 8001e92:	78e2      	ldrb	r2, [r4, #3]
 8001e94:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2a0d      	cmp	r2, #13
 8001e9a:	dc01      	bgt.n	8001ea0 <lcd_event_process+0x1e0>
						lcdbright = 14;		// prevent black
 8001e9c:	220e      	movs	r2, #14
 8001e9e:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 8001ea0:	6819      	ldr	r1, [r3, #0]
	dimtimer = DIMTIME;
 8001ea2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <lcd_event_process+0x25c>)
	setlcdbin("dim", level);
 8001ea8:	2963      	cmp	r1, #99	; 0x63
 8001eaa:	481d      	ldr	r0, [pc, #116]	; (8001f20 <lcd_event_process+0x260>)
	dimtimer = DIMTIME;
 8001eac:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8001eae:	bf28      	it	cs
 8001eb0:	2163      	movcs	r1, #99	; 0x63
 8001eb2:	f7ff fa67 	bl	8001384 <setlcdbin>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8001eb6:	7863      	ldrb	r3, [r4, #1]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d184      	bne.n	8001dc6 <lcd_event_process+0x106>
 8001ebc:	78a3      	ldrb	r3, [r4, #2]
 8001ebe:	e7d4      	b.n	8001e6a <lcd_event_process+0x1aa>
					if (eventbuffer[3] == 1) 		// sound on
 8001ec0:	78e3      	ldrb	r3, [r4, #3]
 8001ec2:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <lcd_event_process+0x2a4>)
 8001ec4:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8001ec8:	4827      	ldr	r0, [pc, #156]	; (8001f68 <lcd_event_process+0x2a8>)
					if (eventbuffer[3] == 1) 		// sound on
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 8001ed2:	f022 fb8f 	bl	80245f4 <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8001ed6:	7863      	ldrb	r3, [r4, #1]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	f47f af74 	bne.w	8001dc6 <lcd_event_process+0x106>
 8001ede:	78a3      	ldrb	r3, [r4, #2]
 8001ee0:	e7c7      	b.n	8001e72 <lcd_event_process+0x1b2>
					printf("Reboot touch\n");
 8001ee2:	4822      	ldr	r0, [pc, #136]	; (8001f6c <lcd_event_process+0x2ac>)
 8001ee4:	f022 fb86 	bl	80245f4 <puts>
					osDelay(100);
 8001ee8:	2064      	movs	r0, #100	; 0x64
 8001eea:	f012 f98b 	bl	8014204 <osDelay>
					rebootme();
 8001eee:	f000 fa3b 	bl	8002368 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8001ef2:	7863      	ldrb	r3, [r4, #1]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	f47f af66 	bne.w	8001dc6 <lcd_event_process+0x106>
 8001efa:	78a3      	ldrb	r3, [r4, #2]
 8001efc:	e7b7      	b.n	8001e6e <lcd_event_process+0x1ae>
 8001efe:	bf00      	nop
 8001f00:	200015b4 	.word	0x200015b4
 8001f04:	20001678 	.word	0x20001678
 8001f08:	08028f34 	.word	0x08028f34
 8001f0c:	08028f68 	.word	0x08028f68
 8001f10:	08028d84 	.word	0x08028d84
 8001f14:	08028e94 	.word	0x08028e94
 8001f18:	2000000c 	.word	0x2000000c
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	08028bcc 	.word	0x08028bcc
 8001f24:	08028f04 	.word	0x08028f04
 8001f28:	08028eac 	.word	0x08028eac
 8001f2c:	08028e7c 	.word	0x08028e7c
 8001f30:	200015e8 	.word	0x200015e8
 8001f34:	08028dd4 	.word	0x08028dd4
 8001f38:	08028dbc 	.word	0x08028dbc
 8001f3c:	08028e08 	.word	0x08028e08
 8001f40:	08028de8 	.word	0x08028de8
 8001f44:	08028e1c 	.word	0x08028e1c
 8001f48:	08028da8 	.word	0x08028da8
 8001f4c:	08028e38 	.word	0x08028e38
 8001f50:	08028e64 	.word	0x08028e64
 8001f54:	08028e4c 	.word	0x08028e4c
 8001f58:	08028d98 	.word	0x08028d98
 8001f5c:	20000270 	.word	0x20000270
 8001f60:	08028ef8 	.word	0x08028ef8
 8001f64:	20000276 	.word	0x20000276
 8001f68:	08028eec 	.word	0x08028eec
 8001f6c:	08028edc 	.word	0x08028edc

08001f70 <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 8001f70:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 8001f72:	4d50      	ldr	r5, [pc, #320]	; (80020b4 <processnex+0x144>)
void processnex() {		// process Nextion - called at regular intervals
 8001f74:	b0a2      	sub	sp, #136	; 0x88
	switch (lcduart_error) {
 8001f76:	682b      	ldr	r3, [r5, #0]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d06d      	beq.n	8002058 <processnex+0xe8>
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d066      	beq.n	800204e <processnex+0xde>
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d04b      	beq.n	800201c <processnex+0xac>
 8001f84:	4c4c      	ldr	r4, [pc, #304]	; (80020b8 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8001f86:	2600      	movs	r6, #0
 8001f88:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d04e      	beq.n	800202e <processnex+0xbe>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d07f      	beq.n	8002096 <processnex+0x126>
	if (lcd_initflag == 3) {	// uart only
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d069      	beq.n	8002070 <processnex+0x100>
	lcd_rxdma();		// get any new characters received
 8001f9c:	f7ff f974 	bl	8001288 <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8001fa0:	f7ff fe8e 	bl	8001cc0 <lcd_event_process>
	if (dimtimer > 50000) {
 8001fa4:	4a45      	ldr	r2, [pc, #276]	; (80020bc <processnex+0x14c>)
 8001fa6:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8001faa:	9001      	str	r0, [sp, #4]
	if (dimtimer > 50000) {
 8001fac:	6813      	ldr	r3, [r2, #0]
 8001fae:	428b      	cmp	r3, r1
 8001fb0:	d903      	bls.n	8001fba <processnex+0x4a>
		dimtimer--;
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	b022      	add	sp, #136	; 0x88
 8001fb8:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8001fba:	4841      	ldr	r0, [pc, #260]	; (80020c0 <processnex+0x150>)
		dimtimer = 60000;
 8001fbc:	f64e 2360 	movw	r3, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8001fc0:	6801      	ldr	r1, [r0, #0]
		dimtimer = 60000;
 8001fc2:	6013      	str	r3, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8001fc4:	6804      	ldr	r4, [r0, #0]
 8001fc6:	6803      	ldr	r3, [r0, #0]
 8001fc8:	6802      	ldr	r2, [r0, #0]
 8001fca:	109b      	asrs	r3, r3, #2
 8001fcc:	eb03 0364 	add.w	r3, r3, r4, asr #1
 8001fd0:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8001fd4:	1aca      	subs	r2, r1, r3
		if (i < 2)
 8001fd6:	2a01      	cmp	r2, #1
 8001fd8:	dd45      	ble.n	8002066 <processnex+0xf6>
 8001fda:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8001fdc:	4939      	ldr	r1, [pc, #228]	; (80020c4 <processnex+0x154>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	bf28      	it	cs
 8001fe2:	2363      	movcs	r3, #99	; 0x63
 8001fe4:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8001fe6:	4a38      	ldr	r2, [pc, #224]	; (80020c8 <processnex+0x158>)
 8001fe8:	a802      	add	r0, sp, #8
 8001fea:	4938      	ldr	r1, [pc, #224]	; (80020cc <processnex+0x15c>)
 8001fec:	f022 fbee 	bl	80247cc <siprintf>
	strcpy(pkt, str);
 8001ff0:	a902      	add	r1, sp, #8
 8001ff2:	a80a      	add	r0, sp, #40	; 0x28
 8001ff4:	f022 fc7b 	bl	80248ee <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001ff8:	4935      	ldr	r1, [pc, #212]	; (80020d0 <processnex+0x160>)
	if (!(lcd_txblocked))
 8001ffa:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <processnex+0x164>)
	strcpy(pkt, str);
 8001ffc:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8001ffe:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002000:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8002002:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8002004:	2b00      	cmp	r3, #0
 8002006:	d152      	bne.n	80020ae <processnex+0x13e>
		return (lcd_puts(pkt));
 8002008:	a80a      	add	r0, sp, #40	; 0x28
 800200a:	f7ff f905 	bl	8001218 <lcd_puts>
	result = writelcdcmd(buffer);
 800200e:	900a      	str	r0, [sp, #40]	; 0x28
	if (result == -1) {		// wait for response
 8002010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002012:	3301      	adds	r3, #1
 8002014:	d047      	beq.n	80020a6 <processnex+0x136>
	return (result);
 8002016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 8002018:	b022      	add	sp, #136	; 0x88
 800201a:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 800201c:	4c26      	ldr	r4, [pc, #152]	; (80020b8 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 800201e:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 8002020:	482d      	ldr	r0, [pc, #180]	; (80020d8 <processnex+0x168>)
 8002022:	f022 fae7 	bl	80245f4 <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002026:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d1b0      	bne.n	8001f90 <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 800202e:	482b      	ldr	r0, [pc, #172]	; (80020dc <processnex+0x16c>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002030:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 8002032:	f022 fadf 	bl	80245f4 <puts>
		lcd_uart_init(9600);	// switch us to 9600
 8002036:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800203a:	f7ff f81f 	bl	800107c <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 800203e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002042:	f7ff f863 	bl	800110c <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8002046:	2302      	movs	r3, #2
 8002048:	6023      	str	r3, [r4, #0]
}
 800204a:	b022      	add	sp, #136	; 0x88
 800204c:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 800204e:	4824      	ldr	r0, [pc, #144]	; (80020e0 <processnex+0x170>)
 8002050:	4c19      	ldr	r4, [pc, #100]	; (80020b8 <processnex+0x148>)
 8002052:	f022 facf 	bl	80245f4 <puts>
 8002056:	e796      	b.n	8001f86 <processnex+0x16>
		printf("LCD UART FRAMING\n");
 8002058:	4822      	ldr	r0, [pc, #136]	; (80020e4 <processnex+0x174>)
 800205a:	f022 facb 	bl	80245f4 <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 800205e:	4c16      	ldr	r4, [pc, #88]	; (80020b8 <processnex+0x148>)
 8002060:	2301      	movs	r3, #1
 8002062:	6023      	str	r3, [r4, #0]
		break;
 8002064:	e78f      	b.n	8001f86 <processnex+0x16>
			i = 2;	// prevent black
 8002066:	2202      	movs	r2, #2
 8002068:	4916      	ldr	r1, [pc, #88]	; (80020c4 <processnex+0x154>)
 800206a:	4613      	mov	r3, r2
 800206c:	600a      	str	r2, [r1, #0]
 800206e:	e7ba      	b.n	8001fe6 <processnex+0x76>
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002070:	481d      	ldr	r0, [pc, #116]	; (80020e8 <processnex+0x178>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002072:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002074:	f022 fabe 	bl	80245f4 <puts>
		lcd_uart_init(230400);
 8002078:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 800207c:	f7fe fffe 	bl	800107c <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 8002080:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002084:	f7ff f842 	bl	800110c <lcd_init>
		osDelay(100);
 8002088:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 800208a:	6026      	str	r6, [r4, #0]
}
 800208c:	b022      	add	sp, #136	; 0x88
 800208e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 8002092:	f012 b8b7 	b.w	8014204 <osDelay>
		osDelay(500);
 8002096:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800209a:	f012 f8b3 	bl	8014204 <osDelay>
		lcd_initflag = 3;
 800209e:	2303      	movs	r3, #3
 80020a0:	6023      	str	r3, [r4, #0]
}
 80020a2:	b022      	add	sp, #136	; 0x88
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80020a6:	4811      	ldr	r0, [pc, #68]	; (80020ec <processnex+0x17c>)
 80020a8:	f022 fa08 	bl	80244bc <iprintf>
 80020ac:	e7b3      	b.n	8002016 <processnex+0xa6>
		return (-1);
 80020ae:	f04f 30ff 	mov.w	r0, #4294967295
 80020b2:	e7ac      	b.n	800200e <processnex+0x9e>
 80020b4:	2000167c 	.word	0x2000167c
 80020b8:	200015ec 	.word	0x200015ec
 80020bc:	20000004 	.word	0x20000004
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	200015d4 	.word	0x200015d4
 80020c8:	08028bcc 	.word	0x08028bcc
 80020cc:	08028bac 	.word	0x08028bac
 80020d0:	08028b20 	.word	0x08028b20
 80020d4:	200015f0 	.word	0x200015f0
 80020d8:	08028f70 	.word	0x08028f70
 80020dc:	08028fa8 	.word	0x08028fa8
 80020e0:	08028f94 	.word	0x08028f94
 80020e4:	08028f80 	.word	0x08028f80
 80020e8:	08028fd0 	.word	0x08028fd0
 80020ec:	08028bb4 	.word	0x08028bb4

080020f0 <getlcdpage>:
int getlcdpage(void) {
 80020f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("getlcdpage:\n");
 80020f4:	4842      	ldr	r0, [pc, #264]	; (8002200 <getlcdpage+0x110>)
int getlcdpage(void) {
 80020f6:	b09b      	sub	sp, #108	; 0x6c
	printf("getlcdpage:\n");
 80020f8:	f022 fa7c 	bl	80245f4 <puts>
	lcd_txblocked = 1;		// stop others sending to the LCD
 80020fc:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800221c <getlcdpage+0x12c>
 8002100:	2301      	movs	r3, #1
	strcpy(pkt, str);
 8002102:	4e40      	ldr	r6, [pc, #256]	; (8002204 <getlcdpage+0x114>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8002104:	2096      	movs	r0, #150	; 0x96
	strcat(pkt, "\xff\xff\xff");
 8002106:	4f40      	ldr	r7, [pc, #256]	; (8002208 <getlcdpage+0x118>)
	lcd_txblocked = 1;		// stop others sending to the LCD
 8002108:	f8c8 3000 	str.w	r3, [r8]
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 800210c:	f012 f87a 	bl	8014204 <osDelay>
	lcdstatus = 0xff;
 8002110:	4d3e      	ldr	r5, [pc, #248]	; (800220c <getlcdpage+0x11c>)
 8002112:	23ff      	movs	r3, #255	; 0xff
	strcpy(pkt, str);
 8002114:	e896 0003 	ldmia.w	r6, {r0, r1}
	lcdstatus = 0xff;
 8002118:	702b      	strb	r3, [r5, #0]
	strcpy(pkt, str);
 800211a:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 800211c:	6838      	ldr	r0, [r7, #0]
	strcpy(pkt, str);
 800211e:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 8002122:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 8002126:	a802      	add	r0, sp, #8
 8002128:	f7ff f876 	bl	8001218 <lcd_puts>
	result = intwritelcdcmd("sendme");
 800212c:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 800212e:	9b01      	ldr	r3, [sp, #4]
 8002130:	3301      	adds	r3, #1
 8002132:	d060      	beq.n	80021f6 <getlcdpage+0x106>
	processnex();
 8002134:	f7ff ff1c 	bl	8001f70 <processnex>
	while (lcdstatus == 0xff) {
 8002138:	782b      	ldrb	r3, [r5, #0]
 800213a:	2bff      	cmp	r3, #255	; 0xff
 800213c:	d121      	bne.n	8002182 <getlcdpage+0x92>
 800213e:	4c34      	ldr	r4, [pc, #208]	; (8002210 <getlcdpage+0x120>)
 8002140:	e007      	b.n	8002152 <getlcdpage+0x62>
		trys++;
 8002142:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8002144:	f012 f85e 	bl	8014204 <osDelay>
		processnex();
 8002148:	f7ff ff12 	bl	8001f70 <processnex>
	while (lcdstatus == 0xff) {
 800214c:	782b      	ldrb	r3, [r5, #0]
 800214e:	2bff      	cmp	r3, #255	; 0xff
 8002150:	d117      	bne.n	8002182 <getlcdpage+0x92>
		if (trys > 1000) {
 8002152:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8002154:	2001      	movs	r0, #1
		if (trys > 1000) {
 8002156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 800215a:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 800215e:	d9f0      	bls.n	8002142 <getlcdpage+0x52>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8002160:	482c      	ldr	r0, [pc, #176]	; (8002214 <getlcdpage+0x124>)
 8002162:	f022 f9ab 	bl	80244bc <iprintf>
			trys = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	6023      	str	r3, [r4, #0]
 800216a:	23ff      	movs	r3, #255	; 0xff
	result = lcd_getlack();		// wait for a response
 800216c:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 800216e:	9b01      	ldr	r3, [sp, #4]
 8002170:	2bff      	cmp	r3, #255	; 0xff
 8002172:	d00c      	beq.n	800218e <getlcdpage+0x9e>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8002174:	2300      	movs	r3, #0
 8002176:	f8c8 3000 	str.w	r3, [r8]
	return (result);
 800217a:	9801      	ldr	r0, [sp, #4]
}
 800217c:	b01b      	add	sp, #108	; 0x6c
 800217e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (lcdstatus);
 8002182:	782b      	ldrb	r3, [r5, #0]
 8002184:	b2db      	uxtb	r3, r3
	result = lcd_getlack();		// wait for a response
 8002186:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 8002188:	9b01      	ldr	r3, [sp, #4]
 800218a:	2bff      	cmp	r3, #255	; 0xff
 800218c:	d1f2      	bne.n	8002174 <getlcdpage+0x84>
	strcat(pkt, "\xff\xff\xff");
 800218e:	683f      	ldr	r7, [r7, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 8002190:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002220 <getlcdpage+0x130>
 8002194:	4c1e      	ldr	r4, [pc, #120]	; (8002210 <getlcdpage+0x120>)
	strcat(pkt, "\xff\xff\xff");
 8002196:	f8cd 700e 	str.w	r7, [sp, #14]
	strcpy(pkt, str);
 800219a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800219e:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 80021a0:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 80021a2:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 80021a6:	f7ff f837 	bl	8001218 <lcd_puts>
		result = intwritelcdcmd("sendme");
 80021aa:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 80021ac:	9b01      	ldr	r3, [sp, #4]
 80021ae:	3301      	adds	r3, #1
 80021b0:	d10a      	bne.n	80021c8 <getlcdpage+0xd8>
 80021b2:	e01c      	b.n	80021ee <getlcdpage+0xfe>
		if (trys > 1000) {
 80021b4:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 80021b6:	2001      	movs	r0, #1
		if (trys > 1000) {
 80021b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 80021bc:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 80021c0:	d80e      	bhi.n	80021e0 <getlcdpage+0xf0>
		trys++;
 80021c2:	6022      	str	r2, [r4, #0]
		osDelay(1);
 80021c4:	f012 f81e 	bl	8014204 <osDelay>
		processnex();
 80021c8:	f7ff fed2 	bl	8001f70 <processnex>
	while (lcdstatus == 0xff) {
 80021cc:	782b      	ldrb	r3, [r5, #0]
 80021ce:	2bff      	cmp	r3, #255	; 0xff
 80021d0:	d0f0      	beq.n	80021b4 <getlcdpage+0xc4>
	return (lcdstatus);
 80021d2:	782b      	ldrb	r3, [r5, #0]
 80021d4:	b2db      	uxtb	r3, r3
		result = lcd_getlack();		// wait for a response
 80021d6:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 80021d8:	9b01      	ldr	r3, [sp, #4]
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d0db      	beq.n	8002196 <getlcdpage+0xa6>
 80021de:	e7c9      	b.n	8002174 <getlcdpage+0x84>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <getlcdpage+0x124>)
 80021e2:	f022 f96b 	bl	80244bc <iprintf>
			trys = 0;
 80021e6:	2200      	movs	r2, #0
 80021e8:	23ff      	movs	r3, #255	; 0xff
 80021ea:	6022      	str	r2, [r4, #0]
			return (-1);
 80021ec:	e7f3      	b.n	80021d6 <getlcdpage+0xe6>
			printf("getlcdpage2: Cmd failed\n\r");
 80021ee:	4648      	mov	r0, r9
 80021f0:	f022 f964 	bl	80244bc <iprintf>
 80021f4:	e7e8      	b.n	80021c8 <getlcdpage+0xd8>
		printf("getlcdpage: Cmd failed\n\r");
 80021f6:	4808      	ldr	r0, [pc, #32]	; (8002218 <getlcdpage+0x128>)
 80021f8:	f022 f960 	bl	80244bc <iprintf>
 80021fc:	e79a      	b.n	8002134 <getlcdpage+0x44>
 80021fe:	bf00      	nop
 8002200:	0802902c 	.word	0x0802902c
 8002204:	08029038 	.word	0x08029038
 8002208:	08028b20 	.word	0x08028b20
 800220c:	20001678 	.word	0x20001678
 8002210:	20001c68 	.word	0x20001c68
 8002214:	08028ffc 	.word	0x08028ffc
 8002218:	08029040 	.word	0x08029040
 800221c:	200015f0 	.word	0x200015f0
 8002220:	0802905c 	.word	0x0802905c

08002224 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8002224:	4801      	ldr	r0, [pc, #4]	; (800222c <netif_status_callbk_fn+0x8>)
 8002226:	f022 b9e5 	b.w	80245f4 <puts>
 800222a:	bf00      	nop
 800222c:	0802908c 	.word	0x0802908c

08002230 <Callback01>:

/* Callback01 function */
void Callback01(void const * argument)
{
  /* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8002230:	4801      	ldr	r0, [pc, #4]	; (8002238 <Callback01+0x8>)
 8002232:	f022 b9df 	b.w	80245f4 <puts>
 8002236:	bf00      	nop
 8002238:	080290a4 	.word	0x080290a4

0800223c <_write>:
	if (file == 1) {
 800223c:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 800223e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002240:	460c      	mov	r4, r1
 8002242:	4617      	mov	r7, r2
	if (file == 1) {
 8002244:	d00e      	beq.n	8002264 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002246:	2a00      	cmp	r2, #0
 8002248:	dd0a      	ble.n	8002260 <_write+0x24>
 800224a:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 800224c:	4d0b      	ldr	r5, [pc, #44]	; (800227c <_write+0x40>)
 800224e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002252:	230a      	movs	r3, #10
 8002254:	2201      	movs	r2, #1
 8002256:	4628      	mov	r0, r5
 8002258:	f00f fce0 	bl	8011c1c <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800225c:	42a6      	cmp	r6, r4
 800225e:	d1f6      	bne.n	800224e <_write+0x12>
}
 8002260:	4638      	mov	r0, r7
 8002262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002264:	2a00      	cmp	r2, #0
 8002266:	ddfb      	ble.n	8002260 <_write+0x24>
 8002268:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 800226a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800226e:	f001 fe6f 	bl	8003f50 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002272:	42ac      	cmp	r4, r5
 8002274:	d1f9      	bne.n	800226a <_write+0x2e>
}
 8002276:	4638      	mov	r0, r7
 8002278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800227a:	bf00      	nop
 800227c:	200026f0 	.word	0x200026f0

08002280 <err_leds>:
err_leds(int why) {
 8002280:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8002282:	4e37      	ldr	r6, [pc, #220]	; (8002360 <err_leds+0xe0>)
err_leds(int why) {
 8002284:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 8002286:	4d37      	ldr	r5, [pc, #220]	; (8002364 <err_leds+0xe4>)
 8002288:	1e44      	subs	r4, r0, #1
		switch (why) {
 800228a:	2c07      	cmp	r4, #7
 800228c:	d80f      	bhi.n	80022ae <err_leds+0x2e>
 800228e:	e8df f004 	tbb	[pc, r4]
 8002292:	5c51      	.short	0x5c51
 8002294:	25303b46 	.word	0x25303b46
 8002298:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 800229a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800229e:	4630      	mov	r0, r6
 80022a0:	f008 fbe4 	bl	800aa6c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80022a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a8:	4630      	mov	r0, r6
 80022aa:	f008 fbdf 	bl	800aa6c <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	9b01      	ldr	r3, [sp, #4]
 80022b4:	42ab      	cmp	r3, r5
 80022b6:	dae8      	bge.n	800228a <err_leds+0xa>
 80022b8:	9b01      	ldr	r3, [sp, #4]
 80022ba:	3301      	adds	r3, #1
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	42ab      	cmp	r3, r5
 80022c2:	dbf9      	blt.n	80022b8 <err_leds+0x38>
 80022c4:	e7e1      	b.n	800228a <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80022c6:	4630      	mov	r0, r6
 80022c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022cc:	f008 fbce 	bl	800aa6c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 80022d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d4:	4630      	mov	r0, r6
 80022d6:	f008 fbc9 	bl	800aa6c <HAL_GPIO_TogglePin>
			break;
 80022da:	e7e8      	b.n	80022ae <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80022dc:	4630      	mov	r0, r6
 80022de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e2:	f008 fbc3 	bl	800aa6c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80022e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022ea:	4630      	mov	r0, r6
 80022ec:	f008 fbbe 	bl	800aa6c <HAL_GPIO_TogglePin>
			break;
 80022f0:	e7dd      	b.n	80022ae <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80022f2:	4630      	mov	r0, r6
 80022f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f8:	f008 fbb8 	bl	800aa6c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80022fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002300:	4630      	mov	r0, r6
 8002302:	f008 fbb3 	bl	800aa6c <HAL_GPIO_TogglePin>
			break;
 8002306:	e7d2      	b.n	80022ae <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002308:	4630      	mov	r0, r6
 800230a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800230e:	f008 fbad 	bl	800aa6c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8002312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002316:	4630      	mov	r0, r6
 8002318:	f008 fba8 	bl	800aa6c <HAL_GPIO_TogglePin>
			break;
 800231c:	e7c7      	b.n	80022ae <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 800231e:	4630      	mov	r0, r6
 8002320:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002324:	f008 fba2 	bl	800aa6c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8002328:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800232c:	4630      	mov	r0, r6
 800232e:	f008 fb9d 	bl	800aa6c <HAL_GPIO_TogglePin>
			break;
 8002332:	e7bc      	b.n	80022ae <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002334:	4630      	mov	r0, r6
 8002336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800233a:	f008 fb97 	bl	800aa6c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800233e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002342:	4630      	mov	r0, r6
 8002344:	f008 fb92 	bl	800aa6c <HAL_GPIO_TogglePin>
			break;
 8002348:	e7b1      	b.n	80022ae <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 800234a:	4630      	mov	r0, r6
 800234c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002350:	f008 fb8c 	bl	800aa6c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8002354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002358:	4630      	mov	r0, r6
 800235a:	f008 fb87 	bl	800aa6c <HAL_GPIO_TogglePin>
			break;
 800235e:	e7a6      	b.n	80022ae <err_leds+0x2e>
 8002360:	40020c00 	.word	0x40020c00
 8002364:	003567e0 	.word	0x003567e0

08002368 <rebootme>:
void rebootme(int why) {
 8002368:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800236a:	b672      	cpsid	i
		err_leds(why);
 800236c:	f7ff ff88 	bl	8002280 <err_leds>

08002370 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8002370:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8002374:	074a      	lsls	r2, r1, #29
 8002376:	d502      	bpl.n	800237e <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8002378:	4809      	ldr	r0, [pc, #36]	; (80023a0 <netif_link_callbk_fn+0x30>)
 800237a:	f022 b89f 	b.w	80244bc <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 800237e:	b510      	push	{r4, lr}
 8002380:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8002382:	4808      	ldr	r0, [pc, #32]	; (80023a4 <netif_link_callbk_fn+0x34>)
 8002384:	f022 f89a 	bl	80244bc <iprintf>
		if (!(netif_is_link_up(netif))) {
 8002388:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800238c:	075b      	lsls	r3, r3, #29
 800238e:	d500      	bpl.n	8002392 <netif_link_callbk_fn+0x22>
}
 8002390:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <netif_link_callbk_fn+0x38>)
 8002394:	f022 f92e 	bl	80245f4 <puts>
			rebootme(1);
 8002398:	2001      	movs	r0, #1
 800239a:	f7ff ffe5 	bl	8002368 <rebootme>
 800239e:	bf00      	nop
 80023a0:	080290b0 	.word	0x080290b0
 80023a4:	080290d0 	.word	0x080290d0
 80023a8:	080290f0 	.word	0x080290f0

080023ac <StarLPTask>:
	char str[82] = { "empty" };
 80023ac:	4ba2      	ldr	r3, [pc, #648]	; (8002638 <StarLPTask+0x28c>)
 80023ae:	224c      	movs	r2, #76	; 0x4c
{
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 80023b4:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 80023b8:	b09f      	sub	sp, #124	; 0x7c
	statuspkt.adcudpover = 0;		// debug use count overruns
 80023ba:	2400      	movs	r4, #0
	consolerxq = xQueueCreate( 80, sizeof( unsigned char ) );		// set up a console rx buffer
 80023bc:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 80026b8 <StarLPTask+0x30c>
	char str[82] = { "empty" };
 80023c0:	9009      	str	r0, [sp, #36]	; 0x24
 80023c2:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80023c6:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 80023ca:	4621      	mov	r1, r4
 80023cc:	f021 f8da 	bl	8023584 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 80023d0:	4b9a      	ldr	r3, [pc, #616]	; (800263c <StarLPTask+0x290>)
	consolerxq = xQueueCreate( 80, sizeof( unsigned char ) );		// set up a console rx buffer
 80023d2:	4622      	mov	r2, r4
 80023d4:	2101      	movs	r1, #1
 80023d6:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 80023d8:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80023da:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80023dc:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	consolerxq = xQueueCreate( 80, sizeof( unsigned char ) );		// set up a console rx buffer
 80023e0:	f012 fa08 	bl	80147f4 <xQueueGenericCreate>
 80023e4:	f8cb 0000 	str.w	r0, [fp]
	if (consolerxq == NULL) {
 80023e8:	2800      	cmp	r0, #0
 80023ea:	f000 8448 	beq.w	8002c7e <StarLPTask+0x8d2>
HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 80023ee:	2201      	movs	r2, #1
 80023f0:	4993      	ldr	r1, [pc, #588]	; (8002640 <StarLPTask+0x294>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80023f2:	4f94      	ldr	r7, [pc, #592]	; (8002644 <StarLPTask+0x298>)
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 80023f4:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 80023f8:	4893      	ldr	r0, [pc, #588]	; (8002648 <StarLPTask+0x29c>)
 80023fa:	f00f fe2d 	bl	8012058 <HAL_UART_Receive_IT>
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 80023fe:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	lcduart_error = HAL_UART_ERROR_NONE;
 8002402:	603c      	str	r4, [r7, #0]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 8002404:	f7fe fe82 	bl	800110c <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 8002408:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	while (main_init_done == 0) { // wait from main to complete the init {
 800240c:	4d8f      	ldr	r5, [pc, #572]	; (800264c <StarLPTask+0x2a0>)
	lcd_uart_init(9600); // then change our baud to match
 800240e:	f7fe fe35 	bl	800107c <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 8002412:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002416:	f7fe fe79 	bl	800110c <lcd_init>
	osDelay(600);
 800241a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800241e:	f011 fef1 	bl	8014204 <osDelay>
	lcd_init(230400);  //  LCD *should* return in 230400 baud
 8002422:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002426:	f7fe fe71 	bl	800110c <lcd_init>
	osDelay(600);
 800242a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800242e:	f011 fee9 	bl	8014204 <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 8002432:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002436:	f7fe fe21 	bl	800107c <lcd_uart_init>
	osDelay(600);
 800243a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800243e:	f011 fee1 	bl	8014204 <osDelay>
	writelcdcmd("page 0");
 8002442:	4883      	ldr	r0, [pc, #524]	; (8002650 <StarLPTask+0x2a4>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002444:	603c      	str	r4, [r7, #0]
	writelcdcmd("page 0");
 8002446:	f7fe ff5d 	bl	8001304 <writelcdcmd>
	printf("LCD page 0\n");
 800244a:	4882      	ldr	r0, [pc, #520]	; (8002654 <StarLPTask+0x2a8>)
 800244c:	f022 f8d2 	bl	80245f4 <puts>
	osDelay(600);
 8002450:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002454:	f011 fed6 	bl	8014204 <osDelay>
	writelcdcmd("cls BLACK");
 8002458:	487f      	ldr	r0, [pc, #508]	; (8002658 <StarLPTask+0x2ac>)
 800245a:	f7fe ff53 	bl	8001304 <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 800245e:	f242 732b 	movw	r3, #10027	; 0x272b
 8002462:	4622      	mov	r2, r4
 8002464:	497d      	ldr	r1, [pc, #500]	; (800265c <StarLPTask+0x2b0>)
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	4650      	mov	r0, sl
 800246a:	230f      	movs	r3, #15
 800246c:	f022 f9ae 	bl	80247cc <siprintf>
	writelcdcmd(str);
 8002470:	4650      	mov	r0, sl
	lcduart_error = HAL_UART_ERROR_NONE;
 8002472:	603c      	str	r4, [r7, #0]
	writelcdcmd(str);
 8002474:	f7fe ff46 	bl	8001304 <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002478:	603c      	str	r4, [r7, #0]
	while (main_init_done == 0) { // wait from main to complete the init {
 800247a:	682c      	ldr	r4, [r5, #0]
 800247c:	2c00      	cmp	r4, #0
 800247e:	d149      	bne.n	8002514 <StarLPTask+0x168>
 8002480:	4e77      	ldr	r6, [pc, #476]	; (8002660 <StarLPTask+0x2b4>)
			writelcdcmd(strcat(str, "...\""));
 8002482:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80026bc <StarLPTask+0x310>
 8002486:	e017      	b.n	80024b8 <StarLPTask+0x10c>
		switch (i & 3) {
 8002488:	f1b8 0f01 	cmp.w	r8, #1
 800248c:	f000 80a4 	beq.w	80025d8 <StarLPTask+0x22c>
			writelcdcmd(strcat(str, ".\""));
 8002490:	4b74      	ldr	r3, [pc, #464]	; (8002664 <StarLPTask+0x2b8>)
 8002492:	4650      	mov	r0, sl
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	789b      	ldrb	r3, [r3, #2]
 8002498:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
 800249c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80024a0:	f7fe ff30 	bl	8001304 <writelcdcmd>
		osDelay(250);
 80024a4:	20fa      	movs	r0, #250	; 0xfa
		i++;
 80024a6:	3401      	adds	r4, #1
		osDelay(250);
 80024a8:	f011 feac 	bl	8014204 <osDelay>
		if (!(netif_is_link_up(&gnetif))) {
 80024ac:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 80024b0:	075a      	lsls	r2, r3, #29
 80024b2:	d529      	bpl.n	8002508 <StarLPTask+0x15c>
	while (main_init_done == 0) { // wait from main to complete the init {
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	bb6b      	cbnz	r3, 8002514 <StarLPTask+0x168>
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80024b8:	f8df e204 	ldr.w	lr, [pc, #516]	; 80026c0 <StarLPTask+0x314>
 80024bc:	46d4      	mov	ip, sl
		switch (i & 3) {
 80024be:	f004 0803 	and.w	r8, r4, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80024c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80024c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80024ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80024ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80024d2:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		switch (i & 3) {
 80024d6:	f1b8 0f02 	cmp.w	r8, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80024da:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80024de:	f82c 3b02 	strh.w	r3, [ip], #2
 80024e2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80024e6:	f88c 3000 	strb.w	r3, [ip]
		switch (i & 3) {
 80024ea:	d07d      	beq.n	80025e8 <StarLPTask+0x23c>
 80024ec:	f1b8 0f03 	cmp.w	r8, #3
 80024f0:	d1ca      	bne.n	8002488 <StarLPTask+0xdc>
			writelcdcmd(strcat(str, "....\""));
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <StarLPTask+0x2bc>)
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	889b      	ldrh	r3, [r3, #4]
 80024f8:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 80024fc:	4650      	mov	r0, sl
 80024fe:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 8002502:	f7fe feff 	bl	8001304 <writelcdcmd>
			break;
 8002506:	e7cd      	b.n	80024a4 <StarLPTask+0xf8>
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 8002508:	4858      	ldr	r0, [pc, #352]	; (800266c <StarLPTask+0x2c0>)
 800250a:	f7fe fefb 	bl	8001304 <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 800250e:	682b      	ldr	r3, [r5, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0d1      	beq.n	80024b8 <StarLPTask+0x10c>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002514:	2400      	movs	r4, #0
	writelcdcmd("ref 0");		// refresh screen
 8002516:	4856      	ldr	r0, [pc, #344]	; (8002670 <StarLPTask+0x2c4>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002518:	4e56      	ldr	r6, [pc, #344]	; (8002674 <StarLPTask+0x2c8>)
	lcduart_error = HAL_UART_ERROR_NONE;
 800251a:	603c      	str	r4, [r7, #0]
	writelcdcmd("ref 0");		// refresh screen
 800251c:	f7fe fef2 	bl	8001304 <writelcdcmd>
	writelcdcmd("page 0");
 8002520:	484b      	ldr	r0, [pc, #300]	; (8002650 <StarLPTask+0x2a4>)
	int last3min = 0;
 8002522:	46a0      	mov	r8, r4
	lcduart_error = HAL_UART_ERROR_NONE;
 8002524:	603c      	str	r4, [r7, #0]
	int last3min = 0;
 8002526:	9407      	str	r4, [sp, #28]
	writelcdcmd("page 0");
 8002528:	f7fe feec 	bl	8001304 <writelcdcmd>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 800252c:	4b43      	ldr	r3, [pc, #268]	; (800263c <StarLPTask+0x290>)
	uint16_t onesectimer = 0;
 800252e:	46c1      	mov	r9, r8
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002530:	4951      	ldr	r1, [pc, #324]	; (8002678 <StarLPTask+0x2cc>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8002532:	f8b3 005c 	ldrh.w	r0, [r3, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002536:	4f51      	ldr	r7, [pc, #324]	; (800267c <StarLPTask+0x2d0>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8002538:	f893 4070 	ldrb.w	r4, [r3, #112]	; 0x70
 800253c:	b280      	uxth	r0, r0
 800253e:	f893 5071 	ldrb.w	r5, [r3, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002542:	f8d1 2420 	ldr.w	r2, [r1, #1056]	; 0x420
 8002546:	f8d1 3424 	ldr.w	r3, [r1, #1060]	; 0x424
 800254a:	9001      	str	r0, [sp, #4]
 800254c:	484c      	ldr	r0, [pc, #304]	; (8002680 <StarLPTask+0x2d4>)
 800254e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002552:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002556:	f8d1 1428 	ldr.w	r1, [r1, #1064]	; 0x428
	gainchanged = 0;
 800255a:	4647      	mov	r7, r8
				agc = (agc) ? 0 : 1;
 800255c:	4d49      	ldr	r5, [pc, #292]	; (8002684 <StarLPTask+0x2d8>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800255e:	9100      	str	r1, [sp, #0]
 8002560:	4949      	ldr	r1, [pc, #292]	; (8002688 <StarLPTask+0x2dc>)
 8002562:	f022 f933 	bl	80247cc <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8002566:	4849      	ldr	r0, [pc, #292]	; (800268c <StarLPTask+0x2e0>)
 8002568:	f00b fee4 	bl	800e334 <HAL_TIM_Base_Start>
	tftp_example_init_client();
 800256c:	f005 f814 	bl	8007598 <tftp_example_init_client>
	lptask_init_done = 1;		// this lp task has done its initialisation
 8002570:	4b47      	ldr	r3, [pc, #284]	; (8002690 <StarLPTask+0x2e4>)
 8002572:	2201      	movs	r2, #1
	gainchanged = 0;
 8002574:	f8cd 8018 	str.w	r8, [sp, #24]
	lptask_init_done = 1;		// this lp task has done its initialisation
 8002578:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 800257a:	4846      	ldr	r0, [pc, #280]	; (8002694 <StarLPTask+0x2e8>)
		tenmstimer++;
 800257c:	3701      	adds	r7, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 800257e:	f009 f8df 	bl	800b740 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 8002582:	200a      	movs	r0, #10
 8002584:	f011 fe3e 	bl	8014204 <osDelay>
		globaladcnoise = abs(meanwindiff);
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <StarLPTask+0x2ec>)
 800258a:	4a44      	ldr	r2, [pc, #272]	; (800269c <StarLPTask+0x2f0>)
		tenmstimer++;
 800258c:	b2bf      	uxth	r7, r7
		globaladcnoise = abs(meanwindiff);
 800258e:	f9b3 3000 	ldrsh.w	r3, [r3]
				printf("AGC is ");
 8002592:	4e43      	ldr	r6, [pc, #268]	; (80026a0 <StarLPTask+0x2f4>)
		globaladcnoise = abs(meanwindiff);
 8002594:	2b00      	cmp	r3, #0
					printf("OFF\n");
 8002596:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80026c4 <StarLPTask+0x318>
		globaladcnoise = abs(meanwindiff);
 800259a:	bfb8      	it	lt
 800259c:	425b      	neglt	r3, r3
 800259e:	b29b      	uxth	r3, r3
 80025a0:	6013      	str	r3, [r2, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 80025a2:	09db      	lsrs	r3, r3, #7
 80025a4:	4a3f      	ldr	r2, [pc, #252]	; (80026a4 <StarLPTask+0x2f8>)
 80025a6:	3304      	adds	r3, #4
 80025a8:	8013      	strh	r3, [r2, #0]
		while (xQueueReceive(consolerxq, &inch, 0)) {
 80025aa:	2200      	movs	r2, #0
 80025ac:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 80025b0:	f8db 0000 	ldr.w	r0, [fp]
 80025b4:	f012 fb22 	bl	8014bfc <xQueueReceive>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	f000 8085 	beq.w	80026c8 <StarLPTask+0x31c>
			if (inch == 0x03)	{		// control C
 80025be:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 80025c2:	2803      	cmp	r0, #3
 80025c4:	d025      	beq.n	8002612 <StarLPTask+0x266>
			if ((isdigit(inch)) && (agc == 0)) {
 80025c6:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <StarLPTask+0x2fc>)
 80025c8:	5cc3      	ldrb	r3, [r0, r3]
 80025ca:	075b      	lsls	r3, r3, #29
 80025cc:	d501      	bpl.n	80025d2 <StarLPTask+0x226>
 80025ce:	882b      	ldrh	r3, [r5, #0]
 80025d0:	b1b3      	cbz	r3, 8002600 <StarLPTask+0x254>
			__io_putchar(inch); // putchar(inch);	// echo console rx to tx
 80025d2:	f001 fcbd 	bl	8003f50 <__io_putchar>
 80025d6:	e7e8      	b.n	80025aa <StarLPTask+0x1fe>
			writelcdcmd(strcat(str, "..\""));
 80025d8:	4b34      	ldr	r3, [pc, #208]	; (80026ac <StarLPTask+0x300>)
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 80025e0:	4650      	mov	r0, sl
 80025e2:	f7fe fe8f 	bl	8001304 <writelcdcmd>
			break;
 80025e6:	e75d      	b.n	80024a4 <StarLPTask+0xf8>
			writelcdcmd(strcat(str, "...\""));
 80025e8:	f8d9 0000 	ldr.w	r0, [r9]
 80025ec:	f899 3004 	ldrb.w	r3, [r9, #4]
 80025f0:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 80025f4:	4650      	mov	r0, sl
 80025f6:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 80025fa:	f7fe fe83 	bl	8001304 <writelcdcmd>
			break;
 80025fe:	e751      	b.n	80024a4 <StarLPTask+0xf8>
				setpgagain(inch - '0');
 8002600:	3830      	subs	r0, #48	; 0x30
 8002602:	f002 f921 	bl	8004848 <setpgagain>
				printf("Manually setting PGA gain to %c\n", inch);
 8002606:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 800260a:	4829      	ldr	r0, [pc, #164]	; (80026b0 <StarLPTask+0x304>)
 800260c:	f021 ff56 	bl	80244bc <iprintf>
 8002610:	e7cb      	b.n	80025aa <StarLPTask+0x1fe>
				agc = (agc) ? 0 : 1;
 8002612:	882b      	ldrh	r3, [r5, #0]
				printf("AGC is ");
 8002614:	4630      	mov	r0, r6
				agc = (agc) ? 0 : 1;
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	802b      	strh	r3, [r5, #0]
				printf("AGC is ");
 800261e:	f021 ff4d 	bl	80244bc <iprintf>
				if (agc)
 8002622:	882b      	ldrh	r3, [r5, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8135 	beq.w	8002894 <StarLPTask+0x4e8>
					printf("ON\n");
 800262a:	4822      	ldr	r0, [pc, #136]	; (80026b4 <StarLPTask+0x308>)
 800262c:	f021 ffe2 	bl	80245f4 <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8002630:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8002634:	e7c7      	b.n	80025c6 <StarLPTask+0x21a>
 8002636:	bf00      	nop
 8002638:	08028660 	.word	0x08028660
 800263c:	20002b24 	.word	0x20002b24
 8002640:	20001c74 	.word	0x20001c74
 8002644:	2000167c 	.word	0x2000167c
 8002648:	20002564 	.word	0x20002564
 800264c:	20002910 	.word	0x20002910
 8002650:	08029158 	.word	0x08029158
 8002654:	08029154 	.word	0x08029154
 8002658:	08029160 	.word	0x08029160
 800265c:	0802916c 	.word	0x0802916c
 8002660:	20002db0 	.word	0x20002db0
 8002664:	08029228 	.word	0x08029228
 8002668:	08029238 	.word	0x08029238
 800266c:	08029240 	.word	0x08029240
 8002670:	080291a8 	.word	0x080291a8
 8002674:	20002d38 	.word	0x20002d38
 8002678:	1ff0f000 	.word	0x1ff0f000
 800267c:	20002cdc 	.word	0x20002cdc
 8002680:	20000084 	.word	0x20000084
 8002684:	20000010 	.word	0x20000010
 8002688:	080291b0 	.word	0x080291b0
 800268c:	20002518 	.word	0x20002518
 8002690:	2000290c 	.word	0x2000290c
 8002694:	200021b8 	.word	0x200021b8
 8002698:	20000748 	.word	0x20000748
 800269c:	200006f8 	.word	0x200006f8
 80026a0:	0802927c 	.word	0x0802927c
 80026a4:	20000000 	.word	0x20000000
 80026a8:	080e224d 	.word	0x080e224d
 80026ac:	0802922c 	.word	0x0802922c
 80026b0:	0802928c 	.word	0x0802928c
 80026b4:	08029284 	.word	0x08029284
 80026b8:	20001c78 	.word	0x20001c78
 80026bc:	08029230 	.word	0x08029230
 80026c0:	080291f8 	.word	0x080291f8
 80026c4:	08029288 	.word	0x08029288
		if (!(ledsenabled)) {
 80026c8:	4b9c      	ldr	r3, [pc, #624]	; (800293c <StarLPTask+0x590>)
 80026ca:	4604      	mov	r4, r0
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80e6 	beq.w	80028a0 <StarLPTask+0x4f4>
		} else if (ledhang) {	// trigger led
 80026d4:	4a9a      	ldr	r2, [pc, #616]	; (8002940 <StarLPTask+0x594>)
 80026d6:	6813      	ldr	r3, [r2, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80e1 	beq.w	80028a0 <StarLPTask+0x4f4>
			ledhang--;
 80026de:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80026e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e4:	4897      	ldr	r0, [pc, #604]	; (8002944 <StarLPTask+0x598>)
			ledhang--;
 80026e6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80026e8:	2201      	movs	r2, #1
 80026ea:	f008 f9a5 	bl	800aa38 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 80026ee:	4996      	ldr	r1, [pc, #600]	; (8002948 <StarLPTask+0x59c>)
 80026f0:	4896      	ldr	r0, [pc, #600]	; (800294c <StarLPTask+0x5a0>)
 80026f2:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80026f4:	6803      	ldr	r3, [r0, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	f040 80d9 	bne.w	80028ae <StarLPTask+0x502>
		processnex();		// process Nextion
 80026fc:	f7ff fc38 	bl	8001f70 <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 8002700:	4a93      	ldr	r2, [pc, #588]	; (8002950 <StarLPTask+0x5a4>)
 8002702:	1cfb      	adds	r3, r7, #3
 8002704:	fb02 f303 	mul.w	r3, r2, r3
 8002708:	4a92      	ldr	r2, [pc, #584]	; (8002954 <StarLPTask+0x5a8>)
 800270a:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 800270e:	d31e      	bcc.n	800274e <StarLPTask+0x3a2>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8002710:	4b8d      	ldr	r3, [pc, #564]	; (8002948 <StarLPTask+0x59c>)
 8002712:	4c91      	ldr	r4, [pc, #580]	; (8002958 <StarLPTask+0x5ac>)
 8002714:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	f103 0219 	add.w	r2, r3, #25
 800271c:	4291      	cmp	r1, r2
 800271e:	f200 820c 	bhi.w	8002b3a <StarLPTask+0x78e>
				if (jabbertimeout) {
 8002722:	4a8e      	ldr	r2, [pc, #568]	; (800295c <StarLPTask+0x5b0>)
 8002724:	6813      	ldr	r3, [r2, #0]
 8002726:	b10b      	cbz	r3, 800272c <StarLPTask+0x380>
					jabbertimeout--;		// de-arm count
 8002728:	3b01      	subs	r3, #1
 800272a:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 800272c:	4b86      	ldr	r3, [pc, #536]	; (8002948 <StarLPTask+0x59c>)
 800272e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002730:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 8002732:	9b06      	ldr	r3, [sp, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8221 	beq.w	8002b7c <StarLPTask+0x7d0>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 800273a:	4b89      	ldr	r3, [pc, #548]	; (8002960 <StarLPTask+0x5b4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 81d2 	beq.w	8002ae8 <StarLPTask+0x73c>
 8002744:	4b87      	ldr	r3, [pc, #540]	; (8002964 <StarLPTask+0x5b8>)
			} else if (lcd_currentpage == 1) {
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b01      	cmp	r3, #1
 800274a:	f000 8258 	beq.w	8002bfe <StarLPTask+0x852>
				lcd_showvars();
 800274e:	4a86      	ldr	r2, [pc, #536]	; (8002968 <StarLPTask+0x5bc>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8002750:	f107 030b 	add.w	r3, r7, #11
				lcd_showvars();
 8002754:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8002758:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800275c:	3a01      	subs	r2, #1
 800275e:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002762:	f080 80dd 	bcs.w	8002920 <StarLPTask+0x574>
			lcd_trigplot();		// update lcd trigger and noise plots
 8002766:	4a81      	ldr	r2, [pc, #516]	; (800296c <StarLPTask+0x5c0>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002768:	f107 031b 	add.w	r3, r7, #27
			lcd_trigplot();		// update lcd trigger and noise plots
 800276c:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002770:	4a7f      	ldr	r2, [pc, #508]	; (8002970 <StarLPTask+0x5c4>)
 8002772:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 8002776:	d31a      	bcc.n	80027ae <StarLPTask+0x402>
			if (agc) {
 8002778:	882b      	ldrh	r3, [r5, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 81b2 	beq.w	8002ae4 <StarLPTask+0x738>
				trigsin10sec = trigs - prevtrigs;
 8002780:	4b72      	ldr	r3, [pc, #456]	; (800294c <StarLPTask+0x5a0>)
 8002782:	4c7c      	ldr	r4, [pc, #496]	; (8002974 <StarLPTask+0x5c8>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002784:	4e7c      	ldr	r6, [pc, #496]	; (8002978 <StarLPTask+0x5cc>)
				trigsin10sec = trigs - prevtrigs;
 8002786:	681a      	ldr	r2, [r3, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002788:	8831      	ldrh	r1, [r6, #0]
				trigsin10sec = trigs - prevtrigs;
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	f8df 824c 	ldr.w	r8, [pc, #588]	; 80029dc <StarLPTask+0x630>
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002790:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 8002792:	eba2 0303 	sub.w	r3, r2, r3
 8002796:	f8c8 3000 	str.w	r3, [r8]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 800279a:	d802      	bhi.n	80027a2 <StarLPTask+0x3f6>
					if (trigsin10sec < MINTRIGS10S)
 800279c:	2b01      	cmp	r3, #1
 800279e:	f240 825a 	bls.w	8002c56 <StarLPTask+0x8aa>
				if (trigsin10sec > MAXTRIGS10S)
 80027a2:	2b0a      	cmp	r3, #10
 80027a4:	f200 822e 	bhi.w	8002c04 <StarLPTask+0x858>
			gainchanged = 0;
 80027a8:	2300      	movs	r3, #0
				prevtrigs = trigs;
 80027aa:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 80027ac:	9306      	str	r3, [sp, #24]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 80027ae:	f640 338c 	movw	r3, #2956	; 0xb8c
 80027b2:	429f      	cmp	r7, r3
 80027b4:	d94e      	bls.n	8002854 <StarLPTask+0x4a8>
			if (gpsgood == 0) {	// gps is not talking to us
 80027b6:	4b71      	ldr	r3, [pc, #452]	; (800297c <StarLPTask+0x5d0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 818e 	bne.w	8002adc <StarLPTask+0x730>
				printf("GPS serial comms problem?\n");
 80027c0:	486f      	ldr	r0, [pc, #444]	; (8002980 <StarLPTask+0x5d4>)
 80027c2:	f021 ff17 	bl	80245f4 <puts>
				if (gpsbadcount++ > 9) {
 80027c6:	496f      	ldr	r1, [pc, #444]	; (8002984 <StarLPTask+0x5d8>)
 80027c8:	680b      	ldr	r3, [r1, #0]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	600a      	str	r2, [r1, #0]
 80027d0:	f300 824b 	bgt.w	8002c6a <StarLPTask+0x8be>
			if (psensor == MPL115A2) {
 80027d4:	4b6c      	ldr	r3, [pc, #432]	; (8002988 <StarLPTask+0x5dc>)
			gpsgood = 0;			// reset the good flag
 80027d6:	2200      	movs	r2, #0
 80027d8:	4968      	ldr	r1, [pc, #416]	; (800297c <StarLPTask+0x5d0>)
			if (psensor == MPL115A2) {
 80027da:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 80027dc:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f000 8204 	beq.w	8002bec <StarLPTask+0x840>
			} else if (psensor == MPL3115A2) {
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f000 8223 	beq.w	8002c30 <StarLPTask+0x884>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80027ea:	4b68      	ldr	r3, [pc, #416]	; (800298c <StarLPTask+0x5e0>)
			tenmstimer = 0;
 80027ec:	2700      	movs	r7, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80027ee:	4a56      	ldr	r2, [pc, #344]	; (8002948 <StarLPTask+0x59c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80027f6:	0e1a      	lsrs	r2, r3, #24
 80027f8:	4865      	ldr	r0, [pc, #404]	; (8002990 <StarLPTask+0x5e4>)
 80027fa:	b289      	uxth	r1, r1
 80027fc:	9202      	str	r2, [sp, #8]
 80027fe:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002802:	9201      	str	r2, [sp, #4]
 8002804:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002808:	b2db      	uxtb	r3, r3
 800280a:	9200      	str	r2, [sp, #0]
 800280c:	f242 722b 	movw	r2, #10027	; 0x272b
 8002810:	f021 fe54 	bl	80244bc <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 8002814:	4b5f      	ldr	r3, [pc, #380]	; (8002994 <StarLPTask+0x5e8>)
 8002816:	4a60      	ldr	r2, [pc, #384]	; (8002998 <StarLPTask+0x5ec>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	494c      	ldr	r1, [pc, #304]	; (800294c <StarLPTask+0x5a0>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	485e      	ldr	r0, [pc, #376]	; (800299c <StarLPTask+0x5f0>)
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	9304      	str	r3, [sp, #16]
 8002826:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <StarLPTask+0x5f4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	4b5d      	ldr	r3, [pc, #372]	; (80029a4 <StarLPTask+0x5f8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	9303      	str	r3, [sp, #12]
 8002834:	4b5c      	ldr	r3, [pc, #368]	; (80029a8 <StarLPTask+0x5fc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <StarLPTask+0x5cc>)
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <StarLPTask+0x600>)
 8002842:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002846:	4b5a      	ldr	r3, [pc, #360]	; (80029b0 <StarLPTask+0x604>)
 8002848:	9305      	str	r3, [sp, #20]
 800284a:	4b5a      	ldr	r3, [pc, #360]	; (80029b4 <StarLPTask+0x608>)
 800284c:	6809      	ldr	r1, [r1, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f021 fe34 	bl	80244bc <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 8002854:	f109 0315 	add.w	r3, r9, #21
 8002858:	4a57      	ldr	r2, [pc, #348]	; (80029b8 <StarLPTask+0x60c>)
 800285a:	b29b      	uxth	r3, r3
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	4a56      	ldr	r2, [pc, #344]	; (80029bc <StarLPTask+0x610>)
 8002862:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002866:	d30b      	bcc.n	8002880 <StarLPTask+0x4d4>
 8002868:	9b07      	ldr	r3, [sp, #28]
 800286a:	4599      	cmp	r9, r3
 800286c:	d008      	beq.n	8002880 <StarLPTask+0x4d4>
			if (boosttrys > 0)		// timer for boost gain oscillating
 800286e:	4a54      	ldr	r2, [pc, #336]	; (80029c0 <StarLPTask+0x614>)
 8002870:	8813      	ldrh	r3, [r2, #0]
 8002872:	b10b      	cbz	r3, 8002878 <StarLPTask+0x4cc>
				boosttrys--;
 8002874:	3b01      	subs	r3, #1
 8002876:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();		// add a point to the pressure plot
 8002878:	f7ff f92e 	bl	8001ad8 <lcd_pressplot>
 800287c:	f8cd 901c 	str.w	r9, [sp, #28]
		if (onesectimer > 900) {			// 15 mins
 8002880:	f240 3385 	movw	r3, #901	; 0x385
 8002884:	4599      	cmp	r9, r3
 8002886:	f47f ae78 	bne.w	800257a <StarLPTask+0x1ce>
			onesectimer = 0;
 800288a:	f04f 0900 	mov.w	r9, #0
			requestapisn();	//update s/n and udp target (reboot on fail)
 800288e:	f004 fb03 	bl	8006e98 <requestapisn>
 8002892:	e672      	b.n	800257a <StarLPTask+0x1ce>
					printf("OFF\n");
 8002894:	4640      	mov	r0, r8
 8002896:	f021 fead 	bl	80245f4 <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 800289a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 800289e:	e692      	b.n	80025c6 <StarLPTask+0x21a>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80028a0:	2200      	movs	r2, #0
 80028a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a6:	4827      	ldr	r0, [pc, #156]	; (8002944 <StarLPTask+0x598>)
 80028a8:	f008 f8c6 	bl	800aa38 <HAL_GPIO_WritePin>
 80028ac:	e71f      	b.n	80026ee <StarLPTask+0x342>
			if (soundenabled) {
 80028ae:	4b45      	ldr	r3, [pc, #276]	; (80029c4 <StarLPTask+0x618>)
			trigs = statuspkt.trigcount;
 80028b0:	6fca      	ldr	r2, [r1, #124]	; 0x7c
			if (soundenabled) {
 80028b2:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 80028b4:	6002      	str	r2, [r0, #0]
			if (soundenabled) {
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 8173 	bne.w	8002ba2 <StarLPTask+0x7f6>
 80028bc:	4e42      	ldr	r6, [pc, #264]	; (80029c8 <StarLPTask+0x61c>)
				printf("sem wait 1a\n");
 80028be:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80029e0 <StarLPTask+0x634>
 80028c2:	e002      	b.n	80028ca <StarLPTask+0x51e>
 80028c4:	4640      	mov	r0, r8
 80028c6:	f021 fe95 	bl	80245f4 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80028ca:	2101      	movs	r1, #1
 80028cc:	6830      	ldr	r0, [r6, #0]
 80028ce:	f012 fa5d 	bl	8014d8c <xQueueSemaphoreTake>
 80028d2:	2801      	cmp	r0, #1
 80028d4:	d1f6      	bne.n	80028c4 <StarLPTask+0x518>
			strcpy(str, ctime(&epochtime));		// ctime
 80028d6:	483d      	ldr	r0, [pc, #244]	; (80029cc <StarLPTask+0x620>)
 80028d8:	f020 fc5a 	bl	8023190 <ctime>
 80028dc:	4601      	mov	r1, r0
 80028de:	4650      	mov	r0, sl
 80028e0:	f022 f805 	bl	80248ee <stpcpy>
			i = 0;
 80028e4:	2300      	movs	r3, #0
			while (i < strlen(str)) {
 80028e6:	eba0 000a 	sub.w	r0, r0, sl
 80028ea:	4939      	ldr	r1, [pc, #228]	; (80029d0 <StarLPTask+0x624>)
 80028ec:	e008      	b.n	8002900 <StarLPTask+0x554>
				if ((str[i] != '\n') && (str[i] != '\r'))
 80028ee:	f81a 2003 	ldrb.w	r2, [sl, r3]
 80028f2:	2a0a      	cmp	r2, #10
 80028f4:	d003      	beq.n	80028fe <StarLPTask+0x552>
 80028f6:	2a0d      	cmp	r2, #13
 80028f8:	d001      	beq.n	80028fe <StarLPTask+0x552>
					trigtimestr[n++] = str[i];
 80028fa:	550a      	strb	r2, [r1, r4]
 80028fc:	3401      	adds	r4, #1
				i++;
 80028fe:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 8002900:	4283      	cmp	r3, r0
 8002902:	d3f4      	bcc.n	80028ee <StarLPTask+0x542>
			trigtimestr[n] = '\0';
 8002904:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8002906:	6830      	ldr	r0, [r6, #0]
			trigtimestr[n] = '\0';
 8002908:	550b      	strb	r3, [r1, r4]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800290a:	461a      	mov	r2, r3
 800290c:	4619      	mov	r1, r3
 800290e:	f011 ffa3 	bl	8014858 <xQueueGenericSend>
 8002912:	2801      	cmp	r0, #1
 8002914:	f43f aef2 	beq.w	80026fc <StarLPTask+0x350>
				printf("semaphore 1a release failed\n");
 8002918:	482e      	ldr	r0, [pc, #184]	; (80029d4 <StarLPTask+0x628>)
 800291a:	f021 fe6b 	bl	80245f4 <puts>
 800291e:	e6ed      	b.n	80026fc <StarLPTask+0x350>
			if (ledsenabled)
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <StarLPTask+0x590>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002926:	4807      	ldr	r0, [pc, #28]	; (8002944 <StarLPTask+0x598>)
			if (ledsenabled)
 8002928:	881a      	ldrh	r2, [r3, #0]
 800292a:	2a00      	cmp	r2, #0
 800292c:	f000 8152 	beq.w	8002bd4 <StarLPTask+0x828>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002930:	f008 f89c 	bl	800aa6c <HAL_GPIO_TogglePin>
 8002934:	4e24      	ldr	r6, [pc, #144]	; (80029c8 <StarLPTask+0x61c>)
				printf("sem wait 1b\n");
 8002936:	4c28      	ldr	r4, [pc, #160]	; (80029d8 <StarLPTask+0x62c>)
 8002938:	e057      	b.n	80029ea <StarLPTask+0x63e>
 800293a:	bf00      	nop
 800293c:	20000270 	.word	0x20000270
 8002940:	20000744 	.word	0x20000744
 8002944:	40020c00 	.word	0x40020c00
 8002948:	20002b24 	.word	0x20002b24
 800294c:	2000293c 	.word	0x2000293c
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	19999999 	.word	0x19999999
 8002958:	20002900 	.word	0x20002900
 800295c:	200006fc 	.word	0x200006fc
 8002960:	200015ec 	.word	0x200015ec
 8002964:	200015e8 	.word	0x200015e8
 8002968:	c28f5c29 	.word	0xc28f5c29
 800296c:	26e978d5 	.word	0x26e978d5
 8002970:	00418937 	.word	0x00418937
 8002974:	2000292c 	.word	0x2000292c
 8002978:	20000002 	.word	0x20000002
 800297c:	200029e4 	.word	0x200029e4
 8002980:	08029440 	.word	0x08029440
 8002984:	20001cc0 	.word	0x20001cc0
 8002988:	20002c64 	.word	0x20002c64
 800298c:	20002920 	.word	0x20002920
 8002990:	0802949c 	.word	0x0802949c
 8002994:	20002c6c 	.word	0x20002c6c
 8002998:	10624dd3 	.word	0x10624dd3
 800299c:	080294b8 	.word	0x080294b8
 80029a0:	20002c5c 	.word	0x20002c5c
 80029a4:	20002c68 	.word	0x20002c68
 80029a8:	20002c60 	.word	0x20002c60
 80029ac:	20002c58 	.word	0x20002c58
 80029b0:	20000054 	.word	0x20000054
 80029b4:	200006f8 	.word	0x200006f8
 80029b8:	a4fa4fa5 	.word	0xa4fa4fa5
 80029bc:	016c16c1 	.word	0x016c16c1
 80029c0:	20002bd8 	.word	0x20002bd8
 80029c4:	20000276 	.word	0x20000276
 80029c8:	20002934 	.word	0x20002934
 80029cc:	200029d8 	.word	0x200029d8
 80029d0:	2000023c 	.word	0x2000023c
 80029d4:	080292bc 	.word	0x080292bc
 80029d8:	080292e8 	.word	0x080292e8
 80029dc:	20002940 	.word	0x20002940
 80029e0:	080292b0 	.word	0x080292b0
 80029e4:	4620      	mov	r0, r4
 80029e6:	f021 fe05 	bl	80245f4 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80029ea:	2101      	movs	r1, #1
 80029ec:	6830      	ldr	r0, [r6, #0]
 80029ee:	f012 f9cd 	bl	8014d8c <xQueueSemaphoreTake>
 80029f2:	2801      	cmp	r0, #1
 80029f4:	d1f6      	bne.n	80029e4 <StarLPTask+0x638>
			strcpy(str, ctime(&epochtime));
 80029f6:	48a5      	ldr	r0, [pc, #660]	; (8002c8c <StarLPTask+0x8e0>)
 80029f8:	f020 fbca 	bl	8023190 <ctime>
 80029fc:	4601      	mov	r1, r0
 80029fe:	4650      	mov	r0, sl
			sprintf(statstr,
 8002a00:	4ca3      	ldr	r4, [pc, #652]	; (8002c90 <StarLPTask+0x8e4>)
			strcpy(str, ctime(&epochtime));
 8002a02:	f021 ff74 	bl	80248ee <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002a06:	eba0 000a 	sub.w	r0, r0, sl
 8002a0a:	2200      	movs	r2, #0
			sprintf(nowtimestr, "\"%s\"", str);
 8002a0c:	49a1      	ldr	r1, [pc, #644]	; (8002c94 <StarLPTask+0x8e8>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002a0e:	f100 0378 	add.w	r3, r0, #120	; 0x78
			sprintf(nowtimestr, "\"%s\"", str);
 8002a12:	48a1      	ldr	r0, [pc, #644]	; (8002c98 <StarLPTask+0x8ec>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002a14:	446b      	add	r3, sp
 8002a16:	f803 2c55 	strb.w	r2, [r3, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 8002a1a:	4652      	mov	r2, sl
 8002a1c:	f021 fed6 	bl	80247cc <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8002a20:	4b9e      	ldr	r3, [pc, #632]	; (8002c9c <StarLPTask+0x8f0>)
 8002a22:	4a9f      	ldr	r2, [pc, #636]	; (8002ca0 <StarLPTask+0x8f4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	499e      	ldr	r1, [pc, #632]	; (8002ca4 <StarLPTask+0x8f8>)
 8002a2a:	489f      	ldr	r0, [pc, #636]	; (8002ca8 <StarLPTask+0x8fc>)
 8002a2c:	f021 fece 	bl	80247cc <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8002a30:	4b9e      	ldr	r3, [pc, #632]	; (8002cac <StarLPTask+0x900>)
 8002a32:	4a9f      	ldr	r2, [pc, #636]	; (8002cb0 <StarLPTask+0x904>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	499a      	ldr	r1, [pc, #616]	; (8002ca4 <StarLPTask+0x8f8>)
 8002a3a:	489e      	ldr	r0, [pc, #632]	; (8002cb4 <StarLPTask+0x908>)
 8002a3c:	f021 fec6 	bl	80247cc <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002a40:	4b9d      	ldr	r3, [pc, #628]	; (8002cb8 <StarLPTask+0x90c>)
			sprintf(statstr,
 8002a42:	499e      	ldr	r1, [pc, #632]	; (8002cbc <StarLPTask+0x910>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002a44:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8002a48:	489d      	ldr	r0, [pc, #628]	; (8002cc0 <StarLPTask+0x914>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bfb8      	it	lt
 8002a4e:	425b      	neglt	r3, r3
			sprintf(statstr,
 8002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	4b9b      	ldr	r3, [pc, #620]	; (8002cc4 <StarLPTask+0x918>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5e:	9302      	str	r3, [sp, #8]
 8002a60:	4b99      	ldr	r3, [pc, #612]	; (8002cc8 <StarLPTask+0x91c>)
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	9303      	str	r3, [sp, #12]
 8002a66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a68:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4b97      	ldr	r3, [pc, #604]	; (8002ccc <StarLPTask+0x920>)
 8002a6e:	f021 fead 	bl	80247cc <siprintf>
			if (gpslocked) {
 8002a72:	4b97      	ldr	r3, [pc, #604]	; (8002cd0 <StarLPTask+0x924>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 809d 	beq.w	8002bb6 <StarLPTask+0x80a>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 8002a7c:	7ee2      	ldrb	r2, [r4, #27]
 8002a7e:	69e3      	ldr	r3, [r4, #28]
 8002a80:	6a21      	ldr	r1, [r4, #32]
 8002a82:	4894      	ldr	r0, [pc, #592]	; (8002cd4 <StarLPTask+0x928>)
 8002a84:	9100      	str	r1, [sp, #0]
 8002a86:	4994      	ldr	r1, [pc, #592]	; (8002cd8 <StarLPTask+0x92c>)
 8002a88:	f021 fea0 	bl	80247cc <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6830      	ldr	r0, [r6, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4619      	mov	r1, r3
 8002a94:	f011 fee0 	bl	8014858 <xQueueGenericSend>
 8002a98:	2801      	cmp	r0, #1
 8002a9a:	d002      	beq.n	8002aa2 <StarLPTask+0x6f6>
				printf("semaphore 1b release failed\n");
 8002a9c:	488f      	ldr	r0, [pc, #572]	; (8002cdc <StarLPTask+0x930>)
 8002a9e:	f021 fda9 	bl	80245f4 <puts>
			onesectimer++;
 8002aa2:	f109 0901 	add.w	r9, r9, #1
				printf("sem wait 1c\n");
 8002aa6:	4c8e      	ldr	r4, [pc, #568]	; (8002ce0 <StarLPTask+0x934>)
			onesectimer++;
 8002aa8:	fa1f f989 	uxth.w	r9, r9
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8002aac:	e002      	b.n	8002ab4 <StarLPTask+0x708>
				printf("sem wait 1c\n");
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f021 fda0 	bl	80245f4 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8002ab4:	2119      	movs	r1, #25
 8002ab6:	6830      	ldr	r0, [r6, #0]
 8002ab8:	f012 f968 	bl	8014d8c <xQueueSemaphoreTake>
 8002abc:	2801      	cmp	r0, #1
 8002abe:	d1f6      	bne.n	8002aae <StarLPTask+0x702>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	6830      	ldr	r0, [r6, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f011 fec6 	bl	8014858 <xQueueGenericSend>
 8002acc:	2801      	cmp	r0, #1
 8002ace:	d002      	beq.n	8002ad6 <StarLPTask+0x72a>
				printf("semaphore 1c release failed\n");
 8002ad0:	4884      	ldr	r0, [pc, #528]	; (8002ce4 <StarLPTask+0x938>)
 8002ad2:	f021 fd8f 	bl	80245f4 <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 8002ad6:	f7fe ff01 	bl	80018dc <lcd_trigplot>
 8002ada:	e644      	b.n	8002766 <StarLPTask+0x3ba>
				gpsbadcount = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	4a82      	ldr	r2, [pc, #520]	; (8002ce8 <StarLPTask+0x93c>)
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e677      	b.n	80027d4 <StarLPTask+0x428>
			gainchanged = 0;
 8002ae4:	9306      	str	r3, [sp, #24]
 8002ae6:	e662      	b.n	80027ae <StarLPTask+0x402>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8002ae8:	4c80      	ldr	r4, [pc, #512]	; (8002cec <StarLPTask+0x940>)
 8002aea:	8823      	ldrh	r3, [r4, #0]
 8002aec:	454b      	cmp	r3, r9
 8002aee:	4b80      	ldr	r3, [pc, #512]	; (8002cf0 <StarLPTask+0x944>)
 8002af0:	f43f ae29 	beq.w	8002746 <StarLPTask+0x39a>
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	2a00      	cmp	r2, #0
 8002af8:	f47f ae25 	bne.w	8002746 <StarLPTask+0x39a>
				timeinfo = *localtime(&localepochtime);
 8002afc:	487d      	ldr	r0, [pc, #500]	; (8002cf4 <StarLPTask+0x948>)
 8002afe:	f020 fbe1 	bl	80232c4 <localtime>
 8002b02:	4e7d      	ldr	r6, [pc, #500]	; (8002cf8 <StarLPTask+0x94c>)
 8002b04:	4684      	mov	ip, r0
 8002b06:	46b6      	mov	lr, r6
 8002b08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002b0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002b10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002b14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002b18:	f8dc 3000 	ldr.w	r3, [ip]
				lastsec = onesectimer;
 8002b1c:	f8a4 9000 	strh.w	r9, [r4]
				timeinfo = *localtime(&localepochtime);
 8002b20:	f8ce 3000 	str.w	r3, [lr]
				lcd_time();
 8002b24:	f7fe fcc8 	bl	80014b8 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 8002b28:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <StarLPTask+0x950>)
 8002b2a:	69f2      	ldr	r2, [r6, #28]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	f43f ae0d 	beq.w	800274e <StarLPTask+0x3a2>
					lcd_date();
 8002b34:	f7fe fd16 	bl	8001564 <lcd_date>
 8002b38:	e609      	b.n	800274e <StarLPTask+0x3a2>
				statuspkt.jabcnt++;
 8002b3a:	4955      	ldr	r1, [pc, #340]	; (8002c90 <StarLPTask+0x8e4>)
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002b3c:	4870      	ldr	r0, [pc, #448]	; (8002d00 <StarLPTask+0x954>)
				statuspkt.jabcnt++;
 8002b3e:	f8b1 2086 	ldrh.w	r2, [r1, #134]	; 0x86
 8002b42:	3201      	adds	r2, #1
 8002b44:	b292      	uxth	r2, r2
 8002b46:	f8a1 2086 	strh.w	r2, [r1, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8002b4a:	2201      	movs	r2, #1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002b4c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8002b4e:	1ac9      	subs	r1, r1, r3
				jabbertimeout = 1;		// 100mS seconds pause
 8002b50:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <StarLPTask+0x958>)
 8002b52:	601a      	str	r2, [r3, #0]
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002b54:	f021 fcb2 	bl	80244bc <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 8002b58:	4b6b      	ldr	r3, [pc, #428]	; (8002d08 <StarLPTask+0x95c>)
 8002b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5e:	b93b      	cbnz	r3, 8002b70 <StarLPTask+0x7c4>
					if (trigthresh < 4095)
 8002b60:	4a59      	ldr	r2, [pc, #356]	; (8002cc8 <StarLPTask+0x91c>)
 8002b62:	f640 71fe 	movw	r1, #4094	; 0xffe
 8002b66:	8813      	ldrh	r3, [r2, #0]
 8002b68:	428b      	cmp	r3, r1
 8002b6a:	d801      	bhi.n	8002b70 <StarLPTask+0x7c4>
						trigthresh++;
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	8013      	strh	r3, [r2, #0]
				if (agc) {
 8002b70:	882b      	ldrh	r3, [r5, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d165      	bne.n	8002c42 <StarLPTask+0x896>
				jabtrigcnt = statuspkt.trigcount;
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <StarLPTask+0x8e4>)
 8002b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7a:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 8002b7c:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <StarLPTask+0x960>)
 8002b7e:	4a64      	ldr	r2, [pc, #400]	; (8002d10 <StarLPTask+0x964>)
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	6813      	ldr	r3, [r2, #0]
 8002b84:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	dd27      	ble.n	8002bda <StarLPTask+0x82e>
					if (trigthresh < 4095)
 8002b8a:	484f      	ldr	r0, [pc, #316]	; (8002cc8 <StarLPTask+0x91c>)
 8002b8c:	f640 74fe 	movw	r4, #4094	; 0xffe
 8002b90:	8803      	ldrh	r3, [r0, #0]
 8002b92:	42a3      	cmp	r3, r4
 8002b94:	d801      	bhi.n	8002b9a <StarLPTask+0x7ee>
						trigthresh++;
 8002b96:	3301      	adds	r3, #1
 8002b98:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	6011      	str	r1, [r2, #0]
 8002b9e:	9306      	str	r3, [sp, #24]
 8002ba0:	e5cb      	b.n	800273a <StarLPTask+0x38e>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	4a5b      	ldr	r2, [pc, #364]	; (8002d14 <StarLPTask+0x968>)
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	485b      	ldr	r0, [pc, #364]	; (8002d18 <StarLPTask+0x96c>)
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002bb0:	f005 fb28 	bl	8008204 <HAL_DAC_Start_DMA>
 8002bb4:	e682      	b.n	80028bc <StarLPTask+0x510>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 8002bb6:	f8df c178 	ldr.w	ip, [pc, #376]	; 8002d30 <StarLPTask+0x984>
 8002bba:	4c46      	ldr	r4, [pc, #280]	; (8002cd4 <StarLPTask+0x928>)
 8002bbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bc8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002bcc:	f844 0b04 	str.w	r0, [r4], #4
 8002bd0:	8021      	strh	r1, [r4, #0]
 8002bd2:	e75b      	b.n	8002a8c <StarLPTask+0x6e0>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 8002bd4:	f007 ff30 	bl	800aa38 <HAL_GPIO_WritePin>
 8002bd8:	e6ac      	b.n	8002934 <StarLPTask+0x588>
				if (n == 0) {		// no triggers in last 100mS
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1dd      	bne.n	8002b9a <StarLPTask+0x7ee>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 8002bde:	483a      	ldr	r0, [pc, #232]	; (8002cc8 <StarLPTask+0x91c>)
 8002be0:	8803      	ldrh	r3, [r0, #0]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d9d9      	bls.n	8002b9a <StarLPTask+0x7ee>
						trigthresh--;
 8002be6:	3b01      	subs	r3, #1
 8002be8:	8003      	strh	r3, [r0, #0]
 8002bea:	e7d6      	b.n	8002b9a <StarLPTask+0x7ee>
				if (getpressure115() != HAL_OK) {
 8002bec:	f001 ff36 	bl	8004a5c <getpressure115>
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	f43f adfa 	beq.w	80027ea <StarLPTask+0x43e>
					printf("MPL115A2 error\n\r");
 8002bf6:	4849      	ldr	r0, [pc, #292]	; (8002d1c <StarLPTask+0x970>)
 8002bf8:	f021 fc60 	bl	80244bc <iprintf>
 8002bfc:	e5f5      	b.n	80027ea <StarLPTask+0x43e>
				lcd_showvars();
 8002bfe:	f7fe fce9 	bl	80015d4 <lcd_showvars>
 8002c02:	e5a4      	b.n	800274e <StarLPTask+0x3a2>
					gainchanged = bumppga(-1);
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f001 fee2 	bl	80049d0 <bumppga>
 8002c0c:	b203      	sxth	r3, r0
 8002c0e:	9306      	str	r3, [sp, #24]
				prevtrigs = trigs;
 8002c10:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <StarLPTask+0x974>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 8002c16:	9b06      	ldr	r3, [sp, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f77f adc8 	ble.w	80027ae <StarLPTask+0x402>
					if (trigthresh < (4095 - 10))
 8002c1e:	8833      	ldrh	r3, [r6, #0]
 8002c20:	f640 72f4 	movw	r2, #4084	; 0xff4
 8002c24:	4293      	cmp	r3, r2
 8002c26:	f63f adc2 	bhi.w	80027ae <StarLPTask+0x402>
						trigthresh += 5;
 8002c2a:	3305      	adds	r3, #5
 8002c2c:	8033      	strh	r3, [r6, #0]
 8002c2e:	e5be      	b.n	80027ae <StarLPTask+0x402>
				if (getpressure3115() != HAL_OK) {
 8002c30:	f001 ffc2 	bl	8004bb8 <getpressure3115>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	f43f add8 	beq.w	80027ea <StarLPTask+0x43e>
					printf("MPL3115A2 error\n\r");
 8002c3a:	483a      	ldr	r0, [pc, #232]	; (8002d24 <StarLPTask+0x978>)
 8002c3c:	f021 fc3e 	bl	80244bc <iprintf>
 8002c40:	e5d3      	b.n	80027ea <StarLPTask+0x43e>
					gainchanged = bumppga(-1);	// decrease gain
 8002c42:	f04f 30ff 	mov.w	r0, #4294967295
 8002c46:	f001 fec3 	bl	80049d0 <bumppga>
 8002c4a:	b203      	sxth	r3, r0
 8002c4c:	9306      	str	r3, [sp, #24]
				jabtrigcnt = statuspkt.trigcount;
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <StarLPTask+0x8e4>)
 8002c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c52:	6023      	str	r3, [r4, #0]
 8002c54:	e56d      	b.n	8002732 <StarLPTask+0x386>
						gainchanged = bumppga(1);
 8002c56:	2001      	movs	r0, #1
 8002c58:	f001 feba 	bl	80049d0 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 8002c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8002c60:	2b0a      	cmp	r3, #10
 8002c62:	d8cf      	bhi.n	8002c04 <StarLPTask+0x858>
						gainchanged = bumppga(1);
 8002c64:	b203      	sxth	r3, r0
 8002c66:	9306      	str	r3, [sp, #24]
 8002c68:	e7d2      	b.n	8002c10 <StarLPTask+0x864>
					printf("GPS bad - rebooting...\n");
 8002c6a:	482f      	ldr	r0, [pc, #188]	; (8002d28 <StarLPTask+0x97c>)
 8002c6c:	f021 fcc2 	bl	80245f4 <puts>
					osDelay(3000);
 8002c70:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c74:	f011 fac6 	bl	8014204 <osDelay>
					rebootme(5);
 8002c78:	2005      	movs	r0, #5
 8002c7a:	f7ff fb75 	bl	8002368 <rebootme>
 8002c7e:	4605      	mov	r5, r0
		printf("Console Rx Queue not created... rebooting...\n");
 8002c80:	482a      	ldr	r0, [pc, #168]	; (8002d2c <StarLPTask+0x980>)
 8002c82:	f021 fcb7 	bl	80245f4 <puts>
		rebootme(0);
 8002c86:	4628      	mov	r0, r5
 8002c88:	f7ff fb6e 	bl	8002368 <rebootme>
 8002c8c:	200029d8 	.word	0x200029d8
 8002c90:	20002b24 	.word	0x20002b24
 8002c94:	080292f4 	.word	0x080292f4
 8002c98:	20000054 	.word	0x20000054
 8002c9c:	20002c6c 	.word	0x20002c6c
 8002ca0:	20002c68 	.word	0x20002c68
 8002ca4:	080292fc 	.word	0x080292fc
 8002ca8:	20000230 	.word	0x20000230
 8002cac:	20002c5c 	.word	0x20002c5c
 8002cb0:	20002c60 	.word	0x20002c60
 8002cb4:	20000074 	.word	0x20000074
 8002cb8:	20000748 	.word	0x20000748
 8002cbc:	08029304 	.word	0x08029304
 8002cc0:	20000128 	.word	0x20000128
 8002cc4:	200006f4 	.word	0x200006f4
 8002cc8:	20000002 	.word	0x20000002
 8002ccc:	2000023c 	.word	0x2000023c
 8002cd0:	20002cd0 	.word	0x20002cd0
 8002cd4:	20000014 	.word	0x20000014
 8002cd8:	080293ac 	.word	0x080293ac
 8002cdc:	080293fc 	.word	0x080293fc
 8002ce0:	08029418 	.word	0x08029418
 8002ce4:	08029424 	.word	0x08029424
 8002ce8:	20001cc0 	.word	0x20001cc0
 8002cec:	20000008 	.word	0x20000008
 8002cf0:	200015e8 	.word	0x200015e8
 8002cf4:	20001680 	.word	0x20001680
 8002cf8:	20001a5c 	.word	0x20001a5c
 8002cfc:	200015dc 	.word	0x200015dc
 8002d00:	080292d8 	.word	0x080292d8
 8002d04:	200006fc 	.word	0x200006fc
 8002d08:	20002c58 	.word	0x20002c58
 8002d0c:	20000750 	.word	0x20000750
 8002d10:	20002908 	.word	0x20002908
 8002d14:	080297b4 	.word	0x080297b4
 8002d18:	20001dc0 	.word	0x20001dc0
 8002d1c:	08029474 	.word	0x08029474
 8002d20:	2000293c 	.word	0x2000293c
 8002d24:	08029488 	.word	0x08029488
 8002d28:	0802945c 	.word	0x0802945c
 8002d2c:	08029124 	.word	0x08029124
 8002d30:	080293d4 	.word	0x080293d4

08002d34 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8002d34:	2100      	movs	r1, #0
 8002d36:	f005 bb01 	b.w	800833c <HAL_DAC_Stop_DMA>
 8002d3a:	bf00      	nop

08002d3c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8002d3e:	6803      	ldr	r3, [r0, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d003      	beq.n	8002d4e <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 8002d46:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d02d      	beq.n	8002da8 <HAL_TIM_IC_CaptureCallback+0x6c>
}
 8002d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002d4e:	4c1a      	ldr	r4, [pc, #104]	; (8002db8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002d50:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <HAL_TIM_IC_CaptureCallback+0x80>)
 8002d52:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 8002d54:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002d56:	3101      	adds	r1, #1
 8002d58:	481a      	ldr	r0, [pc, #104]	; (8002dc4 <HAL_TIM_IC_CaptureCallback+0x88>)
		if (!(ledsenabled)) {
 8002d5a:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002d5c:	fba3 5301 	umull	r5, r3, r3, r1
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002d66:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002d6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002d6e:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002d70:	4815      	ldr	r0, [pc, #84]	; (8002dc8 <HAL_TIM_IC_CaptureCallback+0x8c>)
		if (!(ledsenabled)) {
 8002d72:	b1b2      	cbz	r2, 8002da2 <HAL_TIM_IC_CaptureCallback+0x66>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002d74:	f007 fe7a 	bl	800aa6c <HAL_GPIO_TogglePin>
		diff = lastcap;
 8002d78:	4d14      	ldr	r5, [pc, #80]	; (8002dcc <HAL_TIM_IC_CaptureCallback+0x90>)
	uint32_t sum = 0;
 8002d7a:	2100      	movs	r1, #0
		diff = lastcap;
 8002d7c:	4e14      	ldr	r6, [pc, #80]	; (8002dd0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002d7e:	462b      	mov	r3, r5
 8002d80:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8002d84:	6837      	ldr	r7, [r6, #0]
		data[i] = data[i + 1];		// old data is low index
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8002d8c:	4298      	cmp	r0, r3
		sum += data[i];
 8002d8e:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8002d90:	d1f9      	bne.n	8002d86 <HAL_TIM_IC_CaptureCallback+0x4a>
	sum += new;
 8002d92:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_TIM_IC_CaptureCallback+0x98>)
	data[15] = new;		// new data at the end
 8002d96:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8002d98:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002d9a:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8002d9c:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002d9e:	6033      	str	r3, [r6, #0]
}
 8002da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002da2:	f007 fe49 	bl	800aa38 <HAL_GPIO_WritePin>
 8002da6:	e7e7      	b.n	8002d78 <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 8002da8:	480b      	ldr	r0, [pc, #44]	; (8002dd8 <HAL_TIM_IC_CaptureCallback+0x9c>)
}
 8002daa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8002dae:	f021 bc21 	b.w	80245f4 <puts>
 8002db2:	bf00      	nop
 8002db4:	40000800 	.word	0x40000800
 8002db8:	20002b24 	.word	0x20002b24
 8002dbc:	88888889 	.word	0x88888889
 8002dc0:	20000270 	.word	0x20000270
 8002dc4:	20000754 	.word	0x20000754
 8002dc8:	40020c00 	.word	0x40020c00
 8002dcc:	20001c7c 	.word	0x20001c7c
 8002dd0:	20002904 	.word	0x20002904
 8002dd4:	20000768 	.word	0x20000768
 8002dd8:	08029518 	.word	0x08029518

08002ddc <getpcb>:
void getpcb() {
 8002ddc:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 8002dde:	2101      	movs	r1, #1
 8002de0:	4804      	ldr	r0, [pc, #16]	; (8002df4 <getpcb+0x18>)
 8002de2:	f007 fe17 	bl	800aa14 <HAL_GPIO_ReadPin>
		pcb = SPLATBOARD1;		// assumed
 8002de6:	2800      	cmp	r0, #0
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <getpcb+0x1c>)
 8002dea:	bf0c      	ite	eq
 8002dec:	2216      	moveq	r2, #22
 8002dee:	220b      	movne	r2, #11
 8002df0:	601a      	str	r2, [r3, #0]
}
 8002df2:	bd08      	pop	{r3, pc}
 8002df4:	40020800 	.word	0x40020800
 8002df8:	20002928 	.word	0x20002928

08002dfc <uart2_rxdone>:
void uart2_rxdone() {
 8002dfc:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 8002dfe:	4807      	ldr	r0, [pc, #28]	; (8002e1c <uart2_rxdone+0x20>)
 8002e00:	2300      	movs	r3, #0
 8002e02:	4907      	ldr	r1, [pc, #28]	; (8002e20 <uart2_rxdone+0x24>)
 8002e04:	461a      	mov	r2, r3
 8002e06:	6800      	ldr	r0, [r0, #0]
 8002e08:	f011 fe26 	bl	8014a58 <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4904      	ldr	r1, [pc, #16]	; (8002e20 <uart2_rxdone+0x24>)
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <uart2_rxdone+0x28>)
}
 8002e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8002e16:	f00f b91f 	b.w	8012058 <HAL_UART_Receive_IT>
 8002e1a:	bf00      	nop
 8002e1c:	20001c78 	.word	0x20001c78
 8002e20:	20001c74 	.word	0x20001c74
 8002e24:	20002564 	.word	0x20002564

08002e28 <HAL_TIM_PeriodElapsedCallback>:
{
  /* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8002e28:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002e2a:	6803      	ldr	r3, [r0, #0]
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d029      	beq.n	8002e84 <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8002e30:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d02d      	beq.n	8002e92 <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8002e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3a:	d02c      	beq.n	8002e96 <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d030      	beq.n	8002ea4 <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 8002e42:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d005      	beq.n	8002e54 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM12) {
 8002e48:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01f      	beq.n	8002e8e <HAL_TIM_PeriodElapsedCallback+0x66>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8002e4e:	4821      	ldr	r0, [pc, #132]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002e50:	f021 bbd0 	b.w	80245f4 <puts>
{
 8002e54:	b510      	push	{r4, lr}
		t1sec++;
 8002e56:	4920      	ldr	r1, [pc, #128]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8002e58:	4c20      	ldr	r4, [pc, #128]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 8002e5a:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8002e5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8002e5e:	4820      	ldr	r0, [pc, #128]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 8002e60:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 8002e62:	3301      	adds	r3, #1
		if (netup)
 8002e64:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8002e66:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8002e68:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8002e6a:	b110      	cbz	r0, 8002e72 <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 8002e6c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002e6e:	3301      	adds	r3, #1
 8002e70:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 8002e72:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	b9c3      	cbnz	r3, 8002eaa <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8002e78:	4a1b      	ldr	r2, [pc, #108]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8002e7a:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8002e7c:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8002e7e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
  /* USER CODE END Callback 1 */
}
 8002e82:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002e86:	6813      	ldr	r3, [r2, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	6013      	str	r3, [r2, #0]
		return;
 8002e8c:	4770      	bx	lr
    HAL_IncTick();
 8002e8e:	f004 bbfd 	b.w	800768c <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 8002e92:	f7fd bcfb 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 8002e96:	4a11      	ldr	r2, [pc, #68]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002e98:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002e9a:	4816      	ldr	r0, [pc, #88]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002e9c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	f021 bb0c 	b.w	80244bc <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 8002ea4:	4814      	ldr	r0, [pc, #80]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002ea6:	f021 bba5 	b.w	80245f4 <puts>
			statuspkt.gpsuptime++;
 8002eaa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002eac:	3301      	adds	r3, #1
 8002eae:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8002eb0:	f001 f86c 	bl	8003f8c <calcepoch32>
				epochvalid = 1;
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002eb6:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8002eb8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8002ebc:	701a      	strb	r2, [r3, #0]
}
 8002ebe:	bd10      	pop	{r4, pc}
 8002ec0:	40002000 	.word	0x40002000
 8002ec4:	40000c00 	.word	0x40000c00
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40001000 	.word	0x40001000
 8002ed0:	40001800 	.word	0x40001800
 8002ed4:	08029568 	.word	0x08029568
 8002ed8:	20002938 	.word	0x20002938
 8002edc:	20002b24 	.word	0x20002b24
 8002ee0:	2000074a 	.word	0x2000074a
 8002ee4:	20002cd0 	.word	0x20002cd0
 8002ee8:	20002cc8 	.word	0x20002cc8
 8002eec:	20002930 	.word	0x20002930
 8002ef0:	20000768 	.word	0x20000768
 8002ef4:	08029528 	.word	0x08029528
 8002ef8:	0802954c 	.word	0x0802954c

08002efc <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8002efc:	4c02      	ldr	r4, [pc, #8]	; (8002f08 <Error_Handler+0xc>)
{
 8002efe:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8002f00:	4620      	mov	r0, r4
 8002f02:	f021 fb77 	bl	80245f4 <puts>
	while (1) {
 8002f06:	e7fb      	b.n	8002f00 <Error_Handler+0x4>
 8002f08:	08029590 	.word	0x08029590

08002f0c <SystemClock_Config>:
{
 8002f0c:	b530      	push	{r4, r5, lr}
 8002f0e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f10:	2234      	movs	r2, #52	; 0x34
 8002f12:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f14:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f16:	a807      	add	r0, sp, #28
 8002f18:	f020 fb34 	bl	8023584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002f22:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002f26:	9306      	str	r3, [sp, #24]
  HAL_PWR_EnableBkUpAccess();
 8002f28:	f009 f99a 	bl	800c260 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2c:	4a20      	ldr	r2, [pc, #128]	; (8002fb0 <SystemClock_Config+0xa4>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f2e:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002f34:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002f38:	6411      	str	r1, [r2, #64]	; 0x40
 8002f3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f3c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002f40:	9200      	str	r2, [sp, #0]
 8002f42:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f4a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002f4c:	2209      	movs	r2, #9
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f4e:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f50:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f56:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f58:	9413      	str	r4, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5a:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f60:	9901      	ldr	r1, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f62:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f66:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f6c:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002f6e:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f70:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002f72:	23d8      	movs	r3, #216	; 0xd8
 8002f74:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002f78:	2306      	movs	r3, #6
 8002f7a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f7c:	f009 f9b2 	bl	800c2e4 <HAL_RCC_OscConfig>
 8002f80:	b9a0      	cbnz	r0, 8002fac <SystemClock_Config+0xa0>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f82:	f009 f975 	bl	800c270 <HAL_PWREx_EnableOverDrive>
 8002f86:	4603      	mov	r3, r0
 8002f88:	b980      	cbnz	r0, 8002fac <SystemClock_Config+0xa0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f8a:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f8c:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002f90:	a802      	add	r0, sp, #8
 8002f92:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f94:	e9cd 2402 	strd	r2, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f9c:	e9cd 3504 	strd	r3, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fa0:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002fa2:	f009 fc75 	bl	800c890 <HAL_RCC_ClockConfig>
 8002fa6:	b908      	cbnz	r0, 8002fac <SystemClock_Config+0xa0>
}
 8002fa8:	b015      	add	sp, #84	; 0x54
 8002faa:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8002fac:	f7ff ffa6 	bl	8002efc <Error_Handler>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40007000 	.word	0x40007000

08002fb8 <PeriphCommonClock_Config>:
{
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	b0a4      	sub	sp, #144	; 0x90
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fbc:	228c      	movs	r2, #140	; 0x8c
 8002fbe:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002fc0:	2403      	movs	r4, #3
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fc2:	a801      	add	r0, sp, #4
 8002fc4:	f020 fade 	bl	8023584 <memset>
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002fc8:	22c0      	movs	r2, #192	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002fca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002fce:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002fd0:	2101      	movs	r1, #1
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002fd2:	9205      	str	r2, [sp, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002fd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002fd8:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fda:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002fdc:	9408      	str	r4, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002fde:	910a      	str	r1, [sp, #40]	; 0x28
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002fe0:	921f      	str	r2, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002fe2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fe6:	f009 fdb9 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 8002fea:	b908      	cbnz	r0, 8002ff0 <PeriphCommonClock_Config+0x38>
}
 8002fec:	b024      	add	sp, #144	; 0x90
 8002fee:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002ff0:	f7ff ff84 	bl	8002efc <Error_Handler>

08002ff4 <main>:
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b0dc      	sub	sp, #368	; 0x170
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ff8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ffc:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003000:	4bc2      	ldr	r3, [pc, #776]	; (800330c <main+0x318>)
 8003002:	2400      	movs	r4, #0
 8003004:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800300c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003016:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003018:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800301c:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003020:	4dbb      	ldr	r5, [pc, #748]	; (8003310 <main+0x31c>)
  HAL_Init();
 8003022:	f004 fb21 	bl	8007668 <HAL_Init>
  SystemClock_Config();
 8003026:	f7ff ff71 	bl	8002f0c <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800302a:	2703      	movs	r7, #3
  PeriphCommonClock_Config();
 800302c:	f7ff ffc4 	bl	8002fb8 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	9459      	str	r4, [sp, #356]	; 0x164
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8003032:	4622      	mov	r2, r4
 8003034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003038:	48b6      	ldr	r0, [pc, #728]	; (8003314 <main+0x320>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800303a:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303e:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003040:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = probe1_Pin;
 8003044:	f44f 7a00 	mov.w	sl, #512	; 0x200
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 800304c:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003050:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003052:	f043 0310 	orr.w	r3, r3, #16
 8003056:	632b      	str	r3, [r5, #48]	; 0x30
 8003058:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	9303      	str	r3, [sp, #12]
 8003060:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003062:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	632b      	str	r3, [r5, #48]	; 0x30
 800306a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	9304      	str	r3, [sp, #16]
 8003072:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003074:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003076:	f043 0320 	orr.w	r3, r3, #32
 800307a:	632b      	str	r3, [r5, #48]	; 0x30
 800307c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	9305      	str	r3, [sp, #20]
 8003084:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003086:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308c:	632b      	str	r3, [r5, #48]	; 0x30
 800308e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	9306      	str	r3, [sp, #24]
 8003096:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003098:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	632b      	str	r3, [r5, #48]	; 0x30
 80030a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	9307      	str	r3, [sp, #28]
 80030a8:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	632b      	str	r3, [r5, #48]	; 0x30
 80030b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	9308      	str	r3, [sp, #32]
 80030ba:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80030be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c2:	632b      	str	r3, [r5, #48]	; 0x30
 80030c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	9309      	str	r3, [sp, #36]	; 0x24
 80030cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	632b      	str	r3, [r5, #48]	; 0x30
 80030d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	930a      	str	r3, [sp, #40]	; 0x28
 80030de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 80030e0:	f007 fcaa 	bl	800aa38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80030e4:	4622      	mov	r2, r4
 80030e6:	f644 0181 	movw	r1, #18561	; 0x4881
 80030ea:	488b      	ldr	r0, [pc, #556]	; (8003318 <main+0x324>)
 80030ec:	f007 fca4 	bl	800aa38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80030f0:	4622      	mov	r2, r4
 80030f2:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 80030f6:	4889      	ldr	r0, [pc, #548]	; (800331c <main+0x328>)
 80030f8:	f007 fc9e 	bl	800aa38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 80030fc:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8003100:	4887      	ldr	r0, [pc, #540]	; (8003320 <main+0x32c>)
 8003102:	2201      	movs	r2, #1
 8003104:	f007 fc98 	bl	800aa38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003108:	4622      	mov	r2, r4
 800310a:	2144      	movs	r1, #68	; 0x44
 800310c:	4885      	ldr	r0, [pc, #532]	; (8003324 <main+0x330>)
 800310e:	f007 fc93 	bl	800aa38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8003112:	4622      	mov	r2, r4
 8003114:	2102      	movs	r1, #2
 8003116:	4882      	ldr	r0, [pc, #520]	; (8003320 <main+0x32c>)
 8003118:	f007 fc8e 	bl	800aa38 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 800311c:	f642 1388 	movw	r3, #10632	; 0x2988
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003120:	a955      	add	r1, sp, #340	; 0x154
 8003122:	487e      	ldr	r0, [pc, #504]	; (800331c <main+0x328>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8003124:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003126:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800312a:	f007 f9d9 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800312e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003132:	a955      	add	r1, sp, #340	; 0x154
 8003134:	487c      	ldr	r0, [pc, #496]	; (8003328 <main+0x334>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003136:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003138:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800313e:	f007 f9cf 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003142:	f643 533c 	movw	r3, #15676	; 0x3d3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003146:	a955      	add	r1, sp, #340	; 0x154
 8003148:	4872      	ldr	r0, [pc, #456]	; (8003314 <main+0x320>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800314a:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003150:	f007 f9c6 	bl	800a4e0 <HAL_GPIO_Init>
  HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8003154:	a955      	add	r1, sp, #340	; 0x154
 8003156:	486f      	ldr	r0, [pc, #444]	; (8003314 <main+0x320>)
  GPIO_InitStruct.Pin = probe1_Pin;
 8003158:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800315c:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003160:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
  HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8003164:	f007 f9bc 	bl	800a4e0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003168:	a955      	add	r1, sp, #340	; 0x154
 800316a:	486f      	ldr	r0, [pc, #444]	; (8003328 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316c:	9657      	str	r6, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316e:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003172:	f007 f9b5 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003176:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003178:	a955      	add	r1, sp, #340	; 0x154
 800317a:	486c      	ldr	r0, [pc, #432]	; (800332c <main+0x338>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800317c:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f007 f9ad 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 8003186:	f644 0381 	movw	r3, #18561	; 0x4881
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318a:	a955      	add	r1, sp, #340	; 0x154
 800318c:	4862      	ldr	r0, [pc, #392]	; (8003318 <main+0x324>)
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 800318e:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003190:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003196:	f007 f9a3 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800319a:	2322      	movs	r3, #34	; 0x22
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319c:	a955      	add	r1, sp, #340	; 0x154
 800319e:	485e      	ldr	r0, [pc, #376]	; (8003318 <main+0x324>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80031a0:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a6:	f007 f99b 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80031aa:	f24d 533b 	movw	r3, #54587	; 0xd53b
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031ae:	a955      	add	r1, sp, #340	; 0x154
 80031b0:	485c      	ldr	r0, [pc, #368]	; (8003324 <main+0x330>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80031b2:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031b8:	f007 f992 	bl	800a4e0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031bc:	a955      	add	r1, sp, #340	; 0x154
 80031be:	4857      	ldr	r0, [pc, #348]	; (800331c <main+0x328>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031c2:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031c6:	f007 f98b 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|GPIO_PIN_15;
 80031ca:	f44f 4354 	mov.w	r3, #54272	; 0xd400
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031ce:	a955      	add	r1, sp, #340	; 0x154
 80031d0:	4852      	ldr	r0, [pc, #328]	; (800331c <main+0x328>)
  GPIO_InitStruct.Pin = XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|GPIO_PIN_15;
 80031d2:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80031d4:	f04f 0880 	mov.w	r8, #128	; 0x80
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d8:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 80031da:	f04f 0a0c 	mov.w	sl, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031e2:	f007 f97d 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 80031e6:	f240 4385 	movw	r3, #1157	; 0x485
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ea:	a955      	add	r1, sp, #340	; 0x154
 80031ec:	484c      	ldr	r0, [pc, #304]	; (8003320 <main+0x32c>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 80031ee:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031f4:	f007 f974 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 80031f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031fc:	a955      	add	r1, sp, #340	; 0x154
 80031fe:	4848      	ldr	r0, [pc, #288]	; (8003320 <main+0x32c>)
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 8003200:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003208:	f007 f96a 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_PGA_Pin|USB_PowerSwitchOn_Pin;
 800320c:	2344      	movs	r3, #68	; 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800320e:	a955      	add	r1, sp, #340	; 0x154
 8003210:	4844      	ldr	r0, [pc, #272]	; (8003324 <main+0x330>)
  GPIO_InitStruct.Pin = CS_PGA_Pin|USB_PowerSwitchOn_Pin;
 8003212:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800321a:	f007 f961 	bl	800a4e0 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800321e:	a955      	add	r1, sp, #340	; 0x154
 8003220:	4840      	ldr	r0, [pc, #256]	; (8003324 <main+0x330>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003222:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800322a:	f007 f959 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800322e:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003232:	a955      	add	r1, sp, #340	; 0x154
 8003234:	483c      	ldr	r0, [pc, #240]	; (8003328 <main+0x334>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003236:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800323c:	f007 f950 	bl	800a4e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003240:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003244:	a955      	add	r1, sp, #340	; 0x154
 8003246:	4839      	ldr	r0, [pc, #228]	; (800332c <main+0x338>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003248:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324a:	9758      	str	r7, [sp, #352]	; 0x160
  GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 800324c:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003254:	f007 f944 	bl	800a4e0 <HAL_GPIO_Init>
  HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8003258:	a955      	add	r1, sp, #340	; 0x154
 800325a:	4831      	ldr	r0, [pc, #196]	; (8003320 <main+0x32c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325c:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003260:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
  HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8003264:	f007 f93c 	bl	800a4e0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003268:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 800326a:	4639      	mov	r1, r7
 800326c:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800326e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8003272:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003274:	632b      	str	r3, [r5, #48]	; 0x30
 8003276:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003280:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003282:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003286:	632b      	str	r3, [r5, #48]	; 0x30
 8003288:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  huart2.Init.BaudRate = 115200;
 800328a:	4d29      	ldr	r5, [pc, #164]	; (8003330 <main+0x33c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800328c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003290:	9302      	str	r3, [sp, #8]
 8003292:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8003294:	f004 fe5e 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003298:	200b      	movs	r0, #11
 800329a:	f004 fea5 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 800329e:	4622      	mov	r2, r4
 80032a0:	2106      	movs	r1, #6
 80032a2:	4650      	mov	r0, sl
 80032a4:	f004 fe56 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80032a8:	4650      	mov	r0, sl
 80032aa:	f004 fe9d 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 80032ae:	4622      	mov	r2, r4
 80032b0:	2106      	movs	r1, #6
 80032b2:	2010      	movs	r0, #16
 80032b4:	f004 fe4e 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80032b8:	2010      	movs	r0, #16
 80032ba:	f004 fe95 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 80032be:	4622      	mov	r2, r4
 80032c0:	4639      	mov	r1, r7
 80032c2:	2011      	movs	r0, #17
 80032c4:	f004 fe46 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80032c8:	2011      	movs	r0, #17
 80032ca:	f004 fe8d 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 80032ce:	4622      	mov	r2, r4
 80032d0:	4639      	mov	r1, r7
 80032d2:	202f      	movs	r0, #47	; 0x2f
 80032d4:	f004 fe3e 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80032d8:	202f      	movs	r0, #47	; 0x2f
 80032da:	f004 fe85 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 80032de:	4622      	mov	r2, r4
 80032e0:	2106      	movs	r1, #6
 80032e2:	2039      	movs	r0, #57	; 0x39
 80032e4:	f004 fe36 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80032e8:	2039      	movs	r0, #57	; 0x39
 80032ea:	f004 fe7d 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 80032ee:	4622      	mov	r2, r4
 80032f0:	4649      	mov	r1, r9
 80032f2:	203c      	movs	r0, #60	; 0x3c
 80032f4:	f004 fe2e 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80032f8:	203c      	movs	r0, #60	; 0x3c
 80032fa:	f004 fe75 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 80032fe:	4622      	mov	r2, r4
 8003300:	4639      	mov	r1, r7
 8003302:	2045      	movs	r0, #69	; 0x45
 8003304:	f004 fe26 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003308:	2045      	movs	r0, #69	; 0x45
 800330a:	e013      	b.n	8003334 <main+0x340>
 800330c:	e000ed00 	.word	0xe000ed00
 8003310:	40023800 	.word	0x40023800
 8003314:	40021400 	.word	0x40021400
 8003318:	40020400 	.word	0x40020400
 800331c:	40021000 	.word	0x40021000
 8003320:	40020c00 	.word	0x40020c00
 8003324:	40021800 	.word	0x40021800
 8003328:	40020800 	.word	0x40020800
 800332c:	40020000 	.word	0x40020000
 8003330:	40004400 	.word	0x40004400
 8003334:	f004 fe58 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8003338:	48bd      	ldr	r0, [pc, #756]	; (8003630 <main+0x63c>)
  huart2.Init.BaudRate = 115200;
 800333a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800333e:	4622      	mov	r2, r4
 8003340:	4621      	mov	r1, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003342:	f8c0 a014 	str.w	sl, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003346:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8003348:	e9c0 5300 	strd	r5, r3, [r0]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800334c:	4623      	mov	r3, r4
  huart2.Init.StopBits = UART_STOPBITS_1;
 800334e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003352:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003356:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800335a:	f00e ff1f 	bl	801219c <HAL_RS485Ex_Init>
 800335e:	2800      	cmp	r0, #0
 8003360:	f040 846e 	bne.w	8003c40 <main+0xc4c>
  hadc1.Instance = ADC1;
 8003364:	4cb3      	ldr	r4, [pc, #716]	; (8003634 <main+0x640>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003366:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800336a:	4bb3      	ldr	r3, [pc, #716]	; (8003638 <main+0x644>)
  ADC_MultiModeTypeDef multimode = {0};
 800336c:	9022      	str	r0, [sp, #136]	; 0x88
  ADC_ChannelConfTypeDef sConfig = {0};
 800336e:	9045      	str	r0, [sp, #276]	; 0x114
 8003370:	9048      	str	r0, [sp, #288]	; 0x120
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003372:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003374:	6120      	str	r0, [r4, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003376:	f884 0020 	strb.w	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800337a:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800337c:	60e0      	str	r0, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800337e:	6160      	str	r0, [r4, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003380:	61a6      	str	r6, [r4, #24]
  hadc1.Init.NbrOfConversion = 1;
 8003382:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003384:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003388:	e9c4 3500 	strd	r3, r5, [r4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800338c:	4bab      	ldr	r3, [pc, #684]	; (800363c <main+0x648>)
  ADC_MultiModeTypeDef multimode = {0};
 800338e:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
  ADC_ChannelConfTypeDef sConfig = {0};
 8003392:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003396:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003398:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800339a:	f004 f99b 	bl	80076d4 <HAL_ADC_Init>
 800339e:	2800      	cmp	r0, #0
 80033a0:	f040 844e 	bne.w	8003c40 <main+0xc4c>
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80033a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80033a8:	9024      	str	r0, [sp, #144]	; 0x90
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80033aa:	2017      	movs	r0, #23
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80033ac:	a922      	add	r1, sp, #136	; 0x88
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80033ae:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80033b2:	4620      	mov	r0, r4
 80033b4:	f004 fd4e 	bl	8007e54 <HAL_ADCEx_MultiModeConfigChannel>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	f040 8441 	bne.w	8003c40 <main+0xc4c>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80033be:	9047      	str	r0, [sp, #284]	; 0x11c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033c0:	a945      	add	r1, sp, #276	; 0x114
 80033c2:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033c4:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033c8:	f004 fc50 	bl	8007c6c <HAL_ADC_ConfigChannel>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	f040 8437 	bne.w	8003c40 <main+0xc4c>
  hadc2.Instance = ADC2;
 80033d2:	4c9b      	ldr	r4, [pc, #620]	; (8003640 <main+0x64c>)
 80033d4:	4b9b      	ldr	r3, [pc, #620]	; (8003644 <main+0x650>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033d6:	6120      	str	r0, [r4, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80033d8:	f884 0020 	strb.w	r0, [r4, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033dc:	60e0      	str	r0, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80033de:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80033e2:	6160      	str	r0, [r4, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80033e4:	61a6      	str	r6, [r4, #24]
  hadc2.Init.NbrOfConversion = 1;
 80033e6:	61e6      	str	r6, [r4, #28]
  hadc2.Instance = ADC2;
 80033e8:	6023      	str	r3, [r4, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 80033ea:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 80033ee:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80033f2:	e9c4 5001 	strd	r5, r0, [r4, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80033f6:	4620      	mov	r0, r4
 80033f8:	f004 f96c 	bl	80076d4 <HAL_ADC_Init>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	f040 841f 	bne.w	8003c40 <main+0xc4c>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003402:	9043      	str	r0, [sp, #268]	; 0x10c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003404:	a941      	add	r1, sp, #260	; 0x104
 8003406:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003408:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800340c:	f004 fc2e 	bl	8007c6c <HAL_ADC_ConfigChannel>
 8003410:	2800      	cmp	r0, #0
 8003412:	f040 8415 	bne.w	8003c40 <main+0xc4c>
  hadc3.Instance = ADC3;
 8003416:	4c8c      	ldr	r4, [pc, #560]	; (8003648 <main+0x654>)
 8003418:	4b8c      	ldr	r3, [pc, #560]	; (800364c <main+0x658>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800341a:	6120      	str	r0, [r4, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800341c:	f884 0020 	strb.w	r0, [r4, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003420:	60e0      	str	r0, [r4, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003422:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003426:	6160      	str	r0, [r4, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003428:	61a6      	str	r6, [r4, #24]
  hadc3.Init.NbrOfConversion = 1;
 800342a:	61e6      	str	r6, [r4, #28]
  hadc3.Instance = ADC3;
 800342c:	6023      	str	r3, [r4, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 800342e:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 8003432:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003436:	e9c4 5001 	strd	r5, r0, [r4, #4]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800343a:	4620      	mov	r0, r4
 800343c:	f004 f94a 	bl	80076d4 <HAL_ADC_Init>
 8003440:	2800      	cmp	r0, #0
 8003442:	f040 83fd 	bne.w	8003c40 <main+0xc4c>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003446:	903f      	str	r0, [sp, #252]	; 0xfc
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003448:	a93d      	add	r1, sp, #244	; 0xf4
 800344a:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800344c:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003450:	f004 fc0c 	bl	8007c6c <HAL_ADC_ConfigChannel>
 8003454:	2800      	cmp	r0, #0
 8003456:	f040 83f3 	bne.w	8003c40 <main+0xc4c>
  hrng.Instance = RNG;
 800345a:	487d      	ldr	r0, [pc, #500]	; (8003650 <main+0x65c>)
 800345c:	4b7d      	ldr	r3, [pc, #500]	; (8003654 <main+0x660>)
 800345e:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003460:	f00a f85c 	bl	800d51c <HAL_RNG_Init>
 8003464:	2800      	cmp	r0, #0
 8003466:	f040 83eb 	bne.w	8003c40 <main+0xc4c>
  htim6.Instance = TIM6;
 800346a:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <main+0x664>)
  htim6.Init.Prescaler = 10800;
 800346c:	f642 2230 	movw	r2, #10800	; 0x2a30
 8003470:	497a      	ldr	r1, [pc, #488]	; (800365c <main+0x668>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003472:	9021      	str	r0, [sp, #132]	; 0x84
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003474:	6098      	str	r0, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003476:	f8c3 8018 	str.w	r8, [r3, #24]
  htim6.Init.Prescaler = 10800;
 800347a:	e9c3 1200 	strd	r1, r2, [r3]
  htim6.Init.Period = 10000;
 800347e:	f242 7210 	movw	r2, #10000	; 0x2710
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003482:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003486:	4618      	mov	r0, r3
  htim6.Init.Period = 10000;
 8003488:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800348a:	f00b fe37 	bl	800f0fc <HAL_TIM_Base_Init>
 800348e:	2800      	cmp	r0, #0
 8003490:	f040 83d6 	bne.w	8003c40 <main+0xc4c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003494:	2310      	movs	r3, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003496:	a91f      	add	r1, sp, #124	; 0x7c
 8003498:	486f      	ldr	r0, [pc, #444]	; (8003658 <main+0x664>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800349a:	931f      	str	r3, [sp, #124]	; 0x7c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	9321      	str	r3, [sp, #132]	; 0x84
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80034a0:	f00d fa96 	bl	80109d0 <HAL_TIMEx_MasterConfigSynchronization>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	f040 83cb 	bne.w	8003c40 <main+0xc4c>
  htim3.Instance = TIM3;
 80034aa:	4c6d      	ldr	r4, [pc, #436]	; (8003660 <main+0x66c>)
  htim3.Init.Prescaler = 10800;
 80034ac:	f642 2330 	movw	r3, #10800	; 0x2a30
 80034b0:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8003684 <main+0x690>
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034b4:	2780      	movs	r7, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034b6:	9039      	str	r0, [sp, #228]	; 0xe4
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034b8:	905b      	str	r0, [sp, #364]	; 0x16c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ba:	903c      	str	r0, [sp, #240]	; 0xf0
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034bc:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034be:	6120      	str	r0, [r4, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c0:	901c      	str	r0, [sp, #112]	; 0x70
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034c2:	61a7      	str	r7, [r4, #24]
  htim3.Init.Prescaler = 10800;
 80034c4:	e9c4 a300 	strd	sl, r3, [r4]
  htim3.Init.Period = 10000;
 80034c8:	f242 7310 	movw	r3, #10000	; 0x2710
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034cc:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 80034d0:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 80034d4:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034d8:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034dc:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034e0:	4620      	mov	r0, r4
  htim3.Init.Period = 10000;
 80034e2:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034e4:	f00b fe0a 	bl	800f0fc <HAL_TIM_Base_Init>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	f040 83a9 	bne.w	8003c40 <main+0xc4c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ee:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034f2:	a939      	add	r1, sp, #228	; 0xe4
 80034f4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f6:	9639      	str	r6, [sp, #228]	; 0xe4
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034f8:	f00b f896 	bl	800e628 <HAL_TIM_ConfigClockSource>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	f040 839f 	bne.w	8003c40 <main+0xc4c>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003502:	4620      	mov	r0, r4
 8003504:	f00b ff96 	bl	800f434 <HAL_TIM_PWM_Init>
 8003508:	2800      	cmp	r0, #0
 800350a:	f040 8399 	bne.w	8003c40 <main+0xc4c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350e:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003510:	a91c      	add	r1, sp, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003512:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003514:	4620      	mov	r0, r4
 8003516:	f00d fa5b 	bl	80109d0 <HAL_TIMEx_MasterConfigSynchronization>
 800351a:	2800      	cmp	r0, #0
 800351c:	f040 8390 	bne.w	8003c40 <main+0xc4c>
  sConfigOC.Pulse = 10;
 8003520:	230a      	movs	r3, #10
 8003522:	f04f 0960 	mov.w	r9, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003526:	9057      	str	r0, [sp, #348]	; 0x15c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003528:	2204      	movs	r2, #4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800352a:	9059      	str	r0, [sp, #356]	; 0x164
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800352c:	a955      	add	r1, sp, #340	; 0x154
 800352e:	4620      	mov	r0, r4
  sConfigOC.Pulse = 10;
 8003530:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003534:	f00c fafc 	bl	800fb30 <HAL_TIM_PWM_ConfigChannel>
 8003538:	4605      	mov	r5, r0
 800353a:	2800      	cmp	r0, #0
 800353c:	f040 8380 	bne.w	8003c40 <main+0xc4c>
  HAL_TIM_MspPostInit(&htim3);
 8003540:	4620      	mov	r0, r4
  htim7.Instance = TIM7;
 8003542:	4c48      	ldr	r4, [pc, #288]	; (8003664 <main+0x670>)
  HAL_TIM_MspPostInit(&htim3);
 8003544:	f002 fa20 	bl	8005988 <HAL_TIM_MspPostInit>
  htim7.Instance = TIM7;
 8003548:	4b47      	ldr	r3, [pc, #284]	; (8003668 <main+0x674>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800354a:	4620      	mov	r0, r4
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800354c:	61a7      	str	r7, [r4, #24]
  htim7.Instance = TIM7;
 800354e:	6023      	str	r3, [r4, #0]
  htim7.Init.Period = 9600;
 8003550:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003554:	951b      	str	r5, [sp, #108]	; 0x6c
  htim7.Init.Period = 9600;
 8003556:	60e3      	str	r3, [r4, #12]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003558:	e9c4 5501 	strd	r5, r5, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800355c:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003560:	f00b fdcc 	bl	800f0fc <HAL_TIM_Base_Init>
 8003564:	2800      	cmp	r0, #0
 8003566:	f040 836b 	bne.w	8003c40 <main+0xc4c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800356a:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800356c:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800356e:	a919      	add	r1, sp, #100	; 0x64
 8003570:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003572:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003574:	f00d fa2c 	bl	80109d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003578:	2800      	cmp	r0, #0
 800357a:	f040 8361 	bne.w	8003c40 <main+0xc4c>
  htim1.Instance = TIM1;
 800357e:	4c3b      	ldr	r4, [pc, #236]	; (800366c <main+0x678>)
 8003580:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <main+0x67c>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003582:	61a0      	str	r0, [r4, #24]
  htim1.Instance = TIM1;
 8003584:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 65535;
 8003586:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800358a:	9018      	str	r0, [sp, #96]	; 0x60
  htim1.Init.Period = 65535;
 800358c:	60e3      	str	r3, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800358e:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 8003592:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003596:	e9c4 0001 	strd	r0, r0, [r4, #4]
  htim1.Init.RepetitionCounter = 0;
 800359a:	e9c4 0004 	strd	r0, r0, [r4, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800359e:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035a2:	4620      	mov	r0, r4
 80035a4:	f00b fdaa 	bl	800f0fc <HAL_TIM_Base_Init>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	f040 8349 	bne.w	8003c40 <main+0xc4c>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035ae:	a935      	add	r1, sp, #212	; 0xd4
 80035b0:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b2:	9635      	str	r6, [sp, #212]	; 0xd4
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035b4:	f00b f838 	bl	800e628 <HAL_TIM_ConfigClockSource>
 80035b8:	2800      	cmp	r0, #0
 80035ba:	f040 8341 	bne.w	8003c40 <main+0xc4c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035be:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035c0:	a916      	add	r1, sp, #88	; 0x58
 80035c2:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c4:	9318      	str	r3, [sp, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035c6:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035ca:	f00d fa01 	bl	80109d0 <HAL_TIMEx_MasterConfigSynchronization>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2800      	cmp	r0, #0
 80035d2:	f040 8335 	bne.w	8003c40 <main+0xc4c>
  hcrc.Instance = CRC;
 80035d6:	4827      	ldr	r0, [pc, #156]	; (8003674 <main+0x680>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80035d8:	2601      	movs	r6, #1
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80035da:	8083      	strh	r3, [r0, #4]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80035dc:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80035de:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Instance = CRC;
 80035e2:	4b25      	ldr	r3, [pc, #148]	; (8003678 <main+0x684>)
 80035e4:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80035e6:	f004 fd2d 	bl	8008044 <HAL_CRC_Init>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	f040 8328 	bne.w	8003c40 <main+0xc4c>
  htim2.Instance = TIM2;
 80035f0:	4c22      	ldr	r4, [pc, #136]	; (800367c <main+0x688>)
 80035f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035f6:	902d      	str	r0, [sp, #180]	; 0xb4
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80035f8:	ad49      	add	r5, sp, #292	; 0x124
  htim2.Instance = TIM2;
 80035fa:	6023      	str	r3, [r4, #0]
  htim2.Init.Period = 4000000000;
 80035fc:	4b20      	ldr	r3, [pc, #128]	; (8003680 <main+0x68c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80035fe:	9049      	str	r0, [sp, #292]	; 0x124
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003600:	9031      	str	r0, [sp, #196]	; 0xc4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003602:	9030      	str	r0, [sp, #192]	; 0xc0
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003604:	9034      	str	r0, [sp, #208]	; 0xd0
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003606:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003608:	61a0      	str	r0, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800360a:	9015      	str	r0, [sp, #84]	; 0x54
  htim2.Init.Period = 4000000000;
 800360c:	60e3      	str	r3, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800360e:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003612:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 8003616:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
  TIM_IC_InitTypeDef sConfigIC = {0};
 800361a:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003622:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003626:	4620      	mov	r0, r4
 8003628:	f00b fd68 	bl	800f0fc <HAL_TIM_Base_Init>
 800362c:	e02c      	b.n	8003688 <main+0x694>
 800362e:	bf00      	nop
 8003630:	20002564 	.word	0x20002564
 8003634:	20001cc4 	.word	0x20001cc4
 8003638:	40012000 	.word	0x40012000
 800363c:	0f000001 	.word	0x0f000001
 8003640:	20001d0c 	.word	0x20001d0c
 8003644:	40012100 	.word	0x40012100
 8003648:	20001d54 	.word	0x20001d54
 800364c:	40012200 	.word	0x40012200
 8003650:	200021c8 	.word	0x200021c8
 8003654:	50060800 	.word	0x50060800
 8003658:	200024cc 	.word	0x200024cc
 800365c:	40001000 	.word	0x40001000
 8003660:	200023e8 	.word	0x200023e8
 8003664:	20002518 	.word	0x20002518
 8003668:	40001400 	.word	0x40001400
 800366c:	20002304 	.word	0x20002304
 8003670:	40010000 	.word	0x40010000
 8003674:	20001d9c 	.word	0x20001d9c
 8003678:	40023000 	.word	0x40023000
 800367c:	2000239c 	.word	0x2000239c
 8003680:	ee6b2800 	.word	0xee6b2800
 8003684:	40000400 	.word	0x40000400
 8003688:	2800      	cmp	r0, #0
 800368a:	f040 82d9 	bne.w	8003c40 <main+0xc4c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800368e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003692:	a92d      	add	r1, sp, #180	; 0xb4
 8003694:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003696:	932d      	str	r3, [sp, #180]	; 0xb4
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003698:	f00a ffc6 	bl	800e628 <HAL_TIM_ConfigClockSource>
 800369c:	2800      	cmp	r0, #0
 800369e:	f040 82cf 	bne.w	8003c40 <main+0xc4c>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80036a2:	4620      	mov	r0, r4
 80036a4:	f00b ff94 	bl	800f5d0 <HAL_TIM_IC_Init>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	f040 82c9 	bne.w	8003c40 <main+0xc4c>
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80036ae:	2704      	movs	r7, #4
 80036b0:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036b2:	904b      	str	r0, [sp, #300]	; 0x12c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80036b4:	4629      	mov	r1, r5
  sSlaveConfig.TriggerFilter = 0;
 80036b6:	904d      	str	r0, [sp, #308]	; 0x134
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80036b8:	4620      	mov	r0, r4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80036ba:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80036be:	f00b fa8d 	bl	800ebdc <HAL_TIM_SlaveConfigSynchro>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	f040 82bc 	bne.w	8003c40 <main+0xc4c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036c8:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036ca:	a913      	add	r1, sp, #76	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036cc:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036ce:	4620      	mov	r0, r4
 80036d0:	f00d f97e 	bl	80109d0 <HAL_TIMEx_MasterConfigSynchronization>
 80036d4:	4602      	mov	r2, r0
 80036d6:	2800      	cmp	r0, #0
 80036d8:	f040 82b2 	bne.w	8003c40 <main+0xc4c>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036dc:	a931      	add	r1, sp, #196	; 0xc4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036de:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
  sConfigIC.ICFilter = 0;
 80036e2:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036e6:	4620      	mov	r0, r4
 80036e8:	f00c fc42 	bl	800ff70 <HAL_TIM_IC_ConfigChannel>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	f040 82a7 	bne.w	8003c40 <main+0xc4c>
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80036f2:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036f4:	463a      	mov	r2, r7
 80036f6:	a931      	add	r1, sp, #196	; 0xc4
 80036f8:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80036fa:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036fc:	f00c fc38 	bl	800ff70 <HAL_TIM_IC_ConfigChannel>
 8003700:	2800      	cmp	r0, #0
 8003702:	f040 829d 	bne.w	8003c40 <main+0xc4c>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003706:	a931      	add	r1, sp, #196	; 0xc4
 8003708:	4620      	mov	r0, r4
 800370a:	2208      	movs	r2, #8
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800370c:	9632      	str	r6, [sp, #200]	; 0xc8
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800370e:	f00c fc2f 	bl	800ff70 <HAL_TIM_IC_ConfigChannel>
 8003712:	2800      	cmp	r0, #0
 8003714:	f040 8294 	bne.w	8003c40 <main+0xc4c>
  huart6.Instance = USART6;
 8003718:	48c1      	ldr	r0, [pc, #772]	; (8003a20 <main+0xa2c>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800371a:	2300      	movs	r3, #0
  huart6.Init.BaudRate = 9600;
 800371c:	f44f 5816 	mov.w	r8, #9600	; 0x2580
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003720:	260c      	movs	r6, #12
  huart6.Init.Parity = UART_PARITY_NONE;
 8003722:	6103      	str	r3, [r0, #16]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003724:	6203      	str	r3, [r0, #32]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003726:	6146      	str	r6, [r0, #20]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003728:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800372c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart6.Init.BaudRate = 9600;
 8003730:	4bbc      	ldr	r3, [pc, #752]	; (8003a24 <main+0xa30>)
 8003732:	e9c0 3800 	strd	r3, r8, [r0]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003736:	2310      	movs	r3, #16
 8003738:	6243      	str	r3, [r0, #36]	; 0x24
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800373a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800373e:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003740:	f00e fb14 	bl	8011d6c <HAL_UART_Init>
 8003744:	2800      	cmp	r0, #0
 8003746:	f040 827b 	bne.w	8003c40 <main+0xc4c>
  hdac.Instance = DAC;
 800374a:	4cb7      	ldr	r4, [pc, #732]	; (8003a28 <main+0xa34>)
 800374c:	4bb7      	ldr	r3, [pc, #732]	; (8003a2c <main+0xa38>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800374e:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003752:	4620      	mov	r0, r4
  hdac.Instance = DAC;
 8003754:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003756:	f004 fd31 	bl	80081bc <HAL_DAC_Init>
 800375a:	4602      	mov	r2, r0
 800375c:	2800      	cmp	r0, #0
 800375e:	f040 826f 	bne.w	8003c40 <main+0xc4c>
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8003762:	2314      	movs	r3, #20
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003764:	4620      	mov	r0, r4
 8003766:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003768:	920c      	str	r2, [sp, #48]	; 0x30
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800376a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800376c:	f004 fe82 	bl	8008474 <HAL_DAC_ConfigChannel>
 8003770:	4607      	mov	r7, r0
 8003772:	2800      	cmp	r0, #0
 8003774:	f040 8264 	bne.w	8003c40 <main+0xc4c>
  MX_FATFS_Init();
 8003778:	f00f fb6c 	bl	8012e54 <MX_FATFS_Init>
  hi2c1.Instance = I2C1;
 800377c:	4cac      	ldr	r4, [pc, #688]	; (8003a30 <main+0xa3c>)
 800377e:	4bad      	ldr	r3, [pc, #692]	; (8003a34 <main+0xa40>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003780:	4620      	mov	r0, r4
  hi2c1.Init.OwnAddress1 = 0;
 8003782:	60a7      	str	r7, [r4, #8]
  hi2c1.Instance = I2C1;
 8003784:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x20404768;
 8003786:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800378a:	6227      	str	r7, [r4, #32]
  hi2c1.Init.Timing = 0x20404768;
 800378c:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 8003790:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003792:	2301      	movs	r3, #1
  hi2c1.Init.OwnAddress2 = 0;
 8003794:	e9c4 7704 	strd	r7, r7, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003798:	e9c4 7706 	strd	r7, r7, [r4, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800379c:	60e3      	str	r3, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800379e:	f007 fb7f 	bl	800aea0 <HAL_I2C_Init>
 80037a2:	4601      	mov	r1, r0
 80037a4:	2800      	cmp	r0, #0
 80037a6:	f040 824b 	bne.w	8003c40 <main+0xc4c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037aa:	4620      	mov	r0, r4
 80037ac:	f007 fed0 	bl	800b550 <HAL_I2CEx_ConfigAnalogFilter>
 80037b0:	4601      	mov	r1, r0
 80037b2:	2800      	cmp	r0, #0
 80037b4:	f040 8244 	bne.w	8003c40 <main+0xc4c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037b8:	4620      	mov	r0, r4
 80037ba:	f007 ff1b 	bl	800b5f4 <HAL_I2CEx_ConfigDigitalFilter>
 80037be:	4603      	mov	r3, r0
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f040 823d 	bne.w	8003c40 <main+0xc4c>
  huart4.Instance = UART4;
 80037c6:	489c      	ldr	r0, [pc, #624]	; (8003a38 <main+0xa44>)
  huart4.Init.BaudRate = 115200;
 80037c8:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80037cc:	f44f 7440 	mov.w	r4, #768	; 0x300
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037d0:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80037d2:	6184      	str	r4, [r0, #24]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80037d4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80037d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037dc:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.Init.BaudRate = 115200;
 80037e0:	4b96      	ldr	r3, [pc, #600]	; (8003a3c <main+0xa48>)
 80037e2:	e9c0 3700 	strd	r3, r7, [r0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80037e6:	f00e fac1 	bl	8011d6c <HAL_UART_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2800      	cmp	r0, #0
 80037ee:	f040 8227 	bne.w	8003c40 <main+0xc4c>
  huart5.Instance = UART5;
 80037f2:	4893      	ldr	r0, [pc, #588]	; (8003a40 <main+0xa4c>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80037f4:	e9c0 8301 	strd	r8, r3, [r0, #4]
  huart5.Init.Parity = UART_PARITY_NONE;
 80037f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037fc:	e9c0 6305 	strd	r6, r3, [r0, #20]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003800:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003804:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.Instance = UART5;
 8003806:	4b8f      	ldr	r3, [pc, #572]	; (8003a44 <main+0xa50>)
 8003808:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800380a:	f00e faaf 	bl	8011d6c <HAL_UART_Init>
 800380e:	4602      	mov	r2, r0
 8003810:	2800      	cmp	r0, #0
 8003812:	f040 8215 	bne.w	8003c40 <main+0xc4c>
  huart3.Instance = USART3;
 8003816:	488c      	ldr	r0, [pc, #560]	; (8003a48 <main+0xa54>)
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8003818:	4611      	mov	r1, r2
  huart3.Instance = USART3;
 800381a:	4b8c      	ldr	r3, [pc, #560]	; (8003a4c <main+0xa58>)
  huart3.Init.BaudRate = 115200;
 800381c:	6047      	str	r7, [r0, #4]
  huart3.Instance = USART3;
 800381e:	6003      	str	r3, [r0, #0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003820:	6146      	str	r6, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003822:	6102      	str	r2, [r0, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003824:	e9c0 2202 	strd	r2, r2, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003828:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800382c:	e9c0 2208 	strd	r2, r2, [r0, #32]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8003830:	f00e fb4a 	bl	8011ec8 <HAL_MultiProcessor_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2800      	cmp	r0, #0
 8003838:	f040 8202 	bne.w	8003c40 <main+0xc4c>
  hspi4.Instance = SPI4;
 800383c:	4884      	ldr	r0, [pc, #528]	; (8003a50 <main+0xa5c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800383e:	4a85      	ldr	r2, [pc, #532]	; (8003a54 <main+0xa60>)
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003840:	6303      	str	r3, [r0, #48]	; 0x30
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003842:	e9c0 3402 	strd	r3, r4, [r0, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003846:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800384a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800384e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003852:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003856:	e9c0 2300 	strd	r2, r3, [r0]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800385a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800385e:	6183      	str	r3, [r0, #24]
  hspi4.Init.CRCPolynomial = 7;
 8003860:	2307      	movs	r3, #7
 8003862:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003864:	2308      	movs	r3, #8
 8003866:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003868:	f009 ff8e 	bl	800d788 <HAL_SPI_Init>
 800386c:	2800      	cmp	r0, #0
 800386e:	f040 81e7 	bne.w	8003c40 <main+0xc4c>
  hspi3.Instance = SPI3;
 8003872:	4879      	ldr	r0, [pc, #484]	; (8003a58 <main+0xa64>)
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8003874:	2300      	movs	r3, #0
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003876:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800387a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800387c:	60c4      	str	r4, [r0, #12]
  hspi3.Init.CRCPolynomial = 7;
 800387e:	2407      	movs	r4, #7
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003880:	6186      	str	r6, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8003882:	62c4      	str	r4, [r0, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003884:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003888:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800388c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003890:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hspi3.Instance = SPI3;
 8003894:	4b71      	ldr	r3, [pc, #452]	; (8003a5c <main+0xa68>)
 8003896:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003898:	f009 ff76 	bl	800d788 <HAL_SPI_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2800      	cmp	r0, #0
 80038a0:	f040 81ce 	bne.w	8003c40 <main+0xc4c>
  hspi2.Instance = SPI2;
 80038a4:	486e      	ldr	r0, [pc, #440]	; (8003a60 <main+0xa6c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038a6:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8003a90 <main+0xa9c>
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038aa:	6083      	str	r3, [r0, #8]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ac:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038ae:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038b0:	6186      	str	r6, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 80038b2:	62c4      	str	r4, [r0, #44]	; 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038b8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80038c0:	e9c0 8300 	strd	r8, r3, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80038c4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80038c8:	60c3      	str	r3, [r0, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80038ca:	2338      	movs	r3, #56	; 0x38
 80038cc:	61c3      	str	r3, [r0, #28]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038ce:	2308      	movs	r3, #8
 80038d0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038d2:	f009 ff59 	bl	800d788 <HAL_SPI_Init>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	f040 81b2 	bne.w	8003c40 <main+0xc4c>
  hi2c4.Instance = I2C4;
 80038dc:	4c61      	ldr	r4, [pc, #388]	; (8003a64 <main+0xa70>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038de:	2601      	movs	r6, #1
  hi2c4.Init.Timing = 0x20404768;
 80038e0:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <main+0xa74>)
 80038e2:	4f62      	ldr	r7, [pc, #392]	; (8003a6c <main+0xa78>)
  hi2c4.Init.OwnAddress1 = 0;
 80038e4:	60a0      	str	r0, [r4, #8]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038e6:	6220      	str	r0, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038e8:	60e6      	str	r6, [r4, #12]
  hi2c4.Init.OwnAddress2 = 0;
 80038ea:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038ee:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80038f2:	4620      	mov	r0, r4
  hi2c4.Init.Timing = 0x20404768;
 80038f4:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80038f8:	f007 fad2 	bl	800aea0 <HAL_I2C_Init>
 80038fc:	4601      	mov	r1, r0
 80038fe:	2800      	cmp	r0, #0
 8003900:	f040 819e 	bne.w	8003c40 <main+0xc4c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003904:	4620      	mov	r0, r4
 8003906:	f007 fe23 	bl	800b550 <HAL_I2CEx_ConfigAnalogFilter>
 800390a:	4601      	mov	r1, r0
 800390c:	2800      	cmp	r0, #0
 800390e:	f040 8197 	bne.w	8003c40 <main+0xc4c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003912:	4620      	mov	r0, r4
 8003914:	f007 fe6e 	bl	800b5f4 <HAL_I2CEx_ConfigDigitalFilter>
 8003918:	2800      	cmp	r0, #0
 800391a:	f040 8191 	bne.w	8003c40 <main+0xc4c>
  hi2c2.Instance = I2C2;
 800391e:	4c54      	ldr	r4, [pc, #336]	; (8003a70 <main+0xa7c>)
 8003920:	4b54      	ldr	r3, [pc, #336]	; (8003a74 <main+0xa80>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003922:	6220      	str	r0, [r4, #32]
  hi2c2.Init.Timing = 0x20404768;
 8003924:	6067      	str	r7, [r4, #4]
  hi2c2.Instance = I2C2;
 8003926:	6023      	str	r3, [r4, #0]
  hi2c2.Init.OwnAddress1 = 0;
 8003928:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 800392c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003930:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003934:	4620      	mov	r0, r4
 8003936:	f007 fab3 	bl	800aea0 <HAL_I2C_Init>
 800393a:	4601      	mov	r1, r0
 800393c:	2800      	cmp	r0, #0
 800393e:	f040 817f 	bne.w	8003c40 <main+0xc4c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003942:	4620      	mov	r0, r4
 8003944:	f007 fe04 	bl	800b550 <HAL_I2CEx_ConfigAnalogFilter>
 8003948:	4601      	mov	r1, r0
 800394a:	2800      	cmp	r0, #0
 800394c:	f040 8178 	bne.w	8003c40 <main+0xc4c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003950:	4620      	mov	r0, r4
 8003952:	f007 fe4f 	bl	800b5f4 <HAL_I2CEx_ConfigDigitalFilter>
 8003956:	2800      	cmp	r0, #0
 8003958:	f040 8172 	bne.w	8003c40 <main+0xc4c>
  htim4.Instance = TIM4;
 800395c:	4c46      	ldr	r4, [pc, #280]	; (8003a78 <main+0xa84>)
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <main+0xa88>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003960:	9029      	str	r0, [sp, #164]	; 0xa4
  htim4.Instance = TIM4;
 8003962:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 1100;
 8003964:	f240 434c 	movw	r3, #1100	; 0x44c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003968:	904e      	str	r0, [sp, #312]	; 0x138
  htim4.Init.Period = 1100;
 800396a:	60e3      	str	r3, [r4, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800396c:	2380      	movs	r3, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800396e:	902c      	str	r0, [sp, #176]	; 0xb0
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003970:	6120      	str	r0, [r4, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003972:	9012      	str	r0, [sp, #72]	; 0x48
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003974:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003976:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
  TIM_OC_InitTypeDef sConfigOC = {0};
 800397a:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 800397e:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 8003982:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003986:	e9c4 0001 	strd	r0, r0, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800398a:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800398e:	4620      	mov	r0, r4
 8003990:	f00b fbb4 	bl	800f0fc <HAL_TIM_Base_Init>
 8003994:	2800      	cmp	r0, #0
 8003996:	f040 8153 	bne.w	8003c40 <main+0xc4c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800399a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800399e:	a929      	add	r1, sp, #164	; 0xa4
 80039a0:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039a2:	9329      	str	r3, [sp, #164]	; 0xa4
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80039a4:	f00a fe40 	bl	800e628 <HAL_TIM_ConfigClockSource>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	f040 8149 	bne.w	8003c40 <main+0xc4c>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80039ae:	4620      	mov	r0, r4
 80039b0:	f00b fc72 	bl	800f298 <HAL_TIM_OC_Init>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	f040 8143 	bne.w	8003c40 <main+0xc4c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80039ba:	2430      	movs	r4, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039bc:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039be:	a910      	add	r1, sp, #64	; 0x40
 80039c0:	482d      	ldr	r0, [pc, #180]	; (8003a78 <main+0xa84>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80039c2:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039c4:	f00d f804 	bl	80109d0 <HAL_TIMEx_MasterConfigSynchronization>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	f040 8139 	bne.w	8003c40 <main+0xc4c>
  sConfigOC.Pulse = 550;
 80039ce:	f240 2326 	movw	r3, #550	; 0x226
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039d2:	9050      	str	r0, [sp, #320]	; 0x140
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039d4:	9052      	str	r0, [sp, #328]	; 0x148
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039d6:	2208      	movs	r2, #8
 80039d8:	a94e      	add	r1, sp, #312	; 0x138
 80039da:	4827      	ldr	r0, [pc, #156]	; (8003a78 <main+0xa84>)
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80039dc:	944e      	str	r4, [sp, #312]	; 0x138
  sConfigOC.Pulse = 550;
 80039de:	934f      	str	r3, [sp, #316]	; 0x13c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039e0:	f00b ff28 	bl	800f834 <HAL_TIM_OC_ConfigChannel>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	f040 812b 	bne.w	8003c40 <main+0xc4c>
  HAL_TIM_MspPostInit(&htim4);
 80039ea:	4823      	ldr	r0, [pc, #140]	; (8003a78 <main+0xa84>)
 80039ec:	f001 ffcc 	bl	8005988 <HAL_TIM_MspPostInit>
  hiwdg.Instance = IWDG;
 80039f0:	4823      	ldr	r0, [pc, #140]	; (8003a80 <main+0xa8c>)
  hiwdg.Init.Window = 4095;
 80039f2:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80039f6:	4f23      	ldr	r7, [pc, #140]	; (8003a84 <main+0xa90>)
  hiwdg.Init.Reload = 4095;
 80039f8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80039fc:	2306      	movs	r3, #6
 80039fe:	e9c0 7300 	strd	r7, r3, [r0]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003a02:	f007 fe47 	bl	800b694 <HAL_IWDG_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	f040 8119 	bne.w	8003c40 <main+0xc4c>
  htim14.Instance = TIM14;
 8003a0e:	481e      	ldr	r0, [pc, #120]	; (8003a88 <main+0xa94>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a10:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a14:	6103      	str	r3, [r0, #16]
  htim14.Instance = TIM14;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <main+0xa98>)
 8003a18:	6003      	str	r3, [r0, #0]
  htim14.Init.Period = 10800;
 8003a1a:	f642 2330 	movw	r3, #10800	; 0x2a30
 8003a1e:	e039      	b.n	8003a94 <main+0xaa0>
 8003a20:	20002774 	.word	0x20002774
 8003a24:	40011400 	.word	0x40011400
 8003a28:	20001dc0 	.word	0x20001dc0
 8003a2c:	40007400 	.word	0x40007400
 8003a30:	200020d4 	.word	0x200020d4
 8003a34:	40005400 	.word	0x40005400
 8003a38:	2000266c 	.word	0x2000266c
 8003a3c:	40004c00 	.word	0x40004c00
 8003a40:	200026f0 	.word	0x200026f0
 8003a44:	40005000 	.word	0x40005000
 8003a48:	200025e8 	.word	0x200025e8
 8003a4c:	40004800 	.word	0x40004800
 8003a50:	200022a0 	.word	0x200022a0
 8003a54:	40013400 	.word	0x40013400
 8003a58:	2000223c 	.word	0x2000223c
 8003a5c:	40003c00 	.word	0x40003c00
 8003a60:	200021d8 	.word	0x200021d8
 8003a64:	2000216c 	.word	0x2000216c
 8003a68:	40006000 	.word	0x40006000
 8003a6c:	20404768 	.word	0x20404768
 8003a70:	20002120 	.word	0x20002120
 8003a74:	40005800 	.word	0x40005800
 8003a78:	20002434 	.word	0x20002434
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	200021b8 	.word	0x200021b8
 8003a84:	40003000 	.word	0x40003000
 8003a88:	20002350 	.word	0x20002350
 8003a8c:	40002000 	.word	0x40002000
 8003a90:	40003800 	.word	0x40003800
 8003a94:	60c3      	str	r3, [r0, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003a9a:	f00b fb2f 	bl	800f0fc <HAL_TIM_Base_Init>
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	f040 80ce 	bne.w	8003c40 <main+0xc4c>
  htim5.Instance = TIM5;
 8003aa4:	4f67      	ldr	r7, [pc, #412]	; (8003c44 <main+0xc50>)
  htim5.Init.Period = 4;
 8003aa6:	2610      	movs	r6, #16
  htim5.Instance = TIM5;
 8003aa8:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8003c78 <main+0xc84>
  htim5.Init.Period = 4;
 8003aac:	f04f 0804 	mov.w	r8, #4
  htim5.Init.Prescaler = 0;
 8003ab0:	6078      	str	r0, [r7, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ab2:	6138      	str	r0, [r7, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ab4:	61b8      	str	r0, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab6:	900f      	str	r0, [sp, #60]	; 0x3c
  htim5.Instance = TIM5;
 8003ab8:	f8c7 9000 	str.w	r9, [r7]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003abc:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 8003ac0:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac4:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ac8:	4638      	mov	r0, r7
  htim5.Init.Period = 4;
 8003aca:	e9c7 6802 	strd	r6, r8, [r7, #8]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ace:	f00b fb15 	bl	800f0fc <HAL_TIM_Base_Init>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	f040 80b4 	bne.w	8003c40 <main+0xc4c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ad8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003adc:	a925      	add	r1, sp, #148	; 0x94
 8003ade:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ae0:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003ae2:	f00a fda1 	bl	800e628 <HAL_TIM_ConfigClockSource>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	f040 80a9 	bne.w	8003c40 <main+0xc4c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003aee:	4638      	mov	r0, r7
 8003af0:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af2:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003af6:	f00c ff6b 	bl	80109d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f040 809f 	bne.w	8003c40 <main+0xc4c>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003b02:	f8d9 2000 	ldr.w	r2, [r9]
  huart8.Instance = UART8;
 8003b06:	4850      	ldr	r0, [pc, #320]	; (8003c48 <main+0xc54>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003b08:	f042 0208 	orr.w	r2, r2, #8
  huart8.Init.BaudRate = 9600;
 8003b0c:	494f      	ldr	r1, [pc, #316]	; (8003c4c <main+0xc58>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003b0e:	f8c9 2000 	str.w	r2, [r9]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003b12:	6103      	str	r3, [r0, #16]
  huart8.Init.Mode = UART_MODE_RX;
 8003b14:	f8c0 8014 	str.w	r8, [r0, #20]
  huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003b18:	6384      	str	r4, [r0, #56]	; 0x38
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003b1a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b1e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003b22:	e9c0 3608 	strd	r3, r6, [r0, #32]
  huart8.Init.BaudRate = 9600;
 8003b26:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003b2a:	e9c0 1300 	strd	r1, r3, [r0]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003b2e:	f00e f91d 	bl	8011d6c <HAL_UART_Init>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2800      	cmp	r0, #0
 8003b36:	f040 8083 	bne.w	8003c40 <main+0xc4c>
  huart7.Instance = UART7;
 8003b3a:	4845      	ldr	r0, [pc, #276]	; (8003c50 <main+0xc5c>)
  huart7.Init.BaudRate = 115200;
 8003b3c:	4a45      	ldr	r2, [pc, #276]	; (8003c54 <main+0xc60>)
  huart7.Init.Parity = UART_PARITY_NONE;
 8003b3e:	6103      	str	r3, [r0, #16]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b40:	6203      	str	r3, [r0, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003b42:	6246      	str	r6, [r0, #36]	; 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003b44:	6384      	str	r4, [r0, #56]	; 0x38
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003b46:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b4a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart7.Init.BaudRate = 115200;
 8003b4e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003b52:	e9c0 2300 	strd	r2, r3, [r0]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003b56:	230c      	movs	r3, #12
 8003b58:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003b5a:	f00e f907 	bl	8011d6c <HAL_UART_Init>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d16e      	bne.n	8003c40 <main+0xc4c>
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003b62:	2200      	movs	r2, #0
 8003b64:	2107      	movs	r1, #7
 8003b66:	2026      	movs	r0, #38	; 0x26
  osMutexDef(myMutex01);
 8003b68:	2600      	movs	r6, #0
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003b6a:	f004 f9f3 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b6e:	2026      	movs	r0, #38	; 0x26
 8003b70:	f004 fa3a 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2106      	movs	r1, #6
 8003b78:	2047      	movs	r0, #71	; 0x47
 8003b7a:	f004 f9eb 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b7e:	2047      	movs	r0, #71	; 0x47
 8003b80:	f004 fa32 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8003b84:	2200      	movs	r2, #0
 8003b86:	2106      	movs	r1, #6
 8003b88:	2012      	movs	r0, #18
 8003b8a:	f004 f9e3 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003b8e:	2012      	movs	r0, #18
 8003b90:	f004 fa2a 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003b94:	2200      	movs	r2, #0
 8003b96:	2106      	movs	r1, #6
 8003b98:	2028      	movs	r0, #40	; 0x28
 8003b9a:	f004 f9db 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b9e:	2028      	movs	r0, #40	; 0x28
 8003ba0:	f004 fa22 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	202d      	movs	r0, #45	; 0x2d
 8003baa:	f004 f9d3 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003bae:	202d      	movs	r0, #45	; 0x2d
 8003bb0:	f004 fa1a 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003bb4:	a83d      	add	r0, sp, #244	; 0xf4
  osMessageQDef(myQueue01, 256, uint16_t);
 8003bb6:	4c28      	ldr	r4, [pc, #160]	; (8003c58 <main+0xc64>)
  osMutexDef(myMutex01);
 8003bb8:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003bbc:	f010 fb4c 	bl	8014258 <osMutexCreate>
 8003bc0:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <main+0xc68>)
 8003bc2:	4602      	mov	r2, r0
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	a841      	add	r0, sp, #260	; 0x104
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003bc8:	f104 0710 	add.w	r7, r4, #16
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003bcc:	601a      	str	r2, [r3, #0]
  osSemaphoreDef(ssicontent);
 8003bce:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8003bd2:	f010 fb9d 	bl	8014310 <osSemaphoreCreate>
 8003bd6:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <main+0xc6c>)
 8003bd8:	4602      	mov	r2, r0
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003bda:	2101      	movs	r1, #1
 8003bdc:	a845      	add	r0, sp, #276	; 0x114
  osTimerDef(myTimer01, Callback01);
 8003bde:	9646      	str	r6, [sp, #280]	; 0x118
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8003be0:	601a      	str	r2, [r3, #0]
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003be2:	4632      	mov	r2, r6
  osTimerDef(myTimer01, Callback01);
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <main+0xc70>)
 8003be6:	9345      	str	r3, [sp, #276]	; 0x114
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003be8:	f010 fb14 	bl	8014214 <osTimerCreate>
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <main+0xc74>)
 8003bee:	6018      	str	r0, [r3, #0]
  osMessageQDef(myQueue01, 256, uint16_t);
 8003bf0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003bf4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	f010 fc02 	bl	8014404 <osMessageCreate>
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <main+0xc78>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003c02:	ad4e      	add	r5, sp, #312	; 0x138
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003c04:	342c      	adds	r4, #44	; 0x2c
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003c06:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003c08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003c10:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003c14:	4631      	mov	r1, r6
 8003c16:	a84e      	add	r0, sp, #312	; 0x138
 8003c18:	f010 fac2 	bl	80141a0 <osThreadCreate>
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <main+0xc7c>)
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003c1e:	ad55      	add	r5, sp, #340	; 0x154
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003c20:	6018      	str	r0, [r3, #0]
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c26:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003c2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8003c2e:	4631      	mov	r1, r6
 8003c30:	a855      	add	r0, sp, #340	; 0x154
 8003c32:	f010 fab5 	bl	80141a0 <osThreadCreate>
 8003c36:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <main+0xc80>)
 8003c38:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003c3a:	f010 faa3 	bl	8014184 <osKernelStart>
	while (1) {
 8003c3e:	e7fe      	b.n	8003c3e <main+0xc4a>
    Error_Handler();
 8003c40:	f7ff f95c 	bl	8002efc <Error_Handler>
 8003c44:	20002480 	.word	0x20002480
 8003c48:	2000287c 	.word	0x2000287c
 8003c4c:	40007c00 	.word	0x40007c00
 8003c50:	200027f8 	.word	0x200027f8
 8003c54:	40007800 	.word	0x40007800
 8003c58:	080286b4 	.word	0x080286b4
 8003c5c:	20002914 	.word	0x20002914
 8003c60:	20002934 	.word	0x20002934
 8003c64:	08002231 	.word	0x08002231
 8003c68:	2000291c 	.word	0x2000291c
 8003c6c:	20002918 	.word	0x20002918
 8003c70:	20001cbc 	.word	0x20001cbc
 8003c74:	20001c70 	.word	0x20001c70
 8003c78:	40000c00 	.word	0x40000c00

08003c7c <StartDefaultTask>:
{
 8003c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c80:	b084      	sub	sp, #16
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003c82:	4f8d      	ldr	r7, [pc, #564]	; (8003eb8 <StartDefaultTask+0x23c>)
  MX_USB_DEVICE_Init();
 8003c84:	f01e ffec 	bl	8022c60 <MX_USB_DEVICE_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003c88:	250f      	movs	r5, #15
  MX_LWIP_Init();
 8003c8a:	f00f f907 	bl	8012e9c <MX_LWIP_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003c8e:	f242 762b 	movw	r6, #10027	; 0x272b
	getpcb();		// find our daughterboard
 8003c92:	f7ff f8a3 	bl	8002ddc <getpcb>
	printf("\n\n----------------------------------------------------------------------------\n");
 8003c96:	4889      	ldr	r0, [pc, #548]	; (8003ebc <StartDefaultTask+0x240>)
 8003c98:	f020 fcac 	bl	80245f4 <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003c9c:	4988      	ldr	r1, [pc, #544]	; (8003ec0 <StartDefaultTask+0x244>)
 8003c9e:	6838      	ldr	r0, [r7, #0]
 8003ca0:	2400      	movs	r4, #0
 8003ca2:	f501 6184 	add.w	r1, r1, #1056	; 0x420
 8003ca6:	c90e      	ldmia	r1, {r1, r2, r3}
 8003ca8:	9003      	str	r0, [sp, #12]
 8003caa:	9400      	str	r4, [sp, #0]
 8003cac:	4885      	ldr	r0, [pc, #532]	; (8003ec4 <StartDefaultTask+0x248>)
 8003cae:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8003cb2:	f020 fc03 	bl	80244bc <iprintf>
	if (!(netif_is_link_up(&gnetif))) {
 8003cb6:	4b84      	ldr	r3, [pc, #528]	; (8003ec8 <StartDefaultTask+0x24c>)
 8003cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cbc:	075b      	lsls	r3, r3, #29
 8003cbe:	d41e      	bmi.n	8003cfe <StartDefaultTask+0x82>
		printf("LAN interface appears disconnected\n\r");
 8003cc0:	4882      	ldr	r0, [pc, #520]	; (8003ecc <StartDefaultTask+0x250>)
 8003cc2:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003cc4:	4d82      	ldr	r5, [pc, #520]	; (8003ed0 <StartDefaultTask+0x254>)
		printf("LAN interface appears disconnected\n\r");
 8003cc6:	f020 fbf9 	bl	80244bc <iprintf>
			osDelay(50);
 8003cca:	2032      	movs	r0, #50	; 0x32
 8003ccc:	f010 fa9a 	bl	8014204 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f006 feae 	bl	800aa38 <HAL_GPIO_WritePin>
			osDelay(50);
 8003cdc:	2032      	movs	r0, #50	; 0x32
 8003cde:	f010 fa91 	bl	8014204 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f006 fea5 	bl	800aa38 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8003cee:	3c01      	subs	r4, #1
 8003cf0:	d1eb      	bne.n	8003cca <StartDefaultTask+0x4e>
		printf("************* REBOOTING **************\n");
 8003cf2:	4878      	ldr	r0, [pc, #480]	; (8003ed4 <StartDefaultTask+0x258>)
 8003cf4:	f020 fc7e 	bl	80245f4 <puts>
		rebootme(0);
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f7fe fb35 	bl	8002368 <rebootme>
	globalfreeze = 0;		// Allow UDP streaming
 8003cfe:	4b76      	ldr	r3, [pc, #472]	; (8003ed8 <StartDefaultTask+0x25c>)
	netif = netif_default;
 8003d00:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8003f48 <StartDefaultTask+0x2cc>
	globalfreeze = 0;		// Allow UDP streaming
 8003d04:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 8003d06:	4b75      	ldr	r3, [pc, #468]	; (8003edc <StartDefaultTask+0x260>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8003d08:	4975      	ldr	r1, [pc, #468]	; (8003ee0 <StartDefaultTask+0x264>)
	netif = netif_default;
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	f8c8 0000 	str.w	r0, [r8]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8003d10:	f015 fe50 	bl	80199b4 <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8003d14:	4973      	ldr	r1, [pc, #460]	; (8003ee4 <StartDefaultTask+0x268>)
 8003d16:	f8d8 0000 	ldr.w	r0, [r8]
 8003d1a:	f015 fe07 	bl	801992c <netif_set_status_callback>
	statuspkt.uid = BUILDNO;		// 16 bits
 8003d1e:	4b72      	ldr	r3, [pc, #456]	; (8003ee8 <StartDefaultTask+0x26c>)
	statuspkt.adctrigoff = TRIG_THRES;
 8003d20:	2264      	movs	r2, #100	; 0x64
	statuspkt.bconf |= (pcb << 8);
 8003d22:	6838      	ldr	r0, [r7, #0]
	statuspkt.uid = BUILDNO;		// 16 bits
 8003d24:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
	statuspkt.majorversion = MAJORVERSION;
 8003d28:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8003d2c:	f883 5071 	strb.w	r5, [r3, #113]	; 0x71
	statuspkt.udppknum = 0;
 8003d30:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8003d32:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8003d34:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8003d36:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8003d38:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8003d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003d40:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003d42:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 8003d44:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8003d48:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8003d4c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8003d50:	f041 0101 	orr.w	r1, r1, #1
 8003d54:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (pcb << 8);
 8003d58:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003d5c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8003d64:	4b61      	ldr	r3, [pc, #388]	; (8003eec <StartDefaultTask+0x270>)
 8003d66:	4a62      	ldr	r2, [pc, #392]	; (8003ef0 <StartDefaultTask+0x274>)
 8003d68:	601a      	str	r2, [r3, #0]
	initsplat();
 8003d6a:	f001 f9a5 	bl	80050b8 <initsplat>
	stat = setupneo();
 8003d6e:	f000 fa41 	bl	80041f4 <setupneo>
	if (stat != HAL_OK) {
 8003d72:	2800      	cmp	r0, #0
 8003d74:	f040 8093 	bne.w	8003e9e <StartDefaultTask+0x222>
	printf("Setting up timers\n");
 8003d78:	485e      	ldr	r0, [pc, #376]	; (8003ef4 <StartDefaultTask+0x278>)
 8003d7a:	f020 fc3b 	bl	80245f4 <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8003d7e:	2300      	movs	r3, #0
 8003d80:	485d      	ldr	r0, [pc, #372]	; (8003ef8 <StartDefaultTask+0x27c>)
 8003d82:	461a      	mov	r2, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	6800      	ldr	r0, [r0, #0]
 8003d88:	f010 fd66 	bl	8014858 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8003d8c:	485b      	ldr	r0, [pc, #364]	; (8003efc <StartDefaultTask+0x280>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8003d8e:	4c5c      	ldr	r4, [pc, #368]	; (8003f00 <StartDefaultTask+0x284>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8003d90:	f00a fb88 	bl	800e4a4 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8003d94:	2200      	movs	r2, #0
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	4611      	mov	r1, r2
 8003d9a:	f00c faad 	bl	80102f8 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2104      	movs	r1, #4
 8003da2:	6820      	ldr	r0, [r4, #0]
 8003da4:	f00c faa8 	bl	80102f8 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8003da8:	2200      	movs	r2, #0
 8003daa:	210c      	movs	r1, #12
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	f00c faa3 	bl	80102f8 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8003db2:	2100      	movs	r1, #0
 8003db4:	4620      	mov	r0, r4
 8003db6:	f00c fced 	bl	8010794 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 8003dba:	2104      	movs	r1, #4
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f00c fce9 	bl	8010794 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8003dc2:	210c      	movs	r1, #12
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	f00c fce5 	bl	8010794 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4a47      	ldr	r2, [pc, #284]	; (8003eec <StartDefaultTask+0x270>)
 8003dce:	2108      	movs	r1, #8
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f00c faef 	bl	80103b4 <HAL_TIM_IC_Start_DMA>
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	b128      	cbz	r0, 8003de6 <StartDefaultTask+0x16a>
		printf("TIM_Base_Start_DMA err %i", err);
 8003dda:	4601      	mov	r1, r0
 8003ddc:	4849      	ldr	r0, [pc, #292]	; (8003f04 <StartDefaultTask+0x288>)
 8003dde:	f020 fb6d 	bl	80244bc <iprintf>
		Error_Handler();
 8003de2:	f7ff f88b 	bl	8002efc <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8003de6:	6820      	ldr	r0, [r4, #0]
 8003de8:	2201      	movs	r2, #1
 8003dea:	2108      	movs	r1, #8
	myip = ip.addr;
 8003dec:	4c46      	ldr	r4, [pc, #280]	; (8003f08 <StartDefaultTask+0x28c>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8003dee:	f00c fa83 	bl	80102f8 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 8003df2:	f8d8 3000 	ldr.w	r3, [r8]
	ip = dhcp->offered_ip_addr;
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 8003dfa:	6023      	str	r3, [r4, #0]
	if (myip ==  0) {
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d052      	beq.n	8003ea6 <StartDefaultTask+0x22a>
	printf("*****************************************\n");
 8003e00:	4842      	ldr	r0, [pc, #264]	; (8003f0c <StartDefaultTask+0x290>)
 8003e02:	f020 fbf7 	bl	80245f4 <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8003e06:	6821      	ldr	r1, [r4, #0]
	uip = locateudp();
 8003e08:	4e41      	ldr	r6, [pc, #260]	; (8003f10 <StartDefaultTask+0x294>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8003e0a:	0e08      	lsrs	r0, r1, #24
 8003e0c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003e10:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8003e14:	b2c9      	uxtb	r1, r1
 8003e16:	9000      	str	r0, [sp, #0]
 8003e18:	483e      	ldr	r0, [pc, #248]	; (8003f14 <StartDefaultTask+0x298>)
 8003e1a:	f020 fb4f 	bl	80244bc <iprintf>
	printf("*****************************************\n");
 8003e1e:	483b      	ldr	r0, [pc, #236]	; (8003f0c <StartDefaultTask+0x290>)
 8003e20:	f020 fbe8 	bl	80245f4 <puts>
	while (lptask_init_done == 0)
 8003e24:	4c3c      	ldr	r4, [pc, #240]	; (8003f18 <StartDefaultTask+0x29c>)
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8003e26:	f002 ffd9 	bl	8006ddc <initialapisn>
	osDelay(1000);
 8003e2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e2e:	f010 f9e9 	bl	8014204 <osDelay>
	printf("Starting httpd web server\n");
 8003e32:	483a      	ldr	r0, [pc, #232]	; (8003f1c <StartDefaultTask+0x2a0>)
 8003e34:	f020 fbde 	bl	80245f4 <puts>
	httpd_init();		// start the www server
 8003e38:	f013 ffc6 	bl	8017dc8 <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8003e3c:	f002 ff96 	bl	8006d6c <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8003e40:	4837      	ldr	r0, [pc, #220]	; (8003f20 <StartDefaultTask+0x2a4>)
 8003e42:	f020 fbd7 	bl	80245f4 <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8003e46:	2008      	movs	r0, #8
 8003e48:	4a36      	ldr	r2, [pc, #216]	; (8003f24 <StartDefaultTask+0x2a8>)
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003e50:	9000      	str	r0, [sp, #0]
 8003e52:	4835      	ldr	r0, [pc, #212]	; (8003f28 <StartDefaultTask+0x2ac>)
 8003e54:	f004 f9d6 	bl	8008204 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 8003e58:	4834      	ldr	r0, [pc, #208]	; (8003f2c <StartDefaultTask+0x2b0>)
 8003e5a:	f00a fa6b 	bl	800e334 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8003e5e:	f011 fe1b 	bl	8015a98 <xTaskGetCurrentTaskHandle>
 8003e62:	4b33      	ldr	r3, [pc, #204]	; (8003f30 <StartDefaultTask+0x2b4>)
 8003e64:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8003e66:	f002 fba1 	bl	80065ac <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8003e6a:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <StartDefaultTask+0x2b8>)
 8003e6c:	2201      	movs	r2, #1
	uip = locateudp();
 8003e6e:	6030      	str	r0, [r6, #0]
	printf("Waiting for lptask to start\n");
 8003e70:	4831      	ldr	r0, [pc, #196]	; (8003f38 <StartDefaultTask+0x2bc>)
	main_init_done = 1; // let lptask now main has initialised
 8003e72:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8003e74:	f020 fbbe 	bl	80245f4 <puts>
	while (lptask_init_done == 0)
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	b92b      	cbnz	r3, 8003e88 <StartDefaultTask+0x20c>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8003e7c:	2064      	movs	r0, #100	; 0x64
 8003e7e:	f010 f9c1 	bl	8014204 <osDelay>
	while (lptask_init_done == 0)
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f9      	beq.n	8003e7c <StartDefaultTask+0x200>
	startadc();		// start the ADC DMA loop
 8003e88:	f7fc fe24 	bl	8000ad4 <startadc>
		startudp(uip);	// should never return
 8003e8c:	6830      	ldr	r0, [r6, #0]
 8003e8e:	f002 fbc3 	bl	8006618 <startudp>
		printf("UDP stream exited!!!\n\r");
 8003e92:	482a      	ldr	r0, [pc, #168]	; (8003f3c <StartDefaultTask+0x2c0>)
 8003e94:	f020 fb12 	bl	80244bc <iprintf>
		rebootme(4);
 8003e98:	2004      	movs	r0, #4
 8003e9a:	f7fe fa65 	bl	8002368 <rebootme>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8003e9e:	4828      	ldr	r0, [pc, #160]	; (8003f40 <StartDefaultTask+0x2c4>)
 8003ea0:	f020 fb0c 	bl	80244bc <iprintf>
 8003ea4:	e768      	b.n	8003d78 <StartDefaultTask+0xfc>
		printf("***** DHCP Failed ******\n");
 8003ea6:	4827      	ldr	r0, [pc, #156]	; (8003f44 <StartDefaultTask+0x2c8>)
 8003ea8:	f020 fba4 	bl	80245f4 <puts>
		osDelay(200);
 8003eac:	20c8      	movs	r0, #200	; 0xc8
 8003eae:	f010 f9a9 	bl	8014204 <osDelay>
		rebootme(1);
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	f7fe fa58 	bl	8002368 <rebootme>
 8003eb8:	20002928 	.word	0x20002928
 8003ebc:	080295a8 	.word	0x080295a8
 8003ec0:	1ff0f000 	.word	0x1ff0f000
 8003ec4:	080295f8 	.word	0x080295f8
 8003ec8:	20002db0 	.word	0x20002db0
 8003ecc:	08029638 	.word	0x08029638
 8003ed0:	40020c00 	.word	0x40020c00
 8003ed4:	08029660 	.word	0x08029660
 8003ed8:	20002ccc 	.word	0x20002ccc
 8003edc:	2002db44 	.word	0x2002db44
 8003ee0:	08002371 	.word	0x08002371
 8003ee4:	08002225 	.word	0x08002225
 8003ee8:	20002b24 	.word	0x20002b24
 8003eec:	20000768 	.word	0x20000768
 8003ef0:	02a62b1c 	.word	0x02a62b1c
 8003ef4:	080296a8 	.word	0x080296a8
 8003ef8:	20002934 	.word	0x20002934
 8003efc:	200024cc 	.word	0x200024cc
 8003f00:	2000239c 	.word	0x2000239c
 8003f04:	080296bc 	.word	0x080296bc
 8003f08:	20002920 	.word	0x20002920
 8003f0c:	080296f4 	.word	0x080296f4
 8003f10:	20002944 	.word	0x20002944
 8003f14:	08029720 	.word	0x08029720
 8003f18:	2000290c 	.word	0x2000290c
 8003f1c:	08029748 	.word	0x08029748
 8003f20:	08029764 	.word	0x08029764
 8003f24:	080297b4 	.word	0x080297b4
 8003f28:	20001dc0 	.word	0x20001dc0
 8003f2c:	20002518 	.word	0x20002518
 8003f30:	200007fc 	.word	0x200007fc
 8003f34:	20002910 	.word	0x20002910
 8003f38:	08029780 	.word	0x08029780
 8003f3c:	0802979c 	.word	0x0802979c
 8003f40:	08029688 	.word	0x08029688
 8003f44:	080296d8 	.word	0x080296d8
 8003f48:	20002924 	.word	0x20002924

08003f4c <assert_failed>:
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop

08003f50 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8003f50:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8003f52:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8003f54:	b083      	sub	sp, #12
 8003f56:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8003f58:	d009      	beq.n	8003f6e <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8003f5a:	230a      	movs	r3, #10
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	a901      	add	r1, sp, #4
 8003f60:	4808      	ldr	r0, [pc, #32]	; (8003f84 <__io_putchar+0x34>)
 8003f62:	f00d fe5b 	bl	8011c1c <HAL_UART_Transmit>

	return ch;
	}
}
 8003f66:	9801      	ldr	r0, [sp, #4]
 8003f68:	b003      	add	sp, #12
 8003f6a:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2202      	movs	r2, #2
 8003f72:	4905      	ldr	r1, [pc, #20]	; (8003f88 <__io_putchar+0x38>)
 8003f74:	4803      	ldr	r0, [pc, #12]	; (8003f84 <__io_putchar+0x34>)
 8003f76:	f00d fe51 	bl	8011c1c <HAL_UART_Transmit>
}
 8003f7a:	9801      	ldr	r0, [sp, #4]
 8003f7c:	b003      	add	sp, #12
 8003f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f82:	bf00      	nop
 8003f84:	20002564 	.word	0x20002564
 8003f88:	08029eb4 	.word	0x08029eb4

08003f8c <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <calcepoch32+0x40>)
 8003f8e:	4810      	ldr	r0, [pc, #64]	; (8003fd0 <calcepoch32+0x44>)
 8003f90:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 8003f92:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8003f94:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003f98:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003f9a:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003f9c:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8003f9e:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003fa0:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003fa4:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8003fa6:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003fa8:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8003faa:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 8003fac:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 8003fae:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8003fb0:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 8003fb2:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 8003fb6:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 8003fb8:	f01f fbc4 	bl	8023744 <mktime>
 8003fbc:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <calcepoch32+0x48>)
 8003fbe:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 8003fc0:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 8003fc4:	e9c2 3100 	strd	r3, r1, [r2]
}
 8003fc8:	4418      	add	r0, r3
 8003fca:	bd10      	pop	{r4, pc}
 8003fcc:	20002b24 	.word	0x20002b24
 8003fd0:	20002af8 	.word	0x20002af8
 8003fd4:	200029d8 	.word	0x200029d8

08003fd8 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 8003fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fdc:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 8003fde:	b33a      	cbz	r2, 8004030 <printPacket+0x58>
 8003fe0:	4607      	mov	r7, r0
 8003fe2:	4616      	mov	r6, r2
 8003fe4:	1e4d      	subs	r5, r1, #1
 8003fe6:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 8003fe8:	f8df a054 	ldr.w	sl, [pc, #84]	; 8004040 <printPacket+0x68>
 8003fec:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8004044 <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 8003ff0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8004048 <printPacket+0x70>
 8003ff4:	e013      	b.n	800401e <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 8003ff6:	f8da 1000 	ldr.w	r1, [sl]
 8003ffa:	1c4b      	adds	r3, r1, #1
 8003ffc:	f8ca 3000 	str.w	r3, [sl]
 8004000:	f020 fa5c 	bl	80244bc <iprintf>
	for (byte i = 0; i < len; i++) {
 8004004:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 8004006:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800400a:	4641      	mov	r1, r8
 800400c:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 800400e:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8004010:	f020 fbdc 	bl	80247cc <siprintf>
		printf(temp);
 8004014:	a801      	add	r0, sp, #4
 8004016:	f020 fa51 	bl	80244bc <iprintf>
	for (byte i = 0; i < len; i++) {
 800401a:	42a6      	cmp	r6, r4
 800401c:	d008      	beq.n	8004030 <printPacket+0x58>
		if (i % 16 == 0) {
 800401e:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 8004022:	463a      	mov	r2, r7
 8004024:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 8004026:	d0e6      	beq.n	8003ff6 <printPacket+0x1e>
			printf(" ");
 8004028:	2020      	movs	r0, #32
 800402a:	f020 fa5f 	bl	80244ec <putchar>
 800402e:	e7e9      	b.n	8004004 <printPacket+0x2c>
	}
	printf("\n\r");
 8004030:	4802      	ldr	r0, [pc, #8]	; (800403c <printPacket+0x64>)
 8004032:	f020 fa43 	bl	80244bc <iprintf>
}
 8004036:	b002      	add	sp, #8
 8004038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403c:	080297b0 	.word	0x080297b0
 8004040:	200029cc 	.word	0x200029cc
 8004044:	08029eb8 	.word	0x08029eb8
 8004048:	08029ec4 	.word	0x08029ec4

0800404c <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 800404c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004050:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80040f0 <disableNmea+0xa4>
void disableNmea() {
 8004054:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8004056:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004058:	4f24      	ldr	r7, [pc, #144]	; (80040ec <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 800405a:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 800405e:	f10d 0904 	add.w	r9, sp, #4
 8004062:	ad04      	add	r5, sp, #16
 8004064:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004068:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 800406c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004070:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004074:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004078:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800407c:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8004080:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004084:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8004088:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800408c:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8004090:	f829 2b02 	strh.w	r2, [r9], #2
 8004094:	0c12      	lsrs	r2, r2, #16
 8004096:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 800409a:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 800409e:	7829      	ldrb	r1, [r5, #0]
 80040a0:	786a      	ldrb	r2, [r5, #1]
 80040a2:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 80040a6:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 80040a8:	f88d 100a 	strb.w	r1, [sp, #10]
 80040ac:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 80040b0:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 80040b4:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 80040b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040bc:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 80040be:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 80040c0:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 80040c4:	44e6      	add	lr, ip
 80040c6:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 80040ca:	d1f5      	bne.n	80040b8 <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 80040cc:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80040ce:	2364      	movs	r3, #100	; 0x64
 80040d0:	220b      	movs	r2, #11
 80040d2:	a901      	add	r1, sp, #4
 80040d4:	4638      	mov	r0, r7
 80040d6:	f88d c00d 	strb.w	ip, [sp, #13]
 80040da:	f88d e00e 	strb.w	lr, [sp, #14]
 80040de:	f00d fd9d 	bl	8011c1c <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 80040e2:	4545      	cmp	r5, r8
 80040e4:	d1d9      	bne.n	800409a <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 80040e6:	b00f      	add	sp, #60	; 0x3c
 80040e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040ec:	20002a6c 	.word	0x20002a6c
 80040f0:	0802871c 	.word	0x0802871c

080040f4 <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 80040f4:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 80040f6:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 80040f8:	db1c      	blt.n	8004134 <isGoodChecksum+0x40>
 80040fa:	4910      	ldr	r1, [pc, #64]	; (800413c <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 80040fc:	2200      	movs	r2, #0
 80040fe:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 8004102:	4613      	mov	r3, r2
 8004104:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 8004106:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 800410a:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 800410c:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 800410e:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8004110:	441a      	add	r2, r3
 8004112:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8004114:	d1f7      	bne.n	8004106 <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8004116:	490a      	ldr	r1, [pc, #40]	; (8004140 <isGoodChecksum+0x4c>)
 8004118:	4408      	add	r0, r1
 800411a:	7981      	ldrb	r1, [r0, #6]
 800411c:	4299      	cmp	r1, r3
 800411e:	d002      	beq.n	8004126 <isGoodChecksum+0x32>
 8004120:	2000      	movs	r0, #0
}
 8004122:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8004126:	79c0      	ldrb	r0, [r0, #7]
 8004128:	1a80      	subs	r0, r0, r2
 800412a:	fab0 f080 	clz	r0, r0
 800412e:	0940      	lsrs	r0, r0, #5
}
 8004130:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 8004134:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 8004136:	4613      	mov	r3, r2
 8004138:	e7ed      	b.n	8004116 <isGoodChecksum+0x22>
 800413a:	bf00      	nop
 800413c:	2000294d 	.word	0x2000294d
 8004140:	2000294c 	.word	0x2000294c

08004144 <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8004144:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8004146:	4c25      	ldr	r4, [pc, #148]	; (80041dc <IsPacketReady+0x98>)
 8004148:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 800414a:	2b03      	cmp	r3, #3
 800414c:	d814      	bhi.n	8004178 <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 800414e:	4a24      	ldr	r2, [pc, #144]	; (80041e0 <IsPacketReady+0x9c>)
 8004150:	4619      	mov	r1, r3
 8004152:	5cd2      	ldrb	r2, [r2, r3]
 8004154:	4282      	cmp	r2, r0
 8004156:	d00a      	beq.n	800416e <IsPacketReady+0x2a>
 8004158:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <IsPacketReady+0xa0>)
 800415a:	5cd2      	ldrb	r2, [r2, r3]
 800415c:	4282      	cmp	r2, r0
 800415e:	d006      	beq.n	800416e <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8004160:	2200      	movs	r2, #0
 8004162:	4921      	ldr	r1, [pc, #132]	; (80041e8 <IsPacketReady+0xa4>)
			p = 0;
 8004164:	4613      	mov	r3, r2
			len = 0;
 8004166:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 8004168:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 800416a:	70e3      	strb	r3, [r4, #3]
}
 800416c:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 800416e:	3301      	adds	r3, #1
 8004170:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <IsPacketReady+0xa8>)
 8004172:	b2db      	uxtb	r3, r3
 8004174:	5450      	strb	r0, [r2, r1]
 8004176:	e7f7      	b.n	8004168 <IsPacketReady+0x24>
		if (p < 6) {
 8004178:	2b05      	cmp	r3, #5
 800417a:	d917      	bls.n	80041ac <IsPacketReady+0x68>
		if (p == 6) {
 800417c:	2b06      	cmp	r3, #6
 800417e:	d01b      	beq.n	80041b8 <IsPacketReady+0x74>
 8004180:	4d19      	ldr	r5, [pc, #100]	; (80041e8 <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 8004182:	682a      	ldr	r2, [r5, #0]
 8004184:	4619      	mov	r1, r3
 8004186:	3207      	adds	r2, #7
 8004188:	429a      	cmp	r2, r3
 800418a:	dbed      	blt.n	8004168 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 800418c:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 800418e:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 8004190:	4e16      	ldr	r6, [pc, #88]	; (80041ec <IsPacketReady+0xa8>)
 8004192:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 8004194:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 8004196:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 8004198:	4293      	cmp	r3, r2
 800419a:	d1e5      	bne.n	8004168 <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 800419c:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 800419e:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 80041a0:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 80041a2:	f7ff ffa7 	bl	80040f4 <isGoodChecksum>
 80041a6:	b998      	cbnz	r0, 80041d0 <IsPacketReady+0x8c>
				p = 0;
 80041a8:	4603      	mov	r3, r0
 80041aa:	e7dd      	b.n	8004168 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 80041ac:	490f      	ldr	r1, [pc, #60]	; (80041ec <IsPacketReady+0xa8>)
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	54c8      	strb	r0, [r1, r3]
			return (0);
 80041b2:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 80041b4:	70e2      	strb	r2, [r4, #3]
}
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 80041b8:	490c      	ldr	r1, [pc, #48]	; (80041ec <IsPacketReady+0xa8>)
 80041ba:	794d      	ldrb	r5, [r1, #5]
 80041bc:	790a      	ldrb	r2, [r1, #4]
 80041be:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 80041c2:	4d09      	ldr	r5, [pc, #36]	; (80041e8 <IsPacketReady+0xa4>)
 80041c4:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 80041c6:	682a      	ldr	r2, [r5, #0]
 80041c8:	2a7f      	cmp	r2, #127	; 0x7f
 80041ca:	d9da      	bls.n	8004182 <IsPacketReady+0x3e>
				return 0;
 80041cc:	2000      	movs	r0, #0
}
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 80041d0:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <IsPacketReady+0xac>)
 80041d2:	2201      	movs	r2, #1
					return len;
 80041d4:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 80041d6:	601a      	str	r2, [r3, #0]
}
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
 80041da:	bf00      	nop
 80041dc:	2000025c 	.word	0x2000025c
 80041e0:	0802a0b4 	.word	0x0802a0b4
 80041e4:	0802a0b8 	.word	0x0802a0b8
 80041e8:	20002af0 	.word	0x20002af0
 80041ec:	2000294c 	.word	0x2000294c
 80041f0:	200029e4 	.word	0x200029e4

080041f4 <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (pcb == LIGHTNINGBOARD2) {
 80041f4:	4b74      	ldr	r3, [pc, #464]	; (80043c8 <setupneo+0x1d4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 80041fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fc:	b08d      	sub	sp, #52	; 0x34
	if (pcb == LIGHTNINGBOARD2) {
 80041fe:	f000 80ba 	beq.w	8004376 <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 8004202:	2284      	movs	r2, #132	; 0x84
 8004204:	4971      	ldr	r1, [pc, #452]	; (80043cc <setupneo+0x1d8>)
 8004206:	4872      	ldr	r0, [pc, #456]	; (80043d0 <setupneo+0x1dc>)
 8004208:	f01f f994 	bl	8023534 <memcpy>
		gpsuarttx = huart6;
 800420c:	2284      	movs	r2, #132	; 0x84
 800420e:	496f      	ldr	r1, [pc, #444]	; (80043cc <setupneo+0x1d8>)
 8004210:	4870      	ldr	r0, [pc, #448]	; (80043d4 <setupneo+0x1e0>)
 8004212:	f01f f98f 	bl	8023534 <memcpy>
		GPSUARTRX = USART6;
 8004216:	4b70      	ldr	r3, [pc, #448]	; (80043d8 <setupneo+0x1e4>)
 8004218:	4a70      	ldr	r2, [pc, #448]	; (80043dc <setupneo+0x1e8>)
 800421a:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 800421c:	2201      	movs	r2, #1
 800421e:	4970      	ldr	r1, [pc, #448]	; (80043e0 <setupneo+0x1ec>)
 8004220:	486b      	ldr	r0, [pc, #428]	; (80043d0 <setupneo+0x1dc>)
 8004222:	f00d ff93 	bl	801214c <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8004226:	4607      	mov	r7, r0
 8004228:	2800      	cmp	r0, #0
 800422a:	f040 809d 	bne.w	8004368 <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 800422e:	f7ff ff0d 	bl	800404c <disableNmea>
	osDelay(500);
 8004232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004236:	f00f ffe5 	bl	8014204 <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 800423a:	4b6a      	ldr	r3, [pc, #424]	; (80043e4 <setupneo+0x1f0>)
 800423c:	ae01      	add	r6, sp, #4
 800423e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004242:	4d69      	ldr	r5, [pc, #420]	; (80043e8 <setupneo+0x1f4>)
 8004244:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004248:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 800424c:	4867      	ldr	r0, [pc, #412]	; (80043ec <setupneo+0x1f8>)
 800424e:	f020 f9d1 	bl	80245f4 <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004252:	2364      	movs	r3, #100	; 0x64
 8004254:	2208      	movs	r2, #8
 8004256:	4631      	mov	r1, r6
 8004258:	485e      	ldr	r0, [pc, #376]	; (80043d4 <setupneo+0x1e0>)
 800425a:	f00d fcdf 	bl	8011c1c <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 800425e:	e004      	b.n	800426a <setupneo+0x76>
		i++;
		osDelay(1);
 8004260:	f00f ffd0 	bl	8014204 <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004264:	3c01      	subs	r4, #1
 8004266:	f000 80a5 	beq.w	80043b4 <setupneo+0x1c0>
 800426a:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 800426c:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f6      	beq.n	8004260 <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8004272:	4c5f      	ldr	r4, [pc, #380]	; (80043f0 <setupneo+0x1fc>)
 8004274:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 8004276:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8004278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800427a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800427e:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004282:	2364      	movs	r3, #100	; 0x64
 8004284:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8004286:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800428a:	4852      	ldr	r0, [pc, #328]	; (80043d4 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 800428c:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004290:	4631      	mov	r1, r6
 8004292:	f00d fcc3 	bl	8011c1c <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 8004296:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800429a:	f00f ffb3 	bl	8014204 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 800429e:	4855      	ldr	r0, [pc, #340]	; (80043f4 <setupneo+0x200>)
 80042a0:	f020 f90c 	bl	80244bc <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 80042a4:	f104 0360 	add.w	r3, r4, #96	; 0x60
 80042a8:	46b4      	mov	ip, r6
 80042aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042ac:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80042b0:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 80042b2:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80042b6:	220e      	movs	r2, #14
 80042b8:	2364      	movs	r3, #100	; 0x64
 80042ba:	4846      	ldr	r0, [pc, #280]	; (80043d4 <setupneo+0x1e0>)
 80042bc:	f00d fcae 	bl	8011c1c <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 80042c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042c4:	f00f ff9e 	bl	8014204 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 80042c8:	484b      	ldr	r0, [pc, #300]	; (80043f8 <setupneo+0x204>)
 80042ca:	f020 f993 	bl	80245f4 <puts>
	byte packet[] = { 0xB5, // sync char 1
 80042ce:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 80042d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80042d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80042dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042de:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80042e2:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 80042e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80042e8:	4631      	mov	r1, r6
 80042ea:	222c      	movs	r2, #44	; 0x2c
 80042ec:	4839      	ldr	r0, [pc, #228]	; (80043d4 <setupneo+0x1e0>)
 80042ee:	f00d fc95 	bl	8011c1c <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 80042f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042f6:	f00f ff85 	bl	8014204 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 80042fa:	4840      	ldr	r0, [pc, #256]	; (80043fc <setupneo+0x208>)
 80042fc:	f020 f8de 	bl	80244bc <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8004300:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 8004304:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004306:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004308:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 800430a:	ca07      	ldmia	r2, {r0, r1, r2}
 800430c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004310:	f82c 2b02 	strh.w	r2, [ip], #2
 8004314:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004316:	4631      	mov	r1, r6
 8004318:	482e      	ldr	r0, [pc, #184]	; (80043d4 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 800431a:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800431e:	220b      	movs	r2, #11
 8004320:	f00d fc7c 	bl	8011c1c <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 8004324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004328:	f00f ff6c 	bl	8014204 <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 800432c:	46b4      	mov	ip, r6
 800432e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004330:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004336:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800433a:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800433e:	2364      	movs	r3, #100	; 0x64
 8004340:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004342:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004346:	4631      	mov	r1, r6
 8004348:	4822      	ldr	r0, [pc, #136]	; (80043d4 <setupneo+0x1e0>)
 800434a:	f00d fc67 	bl	8011c1c <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 800434e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004352:	f00f ff57 	bl	8014204 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8004356:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <setupneo+0x20c>)
 8004358:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 800435a:	482a      	ldr	r0, [pc, #168]	; (8004404 <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 800435c:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 800435e:	f020 f8ad 	bl	80244bc <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8004362:	4638      	mov	r0, r7
 8004364:	b00d      	add	sp, #52	; 0x34
 8004366:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 8004368:	4601      	mov	r1, r0
 800436a:	4827      	ldr	r0, [pc, #156]	; (8004408 <setupneo+0x214>)
 800436c:	f020 f8a6 	bl	80244bc <iprintf>
}
 8004370:	4638      	mov	r0, r7
 8004372:	b00d      	add	sp, #52	; 0x34
 8004374:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 8004376:	4c25      	ldr	r4, [pc, #148]	; (800440c <setupneo+0x218>)
 8004378:	4620      	mov	r0, r4
 800437a:	f00c fde3 	bl	8010f44 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 800437e:	4620      	mov	r0, r4
 8004380:	f00c fc48 	bl	8010c14 <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 8004384:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8004388:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 800438a:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 800438c:	f00d fcee 	bl	8011d6c <HAL_UART_Init>
 8004390:	b968      	cbnz	r0, 80043ae <setupneo+0x1ba>
		gpsuartrx = huart8;
 8004392:	2284      	movs	r2, #132	; 0x84
 8004394:	491e      	ldr	r1, [pc, #120]	; (8004410 <setupneo+0x21c>)
 8004396:	480e      	ldr	r0, [pc, #56]	; (80043d0 <setupneo+0x1dc>)
 8004398:	f01f f8cc 	bl	8023534 <memcpy>
		gpsuarttx = huart7;
 800439c:	2284      	movs	r2, #132	; 0x84
 800439e:	491b      	ldr	r1, [pc, #108]	; (800440c <setupneo+0x218>)
 80043a0:	480c      	ldr	r0, [pc, #48]	; (80043d4 <setupneo+0x1e0>)
 80043a2:	f01f f8c7 	bl	8023534 <memcpy>
		GPSUARTRX = UART8;
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <setupneo+0x1e4>)
 80043a8:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <setupneo+0x220>)
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e736      	b.n	800421c <setupneo+0x28>
			Error_Handler();
 80043ae:	f7fe fda5 	bl	8002efc <Error_Handler>
 80043b2:	e7ee      	b.n	8004392 <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 80043b4:	4818      	ldr	r0, [pc, #96]	; (8004418 <setupneo+0x224>)
 80043b6:	f020 f91d 	bl	80245f4 <puts>
		osDelay(200);
 80043ba:	20c8      	movs	r0, #200	; 0xc8
 80043bc:	f00f ff22 	bl	8014204 <osDelay>
		rebootme(2);
 80043c0:	2002      	movs	r0, #2
 80043c2:	f7fd ffd1 	bl	8002368 <rebootme>
 80043c6:	e754      	b.n	8004272 <setupneo+0x7e>
 80043c8:	20002928 	.word	0x20002928
 80043cc:	20002774 	.word	0x20002774
 80043d0:	200029e8 	.word	0x200029e8
 80043d4:	20002a6c 	.word	0x20002a6c
 80043d8:	20002948 	.word	0x20002948
 80043dc:	40011400 	.word	0x40011400
 80043e0:	20002b1c 	.word	0x20002b1c
 80043e4:	08028714 	.word	0x08028714
 80043e8:	20002af4 	.word	0x20002af4
 80043ec:	08029ecc 	.word	0x08029ecc
 80043f0:	080286fc 	.word	0x080286fc
 80043f4:	08029f0c 	.word	0x08029f0c
 80043f8:	08029f3c 	.word	0x08029f3c
 80043fc:	08029f64 	.word	0x08029f64
 8004400:	20002b24 	.word	0x20002b24
 8004404:	08029f88 	.word	0x08029f88
 8004408:	08029ee4 	.word	0x08029ee4
 800440c:	200027f8 	.word	0x200027f8
 8004410:	2000287c 	.word	0x2000287c
 8004414:	40007c00 	.word	0x40007c00
 8004418:	08029fb0 	.word	0x08029fb0

0800441c <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 800441c:	4a2a      	ldr	r2, [pc, #168]	; (80044c8 <HAL_UART_RxCpltCallback+0xac>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800441e:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == GPSUARTRX) { //our UART
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	6803      	ldr	r3, [r0, #0]
 8004424:	4293      	cmp	r3, r2
 8004426:	d011      	beq.n	800444c <HAL_UART_RxCpltCallback+0x30>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8004428:	4a28      	ldr	r2, [pc, #160]	; (80044cc <HAL_UART_RxCpltCallback+0xb0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d024      	beq.n	8004478 <HAL_UART_RxCpltCallback+0x5c>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 800442e:	4a28      	ldr	r2, [pc, #160]	; (80044d0 <HAL_UART_RxCpltCallback+0xb4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d025      	beq.n	8004480 <HAL_UART_RxCpltCallback+0x64>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 8004434:	4a27      	ldr	r2, [pc, #156]	; (80044d4 <HAL_UART_RxCpltCallback+0xb8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_UART_RxCpltCallback+0x28>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 800443a:	4827      	ldr	r0, [pc, #156]	; (80044d8 <HAL_UART_RxCpltCallback+0xbc>)
}
 800443c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("USART unknown uart int\n");
 8004440:	f020 b8d8 	b.w	80245f4 <puts>
}
 8004444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart2_rxdone();
 8004448:	f7fe bcd8 	b.w	8002dfc <uart2_rxdone>
		data = rxdatabuf[0];
 800444c:	4923      	ldr	r1, [pc, #140]	; (80044dc <HAL_UART_RxCpltCallback+0xc0>)
		flag = 1;
 800444e:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 8004450:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <HAL_UART_RxCpltCallback+0xc4>)
		flag = 1;
 8004452:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <HAL_UART_RxCpltCallback+0xc8>)
		data = rxdatabuf[0];
 8004454:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 8004456:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 8004458:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 800445a:	f7ff fe73 	bl	8004144 <IsPacketReady>
 800445e:	2800      	cmp	r0, #0
 8004460:	dd1c      	ble.n	800449c <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 8004462:	2854      	cmp	r0, #84	; 0x54
 8004464:	d01b      	beq.n	800449e <HAL_UART_RxCpltCallback+0x82>
 8004466:	2864      	cmp	r0, #100	; 0x64
 8004468:	d00e      	beq.n	8004488 <HAL_UART_RxCpltCallback+0x6c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 800446a:	b2c2      	uxtb	r2, r0
 800446c:	491e      	ldr	r1, [pc, #120]	; (80044e8 <HAL_UART_RxCpltCallback+0xcc>)
 800446e:	481f      	ldr	r0, [pc, #124]	; (80044ec <HAL_UART_RxCpltCallback+0xd0>)
}
 8004470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8004474:	f7ff bdb0 	b.w	8003fd8 <printPacket>
}
 8004478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart5_rxdone();
 800447c:	f7fc bdee 	b.w	800105c <uart5_rxdone>
}
 8004480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart6_rxdone();
 8004484:	f000 bd0e 	b.w	8004ea4 <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <HAL_UART_RxCpltCallback+0xd4>)
 800448a:	481a      	ldr	r0, [pc, #104]	; (80044f4 <HAL_UART_RxCpltCallback+0xd8>)
 800448c:	f1a3 020a 	sub.w	r2, r3, #10
 8004490:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8004494:	f020 f812 	bl	80244bc <iprintf>
				neoispresent = 1;
 8004498:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <HAL_UART_RxCpltCallback+0xdc>)
 800449a:	601c      	str	r4, [r3, #0]
}
 800449c:	bd38      	pop	{r3, r4, r5, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 800449e:	4d17      	ldr	r5, [pc, #92]	; (80044fc <HAL_UART_RxCpltCallback+0xe0>)
 80044a0:	224e      	movs	r2, #78	; 0x4e
 80044a2:	4917      	ldr	r1, [pc, #92]	; (8004500 <HAL_UART_RxCpltCallback+0xe4>)
 80044a4:	1d28      	adds	r0, r5, #4
 80044a6:	f01f f845 	bl	8023534 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 80044aa:	f7ff fd6f 	bl	8003f8c <calcepoch32>
 80044ae:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 80044b2:	7e6b      	ldrb	r3, [r5, #25]
 80044b4:	f013 0301 	ands.w	r3, r3, #1
 80044b8:	d002      	beq.n	80044c0 <HAL_UART_RxCpltCallback+0xa4>
					gpslocked = 1;
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_UART_RxCpltCallback+0xe8>)
 80044bc:	701c      	strb	r4, [r3, #0]
}
 80044be:	bd38      	pop	{r3, r4, r5, pc}
					gpslocked = 0;
 80044c0:	4a10      	ldr	r2, [pc, #64]	; (8004504 <HAL_UART_RxCpltCallback+0xe8>)
 80044c2:	7013      	strb	r3, [r2, #0]
}
 80044c4:	bd38      	pop	{r3, r4, r5, pc}
 80044c6:	bf00      	nop
 80044c8:	20002948 	.word	0x20002948
 80044cc:	40005000 	.word	0x40005000
 80044d0:	40011400 	.word	0x40011400
 80044d4:	40004400 	.word	0x40004400
 80044d8:	0802a024 	.word	0x0802a024
 80044dc:	20002b1c 	.word	0x20002b1c
 80044e0:	200029d0 	.word	0x200029d0
 80044e4:	200029e0 	.word	0x200029e0
 80044e8:	2000294c 	.word	0x2000294c
 80044ec:	0802a008 	.word	0x0802a008
 80044f0:	2000297a 	.word	0x2000297a
 80044f4:	08029fdc 	.word	0x08029fdc
 80044f8:	20002af4 	.word	0x20002af4
 80044fc:	20002b24 	.word	0x20002b24
 8004500:	20002952 	.word	0x20002952
 8004504:	20002cd0 	.word	0x20002cd0

08004508 <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004508:	4926      	ldr	r1, [pc, #152]	; (80045a4 <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 800450a:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 800450e:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8004510:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004512:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8004514:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 8004516:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004518:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 800451a:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 800451c:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 800451e:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8004520:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8004522:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004524:	d02b      	beq.n	800457e <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 8004526:	4920      	ldr	r1, [pc, #128]	; (80045a8 <HAL_UART_ErrorCallback+0xa0>)
 8004528:	428b      	cmp	r3, r1
 800452a:	d00f      	beq.n	800454c <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 800452c:	491f      	ldr	r1, [pc, #124]	; (80045ac <HAL_UART_ErrorCallback+0xa4>)
 800452e:	428b      	cmp	r3, r1
 8004530:	d000      	beq.n	8004534 <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8004532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 8004534:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 8004538:	481d      	ldr	r0, [pc, #116]	; (80045b0 <HAL_UART_ErrorCallback+0xa8>)
 800453a:	f01f ffbf 	bl	80244bc <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	2202      	movs	r2, #2
 8004542:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 8004544:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 8004546:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 8004548:	621d      	str	r5, [r3, #32]
}
 800454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 800454c:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <HAL_UART_ErrorCallback+0xac>)
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	2a00      	cmp	r2, #0
 8004552:	d1ee      	bne.n	8004532 <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 8004554:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8004558:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <HAL_UART_ErrorCallback+0xb0>)
 800455a:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	0710      	lsls	r0, r2, #28
 8004560:	d500      	bpl.n	8004564 <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 8004562:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 8004564:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <HAL_UART_ErrorCallback+0xa0>)
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	0751      	lsls	r1, r2, #29
 800456a:	d501      	bpl.n	8004570 <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 800456c:	2204      	movs	r2, #4
 800456e:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <HAL_UART_ErrorCallback+0xa0>)
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	0792      	lsls	r2, r2, #30
 8004576:	d5dc      	bpl.n	8004532 <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 8004578:	2202      	movs	r2, #2
 800457a:	621a      	str	r2, [r3, #32]
}
 800457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 800457e:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8004582:	480e      	ldr	r0, [pc, #56]	; (80045bc <HAL_UART_ErrorCallback+0xb4>)
 8004584:	f01f ff9a 	bl	80244bc <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8004588:	462a      	mov	r2, r5
 800458a:	490d      	ldr	r1, [pc, #52]	; (80045c0 <HAL_UART_ErrorCallback+0xb8>)
 800458c:	480d      	ldr	r0, [pc, #52]	; (80045c4 <HAL_UART_ErrorCallback+0xbc>)
 800458e:	f00d fddd 	bl	801214c <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 8004592:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8004596:	d0cc      	beq.n	8004532 <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8004598:	4601      	mov	r1, r0
 800459a:	480b      	ldr	r0, [pc, #44]	; (80045c8 <HAL_UART_ErrorCallback+0xc0>)
}
 800459c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 80045a0:	f01f bf8c 	b.w	80244bc <iprintf>
 80045a4:	20002948 	.word	0x20002948
 80045a8:	40005000 	.word	0x40005000
 80045ac:	40011400 	.word	0x40011400
 80045b0:	0802a088 	.word	0x0802a088
 80045b4:	200015ec 	.word	0x200015ec
 80045b8:	2000167c 	.word	0x2000167c
 80045bc:	0802a03c 	.word	0x0802a03c
 80045c0:	20002b1c 	.word	0x20002b1c
 80045c4:	200029e8 	.word	0x200029e8
 80045c8:	0802a05c 	.word	0x0802a05c
 80045cc:	00000000 	.word	0x00000000

080045d0 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 80045d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045d4:	ed2d 8b02 	vpush	{d8}
 80045d8:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 80045da:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 80045dc:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80045de:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80045e2:	ae0c      	add	r6, sp, #48	; 0x30
 80045e4:	4f6e      	ldr	r7, [pc, #440]	; (80047a0 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80045e6:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 80047c8 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 80045ea:	f00f fe0b 	bl	8014204 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80045ee:	2301      	movs	r3, #1
 80045f0:	9600      	str	r6, [sp, #0]
 80045f2:	b2aa      	uxth	r2, r5
 80045f4:	21c1      	movs	r1, #193	; 0xc1
 80045f6:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 80045f8:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80045fa:	e9cd 3801 	strd	r3, r8, [sp, #4]
 80045fe:	f006 feb5 	bl	800b36c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004602:	4604      	mov	r4, r0
 8004604:	2800      	cmp	r0, #0
 8004606:	f040 80a6 	bne.w	8004756 <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 800460a:	3501      	adds	r5, #1
 800460c:	2d04      	cmp	r5, #4
 800460e:	d1ee      	bne.n	80045ee <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 8004610:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 8004614:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 8004618:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 800461c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 8004620:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004624:	485f      	ldr	r0, [pc, #380]	; (80047a4 <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 8004626:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800462a:	495f      	ldr	r1, [pc, #380]	; (80047a8 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 800462c:	0992      	lsrs	r2, r2, #6
	t = tr;
 800462e:	099c      	lsrs	r4, r3, #6
	p = pr;
 8004630:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004634:	4a5d      	ldr	r2, [pc, #372]	; (80047ac <getpressure115.part.0+0x1dc>)
	t = tr;
 8004636:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 800463a:	119d      	asrs	r5, r3, #6
	p = pr;
 800463c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 8004640:	2400      	movs	r4, #0
	t = tr;
 8004642:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004646:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 800464a:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 800464e:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004652:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004656:	ed91 4b00 	vldr	d4, [r1]
 800465a:	4955      	ldr	r1, [pc, #340]	; (80047b0 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 800465c:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800465e:	eea1 4b07 	vfma.f64	d4, d1, d7
 8004662:	ed91 6b00 	vldr	d6, [r1]
 8004666:	ed9d 8b06 	vldr	d8, [sp, #24]
 800466a:	ed92 0b00 	vldr	d0, [r2]
 800466e:	eeb0 7b46 	vmov.f64	d7, d6
 8004672:	ed9d 2b08 	vldr	d2, [sp, #32]
 8004676:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 800467a:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 8004770 <getpressure115.part.0+0x1a0>
 800467e:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8004778 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004682:	eea0 7b02 	vfma.f64	d7, d0, d2
 8004686:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 800468a:	ed9d 6b06 	vldr	d6, [sp, #24]
 800468e:	eea6 5b03 	vfma.f64	d5, d6, d3
 8004692:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 8004696:	ed9d 0b06 	vldr	d0, [sp, #24]
 800469a:	f01f fff9 	bl	8024690 <modf>
	t = tr * -0.1706 + 112.27; //C
 800469e:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80046a2:	4944      	ldr	r1, [pc, #272]	; (80047b4 <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80046a4:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 80046a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 80046ac:	4b42      	ldr	r3, [pc, #264]	; (80047b8 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 80046ae:	2264      	movs	r2, #100	; 0x64
 80046b0:	4842      	ldr	r0, [pc, #264]	; (80047bc <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 80046b2:	ed9f 2b33 	vldr	d2, [pc, #204]	; 8004780 <getpressure115.part.0+0x1b0>
 80046b6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8004788 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 80046ba:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 80046be:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80046c2:	ed9f 3b33 	vldr	d3, [pc, #204]	; 8004790 <getpressure115.part.0+0x1c0>
 80046c6:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 80046ca:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80046ce:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 80046d2:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80046d6:	ed9f 2b30 	vldr	d2, [pc, #192]	; 8004798 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80046da:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 80046de:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 80046e4:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80046e8:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80046ec:	4935      	ldr	r1, [pc, #212]	; (80047c4 <getpressure115.part.0+0x1f4>)
	temperature = t;
 80046ee:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 80046f2:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80046f6:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 80046fa:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80046fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004702:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 8004706:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800470a:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 800470e:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004712:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 8004716:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800471a:	feb8 7b47 	vrinta.f64	d7, d7
 800471e:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 8004722:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004726:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800472a:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 800472e:	ee16 3a10 	vmov	r3, s12
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004738:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 800473c:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800473e:	ee17 2a10 	vmov	r2, s14
}
 8004742:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004744:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800474c:	b00f      	add	sp, #60	; 0x3c
 800474e:	ecbd 8b02 	vpop	{d8}
 8004752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8004756:	4648      	mov	r0, r9
 8004758:	4621      	mov	r1, r4
 800475a:	f01f feaf 	bl	80244bc <iprintf>
			if (i == 3)
 800475e:	2d03      	cmp	r5, #3
 8004760:	f47f af53 	bne.w	800460a <getpressure115.part.0+0x3a>
}
 8004764:	4620      	mov	r0, r4
 8004766:	b00f      	add	sp, #60	; 0x3c
 8004768:	ecbd 8b02 	vpop	{d8}
 800476c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004770:	04411044 	.word	0x04411044
 8004774:	3fb04411 	.word	0x3fb04411
 8004778:	00000000 	.word	0x00000000
 800477c:	40490000 	.word	0x40490000
 8004780:	86594af5 	.word	0x86594af5
 8004784:	bfc5d638 	.word	0xbfc5d638
 8004788:	ae147ae1 	.word	0xae147ae1
 800478c:	405c1147 	.word	0x405c1147
 8004790:	00000000 	.word	0x00000000
 8004794:	40590000 	.word	0x40590000
 8004798:	00000000 	.word	0x00000000
 800479c:	40af4000 	.word	0x40af4000
 80047a0:	200020d4 	.word	0x200020d4
 80047a4:	20002be0 	.word	0x20002be0
 80047a8:	20002bc8 	.word	0x20002bc8
 80047ac:	20002bd0 	.word	0x20002bd0
 80047b0:	20002bc0 	.word	0x20002bc0
 80047b4:	20002c5c 	.word	0x20002c5c
 80047b8:	20002c60 	.word	0x20002c60
 80047bc:	20002c6c 	.word	0x20002c6c
 80047c0:	20002c68 	.word	0x20002c68
 80047c4:	20002b24 	.word	0x20002b24
 80047c8:	0802a0bc 	.word	0x0802a0bc

080047cc <cycleleds>:
void cycleleds(void) {
 80047cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ce:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 80047d0:	4a1b      	ldr	r2, [pc, #108]	; (8004840 <cycleleds+0x74>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80047d2:	4f1c      	ldr	r7, [pc, #112]	; (8004844 <cycleleds+0x78>)
 80047d4:	ac01      	add	r4, sp, #4
 80047d6:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 80047da:	ca07      	ldmia	r2, {r0, r1, r2}
 80047dc:	4623      	mov	r3, r4
 80047de:	4626      	mov	r6, r4
 80047e0:	c303      	stmia	r3!, {r0, r1}
 80047e2:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80047e4:	f836 1b02 	ldrh.w	r1, [r6], #2
 80047e8:	4638      	mov	r0, r7
 80047ea:	2200      	movs	r2, #0
 80047ec:	f006 f924 	bl	800aa38 <HAL_GPIO_WritePin>
		osDelay(140);
 80047f0:	208c      	movs	r0, #140	; 0x8c
 80047f2:	f00f fd07 	bl	8014204 <osDelay>
	for (i = 0; i < 5; i++) {
 80047f6:	42ae      	cmp	r6, r5
 80047f8:	d1f4      	bne.n	80047e4 <cycleleds+0x18>
	osDelay(600);
 80047fa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80047fe:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8004800:	4f10      	ldr	r7, [pc, #64]	; (8004844 <cycleleds+0x78>)
	osDelay(600);
 8004802:	f00f fcff 	bl	8014204 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8004806:	f836 1b02 	ldrh.w	r1, [r6], #2
 800480a:	4638      	mov	r0, r7
 800480c:	2201      	movs	r2, #1
 800480e:	f006 f913 	bl	800aa38 <HAL_GPIO_WritePin>
		osDelay(140);
 8004812:	208c      	movs	r0, #140	; 0x8c
 8004814:	f00f fcf6 	bl	8014204 <osDelay>
	for (i = 0; i < 5; i++) {
 8004818:	42ae      	cmp	r6, r5
 800481a:	d1f4      	bne.n	8004806 <cycleleds+0x3a>
	osDelay(500);
 800481c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004820:	4e08      	ldr	r6, [pc, #32]	; (8004844 <cycleleds+0x78>)
	osDelay(500);
 8004822:	f00f fcef 	bl	8014204 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004826:	f834 1b02 	ldrh.w	r1, [r4], #2
 800482a:	4630      	mov	r0, r6
 800482c:	2200      	movs	r2, #0
 800482e:	f006 f903 	bl	800aa38 <HAL_GPIO_WritePin>
		osDelay(140);
 8004832:	208c      	movs	r0, #140	; 0x8c
 8004834:	f00f fce6 	bl	8014204 <osDelay>
	for (i = 0; i < 5; i++) {
 8004838:	42ac      	cmp	r4, r5
 800483a:	d1f4      	bne.n	8004826 <cycleleds+0x5a>
}
 800483c:	b005      	add	sp, #20
 800483e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004840:	080287dc 	.word	0x080287dc
 8004844:	40020c00 	.word	0x40020c00

08004848 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 8004848:	b510      	push	{r4, lr}
 800484a:	4604      	mov	r4, r0
 800484c:	b082      	sub	sp, #8
	osDelay(5);
 800484e:	2005      	movs	r0, #5
 8004850:	f00f fcd8 	bl	8014204 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004854:	2201      	movs	r2, #1
 8004856:	2104      	movs	r1, #4
 8004858:	482b      	ldr	r0, [pc, #172]	; (8004908 <setpgagain+0xc0>)
 800485a:	f006 f8ed 	bl	800aa38 <HAL_GPIO_WritePin>
	osDelay(5);
 800485e:	2005      	movs	r0, #5
 8004860:	f00f fcd0 	bl	8014204 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004864:	2200      	movs	r2, #0
 8004866:	2104      	movs	r1, #4
 8004868:	4827      	ldr	r0, [pc, #156]	; (8004908 <setpgagain+0xc0>)
 800486a:	f006 f8e5 	bl	800aa38 <HAL_GPIO_WritePin>
	osDelay(5);
 800486e:	2005      	movs	r0, #5
 8004870:	f00f fcc8 	bl	8014204 <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004874:	4925      	ldr	r1, [pc, #148]	; (800490c <setpgagain+0xc4>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800487a:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 800487c:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 800487e:	4824      	ldr	r0, [pc, #144]	; (8004910 <setpgagain+0xc8>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004880:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004884:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004888:	a901      	add	r1, sp, #4
 800488a:	f009 f8db 	bl	800da44 <HAL_SPI_Transmit>
 800488e:	bb70      	cbnz	r0, 80048ee <setpgagain+0xa6>
	osDelay(5);
 8004890:	2005      	movs	r0, #5
 8004892:	f00f fcb7 	bl	8014204 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004896:	2201      	movs	r2, #1
 8004898:	2104      	movs	r1, #4
 800489a:	481b      	ldr	r0, [pc, #108]	; (8004908 <setpgagain+0xc0>)
 800489c:	f006 f8cc 	bl	800aa38 <HAL_GPIO_WritePin>
	osDelay(5);
 80048a0:	2005      	movs	r0, #5
 80048a2:	f00f fcaf 	bl	8014204 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80048a6:	2200      	movs	r2, #0
 80048a8:	2104      	movs	r1, #4
 80048aa:	4817      	ldr	r0, [pc, #92]	; (8004908 <setpgagain+0xc0>)
 80048ac:	f006 f8c4 	bl	800aa38 <HAL_GPIO_WritePin>
	osDelay(5);
 80048b0:	2005      	movs	r0, #5
 80048b2:	f00f fca7 	bl	8014204 <osDelay>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 80048b6:	2c08      	cmp	r4, #8
 80048b8:	f244 1001 	movw	r0, #16641	; 0x4101
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 80048bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 80048c0:	bfb8      	it	lt
 80048c2:	f44f 4082 	movlt.w	r0, #16640	; 0x4100
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 80048c6:	2201      	movs	r2, #1
 80048c8:	a901      	add	r1, sp, #4
 80048ca:	f8ad 0004 	strh.w	r0, [sp, #4]
 80048ce:	4810      	ldr	r0, [pc, #64]	; (8004910 <setpgagain+0xc8>)
 80048d0:	f009 f8b8 	bl	800da44 <HAL_SPI_Transmit>
 80048d4:	b990      	cbnz	r0, 80048fc <setpgagain+0xb4>
	osDelay(5);
 80048d6:	2005      	movs	r0, #5
 80048d8:	f00f fc94 	bl	8014204 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 80048dc:	2201      	movs	r2, #1
 80048de:	2104      	movs	r1, #4
 80048e0:	4809      	ldr	r0, [pc, #36]	; (8004908 <setpgagain+0xc0>)
 80048e2:	f006 f8a9 	bl	800aa38 <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <setpgagain+0xcc>)
 80048e8:	801c      	strh	r4, [r3, #0]
}
 80048ea:	b002      	add	sp, #8
 80048ec:	bd10      	pop	{r4, pc}
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 80048ee:	4601      	mov	r1, r0
 80048f0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80048f4:	4808      	ldr	r0, [pc, #32]	; (8004918 <setpgagain+0xd0>)
 80048f6:	f01f fde1 	bl	80244bc <iprintf>
 80048fa:	e7c9      	b.n	8004890 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 80048fc:	4601      	mov	r1, r0
 80048fe:	4807      	ldr	r0, [pc, #28]	; (800491c <setpgagain+0xd4>)
 8004900:	f01f fddc 	bl	80244bc <iprintf>
 8004904:	e7e7      	b.n	80048d6 <setpgagain+0x8e>
 8004906:	bf00      	nop
 8004908:	40021800 	.word	0x40021800
 800490c:	0802a518 	.word	0x0802a518
 8004910:	200021d8 	.word	0x200021d8
 8004914:	20002c58 	.word	0x20002c58
 8004918:	0802a0e0 	.word	0x0802a0e0
 800491c:	0802a10c 	.word	0x0802a10c

08004920 <initpga>:
int initpga() {
 8004920:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004922:	2201      	movs	r2, #1
int initpga() {
 8004924:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004926:	2104      	movs	r1, #4
 8004928:	4826      	ldr	r0, [pc, #152]	; (80049c4 <initpga+0xa4>)
 800492a:	f006 f885 	bl	800aa38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 800492e:	2200      	movs	r2, #0
 8004930:	2104      	movs	r1, #4
 8004932:	4824      	ldr	r0, [pc, #144]	; (80049c4 <initpga+0xa4>)
 8004934:	f006 f880 	bl	800aa38 <HAL_GPIO_WritePin>
	osDelay(50);
 8004938:	2032      	movs	r0, #50	; 0x32
 800493a:	f00f fc63 	bl	8014204 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800493e:	2201      	movs	r2, #1
 8004940:	2104      	movs	r1, #4
 8004942:	4820      	ldr	r0, [pc, #128]	; (80049c4 <initpga+0xa4>)
 8004944:	f006 f878 	bl	800aa38 <HAL_GPIO_WritePin>
	osDelay(5);
 8004948:	2005      	movs	r0, #5
 800494a:	f00f fc5b 	bl	8014204 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800494e:	2200      	movs	r2, #0
 8004950:	2104      	movs	r1, #4
 8004952:	481c      	ldr	r0, [pc, #112]	; (80049c4 <initpga+0xa4>)
 8004954:	f006 f870 	bl	800aa38 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 8004958:	2000      	movs	r0, #0
 800495a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800495e:	2201      	movs	r2, #1
 8004960:	f8ad 0004 	strh.w	r0, [sp, #4]
 8004964:	a901      	add	r1, sp, #4
 8004966:	4818      	ldr	r0, [pc, #96]	; (80049c8 <initpga+0xa8>)
 8004968:	f009 f86c 	bl	800da44 <HAL_SPI_Transmit>
 800496c:	4604      	mov	r4, r0
 800496e:	bb08      	cbnz	r0, 80049b4 <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8004970:	2104      	movs	r1, #4
 8004972:	2201      	movs	r2, #1
 8004974:	4813      	ldr	r0, [pc, #76]	; (80049c4 <initpga+0xa4>)
 8004976:	f006 f85f 	bl	800aa38 <HAL_GPIO_WritePin>
	osDelay(5);
 800497a:	2005      	movs	r0, #5
 800497c:	f00f fc42 	bl	8014204 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004980:	4622      	mov	r2, r4
 8004982:	2104      	movs	r1, #4
 8004984:	480f      	ldr	r0, [pc, #60]	; (80049c4 <initpga+0xa4>)
 8004986:	f006 f857 	bl	800aa38 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 800498a:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 800498e:	2005      	movs	r0, #5
 8004990:	f00f fc38 	bl	8014204 <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8004994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004998:	2201      	movs	r2, #1
 800499a:	a901      	add	r1, sp, #4
 800499c:	480a      	ldr	r0, [pc, #40]	; (80049c8 <initpga+0xa8>)
 800499e:	f8ad 4004 	strh.w	r4, [sp, #4]
 80049a2:	f009 f84f 	bl	800da44 <HAL_SPI_Transmit>
 80049a6:	4604      	mov	r4, r0
 80049a8:	b920      	cbnz	r0, 80049b4 <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 80049aa:	f7ff ff4d 	bl	8004848 <setpgagain>
	return (0);
 80049ae:	4620      	mov	r0, r4
}
 80049b0:	b002      	add	sp, #8
 80049b2:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 80049b4:	4621      	mov	r1, r4
 80049b6:	4805      	ldr	r0, [pc, #20]	; (80049cc <initpga+0xac>)
 80049b8:	f01f fd80 	bl	80244bc <iprintf>
		return (1);
 80049bc:	2001      	movs	r0, #1
}
 80049be:	b002      	add	sp, #8
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	bf00      	nop
 80049c4:	40021800 	.word	0x40021800
 80049c8:	200021d8 	.word	0x200021d8
 80049cc:	0802a128 	.word	0x0802a128

080049d0 <bumppga>:
int bumppga(int i) {
 80049d0:	b530      	push	{r4, r5, lr}
	gain = pgagain;
 80049d2:	4d1f      	ldr	r5, [pc, #124]	; (8004a50 <bumppga+0x80>)
int bumppga(int i) {
 80049d4:	b083      	sub	sp, #12
 80049d6:	4604      	mov	r4, r0
	gain = pgagain;
 80049d8:	f9b5 1000 	ldrsh.w	r1, [r5]
	if ((pgagain > 9) || (pgagain < 0)) {
 80049dc:	b28b      	uxth	r3, r1
	gain = pgagain;
 80049de:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d827      	bhi.n	8004a34 <bumppga+0x64>
	if (pcb == SPLATBOARD1) {		/// this doesn't have the boost function
 80049e4:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <bumppga+0x84>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b0b      	cmp	r3, #11
 80049ea:	d00c      	beq.n	8004a06 <bumppga+0x36>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 80049ec:	2c00      	cmp	r4, #0
 80049ee:	9b01      	ldr	r3, [sp, #4]
 80049f0:	da01      	bge.n	80049f6 <bumppga+0x26>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	dd04      	ble.n	8004a00 <bumppga+0x30>
 80049f6:	2c00      	cmp	r4, #0
 80049f8:	9b01      	ldr	r3, [sp, #4]
 80049fa:	dd12      	ble.n	8004a22 <bumppga+0x52>
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	dd10      	ble.n	8004a22 <bumppga+0x52>
	return (0);
 8004a00:	2000      	movs	r0, #0
}
 8004a02:	b003      	add	sp, #12
 8004a04:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 8004a06:	2907      	cmp	r1, #7
 8004a08:	dd01      	ble.n	8004a0e <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 8004a0a:	2307      	movs	r3, #7
 8004a0c:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8004a0e:	2c00      	cmp	r4, #0
 8004a10:	9b01      	ldr	r3, [sp, #4]
 8004a12:	da01      	bge.n	8004a18 <bumppga+0x48>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	ddf3      	ble.n	8004a00 <bumppga+0x30>
 8004a18:	9b01      	ldr	r3, [sp, #4]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	dd01      	ble.n	8004a22 <bumppga+0x52>
 8004a1e:	2c00      	cmp	r4, #0
 8004a20:	dcee      	bgt.n	8004a00 <bumppga+0x30>
			gain = gain + i;
 8004a22:	9b01      	ldr	r3, [sp, #4]
 8004a24:	4423      	add	r3, r4
 8004a26:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 8004a28:	9801      	ldr	r0, [sp, #4]
 8004a2a:	f7ff ff0d 	bl	8004848 <setpgagain>
			return (i);
 8004a2e:	4620      	mov	r0, r4
}
 8004a30:	b003      	add	sp, #12
 8004a32:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 8004a34:	4808      	ldr	r0, [pc, #32]	; (8004a58 <bumppga+0x88>)
 8004a36:	f01f fd41 	bl	80244bc <iprintf>
	if (pcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <bumppga+0x84>)
		pgagain = 0;
 8004a3c:	2200      	movs	r2, #0
	if (pcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004a3e:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 8004a40:	802a      	strh	r2, [r5, #0]
	if (pcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004a42:	2b0b      	cmp	r3, #11
 8004a44:	d0e3      	beq.n	8004a0e <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8004a46:	2c00      	cmp	r4, #0
 8004a48:	9b01      	ldr	r3, [sp, #4]
 8004a4a:	dbd2      	blt.n	80049f2 <bumppga+0x22>
 8004a4c:	e7d3      	b.n	80049f6 <bumppga+0x26>
 8004a4e:	bf00      	nop
 8004a50:	20002c58 	.word	0x20002c58
 8004a54:	20002928 	.word	0x20002928
 8004a58:	0802a144 	.word	0x0802a144

08004a5c <getpressure115>:
HAL_StatusTypeDef getpressure115(void) {
 8004a5c:	b510      	push	{r4, lr}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004a5e:	2012      	movs	r0, #18
HAL_StatusTypeDef getpressure115(void) {
 8004a60:	b084      	sub	sp, #16
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004a62:	2100      	movs	r1, #0
 8004a64:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004a68:	f88d 000c 	strb.w	r0, [sp, #12]
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f88d 100d 	strb.w	r1, [sp, #13]
 8004a72:	aa03      	add	r2, sp, #12
 8004a74:	21c0      	movs	r1, #192	; 0xc0
 8004a76:	4809      	ldr	r0, [pc, #36]	; (8004a9c <getpressure115+0x40>)
 8004a78:	9400      	str	r4, [sp, #0]
 8004a7a:	f006 fae3 	bl	800b044 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004a7e:	b928      	cbnz	r0, 8004a8c <getpressure115+0x30>
 8004a80:	f7ff fda6 	bl	80045d0 <getpressure115.part.0>
 8004a84:	4604      	mov	r4, r0
}
 8004a86:	4620      	mov	r0, r4
 8004a88:	b004      	add	sp, #16
 8004a8a:	bd10      	pop	{r4, pc}
 8004a8c:	4604      	mov	r4, r0
		printf("I2C MPL115 HAL returned error 7\n\r");
 8004a8e:	4804      	ldr	r0, [pc, #16]	; (8004aa0 <getpressure115+0x44>)
 8004a90:	f01f fd14 	bl	80244bc <iprintf>
}
 8004a94:	4620      	mov	r0, r4
 8004a96:	b004      	add	sp, #16
 8004a98:	bd10      	pop	{r4, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200020d4 	.word	0x200020d4
 8004aa0:	0802a17c 	.word	0x0802a17c

08004aa4 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8004aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa8:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8004aaa:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004aae:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004ab2:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 8004ab6:	ac06      	add	r4, sp, #24
 8004ab8:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004abc:	4f36      	ldr	r7, [pc, #216]	; (8004b98 <initpressure115+0xf4>)
 8004abe:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 8004ac2:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004ac6:	eb09 0204 	add.w	r2, r9, r4
 8004aca:	2301      	movs	r3, #1
 8004acc:	9400      	str	r4, [sp, #0]
 8004ace:	21c0      	movs	r1, #192	; 0xc0
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	441c      	add	r4, r3
 8004ad6:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8004ada:	f006 fc47 	bl	800b36c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004ade:	4605      	mov	r5, r0
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d141      	bne.n	8004b68 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 8004ae4:	45a2      	cmp	sl, r4
 8004ae6:	d1ee      	bne.n	8004ac6 <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8004ae8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004aec:	2b5a      	cmp	r3, #90	; 0x5a
 8004aee:	d04a      	beq.n	8004b86 <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8004af0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8004af4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004af8:	badb      	revsh	r3, r3
 8004afa:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 8004afe:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8004b02:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8004b04:	109b      	asrs	r3, r3, #2
 8004b06:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 8004b08:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 8004b0a:	ee06 2a10 	vmov	s12, r2
 8004b0e:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 8004b12:	ee07 3a10 	vmov	s14, r3
 8004b16:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 8004b1a:	4a20      	ldr	r2, [pc, #128]	; (8004b9c <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8004b1c:	ee05 1a10 	vmov	s10, r1
 8004b20:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004b24:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 8004b26:	ee04 0a10 	vmov	s8, r0
 8004b2a:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8004b30:	481c      	ldr	r0, [pc, #112]	; (8004ba4 <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 8004b32:	491d      	ldr	r1, [pc, #116]	; (8004ba8 <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004b34:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 8004b38:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004b3c:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8004b3e:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 8004b42:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 8004b46:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004b4a:	f88d 2014 	strb.w	r2, [sp, #20]
 8004b4e:	2302      	movs	r3, #2
 8004b50:	aa05      	add	r2, sp, #20
 8004b52:	21c0      	movs	r1, #192	; 0xc0
 8004b54:	4810      	ldr	r0, [pc, #64]	; (8004b98 <initpressure115+0xf4>)
 8004b56:	f006 fa75 	bl	800b044 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004b5a:	b968      	cbnz	r0, 8004b78 <initpressure115+0xd4>
 8004b5c:	f7ff fd38 	bl	80045d0 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 8004b60:	4628      	mov	r0, r5
 8004b62:	b008      	add	sp, #32
 8004b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8004b68:	4601      	mov	r1, r0
 8004b6a:	4810      	ldr	r0, [pc, #64]	; (8004bac <initpressure115+0x108>)
 8004b6c:	f01f fca6 	bl	80244bc <iprintf>
}
 8004b70:	4628      	mov	r0, r5
 8004b72:	b008      	add	sp, #32
 8004b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8004b78:	480d      	ldr	r0, [pc, #52]	; (8004bb0 <initpressure115+0x10c>)
 8004b7a:	f01f fc9f 	bl	80244bc <iprintf>
}
 8004b7e:	4628      	mov	r0, r5
 8004b80:	b008      	add	sp, #32
 8004b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8004b86:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8004b88:	480a      	ldr	r0, [pc, #40]	; (8004bb4 <initpressure115+0x110>)
 8004b8a:	f01f fc97 	bl	80244bc <iprintf>
}
 8004b8e:	4628      	mov	r0, r5
 8004b90:	b008      	add	sp, #32
 8004b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b96:	bf00      	nop
 8004b98:	200020d4 	.word	0x200020d4
 8004b9c:	20002be0 	.word	0x20002be0
 8004ba0:	20002bc0 	.word	0x20002bc0
 8004ba4:	20002bc8 	.word	0x20002bc8
 8004ba8:	20002bd0 	.word	0x20002bd0
 8004bac:	0802a1a0 	.word	0x0802a1a0
 8004bb0:	0802a17c 	.word	0x0802a17c
 8004bb4:	0802a1d0 	.word	0x0802a1d0

08004bb8 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8004bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8004bbe:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8004bc0:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004bc2:	4f46      	ldr	r7, [pc, #280]	; (8004cdc <getpressure3115+0x124>)
 8004bc4:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8004bc6:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8004cfc <getpressure3115+0x144>
	data[0] = 0x55;
 8004bca:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8004bce:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004bd0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 8004bd4:	f00f fb16 	bl	8014204 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004bd8:	2301      	movs	r3, #1
 8004bda:	2200      	movs	r2, #0
 8004bdc:	21c0      	movs	r1, #192	; 0xc0
 8004bde:	4638      	mov	r0, r7
 8004be0:	9600      	str	r6, [sp, #0]
 8004be2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004be6:	f006 fbc1 	bl	800b36c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004bea:	4604      	mov	r4, r0
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d163      	bne.n	8004cb8 <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8004bf0:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8004bf4:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8004bf6:	071b      	lsls	r3, r3, #28
 8004bf8:	d401      	bmi.n	8004bfe <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8004bfa:	2d04      	cmp	r5, #4
 8004bfc:	d1e7      	bne.n	8004bce <getpressure3115+0x16>
 8004bfe:	2501      	movs	r5, #1
 8004c00:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004c02:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8004c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004cdc <getpressure3115+0x124>
 8004c0a:	46a9      	mov	r9, r5
 8004c0c:	b2aa      	uxth	r2, r5
 8004c0e:	2301      	movs	r3, #1
 8004c10:	21c0      	movs	r1, #192	; 0xc0
 8004c12:	4640      	mov	r0, r8
 8004c14:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8004c16:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004c18:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8004c1c:	f006 fba6 	bl	800b36c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004c20:	4604      	mov	r4, r0
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d152      	bne.n	8004ccc <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8004c26:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8004c2a:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8004c2c:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8004c30:	d1ec      	bne.n	8004c0c <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004c32:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8004c36:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004c3a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004c3e:	0209      	lsls	r1, r1, #8
 8004c40:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8004c44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004c50:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 8004c52:	4923      	ldr	r1, [pc, #140]	; (8004ce0 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004c54:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004c58:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004c5a:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004c5c:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004c5e:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004c60:	9805      	ldr	r0, [sp, #20]
 8004c62:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 8004c64:	4b1f      	ldr	r3, [pc, #124]	; (8004ce4 <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004c66:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004c6a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004c6e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 8004c72:	9a04      	ldr	r2, [sp, #16]
 8004c74:	fba3 0202 	umull	r0, r2, r3, r2
 8004c78:	0a12      	lsrs	r2, r2, #8
 8004c7a:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004c7c:	9a04      	ldr	r2, [sp, #16]
 8004c7e:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004c82:	4819      	ldr	r0, [pc, #100]	; (8004ce8 <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004c84:	0a1b      	lsrs	r3, r3, #8
 8004c86:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8004c8c:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004c90:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8004c92:	9b06      	ldr	r3, [sp, #24]
 8004c94:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004c96:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 8004c98:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004c9a:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8004c9c:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 8004c9e:	0912      	lsrs	r2, r2, #4
 8004ca0:	4813      	ldr	r0, [pc, #76]	; (8004cf0 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 8004ca2:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 8004ca6:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8004ca8:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 8004caa:	4a12      	ldr	r2, [pc, #72]	; (8004cf4 <getpressure3115+0x13c>)
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	6013      	str	r3, [r2, #0]
}
 8004cb2:	b00c      	add	sp, #48	; 0x30
 8004cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8004cb8:	4601      	mov	r1, r0
 8004cba:	4640      	mov	r0, r8
 8004cbc:	f01f fbfe 	bl	80244bc <iprintf>
			if (trys == 3)
 8004cc0:	2d03      	cmp	r5, #3
 8004cc2:	d195      	bne.n	8004bf0 <getpressure3115+0x38>
}
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	b00c      	add	sp, #48	; 0x30
 8004cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8004ccc:	4601      	mov	r1, r0
 8004cce:	480a      	ldr	r0, [pc, #40]	; (8004cf8 <getpressure3115+0x140>)
 8004cd0:	f01f fbf4 	bl	80244bc <iprintf>
}
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	b00c      	add	sp, #48	; 0x30
 8004cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cdc:	200020d4 	.word	0x200020d4
 8004ce0:	20002b24 	.word	0x20002b24
 8004ce4:	10624dd3 	.word	0x10624dd3
 8004ce8:	20002c5c 	.word	0x20002c5c
 8004cec:	20002c60 	.word	0x20002c60
 8004cf0:	20002c68 	.word	0x20002c68
 8004cf4:	20002c6c 	.word	0x20002c6c
 8004cf8:	0802a220 	.word	0x0802a220
 8004cfc:	0802a1f8 	.word	0x0802a1f8

08004d00 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8004d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d02:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8004d04:	2501      	movs	r5, #1
 8004d06:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004d0a:	220c      	movs	r2, #12
 8004d0c:	a908      	add	r1, sp, #32
 8004d0e:	462b      	mov	r3, r5
 8004d10:	4832      	ldr	r0, [pc, #200]	; (8004ddc <initpressure3115+0xdc>)
 8004d12:	9100      	str	r1, [sp, #0]
 8004d14:	21c0      	movs	r1, #192	; 0xc0
 8004d16:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004d1a:	f006 fb27 	bl	800b36c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d145      	bne.n	8004dae <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8004d22:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004d26:	2bc4      	cmp	r3, #196	; 0xc4
 8004d28:	d003      	beq.n	8004d32 <initpressure3115+0x32>
		return (HAL_ERROR);
 8004d2a:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	b00b      	add	sp, #44	; 0x2c
 8004d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8004d32:	4f2b      	ldr	r7, [pc, #172]	; (8004de0 <initpressure3115+0xe0>)
 8004d34:	aa05      	add	r2, sp, #20
 8004d36:	21c0      	movs	r1, #192	; 0xc0
 8004d38:	4828      	ldr	r0, [pc, #160]	; (8004ddc <initpressure3115+0xdc>)
 8004d3a:	89bb      	ldrh	r3, [r7, #12]
 8004d3c:	9600      	str	r6, [sp, #0]
 8004d3e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d42:	2302      	movs	r3, #2
 8004d44:	f006 f97e 	bl	800b044 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004d48:	4604      	mov	r4, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d136      	bne.n	8004dbc <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8004d4e:	8a3b      	ldrh	r3, [r7, #16]
 8004d50:	aa06      	add	r2, sp, #24
 8004d52:	21c0      	movs	r1, #192	; 0xc0
 8004d54:	4821      	ldr	r0, [pc, #132]	; (8004ddc <initpressure3115+0xdc>)
 8004d56:	f8ad 3018 	strh.w	r3, [sp, #24]
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	9600      	str	r6, [sp, #0]
 8004d5e:	f006 f971 	bl	800b044 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004d62:	4604      	mov	r4, r0
 8004d64:	bb70      	cbnz	r0, 8004dc4 <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8004d66:	8aba      	ldrh	r2, [r7, #20]
 8004d68:	2302      	movs	r3, #2
 8004d6a:	21c0      	movs	r1, #192	; 0xc0
 8004d6c:	481b      	ldr	r0, [pc, #108]	; (8004ddc <initpressure3115+0xdc>)
 8004d6e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8004d72:	aa07      	add	r2, sp, #28
 8004d74:	9600      	str	r6, [sp, #0]
 8004d76:	f006 f965 	bl	800b044 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	bb50      	cbnz	r0, 8004dd4 <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8004d7e:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 8004d80:	2064      	movs	r0, #100	; 0x64
 8004d82:	f00f fa3f 	bl	8014204 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8004d86:	462b      	mov	r3, r5
 8004d88:	9400      	str	r4, [sp, #0]
 8004d8a:	462a      	mov	r2, r5
 8004d8c:	21c0      	movs	r1, #192	; 0xc0
 8004d8e:	4813      	ldr	r0, [pc, #76]	; (8004ddc <initpressure3115+0xdc>)
 8004d90:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004d94:	f006 faea 	bl	800b36c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8004d98:	4604      	mov	r4, r0
 8004d9a:	b9b8      	cbnz	r0, 8004dcc <initpressure3115+0xcc>
	result = getpressure3115();
 8004d9c:	f7ff ff0c 	bl	8004bb8 <getpressure3115>
	if (result != HAL_OK) {
 8004da0:	4604      	mov	r4, r0
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d0c2      	beq.n	8004d2c <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8004da6:	480f      	ldr	r0, [pc, #60]	; (8004de4 <initpressure3115+0xe4>)
 8004da8:	f01f fb88 	bl	80244bc <iprintf>
 8004dac:	e7be      	b.n	8004d2c <initpressure3115+0x2c>
 8004dae:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8004db0:	480d      	ldr	r0, [pc, #52]	; (8004de8 <initpressure3115+0xe8>)
 8004db2:	f01f fb83 	bl	80244bc <iprintf>
}
 8004db6:	4620      	mov	r0, r4
 8004db8:	b00b      	add	sp, #44	; 0x2c
 8004dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8004dbc:	480b      	ldr	r0, [pc, #44]	; (8004dec <initpressure3115+0xec>)
 8004dbe:	f01f fb7d 	bl	80244bc <iprintf>
		return (result);
 8004dc2:	e7b3      	b.n	8004d2c <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8004dc4:	480a      	ldr	r0, [pc, #40]	; (8004df0 <initpressure3115+0xf0>)
 8004dc6:	f01f fb79 	bl	80244bc <iprintf>
		return (result);
 8004dca:	e7af      	b.n	8004d2c <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8004dcc:	4809      	ldr	r0, [pc, #36]	; (8004df4 <initpressure3115+0xf4>)
 8004dce:	f01f fb75 	bl	80244bc <iprintf>
		return (result);
 8004dd2:	e7ab      	b.n	8004d2c <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8004dd4:	4808      	ldr	r0, [pc, #32]	; (8004df8 <initpressure3115+0xf8>)
 8004dd6:	f01f fb71 	bl	80244bc <iprintf>
		return (result);
 8004dda:	e7a7      	b.n	8004d2c <initpressure3115+0x2c>
 8004ddc:	200020d4 	.word	0x200020d4
 8004de0:	080287dc 	.word	0x080287dc
 8004de4:	0802a2b8 	.word	0x0802a2b8
 8004de8:	0802a160 	.word	0x0802a160
 8004dec:	0802a248 	.word	0x0802a248
 8004df0:	0802a264 	.word	0x0802a264
 8004df4:	0802a29c 	.word	0x0802a29c
 8004df8:	0802a280 	.word	0x0802a280

08004dfc <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 8004dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 8004e00:	4820      	ldr	r0, [pc, #128]	; (8004e84 <init_esp+0x88>)
 8004e02:	f01f fbf7 	bl	80245f4 <puts>

	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 8004e06:	2201      	movs	r2, #1
 8004e08:	491f      	ldr	r1, [pc, #124]	; (8004e88 <init_esp+0x8c>)
 8004e0a:	4820      	ldr	r0, [pc, #128]	; (8004e8c <init_esp+0x90>)
 8004e0c:	f00d f99e 	bl	801214c <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8004e10:	bb98      	cbnz	r0, 8004e7a <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8004e12:	2200      	movs	r2, #0
 8004e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e18:	481d      	ldr	r0, [pc, #116]	; (8004e90 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8004e1a:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8004e1e:	f005 fe0b 	bl	800aa38 <HAL_GPIO_WritePin>
	osDelay(20);
 8004e22:	4c1c      	ldr	r4, [pc, #112]	; (8004e94 <init_esp+0x98>)
 8004e24:	2014      	movs	r0, #20
 8004e26:	4d1c      	ldr	r5, [pc, #112]	; (8004e98 <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 8004e28:	4e1c      	ldr	r6, [pc, #112]	; (8004e9c <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 8004e2a:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 8004e2e:	f00f f9e9 	bl	8014204 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8004e32:	2201      	movs	r2, #1
 8004e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e38:	4815      	ldr	r0, [pc, #84]	; (8004e90 <init_esp+0x94>)
 8004e3a:	f005 fdfd 	bl	800aa38 <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	e006      	b.n	8004e50 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 8004e42:	5cf0      	ldrb	r0, [r6, r3]
 8004e44:	6021      	str	r1, [r4, #0]
 8004e46:	f01f fb51 	bl	80244ec <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	2b60      	cmp	r3, #96	; 0x60
 8004e4e:	d810      	bhi.n	8004e72 <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8004e50:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8004e52:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d1f4      	bne.n	8004e42 <init_esp+0x46>
		osDelay(1);
 8004e58:	2001      	movs	r0, #1
 8004e5a:	f00f f9d3 	bl	8014204 <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 8004e5e:	3f01      	subs	r7, #1
 8004e60:	d1ed      	bne.n	8004e3e <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 8004e62:	20c8      	movs	r0, #200	; 0xc8
 8004e64:	f00f f9ce 	bl	8014204 <osDelay>
	printf("\n");
 8004e68:	200a      	movs	r0, #10
}
 8004e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 8004e6e:	f01f bb3d 	b.w	80244ec <putchar>
			espoutindex = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f8c4 8000 	str.w	r8, [r4]
 8004e78:	e7ea      	b.n	8004e50 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 8004e7a:	4809      	ldr	r0, [pc, #36]	; (8004ea0 <init_esp+0xa4>)
 8004e7c:	f01f fbba 	bl	80245f4 <puts>
 8004e80:	e7c7      	b.n	8004e12 <init_esp+0x16>
 8004e82:	bf00      	nop
 8004e84:	0802a2d8 	.word	0x0802a2d8
 8004e88:	20002be8 	.word	0x20002be8
 8004e8c:	20002774 	.word	0x20002774
 8004e90:	40021000 	.word	0x40021000
 8004e94:	20002bec 	.word	0x20002bec
 8004e98:	20002c50 	.word	0x20002c50
 8004e9c:	20002bf0 	.word	0x20002bf0
 8004ea0:	0802a2ec 	.word	0x0802a2ec

08004ea4 <uart6_rxdone>:
uart6_rxdone() {
 8004ea4:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 8004ea6:	4c0b      	ldr	r4, [pc, #44]	; (8004ed4 <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <uart6_rxdone+0x34>)
	i = esprxindex;
 8004eaa:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 8004eac:	7819      	ldrb	r1, [r3, #0]
 8004eae:	1c6b      	adds	r3, r5, #1
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 8004eb2:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 8004eb4:	5551      	strb	r1, [r2, r5]
 8004eb6:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 8004eb8:	d902      	bls.n	8004ec0 <uart6_rxdone+0x1c>
		esprxindex = 0;
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 8004ec0:	4a07      	ldr	r2, [pc, #28]	; (8004ee0 <uart6_rxdone+0x3c>)
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d000      	beq.n	8004eca <uart6_rxdone+0x26>
}
 8004ec8:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 8004eca:	4806      	ldr	r0, [pc, #24]	; (8004ee4 <uart6_rxdone+0x40>)
 8004ecc:	f01f fb92 	bl	80245f4 <puts>
		esprxindex = i;
 8004ed0:	6025      	str	r5, [r4, #0]
}
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	20002c50 	.word	0x20002c50
 8004ed8:	20002be8 	.word	0x20002be8
 8004edc:	20002bf0 	.word	0x20002bf0
 8004ee0:	20002bec 	.word	0x20002bec
 8004ee4:	0802a304 	.word	0x0802a304

08004ee8 <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 8004eee:	ac02      	add	r4, sp, #8
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f01f fcfc 	bl	80248ee <stpcpy>
	strcat(txbuf, "\r\n");
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <esp_cmd+0x44>)
 8004ef8:	8819      	ldrh	r1, [r3, #0]
 8004efa:	789a      	ldrb	r2, [r3, #2]
 8004efc:	1b03      	subs	r3, r0, r4
 8004efe:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 8004f00:	4621      	mov	r1, r4
	len = strlen(txbuf);
 8004f02:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 8004f04:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 8004f06:	480a      	ldr	r0, [pc, #40]	; (8004f30 <esp_cmd+0x48>)
	len = strlen(txbuf);
 8004f08:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 8004f0a:	f01f fad7 	bl	80244bc <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 8004f0e:	9a01      	ldr	r2, [sp, #4]
 8004f10:	4621      	mov	r1, r4
 8004f12:	4808      	ldr	r0, [pc, #32]	; (8004f34 <esp_cmd+0x4c>)
 8004f14:	b292      	uxth	r2, r2
 8004f16:	f00b fed9 	bl	8010ccc <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 8004f1a:	b908      	cbnz	r0, 8004f20 <esp_cmd+0x38>
}
 8004f1c:	b006      	add	sp, #24
 8004f1e:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8004f20:	4601      	mov	r1, r0
 8004f22:	4805      	ldr	r0, [pc, #20]	; (8004f38 <esp_cmd+0x50>)
 8004f24:	f01f faca 	bl	80244bc <iprintf>
}
 8004f28:	b006      	add	sp, #24
 8004f2a:	bd10      	pop	{r4, pc}
 8004f2c:	08029eb4 	.word	0x08029eb4
 8004f30:	0802a320 	.word	0x0802a320
 8004f34:	20002774 	.word	0x20002774
 8004f38:	0802a334 	.word	0x0802a334

08004f3c <test_esp>:
void test_esp() {
 8004f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 8004f40:	4813      	ldr	r0, [pc, #76]	; (8004f90 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 8004f42:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 8004f46:	f01f fb55 	bl	80245f4 <puts>
	osDelay(200);
 8004f4a:	4c12      	ldr	r4, [pc, #72]	; (8004f94 <test_esp+0x58>)
 8004f4c:	20c8      	movs	r0, #200	; 0xc8
 8004f4e:	4d12      	ldr	r5, [pc, #72]	; (8004f98 <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 8004f50:	4e12      	ldr	r6, [pc, #72]	; (8004f9c <test_esp+0x60>)
			espoutindex = 0;
 8004f52:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 8004f56:	f00f f955 	bl	8014204 <osDelay>
	esp_cmd(getstatus);	// send the command
 8004f5a:	4811      	ldr	r0, [pc, #68]	; (8004fa0 <test_esp+0x64>)
 8004f5c:	f7ff ffc4 	bl	8004ee8 <esp_cmd>
	while (espoutindex != esprxindex) {
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	e006      	b.n	8004f72 <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 8004f64:	5cf0      	ldrb	r0, [r6, r3]
 8004f66:	6021      	str	r1, [r4, #0]
 8004f68:	f01f fac0 	bl	80244ec <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	2b60      	cmp	r3, #96	; 0x60
 8004f70:	d80a      	bhi.n	8004f88 <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 8004f72:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8004f74:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d1f4      	bne.n	8004f64 <test_esp+0x28>
		osDelay(1);
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f00f f942 	bl	8014204 <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 8004f80:	3f01      	subs	r7, #1
 8004f82:	d1ed      	bne.n	8004f60 <test_esp+0x24>
}
 8004f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f8c4 8000 	str.w	r8, [r4]
 8004f8e:	e7f0      	b.n	8004f72 <test_esp+0x36>
 8004f90:	0802a354 	.word	0x0802a354
 8004f94:	20002bec 	.word	0x20002bec
 8004f98:	20002c50 	.word	0x20002c50
 8004f9c:	20002bf0 	.word	0x20002bf0
 8004fa0:	20000268 	.word	0x20000268

08004fa4 <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 8004fa4:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 8004fa6:	4818      	ldr	r0, [pc, #96]	; (8005008 <init_ds2485+0x64>)
void init_ds2485(void) {
 8004fa8:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 8004faa:	f01f fb23 	bl	80245f4 <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 8004fae:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8004fb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 8004fb4:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 8004fb6:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8004fba:	2303      	movs	r3, #3
 8004fbc:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 8004fbe:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8004fc2:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 8004fc4:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8004fc8:	aa02      	add	r2, sp, #8
 8004fca:	4810      	ldr	r0, [pc, #64]	; (800500c <init_ds2485+0x68>)
 8004fcc:	f006 f83a 	bl	800b044 <HAL_I2C_Master_Transmit>
 8004fd0:	b9a8      	cbnz	r0, 8004ffe <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 8004fd2:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8004fd4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 8004fd8:	f00f f914 	bl	8014204 <osDelay>
		data[i] = 0xA5 + i;
 8004fdc:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8004fde:	2181      	movs	r1, #129	; 0x81
 8004fe0:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 8004fe2:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8004fe6:	aa02      	add	r2, sp, #8
 8004fe8:	4808      	ldr	r0, [pc, #32]	; (800500c <init_ds2485+0x68>)
 8004fea:	9400      	str	r4, [sp, #0]
 8004fec:	f006 f8f2 	bl	800b1d4 <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 8004ff0:	4601      	mov	r1, r0
 8004ff2:	b110      	cbz	r0, 8004ffa <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8004ff4:	4806      	ldr	r0, [pc, #24]	; (8005010 <init_ds2485+0x6c>)
 8004ff6:	f01f fa61 	bl	80244bc <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 8004ffa:	b006      	add	sp, #24
 8004ffc:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8004ffe:	4601      	mov	r1, r0
 8005000:	4803      	ldr	r0, [pc, #12]	; (8005010 <init_ds2485+0x6c>)
 8005002:	f01f fa5b 	bl	80244bc <iprintf>
 8005006:	e7e4      	b.n	8004fd2 <init_ds2485+0x2e>
 8005008:	0802a37c 	.word	0x0802a37c
 800500c:	200020d4 	.word	0x200020d4
 8005010:	0802a388 	.word	0x0802a388

08005014 <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	4604      	mov	r4, r0
 8005018:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 800501a:	4821      	ldr	r0, [pc, #132]	; (80050a0 <readp_ds2485+0x8c>)
 800501c:	f01f faea 	bl	80245f4 <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 8005020:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 8005026:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 8005028:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 800502c:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 8005032:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005036:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 8005038:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800503c:	aa03      	add	r2, sp, #12
 800503e:	4819      	ldr	r0, [pc, #100]	; (80050a4 <readp_ds2485+0x90>)
 8005040:	f006 f800 	bl	800b044 <HAL_I2C_Master_Transmit>
 8005044:	bb18      	cbnz	r0, 800508e <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 8005046:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005048:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 800504c:	f00f f8da 	bl	8014204 <osDelay>
		data[i] = 0x5A + i;
 8005050:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005052:	b2a3      	uxth	r3, r4
 8005054:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 8005056:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 800505a:	2181      	movs	r1, #129	; 0x81
 800505c:	4811      	ldr	r0, [pc, #68]	; (80050a4 <readp_ds2485+0x90>)
 800505e:	9500      	str	r5, [sp, #0]
 8005060:	f006 f8b8 	bl	800b1d4 <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 8005064:	b9b8      	cbnz	r0, 8005096 <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 8005066:	4810      	ldr	r0, [pc, #64]	; (80050a8 <readp_ds2485+0x94>)
 8005068:	f10d 040b 	add.w	r4, sp, #11
 800506c:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 8005070:	4d0e      	ldr	r5, [pc, #56]	; (80050ac <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 8005072:	f01f fa23 	bl	80244bc <iprintf>
		printf("0x%02x ", data[i]);
 8005076:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800507a:	4628      	mov	r0, r5
 800507c:	f01f fa1e 	bl	80244bc <iprintf>
	for (i = 0; i < 8; i++) {
 8005080:	42b4      	cmp	r4, r6
 8005082:	d1f8      	bne.n	8005076 <readp_ds2485+0x62>
	}
	printf("\n");
 8005084:	200a      	movs	r0, #10
 8005086:	f01f fa31 	bl	80244ec <putchar>
}
 800508a:	b006      	add	sp, #24
 800508c:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 800508e:	4808      	ldr	r0, [pc, #32]	; (80050b0 <readp_ds2485+0x9c>)
 8005090:	f01f fa14 	bl	80244bc <iprintf>
 8005094:	e7d7      	b.n	8005046 <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 8005096:	4601      	mov	r1, r0
 8005098:	4806      	ldr	r0, [pc, #24]	; (80050b4 <readp_ds2485+0xa0>)
 800509a:	f01f fa0f 	bl	80244bc <iprintf>
 800509e:	e7e2      	b.n	8005066 <readp_ds2485+0x52>
 80050a0:	0802a3ac 	.word	0x0802a3ac
 80050a4:	200020d4 	.word	0x200020d4
 80050a8:	0802a40c 	.word	0x0802a40c
 80050ac:	0802a434 	.word	0x0802a434
 80050b0:	0802a3c4 	.word	0x0802a3c4
 80050b4:	0802a3e8 	.word	0x0802a3e8

080050b8 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 80050b8:	b530      	push	{r4, r5, lr}
 80050ba:	b083      	sub	sp, #12

	cycleleds();
	osDelay(500);
	printf("Initsplat: LED cycle\n");

	if (pcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 80050bc:	4c41      	ldr	r4, [pc, #260]	; (80051c4 <initsplat+0x10c>)
	cycleleds();
 80050be:	f7ff fb85 	bl	80047cc <cycleleds>
	osDelay(500);
 80050c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050c6:	f00f f89d 	bl	8014204 <osDelay>
	printf("Initsplat: LED cycle\n");
 80050ca:	483f      	ldr	r0, [pc, #252]	; (80051c8 <initsplat+0x110>)
 80050cc:	f01f fa92 	bl	80245f4 <puts>
	if (pcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	2b0b      	cmp	r3, #11
 80050d4:	d05d      	beq.n	8005192 <initsplat+0xda>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 80050d6:	483d      	ldr	r0, [pc, #244]	; (80051cc <initsplat+0x114>)
 80050d8:	f01f fa8c 	bl	80245f4 <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 80050dc:	4d3c      	ldr	r5, [pc, #240]	; (80051d0 <initsplat+0x118>)
	initpga();
 80050de:	f7ff fc1f 	bl	8004920 <initpga>
	osDelay(500);
 80050e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050e6:	f00f f88d 	bl	8014204 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 80050ea:	483a      	ldr	r0, [pc, #232]	; (80051d4 <initsplat+0x11c>)
 80050ec:	f01f f9e6 	bl	80244bc <iprintf>
	psensor = PNONE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 80050f4:	f7ff fe04 	bl	8004d00 <initpressure3115>
 80050f8:	b9e0      	cbnz	r0, 8005134 <initsplat+0x7c>
		printf("MPL3115A2 pressure sensor present\n\r");
 80050fa:	4837      	ldr	r0, [pc, #220]	; (80051d8 <initsplat+0x120>)
 80050fc:	f01f f9de 	bl	80244bc <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 8005100:	4a36      	ldr	r2, [pc, #216]	; (80051dc <initsplat+0x124>)
		psensor = MPL3115A2;
 8005102:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 8005104:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8005108:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 800510a:	f043 0310 	orr.w	r3, r3, #16
 800510e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 8005112:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005116:	f00f f875 	bl	8014204 <osDelay>

	if ((pcb == LIGHTNINGBOARD1) || (pcb == LIGHTNINGBOARD2)) {
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	3b15      	subs	r3, #21
 800511e:	2b01      	cmp	r3, #1
 8005120:	d91c      	bls.n	800515c <initsplat+0xa4>
		osDelay(500);
		test_esp();
		osDelay(200);
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8005122:	2200      	movs	r2, #0
 8005124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005128:	482d      	ldr	r0, [pc, #180]	; (80051e0 <initsplat+0x128>)
}
 800512a:	b003      	add	sp, #12
 800512c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8005130:	f005 bc82 	b.w	800aa38 <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 8005134:	f7ff fcb6 	bl	8004aa4 <initpressure115>
 8005138:	b960      	cbnz	r0, 8005154 <initsplat+0x9c>
			printf("MPL115A2 pressure sensor present\n\r");
 800513a:	482a      	ldr	r0, [pc, #168]	; (80051e4 <initsplat+0x12c>)
 800513c:	f01f f9be 	bl	80244bc <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 8005140:	4a26      	ldr	r2, [pc, #152]	; (80051dc <initsplat+0x124>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8005142:	2101      	movs	r1, #1
			statuspkt.bconf |= (MPL115A2 << 3);
 8005144:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8005148:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 800514a:	f043 0308 	orr.w	r3, r3, #8
 800514e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005152:	e7de      	b.n	8005112 <initsplat+0x5a>
			printf("NO pressure sensor present\n\r");
 8005154:	4824      	ldr	r0, [pc, #144]	; (80051e8 <initsplat+0x130>)
 8005156:	f01f f9b1 	bl	80244bc <iprintf>
 800515a:	e7da      	b.n	8005112 <initsplat+0x5a>
		huart6.Init.BaudRate = 115200;
 800515c:	4823      	ldr	r0, [pc, #140]	; (80051ec <initsplat+0x134>)
 800515e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005162:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 8005164:	f00c fe02 	bl	8011d6c <HAL_UART_Init>
 8005168:	bb28      	cbnz	r0, 80051b6 <initsplat+0xfe>
	init_ds2485();
 800516a:	f7ff ff1b 	bl	8004fa4 <init_ds2485>
	osDelay(80);
 800516e:	2050      	movs	r0, #80	; 0x50
 8005170:	f00f f848 	bl	8014204 <osDelay>
	readp_ds2485(8);
 8005174:	2008      	movs	r0, #8
 8005176:	f7ff ff4d 	bl	8005014 <readp_ds2485>
		init_esp();
 800517a:	f7ff fe3f 	bl	8004dfc <init_esp>
		osDelay(500);
 800517e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005182:	f00f f83f 	bl	8014204 <osDelay>
		test_esp();
 8005186:	f7ff fed9 	bl	8004f3c <test_esp>
		osDelay(200);
 800518a:	20c8      	movs	r0, #200	; 0xc8
 800518c:	f00f f83a 	bl	8014204 <osDelay>
 8005190:	e7c7      	b.n	8005122 <initsplat+0x6a>
		printf("Initsplat: Dual Mux\n\r");
 8005192:	4817      	ldr	r0, [pc, #92]	; (80051f0 <initsplat+0x138>)
 8005194:	f01f f992 	bl	80244bc <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8005198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800519c:	2301      	movs	r3, #1
 800519e:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <initsplat+0x13c>)
 80051a0:	9000      	str	r0, [sp, #0]
 80051a2:	2188      	movs	r1, #136	; 0x88
 80051a4:	4814      	ldr	r0, [pc, #80]	; (80051f8 <initsplat+0x140>)
 80051a6:	f005 ff4d 	bl	800b044 <HAL_I2C_Master_Transmit>
 80051aa:	b938      	cbnz	r0, 80051bc <initsplat+0x104>
		osDelay(500);
 80051ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051b0:	f00f f828 	bl	8014204 <osDelay>
 80051b4:	e78f      	b.n	80050d6 <initsplat+0x1e>
			Error_Handler();
 80051b6:	f7fd fea1 	bl	8002efc <Error_Handler>
 80051ba:	e7d6      	b.n	800516a <initsplat+0xb2>
		printf("I2C HAL returned error 1\n\r");
 80051bc:	480f      	ldr	r0, [pc, #60]	; (80051fc <initsplat+0x144>)
 80051be:	f01f f97d 	bl	80244bc <iprintf>
 80051c2:	e7f3      	b.n	80051ac <initsplat+0xf4>
 80051c4:	20002928 	.word	0x20002928
 80051c8:	0802a43c 	.word	0x0802a43c
 80051cc:	0802a46c 	.word	0x0802a46c
 80051d0:	20002c64 	.word	0x20002c64
 80051d4:	0802a490 	.word	0x0802a490
 80051d8:	0802a4b0 	.word	0x0802a4b0
 80051dc:	20002b24 	.word	0x20002b24
 80051e0:	40021000 	.word	0x40021000
 80051e4:	0802a4d4 	.word	0x0802a4d4
 80051e8:	0802a4f8 	.word	0x0802a4f8
 80051ec:	20002774 	.word	0x20002774
 80051f0:	0802a454 	.word	0x0802a454
 80051f4:	20000274 	.word	0x20000274
 80051f8:	200020d4 	.word	0x200020d4
 80051fc:	0802a160 	.word	0x0802a160

08005200 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005200:	4b16      	ldr	r3, [pc, #88]	; (800525c <HAL_MspInit+0x5c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005202:	2200      	movs	r2, #0
 8005204:	210f      	movs	r1, #15
 8005206:	f06f 0001 	mvn.w	r0, #1
{
 800520a:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800520c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 800520e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8005210:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8005214:	641c      	str	r4, [r3, #64]	; 0x40
 8005216:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005218:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 800521c:	9400      	str	r4, [sp, #0]
 800521e:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005220:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8005222:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005226:	645c      	str	r4, [r3, #68]	; 0x44
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005232:	f002 fe8f 	bl	8007f54 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 8005236:	2200      	movs	r2, #0
 8005238:	2106      	movs	r1, #6
 800523a:	2005      	movs	r0, #5
 800523c:	f002 fe8a 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005240:	2005      	movs	r0, #5
 8005242:	f002 fed1 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 8005246:	2051      	movs	r0, #81	; 0x51
 8005248:	2200      	movs	r2, #0
 800524a:	2106      	movs	r1, #6
 800524c:	f002 fe82 	bl	8007f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005250:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005252:	b002      	add	sp, #8
 8005254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005258:	f002 bec6 	b.w	8007fe8 <HAL_NVIC_EnableIRQ>
 800525c:	40023800 	.word	0x40023800

08005260 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8005260:	4a49      	ldr	r2, [pc, #292]	; (8005388 <HAL_ADC_MspInit+0x128>)
 8005262:	6803      	ldr	r3, [r0, #0]
{
 8005264:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 8005266:	4293      	cmp	r3, r2
{
 8005268:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800526a:	f04f 0400 	mov.w	r4, #0
 800526e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8005272:	9409      	str	r4, [sp, #36]	; 0x24
 8005274:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8005278:	d007      	beq.n	800528a <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800527a:	4a44      	ldr	r2, [pc, #272]	; (800538c <HAL_ADC_MspInit+0x12c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d045      	beq.n	800530c <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8005280:	4a43      	ldr	r2, [pc, #268]	; (8005390 <HAL_ADC_MspInit+0x130>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d05f      	beq.n	8005346 <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005286:	b00d      	add	sp, #52	; 0x34
 8005288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800528a:	4b42      	ldr	r3, [pc, #264]	; (8005394 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800528c:	2703      	movs	r7, #3
 800528e:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005290:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005294:	4840      	ldr	r0, [pc, #256]	; (8005398 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 800529a:	4e40      	ldr	r6, [pc, #256]	; (800539c <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800529c:	645a      	str	r2, [r3, #68]	; 0x44
 800529e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80052a4:	9201      	str	r2, [sp, #4]
 80052a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80052b8:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ba:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80052bc:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052c0:	f005 f90e 	bl	800a4e0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 80052c4:	4b36      	ldr	r3, [pc, #216]	; (80053a0 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 80052c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80052ca:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 80052cc:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80052ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 80052d2:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80052d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80052d8:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80052da:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80052de:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80052e0:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80052e2:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80052e6:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80052e8:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80052ea:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80052ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052f2:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052f4:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80052f8:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80052fc:	f003 f93c 	bl	8008578 <HAL_DMA_Init>
 8005300:	2800      	cmp	r0, #0
 8005302:	d13d      	bne.n	8005380 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005304:	63ae      	str	r6, [r5, #56]	; 0x38
 8005306:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8005308:	b00d      	add	sp, #52	; 0x34
 800530a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 800530c:	4b21      	ldr	r3, [pc, #132]	; (8005394 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800530e:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005310:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005312:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531a:	645a      	str	r2, [r3, #68]	; 0x44
 800531c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800531e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005322:	9203      	str	r2, [sp, #12]
 8005324:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005330:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005332:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005336:	4818      	ldr	r0, [pc, #96]	; (8005398 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005338:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800533e:	f005 f8cf 	bl	800a4e0 <HAL_GPIO_Init>
}
 8005342:	b00d      	add	sp, #52	; 0x34
 8005344:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005346:	4b13      	ldr	r3, [pc, #76]	; (8005394 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005348:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800534a:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800534c:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 800534e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
 8005356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005358:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800535c:	9205      	str	r2, [sp, #20]
 800535e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800536a:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800536c:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005370:	4809      	ldr	r0, [pc, #36]	; (8005398 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005372:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005374:	9306      	str	r3, [sp, #24]
 8005376:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005378:	f005 f8b2 	bl	800a4e0 <HAL_GPIO_Init>
}
 800537c:	b00d      	add	sp, #52	; 0x34
 800537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8005380:	f7fd fdbc 	bl	8002efc <Error_Handler>
 8005384:	e7be      	b.n	8005304 <HAL_ADC_MspInit+0xa4>
 8005386:	bf00      	nop
 8005388:	40012000 	.word	0x40012000
 800538c:	40012100 	.word	0x40012100
 8005390:	40012200 	.word	0x40012200
 8005394:	40023800 	.word	0x40023800
 8005398:	40020000 	.word	0x40020000
 800539c:	20001dd4 	.word	0x20001dd4
 80053a0:	40026470 	.word	0x40026470

080053a4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80053a4:	4b09      	ldr	r3, [pc, #36]	; (80053cc <HAL_CRC_MspInit+0x28>)
 80053a6:	6802      	ldr	r2, [r0, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d000      	beq.n	80053ae <HAL_CRC_MspInit+0xa>
 80053ac:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80053ae:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80053b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 80053b6:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 80053b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053bc:	631a      	str	r2, [r3, #48]	; 0x30
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80053c8:	b002      	add	sp, #8
 80053ca:	4770      	bx	lr
 80053cc:	40023000 	.word	0x40023000

080053d0 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 80053d0:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_DAC_MspInit+0xb0>)
 80053d2:	6802      	ldr	r2, [r0, #0]
{
 80053d4:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 80053d6:	429a      	cmp	r2, r3
{
 80053d8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053da:	f04f 0400 	mov.w	r4, #0
 80053de:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80053e2:	9405      	str	r4, [sp, #20]
 80053e4:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 80053e8:	d001      	beq.n	80053ee <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80053ea:	b008      	add	sp, #32
 80053ec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 80053ee:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80053f2:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f4:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 80053f6:	4e23      	ldr	r6, [pc, #140]	; (8005484 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80053f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053fa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40
 8005400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005402:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8005406:	9201      	str	r2, [sp, #4]
 8005408:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800540a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005412:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800541c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800541e:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005420:	4819      	ldr	r0, [pc, #100]	; (8005488 <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005422:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005426:	f005 f85b 	bl	800a4e0 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800542a:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 800542e:	4a17      	ldr	r2, [pc, #92]	; (800548c <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005430:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8005432:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005434:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 8005438:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800543a:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800543c:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 800543e:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005440:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005442:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8005444:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8005446:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800544a:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800544c:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800544e:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8005450:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005452:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8005454:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005456:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800545a:	f003 f88d 	bl	8008578 <HAL_DMA_Init>
 800545e:	b958      	cbnz	r0, 8005478 <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005460:	2200      	movs	r2, #0
 8005462:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8005464:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005466:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8005468:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800546a:	f002 fd73 	bl	8007f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800546e:	2036      	movs	r0, #54	; 0x36
 8005470:	f002 fdba 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
}
 8005474:	b008      	add	sp, #32
 8005476:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005478:	f7fd fd40 	bl	8002efc <Error_Handler>
 800547c:	e7f0      	b.n	8005460 <HAL_DAC_MspInit+0x90>
 800547e:	bf00      	nop
 8005480:	40007400 	.word	0x40007400
 8005484:	20001e34 	.word	0x20001e34
 8005488:	40020000 	.word	0x40020000
 800548c:	40026088 	.word	0x40026088

08005490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005490:	b530      	push	{r4, r5, lr}
 8005492:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005494:	2100      	movs	r1, #0
{
 8005496:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005498:	2290      	movs	r2, #144	; 0x90
 800549a:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	910b      	str	r1, [sp, #44]	; 0x2c
 800549e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80054a2:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054a6:	f01e f86d 	bl	8023584 <memset>
  if(hi2c->Instance==I2C1)
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	4a4a      	ldr	r2, [pc, #296]	; (80055d8 <HAL_I2C_MspInit+0x148>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d007      	beq.n	80054c2 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80054b2:	4a4a      	ldr	r2, [pc, #296]	; (80055dc <HAL_I2C_MspInit+0x14c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d030      	beq.n	800551a <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 80054b8:	4a49      	ldr	r2, [pc, #292]	; (80055e0 <HAL_I2C_MspInit+0x150>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d057      	beq.n	800556e <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80054be:	b031      	add	sp, #196	; 0xc4
 80054c0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80054c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054c6:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80054c8:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054ca:	f007 fb47 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d178      	bne.n	80055c4 <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d2:	4c44      	ldr	r4, [pc, #272]	; (80055e4 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80054d4:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054d8:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054da:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054de:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	6323      	str	r3, [r4, #48]	; 0x30
 80054e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054e8:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054ec:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f0:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80054f4:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f6:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f8:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054fc:	483a      	ldr	r0, [pc, #232]	; (80055e8 <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80054fe:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005500:	f004 ffee 	bl	800a4e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800550a:	6423      	str	r3, [r4, #64]	; 0x40
 800550c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800550e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	9b02      	ldr	r3, [sp, #8]
}
 8005516:	b031      	add	sp, #196	; 0xc4
 8005518:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800551e:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005520:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005522:	f007 fb1b 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 8005526:	2800      	cmp	r0, #0
 8005528:	d14f      	bne.n	80055ca <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800552a:	4c2e      	ldr	r4, [pc, #184]	; (80055e4 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800552c:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800552e:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005530:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005532:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005534:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005536:	f043 0320 	orr.w	r3, r3, #32
 800553a:	6323      	str	r3, [r4, #48]	; 0x30
 800553c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800553e:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005540:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005544:	4829      	ldr	r0, [pc, #164]	; (80055ec <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005546:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005548:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800554a:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800554e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005552:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005554:	f004 ffc4 	bl	800a4e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005558:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800555a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800555e:	6423      	str	r3, [r4, #64]	; 0x40
 8005560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	9b04      	ldr	r3, [sp, #16]
}
 800556a:	b031      	add	sp, #196	; 0xc4
 800556c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800556e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005572:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8005574:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005576:	f007 faf1 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 800557a:	bb48      	cbnz	r0, 80055d0 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800557c:	4c19      	ldr	r4, [pc, #100]	; (80055e4 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800557e:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005582:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005584:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005586:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005588:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800558a:	f043 0320 	orr.w	r3, r3, #32
 800558e:	6323      	str	r3, [r4, #48]	; 0x30
 8005590:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005592:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005596:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800559a:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800559c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800559e:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80055a0:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a2:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80055a6:	4811      	ldr	r0, [pc, #68]	; (80055ec <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80055a8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80055aa:	f004 ff99 	bl	800a4e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80055ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055b4:	6423      	str	r3, [r4, #64]	; 0x40
 80055b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055bc:	9306      	str	r3, [sp, #24]
 80055be:	9b06      	ldr	r3, [sp, #24]
}
 80055c0:	b031      	add	sp, #196	; 0xc4
 80055c2:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80055c4:	f7fd fc9a 	bl	8002efc <Error_Handler>
 80055c8:	e783      	b.n	80054d2 <HAL_I2C_MspInit+0x42>
      Error_Handler();
 80055ca:	f7fd fc97 	bl	8002efc <Error_Handler>
 80055ce:	e7ac      	b.n	800552a <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 80055d0:	f7fd fc94 	bl	8002efc <Error_Handler>
 80055d4:	e7d2      	b.n	800557c <HAL_I2C_MspInit+0xec>
 80055d6:	bf00      	nop
 80055d8:	40005400 	.word	0x40005400
 80055dc:	40005800 	.word	0x40005800
 80055e0:	40006000 	.word	0x40006000
 80055e4:	40023800 	.word	0x40023800
 80055e8:	40020400 	.word	0x40020400
 80055ec:	40021400 	.word	0x40021400

080055f0 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 80055f0:	4b08      	ldr	r3, [pc, #32]	; (8005614 <HAL_RNG_MspInit+0x24>)
 80055f2:	6802      	ldr	r2, [r0, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d000      	beq.n	80055fa <HAL_RNG_MspInit+0xa>
 80055f8:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_RNG_MspInit+0x28>)
{
 80055fc:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 80055fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005604:	635a      	str	r2, [r3, #52]	; 0x34
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8005610:	b002      	add	sp, #8
 8005612:	4770      	bx	lr
 8005614:	50060800 	.word	0x50060800
 8005618:	40023800 	.word	0x40023800

0800561c <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 800561c:	4a52      	ldr	r2, [pc, #328]	; (8005768 <HAL_SPI_MspInit+0x14c>)
 800561e:	6803      	ldr	r3, [r0, #0]
{
 8005620:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 8005622:	4293      	cmp	r3, r2
{
 8005624:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005626:	f04f 0400 	mov.w	r4, #0
 800562a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800562e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005632:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 8005634:	d007      	beq.n	8005646 <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8005636:	4a4d      	ldr	r2, [pc, #308]	; (800576c <HAL_SPI_MspInit+0x150>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d038      	beq.n	80056ae <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 800563c:	4a4c      	ldr	r2, [pc, #304]	; (8005770 <HAL_SPI_MspInit+0x154>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d071      	beq.n	8005726 <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8005642:	b00f      	add	sp, #60	; 0x3c
 8005644:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005646:	4b4b      	ldr	r3, [pc, #300]	; (8005774 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005648:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800564a:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800564c:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 800564e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005650:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005652:	4849      	ldr	r0, [pc, #292]	; (8005778 <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
 800565a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800565c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005660:	9201      	str	r2, [sp, #4]
 8005662:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005666:	f042 0204 	orr.w	r2, r2, #4
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
 800566c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566e:	f002 0204 	and.w	r2, r2, #4
 8005672:	9202      	str	r2, [sp, #8]
 8005674:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005678:	f042 0208 	orr.w	r2, r2, #8
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005680:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005682:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005686:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005688:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800568c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800568e:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005690:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005692:	f004 ff25 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005696:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005698:	a909      	add	r1, sp, #36	; 0x24
 800569a:	4838      	ldr	r0, [pc, #224]	; (800577c <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800569c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800569e:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056a0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80056a2:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056a6:	f004 ff1b 	bl	800a4e0 <HAL_GPIO_Init>
}
 80056aa:	b00f      	add	sp, #60	; 0x3c
 80056ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80056ae:	4b31      	ldr	r3, [pc, #196]	; (8005774 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80056b2:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056b4:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 80056b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80056b8:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ba:	4831      	ldr	r0, [pc, #196]	; (8005780 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80056bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
 80056c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056c4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80056c8:	9204      	str	r2, [sp, #16]
 80056ca:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ce:	4332      	orrs	r2, r6
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
 80056d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d4:	4032      	ands	r2, r6
 80056d6:	9205      	str	r2, [sp, #20]
 80056d8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056dc:	430a      	orrs	r2, r1
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056e2:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056e4:	400b      	ands	r3, r1
 80056e6:	9306      	str	r3, [sp, #24]
 80056e8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80056ea:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ec:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f0:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80056f2:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f4:	f004 fef4 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056fc:	a909      	add	r1, sp, #36	; 0x24
 80056fe:	481e      	ldr	r0, [pc, #120]	; (8005778 <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005700:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005702:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005706:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800570a:	f004 fee9 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800570e:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005710:	a909      	add	r1, sp, #36	; 0x24
 8005712:	481b      	ldr	r0, [pc, #108]	; (8005780 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005714:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005716:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005718:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800571a:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571e:	f004 fedf 	bl	800a4e0 <HAL_GPIO_Init>
}
 8005722:	b00f      	add	sp, #60	; 0x3c
 8005724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005726:	4b13      	ldr	r3, [pc, #76]	; (8005774 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005728:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800572a:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800572c:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 800572e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005730:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005732:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005736:	645a      	str	r2, [r3, #68]	; 0x44
 8005738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800573a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800573e:	9207      	str	r2, [sp, #28]
 8005740:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005744:	f042 0210 	orr.w	r2, r2, #16
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800574a:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800574e:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005750:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005754:	480b      	ldr	r0, [pc, #44]	; (8005784 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005756:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005758:	9308      	str	r3, [sp, #32]
 800575a:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800575c:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005760:	f004 febe 	bl	800a4e0 <HAL_GPIO_Init>
}
 8005764:	b00f      	add	sp, #60	; 0x3c
 8005766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005768:	40003800 	.word	0x40003800
 800576c:	40003c00 	.word	0x40003c00
 8005770:	40013400 	.word	0x40013400
 8005774:	40023800 	.word	0x40023800
 8005778:	40020800 	.word	0x40020800
 800577c:	40020c00 	.word	0x40020c00
 8005780:	40020400 	.word	0x40020400
 8005784:	40021000 	.word	0x40021000

08005788 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8005788:	4a73      	ldr	r2, [pc, #460]	; (8005958 <HAL_TIM_Base_MspInit+0x1d0>)
 800578a:	6803      	ldr	r3, [r0, #0]
{
 800578c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 800578e:	4293      	cmp	r3, r2
{
 8005790:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005792:	f04f 0400 	mov.w	r4, #0
 8005796:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800579a:	940d      	str	r4, [sp, #52]	; 0x34
 800579c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 80057a0:	d021      	beq.n	80057e6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a6:	d055      	beq.n	8005854 <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80057a8:	4a6c      	ldr	r2, [pc, #432]	; (800595c <HAL_TIM_Base_MspInit+0x1d4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d027      	beq.n	80057fe <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80057ae:	4a6c      	ldr	r2, [pc, #432]	; (8005960 <HAL_TIM_Base_MspInit+0x1d8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d043      	beq.n	800583c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 80057b4:	4a6b      	ldr	r2, [pc, #428]	; (8005964 <HAL_TIM_Base_MspInit+0x1dc>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f000 80a5 	beq.w	8005906 <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80057bc:	4a6a      	ldr	r2, [pc, #424]	; (8005968 <HAL_TIM_Base_MspInit+0x1e0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	f000 80b4 	beq.w	800592c <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 80057c4:	4a69      	ldr	r2, [pc, #420]	; (800596c <HAL_TIM_Base_MspInit+0x1e4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d02d      	beq.n	8005826 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 80057ca:	4a69      	ldr	r2, [pc, #420]	; (8005970 <HAL_TIM_Base_MspInit+0x1e8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d114      	bne.n	80057fa <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80057d0:	4b68      	ldr	r3, [pc, #416]	; (8005974 <HAL_TIM_Base_MspInit+0x1ec>)
 80057d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	930a      	str	r3, [sp, #40]	; 0x28
 80057e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80057e4:	e009      	b.n	80057fa <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80057e6:	4b63      	ldr	r3, [pc, #396]	; (8005974 <HAL_TIM_Base_MspInit+0x1ec>)
 80057e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	645a      	str	r2, [r3, #68]	; 0x44
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	9b01      	ldr	r3, [sp, #4]
}
 80057fa:	b011      	add	sp, #68	; 0x44
 80057fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057fe:	4b5d      	ldr	r3, [pc, #372]	; (8005974 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005800:	4622      	mov	r2, r4
 8005802:	2106      	movs	r1, #6
 8005804:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005806:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005808:	f044 0402 	orr.w	r4, r4, #2
 800580c:	641c      	str	r4, [r3, #64]	; 0x40
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	9305      	str	r3, [sp, #20]
 8005816:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005818:	f002 fb9c 	bl	8007f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800581c:	201d      	movs	r0, #29
 800581e:	f002 fbe3 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
}
 8005822:	b011      	add	sp, #68	; 0x44
 8005824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005826:	4b53      	ldr	r3, [pc, #332]	; (8005974 <HAL_TIM_Base_MspInit+0x1ec>)
 8005828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800582a:	f042 0220 	orr.w	r2, r2, #32
 800582e:	641a      	str	r2, [r3, #64]	; 0x40
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	9309      	str	r3, [sp, #36]	; 0x24
 8005838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583a:	e7de      	b.n	80057fa <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800583c:	4b4d      	ldr	r3, [pc, #308]	; (8005974 <HAL_TIM_Base_MspInit+0x1ec>)
 800583e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005840:	f042 0204 	orr.w	r2, r2, #4
 8005844:	641a      	str	r2, [r3, #64]	; 0x40
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	9306      	str	r3, [sp, #24]
 800584e:	9b06      	ldr	r3, [sp, #24]
}
 8005850:	b011      	add	sp, #68	; 0x44
 8005852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005854:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005858:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800585a:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800585c:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 800585e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005860:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005862:	4845      	ldr	r0, [pc, #276]	; (8005978 <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
 800586a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800586c:	f002 0201 	and.w	r2, r2, #1
 8005870:	9202      	str	r2, [sp, #8]
 8005872:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
 800587c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800587e:	f002 0201 	and.w	r2, r2, #1
 8005882:	9203      	str	r2, [sp, #12]
 8005884:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005888:	f042 0202 	orr.w	r2, r2, #2
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005890:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005892:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005896:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005898:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800589a:	2320      	movs	r3, #32
 800589c:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800589e:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a0:	f004 fe1e 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80058a4:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80058a6:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058aa:	4834      	ldr	r0, [pc, #208]	; (800597c <HAL_TIM_Base_MspInit+0x1f4>)
 80058ac:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ae:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80058b0:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80058b2:	4e33      	ldr	r6, [pc, #204]	; (8005980 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058b4:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058b8:	f004 fe12 	bl	800a4e0 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80058bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80058c0:	4a30      	ldr	r2, [pc, #192]	; (8005984 <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80058c2:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80058c4:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80058c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80058ca:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80058cc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80058d0:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80058d2:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80058d6:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80058d8:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80058da:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058dc:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80058de:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80058e0:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80058e4:	f002 fe48 	bl	8008578 <HAL_DMA_Init>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d132      	bne.n	8005952 <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80058ec:	2200      	movs	r2, #0
 80058ee:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 80058f0:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80058f2:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 80058f4:	62ee      	str	r6, [r5, #44]	; 0x2c
 80058f6:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80058f8:	f002 fb2c 	bl	8007f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80058fc:	201c      	movs	r0, #28
 80058fe:	f002 fb73 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
}
 8005902:	b011      	add	sp, #68	; 0x44
 8005904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005906:	4b1b      	ldr	r3, [pc, #108]	; (8005974 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8005908:	4622      	mov	r2, r4
 800590a:	2105      	movs	r1, #5
 800590c:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 800590e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005910:	f044 0408 	orr.w	r4, r4, #8
 8005914:	641c      	str	r4, [r3, #64]	; 0x40
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	9307      	str	r3, [sp, #28]
 800591e:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8005920:	f002 fb18 	bl	8007f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005924:	2032      	movs	r0, #50	; 0x32
 8005926:	f002 fb5f 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
 800592a:	e766      	b.n	80057fa <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800592c:	4b11      	ldr	r3, [pc, #68]	; (8005974 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800592e:	4622      	mov	r2, r4
 8005930:	2106      	movs	r1, #6
 8005932:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005934:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005936:	f044 0410 	orr.w	r4, r4, #16
 800593a:	641c      	str	r4, [r3, #64]	; 0x40
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	9308      	str	r3, [sp, #32]
 8005944:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005946:	f002 fb05 	bl	8007f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800594a:	2036      	movs	r0, #54	; 0x36
 800594c:	f002 fb4c 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
 8005950:	e753      	b.n	80057fa <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 8005952:	f7fd fad3 	bl	8002efc <Error_Handler>
 8005956:	e7c9      	b.n	80058ec <HAL_TIM_Base_MspInit+0x164>
 8005958:	40010000 	.word	0x40010000
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40001000 	.word	0x40001000
 800596c:	40001400 	.word	0x40001400
 8005970:	40002000 	.word	0x40002000
 8005974:	40023800 	.word	0x40023800
 8005978:	40020000 	.word	0x40020000
 800597c:	40020400 	.word	0x40020400
 8005980:	20001e94 	.word	0x20001e94
 8005984:	40026028 	.word	0x40026028

08005988 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8005988:	491d      	ldr	r1, [pc, #116]	; (8005a00 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598a:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 800598c:	6802      	ldr	r2, [r0, #0]
{
 800598e:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 8005990:	428a      	cmp	r2, r1
{
 8005992:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005994:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005998:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800599c:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 800599e:	d004      	beq.n	80059aa <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 80059a0:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <HAL_TIM_MspPostInit+0x7c>)
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d016      	beq.n	80059d4 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80059a6:	b008      	add	sp, #32
 80059a8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059aa:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80059ac:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ae:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059b0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b4:	f042 0204 	orr.w	r2, r2, #4
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80059bc:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059be:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059c2:	4812      	ldr	r0, [pc, #72]	; (8005a0c <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c4:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80059ca:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059cc:	f004 fd88 	bl	800a4e0 <HAL_GPIO_Init>
}
 80059d0:	b008      	add	sp, #32
 80059d2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059d4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d8:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80059da:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059de:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e2:	4322      	orrs	r2, r4
 80059e4:	631a      	str	r2, [r3, #48]	; 0x30
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80059e8:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059ea:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ec:	4808      	ldr	r0, [pc, #32]	; (8005a10 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ee:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059f0:	9302      	str	r3, [sp, #8]
 80059f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80059f4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059f6:	f004 fd73 	bl	800a4e0 <HAL_GPIO_Init>
}
 80059fa:	b008      	add	sp, #32
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	bf00      	nop
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40020800 	.word	0x40020800
 8005a10:	40020400 	.word	0x40020400

08005a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a18:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a1a:	2100      	movs	r1, #0
{
 8005a1c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a1e:	2290      	movs	r2, #144	; 0x90
 8005a20:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a22:	9117      	str	r1, [sp, #92]	; 0x5c
 8005a24:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 8005a28:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a2c:	f01d fdaa 	bl	8023584 <memset>
  if(huart->Instance==UART4)
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	4aa2      	ldr	r2, [pc, #648]	; (8005cbc <HAL_UART_MspInit+0x2a8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d070      	beq.n	8005b1a <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8005a38:	4aa1      	ldr	r2, [pc, #644]	; (8005cc0 <HAL_UART_MspInit+0x2ac>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	f000 80c1 	beq.w	8005bc2 <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8005a40:	4aa0      	ldr	r2, [pc, #640]	; (8005cc4 <HAL_UART_MspInit+0x2b0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	f000 815e 	beq.w	8005d04 <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8005a48:	4a9f      	ldr	r2, [pc, #636]	; (8005cc8 <HAL_UART_MspInit+0x2b4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8005a4e:	4a9f      	ldr	r2, [pc, #636]	; (8005ccc <HAL_UART_MspInit+0x2b8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	f000 818e 	beq.w	8005d72 <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8005a56:	4a9e      	ldr	r2, [pc, #632]	; (8005cd0 <HAL_UART_MspInit+0x2bc>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	f000 81b4 	beq.w	8005dc6 <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8005a5e:	4a9d      	ldr	r2, [pc, #628]	; (8005cd4 <HAL_UART_MspInit+0x2c0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	f000 81df 	beq.w	8005e24 <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005a66:	b03c      	add	sp, #240	; 0xf0
 8005a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8005a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a70:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8005a72:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a74:	f007 f872 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f040 8261 	bne.w	8005f40 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8005a7e:	4b96      	ldr	r3, [pc, #600]	; (8005cd8 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a80:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a82:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005a84:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 8005a86:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a88:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a8a:	4894      	ldr	r0, [pc, #592]	; (8005cdc <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8005a8c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005a90:	6419      	str	r1, [r3, #64]	; 0x40
 8005a92:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005a98:	910a      	str	r1, [sp, #40]	; 0x28
 8005a9a:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a9e:	f041 0110 	orr.w	r1, r1, #16
 8005aa2:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005aa4:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005aa8:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab2:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005ab6:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005aba:	f004 fd11 	bl	800a4e0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005abe:	4887      	ldr	r0, [pc, #540]	; (8005cdc <HAL_UART_MspInit+0x2c8>)
 8005ac0:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005ac2:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac4:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ac8:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005acc:	f004 fd08 	bl	800a4e0 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8005ad0:	4d83      	ldr	r5, [pc, #524]	; (8005ce0 <HAL_UART_MspInit+0x2cc>)
 8005ad2:	4a84      	ldr	r2, [pc, #528]	; (8005ce4 <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8005ad4:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8005ad8:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8005ada:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8005ade:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8005ae6:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005aec:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005aee:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005af2:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005af6:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8005afa:	f002 fd3d 	bl	8008578 <HAL_DMA_Init>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f040 8221 	bne.w	8005f46 <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8005b04:	2200      	movs	r2, #0
 8005b06:	2103      	movs	r1, #3
 8005b08:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8005b0a:	6725      	str	r5, [r4, #112]	; 0x70
 8005b0c:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8005b0e:	f002 fa21 	bl	8007f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8005b12:	2053      	movs	r0, #83	; 0x53
 8005b14:	f002 fa68 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
 8005b18:	e7a5      	b.n	8005a66 <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b1e:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005b20:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b22:	f007 f81b 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f040 8179 	bne.w	8005e1e <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8005b2c:	4b6a      	ldr	r3, [pc, #424]	; (8005cd8 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b30:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b32:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8005b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005b36:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b38:	a913      	add	r1, sp, #76	; 0x4c
 8005b3a:	486b      	ldr	r0, [pc, #428]	; (8005ce8 <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8005b3c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40
 8005b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b44:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8005b48:	9201      	str	r2, [sp, #4]
 8005b4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	631a      	str	r2, [r3, #48]	; 0x30
 8005b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b56:	f002 0201 	and.w	r2, r2, #1
 8005b5a:	9202      	str	r2, [sp, #8]
 8005b5c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b60:	433a      	orrs	r2, r7
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
 8005b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b66:	403a      	ands	r2, r7
 8005b68:	9203      	str	r2, [sp, #12]
 8005b6a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b6e:	f042 0204 	orr.w	r2, r2, #4
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b76:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b78:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005b7c:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b7e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8005b80:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b84:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8005b86:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b88:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b8c:	f004 fca8 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b94:	a913      	add	r1, sp, #76	; 0x4c
 8005b96:	4855      	ldr	r0, [pc, #340]	; (8005cec <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005b98:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9a:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005b9e:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ba2:	f004 fc9d 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005baa:	a913      	add	r1, sp, #76	; 0x4c
 8005bac:	4850      	ldr	r0, [pc, #320]	; (8005cf0 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bae:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005bb0:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005bb2:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb4:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bb8:	f004 fc92 	bl	800a4e0 <HAL_GPIO_Init>
}
 8005bbc:	b03c      	add	sp, #240	; 0xf0
 8005bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bc6:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005bc8:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bca:	f006 ffc7 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f040 81b0 	bne.w	8005f34 <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005bd4:	4b40      	ldr	r3, [pc, #256]	; (8005cd8 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd6:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd8:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005bda:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8005bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be0:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be4:	a913      	add	r1, sp, #76	; 0x4c
 8005be6:	4841      	ldr	r0, [pc, #260]	; (8005cec <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8005be8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
 8005bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005bf4:	9205      	str	r2, [sp, #20]
 8005bf6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bfa:	4332      	orrs	r2, r6
 8005bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8005bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c00:	4032      	ands	r2, r6
 8005c02:	9206      	str	r2, [sp, #24]
 8005c04:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c08:	f042 0204 	orr.w	r2, r2, #4
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c10:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	9307      	str	r3, [sp, #28]
 8005c18:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c1a:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c1c:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c20:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c24:	f004 fc5c 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c28:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c2a:	4831      	ldr	r0, [pc, #196]	; (8005cf0 <HAL_UART_MspInit+0x2dc>)
 8005c2c:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2e:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c30:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c32:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005c34:	4e2f      	ldr	r6, [pc, #188]	; (8005cf4 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005c36:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005c38:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c3c:	f004 fc50 	bl	800a4e0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005c40:	4a2d      	ldr	r2, [pc, #180]	; (8005cf8 <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8005c42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005c46:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c48:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005c4a:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8005c50:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005c52:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c56:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c58:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005c5c:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c60:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005c64:	f002 fc88 	bl	8008578 <HAL_DMA_Init>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	f040 8160 	bne.w	8005f2e <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005c6e:	4d23      	ldr	r5, [pc, #140]	; (8005cfc <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8005c70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005c74:	4922      	ldr	r1, [pc, #136]	; (8005d00 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c76:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8005c78:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005c7e:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c80:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005c82:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8005c84:	6726      	str	r6, [r4, #112]	; 0x70
 8005c86:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c88:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c8a:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c8c:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c8e:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c90:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c92:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c94:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005c98:	f002 fc6e 	bl	8008578 <HAL_DMA_Init>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f040 8143 	bne.w	8005f28 <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2107      	movs	r1, #7
 8005ca6:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8005ca8:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005caa:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8005cac:	f002 f952 	bl	8007f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005cb0:	2035      	movs	r0, #53	; 0x35
 8005cb2:	f002 f999 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
}
 8005cb6:	b03c      	add	sp, #240	; 0xf0
 8005cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cbc:	40004c00 	.word	0x40004c00
 8005cc0:	40005000 	.word	0x40005000
 8005cc4:	40007800 	.word	0x40007800
 8005cc8:	40007c00 	.word	0x40007c00
 8005ccc:	40004400 	.word	0x40004400
 8005cd0:	40004800 	.word	0x40004800
 8005cd4:	40011400 	.word	0x40011400
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	20001fb4 	.word	0x20001fb4
 8005ce4:	400260a0 	.word	0x400260a0
 8005ce8:	40020000 	.word	0x40020000
 8005cec:	40020400 	.word	0x40020400
 8005cf0:	40020800 	.word	0x40020800
 8005cf4:	20001ef4 	.word	0x20001ef4
 8005cf8:	40026010 	.word	0x40026010
 8005cfc:	20001f54 	.word	0x20001f54
 8005d00:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d08:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005d0a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d0c:	f006 ff26 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	f040 8112 	bne.w	8005f3a <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 8005d16:	4b8f      	ldr	r3, [pc, #572]	; (8005f54 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005d18:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005d1a:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d1c:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8005d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005d20:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d22:	488d      	ldr	r0, [pc, #564]	; (8005f58 <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8005d24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
 8005d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005d30:	9208      	str	r2, [sp, #32]
 8005d32:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d36:	f042 0220 	orr.w	r2, r2, #32
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d3c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005d40:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d42:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d44:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d48:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4a:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005d50:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d54:	f004 fbc4 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005d58:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d5a:	a913      	add	r1, sp, #76	; 0x4c
 8005d5c:	487e      	ldr	r0, [pc, #504]	; (8005f58 <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d5e:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005d60:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005d62:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005d64:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d68:	f004 fbba 	bl	800a4e0 <HAL_GPIO_Init>
}
 8005d6c:	b03c      	add	sp, #240	; 0xf0
 8005d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005d72:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d74:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005d76:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d78:	f006 fef0 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	f040 80e5 	bne.w	8005f4c <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d82:	4b74      	ldr	r3, [pc, #464]	; (8005f54 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d84:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005d86:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d88:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d8c:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40
 8005d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d96:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005d9a:	920c      	str	r2, [sp, #48]	; 0x30
 8005d9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da0:	f042 0208 	orr.w	r2, r2, #8
 8005da4:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005da6:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005daa:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dac:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005db0:	486a      	ldr	r0, [pc, #424]	; (8005f5c <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005db2:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005db4:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005db6:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005db8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005dba:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dbc:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005dc0:	f004 fb8e 	bl	800a4e0 <HAL_GPIO_Init>
 8005dc4:	e64f      	b.n	8005a66 <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005dca:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005dcc:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005dce:	f006 fec5 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	f040 809c 	bne.w	8005f10 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005dd8:	4b5e      	ldr	r3, [pc, #376]	; (8005f54 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dda:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005ddc:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de0:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8005de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005de4:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 8005de6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40
 8005dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dee:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005df2:	920e      	str	r2, [sp, #56]	; 0x38
 8005df4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df8:	f042 0208 	orr.w	r2, r2, #8
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dfe:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e02:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e04:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e08:	4854      	ldr	r0, [pc, #336]	; (8005f5c <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005e0a:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e0c:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005e0e:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005e12:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e14:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e18:	f004 fb62 	bl	800a4e0 <HAL_GPIO_Init>
 8005e1c:	e623      	b.n	8005a66 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8005e1e:	f7fd f86d 	bl	8002efc <Error_Handler>
 8005e22:	e683      	b.n	8005b2c <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e28:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005e2a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e2c:	f006 fe96 	bl	800cb5c <HAL_RCCEx_PeriphCLKConfig>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d176      	bne.n	8005f22 <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005e34:	4b47      	ldr	r3, [pc, #284]	; (8005f54 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005e36:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e38:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e3a:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 8005e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005e3e:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e40:	4847      	ldr	r0, [pc, #284]	; (8005f60 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8005e42:	f042 0220 	orr.w	r2, r2, #32
 8005e46:	645a      	str	r2, [r3, #68]	; 0x44
 8005e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e4a:	f002 0220 	and.w	r2, r2, #32
 8005e4e:	9210      	str	r2, [sp, #64]	; 0x40
 8005e50:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e54:	f042 0204 	orr.w	r2, r2, #4
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30
 8005e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e5c:	f002 0204 	and.w	r2, r2, #4
 8005e60:	9211      	str	r2, [sp, #68]	; 0x44
 8005e62:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e66:	430a      	orrs	r2, r1
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6c:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e6e:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e70:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005e72:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e74:	9312      	str	r3, [sp, #72]	; 0x48
 8005e76:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e78:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e7c:	a913      	add	r1, sp, #76	; 0x4c
 8005e7e:	f004 fb2f 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e82:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e84:	4837      	ldr	r0, [pc, #220]	; (8005f64 <HAL_UART_MspInit+0x550>)
 8005e86:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e88:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e8e:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e90:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005e92:	4e35      	ldr	r6, [pc, #212]	; (8005f68 <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005e94:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e98:	f004 fb22 	bl	800a4e0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005e9c:	4a33      	ldr	r2, [pc, #204]	; (8005f6c <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005e9e:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005ea2:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005ea4:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005eb0:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005eb6:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eba:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005ebe:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005ec2:	f002 fb59 	bl	8008578 <HAL_DMA_Init>
 8005ec6:	bb48      	cbnz	r0, 8005f1c <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005ec8:	4d29      	ldr	r5, [pc, #164]	; (8005f70 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8005eca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005ece:	4929      	ldr	r1, [pc, #164]	; (8005f74 <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ed0:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8005ed2:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005ed8:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005eda:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005edc:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005ede:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ee0:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005ee2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ee6:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8005ee8:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eea:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eec:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005eee:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005ef0:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005ef2:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005ef4:	6726      	str	r6, [r4, #112]	; 0x70
 8005ef6:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005ef8:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005efc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005f00:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8005f04:	f002 fb38 	bl	8008578 <HAL_DMA_Init>
 8005f08:	b928      	cbnz	r0, 8005f16 <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8005f0a:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005f0c:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8005f0e:	e5aa      	b.n	8005a66 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8005f10:	f7fc fff4 	bl	8002efc <Error_Handler>
 8005f14:	e760      	b.n	8005dd8 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 8005f16:	f7fc fff1 	bl	8002efc <Error_Handler>
 8005f1a:	e7f6      	b.n	8005f0a <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 8005f1c:	f7fc ffee 	bl	8002efc <Error_Handler>
 8005f20:	e7d2      	b.n	8005ec8 <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 8005f22:	f7fc ffeb 	bl	8002efc <Error_Handler>
 8005f26:	e785      	b.n	8005e34 <HAL_UART_MspInit+0x420>
      Error_Handler();
 8005f28:	f7fc ffe8 	bl	8002efc <Error_Handler>
 8005f2c:	e6b9      	b.n	8005ca2 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8005f2e:	f7fc ffe5 	bl	8002efc <Error_Handler>
 8005f32:	e69c      	b.n	8005c6e <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8005f34:	f7fc ffe2 	bl	8002efc <Error_Handler>
 8005f38:	e64c      	b.n	8005bd4 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8005f3a:	f7fc ffdf 	bl	8002efc <Error_Handler>
 8005f3e:	e6ea      	b.n	8005d16 <HAL_UART_MspInit+0x302>
      Error_Handler();
 8005f40:	f7fc ffdc 	bl	8002efc <Error_Handler>
 8005f44:	e59b      	b.n	8005a7e <HAL_UART_MspInit+0x6a>
      Error_Handler();
 8005f46:	f7fc ffd9 	bl	8002efc <Error_Handler>
 8005f4a:	e5db      	b.n	8005b04 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8005f4c:	f7fc ffd6 	bl	8002efc <Error_Handler>
 8005f50:	e717      	b.n	8005d82 <HAL_UART_MspInit+0x36e>
 8005f52:	bf00      	nop
 8005f54:	40023800 	.word	0x40023800
 8005f58:	40021400 	.word	0x40021400
 8005f5c:	40020c00 	.word	0x40020c00
 8005f60:	40020800 	.word	0x40020800
 8005f64:	40021800 	.word	0x40021800
 8005f68:	20002014 	.word	0x20002014
 8005f6c:	40026428 	.word	0x40026428
 8005f70:	20002074 	.word	0x20002074
 8005f74:	400264a0 	.word	0x400264a0

08005f78 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 8005f78:	4a4f      	ldr	r2, [pc, #316]	; (80060b8 <HAL_UART_MspDeInit+0x140>)
 8005f7a:	6803      	ldr	r3, [r0, #0]
 8005f7c:	4293      	cmp	r3, r2
{
 8005f7e:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8005f80:	d025      	beq.n	8005fce <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 8005f82:	4a4e      	ldr	r2, [pc, #312]	; (80060bc <HAL_UART_MspDeInit+0x144>)
 8005f84:	4604      	mov	r4, r0
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d038      	beq.n	8005ffc <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 8005f8a:	4a4d      	ldr	r2, [pc, #308]	; (80060c0 <HAL_UART_MspDeInit+0x148>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d050      	beq.n	8006032 <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 8005f90:	4a4c      	ldr	r2, [pc, #304]	; (80060c4 <HAL_UART_MspDeInit+0x14c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d009      	beq.n	8005faa <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8005f96:	4a4c      	ldr	r2, [pc, #304]	; (80060c8 <HAL_UART_MspDeInit+0x150>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d056      	beq.n	800604a <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8005f9c:	4a4b      	ldr	r2, [pc, #300]	; (80060cc <HAL_UART_MspDeInit+0x154>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d062      	beq.n	8006068 <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 8005fa2:	4a4b      	ldr	r2, [pc, #300]	; (80060d0 <HAL_UART_MspDeInit+0x158>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d06c      	beq.n	8006082 <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8005fa8:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 8005faa:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8005fae:	2103      	movs	r1, #3
 8005fb0:	4848      	ldr	r0, [pc, #288]	; (80060d4 <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 8005fb2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005fb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fb8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8005fba:	f004 fc37 	bl	800a82c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005fbe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005fc0:	f002 fc86 	bl	80088d0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8005fc4:	2053      	movs	r0, #83	; 0x53
}
 8005fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8005fca:	f002 b821 	b.w	8008010 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 8005fce:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8005fd2:	f248 0101 	movw	r1, #32769	; 0x8001
 8005fd6:	4840      	ldr	r0, [pc, #256]	; (80060d8 <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 8005fd8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005fda:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005fde:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8005fe0:	f004 fc24 	bl	800a82c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 8005fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fe8:	483c      	ldr	r0, [pc, #240]	; (80060dc <HAL_UART_MspDeInit+0x164>)
 8005fea:	f004 fc1f 	bl	800a82c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8005fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ff2:	483b      	ldr	r0, [pc, #236]	; (80060e0 <HAL_UART_MspDeInit+0x168>)
}
 8005ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8005ff8:	f004 bc18 	b.w	800a82c <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 8005ffc:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8006000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006004:	4835      	ldr	r0, [pc, #212]	; (80060dc <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 8006006:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006008:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800600c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 800600e:	f004 fc0d 	bl	800a82c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8006012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006016:	4832      	ldr	r0, [pc, #200]	; (80060e0 <HAL_UART_MspDeInit+0x168>)
 8006018:	f004 fc08 	bl	800a82c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800601c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800601e:	f002 fc57 	bl	80088d0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8006022:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006024:	f002 fc54 	bl	80088d0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8006028:	2035      	movs	r0, #53	; 0x35
}
 800602a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 800602e:	f001 bfef 	b.w	8008010 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 8006032:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8006036:	21c0      	movs	r1, #192	; 0xc0
 8006038:	482a      	ldr	r0, [pc, #168]	; (80060e4 <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 800603a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800603c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 8006040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 8006044:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8006046:	f004 bbf1 	b.w	800a82c <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 800604a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 800604e:	4826      	ldr	r0, [pc, #152]	; (80060e8 <HAL_UART_MspDeInit+0x170>)
 8006050:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 8006052:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006054:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006058:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 800605a:	f004 fbe7 	bl	800a82c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800605e:	2026      	movs	r0, #38	; 0x26
}
 8006060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006064:	f001 bfd4 	b.w	8008010 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 8006068:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 800606c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006070:	481d      	ldr	r0, [pc, #116]	; (80060e8 <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8006072:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 8006078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 800607c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 800607e:	f004 bbd5 	b.w	800a82c <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 8006082:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8006086:	2140      	movs	r1, #64	; 0x40
 8006088:	4815      	ldr	r0, [pc, #84]	; (80060e0 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 800608a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800608c:	f023 0320 	bic.w	r3, r3, #32
 8006090:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8006092:	f004 fbcb 	bl	800a82c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 8006096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800609a:	4814      	ldr	r0, [pc, #80]	; (80060ec <HAL_UART_MspDeInit+0x174>)
 800609c:	f004 fbc6 	bl	800a82c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80060a0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80060a2:	f002 fc15 	bl	80088d0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80060a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80060a8:	f002 fc12 	bl	80088d0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80060ac:	2047      	movs	r0, #71	; 0x47
}
 80060ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80060b2:	f001 bfad 	b.w	8008010 <HAL_NVIC_DisableIRQ>
 80060b6:	bf00      	nop
 80060b8:	40004c00 	.word	0x40004c00
 80060bc:	40005000 	.word	0x40005000
 80060c0:	40007800 	.word	0x40007800
 80060c4:	40007c00 	.word	0x40007c00
 80060c8:	40004400 	.word	0x40004400
 80060cc:	40004800 	.word	0x40004800
 80060d0:	40011400 	.word	0x40011400
 80060d4:	40021000 	.word	0x40021000
 80060d8:	40020000 	.word	0x40020000
 80060dc:	40020400 	.word	0x40020400
 80060e0:	40020800 	.word	0x40020800
 80060e4:	40021400 	.word	0x40021400
 80060e8:	40020c00 	.word	0x40020c00
 80060ec:	40021800 	.word	0x40021800

080060f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060f0:	b530      	push	{r4, r5, lr}
 80060f2:	4601      	mov	r1, r0
 80060f4:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 80060f6:	2200      	movs	r2, #0
 80060f8:	202b      	movs	r0, #43	; 0x2b
 80060fa:	f001 ff2b 	bl	8007f54 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80060fe:	202b      	movs	r0, #43	; 0x2b
 8006100:	f001 ff72 	bl	8007fe8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006104:	4b15      	ldr	r3, [pc, #84]	; (800615c <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006106:	a901      	add	r1, sp, #4
 8006108:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 800610a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 800610c:	4c14      	ldr	r4, [pc, #80]	; (8006160 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 800610e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006112:	4d14      	ldr	r5, [pc, #80]	; (8006164 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	9302      	str	r3, [sp, #8]
 800611e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006120:	f006 fcfa 	bl	800cb18 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006124:	f006 fcd8 	bl	800cad8 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 8006128:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800612a:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 800612c:	490e      	ldr	r1, [pc, #56]	; (8006168 <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 800612e:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8006130:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006132:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006134:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8006138:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 800613c:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800613e:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8006140:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006142:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 8006144:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8006146:	f008 ffd9 	bl	800f0fc <HAL_TIM_Base_Init>
 800614a:	b110      	cbz	r0, 8006152 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 800614c:	2001      	movs	r0, #1
}
 800614e:	b009      	add	sp, #36	; 0x24
 8006150:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 8006152:	4620      	mov	r0, r4
 8006154:	f008 f9a6 	bl	800e4a4 <HAL_TIM_Base_Start_IT>
}
 8006158:	b009      	add	sp, #36	; 0x24
 800615a:	bd30      	pop	{r4, r5, pc}
 800615c:	40023800 	.word	0x40023800
 8006160:	20002c70 	.word	0x20002c70
 8006164:	431bde83 	.word	0x431bde83
 8006168:	40001800 	.word	0x40001800

0800616c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop

08006170 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006170:	e7fe      	b.n	8006170 <HardFault_Handler>
 8006172:	bf00      	nop

08006174 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006174:	e7fe      	b.n	8006174 <MemManage_Handler>
 8006176:	bf00      	nop

08006178 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006178:	e7fe      	b.n	8006178 <BusFault_Handler>
 800617a:	bf00      	nop

0800617c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800617c:	e7fe      	b.n	800617c <UsageFault_Handler>
 800617e:	bf00      	nop

08006180 <RCC_IRQHandler>:
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop

08006184 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006184:	4801      	ldr	r0, [pc, #4]	; (800618c <DMA1_Stream0_IRQHandler+0x8>)
 8006186:	f002 bd0f 	b.w	8008ba8 <HAL_DMA_IRQHandler>
 800618a:	bf00      	nop
 800618c:	20001ef4 	.word	0x20001ef4

08006190 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <DMA1_Stream1_IRQHandler+0x8>)
 8006192:	f002 bd09 	b.w	8008ba8 <HAL_DMA_IRQHandler>
 8006196:	bf00      	nop
 8006198:	20001e94 	.word	0x20001e94

0800619c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800619c:	4801      	ldr	r0, [pc, #4]	; (80061a4 <DMA1_Stream5_IRQHandler+0x8>)
 800619e:	f002 bd03 	b.w	8008ba8 <HAL_DMA_IRQHandler>
 80061a2:	bf00      	nop
 80061a4:	20001e34 	.word	0x20001e34

080061a8 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80061a8:	4801      	ldr	r0, [pc, #4]	; (80061b0 <DMA1_Stream6_IRQHandler+0x8>)
 80061aa:	f002 bcfd 	b.w	8008ba8 <HAL_DMA_IRQHandler>
 80061ae:	bf00      	nop
 80061b0:	20001fb4 	.word	0x20001fb4

080061b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80061b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80061b6:	4805      	ldr	r0, [pc, #20]	; (80061cc <ADC_IRQHandler+0x18>)
 80061b8:	f001 fca8 	bl	8007b0c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80061bc:	4804      	ldr	r0, [pc, #16]	; (80061d0 <ADC_IRQHandler+0x1c>)
 80061be:	f001 fca5 	bl	8007b0c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80061c2:	4804      	ldr	r0, [pc, #16]	; (80061d4 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80061c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 80061c8:	f001 bca0 	b.w	8007b0c <HAL_ADC_IRQHandler>
 80061cc:	20001cc4 	.word	0x20001cc4
 80061d0:	20001d0c 	.word	0x20001d0c
 80061d4:	20001d54 	.word	0x20001d54

080061d8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80061d8:	4801      	ldr	r0, [pc, #4]	; (80061e0 <TIM2_IRQHandler+0x8>)
 80061da:	f008 be07 	b.w	800edec <HAL_TIM_IRQHandler>
 80061de:	bf00      	nop
 80061e0:	2000239c 	.word	0x2000239c

080061e4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80061e4:	4801      	ldr	r0, [pc, #4]	; (80061ec <TIM3_IRQHandler+0x8>)
 80061e6:	f008 be01 	b.w	800edec <HAL_TIM_IRQHandler>
 80061ea:	bf00      	nop
 80061ec:	200023e8 	.word	0x200023e8

080061f0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80061f0:	4801      	ldr	r0, [pc, #4]	; (80061f8 <USART2_IRQHandler+0x8>)
 80061f2:	f00b b87f 	b.w	80112f4 <HAL_UART_IRQHandler>
 80061f6:	bf00      	nop
 80061f8:	20002564 	.word	0x20002564

080061fc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80061fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006200:	f004 bc4c 	b.w	800aa9c <HAL_GPIO_EXTI_IRQHandler>

08006204 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <TIM8_BRK_TIM12_IRQHandler+0x8>)
 8006206:	f008 bdf1 	b.w	800edec <HAL_TIM_IRQHandler>
 800620a:	bf00      	nop
 800620c:	20002c70 	.word	0x20002c70

08006210 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006210:	4801      	ldr	r0, [pc, #4]	; (8006218 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8006212:	f008 bdeb 	b.w	800edec <HAL_TIM_IRQHandler>
 8006216:	bf00      	nop
 8006218:	20002350 	.word	0x20002350

0800621c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800621c:	4801      	ldr	r0, [pc, #4]	; (8006224 <DMA1_Stream7_IRQHandler+0x8>)
 800621e:	f002 bcc3 	b.w	8008ba8 <HAL_DMA_IRQHandler>
 8006222:	bf00      	nop
 8006224:	20001f54 	.word	0x20001f54

08006228 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006228:	4801      	ldr	r0, [pc, #4]	; (8006230 <TIM5_IRQHandler+0x8>)
 800622a:	f008 bddf 	b.w	800edec <HAL_TIM_IRQHandler>
 800622e:	bf00      	nop
 8006230:	20002480 	.word	0x20002480

08006234 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006234:	4801      	ldr	r0, [pc, #4]	; (800623c <UART5_IRQHandler+0x8>)
 8006236:	f00b b85d 	b.w	80112f4 <HAL_UART_IRQHandler>
 800623a:	bf00      	nop
 800623c:	200026f0 	.word	0x200026f0

08006240 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8006240:	4804      	ldr	r0, [pc, #16]	; (8006254 <TIM6_DAC_IRQHandler+0x14>)
{
 8006242:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 8006244:	f002 f8e2 	bl	800840c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8006248:	4803      	ldr	r0, [pc, #12]	; (8006258 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800624a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800624e:	f008 bdcd 	b.w	800edec <HAL_TIM_IRQHandler>
 8006252:	bf00      	nop
 8006254:	20001dc0 	.word	0x20001dc0
 8006258:	200024cc 	.word	0x200024cc

0800625c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800625c:	4801      	ldr	r0, [pc, #4]	; (8006264 <DMA2_Stream1_IRQHandler+0x8>)
 800625e:	f002 bca3 	b.w	8008ba8 <HAL_DMA_IRQHandler>
 8006262:	bf00      	nop
 8006264:	20002014 	.word	0x20002014

08006268 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006268:	4801      	ldr	r0, [pc, #4]	; (8006270 <DMA2_Stream4_IRQHandler+0x8>)
 800626a:	f002 bc9d 	b.w	8008ba8 <HAL_DMA_IRQHandler>
 800626e:	bf00      	nop
 8006270:	20001dd4 	.word	0x20001dd4

08006274 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8006274:	4801      	ldr	r0, [pc, #4]	; (800627c <ETH_IRQHandler+0x8>)
 8006276:	f003 bc1b 	b.w	8009ab0 <HAL_ETH_IRQHandler>
 800627a:	bf00      	nop
 800627c:	20005ea0 	.word	0x20005ea0

08006280 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006280:	4801      	ldr	r0, [pc, #4]	; (8006288 <OTG_FS_IRQHandler+0x8>)
 8006282:	f005 bb29 	b.w	800b8d8 <HAL_PCD_IRQHandler>
 8006286:	bf00      	nop
 8006288:	2002f4ec 	.word	0x2002f4ec

0800628c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800628c:	4801      	ldr	r0, [pc, #4]	; (8006294 <DMA2_Stream6_IRQHandler+0x8>)
 800628e:	f002 bc8b 	b.w	8008ba8 <HAL_DMA_IRQHandler>
 8006292:	bf00      	nop
 8006294:	20002074 	.word	0x20002074

08006298 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006298:	4801      	ldr	r0, [pc, #4]	; (80062a0 <USART6_IRQHandler+0x8>)
 800629a:	f00b b82b 	b.w	80112f4 <HAL_UART_IRQHandler>
 800629e:	bf00      	nop
 80062a0:	20002774 	.word	0x20002774

080062a4 <FPU_IRQHandler>:
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop

080062a8 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80062a8:	4801      	ldr	r0, [pc, #4]	; (80062b0 <UART8_IRQHandler+0x8>)
 80062aa:	f00b b823 	b.w	80112f4 <HAL_UART_IRQHandler>
 80062ae:	bf00      	nop
 80062b0:	2000287c 	.word	0x2000287c

080062b4 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 80062b4:	2001      	movs	r0, #1
 80062b6:	4770      	bx	lr

080062b8 <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 80062b8:	4b02      	ldr	r3, [pc, #8]	; (80062c4 <_kill+0xc>)
 80062ba:	2216      	movs	r2, #22
	return -1;
}
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80062c0:	601a      	str	r2, [r3, #0]
}
 80062c2:	4770      	bx	lr
 80062c4:	2002e014 	.word	0x2002e014

080062c8 <_exit>:
	errno = EINVAL;
 80062c8:	4b01      	ldr	r3, [pc, #4]	; (80062d0 <_exit+0x8>)
 80062ca:	2216      	movs	r2, #22
 80062cc:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 80062ce:	e7fe      	b.n	80062ce <_exit+0x6>
 80062d0:	2002e014 	.word	0x2002e014

080062d4 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80062d4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80062d6:	1e16      	subs	r6, r2, #0
 80062d8:	dd07      	ble.n	80062ea <_read+0x16>
 80062da:	460c      	mov	r4, r1
 80062dc:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 80062de:	f3af 8000 	nop.w
 80062e2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80062e6:	42a5      	cmp	r5, r4
 80062e8:	d1f9      	bne.n	80062de <_read+0xa>
	}

	return len;
}
 80062ea:	4630      	mov	r0, r6
 80062ec:	bd70      	pop	{r4, r5, r6, pc}
 80062ee:	bf00      	nop

080062f0 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop

080062f8 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 80062f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80062fc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80062fe:	604b      	str	r3, [r1, #4]
}
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop

08006304 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8006304:	2001      	movs	r0, #1
 8006306:	4770      	bx	lr

08006308 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8006308:	2000      	movs	r0, #0
 800630a:	4770      	bx	lr

0800630c <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800630c:	490d      	ldr	r1, [pc, #52]	; (8006344 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 800630e:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006310:	4a0d      	ldr	r2, [pc, #52]	; (8006348 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8006312:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8006314:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006316:	4c0d      	ldr	r4, [pc, #52]	; (800634c <_sbrk+0x40>)
 8006318:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 800631a:	b170      	cbz	r0, 800633a <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800631c:	4403      	add	r3, r0
 800631e:	4293      	cmp	r3, r2
 8006320:	d803      	bhi.n	800632a <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 8006322:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 8006326:	600b      	str	r3, [r1, #0]
}
 8006328:	4770      	bx	lr
		errno = ENOMEM;
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <_sbrk+0x44>)
 800632c:	220c      	movs	r2, #12
		return (void*) -1;
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006332:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 8006336:	601a      	str	r2, [r3, #0]
}
 8006338:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 800633a:	4c06      	ldr	r4, [pc, #24]	; (8006354 <_sbrk+0x48>)
 800633c:	4620      	mov	r0, r4
 800633e:	600c      	str	r4, [r1, #0]
 8006340:	e7ec      	b.n	800631c <_sbrk+0x10>
 8006342:	bf00      	nop
 8006344:	20002cc0 	.word	0x20002cc0
 8006348:	20080000 	.word	0x20080000
 800634c:	00006800 	.word	0x00006800
 8006350:	2002e014 	.word	0x2002e014
 8006354:	2002f928 	.word	0x2002f928

08006358 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006358:	4a0f      	ldr	r2, [pc, #60]	; (8006398 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 800635a:	4b10      	ldr	r3, [pc, #64]	; (800639c <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800635c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8006360:	490f      	ldr	r1, [pc, #60]	; (80063a0 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006362:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8006366:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006368:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 800636c:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	f040 0001 	orr.w	r0, r0, #1
 8006374:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 8006376:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 800637c:	4809      	ldr	r0, [pc, #36]	; (80063a4 <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 800637e:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8006380:	6058      	str	r0, [r3, #4]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006382:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8006386:	6819      	ldr	r1, [r3, #0]
 8006388:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800638c:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 800638e:	60dc      	str	r4, [r3, #12]
#endif
}
 8006390:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006394:	6090      	str	r0, [r2, #8]
}
 8006396:	4770      	bx	lr
 8006398:	e000ed00 	.word	0xe000ed00
 800639c:	40023800 	.word	0x40023800
 80063a0:	fef6ffff 	.word	0xfef6ffff
 80063a4:	24003010 	.word	0x24003010

080063a8 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 80063a8:	680b      	ldr	r3, [r1, #0]
 80063aa:	4a03      	ldr	r2, [pc, #12]	; (80063b8 <dnsfound+0x10>)
		ip_ready = -1;
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bf08      	it	eq
 80063b0:	f04f 33ff 	moveq.w	r3, #4294967295
 80063b4:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 80063b6:	4770      	bx	lr
 80063b8:	20002cd4 	.word	0x20002cd4

080063bc <myreboot>:
void myreboot(char *msg) {
 80063bc:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 80063be:	480a      	ldr	r0, [pc, #40]	; (80063e8 <myreboot+0x2c>)
void myreboot(char *msg) {
 80063c0:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 80063c2:	f01e f87b 	bl	80244bc <iprintf>
	osDelay(2000);
 80063c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80063ca:	f00d ff1b 	bl	8014204 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80063ce:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80063d2:	4906      	ldr	r1, [pc, #24]	; (80063ec <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80063d4:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80063d6:	68ca      	ldr	r2, [r1, #12]
 80063d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80063dc:	4313      	orrs	r3, r2
 80063de:	60cb      	str	r3, [r1, #12]
 80063e0:	f3bf 8f4f 	dsb	sy
    __NOP();
 80063e4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80063e6:	e7fd      	b.n	80063e4 <myreboot+0x28>
 80063e8:	0802a53c 	.word	0x0802a53c
 80063ec:	e000ed00 	.word	0xe000ed00
 80063f0:	05fa0004 	.word	0x05fa0004

080063f4 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 80063f4:	b500      	push	{lr}
 80063f6:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 80063f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80063fc:	4a16      	ldr	r2, [pc, #88]	; (8006458 <sendudp+0x64>)
 80063fe:	f018 ff13 	bl	801f228 <udp_sendto>
 8006402:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8006406:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800640a:	b943      	cbnz	r3, 800641e <sendudp+0x2a>
 800640c:	b25a      	sxtb	r2, r3
		busycount = 0;
 800640e:	4b13      	ldr	r3, [pc, #76]	; (800645c <sendudp+0x68>)
 8006410:	601a      	str	r2, [r3, #0]
	return (err);
 8006412:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006416:	b240      	sxtb	r0, r0
 8006418:	b003      	add	sp, #12
 800641a:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 800641e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006422:	480f      	ldr	r0, [pc, #60]	; (8006460 <sendudp+0x6c>)
 8006424:	b249      	sxtb	r1, r1
 8006426:	f01e f849 	bl	80244bc <iprintf>
		vTaskDelay(100); //some delay!
 800642a:	2064      	movs	r0, #100	; 0x64
 800642c:	f00f fa0c 	bl	8015848 <vTaskDelay>
		if (err == ERR_MEM) {
 8006430:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006434:	2bff      	cmp	r3, #255	; 0xff
 8006436:	d00c      	beq.n	8006452 <sendudp+0x5e>
		if (err == ERR_USE) {
 8006438:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800643c:	2bf8      	cmp	r3, #248	; 0xf8
 800643e:	d1e8      	bne.n	8006412 <sendudp+0x1e>
			if (busycount++ > 10)
 8006440:	4a06      	ldr	r2, [pc, #24]	; (800645c <sendudp+0x68>)
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	1c59      	adds	r1, r3, #1
 8006446:	2b0a      	cmp	r3, #10
 8006448:	6011      	str	r1, [r2, #0]
 800644a:	dde2      	ble.n	8006412 <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 800644c:	4805      	ldr	r0, [pc, #20]	; (8006464 <sendudp+0x70>)
 800644e:	f7ff ffb5 	bl	80063bc <myreboot>
			myreboot("sendudp: out of mem");
 8006452:	4805      	ldr	r0, [pc, #20]	; (8006468 <sendudp+0x74>)
 8006454:	f7ff ffb2 	bl	80063bc <myreboot>
 8006458:	20002cec 	.word	0x20002cec
 800645c:	20002cc4 	.word	0x20002cc4
 8006460:	0802a550 	.word	0x0802a550
 8006464:	0802a578 	.word	0x0802a578
 8006468:	0802a564 	.word	0x0802a564

0800646c <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800646c:	4b25      	ldr	r3, [pc, #148]	; (8006504 <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 800646e:	4684      	mov	ip, r0
 8006470:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006472:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8006476:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006478:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800647c:	4c22      	ldr	r4, [pc, #136]	; (8006508 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 800647e:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006480:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006482:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006486:	4c21      	ldr	r4, [pc, #132]	; (800650c <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006488:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800648c:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8006490:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006494:	4c1e      	ldr	r4, [pc, #120]	; (8006510 <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006496:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800649a:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800649e:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80064a2:	4a1c      	ldr	r2, [pc, #112]	; (8006514 <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80064a4:	bfc8      	it	gt
 80064a6:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80064aa:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 80064ae:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80064b0:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	4d18      	ldr	r5, [pc, #96]	; (8006518 <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80064b8:	4a18      	ldr	r2, [pc, #96]	; (800651c <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80064be:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80064c0:	bfb8      	it	lt
 80064c2:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80064c4:	6f66      	ldr	r6, [r4, #116]	; 0x74
 80064c6:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80064c8:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80064ca:	4d15      	ldr	r5, [pc, #84]	; (8006520 <sendstatus+0xb4>)
 80064cc:	b292      	uxth	r2, r2
 80064ce:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80064d0:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80064d4:	432a      	orrs	r2, r5
 80064d6:	4d13      	ldr	r5, [pc, #76]	; (8006524 <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80064d8:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80064da:	4035      	ands	r5, r6
 80064dc:	432a      	orrs	r2, r5
 80064de:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80064e0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 80064e4:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 80064e6:	4a10      	ldr	r2, [pc, #64]	; (8006528 <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 80064e8:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 80064ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80064f0:	f7ff ff80 	bl	80063f4 <sendudp>
 80064f4:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	3301      	adds	r3, #1
 80064fc:	6023      	str	r3, [r4, #0]
}
 80064fe:	b002      	add	sp, #8
 8006500:	bd70      	pop	{r4, r5, r6, pc}
 8006502:	bf00      	nop
 8006504:	20000748 	.word	0x20000748
 8006508:	200006f4 	.word	0x200006f4
 800650c:	20002c58 	.word	0x20002c58
 8006510:	20002b24 	.word	0x20002b24
 8006514:	20000700 	.word	0x20000700
 8006518:	20000002 	.word	0x20000002
 800651c:	200006fc 	.word	0x200006fc
 8006520:	200006dc 	.word	0x200006dc
 8006524:	ffff0000 	.word	0xffff0000
 8006528:	20002cec 	.word	0x20002cec

0800652c <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	4604      	mov	r4, r0
 8006530:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 8006532:	4818      	ldr	r0, [pc, #96]	; (8006594 <dnslookup+0x68>)
 8006534:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 8006536:	4e18      	ldr	r6, [pc, #96]	; (8006598 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 8006538:	f01d ffc0 	bl	80244bc <iprintf>
	ip_ready = 0;
 800653c:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 800653e:	4620      	mov	r0, r4
 8006540:	4a16      	ldr	r2, [pc, #88]	; (800659c <dnslookup+0x70>)
 8006542:	4639      	mov	r1, r7
	ip_ready = 0;
 8006544:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8006546:	f012 f9d3 	bl	80188f0 <dns_gethostbyname>
 800654a:	4604      	mov	r4, r0

	switch (err) {
 800654c:	3005      	adds	r0, #5
 800654e:	d005      	beq.n	800655c <dnslookup+0x30>
 8006550:	b114      	cbz	r4, 8006558 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 8006552:	4813      	ldr	r0, [pc, #76]	; (80065a0 <dnslookup+0x74>)
 8006554:	f01d ffb2 	bl	80244bc <iprintf>
		break;
	}
	return (err);
}
 8006558:	4620      	mov	r0, r4
 800655a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 800655c:	4811      	ldr	r0, [pc, #68]	; (80065a4 <dnslookup+0x78>)
 800655e:	2514      	movs	r5, #20
 8006560:	f01d ffac 	bl	80244bc <iprintf>
		for (i = 0; i < 20; i++) {
 8006564:	e001      	b.n	800656a <dnslookup+0x3e>
 8006566:	3d01      	subs	r5, #1
 8006568:	d0f3      	beq.n	8006552 <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 800656a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800656e:	f00d fe49 	bl	8014204 <osDelay>
			printf(".");
 8006572:	202e      	movs	r0, #46	; 0x2e
 8006574:	f01d ffba 	bl	80244ec <putchar>
			if (ip_ready) {
 8006578:	6833      	ldr	r3, [r6, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0f3      	beq.n	8006566 <dnslookup+0x3a>
				if (ip_ready == -1) {
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	d002      	beq.n	8006588 <dnslookup+0x5c>
				return (ERR_OK);
 8006582:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 8006584:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 8006586:	e7e7      	b.n	8006558 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 8006588:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 800658a:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 800658e:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8006590:	e7e2      	b.n	8006558 <dnslookup+0x2c>
 8006592:	bf00      	nop
 8006594:	0802a594 	.word	0x0802a594
 8006598:	20002cd4 	.word	0x20002cd4
 800659c:	080063a9 	.word	0x080063a9
 80065a0:	0802a5d0 	.word	0x0802a5d0
 80065a4:	0802a5a8 	.word	0x0802a5a8
 80065a8:	0802a5c4 	.word	0x0802a5c4

080065ac <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 80065ac:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 80065ae:	4914      	ldr	r1, [pc, #80]	; (8006600 <locateudp+0x54>)
{
 80065b0:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 80065b2:	4814      	ldr	r0, [pc, #80]	; (8006604 <locateudp+0x58>)
 80065b4:	f01d ff82 	bl	80244bc <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 80065b8:	4913      	ldr	r1, [pc, #76]	; (8006608 <locateudp+0x5c>)
 80065ba:	4811      	ldr	r0, [pc, #68]	; (8006600 <locateudp+0x54>)
 80065bc:	f7ff ffb6 	bl	800652c <dnslookup>
 80065c0:	b240      	sxtb	r0, r0
 80065c2:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 80065c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80065ca:	b9a3      	cbnz	r3, 80065f6 <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 80065cc:	4b0e      	ldr	r3, [pc, #56]	; (8006608 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 80065ce:	490f      	ldr	r1, [pc, #60]	; (800660c <locateudp+0x60>)
	ip = udpdestip.addr;
 80065d0:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 80065d2:	480f      	ldr	r0, [pc, #60]	; (8006610 <locateudp+0x64>)
 80065d4:	0e22      	lsrs	r2, r4, #24
 80065d6:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80065da:	e9cd 3200 	strd	r3, r2, [sp]
 80065de:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80065e2:	b2e2      	uxtb	r2, r4
 80065e4:	f01e f8f2 	bl	80247cc <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 80065e8:	4909      	ldr	r1, [pc, #36]	; (8006610 <locateudp+0x64>)
 80065ea:	480a      	ldr	r0, [pc, #40]	; (8006614 <locateudp+0x68>)
 80065ec:	f01d ff66 	bl	80244bc <iprintf>
	return (ip);
}
 80065f0:	4620      	mov	r0, r4
 80065f2:	b004      	add	sp, #16
 80065f4:	bd10      	pop	{r4, pc}
		rebootme(3);
 80065f6:	2003      	movs	r0, #3
 80065f8:	f7fb feb6 	bl	8002368 <rebootme>
 80065fc:	e7e6      	b.n	80065cc <locateudp+0x20>
 80065fe:	bf00      	nop
 8006600:	20002d38 	.word	0x20002d38
 8006604:	0802a5f4 	.word	0x0802a5f4
 8006608:	20002cec 	.word	0x20002cec
 800660c:	0802a614 	.word	0x0802a614
 8006610:	20002cdc 	.word	0x20002cdc
 8006614:	0802a624 	.word	0x0802a624

08006618 <startudp>:

void startudp(uint32_t ip) {
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	ed2d 8b02 	vpush	{d8}
 8006620:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8006622:	f00f fa39 	bl	8015a98 <xTaskGetCurrentTaskHandle>
 8006626:	4b75      	ldr	r3, [pc, #468]	; (80067fc <startudp+0x1e4>)
 8006628:	4602      	mov	r2, r0
	osDelay(1000);
 800662a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800662e:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8006630:	f00d fde8 	bl	8014204 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8006634:	f018 fece 	bl	801f3d4 <udp_new>
	if (pcb == NULL) {
 8006638:	2800      	cmp	r0, #0
 800663a:	f000 80ce 	beq.w	80067da <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 800663e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006642:	496f      	ldr	r1, [pc, #444]	; (8006800 <startudp+0x1e8>)
 8006644:	ee08 0a10 	vmov	s16, r0
 8006648:	f018 fc60 	bl	801ef0c <udp_bind>
 800664c:	4605      	mov	r5, r0
 800664e:	2800      	cmp	r0, #0
 8006650:	f040 80bf 	bne.w	80067d2 <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8006654:	2241      	movs	r2, #65	; 0x41
 8006656:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 800665a:	2036      	movs	r0, #54	; 0x36
 800665c:	f013 fb02 	bl	8019c64 <pbuf_alloc>

	if (p1 == NULL) {
 8006660:	9000      	str	r0, [sp, #0]
 8006662:	2800      	cmp	r0, #0
 8006664:	f000 80bd 	beq.w	80067e2 <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 8006668:	4c66      	ldr	r4, [pc, #408]	; (8006804 <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 800666a:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 800666e:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8006670:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8006676:	2241      	movs	r2, #65	; 0x41
 8006678:	f013 faf4 	bl	8019c64 <pbuf_alloc>
	if (p2 == NULL) {
 800667c:	9001      	str	r0, [sp, #4]
 800667e:	2800      	cmp	r0, #0
 8006680:	f000 80b7 	beq.w	80067f2 <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8006684:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8006686:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8006688:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800668a:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 800668c:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8006690:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8006692:	2201      	movs	r2, #1
 8006694:	f013 fae6 	bl	8019c64 <pbuf_alloc>
	if (ps == NULL) {
 8006698:	ee08 0a90 	vmov	s17, r0
 800669c:	2800      	cmp	r0, #0
 800669e:	f000 80aa 	beq.w	80067f6 <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 80066a2:	4c59      	ldr	r4, [pc, #356]	; (8006808 <startudp+0x1f0>)
 80066a4:	4f59      	ldr	r7, [pc, #356]	; (800680c <startudp+0x1f4>)
 80066a6:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 80066a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80066ac:	f00d fdaa 	bl	8014204 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 80066b0:	4b57      	ldr	r3, [pc, #348]	; (8006810 <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 80066b2:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 80066b4:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 80066b6:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80066b8:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80066ba:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 80066be:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 80066c2:	4b54      	ldr	r3, [pc, #336]	; (8006814 <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 80066c4:	4854      	ldr	r0, [pc, #336]	; (8006818 <startudp+0x200>)
 80066c6:	4e55      	ldr	r6, [pc, #340]	; (800681c <startudp+0x204>)
 80066c8:	f8df b188 	ldr.w	fp, [pc, #392]	; 8006854 <startudp+0x23c>
 80066cc:	f8df a188 	ldr.w	sl, [pc, #392]	; 8006858 <startudp+0x240>
 80066d0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800685c <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 80066d4:	4d52      	ldr	r5, [pc, #328]	; (8006820 <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 80066d6:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 80066d8:	f01d ff8c 	bl	80245f4 <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80066dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80066e0:	2001      	movs	r0, #1
 80066e2:	f00f fb21 	bl	8015d28 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d05a      	beq.n	80067a0 <startudp+0x188>
			sigsend = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 80066ee:	7833      	ldrb	r3, [r6, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0f3      	beq.n	80066dc <startudp+0xc4>
 80066f4:	f8db 3000 	ldr.w	r3, [fp]
 80066f8:	f8da 2000 	ldr.w	r2, [sl]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	d1ed      	bne.n	80066dc <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8006700:	4a48      	ldr	r2, [pc, #288]	; (8006824 <startudp+0x20c>)
 8006702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	2a00      	cmp	r2, #0
 800670a:	bf08      	it	eq
 800670c:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 800670e:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8006710:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8006712:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8006714:	6822      	ldr	r2, [r4, #0]
 8006716:	684b      	ldr	r3, [r1, #4]
 8006718:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	684a      	ldr	r2, [r1, #4]
 800671e:	0a1b      	lsrs	r3, r3, #8
 8006720:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	684a      	ldr	r2, [r1, #4]
 8006726:	0c1b      	lsrs	r3, r3, #16
 8006728:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 800672a:	7b89      	ldrb	r1, [r1, #14]
 800672c:	2901      	cmp	r1, #1
 800672e:	d006      	beq.n	800673e <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8006730:	4628      	mov	r0, r5
 8006732:	f01d fec3 	bl	80244bc <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 8006736:	f899 100e 	ldrb.w	r1, [r9, #14]
 800673a:	2901      	cmp	r1, #1
 800673c:	d1f8      	bne.n	8006730 <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 800673e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006742:	4649      	mov	r1, r9
 8006744:	4a38      	ldr	r2, [pc, #224]	; (8006828 <startudp+0x210>)
 8006746:	ee18 0a10 	vmov	r0, s16
 800674a:	f7ff fe53 	bl	80063f4 <sendudp>
 800674e:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 8006752:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006756:	3301      	adds	r3, #1
 8006758:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 800675c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006760:	3301      	adds	r3, #1
 8006762:	b29b      	uxth	r3, r3
 8006764:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	3301      	adds	r3, #1
 800676c:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 800676e:	4b2f      	ldr	r3, [pc, #188]	; (800682c <startudp+0x214>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0b2      	beq.n	80066dc <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 8006776:	492e      	ldr	r1, [pc, #184]	; (8006830 <startudp+0x218>)
 8006778:	ee18 2a10 	vmov	r2, s16
 800677c:	2001      	movs	r0, #1
 800677e:	780b      	ldrb	r3, [r1, #0]
 8006780:	ee18 1a90 	vmov	r1, s17
 8006784:	f7ff fe72 	bl	800646c <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8006788:	2300      	movs	r3, #0
 800678a:	4a28      	ldr	r2, [pc, #160]	; (800682c <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 800678c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006790:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 8006792:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 8006796:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8006798:	f00f fac6 	bl	8015d28 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 800679c:	2800      	cmp	r0, #0
 800679e:	d1a4      	bne.n	80066ea <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 80067a0:	4b24      	ldr	r3, [pc, #144]	; (8006834 <startudp+0x21c>)
 80067a2:	f8d8 2000 	ldr.w	r2, [r8]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d097      	beq.n	80066dc <startudp+0xc4>
 80067ac:	4a22      	ldr	r2, [pc, #136]	; (8006838 <startudp+0x220>)
 80067ae:	4923      	ldr	r1, [pc, #140]	; (800683c <startudp+0x224>)
 80067b0:	fb02 f203 	mul.w	r2, r2, r3
 80067b4:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 80067b8:	d390      	bcc.n	80066dc <startudp+0xc4>
		talive = t1sec;
 80067ba:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 80067be:	ee18 2a10 	vmov	r2, s16
 80067c2:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <startudp+0x218>)
 80067c4:	ee18 1a90 	vmov	r1, s17
 80067c8:	2002      	movs	r0, #2
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f7ff fe4e 	bl	800646c <sendstatus>
 80067d0:	e784      	b.n	80066dc <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 80067d2:	481b      	ldr	r0, [pc, #108]	; (8006840 <startudp+0x228>)
 80067d4:	f01d ff0e 	bl	80245f4 <puts>
		for (;;)
 80067d8:	e7fe      	b.n	80067d8 <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 80067da:	481a      	ldr	r0, [pc, #104]	; (8006844 <startudp+0x22c>)
 80067dc:	f01d ff0a 	bl	80245f4 <puts>
		for (;;)
 80067e0:	e7fe      	b.n	80067e0 <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 80067e2:	4819      	ldr	r0, [pc, #100]	; (8006848 <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 80067e4:	b005      	add	sp, #20
 80067e6:	ecbd 8b02 	vpop	{d8}
 80067ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 80067ee:	f01d bf01 	b.w	80245f4 <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 80067f2:	4816      	ldr	r0, [pc, #88]	; (800684c <startudp+0x234>)
 80067f4:	e7f6      	b.n	80067e4 <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 80067f6:	4816      	ldr	r0, [pc, #88]	; (8006850 <startudp+0x238>)
 80067f8:	e7f4      	b.n	80067e4 <startudp+0x1cc>
 80067fa:	bf00      	nop
 80067fc:	200007fc 	.word	0x200007fc
 8006800:	080e1ff0 	.word	0x080e1ff0
 8006804:	2000074c 	.word	0x2000074c
 8006808:	20002b24 	.word	0x20002b24
 800680c:	20000764 	.word	0x20000764
 8006810:	dec0edfe 	.word	0xdec0edfe
 8006814:	2000074a 	.word	0x2000074a
 8006818:	0802a6d0 	.word	0x0802a6d0
 800681c:	20002cd0 	.word	0x20002cd0
 8006820:	0802a704 	.word	0x0802a704
 8006824:	200006f0 	.word	0x200006f0
 8006828:	20002cec 	.word	0x20002cec
 800682c:	2000075c 	.word	0x2000075c
 8006830:	200006dc 	.word	0x200006dc
 8006834:	20002938 	.word	0x20002938
 8006838:	eeeeeeef 	.word	0xeeeeeeef
 800683c:	02222222 	.word	0x02222222
 8006840:	0802a654 	.word	0x0802a654
 8006844:	0802a638 	.word	0x0802a638
 8006848:	0802a670 	.word	0x0802a670
 800684c:	0802a690 	.word	0x0802a690
 8006850:	0802a6b0 	.word	0x0802a6b0
 8006854:	20002ccc 	.word	0x20002ccc
 8006858:	200006fc 	.word	0x200006fc
 800685c:	20002cd8 	.word	0x20002cd8

08006860 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 8006862:	4b52      	ldr	r3, [pc, #328]	; (80069ac <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8006864:	4606      	mov	r6, r0
 8006866:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006868:	4851      	ldr	r0, [pc, #324]	; (80069b0 <tag_callback+0x150>)
	if (ledsenabled) {
 800686a:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 800686c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 8006870:	b35a      	cbz	r2, 80068ca <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006872:	f004 f8fb 	bl	800aa6c <HAL_GPIO_TogglePin>
 8006876:	4c4f      	ldr	r4, [pc, #316]	; (80069b4 <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8006878:	4d4f      	ldr	r5, [pc, #316]	; (80069b8 <tag_callback+0x158>)
 800687a:	e001      	b.n	8006880 <tag_callback+0x20>
 800687c:	f01d feba 	bl	80245f4 <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8006880:	2101      	movs	r1, #1
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	f00e fa82 	bl	8014d8c <xQueueSemaphoreTake>
 8006888:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 800688a:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 800688c:	2b01      	cmp	r3, #1
 800688e:	d1f5      	bne.n	800687c <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8006890:	1f32      	subs	r2, r6, #4
 8006892:	2a07      	cmp	r2, #7
 8006894:	d81c      	bhi.n	80068d0 <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8006896:	4949      	ldr	r1, [pc, #292]	; (80069bc <tag_callback+0x15c>)
 8006898:	4093      	lsls	r3, r2
 800689a:	780a      	ldrb	r2, [r1, #0]
 800689c:	4013      	ands	r3, r2
 800689e:	4a48      	ldr	r2, [pc, #288]	; (80069c0 <tag_callback+0x160>)
 80068a0:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 80068a2:	bb5b      	cbnz	r3, 80068fc <tag_callback+0x9c>
			strcpy(newstring, "0");
 80068a4:	4b47      	ldr	r3, [pc, #284]	; (80069c4 <tag_callback+0x164>)
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80068aa:	2300      	movs	r3, #0
 80068ac:	6820      	ldr	r0, [r4, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	4619      	mov	r1, r3
 80068b2:	f00d ffd1 	bl	8014858 <xQueueGenericSend>
 80068b6:	2801      	cmp	r0, #1
 80068b8:	d002      	beq.n	80068c0 <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 80068ba:	4843      	ldr	r0, [pc, #268]	; (80069c8 <tag_callback+0x168>)
 80068bc:	f01d fe9a 	bl	80245f4 <puts>
	}
	return (strlen(newstring));
 80068c0:	4638      	mov	r0, r7
}
 80068c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 80068c6:	f7f9 bcc5 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 80068ca:	f004 f8b5 	bl	800aa38 <HAL_GPIO_WritePin>
 80068ce:	e7d2      	b.n	8006876 <tag_callback+0x16>
		switch (index) {
 80068d0:	2e14      	cmp	r6, #20
 80068d2:	d817      	bhi.n	8006904 <tag_callback+0xa4>
 80068d4:	e8df f006 	tbb	[pc, r6]
 80068d8:	0b655055 	.word	0x0b655055
 80068dc:	16161616 	.word	0x16161616
 80068e0:	16161616 	.word	0x16161616
 80068e4:	343d5a61 	.word	0x343d5a61
 80068e8:	464b2429 	.word	0x464b2429
 80068ec:	1c          	.byte	0x1c
 80068ed:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 80068ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068f2:	482f      	ldr	r0, [pc, #188]	; (80069b0 <tag_callback+0x150>)
 80068f4:	f004 f88e 	bl	800aa14 <HAL_GPIO_ReadPin>
 80068f8:	2801      	cmp	r0, #1
 80068fa:	d1d3      	bne.n	80068a4 <tag_callback+0x44>
			strcpy(newstring, "1");
 80068fc:	4b33      	ldr	r3, [pc, #204]	; (80069cc <tag_callback+0x16c>)
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	803b      	strh	r3, [r7, #0]
 8006902:	e7d2      	b.n	80068aa <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8006904:	4632      	mov	r2, r6
 8006906:	4932      	ldr	r1, [pc, #200]	; (80069d0 <tag_callback+0x170>)
 8006908:	4638      	mov	r0, r7
 800690a:	f01d ff5f 	bl	80247cc <siprintf>
			break;
 800690e:	e7cc      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8006910:	4b30      	ldr	r3, [pc, #192]	; (80069d4 <tag_callback+0x174>)
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	bf14      	ite	ne
 8006918:	2331      	movne	r3, #49	; 0x31
 800691a:	2330      	moveq	r3, #48	; 0x30
 800691c:	803b      	strh	r3, [r7, #0]
			break;
 800691e:	e7c4      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 8006920:	492d      	ldr	r1, [pc, #180]	; (80069d8 <tag_callback+0x178>)
 8006922:	4638      	mov	r0, r7
 8006924:	f01d fff9 	bl	802491a <strcpy>
			break;
 8006928:	e7bf      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 800692a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800692e:	482b      	ldr	r0, [pc, #172]	; (80069dc <tag_callback+0x17c>)
 8006930:	f004 f870 	bl	800aa14 <HAL_GPIO_ReadPin>
 8006934:	2800      	cmp	r0, #0
 8006936:	bf14      	ite	ne
 8006938:	2330      	movne	r3, #48	; 0x30
 800693a:	2331      	moveq	r3, #49	; 0x31
 800693c:	803b      	strh	r3, [r7, #0]
			break;
 800693e:	e7b4      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <tag_callback+0x180>)
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	f013 0f04 	tst.w	r3, #4
 8006948:	bf14      	ite	ne
 800694a:	2331      	movne	r3, #49	; 0x31
 800694c:	2330      	moveq	r3, #48	; 0x30
 800694e:	803b      	strh	r3, [r7, #0]
			break;
 8006950:	e7ab      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8006952:	4b23      	ldr	r3, [pc, #140]	; (80069e0 <tag_callback+0x180>)
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	f013 0f02 	tst.w	r3, #2
 800695a:	bf14      	ite	ne
 800695c:	2331      	movne	r3, #49	; 0x31
 800695e:	2330      	moveq	r3, #48	; 0x30
 8006960:	803b      	strh	r3, [r7, #0]
			break;
 8006962:	e7a2      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 8006964:	491f      	ldr	r1, [pc, #124]	; (80069e4 <tag_callback+0x184>)
 8006966:	4638      	mov	r0, r7
 8006968:	f01d ffd7 	bl	802491a <strcpy>
			break;
 800696c:	e79d      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 800696e:	491e      	ldr	r1, [pc, #120]	; (80069e8 <tag_callback+0x188>)
 8006970:	4638      	mov	r0, r7
 8006972:	f01d ffd2 	bl	802491a <strcpy>
			break;
 8006976:	e798      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 8006978:	491c      	ldr	r1, [pc, #112]	; (80069ec <tag_callback+0x18c>)
 800697a:	4638      	mov	r0, r7
 800697c:	f01d ffcd 	bl	802491a <strcpy>
			break;
 8006980:	e793      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 8006982:	491b      	ldr	r1, [pc, #108]	; (80069f0 <tag_callback+0x190>)
 8006984:	4638      	mov	r0, r7
 8006986:	f01d ffc8 	bl	802491a <strcpy>
			break;
 800698a:	e78e      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 800698c:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <tag_callback+0x180>)
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	3330      	adds	r3, #48	; 0x30
 8006996:	803b      	strh	r3, [r7, #0]
			break;
 8006998:	e787      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, "5");
 800699a:	4b16      	ldr	r3, [pc, #88]	; (80069f4 <tag_callback+0x194>)
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	803b      	strh	r3, [r7, #0]
			break;
 80069a0:	e783      	b.n	80068aa <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 80069a2:	4915      	ldr	r1, [pc, #84]	; (80069f8 <tag_callback+0x198>)
 80069a4:	4638      	mov	r0, r7
 80069a6:	f01d ffb8 	bl	802491a <strcpy>
			break;
 80069aa:	e77e      	b.n	80068aa <tag_callback+0x4a>
 80069ac:	20000270 	.word	0x20000270
 80069b0:	40020c00 	.word	0x40020c00
 80069b4:	20002934 	.word	0x20002934
 80069b8:	0802a7ec 	.word	0x0802a7ec
 80069bc:	20000274 	.word	0x20000274
 80069c0:	20002cf0 	.word	0x20002cf0
 80069c4:	080e1bcc 	.word	0x080e1bcc
 80069c8:	0802a818 	.word	0x0802a818
 80069cc:	0802a5cc 	.word	0x0802a5cc
 80069d0:	0802a7f8 	.word	0x0802a7f8
 80069d4:	20000010 	.word	0x20000010
 80069d8:	20000084 	.word	0x20000084
 80069dc:	40021000 	.word	0x40021000
 80069e0:	20002c58 	.word	0x20002c58
 80069e4:	20000014 	.word	0x20000014
 80069e8:	20000128 	.word	0x20000128
 80069ec:	20000074 	.word	0x20000074
 80069f0:	20000230 	.word	0x20000230
 80069f4:	080dffb0 	.word	0x080dffb0
 80069f8:	20000054 	.word	0x20000054

080069fc <returnpage>:
/* ---------------------------------------------- */
// http client
/* ---------------------------------------------- */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 80069fc:	b530      	push	{r4, r5, lr}
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 80069fe:	4c3d      	ldr	r4, [pc, #244]	; (8006af4 <returnpage+0xf8>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8006a00:	b08d      	sub	sp, #52	; 0x34
 8006a02:	4696      	mov	lr, r2
 8006a04:	f88d 000f 	strb.w	r0, [sp, #15]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8006a08:	f10d 0c1c 	add.w	ip, sp, #28
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8006a0c:	f88d 100e 	strb.w	r1, [sp, #14]
 8006a10:	f8ad 300c 	strh.w	r3, [sp, #12]
	volatile uint32_t sn;
	int nconv;
	volatile int p1, p2;

	if (errorm == 0) {
 8006a14:	f89d 500e 	ldrb.w	r5, [sp, #14]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8006a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	f8cc 3000 	str.w	r3, [ip]
	if (errorm == 0) {
 8006a24:	b10d      	cbz	r5, 8006a2a <returnpage+0x2e>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 8006a26:	b00d      	add	sp, #52	; 0x34
 8006a28:	bd30      	pop	{r4, r5, pc}
		nconv = sscanf(content, "%5u%48s%u%u", &sn, udp_target, &p1, &p2);
 8006a2a:	a905      	add	r1, sp, #20
 8006a2c:	ac06      	add	r4, sp, #24
 8006a2e:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <returnpage+0xfc>)
 8006a30:	aa04      	add	r2, sp, #16
 8006a32:	4670      	mov	r0, lr
 8006a34:	e9cd 1400 	strd	r1, r4, [sp]
 8006a38:	4930      	ldr	r1, [pc, #192]	; (8006afc <returnpage+0x100>)
 8006a3a:	f01d fee7 	bl	802480c <siscanf>
		if (nconv != EOF) {
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	d031      	beq.n	8006aa6 <returnpage+0xaa>
			switch (nconv) {
 8006a42:	2802      	cmp	r0, #2
 8006a44:	d020      	beq.n	8006a88 <returnpage+0x8c>
 8006a46:	dc13      	bgt.n	8006a70 <returnpage+0x74>
 8006a48:	2801      	cmp	r0, #1
 8006a4a:	d127      	bne.n	8006a9c <returnpage+0xa0>
				if (statuspkt.uid != sn) {
 8006a4c:	4a2c      	ldr	r2, [pc, #176]	; (8006b00 <returnpage+0x104>)
 8006a4e:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 8006a52:	9904      	ldr	r1, [sp, #16]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	428b      	cmp	r3, r1
 8006a58:	d0e5      	beq.n	8006a26 <returnpage+0x2a>
					statuspkt.uid = sn;
 8006a5a:	9b04      	ldr	r3, [sp, #16]
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8006a5c:	4829      	ldr	r0, [pc, #164]	; (8006b04 <returnpage+0x108>)
					statuspkt.uid = sn;
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8006a64:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8006a68:	b289      	uxth	r1, r1
 8006a6a:	f01d fd27 	bl	80244bc <iprintf>
 8006a6e:	e7da      	b.n	8006a26 <returnpage+0x2a>
			switch (nconv) {
 8006a70:	1ec3      	subs	r3, r0, #3
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d812      	bhi.n	8006a9c <returnpage+0xa0>
				if (p1 == 1) {		// reboot
 8006a76:	9b05      	ldr	r3, [sp, #20]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d030      	beq.n	8006ade <returnpage+0xe2>
				if (p1 == 2) {		// freeze the UDP streaming
 8006a7c:	9b05      	ldr	r3, [sp, #20]
 8006a7e:	2b02      	cmp	r3, #2
					globalfreeze = 1;
 8006a80:	4b21      	ldr	r3, [pc, #132]	; (8006b08 <returnpage+0x10c>)
				if (p1 == 2) {		// freeze the UDP streaming
 8006a82:	d026      	beq.n	8006ad2 <returnpage+0xd6>
					globalfreeze = 0;
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]
				if (strlen(udp_target) < 7) {					// bad url or ip address
 8006a88:	481b      	ldr	r0, [pc, #108]	; (8006af8 <returnpage+0xfc>)
 8006a8a:	f7f9 fbe3 	bl	8000254 <strlen>
 8006a8e:	2806      	cmp	r0, #6
 8006a90:	d918      	bls.n	8006ac4 <returnpage+0xc8>
				printf("Server -> Target UDP host: %s\n", udp_target);
 8006a92:	4919      	ldr	r1, [pc, #100]	; (8006af8 <returnpage+0xfc>)
 8006a94:	481d      	ldr	r0, [pc, #116]	; (8006b0c <returnpage+0x110>)
 8006a96:	f01d fd11 	bl	80244bc <iprintf>
 8006a9a:	e7d7      	b.n	8006a4c <returnpage+0x50>
				printf("Wrong number of params from Server -> %d\n", nconv);
 8006a9c:	4601      	mov	r1, r0
 8006a9e:	481c      	ldr	r0, [pc, #112]	; (8006b10 <returnpage+0x114>)
 8006aa0:	f01d fd0c 	bl	80244bc <iprintf>
				break;
 8006aa4:	e7bf      	b.n	8006a26 <returnpage+0x2a>
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 8006aa6:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8006aaa:	ac0c      	add	r4, sp, #48	; 0x30
 8006aac:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8006ab0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8006ab4:	4817      	ldr	r0, [pc, #92]	; (8006b14 <returnpage+0x118>)
 8006ab6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006aba:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8006abe:	f01d fcfd 	bl	80244bc <iprintf>
}
 8006ac2:	e7b0      	b.n	8006a26 <returnpage+0x2a>
					strcpy(udp_target, SERVER_DESTINATION);		// default it
 8006ac4:	4d14      	ldr	r5, [pc, #80]	; (8006b18 <returnpage+0x11c>)
 8006ac6:	4c0c      	ldr	r4, [pc, #48]	; (8006af8 <returnpage+0xfc>)
 8006ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	e7df      	b.n	8006a92 <returnpage+0x96>
					globalfreeze = 1;
 8006ad2:	2201      	movs	r2, #1
					printf("Server -> commands a streaming freeze\n");
 8006ad4:	4811      	ldr	r0, [pc, #68]	; (8006b1c <returnpage+0x120>)
					globalfreeze = 1;
 8006ad6:	601a      	str	r2, [r3, #0]
					printf("Server -> commands a streaming freeze\n");
 8006ad8:	f01d fd8c 	bl	80245f4 <puts>
 8006adc:	e7d4      	b.n	8006a88 <returnpage+0x8c>
					printf("Server -> commands a reboot...\n");
 8006ade:	4810      	ldr	r0, [pc, #64]	; (8006b20 <returnpage+0x124>)
 8006ae0:	f01d fd88 	bl	80245f4 <puts>
					osDelay(2000);
 8006ae4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006ae8:	f00d fb8c 	bl	8014204 <osDelay>
					rebootme(6);
 8006aec:	2006      	movs	r0, #6
 8006aee:	f7fb fc3b 	bl	8002368 <rebootme>
 8006af2:	e7c3      	b.n	8006a7c <returnpage+0x80>
 8006af4:	080287f4 	.word	0x080287f4
 8006af8:	20002d38 	.word	0x20002d38
 8006afc:	0802a830 	.word	0x0802a830
 8006b00:	20002b24 	.word	0x20002b24
 8006b04:	0802a8b8 	.word	0x0802a8b8
 8006b08:	20002ccc 	.word	0x20002ccc
 8006b0c:	0802a898 	.word	0x0802a898
 8006b10:	0802a8d8 	.word	0x0802a8d8
 8006b14:	0802a904 	.word	0x0802a904
 8006b18:	0802a884 	.word	0x0802a884
 8006b1c:	0802a85c 	.word	0x0802a85c
 8006b20:	0802a83c 	.word	0x0802a83c

08006b24 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8006b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	4615      	mov	r5, r2
 8006b2c:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8006b2e:	220a      	movs	r2, #10
 8006b30:	a903      	add	r1, sp, #12
 8006b32:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8006b34:	4699      	mov	r9, r3
 8006b36:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8006b38:	f01e fcde 	bl	80254f8 <strtol>
 8006b3c:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8006b3e:	4621      	mov	r1, r4
 8006b40:	462a      	mov	r2, r5
 8006b42:	4871      	ldr	r0, [pc, #452]	; (8006d08 <httpd_cgi_handler+0x1e4>)
 8006b44:	4633      	mov	r3, r6
 8006b46:	f01d fcb9 	bl	80244bc <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006b4a:	2d00      	cmp	r5, #0
 8006b4c:	dd37      	ble.n	8006bbe <httpd_cgi_handler+0x9a>
 8006b4e:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8006b50:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8006d38 <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8006b54:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8006d3c <httpd_cgi_handler+0x218>
		switch (j) {
 8006b58:	f1a6 030a 	sub.w	r3, r6, #10
 8006b5c:	2b0e      	cmp	r3, #14
 8006b5e:	f200 80cc 	bhi.w	8006cfa <httpd_cgi_handler+0x1d6>
 8006b62:	e8df f003 	tbb	[pc, r3]
 8006b66:	9eb6      	.short	0x9eb6
 8006b68:	08080808 	.word	0x08080808
 8006b6c:	08080808 	.word	0x08080808
 8006b70:	864d6073 	.word	0x864d6073
 8006b74:	3a          	.byte	0x3a
 8006b75:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 8006b76:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8006b78:	2101      	movs	r1, #1
 8006b7a:	f1a6 000c 	sub.w	r0, r6, #12
 8006b7e:	4b63      	ldr	r3, [pc, #396]	; (8006d0c <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8006b80:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8006b82:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8006b86:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 8006b88:	2a30      	cmp	r2, #48	; 0x30
 8006b8a:	d01b      	beq.n	8006bc4 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8006b8c:	781a      	ldrb	r2, [r3, #0]
 8006b8e:	4311      	orrs	r1, r2
 8006b90:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8006b92:	f001 0202 	and.w	r2, r1, #2
 8006b96:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8006b98:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 8006b9a:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8006b9c:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8006ba0:	f01d fc8c 	bl	80244bc <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8006ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ba8:	2301      	movs	r3, #1
 8006baa:	4a58      	ldr	r2, [pc, #352]	; (8006d0c <httpd_cgi_handler+0x1e8>)
 8006bac:	9100      	str	r1, [sp, #0]
 8006bae:	2188      	movs	r1, #136	; 0x88
 8006bb0:	4857      	ldr	r0, [pc, #348]	; (8006d10 <httpd_cgi_handler+0x1ec>)
 8006bb2:	f004 fa47 	bl	800b044 <HAL_I2C_Master_Transmit>
 8006bb6:	b960      	cbnz	r0, 8006bd2 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006bb8:	3401      	adds	r4, #1
 8006bba:	42a5      	cmp	r5, r4
 8006bbc:	d1cc      	bne.n	8006b58 <httpd_cgi_handler+0x34>
}
 8006bbe:	b005      	add	sp, #20
 8006bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	fa01 f600 	lsl.w	r6, r1, r0
 8006bca:	7819      	ldrb	r1, [r3, #0]
 8006bcc:	ea21 0106 	bic.w	r1, r1, r6
 8006bd0:	e7df      	b.n	8006b92 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8006bd2:	4850      	ldr	r0, [pc, #320]	; (8006d14 <httpd_cgi_handler+0x1f0>)
 8006bd4:	f01d fc72 	bl	80244bc <iprintf>
 8006bd8:	e7ee      	b.n	8006bb8 <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	3c01      	subs	r4, #1
 8006bde:	484e      	ldr	r0, [pc, #312]	; (8006d18 <httpd_cgi_handler+0x1f4>)
 8006be0:	440c      	add	r4, r1
 8006be2:	4623      	mov	r3, r4
 8006be4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006be8:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006bea:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006bec:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006bf0:	bf18      	it	ne
 8006bf2:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006bf4:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006bf6:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006bf8:	dcf3      	bgt.n	8006be2 <httpd_cgi_handler+0xbe>
}
 8006bfa:	b005      	add	sp, #20
 8006bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c00:	4e46      	ldr	r6, [pc, #280]	; (8006d1c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006c08:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006c0a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8006c0c:	2b30      	cmp	r3, #48	; 0x30
 8006c0e:	bf0c      	ite	eq
 8006c10:	f020 0001 	biceq.w	r0, r0, #1
 8006c14:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8006c18:	f7fd fe16 	bl	8004848 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006c1c:	42a5      	cmp	r5, r4
 8006c1e:	dcf0      	bgt.n	8006c02 <httpd_cgi_handler+0xde>
}
 8006c20:	b005      	add	sp, #20
 8006c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c26:	4e3d      	ldr	r6, [pc, #244]	; (8006d1c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006c2e:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006c30:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8006c32:	2b30      	cmp	r3, #48	; 0x30
 8006c34:	bf0c      	ite	eq
 8006c36:	f020 0002 	biceq.w	r0, r0, #2
 8006c3a:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8006c3e:	f7fd fe03 	bl	8004848 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006c42:	42a5      	cmp	r5, r4
 8006c44:	dcf0      	bgt.n	8006c28 <httpd_cgi_handler+0x104>
}
 8006c46:	b005      	add	sp, #20
 8006c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4c:	4e33      	ldr	r6, [pc, #204]	; (8006d1c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006c54:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006c56:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8006c58:	2b30      	cmp	r3, #48	; 0x30
 8006c5a:	bf0c      	ite	eq
 8006c5c:	f020 0004 	biceq.w	r0, r0, #4
 8006c60:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8006c64:	f7fd fdf0 	bl	8004848 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006c68:	42a5      	cmp	r5, r4
 8006c6a:	dcf0      	bgt.n	8006c4e <httpd_cgi_handler+0x12a>
}
 8006c6c:	b005      	add	sp, #20
 8006c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c72:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8006c74:	4e2a      	ldr	r6, [pc, #168]	; (8006d20 <httpd_cgi_handler+0x1fc>)
 8006c76:	e004      	b.n	8006c82 <httpd_cgi_handler+0x15e>
 8006c78:	f003 fede 	bl	800aa38 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006c7c:	42a5      	cmp	r5, r4
 8006c7e:	dd9e      	ble.n	8006bbe <httpd_cgi_handler+0x9a>
 8006c80:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8006c82:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8006c84:	2201      	movs	r2, #1
 8006c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c8a:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8006c8c:	4423      	add	r3, r4
 8006c8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006c92:	2b31      	cmp	r3, #49	; 0x31
 8006c94:	d1f0      	bne.n	8006c78 <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8006c96:	2200      	movs	r2, #0
 8006c98:	f003 fece 	bl	800aa38 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006c9c:	42a5      	cmp	r5, r4
 8006c9e:	dcef      	bgt.n	8006c80 <httpd_cgi_handler+0x15c>
 8006ca0:	e78d      	b.n	8006bbe <httpd_cgi_handler+0x9a>
 8006ca2:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8006ca4:	4e1f      	ldr	r6, [pc, #124]	; (8006d24 <httpd_cgi_handler+0x200>)
 8006ca6:	e004      	b.n	8006cb2 <httpd_cgi_handler+0x18e>
 8006ca8:	f003 fec6 	bl	800aa38 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006cac:	42ac      	cmp	r4, r5
 8006cae:	da86      	bge.n	8006bbe <httpd_cgi_handler+0x9a>
 8006cb0:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8006cb2:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006cba:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8006cbc:	4423      	add	r3, r4
 8006cbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006cc2:	2b30      	cmp	r3, #48	; 0x30
 8006cc4:	d1f0      	bne.n	8006ca8 <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f003 feb6 	bl	800aa38 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006ccc:	42a5      	cmp	r5, r4
 8006cce:	dcef      	bgt.n	8006cb0 <httpd_cgi_handler+0x18c>
 8006cd0:	e775      	b.n	8006bbe <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8006cd2:	4815      	ldr	r0, [pc, #84]	; (8006d28 <httpd_cgi_handler+0x204>)
 8006cd4:	f01d fc8e 	bl	80245f4 <puts>
			osDelay(1000);
 8006cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cdc:	f00d fa92 	bl	8014204 <osDelay>
 8006ce0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006ce4:	4911      	ldr	r1, [pc, #68]	; (8006d2c <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006ce6:	4b12      	ldr	r3, [pc, #72]	; (8006d30 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006ce8:	68ca      	ldr	r2, [r1, #12]
 8006cea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60cb      	str	r3, [r1, #12]
 8006cf2:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006cf6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006cf8:	e7fd      	b.n	8006cf6 <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8006cfa:	f8d9 1000 	ldr.w	r1, [r9]
 8006cfe:	480d      	ldr	r0, [pc, #52]	; (8006d34 <httpd_cgi_handler+0x210>)
 8006d00:	f01d fbdc 	bl	80244bc <iprintf>
			break;
 8006d04:	e758      	b.n	8006bb8 <httpd_cgi_handler+0x94>
 8006d06:	bf00      	nop
 8006d08:	0802a940 	.word	0x0802a940
 8006d0c:	20000274 	.word	0x20000274
 8006d10:	200020d4 	.word	0x200020d4
 8006d14:	0802a160 	.word	0x0802a160
 8006d18:	20000010 	.word	0x20000010
 8006d1c:	20002c58 	.word	0x20002c58
 8006d20:	40021000 	.word	0x40021000
 8006d24:	40020c00 	.word	0x40020c00
 8006d28:	0802a96c 	.word	0x0802a96c
 8006d2c:	e000ed00 	.word	0xe000ed00
 8006d30:	05fa0004 	.word	0x05fa0004
 8006d34:	0802a9a4 	.word	0x0802a9a4
 8006d38:	20002c54 	.word	0x20002c54
 8006d3c:	0802a988 	.word	0x0802a988

08006d40 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8006d40:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8006d42:	4802      	ldr	r0, [pc, #8]	; (8006d4c <httpd_post_receive_data+0xc>)
 8006d44:	f01d fc56 	bl	80245f4 <puts>
}
 8006d48:	2000      	movs	r0, #0
 8006d4a:	bd08      	pop	{r3, pc}
 8006d4c:	0802a9c4 	.word	0x0802a9c4

08006d50 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8006d50:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8006d52:	4802      	ldr	r0, [pc, #8]	; (8006d5c <httpd_post_begin+0xc>)
 8006d54:	f01d fc4e 	bl	80245f4 <puts>
}
 8006d58:	2000      	movs	r0, #0
 8006d5a:	bd08      	pop	{r3, pc}
 8006d5c:	0802a9e0 	.word	0x0802a9e0

08006d60 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <httpd_post_finished+0x8>)
 8006d62:	f01d bc47 	b.w	80245f4 <puts>
 8006d66:	bf00      	nop
 8006d68:	0802a9f4 	.word	0x0802a9f4

08006d6c <init_httpd_ssi>:
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8006d6c:	4803      	ldr	r0, [pc, #12]	; (8006d7c <init_httpd_ssi+0x10>)
 8006d6e:	2215      	movs	r2, #21
 8006d70:	4903      	ldr	r1, [pc, #12]	; (8006d80 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8006d72:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8006d74:	f011 f870 	bl	8017e58 <http_set_ssi_handler>
}
 8006d78:	bd08      	pop	{r3, pc}
 8006d7a:	bf00      	nop
 8006d7c:	08006861 	.word	0x08006861
 8006d80:	20000280 	.word	0x20000280

08006d84 <httpclient>:

void httpclient(char Page[64]) {
 8006d84:	b530      	push	{r4, r5, lr}
	uint32_t ip;
	int err;

	static char *Postvars = NULL;

	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 8006d86:	4911      	ldr	r1, [pc, #68]	; (8006dcc <httpclient+0x48>)
void httpclient(char Page[64]) {
 8006d88:	b085      	sub	sp, #20
 8006d8a:	4604      	mov	r4, r0
	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 8006d8c:	4810      	ldr	r0, [pc, #64]	; (8006dd0 <httpclient+0x4c>)
 8006d8e:	f7ff fbcd 	bl	800652c <dnslookup>
	if (err != ERR_OK)
 8006d92:	b9b0      	cbnz	r0, 8006dc2 <httpclient+0x3e>
		rebootme(7);
	ip = remoteip.addr;
 8006d94:	4d0d      	ldr	r5, [pc, #52]	; (8006dcc <httpclient+0x48>)
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 8006d96:	480f      	ldr	r0, [pc, #60]	; (8006dd4 <httpclient+0x50>)
	ip = remoteip.addr;
 8006d98:	682a      	ldr	r2, [r5, #0]
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 8006d9a:	0e11      	lsrs	r1, r2, #24
 8006d9c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8006da0:	e9cd 3100 	strd	r3, r1, [sp]
 8006da4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006da8:	4909      	ldr	r1, [pc, #36]	; (8006dd0 <httpclient+0x4c>)
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	f01d fb86 	bl	80244bc <iprintf>
			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);

	result = hc_open(remoteip, Page, Postvars, returnpage);
 8006db0:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <httpclient+0x54>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	4621      	mov	r1, r4
 8006db6:	6828      	ldr	r0, [r5, #0]
 8006db8:	f7fa f894 	bl	8000ee4 <hc_open>
 8006dbc:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 8006dbe:	b005      	add	sp, #20
 8006dc0:	bd30      	pop	{r4, r5, pc}
		rebootme(7);
 8006dc2:	2007      	movs	r0, #7
 8006dc4:	f7fb fad0 	bl	8002368 <rebootme>
 8006dc8:	e7e4      	b.n	8006d94 <httpclient+0x10>
 8006dca:	bf00      	nop
 8006dcc:	20002cf4 	.word	0x20002cf4
 8006dd0:	0802a884 	.word	0x0802a884
 8006dd4:	0802aa0c 	.word	0x0802aa0c
 8006dd8:	080069fd 	.word	0x080069fd

08006ddc <initialapisn>:
	httpclient(stmuid);		// get sn and targ
}

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8006ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int i;

	i = 1;
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006de0:	4e27      	ldr	r6, [pc, #156]	; (8006e80 <initialapisn+0xa4>)
 8006de2:	f242 722b 	movw	r2, #10027	; 0x272b
void initialapisn() {
 8006de6:	b083      	sub	sp, #12
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006de8:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d142      	bne.n	8006e78 <initialapisn+0x9c>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006df2:	4d24      	ldr	r5, [pc, #144]	; (8006e84 <initialapisn+0xa8>)
	{
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006df4:	2101      	movs	r1, #1
 8006df6:	4824      	ldr	r0, [pc, #144]	; (8006e88 <initialapisn+0xac>)
		apisn();
		osDelay(5000);

		i++;
 8006df8:	2402      	movs	r4, #2
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006dfa:	f01d fb5f 	bl	80244bc <iprintf>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006dfe:	f8d5 1428 	ldr.w	r1, [r5, #1064]	; 0x428
 8006e02:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 8006e06:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 8006e0a:	4820      	ldr	r0, [pc, #128]	; (8006e8c <initialapisn+0xb0>)
 8006e0c:	9100      	str	r1, [sp, #0]
 8006e0e:	4920      	ldr	r1, [pc, #128]	; (8006e90 <initialapisn+0xb4>)
 8006e10:	f01d fcdc 	bl	80247cc <siprintf>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006e14:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006e88 <initialapisn+0xac>
	httpclient(stmuid);		// get sn and targ
 8006e18:	481c      	ldr	r0, [pc, #112]	; (8006e8c <initialapisn+0xb0>)
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006e1a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8006e90 <initialapisn+0xb4>
	httpclient(stmuid);		// get sn and targ
 8006e1e:	f7ff ffb1 	bl	8006d84 <httpclient>
		osDelay(5000);
 8006e22:	f241 3088 	movw	r0, #5000	; 0x1388
 8006e26:	f00d f9ed 	bl	8014204 <osDelay>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006e2a:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
 8006e2e:	f242 722b 	movw	r2, #10027	; 0x272b
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006e32:	4621      	mov	r1, r4
 8006e34:	4648      	mov	r0, r9
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006e36:	b29b      	uxth	r3, r3
		i++;
 8006e38:	3401      	adds	r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d11c      	bne.n	8006e78 <initialapisn+0x9c>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006e3e:	f01d fb3d 	bl	80244bc <iprintf>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006e42:	f8d5 7428 	ldr.w	r7, [r5, #1064]	; 0x428
 8006e46:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 8006e50:	480e      	ldr	r0, [pc, #56]	; (8006e8c <initialapisn+0xb0>)
 8006e52:	9700      	str	r7, [sp, #0]
 8006e54:	f01d fcba 	bl	80247cc <siprintf>
	httpclient(stmuid);		// get sn and targ
 8006e58:	480c      	ldr	r0, [pc, #48]	; (8006e8c <initialapisn+0xb0>)
 8006e5a:	f7ff ff93 	bl	8006d84 <httpclient>
		osDelay(5000);
 8006e5e:	f241 3088 	movw	r0, #5000	; 0x1388
 8006e62:	f00d f9cf 	bl	8014204 <osDelay>
		if (i > 10) {
 8006e66:	2c0a      	cmp	r4, #10
 8006e68:	dddf      	ble.n	8006e2a <initialapisn+0x4e>
			printf("************* ABORTED **************\n");
 8006e6a:	480a      	ldr	r0, [pc, #40]	; (8006e94 <initialapisn+0xb8>)
 8006e6c:	f01d fbc2 	bl	80245f4 <puts>
			rebootme(8);
 8006e70:	2008      	movs	r0, #8
 8006e72:	f7fb fa79 	bl	8002368 <rebootme>
 8006e76:	e7d8      	b.n	8006e2a <initialapisn+0x4e>
		}
	}
}
 8006e78:	b003      	add	sp, #12
 8006e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	bf00      	nop
 8006e80:	20002b24 	.word	0x20002b24
 8006e84:	1ff0f000 	.word	0x1ff0f000
 8006e88:	0802aa4c 	.word	0x0802aa4c
 8006e8c:	20002cf8 	.word	0x20002cf8
 8006e90:	0802aa34 	.word	0x0802aa34
 8006e94:	0802aa7c 	.word	0x0802aa7c

08006e98 <requestapisn>:

void requestapisn() {
 8006e98:	b508      	push	{r3, lr}
	printf("updating S/N and UDP target using http\n");
 8006e9a:	4804      	ldr	r0, [pc, #16]	; (8006eac <requestapisn+0x14>)
 8006e9c:	f01d fbaa 	bl	80245f4 <puts>
	httpclient(stmuid);		// get sn and targ
 8006ea0:	4803      	ldr	r0, [pc, #12]	; (8006eb0 <requestapisn+0x18>)
}
 8006ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	httpclient(stmuid);		// get sn and targ
 8006ea6:	f7ff bf6d 	b.w	8006d84 <httpclient>
 8006eaa:	bf00      	nop
 8006eac:	0802aaa4 	.word	0x0802aaa4
 8006eb0:	20002cf8 	.word	0x20002cf8

08006eb4 <close_handle>:

static void tftp_tmr(void *arg);

static void
close_handle(void)
{
 8006eb4:	b538      	push	{r3, r4, r5, lr}
  tftp_state.port = 0;
 8006eb6:	4c0a      	ldr	r4, [pc, #40]	; (8006ee0 <close_handle+0x2c>)
 8006eb8:	2500      	movs	r5, #0
  ip_addr_set_any(0, &tftp_state.addr);

  if (tftp_state.last_data != NULL) {
 8006eba:	68a0      	ldr	r0, [r4, #8]
  tftp_state.port = 0;
 8006ebc:	82a5      	strh	r5, [r4, #20]
  ip_addr_set_any(0, &tftp_state.addr);
 8006ebe:	6125      	str	r5, [r4, #16]
  if (tftp_state.last_data != NULL) {
 8006ec0:	b110      	cbz	r0, 8006ec8 <close_handle+0x14>
    pbuf_free(tftp_state.last_data);
 8006ec2:	f013 f885 	bl	8019fd0 <pbuf_free>
    tftp_state.last_data = NULL;
 8006ec6:	60a5      	str	r5, [r4, #8]
  }

  sys_untimeout(tftp_tmr, NULL);
 8006ec8:	4806      	ldr	r0, [pc, #24]	; (8006ee4 <close_handle+0x30>)
 8006eca:	2100      	movs	r1, #0
 8006ecc:	f017 fe8c 	bl	801ebe8 <sys_untimeout>

  if (tftp_state.handle) {
 8006ed0:	6860      	ldr	r0, [r4, #4]
 8006ed2:	b120      	cbz	r0, 8006ede <close_handle+0x2a>
    tftp_state.ctx->close(tftp_state.handle);
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	4798      	blx	r3
    tftp_state.handle = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	6063      	str	r3, [r4, #4]
    LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: closing\n"));
  }
}
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	20002d78 	.word	0x20002d78
 8006ee4:	08006fbd 	.word	0x08006fbd

08006ee8 <send_request>:
  return p;
}

static err_t
send_request(const ip_addr_t *addr, u16_t port, u16_t opcode, const char* fname, const char* mode)
{
 8006ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	4680      	mov	r8, r0
 8006eee:	b083      	sub	sp, #12
  size_t fname_length = strlen(fname)+1;
 8006ef0:	4618      	mov	r0, r3
{
 8006ef2:	4689      	mov	r9, r1
 8006ef4:	4616      	mov	r6, r2
 8006ef6:	469a      	mov	sl, r3
  size_t fname_length = strlen(fname)+1;
 8006ef8:	f7f9 f9ac 	bl	8000254 <strlen>
 8006efc:	4605      	mov	r5, r0
  size_t mode_length = strlen(mode)+1;
 8006efe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f00:	f7f9 f9a8 	bl	8000254 <strlen>
  size_t fname_length = strlen(fname)+1;
 8006f04:	f105 0b01 	add.w	fp, r5, #1
  size_t mode_length = strlen(mode)+1;
 8006f08:	1c47      	adds	r7, r0, #1
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 8006f0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006f0e:	2036      	movs	r0, #54	; 0x36
  struct pbuf* p = init_packet(opcode, 0, fname_length + mode_length - 2);
 8006f10:	eb0b 0107 	add.w	r1, fp, r7
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 8006f14:	3102      	adds	r1, #2
 8006f16:	b289      	uxth	r1, r1
 8006f18:	f012 fea4 	bl	8019c64 <pbuf_alloc>
  if (p != NULL) {
 8006f1c:	b328      	cbz	r0, 8006f6a <send_request+0x82>
    payload = (u16_t*) p->payload;
 8006f1e:	6842      	ldr	r2, [r0, #4]
    payload[0] = PP_HTONS(opcode);
 8006f20:	0236      	lsls	r6, r6, #8
 8006f22:	4604      	mov	r4, r0
    payload[1] = lwip_htons(extra);
 8006f24:	2000      	movs	r0, #0
    payload[0] = PP_HTONS(opcode);
 8006f26:	8016      	strh	r6, [r2, #0]
 8006f28:	9201      	str	r2, [sp, #4]
    payload[1] = lwip_htons(extra);
 8006f2a:	f010 ffcd 	bl	8017ec8 <lwip_htons>

  if (p == NULL) {
    return ERR_MEM;
  }

  payload = (char*) p->payload;
 8006f2e:	6866      	ldr	r6, [r4, #4]
  MEMCPY(payload+2,              fname, fname_length);
 8006f30:	4651      	mov	r1, sl
    payload[1] = lwip_htons(extra);
 8006f32:	9a01      	ldr	r2, [sp, #4]
 8006f34:	8050      	strh	r0, [r2, #2]
  MEMCPY(payload+2,              fname, fname_length);
 8006f36:	465a      	mov	r2, fp
 8006f38:	1cb0      	adds	r0, r6, #2
 8006f3a:	f01c fafb 	bl	8023534 <memcpy>
  MEMCPY(payload+2+fname_length, mode,  mode_length);
 8006f3e:	1ce8      	adds	r0, r5, #3
 8006f40:	463a      	mov	r2, r7
 8006f42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f44:	4430      	add	r0, r6
 8006f46:	f01c faf5 	bl	8023534 <memcpy>

  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 8006f4a:	480b      	ldr	r0, [pc, #44]	; (8006f78 <send_request+0x90>)
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	464b      	mov	r3, r9
 8006f50:	4642      	mov	r2, r8
 8006f52:	68c0      	ldr	r0, [r0, #12]
 8006f54:	f018 f968 	bl	801f228 <udp_sendto>
 8006f58:	4603      	mov	r3, r0
  pbuf_free(p);
 8006f5a:	4620      	mov	r0, r4
  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 8006f5c:	461c      	mov	r4, r3
  pbuf_free(p);
 8006f5e:	f013 f837 	bl	8019fd0 <pbuf_free>
  return ret;
}
 8006f62:	4620      	mov	r0, r4
 8006f64:	b003      	add	sp, #12
 8006f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_MEM;
 8006f6a:	f04f 34ff 	mov.w	r4, #4294967295
}
 8006f6e:	4620      	mov	r0, r4
 8006f70:	b003      	add	sp, #12
 8006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f76:	bf00      	nop
 8006f78:	20002d78 	.word	0x20002d78

08006f7c <resend_data.isra.0>:
  pbuf_free(p);
  return ret;
}

static err_t
resend_data(const ip_addr_t *addr, u16_t port)
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
  err_t ret;
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 8006f7e:	4f0e      	ldr	r7, [pc, #56]	; (8006fb8 <resend_data.isra.0+0x3c>)
resend_data(const ip_addr_t *addr, u16_t port)
 8006f80:	4605      	mov	r5, r0
 8006f82:	460e      	mov	r6, r1
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 8006f84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2036      	movs	r0, #54	; 0x36
 8006f8c:	8959      	ldrh	r1, [r3, #10]
 8006f8e:	f012 fe69 	bl	8019c64 <pbuf_alloc>
  if (p == NULL) {
 8006f92:	b178      	cbz	r0, 8006fb4 <resend_data.isra.0+0x38>
    return ERR_MEM;
  }

  ret = pbuf_copy(p, tftp_state.last_data);
 8006f94:	68b9      	ldr	r1, [r7, #8]
 8006f96:	4604      	mov	r4, r0
 8006f98:	f013 f8a2 	bl	801a0e0 <pbuf_copy>
  if (ret != ERR_OK) {
 8006f9c:	b928      	cbnz	r0, 8006faa <resend_data.isra.0+0x2e>
    pbuf_free(p);
    return ret;
  }

  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 8006f9e:	4633      	mov	r3, r6
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f018 f93f 	bl	801f228 <udp_sendto>
  pbuf_free(p);
 8006faa:	4620      	mov	r0, r4
  return ret;
}
 8006fac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbuf_free(p);
 8006fb0:	f013 b80e 	b.w	8019fd0 <pbuf_free>
}
 8006fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20002d78 	.word	0x20002d78

08006fbc <tftp_tmr>:
  pbuf_free(p);
}

static void
tftp_tmr(void *arg)
{
 8006fbc:	b510      	push	{r4, lr}
  LWIP_UNUSED_ARG(arg);

  tftp_state.timer++;
 8006fbe:	4c13      	ldr	r4, [pc, #76]	; (800700c <tftp_tmr+0x50>)
 8006fc0:	69a3      	ldr	r3, [r4, #24]

  if (tftp_state.handle == NULL) {
 8006fc2:	6862      	ldr	r2, [r4, #4]
  tftp_state.timer++;
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	61a3      	str	r3, [r4, #24]
  if (tftp_state.handle == NULL) {
 8006fc8:	b1f2      	cbz	r2, 8007008 <tftp_tmr+0x4c>
    return;
  }

  sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4910      	ldr	r1, [pc, #64]	; (8007010 <tftp_tmr+0x54>)
 8006fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fd2:	f017 fdeb 	bl	801ebac <sys_timeout>

  if ((tftp_state.timer - tftp_state.last_pkt) > (TFTP_TIMEOUT_MSECS / TFTP_TIMER_MSECS)) {
 8006fd6:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	2b0a      	cmp	r3, #10
 8006fde:	dd13      	ble.n	8007008 <tftp_tmr+0x4c>
    if ((tftp_state.last_data != NULL) && (tftp_state.retries < TFTP_MAX_RETRIES)) {
 8006fe0:	68a3      	ldr	r3, [r4, #8]
 8006fe2:	b11b      	cbz	r3, 8006fec <tftp_tmr+0x30>
 8006fe4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d903      	bls.n	8006ff4 <tftp_tmr+0x38>
    } else {
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout\n"));
      close_handle();
    }
  }
}
 8006fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      close_handle();
 8006ff0:	f7ff bf60 	b.w	8006eb4 <close_handle>
      resend_data(&tftp_state.addr, tftp_state.port);
 8006ff4:	8aa1      	ldrh	r1, [r4, #20]
 8006ff6:	f104 0010 	add.w	r0, r4, #16
 8006ffa:	f7ff ffbf 	bl	8006f7c <resend_data.isra.0>
      tftp_state.retries++;
 8006ffe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007002:	3301      	adds	r3, #1
 8007004:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 8007008:	bd10      	pop	{r4, pc}
 800700a:	bf00      	nop
 800700c:	20002d78 	.word	0x20002d78
 8007010:	08006fbd 	.word	0x08006fbd

08007014 <send_ack.isra.0>:
send_ack(const ip_addr_t *addr, u16_t port, u16_t blknum)
 8007014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007018:	460f      	mov	r7, r1
 800701a:	4615      	mov	r5, r2
 800701c:	4680      	mov	r8, r0
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 800701e:	2104      	movs	r1, #4
 8007020:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007024:	2036      	movs	r0, #54	; 0x36
 8007026:	f012 fe1d 	bl	8019c64 <pbuf_alloc>
  if (p != NULL) {
 800702a:	b1a0      	cbz	r0, 8007056 <send_ack.isra.0+0x42>
    payload = (u16_t*) p->payload;
 800702c:	6846      	ldr	r6, [r0, #4]
    payload[0] = PP_HTONS(opcode);
 800702e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007032:	4604      	mov	r4, r0
    payload[1] = lwip_htons(extra);
 8007034:	4628      	mov	r0, r5
    payload[0] = PP_HTONS(opcode);
 8007036:	8033      	strh	r3, [r6, #0]
    payload[1] = lwip_htons(extra);
 8007038:	f010 ff46 	bl	8017ec8 <lwip_htons>
 800703c:	8070      	strh	r0, [r6, #2]
  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 800703e:	4807      	ldr	r0, [pc, #28]	; (800705c <send_ack.isra.0+0x48>)
 8007040:	463b      	mov	r3, r7
 8007042:	4642      	mov	r2, r8
 8007044:	4621      	mov	r1, r4
 8007046:	68c0      	ldr	r0, [r0, #12]
 8007048:	f018 f8ee 	bl	801f228 <udp_sendto>
  pbuf_free(p);
 800704c:	4620      	mov	r0, r4
}
 800704e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  pbuf_free(p);
 8007052:	f012 bfbd 	b.w	8019fd0 <pbuf_free>
}
 8007056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800705a:	bf00      	nop
 800705c:	20002d78 	.word	0x20002d78

08007060 <send_error.isra.0>:
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
 8007060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007064:	4606      	mov	r6, r0
  int str_length = strlen(str);
 8007066:	4618      	mov	r0, r3
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
 8007068:	460f      	mov	r7, r1
 800706a:	4690      	mov	r8, r2
 800706c:	461d      	mov	r5, r3
  int str_length = strlen(str);
 800706e:	f7f9 f8f1 	bl	8000254 <strlen>
 8007072:	4604      	mov	r4, r0
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 8007074:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007078:	2036      	movs	r0, #54	; 0x36
 800707a:	1d61      	adds	r1, r4, #5
 800707c:	b289      	uxth	r1, r1
 800707e:	f012 fdf1 	bl	8019c64 <pbuf_alloc>
  if (p != NULL) {
 8007082:	b308      	cbz	r0, 80070c8 <send_error.isra.0+0x68>
    payload = (u16_t*) p->payload;
 8007084:	f104 0901 	add.w	r9, r4, #1
 8007088:	fa1f f888 	uxth.w	r8, r8
 800708c:	4604      	mov	r4, r0
    payload[0] = PP_HTONS(opcode);
 800708e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    payload[1] = lwip_htons(extra);
 8007092:	4640      	mov	r0, r8
    payload = (u16_t*) p->payload;
 8007094:	f8d4 8004 	ldr.w	r8, [r4, #4]
    payload[0] = PP_HTONS(opcode);
 8007098:	f8a8 3000 	strh.w	r3, [r8]
    payload[1] = lwip_htons(extra);
 800709c:	f010 ff14 	bl	8017ec8 <lwip_htons>
 80070a0:	f8a8 0002 	strh.w	r0, [r8, #2]
  MEMCPY(&payload[2], str, str_length + 1);
 80070a4:	6860      	ldr	r0, [r4, #4]
 80070a6:	464a      	mov	r2, r9
 80070a8:	4629      	mov	r1, r5
 80070aa:	3004      	adds	r0, #4
 80070ac:	f01c fa42 	bl	8023534 <memcpy>
  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 80070b0:	4806      	ldr	r0, [pc, #24]	; (80070cc <send_error.isra.0+0x6c>)
 80070b2:	463b      	mov	r3, r7
 80070b4:	4632      	mov	r2, r6
 80070b6:	4621      	mov	r1, r4
 80070b8:	68c0      	ldr	r0, [r0, #12]
 80070ba:	f018 f8b5 	bl	801f228 <udp_sendto>
  pbuf_free(p);
 80070be:	4620      	mov	r0, r4
}
 80070c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80070c4:	f012 bf84 	b.w	8019fd0 <pbuf_free>
}
 80070c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070cc:	20002d78 	.word	0x20002d78

080070d0 <send_data>:
{
 80070d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (tftp_state.last_data != NULL) {
 80070d4:	4d20      	ldr	r5, [pc, #128]	; (8007158 <send_data+0x88>)
{
 80070d6:	4606      	mov	r6, r0
 80070d8:	460f      	mov	r7, r1
  if (tftp_state.last_data != NULL) {
 80070da:	68ab      	ldr	r3, [r5, #8]
 80070dc:	b113      	cbz	r3, 80070e4 <send_data+0x14>
    pbuf_free(tftp_state.last_data);
 80070de:	4618      	mov	r0, r3
 80070e0:	f012 ff76 	bl	8019fd0 <pbuf_free>
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 80070e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80070e8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80070ec:	2036      	movs	r0, #54	; 0x36
  tftp_state.last_data = init_packet(TFTP_DATA, tftp_state.blknum, TFTP_MAX_PAYLOAD_SIZE);
 80070ee:	f8b5 8020 	ldrh.w	r8, [r5, #32]
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 80070f2:	f012 fdb7 	bl	8019c64 <pbuf_alloc>
  if (p != NULL) {
 80070f6:	4604      	mov	r4, r0
 80070f8:	b350      	cbz	r0, 8007150 <send_data+0x80>
    payload[0] = PP_HTONS(opcode);
 80070fa:	f44f 7340 	mov.w	r3, #768	; 0x300
    payload[1] = lwip_htons(extra);
 80070fe:	4640      	mov	r0, r8
    payload = (u16_t*) p->payload;
 8007100:	f8d4 8004 	ldr.w	r8, [r4, #4]
    payload[0] = PP_HTONS(opcode);
 8007104:	f8a8 3000 	strh.w	r3, [r8]
    payload[1] = lwip_htons(extra);
 8007108:	f010 fede 	bl	8017ec8 <lwip_htons>
  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 800710c:	6861      	ldr	r1, [r4, #4]
 800710e:	682b      	ldr	r3, [r5, #0]
 8007110:	f44f 7200 	mov.w	r2, #512	; 0x200
    payload[1] = lwip_htons(extra);
 8007114:	f8a8 0002 	strh.w	r0, [r8, #2]
  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 8007118:	3104      	adds	r1, #4
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	6868      	ldr	r0, [r5, #4]
  tftp_state.last_data = init_packet(TFTP_DATA, tftp_state.blknum, TFTP_MAX_PAYLOAD_SIZE);
 800711e:	60ac      	str	r4, [r5, #8]
  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 8007120:	4798      	blx	r3
  if (ret < 0) {
 8007122:	1e03      	subs	r3, r0, #0
 8007124:	db0a      	blt.n	800713c <send_data+0x6c>
  pbuf_realloc(tftp_state.last_data, (u16_t)(TFTP_HEADER_LENGTH + ret));
 8007126:	3304      	adds	r3, #4
 8007128:	68a8      	ldr	r0, [r5, #8]
 800712a:	b299      	uxth	r1, r3
 800712c:	f012 fe54 	bl	8019dd8 <pbuf_realloc>
  resend_data(addr, port);
 8007130:	4639      	mov	r1, r7
 8007132:	4630      	mov	r0, r6
}
 8007134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  resend_data(addr, port);
 8007138:	f7ff bf20 	b.w	8006f7c <resend_data.isra.0>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Error occured while reading the file.");
 800713c:	4639      	mov	r1, r7
 800713e:	4630      	mov	r0, r6
 8007140:	4b06      	ldr	r3, [pc, #24]	; (800715c <send_data+0x8c>)
 8007142:	2202      	movs	r2, #2
 8007144:	f7ff ff8c 	bl	8007060 <send_error.isra.0>
}
 8007148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    close_handle();
 800714c:	f7ff beb2 	b.w	8006eb4 <close_handle>
  tftp_state.last_data = init_packet(TFTP_DATA, tftp_state.blknum, TFTP_MAX_PAYLOAD_SIZE);
 8007150:	60a8      	str	r0, [r5, #8]
}
 8007152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007156:	bf00      	nop
 8007158:	20002d78 	.word	0x20002d78
 800715c:	0802aacc 	.word	0x0802aacc

08007160 <recv>:
{
 8007160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8007164:	4c9b      	ldr	r4, [pc, #620]	; (80073d4 <recv+0x274>)
{
 8007166:	b08c      	sub	sp, #48	; 0x30
 8007168:	4615      	mov	r5, r2
 800716a:	461e      	mov	r6, r3
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 800716c:	8aa1      	ldrh	r1, [r4, #20]
{
 800716e:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8007172:	b109      	cbz	r1, 8007178 <recv+0x18>
 8007174:	4541      	cmp	r1, r8
 8007176:	d104      	bne.n	8007182 <recv+0x22>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 8007178:	6923      	ldr	r3, [r4, #16]
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 800717a:	b173      	cbz	r3, 800719a <recv+0x3a>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 800717c:	6832      	ldr	r2, [r6, #0]
 800717e:	4293      	cmp	r3, r2
 8007180:	d00b      	beq.n	800719a <recv+0x3a>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 8007182:	4b95      	ldr	r3, [pc, #596]	; (80073d8 <recv+0x278>)
 8007184:	2202      	movs	r2, #2
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 8007186:	4641      	mov	r1, r8
 8007188:	4630      	mov	r0, r6
 800718a:	f7ff ff69 	bl	8007060 <send_error.isra.0>
  pbuf_free(p);
 800718e:	4628      	mov	r0, r5
}
 8007190:	b00c      	add	sp, #48	; 0x30
 8007192:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8007196:	f012 bf1b 	b.w	8019fd0 <pbuf_free>
  u16_t *sbuf = (u16_t *) p->payload;
 800719a:	f8d5 9004 	ldr.w	r9, [r5, #4]
  tftp_state.retries = 0;
 800719e:	2300      	movs	r3, #0
  tftp_state.last_pkt = tftp_state.timer;
 80071a0:	69a2      	ldr	r2, [r4, #24]
  opcode = sbuf[0];
 80071a2:	f8b9 7000 	ldrh.w	r7, [r9]
  tftp_state.last_pkt = tftp_state.timer;
 80071a6:	61e2      	str	r2, [r4, #28]
  switch (opcode) {
 80071a8:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
  tftp_state.retries = 0;
 80071ac:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  switch (opcode) {
 80071b0:	d03f      	beq.n	8007232 <recv+0xd2>
 80071b2:	d818      	bhi.n	80071e6 <recv+0x86>
 80071b4:	f5b7 7f40 	cmp.w	r7, #768	; 0x300
 80071b8:	d02d      	beq.n	8007216 <recv+0xb6>
 80071ba:	d829      	bhi.n	8007210 <recv+0xb0>
 80071bc:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80071c0:	d002      	beq.n	80071c8 <recv+0x68>
 80071c2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80071c6:	d123      	bne.n	8007210 <recv+0xb0>
      const char tftp_null = 0;
 80071c8:	2300      	movs	r3, #0
      if (tftp_state.handle != NULL) {
 80071ca:	f8d4 9004 	ldr.w	r9, [r4, #4]
      const char tftp_null = 0;
 80071ce:	f88d 300b 	strb.w	r3, [sp, #11]
      if (tftp_state.handle != NULL) {
 80071d2:	f1b9 0f00 	cmp.w	r9, #0
 80071d6:	d046      	beq.n	8007266 <recv+0x106>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 80071d8:	4b7f      	ldr	r3, [pc, #508]	; (80073d8 <recv+0x278>)
 80071da:	2202      	movs	r2, #2
 80071dc:	4641      	mov	r1, r8
 80071de:	4630      	mov	r0, r6
 80071e0:	f7ff ff3e 	bl	8007060 <send_error.isra.0>
        break;
 80071e4:	e7d3      	b.n	800718e <recv+0x2e>
  switch (opcode) {
 80071e6:	f5b7 6fa0 	cmp.w	r7, #1280	; 0x500
 80071ea:	d111      	bne.n	8007210 <recv+0xb0>
      if (tftp_state.handle != NULL) {
 80071ec:	6863      	ldr	r3, [r4, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0cd      	beq.n	800718e <recv+0x2e>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 80071f2:	2104      	movs	r1, #4
 80071f4:	4628      	mov	r0, r5
 80071f6:	f012 fe7b 	bl	8019ef0 <pbuf_remove_header>
        tftp_state.ctx->error(tftp_state.handle, sbuf[1], (const char*)p->payload, p->len);
 80071fa:	6822      	ldr	r2, [r4, #0]
 80071fc:	6860      	ldr	r0, [r4, #4]
 80071fe:	896b      	ldrh	r3, [r5, #10]
 8007200:	6914      	ldr	r4, [r2, #16]
 8007202:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 8007206:	686a      	ldr	r2, [r5, #4]
 8007208:	47a0      	blx	r4
        close_handle();
 800720a:	f7ff fe53 	bl	8006eb4 <close_handle>
 800720e:	e7be      	b.n	800718e <recv+0x2e>
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 8007210:	4b72      	ldr	r3, [pc, #456]	; (80073dc <recv+0x27c>)
 8007212:	2204      	movs	r2, #4
 8007214:	e7b7      	b.n	8007186 <recv+0x26>
      if (tftp_state.handle == NULL) {
 8007216:	6863      	ldr	r3, [r4, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d056      	beq.n	80072ca <recv+0x16a>
      if (tftp_state.mode_write != 1) {
 800721c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007220:	2b01      	cmp	r3, #1
 8007222:	d059      	beq.n	80072d8 <recv+0x178>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a write connection");
 8007224:	4b6e      	ldr	r3, [pc, #440]	; (80073e0 <recv+0x280>)
 8007226:	2202      	movs	r2, #2
 8007228:	4641      	mov	r1, r8
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff ff18 	bl	8007060 <send_error.isra.0>
        break;
 8007230:	e7ad      	b.n	800718e <recv+0x2e>
      if (tftp_state.handle == NULL) {
 8007232:	6863      	ldr	r3, [r4, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d048      	beq.n	80072ca <recv+0x16a>
      if (tftp_state.mode_write != 0) {
 8007238:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800723c:	bb83      	cbnz	r3, 80072a0 <recv+0x140>
      blknum = lwip_ntohs(sbuf[1]);
 800723e:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8007242:	f010 fe41 	bl	8017ec8 <lwip_htons>
      if (blknum != tftp_state.blknum) {
 8007246:	8c23      	ldrh	r3, [r4, #32]
 8007248:	4283      	cmp	r3, r0
 800724a:	d137      	bne.n	80072bc <recv+0x15c>
      if (tftp_state.last_data != NULL) {
 800724c:	68a2      	ldr	r2, [r4, #8]
 800724e:	b11a      	cbz	r2, 8007258 <recv+0xf8>
      if (!lastpkt) {
 8007250:	8912      	ldrh	r2, [r2, #8]
 8007252:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
 8007256:	d1d8      	bne.n	800720a <recv+0xaa>
        tftp_state.blknum++;
 8007258:	3301      	adds	r3, #1
        send_data(addr, port);
 800725a:	4641      	mov	r1, r8
 800725c:	4630      	mov	r0, r6
        tftp_state.blknum++;
 800725e:	8423      	strh	r3, [r4, #32]
        send_data(addr, port);
 8007260:	f7ff ff36 	bl	80070d0 <send_data>
 8007264:	e793      	b.n	800718e <recv+0x2e>
      if ((tftp_state.tftp_mode & LWIP_TFTP_MODE_SERVER) == 0) {
 8007266:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800726a:	07db      	lsls	r3, r3, #31
 800726c:	d51f      	bpl.n	80072ae <recv+0x14e>
      sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 800726e:	464a      	mov	r2, r9
 8007270:	495c      	ldr	r1, [pc, #368]	; (80073e4 <recv+0x284>)
 8007272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007276:	f017 fc99 	bl	801ebac <sys_timeout>
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 800727a:	2201      	movs	r2, #1
 800727c:	2302      	movs	r3, #2
 800727e:	f10d 010b 	add.w	r1, sp, #11
 8007282:	4628      	mov	r0, r5
 8007284:	f013 f8b6 	bl	801a3f4 <pbuf_memfind>
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 8007288:	1e42      	subs	r2, r0, #1
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 800728a:	4682      	mov	sl, r0
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 800728c:	b292      	uxth	r2, r2
 800728e:	2a15      	cmp	r2, #21
 8007290:	d933      	bls.n	80072fa <recv+0x19a>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Filename too long/not NULL terminated");
 8007292:	4b55      	ldr	r3, [pc, #340]	; (80073e8 <recv+0x288>)
 8007294:	2202      	movs	r2, #2
 8007296:	4641      	mov	r1, r8
 8007298:	4630      	mov	r0, r6
 800729a:	f7ff fee1 	bl	8007060 <send_error.isra.0>
        break;
 800729e:	e776      	b.n	800718e <recv+0x2e>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a read connection");
 80072a0:	4b52      	ldr	r3, [pc, #328]	; (80073ec <recv+0x28c>)
 80072a2:	2202      	movs	r2, #2
 80072a4:	4641      	mov	r1, r8
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff feda 	bl	8007060 <send_error.isra.0>
        break;
 80072ac:	e76f      	b.n	800718e <recv+0x2e>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "TFTP server not enabled");
 80072ae:	4b50      	ldr	r3, [pc, #320]	; (80073f0 <recv+0x290>)
 80072b0:	2202      	movs	r2, #2
 80072b2:	4641      	mov	r1, r8
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7ff fed3 	bl	8007060 <send_error.isra.0>
        break;
 80072ba:	e768      	b.n	800718e <recv+0x2e>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 80072bc:	4b4d      	ldr	r3, [pc, #308]	; (80073f4 <recv+0x294>)
 80072be:	2205      	movs	r2, #5
 80072c0:	4641      	mov	r1, r8
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7ff fecc 	bl	8007060 <send_error.isra.0>
 80072c8:	e761      	b.n	800718e <recv+0x2e>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 80072ca:	4b4b      	ldr	r3, [pc, #300]	; (80073f8 <recv+0x298>)
 80072cc:	2202      	movs	r2, #2
 80072ce:	4641      	mov	r1, r8
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff fec5 	bl	8007060 <send_error.isra.0>
        break;
 80072d6:	e75a      	b.n	800718e <recv+0x2e>
      blknum = lwip_ntohs(sbuf[1]);
 80072d8:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 80072dc:	f010 fdf4 	bl	8017ec8 <lwip_htons>
      if (blknum == tftp_state.blknum) {
 80072e0:	8c27      	ldrh	r7, [r4, #32]
 80072e2:	4287      	cmp	r7, r0
 80072e4:	d046      	beq.n	8007374 <recv+0x214>
      } else if ((u16_t)(blknum + 1) == tftp_state.blknum) {
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	429f      	cmp	r7, r3
 80072ec:	d1e6      	bne.n	80072bc <recv+0x15c>
        send_ack(addr, port, blknum);
 80072ee:	4602      	mov	r2, r0
 80072f0:	4641      	mov	r1, r8
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7ff fe8e 	bl	8007014 <send_ack.isra.0>
 80072f8:	e749      	b.n	800718e <recv+0x2e>
      pbuf_copy_partial(p, filename, filename_end_offset - 1, 2);
 80072fa:	2302      	movs	r3, #2
 80072fc:	a906      	add	r1, sp, #24
 80072fe:	4628      	mov	r0, r5
 8007300:	f012 ff0a 	bl	801a118 <pbuf_copy_partial>
      mode_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), filename_end_offset + 1);
 8007304:	f10a 0301 	add.w	r3, sl, #1
 8007308:	2201      	movs	r2, #1
 800730a:	f10d 010b 	add.w	r1, sp, #11
 800730e:	b29b      	uxth	r3, r3
 8007310:	4628      	mov	r0, r5
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	f013 f86e 	bl	801a3f4 <pbuf_memfind>
      if ((u16_t)(mode_end_offset - filename_end_offset) > sizeof(mode)) {
 8007318:	eba0 000a 	sub.w	r0, r0, sl
 800731c:	9b01      	ldr	r3, [sp, #4]
 800731e:	b282      	uxth	r2, r0
 8007320:	2a0b      	cmp	r2, #11
 8007322:	d906      	bls.n	8007332 <recv+0x1d2>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Mode too long/not NULL terminated");
 8007324:	4b35      	ldr	r3, [pc, #212]	; (80073fc <recv+0x29c>)
 8007326:	2202      	movs	r2, #2
 8007328:	4641      	mov	r1, r8
 800732a:	4630      	mov	r0, r6
 800732c:	f7ff fe98 	bl	8007060 <send_error.isra.0>
        break;
 8007330:	e72d      	b.n	800718e <recv+0x2e>
      pbuf_copy_partial(p, mode, mode_end_offset - filename_end_offset, filename_end_offset + 1);
 8007332:	a903      	add	r1, sp, #12
 8007334:	4628      	mov	r0, r5
 8007336:	f012 feef 	bl	801a118 <pbuf_copy_partial>
      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 800733a:	f5a7 7200 	sub.w	r2, r7, #512	; 0x200
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	a903      	add	r1, sp, #12
 8007342:	fab2 f282 	clz	r2, r2
 8007346:	a806      	add	r0, sp, #24
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	0952      	lsrs	r2, r2, #5
 800734c:	4798      	blx	r3
      tftp_state.blknum = 1;
 800734e:	2201      	movs	r2, #1
      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 8007350:	6060      	str	r0, [r4, #4]
      tftp_state.blknum = 1;
 8007352:	8422      	strh	r2, [r4, #32]
      if (!tftp_state.handle) {
 8007354:	2800      	cmp	r0, #0
 8007356:	d037      	beq.n	80073c8 <recv+0x268>
      ip_addr_copy(tftp_state.addr, *addr);
 8007358:	6833      	ldr	r3, [r6, #0]
      if (opcode == PP_HTONS(TFTP_WRQ)) {
 800735a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
      tftp_state.port = port;
 800735e:	f8a4 8014 	strh.w	r8, [r4, #20]
      ip_addr_copy(tftp_state.addr, *addr);
 8007362:	6123      	str	r3, [r4, #16]
      if (opcode == PP_HTONS(TFTP_WRQ)) {
 8007364:	d028      	beq.n	80073b8 <recv+0x258>
        send_data(addr, port);
 8007366:	4641      	mov	r1, r8
 8007368:	4630      	mov	r0, r6
        tftp_state.mode_write = 0;
 800736a:	f884 9023 	strb.w	r9, [r4, #35]	; 0x23
        send_data(addr, port);
 800736e:	f7ff feaf 	bl	80070d0 <send_data>
 8007372:	e70c      	b.n	800718e <recv+0x2e>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 8007374:	2104      	movs	r1, #4
 8007376:	4628      	mov	r0, r5
 8007378:	f012 fdba 	bl	8019ef0 <pbuf_remove_header>
        ret = tftp_state.ctx->write(tftp_state.handle, p);
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	4629      	mov	r1, r5
 8007380:	6860      	ldr	r0, [r4, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	4798      	blx	r3
        if (ret < 0) {
 8007386:	2800      	cmp	r0, #0
 8007388:	db0d      	blt.n	80073a6 <recv+0x246>
          send_ack(addr, port, blknum);
 800738a:	463a      	mov	r2, r7
 800738c:	4641      	mov	r1, r8
 800738e:	4630      	mov	r0, r6
 8007390:	f7ff fe40 	bl	8007014 <send_ack.isra.0>
        if (p->tot_len < TFTP_MAX_PAYLOAD_SIZE) {
 8007394:	892b      	ldrh	r3, [r5, #8]
 8007396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800739a:	f4ff af36 	bcc.w	800720a <recv+0xaa>
          tftp_state.blknum++;
 800739e:	8c23      	ldrh	r3, [r4, #32]
 80073a0:	3301      	adds	r3, #1
 80073a2:	8423      	strh	r3, [r4, #32]
 80073a4:	e6f3      	b.n	800718e <recv+0x2e>
          send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "error writing file");
 80073a6:	4b16      	ldr	r3, [pc, #88]	; (8007400 <recv+0x2a0>)
 80073a8:	4641      	mov	r1, r8
 80073aa:	4630      	mov	r0, r6
 80073ac:	2202      	movs	r2, #2
 80073ae:	f7ff fe57 	bl	8007060 <send_error.isra.0>
          close_handle();
 80073b2:	f7ff fd7f 	bl	8006eb4 <close_handle>
 80073b6:	e7ed      	b.n	8007394 <recv+0x234>
        tftp_state.mode_write = 1;
 80073b8:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        send_ack(addr, port, 0);
 80073bc:	4641      	mov	r1, r8
 80073be:	464a      	mov	r2, r9
 80073c0:	4630      	mov	r0, r6
 80073c2:	f7ff fe27 	bl	8007014 <send_ack.isra.0>
 80073c6:	e6e2      	b.n	800718e <recv+0x2e>
        send_error(addr, port, TFTP_ERROR_FILE_NOT_FOUND, "Unable to open requested file.");
 80073c8:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <recv+0x2a4>)
 80073ca:	4641      	mov	r1, r8
 80073cc:	4630      	mov	r0, r6
 80073ce:	f7ff fe47 	bl	8007060 <send_error.isra.0>
        break;
 80073d2:	e6dc      	b.n	800718e <recv+0x2e>
 80073d4:	20002d78 	.word	0x20002d78
 80073d8:	0802aaf4 	.word	0x0802aaf4
 80073dc:	0802ac0c 	.word	0x0802ac0c
 80073e0:	0802abb4 	.word	0x0802abb4
 80073e4:	08006fbd 	.word	0x08006fbd
 80073e8:	0802ab38 	.word	0x0802ab38
 80073ec:	0802abf4 	.word	0x0802abf4
 80073f0:	0802ab20 	.word	0x0802ab20
 80073f4:	0802abe0 	.word	0x0802abe0
 80073f8:	0802aba4 	.word	0x0802aba4
 80073fc:	0802ab60 	.word	0x0802ab60
 8007400:	0802abcc 	.word	0x0802abcc
 8007404:	0802ab84 	.word	0x0802ab84

08007408 <tftp_init_common>:
 * @param mode TFTP mode (client/server)
 * @param ctx TFTP callback struct
 */
err_t
tftp_init_common(u8_t mode, const struct tftp_context *ctx)
{
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	4606      	mov	r6, r0
  err_t ret;

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800740c:	202e      	movs	r0, #46	; 0x2e
{
 800740e:	460f      	mov	r7, r1
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8007410:	f017 fff4 	bl	801f3fc <udp_new_ip_type>
  if (pcb == NULL) {
 8007414:	b1d8      	cbz	r0, 800744e <tftp_init_common+0x46>
    return ERR_MEM;
  }

  ret = udp_bind(pcb, IP_ANY_TYPE, TFTP_PORT);
 8007416:	2245      	movs	r2, #69	; 0x45
 8007418:	490e      	ldr	r1, [pc, #56]	; (8007454 <tftp_init_common+0x4c>)
 800741a:	4605      	mov	r5, r0
 800741c:	f017 fd76 	bl	801ef0c <udp_bind>
  if (ret != ERR_OK) {
 8007420:	4604      	mov	r4, r0
 8007422:	b978      	cbnz	r0, 8007444 <tftp_init_common+0x3c>
    udp_remove(pcb);
    return ret;
  }

  tftp_state.handle    = NULL;
 8007424:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <tftp_init_common+0x50>)
  tftp_state.timer     = 0;
  tftp_state.last_data = NULL;
  tftp_state.upcb      = pcb;
  tftp_state.tftp_mode = mode;

  udp_recv(pcb, recv, NULL);
 8007426:	4602      	mov	r2, r0
 8007428:	490c      	ldr	r1, [pc, #48]	; (800745c <tftp_init_common+0x54>)
  tftp_state.handle    = NULL;
 800742a:	6058      	str	r0, [r3, #4]
  tftp_state.port      = 0;
 800742c:	8298      	strh	r0, [r3, #20]
  tftp_state.timer     = 0;
 800742e:	6198      	str	r0, [r3, #24]
  tftp_state.ctx       = ctx;
 8007430:	601f      	str	r7, [r3, #0]
  tftp_state.tftp_mode = mode;
 8007432:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
  tftp_state.upcb      = pcb;
 8007436:	e9c3 0502 	strd	r0, r5, [r3, #8]
  udp_recv(pcb, recv, NULL);
 800743a:	4628      	mov	r0, r5
 800743c:	f017 ff8e 	bl	801f35c <udp_recv>

  return ERR_OK;
}
 8007440:	4620      	mov	r0, r4
 8007442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    udp_remove(pcb);
 8007444:	4628      	mov	r0, r5
 8007446:	f017 ff9b 	bl	801f380 <udp_remove>
}
 800744a:	4620      	mov	r0, r4
 800744c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 800744e:	f04f 34ff 	mov.w	r4, #4294967295
 8007452:	e7f5      	b.n	8007440 <tftp_init_common+0x38>
 8007454:	080e1ff0 	.word	0x080e1ff0
 8007458:	20002d78 	.word	0x20002d78
 800745c:	08007161 	.word	0x08007161

08007460 <tftp_init_client>:
 * Initialize TFTP client.
 * @param ctx TFTP callback struct
 */
err_t
tftp_init_client(const struct tftp_context *ctx)
{
 8007460:	4601      	mov	r1, r0
  return tftp_init_common(LWIP_TFTP_MODE_CLIENT, ctx);
 8007462:	2002      	movs	r0, #2
 8007464:	f7ff bfd0 	b.w	8007408 <tftp_init_common>

08007468 <tftp_get>:
  return NULL;
}

err_t
tftp_get(void* handle, const ip_addr_t *addr, u16_t port, const char* fname, enum tftp_transfer_mode mode)
{
 8007468:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 800746a:	4c20      	ldr	r4, [pc, #128]	; (80074ec <tftp_get+0x84>)
{
 800746c:	4605      	mov	r5, r0
 800746e:	4608      	mov	r0, r1
 8007470:	4611      	mov	r1, r2
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 8007472:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
{
 8007476:	f89d 2010 	ldrb.w	r2, [sp, #16]
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 800747a:	f01c 0f02 	tst.w	ip, #2
 800747e:	d024      	beq.n	80074ca <tftp_get+0x62>
  LWIP_ERROR("tftp_get: invalid file name", fname != NULL, return ERR_VAL);
 8007480:	b35b      	cbz	r3, 80074da <tftp_get+0x72>
  LWIP_ERROR("tftp_get: invalid mode", mode <= TFTP_MODE_BINARY, return ERR_VAL);
 8007482:	2a02      	cmp	r2, #2
 8007484:	d817      	bhi.n	80074b6 <tftp_get+0x4e>

  tftp_state.handle = handle;
 8007486:	6065      	str	r5, [r4, #4]
  tftp_state.blknum = 1;
 8007488:	2501      	movs	r5, #1
 800748a:	8425      	strh	r5, [r4, #32]
  tftp_state.mode_write = 1; /* We want to receive data */
 800748c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  if (mode == TFTP_MODE_OCTET) {
 8007490:	b152      	cbz	r2, 80074a8 <tftp_get+0x40>
    return "binary";
 8007492:	4d17      	ldr	r5, [pc, #92]	; (80074f0 <tftp_get+0x88>)
 8007494:	4c17      	ldr	r4, [pc, #92]	; (80074f4 <tftp_get+0x8c>)
 8007496:	2a01      	cmp	r2, #1
 8007498:	bf18      	it	ne
 800749a:	462c      	movne	r4, r5
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 800749c:	2201      	movs	r2, #1
 800749e:	9404      	str	r4, [sp, #16]
}
 80074a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 80074a4:	f7ff bd20 	b.w	8006ee8 <send_request>
    return "octet";
 80074a8:	4c13      	ldr	r4, [pc, #76]	; (80074f8 <tftp_get+0x90>)
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 80074aa:	2201      	movs	r2, #1
 80074ac:	9404      	str	r4, [sp, #16]
}
 80074ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 80074b2:	f7ff bd19 	b.w	8006ee8 <send_request>
  LWIP_ERROR("tftp_get: invalid mode", mode <= TFTP_MODE_BINARY, return ERR_VAL);
 80074b6:	4b11      	ldr	r3, [pc, #68]	; (80074fc <tftp_get+0x94>)
 80074b8:	f240 2217 	movw	r2, #535	; 0x217
 80074bc:	4910      	ldr	r1, [pc, #64]	; (8007500 <tftp_get+0x98>)
 80074be:	4811      	ldr	r0, [pc, #68]	; (8007504 <tftp_get+0x9c>)
 80074c0:	f01c fffc 	bl	80244bc <iprintf>
}
 80074c4:	f06f 0005 	mvn.w	r0, #5
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 80074ca:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <tftp_get+0x94>)
 80074cc:	f240 2215 	movw	r2, #533	; 0x215
 80074d0:	490d      	ldr	r1, [pc, #52]	; (8007508 <tftp_get+0xa0>)
 80074d2:	480c      	ldr	r0, [pc, #48]	; (8007504 <tftp_get+0x9c>)
 80074d4:	f01c fff2 	bl	80244bc <iprintf>
 80074d8:	e7f4      	b.n	80074c4 <tftp_get+0x5c>
  LWIP_ERROR("tftp_get: invalid file name", fname != NULL, return ERR_VAL);
 80074da:	4b08      	ldr	r3, [pc, #32]	; (80074fc <tftp_get+0x94>)
 80074dc:	f240 2216 	movw	r2, #534	; 0x216
 80074e0:	490a      	ldr	r1, [pc, #40]	; (800750c <tftp_get+0xa4>)
 80074e2:	4808      	ldr	r0, [pc, #32]	; (8007504 <tftp_get+0x9c>)
 80074e4:	f01c ffea 	bl	80244bc <iprintf>
 80074e8:	e7ec      	b.n	80074c4 <tftp_get+0x5c>
 80074ea:	bf00      	nop
 80074ec:	20002d78 	.word	0x20002d78
 80074f0:	0802aca4 	.word	0x0802aca4
 80074f4:	0802ac90 	.word	0x0802ac90
 80074f8:	0802ac9c 	.word	0x0802ac9c
 80074fc:	0802ac20 	.word	0x0802ac20
 8007500:	0802acf0 	.word	0x0802acf0
 8007504:	0802ac68 	.word	0x0802ac68
 8007508:	0802acac 	.word	0x0802acac
 800750c:	0802acd4 	.word	0x0802acd4

08007510 <tftp_open>:
tftp_open_mem(const unsigned int memaddress, u8_t is_write)
{
	void* memptr;

  if (is_write) {
	  if (memaddress == TFTP_BASE_MEM) {			// only allow this memory address
 8007510:	f5b0 1f20 	cmp.w	r0, #2621440	; 0x280000
 8007514:	d103      	bne.n	800751e <tftp_open+0xe>
 8007516:	b112      	cbz	r2, 800751e <tftp_open+0xe>
		  memptr = TFTP_BASE_MEM;
		  return (memptr);		// write
 8007518:	f44f 1020 	mov.w	r0, #2621440	; 0x280000
static void*
tftp_open(const char* fname, const char* mode, u8_t is_write)
{
  LWIP_UNUSED_ARG(mode);
  return tftp_open_mem(fname, is_write);
}
 800751c:	4770      	bx	lr
		  return(0);
 800751e:	2000      	movs	r0, #0
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop

08007524 <tftp_close>:

static void
tftp_close(void* memptr)
{
  memclose(memptr);
}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop

08007528 <tftp_read>:
  int ret = memread(buf, 1, bytes, memptr);
  if (ret <= 0) {
    return -1;
  }
  return ret;
}
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop

08007530 <tftp_error>:
}

/* For TFTP client only */
static void
tftp_error(void* memptr, int err, const char* msg, int size)
{
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	b09a      	sub	sp, #104	; 0x68
 8007534:	461e      	mov	r6, r3
 8007536:	4615      	mov	r5, r2
 8007538:	460c      	mov	r4, r1
  char message[100];

  LWIP_UNUSED_ARG(memptr);

  memset(message, 0, sizeof(message));
 800753a:	2264      	movs	r2, #100	; 0x64
 800753c:	2100      	movs	r1, #0
 800753e:	a801      	add	r0, sp, #4
 8007540:	f01c f820 	bl	8023584 <memset>
  MEMCPY(message, msg, LWIP_MIN(sizeof(message)-1, (size_t)size));
 8007544:	2e63      	cmp	r6, #99	; 0x63
 8007546:	4632      	mov	r2, r6
 8007548:	4629      	mov	r1, r5
 800754a:	bf28      	it	cs
 800754c:	2263      	movcs	r2, #99	; 0x63
 800754e:	a801      	add	r0, sp, #4
 8007550:	f01b fff0 	bl	8023534 <memcpy>

  printf("TFTP error: %d (%s)", err, message);
 8007554:	aa01      	add	r2, sp, #4
 8007556:	4621      	mov	r1, r4
 8007558:	4802      	ldr	r0, [pc, #8]	; (8007564 <tftp_error+0x34>)
 800755a:	f01c ffaf 	bl	80244bc <iprintf>
}
 800755e:	b01a      	add	sp, #104	; 0x68
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	bf00      	nop
 8007564:	0802ad08 	.word	0x0802ad08

08007568 <tftp_write>:
  while (p != NULL) {
 8007568:	b199      	cbz	r1, 8007592 <tftp_write+0x2a>
{
 800756a:	b538      	push	{r3, r4, r5, lr}
 800756c:	4605      	mov	r5, r0
 800756e:	460c      	mov	r4, r1
 8007570:	e001      	b.n	8007576 <tftp_write+0xe>
    p = p->next;
 8007572:	6824      	ldr	r4, [r4, #0]
  while (p != NULL) {
 8007574:	b15c      	cbz	r4, 800758e <tftp_write+0x26>
    if (fwrite(p->payload, 1, p->len, memptr) != (size_t)p->len) {
 8007576:	8962      	ldrh	r2, [r4, #10]
 8007578:	462b      	mov	r3, r5
 800757a:	6860      	ldr	r0, [r4, #4]
 800757c:	2101      	movs	r1, #1
 800757e:	f01b fe6f 	bl	8023260 <fwrite>
 8007582:	8962      	ldrh	r2, [r4, #10]
 8007584:	4290      	cmp	r0, r2
 8007586:	d0f4      	beq.n	8007572 <tftp_write+0xa>
      return -1;
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
}
 800758c:	bd38      	pop	{r3, r4, r5, pc}
  return 0;
 800758e:	2000      	movs	r0, #0
}
 8007590:	bd38      	pop	{r3, r4, r5, pc}
  return 0;
 8007592:	2000      	movs	r0, #0
}
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop

08007598 <tftp_example_init_client>:
  tftp_init_server(&tftp);
}

void
tftp_example_init_client(void)
{
 8007598:	b510      	push	{r4, lr}
 800759a:	b084      	sub	sp, #16
  void *f;
  err_t err;
  ip_addr_t srv;
  int ret = ipaddr_aton(LWIP_TFTP_EXAMPLE_CLIENT_REMOTEIP, &srv);
 800759c:	4815      	ldr	r0, [pc, #84]	; (80075f4 <tftp_example_init_client+0x5c>)
 800759e:	a903      	add	r1, sp, #12
 80075a0:	f01a fce0 	bl	8021f64 <ip4addr_aton>
  LWIP_ASSERT("ipaddr_aton failed", ret == 1);
 80075a4:	2801      	cmp	r0, #1
 80075a6:	d005      	beq.n	80075b4 <tftp_example_init_client+0x1c>
 80075a8:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <tftp_example_init_client+0x60>)
 80075aa:	22a1      	movs	r2, #161	; 0xa1
 80075ac:	4913      	ldr	r1, [pc, #76]	; (80075fc <tftp_example_init_client+0x64>)
 80075ae:	4814      	ldr	r0, [pc, #80]	; (8007600 <tftp_example_init_client+0x68>)
 80075b0:	f01c ff84 	bl	80244bc <iprintf>

  err = tftp_init_client(&tftp);
 80075b4:	4813      	ldr	r0, [pc, #76]	; (8007604 <tftp_example_init_client+0x6c>)
 80075b6:	f7ff ff53 	bl	8007460 <tftp_init_client>
  LWIP_ASSERT("tftp_init_client failed", err == ERR_OK);
 80075ba:	b958      	cbnz	r0, 80075d4 <tftp_example_init_client+0x3c>

  f = tftp_open_mem(TFTP_BASE_MEM, 1);
  LWIP_ASSERT("failed to create file", f != NULL);

  err = tftp_get(f, &srv, TFTP_PORT, LWIP_TFTP_EXAMPLE_CLIENT_FILENAME, TFTP_MODE_OCTET);
 80075bc:	2400      	movs	r4, #0
 80075be:	4b12      	ldr	r3, [pc, #72]	; (8007608 <tftp_example_init_client+0x70>)
 80075c0:	2245      	movs	r2, #69	; 0x45
 80075c2:	a903      	add	r1, sp, #12
 80075c4:	f44f 1020 	mov.w	r0, #2621440	; 0x280000
 80075c8:	9400      	str	r4, [sp, #0]
 80075ca:	f7ff ff4d 	bl	8007468 <tftp_get>
  LWIP_ASSERT("tftp_get failed", err == ERR_OK);
 80075ce:	b940      	cbnz	r0, 80075e2 <tftp_example_init_client+0x4a>
}
 80075d0:	b004      	add	sp, #16
 80075d2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tftp_init_client failed", err == ERR_OK);
 80075d4:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <tftp_example_init_client+0x60>)
 80075d6:	22a4      	movs	r2, #164	; 0xa4
 80075d8:	490c      	ldr	r1, [pc, #48]	; (800760c <tftp_example_init_client+0x74>)
 80075da:	4809      	ldr	r0, [pc, #36]	; (8007600 <tftp_example_init_client+0x68>)
 80075dc:	f01c ff6e 	bl	80244bc <iprintf>
 80075e0:	e7ec      	b.n	80075bc <tftp_example_init_client+0x24>
  LWIP_ASSERT("tftp_get failed", err == ERR_OK);
 80075e2:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <tftp_example_init_client+0x60>)
 80075e4:	22aa      	movs	r2, #170	; 0xaa
 80075e6:	490a      	ldr	r1, [pc, #40]	; (8007610 <tftp_example_init_client+0x78>)
 80075e8:	4805      	ldr	r0, [pc, #20]	; (8007600 <tftp_example_init_client+0x68>)
 80075ea:	f01c ff67 	bl	80244bc <iprintf>
}
 80075ee:	b004      	add	sp, #16
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	bf00      	nop
 80075f4:	0802ad1c 	.word	0x0802ad1c
 80075f8:	0802ad28 	.word	0x0802ad28
 80075fc:	0802ad48 	.word	0x0802ad48
 8007600:	0802ac68 	.word	0x0802ac68
 8007604:	0802ad90 	.word	0x0802ad90
 8007608:	0802ad74 	.word	0x0802ad74
 800760c:	0802ad5c 	.word	0x0802ad5c
 8007610:	0802ad80 	.word	0x0802ad80

08007614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8007614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800764c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007618:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800761a:	e003      	b.n	8007624 <LoopCopyDataInit>

0800761c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800761c:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800761e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007620:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007622:	3104      	adds	r1, #4

08007624 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007624:	480b      	ldr	r0, [pc, #44]	; (8007654 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007628:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800762a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800762c:	d3f6      	bcc.n	800761c <CopyDataInit>
  ldr  r2, =_sbss
 800762e:	4a0b      	ldr	r2, [pc, #44]	; (800765c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007630:	e002      	b.n	8007638 <LoopFillZerobss>

08007632 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007632:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007634:	f842 3b04 	str.w	r3, [r2], #4

08007638 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007638:	4b09      	ldr	r3, [pc, #36]	; (8007660 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800763a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800763c:	d3f9      	bcc.n	8007632 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800763e:	f7fe fe8b 	bl	8006358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007642:	f01b fe1b 	bl	802327c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007646:	f7fb fcd5 	bl	8002ff4 <main>
  bx  lr    
 800764a:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 800764c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007650:	080e2b44 	.word	0x080e2b44
  ldr  r0, =_sdata
 8007654:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007658:	200006bc 	.word	0x200006bc
  ldr  r2, =_sbss
 800765c:	200006c0 	.word	0x200006c0
  ldr  r3, = _ebss
 8007660:	2002f924 	.word	0x2002f924

08007664 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007664:	e7fe      	b.n	8007664 <CAN1_RX0_IRQHandler>
	...

08007668 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007668:	4a07      	ldr	r2, [pc, #28]	; (8007688 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800766a:	2003      	movs	r0, #3
{
 800766c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800766e:	6813      	ldr	r3, [r2, #0]
 8007670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007674:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007676:	f000 fc4f 	bl	8007f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800767a:	2000      	movs	r0, #0
 800767c:	f7fe fd38 	bl	80060f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007680:	f7fd fdbe 	bl	8005200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007684:	2000      	movs	r0, #0
 8007686:	bd08      	pop	{r3, pc}
 8007688:	40023c00 	.word	0x40023c00

0800768c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800768c:	4a03      	ldr	r2, [pc, #12]	; (800769c <HAL_IncTick+0x10>)
 800768e:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <HAL_IncTick+0x14>)
 8007690:	6811      	ldr	r1, [r2, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	440b      	add	r3, r1
 8007696:	6013      	str	r3, [r2, #0]
}
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	20002da0 	.word	0x20002da0
 80076a0:	200002d8 	.word	0x200002d8

080076a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80076a4:	4b01      	ldr	r3, [pc, #4]	; (80076ac <HAL_GetTick+0x8>)
 80076a6:	6818      	ldr	r0, [r3, #0]
}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20002da0 	.word	0x20002da0

080076b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80076b4:	f7ff fff6 	bl	80076a4 <HAL_GetTick>
 80076b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076ba:	1c63      	adds	r3, r4, #1
 80076bc:	d002      	beq.n	80076c4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80076be:	4b04      	ldr	r3, [pc, #16]	; (80076d0 <HAL_Delay+0x20>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80076c4:	f7ff ffee 	bl	80076a4 <HAL_GetTick>
 80076c8:	1b43      	subs	r3, r0, r5
 80076ca:	42a3      	cmp	r3, r4
 80076cc:	d3fa      	bcc.n	80076c4 <HAL_Delay+0x14>
  {
  }
}
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	200002d8 	.word	0x200002d8

080076d4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80076d4:	2800      	cmp	r0, #0
 80076d6:	f000 8144 	beq.w	8007962 <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80076da:	6803      	ldr	r3, [r0, #0]
 80076dc:	49a7      	ldr	r1, [pc, #668]	; (800797c <HAL_ADC_Init+0x2a8>)
 80076de:	4aa8      	ldr	r2, [pc, #672]	; (8007980 <HAL_ADC_Init+0x2ac>)
 80076e0:	428b      	cmp	r3, r1
 80076e2:	bf18      	it	ne
 80076e4:	4293      	cmpne	r3, r2
{
 80076e6:	b570      	push	{r4, r5, r6, lr}
 80076e8:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80076ea:	d003      	beq.n	80076f4 <HAL_ADC_Init+0x20>
 80076ec:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d177      	bne.n	80077e4 <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80076f4:	6863      	ldr	r3, [r4, #4]
 80076f6:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80076fa:	d17c      	bne.n	80077f6 <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007702:	f040 8082 	bne.w	800780a <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007706:	6923      	ldr	r3, [r4, #16]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d84e      	bhi.n	80077aa <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800770c:	69a3      	ldr	r3, [r4, #24]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d845      	bhi.n	800779e <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8007712:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007714:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8007718:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 800771c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007720:	bf18      	it	ne
 8007722:	2900      	cmpne	r1, #0
 8007724:	bf14      	ite	ne
 8007726:	2301      	movne	r3, #1
 8007728:	2300      	moveq	r3, #0
 800772a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800772e:	bf0c      	ite	eq
 8007730:	2300      	moveq	r3, #0
 8007732:	f003 0301 	andne.w	r3, r3, #1
 8007736:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 800773a:	bf0c      	ite	eq
 800773c:	2300      	moveq	r3, #0
 800773e:	f003 0301 	andne.w	r3, r3, #1
 8007742:	b123      	cbz	r3, 800774e <HAL_ADC_Init+0x7a>
 8007744:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8007748:	2a01      	cmp	r2, #1
 800774a:	f200 8111 	bhi.w	8007970 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800774e:	68e3      	ldr	r3, [r4, #12]
 8007750:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8007754:	d165      	bne.n	8007822 <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007756:	69e3      	ldr	r3, [r4, #28]
 8007758:	3b01      	subs	r3, #1
 800775a:	2b0f      	cmp	r3, #15
 800775c:	d85b      	bhi.n	8007816 <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800775e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007762:	2b01      	cmp	r3, #1
 8007764:	d830      	bhi.n	80077c8 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007766:	6963      	ldr	r3, [r4, #20]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d835      	bhi.n	80077d8 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800776c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d823      	bhi.n	80077bc <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007774:	4b83      	ldr	r3, [pc, #524]	; (8007984 <HAL_ADC_Init+0x2b0>)
 8007776:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007778:	429a      	cmp	r2, r3
 800777a:	d004      	beq.n	8007786 <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800777c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800777e:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8007782:	f040 80e8 	bne.w	8007956 <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007786:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007788:	2d00      	cmp	r5, #0
 800778a:	f000 80d4 	beq.w	8007936 <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800778e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007790:	06db      	lsls	r3, r3, #27
 8007792:	d54c      	bpl.n	800782e <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007794:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8007796:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8007798:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800779c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800779e:	f240 1151 	movw	r1, #337	; 0x151
 80077a2:	4879      	ldr	r0, [pc, #484]	; (8007988 <HAL_ADC_Init+0x2b4>)
 80077a4:	f7fc fbd2 	bl	8003f4c <assert_failed>
 80077a8:	e7b3      	b.n	8007712 <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80077aa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80077ae:	4876      	ldr	r0, [pc, #472]	; (8007988 <HAL_ADC_Init+0x2b4>)
 80077b0:	f7fc fbcc 	bl	8003f4c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80077b4:	69a3      	ldr	r3, [r4, #24]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d9ab      	bls.n	8007712 <HAL_ADC_Init+0x3e>
 80077ba:	e7f0      	b.n	800779e <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80077bc:	f240 1157 	movw	r1, #343	; 0x157
 80077c0:	4871      	ldr	r0, [pc, #452]	; (8007988 <HAL_ADC_Init+0x2b4>)
 80077c2:	f7fc fbc3 	bl	8003f4c <assert_failed>
 80077c6:	e7d5      	b.n	8007774 <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80077c8:	f240 1155 	movw	r1, #341	; 0x155
 80077cc:	486e      	ldr	r0, [pc, #440]	; (8007988 <HAL_ADC_Init+0x2b4>)
 80077ce:	f7fc fbbd 	bl	8003f4c <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80077d2:	6963      	ldr	r3, [r4, #20]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d9c9      	bls.n	800776c <HAL_ADC_Init+0x98>
 80077d8:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80077dc:	486a      	ldr	r0, [pc, #424]	; (8007988 <HAL_ADC_Init+0x2b4>)
 80077de:	f7fc fbb5 	bl	8003f4c <assert_failed>
 80077e2:	e7c3      	b.n	800776c <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80077e4:	f240 114d 	movw	r1, #333	; 0x14d
 80077e8:	4867      	ldr	r0, [pc, #412]	; (8007988 <HAL_ADC_Init+0x2b4>)
 80077ea:	f7fc fbaf 	bl	8003f4c <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80077ee:	6863      	ldr	r3, [r4, #4]
 80077f0:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80077f4:	d082      	beq.n	80076fc <HAL_ADC_Init+0x28>
 80077f6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80077fa:	4863      	ldr	r0, [pc, #396]	; (8007988 <HAL_ADC_Init+0x2b4>)
 80077fc:	f7fc fba6 	bl	8003f4c <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007800:	68a3      	ldr	r3, [r4, #8]
 8007802:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007806:	f43f af7e 	beq.w	8007706 <HAL_ADC_Init+0x32>
 800780a:	f240 114f 	movw	r1, #335	; 0x14f
 800780e:	485e      	ldr	r0, [pc, #376]	; (8007988 <HAL_ADC_Init+0x2b4>)
 8007810:	f7fc fb9c 	bl	8003f4c <assert_failed>
 8007814:	e777      	b.n	8007706 <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007816:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800781a:	485b      	ldr	r0, [pc, #364]	; (8007988 <HAL_ADC_Init+0x2b4>)
 800781c:	f7fc fb96 	bl	8003f4c <assert_failed>
 8007820:	e79d      	b.n	800775e <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8007822:	f240 1153 	movw	r1, #339	; 0x153
 8007826:	4858      	ldr	r0, [pc, #352]	; (8007988 <HAL_ADC_Init+0x2b4>)
 8007828:	f7fc fb90 	bl	8003f4c <assert_failed>
 800782c:	e793      	b.n	8007756 <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 800782e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007830:	4b56      	ldr	r3, [pc, #344]	; (800798c <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007832:	4a57      	ldr	r2, [pc, #348]	; (8007990 <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 8007834:	400b      	ands	r3, r1
 8007836:	f043 0302 	orr.w	r3, r3, #2
 800783a:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800783c:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800783e:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007840:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8007844:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007846:	6851      	ldr	r1, [r2, #4]
 8007848:	6860      	ldr	r0, [r4, #4]
 800784a:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800784c:	484d      	ldr	r0, [pc, #308]	; (8007984 <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800784e:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007850:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007852:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007854:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007858:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007860:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007862:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800786a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800786c:	6859      	ldr	r1, [r3, #4]
 800786e:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007870:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007872:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007874:	6899      	ldr	r1, [r3, #8]
 8007876:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800787a:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800787c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800787e:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007880:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007882:	ea42 0205 	orr.w	r2, r2, r5
 8007886:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007888:	d05c      	beq.n	8007944 <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800788a:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800788c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800788e:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8007892:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	4311      	orrs	r1, r2
 8007898:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800789a:	6899      	ldr	r1, [r3, #8]
 800789c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80078a0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	432a      	orrs	r2, r5
 80078a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80078a8:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80078aa:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80078ac:	f021 0102 	bic.w	r1, r1, #2
 80078b0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80078b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80078ba:	f894 2020 	ldrb.w	r2, [r4, #32]
 80078be:	2a00      	cmp	r2, #0
 80078c0:	d051      	beq.n	8007966 <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80078c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80078c4:	3a01      	subs	r2, #1
 80078c6:	2a07      	cmp	r2, #7
 80078c8:	d864      	bhi.n	8007994 <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80078ca:	6859      	ldr	r1, [r3, #4]
 80078cc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80078d0:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80078d2:	6859      	ldr	r1, [r3, #4]
 80078d4:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80078d8:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80078da:	6859      	ldr	r1, [r3, #4]
 80078dc:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 80078e0:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80078e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80078e4:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80078e6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80078e8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80078ec:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80078ee:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80078f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80078f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078f4:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078f8:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80078fa:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80078fc:	6899      	ldr	r1, [r3, #8]
 80078fe:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8007902:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007904:	6899      	ldr	r1, [r3, #8]
 8007906:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800790a:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 800790e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007910:	6899      	ldr	r1, [r3, #8]
 8007912:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007916:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800791e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007920:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8007922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007924:	f023 0303 	bic.w	r3, r3, #3
 8007928:	f043 0301 	orr.w	r3, r3, #1
 800792c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800792e:	2300      	movs	r3, #0
 8007930:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007934:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8007936:	4620      	mov	r0, r4
 8007938:	f7fd fc92 	bl	8005260 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800793c:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800793e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8007942:	e724      	b.n	800778e <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800794a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	e7a8      	b.n	80078a8 <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8007956:	f240 115b 	movw	r1, #347	; 0x15b
 800795a:	480b      	ldr	r0, [pc, #44]	; (8007988 <HAL_ADC_Init+0x2b4>)
 800795c:	f7fc faf6 	bl	8003f4c <assert_failed>
 8007960:	e711      	b.n	8007786 <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 8007962:	2001      	movs	r0, #1
}
 8007964:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800796c:	605a      	str	r2, [r3, #4]
 800796e:	e7b8      	b.n	80078e2 <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8007970:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007974:	4804      	ldr	r0, [pc, #16]	; (8007988 <HAL_ADC_Init+0x2b4>)
 8007976:	f7fc fae9 	bl	8003f4c <assert_failed>
 800797a:	e6e8      	b.n	800774e <HAL_ADC_Init+0x7a>
 800797c:	40012000 	.word	0x40012000
 8007980:	40012100 	.word	0x40012100
 8007984:	0f000001 	.word	0x0f000001
 8007988:	0802ada4 	.word	0x0802ada4
 800798c:	ffffeefd 	.word	0xffffeefd
 8007990:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007994:	f240 71ac 	movw	r1, #1964	; 0x7ac
 8007998:	4803      	ldr	r0, [pc, #12]	; (80079a8 <HAL_ADC_Init+0x2d4>)
 800799a:	f7fc fad7 	bl	8003f4c <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800799e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80079a0:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80079a2:	3a01      	subs	r2, #1
 80079a4:	e791      	b.n	80078ca <HAL_ADC_Init+0x1f6>
 80079a6:	bf00      	nop
 80079a8:	0802ada4 	.word	0x0802ada4

080079ac <HAL_ADC_Start>:
{
 80079ac:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 80079ae:	2300      	movs	r3, #0
{
 80079b0:	b082      	sub	sp, #8
 80079b2:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80079b4:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80079b6:	6983      	ldr	r3, [r0, #24]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d904      	bls.n	80079c6 <HAL_ADC_Start+0x1a>
 80079bc:	f240 21df 	movw	r1, #735	; 0x2df
 80079c0:	4848      	ldr	r0, [pc, #288]	; (8007ae4 <HAL_ADC_Start+0x138>)
 80079c2:	f7fc fac3 	bl	8003f4c <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80079c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80079c8:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80079cc:	d174      	bne.n	8007ab8 <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 80079ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d079      	beq.n	8007aca <HAL_ADC_Start+0x11e>
 80079d6:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80079d8:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 80079da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80079de:	6893      	ldr	r3, [r2, #8]
 80079e0:	07d8      	lsls	r0, r3, #31
 80079e2:	d414      	bmi.n	8007a0e <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80079e4:	4b40      	ldr	r3, [pc, #256]	; (8007ae8 <HAL_ADC_Start+0x13c>)
 80079e6:	4841      	ldr	r0, [pc, #260]	; (8007aec <HAL_ADC_Start+0x140>)
 80079e8:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80079ea:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80079ec:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80079f0:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80079f4:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80079f6:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80079f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80079fc:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80079fe:	9b01      	ldr	r3, [sp, #4]
 8007a00:	b12b      	cbz	r3, 8007a0e <HAL_ADC_Start+0x62>
      counter--;
 8007a02:	9b01      	ldr	r3, [sp, #4]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1f9      	bne.n	8007a02 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007a0e:	6890      	ldr	r0, [r2, #8]
 8007a10:	f010 0001 	ands.w	r0, r0, #1
 8007a14:	d02c      	beq.n	8007a70 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 8007a16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007a18:	4b35      	ldr	r3, [pc, #212]	; (8007af0 <HAL_ADC_Start+0x144>)
 8007a1a:	400b      	ands	r3, r1
 8007a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a20:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007a22:	6853      	ldr	r3, [r2, #4]
 8007a24:	0559      	lsls	r1, r3, #21
 8007a26:	d505      	bpl.n	8007a34 <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007a28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007a2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a32:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007a34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a36:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8007a3a:	d02f      	beq.n	8007a9c <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007a3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a3e:	f023 0306 	bic.w	r3, r3, #6
 8007a42:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007a44:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8007a48:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007a4a:	4b2a      	ldr	r3, [pc, #168]	; (8007af4 <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 8007a4c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007a50:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007a52:	6858      	ldr	r0, [r3, #4]
 8007a54:	f010 001f 	ands.w	r0, r0, #31
 8007a58:	d114      	bne.n	8007a84 <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007a5a:	6893      	ldr	r3, [r2, #8]
 8007a5c:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8007a60:	d10e      	bne.n	8007a80 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007a62:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 8007a64:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007a66:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8007a6a:	6091      	str	r1, [r2, #8]
}
 8007a6c:	b002      	add	sp, #8
 8007a6e:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a72:	f043 0310 	orr.w	r3, r3, #16
 8007a76:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a7a:	f043 0301 	orr.w	r3, r3, #1
 8007a7e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007a80:	b002      	add	sp, #8
 8007a82:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007a84:	481c      	ldr	r0, [pc, #112]	; (8007af8 <HAL_ADC_Start+0x14c>)
 8007a86:	4282      	cmp	r2, r0
 8007a88:	d00a      	beq.n	8007aa0 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007a8a:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007a8c:	06db      	lsls	r3, r3, #27
 8007a8e:	d402      	bmi.n	8007a96 <HAL_ADC_Start+0xea>
 8007a90:	4c1a      	ldr	r4, [pc, #104]	; (8007afc <HAL_ADC_Start+0x150>)
 8007a92:	42a2      	cmp	r2, r4
 8007a94:	d01c      	beq.n	8007ad0 <HAL_ADC_Start+0x124>
  return HAL_OK;
 8007a96:	2000      	movs	r0, #0
}
 8007a98:	b002      	add	sp, #8
 8007a9a:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8007a9c:	6463      	str	r3, [r4, #68]	; 0x44
 8007a9e:	e7d1      	b.n	8007a44 <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007aa0:	6893      	ldr	r3, [r2, #8]
 8007aa2:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8007aa6:	d103      	bne.n	8007ab0 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007aa8:	6893      	ldr	r3, [r2, #8]
 8007aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aae:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007ab0:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <HAL_ADC_Start+0x148>)
  return HAL_OK;
 8007ab2:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007ab4:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007ab6:	e7e3      	b.n	8007a80 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8007ab8:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8007abc:	4809      	ldr	r0, [pc, #36]	; (8007ae4 <HAL_ADC_Start+0x138>)
 8007abe:	f7fc fa45 	bl	8003f4c <assert_failed>
  __HAL_LOCK(hadc);
 8007ac2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d185      	bne.n	80079d6 <HAL_ADC_Start+0x2a>
 8007aca:	2002      	movs	r0, #2
}
 8007acc:	b002      	add	sp, #8
 8007ace:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007ad0:	68a0      	ldr	r0, [r4, #8]
 8007ad2:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8007ad6:	d1de      	bne.n	8007a96 <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007ad8:	68a3      	ldr	r3, [r4, #8]
 8007ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ade:	60a3      	str	r3, [r4, #8]
 8007ae0:	e7ce      	b.n	8007a80 <HAL_ADC_Start+0xd4>
 8007ae2:	bf00      	nop
 8007ae4:	0802ada4 	.word	0x0802ada4
 8007ae8:	2000027c 	.word	0x2000027c
 8007aec:	431bde83 	.word	0x431bde83
 8007af0:	fffff8fe 	.word	0xfffff8fe
 8007af4:	40012300 	.word	0x40012300
 8007af8:	40012000 	.word	0x40012000
 8007afc:	40012200 	.word	0x40012200

08007b00 <HAL_ADC_ConvCpltCallback>:
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop

08007b04 <HAL_ADC_LevelOutOfWindowCallback>:
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop

08007b08 <HAL_ADC_ErrorCallback>:
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop

08007b0c <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007b0c:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 8007b0e:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007b10:	2a01      	cmp	r2, #1
{
 8007b12:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8007b14:	681d      	ldr	r5, [r3, #0]
{
 8007b16:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007b18:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007b1a:	d904      	bls.n	8007b26 <HAL_ADC_IRQHandler+0x1a>
 8007b1c:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8007b20:	4851      	ldr	r0, [pc, #324]	; (8007c68 <HAL_ADC_IRQHandler+0x15c>)
 8007b22:	f7fc fa13 	bl	8003f4c <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007b26:	69e3      	ldr	r3, [r4, #28]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	2b0f      	cmp	r3, #15
 8007b2c:	f200 8086 	bhi.w	8007c3c <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007b30:	6963      	ldr	r3, [r4, #20]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d87c      	bhi.n	8007c30 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 8007b36:	07ab      	lsls	r3, r5, #30
 8007b38:	d52c      	bpl.n	8007b94 <HAL_ADC_IRQHandler+0x88>
 8007b3a:	06b0      	lsls	r0, r6, #26
 8007b3c:	d52a      	bpl.n	8007b94 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b40:	06d9      	lsls	r1, r3, #27
 8007b42:	d403      	bmi.n	8007b4c <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007b44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b4a:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8007b54:	d117      	bne.n	8007b86 <HAL_ADC_IRQHandler+0x7a>
 8007b56:	69a2      	ldr	r2, [r4, #24]
 8007b58:	b9aa      	cbnz	r2, 8007b86 <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007b5c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8007b60:	d002      	beq.n	8007b68 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007b62:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007b64:	0552      	lsls	r2, r2, #21
 8007b66:	d40e      	bmi.n	8007b86 <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	f022 0220 	bic.w	r2, r2, #32
 8007b6e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007b70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b76:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b7a:	04d8      	lsls	r0, r3, #19
 8007b7c:	d403      	bmi.n	8007b86 <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b80:	f043 0301 	orr.w	r3, r3, #1
 8007b84:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8007b86:	4620      	mov	r0, r4
 8007b88:	f7ff ffba 	bl	8007b00 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	f06f 0212 	mvn.w	r2, #18
 8007b92:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8007b94:	0769      	lsls	r1, r5, #29
 8007b96:	d530      	bpl.n	8007bfa <HAL_ADC_IRQHandler+0xee>
 8007b98:	0632      	lsls	r2, r6, #24
 8007b9a:	d52e      	bpl.n	8007bfa <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007b9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b9e:	06db      	lsls	r3, r3, #27
 8007ba0:	d403      	bmi.n	8007baa <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ba4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ba8:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	689a      	ldr	r2, [r3, #8]
 8007bae:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8007bb2:	d11b      	bne.n	8007bec <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007bb6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8007bba:	d151      	bne.n	8007c60 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007bbc:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007bbe:	0551      	lsls	r1, r2, #21
 8007bc0:	d414      	bmi.n	8007bec <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007bc2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007bc4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8007bc8:	d110      	bne.n	8007bec <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007bca:	69a2      	ldr	r2, [r4, #24]
 8007bcc:	b972      	cbnz	r2, 8007bec <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bd4:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bdc:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007be0:	05da      	lsls	r2, r3, #23
 8007be2:	d403      	bmi.n	8007bec <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 f92f 	bl	8007e50 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	f06f 020c 	mvn.w	r2, #12
 8007bf8:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8007bfa:	0673      	lsls	r3, r6, #25
 8007bfc:	d505      	bpl.n	8007c0a <HAL_ADC_IRQHandler+0xfe>
 8007bfe:	07e8      	lsls	r0, r5, #31
 8007c00:	d503      	bpl.n	8007c0a <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	07d9      	lsls	r1, r3, #31
 8007c08:	d41e      	bmi.n	8007c48 <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 8007c0a:	06aa      	lsls	r2, r5, #26
 8007c0c:	d501      	bpl.n	8007c12 <HAL_ADC_IRQHandler+0x106>
 8007c0e:	0173      	lsls	r3, r6, #5
 8007c10:	d400      	bmi.n	8007c14 <HAL_ADC_IRQHandler+0x108>
}
 8007c12:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007c14:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c16:	f06f 0520 	mvn.w	r5, #32
 8007c1a:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 8007c1c:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007c1e:	f043 0302 	orr.w	r3, r3, #2
 8007c22:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c24:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 8007c26:	f7ff ff6f 	bl	8007b08 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	601d      	str	r5, [r3, #0]
}
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007c30:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8007c34:	480c      	ldr	r0, [pc, #48]	; (8007c68 <HAL_ADC_IRQHandler+0x15c>)
 8007c36:	f7fc f989 	bl	8003f4c <assert_failed>
 8007c3a:	e77c      	b.n	8007b36 <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007c3c:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8007c40:	4809      	ldr	r0, [pc, #36]	; (8007c68 <HAL_ADC_IRQHandler+0x15c>)
 8007c42:	f7fc f983 	bl	8003f4c <assert_failed>
 8007c46:	e773      	b.n	8007b30 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007c4a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c50:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007c52:	f7ff ff57 	bl	8007b04 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	f06f 0201 	mvn.w	r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e7d4      	b.n	8007c0a <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007c60:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007c62:	0550      	lsls	r0, r2, #21
 8007c64:	d4c2      	bmi.n	8007bec <HAL_ADC_IRQHandler+0xe0>
 8007c66:	e7a9      	b.n	8007bbc <HAL_ADC_IRQHandler+0xb0>
 8007c68:	0802ada4 	.word	0x0802ada4

08007c6c <HAL_ADC_ConfigChannel>:
{
 8007c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8007c6e:	2300      	movs	r3, #0
{
 8007c70:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8007c72:	4a71      	ldr	r2, [pc, #452]	; (8007e38 <HAL_ADC_ConfigChannel+0x1cc>)
{
 8007c74:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 8007c76:	9301      	str	r3, [sp, #4]
{
 8007c78:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8007c7a:	680b      	ldr	r3, [r1, #0]
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	bf18      	it	ne
 8007c80:	2b12      	cmpne	r3, #18
 8007c82:	d902      	bls.n	8007c8a <HAL_ADC_ConfigChannel+0x1e>
 8007c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c88:	d142      	bne.n	8007d10 <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8007c8a:	6863      	ldr	r3, [r4, #4]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	2b0f      	cmp	r3, #15
 8007c90:	d847      	bhi.n	8007d22 <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8007c92:	68a3      	ldr	r3, [r4, #8]
 8007c94:	2b07      	cmp	r3, #7
 8007c96:	d84c      	bhi.n	8007d32 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8007c98:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d051      	beq.n	8007d44 <HAL_ADC_ConfigChannel+0xd8>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007ca6:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007ca8:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007caa:	2809      	cmp	r0, #9
 8007cac:	d94d      	bls.n	8007d4a <HAL_ADC_ConfigChannel+0xde>
 8007cae:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8007cb2:	d04a      	beq.n	8007d4a <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007cb4:	b281      	uxth	r1, r0
 8007cb6:	f04f 0c07 	mov.w	ip, #7
 8007cba:	68de      	ldr	r6, [r3, #12]
 8007cbc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007cc0:	4f5d      	ldr	r7, [pc, #372]	; (8007e38 <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007cc2:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007cc4:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007cc6:	fa0c fc02 	lsl.w	ip, ip, r2
 8007cca:	ea26 060c 	bic.w	r6, r6, ip
 8007cce:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007cd0:	f000 8083 	beq.w	8007dda <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007cd4:	68a6      	ldr	r6, [r4, #8]
 8007cd6:	4096      	lsls	r6, r2
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	4316      	orrs	r6, r2
 8007cdc:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 8007cde:	6862      	ldr	r2, [r4, #4]
 8007ce0:	2a06      	cmp	r2, #6
 8007ce2:	d846      	bhi.n	8007d72 <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007ce4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007ce8:	241f      	movs	r4, #31
 8007cea:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007cec:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007cee:	4094      	lsls	r4, r2
 8007cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cf2:	ea22 0204 	bic.w	r2, r2, r4
 8007cf6:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cfa:	4311      	orrs	r1, r2
 8007cfc:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007cfe:	4a4f      	ldr	r2, [pc, #316]	; (8007e3c <HAL_ADC_ConfigChannel+0x1d0>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d048      	beq.n	8007d96 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 8007d04:	2300      	movs	r3, #0
  return HAL_OK;
 8007d06:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8007d08:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8007d0c:	b003      	add	sp, #12
 8007d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8007d10:	f240 618b 	movw	r1, #1675	; 0x68b
 8007d14:	484a      	ldr	r0, [pc, #296]	; (8007e40 <HAL_ADC_ConfigChannel+0x1d4>)
 8007d16:	f7fc f919 	bl	8003f4c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8007d1a:	6863      	ldr	r3, [r4, #4]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	2b0f      	cmp	r3, #15
 8007d20:	d9b7      	bls.n	8007c92 <HAL_ADC_ConfigChannel+0x26>
 8007d22:	f240 618c 	movw	r1, #1676	; 0x68c
 8007d26:	4846      	ldr	r0, [pc, #280]	; (8007e40 <HAL_ADC_ConfigChannel+0x1d4>)
 8007d28:	f7fc f910 	bl	8003f4c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8007d2c:	68a3      	ldr	r3, [r4, #8]
 8007d2e:	2b07      	cmp	r3, #7
 8007d30:	d9b2      	bls.n	8007c98 <HAL_ADC_ConfigChannel+0x2c>
 8007d32:	f240 618d 	movw	r1, #1677	; 0x68d
 8007d36:	4842      	ldr	r0, [pc, #264]	; (8007e40 <HAL_ADC_ConfigChannel+0x1d4>)
 8007d38:	f7fc f908 	bl	8003f4c <assert_failed>
  __HAL_LOCK(hadc);
 8007d3c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d1ad      	bne.n	8007ca0 <HAL_ADC_ConfigChannel+0x34>
 8007d44:	2002      	movs	r0, #2
}
 8007d46:	b003      	add	sp, #12
 8007d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007d4a:	b281      	uxth	r1, r0
 8007d4c:	f04f 0c07 	mov.w	ip, #7
 8007d50:	691e      	ldr	r6, [r3, #16]
 8007d52:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007d56:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007d58:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007d5c:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007d60:	ea26 060c 	bic.w	r6, r6, ip
 8007d64:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007d66:	691e      	ldr	r6, [r3, #16]
 8007d68:	4332      	orrs	r2, r6
 8007d6a:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 8007d6c:	6862      	ldr	r2, [r4, #4]
 8007d6e:	2a06      	cmp	r2, #6
 8007d70:	d9b8      	bls.n	8007ce4 <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 8007d72:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007d74:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 8007d78:	d81c      	bhi.n	8007db4 <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007d7a:	3a23      	subs	r2, #35	; 0x23
 8007d7c:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007d7e:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007d80:	4094      	lsls	r4, r2
 8007d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d84:	ea22 0204 	bic.w	r2, r2, r4
 8007d88:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d8c:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007d8e:	4a2b      	ldr	r2, [pc, #172]	; (8007e3c <HAL_ADC_ConfigChannel+0x1d0>)
 8007d90:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007d92:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007d94:	d1b6      	bne.n	8007d04 <HAL_ADC_ConfigChannel+0x98>
 8007d96:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8007d9a:	d017      	beq.n	8007dcc <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007d9c:	2812      	cmp	r0, #18
 8007d9e:	d123      	bne.n	8007de8 <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8007da0:	4b28      	ldr	r3, [pc, #160]	; (8007e44 <HAL_ADC_ConfigChannel+0x1d8>)
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007da8:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007db0:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007db2:	e7a7      	b.n	8007d04 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007db4:	3a41      	subs	r2, #65	; 0x41
 8007db6:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007db8:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007dba:	4094      	lsls	r4, r2
 8007dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbe:	ea22 0204 	bic.w	r2, r2, r4
 8007dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc6:	4311      	orrs	r1, r2
 8007dc8:	62d9      	str	r1, [r3, #44]	; 0x2c
 8007dca:	e798      	b.n	8007cfe <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007dcc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8007dd0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007dd4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007dd8:	e794      	b.n	8007d04 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007dda:	68a1      	ldr	r1, [r4, #8]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007de2:	2112      	movs	r1, #18
 8007de4:	60da      	str	r2, [r3, #12]
 8007de6:	e77a      	b.n	8007cde <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007de8:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <HAL_ADC_ConfigChannel+0x1cc>)
 8007dea:	4298      	cmp	r0, r3
 8007dec:	d001      	beq.n	8007df2 <HAL_ADC_ConfigChannel+0x186>
 8007dee:	2811      	cmp	r0, #17
 8007df0:	d188      	bne.n	8007d04 <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8007df2:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007df4:	4910      	ldr	r1, [pc, #64]	; (8007e38 <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8007df6:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007df8:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8007dfa:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8007dfe:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007e06:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007e08:	f47f af7c 	bne.w	8007d04 <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <HAL_ADC_ConfigChannel+0x1dc>)
 8007e0e:	4a0f      	ldr	r2, [pc, #60]	; (8007e4c <HAL_ADC_ConfigChannel+0x1e0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	0c9b      	lsrs	r3, r3, #18
 8007e18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8007e20:	9b01      	ldr	r3, [sp, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f43f af6e 	beq.w	8007d04 <HAL_ADC_ConfigChannel+0x98>
        counter--;
 8007e28:	9b01      	ldr	r3, [sp, #4]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f9      	bne.n	8007e28 <HAL_ADC_ConfigChannel+0x1bc>
 8007e34:	e766      	b.n	8007d04 <HAL_ADC_ConfigChannel+0x98>
 8007e36:	bf00      	nop
 8007e38:	10000012 	.word	0x10000012
 8007e3c:	40012000 	.word	0x40012000
 8007e40:	0802ada4 	.word	0x0802ada4
 8007e44:	40012300 	.word	0x40012300
 8007e48:	2000027c 	.word	0x2000027c
 8007e4c:	431bde83 	.word	0x431bde83

08007e50 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop

08007e54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8007e54:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8007e56:	680b      	ldr	r3, [r1, #0]
{
 8007e58:	460c      	mov	r4, r1
 8007e5a:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8007e5c:	2b19      	cmp	r3, #25
 8007e5e:	d93e      	bls.n	8007ede <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8007e60:	f240 31af 	movw	r1, #943	; 0x3af
 8007e64:	4829      	ldr	r0, [pc, #164]	; (8007f0c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8007e66:	f7fc f871 	bl	8003f4c <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8007e6a:	6863      	ldr	r3, [r4, #4]
 8007e6c:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8007e70:	d13e      	bne.n	8007ef0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e7c:	bf18      	it	ne
 8007e7e:	2b00      	cmpne	r3, #0
 8007e80:	bf14      	ite	ne
 8007e82:	2201      	movne	r2, #1
 8007e84:	2200      	moveq	r2, #0
 8007e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e8a:	bf0c      	ite	eq
 8007e8c:	2200      	moveq	r2, #0
 8007e8e:	f002 0201 	andne.w	r2, r2, #1
 8007e92:	b112      	cbz	r2, 8007e9a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8007e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e98:	d132      	bne.n	8007f00 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007e9a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d02c      	beq.n	8007efc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8007ea2:	4b1b      	ldr	r3, [pc, #108]	; (8007f10 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	f022 021f 	bic.w	r2, r2, #31
 8007eaa:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	6821      	ldr	r1, [r4, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007eba:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	6861      	ldr	r1, [r4, #4]
 8007ec0:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ec2:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 8007ec4:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8007ecc:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8007ece:	68a0      	ldr	r0, [r4, #8]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 8007ed4:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 8007ed6:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8007ed8:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8007ede:	4a0d      	ldr	r2, [pc, #52]	; (8007f14 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8007ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee4:	07db      	lsls	r3, r3, #31
 8007ee6:	d5bb      	bpl.n	8007e60 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8007ee8:	6863      	ldr	r3, [r4, #4]
 8007eea:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8007eee:	d0c0      	beq.n	8007e72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007ef0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8007ef4:	4805      	ldr	r0, [pc, #20]	; (8007f0c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8007ef6:	f7fc f829 	bl	8003f4c <assert_failed>
 8007efa:	e7ba      	b.n	8007e72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8007efc:	2002      	movs	r0, #2
}
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8007f00:	f240 31b1 	movw	r1, #945	; 0x3b1
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8007f06:	f7fc f821 	bl	8003f4c <assert_failed>
 8007f0a:	e7c6      	b.n	8007e9a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8007f0c:	0802addc 	.word	0x0802addc
 8007f10:	40012300 	.word	0x40012300
 8007f14:	02e602e7 	.word	0x02e602e7

08007f18 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8007f18:	1ec3      	subs	r3, r0, #3
 8007f1a:	2b04      	cmp	r3, #4
{
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8007f20:	d80c      	bhi.n	8007f3c <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f22:	4909      	ldr	r1, [pc, #36]	; (8007f48 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f24:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f26:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8007f2a:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f2c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f2e:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f32:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f34:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 8007f36:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 8007f38:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007f3a:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8007f3c:	2191      	movs	r1, #145	; 0x91
 8007f3e:	4804      	ldr	r0, [pc, #16]	; (8007f50 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8007f40:	f7fc f804 	bl	8003f4c <assert_failed>
 8007f44:	e7ed      	b.n	8007f22 <HAL_NVIC_SetPriorityGrouping+0xa>
 8007f46:	bf00      	nop
 8007f48:	e000ed00 	.word	0xe000ed00
 8007f4c:	05fa0000 	.word	0x05fa0000
 8007f50:	0802ae18 	.word	0x0802ae18

08007f54 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8007f54:	2a0f      	cmp	r2, #15
{ 
 8007f56:	b570      	push	{r4, r5, r6, lr}
 8007f58:	4616      	mov	r6, r2
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8007f5e:	d836      	bhi.n	8007fce <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8007f60:	2c0f      	cmp	r4, #15
 8007f62:	d82f      	bhi.n	8007fc4 <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f64:	4b1c      	ldr	r3, [pc, #112]	; (8007fd8 <HAL_NVIC_SetPriority+0x84>)
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f6c:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f70:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f72:	2804      	cmp	r0, #4
 8007f74:	bf28      	it	cs
 8007f76:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f78:	2a06      	cmp	r2, #6
 8007f7a:	d918      	bls.n	8007fae <HAL_NVIC_SetPriority+0x5a>
 8007f7c:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f82:	409a      	lsls	r2, r3
 8007f84:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f88:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8007f8c:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f8e:	fa01 f100 	lsl.w	r1, r1, r0
 8007f92:	ea24 0401 	bic.w	r4, r4, r1
 8007f96:	fa04 f403 	lsl.w	r4, r4, r3
 8007f9a:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8007f9e:	db09      	blt.n	8007fb4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fa0:	0124      	lsls	r4, r4, #4
 8007fa2:	4b0e      	ldr	r3, [pc, #56]	; (8007fdc <HAL_NVIC_SetPriority+0x88>)
 8007fa4:	b2e4      	uxtb	r4, r4
 8007fa6:	442b      	add	r3, r5
 8007fa8:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007fac:	bd70      	pop	{r4, r5, r6, pc}
 8007fae:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fb0:	4633      	mov	r3, r6
 8007fb2:	e7e9      	b.n	8007f88 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fb4:	f005 050f 	and.w	r5, r5, #15
 8007fb8:	0124      	lsls	r4, r4, #4
 8007fba:	4b09      	ldr	r3, [pc, #36]	; (8007fe0 <HAL_NVIC_SetPriority+0x8c>)
 8007fbc:	b2e4      	uxtb	r4, r4
 8007fbe:	442b      	add	r3, r5
 8007fc0:	761c      	strb	r4, [r3, #24]
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8007fc4:	21aa      	movs	r1, #170	; 0xaa
 8007fc6:	4807      	ldr	r0, [pc, #28]	; (8007fe4 <HAL_NVIC_SetPriority+0x90>)
 8007fc8:	f7fb ffc0 	bl	8003f4c <assert_failed>
 8007fcc:	e7ca      	b.n	8007f64 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8007fce:	21a9      	movs	r1, #169	; 0xa9
 8007fd0:	4804      	ldr	r0, [pc, #16]	; (8007fe4 <HAL_NVIC_SetPriority+0x90>)
 8007fd2:	f7fb ffbb 	bl	8003f4c <assert_failed>
 8007fd6:	e7c3      	b.n	8007f60 <HAL_NVIC_SetPriority+0xc>
 8007fd8:	e000ed00 	.word	0xe000ed00
 8007fdc:	e000e100 	.word	0xe000e100
 8007fe0:	e000ecfc 	.word	0xe000ecfc
 8007fe4:	0802ae18 	.word	0x0802ae18

08007fe8 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	db08      	blt.n	8007ffe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fec:	f000 011f 	and.w	r1, r0, #31
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	0940      	lsrs	r0, r0, #5
 8007ff4:	4a04      	ldr	r2, [pc, #16]	; (8008008 <HAL_NVIC_EnableIRQ+0x20>)
 8007ff6:	408b      	lsls	r3, r1
 8007ff8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007ffc:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8007ffe:	21bd      	movs	r1, #189	; 0xbd
 8008000:	4802      	ldr	r0, [pc, #8]	; (800800c <HAL_NVIC_EnableIRQ+0x24>)
 8008002:	f7fb bfa3 	b.w	8003f4c <assert_failed>
 8008006:	bf00      	nop
 8008008:	e000e100 	.word	0xe000e100
 800800c:	0802ae18 	.word	0x0802ae18

08008010 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008010:	2800      	cmp	r0, #0
 8008012:	db0e      	blt.n	8008032 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008014:	0943      	lsrs	r3, r0, #5
 8008016:	2201      	movs	r2, #1
 8008018:	f000 001f 	and.w	r0, r0, #31
 800801c:	4907      	ldr	r1, [pc, #28]	; (800803c <HAL_NVIC_DisableIRQ+0x2c>)
 800801e:	3320      	adds	r3, #32
 8008020:	fa02 f000 	lsl.w	r0, r2, r0
 8008024:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008028:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800802c:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8008030:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008032:	21cd      	movs	r1, #205	; 0xcd
 8008034:	4802      	ldr	r0, [pc, #8]	; (8008040 <HAL_NVIC_DisableIRQ+0x30>)
 8008036:	f7fb bf89 	b.w	8003f4c <assert_failed>
 800803a:	bf00      	nop
 800803c:	e000e100 	.word	0xe000e100
 8008040:	0802ae18 	.word	0x0802ae18

08008044 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008044:	2800      	cmp	r0, #0
 8008046:	d075      	beq.n	8008134 <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8008048:	4b3b      	ldr	r3, [pc, #236]	; (8008138 <HAL_CRC_Init+0xf4>)
 800804a:	6802      	ldr	r2, [r0, #0]
 800804c:	429a      	cmp	r2, r3
{
 800804e:	b510      	push	{r4, lr}
 8008050:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8008052:	d003      	beq.n	800805c <HAL_CRC_Init+0x18>
 8008054:	2170      	movs	r1, #112	; 0x70
 8008056:	4839      	ldr	r0, [pc, #228]	; (800813c <HAL_CRC_Init+0xf8>)
 8008058:	f7fb ff78 	bl	8003f4c <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800805c:	7f63      	ldrb	r3, [r4, #29]
 800805e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008062:	2b00      	cmp	r3, #0
 8008064:	d055      	beq.n	8008112 <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008066:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008068:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800806a:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800806c:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800806e:	d838      	bhi.n	80080e2 <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008070:	2b00      	cmp	r3, #0
 8008072:	d13d      	bne.n	80080f0 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	4a32      	ldr	r2, [pc, #200]	; (8008140 <HAL_CRC_Init+0xfc>)
 8008078:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	f022 0218 	bic.w	r2, r2, #24
 8008080:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8008082:	7963      	ldrb	r3, [r4, #5]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d83c      	bhi.n	8008102 <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008088:	b1e3      	cbz	r3, 80080c4 <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800808a:	6922      	ldr	r2, [r4, #16]
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8008090:	6962      	ldr	r2, [r4, #20]
 8008092:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8008096:	d11d      	bne.n	80080d4 <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008098:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800809a:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800809c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80080a0:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80080a2:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80080a6:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80080a8:	d13d      	bne.n	8008126 <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80080aa:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80080ac:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80080ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80080b2:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80080b4:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80080b6:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80080b8:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80080ba:	d82f      	bhi.n	800811c <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80080bc:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80080be:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 80080c0:	7763      	strb	r3, [r4, #29]
}
 80080c2:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80080c4:	f04f 32ff 	mov.w	r2, #4294967295
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80080cc:	6962      	ldr	r2, [r4, #20]
 80080ce:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 80080d2:	d0e1      	beq.n	8008098 <HAL_CRC_Init+0x54>
 80080d4:	219c      	movs	r1, #156	; 0x9c
 80080d6:	4819      	ldr	r0, [pc, #100]	; (800813c <HAL_CRC_Init+0xf8>)
 80080d8:	f7fb ff38 	bl	8003f4c <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80080dc:	6962      	ldr	r2, [r4, #20]
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	e7da      	b.n	8008098 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80080e2:	217e      	movs	r1, #126	; 0x7e
 80080e4:	4815      	ldr	r0, [pc, #84]	; (800813c <HAL_CRC_Init+0xf8>)
 80080e6:	f7fb ff31 	bl	8003f4c <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80080ea:	7923      	ldrb	r3, [r4, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0c1      	beq.n	8008074 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80080f0:	4620      	mov	r0, r4
 80080f2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80080f6:	f000 f825 	bl	8008144 <HAL_CRCEx_Polynomial_Set>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d0c1      	beq.n	8008082 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 80080fe:	2001      	movs	r0, #1
}
 8008100:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8008102:	2190      	movs	r1, #144	; 0x90
 8008104:	480d      	ldr	r0, [pc, #52]	; (800813c <HAL_CRC_Init+0xf8>)
 8008106:	f7fb ff21 	bl	8003f4c <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800810a:	7963      	ldrb	r3, [r4, #5]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1bc      	bne.n	800808a <HAL_CRC_Init+0x46>
 8008110:	e7d8      	b.n	80080c4 <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 8008112:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8008114:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8008116:	f7fd f945 	bl	80053a4 <HAL_CRC_MspInit>
 800811a:	e7a4      	b.n	8008066 <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800811c:	21a5      	movs	r1, #165	; 0xa5
 800811e:	4807      	ldr	r0, [pc, #28]	; (800813c <HAL_CRC_Init+0xf8>)
 8008120:	f7fb ff14 	bl	8003f4c <assert_failed>
 8008124:	e7ca      	b.n	80080bc <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008126:	4805      	ldr	r0, [pc, #20]	; (800813c <HAL_CRC_Init+0xf8>)
 8008128:	21a0      	movs	r1, #160	; 0xa0
 800812a:	f7fb ff0f 	bl	8003f4c <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	69a0      	ldr	r0, [r4, #24]
 8008132:	e7ba      	b.n	80080aa <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 8008134:	2001      	movs	r0, #1
}
 8008136:	4770      	bx	lr
 8008138:	40023000 	.word	0x40023000
 800813c:	0802ae54 	.word	0x0802ae54
 8008140:	04c11db7 	.word	0x04c11db7

08008144 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8008144:	f032 0318 	bics.w	r3, r2, #24
{
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	4616      	mov	r6, r2
 800814c:	4605      	mov	r5, r0
 800814e:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8008150:	d003      	beq.n	800815a <HAL_CRCEx_Polynomial_Set+0x16>
 8008152:	215f      	movs	r1, #95	; 0x5f
 8008154:	4818      	ldr	r0, [pc, #96]	; (80081b8 <HAL_CRCEx_Polynomial_Set+0x74>)
 8008156:	f7fb fef9 	bl	8003f4c <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800815a:	231e      	movs	r3, #30
 800815c:	e001      	b.n	8008162 <HAL_CRCEx_Polynomial_Set+0x1e>
 800815e:	3b01      	subs	r3, #1
 8008160:	d315      	bcc.n	800818e <HAL_CRCEx_Polynomial_Set+0x4a>
 8008162:	fa24 fc03 	lsr.w	ip, r4, r3
 8008166:	f01c 0f01 	tst.w	ip, #1
 800816a:	d0f8      	beq.n	800815e <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 800816c:	2e18      	cmp	r6, #24
 800816e:	d80f      	bhi.n	8008190 <HAL_CRCEx_Polynomial_Set+0x4c>
 8008170:	e8df f006 	tbb	[pc, r6]
 8008174:	0e0e0e12 	.word	0x0e0e0e12
 8008178:	0e0e0e0e 	.word	0x0e0e0e0e
 800817c:	0e0e0e1b 	.word	0x0e0e0e1b
 8008180:	0e0e0e0e 	.word	0x0e0e0e0e
 8008184:	0e0e0e1e 	.word	0x0e0e0e1e
 8008188:	0e0e0e0e 	.word	0x0e0e0e0e
 800818c:	10          	.byte	0x10
 800818d:	00          	.byte	0x00
 800818e:	b11e      	cbz	r6, 8008198 <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8008190:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8008192:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8008194:	2b06      	cmp	r3, #6
 8008196:	d8fb      	bhi.n	8008190 <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008198:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800819a:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 800819c:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800819e:	688b      	ldr	r3, [r1, #8]
 80081a0:	f023 0318 	bic.w	r3, r3, #24
 80081a4:	4333      	orrs	r3, r6
 80081a6:	608b      	str	r3, [r1, #8]
}
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 80081aa:	2b0f      	cmp	r3, #15
 80081ac:	d9f4      	bls.n	8008198 <HAL_CRCEx_Polynomial_Set+0x54>
 80081ae:	e7ef      	b.n	8008190 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 80081b0:	2b07      	cmp	r3, #7
 80081b2:	d9f1      	bls.n	8008198 <HAL_CRCEx_Polynomial_Set+0x54>
 80081b4:	e7ec      	b.n	8008190 <HAL_CRCEx_Polynomial_Set+0x4c>
 80081b6:	bf00      	nop
 80081b8:	0802ae8c 	.word	0x0802ae8c

080081bc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80081bc:	b1d8      	cbz	r0, 80081f6 <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80081be:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <HAL_DAC_Init+0x40>)
 80081c0:	6802      	ldr	r2, [r0, #0]
 80081c2:	429a      	cmp	r2, r3
{
 80081c4:	b510      	push	{r4, lr}
 80081c6:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80081c8:	d004      	beq.n	80081d4 <HAL_DAC_Init+0x18>
 80081ca:	f240 1115 	movw	r1, #277	; 0x115
 80081ce:	480c      	ldr	r0, [pc, #48]	; (8008200 <HAL_DAC_Init+0x44>)
 80081d0:	f7fb febc 	bl	8003f4c <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 80081d4:	7923      	ldrb	r3, [r4, #4]
 80081d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80081da:	b13b      	cbz	r3, 80081ec <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80081dc:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80081de:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80081e0:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80081e2:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80081e4:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80081e6:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80081e8:	7122      	strb	r2, [r4, #4]
}
 80081ea:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 80081ec:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 80081ee:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 80081f0:	f7fd f8ee 	bl	80053d0 <HAL_DAC_MspInit>
 80081f4:	e7f2      	b.n	80081dc <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 80081f6:	2001      	movs	r0, #1
}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40007400 	.word	0x40007400
 8008200:	0802aec8 	.word	0x0802aec8

08008204 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008208:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800820a:	f031 0310 	bics.w	r3, r1, #16
{
 800820e:	460d      	mov	r5, r1
 8008210:	4604      	mov	r4, r0
 8008212:	4617      	mov	r7, r2
 8008214:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 8008216:	d16b      	bne.n	80082f0 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 8008218:	f036 0304 	bics.w	r3, r6, #4
 800821c:	d001      	beq.n	8008222 <HAL_DAC_Start_DMA+0x1e>
 800821e:	2e08      	cmp	r6, #8
 8008220:	d15b      	bne.n	80082da <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 8008222:	7962      	ldrb	r2, [r4, #5]
 8008224:	2a01      	cmp	r2, #1
 8008226:	d060      	beq.n	80082ea <HAL_DAC_Start_DMA+0xe6>
 8008228:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800822a:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 800822e:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008230:	2302      	movs	r3, #2
 8008232:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8008234:	bb35      	cbnz	r5, 8008284 <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008236:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008238:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800823a:	4b39      	ldr	r3, [pc, #228]	; (8008320 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800823c:	4a39      	ldr	r2, [pc, #228]	; (8008324 <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800823e:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008240:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008244:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800824a:	4a37      	ldr	r2, [pc, #220]	; (8008328 <HAL_DAC_Start_DMA+0x124>)
 800824c:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800824e:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8008252:	d059      	beq.n	8008308 <HAL_DAC_Start_DMA+0x104>
 8008254:	2e08      	cmp	r6, #8
 8008256:	d054      	beq.n	8008302 <HAL_DAC_Start_DMA+0xfe>
 8008258:	2e00      	cmp	r6, #0
 800825a:	d04f      	beq.n	80082fc <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800825c:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800825e:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008262:	4643      	mov	r3, r8
 8008264:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008266:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 800826a:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800826e:	f000 fbe3 	bl	8008a38 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008272:	2300      	movs	r3, #0
 8008274:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8008276:	b330      	cbz	r0, 80082c6 <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	f043 0304 	orr.w	r3, r3, #4
 800827e:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8008280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008284:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8008286:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008288:	4b28      	ldr	r3, [pc, #160]	; (800832c <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800828a:	4a29      	ldr	r2, [pc, #164]	; (8008330 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800828c:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800828e:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008292:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008298:	4a26      	ldr	r2, [pc, #152]	; (8008334 <HAL_DAC_Start_DMA+0x130>)
 800829a:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800829c:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 80082a0:	d03b      	beq.n	800831a <HAL_DAC_Start_DMA+0x116>
 80082a2:	2e08      	cmp	r6, #8
 80082a4:	d036      	beq.n	8008314 <HAL_DAC_Start_DMA+0x110>
 80082a6:	b396      	cbz	r6, 800830e <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80082a8:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80082aa:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80082ae:	4643      	mov	r3, r8
 80082b0:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80082b2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80082b6:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80082ba:	f000 fbbd 	bl	8008a38 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 80082be:	2300      	movs	r3, #0
 80082c0:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d1d8      	bne.n	8008278 <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	f005 0110 	and.w	r1, r5, #16
 80082cc:	2501      	movs	r5, #1
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	408d      	lsls	r5, r1
 80082d2:	4315      	orrs	r5, r2
 80082d4:	601d      	str	r5, [r3, #0]
}
 80082d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 80082da:	f44f 7104 	mov.w	r1, #528	; 0x210
 80082de:	4816      	ldr	r0, [pc, #88]	; (8008338 <HAL_DAC_Start_DMA+0x134>)
 80082e0:	f7fb fe34 	bl	8003f4c <assert_failed>
  __HAL_LOCK(hdac);
 80082e4:	7962      	ldrb	r2, [r4, #5]
 80082e6:	2a01      	cmp	r2, #1
 80082e8:	d19e      	bne.n	8008228 <HAL_DAC_Start_DMA+0x24>
 80082ea:	2002      	movs	r0, #2
}
 80082ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 80082f0:	f240 210f 	movw	r1, #527	; 0x20f
 80082f4:	4810      	ldr	r0, [pc, #64]	; (8008338 <HAL_DAC_Start_DMA+0x134>)
 80082f6:	f7fb fe29 	bl	8003f4c <assert_failed>
 80082fa:	e78d      	b.n	8008218 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80082fc:	f10c 0208 	add.w	r2, ip, #8
        break;
 8008300:	e7ad      	b.n	800825e <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008302:	f10c 0210 	add.w	r2, ip, #16
        break;
 8008306:	e7aa      	b.n	800825e <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008308:	f10c 020c 	add.w	r2, ip, #12
        break;
 800830c:	e7a7      	b.n	800825e <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800830e:	f10c 0214 	add.w	r2, ip, #20
        break;
 8008312:	e7ca      	b.n	80082aa <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008314:	f10c 021c 	add.w	r2, ip, #28
        break;
 8008318:	e7c7      	b.n	80082aa <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800831a:	f10c 0218 	add.w	r2, ip, #24
        break;
 800831e:	e7c4      	b.n	80082aa <HAL_DAC_Start_DMA+0xa6>
 8008320:	080083cd 	.word	0x080083cd
 8008324:	080083e1 	.word	0x080083e1
 8008328:	080083f1 	.word	0x080083f1
 800832c:	08008545 	.word	0x08008545
 8008330:	08008555 	.word	0x08008555
 8008334:	08008561 	.word	0x08008561
 8008338:	0802aec8 	.word	0x0802aec8

0800833c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800833c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800833e:	f031 0310 	bics.w	r3, r1, #16
{
 8008342:	460d      	mov	r5, r1
 8008344:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 8008346:	d11e      	bne.n	8008386 <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008348:	6803      	ldr	r3, [r0, #0]
 800834a:	f001 0e10 	and.w	lr, r1, #16
 800834e:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8008352:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 800835a:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800835e:	ea20 000c 	bic.w	r0, r0, ip
 8008362:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	ea22 0201 	bic.w	r2, r2, r1
 800836a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800836c:	bb05      	cbnz	r5, 80083b0 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800836e:	68a0      	ldr	r0, [r4, #8]
 8008370:	f000 fbbe 	bl	8008af0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008374:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008376:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008378:	6813      	ldr	r3, [r2, #0]
 800837a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800837e:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008380:	2301      	movs	r3, #1
 8008382:	7123      	strb	r3, [r4, #4]
}
 8008384:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008386:	f240 218f 	movw	r1, #655	; 0x28f
 800838a:	480f      	ldr	r0, [pc, #60]	; (80083c8 <HAL_DAC_Stop_DMA+0x8c>)
 800838c:	f7fb fdde 	bl	8003f4c <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008390:	f005 0510 	and.w	r5, r5, #16
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 800839a:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 80083a0:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80083a2:	ea22 0200 	bic.w	r2, r2, r0
 80083a6:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 80083a8:	681d      	ldr	r5, [r3, #0]
 80083aa:	ea25 0501 	bic.w	r5, r5, r1
 80083ae:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80083b0:	68e0      	ldr	r0, [r4, #12]
 80083b2:	f000 fb9d 	bl	8008af0 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80083b6:	6822      	ldr	r2, [r4, #0]
}
 80083b8:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80083ba:	6813      	ldr	r3, [r2, #0]
 80083bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083c0:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80083c2:	2301      	movs	r3, #1
 80083c4:	7123      	strb	r3, [r4, #4]
}
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	0802aec8 	.word	0x0802aec8

080083cc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80083cc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083ce:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80083d0:	4620      	mov	r0, r4
 80083d2:	f7fa fcaf 	bl	8002d34 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80083d6:	2301      	movs	r3, #1
 80083d8:	7123      	strb	r3, [r4, #4]
}
 80083da:	bd10      	pop	{r4, pc}

080083dc <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop

080083e0 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80083e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80083e2:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80083e4:	f7ff fffa 	bl	80083dc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80083e8:	bd08      	pop	{r3, pc}
 80083ea:	bf00      	nop

080083ec <HAL_DAC_ErrorCallbackCh1>:
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop

080083f0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80083f0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083f2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80083f4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80083f6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80083f8:	f043 0304 	orr.w	r3, r3, #4
 80083fc:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80083fe:	f7ff fff5 	bl	80083ec <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008402:	2301      	movs	r3, #1
 8008404:	7123      	strb	r3, [r4, #4]
}
 8008406:	bd10      	pop	{r4, pc}

08008408 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop

0800840c <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800840c:	6803      	ldr	r3, [r0, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	0491      	lsls	r1, r2, #18
{
 8008412:	b510      	push	{r4, lr}
 8008414:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008416:	d502      	bpl.n	800841e <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8008418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800841a:	0492      	lsls	r2, r2, #18
 800841c:	d418      	bmi.n	8008450 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	0091      	lsls	r1, r2, #2
 8008422:	d502      	bpl.n	800842a <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8008424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008426:	0092      	lsls	r2, r2, #2
 8008428:	d400      	bmi.n	800842c <HAL_DAC_IRQHandler+0x20>
}
 800842a:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 800842c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800842e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008432:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8008434:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008436:	6922      	ldr	r2, [r4, #16]
 8008438:	f042 0202 	orr.w	r2, r2, #2
 800843c:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800843e:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8008446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800844a:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800844c:	f000 b878 	b.w	8008540 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8008450:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8008456:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008458:	6902      	ldr	r2, [r0, #16]
 800845a:	f042 0201 	orr.w	r2, r2, #1
 800845e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008460:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008468:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800846a:	f7ff ffcd 	bl	8008408 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	e7d5      	b.n	800841e <HAL_DAC_IRQHandler+0x12>
 8008472:	bf00      	nop

08008474 <HAL_DAC_ConfigChannel>:
{
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008478:	6808      	ldr	r0, [r1, #0]
{
 800847a:	4616      	mov	r6, r2
 800847c:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800847e:	f020 0308 	bic.w	r3, r0, #8
 8008482:	f020 0204 	bic.w	r2, r0, #4
 8008486:	2b24      	cmp	r3, #36	; 0x24
 8008488:	bf18      	it	ne
 800848a:	2a00      	cmpne	r2, #0
 800848c:	f020 0210 	bic.w	r2, r0, #16
 8008490:	bf14      	ite	ne
 8008492:	2301      	movne	r3, #1
 8008494:	2300      	moveq	r3, #0
 8008496:	283c      	cmp	r0, #60	; 0x3c
 8008498:	bf0c      	ite	eq
 800849a:	2300      	moveq	r3, #0
 800849c:	f003 0301 	andne.w	r3, r3, #1
 80084a0:	2a0c      	cmp	r2, #12
 80084a2:	bf0c      	ite	eq
 80084a4:	2300      	moveq	r3, #0
 80084a6:	f003 0301 	andne.w	r3, r3, #1
 80084aa:	b11b      	cbz	r3, 80084b4 <HAL_DAC_ConfigChannel+0x40>
 80084ac:	f020 0020 	bic.w	r0, r0, #32
 80084b0:	2814      	cmp	r0, #20
 80084b2:	d137      	bne.n	8008524 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 80084b4:	686b      	ldr	r3, [r5, #4]
 80084b6:	f033 0302 	bics.w	r3, r3, #2
 80084ba:	d12d      	bne.n	8008518 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 80084bc:	f036 0310 	bics.w	r3, r6, #16
 80084c0:	d120      	bne.n	8008504 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 80084c2:	7963      	ldrb	r3, [r4, #5]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d025      	beq.n	8008514 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80084c8:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 80084cc:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80084ce:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 80084d2:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80084d4:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80084d6:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80084da:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 80084de:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80084e0:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 80084e2:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80084e4:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80084e6:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 80084ea:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80084ec:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80084ee:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 80084f0:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80084f2:	4082      	lsls	r2, r0
 80084f4:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 80084f6:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80084f8:	ea23 0302 	bic.w	r3, r3, r2
 80084fc:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80084fe:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8008500:	7165      	strb	r5, [r4, #5]
}
 8008502:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008504:	f240 31a6 	movw	r1, #934	; 0x3a6
 8008508:	4809      	ldr	r0, [pc, #36]	; (8008530 <HAL_DAC_ConfigChannel+0xbc>)
 800850a:	f7fb fd1f 	bl	8003f4c <assert_failed>
  __HAL_LOCK(hdac);
 800850e:	7963      	ldrb	r3, [r4, #5]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d1d9      	bne.n	80084c8 <HAL_DAC_ConfigChannel+0x54>
 8008514:	2002      	movs	r0, #2
}
 8008516:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008518:	f240 31a5 	movw	r1, #933	; 0x3a5
 800851c:	4804      	ldr	r0, [pc, #16]	; (8008530 <HAL_DAC_ConfigChannel+0xbc>)
 800851e:	f7fb fd15 	bl	8003f4c <assert_failed>
 8008522:	e7cb      	b.n	80084bc <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008524:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8008528:	4801      	ldr	r0, [pc, #4]	; (8008530 <HAL_DAC_ConfigChannel+0xbc>)
 800852a:	f7fb fd0f 	bl	8003f4c <assert_failed>
 800852e:	e7c1      	b.n	80084b4 <HAL_DAC_ConfigChannel+0x40>
 8008530:	0802aec8 	.word	0x0802aec8

08008534 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop

08008538 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop

0800853c <HAL_DACEx_ErrorCallbackCh2>:
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop

08008540 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop

08008544 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008544:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008546:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008548:	4620      	mov	r0, r4
 800854a:	f7ff fff3 	bl	8008534 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800854e:	2301      	movs	r3, #1
 8008550:	7123      	strb	r3, [r4, #4]
}
 8008552:	bd10      	pop	{r4, pc}

08008554 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008554:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008556:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008558:	f7ff ffee 	bl	8008538 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800855c:	bd08      	pop	{r3, pc}
 800855e:	bf00      	nop

08008560 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008560:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008562:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008564:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008566:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008568:	f043 0304 	orr.w	r3, r3, #4
 800856c:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800856e:	f7ff ffe5 	bl	800853c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008572:	2301      	movs	r3, #1
 8008574:	7123      	strb	r3, [r4, #4]
}
 8008576:	bd10      	pop	{r4, pc}

08008578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800857c:	f7ff f892 	bl	80076a4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008580:	2c00      	cmp	r4, #0
 8008582:	f000 8156 	beq.w	8008832 <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008586:	6822      	ldr	r2, [r4, #0]
 8008588:	4605      	mov	r5, r0
 800858a:	4bad      	ldr	r3, [pc, #692]	; (8008840 <HAL_DMA_Init+0x2c8>)
 800858c:	49ad      	ldr	r1, [pc, #692]	; (8008844 <HAL_DMA_Init+0x2cc>)
 800858e:	429a      	cmp	r2, r3
 8008590:	bf18      	it	ne
 8008592:	428a      	cmpne	r2, r1
 8008594:	f101 0118 	add.w	r1, r1, #24
 8008598:	bf14      	ite	ne
 800859a:	2301      	movne	r3, #1
 800859c:	2300      	moveq	r3, #0
 800859e:	428a      	cmp	r2, r1
 80085a0:	bf0c      	ite	eq
 80085a2:	2300      	moveq	r3, #0
 80085a4:	f003 0301 	andne.w	r3, r3, #1
 80085a8:	3118      	adds	r1, #24
 80085aa:	428a      	cmp	r2, r1
 80085ac:	bf0c      	ite	eq
 80085ae:	2300      	moveq	r3, #0
 80085b0:	f003 0301 	andne.w	r3, r3, #1
 80085b4:	3118      	adds	r1, #24
 80085b6:	428a      	cmp	r2, r1
 80085b8:	bf0c      	ite	eq
 80085ba:	2300      	moveq	r3, #0
 80085bc:	f003 0301 	andne.w	r3, r3, #1
 80085c0:	3118      	adds	r1, #24
 80085c2:	428a      	cmp	r2, r1
 80085c4:	bf0c      	ite	eq
 80085c6:	2300      	moveq	r3, #0
 80085c8:	f003 0301 	andne.w	r3, r3, #1
 80085cc:	3118      	adds	r1, #24
 80085ce:	428a      	cmp	r2, r1
 80085d0:	bf0c      	ite	eq
 80085d2:	2300      	moveq	r3, #0
 80085d4:	f003 0301 	andne.w	r3, r3, #1
 80085d8:	3118      	adds	r1, #24
 80085da:	428a      	cmp	r2, r1
 80085dc:	bf0c      	ite	eq
 80085de:	2300      	moveq	r3, #0
 80085e0:	f003 0301 	andne.w	r3, r3, #1
 80085e4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80085e8:	428a      	cmp	r2, r1
 80085ea:	bf0c      	ite	eq
 80085ec:	2300      	moveq	r3, #0
 80085ee:	f003 0301 	andne.w	r3, r3, #1
 80085f2:	3118      	adds	r1, #24
 80085f4:	428a      	cmp	r2, r1
 80085f6:	bf0c      	ite	eq
 80085f8:	2300      	moveq	r3, #0
 80085fa:	f003 0301 	andne.w	r3, r3, #1
 80085fe:	3118      	adds	r1, #24
 8008600:	428a      	cmp	r2, r1
 8008602:	bf0c      	ite	eq
 8008604:	2300      	moveq	r3, #0
 8008606:	f003 0301 	andne.w	r3, r3, #1
 800860a:	3118      	adds	r1, #24
 800860c:	428a      	cmp	r2, r1
 800860e:	bf0c      	ite	eq
 8008610:	2300      	moveq	r3, #0
 8008612:	f003 0301 	andne.w	r3, r3, #1
 8008616:	3118      	adds	r1, #24
 8008618:	428a      	cmp	r2, r1
 800861a:	bf0c      	ite	eq
 800861c:	2300      	moveq	r3, #0
 800861e:	f003 0301 	andne.w	r3, r3, #1
 8008622:	3118      	adds	r1, #24
 8008624:	428a      	cmp	r2, r1
 8008626:	bf0c      	ite	eq
 8008628:	2300      	moveq	r3, #0
 800862a:	f003 0301 	andne.w	r3, r3, #1
 800862e:	3118      	adds	r1, #24
 8008630:	428a      	cmp	r2, r1
 8008632:	bf0c      	ite	eq
 8008634:	2300      	moveq	r3, #0
 8008636:	f003 0301 	andne.w	r3, r3, #1
 800863a:	b11b      	cbz	r3, 8008644 <HAL_DMA_Init+0xcc>
 800863c:	4b82      	ldr	r3, [pc, #520]	; (8008848 <HAL_DMA_Init+0x2d0>)
 800863e:	429a      	cmp	r2, r3
 8008640:	f040 8139 	bne.w	80088b6 <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8008644:	6863      	ldr	r3, [r4, #4]
 8008646:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800864a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800864e:	bf18      	it	ne
 8008650:	2b00      	cmpne	r3, #0
 8008652:	bf14      	ite	ne
 8008654:	2201      	movne	r2, #1
 8008656:	2200      	moveq	r2, #0
 8008658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800865c:	bf0c      	ite	eq
 800865e:	2200      	moveq	r2, #0
 8008660:	f002 0201 	andne.w	r2, r2, #1
 8008664:	b11a      	cbz	r2, 800866e <HAL_DMA_Init+0xf6>
 8008666:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800866a:	f040 8129 	bne.w	80088c0 <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8008674:	d002      	beq.n	800867c <HAL_DMA_Init+0x104>
 8008676:	2b80      	cmp	r3, #128	; 0x80
 8008678:	f040 80a8 	bne.w	80087cc <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800867c:	68e3      	ldr	r3, [r4, #12]
 800867e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008682:	f040 80ac 	bne.w	80087de <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800868c:	f040 80b0 	bne.w	80087f0 <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8008690:	6963      	ldr	r3, [r4, #20]
 8008692:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8008696:	d003      	beq.n	80086a0 <HAL_DMA_Init+0x128>
 8008698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869c:	f040 8091 	bne.w	80087c2 <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80086a0:	69a3      	ldr	r3, [r4, #24]
 80086a2:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 80086a6:	d003      	beq.n	80086b0 <HAL_DMA_Init+0x138>
 80086a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086ac:	f040 8084 	bne.w	80087b8 <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80086b0:	69e3      	ldr	r3, [r4, #28]
 80086b2:	f033 0220 	bics.w	r2, r3, #32
 80086b6:	d002      	beq.n	80086be <HAL_DMA_Init+0x146>
 80086b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086bc:	d16f      	bne.n	800879e <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80086be:	6a23      	ldr	r3, [r4, #32]
 80086c0:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80086c4:	d173      	bne.n	80087ae <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80086c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086c8:	f033 0204 	bics.w	r2, r3, #4
 80086cc:	d15f      	bne.n	800878e <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d14d      	bne.n	800876e <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80086d2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80086d4:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80086d6:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 80086d8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80086dc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	f022 0201 	bic.w	r2, r2, #1
 80086e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086e8:	e006      	b.n	80086f8 <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80086ea:	f7fe ffdb 	bl	80076a4 <HAL_GetTick>
 80086ee:	1b40      	subs	r0, r0, r5
 80086f0:	2805      	cmp	r0, #5
 80086f2:	f200 8082 	bhi.w	80087fa <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	07d1      	lsls	r1, r2, #31
 80086fc:	d4f5      	bmi.n	80086ea <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80086fe:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 8008702:	68e1      	ldr	r1, [r4, #12]
 8008704:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008706:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 8008708:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800870a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800870c:	6921      	ldr	r1, [r4, #16]
 800870e:	430a      	orrs	r2, r1
 8008710:	6961      	ldr	r1, [r4, #20]
 8008712:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008714:	69e1      	ldr	r1, [r4, #28]
 8008716:	4302      	orrs	r2, r0
 8008718:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800871a:	494c      	ldr	r1, [pc, #304]	; (800884c <HAL_DMA_Init+0x2d4>)
 800871c:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800871e:	6a25      	ldr	r5, [r4, #32]
 8008720:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008722:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008724:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008726:	2904      	cmp	r1, #4
 8008728:	d06e      	beq.n	8008808 <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800872a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800872c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800872e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008732:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008734:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8008736:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008738:	4945      	ldr	r1, [pc, #276]	; (8008850 <HAL_DMA_Init+0x2d8>)
 800873a:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800873c:	4845      	ldr	r0, [pc, #276]	; (8008854 <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800873e:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8008742:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008744:	4a44      	ldr	r2, [pc, #272]	; (8008858 <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008746:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800874a:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800874e:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008752:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008754:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008758:	bf88      	it	hi
 800875a:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800875c:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800875e:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008760:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008762:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8008764:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008766:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008768:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800876c:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800876e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008770:	2b03      	cmp	r3, #3
 8008772:	d860      	bhi.n	8008836 <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8008774:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008776:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800877a:	d171      	bne.n	8008860 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800877c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800877e:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8008782:	d0a6      	beq.n	80086d2 <HAL_DMA_Init+0x15a>
 8008784:	21c8      	movs	r1, #200	; 0xc8
 8008786:	4835      	ldr	r0, [pc, #212]	; (800885c <HAL_DMA_Init+0x2e4>)
 8008788:	f7fb fbe0 	bl	8003f4c <assert_failed>
 800878c:	e7a1      	b.n	80086d2 <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800878e:	21c1      	movs	r1, #193	; 0xc1
 8008790:	4832      	ldr	r0, [pc, #200]	; (800885c <HAL_DMA_Init+0x2e4>)
 8008792:	f7fb fbdb 	bl	8003f4c <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8008796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	d09a      	beq.n	80086d2 <HAL_DMA_Init+0x15a>
 800879c:	e7e7      	b.n	800876e <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800879e:	21bf      	movs	r1, #191	; 0xbf
 80087a0:	482e      	ldr	r0, [pc, #184]	; (800885c <HAL_DMA_Init+0x2e4>)
 80087a2:	f7fb fbd3 	bl	8003f4c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80087a6:	6a23      	ldr	r3, [r4, #32]
 80087a8:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80087ac:	d08b      	beq.n	80086c6 <HAL_DMA_Init+0x14e>
 80087ae:	21c0      	movs	r1, #192	; 0xc0
 80087b0:	482a      	ldr	r0, [pc, #168]	; (800885c <HAL_DMA_Init+0x2e4>)
 80087b2:	f7fb fbcb 	bl	8003f4c <assert_failed>
 80087b6:	e786      	b.n	80086c6 <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80087b8:	21be      	movs	r1, #190	; 0xbe
 80087ba:	4828      	ldr	r0, [pc, #160]	; (800885c <HAL_DMA_Init+0x2e4>)
 80087bc:	f7fb fbc6 	bl	8003f4c <assert_failed>
 80087c0:	e776      	b.n	80086b0 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80087c2:	21bd      	movs	r1, #189	; 0xbd
 80087c4:	4825      	ldr	r0, [pc, #148]	; (800885c <HAL_DMA_Init+0x2e4>)
 80087c6:	f7fb fbc1 	bl	8003f4c <assert_failed>
 80087ca:	e769      	b.n	80086a0 <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80087cc:	21ba      	movs	r1, #186	; 0xba
 80087ce:	4823      	ldr	r0, [pc, #140]	; (800885c <HAL_DMA_Init+0x2e4>)
 80087d0:	f7fb fbbc 	bl	8003f4c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80087d4:	68e3      	ldr	r3, [r4, #12]
 80087d6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80087da:	f43f af54 	beq.w	8008686 <HAL_DMA_Init+0x10e>
 80087de:	21bb      	movs	r1, #187	; 0xbb
 80087e0:	481e      	ldr	r0, [pc, #120]	; (800885c <HAL_DMA_Init+0x2e4>)
 80087e2:	f7fb fbb3 	bl	8003f4c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80087e6:	6923      	ldr	r3, [r4, #16]
 80087e8:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80087ec:	f43f af50 	beq.w	8008690 <HAL_DMA_Init+0x118>
 80087f0:	21bc      	movs	r1, #188	; 0xbc
 80087f2:	481a      	ldr	r0, [pc, #104]	; (800885c <HAL_DMA_Init+0x2e4>)
 80087f4:	f7fb fbaa 	bl	8003f4c <assert_failed>
 80087f8:	e74a      	b.n	8008690 <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80087fc:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80087fe:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008800:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008802:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008806:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008808:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 800880c:	4329      	orrs	r1, r5
 800880e:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8008810:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8008812:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8008814:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008816:	f021 0107 	bic.w	r1, r1, #7
 800881a:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800881c:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008820:	2d00      	cmp	r5, #0
 8008822:	d087      	beq.n	8008734 <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008824:	bb08      	cbnz	r0, 800886a <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 8008826:	2a01      	cmp	r2, #1
 8008828:	d040      	beq.n	80088ac <HAL_DMA_Init+0x334>
 800882a:	f032 0202 	bics.w	r2, r2, #2
 800882e:	d181      	bne.n	8008734 <HAL_DMA_Init+0x1bc>
 8008830:	e023      	b.n	800887a <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 8008832:	2001      	movs	r0, #1
}
 8008834:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8008836:	21c6      	movs	r1, #198	; 0xc6
 8008838:	4808      	ldr	r0, [pc, #32]	; (800885c <HAL_DMA_Init+0x2e4>)
 800883a:	f7fb fb87 	bl	8003f4c <assert_failed>
 800883e:	e799      	b.n	8008774 <HAL_DMA_Init+0x1fc>
 8008840:	40026010 	.word	0x40026010
 8008844:	40026028 	.word	0x40026028
 8008848:	400264b8 	.word	0x400264b8
 800884c:	e010803f 	.word	0xe010803f
 8008850:	aaaaaaab 	.word	0xaaaaaaab
 8008854:	0802af38 	.word	0x0802af38
 8008858:	fffffc00 	.word	0xfffffc00
 800885c:	0802af00 	.word	0x0802af00
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8008860:	21c7      	movs	r1, #199	; 0xc7
 8008862:	481a      	ldr	r0, [pc, #104]	; (80088cc <HAL_DMA_Init+0x354>)
 8008864:	f7fb fb72 	bl	8003f4c <assert_failed>
 8008868:	e788      	b.n	800877c <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800886a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800886e:	d00e      	beq.n	800888e <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008870:	2a02      	cmp	r2, #2
 8008872:	d905      	bls.n	8008880 <HAL_DMA_Init+0x308>
 8008874:	2a03      	cmp	r2, #3
 8008876:	f47f af5d 	bne.w	8008734 <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800887a:	01ea      	lsls	r2, r5, #7
 800887c:	f57f af5a 	bpl.w	8008734 <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 8008880:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008882:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8008884:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008886:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8008888:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800888c:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800888e:	2a03      	cmp	r2, #3
 8008890:	f63f af50 	bhi.w	8008734 <HAL_DMA_Init+0x1bc>
 8008894:	a001      	add	r0, pc, #4	; (adr r0, 800889c <HAL_DMA_Init+0x324>)
 8008896:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800889a:	bf00      	nop
 800889c:	08008881 	.word	0x08008881
 80088a0:	0800887b 	.word	0x0800887b
 80088a4:	08008881 	.word	0x08008881
 80088a8:	080088ad 	.word	0x080088ad
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088ac:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80088b0:	f47f af40 	bne.w	8008734 <HAL_DMA_Init+0x1bc>
 80088b4:	e7e4      	b.n	8008880 <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80088b6:	21b8      	movs	r1, #184	; 0xb8
 80088b8:	4804      	ldr	r0, [pc, #16]	; (80088cc <HAL_DMA_Init+0x354>)
 80088ba:	f7fb fb47 	bl	8003f4c <assert_failed>
 80088be:	e6c1      	b.n	8008644 <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80088c0:	21b9      	movs	r1, #185	; 0xb9
 80088c2:	4802      	ldr	r0, [pc, #8]	; (80088cc <HAL_DMA_Init+0x354>)
 80088c4:	f7fb fb42 	bl	8003f4c <assert_failed>
 80088c8:	e6d1      	b.n	800866e <HAL_DMA_Init+0xf6>
 80088ca:	bf00      	nop
 80088cc:	0802af00 	.word	0x0802af00

080088d0 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80088d0:	2800      	cmp	r0, #0
 80088d2:	f000 8097 	beq.w	8008a04 <HAL_DMA_DeInit+0x134>
{
 80088d6:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80088d8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80088dc:	4604      	mov	r4, r0
 80088de:	2b02      	cmp	r3, #2
 80088e0:	b2d8      	uxtb	r0, r3
 80088e2:	f000 808e 	beq.w	8008a02 <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80088e6:	6822      	ldr	r2, [r4, #0]
 80088e8:	4b4b      	ldr	r3, [pc, #300]	; (8008a18 <HAL_DMA_DeInit+0x148>)
 80088ea:	484c      	ldr	r0, [pc, #304]	; (8008a1c <HAL_DMA_DeInit+0x14c>)
 80088ec:	494c      	ldr	r1, [pc, #304]	; (8008a20 <HAL_DMA_DeInit+0x150>)
 80088ee:	429a      	cmp	r2, r3
 80088f0:	bf18      	it	ne
 80088f2:	4282      	cmpne	r2, r0
 80088f4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80088f8:	bf14      	ite	ne
 80088fa:	2301      	movne	r3, #1
 80088fc:	2300      	moveq	r3, #0
 80088fe:	428a      	cmp	r2, r1
 8008900:	bf0c      	ite	eq
 8008902:	2300      	moveq	r3, #0
 8008904:	f003 0301 	andne.w	r3, r3, #1
 8008908:	3130      	adds	r1, #48	; 0x30
 800890a:	4282      	cmp	r2, r0
 800890c:	bf0c      	ite	eq
 800890e:	2300      	moveq	r3, #0
 8008910:	f003 0301 	andne.w	r3, r3, #1
 8008914:	3030      	adds	r0, #48	; 0x30
 8008916:	428a      	cmp	r2, r1
 8008918:	bf0c      	ite	eq
 800891a:	2300      	moveq	r3, #0
 800891c:	f003 0301 	andne.w	r3, r3, #1
 8008920:	3130      	adds	r1, #48	; 0x30
 8008922:	4282      	cmp	r2, r0
 8008924:	bf0c      	ite	eq
 8008926:	2300      	moveq	r3, #0
 8008928:	f003 0301 	andne.w	r3, r3, #1
 800892c:	3030      	adds	r0, #48	; 0x30
 800892e:	428a      	cmp	r2, r1
 8008930:	bf0c      	ite	eq
 8008932:	2300      	moveq	r3, #0
 8008934:	f003 0301 	andne.w	r3, r3, #1
 8008938:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800893c:	4282      	cmp	r2, r0
 800893e:	bf0c      	ite	eq
 8008940:	2300      	moveq	r3, #0
 8008942:	f003 0301 	andne.w	r3, r3, #1
 8008946:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800894a:	428a      	cmp	r2, r1
 800894c:	bf0c      	ite	eq
 800894e:	2300      	moveq	r3, #0
 8008950:	f003 0301 	andne.w	r3, r3, #1
 8008954:	3130      	adds	r1, #48	; 0x30
 8008956:	4282      	cmp	r2, r0
 8008958:	bf0c      	ite	eq
 800895a:	2300      	moveq	r3, #0
 800895c:	f003 0301 	andne.w	r3, r3, #1
 8008960:	3030      	adds	r0, #48	; 0x30
 8008962:	428a      	cmp	r2, r1
 8008964:	bf0c      	ite	eq
 8008966:	2300      	moveq	r3, #0
 8008968:	f003 0301 	andne.w	r3, r3, #1
 800896c:	3130      	adds	r1, #48	; 0x30
 800896e:	4282      	cmp	r2, r0
 8008970:	bf0c      	ite	eq
 8008972:	2300      	moveq	r3, #0
 8008974:	f003 0301 	andne.w	r3, r3, #1
 8008978:	3030      	adds	r0, #48	; 0x30
 800897a:	428a      	cmp	r2, r1
 800897c:	bf0c      	ite	eq
 800897e:	2300      	moveq	r3, #0
 8008980:	f003 0301 	andne.w	r3, r3, #1
 8008984:	3130      	adds	r1, #48	; 0x30
 8008986:	4282      	cmp	r2, r0
 8008988:	bf0c      	ite	eq
 800898a:	2300      	moveq	r3, #0
 800898c:	f003 0301 	andne.w	r3, r3, #1
 8008990:	428a      	cmp	r2, r1
 8008992:	bf0c      	ite	eq
 8008994:	2300      	moveq	r3, #0
 8008996:	f003 0301 	andne.w	r3, r3, #1
 800899a:	b113      	cbz	r3, 80089a2 <HAL_DMA_DeInit+0xd2>
 800899c:	4b21      	ldr	r3, [pc, #132]	; (8008a24 <HAL_DMA_DeInit+0x154>)
 800899e:	429a      	cmp	r2, r3
 80089a0:	d132      	bne.n	8008a08 <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 80089a2:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80089a4:	b2d3      	uxtb	r3, r2
 80089a6:	4920      	ldr	r1, [pc, #128]	; (8008a28 <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 80089a8:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80089ac:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 80089ae:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 80089b0:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80089b2:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 80089b6:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 80089b8:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 80089ba:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 80089be:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80089c0:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 80089c4:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 80089c6:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 80089c8:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80089ca:	f04f 0021 	mov.w	r0, #33	; 0x21
 80089ce:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80089d0:	4816      	ldr	r0, [pc, #88]	; (8008a2c <HAL_DMA_DeInit+0x15c>)
 80089d2:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80089d4:	4916      	ldr	r1, [pc, #88]	; (8008a30 <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80089d6:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80089d8:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089dc:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80089e0:	bf88      	it	hi
 80089e2:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089e4:	4082      	lsls	r2, r0
  return HAL_OK;
 80089e6:	4618      	mov	r0, r3
 80089e8:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089ea:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089ec:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80089ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80089f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80089f6:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80089fa:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80089fe:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 8008a02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008a04:	2001      	movs	r0, #1
}
 8008a06:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008a08:	f240 1149 	movw	r1, #329	; 0x149
 8008a0c:	4809      	ldr	r0, [pc, #36]	; (8008a34 <HAL_DMA_DeInit+0x164>)
 8008a0e:	f7fb fa9d 	bl	8003f4c <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 8008a12:	6822      	ldr	r2, [r4, #0]
 8008a14:	e7c5      	b.n	80089a2 <HAL_DMA_DeInit+0xd2>
 8008a16:	bf00      	nop
 8008a18:	40026010 	.word	0x40026010
 8008a1c:	40026028 	.word	0x40026028
 8008a20:	40026040 	.word	0x40026040
 8008a24:	400264b8 	.word	0x400264b8
 8008a28:	aaaaaaab 	.word	0xaaaaaaab
 8008a2c:	0802af38 	.word	0x0802af38
 8008a30:	fffffc00 	.word	0xfffffc00
 8008a34:	0802af00 	.word	0x0802af00

08008a38 <HAL_DMA_Start_IT>:
{
 8008a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	461e      	mov	r6, r3
 8008a3e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a40:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008a44:	1e58      	subs	r0, r3, #1
 8008a46:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8008a4a:	4688      	mov	r8, r1
 8008a4c:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008a4e:	4298      	cmp	r0, r3
 8008a50:	d83b      	bhi.n	8008aca <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 8008a52:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d040      	beq.n	8008adc <HAL_DMA_Start_IT+0xa4>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8008a60:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d005      	beq.n	8008a74 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8008a68:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8008a6a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8008a6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8008a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a74:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a76:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a86:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a88:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 8008a8a:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	d028      	beq.n	8008ae2 <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 8008a90:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 8008a94:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a96:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008a98:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8008a9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a9c:	408b      	lsls	r3, r1
 8008a9e:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	f043 0316 	orr.w	r3, r3, #22
 8008aa8:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008aaa:	696b      	ldr	r3, [r5, #20]
 8008aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab0:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8008ab2:	b11a      	cbz	r2, 8008abc <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	f043 0308 	orr.w	r3, r3, #8
 8008aba:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8008abc:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008abe:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008ac0:	f043 0301 	orr.w	r3, r3, #1
 8008ac4:	602b      	str	r3, [r5, #0]
}
 8008ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008aca:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008ace:	4807      	ldr	r0, [pc, #28]	; (8008aec <HAL_DMA_Start_IT+0xb4>)
 8008ad0:	f7fb fa3c 	bl	8003f4c <assert_failed>
  __HAL_LOCK(hdma);
 8008ad4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d1be      	bne.n	8008a5a <HAL_DMA_Start_IT+0x22>
 8008adc:	2002      	movs	r0, #2
}
 8008ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 8008ae2:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 8008ae4:	f8c5 800c 	str.w	r8, [r5, #12]
 8008ae8:	e7d5      	b.n	8008a96 <HAL_DMA_Start_IT+0x5e>
 8008aea:	bf00      	nop
 8008aec:	0802af00 	.word	0x0802af00

08008af0 <HAL_DMA_Abort>:
{
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008af4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8008af6:	f7fe fdd5 	bl	80076a4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008afa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d006      	beq.n	8008b10 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b02:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8008b04:	2300      	movs	r3, #0
    return HAL_ERROR;
 8008b06:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b08:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8008b0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b10:	6823      	ldr	r3, [r4, #0]
 8008b12:	4605      	mov	r5, r0
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	f022 0216 	bic.w	r2, r2, #22
 8008b1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008b1c:	695a      	ldr	r2, [r3, #20]
 8008b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b22:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008b26:	b33a      	cbz	r2, 8008b78 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	f022 0208 	bic.w	r2, r2, #8
 8008b2e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	f022 0201 	bic.w	r2, r2, #1
 8008b36:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b38:	e005      	b.n	8008b46 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b3a:	f7fe fdb3 	bl	80076a4 <HAL_GetTick>
 8008b3e:	1b43      	subs	r3, r0, r5
 8008b40:	2b05      	cmp	r3, #5
 8008b42:	d80f      	bhi.n	8008b64 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f013 0301 	ands.w	r3, r3, #1
 8008b4c:	d1f5      	bne.n	8008b3a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b4e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008b50:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8008b52:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b54:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8008b56:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b58:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8008b5a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8008b5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8008b62:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b66:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8008b68:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b6a:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b6c:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008b6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8008b72:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008b7a:	2a00      	cmp	r2, #0
 8008b7c:	d1d4      	bne.n	8008b28 <HAL_DMA_Abort+0x38>
 8008b7e:	e7d7      	b.n	8008b30 <HAL_DMA_Abort+0x40>

08008b80 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b80:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8008b84:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b86:	2a02      	cmp	r2, #2
 8008b88:	d003      	beq.n	8008b92 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b8a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8008b8c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008b90:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8008b92:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8008b94:	2105      	movs	r1, #5
  return HAL_OK;
 8008b96:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8008b98:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8008b9c:	6813      	ldr	r3, [r2, #0]
 8008b9e:	f023 0301 	bic.w	r3, r3, #1
 8008ba2:	6013      	str	r3, [r2, #0]
}
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop

08008ba8 <HAL_DMA_IRQHandler>:
{
 8008ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 8008bac:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 8008bae:	4b74      	ldr	r3, [pc, #464]	; (8008d80 <HAL_DMA_IRQHandler+0x1d8>)
{
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 8008bb4:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 8008bb6:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008bb8:	2208      	movs	r2, #8
 8008bba:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8008bbe:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008bc0:	409a      	lsls	r2, r3
 8008bc2:	4222      	tst	r2, r4
 8008bc4:	d004      	beq.n	8008bd0 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008bc6:	6801      	ldr	r1, [r0, #0]
 8008bc8:	680f      	ldr	r7, [r1, #0]
 8008bca:	0778      	lsls	r0, r7, #29
 8008bcc:	f100 80ab 	bmi.w	8008d26 <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	409a      	lsls	r2, r3
 8008bd4:	4222      	tst	r2, r4
 8008bd6:	d005      	beq.n	8008be4 <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008bd8:	f8d8 1000 	ldr.w	r1, [r8]
 8008bdc:	6949      	ldr	r1, [r1, #20]
 8008bde:	0609      	lsls	r1, r1, #24
 8008be0:	f100 8099 	bmi.w	8008d16 <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008be4:	2204      	movs	r2, #4
 8008be6:	409a      	lsls	r2, r3
 8008be8:	4222      	tst	r2, r4
 8008bea:	d005      	beq.n	8008bf8 <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008bec:	f8d8 1000 	ldr.w	r1, [r8]
 8008bf0:	6809      	ldr	r1, [r1, #0]
 8008bf2:	078f      	lsls	r7, r1, #30
 8008bf4:	f100 8087 	bmi.w	8008d06 <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008bf8:	2210      	movs	r2, #16
 8008bfa:	409a      	lsls	r2, r3
 8008bfc:	4222      	tst	r2, r4
 8008bfe:	d004      	beq.n	8008c0a <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008c00:	f8d8 1000 	ldr.w	r1, [r8]
 8008c04:	680f      	ldr	r7, [r1, #0]
 8008c06:	0738      	lsls	r0, r7, #28
 8008c08:	d468      	bmi.n	8008cdc <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	409a      	lsls	r2, r3
 8008c0e:	4222      	tst	r2, r4
 8008c10:	d017      	beq.n	8008c42 <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008c12:	f8d8 1000 	ldr.w	r1, [r8]
 8008c16:	680c      	ldr	r4, [r1, #0]
 8008c18:	06e0      	lsls	r0, r4, #27
 8008c1a:	d512      	bpl.n	8008c42 <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008c1c:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008c1e:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8008c22:	2a05      	cmp	r2, #5
 8008c24:	d039      	beq.n	8008c9a <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c26:	680b      	ldr	r3, [r1, #0]
 8008c28:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c2c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c2e:	f000 808d 	beq.w	8008d4c <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c32:	0319      	lsls	r1, r3, #12
 8008c34:	f140 8098 	bpl.w	8008d68 <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 8008c38:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8008c3c:	b10b      	cbz	r3, 8008c42 <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 8008c3e:	4640      	mov	r0, r8
 8008c40:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008c42:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d045      	beq.n	8008cd6 <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008c4a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8008c4e:	07da      	lsls	r2, r3, #31
 8008c50:	d51b      	bpl.n	8008c8a <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 8008c52:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 8008c56:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8008c58:	494a      	ldr	r1, [pc, #296]	; (8008d84 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8008c5a:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8008c5e:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8008c60:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8008c64:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8008c68:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8008c6a:	6013      	str	r3, [r2, #0]
 8008c6c:	e002      	b.n	8008c74 <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008c6e:	6813      	ldr	r3, [r2, #0]
 8008c70:	07db      	lsls	r3, r3, #31
 8008c72:	d504      	bpl.n	8008c7e <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 8008c74:	9b01      	ldr	r3, [sp, #4]
 8008c76:	3301      	adds	r3, #1
 8008c78:	42ab      	cmp	r3, r5
 8008c7a:	9301      	str	r3, [sp, #4]
 8008c7c:	d9f7      	bls.n	8008c6e <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 8008c7e:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8008c80:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8008c82:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8008c86:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8008c8a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8008c8e:	b313      	cbz	r3, 8008cd6 <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 8008c90:	4640      	mov	r0, r8
}
 8008c92:	b002      	add	sp, #8
 8008c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8008c98:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c9a:	680a      	ldr	r2, [r1, #0]
 8008c9c:	f022 0216 	bic.w	r2, r2, #22
 8008ca0:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008ca2:	694a      	ldr	r2, [r1, #20]
 8008ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ca8:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008caa:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8008cae:	2a00      	cmp	r2, #0
 8008cb0:	d060      	beq.n	8008d74 <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008cb2:	680a      	ldr	r2, [r1, #0]
 8008cb4:	f022 0208 	bic.w	r2, r2, #8
 8008cb8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008cba:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 8008cbc:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8008cc2:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008cc4:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 8008cc6:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 8008cca:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8008cce:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1dc      	bne.n	8008c90 <HAL_DMA_IRQHandler+0xe8>
}
 8008cd6:	b002      	add	sp, #8
 8008cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008cdc:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008cde:	680a      	ldr	r2, [r1, #0]
 8008ce0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008ce4:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008ce6:	d12a      	bne.n	8008d3e <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008ce8:	05d7      	lsls	r7, r2, #23
 8008cea:	d403      	bmi.n	8008cf4 <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008cec:	680a      	ldr	r2, [r1, #0]
 8008cee:	f022 0208 	bic.w	r2, r2, #8
 8008cf2:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8008cf4:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	d086      	beq.n	8008c0a <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008d00:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8008d04:	e781      	b.n	8008c0a <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008d06:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008d08:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8008d0c:	f042 0204 	orr.w	r2, r2, #4
 8008d10:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8008d14:	e770      	b.n	8008bf8 <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008d16:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008d18:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8008d1c:	f042 0202 	orr.w	r2, r2, #2
 8008d20:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8008d24:	e75e      	b.n	8008be4 <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008d26:	680f      	ldr	r7, [r1, #0]
 8008d28:	f027 0704 	bic.w	r7, r7, #4
 8008d2c:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008d2e:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008d30:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8008d34:	f042 0201 	orr.w	r2, r2, #1
 8008d38:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8008d3c:	e748      	b.n	8008bd0 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008d3e:	0312      	lsls	r2, r2, #12
 8008d40:	d5d8      	bpl.n	8008cf4 <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008d42:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8008d46:	2a00      	cmp	r2, #0
 8008d48:	d1d8      	bne.n	8008cfc <HAL_DMA_IRQHandler+0x154>
 8008d4a:	e75e      	b.n	8008c0a <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008d4c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8008d50:	f47f af72 	bne.w	8008c38 <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008d54:	680a      	ldr	r2, [r1, #0]
 8008d56:	f022 0210 	bic.w	r2, r2, #16
 8008d5a:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008d5c:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8008d5e:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8008d62:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8008d66:	e767      	b.n	8008c38 <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 8008d68:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f47f af66 	bne.w	8008c3e <HAL_DMA_IRQHandler+0x96>
 8008d72:	e766      	b.n	8008c42 <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d74:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8008d78:	2a00      	cmp	r2, #0
 8008d7a:	d19a      	bne.n	8008cb2 <HAL_DMA_IRQHandler+0x10a>
 8008d7c:	e79d      	b.n	8008cba <HAL_DMA_IRQHandler+0x112>
 8008d7e:	bf00      	nop
 8008d80:	2000027c 	.word	0x2000027c
 8008d84:	1b4e81b5 	.word	0x1b4e81b5

08008d88 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8008d88:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8008d8a:	4770      	bx	lr

08008d8c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d90:	9f08      	ldr	r7, [sp, #32]
 8008d92:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008d94:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 8008d98:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008d9a:	1e7d      	subs	r5, r7, #1
{
 8008d9c:	4691      	mov	r9, r2
 8008d9e:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008da0:	4285      	cmp	r5, r0
 8008da2:	d85f      	bhi.n	8008e64 <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008da4:	68a0      	ldr	r0, [r4, #8]
 8008da6:	2880      	cmp	r0, #128	; 0x80
 8008da8:	d063      	beq.n	8008e72 <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008daa:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	f000 8090 	beq.w	8008ed4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8008db4:	2301      	movs	r3, #1
 8008db6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008dba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d005      	beq.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008dc2:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 8008dc4:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8008dc6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 8008dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008dce:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008dd0:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dd2:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8008dd4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008dd8:	f04f 0300 	mov.w	r3, #0
 8008ddc:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008dde:	682b      	ldr	r3, [r5, #0]
 8008de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008de4:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8008de6:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 8008de8:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dea:	d06a      	beq.n	8008ec2 <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8008dec:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8008df0:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008df4:	4b93      	ldr	r3, [pc, #588]	; (8009044 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8008df6:	429d      	cmp	r5, r3
 8008df8:	d941      	bls.n	8008e7e <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 8008dfa:	3b48      	subs	r3, #72	; 0x48
 8008dfc:	4992      	ldr	r1, [pc, #584]	; (8009048 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8008dfe:	4a93      	ldr	r2, [pc, #588]	; (800904c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008e00:	429d      	cmp	r5, r3
 8008e02:	bf18      	it	ne
 8008e04:	428d      	cmpne	r5, r1
 8008e06:	bf14      	ite	ne
 8008e08:	2301      	movne	r3, #1
 8008e0a:	2300      	moveq	r3, #0
 8008e0c:	4295      	cmp	r5, r2
 8008e0e:	bf0c      	ite	eq
 8008e10:	2300      	moveq	r3, #0
 8008e12:	f003 0301 	andne.w	r3, r3, #1
 8008e16:	b11b      	cbz	r3, 8008e20 <HAL_DMAEx_MultiBufferStart_IT+0x94>
 8008e18:	4b8d      	ldr	r3, [pc, #564]	; (8009050 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008e1a:	429d      	cmp	r5, r3
 8008e1c:	f040 812e 	bne.w	800907c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8008e20:	4b8c      	ldr	r3, [pc, #560]	; (8009054 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8008e22:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008e24:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008e26:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008e28:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008e2a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008e2c:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008e2e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008e30:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008e32:	2201      	movs	r2, #1
 8008e34:	4b87      	ldr	r3, [pc, #540]	; (8009054 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8008e36:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008e38:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008e3c:	f043 0316 	orr.w	r3, r3, #22
 8008e40:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008e42:	696b      	ldr	r3, [r5, #20]
 8008e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e48:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e4a:	2a00      	cmp	r2, #0
 8008e4c:	d03e      	beq.n	8008ecc <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 8008e4e:	682b      	ldr	r3, [r5, #0]
 8008e50:	f043 0308 	orr.w	r3, r3, #8
 8008e54:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 8008e56:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e58:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8008e5a:	f043 0301 	orr.w	r3, r3, #1
 8008e5e:	602b      	str	r3, [r5, #0]
}
 8008e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008e64:	487c      	ldr	r0, [pc, #496]	; (8009058 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8008e66:	21a1      	movs	r1, #161	; 0xa1
 8008e68:	f7fb f870 	bl	8003f4c <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008e6c:	68a0      	ldr	r0, [r4, #8]
 8008e6e:	2880      	cmp	r0, #128	; 0x80
 8008e70:	d19b      	bne.n	8008daa <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008e72:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 8008e76:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008e78:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008e7e:	4b77      	ldr	r3, [pc, #476]	; (800905c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8008e80:	429d      	cmp	r5, r3
 8008e82:	d929      	bls.n	8008ed8 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8008e84:	3ba8      	subs	r3, #168	; 0xa8
 8008e86:	4976      	ldr	r1, [pc, #472]	; (8009060 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8008e88:	4a70      	ldr	r2, [pc, #448]	; (800904c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008e8a:	429d      	cmp	r5, r3
 8008e8c:	bf18      	it	ne
 8008e8e:	428d      	cmpne	r5, r1
 8008e90:	bf14      	ite	ne
 8008e92:	2301      	movne	r3, #1
 8008e94:	2300      	moveq	r3, #0
 8008e96:	4295      	cmp	r5, r2
 8008e98:	bf0c      	ite	eq
 8008e9a:	2300      	moveq	r3, #0
 8008e9c:	f003 0301 	andne.w	r3, r3, #1
 8008ea0:	b113      	cbz	r3, 8008ea8 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8008ea2:	4b6b      	ldr	r3, [pc, #428]	; (8009050 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008ea4:	429d      	cmp	r5, r3
 8008ea6:	d15a      	bne.n	8008f5e <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 8008ea8:	4b6a      	ldr	r3, [pc, #424]	; (8009054 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8008eaa:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008eac:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008eae:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008eb0:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008eb2:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008eb4:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008eb6:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008eb8:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4a65      	ldr	r2, [pc, #404]	; (8009054 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8008ebe:	6093      	str	r3, [r2, #8]
 8008ec0:	e7ba      	b.n	8008e38 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 8008ec2:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 8008ec6:	f8c5 800c 	str.w	r8, [r5, #12]
 8008eca:	e793      	b.n	8008df4 <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ecc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1bd      	bne.n	8008e4e <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 8008ed2:	e7c0      	b.n	8008e56 <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 8008ed4:	2002      	movs	r0, #2
 8008ed6:	e778      	b.n	8008dca <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008ed8:	4b62      	ldr	r3, [pc, #392]	; (8009064 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8008eda:	429d      	cmp	r5, r3
 8008edc:	d91f      	bls.n	8008f1e <HAL_DMAEx_MultiBufferStart_IT+0x192>
 8008ede:	3b48      	subs	r3, #72	; 0x48
 8008ee0:	495f      	ldr	r1, [pc, #380]	; (8009060 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8008ee2:	4a5a      	ldr	r2, [pc, #360]	; (800904c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008ee4:	429d      	cmp	r5, r3
 8008ee6:	bf18      	it	ne
 8008ee8:	428d      	cmpne	r5, r1
 8008eea:	bf14      	ite	ne
 8008eec:	2301      	movne	r3, #1
 8008eee:	2300      	moveq	r3, #0
 8008ef0:	4295      	cmp	r5, r2
 8008ef2:	bf0c      	ite	eq
 8008ef4:	2300      	moveq	r3, #0
 8008ef6:	f003 0301 	andne.w	r3, r3, #1
 8008efa:	b11b      	cbz	r3, 8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8008efc:	4b54      	ldr	r3, [pc, #336]	; (8009050 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008efe:	429d      	cmp	r5, r3
 8008f00:	f040 8152 	bne.w	80091a8 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 8008f04:	4b58      	ldr	r3, [pc, #352]	; (8009068 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8008f06:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f08:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f0a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f0c:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f0e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008f10:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f12:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008f14:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008f16:	2301      	movs	r3, #1
 8008f18:	4a53      	ldr	r2, [pc, #332]	; (8009068 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8008f1a:	60d3      	str	r3, [r2, #12]
 8008f1c:	e78c      	b.n	8008e38 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f1e:	4b50      	ldr	r3, [pc, #320]	; (8009060 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8008f20:	4949      	ldr	r1, [pc, #292]	; (8009048 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8008f22:	4a4a      	ldr	r2, [pc, #296]	; (800904c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008f24:	429d      	cmp	r5, r3
 8008f26:	bf18      	it	ne
 8008f28:	428d      	cmpne	r5, r1
 8008f2a:	bf14      	ite	ne
 8008f2c:	2301      	movne	r3, #1
 8008f2e:	2300      	moveq	r3, #0
 8008f30:	4295      	cmp	r5, r2
 8008f32:	bf0c      	ite	eq
 8008f34:	2300      	moveq	r3, #0
 8008f36:	f003 0301 	andne.w	r3, r3, #1
 8008f3a:	b11b      	cbz	r3, 8008f44 <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 8008f3c:	4b44      	ldr	r3, [pc, #272]	; (8009050 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008f3e:	429d      	cmp	r5, r3
 8008f40:	f040 80be 	bne.w	80090c0 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 8008f44:	4b48      	ldr	r3, [pc, #288]	; (8009068 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8008f46:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f48:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f4a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f4c:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f4e:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008f50:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f52:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008f54:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008f56:	2301      	movs	r3, #1
 8008f58:	4a43      	ldr	r2, [pc, #268]	; (8009068 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8008f5a:	6093      	str	r3, [r2, #8]
 8008f5c:	e76c      	b.n	8008e38 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f5e:	3b48      	subs	r3, #72	; 0x48
 8008f60:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8008f64:	3218      	adds	r2, #24
 8008f66:	429d      	cmp	r5, r3
 8008f68:	bf18      	it	ne
 8008f6a:	428d      	cmpne	r5, r1
 8008f6c:	bf14      	ite	ne
 8008f6e:	2301      	movne	r3, #1
 8008f70:	2300      	moveq	r3, #0
 8008f72:	4295      	cmp	r5, r2
 8008f74:	bf0c      	ite	eq
 8008f76:	2300      	moveq	r3, #0
 8008f78:	f003 0301 	andne.w	r3, r3, #1
 8008f7c:	b11b      	cbz	r3, 8008f86 <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 8008f7e:	4b3b      	ldr	r3, [pc, #236]	; (800906c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008f80:	429d      	cmp	r5, r3
 8008f82:	f040 8210 	bne.w	80093a6 <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 8008f86:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f8a:	4b39      	ldr	r3, [pc, #228]	; (8009070 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008f8c:	4839      	ldr	r0, [pc, #228]	; (8009074 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f8e:	4a31      	ldr	r2, [pc, #196]	; (8009054 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f90:	429d      	cmp	r5, r3
 8008f92:	bf18      	it	ne
 8008f94:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f96:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f98:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 8008f9c:	bf14      	ite	ne
 8008f9e:	2301      	movne	r3, #1
 8008fa0:	2300      	moveq	r3, #0
 8008fa2:	4295      	cmp	r5, r2
 8008fa4:	bf0c      	ite	eq
 8008fa6:	2300      	moveq	r3, #0
 8008fa8:	f003 0301 	andne.w	r3, r3, #1
 8008fac:	b11b      	cbz	r3, 8008fb6 <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 8008fae:	4b2f      	ldr	r3, [pc, #188]	; (800906c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008fb0:	429d      	cmp	r5, r3
 8008fb2:	f040 8212 	bne.w	80093da <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 8008fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008fba:	4b2d      	ldr	r3, [pc, #180]	; (8009070 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008fbc:	482d      	ldr	r0, [pc, #180]	; (8009074 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008fbe:	4925      	ldr	r1, [pc, #148]	; (8009054 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008fc0:	429d      	cmp	r5, r3
 8008fc2:	bf18      	it	ne
 8008fc4:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008fc6:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008fc8:	bf14      	ite	ne
 8008fca:	2301      	movne	r3, #1
 8008fcc:	2300      	moveq	r3, #0
 8008fce:	4a2a      	ldr	r2, [pc, #168]	; (8009078 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008fd0:	4295      	cmp	r5, r2
 8008fd2:	bf0c      	ite	eq
 8008fd4:	2300      	moveq	r3, #0
 8008fd6:	f003 0301 	andne.w	r3, r3, #1
 8008fda:	b11b      	cbz	r3, 8008fe4 <HAL_DMAEx_MultiBufferStart_IT+0x258>
 8008fdc:	4b23      	ldr	r3, [pc, #140]	; (800906c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008fde:	429d      	cmp	r5, r3
 8008fe0:	f040 822b 	bne.w	800943a <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8008fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008fe8:	4b22      	ldr	r3, [pc, #136]	; (8009074 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008fea:	4821      	ldr	r0, [pc, #132]	; (8009070 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008fec:	4919      	ldr	r1, [pc, #100]	; (8009054 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008fee:	429d      	cmp	r5, r3
 8008ff0:	bf18      	it	ne
 8008ff2:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008ff4:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008ff6:	bf14      	ite	ne
 8008ff8:	2301      	movne	r3, #1
 8008ffa:	2300      	moveq	r3, #0
 8008ffc:	4a1e      	ldr	r2, [pc, #120]	; (8009078 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008ffe:	4295      	cmp	r5, r2
 8009000:	bf0c      	ite	eq
 8009002:	2300      	moveq	r3, #0
 8009004:	f003 0301 	andne.w	r3, r3, #1
 8009008:	b11b      	cbz	r3, 8009012 <HAL_DMAEx_MultiBufferStart_IT+0x286>
 800900a:	4b18      	ldr	r3, [pc, #96]	; (800906c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800900c:	429d      	cmp	r5, r3
 800900e:	f040 81fc 	bne.w	800940a <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8009012:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009016:	4b17      	ldr	r3, [pc, #92]	; (8009074 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009018:	4815      	ldr	r0, [pc, #84]	; (8009070 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800901a:	490e      	ldr	r1, [pc, #56]	; (8009054 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800901c:	429d      	cmp	r5, r3
 800901e:	bf18      	it	ne
 8009020:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009022:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009024:	bf14      	ite	ne
 8009026:	2301      	movne	r3, #1
 8009028:	2300      	moveq	r3, #0
 800902a:	4a13      	ldr	r2, [pc, #76]	; (8009078 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800902c:	4295      	cmp	r5, r2
 800902e:	bf0c      	ite	eq
 8009030:	2300      	moveq	r3, #0
 8009032:	f003 0301 	andne.w	r3, r3, #1
 8009036:	b11b      	cbz	r3, 8009040 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8009038:	4b0c      	ldr	r3, [pc, #48]	; (800906c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800903a:	429d      	cmp	r5, r3
 800903c:	f040 8215 	bne.w	800946a <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 8009040:	2340      	movs	r3, #64	; 0x40
 8009042:	e73b      	b.n	8008ebc <HAL_DMAEx_MultiBufferStart_IT+0x130>
 8009044:	40026458 	.word	0x40026458
 8009048:	40026010 	.word	0x40026010
 800904c:	40026070 	.word	0x40026070
 8009050:	40026470 	.word	0x40026470
 8009054:	40026400 	.word	0x40026400
 8009058:	0802af40 	.word	0x0802af40
 800905c:	400260b8 	.word	0x400260b8
 8009060:	40026410 	.word	0x40026410
 8009064:	40026058 	.word	0x40026058
 8009068:	40026000 	.word	0x40026000
 800906c:	40026488 	.word	0x40026488
 8009070:	40026028 	.word	0x40026028
 8009074:	40026428 	.word	0x40026428
 8009078:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800907c:	3b48      	subs	r3, #72	; 0x48
 800907e:	3118      	adds	r1, #24
 8009080:	3218      	adds	r2, #24
 8009082:	429d      	cmp	r5, r3
 8009084:	bf18      	it	ne
 8009086:	428d      	cmpne	r5, r1
 8009088:	bf14      	ite	ne
 800908a:	2301      	movne	r3, #1
 800908c:	2300      	moveq	r3, #0
 800908e:	4295      	cmp	r5, r2
 8009090:	bf0c      	ite	eq
 8009092:	2300      	moveq	r3, #0
 8009094:	f003 0301 	andne.w	r3, r3, #1
 8009098:	b11b      	cbz	r3, 80090a2 <HAL_DMAEx_MultiBufferStart_IT+0x316>
 800909a:	4b7d      	ldr	r3, [pc, #500]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800909c:	429d      	cmp	r5, r3
 800909e:	f040 8103 	bne.w	80092a8 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 80090a2:	4b7c      	ldr	r3, [pc, #496]	; (8009294 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 80090a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80090a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80090ac:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80090ae:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80090b2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80090b4:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80090b8:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80090ba:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80090bc:	2240      	movs	r2, #64	; 0x40
 80090be:	e6b9      	b.n	8008e34 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80090c0:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80090c4:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 80090c8:	3218      	adds	r2, #24
 80090ca:	429d      	cmp	r5, r3
 80090cc:	bf18      	it	ne
 80090ce:	428d      	cmpne	r5, r1
 80090d0:	bf14      	ite	ne
 80090d2:	2301      	movne	r3, #1
 80090d4:	2300      	moveq	r3, #0
 80090d6:	4295      	cmp	r5, r2
 80090d8:	bf0c      	ite	eq
 80090da:	2300      	moveq	r3, #0
 80090dc:	f003 0301 	andne.w	r3, r3, #1
 80090e0:	b11b      	cbz	r3, 80090ea <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 80090e2:	4b6b      	ldr	r3, [pc, #428]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80090e4:	429d      	cmp	r5, r3
 80090e6:	f040 81d8 	bne.w	800949a <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 80090ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80090ee:	4b6a      	ldr	r3, [pc, #424]	; (8009298 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80090f0:	486a      	ldr	r0, [pc, #424]	; (800929c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80090f2:	4a6b      	ldr	r2, [pc, #428]	; (80092a0 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80090f4:	429d      	cmp	r5, r3
 80090f6:	bf18      	it	ne
 80090f8:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80090fa:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80090fc:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8009100:	bf14      	ite	ne
 8009102:	2301      	movne	r3, #1
 8009104:	2300      	moveq	r3, #0
 8009106:	4295      	cmp	r5, r2
 8009108:	bf0c      	ite	eq
 800910a:	2300      	moveq	r3, #0
 800910c:	f003 0301 	andne.w	r3, r3, #1
 8009110:	b11b      	cbz	r3, 800911a <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8009112:	4b5f      	ldr	r3, [pc, #380]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009114:	429d      	cmp	r5, r3
 8009116:	f040 81d9 	bne.w	80094cc <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800911a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800911e:	4b5e      	ldr	r3, [pc, #376]	; (8009298 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009120:	485e      	ldr	r0, [pc, #376]	; (800929c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009122:	495f      	ldr	r1, [pc, #380]	; (80092a0 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009124:	429d      	cmp	r5, r3
 8009126:	bf18      	it	ne
 8009128:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800912a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800912c:	bf14      	ite	ne
 800912e:	2301      	movne	r3, #1
 8009130:	2300      	moveq	r3, #0
 8009132:	4a5c      	ldr	r2, [pc, #368]	; (80092a4 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009134:	4295      	cmp	r5, r2
 8009136:	bf0c      	ite	eq
 8009138:	2300      	moveq	r3, #0
 800913a:	f003 0301 	andne.w	r3, r3, #1
 800913e:	b11b      	cbz	r3, 8009148 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8009140:	4b53      	ldr	r3, [pc, #332]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009142:	429d      	cmp	r5, r3
 8009144:	f040 822c 	bne.w	80095a0 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8009148:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800914c:	4b53      	ldr	r3, [pc, #332]	; (800929c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800914e:	4852      	ldr	r0, [pc, #328]	; (8009298 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009150:	4953      	ldr	r1, [pc, #332]	; (80092a0 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009152:	429d      	cmp	r5, r3
 8009154:	bf18      	it	ne
 8009156:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009158:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800915a:	bf14      	ite	ne
 800915c:	2301      	movne	r3, #1
 800915e:	2300      	moveq	r3, #0
 8009160:	4a50      	ldr	r2, [pc, #320]	; (80092a4 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009162:	4295      	cmp	r5, r2
 8009164:	bf0c      	ite	eq
 8009166:	2300      	moveq	r3, #0
 8009168:	f003 0301 	andne.w	r3, r3, #1
 800916c:	b11b      	cbz	r3, 8009176 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800916e:	4b48      	ldr	r3, [pc, #288]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009170:	429d      	cmp	r5, r3
 8009172:	f040 81db 	bne.w	800952c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 8009176:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800917a:	4b47      	ldr	r3, [pc, #284]	; (8009298 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800917c:	4847      	ldr	r0, [pc, #284]	; (800929c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800917e:	4948      	ldr	r1, [pc, #288]	; (80092a0 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009180:	429d      	cmp	r5, r3
 8009182:	bf18      	it	ne
 8009184:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009186:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009188:	bf14      	ite	ne
 800918a:	2301      	movne	r3, #1
 800918c:	2300      	moveq	r3, #0
 800918e:	4a45      	ldr	r2, [pc, #276]	; (80092a4 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009190:	4295      	cmp	r5, r2
 8009192:	bf0c      	ite	eq
 8009194:	2300      	moveq	r3, #0
 8009196:	f003 0301 	andne.w	r3, r3, #1
 800919a:	b11b      	cbz	r3, 80091a4 <HAL_DMAEx_MultiBufferStart_IT+0x418>
 800919c:	4b3c      	ldr	r3, [pc, #240]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800919e:	429d      	cmp	r5, r3
 80091a0:	f040 822d 	bne.w	80095fe <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80091a4:	2340      	movs	r3, #64	; 0x40
 80091a6:	e6d7      	b.n	8008f58 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80091a8:	3b48      	subs	r3, #72	; 0x48
 80091aa:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80091ae:	3218      	adds	r2, #24
 80091b0:	429d      	cmp	r5, r3
 80091b2:	bf18      	it	ne
 80091b4:	428d      	cmpne	r5, r1
 80091b6:	bf14      	ite	ne
 80091b8:	2301      	movne	r3, #1
 80091ba:	2300      	moveq	r3, #0
 80091bc:	4295      	cmp	r5, r2
 80091be:	bf0c      	ite	eq
 80091c0:	2300      	moveq	r3, #0
 80091c2:	f003 0301 	andne.w	r3, r3, #1
 80091c6:	b11b      	cbz	r3, 80091d0 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 80091c8:	4b31      	ldr	r3, [pc, #196]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80091ca:	429d      	cmp	r5, r3
 80091cc:	f040 81d0 	bne.w	8009570 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 80091d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80091d4:	4b31      	ldr	r3, [pc, #196]	; (800929c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80091d6:	4830      	ldr	r0, [pc, #192]	; (8009298 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80091d8:	4a31      	ldr	r2, [pc, #196]	; (80092a0 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80091da:	429d      	cmp	r5, r3
 80091dc:	bf18      	it	ne
 80091de:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80091e0:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80091e2:	f102 0288 	add.w	r2, r2, #136	; 0x88
 80091e6:	bf14      	ite	ne
 80091e8:	2301      	movne	r3, #1
 80091ea:	2300      	moveq	r3, #0
 80091ec:	4295      	cmp	r5, r2
 80091ee:	bf0c      	ite	eq
 80091f0:	2300      	moveq	r3, #0
 80091f2:	f003 0301 	andne.w	r3, r3, #1
 80091f6:	b11b      	cbz	r3, 8009200 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 80091f8:	4b25      	ldr	r3, [pc, #148]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80091fa:	429d      	cmp	r5, r3
 80091fc:	f040 817e 	bne.w	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8009200:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009204:	4b24      	ldr	r3, [pc, #144]	; (8009298 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009206:	4825      	ldr	r0, [pc, #148]	; (800929c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009208:	4925      	ldr	r1, [pc, #148]	; (80092a0 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800920a:	429d      	cmp	r5, r3
 800920c:	bf18      	it	ne
 800920e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009210:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009212:	bf14      	ite	ne
 8009214:	2301      	movne	r3, #1
 8009216:	2300      	moveq	r3, #0
 8009218:	4a22      	ldr	r2, [pc, #136]	; (80092a4 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800921a:	4295      	cmp	r5, r2
 800921c:	bf0c      	ite	eq
 800921e:	2300      	moveq	r3, #0
 8009220:	f003 0301 	andne.w	r3, r3, #1
 8009224:	b11b      	cbz	r3, 800922e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8009226:	4b1a      	ldr	r3, [pc, #104]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009228:	429d      	cmp	r5, r3
 800922a:	f040 81fe 	bne.w	800962a <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 800922e:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009232:	4b1a      	ldr	r3, [pc, #104]	; (800929c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009234:	4818      	ldr	r0, [pc, #96]	; (8009298 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009236:	491a      	ldr	r1, [pc, #104]	; (80092a0 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009238:	429d      	cmp	r5, r3
 800923a:	bf18      	it	ne
 800923c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800923e:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009240:	bf14      	ite	ne
 8009242:	2301      	movne	r3, #1
 8009244:	2300      	moveq	r3, #0
 8009246:	4a17      	ldr	r2, [pc, #92]	; (80092a4 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009248:	4295      	cmp	r5, r2
 800924a:	bf0c      	ite	eq
 800924c:	2300      	moveq	r3, #0
 800924e:	f003 0301 	andne.w	r3, r3, #1
 8009252:	b11b      	cbz	r3, 800925c <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8009254:	4b0e      	ldr	r3, [pc, #56]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009256:	429d      	cmp	r5, r3
 8009258:	f040 81ba 	bne.w	80095d0 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800925c:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009260:	4b0e      	ldr	r3, [pc, #56]	; (800929c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009262:	480d      	ldr	r0, [pc, #52]	; (8009298 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009264:	490e      	ldr	r1, [pc, #56]	; (80092a0 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009266:	429d      	cmp	r5, r3
 8009268:	bf18      	it	ne
 800926a:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800926c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800926e:	bf14      	ite	ne
 8009270:	2301      	movne	r3, #1
 8009272:	2300      	moveq	r3, #0
 8009274:	4a0b      	ldr	r2, [pc, #44]	; (80092a4 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009276:	4295      	cmp	r5, r2
 8009278:	bf0c      	ite	eq
 800927a:	2300      	moveq	r3, #0
 800927c:	f003 0301 	andne.w	r3, r3, #1
 8009280:	b11b      	cbz	r3, 800928a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8009282:	4b03      	ldr	r3, [pc, #12]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009284:	429d      	cmp	r5, r3
 8009286:	f040 81e6 	bne.w	8009656 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 800928a:	2340      	movs	r3, #64	; 0x40
 800928c:	e644      	b.n	8008f18 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800928e:	bf00      	nop
 8009290:	40026488 	.word	0x40026488
 8009294:	40026400 	.word	0x40026400
 8009298:	40026428 	.word	0x40026428
 800929c:	40026028 	.word	0x40026028
 80092a0:	40026000 	.word	0x40026000
 80092a4:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80092a8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80092ac:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 80092b0:	3218      	adds	r2, #24
 80092b2:	429d      	cmp	r5, r3
 80092b4:	bf18      	it	ne
 80092b6:	428d      	cmpne	r5, r1
 80092b8:	bf14      	ite	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	2300      	moveq	r3, #0
 80092be:	4295      	cmp	r5, r2
 80092c0:	bf0c      	ite	eq
 80092c2:	2300      	moveq	r3, #0
 80092c4:	f003 0301 	andne.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 81e6 	beq.w	800969a <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 80092ce:	4ba3      	ldr	r3, [pc, #652]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80092d0:	429d      	cmp	r5, r3
 80092d2:	f000 81e2 	beq.w	800969a <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 80092d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80092da:	4ba1      	ldr	r3, [pc, #644]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80092dc:	48a1      	ldr	r0, [pc, #644]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80092de:	4aa2      	ldr	r2, [pc, #648]	; (8009568 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80092e0:	429d      	cmp	r5, r3
 80092e2:	bf18      	it	ne
 80092e4:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80092e6:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80092e8:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 80092ec:	bf14      	ite	ne
 80092ee:	2301      	movne	r3, #1
 80092f0:	2300      	moveq	r3, #0
 80092f2:	4295      	cmp	r5, r2
 80092f4:	bf0c      	ite	eq
 80092f6:	2300      	moveq	r3, #0
 80092f8:	f003 0301 	andne.w	r3, r3, #1
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 81c9 	beq.w	8009694 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 8009302:	4b96      	ldr	r3, [pc, #600]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009304:	429d      	cmp	r5, r3
 8009306:	f000 81c5 	beq.w	8009694 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800930a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800930e:	4b94      	ldr	r3, [pc, #592]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009310:	4894      	ldr	r0, [pc, #592]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009312:	4995      	ldr	r1, [pc, #596]	; (8009568 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009314:	429d      	cmp	r5, r3
 8009316:	bf18      	it	ne
 8009318:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800931a:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800931c:	bf14      	ite	ne
 800931e:	2301      	movne	r3, #1
 8009320:	2300      	moveq	r3, #0
 8009322:	4a92      	ldr	r2, [pc, #584]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009324:	4295      	cmp	r5, r2
 8009326:	bf0c      	ite	eq
 8009328:	2300      	moveq	r3, #0
 800932a:	f003 0301 	andne.w	r3, r3, #1
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 81ad 	beq.w	800968e <HAL_DMAEx_MultiBufferStart_IT+0x902>
 8009334:	4b89      	ldr	r3, [pc, #548]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009336:	429d      	cmp	r5, r3
 8009338:	f000 81a9 	beq.w	800968e <HAL_DMAEx_MultiBufferStart_IT+0x902>
 800933c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009340:	4b87      	ldr	r3, [pc, #540]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009342:	4888      	ldr	r0, [pc, #544]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009344:	4988      	ldr	r1, [pc, #544]	; (8009568 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009346:	429d      	cmp	r5, r3
 8009348:	bf18      	it	ne
 800934a:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800934c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800934e:	bf14      	ite	ne
 8009350:	2301      	movne	r3, #1
 8009352:	2300      	moveq	r3, #0
 8009354:	4a85      	ldr	r2, [pc, #532]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009356:	4295      	cmp	r5, r2
 8009358:	bf0c      	ite	eq
 800935a:	2300      	moveq	r3, #0
 800935c:	f003 0301 	andne.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 8191 	beq.w	8009688 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 8009366:	4b7d      	ldr	r3, [pc, #500]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009368:	429d      	cmp	r5, r3
 800936a:	f000 818d 	beq.w	8009688 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800936e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009372:	4b7b      	ldr	r3, [pc, #492]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009374:	487b      	ldr	r0, [pc, #492]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009376:	497c      	ldr	r1, [pc, #496]	; (8009568 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009378:	429d      	cmp	r5, r3
 800937a:	bf18      	it	ne
 800937c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800937e:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009380:	bf14      	ite	ne
 8009382:	2301      	movne	r3, #1
 8009384:	2300      	moveq	r3, #0
 8009386:	4a79      	ldr	r2, [pc, #484]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009388:	4295      	cmp	r5, r2
 800938a:	bf0c      	ite	eq
 800938c:	2300      	moveq	r3, #0
 800938e:	f003 0301 	andne.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8174 	beq.w	8009680 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8009398:	4b70      	ldr	r3, [pc, #448]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800939a:	429d      	cmp	r5, r3
 800939c:	f000 8170 	beq.w	8009680 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 80093a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80093a4:	e546      	b.n	8008e34 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80093a6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80093aa:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 80093ae:	3218      	adds	r2, #24
 80093b0:	429d      	cmp	r5, r3
 80093b2:	bf18      	it	ne
 80093b4:	428d      	cmpne	r5, r1
 80093b6:	bf14      	ite	ne
 80093b8:	2301      	movne	r3, #1
 80093ba:	2300      	moveq	r3, #0
 80093bc:	4295      	cmp	r5, r2
 80093be:	bf0c      	ite	eq
 80093c0:	2300      	moveq	r3, #0
 80093c2:	f003 0301 	andne.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 816d 	beq.w	80096a6 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 80093cc:	4b63      	ldr	r3, [pc, #396]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80093ce:	429d      	cmp	r5, r3
 80093d0:	f000 8169 	beq.w	80096a6 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 80093d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80093d8:	e5d7      	b.n	8008f8a <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80093da:	4b62      	ldr	r3, [pc, #392]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 80093dc:	4960      	ldr	r1, [pc, #384]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80093de:	4a63      	ldr	r2, [pc, #396]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80093e0:	429d      	cmp	r5, r3
 80093e2:	bf18      	it	ne
 80093e4:	428d      	cmpne	r5, r1
 80093e6:	bf14      	ite	ne
 80093e8:	2301      	movne	r3, #1
 80093ea:	2300      	moveq	r3, #0
 80093ec:	4295      	cmp	r5, r2
 80093ee:	bf0c      	ite	eq
 80093f0:	2300      	moveq	r3, #0
 80093f2:	f003 0301 	andne.w	r3, r3, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 815b 	beq.w	80096b2 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 80093fc:	4b57      	ldr	r3, [pc, #348]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80093fe:	429d      	cmp	r5, r3
 8009400:	f000 8157 	beq.w	80096b2 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8009404:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009408:	e5d7      	b.n	8008fba <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800940a:	4b55      	ldr	r3, [pc, #340]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800940c:	4955      	ldr	r1, [pc, #340]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800940e:	4a57      	ldr	r2, [pc, #348]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009410:	429d      	cmp	r5, r3
 8009412:	bf18      	it	ne
 8009414:	428d      	cmpne	r5, r1
 8009416:	bf14      	ite	ne
 8009418:	2301      	movne	r3, #1
 800941a:	2300      	moveq	r3, #0
 800941c:	4295      	cmp	r5, r2
 800941e:	bf0c      	ite	eq
 8009420:	2300      	moveq	r3, #0
 8009422:	f003 0301 	andne.w	r3, r3, #1
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 8140 	beq.w	80096ac <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800942c:	4b4b      	ldr	r3, [pc, #300]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800942e:	429d      	cmp	r5, r3
 8009430:	f000 813c 	beq.w	80096ac <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8009434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009438:	e5ed      	b.n	8009016 <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800943a:	4b49      	ldr	r3, [pc, #292]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800943c:	4949      	ldr	r1, [pc, #292]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800943e:	4a4b      	ldr	r2, [pc, #300]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009440:	429d      	cmp	r5, r3
 8009442:	bf18      	it	ne
 8009444:	428d      	cmpne	r5, r1
 8009446:	bf14      	ite	ne
 8009448:	2301      	movne	r3, #1
 800944a:	2300      	moveq	r3, #0
 800944c:	4295      	cmp	r5, r2
 800944e:	bf0c      	ite	eq
 8009450:	2300      	moveq	r3, #0
 8009452:	f003 0301 	andne.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 812e 	beq.w	80096b8 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800945c:	4b3f      	ldr	r3, [pc, #252]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800945e:	429d      	cmp	r5, r3
 8009460:	f000 812a 	beq.w	80096b8 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8009464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009468:	e5be      	b.n	8008fe8 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800946a:	4b3d      	ldr	r3, [pc, #244]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800946c:	493d      	ldr	r1, [pc, #244]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800946e:	4a3f      	ldr	r2, [pc, #252]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009470:	429d      	cmp	r5, r3
 8009472:	bf18      	it	ne
 8009474:	428d      	cmpne	r5, r1
 8009476:	bf14      	ite	ne
 8009478:	2301      	movne	r3, #1
 800947a:	2300      	moveq	r3, #0
 800947c:	4295      	cmp	r5, r2
 800947e:	bf0c      	ite	eq
 8009480:	2300      	moveq	r3, #0
 8009482:	f003 0301 	andne.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 810a 	beq.w	80096a0 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 800948c:	4b33      	ldr	r3, [pc, #204]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800948e:	429d      	cmp	r5, r3
 8009490:	f000 8106 	beq.w	80096a0 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8009494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009498:	e510      	b.n	8008ebc <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800949a:	3b48      	subs	r3, #72	; 0x48
 800949c:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80094a0:	3218      	adds	r2, #24
 80094a2:	429d      	cmp	r5, r3
 80094a4:	bf18      	it	ne
 80094a6:	428d      	cmpne	r5, r1
 80094a8:	bf14      	ite	ne
 80094aa:	2301      	movne	r3, #1
 80094ac:	2300      	moveq	r3, #0
 80094ae:	4295      	cmp	r5, r2
 80094b0:	bf0c      	ite	eq
 80094b2:	2300      	moveq	r3, #0
 80094b4:	f003 0301 	andne.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 8112 	beq.w	80096e2 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80094be:	4b27      	ldr	r3, [pc, #156]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80094c0:	429d      	cmp	r5, r3
 80094c2:	f000 810e 	beq.w	80096e2 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80094c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80094ca:	e610      	b.n	80090ee <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80094cc:	4b24      	ldr	r3, [pc, #144]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80094ce:	4925      	ldr	r1, [pc, #148]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 80094d0:	4a26      	ldr	r2, [pc, #152]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80094d2:	429d      	cmp	r5, r3
 80094d4:	bf18      	it	ne
 80094d6:	428d      	cmpne	r5, r1
 80094d8:	bf14      	ite	ne
 80094da:	2301      	movne	r3, #1
 80094dc:	2300      	moveq	r3, #0
 80094de:	4295      	cmp	r5, r2
 80094e0:	bf0c      	ite	eq
 80094e2:	2300      	moveq	r3, #0
 80094e4:	f003 0301 	andne.w	r3, r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 80ee 	beq.w	80096ca <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 80094ee:	4b1b      	ldr	r3, [pc, #108]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80094f0:	429d      	cmp	r5, r3
 80094f2:	f000 80ea 	beq.w	80096ca <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 80094f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80094fa:	e610      	b.n	800911e <HAL_DMAEx_MultiBufferStart_IT+0x392>
 80094fc:	4b19      	ldr	r3, [pc, #100]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 80094fe:	4918      	ldr	r1, [pc, #96]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009500:	4a1a      	ldr	r2, [pc, #104]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009502:	429d      	cmp	r5, r3
 8009504:	bf18      	it	ne
 8009506:	428d      	cmpne	r5, r1
 8009508:	bf14      	ite	ne
 800950a:	2301      	movne	r3, #1
 800950c:	2300      	moveq	r3, #0
 800950e:	4295      	cmp	r5, r2
 8009510:	bf0c      	ite	eq
 8009512:	2300      	moveq	r3, #0
 8009514:	f003 0301 	andne.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 80e8 	beq.w	80096ee <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800951e:	4b0f      	ldr	r3, [pc, #60]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009520:	429d      	cmp	r5, r3
 8009522:	f000 80e4 	beq.w	80096ee <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8009526:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800952a:	e66b      	b.n	8009204 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800952c:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800952e:	490c      	ldr	r1, [pc, #48]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009530:	4a0e      	ldr	r2, [pc, #56]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009532:	429d      	cmp	r5, r3
 8009534:	bf18      	it	ne
 8009536:	428d      	cmpne	r5, r1
 8009538:	bf14      	ite	ne
 800953a:	2301      	movne	r3, #1
 800953c:	2300      	moveq	r3, #0
 800953e:	4295      	cmp	r5, r2
 8009540:	bf0c      	ite	eq
 8009542:	2300      	moveq	r3, #0
 8009544:	f003 0301 	andne.w	r3, r3, #1
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80bb 	beq.w	80096c4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800954e:	4b03      	ldr	r3, [pc, #12]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009550:	429d      	cmp	r5, r3
 8009552:	f000 80b7 	beq.w	80096c4 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8009556:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800955a:	e60e      	b.n	800917a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800955c:	400264a0 	.word	0x400264a0
 8009560:	40026040 	.word	0x40026040
 8009564:	40026440 	.word	0x40026440
 8009568:	40026400 	.word	0x40026400
 800956c:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009570:	3b48      	subs	r3, #72	; 0x48
 8009572:	3118      	adds	r1, #24
 8009574:	3218      	adds	r2, #24
 8009576:	429d      	cmp	r5, r3
 8009578:	bf18      	it	ne
 800957a:	428d      	cmpne	r5, r1
 800957c:	bf14      	ite	ne
 800957e:	2301      	movne	r3, #1
 8009580:	2300      	moveq	r3, #0
 8009582:	4295      	cmp	r5, r2
 8009584:	bf0c      	ite	eq
 8009586:	2300      	moveq	r3, #0
 8009588:	f003 0301 	andne.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80ab 	beq.w	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8009592:	4b5a      	ldr	r3, [pc, #360]	; (80096fc <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009594:	429d      	cmp	r5, r3
 8009596:	f000 80a7 	beq.w	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800959a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800959e:	e619      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80095a0:	4b57      	ldr	r3, [pc, #348]	; (8009700 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 80095a2:	4958      	ldr	r1, [pc, #352]	; (8009704 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 80095a4:	4a58      	ldr	r2, [pc, #352]	; (8009708 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 80095a6:	429d      	cmp	r5, r3
 80095a8:	bf18      	it	ne
 80095aa:	428d      	cmpne	r5, r1
 80095ac:	bf14      	ite	ne
 80095ae:	2301      	movne	r3, #1
 80095b0:	2300      	moveq	r3, #0
 80095b2:	4295      	cmp	r5, r2
 80095b4:	bf0c      	ite	eq
 80095b6:	2300      	moveq	r3, #0
 80095b8:	f003 0301 	andne.w	r3, r3, #1
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 808a 	beq.w	80096d6 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 80095c2:	4b4e      	ldr	r3, [pc, #312]	; (80096fc <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 80095c4:	429d      	cmp	r5, r3
 80095c6:	f000 8086 	beq.w	80096d6 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 80095ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80095ce:	e5bd      	b.n	800914c <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80095d0:	4b4c      	ldr	r3, [pc, #304]	; (8009704 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 80095d2:	494b      	ldr	r1, [pc, #300]	; (8009700 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 80095d4:	4a4c      	ldr	r2, [pc, #304]	; (8009708 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 80095d6:	429d      	cmp	r5, r3
 80095d8:	bf18      	it	ne
 80095da:	428d      	cmpne	r5, r1
 80095dc:	bf14      	ite	ne
 80095de:	2301      	movne	r3, #1
 80095e0:	2300      	moveq	r3, #0
 80095e2:	4295      	cmp	r5, r2
 80095e4:	bf0c      	ite	eq
 80095e6:	2300      	moveq	r3, #0
 80095e8:	f003 0301 	andne.w	r3, r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 8081 	beq.w	80096f4 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 80095f2:	4b42      	ldr	r3, [pc, #264]	; (80096fc <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 80095f4:	429d      	cmp	r5, r3
 80095f6:	d07d      	beq.n	80096f4 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 80095f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095fc:	e630      	b.n	8009260 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80095fe:	4b40      	ldr	r3, [pc, #256]	; (8009700 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009600:	4940      	ldr	r1, [pc, #256]	; (8009704 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009602:	4a41      	ldr	r2, [pc, #260]	; (8009708 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009604:	429d      	cmp	r5, r3
 8009606:	bf18      	it	ne
 8009608:	428d      	cmpne	r5, r1
 800960a:	bf14      	ite	ne
 800960c:	2301      	movne	r3, #1
 800960e:	2300      	moveq	r3, #0
 8009610:	4295      	cmp	r5, r2
 8009612:	bf0c      	ite	eq
 8009614:	2300      	moveq	r3, #0
 8009616:	f003 0301 	andne.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d058      	beq.n	80096d0 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800961e:	4b37      	ldr	r3, [pc, #220]	; (80096fc <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009620:	429d      	cmp	r5, r3
 8009622:	d055      	beq.n	80096d0 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8009624:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009628:	e496      	b.n	8008f58 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800962a:	4b35      	ldr	r3, [pc, #212]	; (8009700 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800962c:	4935      	ldr	r1, [pc, #212]	; (8009704 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800962e:	4a36      	ldr	r2, [pc, #216]	; (8009708 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009630:	429d      	cmp	r5, r3
 8009632:	bf18      	it	ne
 8009634:	428d      	cmpne	r5, r1
 8009636:	bf14      	ite	ne
 8009638:	2301      	movne	r3, #1
 800963a:	2300      	moveq	r3, #0
 800963c:	4295      	cmp	r5, r2
 800963e:	bf0c      	ite	eq
 8009640:	2300      	moveq	r3, #0
 8009642:	f003 0301 	andne.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d048      	beq.n	80096dc <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800964a:	4b2c      	ldr	r3, [pc, #176]	; (80096fc <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800964c:	429d      	cmp	r5, r3
 800964e:	d045      	beq.n	80096dc <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8009650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009654:	e5ed      	b.n	8009232 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009656:	4b2a      	ldr	r3, [pc, #168]	; (8009700 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009658:	492a      	ldr	r1, [pc, #168]	; (8009704 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800965a:	4a2b      	ldr	r2, [pc, #172]	; (8009708 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800965c:	429d      	cmp	r5, r3
 800965e:	bf18      	it	ne
 8009660:	428d      	cmpne	r5, r1
 8009662:	bf14      	ite	ne
 8009664:	2301      	movne	r3, #1
 8009666:	2300      	moveq	r3, #0
 8009668:	4295      	cmp	r5, r2
 800966a:	bf0c      	ite	eq
 800966c:	2300      	moveq	r3, #0
 800966e:	f003 0301 	andne.w	r3, r3, #1
 8009672:	b323      	cbz	r3, 80096be <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8009674:	4b21      	ldr	r3, [pc, #132]	; (80096fc <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009676:	429d      	cmp	r5, r3
 8009678:	d021      	beq.n	80096be <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800967a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800967e:	e44b      	b.n	8008f18 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 8009680:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009684:	f7ff bbd6 	b.w	8008e34 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009688:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800968c:	e671      	b.n	8009372 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800968e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009692:	e655      	b.n	8009340 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009694:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009698:	e639      	b.n	800930e <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800969a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800969e:	e61c      	b.n	80092da <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80096a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096a4:	e40a      	b.n	8008ebc <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80096a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096aa:	e46e      	b.n	8008f8a <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80096ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80096b0:	e4b1      	b.n	8009016 <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096b6:	e480      	b.n	8008fba <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80096b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80096bc:	e494      	b.n	8008fe8 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80096be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096c2:	e429      	b.n	8008f18 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80096c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80096c8:	e557      	b.n	800917a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096ce:	e526      	b.n	800911e <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80096d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096d4:	e440      	b.n	8008f58 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80096d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80096da:	e537      	b.n	800914c <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 80096dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80096e0:	e5a7      	b.n	8009232 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80096e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096e6:	e502      	b.n	80090ee <HAL_DMAEx_MultiBufferStart_IT+0x362>
 80096e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096ec:	e572      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096f2:	e587      	b.n	8009204 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80096f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80096f8:	e5b2      	b.n	8009260 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80096fa:	bf00      	nop
 80096fc:	400264a0 	.word	0x400264a0
 8009700:	40026040 	.word	0x40026040
 8009704:	40026440 	.word	0x40026440
 8009708:	400260a0 	.word	0x400260a0

0800970c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009710:	2900      	cmp	r1, #0
 8009712:	d15b      	bne.n	80097cc <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8009714:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 8009718:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800971a:	69e3      	ldr	r3, [r4, #28]
 800971c:	b90b      	cbnz	r3, 8009722 <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 800971e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 8009722:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009724:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009726:	4b2e      	ldr	r3, [pc, #184]	; (80097e0 <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 8009728:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800972a:	402b      	ands	r3, r5
 800972c:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800972e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009732:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009734:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009736:	f7fd ffbb 	bl	80076b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800973a:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800973c:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800973e:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8009740:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009742:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009744:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8009746:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009748:	f7fd ffb2 	bl	80076b0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800974c:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800974e:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009752:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8009754:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009756:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009758:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800975a:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800975c:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800975e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8009762:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8009764:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009766:	f7fd ffa3 	bl	80076b0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800976a:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800976c:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800976e:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009770:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8009772:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009774:	f7fd ff9c 	bl	80076b0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8009778:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800977a:	491a      	ldr	r1, [pc, #104]	; (80097e4 <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 800977c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 8009780:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009782:	4a19      	ldr	r2, [pc, #100]	; (80097e8 <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 8009784:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8009786:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009788:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800978a:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800978c:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 800978e:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009790:	f7fd ff8e 	bl	80076b0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8009794:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009796:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009798:	4a14      	ldr	r2, [pc, #80]	; (80097ec <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800979a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800979e:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80097a0:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80097a2:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80097a4:	f7fd ff84 	bl	80076b0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80097a8:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80097aa:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 80097ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80097b0:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 80097b2:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80097b4:	d103      	bne.n	80097be <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80097b6:	69d9      	ldr	r1, [r3, #28]
 80097b8:	4a0d      	ldr	r2, [pc, #52]	; (80097f0 <ETH_MACDMAConfig+0xe4>)
 80097ba:	430a      	orrs	r2, r1
 80097bc:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80097be:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80097c0:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80097c2:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80097c4:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80097c6:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80097c8:	645a      	str	r2, [r3, #68]	; 0x44
}
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80097cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 80097d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80097d4:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80097d8:	e9c0 3202 	strd	r3, r2, [r0, #8]
 80097dc:	e79d      	b.n	800971a <ETH_MACDMAConfig+0xe>
 80097de:	bf00      	nop
 80097e0:	ff20810f 	.word	0xff20810f
 80097e4:	f8de3f23 	.word	0xf8de3f23
 80097e8:	02200004 	.word	0x02200004
 80097ec:	02c12080 	.word	0x02c12080
 80097f0:	00010040 	.word	0x00010040
 80097f4:	40028000 	.word	0x40028000

080097f8 <HAL_ETH_DMATxDescListInit>:
{
 80097f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097fc:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 80097fe:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 8009802:	2801      	cmp	r0, #1
 8009804:	d03b      	beq.n	800987e <HAL_ETH_DMATxDescListInit+0x86>
 8009806:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800980a:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 800980c:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 8009810:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009814:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 8009818:	b31b      	cbz	r3, 8009862 <HAL_ETH_DMATxDescListInit+0x6a>
 800981a:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800981c:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 8009820:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009824:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 800982a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800982e:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8009832:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009834:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8009836:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009838:	f1ba 0f00 	cmp.w	sl, #0
 800983c:	d103      	bne.n	8009846 <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800983e:	6817      	ldr	r7, [r2, #0]
 8009840:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 8009844:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 8009846:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 8009848:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 800984c:	bf34      	ite	cc
 800984e:	4675      	movcc	r5, lr
 8009850:	f102 0e20 	addcs.w	lr, r2, #32
 8009854:	4563      	cmp	r3, ip
 8009856:	60d5      	str	r5, [r2, #12]
 8009858:	f10c 0501 	add.w	r5, ip, #1
 800985c:	4672      	mov	r2, lr
 800985e:	46ac      	mov	ip, r5
 8009860:	d8e3      	bhi.n	800982a <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009862:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 8009866:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 8009868:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800986a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986e:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 8009870:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 8009874:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 8009876:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 800987a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 800987e:	2002      	movs	r0, #2
}
 8009880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009884 <HAL_ETH_DMARxDescListInit>:
{
 8009884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 800988a:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800988e:	2801      	cmp	r0, #1
 8009890:	d033      	beq.n	80098fa <HAL_ETH_DMARxDescListInit+0x76>
 8009892:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009896:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 8009898:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 800989a:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800989e:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 80098a2:	b1eb      	cbz	r3, 80098e0 <HAL_ETH_DMARxDescListInit+0x5c>
 80098a4:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 80098a6:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80098aa:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80098ac:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80098b0:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 80098b4:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80098b8:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80098ba:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 80098bc:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 80098c0:	45c6      	cmp	lr, r8
 80098c2:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80098c6:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80098c8:	bf34      	ite	cc
 80098ca:	4675      	movcc	r5, lr
 80098cc:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 80098d0:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80098d2:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 80098d4:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 80098d6:	f10c 0501 	add.w	r5, ip, #1
 80098da:	4672      	mov	r2, lr
 80098dc:	46ac      	mov	ip, r5
 80098de:	d8e9      	bhi.n	80098b4 <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80098e0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 80098e2:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 80098e4:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80098e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ea:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 80098ec:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 80098f0:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 80098f2:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 80098f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 80098fa:	2002      	movs	r0, #2
}
 80098fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009900 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8009900:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009904:	2b01      	cmp	r3, #1
 8009906:	d078      	beq.n	80099fa <HAL_ETH_TransmitFrame+0xfa>
 8009908:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800990c:	2302      	movs	r3, #2
 800990e:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 8009910:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009914:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 8009918:	2900      	cmp	r1, #0
 800991a:	d03c      	beq.n	8009996 <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800991c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	2800      	cmp	r0, #0
 8009922:	db60      	blt.n	80099e6 <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8009924:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8009928:	4281      	cmp	r1, r0
{
 800992a:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800992c:	d93c      	bls.n	80099a8 <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800992e:	4c34      	ldr	r4, [pc, #208]	; (8009a00 <HAL_ETH_TransmitFrame+0x100>)
 8009930:	fba4 4c01 	umull	r4, ip, r4, r1
 8009934:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8009938:	fb00 101c 	mls	r0, r0, ip, r1
 800993c:	2800      	cmp	r0, #0
 800993e:	d030      	beq.n	80099a2 <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 8009940:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8009944:	482f      	ldr	r0, [pc, #188]	; (8009a04 <HAL_ETH_TransmitFrame+0x104>)
 8009946:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 800994a:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800994c:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8009950:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 8009954:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8009958:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800995c:	e00f      	b.n	800997e <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 800995e:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009960:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 8009962:	d104      	bne.n	800996e <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8009964:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8009966:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8009968:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800996c:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800996e:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 8009970:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009972:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8009976:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009978:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800997a:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800997c:	d03b      	beq.n	80099f6 <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8009984:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 8009986:	2c00      	cmp	r4, #0
 8009988:	d1e9      	bne.n	800995e <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800998a:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800998c:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800998e:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8009992:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 8009994:	e7eb      	b.n	800996e <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 8009996:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 8009998:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800999c:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 80099a0:	4770      	bx	lr
  if (bufcount == 1)
 80099a2:	f1bc 0f01 	cmp.w	ip, #1
 80099a6:	d1cd      	bne.n	8009944 <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80099a8:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80099aa:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80099ae:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80099b0:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80099b4:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80099b6:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80099b8:	6819      	ldr	r1, [r3, #0]
 80099ba:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80099be:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80099c0:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80099c2:	6813      	ldr	r3, [r2, #0]
 80099c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c8:	6959      	ldr	r1, [r3, #20]
 80099ca:	0749      	lsls	r1, r1, #29
 80099cc:	d503      	bpl.n	80099d6 <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80099ce:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 80099d0:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80099d2:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 80099d4:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 80099d6:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 80099d8:	2101      	movs	r1, #1
  return HAL_OK;
 80099da:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 80099dc:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80099e0:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 80099e4:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80099e6:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 80099e8:	2300      	movs	r3, #0
    return HAL_ERROR;
 80099ea:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80099ec:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80099f0:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 80099f4:	4770      	bx	lr
 80099f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099f8:	e7e3      	b.n	80099c2 <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 80099fa:	2002      	movs	r0, #2
}
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	ac02b00b 	.word	0xac02b00b
 8009a04:	fffffa0c 	.word	0xfffffa0c

08009a08 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8009a08:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d02f      	beq.n	8009a70 <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 8009a10:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009a12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009a14:	4602      	mov	r2, r0
{
 8009a16:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 8009a18:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009a1a:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8009a1e:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	2900      	cmp	r1, #0
 8009a26:	db15      	blt.n	8009a54 <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 8009a28:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8009a2a:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 8009a2c:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8009a2e:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8009a32:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a36:	d016      	beq.n	8009a66 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8009a38:	6819      	ldr	r1, [r3, #0]
 8009a3a:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 8009a3e:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8009a40:	d118      	bne.n	8009a74 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8009a42:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 8009a44:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8009a46:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 8009a48:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009a4a:	6819      	ldr	r1, [r3, #0]
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	db01      	blt.n	8009a54 <HAL_ETH_GetReceivedFrame_IT+0x4c>
 8009a50:	2804      	cmp	r0, #4
 8009a52:	d1ea      	bne.n	8009a2a <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 8009a54:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8009a56:	2100      	movs	r1, #0
  return HAL_ERROR;
 8009a58:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8009a5a:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009a5e:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 8009a62:	bc30      	pop	{r4, r5}
 8009a64:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8009a66:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009a68:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 8009a6a:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009a6c:	6293      	str	r3, [r2, #40]	; 0x28
 8009a6e:	e7ec      	b.n	8009a4a <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 8009a70:	2002      	movs	r0, #2
}
 8009a72:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 8009a74:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8009a76:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8009a78:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 8009a7a:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 8009a7c:	d011      	beq.n	8009aa2 <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8009a7e:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009a80:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 8009a82:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8009a84:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009a86:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009a88:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 8009a8c:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8009a8e:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009a90:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009a92:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8009a94:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 8009a98:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009a9a:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 8009a9c:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 8009aa0:	e7df      	b.n	8009a62 <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8009aa6:	e7eb      	b.n	8009a80 <HAL_ETH_GetReceivedFrame_IT+0x78>

08009aa8 <HAL_ETH_TxCpltCallback>:
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop

08009aac <HAL_ETH_ErrorCallback>:
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop

08009ab0 <HAL_ETH_IRQHandler>:
{
 8009ab0:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8009ab2:	6803      	ldr	r3, [r0, #0]
{
 8009ab4:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8009ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aba:	695d      	ldr	r5, [r3, #20]
 8009abc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8009ac0:	d125      	bne.n	8009b0e <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8009ac2:	695a      	ldr	r2, [r3, #20]
 8009ac4:	07d2      	lsls	r2, r2, #31
 8009ac6:	d416      	bmi.n	8009af6 <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8009ac8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009acc:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	041b      	lsls	r3, r3, #16
 8009ad2:	d400      	bmi.n	8009ad6 <HAL_ETH_IRQHandler+0x26>
}
 8009ad4:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f7ff ffe8 	bl	8009aac <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8009adc:	6823      	ldr	r3, [r4, #0]
 8009ade:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 8009ae2:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8009ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 8009ae8:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8009aea:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 8009aec:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009af0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 8009af4:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 8009af6:	f7ff ffd7 	bl	8009aa8 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b02:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 8009b04:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009b08:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8009b0c:	e7dc      	b.n	8009ac8 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 8009b0e:	f009 fb97 	bl	8013240 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 8009b16:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8009b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 8009b1c:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8009b1e:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 8009b20:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009b24:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009b28:	e7ce      	b.n	8009ac8 <HAL_ETH_IRQHandler+0x18>
 8009b2a:	bf00      	nop

08009b2c <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009b2c:	8a03      	ldrh	r3, [r0, #16]
 8009b2e:	2b20      	cmp	r3, #32
{
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	4604      	mov	r4, r0
 8009b34:	460e      	mov	r6, r1
 8009b36:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009b38:	d834      	bhi.n	8009ba4 <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8009b3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009b3e:	2b82      	cmp	r3, #130	; 0x82
 8009b40:	d039      	beq.n	8009bb6 <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8009b42:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 8009b44:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8009b46:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8009b48:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8009b4c:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8009b4e:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8009b52:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8009b54:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009b56:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8009b5a:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8009b60:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 8009b64:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8009b66:	f7fd fd9d 	bl	80076a4 <HAL_GetTick>
 8009b6a:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009b6c:	e004      	b.n	8009b78 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 8009b6e:	6821      	ldr	r1, [r4, #0]
 8009b70:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009b72:	f013 0301 	ands.w	r3, r3, #1
 8009b76:	d00d      	beq.n	8009b94 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8009b78:	f7fd fd94 	bl	80076a4 <HAL_GetTick>
 8009b7c:	1b83      	subs	r3, r0, r6
 8009b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b82:	d3f4      	bcc.n	8009b6e <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8009b84:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8009b86:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8009b88:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8009b8a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8009b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8009b94:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 8009b96:	2101      	movs	r1, #1
  return HAL_OK;
 8009b98:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8009b9a:	b292      	uxth	r2, r2
 8009b9c:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 8009b9e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009ba4:	f240 5116 	movw	r1, #1302	; 0x516
 8009ba8:	4804      	ldr	r0, [pc, #16]	; (8009bbc <HAL_ETH_ReadPHYRegister+0x90>)
 8009baa:	f7fa f9cf 	bl	8003f4c <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8009bae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009bb2:	2b82      	cmp	r3, #130	; 0x82
 8009bb4:	d1c5      	bne.n	8009b42 <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 8009bb6:	2002      	movs	r0, #2
}
 8009bb8:	bd70      	pop	{r4, r5, r6, pc}
 8009bba:	bf00      	nop
 8009bbc:	0802af7c 	.word	0x0802af7c

08009bc0 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009bc0:	8a03      	ldrh	r3, [r0, #16]
 8009bc2:	2b20      	cmp	r3, #32
{
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	460d      	mov	r5, r1
 8009bca:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009bcc:	d833      	bhi.n	8009c36 <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8009bce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009bd2:	2b42      	cmp	r3, #66	; 0x42
 8009bd4:	d038      	beq.n	8009c48 <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8009bd6:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 8009bd8:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8009bda:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8009bdc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8009be0:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8009be2:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8009be4:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8009be8:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8009bea:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8009bec:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009bee:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8009bf2:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8009bf8:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 8009bfc:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8009bfe:	f7fd fd51 	bl	80076a4 <HAL_GetTick>
 8009c02:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009c04:	e004      	b.n	8009c10 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009c0a:	f013 0301 	ands.w	r3, r3, #1
 8009c0e:	d00d      	beq.n	8009c2c <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8009c10:	f7fd fd48 	bl	80076a4 <HAL_GetTick>
 8009c14:	1b43      	subs	r3, r0, r5
 8009c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c1a:	d3f4      	bcc.n	8009c06 <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 8009c1c:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8009c1e:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8009c20:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8009c22:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8009c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8009c2c:	2201      	movs	r2, #1
  return HAL_OK; 
 8009c2e:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8009c30:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 8009c34:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009c36:	f240 515e 	movw	r1, #1374	; 0x55e
 8009c3a:	4804      	ldr	r0, [pc, #16]	; (8009c4c <HAL_ETH_WritePHYRegister+0x8c>)
 8009c3c:	f7fa f986 	bl	8003f4c <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8009c40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009c44:	2b42      	cmp	r3, #66	; 0x42
 8009c46:	d1c6      	bne.n	8009bd6 <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 8009c48:	2002      	movs	r0, #2
}
 8009c4a:	bd70      	pop	{r4, r5, r6, pc}
 8009c4c:	0802af7c 	.word	0x0802af7c

08009c50 <HAL_ETH_Init>:
{
 8009c50:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 8009c52:	2300      	movs	r3, #0
{
 8009c54:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 8009c56:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	f000 80f5 	beq.w	8009e48 <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8009c5e:	6843      	ldr	r3, [r0, #4]
 8009c60:	4604      	mov	r4, r0
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	f200 809c 	bhi.w	8009da0 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8009c68:	69a3      	ldr	r3, [r4, #24]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	f200 808f 	bhi.w	8009d8e <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8009c70:	69e3      	ldr	r3, [r4, #28]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d873      	bhi.n	8009d5e <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8009c76:	6a23      	ldr	r3, [r4, #32]
 8009c78:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8009c7c:	d177      	bne.n	8009d6e <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 8009c7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009c82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d07b      	beq.n	8009d82 <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c8a:	4b91      	ldr	r3, [pc, #580]	; (8009ed0 <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009c8c:	4a91      	ldr	r2, [pc, #580]	; (8009ed4 <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c8e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009c90:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8009c94:	6459      	str	r1, [r3, #68]	; 0x44
 8009c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009ca0:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009ca2:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009ca4:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009cac:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8009cae:	6851      	ldr	r1, [r2, #4]
 8009cb0:	6a20      	ldr	r0, [r4, #32]
 8009cb2:	4301      	orrs	r1, r0
 8009cb4:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	f042 0201 	orr.w	r2, r2, #1
 8009cbc:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8009cbe:	f7fd fcf1 	bl	80076a4 <HAL_GetTick>
 8009cc2:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8009cc4:	e005      	b.n	8009cd2 <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8009cc6:	f7fd fced 	bl	80076a4 <HAL_GetTick>
 8009cca:	1b43      	subs	r3, r0, r5
 8009ccc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009cd0:	d86f      	bhi.n	8009db2 <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009cd8:	6812      	ldr	r2, [r2, #0]
 8009cda:	07d0      	lsls	r0, r2, #31
 8009cdc:	d4f3      	bmi.n	8009cc6 <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 8009cde:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8009ce0:	f002 fef4 	bl	800cacc <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8009ce4:	4b7c      	ldr	r3, [pc, #496]	; (8009ed8 <HAL_ETH_Init+0x288>)
 8009ce6:	4a7d      	ldr	r2, [pc, #500]	; (8009edc <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8009ce8:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8009cec:	4403      	add	r3, r0
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d274      	bcs.n	8009ddc <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8009cf2:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8009cf6:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8009cf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8009d00:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8009d02:	f7ff ff5d 	bl	8009bc0 <HAL_ETH_WritePHYRegister>
 8009d06:	4605      	mov	r5, r0
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d15c      	bne.n	8009dc6 <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 8009d0c:	20ff      	movs	r0, #255	; 0xff
 8009d0e:	f7fd fccf 	bl	80076b0 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009d12:	6863      	ldr	r3, [r4, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d178      	bne.n	8009e0a <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009d18:	68a3      	ldr	r3, [r4, #8]
 8009d1a:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8009d1e:	f040 809e 	bne.w	8009e5e <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8009d22:	68e3      	ldr	r3, [r4, #12]
 8009d24:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8009d28:	f040 8092 	bne.w	8009e50 <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8009d2c:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8009d2e:	08db      	lsrs	r3, r3, #3
 8009d30:	2100      	movs	r1, #0
 8009d32:	4620      	mov	r0, r4
 8009d34:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8009d38:	b292      	uxth	r2, r2
 8009d3a:	f7ff ff41 	bl	8009bc0 <HAL_ETH_WritePHYRegister>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d141      	bne.n	8009dc6 <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 8009d42:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009d46:	f7fd fcb3 	bl	80076b0 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	f7ff fcdd 	bl	800970c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8009d52:	2301      	movs	r3, #1
}
 8009d54:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 8009d56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8009d5a:	b003      	add	sp, #12
 8009d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8009d5e:	21e0      	movs	r1, #224	; 0xe0
 8009d60:	485f      	ldr	r0, [pc, #380]	; (8009ee0 <HAL_ETH_Init+0x290>)
 8009d62:	f7fa f8f3 	bl	8003f4c <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8009d66:	6a23      	ldr	r3, [r4, #32]
 8009d68:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8009d6c:	d087      	beq.n	8009c7e <HAL_ETH_Init+0x2e>
 8009d6e:	21e1      	movs	r1, #225	; 0xe1
 8009d70:	485b      	ldr	r0, [pc, #364]	; (8009ee0 <HAL_ETH_Init+0x290>)
 8009d72:	f7fa f8eb 	bl	8003f4c <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 8009d76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009d7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d183      	bne.n	8009c8a <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 8009d82:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 8009d84:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8009d88:	f009 f9cc 	bl	8013124 <HAL_ETH_MspInit>
 8009d8c:	e77d      	b.n	8009c8a <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8009d8e:	21df      	movs	r1, #223	; 0xdf
 8009d90:	4853      	ldr	r0, [pc, #332]	; (8009ee0 <HAL_ETH_Init+0x290>)
 8009d92:	f7fa f8db 	bl	8003f4c <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8009d96:	69e3      	ldr	r3, [r4, #28]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	f67f af6c 	bls.w	8009c76 <HAL_ETH_Init+0x26>
 8009d9e:	e7de      	b.n	8009d5e <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8009da0:	21de      	movs	r1, #222	; 0xde
 8009da2:	484f      	ldr	r0, [pc, #316]	; (8009ee0 <HAL_ETH_Init+0x290>)
 8009da4:	f7fa f8d2 	bl	8003f4c <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8009da8:	69a3      	ldr	r3, [r4, #24]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	f67f af60 	bls.w	8009c70 <HAL_ETH_Init+0x20>
 8009db0:	e7ed      	b.n	8009d8e <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 8009db4:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 8009db6:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8009db8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8009dbc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	b003      	add	sp, #12
 8009dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	2101      	movs	r1, #1
 8009dca:	f7ff fc9f 	bl	800970c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8009dce:	2301      	movs	r3, #1
      return HAL_ERROR;
 8009dd0:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 8009dd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	b003      	add	sp, #12
 8009dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8009ddc:	4b41      	ldr	r3, [pc, #260]	; (8009ee4 <HAL_ETH_Init+0x294>)
 8009dde:	4a42      	ldr	r2, [pc, #264]	; (8009ee8 <HAL_ETH_Init+0x298>)
 8009de0:	4403      	add	r3, r0
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d90e      	bls.n	8009e04 <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8009de6:	4b41      	ldr	r3, [pc, #260]	; (8009eec <HAL_ETH_Init+0x29c>)
 8009de8:	4a41      	ldr	r2, [pc, #260]	; (8009ef0 <HAL_ETH_Init+0x2a0>)
 8009dea:	4403      	add	r3, r0
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d382      	bcc.n	8009cf6 <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8009df0:	4b40      	ldr	r3, [pc, #256]	; (8009ef4 <HAL_ETH_Init+0x2a4>)
 8009df2:	4a41      	ldr	r2, [pc, #260]	; (8009ef8 <HAL_ETH_Init+0x2a8>)
 8009df4:	4403      	add	r3, r0
 8009df6:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8009df8:	bf94      	ite	ls
 8009dfa:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8009dfe:	f045 0510 	orrhi.w	r5, r5, #16
 8009e02:	e778      	b.n	8009cf6 <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8009e04:	f045 050c 	orr.w	r5, r5, #12
 8009e08:	e775      	b.n	8009cf6 <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 8009e0a:	f7fd fc4b 	bl	80076a4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8009e0e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8009e12:	4606      	mov	r6, r0
 8009e14:	e002      	b.n	8009e1c <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8009e16:	9b00      	ldr	r3, [sp, #0]
 8009e18:	0759      	lsls	r1, r3, #29
 8009e1a:	d426      	bmi.n	8009e6a <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8009e1c:	466a      	mov	r2, sp
 8009e1e:	2101      	movs	r1, #1
 8009e20:	4620      	mov	r0, r4
 8009e22:	f7ff fe83 	bl	8009b2c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8009e26:	f7fd fc3d 	bl	80076a4 <HAL_GetTick>
 8009e2a:	1b80      	subs	r0, r0, r6
 8009e2c:	42b8      	cmp	r0, r7
 8009e2e:	d9f2      	bls.n	8009e16 <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 8009e30:	2101      	movs	r1, #1
 8009e32:	4620      	mov	r0, r4
 8009e34:	f7ff fc6a 	bl	800970c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8009e38:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 8009e3a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8009e3c:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8009e3e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8009e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8009e46:	e7bb      	b.n	8009dc0 <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 8009e48:	2501      	movs	r5, #1
}
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	b003      	add	sp, #12
 8009e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8009e50:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8009e54:	4822      	ldr	r0, [pc, #136]	; (8009ee0 <HAL_ETH_Init+0x290>)
 8009e56:	f7fa f879 	bl	8003f4c <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8009e5a:	68e3      	ldr	r3, [r4, #12]
 8009e5c:	e766      	b.n	8009d2c <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009e5e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8009e62:	481f      	ldr	r0, [pc, #124]	; (8009ee0 <HAL_ETH_Init+0x290>)
 8009e64:	f7fa f872 	bl	8003f4c <assert_failed>
 8009e68:	e75b      	b.n	8009d22 <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8009e6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009e6e:	2100      	movs	r1, #0
 8009e70:	4620      	mov	r0, r4
 8009e72:	f7ff fea5 	bl	8009bc0 <HAL_ETH_WritePHYRegister>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d1a5      	bne.n	8009dc6 <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 8009e7a:	f7fd fc13 	bl	80076a4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8009e7e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8009e82:	4606      	mov	r6, r0
 8009e84:	e002      	b.n	8009e8c <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009e86:	9b00      	ldr	r3, [sp, #0]
 8009e88:	069a      	lsls	r2, r3, #26
 8009e8a:	d40a      	bmi.n	8009ea2 <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8009e8c:	466a      	mov	r2, sp
 8009e8e:	2101      	movs	r1, #1
 8009e90:	4620      	mov	r0, r4
 8009e92:	f7ff fe4b 	bl	8009b2c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8009e96:	f7fd fc05 	bl	80076a4 <HAL_GetTick>
 8009e9a:	1b80      	subs	r0, r0, r6
 8009e9c:	42b8      	cmp	r0, r7
 8009e9e:	d9f2      	bls.n	8009e86 <HAL_ETH_Init+0x236>
 8009ea0:	e7c6      	b.n	8009e30 <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8009ea2:	466a      	mov	r2, sp
 8009ea4:	2110      	movs	r1, #16
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f7ff fe40 	bl	8009b2c <HAL_ETH_ReadPHYRegister>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d18a      	bne.n	8009dc6 <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009eb0:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8009eb2:	f013 0204 	ands.w	r2, r3, #4
 8009eb6:	bf18      	it	ne
 8009eb8:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8009ebc:	079b      	lsls	r3, r3, #30
 8009ebe:	60e2      	str	r2, [r4, #12]
 8009ec0:	d501      	bpl.n	8009ec6 <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8009ec2:	60a0      	str	r0, [r4, #8]
 8009ec4:	e741      	b.n	8009d4a <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 8009ec6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009eca:	60a3      	str	r3, [r4, #8]
 8009ecc:	e73d      	b.n	8009d4a <HAL_ETH_Init+0xfa>
 8009ece:	bf00      	nop
 8009ed0:	40023800 	.word	0x40023800
 8009ed4:	40013800 	.word	0x40013800
 8009ed8:	feced300 	.word	0xfeced300
 8009edc:	00e4e1c0 	.word	0x00e4e1c0
 8009ee0:	0802af7c 	.word	0x0802af7c
 8009ee4:	fde9f140 	.word	0xfde9f140
 8009ee8:	017d783f 	.word	0x017d783f
 8009eec:	fc6c7900 	.word	0xfc6c7900
 8009ef0:	02625a00 	.word	0x02625a00
 8009ef4:	fa0a1f00 	.word	0xfa0a1f00
 8009ef8:	02faf07f 	.word	0x02faf07f

08009efc <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8009efc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d044      	beq.n	8009f8e <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8009f04:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8009f06:	2202      	movs	r2, #2
{  
 8009f08:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8009f0a:	2601      	movs	r6, #1
{  
 8009f0c:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 8009f0e:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 8009f10:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8009f14:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 8009f18:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8009f1a:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f1c:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	f042 0208 	orr.w	r2, r2, #8
 8009f24:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f2a:	f7fd fbc1 	bl	80076b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8009f2e:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f30:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8009f36:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	f042 0204 	orr.w	r2, r2, #4
 8009f3e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f44:	f7fd fbb4 	bl	80076b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8009f48:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f4a:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 8009f54:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009f56:	699a      	ldr	r2, [r3, #24]
 8009f58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009f5c:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f62:	f7fd fba5 	bl	80076b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8009f66:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8009f68:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 8009f6a:	9a01      	ldr	r2, [sp, #4]
 8009f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f70:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8009f72:	699a      	ldr	r2, [r3, #24]
 8009f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f78:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8009f7a:	699a      	ldr	r2, [r3, #24]
 8009f7c:	f042 0202 	orr.w	r2, r2, #2
 8009f80:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 8009f82:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009f86:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8009f8a:	b004      	add	sp, #16
 8009f8c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8009f8e:	2002      	movs	r0, #2
}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop

08009f94 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8009f94:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d046      	beq.n	800a02a <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009f9c:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8009f9e:	2102      	movs	r1, #2
{  
 8009fa0:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009fa2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 8009fa6:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009fa8:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 8009fac:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 8009fae:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 8009fb2:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009fb4:	6991      	ldr	r1, [r2, #24]
 8009fb6:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009fb8:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009fba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009fbe:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8009fc0:	6991      	ldr	r1, [r2, #24]
 8009fc2:	f021 0102 	bic.w	r1, r1, #2
 8009fc6:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 8009fc8:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	f022 0204 	bic.w	r2, r2, #4
 8009fd0:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009fd6:	f7fd fb6b 	bl	80076b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8009fda:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009fdc:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 8009fe6:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009fe8:	699a      	ldr	r2, [r3, #24]
 8009fea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009fee:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ff4:	f7fd fb5c 	bl	80076b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8009ff8:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ffa:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 8009ffc:	9902      	ldr	r1, [sp, #8]
 8009ffe:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a002:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800a004:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	f022 0208 	bic.w	r2, r2, #8
 800a00c:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a012:	f7fd fb4d 	bl	80076b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a016:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800a018:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800a01e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a022:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800a026:	b004      	add	sp, #16
 800a028:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800a02a:	2002      	movs	r0, #2
}
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop

0800a030 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800a030:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a034:	2b01      	cmp	r3, #1
 800a036:	f000 8249 	beq.w	800a4cc <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a03a:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 800a03c:	2202      	movs	r2, #2
{
 800a03e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a040:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a044:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800a046:	f04f 0101 	mov.w	r1, #1
 800a04a:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 800a04c:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a050:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a054:	f040 8207 	bne.w	800a466 <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800a058:	68eb      	ldr	r3, [r5, #12]
 800a05a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800a05e:	f040 8114 	bne.w	800a28a <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 800a062:	2c00      	cmp	r4, #0
 800a064:	f000 8119 	beq.w	800a29a <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a06e:	f040 8139 	bne.w	800a2e4 <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a072:	6863      	ldr	r3, [r4, #4]
 800a074:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a078:	f040 816b 	bne.w	800a352 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a07c:	68a3      	ldr	r3, [r4, #8]
 800a07e:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a082:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a086:	d002      	beq.n	800a08e <HAL_ETH_ConfigMAC+0x5e>
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f040 8221 	bne.w	800a4d0 <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800a08e:	68e3      	ldr	r3, [r4, #12]
 800a090:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a094:	f040 8152 	bne.w	800a33c <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a09e:	f040 8142 	bne.w	800a326 <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a0a2:	6963      	ldr	r3, [r4, #20]
 800a0a4:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a0a8:	f040 8132 	bne.w	800a310 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a0ac:	69a3      	ldr	r3, [r4, #24]
 800a0ae:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a0b2:	f040 8122 	bne.w	800a2fa <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a0b6:	69e3      	ldr	r3, [r4, #28]
 800a0b8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a0bc:	f040 81a3 	bne.w	800a406 <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a0c0:	6a23      	ldr	r3, [r4, #32]
 800a0c2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a0c6:	f040 818e 	bne.w	800a3e6 <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800a0ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0cc:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800a0d0:	f040 8193 	bne.w	800a3fa <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800a0d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a0d6:	f033 0310 	bics.w	r3, r3, #16
 800a0da:	f040 8179 	bne.w	800a3d0 <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a0de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a0e0:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800a0e4:	f040 819a 	bne.w	800a41c <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a0e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a0ea:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a0ee:	d003      	beq.n	800a0f8 <HAL_ETH_ConfigMAC+0xc8>
 800a0f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0f4:	f040 81d8 	bne.w	800a4a8 <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800a0f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0fe:	2a40      	cmp	r2, #64	; 0x40
 800a100:	d002      	beq.n	800a108 <HAL_ETH_ConfigMAC+0xd8>
 800a102:	2b80      	cmp	r3, #128	; 0x80
 800a104:	f040 81ba 	bne.w	800a47c <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a10a:	f033 0320 	bics.w	r3, r3, #32
 800a10e:	f040 80de 	bne.w	800a2ce <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a112:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a114:	f033 0308 	bics.w	r3, r3, #8
 800a118:	f040 80cf 	bne.w	800a2ba <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a11c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a11e:	2b01      	cmp	r3, #1
 800a120:	f200 80a5 	bhi.w	800a26e <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a124:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a126:	f240 4204 	movw	r2, #1028	; 0x404
 800a12a:	4293      	cmp	r3, r2
 800a12c:	bf18      	it	ne
 800a12e:	2b10      	cmpne	r3, #16
 800a130:	d003      	beq.n	800a13a <HAL_ETH_ConfigMAC+0x10a>
 800a132:	f033 0304 	bics.w	r3, r3, #4
 800a136:	f040 81c3 	bne.w	800a4c0 <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800a13a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a13c:	f033 0202 	bics.w	r2, r3, #2
 800a140:	d004      	beq.n	800a14c <HAL_ETH_ConfigMAC+0x11c>
 800a142:	f240 4202 	movw	r2, #1026	; 0x402
 800a146:	4293      	cmp	r3, r2
 800a148:	f040 81a3 	bne.w	800a492 <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a14c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a14e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a152:	f080 816e 	bcs.w	800a432 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800a156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a158:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a15c:	f040 8173 	bne.w	800a446 <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800a160:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a162:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a166:	f040 8178 	bne.w	800a45a <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800a16a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a16c:	f033 0308 	bics.w	r3, r3, #8
 800a170:	f040 8123 	bne.w	800a3ba <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a176:	f033 0304 	bics.w	r3, r3, #4
 800a17a:	f040 8113 	bne.w	800a3a4 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a17e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a180:	f033 0302 	bics.w	r3, r3, #2
 800a184:	f040 8103 	bne.w	800a38e <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a188:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a18a:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a18e:	f040 80f3 	bne.w	800a378 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a192:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a198:	f080 80e8 	bcs.w	800a36c <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800a19c:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a19e:	49b5      	ldr	r1, [pc, #724]	; (800a474 <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800a1a0:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800a1a2:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a1a4:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800a1a6:	6860      	ldr	r0, [r4, #4]
 800a1a8:	4303      	orrs	r3, r0
 800a1aa:	68a0      	ldr	r0, [r4, #8]
 800a1ac:	4303      	orrs	r3, r0
 800a1ae:	68e0      	ldr	r0, [r4, #12]
 800a1b0:	4303      	orrs	r3, r0
 800a1b2:	6920      	ldr	r0, [r4, #16]
 800a1b4:	4303      	orrs	r3, r0
 800a1b6:	6960      	ldr	r0, [r4, #20]
 800a1b8:	4303      	orrs	r3, r0
 800a1ba:	69a0      	ldr	r0, [r4, #24]
 800a1bc:	4303      	orrs	r3, r0
 800a1be:	69e0      	ldr	r0, [r4, #28]
 800a1c0:	4303      	orrs	r3, r0
 800a1c2:	6a20      	ldr	r0, [r4, #32]
 800a1c4:	4303      	orrs	r3, r0
 800a1c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1c8:	4303      	orrs	r3, r0
 800a1ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a1cc:	4303      	orrs	r3, r0
 800a1ce:	68a8      	ldr	r0, [r5, #8]
 800a1d0:	4303      	orrs	r3, r0
 800a1d2:	68e8      	ldr	r0, [r5, #12]
 800a1d4:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a1d6:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800a1d8:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a1da:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800a1dc:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a1de:	f7fd fa67 	bl	80076b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800a1e2:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a1e4:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a1e6:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800a1ea:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a1ec:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800a1ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1f0:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800a1f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a1f4:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800a1f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a1f8:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800a1fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a1fc:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800a1fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a200:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800a202:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a204:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a206:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800a208:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a20a:	f7fd fa51 	bl	80076b0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800a20e:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800a210:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800a212:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800a214:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800a216:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a218:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800a21c:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800a21e:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a220:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800a222:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800a226:	4303      	orrs	r3, r0
 800a228:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a22a:	4303      	orrs	r3, r0
 800a22c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800a22e:	4303      	orrs	r3, r0
 800a230:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a232:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800a234:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800a236:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a23a:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800a23c:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800a23e:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800a240:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a242:	f7fd fa35 	bl	80076b0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800a246:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800a248:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800a24a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800a24e:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800a250:	430a      	orrs	r2, r1
 800a252:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800a254:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800a256:	f7fd fa2b 	bl	80076b0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800a25a:	682b      	ldr	r3, [r5, #0]
 800a25c:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800a25e:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800a260:	2201      	movs	r2, #1
  return HAL_OK;  
 800a262:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800a264:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a268:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a26e:	f240 6123 	movw	r1, #1571	; 0x623
 800a272:	4881      	ldr	r0, [pc, #516]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a274:	f7f9 fe6a 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a278:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a27a:	f240 4204 	movw	r2, #1028	; 0x404
 800a27e:	4293      	cmp	r3, r2
 800a280:	bf18      	it	ne
 800a282:	2b10      	cmpne	r3, #16
 800a284:	f47f af55 	bne.w	800a132 <HAL_ETH_ConfigMAC+0x102>
 800a288:	e757      	b.n	800a13a <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800a28a:	f240 610e 	movw	r1, #1550	; 0x60e
 800a28e:	487a      	ldr	r0, [pc, #488]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a290:	f7f9 fe5c 	bl	8003f4c <assert_failed>
  if (macconf != NULL)
 800a294:	2c00      	cmp	r4, #0
 800a296:	f47f aee7 	bne.w	800a068 <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800a29a:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a29c:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a29e:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800a2a2:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a2a4:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800a2a6:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a2aa:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a2ac:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800a2ae:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a2b0:	f7fd f9fe 	bl	80076b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	601c      	str	r4, [r3, #0]
 800a2b8:	e7d1      	b.n	800a25e <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a2ba:	f240 6122 	movw	r1, #1570	; 0x622
 800a2be:	486e      	ldr	r0, [pc, #440]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a2c0:	f7f9 fe44 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a2c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	f67f af2c 	bls.w	800a124 <HAL_ETH_ConfigMAC+0xf4>
 800a2cc:	e7cf      	b.n	800a26e <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a2ce:	f240 6121 	movw	r1, #1569	; 0x621
 800a2d2:	4869      	ldr	r0, [pc, #420]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a2d4:	f7f9 fe3a 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a2d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a2da:	f033 0308 	bics.w	r3, r3, #8
 800a2de:	f43f af1d 	beq.w	800a11c <HAL_ETH_ConfigMAC+0xec>
 800a2e2:	e7ea      	b.n	800a2ba <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800a2e4:	f240 6113 	movw	r1, #1555	; 0x613
 800a2e8:	4863      	ldr	r0, [pc, #396]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a2ea:	f7f9 fe2f 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a2ee:	6863      	ldr	r3, [r4, #4]
 800a2f0:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a2f4:	f43f aec2 	beq.w	800a07c <HAL_ETH_ConfigMAC+0x4c>
 800a2f8:	e02b      	b.n	800a352 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a2fa:	f240 6119 	movw	r1, #1561	; 0x619
 800a2fe:	485e      	ldr	r0, [pc, #376]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a300:	f7f9 fe24 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a304:	69e3      	ldr	r3, [r4, #28]
 800a306:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a30a:	f43f aed9 	beq.w	800a0c0 <HAL_ETH_ConfigMAC+0x90>
 800a30e:	e07a      	b.n	800a406 <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a310:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800a314:	4858      	ldr	r0, [pc, #352]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a316:	f7f9 fe19 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a31a:	69a3      	ldr	r3, [r4, #24]
 800a31c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a320:	f43f aec9 	beq.w	800a0b6 <HAL_ETH_ConfigMAC+0x86>
 800a324:	e7e9      	b.n	800a2fa <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a326:	f240 6117 	movw	r1, #1559	; 0x617
 800a32a:	4853      	ldr	r0, [pc, #332]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a32c:	f7f9 fe0e 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a330:	6963      	ldr	r3, [r4, #20]
 800a332:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a336:	f43f aeb9 	beq.w	800a0ac <HAL_ETH_ConfigMAC+0x7c>
 800a33a:	e7e9      	b.n	800a310 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800a33c:	f240 6116 	movw	r1, #1558	; 0x616
 800a340:	484d      	ldr	r0, [pc, #308]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a342:	f7f9 fe03 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a346:	6923      	ldr	r3, [r4, #16]
 800a348:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a34c:	f43f aea9 	beq.w	800a0a2 <HAL_ETH_ConfigMAC+0x72>
 800a350:	e7e9      	b.n	800a326 <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a352:	f240 6114 	movw	r1, #1556	; 0x614
 800a356:	4848      	ldr	r0, [pc, #288]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a358:	f7f9 fdf8 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a35c:	68a3      	ldr	r3, [r4, #8]
 800a35e:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a362:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a366:	f47f ae8f 	bne.w	800a088 <HAL_ETH_ConfigMAC+0x58>
 800a36a:	e690      	b.n	800a08e <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a36c:	f240 612d 	movw	r1, #1581	; 0x62d
 800a370:	4841      	ldr	r0, [pc, #260]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a372:	f7f9 fdeb 	bl	8003f4c <assert_failed>
 800a376:	e711      	b.n	800a19c <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a378:	f240 612c 	movw	r1, #1580	; 0x62c
 800a37c:	483e      	ldr	r0, [pc, #248]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a37e:	f7f9 fde5 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a382:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a388:	f4ff af08 	bcc.w	800a19c <HAL_ETH_ConfigMAC+0x16c>
 800a38c:	e7ee      	b.n	800a36c <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a38e:	f240 612b 	movw	r1, #1579	; 0x62b
 800a392:	4839      	ldr	r0, [pc, #228]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a394:	f7f9 fdda 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a398:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a39a:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a39e:	f43f aef8 	beq.w	800a192 <HAL_ETH_ConfigMAC+0x162>
 800a3a2:	e7e9      	b.n	800a378 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a3a4:	f240 612a 	movw	r1, #1578	; 0x62a
 800a3a8:	4833      	ldr	r0, [pc, #204]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a3aa:	f7f9 fdcf 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a3ae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a3b0:	f033 0302 	bics.w	r3, r3, #2
 800a3b4:	f43f aee8 	beq.w	800a188 <HAL_ETH_ConfigMAC+0x158>
 800a3b8:	e7e9      	b.n	800a38e <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800a3ba:	f240 6129 	movw	r1, #1577	; 0x629
 800a3be:	482e      	ldr	r0, [pc, #184]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a3c0:	f7f9 fdc4 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a3c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3c6:	f033 0304 	bics.w	r3, r3, #4
 800a3ca:	f43f aed8 	beq.w	800a17e <HAL_ETH_ConfigMAC+0x14e>
 800a3ce:	e7e9      	b.n	800a3a4 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800a3d0:	f240 611d 	movw	r1, #1565	; 0x61d
 800a3d4:	4828      	ldr	r0, [pc, #160]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a3d6:	f7f9 fdb9 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a3da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a3dc:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800a3e0:	f43f ae82 	beq.w	800a0e8 <HAL_ETH_ConfigMAC+0xb8>
 800a3e4:	e01a      	b.n	800a41c <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a3e6:	f240 611b 	movw	r1, #1563	; 0x61b
 800a3ea:	4823      	ldr	r0, [pc, #140]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a3ec:	f7f9 fdae 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800a3f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3f2:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800a3f6:	f43f ae6d 	beq.w	800a0d4 <HAL_ETH_ConfigMAC+0xa4>
 800a3fa:	f240 611c 	movw	r1, #1564	; 0x61c
 800a3fe:	481e      	ldr	r0, [pc, #120]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a400:	f7f9 fda4 	bl	8003f4c <assert_failed>
 800a404:	e666      	b.n	800a0d4 <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a406:	f240 611a 	movw	r1, #1562	; 0x61a
 800a40a:	481b      	ldr	r0, [pc, #108]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a40c:	f7f9 fd9e 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a410:	6a23      	ldr	r3, [r4, #32]
 800a412:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a416:	f43f ae58 	beq.w	800a0ca <HAL_ETH_ConfigMAC+0x9a>
 800a41a:	e7e4      	b.n	800a3e6 <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a41c:	f240 611e 	movw	r1, #1566	; 0x61e
 800a420:	4815      	ldr	r0, [pc, #84]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a422:	f7f9 fd93 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a426:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a428:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a42c:	f47f ae60 	bne.w	800a0f0 <HAL_ETH_ConfigMAC+0xc0>
 800a430:	e662      	b.n	800a0f8 <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a432:	f240 6126 	movw	r1, #1574	; 0x626
 800a436:	4810      	ldr	r0, [pc, #64]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a438:	f7f9 fd88 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800a43c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a43e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a442:	f43f ae8d 	beq.w	800a160 <HAL_ETH_ConfigMAC+0x130>
 800a446:	f240 6127 	movw	r1, #1575	; 0x627
 800a44a:	480b      	ldr	r0, [pc, #44]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a44c:	f7f9 fd7e 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800a450:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a452:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a456:	f43f ae88 	beq.w	800a16a <HAL_ETH_ConfigMAC+0x13a>
 800a45a:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800a45e:	4806      	ldr	r0, [pc, #24]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a460:	f7f9 fd74 	bl	8003f4c <assert_failed>
 800a464:	e681      	b.n	800a16a <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a466:	f240 610d 	movw	r1, #1549	; 0x60d
 800a46a:	4803      	ldr	r0, [pc, #12]	; (800a478 <HAL_ETH_ConfigMAC+0x448>)
 800a46c:	f7f9 fd6e 	bl	8003f4c <assert_failed>
 800a470:	e5f2      	b.n	800a058 <HAL_ETH_ConfigMAC+0x28>
 800a472:	bf00      	nop
 800a474:	ff20810f 	.word	0xff20810f
 800a478:	0802af7c 	.word	0x0802af7c
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800a47c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800a480:	4816      	ldr	r0, [pc, #88]	; (800a4dc <HAL_ETH_ConfigMAC+0x4ac>)
 800a482:	f7f9 fd63 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a488:	f033 0320 	bics.w	r3, r3, #32
 800a48c:	f43f ae41 	beq.w	800a112 <HAL_ETH_ConfigMAC+0xe2>
 800a490:	e71d      	b.n	800a2ce <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800a492:	f240 6125 	movw	r1, #1573	; 0x625
 800a496:	4811      	ldr	r0, [pc, #68]	; (800a4dc <HAL_ETH_ConfigMAC+0x4ac>)
 800a498:	f7f9 fd58 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a49c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a49e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a2:	f4ff ae58 	bcc.w	800a156 <HAL_ETH_ConfigMAC+0x126>
 800a4a6:	e7c4      	b.n	800a432 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a4a8:	f240 611f 	movw	r1, #1567	; 0x61f
 800a4ac:	480b      	ldr	r0, [pc, #44]	; (800a4dc <HAL_ETH_ConfigMAC+0x4ac>)
 800a4ae:	f7f9 fd4d 	bl	8003f4c <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800a4b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4b8:	2a40      	cmp	r2, #64	; 0x40
 800a4ba:	f47f ae22 	bne.w	800a102 <HAL_ETH_ConfigMAC+0xd2>
 800a4be:	e623      	b.n	800a108 <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a4c0:	f240 6124 	movw	r1, #1572	; 0x624
 800a4c4:	4805      	ldr	r0, [pc, #20]	; (800a4dc <HAL_ETH_ConfigMAC+0x4ac>)
 800a4c6:	f7f9 fd41 	bl	8003f4c <assert_failed>
 800a4ca:	e636      	b.n	800a13a <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800a4cc:	2002      	movs	r0, #2
}
 800a4ce:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a4d0:	f240 6115 	movw	r1, #1557	; 0x615
 800a4d4:	4801      	ldr	r0, [pc, #4]	; (800a4dc <HAL_ETH_ConfigMAC+0x4ac>)
 800a4d6:	f7f9 fd39 	bl	8003f4c <assert_failed>
 800a4da:	e5d8      	b.n	800a08e <HAL_ETH_ConfigMAC+0x5e>
 800a4dc:	0802af7c 	.word	0x0802af7c

0800a4e0 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a4e0:	4bb9      	ldr	r3, [pc, #740]	; (800a7c8 <HAL_GPIO_Init+0x2e8>)
 800a4e2:	4aba      	ldr	r2, [pc, #744]	; (800a7cc <HAL_GPIO_Init+0x2ec>)
 800a4e4:	4290      	cmp	r0, r2
 800a4e6:	bf18      	it	ne
 800a4e8:	4298      	cmpne	r0, r3
{
 800a4ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a4ee:	bf18      	it	ne
 800a4f0:	2301      	movne	r3, #1
{
 800a4f2:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a4f4:	bf08      	it	eq
 800a4f6:	2300      	moveq	r3, #0
{
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	d026      	beq.n	800a54e <HAL_GPIO_Init+0x6e>
 800a500:	4bb3      	ldr	r3, [pc, #716]	; (800a7d0 <HAL_GPIO_Init+0x2f0>)
 800a502:	4298      	cmp	r0, r3
 800a504:	d023      	beq.n	800a54e <HAL_GPIO_Init+0x6e>
 800a506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a50a:	4298      	cmp	r0, r3
 800a50c:	d01f      	beq.n	800a54e <HAL_GPIO_Init+0x6e>
 800a50e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a512:	4298      	cmp	r0, r3
 800a514:	d01b      	beq.n	800a54e <HAL_GPIO_Init+0x6e>
 800a516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a51a:	4298      	cmp	r0, r3
 800a51c:	d017      	beq.n	800a54e <HAL_GPIO_Init+0x6e>
 800a51e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a522:	4298      	cmp	r0, r3
 800a524:	d013      	beq.n	800a54e <HAL_GPIO_Init+0x6e>
 800a526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a52a:	4298      	cmp	r0, r3
 800a52c:	d00f      	beq.n	800a54e <HAL_GPIO_Init+0x6e>
 800a52e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800a532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a536:	4290      	cmp	r0, r2
 800a538:	bf18      	it	ne
 800a53a:	4298      	cmpne	r0, r3
 800a53c:	d007      	beq.n	800a54e <HAL_GPIO_Init+0x6e>
 800a53e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a542:	4298      	cmp	r0, r3
 800a544:	d003      	beq.n	800a54e <HAL_GPIO_Init+0x6e>
 800a546:	21aa      	movs	r1, #170	; 0xaa
 800a548:	48a2      	ldr	r0, [pc, #648]	; (800a7d4 <HAL_GPIO_Init+0x2f4>)
 800a54a:	f7f9 fcff 	bl	8003f4c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800a54e:	883b      	ldrh	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	f000 811a 	beq.w	800a78a <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800a55c:	bf18      	it	ne
 800a55e:	2a03      	cmpne	r2, #3
 800a560:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800a564:	bf8c      	ite	hi
 800a566:	2301      	movhi	r3, #1
 800a568:	2300      	movls	r3, #0
 800a56a:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800a56e:	bf0c      	ite	eq
 800a570:	2300      	moveq	r3, #0
 800a572:	f003 0301 	andne.w	r3, r3, #1
 800a576:	3a11      	subs	r2, #17
 800a578:	2a01      	cmp	r2, #1
 800a57a:	bf94      	ite	ls
 800a57c:	2300      	movls	r3, #0
 800a57e:	f003 0301 	andhi.w	r3, r3, #1
 800a582:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800a586:	bf0c      	ite	eq
 800a588:	2300      	moveq	r3, #0
 800a58a:	f003 0301 	andne.w	r3, r3, #1
 800a58e:	b11b      	cbz	r3, 800a598 <HAL_GPIO_Init+0xb8>
 800a590:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800a594:	f040 813e 	bne.w	800a814 <HAL_GPIO_Init+0x334>
{
 800a598:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a59a:	f8df a260 	ldr.w	sl, [pc, #608]	; 800a7fc <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a59e:	46b8      	mov	r8, r7
 800a5a0:	e003      	b.n	800a5aa <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800a5a2:	3501      	adds	r5, #1
 800a5a4:	2d10      	cmp	r5, #16
 800a5a6:	f000 80b3 	beq.w	800a710 <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800a5aa:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a5ac:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800a5b0:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a5b2:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800a5b6:	ea34 0303 	bics.w	r3, r4, r3
 800a5ba:	d1f2      	bne.n	800a5a2 <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a5bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a5c0:	f001 0303 	and.w	r3, r1, #3
 800a5c4:	1e5a      	subs	r2, r3, #1
 800a5c6:	2a01      	cmp	r2, #1
 800a5c8:	f240 80a5 	bls.w	800a716 <HAL_GPIO_Init+0x236>
 800a5cc:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a5ce:	f04f 0b03 	mov.w	fp, #3
 800a5d2:	fa0b fb07 	lsl.w	fp, fp, r7
 800a5d6:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a5da:	2b03      	cmp	r3, #3
 800a5dc:	d025      	beq.n	800a62a <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800a5de:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a5e2:	2802      	cmp	r0, #2
 800a5e4:	f200 80b3 	bhi.w	800a74e <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800a5e8:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a5ea:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5ec:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a5ee:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a5f2:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800a5f6:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5f8:	d117      	bne.n	800a62a <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800a5fa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800a5fe:	280f      	cmp	r0, #15
 800a600:	f200 80c8 	bhi.w	800a794 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800a604:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a606:	f005 0e07 	and.w	lr, r5, #7
 800a60a:	f04f 0c0f 	mov.w	ip, #15
 800a60e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a612:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800a616:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a618:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a61c:	fa0c fe0e 	lsl.w	lr, ip, lr
 800a620:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a624:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800a628:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800a62a:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a62c:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a62e:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a632:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a636:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800a63a:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a63c:	d0b1      	beq.n	800a5a2 <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a63e:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800a642:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a646:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a64a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a64e:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a650:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800a654:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800a658:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800a65c:	9203      	str	r2, [sp, #12]
 800a65e:	4a5e      	ldr	r2, [pc, #376]	; (800a7d8 <HAL_GPIO_Init+0x2f8>)
 800a660:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800a662:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a664:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800a666:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a668:	40a3      	lsls	r3, r4
 800a66a:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a66e:	4857      	ldr	r0, [pc, #348]	; (800a7cc <HAL_GPIO_Init+0x2ec>)
 800a670:	4286      	cmp	r6, r0
 800a672:	d025      	beq.n	800a6c0 <HAL_GPIO_Init+0x1e0>
 800a674:	9801      	ldr	r0, [sp, #4]
 800a676:	2800      	cmp	r0, #0
 800a678:	d07d      	beq.n	800a776 <HAL_GPIO_Init+0x296>
 800a67a:	4855      	ldr	r0, [pc, #340]	; (800a7d0 <HAL_GPIO_Init+0x2f0>)
 800a67c:	4286      	cmp	r6, r0
 800a67e:	d07f      	beq.n	800a780 <HAL_GPIO_Init+0x2a0>
 800a680:	4856      	ldr	r0, [pc, #344]	; (800a7dc <HAL_GPIO_Init+0x2fc>)
 800a682:	4286      	cmp	r6, r0
 800a684:	f000 8091 	beq.w	800a7aa <HAL_GPIO_Init+0x2ca>
 800a688:	4855      	ldr	r0, [pc, #340]	; (800a7e0 <HAL_GPIO_Init+0x300>)
 800a68a:	4286      	cmp	r6, r0
 800a68c:	f000 8092 	beq.w	800a7b4 <HAL_GPIO_Init+0x2d4>
 800a690:	4854      	ldr	r0, [pc, #336]	; (800a7e4 <HAL_GPIO_Init+0x304>)
 800a692:	4286      	cmp	r6, r0
 800a694:	f000 80b4 	beq.w	800a800 <HAL_GPIO_Init+0x320>
 800a698:	4853      	ldr	r0, [pc, #332]	; (800a7e8 <HAL_GPIO_Init+0x308>)
 800a69a:	4286      	cmp	r6, r0
 800a69c:	f000 80b5 	beq.w	800a80a <HAL_GPIO_Init+0x32a>
 800a6a0:	4852      	ldr	r0, [pc, #328]	; (800a7ec <HAL_GPIO_Init+0x30c>)
 800a6a2:	4286      	cmp	r6, r0
 800a6a4:	f000 808b 	beq.w	800a7be <HAL_GPIO_Init+0x2de>
 800a6a8:	4851      	ldr	r0, [pc, #324]	; (800a7f0 <HAL_GPIO_Init+0x310>)
 800a6aa:	4286      	cmp	r6, r0
 800a6ac:	f000 80b7 	beq.w	800a81e <HAL_GPIO_Init+0x33e>
 800a6b0:	4850      	ldr	r0, [pc, #320]	; (800a7f4 <HAL_GPIO_Init+0x314>)
 800a6b2:	4286      	cmp	r6, r0
 800a6b4:	bf0c      	ite	eq
 800a6b6:	2009      	moveq	r0, #9
 800a6b8:	200a      	movne	r0, #10
 800a6ba:	fa00 f404 	lsl.w	r4, r0, r4
 800a6be:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800a6c0:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800a6c2:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800a6c6:	4b4c      	ldr	r3, [pc, #304]	; (800a7f8 <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800a6c8:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800a6ca:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a6cc:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800a6ce:	4b4a      	ldr	r3, [pc, #296]	; (800a7f8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800a6d0:	bf54      	ite	pl
 800a6d2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800a6d4:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a6d8:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800a6da:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800a6dc:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800a6de:	4b46      	ldr	r3, [pc, #280]	; (800a7f8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800a6e0:	bf54      	ite	pl
 800a6e2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800a6e4:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a6e8:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800a6ea:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800a6ec:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800a6ee:	4b42      	ldr	r3, [pc, #264]	; (800a7f8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800a6f0:	bf54      	ite	pl
 800a6f2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800a6f4:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800a6f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a6fa:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800a6fc:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800a6fe:	4a3e      	ldr	r2, [pc, #248]	; (800a7f8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800a700:	bf54      	ite	pl
 800a702:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800a704:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800a708:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800a70a:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a70c:	f47f af4d 	bne.w	800a5aa <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800a710:	b005      	add	sp, #20
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800a716:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800a71a:	2803      	cmp	r0, #3
 800a71c:	d820      	bhi.n	800a760 <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800a71e:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a720:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800a724:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a728:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800a72c:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a72e:	ea20 000b 	bic.w	r0, r0, fp
 800a732:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800a736:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800a73a:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800a73c:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a73e:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a742:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800a746:	40ac      	lsls	r4, r5
 800a748:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800a74a:	6074      	str	r4, [r6, #4]
 800a74c:	e745      	b.n	800a5da <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800a74e:	21ce      	movs	r1, #206	; 0xce
 800a750:	4820      	ldr	r0, [pc, #128]	; (800a7d4 <HAL_GPIO_Init+0x2f4>)
 800a752:	f7f9 fbfb 	bl	8003f4c <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a756:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a75a:	f001 0303 	and.w	r3, r1, #3
 800a75e:	e743      	b.n	800a5e8 <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800a760:	21bd      	movs	r1, #189	; 0xbd
 800a762:	481c      	ldr	r0, [pc, #112]	; (800a7d4 <HAL_GPIO_Init+0x2f4>)
 800a764:	f7f9 fbf2 	bl	8003f4c <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a768:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a76c:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a770:	f001 0303 	and.w	r3, r1, #3
 800a774:	e7d3      	b.n	800a71e <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a776:	2001      	movs	r0, #1
 800a778:	fa00 f404 	lsl.w	r4, r0, r4
 800a77c:	4323      	orrs	r3, r4
 800a77e:	e79f      	b.n	800a6c0 <HAL_GPIO_Init+0x1e0>
 800a780:	2002      	movs	r0, #2
 800a782:	fa00 f404 	lsl.w	r4, r0, r4
 800a786:	4323      	orrs	r3, r4
 800a788:	e79a      	b.n	800a6c0 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800a78a:	21ab      	movs	r1, #171	; 0xab
 800a78c:	4811      	ldr	r0, [pc, #68]	; (800a7d4 <HAL_GPIO_Init+0x2f4>)
 800a78e:	f7f9 fbdd 	bl	8003f4c <assert_failed>
 800a792:	e6e0      	b.n	800a556 <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800a794:	21db      	movs	r1, #219	; 0xdb
 800a796:	480f      	ldr	r0, [pc, #60]	; (800a7d4 <HAL_GPIO_Init+0x2f4>)
 800a798:	f7f9 fbd8 	bl	8003f4c <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a79c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a7a0:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a7a4:	f001 0303 	and.w	r3, r1, #3
 800a7a8:	e72c      	b.n	800a604 <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a7aa:	2003      	movs	r0, #3
 800a7ac:	fa00 f404 	lsl.w	r4, r0, r4
 800a7b0:	4323      	orrs	r3, r4
 800a7b2:	e785      	b.n	800a6c0 <HAL_GPIO_Init+0x1e0>
 800a7b4:	2004      	movs	r0, #4
 800a7b6:	fa00 f404 	lsl.w	r4, r0, r4
 800a7ba:	4323      	orrs	r3, r4
 800a7bc:	e780      	b.n	800a6c0 <HAL_GPIO_Init+0x1e0>
 800a7be:	2007      	movs	r0, #7
 800a7c0:	fa00 f404 	lsl.w	r4, r0, r4
 800a7c4:	4323      	orrs	r3, r4
 800a7c6:	e77b      	b.n	800a6c0 <HAL_GPIO_Init+0x1e0>
 800a7c8:	40020400 	.word	0x40020400
 800a7cc:	40020000 	.word	0x40020000
 800a7d0:	40020800 	.word	0x40020800
 800a7d4:	0802afb4 	.word	0x0802afb4
 800a7d8:	40013800 	.word	0x40013800
 800a7dc:	40020c00 	.word	0x40020c00
 800a7e0:	40021000 	.word	0x40021000
 800a7e4:	40021400 	.word	0x40021400
 800a7e8:	40021800 	.word	0x40021800
 800a7ec:	40021c00 	.word	0x40021c00
 800a7f0:	40022000 	.word	0x40022000
 800a7f4:	40022400 	.word	0x40022400
 800a7f8:	40013c00 	.word	0x40013c00
 800a7fc:	40023800 	.word	0x40023800
 800a800:	2005      	movs	r0, #5
 800a802:	fa00 f404 	lsl.w	r4, r0, r4
 800a806:	4323      	orrs	r3, r4
 800a808:	e75a      	b.n	800a6c0 <HAL_GPIO_Init+0x1e0>
 800a80a:	2006      	movs	r0, #6
 800a80c:	fa00 f404 	lsl.w	r4, r0, r4
 800a810:	4323      	orrs	r3, r4
 800a812:	e755      	b.n	800a6c0 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800a814:	21ac      	movs	r1, #172	; 0xac
 800a816:	4804      	ldr	r0, [pc, #16]	; (800a828 <HAL_GPIO_Init+0x348>)
 800a818:	f7f9 fb98 	bl	8003f4c <assert_failed>
 800a81c:	e6bc      	b.n	800a598 <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a81e:	2008      	movs	r0, #8
 800a820:	fa00 f404 	lsl.w	r4, r0, r4
 800a824:	4323      	orrs	r3, r4
 800a826:	e74b      	b.n	800a6c0 <HAL_GPIO_Init+0x1e0>
 800a828:	0802afb4 	.word	0x0802afb4

0800a82c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a82c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a830:	4f6b      	ldr	r7, [pc, #428]	; (800a9e0 <HAL_GPIO_DeInit+0x1b4>)
{
 800a832:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a834:	4b6b      	ldr	r3, [pc, #428]	; (800a9e4 <HAL_GPIO_DeInit+0x1b8>)
{
 800a836:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a838:	42b8      	cmp	r0, r7
 800a83a:	bf18      	it	ne
 800a83c:	4298      	cmpne	r0, r3
 800a83e:	bf14      	ite	ne
 800a840:	2701      	movne	r7, #1
 800a842:	2700      	moveq	r7, #0
 800a844:	d027      	beq.n	800a896 <HAL_GPIO_DeInit+0x6a>
 800a846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a84a:	4298      	cmp	r0, r3
 800a84c:	d023      	beq.n	800a896 <HAL_GPIO_DeInit+0x6a>
 800a84e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a852:	4298      	cmp	r0, r3
 800a854:	d01f      	beq.n	800a896 <HAL_GPIO_DeInit+0x6a>
 800a856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a85a:	4298      	cmp	r0, r3
 800a85c:	d01b      	beq.n	800a896 <HAL_GPIO_DeInit+0x6a>
 800a85e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a862:	4298      	cmp	r0, r3
 800a864:	d017      	beq.n	800a896 <HAL_GPIO_DeInit+0x6a>
 800a866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a86a:	4298      	cmp	r0, r3
 800a86c:	d013      	beq.n	800a896 <HAL_GPIO_DeInit+0x6a>
 800a86e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a872:	4298      	cmp	r0, r3
 800a874:	d00f      	beq.n	800a896 <HAL_GPIO_DeInit+0x6a>
 800a876:	4a5c      	ldr	r2, [pc, #368]	; (800a9e8 <HAL_GPIO_DeInit+0x1bc>)
 800a878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87c:	4290      	cmp	r0, r2
 800a87e:	bf18      	it	ne
 800a880:	4298      	cmpne	r0, r3
 800a882:	d008      	beq.n	800a896 <HAL_GPIO_DeInit+0x6a>
 800a884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a888:	4298      	cmp	r0, r3
 800a88a:	d004      	beq.n	800a896 <HAL_GPIO_DeInit+0x6a>
 800a88c:	f240 112b 	movw	r1, #299	; 0x12b
 800a890:	4856      	ldr	r0, [pc, #344]	; (800a9ec <HAL_GPIO_DeInit+0x1c0>)
 800a892:	f7f9 fb5b 	bl	8003f4c <assert_failed>
{
 800a896:	2300      	movs	r3, #0
 800a898:	f8df b170 	ldr.w	fp, [pc, #368]	; 800aa0c <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800a89c:	f8df a140 	ldr.w	sl, [pc, #320]	; 800a9e0 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a8a0:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800aa10 <HAL_GPIO_DeInit+0x1e4>
 800a8a4:	e002      	b.n	800a8ac <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	2b10      	cmp	r3, #16
 800a8aa:	d07b      	beq.n	800a9a4 <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800a8ac:	2001      	movs	r0, #1
 800a8ae:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800a8b2:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800a8b6:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800a8ba:	d1f4      	bne.n	800a8a6 <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800a8bc:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a8c0:	f003 0103 	and.w	r1, r3, #3
 800a8c4:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800a8c8:	4554      	cmp	r4, sl
 800a8ca:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a8cc:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800a8d0:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a8d4:	fa0c fc01 	lsl.w	ip, ip, r1
 800a8d8:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800a8dc:	d01e      	beq.n	800a91c <HAL_GPIO_DeInit+0xf0>
 800a8de:	2f00      	cmp	r7, #0
 800a8e0:	d063      	beq.n	800a9aa <HAL_GPIO_DeInit+0x17e>
 800a8e2:	4843      	ldr	r0, [pc, #268]	; (800a9f0 <HAL_GPIO_DeInit+0x1c4>)
 800a8e4:	4284      	cmp	r4, r0
 800a8e6:	d063      	beq.n	800a9b0 <HAL_GPIO_DeInit+0x184>
 800a8e8:	4842      	ldr	r0, [pc, #264]	; (800a9f4 <HAL_GPIO_DeInit+0x1c8>)
 800a8ea:	4284      	cmp	r4, r0
 800a8ec:	d064      	beq.n	800a9b8 <HAL_GPIO_DeInit+0x18c>
 800a8ee:	4842      	ldr	r0, [pc, #264]	; (800a9f8 <HAL_GPIO_DeInit+0x1cc>)
 800a8f0:	4284      	cmp	r4, r0
 800a8f2:	d065      	beq.n	800a9c0 <HAL_GPIO_DeInit+0x194>
 800a8f4:	4841      	ldr	r0, [pc, #260]	; (800a9fc <HAL_GPIO_DeInit+0x1d0>)
 800a8f6:	4284      	cmp	r4, r0
 800a8f8:	d066      	beq.n	800a9c8 <HAL_GPIO_DeInit+0x19c>
 800a8fa:	4841      	ldr	r0, [pc, #260]	; (800aa00 <HAL_GPIO_DeInit+0x1d4>)
 800a8fc:	4284      	cmp	r4, r0
 800a8fe:	d053      	beq.n	800a9a8 <HAL_GPIO_DeInit+0x17c>
 800a900:	4840      	ldr	r0, [pc, #256]	; (800aa04 <HAL_GPIO_DeInit+0x1d8>)
 800a902:	4284      	cmp	r4, r0
 800a904:	d064      	beq.n	800a9d0 <HAL_GPIO_DeInit+0x1a4>
 800a906:	4838      	ldr	r0, [pc, #224]	; (800a9e8 <HAL_GPIO_DeInit+0x1bc>)
 800a908:	4284      	cmp	r4, r0
 800a90a:	d065      	beq.n	800a9d8 <HAL_GPIO_DeInit+0x1ac>
 800a90c:	483e      	ldr	r0, [pc, #248]	; (800aa08 <HAL_GPIO_DeInit+0x1dc>)
 800a90e:	4284      	cmp	r4, r0
 800a910:	bf14      	ite	ne
 800a912:	200a      	movne	r0, #10
 800a914:	2009      	moveq	r0, #9
 800a916:	fa00 f101 	lsl.w	r1, r0, r1
 800a91a:	e000      	b.n	800a91e <HAL_GPIO_DeInit+0xf2>
 800a91c:	2100      	movs	r1, #0
 800a91e:	4588      	cmp	r8, r1
 800a920:	d11b      	bne.n	800a95a <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a922:	f8d9 1000 	ldr.w	r1, [r9]
 800a926:	ea21 010e 	bic.w	r1, r1, lr
 800a92a:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a92e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a932:	ea21 010e 	bic.w	r1, r1, lr
 800a936:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a93a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800a93e:	ea21 010e 	bic.w	r1, r1, lr
 800a942:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a946:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800a94a:	ea21 010e 	bic.w	r1, r1, lr
 800a94e:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800a952:	68b1      	ldr	r1, [r6, #8]
 800a954:	ea21 010c 	bic.w	r1, r1, ip
 800a958:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a95a:	0059      	lsls	r1, r3, #1
 800a95c:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a95e:	f003 0c07 	and.w	ip, r3, #7
 800a962:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a964:	fa00 f101 	lsl.w	r1, r0, r1
 800a968:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a96a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a96e:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a972:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a976:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a978:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800a97a:	3301      	adds	r3, #1
 800a97c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800a980:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a982:	6a06      	ldr	r6, [r0, #32]
 800a984:	ea26 060c 	bic.w	r6, r6, ip
 800a988:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a98a:	68e0      	ldr	r0, [r4, #12]
 800a98c:	ea20 0001 	bic.w	r0, r0, r1
 800a990:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a992:	6860      	ldr	r0, [r4, #4]
 800a994:	ea20 0202 	bic.w	r2, r0, r2
 800a998:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a99a:	68a2      	ldr	r2, [r4, #8]
 800a99c:	ea22 0101 	bic.w	r1, r2, r1
 800a9a0:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a9a2:	d183      	bne.n	800a8ac <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800a9a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800a9a8:	2006      	movs	r0, #6
 800a9aa:	fa00 f101 	lsl.w	r1, r0, r1
 800a9ae:	e7b6      	b.n	800a91e <HAL_GPIO_DeInit+0xf2>
 800a9b0:	2002      	movs	r0, #2
 800a9b2:	fa00 f101 	lsl.w	r1, r0, r1
 800a9b6:	e7b2      	b.n	800a91e <HAL_GPIO_DeInit+0xf2>
 800a9b8:	2003      	movs	r0, #3
 800a9ba:	fa00 f101 	lsl.w	r1, r0, r1
 800a9be:	e7ae      	b.n	800a91e <HAL_GPIO_DeInit+0xf2>
 800a9c0:	2004      	movs	r0, #4
 800a9c2:	fa00 f101 	lsl.w	r1, r0, r1
 800a9c6:	e7aa      	b.n	800a91e <HAL_GPIO_DeInit+0xf2>
 800a9c8:	2005      	movs	r0, #5
 800a9ca:	fa00 f101 	lsl.w	r1, r0, r1
 800a9ce:	e7a6      	b.n	800a91e <HAL_GPIO_DeInit+0xf2>
 800a9d0:	2007      	movs	r0, #7
 800a9d2:	fa00 f101 	lsl.w	r1, r0, r1
 800a9d6:	e7a2      	b.n	800a91e <HAL_GPIO_DeInit+0xf2>
 800a9d8:	2008      	movs	r0, #8
 800a9da:	fa00 f101 	lsl.w	r1, r0, r1
 800a9de:	e79e      	b.n	800a91e <HAL_GPIO_DeInit+0xf2>
 800a9e0:	40020000 	.word	0x40020000
 800a9e4:	40020400 	.word	0x40020400
 800a9e8:	40022000 	.word	0x40022000
 800a9ec:	0802afb4 	.word	0x0802afb4
 800a9f0:	40020800 	.word	0x40020800
 800a9f4:	40020c00 	.word	0x40020c00
 800a9f8:	40021000 	.word	0x40021000
 800a9fc:	40021400 	.word	0x40021400
 800aa00:	40021800 	.word	0x40021800
 800aa04:	40021c00 	.word	0x40021c00
 800aa08:	40022400 	.word	0x40022400
 800aa0c:	40013800 	.word	0x40013800
 800aa10:	40013c00 	.word	0x40013c00

0800aa14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800aa18:	460c      	mov	r4, r1
 800aa1a:	b129      	cbz	r1, 800aa28 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aa1c:	692b      	ldr	r3, [r5, #16]
 800aa1e:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800aa20:	bf14      	ite	ne
 800aa22:	2001      	movne	r0, #1
 800aa24:	2000      	moveq	r0, #0
 800aa26:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800aa28:	f240 1177 	movw	r1, #375	; 0x177
 800aa2c:	4801      	ldr	r0, [pc, #4]	; (800aa34 <HAL_GPIO_ReadPin+0x20>)
 800aa2e:	f7f9 fa8d 	bl	8003f4c <assert_failed>
 800aa32:	e7f3      	b.n	800aa1c <HAL_GPIO_ReadPin+0x8>
 800aa34:	0802afb4 	.word	0x0802afb4

0800aa38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800aa3c:	460c      	mov	r4, r1
{
 800aa3e:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800aa40:	b161      	cbz	r1, 800aa5c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800aa42:	2d01      	cmp	r5, #1
 800aa44:	d803      	bhi.n	800aa4e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800aa46:	b905      	cbnz	r5, 800aa4a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800aa48:	0424      	lsls	r4, r4, #16
 800aa4a:	61b4      	str	r4, [r6, #24]
  }
}
 800aa4c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800aa4e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800aa52:	4805      	ldr	r0, [pc, #20]	; (800aa68 <HAL_GPIO_WritePin+0x30>)
 800aa54:	f7f9 fa7a 	bl	8003f4c <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800aa58:	61b4      	str	r4, [r6, #24]
}
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800aa5c:	f240 1197 	movw	r1, #407	; 0x197
 800aa60:	4801      	ldr	r0, [pc, #4]	; (800aa68 <HAL_GPIO_WritePin+0x30>)
 800aa62:	f7f9 fa73 	bl	8003f4c <assert_failed>
 800aa66:	e7ec      	b.n	800aa42 <HAL_GPIO_WritePin+0xa>
 800aa68:	0802afb4 	.word	0x0802afb4

0800aa6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800aa70:	460c      	mov	r4, r1
 800aa72:	b141      	cbz	r1, 800aa86 <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800aa74:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aa76:	ea04 0301 	and.w	r3, r4, r1
 800aa7a:	ea24 0401 	bic.w	r4, r4, r1
 800aa7e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800aa82:	61ac      	str	r4, [r5, #24]
}
 800aa84:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800aa86:	f240 11af 	movw	r1, #431	; 0x1af
 800aa8a:	4802      	ldr	r0, [pc, #8]	; (800aa94 <HAL_GPIO_TogglePin+0x28>)
 800aa8c:	f7f9 fa5e 	bl	8003f4c <assert_failed>
 800aa90:	e7f0      	b.n	800aa74 <HAL_GPIO_TogglePin+0x8>
 800aa92:	bf00      	nop
 800aa94:	0802afb4 	.word	0x0802afb4

0800aa98 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop

0800aa9c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800aa9c:	4a04      	ldr	r2, [pc, #16]	; (800aab0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800aa9e:	6951      	ldr	r1, [r2, #20]
 800aaa0:	4201      	tst	r1, r0
 800aaa2:	d100      	bne.n	800aaa6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800aaa4:	4770      	bx	lr
{
 800aaa6:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800aaa8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800aaaa:	f7ff fff5 	bl	800aa98 <HAL_GPIO_EXTI_Callback>
}
 800aaae:	bd08      	pop	{r3, pc}
 800aab0:	40013c00 	.word	0x40013c00

0800aab4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab8:	460d      	mov	r5, r1
 800aaba:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800aabc:	4926      	ldr	r1, [pc, #152]	; (800ab58 <I2C_TransferConfig+0xa4>)
{
 800aabe:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800aac0:	4a26      	ldr	r2, [pc, #152]	; (800ab5c <I2C_TransferConfig+0xa8>)
{
 800aac2:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800aac4:	6803      	ldr	r3, [r0, #0]
{
 800aac6:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800aac8:	4293      	cmp	r3, r2
 800aaca:	bf18      	it	ne
 800aacc:	428b      	cmpne	r3, r1
 800aace:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aad2:	bf14      	ite	ne
 800aad4:	2201      	movne	r2, #1
 800aad6:	2200      	moveq	r2, #0
 800aad8:	428b      	cmp	r3, r1
 800aada:	bf0c      	ite	eq
 800aadc:	2200      	moveq	r2, #0
 800aade:	f002 0201 	andne.w	r2, r2, #1
 800aae2:	b112      	cbz	r2, 800aaea <I2C_TransferConfig+0x36>
 800aae4:	4a1e      	ldr	r2, [pc, #120]	; (800ab60 <I2C_TransferConfig+0xac>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d123      	bne.n	800ab32 <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800aaea:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800aaee:	d002      	beq.n	800aaf6 <I2C_TransferConfig+0x42>
 800aaf0:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800aaf4:	d129      	bne.n	800ab4a <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800aaf6:	4b1b      	ldr	r3, [pc, #108]	; (800ab64 <I2C_TransferConfig+0xb0>)
 800aaf8:	429f      	cmp	r7, r3
 800aafa:	d005      	beq.n	800ab08 <I2C_TransferConfig+0x54>
 800aafc:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800ab00:	4a19      	ldr	r2, [pc, #100]	; (800ab68 <I2C_TransferConfig+0xb4>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d000      	beq.n	800ab08 <I2C_TransferConfig+0x54>
 800ab06:	b9d7      	cbnz	r7, 800ab3e <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab08:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab0c:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab10:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800ab14:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab18:	4a14      	ldr	r2, [pc, #80]	; (800ab6c <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab1a:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab1c:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800ab20:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab26:	ea27 0702 	bic.w	r7, r7, r2
 800ab2a:	433b      	orrs	r3, r7
 800ab2c:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ab2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ab32:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800ab36:	480e      	ldr	r0, [pc, #56]	; (800ab70 <I2C_TransferConfig+0xbc>)
 800ab38:	f7f9 fa08 	bl	8003f4c <assert_failed>
 800ab3c:	e7d5      	b.n	800aaea <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800ab3e:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800ab42:	480b      	ldr	r0, [pc, #44]	; (800ab70 <I2C_TransferConfig+0xbc>)
 800ab44:	f7f9 fa02 	bl	8003f4c <assert_failed>
 800ab48:	e7de      	b.n	800ab08 <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800ab4a:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800ab4e:	4808      	ldr	r0, [pc, #32]	; (800ab70 <I2C_TransferConfig+0xbc>)
 800ab50:	f7f9 f9fc 	bl	8003f4c <assert_failed>
 800ab54:	e7cf      	b.n	800aaf6 <I2C_TransferConfig+0x42>
 800ab56:	bf00      	nop
 800ab58:	40005800 	.word	0x40005800
 800ab5c:	40005400 	.word	0x40005400
 800ab60:	40006000 	.word	0x40006000
 800ab64:	80004000 	.word	0x80004000
 800ab68:	80002000 	.word	0x80002000
 800ab6c:	03ff63ff 	.word	0x03ff63ff
 800ab70:	0802aff0 	.word	0x0802aff0

0800ab74 <I2C_IsErrorOccurred>:
{
 800ab74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800ab78:	6803      	ldr	r3, [r0, #0]
{
 800ab7a:	460d      	mov	r5, r1
 800ab7c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800ab7e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ab80:	f011 0110 	ands.w	r1, r1, #16
 800ab84:	d045      	beq.n	800ac12 <I2C_IsErrorOccurred+0x9e>
 800ab86:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800ab88:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab8c:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800ab8e:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab92:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ab94:	699a      	ldr	r2, [r3, #24]
 800ab96:	0696      	lsls	r6, r2, #26
 800ab98:	f100 808d 	bmi.w	800acb6 <I2C_IsErrorOccurred+0x142>
 800ab9c:	f1b9 0f00 	cmp.w	r9, #0
 800aba0:	f040 808d 	bne.w	800acbe <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800aba4:	1c6a      	adds	r2, r5, #1
 800aba6:	d152      	bne.n	800ac4e <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aba8:	699a      	ldr	r2, [r3, #24]
 800abaa:	0697      	lsls	r7, r2, #26
 800abac:	d5fc      	bpl.n	800aba8 <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abae:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800abb0:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800abb2:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abb6:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800abb8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800abba:	05d5      	lsls	r5, r2, #23
 800abbc:	d42d      	bmi.n	800ac1a <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800abbe:	0557      	lsls	r7, r2, #21
 800abc0:	d53d      	bpl.n	800ac3e <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800abc2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800abc6:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800abca:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800abcc:	0596      	lsls	r6, r2, #22
 800abce:	d504      	bpl.n	800abda <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800abd0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800abd4:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800abd8:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800abda:	699a      	ldr	r2, [r3, #24]
 800abdc:	0790      	lsls	r0, r2, #30
 800abde:	d501      	bpl.n	800abe4 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800abe0:	2200      	movs	r2, #0
 800abe2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abe4:	699a      	ldr	r2, [r3, #24]
 800abe6:	07d2      	lsls	r2, r2, #31
 800abe8:	d524      	bpl.n	800ac34 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800abea:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800abec:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800abee:	4835      	ldr	r0, [pc, #212]	; (800acc4 <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800abf0:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800abf4:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800abf6:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800abf8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800abfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800abfc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800ac00:	4319      	orrs	r1, r3
 800ac02:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ac04:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800ac0c:	4648      	mov	r0, r9
 800ac0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800ac12:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800ac14:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ac16:	05d5      	lsls	r5, r2, #23
 800ac18:	d5d1      	bpl.n	800abbe <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ac1a:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800ac1e:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ac22:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ac24:	0550      	lsls	r0, r2, #21
 800ac26:	d5d1      	bpl.n	800abcc <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ac28:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800ac2c:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ac30:	61d8      	str	r0, [r3, #28]
 800ac32:	e7cb      	b.n	800abcc <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ac34:	699a      	ldr	r2, [r3, #24]
 800ac36:	f042 0201 	orr.w	r2, r2, #1
 800ac3a:	619a      	str	r2, [r3, #24]
 800ac3c:	e7d5      	b.n	800abea <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ac3e:	0595      	lsls	r5, r2, #22
 800ac40:	d4c6      	bmi.n	800abd0 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800ac42:	f1b9 0f00 	cmp.w	r9, #0
 800ac46:	d1c8      	bne.n	800abda <I2C_IsErrorOccurred+0x66>
}
 800ac48:	4648      	mov	r0, r9
 800ac4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ac4e:	f7fc fd29 	bl	80076a4 <HAL_GetTick>
 800ac52:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ac54:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ac56:	42a8      	cmp	r0, r5
 800ac58:	d801      	bhi.n	800ac5e <I2C_IsErrorOccurred+0xea>
 800ac5a:	2d00      	cmp	r5, #0
 800ac5c:	d19a      	bne.n	800ab94 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ac5e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800ac60:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ac64:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800ac66:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ac68:	040e      	lsls	r6, r1, #16
 800ac6a:	d50d      	bpl.n	800ac88 <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800ac6c:	0441      	lsls	r1, r0, #17
 800ac6e:	d40b      	bmi.n	800ac88 <I2C_IsErrorOccurred+0x114>
 800ac70:	2a20      	cmp	r2, #32
 800ac72:	d009      	beq.n	800ac88 <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac7a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800ac7c:	f7fc fd12 	bl	80076a4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac80:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800ac82:	4607      	mov	r7, r0
 800ac84:	e000      	b.n	800ac88 <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	699e      	ldr	r6, [r3, #24]
 800ac8a:	f016 0620 	ands.w	r6, r6, #32
 800ac8e:	d181      	bne.n	800ab94 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ac90:	f7fc fd08 	bl	80076a4 <HAL_GetTick>
 800ac94:	1bc0      	subs	r0, r0, r7
 800ac96:	2819      	cmp	r0, #25
 800ac98:	d9f5      	bls.n	800ac86 <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800ac9c:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800aca0:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aca4:	f043 0320 	orr.w	r3, r3, #32
 800aca8:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800acaa:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800acae:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800acb0:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800acb4:	e7e8      	b.n	800ac88 <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800acb6:	f1b9 0f00 	cmp.w	r9, #0
 800acba:	f43f af78 	beq.w	800abae <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800acbe:	2104      	movs	r1, #4
 800acc0:	e7a8      	b.n	800ac14 <I2C_IsErrorOccurred+0xa0>
 800acc2:	bf00      	nop
 800acc4:	fe00e800 	.word	0xfe00e800

0800acc8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800acc8:	b570      	push	{r4, r5, r6, lr}
 800acca:	4604      	mov	r4, r0
 800accc:	460d      	mov	r5, r1
 800acce:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800acd0:	e004      	b.n	800acdc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800acd2:	f7ff ff4f 	bl	800ab74 <I2C_IsErrorOccurred>
 800acd6:	b950      	cbnz	r0, 800acee <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800acd8:	1c6a      	adds	r2, r5, #1
 800acda:	d10a      	bne.n	800acf2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800acdc:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800acde:	4632      	mov	r2, r6
 800ace0:	4629      	mov	r1, r5
 800ace2:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	079b      	lsls	r3, r3, #30
 800ace8:	d5f3      	bpl.n	800acd2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800acea:	2000      	movs	r0, #0
}
 800acec:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800acee:	2001      	movs	r0, #1
}
 800acf0:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acf2:	f7fc fcd7 	bl	80076a4 <HAL_GetTick>
 800acf6:	1b80      	subs	r0, r0, r6
 800acf8:	42a8      	cmp	r0, r5
 800acfa:	d801      	bhi.n	800ad00 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	d1ed      	bne.n	800acdc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad00:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad02:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad04:	2200      	movs	r2, #0
        return HAL_ERROR;
 800ad06:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad08:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800ad0a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad0e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad10:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800ad18:	bd70      	pop	{r4, r5, r6, pc}
 800ad1a:	bf00      	nop

0800ad1c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800ad1c:	b570      	push	{r4, r5, r6, lr}
 800ad1e:	4605      	mov	r5, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad24:	e008      	b.n	800ad38 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad26:	f7ff ff25 	bl	800ab74 <I2C_IsErrorOccurred>
 800ad2a:	b9d8      	cbnz	r0, 800ad64 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad2c:	f7fc fcba 	bl	80076a4 <HAL_GetTick>
 800ad30:	1b80      	subs	r0, r0, r6
 800ad32:	42a0      	cmp	r0, r4
 800ad34:	d809      	bhi.n	800ad4a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800ad36:	b144      	cbz	r4, 800ad4a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad38:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad3a:	4632      	mov	r2, r6
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	069b      	lsls	r3, r3, #26
 800ad44:	d5ef      	bpl.n	800ad26 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800ad46:	2000      	movs	r0, #0
}
 800ad48:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad4a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad4c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad4e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800ad50:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad52:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800ad54:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad58:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad5a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad5e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800ad62:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800ad64:	2001      	movs	r0, #1
}
 800ad66:	bd70      	pop	{r4, r5, r6, pc}

0800ad68 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	460d      	mov	r5, r1
 800ad6e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad70:	e00c      	b.n	800ad8c <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad72:	f7ff feff 	bl	800ab74 <I2C_IsErrorOccurred>
 800ad76:	b9e8      	cbnz	r0, 800adb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	699a      	ldr	r2, [r3, #24]
 800ad7c:	0691      	lsls	r1, r2, #26
 800ad7e:	d41b      	bmi.n	800adb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad80:	f7fc fc90 	bl	80076a4 <HAL_GetTick>
 800ad84:	1b80      	subs	r0, r0, r6
 800ad86:	42a8      	cmp	r0, r5
 800ad88:	d809      	bhi.n	800ad9e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800ad8a:	b145      	cbz	r5, 800ad9e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad8c:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad8e:	4632      	mov	r2, r6
 800ad90:	4629      	mov	r1, r5
 800ad92:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	075b      	lsls	r3, r3, #29
 800ad98:	d5eb      	bpl.n	800ad72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800ad9a:	2000      	movs	r0, #0
}
 800ad9c:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ada0:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800ada2:	2100      	movs	r1, #0
      return HAL_ERROR;
 800ada4:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ada6:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800ada8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800adac:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800adae:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800adb2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800adb4:	2001      	movs	r0, #1
}
 800adb6:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800adb8:	699a      	ldr	r2, [r3, #24]
 800adba:	0752      	lsls	r2, r2, #29
 800adbc:	d502      	bpl.n	800adc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800adbe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800adc0:	2a00      	cmp	r2, #0
 800adc2:	d1ea      	bne.n	800ad9a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800adc4:	699a      	ldr	r2, [r3, #24]
 800adc6:	f012 0210 	ands.w	r2, r2, #16
 800adca:	d012      	beq.n	800adf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adcc:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800adce:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800add0:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800add2:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800add4:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800add6:	4808      	ldr	r0, [pc, #32]	; (800adf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800add8:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800adda:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	4002      	ands	r2, r0
        return HAL_ERROR;
 800ade0:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800ade2:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800ade4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800ade8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800adec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800adf0:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adf2:	6462      	str	r2, [r4, #68]	; 0x44
 800adf4:	e7ee      	b.n	800add4 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800adf6:	bf00      	nop
 800adf8:	fe00e800 	.word	0xfe00e800

0800adfc <I2C_RequestMemoryRead>:
{
 800adfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae00:	4c26      	ldr	r4, [pc, #152]	; (800ae9c <I2C_RequestMemoryRead+0xa0>)
{
 800ae02:	b083      	sub	sp, #12
 800ae04:	4698      	mov	r8, r3
 800ae06:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae08:	9400      	str	r4, [sp, #0]
{
 800ae0a:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	fa5f f288 	uxtb.w	r2, r8
{
 800ae12:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae16:	f7ff fe4d 	bl	800aab4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	463a      	mov	r2, r7
 800ae1e:	4621      	mov	r1, r4
 800ae20:	f7ff ff52 	bl	800acc8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae24:	b9e0      	cbnz	r0, 800ae60 <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae26:	f1b8 0f01 	cmp.w	r8, #1
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	d10d      	bne.n	800ae4a <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae2e:	fa5f f389 	uxtb.w	r3, r9
 800ae32:	682a      	ldr	r2, [r5, #0]
 800ae34:	6293      	str	r3, [r2, #40]	; 0x28
 800ae36:	e001      	b.n	800ae3c <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800ae38:	1c61      	adds	r1, r4, #1
 800ae3a:	d116      	bne.n	800ae6a <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae3c:	6993      	ldr	r3, [r2, #24]
 800ae3e:	065b      	lsls	r3, r3, #25
 800ae40:	d5fa      	bpl.n	800ae38 <I2C_RequestMemoryRead+0x3c>
}
 800ae42:	4630      	mov	r0, r6
 800ae44:	b003      	add	sp, #12
 800ae46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ae4a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800ae4e:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae50:	4621      	mov	r1, r4
 800ae52:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ae54:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae56:	463a      	mov	r2, r7
 800ae58:	f7ff ff36 	bl	800acc8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d0e6      	beq.n	800ae2e <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800ae60:	2601      	movs	r6, #1
}
 800ae62:	4630      	mov	r0, r6
 800ae64:	b003      	add	sp, #12
 800ae66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae6a:	f7fc fc1b 	bl	80076a4 <HAL_GetTick>
 800ae6e:	1bc0      	subs	r0, r0, r7
 800ae70:	4284      	cmp	r4, r0
 800ae72:	d302      	bcc.n	800ae7a <I2C_RequestMemoryRead+0x7e>
 800ae74:	b10c      	cbz	r4, 800ae7a <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae76:	682a      	ldr	r2, [r5, #0]
 800ae78:	e7e0      	b.n	800ae3c <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae7a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae7c:	2120      	movs	r1, #32
    return HAL_ERROR;
 800ae7e:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae80:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae82:	430b      	orrs	r3, r1
}
 800ae84:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800ae86:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae8a:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae8c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae90:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800ae94:	b003      	add	sp, #12
 800ae96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae9a:	bf00      	nop
 800ae9c:	80002000 	.word	0x80002000

0800aea0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800aea0:	2800      	cmp	r0, #0
 800aea2:	f000 80c1 	beq.w	800b028 <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800aea6:	4b61      	ldr	r3, [pc, #388]	; (800b02c <HAL_I2C_Init+0x18c>)
 800aea8:	6802      	ldr	r2, [r0, #0]
 800aeaa:	4961      	ldr	r1, [pc, #388]	; (800b030 <HAL_I2C_Init+0x190>)
{
 800aeac:	b510      	push	{r4, lr}
 800aeae:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800aeb0:	4860      	ldr	r0, [pc, #384]	; (800b034 <HAL_I2C_Init+0x194>)
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	bf18      	it	ne
 800aeb6:	4282      	cmpne	r2, r0
 800aeb8:	bf14      	ite	ne
 800aeba:	2301      	movne	r3, #1
 800aebc:	2300      	moveq	r3, #0
 800aebe:	428a      	cmp	r2, r1
 800aec0:	bf0c      	ite	eq
 800aec2:	2300      	moveq	r3, #0
 800aec4:	f003 0301 	andne.w	r3, r3, #1
 800aec8:	b11b      	cbz	r3, 800aed2 <HAL_I2C_Init+0x32>
 800aeca:	4b5b      	ldr	r3, [pc, #364]	; (800b038 <HAL_I2C_Init+0x198>)
 800aecc:	429a      	cmp	r2, r3
 800aece:	f040 80a5 	bne.w	800b01c <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aed8:	f080 809a 	bcs.w	800b010 <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800aedc:	68e3      	ldr	r3, [r4, #12]
 800aede:	3b01      	subs	r3, #1
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d855      	bhi.n	800af90 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800aee4:	6923      	ldr	r3, [r4, #16]
 800aee6:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800aeea:	d15a      	bne.n	800afa2 <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800aeec:	6963      	ldr	r3, [r4, #20]
 800aeee:	2bff      	cmp	r3, #255	; 0xff
 800aef0:	d85f      	bhi.n	800afb2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800aef2:	69a3      	ldr	r3, [r4, #24]
 800aef4:	2b07      	cmp	r3, #7
 800aef6:	d864      	bhi.n	800afc2 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800aef8:	69e3      	ldr	r3, [r4, #28]
 800aefa:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800aefe:	d169      	bne.n	800afd4 <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800af00:	6a23      	ldr	r3, [r4, #32]
 800af02:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800af06:	d16e      	bne.n	800afe6 <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af08:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800af0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800af10:	2b00      	cmp	r3, #0
 800af12:	d073      	beq.n	800affc <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800af14:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800af16:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800af18:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800af1a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800af1e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800af20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800af24:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800af26:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800af2a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800af2c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800af2e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800af30:	689a      	ldr	r2, [r3, #8]
 800af32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af36:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800af38:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800af3a:	d065      	beq.n	800b008 <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800af3c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af40:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800af42:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af44:	d102      	bne.n	800af4c <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800af46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af4a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800af4c:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800af4e:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800af52:	493a      	ldr	r1, [pc, #232]	; (800b03c <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af54:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800af56:	4301      	orrs	r1, r0
 800af58:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800af5a:	68d9      	ldr	r1, [r3, #12]
 800af5c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800af60:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800af62:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af66:	4302      	orrs	r2, r0
 800af68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800af6c:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af70:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af72:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800af74:	4301      	orrs	r1, r0
  return HAL_OK;
 800af76:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800af78:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800af7a:	6819      	ldr	r1, [r3, #0]
 800af7c:	f041 0101 	orr.w	r1, r1, #1
 800af80:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af82:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800af84:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800af88:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af8a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800af8e:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800af90:	f240 2117 	movw	r1, #535	; 0x217
 800af94:	482a      	ldr	r0, [pc, #168]	; (800b040 <HAL_I2C_Init+0x1a0>)
 800af96:	f7f8 ffd9 	bl	8003f4c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800af9a:	6923      	ldr	r3, [r4, #16]
 800af9c:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800afa0:	d0a4      	beq.n	800aeec <HAL_I2C_Init+0x4c>
 800afa2:	f44f 7106 	mov.w	r1, #536	; 0x218
 800afa6:	4826      	ldr	r0, [pc, #152]	; (800b040 <HAL_I2C_Init+0x1a0>)
 800afa8:	f7f8 ffd0 	bl	8003f4c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800afac:	6963      	ldr	r3, [r4, #20]
 800afae:	2bff      	cmp	r3, #255	; 0xff
 800afb0:	d99f      	bls.n	800aef2 <HAL_I2C_Init+0x52>
 800afb2:	f240 2119 	movw	r1, #537	; 0x219
 800afb6:	4822      	ldr	r0, [pc, #136]	; (800b040 <HAL_I2C_Init+0x1a0>)
 800afb8:	f7f8 ffc8 	bl	8003f4c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800afbc:	69a3      	ldr	r3, [r4, #24]
 800afbe:	2b07      	cmp	r3, #7
 800afc0:	d99a      	bls.n	800aef8 <HAL_I2C_Init+0x58>
 800afc2:	f240 211a 	movw	r1, #538	; 0x21a
 800afc6:	481e      	ldr	r0, [pc, #120]	; (800b040 <HAL_I2C_Init+0x1a0>)
 800afc8:	f7f8 ffc0 	bl	8003f4c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800afcc:	69e3      	ldr	r3, [r4, #28]
 800afce:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800afd2:	d095      	beq.n	800af00 <HAL_I2C_Init+0x60>
 800afd4:	f240 211b 	movw	r1, #539	; 0x21b
 800afd8:	4819      	ldr	r0, [pc, #100]	; (800b040 <HAL_I2C_Init+0x1a0>)
 800afda:	f7f8 ffb7 	bl	8003f4c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800afde:	6a23      	ldr	r3, [r4, #32]
 800afe0:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800afe4:	d090      	beq.n	800af08 <HAL_I2C_Init+0x68>
 800afe6:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800afea:	4815      	ldr	r0, [pc, #84]	; (800b040 <HAL_I2C_Init+0x1a0>)
 800afec:	f7f8 ffae 	bl	8003f4c <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aff0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800aff4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d18b      	bne.n	800af14 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800affc:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800affe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800b002:	f7fa fa45 	bl	8005490 <HAL_I2C_MspInit>
 800b006:	e785      	b.n	800af14 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b00c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b00e:	e79d      	b.n	800af4c <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800b010:	f240 2116 	movw	r1, #534	; 0x216
 800b014:	480a      	ldr	r0, [pc, #40]	; (800b040 <HAL_I2C_Init+0x1a0>)
 800b016:	f7f8 ff99 	bl	8003f4c <assert_failed>
 800b01a:	e75f      	b.n	800aedc <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b01c:	f240 2115 	movw	r1, #533	; 0x215
 800b020:	4807      	ldr	r0, [pc, #28]	; (800b040 <HAL_I2C_Init+0x1a0>)
 800b022:	f7f8 ff93 	bl	8003f4c <assert_failed>
 800b026:	e754      	b.n	800aed2 <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800b028:	2001      	movs	r0, #1
}
 800b02a:	4770      	bx	lr
 800b02c:	40005400 	.word	0x40005400
 800b030:	40005c00 	.word	0x40005c00
 800b034:	40005800 	.word	0x40005800
 800b038:	40006000 	.word	0x40006000
 800b03c:	02008000 	.word	0x02008000
 800b040:	0802aff0 	.word	0x0802aff0

0800b044 <HAL_I2C_Master_Transmit>:
{
 800b044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b048:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b04a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b04e:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b050:	2b20      	cmp	r3, #32
{
 800b052:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b054:	d16d      	bne.n	800b132 <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800b056:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b05a:	4604      	mov	r4, r0
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d068      	beq.n	800b132 <HAL_I2C_Master_Transmit+0xee>
 800b060:	2301      	movs	r3, #1
 800b062:	460f      	mov	r7, r1
 800b064:	4691      	mov	r9, r2
 800b066:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b06a:	f7fc fb1b 	bl	80076a4 <HAL_GetTick>
 800b06e:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b070:	e004      	b.n	800b07c <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b072:	f7fc fb17 	bl	80076a4 <HAL_GetTick>
 800b076:	1b80      	subs	r0, r0, r6
 800b078:	2819      	cmp	r0, #25
 800b07a:	d85e      	bhi.n	800b13a <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	6999      	ldr	r1, [r3, #24]
 800b080:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800b084:	d1f5      	bne.n	800b072 <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b086:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800b088:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800b08c:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b08e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b092:	2310      	movs	r3, #16
 800b094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b098:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800b09a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b09e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	2bff      	cmp	r3, #255	; 0xff
 800b0a4:	d86d      	bhi.n	800b182 <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800b0a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	4b48      	ldr	r3, [pc, #288]	; (800b1cc <HAL_I2C_Master_Transmit+0x188>)
 800b0ac:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800b0ae:	b292      	uxth	r2, r2
 800b0b0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b0b2:	b2d2      	uxtb	r2, r2
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0ba:	f7ff fcfb 	bl	800aab4 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b0be:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b0c2:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800b0c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0c8:	4632      	mov	r2, r6
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	b1eb      	cbz	r3, 800b10e <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0d2:	f7ff fdf9 	bl	800acc8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d174      	bne.n	800b1c4 <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b0da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b0dc:	6821      	ldr	r1, [r4, #0]
 800b0de:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800b0e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b0e4:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800b0e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b0e8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800b0ea:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b0ec:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800b0ee:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800b0f0:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800b0f2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b0f4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b0f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b0f8:	b292      	uxth	r2, r2
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1e3      	bne.n	800b0c6 <HAL_I2C_Master_Transmit+0x82>
 800b0fe:	bb6a      	cbnz	r2, 800b15c <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800b100:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b102:	4632      	mov	r2, r6
 800b104:	4629      	mov	r1, r5
 800b106:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b108:	b29b      	uxth	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1e1      	bne.n	800b0d2 <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b10e:	f7ff fe05 	bl	800ad1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b112:	2800      	cmp	r0, #0
 800b114:	d156      	bne.n	800b1c4 <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800b11a:	4d2d      	ldr	r5, [pc, #180]	; (800b1d0 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b11c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	402a      	ands	r2, r5
 800b122:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b124:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b128:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b12c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800b130:	e000      	b.n	800b134 <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800b132:	2002      	movs	r0, #2
}
 800b134:	b003      	add	sp, #12
 800b136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b13a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b13c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b13e:	2200      	movs	r2, #0
          return HAL_ERROR;
 800b140:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b142:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800b144:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b148:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b14a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b14e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800b152:	b003      	add	sp, #12
 800b154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800b158:	1c6a      	adds	r2, r5, #1
 800b15a:	d11d      	bne.n	800b198 <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b15c:	698b      	ldr	r3, [r1, #24]
 800b15e:	061b      	lsls	r3, r3, #24
 800b160:	d5fa      	bpl.n	800b158 <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b162:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b164:	b29b      	uxth	r3, r3
 800b166:	2bff      	cmp	r3, #255	; 0xff
 800b168:	d91f      	bls.n	800b1aa <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b16a:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b16e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b172:	22ff      	movs	r2, #255	; 0xff
 800b174:	4639      	mov	r1, r7
 800b176:	4620      	mov	r0, r4
 800b178:	f8cd 8000 	str.w	r8, [sp]
 800b17c:	f7ff fc9a 	bl	800aab4 <I2C_TransferConfig>
 800b180:	e7a1      	b.n	800b0c6 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b182:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b184:	4b11      	ldr	r3, [pc, #68]	; (800b1cc <HAL_I2C_Master_Transmit+0x188>)
 800b186:	4639      	mov	r1, r7
 800b188:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b18a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b192:	f7ff fc8f 	bl	800aab4 <I2C_TransferConfig>
 800b196:	e792      	b.n	800b0be <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b198:	f7fc fa84 	bl	80076a4 <HAL_GetTick>
 800b19c:	1b80      	subs	r0, r0, r6
 800b19e:	4285      	cmp	r5, r0
 800b1a0:	d3cb      	bcc.n	800b13a <HAL_I2C_Master_Transmit+0xf6>
 800b1a2:	2d00      	cmp	r5, #0
 800b1a4:	d0c9      	beq.n	800b13a <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1a6:	6821      	ldr	r1, [r4, #0]
 800b1a8:	e7d8      	b.n	800b15c <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b1aa:	f8cd 8000 	str.w	r8, [sp]
 800b1ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800b1b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b1b4:	4639      	mov	r1, r7
 800b1b6:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800b1b8:	b292      	uxth	r2, r2
 800b1ba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	f7ff fc79 	bl	800aab4 <I2C_TransferConfig>
 800b1c2:	e780      	b.n	800b0c6 <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800b1c4:	2001      	movs	r0, #1
}
 800b1c6:	b003      	add	sp, #12
 800b1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1cc:	80002000 	.word	0x80002000
 800b1d0:	fe00e800 	.word	0xfe00e800

0800b1d4 <HAL_I2C_Master_Receive>:
{
 800b1d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1d8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b1de:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1e0:	2b20      	cmp	r3, #32
{
 800b1e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1e4:	f040 8088 	bne.w	800b2f8 <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800b1e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	f000 8082 	beq.w	800b2f8 <HAL_I2C_Master_Receive+0x124>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	460f      	mov	r7, r1
 800b1f8:	4691      	mov	r9, r2
 800b1fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b1fe:	f7fc fa51 	bl	80076a4 <HAL_GetTick>
 800b202:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b204:	e004      	b.n	800b210 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b206:	f7fc fa4d 	bl	80076a4 <HAL_GetTick>
 800b20a:	1b80      	subs	r0, r0, r6
 800b20c:	2819      	cmp	r0, #25
 800b20e:	d87e      	bhi.n	800b30e <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	6999      	ldr	r1, [r3, #24]
 800b214:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800b218:	d1f5      	bne.n	800b206 <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b21a:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800b21c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800b220:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b222:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b226:	2310      	movs	r3, #16
 800b228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b22c:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800b22e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b232:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b234:	b29b      	uxth	r3, r3
 800b236:	2bff      	cmp	r3, #255	; 0xff
 800b238:	d878      	bhi.n	800b32c <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800b23a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b23c:	4639      	mov	r1, r7
 800b23e:	4b49      	ldr	r3, [pc, #292]	; (800b364 <HAL_I2C_Master_Receive+0x190>)
 800b240:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800b242:	b292      	uxth	r2, r2
 800b244:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b246:	b2d2      	uxtb	r2, r2
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b24e:	f7ff fc31 	bl	800aab4 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b252:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b256:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800b25a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b25c:	4632      	mov	r2, r6
 800b25e:	4629      	mov	r1, r5
 800b260:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b262:	b29b      	uxth	r3, r3
 800b264:	2b00      	cmp	r3, #0
 800b266:	d035      	beq.n	800b2d4 <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b268:	f7ff fd7e 	bl	800ad68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d175      	bne.n	800b35c <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b270:	6822      	ldr	r2, [r4, #0]
 800b272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b276:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b278:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b27a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b27c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800b27e:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b280:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800b282:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800b284:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b286:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800b288:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b28a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800b28c:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b28e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800b290:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e1      	bne.n	800b25a <HAL_I2C_Master_Receive+0x86>
 800b296:	2a00      	cmp	r2, #0
 800b298:	d0df      	beq.n	800b25a <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b29a:	6822      	ldr	r2, [r4, #0]
 800b29c:	e001      	b.n	800b2a2 <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800b29e:	1c69      	adds	r1, r5, #1
 800b2a0:	d12e      	bne.n	800b300 <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b2a2:	6993      	ldr	r3, [r2, #24]
 800b2a4:	061b      	lsls	r3, r3, #24
 800b2a6:	d5fa      	bpl.n	800b29e <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	2bff      	cmp	r3, #255	; 0xff
 800b2ae:	d948      	bls.n	800b342 <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b2b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2b4:	22ff      	movs	r2, #255	; 0xff
 800b2b6:	4639      	mov	r1, r7
 800b2b8:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2ba:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b2be:	f8cd 8000 	str.w	r8, [sp]
 800b2c2:	f7ff fbf7 	bl	800aab4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b2c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800b2cc:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2ce:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1c9      	bne.n	800b268 <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2d4:	f7ff fd22 	bl	800ad1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d13f      	bne.n	800b35c <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800b2e0:	4d21      	ldr	r5, [pc, #132]	; (800b368 <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2e2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	402a      	ands	r2, r5
 800b2e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b2ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b2ee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b2f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800b2f6:	e000      	b.n	800b2fa <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800b2f8:	2002      	movs	r0, #2
}
 800b2fa:	b003      	add	sp, #12
 800b2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b300:	f7fc f9d0 	bl	80076a4 <HAL_GetTick>
 800b304:	1b80      	subs	r0, r0, r6
 800b306:	4285      	cmp	r5, r0
 800b308:	d301      	bcc.n	800b30e <HAL_I2C_Master_Receive+0x13a>
 800b30a:	2d00      	cmp	r5, #0
 800b30c:	d1c5      	bne.n	800b29a <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b30e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b310:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b312:	2200      	movs	r2, #0
          return HAL_ERROR;
 800b314:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b316:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800b318:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b31c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b31e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b322:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800b326:	b003      	add	sp, #12
 800b328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b32c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b32e:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <HAL_I2C_Master_Receive+0x190>)
 800b330:	4639      	mov	r1, r7
 800b332:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b334:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b33c:	f7ff fbba 	bl	800aab4 <I2C_TransferConfig>
 800b340:	e787      	b.n	800b252 <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b342:	f8cd 8000 	str.w	r8, [sp]
 800b346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800b34a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b34c:	4639      	mov	r1, r7
 800b34e:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800b350:	b292      	uxth	r2, r2
 800b352:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b354:	b2d2      	uxtb	r2, r2
 800b356:	f7ff fbad 	bl	800aab4 <I2C_TransferConfig>
 800b35a:	e77e      	b.n	800b25a <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800b35c:	2001      	movs	r0, #1
}
 800b35e:	b003      	add	sp, #12
 800b360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b364:	80002400 	.word	0x80002400
 800b368:	fe00e800 	.word	0xfe00e800

0800b36c <HAL_I2C_Mem_Read>:
{
 800b36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b370:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800b372:	3b01      	subs	r3, #1
{
 800b374:	b083      	sub	sp, #12
 800b376:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800b378:	2b01      	cmp	r3, #1
{
 800b37a:	4688      	mov	r8, r1
 800b37c:	4691      	mov	r9, r2
 800b37e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b382:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800b384:	d904      	bls.n	800b390 <HAL_I2C_Mem_Read+0x24>
 800b386:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800b38a:	486e      	ldr	r0, [pc, #440]	; (800b544 <HAL_I2C_Mem_Read+0x1d8>)
 800b38c:	f7f8 fdde 	bl	8003f4c <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b390:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800b394:	2b20      	cmp	r3, #32
 800b396:	d17f      	bne.n	800b498 <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800b398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d075      	beq.n	800b48a <HAL_I2C_Mem_Read+0x11e>
 800b39e:	f1ba 0f00 	cmp.w	sl, #0
 800b3a2:	d072      	beq.n	800b48a <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800b3a4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d075      	beq.n	800b498 <HAL_I2C_Mem_Read+0x12c>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b3b2:	f7fc f977 	bl	80076a4 <HAL_GetTick>
 800b3b6:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3b8:	e004      	b.n	800b3c4 <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3ba:	f7fc f973 	bl	80076a4 <HAL_GetTick>
 800b3be:	1b80      	subs	r0, r0, r6
 800b3c0:	2819      	cmp	r0, #25
 800b3c2:	d874      	bhi.n	800b4ae <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800b3cc:	d1f5      	bne.n	800b3ba <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800b3ce:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b3d0:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800b3d2:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b3d6:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800b3d8:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b3da:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b3dc:	4628      	mov	r0, r5
 800b3de:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b3e2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b3e6:	2140      	movs	r1, #64	; 0x40
 800b3e8:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b3ec:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3ee:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800b3f2:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b3f6:	f7ff fd01 	bl	800adfc <I2C_RequestMemoryRead>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	f040 8083 	bne.w	800b506 <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b400:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800b402:	b29b      	uxth	r3, r3
 800b404:	2bff      	cmp	r3, #255	; 0xff
 800b406:	f240 808e 	bls.w	800b526 <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b40a:	4b4f      	ldr	r3, [pc, #316]	; (800b548 <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b40c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b40e:	4641      	mov	r1, r8
 800b410:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b412:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b41a:	f7ff fb4b 	bl	800aab4 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b41e:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b420:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b424:	682a      	ldr	r2, [r5, #0]
 800b426:	e001      	b.n	800b42c <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800b428:	1c63      	adds	r3, r4, #1
 800b42a:	d139      	bne.n	800b4a0 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b42c:	6993      	ldr	r3, [r2, #24]
 800b42e:	0758      	lsls	r0, r3, #29
 800b430:	d5fa      	bpl.n	800b428 <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b432:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b434:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b436:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b438:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800b43a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800b43c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800b43e:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800b440:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800b442:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800b444:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b446:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800b448:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b44a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800b44c:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b44e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800b450:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b452:	b90b      	cbnz	r3, 800b458 <HAL_I2C_Mem_Read+0xec>
 800b454:	2a00      	cmp	r2, #0
 800b456:	d140      	bne.n	800b4da <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800b458:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1e1      	bne.n	800b424 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b460:	4632      	mov	r2, r6
 800b462:	4621      	mov	r1, r4
 800b464:	4628      	mov	r0, r5
 800b466:	f7ff fc59 	bl	800ad1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d168      	bne.n	800b540 <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b46e:	682b      	ldr	r3, [r5, #0]
 800b470:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800b472:	4c36      	ldr	r4, [pc, #216]	; (800b54c <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b474:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	4022      	ands	r2, r4
 800b47a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b47c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b480:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b484:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800b488:	e003      	b.n	800b492 <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b48a:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800b48e:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b490:	646b      	str	r3, [r5, #68]	; 0x44
}
 800b492:	b003      	add	sp, #12
 800b494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800b498:	2002      	movs	r0, #2
}
 800b49a:	b003      	add	sp, #12
 800b49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4a0:	f7fc f900 	bl	80076a4 <HAL_GetTick>
 800b4a4:	1b80      	subs	r0, r0, r6
 800b4a6:	4284      	cmp	r4, r0
 800b4a8:	d301      	bcc.n	800b4ae <HAL_I2C_Mem_Read+0x142>
 800b4aa:	2c00      	cmp	r4, #0
 800b4ac:	d1ba      	bne.n	800b424 <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4ae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b4b0:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4b2:	2200      	movs	r2, #0
          return HAL_ERROR;
 800b4b4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4b6:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800b4b8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4bc:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b4be:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4c2:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800b4c6:	b003      	add	sp, #12
 800b4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4cc:	f7fc f8ea 	bl	80076a4 <HAL_GetTick>
 800b4d0:	1b80      	subs	r0, r0, r6
 800b4d2:	4284      	cmp	r4, r0
 800b4d4:	d3eb      	bcc.n	800b4ae <HAL_I2C_Mem_Read+0x142>
 800b4d6:	2c00      	cmp	r4, #0
 800b4d8:	d0e9      	beq.n	800b4ae <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b4da:	682a      	ldr	r2, [r5, #0]
 800b4dc:	e001      	b.n	800b4e2 <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800b4de:	1c61      	adds	r1, r4, #1
 800b4e0:	d1f4      	bne.n	800b4cc <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b4e2:	6993      	ldr	r3, [r2, #24]
 800b4e4:	061b      	lsls	r3, r3, #24
 800b4e6:	d5fa      	bpl.n	800b4de <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4e8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	2bff      	cmp	r3, #255	; 0xff
 800b4ee:	d90e      	bls.n	800b50e <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4f0:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b4f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4f8:	22ff      	movs	r2, #255	; 0xff
 800b4fa:	4641      	mov	r1, r8
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	9700      	str	r7, [sp, #0]
 800b500:	f7ff fad8 	bl	800aab4 <I2C_TransferConfig>
 800b504:	e7a8      	b.n	800b458 <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800b506:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800b508:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800b50c:	e7c1      	b.n	800b492 <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b50e:	9700      	str	r7, [sp, #0]
 800b510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800b514:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b516:	4641      	mov	r1, r8
 800b518:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800b51a:	b292      	uxth	r2, r2
 800b51c:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b51e:	b2d2      	uxtb	r2, r2
 800b520:	f7ff fac8 	bl	800aab4 <I2C_TransferConfig>
 800b524:	e798      	b.n	800b458 <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800b526:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b528:	4641      	mov	r1, r8
 800b52a:	4b07      	ldr	r3, [pc, #28]	; (800b548 <HAL_I2C_Mem_Read+0x1dc>)
 800b52c:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800b52e:	b292      	uxth	r2, r2
 800b530:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b53a:	f7ff fabb 	bl	800aab4 <I2C_TransferConfig>
 800b53e:	e76e      	b.n	800b41e <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800b540:	2001      	movs	r0, #1
 800b542:	e7a6      	b.n	800b492 <HAL_I2C_Mem_Read+0x126>
 800b544:	0802aff0 	.word	0x0802aff0
 800b548:	80002400 	.word	0x80002400
 800b54c:	fe00e800 	.word	0xfe00e800

0800b550 <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b550:	4b23      	ldr	r3, [pc, #140]	; (800b5e0 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800b552:	6802      	ldr	r2, [r0, #0]
{
 800b554:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b556:	4d23      	ldr	r5, [pc, #140]	; (800b5e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800b558:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b55a:	4e23      	ldr	r6, [pc, #140]	; (800b5e8 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800b55c:	429a      	cmp	r2, r3
 800b55e:	bf18      	it	ne
 800b560:	42aa      	cmpne	r2, r5
{
 800b562:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b564:	bf14      	ite	ne
 800b566:	2301      	movne	r3, #1
 800b568:	2300      	moveq	r3, #0
 800b56a:	42b2      	cmp	r2, r6
 800b56c:	bf0c      	ite	eq
 800b56e:	2300      	moveq	r3, #0
 800b570:	f003 0301 	andne.w	r3, r3, #1
 800b574:	b113      	cbz	r3, 800b57c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800b576:	4b1d      	ldr	r3, [pc, #116]	; (800b5ec <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800b578:	429a      	cmp	r2, r3
 800b57a:	d12c      	bne.n	800b5d6 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800b57c:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800b580:	d124      	bne.n	800b5cc <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b582:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b586:	2b20      	cmp	r3, #32
 800b588:	b2de      	uxtb	r6, r3
 800b58a:	d11d      	bne.n	800b5c8 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b58c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b590:	2b01      	cmp	r3, #1
 800b592:	d019      	beq.n	800b5c8 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b594:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b596:	2224      	movs	r2, #36	; 0x24
 800b598:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	f022 0201 	bic.w	r2, r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b5aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b5ac:	6819      	ldr	r1, [r3, #0]
 800b5ae:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5b0:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800b5b2:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800b5b4:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	f042 0201 	orr.w	r2, r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b5be:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b5c2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800b5c8:	2002      	movs	r0, #2
}
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800b5cc:	215f      	movs	r1, #95	; 0x5f
 800b5ce:	4808      	ldr	r0, [pc, #32]	; (800b5f0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800b5d0:	f7f8 fcbc 	bl	8003f4c <assert_failed>
 800b5d4:	e7d5      	b.n	800b582 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b5d6:	215e      	movs	r1, #94	; 0x5e
 800b5d8:	4805      	ldr	r0, [pc, #20]	; (800b5f0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800b5da:	f7f8 fcb7 	bl	8003f4c <assert_failed>
 800b5de:	e7cd      	b.n	800b57c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800b5e0:	40005400 	.word	0x40005400
 800b5e4:	40005800 	.word	0x40005800
 800b5e8:	40005c00 	.word	0x40005c00
 800b5ec:	40006000 	.word	0x40006000
 800b5f0:	0802b028 	.word	0x0802b028

0800b5f4 <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b5f4:	4b22      	ldr	r3, [pc, #136]	; (800b680 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800b5f6:	6802      	ldr	r2, [r0, #0]
{
 800b5f8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b5fa:	4d22      	ldr	r5, [pc, #136]	; (800b684 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800b5fc:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b5fe:	4e22      	ldr	r6, [pc, #136]	; (800b688 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800b600:	429a      	cmp	r2, r3
 800b602:	bf18      	it	ne
 800b604:	42aa      	cmpne	r2, r5
{
 800b606:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b608:	bf14      	ite	ne
 800b60a:	2301      	movne	r3, #1
 800b60c:	2300      	moveq	r3, #0
 800b60e:	42b2      	cmp	r2, r6
 800b610:	bf0c      	ite	eq
 800b612:	2300      	moveq	r3, #0
 800b614:	f003 0301 	andne.w	r3, r3, #1
 800b618:	b113      	cbz	r3, 800b620 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800b61a:	4b1c      	ldr	r3, [pc, #112]	; (800b68c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d12a      	bne.n	800b676 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800b620:	2d0f      	cmp	r5, #15
 800b622:	d823      	bhi.n	800b66c <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b624:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b628:	2b20      	cmp	r3, #32
 800b62a:	b2de      	uxtb	r6, r3
 800b62c:	d11c      	bne.n	800b668 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b62e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b632:	2b01      	cmp	r3, #1
 800b634:	d018      	beq.n	800b668 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b636:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b638:	2224      	movs	r2, #36	; 0x24
 800b63a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	f022 0201 	bic.w	r2, r2, #1
 800b644:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b646:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b648:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b64c:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b650:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800b652:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800b654:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	f042 0201 	orr.w	r2, r2, #1
 800b65c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b65e:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b662:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b666:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800b668:	2002      	movs	r0, #2
}
 800b66a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800b66c:	218d      	movs	r1, #141	; 0x8d
 800b66e:	4808      	ldr	r0, [pc, #32]	; (800b690 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800b670:	f7f8 fc6c 	bl	8003f4c <assert_failed>
 800b674:	e7d6      	b.n	800b624 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b676:	218c      	movs	r1, #140	; 0x8c
 800b678:	4805      	ldr	r0, [pc, #20]	; (800b690 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800b67a:	f7f8 fc67 	bl	8003f4c <assert_failed>
 800b67e:	e7cf      	b.n	800b620 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800b680:	40005400 	.word	0x40005400
 800b684:	40005800 	.word	0x40005800
 800b688:	40005c00 	.word	0x40005c00
 800b68c:	40006000 	.word	0x40006000
 800b690:	0802b028 	.word	0x0802b028

0800b694 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800b694:	2800      	cmp	r0, #0
 800b696:	d04c      	beq.n	800b732 <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800b698:	6802      	ldr	r2, [r0, #0]
{
 800b69a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800b69c:	4b26      	ldr	r3, [pc, #152]	; (800b738 <HAL_IWDG_Init+0xa4>)
 800b69e:	4604      	mov	r4, r0
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d003      	beq.n	800b6ac <HAL_IWDG_Init+0x18>
 800b6a4:	21b5      	movs	r1, #181	; 0xb5
 800b6a6:	4825      	ldr	r0, [pc, #148]	; (800b73c <HAL_IWDG_Init+0xa8>)
 800b6a8:	f7f8 fc50 	bl	8003f4c <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800b6ac:	6863      	ldr	r3, [r4, #4]
 800b6ae:	2b06      	cmp	r3, #6
 800b6b0:	d835      	bhi.n	800b71e <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800b6b2:	68a3      	ldr	r3, [r4, #8]
 800b6b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b8:	d22c      	bcs.n	800b714 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800b6ba:	68e3      	ldr	r3, [r4, #12]
 800b6bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6c0:	d223      	bcs.n	800b70a <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800b6c2:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b6c6:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b6c8:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800b6cc:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b6ce:	f245 5055 	movw	r0, #21845	; 0x5555
 800b6d2:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b6d4:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b6d6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b6d8:	f7fb ffe4 	bl	80076a4 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b6dc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b6de:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b6e0:	68da      	ldr	r2, [r3, #12]
 800b6e2:	0751      	lsls	r1, r2, #29
 800b6e4:	d00a      	beq.n	800b6fc <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b6e6:	f7fb ffdd 	bl	80076a4 <HAL_GetTick>
 800b6ea:	1b43      	subs	r3, r0, r5
 800b6ec:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b6ee:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b6f0:	d9f6      	bls.n	800b6e0 <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	0752      	lsls	r2, r2, #29
 800b6f6:	d0f3      	beq.n	800b6e0 <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800b6f8:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800b6fa:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800b6fc:	6919      	ldr	r1, [r3, #16]
 800b6fe:	68e2      	ldr	r2, [r4, #12]
 800b700:	4291      	cmp	r1, r2
 800b702:	d011      	beq.n	800b728 <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800b704:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800b706:	611a      	str	r2, [r3, #16]
}
 800b708:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800b70a:	21b8      	movs	r1, #184	; 0xb8
 800b70c:	480b      	ldr	r0, [pc, #44]	; (800b73c <HAL_IWDG_Init+0xa8>)
 800b70e:	f7f8 fc1d 	bl	8003f4c <assert_failed>
 800b712:	e7d6      	b.n	800b6c2 <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800b714:	21b7      	movs	r1, #183	; 0xb7
 800b716:	4809      	ldr	r0, [pc, #36]	; (800b73c <HAL_IWDG_Init+0xa8>)
 800b718:	f7f8 fc18 	bl	8003f4c <assert_failed>
 800b71c:	e7cd      	b.n	800b6ba <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800b71e:	21b6      	movs	r1, #182	; 0xb6
 800b720:	4806      	ldr	r0, [pc, #24]	; (800b73c <HAL_IWDG_Init+0xa8>)
 800b722:	f7f8 fc13 	bl	8003f4c <assert_failed>
 800b726:	e7c4      	b.n	800b6b2 <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b728:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800b72c:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b72e:	601a      	str	r2, [r3, #0]
}
 800b730:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b732:	2001      	movs	r0, #1
}
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	40003000 	.word	0x40003000
 800b73c:	0802b064 	.word	0x0802b064

0800b740 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b740:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b742:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800b746:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	601a      	str	r2, [r3, #0]
}
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop

0800b750 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b752:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b754:	2800      	cmp	r0, #0
 800b756:	f000 809d 	beq.w	800b894 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800b75a:	6804      	ldr	r4, [r0, #0]
 800b75c:	4605      	mov	r5, r0
 800b75e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800b762:	d003      	beq.n	800b76c <HAL_PCD_Init+0x1c>
 800b764:	4b4f      	ldr	r3, [pc, #316]	; (800b8a4 <HAL_PCD_Init+0x154>)
 800b766:	429c      	cmp	r4, r3
 800b768:	f040 8081 	bne.w	800b86e <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b76c:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800b770:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b774:	2b00      	cmp	r3, #0
 800b776:	f000 8086 	beq.w	800b886 <HAL_PCD_Init+0x136>
 800b77a:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b77c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b77e:	462e      	mov	r6, r5
 800b780:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800b782:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b786:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b788:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b78a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800b78e:	bf08      	it	eq
 800b790:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800b792:	f006 fe87 	bl	80124a4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b796:	f856 eb10 	ldr.w	lr, [r6], #16
 800b79a:	46b4      	mov	ip, r6
 800b79c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b7a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b7a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7a8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b7ac:	e884 0003 	stmia.w	r4, {r0, r1}
 800b7b0:	4670      	mov	r0, lr
 800b7b2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b7b6:	f006 fdb5 	bl	8012324 <USB_CoreInit>
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	b130      	cbz	r0, 800b7cc <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800b7be:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b7c0:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800b7c2:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b7c4:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800b7c8:	b00b      	add	sp, #44	; 0x2c
 800b7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b7cc:	4601      	mov	r1, r0
 800b7ce:	6828      	ldr	r0, [r5, #0]
 800b7d0:	f006 fe70 	bl	80124b4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b7d4:	6868      	ldr	r0, [r5, #4]
 800b7d6:	b358      	cbz	r0, 800b830 <HAL_PCD_Init+0xe0>
 800b7d8:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800b7da:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b7de:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800b7e0:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b7e4:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800b7e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800b7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b7f0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b7f4:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800b7f8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b7fc:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b7fe:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800b802:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b804:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b808:	d3ea      	bcc.n	800b7e0 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800b80a:	2200      	movs	r2, #0
 800b80c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b810:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800b812:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800b816:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b81a:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800b81c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b820:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b822:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b826:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b82a:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b82e:	d3ed      	bcc.n	800b80c <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b830:	466c      	mov	r4, sp
 800b832:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b836:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b83a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b83e:	e884 0003 	stmia.w	r4, {r0, r1}
 800b842:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b846:	6828      	ldr	r0, [r5, #0]
 800b848:	f006 feb8 	bl	80125bc <USB_DevInit>
 800b84c:	4604      	mov	r4, r0
 800b84e:	2800      	cmp	r0, #0
 800b850:	d1b5      	bne.n	800b7be <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800b852:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800b854:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800b856:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800b85a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800b85c:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800b860:	d01c      	beq.n	800b89c <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800b862:	6828      	ldr	r0, [r5, #0]
 800b864:	f007 fa72 	bl	8012d4c <USB_DevDisconnect>
}
 800b868:	4620      	mov	r0, r4
 800b86a:	b00b      	add	sp, #44	; 0x2c
 800b86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800b86e:	2187      	movs	r1, #135	; 0x87
 800b870:	480d      	ldr	r0, [pc, #52]	; (800b8a8 <HAL_PCD_Init+0x158>)
 800b872:	f7f8 fb6b 	bl	8003f4c <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b876:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800b87a:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b87c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b880:	2b00      	cmp	r3, #0
 800b882:	f47f af7a 	bne.w	800b77a <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800b886:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800b888:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800b88c:	f017 fadc 	bl	8022e48 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800b890:	6828      	ldr	r0, [r5, #0]
 800b892:	e773      	b.n	800b77c <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800b894:	2401      	movs	r4, #1
}
 800b896:	4620      	mov	r0, r4
 800b898:	b00b      	add	sp, #44	; 0x2c
 800b89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b89c:	4628      	mov	r0, r5
 800b89e:	f000 fcc7 	bl	800c230 <HAL_PCDEx_ActivateLPM>
 800b8a2:	e7de      	b.n	800b862 <HAL_PCD_Init+0x112>
 800b8a4:	40040000 	.word	0x40040000
 800b8a8:	0802b0a0 	.word	0x0802b0a0

0800b8ac <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800b8ac:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d00f      	beq.n	800b8d4 <HAL_PCD_Start+0x28>
 800b8b4:	2301      	movs	r3, #1
{
 800b8b6:	b510      	push	{r4, lr}
 800b8b8:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800b8ba:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800b8bc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800b8c0:	f006 fde8 	bl	8012494 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b8c4:	6820      	ldr	r0, [r4, #0]
 800b8c6:	f007 fa31 	bl	8012d2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b8ca:	2300      	movs	r3, #0

  return HAL_OK;
 800b8cc:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800b8ce:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800b8d2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800b8d4:	2002      	movs	r0, #2
}
 800b8d6:	4770      	bx	lr

0800b8d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b8dc:	6807      	ldr	r7, [r0, #0]
{
 800b8de:	b089      	sub	sp, #36	; 0x24
 800b8e0:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	f007 fa70 	bl	8012dc8 <USB_GetMode>
 800b8e8:	b110      	cbz	r0, 800b8f0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800b8ea:	b009      	add	sp, #36	; 0x24
 800b8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b8f0:	4683      	mov	fp, r0
 800b8f2:	6820      	ldr	r0, [r4, #0]
 800b8f4:	f007 fa3a 	bl	8012d6c <USB_ReadInterrupts>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d0f6      	beq.n	800b8ea <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b8fc:	6820      	ldr	r0, [r4, #0]
 800b8fe:	f007 fa35 	bl	8012d6c <USB_ReadInterrupts>
 800b902:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b906:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b908:	d003      	beq.n	800b912 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b90a:	6943      	ldr	r3, [r0, #20]
 800b90c:	f003 0302 	and.w	r3, r3, #2
 800b910:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b912:	f007 fa2b 	bl	8012d6c <USB_ReadInterrupts>
 800b916:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b91a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b91c:	d012      	beq.n	800b944 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b91e:	6983      	ldr	r3, [r0, #24]
 800b920:	f023 0310 	bic.w	r3, r3, #16
 800b924:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800b926:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b928:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800b92c:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b930:	2b02      	cmp	r3, #2
 800b932:	f000 8253 	beq.w	800bddc <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b936:	2b06      	cmp	r3, #6
 800b938:	f000 81b1 	beq.w	800bc9e <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b93c:	6983      	ldr	r3, [r0, #24]
 800b93e:	f043 0310 	orr.w	r3, r3, #16
 800b942:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b944:	f007 fa12 	bl	8012d6c <USB_ReadInterrupts>
 800b948:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b94c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b94e:	f040 80cf 	bne.w	800baf0 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b952:	f007 fa0b 	bl	8012d6c <USB_ReadInterrupts>
 800b956:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b95a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b95c:	d175      	bne.n	800ba4a <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b95e:	f007 fa05 	bl	8012d6c <USB_ReadInterrupts>
 800b962:	2800      	cmp	r0, #0
 800b964:	db5d      	blt.n	800ba22 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b966:	6820      	ldr	r0, [r4, #0]
 800b968:	f007 fa00 	bl	8012d6c <USB_ReadInterrupts>
 800b96c:	0500      	lsls	r0, r0, #20
 800b96e:	d44d      	bmi.n	800ba0c <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b970:	6820      	ldr	r0, [r4, #0]
 800b972:	f007 f9fb 	bl	8012d6c <USB_ReadInterrupts>
 800b976:	0102      	lsls	r2, r0, #4
 800b978:	d514      	bpl.n	800b9a4 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b97a:	6822      	ldr	r2, [r4, #0]
 800b97c:	6953      	ldr	r3, [r2, #20]
 800b97e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b982:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800b984:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f040 8172 	bne.w	800bc72 <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800b98e:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b990:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800b992:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b996:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b998:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800b99c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b9a0:	f017 fbc0 	bl	8023124 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b9a4:	6820      	ldr	r0, [r4, #0]
 800b9a6:	f007 f9e1 	bl	8012d6c <USB_ReadInterrupts>
 800b9aa:	04c3      	lsls	r3, r0, #19
 800b9ac:	f100 8116 	bmi.w	800bbdc <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b9b0:	6820      	ldr	r0, [r4, #0]
 800b9b2:	f007 f9db 	bl	8012d6c <USB_ReadInterrupts>
 800b9b6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800b9ba:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b9bc:	f040 80f7 	bne.w	800bbae <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b9c0:	f007 f9d4 	bl	8012d6c <USB_ReadInterrupts>
 800b9c4:	0707      	lsls	r7, r0, #28
 800b9c6:	f100 80e9 	bmi.w	800bb9c <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b9ca:	6820      	ldr	r0, [r4, #0]
 800b9cc:	f007 f9ce 	bl	8012d6c <USB_ReadInterrupts>
 800b9d0:	02c6      	lsls	r6, r0, #11
 800b9d2:	f100 80d9 	bmi.w	800bb88 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b9d6:	6820      	ldr	r0, [r4, #0]
 800b9d8:	f007 f9c8 	bl	8012d6c <USB_ReadInterrupts>
 800b9dc:	0285      	lsls	r5, r0, #10
 800b9de:	f100 80c9 	bmi.w	800bb74 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b9e2:	6820      	ldr	r0, [r4, #0]
 800b9e4:	f007 f9c2 	bl	8012d6c <USB_ReadInterrupts>
 800b9e8:	0040      	lsls	r0, r0, #1
 800b9ea:	f100 80ba 	bmi.w	800bb62 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b9ee:	6820      	ldr	r0, [r4, #0]
 800b9f0:	f007 f9bc 	bl	8012d6c <USB_ReadInterrupts>
 800b9f4:	0741      	lsls	r1, r0, #29
 800b9f6:	f57f af78 	bpl.w	800b8ea <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b9fe:	076a      	lsls	r2, r5, #29
 800ba00:	f100 820d 	bmi.w	800be1e <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	432a      	orrs	r2, r5
 800ba08:	605a      	str	r2, [r3, #4]
 800ba0a:	e76e      	b.n	800b8ea <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ba0c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800ba10:	07d9      	lsls	r1, r3, #31
 800ba12:	f100 8200 	bmi.w	800be16 <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba16:	6820      	ldr	r0, [r4, #0]
 800ba18:	6943      	ldr	r3, [r0, #20]
 800ba1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba1e:	6143      	str	r3, [r0, #20]
 800ba20:	e7a7      	b.n	800b972 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ba22:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800ba26:	f022 0201 	bic.w	r2, r2, #1
 800ba2a:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800ba2e:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	f000 812c 	beq.w	800bc90 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f017 faa1 	bl	8022f80 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ba3e:	6820      	ldr	r0, [r4, #0]
 800ba40:	6943      	ldr	r3, [r0, #20]
 800ba42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba46:	6143      	str	r3, [r0, #20]
 800ba48:	e78e      	b.n	800b968 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ba4a:	f007 f99b 	bl	8012d84 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800ba4e:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ba50:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800ba52:	f1b8 0f00 	cmp.w	r8, #0
 800ba56:	d082      	beq.n	800b95e <HAL_PCD_IRQHandler+0x86>
 800ba58:	4626      	mov	r6, r4
 800ba5a:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800ba5e:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800ba62:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800ba66:	e009      	b.n	800ba7c <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800ba68:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800ba6c:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800ba70:	f106 061c 	add.w	r6, r6, #28
 800ba74:	f109 0920 	add.w	r9, r9, #32
 800ba78:	f000 8126 	beq.w	800bcc8 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ba7c:	f018 0f01 	tst.w	r8, #1
 800ba80:	d0f2      	beq.n	800ba68 <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ba82:	fa5f f78a 	uxtb.w	r7, sl
 800ba86:	4639      	mov	r1, r7
 800ba88:	f007 f98e 	bl	8012da8 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ba8c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ba8e:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ba90:	d515      	bpl.n	800babe <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ba92:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ba94:	f00a 030f 	and.w	r3, sl, #15
 800ba98:	2201      	movs	r2, #1
 800ba9a:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ba9c:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800baa0:	ea23 0302 	bic.w	r3, r3, r2
 800baa4:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800baa8:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800baaa:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800baac:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800bab0:	4299      	cmp	r1, r3
 800bab2:	f000 81b9 	beq.w	800be28 <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800bab6:	4639      	mov	r1, r7
 800bab8:	4620      	mov	r0, r4
 800baba:	f017 fa25 	bl	8022f08 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800babe:	0728      	lsls	r0, r5, #28
 800bac0:	d502      	bpl.n	800bac8 <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800bac2:	2308      	movs	r3, #8
 800bac4:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bac8:	06e9      	lsls	r1, r5, #27
 800baca:	d502      	bpl.n	800bad2 <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800bacc:	2310      	movs	r3, #16
 800bace:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800bad2:	066a      	lsls	r2, r5, #25
 800bad4:	d502      	bpl.n	800badc <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bad6:	2340      	movs	r3, #64	; 0x40
 800bad8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800badc:	07ab      	lsls	r3, r5, #30
 800bade:	d502      	bpl.n	800bae6 <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bae0:	2302      	movs	r3, #2
 800bae2:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bae6:	062d      	lsls	r5, r5, #24
 800bae8:	f100 80f1 	bmi.w	800bcce <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800baec:	6820      	ldr	r0, [r4, #0]
 800baee:	e7bb      	b.n	800ba68 <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800baf0:	f007 f940 	bl	8012d74 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800baf4:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800baf6:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800baf8:	2d00      	cmp	r5, #0
 800bafa:	f43f af2a 	beq.w	800b952 <HAL_PCD_IRQHandler+0x7a>
 800bafe:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800bb02:	46a2      	mov	sl, r4
      epnum = 0U;
 800bb04:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bb08:	9703      	str	r7, [sp, #12]
 800bb0a:	e008      	b.n	800bb1e <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800bb0c:	086d      	lsrs	r5, r5, #1
        epnum++;
 800bb0e:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800bb12:	f106 0620 	add.w	r6, r6, #32
 800bb16:	f10a 0a1c 	add.w	sl, sl, #28
 800bb1a:	f000 80d3 	beq.w	800bcc4 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800bb1e:	07ef      	lsls	r7, r5, #31
 800bb20:	d5f4      	bpl.n	800bb0c <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bb22:	fa5f f788 	uxtb.w	r7, r8
 800bb26:	4639      	mov	r1, r7
 800bb28:	f007 f934 	bl	8012d94 <USB_ReadDevOutEPInterrupt>
 800bb2c:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb2e:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800bb30:	f019 0f01 	tst.w	r9, #1
 800bb34:	f040 8135 	bne.w	800bda2 <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bb38:	f019 0f08 	tst.w	r9, #8
 800bb3c:	f040 8119 	bne.w	800bd72 <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800bb40:	f019 0f10 	tst.w	r9, #16
 800bb44:	d001      	beq.n	800bb4a <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800bb46:	2310      	movs	r3, #16
 800bb48:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bb4a:	f019 0f20 	tst.w	r9, #32
 800bb4e:	d001      	beq.n	800bb54 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bb50:	2320      	movs	r3, #32
 800bb52:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800bb54:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800bb58:	d0d8      	beq.n	800bb0c <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800bb5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb5e:	60b3      	str	r3, [r6, #8]
 800bb60:	e7d4      	b.n	800bb0c <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800bb62:	4620      	mov	r0, r4
 800bb64:	f017 fa18 	bl	8022f98 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bb68:	6820      	ldr	r0, [r4, #0]
 800bb6a:	6943      	ldr	r3, [r0, #20]
 800bb6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb70:	6143      	str	r3, [r0, #20]
 800bb72:	e73d      	b.n	800b9f0 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bb74:	4620      	mov	r0, r4
 800bb76:	2100      	movs	r1, #0
 800bb78:	f017 fa06 	bl	8022f88 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bb7c:	6820      	ldr	r0, [r4, #0]
 800bb7e:	6943      	ldr	r3, [r0, #20]
 800bb80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb84:	6143      	str	r3, [r0, #20]
 800bb86:	e72d      	b.n	800b9e4 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bb88:	4620      	mov	r0, r4
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	f017 fa00 	bl	8022f90 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bb90:	6820      	ldr	r0, [r4, #0]
 800bb92:	6943      	ldr	r3, [r0, #20]
 800bb94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb98:	6143      	str	r3, [r0, #20]
 800bb9a:	e71d      	b.n	800b9d8 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f017 f9bd 	bl	8022f1c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bba2:	6820      	ldr	r0, [r4, #0]
 800bba4:	6943      	ldr	r3, [r0, #20]
 800bba6:	f003 0308 	and.w	r3, r3, #8
 800bbaa:	6143      	str	r3, [r0, #20]
 800bbac:	e70e      	b.n	800b9cc <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800bbae:	f007 f90f 	bl	8012dd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bbb2:	6820      	ldr	r0, [r4, #0]
 800bbb4:	f006 fdc0 	bl	8012738 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bbb8:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bbba:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bbbc:	f000 ff86 	bl	800cacc <HAL_RCC_GetHCLKFreq>
 800bbc0:	7b22      	ldrb	r2, [r4, #12]
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f006 fbeb 	bl	80123a0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f017 f9aa 	bl	8022f24 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bbd0:	6820      	ldr	r0, [r4, #0]
 800bbd2:	6943      	ldr	r3, [r0, #20]
 800bbd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbd8:	6143      	str	r3, [r0, #20]
 800bbda:	e6f1      	b.n	800b9c0 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bbdc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800bbe0:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bbe4:	2110      	movs	r1, #16
 800bbe6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bbe8:	f023 0301 	bic.w	r3, r3, #1
 800bbec:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bbee:	f006 fc97 	bl	8012520 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bbf2:	6860      	ldr	r0, [r4, #4]
 800bbf4:	b1e0      	cbz	r0, 800bc30 <HAL_PCD_IRQHandler+0x358>
 800bbf6:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bbfa:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800bbfe:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc00:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bc04:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc06:	3320      	adds	r3, #32
 800bc08:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bc0a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800bc0e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bc12:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bc16:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800bc1a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800bc1e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bc22:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800bc26:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bc2a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc2e:	d1e6      	bne.n	800bbfe <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bc30:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bc32:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bc34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800bc38:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bc3a:	b9f2      	cbnz	r2, 800bc7a <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bc3c:	696a      	ldr	r2, [r5, #20]
 800bc3e:	f242 032b 	movw	r3, #8235	; 0x202b
 800bc42:	4313      	orrs	r3, r2
 800bc44:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bc46:	692b      	ldr	r3, [r5, #16]
 800bc48:	f043 030b 	orr.w	r3, r3, #11
 800bc4c:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bc4e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bc52:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800bc56:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bc58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bc5c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bc5e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bc62:	f007 f8cb 	bl	8012dfc <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bc66:	6820      	ldr	r0, [r4, #0]
 800bc68:	6943      	ldr	r3, [r0, #20]
 800bc6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc6e:	6143      	str	r3, [r0, #20]
 800bc70:	e69f      	b.n	800b9b2 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800bc72:	4620      	mov	r0, r4
 800bc74:	f017 f96c 	bl	8022f50 <HAL_PCD_SuspendCallback>
 800bc78:	e694      	b.n	800b9a4 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bc7a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800bc7e:	f043 030b 	orr.w	r3, r3, #11
 800bc82:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bc86:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800bc88:	f043 030b 	orr.w	r3, r3, #11
 800bc8c:	646b      	str	r3, [r5, #68]	; 0x44
 800bc8e:	e7de      	b.n	800bc4e <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800bc90:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bc92:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800bc94:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bc98:	f017 fa44 	bl	8023124 <HAL_PCDEx_LPM_Callback>
 800bc9c:	e6cf      	b.n	800ba3e <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bc9e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bca2:	2208      	movs	r2, #8
 800bca4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800bca8:	4638      	mov	r0, r7
 800bcaa:	f006 ffa9 	bl	8012c00 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bcae:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800bcb2:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bcb6:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bcb8:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800bcbc:	440b      	add	r3, r1
 800bcbe:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800bcc2:	e63b      	b.n	800b93c <HAL_PCD_IRQHandler+0x64>
 800bcc4:	9f03      	ldr	r7, [sp, #12]
 800bcc6:	e644      	b.n	800b952 <HAL_PCD_IRQHandler+0x7a>
 800bcc8:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800bccc:	e647      	b.n	800b95e <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800bcce:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcd2:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800bcd6:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcd8:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800bcda:	f63f aec5 	bhi.w	800ba68 <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcde:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800bce2:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bce4:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bce8:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800bcec:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800bcee:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800bcf0:	428a      	cmp	r2, r1
 800bcf2:	bf28      	it	cs
 800bcf4:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcf6:	9905      	ldr	r1, [sp, #20]
 800bcf8:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800bcfa:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcfc:	b289      	uxth	r1, r1
 800bcfe:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800bd02:	f0c0 80bc 	bcc.w	800be7e <HAL_PCD_IRQHandler+0x5a6>
 800bd06:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd0a:	46a0      	mov	r8, r4
 800bd0c:	9c05      	ldr	r4, [sp, #20]
 800bd0e:	e01a      	b.n	800bd46 <HAL_PCD_IRQHandler+0x46e>
 800bd10:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bd12:	463a      	mov	r2, r7
 800bd14:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800bd16:	4658      	mov	r0, fp
 800bd18:	429d      	cmp	r5, r3
 800bd1a:	bf28      	it	cs
 800bd1c:	461d      	movcs	r5, r3
 800bd1e:	f898 3010 	ldrb.w	r3, [r8, #16]
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	b2ab      	uxth	r3, r5
 800bd26:	f006 ff55 	bl	8012bd4 <USB_WritePacket>
    ep->xfer_buff  += len;
 800bd2a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd2c:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800bd2e:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd30:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800bd32:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800bd34:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800bd36:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800bd38:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd3a:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800bd3e:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd40:	f0c0 8096 	bcc.w	800be70 <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd44:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800bd46:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800bd48:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd4c:	d3e0      	bcc.n	800bd10 <HAL_PCD_IRQHandler+0x438>
 800bd4e:	4644      	mov	r4, r8
 800bd50:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bd54:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bd58:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bd5a:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bd5c:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bd5e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bd62:	f00a 030f 	and.w	r3, sl, #15
 800bd66:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bd68:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bd6a:	ea23 0302 	bic.w	r3, r3, r2
 800bd6e:	634b      	str	r3, [r1, #52]	; 0x34
 800bd70:	e67a      	b.n	800ba68 <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bd72:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd74:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bd78:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd7e:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd80:	485f      	ldr	r0, [pc, #380]	; (800bf00 <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd82:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd84:	4282      	cmp	r2, r0
 800bd86:	d961      	bls.n	800be4c <HAL_PCD_IRQHandler+0x574>
 800bd88:	040a      	lsls	r2, r1, #16
 800bd8a:	d502      	bpl.n	800bd92 <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bd90:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bd92:	4620      	mov	r0, r4
 800bd94:	f017 f8a8 	bl	8022ee8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bd98:	6921      	ldr	r1, [r4, #16]
 800bd9a:	2901      	cmp	r1, #1
 800bd9c:	d07f      	beq.n	800be9e <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800bd9e:	6820      	ldr	r0, [r4, #0]
 800bda0:	e6ce      	b.n	800bb40 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bda2:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800bda4:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bda6:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bda8:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800bdac:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bdae:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bdb2:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800bdb6:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800bdb8:	d04d      	beq.n	800be56 <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bdba:	4952      	ldr	r1, [pc, #328]	; (800bf04 <HAL_PCD_IRQHandler+0x62c>)
 800bdbc:	458c      	cmp	ip, r1
 800bdbe:	d062      	beq.n	800be86 <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bdc0:	f1b8 0f00 	cmp.w	r8, #0
 800bdc4:	d104      	bne.n	800bdd0 <HAL_PCD_IRQHandler+0x4f8>
 800bdc6:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800bdca:	2a00      	cmp	r2, #0
 800bdcc:	f000 8092 	beq.w	800bef4 <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	f017 f88e 	bl	8022ef4 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bdd8:	6820      	ldr	r0, [r4, #0]
 800bdda:	e6ad      	b.n	800bb38 <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bddc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800bde0:	421d      	tst	r5, r3
 800bde2:	f43f adab 	beq.w	800b93c <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bde6:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800bdea:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800bdee:	4638      	mov	r0, r7
 800bdf0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800bdf4:	4615      	mov	r5, r2
 800bdf6:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800bdfa:	f006 ff01 	bl	8012c00 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bdfe:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800be02:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800be04:	442b      	add	r3, r5
 800be06:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800be0a:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800be0e:	442b      	add	r3, r5
 800be10:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800be14:	e592      	b.n	800b93c <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800be16:	4620      	mov	r0, r4
 800be18:	f017 f89a 	bl	8022f50 <HAL_PCD_SuspendCallback>
 800be1c:	e5fb      	b.n	800ba16 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800be1e:	4620      	mov	r0, r4
 800be20:	f017 f8be 	bl	8022fa0 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	e5ed      	b.n	800ba04 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800be28:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800be2c:	4413      	add	r3, r2
 800be2e:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800be30:	f1ba 0f00 	cmp.w	sl, #0
 800be34:	f47f ae3f 	bne.w	800bab6 <HAL_PCD_IRQHandler+0x1de>
 800be38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f47f ae3b 	bne.w	800bab6 <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be40:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800be44:	6820      	ldr	r0, [r4, #0]
 800be46:	f006 ffd9 	bl	8012dfc <USB_EP0_OutStart>
 800be4a:	e634      	b.n	800bab6 <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800be4c:	4620      	mov	r0, r4
 800be4e:	f017 f84b 	bl	8022ee8 <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800be52:	6820      	ldr	r0, [r4, #0]
 800be54:	e674      	b.n	800bb40 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800be56:	0719      	lsls	r1, r3, #28
 800be58:	d51c      	bpl.n	800be94 <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be5a:	4929      	ldr	r1, [pc, #164]	; (800bf00 <HAL_PCD_IRQHandler+0x628>)
 800be5c:	458c      	cmp	ip, r1
 800be5e:	f67f ae6b 	bls.w	800bb38 <HAL_PCD_IRQHandler+0x260>
 800be62:	041f      	lsls	r7, r3, #16
 800be64:	f57f ae68 	bpl.w	800bb38 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be6c:	6093      	str	r3, [r2, #8]
 800be6e:	e663      	b.n	800bb38 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800be70:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800be72:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800be74:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800be78:	f8d4 b000 	ldr.w	fp, [r4]
 800be7c:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800be7e:	42ab      	cmp	r3, r5
 800be80:	f4ff adf2 	bcc.w	800ba68 <HAL_PCD_IRQHandler+0x190>
 800be84:	e768      	b.n	800bd58 <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800be86:	0419      	lsls	r1, r3, #16
 800be88:	d4ee      	bmi.n	800be68 <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800be8a:	0699      	lsls	r1, r3, #26
 800be8c:	d5a0      	bpl.n	800bdd0 <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800be8e:	2120      	movs	r1, #32
 800be90:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be92:	e79d      	b.n	800bdd0 <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800be94:	0699      	lsls	r1, r3, #26
 800be96:	d508      	bpl.n	800beaa <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800be98:	2320      	movs	r3, #32
 800be9a:	6093      	str	r3, [r2, #8]
 800be9c:	e64c      	b.n	800bb38 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be9e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800bea2:	6820      	ldr	r0, [r4, #0]
 800bea4:	f006 ffaa 	bl	8012dfc <USB_EP0_OutStart>
 800bea8:	e779      	b.n	800bd9e <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800beaa:	f013 0f28 	tst.w	r3, #40	; 0x28
 800beae:	f47f ae43 	bne.w	800bb38 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800beb2:	4913      	ldr	r1, [pc, #76]	; (800bf00 <HAL_PCD_IRQHandler+0x628>)
 800beb4:	458c      	cmp	ip, r1
 800beb6:	d901      	bls.n	800bebc <HAL_PCD_IRQHandler+0x5e4>
 800beb8:	041b      	lsls	r3, r3, #16
 800beba:	d4d5      	bmi.n	800be68 <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bebc:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800bebe:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bec2:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800bec6:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800bec8:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800becc:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800bed0:	440a      	add	r2, r1
 800bed2:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bed6:	f1b8 0f00 	cmp.w	r8, #0
 800beda:	f47f af79 	bne.w	800bdd0 <HAL_PCD_IRQHandler+0x4f8>
 800bede:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800bee2:	2a00      	cmp	r2, #0
 800bee4:	f47f af74 	bne.w	800bdd0 <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bee8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800beec:	2101      	movs	r1, #1
 800beee:	f006 ff85 	bl	8012dfc <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bef2:	e76d      	b.n	800bdd0 <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bef4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800bef8:	4641      	mov	r1, r8
 800befa:	f006 ff7f 	bl	8012dfc <USB_EP0_OutStart>
 800befe:	e767      	b.n	800bdd0 <HAL_PCD_IRQHandler+0x4f8>
 800bf00:	4f54300a 	.word	0x4f54300a
 800bf04:	4f54310a 	.word	0x4f54310a

0800bf08 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800bf08:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800bf0c:	2a01      	cmp	r2, #1
 800bf0e:	d00e      	beq.n	800bf2e <HAL_PCD_SetAddress+0x26>
 800bf10:	2201      	movs	r2, #1
{
 800bf12:	b510      	push	{r4, lr}
 800bf14:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bf16:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800bf18:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800bf1c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bf20:	f006 fef2 	bl	8012d08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bf24:	2300      	movs	r3, #0
  return HAL_OK;
 800bf26:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800bf28:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800bf2c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800bf2e:	2002      	movs	r0, #2
}
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop

0800bf34 <HAL_PCD_EP_Open>:
{
 800bf34:	b510      	push	{r4, lr}
 800bf36:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800bf3a:	0609      	lsls	r1, r1, #24
{
 800bf3c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800bf3e:	d427      	bmi.n	800bf90 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf40:	f04f 0c1c 	mov.w	ip, #28
 800bf44:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800bf48:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800bf4c:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800bf50:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800bf54:	2000      	movs	r0, #0
 800bf56:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800bf5a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800bf5c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf5e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800bf62:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800bf64:	b10a      	cbz	r2, 800bf6a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800bf66:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d101      	bne.n	800bf72 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800bf72:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d018      	beq.n	800bfac <HAL_PCD_EP_Open+0x78>
 800bf7a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bf7c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800bf7e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bf82:	f006 fbe5 	bl	8012750 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bf86:	2300      	movs	r3, #0
  return ret;
 800bf88:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800bf8a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800bf8e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf90:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800bf92:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf96:	fb00 400e 	mla	r0, r0, lr, r4
 800bf9a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800bf9e:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800bfa2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800bfa6:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800bfaa:	e7d6      	b.n	800bf5a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800bfac:	2002      	movs	r0, #2
}
 800bfae:	bd10      	pop	{r4, pc}

0800bfb0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800bfb0:	f011 0f80 	tst.w	r1, #128	; 0x80
 800bfb4:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bfb8:	f04f 011c 	mov.w	r1, #28
{
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800bfc0:	d11a      	bne.n	800bff8 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bfc2:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800bfc6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800bfca:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bfcc:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800bfd0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bfd4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bfd8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800bfda:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d019      	beq.n	800c016 <HAL_PCD_EP_Close+0x66>
 800bfe2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bfe4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800bfe6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bfea:	f006 fbf9 	bl	80127e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bfee:	2300      	movs	r3, #0
  return HAL_OK;
 800bff0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800bff2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800bff6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bff8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800bffc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800c000:	2001      	movs	r0, #1
 800c002:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c006:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800c008:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c00c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800c00e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800c012:	2b01      	cmp	r3, #1
 800c014:	d1e5      	bne.n	800bfe2 <HAL_PCD_EP_Close+0x32>
 800c016:	2002      	movs	r0, #2
}
 800c018:	bd10      	pop	{r4, pc}
 800c01a:	bf00      	nop

0800c01c <HAL_PCD_EP_Receive>:
{
 800c01c:	b510      	push	{r4, lr}
 800c01e:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c022:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800c024:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c028:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800c02c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c030:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800c034:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800c038:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800c03a:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800c03e:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800c042:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800c046:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800c04a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c04c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800c04e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800c050:	bf08      	it	eq
 800c052:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c056:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c058:	b91c      	cbnz	r4, 800c062 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c05a:	f006 fd37 	bl	8012acc <USB_EP0StartXfer>
}
 800c05e:	2000      	movs	r0, #0
 800c060:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c062:	f006 fc1b 	bl	801289c <USB_EPStartXfer>
}
 800c066:	2000      	movs	r0, #0
 800c068:	bd10      	pop	{r4, pc}
 800c06a:	bf00      	nop

0800c06c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c06c:	f001 010f 	and.w	r1, r1, #15
 800c070:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c074:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800c078:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop

0800c080 <HAL_PCD_EP_Transmit>:
{
 800c080:	b510      	push	{r4, lr}
 800c082:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c086:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800c088:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c08c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800c090:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c094:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800c096:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800c09a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800c09c:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800c0a0:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800c0a4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0a6:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800c0aa:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800c0ae:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c0b0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800c0b2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800c0b4:	bf08      	it	eq
 800c0b6:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c0ba:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c0bc:	b91c      	cbnz	r4, 800c0c6 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c0be:	f006 fd05 	bl	8012acc <USB_EP0StartXfer>
}
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c0c6:	f006 fbe9 	bl	801289c <USB_EPStartXfer>
}
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	bd10      	pop	{r4, pc}
 800c0ce:	bf00      	nop

0800c0d0 <HAL_PCD_EP_SetStall>:
{
 800c0d0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c0d2:	6843      	ldr	r3, [r0, #4]
 800c0d4:	f001 050f 	and.w	r5, r1, #15
 800c0d8:	429d      	cmp	r5, r3
 800c0da:	d834      	bhi.n	800c146 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800c0dc:	060b      	lsls	r3, r1, #24
 800c0de:	4604      	mov	r4, r0
 800c0e0:	d41d      	bmi.n	800c11e <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800c0e2:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800c0e4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800c0e8:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800c0ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c0f0:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800c0f2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800c0f6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800c0fa:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0fc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800c0fe:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800c100:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800c104:	429a      	cmp	r2, r3
 800c106:	d01c      	beq.n	800c142 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c108:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c10a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c10e:	f006 fd9b 	bl	8012c48 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c112:	b1d5      	cbz	r5, 800c14a <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800c114:	2300      	movs	r3, #0
  return HAL_OK;
 800c116:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c118:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c11c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c11e:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800c120:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800c124:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c126:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800c12a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c12e:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800c134:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800c136:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800c138:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800c13a:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800c13e:	429a      	cmp	r2, r3
 800c140:	d1e2      	bne.n	800c108 <HAL_PCD_EP_SetStall+0x38>
 800c142:	2002      	movs	r0, #2
}
 800c144:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c146:	2001      	movs	r0, #1
}
 800c148:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c14a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c14e:	7c21      	ldrb	r1, [r4, #16]
 800c150:	6820      	ldr	r0, [r4, #0]
 800c152:	f006 fe53 	bl	8012dfc <USB_EP0_OutStart>
 800c156:	e7dd      	b.n	800c114 <HAL_PCD_EP_SetStall+0x44>

0800c158 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c158:	6842      	ldr	r2, [r0, #4]
{
 800c15a:	b538      	push	{r3, r4, r5, lr}
 800c15c:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c160:	4293      	cmp	r3, r2
 800c162:	d832      	bhi.n	800c1ca <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800c164:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c168:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c16a:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800c16e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800c172:	d119      	bne.n	800c1a8 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c174:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800c178:	2000      	movs	r0, #0
 800c17a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800c17e:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c180:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800c184:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800c188:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800c18a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800c18c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800c190:	2b01      	cmp	r3, #1
 800c192:	d018      	beq.n	800c1c6 <HAL_PCD_EP_ClrStall+0x6e>
 800c194:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c196:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c198:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c19c:	f006 fd88 	bl	8012cb0 <USB_EPClearStall>
  return HAL_OK;
 800c1a0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800c1a2:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1a8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800c1ac:	2001      	movs	r0, #1
 800c1ae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800c1b2:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1b4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800c1b6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800c1ba:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800c1bc:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800c1be:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d1e6      	bne.n	800c194 <HAL_PCD_EP_ClrStall+0x3c>
 800c1c6:	2002      	movs	r0, #2
}
 800c1c8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c1ca:	2001      	movs	r0, #1
}
 800c1cc:	bd38      	pop	{r3, r4, r5, pc}
 800c1ce:	bf00      	nop

0800c1d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c1d0:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c1d2:	6804      	ldr	r4, [r0, #0]
 800c1d4:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800c1d6:	b931      	cbnz	r1, 800c1e6 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c1d8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c1dc:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800c1de:	2000      	movs	r0, #0
 800c1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1e4:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c1e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800c1e8:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c1ec:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800c1f0:	d00b      	beq.n	800c20a <HAL_PCDEx_SetTxFiFo+0x3a>
 800c1f2:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c1f4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800c1f8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c1fa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800c1fe:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c200:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800c202:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c204:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800c208:	d3f4      	bcc.n	800c1f4 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c20a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800c20e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c212:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800c216:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c21a:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800c21e:	2000      	movs	r0, #0
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop

0800c224 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c224:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800c226:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6259      	str	r1, [r3, #36]	; 0x24
}
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop

0800c230 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c230:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800c232:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c236:	4909      	ldr	r1, [pc, #36]	; (800c25c <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c238:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800c23a:	4660      	mov	r0, ip
{
 800c23c:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800c23e:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800c240:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800c244:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c248:	6993      	ldr	r3, [r2, #24]
}
 800c24a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c24e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c252:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c254:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c256:	4319      	orrs	r1, r3
 800c258:	6551      	str	r1, [r2, #84]	; 0x54
}
 800c25a:	4770      	bx	lr
 800c25c:	10000003 	.word	0x10000003

0800c260 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c260:	4a02      	ldr	r2, [pc, #8]	; (800c26c <HAL_PWR_EnableBkUpAccess+0xc>)
 800c262:	6813      	ldr	r3, [r2, #0]
 800c264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c268:	6013      	str	r3, [r2, #0]
}
 800c26a:	4770      	bx	lr
 800c26c:	40007000 	.word	0x40007000

0800c270 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800c270:	4b1a      	ldr	r3, [pc, #104]	; (800c2dc <HAL_PWREx_EnableOverDrive+0x6c>)
 800c272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c274:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800c278:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800c27a:	641a      	str	r2, [r3, #64]	; 0x40
{
 800c27c:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800c27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c280:	4c17      	ldr	r4, [pc, #92]	; (800c2e0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c286:	9301      	str	r3, [sp, #4]
 800c288:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c290:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c292:	f7fb fa07 	bl	80076a4 <HAL_GetTick>
 800c296:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c298:	e005      	b.n	800c2a6 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c29a:	f7fb fa03 	bl	80076a4 <HAL_GetTick>
 800c29e:	1b40      	subs	r0, r0, r5
 800c2a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c2a4:	d817      	bhi.n	800c2d6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c2a6:	6863      	ldr	r3, [r4, #4]
 800c2a8:	03da      	lsls	r2, r3, #15
 800c2aa:	d5f6      	bpl.n	800c29a <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c2ac:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c2ae:	4d0c      	ldr	r5, [pc, #48]	; (800c2e0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c2b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2b4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c2b6:	f7fb f9f5 	bl	80076a4 <HAL_GetTick>
 800c2ba:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c2bc:	e005      	b.n	800c2ca <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c2be:	f7fb f9f1 	bl	80076a4 <HAL_GetTick>
 800c2c2:	1b00      	subs	r0, r0, r4
 800c2c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c2c8:	d805      	bhi.n	800c2d6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c2ca:	686b      	ldr	r3, [r5, #4]
 800c2cc:	039b      	lsls	r3, r3, #14
 800c2ce:	d5f6      	bpl.n	800c2be <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800c2d0:	2000      	movs	r0, #0
}
 800c2d2:	b003      	add	sp, #12
 800c2d4:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800c2d6:	2003      	movs	r0, #3
}
 800c2d8:	b003      	add	sp, #12
 800c2da:	bd30      	pop	{r4, r5, pc}
 800c2dc:	40023800 	.word	0x40023800
 800c2e0:	40007000 	.word	0x40007000

0800c2e4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	f000 828c 	beq.w	800c802 <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c2ea:	6803      	ldr	r3, [r0, #0]
 800c2ec:	2b0f      	cmp	r3, #15
{
 800c2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c2f6:	f200 8123 	bhi.w	800c540 <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2fa:	07dd      	lsls	r5, r3, #31
 800c2fc:	d534      	bpl.n	800c368 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800c2fe:	6863      	ldr	r3, [r4, #4]
 800c300:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800c304:	d003      	beq.n	800c30e <HAL_RCC_OscConfig+0x2a>
 800c306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c30a:	f040 8175 	bne.w	800c5f8 <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c30e:	4aa3      	ldr	r2, [pc, #652]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
 800c310:	6893      	ldr	r3, [r2, #8]
 800c312:	f003 030c 	and.w	r3, r3, #12
 800c316:	2b04      	cmp	r3, #4
 800c318:	d01d      	beq.n	800c356 <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c31a:	6893      	ldr	r3, [r2, #8]
 800c31c:	f003 030c 	and.w	r3, r3, #12
 800c320:	2b08      	cmp	r3, #8
 800c322:	d015      	beq.n	800c350 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c324:	6863      	ldr	r3, [r4, #4]
 800c326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c32a:	f000 816b 	beq.w	800c604 <HAL_RCC_OscConfig+0x320>
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f000 819c 	beq.w	800c66c <HAL_RCC_OscConfig+0x388>
 800c334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c338:	4b98      	ldr	r3, [pc, #608]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	f000 822d 	beq.w	800c79a <HAL_RCC_OscConfig+0x4b6>
 800c340:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c344:	601a      	str	r2, [r3, #0]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c34c:	601a      	str	r2, [r3, #0]
 800c34e:	e15e      	b.n	800c60e <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c350:	6853      	ldr	r3, [r2, #4]
 800c352:	0258      	lsls	r0, r3, #9
 800c354:	d5e6      	bpl.n	800c324 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c356:	4b91      	ldr	r3, [pc, #580]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	0399      	lsls	r1, r3, #14
 800c35c:	d503      	bpl.n	800c366 <HAL_RCC_OscConfig+0x82>
 800c35e:	6863      	ldr	r3, [r4, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 80ff 	beq.w	800c564 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c366:	6823      	ldr	r3, [r4, #0]
 800c368:	079f      	lsls	r7, r3, #30
 800c36a:	d531      	bpl.n	800c3d0 <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800c36c:	68e3      	ldr	r3, [r4, #12]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	f200 80fc 	bhi.w	800c56c <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800c374:	6923      	ldr	r3, [r4, #16]
 800c376:	2b1f      	cmp	r3, #31
 800c378:	f200 8101 	bhi.w	800c57e <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c37c:	4b87      	ldr	r3, [pc, #540]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	f012 0f0c 	tst.w	r2, #12
 800c384:	f000 80e7 	beq.w	800c556 <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c388:	689a      	ldr	r2, [r3, #8]
 800c38a:	f002 020c 	and.w	r2, r2, #12
 800c38e:	2a08      	cmp	r2, #8
 800c390:	f000 80dd 	beq.w	800c54e <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c394:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c396:	4d81      	ldr	r5, [pc, #516]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 819d 	beq.w	800c6d8 <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800c39e:	682b      	ldr	r3, [r5, #0]
 800c3a0:	f043 0301 	orr.w	r3, r3, #1
 800c3a4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3a6:	f7fb f97d 	bl	80076a4 <HAL_GetTick>
 800c3aa:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3ac:	e005      	b.n	800c3ba <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3ae:	f7fb f979 	bl	80076a4 <HAL_GetTick>
 800c3b2:	1b80      	subs	r0, r0, r6
 800c3b4:	2802      	cmp	r0, #2
 800c3b6:	f200 8155 	bhi.w	800c664 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3ba:	682b      	ldr	r3, [r5, #0]
 800c3bc:	0798      	lsls	r0, r3, #30
 800c3be:	d5f6      	bpl.n	800c3ae <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3c0:	682b      	ldr	r3, [r5, #0]
 800c3c2:	6922      	ldr	r2, [r4, #16]
 800c3c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c3c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c3cc:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	071a      	lsls	r2, r3, #28
 800c3d2:	d42a      	bmi.n	800c42a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c3d4:	075e      	lsls	r6, r3, #29
 800c3d6:	d544      	bpl.n	800c462 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800c3d8:	68a3      	ldr	r3, [r4, #8]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d906      	bls.n	800c3ec <HAL_RCC_OscConfig+0x108>
 800c3de:	2b05      	cmp	r3, #5
 800c3e0:	d004      	beq.n	800c3ec <HAL_RCC_OscConfig+0x108>
 800c3e2:	f240 2106 	movw	r1, #518	; 0x206
 800c3e6:	486e      	ldr	r0, [pc, #440]	; (800c5a0 <HAL_RCC_OscConfig+0x2bc>)
 800c3e8:	f7f7 fdb0 	bl	8003f4c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c3ec:	4b6b      	ldr	r3, [pc, #428]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
 800c3ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3f0:	00d5      	lsls	r5, r2, #3
 800c3f2:	f140 80ec 	bpl.w	800c5ce <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800c3f6:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c3f8:	4e6a      	ldr	r6, [pc, #424]	; (800c5a4 <HAL_RCC_OscConfig+0x2c0>)
 800c3fa:	6833      	ldr	r3, [r6, #0]
 800c3fc:	05d8      	lsls	r0, r3, #23
 800c3fe:	f140 8121 	bpl.w	800c644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c402:	68a3      	ldr	r3, [r4, #8]
 800c404:	2b01      	cmp	r3, #1
 800c406:	f000 8179 	beq.w	800c6fc <HAL_RCC_OscConfig+0x418>
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 8144 	beq.w	800c698 <HAL_RCC_OscConfig+0x3b4>
 800c410:	2b05      	cmp	r3, #5
 800c412:	4b62      	ldr	r3, [pc, #392]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
 800c414:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c416:	f000 81c8 	beq.w	800c7aa <HAL_RCC_OscConfig+0x4c6>
 800c41a:	f022 0201 	bic.w	r2, r2, #1
 800c41e:	671a      	str	r2, [r3, #112]	; 0x70
 800c420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c422:	f022 0204 	bic.w	r2, r2, #4
 800c426:	671a      	str	r2, [r3, #112]	; 0x70
 800c428:	e16d      	b.n	800c706 <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800c42a:	6963      	ldr	r3, [r4, #20]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	f200 80c4 	bhi.w	800c5ba <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800c432:	4d5a      	ldr	r5, [pc, #360]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 80a8 	beq.w	800c58a <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800c43a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c43c:	f043 0301 	orr.w	r3, r3, #1
 800c440:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800c442:	f7fb f92f 	bl	80076a4 <HAL_GetTick>
 800c446:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c448:	e005      	b.n	800c456 <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c44a:	f7fb f92b 	bl	80076a4 <HAL_GetTick>
 800c44e:	1b80      	subs	r0, r0, r6
 800c450:	2802      	cmp	r0, #2
 800c452:	f200 8107 	bhi.w	800c664 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c456:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c458:	079b      	lsls	r3, r3, #30
 800c45a:	d5f6      	bpl.n	800c44a <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	075e      	lsls	r6, r3, #29
 800c460:	d4ba      	bmi.n	800c3d8 <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800c462:	69a0      	ldr	r0, [r4, #24]
 800c464:	2802      	cmp	r0, #2
 800c466:	f200 80bd 	bhi.w	800c5e4 <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d064      	beq.n	800c538 <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c46e:	4d4b      	ldr	r5, [pc, #300]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
 800c470:	68ab      	ldr	r3, [r5, #8]
 800c472:	f003 030c 	and.w	r3, r3, #12
 800c476:	2b08      	cmp	r3, #8
 800c478:	f000 8158 	beq.w	800c72c <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c47c:	2802      	cmp	r0, #2
 800c47e:	f040 81ae 	bne.w	800c7de <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800c482:	69e3      	ldr	r3, [r4, #28]
 800c484:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800c488:	f040 81a3 	bne.w	800c7d2 <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800c48c:	6a23      	ldr	r3, [r4, #32]
 800c48e:	3b02      	subs	r3, #2
 800c490:	2b3d      	cmp	r3, #61	; 0x3d
 800c492:	f200 8198 	bhi.w	800c7c6 <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800c496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c498:	3b32      	subs	r3, #50	; 0x32
 800c49a:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800c49e:	f200 818c 	bhi.w	800c7ba <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800c4a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c4a4:	2b08      	cmp	r3, #8
 800c4a6:	f200 8172 	bhi.w	800c78e <HAL_RCC_OscConfig+0x4aa>
 800c4aa:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800c4ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c4b2:	07d8      	lsls	r0, r3, #31
 800c4b4:	f140 816b 	bpl.w	800c78e <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800c4b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c4ba:	3b02      	subs	r3, #2
 800c4bc:	2b0d      	cmp	r3, #13
 800c4be:	f200 81a8 	bhi.w	800c812 <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800c4c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c4c4:	3b02      	subs	r3, #2
 800c4c6:	2b05      	cmp	r3, #5
 800c4c8:	f200 819d 	bhi.w	800c806 <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c4cc:	4d33      	ldr	r5, [pc, #204]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
 800c4ce:	682b      	ldr	r3, [r5, #0]
 800c4d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c4d4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4d6:	f7fb f8e5 	bl	80076a4 <HAL_GetTick>
 800c4da:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4dc:	e005      	b.n	800c4ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4de:	f7fb f8e1 	bl	80076a4 <HAL_GetTick>
 800c4e2:	1b80      	subs	r0, r0, r6
 800c4e4:	2802      	cmp	r0, #2
 800c4e6:	f200 80bd 	bhi.w	800c664 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4ea:	682b      	ldr	r3, [r5, #0]
 800c4ec:	0199      	lsls	r1, r3, #6
 800c4ee:	d4f6      	bmi.n	800c4de <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c4f0:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800c4f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c4f6:	430b      	orrs	r3, r1
 800c4f8:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4fa:	4e28      	ldr	r6, [pc, #160]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c4fc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c500:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800c504:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c508:	0852      	lsrs	r2, r2, #1
 800c50a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800c50e:	3a01      	subs	r2, #1
 800c510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c514:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800c516:	682b      	ldr	r3, [r5, #0]
 800c518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c51c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c51e:	f7fb f8c1 	bl	80076a4 <HAL_GetTick>
 800c522:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c524:	e005      	b.n	800c532 <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c526:	f7fb f8bd 	bl	80076a4 <HAL_GetTick>
 800c52a:	1b00      	subs	r0, r0, r4
 800c52c:	2802      	cmp	r0, #2
 800c52e:	f200 8099 	bhi.w	800c664 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c532:	6833      	ldr	r3, [r6, #0]
 800c534:	019a      	lsls	r2, r3, #6
 800c536:	d5f6      	bpl.n	800c526 <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800c538:	2000      	movs	r0, #0
}
 800c53a:	b002      	add	sp, #8
 800c53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c540:	f240 1163 	movw	r1, #355	; 0x163
 800c544:	4816      	ldr	r0, [pc, #88]	; (800c5a0 <HAL_RCC_OscConfig+0x2bc>)
 800c546:	f7f7 fd01 	bl	8003f4c <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	e6d5      	b.n	800c2fa <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	025e      	lsls	r6, r3, #9
 800c552:	f53f af1f 	bmi.w	800c394 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c556:	4b11      	ldr	r3, [pc, #68]	; (800c59c <HAL_RCC_OscConfig+0x2b8>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	079d      	lsls	r5, r3, #30
 800c55c:	d565      	bpl.n	800c62a <HAL_RCC_OscConfig+0x346>
 800c55e:	68e3      	ldr	r3, [r4, #12]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d062      	beq.n	800c62a <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800c564:	2001      	movs	r0, #1
}
 800c566:	b002      	add	sp, #8
 800c568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800c56c:	f240 119b 	movw	r1, #411	; 0x19b
 800c570:	480b      	ldr	r0, [pc, #44]	; (800c5a0 <HAL_RCC_OscConfig+0x2bc>)
 800c572:	f7f7 fceb 	bl	8003f4c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800c576:	6923      	ldr	r3, [r4, #16]
 800c578:	2b1f      	cmp	r3, #31
 800c57a:	f67f aeff 	bls.w	800c37c <HAL_RCC_OscConfig+0x98>
 800c57e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800c582:	4807      	ldr	r0, [pc, #28]	; (800c5a0 <HAL_RCC_OscConfig+0x2bc>)
 800c584:	f7f7 fce2 	bl	8003f4c <assert_failed>
 800c588:	e6f8      	b.n	800c37c <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800c58a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c58c:	f023 0301 	bic.w	r3, r3, #1
 800c590:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800c592:	f7fb f887 	bl	80076a4 <HAL_GetTick>
 800c596:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c598:	e00b      	b.n	800c5b2 <HAL_RCC_OscConfig+0x2ce>
 800c59a:	bf00      	nop
 800c59c:	40023800 	.word	0x40023800
 800c5a0:	0802b0d8 	.word	0x0802b0d8
 800c5a4:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5a8:	f7fb f87c 	bl	80076a4 <HAL_GetTick>
 800c5ac:	1b80      	subs	r0, r0, r6
 800c5ae:	2802      	cmp	r0, #2
 800c5b0:	d858      	bhi.n	800c664 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c5b4:	079f      	lsls	r7, r3, #30
 800c5b6:	d4f7      	bmi.n	800c5a8 <HAL_RCC_OscConfig+0x2c4>
 800c5b8:	e750      	b.n	800c45c <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800c5ba:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800c5be:	4898      	ldr	r0, [pc, #608]	; (800c820 <HAL_RCC_OscConfig+0x53c>)
 800c5c0:	f7f7 fcc4 	bl	8003f4c <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c5c4:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800c5c6:	4d97      	ldr	r5, [pc, #604]	; (800c824 <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d0de      	beq.n	800c58a <HAL_RCC_OscConfig+0x2a6>
 800c5cc:	e735      	b.n	800c43a <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800c5d0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c5d6:	641a      	str	r2, [r3, #64]	; 0x40
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c5e2:	e709      	b.n	800c3f8 <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800c5e4:	488e      	ldr	r0, [pc, #568]	; (800c820 <HAL_RCC_OscConfig+0x53c>)
 800c5e6:	f240 214a 	movw	r1, #586	; 0x24a
 800c5ea:	f7f7 fcaf 	bl	8003f4c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c5ee:	69a0      	ldr	r0, [r4, #24]
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	f47f af3c 	bne.w	800c46e <HAL_RCC_OscConfig+0x18a>
 800c5f6:	e79f      	b.n	800c538 <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800c5f8:	f240 1169 	movw	r1, #361	; 0x169
 800c5fc:	4888      	ldr	r0, [pc, #544]	; (800c820 <HAL_RCC_OscConfig+0x53c>)
 800c5fe:	f7f7 fca5 	bl	8003f4c <assert_failed>
 800c602:	e684      	b.n	800c30e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c604:	4a87      	ldr	r2, [pc, #540]	; (800c824 <HAL_RCC_OscConfig+0x540>)
 800c606:	6813      	ldr	r3, [r2, #0]
 800c608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c60c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800c60e:	f7fb f849 	bl	80076a4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c612:	4e84      	ldr	r6, [pc, #528]	; (800c824 <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800c614:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c616:	e004      	b.n	800c622 <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c618:	f7fb f844 	bl	80076a4 <HAL_GetTick>
 800c61c:	1b40      	subs	r0, r0, r5
 800c61e:	2864      	cmp	r0, #100	; 0x64
 800c620:	d820      	bhi.n	800c664 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c622:	6833      	ldr	r3, [r6, #0]
 800c624:	039a      	lsls	r2, r3, #14
 800c626:	d5f7      	bpl.n	800c618 <HAL_RCC_OscConfig+0x334>
 800c628:	e69d      	b.n	800c366 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c62a:	4a7e      	ldr	r2, [pc, #504]	; (800c824 <HAL_RCC_OscConfig+0x540>)
 800c62c:	6921      	ldr	r1, [r4, #16]
 800c62e:	6813      	ldr	r3, [r2, #0]
 800c630:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c634:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800c638:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	071a      	lsls	r2, r3, #28
 800c63e:	f57f aec9 	bpl.w	800c3d4 <HAL_RCC_OscConfig+0xf0>
 800c642:	e6f2      	b.n	800c42a <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800c644:	6833      	ldr	r3, [r6, #0]
 800c646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c64a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800c64c:	f7fb f82a 	bl	80076a4 <HAL_GetTick>
 800c650:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c652:	6833      	ldr	r3, [r6, #0]
 800c654:	05d9      	lsls	r1, r3, #23
 800c656:	f53f aed4 	bmi.w	800c402 <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c65a:	f7fb f823 	bl	80076a4 <HAL_GetTick>
 800c65e:	1bc0      	subs	r0, r0, r7
 800c660:	2864      	cmp	r0, #100	; 0x64
 800c662:	d9f6      	bls.n	800c652 <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800c664:	2003      	movs	r0, #3
}
 800c666:	b002      	add	sp, #8
 800c668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c66c:	4d6d      	ldr	r5, [pc, #436]	; (800c824 <HAL_RCC_OscConfig+0x540>)
 800c66e:	682b      	ldr	r3, [r5, #0]
 800c670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c674:	602b      	str	r3, [r5, #0]
 800c676:	682b      	ldr	r3, [r5, #0]
 800c678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c67c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c67e:	f7fb f811 	bl	80076a4 <HAL_GetTick>
 800c682:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c684:	e004      	b.n	800c690 <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c686:	f7fb f80d 	bl	80076a4 <HAL_GetTick>
 800c68a:	1b80      	subs	r0, r0, r6
 800c68c:	2864      	cmp	r0, #100	; 0x64
 800c68e:	d8e9      	bhi.n	800c664 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	039b      	lsls	r3, r3, #14
 800c694:	d4f7      	bmi.n	800c686 <HAL_RCC_OscConfig+0x3a2>
 800c696:	e666      	b.n	800c366 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c698:	4e62      	ldr	r6, [pc, #392]	; (800c824 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c69a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c69e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c6a0:	f023 0301 	bic.w	r3, r3, #1
 800c6a4:	6733      	str	r3, [r6, #112]	; 0x70
 800c6a6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c6a8:	f023 0304 	bic.w	r3, r3, #4
 800c6ac:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800c6ae:	f7fa fff9 	bl	80076a4 <HAL_GetTick>
 800c6b2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6b4:	e004      	b.n	800c6c0 <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6b6:	f7fa fff5 	bl	80076a4 <HAL_GetTick>
 800c6ba:	1bc0      	subs	r0, r0, r7
 800c6bc:	4540      	cmp	r0, r8
 800c6be:	d8d1      	bhi.n	800c664 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6c0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c6c2:	079b      	lsls	r3, r3, #30
 800c6c4:	d4f7      	bmi.n	800c6b6 <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800c6c6:	2d00      	cmp	r5, #0
 800c6c8:	f43f aecb 	beq.w	800c462 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6cc:	4a55      	ldr	r2, [pc, #340]	; (800c824 <HAL_RCC_OscConfig+0x540>)
 800c6ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c6d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6d4:	6413      	str	r3, [r2, #64]	; 0x40
 800c6d6:	e6c4      	b.n	800c462 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800c6d8:	682b      	ldr	r3, [r5, #0]
 800c6da:	f023 0301 	bic.w	r3, r3, #1
 800c6de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c6e0:	f7fa ffe0 	bl	80076a4 <HAL_GetTick>
 800c6e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6e6:	e004      	b.n	800c6f2 <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6e8:	f7fa ffdc 	bl	80076a4 <HAL_GetTick>
 800c6ec:	1b80      	subs	r0, r0, r6
 800c6ee:	2802      	cmp	r0, #2
 800c6f0:	d8b8      	bhi.n	800c664 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6f2:	682b      	ldr	r3, [r5, #0]
 800c6f4:	0799      	lsls	r1, r3, #30
 800c6f6:	d4f7      	bmi.n	800c6e8 <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c6f8:	6823      	ldr	r3, [r4, #0]
 800c6fa:	e669      	b.n	800c3d0 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c6fc:	4a49      	ldr	r2, [pc, #292]	; (800c824 <HAL_RCC_OscConfig+0x540>)
 800c6fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800c700:	f043 0301 	orr.w	r3, r3, #1
 800c704:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800c706:	f7fa ffcd 	bl	80076a4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c70a:	4f46      	ldr	r7, [pc, #280]	; (800c824 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c70c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800c710:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c712:	e004      	b.n	800c71e <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c714:	f7fa ffc6 	bl	80076a4 <HAL_GetTick>
 800c718:	1b80      	subs	r0, r0, r6
 800c71a:	4540      	cmp	r0, r8
 800c71c:	d8a2      	bhi.n	800c664 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c71e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c720:	079a      	lsls	r2, r3, #30
 800c722:	d5f7      	bpl.n	800c714 <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800c724:	2d00      	cmp	r5, #0
 800c726:	f43f ae9c 	beq.w	800c462 <HAL_RCC_OscConfig+0x17e>
 800c72a:	e7cf      	b.n	800c6cc <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c72c:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800c72e:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c730:	f43f af03 	beq.w	800c53a <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c734:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c738:	69e1      	ldr	r1, [r4, #28]
 800c73a:	428b      	cmp	r3, r1
 800c73c:	f47f af12 	bne.w	800c564 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c740:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c744:	6a21      	ldr	r1, [r4, #32]
 800c746:	428b      	cmp	r3, r1
 800c748:	f47f af0c 	bne.w	800c564 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c74c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c750:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c752:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c754:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800c758:	f47f af04 	bne.w	800c564 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c75c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c75e:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800c762:	085b      	lsrs	r3, r3, #1
 800c764:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c766:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800c76a:	f47f aefb 	bne.w	800c564 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c76e:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800c772:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c774:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800c778:	f47f aef4 	bne.w	800c564 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c77c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c77e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c782:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800c786:	bf14      	ite	ne
 800c788:	2001      	movne	r0, #1
 800c78a:	2000      	moveq	r0, #0
 800c78c:	e6d5      	b.n	800c53a <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800c78e:	f240 2156 	movw	r1, #598	; 0x256
 800c792:	4823      	ldr	r0, [pc, #140]	; (800c820 <HAL_RCC_OscConfig+0x53c>)
 800c794:	f7f7 fbda 	bl	8003f4c <assert_failed>
 800c798:	e68e      	b.n	800c4b8 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c79a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c79e:	601a      	str	r2, [r3, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c7a6:	601a      	str	r2, [r3, #0]
 800c7a8:	e731      	b.n	800c60e <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c7aa:	f042 0204 	orr.w	r2, r2, #4
 800c7ae:	671a      	str	r2, [r3, #112]	; 0x70
 800c7b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c7b2:	f042 0201 	orr.w	r2, r2, #1
 800c7b6:	671a      	str	r2, [r3, #112]	; 0x70
 800c7b8:	e7a5      	b.n	800c706 <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800c7ba:	f240 2155 	movw	r1, #597	; 0x255
 800c7be:	4818      	ldr	r0, [pc, #96]	; (800c820 <HAL_RCC_OscConfig+0x53c>)
 800c7c0:	f7f7 fbc4 	bl	8003f4c <assert_failed>
 800c7c4:	e66d      	b.n	800c4a2 <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800c7c6:	f44f 7115 	mov.w	r1, #596	; 0x254
 800c7ca:	4815      	ldr	r0, [pc, #84]	; (800c820 <HAL_RCC_OscConfig+0x53c>)
 800c7cc:	f7f7 fbbe 	bl	8003f4c <assert_failed>
 800c7d0:	e661      	b.n	800c496 <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800c7d2:	f240 2153 	movw	r1, #595	; 0x253
 800c7d6:	4812      	ldr	r0, [pc, #72]	; (800c820 <HAL_RCC_OscConfig+0x53c>)
 800c7d8:	f7f7 fbb8 	bl	8003f4c <assert_failed>
 800c7dc:	e656      	b.n	800c48c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800c7de:	682b      	ldr	r3, [r5, #0]
 800c7e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c7e6:	f7fa ff5d 	bl	80076a4 <HAL_GetTick>
 800c7ea:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7ec:	e005      	b.n	800c7fa <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7ee:	f7fa ff59 	bl	80076a4 <HAL_GetTick>
 800c7f2:	1b00      	subs	r0, r0, r4
 800c7f4:	2802      	cmp	r0, #2
 800c7f6:	f63f af35 	bhi.w	800c664 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7fa:	682b      	ldr	r3, [r5, #0]
 800c7fc:	019b      	lsls	r3, r3, #6
 800c7fe:	d4f6      	bmi.n	800c7ee <HAL_RCC_OscConfig+0x50a>
 800c800:	e69a      	b.n	800c538 <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800c802:	2001      	movs	r0, #1
}
 800c804:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800c806:	f240 2159 	movw	r1, #601	; 0x259
 800c80a:	4805      	ldr	r0, [pc, #20]	; (800c820 <HAL_RCC_OscConfig+0x53c>)
 800c80c:	f7f7 fb9e 	bl	8003f4c <assert_failed>
 800c810:	e65c      	b.n	800c4cc <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800c812:	f240 2157 	movw	r1, #599	; 0x257
 800c816:	4802      	ldr	r0, [pc, #8]	; (800c820 <HAL_RCC_OscConfig+0x53c>)
 800c818:	f7f7 fb98 	bl	8003f4c <assert_failed>
 800c81c:	e651      	b.n	800c4c2 <HAL_RCC_OscConfig+0x1de>
 800c81e:	bf00      	nop
 800c820:	0802b0d8 	.word	0x0802b0d8
 800c824:	40023800 	.word	0x40023800

0800c828 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c828:	4916      	ldr	r1, [pc, #88]	; (800c884 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800c82a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c82c:	688b      	ldr	r3, [r1, #8]
 800c82e:	f003 030c 	and.w	r3, r3, #12
 800c832:	2b04      	cmp	r3, #4
 800c834:	d01b      	beq.n	800c86e <HAL_RCC_GetSysClockFreq+0x46>
 800c836:	2b08      	cmp	r3, #8
 800c838:	d117      	bne.n	800c86a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c83a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c83c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c83e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c842:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c844:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800c848:	d113      	bne.n	800c872 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c84a:	480f      	ldr	r0, [pc, #60]	; (800c888 <HAL_RCC_GetSysClockFreq+0x60>)
 800c84c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800c850:	fba1 0100 	umull	r0, r1, r1, r0
 800c854:	f7f3 fdac 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c858:	4b0a      	ldr	r3, [pc, #40]	; (800c884 <HAL_RCC_GetSysClockFreq+0x5c>)
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800c860:	3301      	adds	r3, #1
 800c862:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800c864:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800c868:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800c86a:	4807      	ldr	r0, [pc, #28]	; (800c888 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800c86c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c86e:	4807      	ldr	r0, [pc, #28]	; (800c88c <HAL_RCC_GetSysClockFreq+0x64>)
}
 800c870:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c872:	4806      	ldr	r0, [pc, #24]	; (800c88c <HAL_RCC_GetSysClockFreq+0x64>)
 800c874:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800c878:	2300      	movs	r3, #0
 800c87a:	fba1 0100 	umull	r0, r1, r1, r0
 800c87e:	f7f3 fd97 	bl	80003b0 <__aeabi_uldivmod>
 800c882:	e7e9      	b.n	800c858 <HAL_RCC_GetSysClockFreq+0x30>
 800c884:	40023800 	.word	0x40023800
 800c888:	00f42400 	.word	0x00f42400
 800c88c:	007a1200 	.word	0x007a1200

0800c890 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800c890:	2800      	cmp	r0, #0
 800c892:	f000 80f6 	beq.w	800ca82 <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800c896:	6803      	ldr	r3, [r0, #0]
 800c898:	3b01      	subs	r3, #1
 800c89a:	2b0e      	cmp	r3, #14
{
 800c89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800c8a4:	f200 80d6 	bhi.w	800ca54 <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800c8a8:	2d0f      	cmp	r5, #15
 800c8aa:	f200 80c3 	bhi.w	800ca34 <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c8ae:	4a81      	ldr	r2, [pc, #516]	; (800cab4 <HAL_RCC_ClockConfig+0x224>)
 800c8b0:	6813      	ldr	r3, [r2, #0]
 800c8b2:	f003 030f 	and.w	r3, r3, #15
 800c8b6:	42ab      	cmp	r3, r5
 800c8b8:	d36f      	bcc.n	800c99a <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	0798      	lsls	r0, r3, #30
 800c8be:	d530      	bpl.n	800c922 <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8c0:	0759      	lsls	r1, r3, #29
 800c8c2:	d504      	bpl.n	800c8ce <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c8c4:	497c      	ldr	r1, [pc, #496]	; (800cab8 <HAL_RCC_ClockConfig+0x228>)
 800c8c6:	688a      	ldr	r2, [r1, #8]
 800c8c8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800c8cc:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c8ce:	071a      	lsls	r2, r3, #28
 800c8d0:	d504      	bpl.n	800c8dc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c8d2:	4979      	ldr	r1, [pc, #484]	; (800cab8 <HAL_RCC_ClockConfig+0x228>)
 800c8d4:	688a      	ldr	r2, [r1, #8]
 800c8d6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800c8da:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800c8dc:	68a1      	ldr	r1, [r4, #8]
 800c8de:	f021 0220 	bic.w	r2, r1, #32
 800c8e2:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800c8e6:	2a90      	cmp	r2, #144	; 0x90
 800c8e8:	bf18      	it	ne
 800c8ea:	2800      	cmpne	r0, #0
 800c8ec:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800c8f0:	bf14      	ite	ne
 800c8f2:	2201      	movne	r2, #1
 800c8f4:	2200      	moveq	r2, #0
 800c8f6:	29f0      	cmp	r1, #240	; 0xf0
 800c8f8:	bf0c      	ite	eq
 800c8fa:	2200      	moveq	r2, #0
 800c8fc:	f002 0201 	andne.w	r2, r2, #1
 800c900:	28a0      	cmp	r0, #160	; 0xa0
 800c902:	bf0c      	ite	eq
 800c904:	2200      	moveq	r2, #0
 800c906:	f002 0201 	andne.w	r2, r2, #1
 800c90a:	b122      	cbz	r2, 800c916 <HAL_RCC_ClockConfig+0x86>
 800c90c:	f021 0210 	bic.w	r2, r1, #16
 800c910:	2ac0      	cmp	r2, #192	; 0xc0
 800c912:	f040 80b8 	bne.w	800ca86 <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c916:	4868      	ldr	r0, [pc, #416]	; (800cab8 <HAL_RCC_ClockConfig+0x228>)
 800c918:	6882      	ldr	r2, [r0, #8]
 800c91a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800c91e:	4311      	orrs	r1, r2
 800c920:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c922:	07df      	lsls	r7, r3, #31
 800c924:	d526      	bpl.n	800c974 <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800c926:	6863      	ldr	r3, [r4, #4]
 800c928:	2b02      	cmp	r3, #2
 800c92a:	f200 80a1 	bhi.w	800ca70 <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c92e:	4a62      	ldr	r2, [pc, #392]	; (800cab8 <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c930:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c932:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c934:	f000 8098 	beq.w	800ca68 <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c938:	2b02      	cmp	r3, #2
 800c93a:	f000 8091 	beq.w	800ca60 <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c93e:	0791      	lsls	r1, r2, #30
 800c940:	d528      	bpl.n	800c994 <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c942:	4e5d      	ldr	r6, [pc, #372]	; (800cab8 <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c944:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c948:	68b2      	ldr	r2, [r6, #8]
 800c94a:	f022 0203 	bic.w	r2, r2, #3
 800c94e:	4313      	orrs	r3, r2
 800c950:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800c952:	f7fa fea7 	bl	80076a4 <HAL_GetTick>
 800c956:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c958:	e005      	b.n	800c966 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c95a:	f7fa fea3 	bl	80076a4 <HAL_GetTick>
 800c95e:	1bc0      	subs	r0, r0, r7
 800c960:	4540      	cmp	r0, r8
 800c962:	f200 808c 	bhi.w	800ca7e <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c966:	68b3      	ldr	r3, [r6, #8]
 800c968:	6862      	ldr	r2, [r4, #4]
 800c96a:	f003 030c 	and.w	r3, r3, #12
 800c96e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800c972:	d1f2      	bne.n	800c95a <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c974:	4a4f      	ldr	r2, [pc, #316]	; (800cab4 <HAL_RCC_ClockConfig+0x224>)
 800c976:	6813      	ldr	r3, [r2, #0]
 800c978:	f003 030f 	and.w	r3, r3, #15
 800c97c:	42ab      	cmp	r3, r5
 800c97e:	d91a      	bls.n	800c9b6 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c980:	6813      	ldr	r3, [r2, #0]
 800c982:	f023 030f 	bic.w	r3, r3, #15
 800c986:	432b      	orrs	r3, r5
 800c988:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c98a:	6813      	ldr	r3, [r2, #0]
 800c98c:	f003 030f 	and.w	r3, r3, #15
 800c990:	42ab      	cmp	r3, r5
 800c992:	d010      	beq.n	800c9b6 <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800c994:	2001      	movs	r0, #1
}
 800c996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c99a:	6813      	ldr	r3, [r2, #0]
 800c99c:	f023 030f 	bic.w	r3, r3, #15
 800c9a0:	432b      	orrs	r3, r5
 800c9a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9a4:	6813      	ldr	r3, [r2, #0]
 800c9a6:	f003 030f 	and.w	r3, r3, #15
 800c9aa:	42ab      	cmp	r3, r5
 800c9ac:	d1f2      	bne.n	800c994 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9ae:	6823      	ldr	r3, [r4, #0]
 800c9b0:	0798      	lsls	r0, r3, #30
 800c9b2:	d485      	bmi.n	800c8c0 <HAL_RCC_ClockConfig+0x30>
 800c9b4:	e7b5      	b.n	800c922 <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	075a      	lsls	r2, r3, #29
 800c9ba:	d512      	bpl.n	800c9e2 <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800c9bc:	68e1      	ldr	r1, [r4, #12]
 800c9be:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800c9c2:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800c9c6:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800c9ca:	bf18      	it	ne
 800c9cc:	2a00      	cmpne	r2, #0
 800c9ce:	d002      	beq.n	800c9d6 <HAL_RCC_ClockConfig+0x146>
 800c9d0:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800c9d4:	d15f      	bne.n	800ca96 <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c9d6:	4838      	ldr	r0, [pc, #224]	; (800cab8 <HAL_RCC_ClockConfig+0x228>)
 800c9d8:	6882      	ldr	r2, [r0, #8]
 800c9da:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800c9de:	430a      	orrs	r2, r1
 800c9e0:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9e2:	071b      	lsls	r3, r3, #28
 800c9e4:	d513      	bpl.n	800ca0e <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800c9e6:	6922      	ldr	r2, [r4, #16]
 800c9e8:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800c9ec:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800c9f0:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800c9f4:	bf18      	it	ne
 800c9f6:	2b00      	cmpne	r3, #0
 800c9f8:	d002      	beq.n	800ca00 <HAL_RCC_ClockConfig+0x170>
 800c9fa:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800c9fe:	d152      	bne.n	800caa6 <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ca00:	492d      	ldr	r1, [pc, #180]	; (800cab8 <HAL_RCC_ClockConfig+0x228>)
 800ca02:	688b      	ldr	r3, [r1, #8]
 800ca04:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ca08:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ca0c:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ca0e:	f7ff ff0b 	bl	800c828 <HAL_RCC_GetSysClockFreq>
 800ca12:	4a29      	ldr	r2, [pc, #164]	; (800cab8 <HAL_RCC_ClockConfig+0x228>)
 800ca14:	4c29      	ldr	r4, [pc, #164]	; (800cabc <HAL_RCC_ClockConfig+0x22c>)
 800ca16:	4603      	mov	r3, r0
 800ca18:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800ca1a:	4829      	ldr	r0, [pc, #164]	; (800cac0 <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ca1c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800ca20:	4928      	ldr	r1, [pc, #160]	; (800cac4 <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800ca22:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ca24:	5ca2      	ldrb	r2, [r4, r2]
 800ca26:	40d3      	lsrs	r3, r2
 800ca28:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800ca2a:	f7f9 fb61 	bl	80060f0 <HAL_InitTick>
  return HAL_OK;
 800ca2e:	2000      	movs	r0, #0
}
 800ca30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ca34:	f240 21de 	movw	r1, #734	; 0x2de
 800ca38:	4823      	ldr	r0, [pc, #140]	; (800cac8 <HAL_RCC_ClockConfig+0x238>)
 800ca3a:	f7f7 fa87 	bl	8003f4c <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca3e:	4b1d      	ldr	r3, [pc, #116]	; (800cab4 <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800ca40:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca42:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca44:	6819      	ldr	r1, [r3, #0]
 800ca46:	f021 010f 	bic.w	r1, r1, #15
 800ca4a:	430d      	orrs	r5, r1
 800ca4c:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca4e:	681b      	ldr	r3, [r3, #0]
}
 800ca50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ca54:	f240 21dd 	movw	r1, #733	; 0x2dd
 800ca58:	481b      	ldr	r0, [pc, #108]	; (800cac8 <HAL_RCC_ClockConfig+0x238>)
 800ca5a:	f7f7 fa77 	bl	8003f4c <assert_failed>
 800ca5e:	e723      	b.n	800c8a8 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca60:	0190      	lsls	r0, r2, #6
 800ca62:	f53f af6e 	bmi.w	800c942 <HAL_RCC_ClockConfig+0xb2>
 800ca66:	e795      	b.n	800c994 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca68:	0396      	lsls	r6, r2, #14
 800ca6a:	f53f af6a 	bmi.w	800c942 <HAL_RCC_ClockConfig+0xb2>
 800ca6e:	e791      	b.n	800c994 <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ca70:	f240 3109 	movw	r1, #777	; 0x309
 800ca74:	4814      	ldr	r0, [pc, #80]	; (800cac8 <HAL_RCC_ClockConfig+0x238>)
 800ca76:	f7f7 fa69 	bl	8003f4c <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca7a:	6863      	ldr	r3, [r4, #4]
 800ca7c:	e757      	b.n	800c92e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800ca7e:	2003      	movs	r0, #3
 800ca80:	e789      	b.n	800c996 <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800ca82:	2001      	movs	r0, #1
}
 800ca84:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ca86:	f240 3102 	movw	r1, #770	; 0x302
 800ca8a:	480f      	ldr	r0, [pc, #60]	; (800cac8 <HAL_RCC_ClockConfig+0x238>)
 800ca8c:	f7f7 fa5e 	bl	8003f4c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca90:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	e73f      	b.n	800c916 <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800ca96:	f240 3146 	movw	r1, #838	; 0x346
 800ca9a:	480b      	ldr	r0, [pc, #44]	; (800cac8 <HAL_RCC_ClockConfig+0x238>)
 800ca9c:	f7f7 fa56 	bl	8003f4c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800caa0:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caa2:	6823      	ldr	r3, [r4, #0]
 800caa4:	e797      	b.n	800c9d6 <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800caa6:	f240 314d 	movw	r1, #845	; 0x34d
 800caaa:	4807      	ldr	r0, [pc, #28]	; (800cac8 <HAL_RCC_ClockConfig+0x238>)
 800caac:	f7f7 fa4e 	bl	8003f4c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cab0:	6922      	ldr	r2, [r4, #16]
 800cab2:	e7a5      	b.n	800ca00 <HAL_RCC_ClockConfig+0x170>
 800cab4:	40023c00 	.word	0x40023c00
 800cab8:	40023800 	.word	0x40023800
 800cabc:	0802a524 	.word	0x0802a524
 800cac0:	200002dc 	.word	0x200002dc
 800cac4:	2000027c 	.word	0x2000027c
 800cac8:	0802b0d8 	.word	0x0802b0d8

0800cacc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800cacc:	4b01      	ldr	r3, [pc, #4]	; (800cad4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800cace:	6818      	ldr	r0, [r3, #0]
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	2000027c 	.word	0x2000027c

0800cad8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cad8:	4b04      	ldr	r3, [pc, #16]	; (800caec <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800cada:	4905      	ldr	r1, [pc, #20]	; (800caf0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	4a05      	ldr	r2, [pc, #20]	; (800caf4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800cae0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800cae4:	6808      	ldr	r0, [r1, #0]
 800cae6:	5cd3      	ldrb	r3, [r2, r3]
}
 800cae8:	40d8      	lsrs	r0, r3
 800caea:	4770      	bx	lr
 800caec:	40023800 	.word	0x40023800
 800caf0:	2000027c 	.word	0x2000027c
 800caf4:	0802a534 	.word	0x0802a534

0800caf8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800caf8:	4b04      	ldr	r3, [pc, #16]	; (800cb0c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800cafa:	4905      	ldr	r1, [pc, #20]	; (800cb10 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	4a05      	ldr	r2, [pc, #20]	; (800cb14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800cb00:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800cb04:	6808      	ldr	r0, [r1, #0]
 800cb06:	5cd3      	ldrb	r3, [r2, r3]
}
 800cb08:	40d8      	lsrs	r0, r3
 800cb0a:	4770      	bx	lr
 800cb0c:	40023800 	.word	0x40023800
 800cb10:	2000027c 	.word	0x2000027c
 800cb14:	0802a534 	.word	0x0802a534

0800cb18 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cb18:	4b0e      	ldr	r3, [pc, #56]	; (800cb54 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cb1a:	220f      	movs	r2, #15
 800cb1c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cb1e:	689a      	ldr	r2, [r3, #8]
 800cb20:	f002 0203 	and.w	r2, r2, #3
 800cb24:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800cb2c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cb2e:	689a      	ldr	r2, [r3, #8]
 800cb30:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800cb34:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	08db      	lsrs	r3, r3, #3
{
 800cb3a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cb3c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cb40:	4c05      	ldr	r4, [pc, #20]	; (800cb58 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cb42:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cb44:	6823      	ldr	r3, [r4, #0]
}
 800cb46:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cb4a:	f003 030f 	and.w	r3, r3, #15
 800cb4e:	600b      	str	r3, [r1, #0]
}
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	40023800 	.word	0x40023800
 800cb58:	40023c00 	.word	0x40023c00

0800cb5c <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800cb5c:	4a56      	ldr	r2, [pc, #344]	; (800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800cb5e:	6803      	ldr	r3, [r0, #0]
 800cb60:	401a      	ands	r2, r3
{
 800cb62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb66:	4604      	mov	r4, r0
 800cb68:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800cb6a:	2a00      	cmp	r2, #0
 800cb6c:	f000 833f 	beq.w	800d1ee <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cb70:	f013 0601 	ands.w	r6, r3, #1
 800cb74:	d00f      	beq.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800cb76:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800cb78:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800cb7c:	f040 8342 	bne.w	800d204 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cb80:	4a4e      	ldr	r2, [pc, #312]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cb82:	6891      	ldr	r1, [r2, #8]
 800cb84:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800cb88:	6091      	str	r1, [r2, #8]
 800cb8a:	6891      	ldr	r1, [r2, #8]
 800cb8c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cb8e:	fab6 f686 	clz	r6, r6
 800cb92:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cb94:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cb96:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800cb9a:	d014      	beq.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800cb9c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800cb9e:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800cba2:	f040 838d 	bne.w	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cba6:	4945      	ldr	r1, [pc, #276]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cba8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cbac:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800cbb0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800cbb4:	ea42 0205 	orr.w	r2, r2, r5
 800cbb8:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cbbc:	f000 831f 	beq.w	800d1fe <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cbc0:	fab5 f585 	clz	r5, r5
 800cbc4:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cbc6:	02d9      	lsls	r1, r3, #11
 800cbc8:	d514      	bpl.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800cbca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cbcc:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800cbd0:	f040 837d 	bne.w	800d2ce <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cbd4:	4839      	ldr	r0, [pc, #228]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cbd6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cbda:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800cbde:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800cbe2:	ea42 0201 	orr.w	r2, r2, r1
 800cbe6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cbea:	f000 8306 	beq.w	800d1fa <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800cbee:	2900      	cmp	r1, #0
 800cbf0:	bf08      	it	eq
 800cbf2:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800cbf4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800cbf8:	bf18      	it	ne
 800cbfa:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cbfc:	069a      	lsls	r2, r3, #26
 800cbfe:	f140 8099 	bpl.w	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800cc02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cc04:	482e      	ldr	r0, [pc, #184]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800cc06:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800cc0a:	bf18      	it	ne
 800cc0c:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800cc10:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800cc14:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800cc18:	bf14      	ite	ne
 800cc1a:	2301      	movne	r3, #1
 800cc1c:	2300      	moveq	r3, #0
 800cc1e:	4287      	cmp	r7, r0
 800cc20:	bf0c      	ite	eq
 800cc22:	2300      	moveq	r3, #0
 800cc24:	f003 0301 	andne.w	r3, r3, #1
 800cc28:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800cc2c:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800cc30:	4287      	cmp	r7, r0
 800cc32:	bf0c      	ite	eq
 800cc34:	2300      	moveq	r3, #0
 800cc36:	f003 0301 	andne.w	r3, r3, #1
 800cc3a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800cc3e:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800cc42:	4281      	cmp	r1, r0
 800cc44:	bf0c      	ite	eq
 800cc46:	2300      	moveq	r3, #0
 800cc48:	f003 0301 	andne.w	r3, r3, #1
 800cc4c:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800cc50:	4287      	cmp	r7, r0
 800cc52:	bf0c      	ite	eq
 800cc54:	2300      	moveq	r3, #0
 800cc56:	f003 0301 	andne.w	r3, r3, #1
 800cc5a:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800cc5e:	4281      	cmp	r1, r0
 800cc60:	bf0c      	ite	eq
 800cc62:	2300      	moveq	r3, #0
 800cc64:	f003 0301 	andne.w	r3, r3, #1
 800cc68:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800cc6c:	4281      	cmp	r1, r0
 800cc6e:	bf0c      	ite	eq
 800cc70:	2300      	moveq	r3, #0
 800cc72:	f003 0301 	andne.w	r3, r3, #1
 800cc76:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800cc7a:	4281      	cmp	r1, r0
 800cc7c:	bf0c      	ite	eq
 800cc7e:	2300      	moveq	r3, #0
 800cc80:	f003 0301 	andne.w	r3, r3, #1
 800cc84:	b12b      	cbz	r3, 800cc92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800cc86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cc8a:	4b0e      	ldr	r3, [pc, #56]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	f040 8438 	bne.w	800d502 <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cc92:	4b0a      	ldr	r3, [pc, #40]	; (800ccbc <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cc94:	4f0c      	ldr	r7, [pc, #48]	; (800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800cc96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cc9c:	641a      	str	r2, [r3, #64]	; 0x40
 800cc9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cca4:	9301      	str	r3, [sp, #4]
 800cca6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccae:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccb0:	f7fa fcf8 	bl	80076a4 <HAL_GetTick>
 800ccb4:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ccb6:	e010      	b.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800ccb8:	1dfffff9 	.word	0x1dfffff9
 800ccbc:	40023800 	.word	0x40023800
 800ccc0:	00020300 	.word	0x00020300
 800ccc4:	001c0300 	.word	0x001c0300
 800ccc8:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cccc:	f7fa fcea 	bl	80076a4 <HAL_GetTick>
 800ccd0:	eba0 0008 	sub.w	r0, r0, r8
 800ccd4:	2864      	cmp	r0, #100	; 0x64
 800ccd6:	f200 8286 	bhi.w	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	05db      	lsls	r3, r3, #23
 800ccde:	d5f5      	bpl.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cce0:	4fb0      	ldr	r7, [pc, #704]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cce4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cce6:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800ccea:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800ccee:	d011      	beq.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800ccf0:	4291      	cmp	r1, r2
 800ccf2:	d00f      	beq.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ccf4:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ccf6:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ccf8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800ccfc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800cd00:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cd02:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800cd04:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800cd08:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cd0a:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cd0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cd0e:	07d0      	lsls	r0, r2, #31
 800cd10:	f100 836c 	bmi.w	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cd14:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800cd18:	f000 82c9 	beq.w	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x752>
 800cd1c:	49a1      	ldr	r1, [pc, #644]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cd1e:	688a      	ldr	r2, [r1, #8]
 800cd20:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800cd24:	608a      	str	r2, [r1, #8]
 800cd26:	4a9f      	ldr	r2, [pc, #636]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cd28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd2c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800cd2e:	430b      	orrs	r3, r1
 800cd30:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	06da      	lsls	r2, r3, #27
 800cd36:	d510      	bpl.n	800cd5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800cd38:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800cd3a:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800cd3e:	f040 82db 	bne.w	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cd42:	4a98      	ldr	r2, [pc, #608]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cd44:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800cd48:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800cd4c:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800cd50:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800cd54:	4339      	orrs	r1, r7
 800cd56:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cd5a:	045f      	lsls	r7, r3, #17
 800cd5c:	d50f      	bpl.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800cd5e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800cd60:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800cd64:	d003      	beq.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800cd66:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800cd6a:	f040 8299 	bne.w	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cd6e:	488d      	ldr	r0, [pc, #564]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cd70:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cd74:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cd7e:	0418      	lsls	r0, r3, #16
 800cd80:	d50f      	bpl.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800cd82:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800cd84:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800cd88:	d003      	beq.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800cd8a:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800cd8e:	f040 826a 	bne.w	800d266 <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cd92:	4884      	ldr	r0, [pc, #528]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cd94:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cd98:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800cd9c:	430a      	orrs	r2, r1
 800cd9e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cda2:	03d9      	lsls	r1, r3, #15
 800cda4:	d50f      	bpl.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800cda6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800cda8:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800cdac:	d003      	beq.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800cdae:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800cdb2:	f040 8260 	bne.w	800d276 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cdb6:	487b      	ldr	r0, [pc, #492]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cdb8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cdbc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800cdc0:	430a      	orrs	r2, r1
 800cdc2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cdc6:	039a      	lsls	r2, r3, #14
 800cdc8:	d50f      	bpl.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800cdca:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800cdcc:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800cdd0:	d003      	beq.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800cdd2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800cdd6:	f040 825b 	bne.w	800d290 <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cdda:	4872      	ldr	r0, [pc, #456]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cddc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cde0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800cde4:	430a      	orrs	r2, r1
 800cde6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cdea:	065f      	lsls	r7, r3, #25
 800cdec:	d50b      	bpl.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800cdee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cdf0:	2903      	cmp	r1, #3
 800cdf2:	f200 82b3 	bhi.w	800d35c <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cdf6:	486b      	ldr	r0, [pc, #428]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cdf8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cdfc:	f022 0203 	bic.w	r2, r2, #3
 800ce00:	430a      	orrs	r2, r1
 800ce02:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce06:	0618      	lsls	r0, r3, #24
 800ce08:	d50c      	bpl.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800ce0a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ce0c:	f031 020c 	bics.w	r2, r1, #12
 800ce10:	f040 82b4 	bne.w	800d37c <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ce14:	4863      	ldr	r0, [pc, #396]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ce16:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ce1a:	f022 020c 	bic.w	r2, r2, #12
 800ce1e:	430a      	orrs	r2, r1
 800ce20:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce24:	05d9      	lsls	r1, r3, #23
 800ce26:	d50c      	bpl.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800ce28:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ce2a:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800ce2e:	f040 82ad 	bne.w	800d38c <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce32:	485c      	ldr	r0, [pc, #368]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ce34:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ce38:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800ce3c:	430a      	orrs	r2, r1
 800ce3e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce42:	059a      	lsls	r2, r3, #22
 800ce44:	d50c      	bpl.n	800ce60 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800ce46:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ce48:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800ce4c:	f040 82a6 	bne.w	800d39c <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ce50:	4854      	ldr	r0, [pc, #336]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ce52:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ce56:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ce5a:	430a      	orrs	r2, r1
 800ce5c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ce60:	055f      	lsls	r7, r3, #21
 800ce62:	d50c      	bpl.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800ce64:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ce66:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800ce6a:	f040 829f 	bne.w	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ce6e:	484d      	ldr	r0, [pc, #308]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ce70:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ce74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ce78:	430a      	orrs	r2, r1
 800ce7a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ce7e:	0518      	lsls	r0, r3, #20
 800ce80:	d50c      	bpl.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800ce82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ce84:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800ce88:	f040 8298 	bne.w	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ce8c:	4845      	ldr	r0, [pc, #276]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ce8e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ce92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ce96:	430a      	orrs	r2, r1
 800ce98:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ce9c:	04d9      	lsls	r1, r3, #19
 800ce9e:	d50c      	bpl.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800cea0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cea2:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800cea6:	f040 8291 	bne.w	800d3cc <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ceaa:	483e      	ldr	r0, [pc, #248]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ceac:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ceb0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ceb4:	430a      	orrs	r2, r1
 800ceb6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ceba:	049a      	lsls	r2, r3, #18
 800cebc:	d50c      	bpl.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800cebe:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800cec0:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800cec4:	f040 828a 	bne.w	800d3dc <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800cec8:	4836      	ldr	r0, [pc, #216]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ceca:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cece:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ced2:	430a      	orrs	r2, r1
 800ced4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ced8:	025f      	lsls	r7, r3, #9
 800ceda:	d50c      	bpl.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800cedc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800cede:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800cee2:	f040 8222 	bne.w	800d32a <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cee6:	482f      	ldr	r0, [pc, #188]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cee8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ceec:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800cef0:	430a      	orrs	r2, r1
 800cef2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800cef6:	0298      	lsls	r0, r3, #10
 800cef8:	d510      	bpl.n	800cf1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800cefa:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800cefc:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800cf00:	f040 821b 	bne.w	800d33a <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800cf04:	4827      	ldr	r0, [pc, #156]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800cf06:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800cf0a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800cf0e:	bf08      	it	eq
 800cf10:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800cf12:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800cf16:	430a      	orrs	r2, r1
 800cf18:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800cf1c:	f013 0f08 	tst.w	r3, #8
 800cf20:	bf18      	it	ne
 800cf22:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cf24:	0359      	lsls	r1, r3, #13
 800cf26:	d50c      	bpl.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800cf28:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800cf2a:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800cf2e:	f040 821d 	bne.w	800d36c <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf32:	481c      	ldr	r0, [pc, #112]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cf34:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cf38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800cf3c:	430a      	orrs	r2, r1
 800cf3e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800cf42:	021a      	lsls	r2, r3, #8
 800cf44:	d50d      	bpl.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800cf46:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800cf4a:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800cf4e:	f040 81fc 	bne.w	800d34a <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cf52:	4814      	ldr	r0, [pc, #80]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cf54:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cf58:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cf5c:	430a      	orrs	r2, r1
 800cf5e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800cf62:	015f      	lsls	r7, r3, #5
 800cf64:	d50d      	bpl.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800cf66:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800cf6a:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800cf6e:	f040 81ca 	bne.w	800d306 <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800cf72:	480c      	ldr	r0, [pc, #48]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cf74:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cf78:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800cf7c:	430a      	orrs	r2, r1
 800cf7e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cf82:	0118      	lsls	r0, r3, #4
 800cf84:	d510      	bpl.n	800cfa8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800cf86:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800cf8a:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800cf8e:	f040 81c3 	bne.w	800d318 <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cf92:	4804      	ldr	r0, [pc, #16]	; (800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cf94:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800cf98:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800cf9c:	430a      	orrs	r2, r1
 800cf9e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800cfa2:	e001      	b.n	800cfa8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800cfa4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800cfa8:	00d9      	lsls	r1, r3, #3
 800cfaa:	d50d      	bpl.n	800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800cfac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800cfb0:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800cfb4:	f040 8198 	bne.w	800d2e8 <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800cfb8:	49b3      	ldr	r1, [pc, #716]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800cfba:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800cfbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cfc8:	2e01      	cmp	r6, #1
 800cfca:	d003      	beq.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800cfcc:	6823      	ldr	r3, [r4, #0]
 800cfce:	019a      	lsls	r2, r3, #6
 800cfd0:	f140 8083 	bpl.w	800d0da <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cfd4:	4eac      	ldr	r6, [pc, #688]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800cfd6:	6833      	ldr	r3, [r6, #0]
 800cfd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cfdc:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfde:	f7fa fb61 	bl	80076a4 <HAL_GetTick>
 800cfe2:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cfe4:	e005      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800cfe6:	f7fa fb5d 	bl	80076a4 <HAL_GetTick>
 800cfea:	1bc0      	subs	r0, r0, r7
 800cfec:	2864      	cmp	r0, #100	; 0x64
 800cfee:	f200 80fa 	bhi.w	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cff2:	6833      	ldr	r3, [r6, #0]
 800cff4:	011b      	lsls	r3, r3, #4
 800cff6:	d4f6      	bmi.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800cff8:	6863      	ldr	r3, [r4, #4]
 800cffa:	3b32      	subs	r3, #50	; 0x32
 800cffc:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800d000:	f200 816c 	bhi.w	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d004:	6823      	ldr	r3, [r4, #0]
 800d006:	07df      	lsls	r7, r3, #31
 800d008:	d517      	bpl.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d00a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d00c:	b9aa      	cbnz	r2, 800d03a <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800d00e:	68a7      	ldr	r7, [r4, #8]
 800d010:	1eba      	subs	r2, r7, #2
 800d012:	2a05      	cmp	r2, #5
 800d014:	f200 820c 	bhi.w	800d430 <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d018:	499b      	ldr	r1, [pc, #620]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d01a:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d01c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d020:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d024:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800d028:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800d02c:	4332      	orrs	r2, r6
 800d02e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800d032:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800d036:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d03a:	031e      	lsls	r6, r3, #12
 800d03c:	f100 80e9 	bmi.w	800d212 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800d040:	02d8      	lsls	r0, r3, #11
 800d042:	d504      	bpl.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d044:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d046:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800d04a:	f000 80e7 	beq.w	800d21c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d04e:	01d9      	lsls	r1, r3, #7
 800d050:	d514      	bpl.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800d052:	6927      	ldr	r7, [r4, #16]
 800d054:	2f03      	cmp	r7, #3
 800d056:	f200 81f9 	bhi.w	800d44c <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d05a:	498b      	ldr	r1, [pc, #556]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d05c:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d05e:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d062:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d066:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800d06a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800d06e:	4332      	orrs	r2, r6
 800d070:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800d074:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800d078:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d07c:	019a      	lsls	r2, r3, #6
 800d07e:	d51a      	bpl.n	800d0b6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800d080:	6923      	ldr	r3, [r4, #16]
 800d082:	2b03      	cmp	r3, #3
 800d084:	f200 81dc 	bhi.w	800d440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800d088:	68a3      	ldr	r3, [r4, #8]
 800d08a:	3b02      	subs	r3, #2
 800d08c:	2b05      	cmp	r3, #5
 800d08e:	f200 81ec 	bhi.w	800d46a <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800d092:	68e2      	ldr	r2, [r4, #12]
 800d094:	1e93      	subs	r3, r2, #2
 800d096:	2b0d      	cmp	r3, #13
 800d098:	f200 81e0 	bhi.w	800d45c <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d09c:	6923      	ldr	r3, [r4, #16]
 800d09e:	6861      	ldr	r1, [r4, #4]
 800d0a0:	041b      	lsls	r3, r3, #16
 800d0a2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800d0a6:	68a1      	ldr	r1, [r4, #8]
 800d0a8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d0ac:	4976      	ldr	r1, [pc, #472]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d0ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d0b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d0b6:	4e74      	ldr	r6, [pc, #464]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d0b8:	6833      	ldr	r3, [r6, #0]
 800d0ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d0be:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0c0:	f7fa faf0 	bl	80076a4 <HAL_GetTick>
 800d0c4:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d0c6:	e005      	b.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d0c8:	f7fa faec 	bl	80076a4 <HAL_GetTick>
 800d0cc:	1bc0      	subs	r0, r0, r7
 800d0ce:	2864      	cmp	r0, #100	; 0x64
 800d0d0:	f200 8089 	bhi.w	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d0d4:	6833      	ldr	r3, [r6, #0]
 800d0d6:	011b      	lsls	r3, r3, #4
 800d0d8:	d5f6      	bpl.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d0da:	2d01      	cmp	r5, #1
 800d0dc:	d003      	beq.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800d0de:	2000      	movs	r0, #0
}
 800d0e0:	b003      	add	sp, #12
 800d0e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800d0e6:	4d68      	ldr	r5, [pc, #416]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d0e8:	682b      	ldr	r3, [r5, #0]
 800d0ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0ee:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800d0f0:	f7fa fad8 	bl	80076a4 <HAL_GetTick>
 800d0f4:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d0f6:	e004      	b.n	800d102 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d0f8:	f7fa fad4 	bl	80076a4 <HAL_GetTick>
 800d0fc:	1b80      	subs	r0, r0, r6
 800d0fe:	2864      	cmp	r0, #100	; 0x64
 800d100:	d871      	bhi.n	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d102:	682b      	ldr	r3, [r5, #0]
 800d104:	009f      	lsls	r7, r3, #2
 800d106:	d4f7      	bmi.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800d108:	6963      	ldr	r3, [r4, #20]
 800d10a:	3b32      	subs	r3, #50	; 0x32
 800d10c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800d110:	f200 81b9 	bhi.w	800d486 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d114:	6823      	ldr	r3, [r4, #0]
 800d116:	031d      	lsls	r5, r3, #12
 800d118:	f140 81ad 	bpl.w	800d476 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800d11c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d11e:	2a00      	cmp	r2, #0
 800d120:	f040 81a9 	bne.w	800d476 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800d124:	69a3      	ldr	r3, [r4, #24]
 800d126:	3b02      	subs	r3, #2
 800d128:	2b0d      	cmp	r3, #13
 800d12a:	f200 81d5 	bhi.w	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800d12e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d130:	1e59      	subs	r1, r3, #1
 800d132:	291f      	cmp	r1, #31
 800d134:	f200 81c8 	bhi.w	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d138:	4a53      	ldr	r2, [pc, #332]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d13a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d13e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d146:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800d14a:	4303      	orrs	r3, r0
 800d14c:	6960      	ldr	r0, [r4, #20]
 800d14e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800d152:	69a0      	ldr	r0, [r4, #24]
 800d154:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d15c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800d160:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800d164:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d168:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d16c:	6823      	ldr	r3, [r4, #0]
 800d16e:	0299      	lsls	r1, r3, #10
 800d170:	d504      	bpl.n	800d17c <HAL_RCCEx_PeriphCLKConfig+0x620>
 800d172:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d174:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800d178:	f000 818b 	beq.w	800d492 <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d17c:	071a      	lsls	r2, r3, #28
 800d17e:	d522      	bpl.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800d180:	69e3      	ldr	r3, [r4, #28]
 800d182:	3b02      	subs	r3, #2
 800d184:	2b05      	cmp	r3, #5
 800d186:	f200 8199 	bhi.w	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800d18a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d18c:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800d190:	f040 81a8 	bne.w	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d194:	4a3c      	ldr	r2, [pc, #240]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d196:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d198:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d19c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d1a0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800d1a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d1a8:	430b      	orrs	r3, r1
 800d1aa:	69e1      	ldr	r1, [r4, #28]
 800d1ac:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800d1b0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d1b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d1b8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800d1bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d1c0:	4303      	orrs	r3, r0
 800d1c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800d1c6:	4c30      	ldr	r4, [pc, #192]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d1c8:	6823      	ldr	r3, [r4, #0]
 800d1ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1ce:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800d1d0:	f7fa fa68 	bl	80076a4 <HAL_GetTick>
 800d1d4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d1d6:	6823      	ldr	r3, [r4, #0]
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	d480      	bmi.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d1dc:	f7fa fa62 	bl	80076a4 <HAL_GetTick>
 800d1e0:	1b40      	subs	r0, r0, r5
 800d1e2:	2864      	cmp	r0, #100	; 0x64
 800d1e4:	d9f7      	bls.n	800d1d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800d1e6:	2003      	movs	r0, #3
}
 800d1e8:	b003      	add	sp, #12
 800d1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800d1ee:	2172      	movs	r1, #114	; 0x72
 800d1f0:	4826      	ldr	r0, [pc, #152]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800d1f2:	f7f6 feab 	bl	8003f4c <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d1f6:	6823      	ldr	r3, [r4, #0]
 800d1f8:	e4ba      	b.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800d1fa:	2601      	movs	r6, #1
 800d1fc:	e4fa      	b.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800d1fe:	2500      	movs	r5, #0
      plli2sused = 1;
 800d200:	2601      	movs	r6, #1
 800d202:	e4e0      	b.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800d204:	2178      	movs	r1, #120	; 0x78
 800d206:	4821      	ldr	r0, [pc, #132]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800d208:	f7f6 fea0 	bl	8003f4c <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d20c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d20e:	6823      	ldr	r3, [r4, #0]
 800d210:	e4b6      	b.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d212:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d214:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800d218:	f47f af12 	bne.w	800d040 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800d21c:	68e3      	ldr	r3, [r4, #12]
 800d21e:	3b02      	subs	r3, #2
 800d220:	2b0d      	cmp	r3, #13
 800d222:	f200 80f7 	bhi.w	800d414 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800d226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d228:	1e59      	subs	r1, r3, #1
 800d22a:	291f      	cmp	r1, #31
 800d22c:	f200 80f8 	bhi.w	800d420 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d230:	4a15      	ldr	r2, [pc, #84]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d232:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d236:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d23a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d23e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800d242:	4303      	orrs	r3, r0
 800d244:	6860      	ldr	r0, [r4, #4]
 800d246:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800d24a:	68e0      	ldr	r0, [r4, #12]
 800d24c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d250:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d254:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800d258:	f023 031f 	bic.w	r3, r3, #31
 800d25c:	430b      	orrs	r3, r1
 800d25e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	e6f3      	b.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800d266:	f240 1105 	movw	r1, #261	; 0x105
 800d26a:	4808      	ldr	r0, [pc, #32]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800d26c:	f7f6 fe6e 	bl	8003f4c <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d270:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	e58d      	b.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800d276:	f240 110f 	movw	r1, #271	; 0x10f
 800d27a:	4804      	ldr	r0, [pc, #16]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800d27c:	f7f6 fe66 	bl	8003f4c <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d280:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d282:	6823      	ldr	r3, [r4, #0]
 800d284:	e597      	b.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800d286:	bf00      	nop
 800d288:	40023800 	.word	0x40023800
 800d28c:	0802b110 	.word	0x0802b110
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800d290:	f240 1119 	movw	r1, #281	; 0x119
 800d294:	489e      	ldr	r0, [pc, #632]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d296:	f7f6 fe59 	bl	8003f4c <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d29a:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d29c:	6823      	ldr	r3, [r4, #0]
 800d29e:	e59c      	b.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800d2a0:	21fb      	movs	r1, #251	; 0xfb
 800d2a2:	489b      	ldr	r0, [pc, #620]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d2a4:	f7f6 fe52 	bl	8003f4c <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d2a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	e55f      	b.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d2ae:	4899      	ldr	r0, [pc, #612]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800d2b0:	4999      	ldr	r1, [pc, #612]	; (800d518 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800d2b2:	6882      	ldr	r2, [r0, #8]
 800d2b4:	4019      	ands	r1, r3
 800d2b6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800d2ba:	430a      	orrs	r2, r1
 800d2bc:	6082      	str	r2, [r0, #8]
 800d2be:	e532      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800d2c0:	2188      	movs	r1, #136	; 0x88
 800d2c2:	4893      	ldr	r0, [pc, #588]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d2c4:	f7f6 fe42 	bl	8003f4c <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d2c8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	e46b      	b.n	800cba6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800d2ce:	219c      	movs	r1, #156	; 0x9c
 800d2d0:	488f      	ldr	r0, [pc, #572]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d2d2:	f7f6 fe3b 	bl	8003f4c <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d2d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	e47b      	b.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800d2dc:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800d2e0:	488b      	ldr	r0, [pc, #556]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d2e2:	f7f6 fe33 	bl	8003f4c <assert_failed>
 800d2e6:	e68d      	b.n	800d004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800d2e8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800d2ec:	4888      	ldr	r0, [pc, #544]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d2ee:	f7f6 fe2d 	bl	8003f4c <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d2f2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800d2f6:	e65f      	b.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800d2f8:	21f1      	movs	r1, #241	; 0xf1
 800d2fa:	4885      	ldr	r0, [pc, #532]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d2fc:	f7f6 fe26 	bl	8003f4c <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d300:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	e51d      	b.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800d306:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d30a:	4881      	ldr	r0, [pc, #516]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d30c:	f7f6 fe1e 	bl	8003f4c <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d310:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	e62c      	b.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800d318:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800d31c:	487c      	ldr	r0, [pc, #496]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d31e:	f7f6 fe15 	bl	8003f4c <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d322:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	e633      	b.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800d32a:	f240 1173 	movw	r1, #371	; 0x173
 800d32e:	4878      	ldr	r0, [pc, #480]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d330:	f7f6 fe0c 	bl	8003f4c <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d334:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d336:	6823      	ldr	r3, [r4, #0]
 800d338:	e5d5      	b.n	800cee6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800d33a:	f240 117d 	movw	r1, #381	; 0x17d
 800d33e:	4874      	ldr	r0, [pc, #464]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d340:	f7f6 fe04 	bl	8003f4c <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d344:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	e5dc      	b.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800d34a:	f240 119f 	movw	r1, #415	; 0x19f
 800d34e:	4870      	ldr	r0, [pc, #448]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d350:	f7f6 fdfc 	bl	8003f4c <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d354:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d358:	6823      	ldr	r3, [r4, #0]
 800d35a:	e5fa      	b.n	800cf52 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800d35c:	f240 1123 	movw	r1, #291	; 0x123
 800d360:	486b      	ldr	r0, [pc, #428]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d362:	f7f6 fdf3 	bl	8003f4c <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d366:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	e544      	b.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800d36c:	f240 1195 	movw	r1, #405	; 0x195
 800d370:	4867      	ldr	r0, [pc, #412]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d372:	f7f6 fdeb 	bl	8003f4c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d376:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	e5da      	b.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800d37c:	f240 112d 	movw	r1, #301	; 0x12d
 800d380:	4863      	ldr	r0, [pc, #396]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d382:	f7f6 fde3 	bl	8003f4c <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d386:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	e543      	b.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800d38c:	f240 1137 	movw	r1, #311	; 0x137
 800d390:	485f      	ldr	r0, [pc, #380]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d392:	f7f6 fddb 	bl	8003f4c <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d396:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	e54a      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800d39c:	f240 1141 	movw	r1, #321	; 0x141
 800d3a0:	485b      	ldr	r0, [pc, #364]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d3a2:	f7f6 fdd3 	bl	8003f4c <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d3a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	e551      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800d3ac:	f240 114b 	movw	r1, #331	; 0x14b
 800d3b0:	4857      	ldr	r0, [pc, #348]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d3b2:	f7f6 fdcb 	bl	8003f4c <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d3b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	e558      	b.n	800ce6e <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800d3bc:	f240 1155 	movw	r1, #341	; 0x155
 800d3c0:	4853      	ldr	r0, [pc, #332]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d3c2:	f7f6 fdc3 	bl	8003f4c <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d3c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d3c8:	6823      	ldr	r3, [r4, #0]
 800d3ca:	e55f      	b.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800d3cc:	f240 115f 	movw	r1, #351	; 0x15f
 800d3d0:	484f      	ldr	r0, [pc, #316]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d3d2:	f7f6 fdbb 	bl	8003f4c <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d3d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d3d8:	6823      	ldr	r3, [r4, #0]
 800d3da:	e566      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800d3dc:	f240 1169 	movw	r1, #361	; 0x169
 800d3e0:	484b      	ldr	r0, [pc, #300]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d3e2:	f7f6 fdb3 	bl	8003f4c <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d3e6:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d3e8:	6823      	ldr	r3, [r4, #0]
 800d3ea:	e56d      	b.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800d3ec:	f7fa f95a 	bl	80076a4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d3f0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800d3f4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d3f6:	e006      	b.n	800d406 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d3f8:	f7fa f954 	bl	80076a4 <HAL_GetTick>
 800d3fc:	eba0 0008 	sub.w	r0, r0, r8
 800d400:	4548      	cmp	r0, r9
 800d402:	f63f aef0 	bhi.w	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d408:	0799      	lsls	r1, r3, #30
 800d40a:	d5f5      	bpl.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d40c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d40e:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800d412:	e47f      	b.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800d414:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800d418:	483d      	ldr	r0, [pc, #244]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d41a:	f7f6 fd97 	bl	8003f4c <assert_failed>
 800d41e:	e702      	b.n	800d226 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800d420:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800d424:	483a      	ldr	r0, [pc, #232]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d426:	f7f6 fd91 	bl	8003f4c <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d42c:	1e59      	subs	r1, r3, #1
 800d42e:	e6ff      	b.n	800d230 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800d430:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800d434:	4836      	ldr	r0, [pc, #216]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d436:	f7f6 fd89 	bl	8003f4c <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d43a:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d43c:	6823      	ldr	r3, [r4, #0]
 800d43e:	e5eb      	b.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800d440:	f44f 7105 	mov.w	r1, #532	; 0x214
 800d444:	4832      	ldr	r0, [pc, #200]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d446:	f7f6 fd81 	bl	8003f4c <assert_failed>
 800d44a:	e61d      	b.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800d44c:	f240 2105 	movw	r1, #517	; 0x205
 800d450:	482f      	ldr	r0, [pc, #188]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d452:	f7f6 fd7b 	bl	8003f4c <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d456:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	e5fe      	b.n	800d05a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800d45c:	f240 2116 	movw	r1, #534	; 0x216
 800d460:	482b      	ldr	r0, [pc, #172]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d462:	f7f6 fd73 	bl	8003f4c <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d466:	68e2      	ldr	r2, [r4, #12]
 800d468:	e618      	b.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800d46a:	f240 2115 	movw	r1, #533	; 0x215
 800d46e:	4828      	ldr	r0, [pc, #160]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d470:	f7f6 fd6c 	bl	8003f4c <assert_failed>
 800d474:	e60d      	b.n	800d092 <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d476:	02d8      	lsls	r0, r3, #11
 800d478:	f57f ae79 	bpl.w	800d16e <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d47c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d47e:	2a00      	cmp	r2, #0
 800d480:	f47f ae75 	bne.w	800d16e <HAL_RCCEx_PeriphCLKConfig+0x612>
 800d484:	e64e      	b.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800d486:	f44f 7111 	mov.w	r1, #580	; 0x244
 800d48a:	4821      	ldr	r0, [pc, #132]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d48c:	f7f6 fd5e 	bl	8003f4c <assert_failed>
 800d490:	e640      	b.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800d492:	6a20      	ldr	r0, [r4, #32]
 800d494:	2803      	cmp	r0, #3
 800d496:	d82c      	bhi.n	800d4f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d498:	491e      	ldr	r1, [pc, #120]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800d49a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d49e:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d4a2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800d4a6:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800d4aa:	432a      	orrs	r2, r5
 800d4ac:	6965      	ldr	r5, [r4, #20]
 800d4ae:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800d4b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800d4b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800d4ba:	e65f      	b.n	800d17c <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800d4bc:	f240 216f 	movw	r1, #623	; 0x26f
 800d4c0:	4813      	ldr	r0, [pc, #76]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4c2:	f7f6 fd43 	bl	8003f4c <assert_failed>
 800d4c6:	e660      	b.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800d4c8:	f240 214d 	movw	r1, #589	; 0x24d
 800d4cc:	4810      	ldr	r0, [pc, #64]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4ce:	f7f6 fd3d 	bl	8003f4c <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d4d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d4d4:	1e59      	subs	r1, r3, #1
 800d4d6:	e62f      	b.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800d4d8:	f240 214b 	movw	r1, #587	; 0x24b
 800d4dc:	480c      	ldr	r0, [pc, #48]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4de:	f7f6 fd35 	bl	8003f4c <assert_failed>
 800d4e2:	e624      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800d4e4:	480a      	ldr	r0, [pc, #40]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4e6:	f44f 711c 	mov.w	r1, #624	; 0x270
 800d4ea:	f7f6 fd2f 	bl	8003f4c <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d4ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d4f0:	e650      	b.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800d4f2:	4807      	ldr	r0, [pc, #28]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4f4:	f44f 7118 	mov.w	r1, #608	; 0x260
 800d4f8:	f7f6 fd28 	bl	8003f4c <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d4fc:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	e7ca      	b.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800d502:	21b7      	movs	r1, #183	; 0xb7
 800d504:	4802      	ldr	r0, [pc, #8]	; (800d510 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d506:	f7f6 fd21 	bl	8003f4c <assert_failed>
 800d50a:	f7ff bbc2 	b.w	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d50e:	bf00      	nop
 800d510:	0802b110 	.word	0x0802b110
 800d514:	40023800 	.word	0x40023800
 800d518:	0ffffcff 	.word	0x0ffffcff

0800d51c <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d51c:	b308      	cbz	r0, 800d562 <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800d51e:	4b12      	ldr	r3, [pc, #72]	; (800d568 <HAL_RNG_Init+0x4c>)
 800d520:	6802      	ldr	r2, [r0, #0]
 800d522:	429a      	cmp	r2, r3
{
 800d524:	b510      	push	{r4, lr}
 800d526:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800d528:	d003      	beq.n	800d532 <HAL_RNG_Init+0x16>
 800d52a:	21a3      	movs	r1, #163	; 0xa3
 800d52c:	480f      	ldr	r0, [pc, #60]	; (800d56c <HAL_RNG_Init+0x50>)
 800d52e:	f7f6 fd0d 	bl	8003f4c <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d532:	7963      	ldrb	r3, [r4, #5]
 800d534:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d538:	b173      	cbz	r3, 800d558 <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d53a:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800d53c:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d53e:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800d540:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800d544:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800d546:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800d548:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800d54a:	f043 0304 	orr.w	r3, r3, #4
 800d54e:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800d550:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d554:	60a2      	str	r2, [r4, #8]
}
 800d556:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800d558:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800d55a:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800d55c:	f7f8 f848 	bl	80055f0 <HAL_RNG_MspInit>
 800d560:	e7eb      	b.n	800d53a <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800d562:	2001      	movs	r0, #1
}
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop
 800d568:	50060800 	.word	0x50060800
 800d56c:	0802b14c 	.word	0x0802b14c

0800d570 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800d570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d572:	460c      	mov	r4, r1
 800d574:	4615      	mov	r5, r2
 800d576:	b083      	sub	sp, #12
 800d578:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d57a:	4425      	add	r5, r4
 800d57c:	f7fa f892 	bl	80076a4 <HAL_GetTick>
 800d580:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800d582:	f7fa f88f 	bl	80076a4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d586:	4b25      	ldr	r3, [pc, #148]	; (800d61c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800d588:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800d590:	fb05 f303 	mul.w	r3, r5, r3
 800d594:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d596:	6832      	ldr	r2, [r6, #0]
 800d598:	e001      	b.n	800d59e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d59a:	1c63      	adds	r3, r4, #1
 800d59c:	d106      	bne.n	800d5ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d59e:	6893      	ldr	r3, [r2, #8]
 800d5a0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800d5a4:	d1f9      	bne.n	800d59a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800d5a6:	4618      	mov	r0, r3
}
 800d5a8:	b003      	add	sp, #12
 800d5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d5ac:	f7fa f87a 	bl	80076a4 <HAL_GetTick>
 800d5b0:	1bc0      	subs	r0, r0, r7
 800d5b2:	42a8      	cmp	r0, r5
 800d5b4:	d208      	bcs.n	800d5c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800d5b6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800d5b8:	2b00      	cmp	r3, #0
      count--;
 800d5ba:	9b01      	ldr	r3, [sp, #4]
 800d5bc:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800d5c0:	bf08      	it	eq
 800d5c2:	2500      	moveq	r5, #0
      count--;
 800d5c4:	9301      	str	r3, [sp, #4]
 800d5c6:	e7e6      	b.n	800d596 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5c8:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d5cc:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5ce:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d5d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d5d6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5d8:	d014      	beq.n	800d604 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d5da:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800d5dc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d5e0:	d007      	beq.n	800d5f2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800d5e2:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800d5e4:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800d5e6:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800d5e8:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800d5ec:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800d5f0:	e7da      	b.n	800d5a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d600:	601a      	str	r2, [r3, #0]
 800d602:	e7ee      	b.n	800d5e2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d604:	68b2      	ldr	r2, [r6, #8]
 800d606:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d60a:	d002      	beq.n	800d612 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800d60c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d610:	d1e3      	bne.n	800d5da <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	e7de      	b.n	800d5da <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800d61c:	2000027c 	.word	0x2000027c

0800d620 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d624:	4615      	mov	r5, r2
 800d626:	4698      	mov	r8, r3
 800d628:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d62a:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d62c:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d62e:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800d630:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d634:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d636:	f7fa f835 	bl	80076a4 <HAL_GetTick>
 800d63a:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800d63e:	f7fa f831 	bl	80076a4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d642:	4b2e      	ldr	r3, [pc, #184]	; (800d6fc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d644:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800d648:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d64a:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800d64c:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d64e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d652:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d656:	0d1b      	lsrs	r3, r3, #20
 800d658:	fb07 f303 	mul.w	r3, r7, r3
 800d65c:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800d65e:	e00b      	b.n	800d678 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d660:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800d664:	d106      	bne.n	800d674 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d666:	f899 300c 	ldrb.w	r3, [r9, #12]
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d670:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d674:	1c6b      	adds	r3, r5, #1
 800d676:	d106      	bne.n	800d686 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800d678:	6893      	ldr	r3, [r2, #8]
 800d67a:	4023      	ands	r3, r4
 800d67c:	d1f0      	bne.n	800d660 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800d67e:	4618      	mov	r0, r3
}
 800d680:	b003      	add	sp, #12
 800d682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d686:	f7fa f80d 	bl	80076a4 <HAL_GetTick>
 800d68a:	eba0 0008 	sub.w	r0, r0, r8
 800d68e:	42b8      	cmp	r0, r7
 800d690:	d209      	bcs.n	800d6a6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800d692:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800d694:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800d696:	2b00      	cmp	r3, #0
      count--;
 800d698:	9b01      	ldr	r3, [sp, #4]
 800d69a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800d69e:	bf08      	it	eq
 800d6a0:	2700      	moveq	r7, #0
      count--;
 800d6a2:	9301      	str	r3, [sp, #4]
 800d6a4:	e7e8      	b.n	800d678 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6a6:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d6aa:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6ac:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d6b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d6b4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6b6:	d014      	beq.n	800d6e2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d6b8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800d6ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d6be:	d007      	beq.n	800d6d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800d6c0:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800d6c2:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800d6c4:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800d6c6:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800d6ca:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800d6ce:	e7d7      	b.n	800d680 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d6d6:	601a      	str	r2, [r3, #0]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	e7ee      	b.n	800d6c0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6e2:	68b2      	ldr	r2, [r6, #8]
 800d6e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d6e8:	d002      	beq.n	800d6f0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800d6ea:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d6ee:	d1e3      	bne.n	800d6b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	e7de      	b.n	800d6b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800d6fa:	bf00      	nop
 800d6fc:	2000027c 	.word	0x2000027c

0800d700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	4613      	mov	r3, r2
 800d706:	460e      	mov	r6, r1
 800d708:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d70a:	9201      	str	r2, [sp, #4]
 800d70c:	460a      	mov	r2, r1
 800d70e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d712:	f7ff ff85 	bl	800d620 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800d716:	9b01      	ldr	r3, [sp, #4]
 800d718:	bb58      	cbnz	r0, 800d772 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d71a:	4919      	ldr	r1, [pc, #100]	; (800d780 <SPI_EndRxTxTransaction+0x80>)
 800d71c:	4a19      	ldr	r2, [pc, #100]	; (800d784 <SPI_EndRxTxTransaction+0x84>)
 800d71e:	6808      	ldr	r0, [r1, #0]
 800d720:	fba2 2000 	umull	r2, r0, r2, r0
 800d724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d728:	0d40      	lsrs	r0, r0, #21
 800d72a:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d72e:	686a      	ldr	r2, [r5, #4]
 800d730:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d734:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d736:	d107      	bne.n	800d748 <SPI_EndRxTxTransaction+0x48>
 800d738:	e012      	b.n	800d760 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800d73a:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d73c:	682a      	ldr	r2, [r5, #0]
      count--;
 800d73e:	3c01      	subs	r4, #1
 800d740:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d742:	6894      	ldr	r4, [r2, #8]
 800d744:	0622      	lsls	r2, r4, #24
 800d746:	d502      	bpl.n	800d74e <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800d748:	9c03      	ldr	r4, [sp, #12]
 800d74a:	2c00      	cmp	r4, #0
 800d74c:	d1f5      	bne.n	800d73a <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d74e:	4632      	mov	r2, r6
 800d750:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d754:	4628      	mov	r0, r5
 800d756:	f7ff ff63 	bl	800d620 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800d75a:	b950      	cbnz	r0, 800d772 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800d75c:	b004      	add	sp, #16
 800d75e:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d760:	461a      	mov	r2, r3
 800d762:	4631      	mov	r1, r6
 800d764:	4628      	mov	r0, r5
 800d766:	9301      	str	r3, [sp, #4]
 800d768:	f7ff ff02 	bl	800d570 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800d76c:	9b01      	ldr	r3, [sp, #4]
 800d76e:	2800      	cmp	r0, #0
 800d770:	d0ed      	beq.n	800d74e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d772:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800d774:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d776:	f043 0320 	orr.w	r3, r3, #32
 800d77a:	662b      	str	r3, [r5, #96]	; 0x60
}
 800d77c:	b004      	add	sp, #16
 800d77e:	bd70      	pop	{r4, r5, r6, pc}
 800d780:	2000027c 	.word	0x2000027c
 800d784:	165e9f81 	.word	0x165e9f81

0800d788 <HAL_SPI_Init>:
  if (hspi == NULL)
 800d788:	2800      	cmp	r0, #0
 800d78a:	f000 8128 	beq.w	800d9de <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800d78e:	6802      	ldr	r2, [r0, #0]
 800d790:	4ba7      	ldr	r3, [pc, #668]	; (800da30 <HAL_SPI_Init+0x2a8>)
 800d792:	49a8      	ldr	r1, [pc, #672]	; (800da34 <HAL_SPI_Init+0x2ac>)
{
 800d794:	b570      	push	{r4, r5, r6, lr}
 800d796:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800d798:	48a7      	ldr	r0, [pc, #668]	; (800da38 <HAL_SPI_Init+0x2b0>)
 800d79a:	429a      	cmp	r2, r3
 800d79c:	bf18      	it	ne
 800d79e:	4282      	cmpne	r2, r0
 800d7a0:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800d7a4:	bf14      	ite	ne
 800d7a6:	2301      	movne	r3, #1
 800d7a8:	2300      	moveq	r3, #0
 800d7aa:	428a      	cmp	r2, r1
 800d7ac:	bf0c      	ite	eq
 800d7ae:	2300      	moveq	r3, #0
 800d7b0:	f003 0301 	andne.w	r3, r3, #1
 800d7b4:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800d7b8:	4282      	cmp	r2, r0
 800d7ba:	bf0c      	ite	eq
 800d7bc:	2300      	moveq	r3, #0
 800d7be:	f003 0301 	andne.w	r3, r3, #1
 800d7c2:	428a      	cmp	r2, r1
 800d7c4:	bf0c      	ite	eq
 800d7c6:	2300      	moveq	r3, #0
 800d7c8:	f003 0301 	andne.w	r3, r3, #1
 800d7cc:	b11b      	cbz	r3, 800d7d6 <HAL_SPI_Init+0x4e>
 800d7ce:	4b9b      	ldr	r3, [pc, #620]	; (800da3c <HAL_SPI_Init+0x2b4>)
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	f040 80fe 	bne.w	800d9d2 <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800d7d6:	6863      	ldr	r3, [r4, #4]
 800d7d8:	b11b      	cbz	r3, 800d7e2 <HAL_SPI_Init+0x5a>
 800d7da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d7de:	f040 80cd 	bne.w	800d97c <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800d7e2:	68a3      	ldr	r3, [r4, #8]
 800d7e4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800d7e8:	d003      	beq.n	800d7f2 <HAL_SPI_Init+0x6a>
 800d7ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7ee:	f040 80db 	bne.w	800d9a8 <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800d7f2:	68e2      	ldr	r2, [r4, #12]
 800d7f4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800d7f8:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800d7fc:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800d800:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d804:	bf18      	it	ne
 800d806:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800d80a:	bf14      	ite	ne
 800d80c:	2301      	movne	r3, #1
 800d80e:	2300      	moveq	r3, #0
 800d810:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800d814:	bf0c      	ite	eq
 800d816:	2300      	moveq	r3, #0
 800d818:	f003 0301 	andne.w	r3, r3, #1
 800d81c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d820:	bf0c      	ite	eq
 800d822:	2300      	moveq	r3, #0
 800d824:	f003 0301 	andne.w	r3, r3, #1
 800d828:	b12b      	cbz	r3, 800d836 <HAL_SPI_Init+0xae>
 800d82a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d82e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800d832:	f040 80f7 	bne.w	800da24 <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800d836:	69a3      	ldr	r3, [r4, #24]
 800d838:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800d83c:	d003      	beq.n	800d846 <HAL_SPI_Init+0xbe>
 800d83e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d842:	f040 80a1 	bne.w	800d988 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800d846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d848:	f033 0308 	bics.w	r3, r3, #8
 800d84c:	f040 80a6 	bne.w	800d99c <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800d850:	69e3      	ldr	r3, [r4, #28]
 800d852:	f023 0318 	bic.w	r3, r3, #24
 800d856:	2b20      	cmp	r3, #32
 800d858:	d002      	beq.n	800d860 <HAL_SPI_Init+0xd8>
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f040 80d6 	bne.w	800da0c <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800d860:	6a23      	ldr	r3, [r4, #32]
 800d862:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d866:	f040 80a8 	bne.w	800d9ba <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800d86a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d86c:	f033 0210 	bics.w	r2, r3, #16
 800d870:	d17b      	bne.n	800d96a <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d872:	2b00      	cmp	r3, #0
 800d874:	d16e      	bne.n	800d954 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800d876:	6923      	ldr	r3, [r4, #16]
 800d878:	f033 0302 	bics.w	r3, r3, #2
 800d87c:	f040 80c0 	bne.w	800da00 <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800d880:	6963      	ldr	r3, [r4, #20]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d904      	bls.n	800d890 <HAL_SPI_Init+0x108>
 800d886:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800d88a:	486d      	ldr	r0, [pc, #436]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800d88c:	f7f6 fb5e 	bl	8003f4c <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d890:	6863      	ldr	r3, [r4, #4]
 800d892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d896:	f000 80a4 	beq.w	800d9e2 <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d89a:	2300      	movs	r3, #0
 800d89c:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d89e:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800d8a0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8a4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800d8a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f000 808b 	beq.w	800d9c6 <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800d8b0:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800d8b2:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d8b4:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800d8b6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800d8ba:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d8bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800d8c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d8c4:	bf8c      	ite	hi
 800d8c6:	f04f 0c00 	movhi.w	ip, #0
 800d8ca:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800d8ce:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d8d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d8d4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800d8d8:	d16c      	bne.n	800d9b4 <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d8da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d8dc:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800d8e0:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d8e2:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d8e6:	6923      	ldr	r3, [r4, #16]
 800d8e8:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800d8ec:	68a1      	ldr	r1, [r4, #8]
 800d8ee:	f003 0302 	and.w	r3, r3, #2
 800d8f2:	69a6      	ldr	r6, [r4, #24]
 800d8f4:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800d8f8:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d8fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d8fc:	431a      	orrs	r2, r3
 800d8fe:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d900:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d904:	f003 0301 	and.w	r3, r3, #1
 800d908:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d90c:	f003 0310 	and.w	r3, r3, #16
 800d910:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d912:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d914:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d918:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800d91c:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d920:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d922:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d926:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d92a:	430a      	orrs	r2, r1
 800d92c:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d92e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d930:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d934:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d938:	430a      	orrs	r2, r1
 800d93a:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d93c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d93e:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800d940:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d942:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d944:	69eb      	ldr	r3, [r5, #28]
 800d946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d94a:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d94c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d94e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800d952:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800d954:	69e3      	ldr	r3, [r4, #28]
 800d956:	f023 0318 	bic.w	r3, r3, #24
 800d95a:	2b20      	cmp	r3, #32
 800d95c:	d001      	beq.n	800d962 <HAL_SPI_Init+0x1da>
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d15a      	bne.n	800da18 <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d962:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d964:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800d968:	e799      	b.n	800d89e <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800d96a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800d96e:	4834      	ldr	r0, [pc, #208]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800d970:	f7f6 faec 	bl	8003f4c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1ec      	bne.n	800d954 <HAL_SPI_Init+0x1cc>
 800d97a:	e77c      	b.n	800d876 <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800d97c:	f240 1147 	movw	r1, #327	; 0x147
 800d980:	482f      	ldr	r0, [pc, #188]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800d982:	f7f6 fae3 	bl	8003f4c <assert_failed>
 800d986:	e72c      	b.n	800d7e2 <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800d988:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800d98c:	482c      	ldr	r0, [pc, #176]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800d98e:	f7f6 fadd 	bl	8003f4c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800d992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d994:	f033 0308 	bics.w	r3, r3, #8
 800d998:	f43f af5a 	beq.w	800d850 <HAL_SPI_Init+0xc8>
 800d99c:	f240 114b 	movw	r1, #331	; 0x14b
 800d9a0:	4827      	ldr	r0, [pc, #156]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800d9a2:	f7f6 fad3 	bl	8003f4c <assert_failed>
 800d9a6:	e753      	b.n	800d850 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800d9a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800d9ac:	4824      	ldr	r0, [pc, #144]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800d9ae:	f7f6 facd 	bl	8003f4c <assert_failed>
 800d9b2:	e71e      	b.n	800d7f2 <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9b4:	2000      	movs	r0, #0
 800d9b6:	62a0      	str	r0, [r4, #40]	; 0x28
 800d9b8:	e792      	b.n	800d8e0 <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800d9ba:	f240 114d 	movw	r1, #333	; 0x14d
 800d9be:	4820      	ldr	r0, [pc, #128]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800d9c0:	f7f6 fac4 	bl	8003f4c <assert_failed>
 800d9c4:	e751      	b.n	800d86a <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800d9c6:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800d9c8:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800d9cc:	f7f7 fe26 	bl	800561c <HAL_SPI_MspInit>
 800d9d0:	e76e      	b.n	800d8b0 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800d9d2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800d9d6:	481a      	ldr	r0, [pc, #104]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800d9d8:	f7f6 fab8 	bl	8003f4c <assert_failed>
 800d9dc:	e6fb      	b.n	800d7d6 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800d9de:	2001      	movs	r0, #1
}
 800d9e0:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800d9e2:	69e3      	ldr	r3, [r4, #28]
 800d9e4:	f023 0318 	bic.w	r3, r3, #24
 800d9e8:	2b20      	cmp	r3, #32
 800d9ea:	f43f af58 	beq.w	800d89e <HAL_SPI_Init+0x116>
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f43f af55 	beq.w	800d89e <HAL_SPI_Init+0x116>
 800d9f4:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800d9f8:	4811      	ldr	r0, [pc, #68]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800d9fa:	f7f6 faa7 	bl	8003f4c <assert_failed>
 800d9fe:	e74e      	b.n	800d89e <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800da00:	f240 1151 	movw	r1, #337	; 0x151
 800da04:	480e      	ldr	r0, [pc, #56]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800da06:	f7f6 faa1 	bl	8003f4c <assert_failed>
 800da0a:	e739      	b.n	800d880 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800da0c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800da10:	480b      	ldr	r0, [pc, #44]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800da12:	f7f6 fa9b 	bl	8003f4c <assert_failed>
 800da16:	e723      	b.n	800d860 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800da18:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800da1c:	4808      	ldr	r0, [pc, #32]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800da1e:	f7f6 fa95 	bl	8003f4c <assert_failed>
 800da22:	e79e      	b.n	800d962 <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800da24:	f240 1149 	movw	r1, #329	; 0x149
 800da28:	4805      	ldr	r0, [pc, #20]	; (800da40 <HAL_SPI_Init+0x2b8>)
 800da2a:	f7f6 fa8f 	bl	8003f4c <assert_failed>
 800da2e:	e702      	b.n	800d836 <HAL_SPI_Init+0xae>
 800da30:	40013000 	.word	0x40013000
 800da34:	40003c00 	.word	0x40003c00
 800da38:	40003800 	.word	0x40003800
 800da3c:	40015400 	.word	0x40015400
 800da40:	0802b184 	.word	0x0802b184

0800da44 <HAL_SPI_Transmit>:
{
 800da44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da48:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800da4a:	6883      	ldr	r3, [r0, #8]
{
 800da4c:	b082      	sub	sp, #8
 800da4e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800da50:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800da54:	460f      	mov	r7, r1
 800da56:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800da58:	d171      	bne.n	800db3e <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800da5a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d076      	beq.n	800db50 <HAL_SPI_Transmit+0x10c>
 800da62:	2301      	movs	r3, #1
 800da64:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800da68:	f7f9 fe1c 	bl	80076a4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800da6c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800da70:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800da72:	2b01      	cmp	r3, #1
 800da74:	b2d8      	uxtb	r0, r3
 800da76:	d009      	beq.n	800da8c <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800da78:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800da7a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800da7c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800da7e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800da82:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800da86:	b002      	add	sp, #8
 800da88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800da8c:	2f00      	cmp	r7, #0
 800da8e:	d0f4      	beq.n	800da7a <HAL_SPI_Transmit+0x36>
 800da90:	fab8 f388 	clz	r3, r8
 800da94:	095b      	lsrs	r3, r3, #5
 800da96:	f1b8 0f00 	cmp.w	r8, #0
 800da9a:	d0ee      	beq.n	800da7a <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800da9c:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800da9e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800daa0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800daa4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800daa8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800daaa:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800daae:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dab2:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800dab4:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800dab8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dabc:	68a3      	ldr	r3, [r4, #8]
 800dabe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800dac2:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dac4:	d07a      	beq.n	800dbbc <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	0652      	lsls	r2, r2, #25
 800daca:	d403      	bmi.n	800dad4 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dad2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dad4:	68e2      	ldr	r2, [r4, #12]
 800dad6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dada:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dadc:	d93c      	bls.n	800db58 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dade:	b112      	cbz	r2, 800dae6 <HAL_SPI_Transmit+0xa2>
 800dae0:	f1b8 0f01 	cmp.w	r8, #1
 800dae4:	d107      	bne.n	800daf6 <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dae6:	f837 2b02 	ldrh.w	r2, [r7], #2
 800daea:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800daec:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800daee:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800daf0:	3a01      	subs	r2, #1
 800daf2:	b292      	uxth	r2, r2
 800daf4:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800daf6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800daf8:	b292      	uxth	r2, r2
 800dafa:	b992      	cbnz	r2, 800db22 <HAL_SPI_Transmit+0xde>
 800dafc:	e072      	b.n	800dbe4 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dafe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800db00:	f832 1b02 	ldrh.w	r1, [r2], #2
 800db04:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800db06:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800db0a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800db0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800db10:	fa1f fc8c 	uxth.w	ip, ip
 800db14:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800db18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d061      	beq.n	800dbe4 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800db20:	6823      	ldr	r3, [r4, #0]
 800db22:	689a      	ldr	r2, [r3, #8]
 800db24:	0797      	lsls	r7, r2, #30
 800db26:	d4ea      	bmi.n	800dafe <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db28:	f7f9 fdbc 	bl	80076a4 <HAL_GetTick>
 800db2c:	1b80      	subs	r0, r0, r6
 800db2e:	42a8      	cmp	r0, r5
 800db30:	d301      	bcc.n	800db36 <HAL_SPI_Transmit+0xf2>
 800db32:	1c68      	adds	r0, r5, #1
 800db34:	d101      	bne.n	800db3a <HAL_SPI_Transmit+0xf6>
 800db36:	2d00      	cmp	r5, #0
 800db38:	d1ee      	bne.n	800db18 <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800db3a:	2003      	movs	r0, #3
 800db3c:	e79d      	b.n	800da7a <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800db3e:	f240 313d 	movw	r1, #829	; 0x33d
 800db42:	4838      	ldr	r0, [pc, #224]	; (800dc24 <HAL_SPI_Transmit+0x1e0>)
 800db44:	f7f6 fa02 	bl	8003f4c <assert_failed>
  __HAL_LOCK(hspi);
 800db48:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d188      	bne.n	800da62 <HAL_SPI_Transmit+0x1e>
 800db50:	2002      	movs	r0, #2
}
 800db52:	b002      	add	sp, #8
 800db54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800db58:	b112      	cbz	r2, 800db60 <HAL_SPI_Transmit+0x11c>
 800db5a:	f1b8 0f01 	cmp.w	r8, #1
 800db5e:	d10b      	bne.n	800db78 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800db60:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800db62:	b292      	uxth	r2, r2
 800db64:	2a01      	cmp	r2, #1
 800db66:	d953      	bls.n	800dc10 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db68:	f837 2b02 	ldrh.w	r2, [r7], #2
 800db6c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800db6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800db70:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800db72:	3b02      	subs	r3, #2
 800db74:	b29b      	uxth	r3, r3
 800db76:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800db78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	b983      	cbnz	r3, 800dba0 <HAL_SPI_Transmit+0x15c>
 800db7e:	e031      	b.n	800dbe4 <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800db80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800db82:	b29b      	uxth	r3, r3
 800db84:	2b01      	cmp	r3, #1
 800db86:	d922      	bls.n	800dbce <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800db8a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800db8e:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800db90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800db92:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800db94:	3b02      	subs	r3, #2
 800db96:	b29b      	uxth	r3, r3
 800db98:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800db9a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800db9c:	b289      	uxth	r1, r1
 800db9e:	b309      	cbz	r1, 800dbe4 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dba0:	6822      	ldr	r2, [r4, #0]
 800dba2:	6893      	ldr	r3, [r2, #8]
 800dba4:	0799      	lsls	r1, r3, #30
 800dba6:	d4eb      	bmi.n	800db80 <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dba8:	f7f9 fd7c 	bl	80076a4 <HAL_GetTick>
 800dbac:	1b80      	subs	r0, r0, r6
 800dbae:	42a8      	cmp	r0, r5
 800dbb0:	d301      	bcc.n	800dbb6 <HAL_SPI_Transmit+0x172>
 800dbb2:	1c6b      	adds	r3, r5, #1
 800dbb4:	d1c1      	bne.n	800db3a <HAL_SPI_Transmit+0xf6>
 800dbb6:	2d00      	cmp	r5, #0
 800dbb8:	d1ef      	bne.n	800db9a <HAL_SPI_Transmit+0x156>
 800dbba:	e7be      	b.n	800db3a <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dbca:	601a      	str	r2, [r3, #0]
 800dbcc:	e77b      	b.n	800dac6 <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dbce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800dbd4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800dbd6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800dbd8:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800dbda:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800dbdc:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800dbde:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800dbe0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800dbe2:	e7da      	b.n	800db9a <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dbe4:	4632      	mov	r2, r6
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f7ff fd89 	bl	800d700 <SPI_EndRxTxTransaction>
 800dbee:	b108      	cbz	r0, 800dbf4 <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dbf0:	2320      	movs	r3, #32
 800dbf2:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dbf4:	68a3      	ldr	r3, [r4, #8]
 800dbf6:	b933      	cbnz	r3, 800dc06 <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dbf8:	6822      	ldr	r2, [r4, #0]
 800dbfa:	9301      	str	r3, [sp, #4]
 800dbfc:	68d3      	ldr	r3, [r2, #12]
 800dbfe:	9301      	str	r3, [sp, #4]
 800dc00:	6893      	ldr	r3, [r2, #8]
 800dc02:	9301      	str	r3, [sp, #4]
 800dc04:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc06:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800dc08:	3800      	subs	r0, #0
 800dc0a:	bf18      	it	ne
 800dc0c:	2001      	movne	r0, #1
error:
 800dc0e:	e734      	b.n	800da7a <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dc10:	783a      	ldrb	r2, [r7, #0]
 800dc12:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800dc14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800dc16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800dc18:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800dc1a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800dc1c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800dc1e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800dc20:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800dc22:	e7a9      	b.n	800db78 <HAL_SPI_Transmit+0x134>
 800dc24:	0802b184 	.word	0x0802b184

0800dc28 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc28:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc2a:	4a12      	ldr	r2, [pc, #72]	; (800dc74 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800dc30:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc32:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800dc34:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800dc36:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800dc38:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc3a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc3e:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800dc40:	680d      	ldr	r5, [r1, #0]
 800dc42:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc44:	688d      	ldr	r5, [r1, #8]
 800dc46:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc4a:	4d0b      	ldr	r5, [pc, #44]	; (800dc78 <TIM_OC5_SetConfig+0x50>)
 800dc4c:	42a8      	cmp	r0, r5
 800dc4e:	d00a      	beq.n	800dc66 <TIM_OC5_SetConfig+0x3e>
 800dc50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800dc54:	42a8      	cmp	r0, r5
 800dc56:	d006      	beq.n	800dc66 <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dc58:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800dc5a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800dc5c:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800dc5e:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc60:	6203      	str	r3, [r0, #32]
}
 800dc62:	bc30      	pop	{r4, r5}
 800dc64:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc66:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dc6a:	694d      	ldr	r5, [r1, #20]
 800dc6c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800dc70:	e7f2      	b.n	800dc58 <TIM_OC5_SetConfig+0x30>
 800dc72:	bf00      	nop
 800dc74:	fffeff8f 	.word	0xfffeff8f
 800dc78:	40010000 	.word	0x40010000

0800dc7c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc7c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dc7e:	4a12      	ldr	r2, [pc, #72]	; (800dcc8 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800dc84:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc86:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800dc88:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800dc8a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800dc8c:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dc8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dc92:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc94:	680d      	ldr	r5, [r1, #0]
 800dc96:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dc9a:	688d      	ldr	r5, [r1, #8]
 800dc9c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dca0:	4d0a      	ldr	r5, [pc, #40]	; (800dccc <TIM_OC6_SetConfig+0x50>)
 800dca2:	42a8      	cmp	r0, r5
 800dca4:	d00a      	beq.n	800dcbc <TIM_OC6_SetConfig+0x40>
 800dca6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800dcaa:	42a8      	cmp	r0, r5
 800dcac:	d006      	beq.n	800dcbc <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dcae:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800dcb0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800dcb2:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800dcb4:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcb6:	6203      	str	r3, [r0, #32]
}
 800dcb8:	bc30      	pop	{r4, r5}
 800dcba:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dcbc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dcc0:	694d      	ldr	r5, [r1, #20]
 800dcc2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800dcc6:	e7f2      	b.n	800dcae <TIM_OC6_SetConfig+0x32>
 800dcc8:	feff8fff 	.word	0xfeff8fff
 800dccc:	40010000 	.word	0x40010000

0800dcd0 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcd0:	6a03      	ldr	r3, [r0, #32]
 800dcd2:	f023 0301 	bic.w	r3, r3, #1
{
 800dcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcda:	6203      	str	r3, [r0, #32]
{
 800dcdc:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800dcde:	6a05      	ldr	r5, [r0, #32]
{
 800dce0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800dce2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dce6:	4b27      	ldr	r3, [pc, #156]	; (800dd84 <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 800dce8:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 800dcec:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 800dcee:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dcf0:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800dcf2:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 800dcf4:	688b      	ldr	r3, [r1, #8]
 800dcf6:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dcf8:	4b23      	ldr	r3, [pc, #140]	; (800dd88 <TIM_OC1_SetConfig+0xb8>)
 800dcfa:	4298      	cmp	r0, r3
 800dcfc:	d00b      	beq.n	800dd16 <TIM_OC1_SetConfig+0x46>
 800dcfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd02:	4298      	cmp	r0, r3
 800dd04:	d007      	beq.n	800dd16 <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800dd06:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800dd08:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800dd0c:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800dd0e:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800dd10:	6225      	str	r5, [r4, #32]
}
 800dd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800dd16:	68f3      	ldr	r3, [r6, #12]
 800dd18:	f033 0208 	bics.w	r2, r3, #8
 800dd1c:	d120      	bne.n	800dd60 <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd1e:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800dd22:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800dd24:	69b3      	ldr	r3, [r6, #24]
 800dd26:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd2a:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800dd2e:	d11e      	bne.n	800dd6e <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800dd30:	6973      	ldr	r3, [r6, #20]
 800dd32:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800dd36:	d106      	bne.n	800dd46 <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dd38:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800dd3c:	69b1      	ldr	r1, [r6, #24]
 800dd3e:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800dd40:	ea42 0803 	orr.w	r8, r2, r3
 800dd44:	e7df      	b.n	800dd06 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800dd46:	f641 316d 	movw	r1, #7021	; 0x1b6d
 800dd4a:	4810      	ldr	r0, [pc, #64]	; (800dd8c <TIM_OC1_SetConfig+0xbc>)
 800dd4c:	f7f6 f8fe 	bl	8003f4c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dd50:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800dd54:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 800dd56:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800dd58:	430a      	orrs	r2, r1
 800dd5a:	ea42 0803 	orr.w	r8, r2, r3
 800dd5e:	e7d2      	b.n	800dd06 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800dd60:	f641 315f 	movw	r1, #7007	; 0x1b5f
 800dd64:	4809      	ldr	r0, [pc, #36]	; (800dd8c <TIM_OC1_SetConfig+0xbc>)
 800dd66:	f7f6 f8f1 	bl	8003f4c <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800dd6a:	68f3      	ldr	r3, [r6, #12]
 800dd6c:	e7d7      	b.n	800dd1e <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800dd6e:	f641 316c 	movw	r1, #7020	; 0x1b6c
 800dd72:	4806      	ldr	r0, [pc, #24]	; (800dd8c <TIM_OC1_SetConfig+0xbc>)
 800dd74:	f7f6 f8ea 	bl	8003f4c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800dd78:	6973      	ldr	r3, [r6, #20]
 800dd7a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800dd7e:	d0db      	beq.n	800dd38 <TIM_OC1_SetConfig+0x68>
 800dd80:	e7e1      	b.n	800dd46 <TIM_OC1_SetConfig+0x76>
 800dd82:	bf00      	nop
 800dd84:	fffeff8c 	.word	0xfffeff8c
 800dd88:	40010000 	.word	0x40010000
 800dd8c:	0802b1bc 	.word	0x0802b1bc

0800dd90 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dd90:	6a03      	ldr	r3, [r0, #32]
 800dd92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800dd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dd9a:	6203      	str	r3, [r0, #32]
{
 800dd9c:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800dd9e:	6a05      	ldr	r5, [r0, #32]
{
 800dda0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800dda2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dda6:	4b29      	ldr	r3, [pc, #164]	; (800de4c <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 800dda8:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 800ddac:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 800ddae:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ddb0:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800ddb2:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ddb4:	688b      	ldr	r3, [r1, #8]
 800ddb6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ddba:	4b25      	ldr	r3, [pc, #148]	; (800de50 <TIM_OC3_SetConfig+0xc0>)
 800ddbc:	4298      	cmp	r0, r3
 800ddbe:	d00b      	beq.n	800ddd8 <TIM_OC3_SetConfig+0x48>
 800ddc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ddc4:	4298      	cmp	r0, r3
 800ddc6:	d007      	beq.n	800ddd8 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800ddc8:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ddca:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800ddce:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800ddd0:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800ddd2:	6225      	str	r5, [r4, #32]
}
 800ddd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ddd8:	68f3      	ldr	r3, [r6, #12]
 800ddda:	f033 0208 	bics.w	r2, r3, #8
 800ddde:	d123      	bne.n	800de28 <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 800dde0:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dde4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800dde8:	69b3      	ldr	r3, [r6, #24]
 800ddea:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800ddee:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ddf2:	d120      	bne.n	800de36 <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ddf4:	6973      	ldr	r3, [r6, #20]
 800ddf6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ddfa:	d107      	bne.n	800de0c <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ddfc:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de00:	69b1      	ldr	r1, [r6, #24]
 800de02:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800de06:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800de0a:	e7dd      	b.n	800ddc8 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800de0c:	f641 4103 	movw	r1, #7171	; 0x1c03
 800de10:	4810      	ldr	r0, [pc, #64]	; (800de54 <TIM_OC3_SetConfig+0xc4>)
 800de12:	f7f6 f89b 	bl	8003f4c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de16:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de1a:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de1c:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de1e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800de22:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800de26:	e7cf      	b.n	800ddc8 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800de28:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 800de2c:	4809      	ldr	r0, [pc, #36]	; (800de54 <TIM_OC3_SetConfig+0xc4>)
 800de2e:	f7f6 f88d 	bl	8003f4c <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800de32:	68f3      	ldr	r3, [r6, #12]
 800de34:	e7d4      	b.n	800dde0 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800de36:	f641 4102 	movw	r1, #7170	; 0x1c02
 800de3a:	4806      	ldr	r0, [pc, #24]	; (800de54 <TIM_OC3_SetConfig+0xc4>)
 800de3c:	f7f6 f886 	bl	8003f4c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800de40:	6973      	ldr	r3, [r6, #20]
 800de42:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800de46:	d0d9      	beq.n	800ddfc <TIM_OC3_SetConfig+0x6c>
 800de48:	e7e0      	b.n	800de0c <TIM_OC3_SetConfig+0x7c>
 800de4a:	bf00      	nop
 800de4c:	fffeff8c 	.word	0xfffeff8c
 800de50:	40010000 	.word	0x40010000
 800de54:	0802b1bc 	.word	0x0802b1bc

0800de58 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de58:	6a03      	ldr	r3, [r0, #32]
 800de5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800de5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de60:	6203      	str	r3, [r0, #32]
{
 800de62:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 800de64:	6a06      	ldr	r6, [r0, #32]
{
 800de66:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 800de68:	6842      	ldr	r2, [r0, #4]
{
 800de6a:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 800de6c:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800de6e:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800de72:	4b16      	ldr	r3, [pc, #88]	; (800decc <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de74:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800de76:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de78:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800de7c:	68ab      	ldr	r3, [r5, #8]
 800de7e:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de82:	4b13      	ldr	r3, [pc, #76]	; (800ded0 <TIM_OC4_SetConfig+0x78>)
 800de84:	4298      	cmp	r0, r3
 800de86:	d00a      	beq.n	800de9e <TIM_OC4_SetConfig+0x46>
 800de88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de8c:	4298      	cmp	r0, r3
 800de8e:	d006      	beq.n	800de9e <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 800de90:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800de92:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800de94:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800de96:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800de98:	6226      	str	r6, [r4, #32]
}
 800de9a:	b003      	add	sp, #12
 800de9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800de9e:	696b      	ldr	r3, [r5, #20]
 800dea0:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800dea4:	d104      	bne.n	800deb0 <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dea6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800deaa:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800deae:	e7ef      	b.n	800de90 <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800deb0:	f641 4141 	movw	r1, #7233	; 0x1c41
 800deb4:	4807      	ldr	r0, [pc, #28]	; (800ded4 <TIM_OC4_SetConfig+0x7c>)
 800deb6:	9201      	str	r2, [sp, #4]
 800deb8:	f7f6 f848 	bl	8003f4c <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800debc:	9a01      	ldr	r2, [sp, #4]
 800debe:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dec0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dec4:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800dec8:	e7e2      	b.n	800de90 <TIM_OC4_SetConfig+0x38>
 800deca:	bf00      	nop
 800decc:	feff8cff 	.word	0xfeff8cff
 800ded0:	40010000 	.word	0x40010000
 800ded4:	0802b1bc 	.word	0x0802b1bc

0800ded8 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ded8:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800deda:	684a      	ldr	r2, [r1, #4]
{
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 800dee0:	6899      	ldr	r1, [r3, #8]
{
 800dee2:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800dee4:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 800dee6:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 800deea:	4980      	ldr	r1, [pc, #512]	; (800e0ec <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800deec:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800deee:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 800def2:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800def6:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800defa:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800defc:	f000 8104 	beq.w	800e108 <TIM_SlaveTimer_SetConfig+0x230>
 800df00:	d953      	bls.n	800dfaa <TIM_SlaveTimer_SetConfig+0xd2>
 800df02:	2a60      	cmp	r2, #96	; 0x60
 800df04:	f000 816b 	beq.w	800e1de <TIM_SlaveTimer_SetConfig+0x306>
 800df08:	2a70      	cmp	r2, #112	; 0x70
 800df0a:	d151      	bne.n	800dfb0 <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800df0c:	4a78      	ldr	r2, [pc, #480]	; (800e0f0 <TIM_SlaveTimer_SetConfig+0x218>)
 800df0e:	4979      	ldr	r1, [pc, #484]	; (800e0f4 <TIM_SlaveTimer_SetConfig+0x21c>)
 800df10:	4293      	cmp	r3, r2
 800df12:	bf18      	it	ne
 800df14:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800df18:	bf14      	ite	ne
 800df1a:	2201      	movne	r2, #1
 800df1c:	2200      	moveq	r2, #0
 800df1e:	428b      	cmp	r3, r1
 800df20:	bf0c      	ite	eq
 800df22:	2200      	moveq	r2, #0
 800df24:	f002 0201 	andne.w	r2, r2, #1
 800df28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800df2c:	428b      	cmp	r3, r1
 800df2e:	bf0c      	ite	eq
 800df30:	2200      	moveq	r2, #0
 800df32:	f002 0201 	andne.w	r2, r2, #1
 800df36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800df3a:	428b      	cmp	r3, r1
 800df3c:	bf0c      	ite	eq
 800df3e:	2200      	moveq	r2, #0
 800df40:	f002 0201 	andne.w	r2, r2, #1
 800df44:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800df48:	428b      	cmp	r3, r1
 800df4a:	bf0c      	ite	eq
 800df4c:	2200      	moveq	r2, #0
 800df4e:	f002 0201 	andne.w	r2, r2, #1
 800df52:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800df56:	428b      	cmp	r3, r1
 800df58:	bf0c      	ite	eq
 800df5a:	2200      	moveq	r2, #0
 800df5c:	f002 0201 	andne.w	r2, r2, #1
 800df60:	b11a      	cbz	r2, 800df6a <TIM_SlaveTimer_SetConfig+0x92>
 800df62:	4a65      	ldr	r2, [pc, #404]	; (800e0f8 <TIM_SlaveTimer_SetConfig+0x220>)
 800df64:	4293      	cmp	r3, r2
 800df66:	f040 81bb 	bne.w	800e2e0 <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800df6a:	68e3      	ldr	r3, [r4, #12]
 800df6c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800df70:	f040 819e 	bne.w	800e2b0 <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800df74:	68a3      	ldr	r3, [r4, #8]
 800df76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df7a:	bf18      	it	ne
 800df7c:	2b0a      	cmpne	r3, #10
 800df7e:	d003      	beq.n	800df88 <TIM_SlaveTimer_SetConfig+0xb0>
 800df80:	f033 0302 	bics.w	r3, r3, #2
 800df84:	f040 81a6 	bne.w	800e2d4 <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800df88:	6921      	ldr	r1, [r4, #16]
 800df8a:	290f      	cmp	r1, #15
 800df8c:	f200 8175 	bhi.w	800e27a <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800df90:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800df92:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 800df96:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df98:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800df9a:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df9c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800dfa0:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dfa2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfa6:	60ab      	str	r3, [r5, #8]
}
 800dfa8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800dfaa:	2a40      	cmp	r2, #64	; 0x40
 800dfac:	d03a      	beq.n	800e024 <TIM_SlaveTimer_SetConfig+0x14c>
 800dfae:	d901      	bls.n	800dfb4 <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 800dfb0:	2001      	movs	r0, #1
}
 800dfb2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800dfb4:	2a20      	cmp	r2, #32
 800dfb6:	d002      	beq.n	800dfbe <TIM_SlaveTimer_SetConfig+0xe6>
 800dfb8:	d930      	bls.n	800e01c <TIM_SlaveTimer_SetConfig+0x144>
 800dfba:	2a30      	cmp	r2, #48	; 0x30
 800dfbc:	d1f8      	bne.n	800dfb0 <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800dfbe:	4a4c      	ldr	r2, [pc, #304]	; (800e0f0 <TIM_SlaveTimer_SetConfig+0x218>)
 800dfc0:	484c      	ldr	r0, [pc, #304]	; (800e0f4 <TIM_SlaveTimer_SetConfig+0x21c>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	bf18      	it	ne
 800dfc6:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800dfca:	494c      	ldr	r1, [pc, #304]	; (800e0fc <TIM_SlaveTimer_SetConfig+0x224>)
 800dfcc:	4c4c      	ldr	r4, [pc, #304]	; (800e100 <TIM_SlaveTimer_SetConfig+0x228>)
 800dfce:	bf14      	ite	ne
 800dfd0:	2201      	movne	r2, #1
 800dfd2:	2200      	moveq	r2, #0
 800dfd4:	4283      	cmp	r3, r0
 800dfd6:	bf0c      	ite	eq
 800dfd8:	2200      	moveq	r2, #0
 800dfda:	f002 0201 	andne.w	r2, r2, #1
 800dfde:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800dfe2:	428b      	cmp	r3, r1
 800dfe4:	bf0c      	ite	eq
 800dfe6:	2200      	moveq	r2, #0
 800dfe8:	f002 0201 	andne.w	r2, r2, #1
 800dfec:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800dff0:	42a3      	cmp	r3, r4
 800dff2:	bf0c      	ite	eq
 800dff4:	2200      	moveq	r2, #0
 800dff6:	f002 0201 	andne.w	r2, r2, #1
 800dffa:	4283      	cmp	r3, r0
 800dffc:	bf0c      	ite	eq
 800dffe:	2200      	moveq	r2, #0
 800e000:	f002 0201 	andne.w	r2, r2, #1
 800e004:	428b      	cmp	r3, r1
 800e006:	bf0c      	ite	eq
 800e008:	2200      	moveq	r2, #0
 800e00a:	f002 0201 	andne.w	r2, r2, #1
 800e00e:	b11a      	cbz	r2, 800e018 <TIM_SlaveTimer_SetConfig+0x140>
 800e010:	4a39      	ldr	r2, [pc, #228]	; (800e0f8 <TIM_SlaveTimer_SetConfig+0x220>)
 800e012:	4293      	cmp	r3, r2
 800e014:	f040 816a 	bne.w	800e2ec <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 800e018:	2000      	movs	r0, #0
}
 800e01a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800e01c:	f032 0210 	bics.w	r2, r2, #16
 800e020:	d1c6      	bne.n	800dfb0 <TIM_SlaveTimer_SetConfig+0xd8>
 800e022:	e7cc      	b.n	800dfbe <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e024:	4a32      	ldr	r2, [pc, #200]	; (800e0f0 <TIM_SlaveTimer_SetConfig+0x218>)
 800e026:	4933      	ldr	r1, [pc, #204]	; (800e0f4 <TIM_SlaveTimer_SetConfig+0x21c>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	bf18      	it	ne
 800e02c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e030:	bf14      	ite	ne
 800e032:	2201      	movne	r2, #1
 800e034:	2200      	moveq	r2, #0
 800e036:	428b      	cmp	r3, r1
 800e038:	bf0c      	ite	eq
 800e03a:	2200      	moveq	r2, #0
 800e03c:	f002 0201 	andne.w	r2, r2, #1
 800e040:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e044:	428b      	cmp	r3, r1
 800e046:	bf0c      	ite	eq
 800e048:	2200      	moveq	r2, #0
 800e04a:	f002 0201 	andne.w	r2, r2, #1
 800e04e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e052:	428b      	cmp	r3, r1
 800e054:	bf0c      	ite	eq
 800e056:	2200      	moveq	r2, #0
 800e058:	f002 0201 	andne.w	r2, r2, #1
 800e05c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800e060:	428b      	cmp	r3, r1
 800e062:	bf0c      	ite	eq
 800e064:	2200      	moveq	r2, #0
 800e066:	f002 0201 	andne.w	r2, r2, #1
 800e06a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800e06e:	428b      	cmp	r3, r1
 800e070:	bf0c      	ite	eq
 800e072:	2200      	moveq	r2, #0
 800e074:	f002 0201 	andne.w	r2, r2, #1
 800e078:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e07c:	428b      	cmp	r3, r1
 800e07e:	bf0c      	ite	eq
 800e080:	2200      	moveq	r2, #0
 800e082:	f002 0201 	andne.w	r2, r2, #1
 800e086:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e08a:	428b      	cmp	r3, r1
 800e08c:	bf0c      	ite	eq
 800e08e:	2200      	moveq	r2, #0
 800e090:	f002 0201 	andne.w	r2, r2, #1
 800e094:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800e098:	428b      	cmp	r3, r1
 800e09a:	bf0c      	ite	eq
 800e09c:	2200      	moveq	r2, #0
 800e09e:	f002 0201 	andne.w	r2, r2, #1
 800e0a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e0a6:	428b      	cmp	r3, r1
 800e0a8:	bf0c      	ite	eq
 800e0aa:	2200      	moveq	r2, #0
 800e0ac:	f002 0201 	andne.w	r2, r2, #1
 800e0b0:	b11a      	cbz	r2, 800e0ba <TIM_SlaveTimer_SetConfig+0x1e2>
 800e0b2:	4a14      	ldr	r2, [pc, #80]	; (800e104 <TIM_SlaveTimer_SetConfig+0x22c>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	f040 8126 	bne.w	800e306 <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e0ba:	6923      	ldr	r3, [r4, #16]
 800e0bc:	2b0f      	cmp	r3, #15
 800e0be:	f200 80ea 	bhi.w	800e296 <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800e0c2:	6823      	ldr	r3, [r4, #0]
 800e0c4:	2b05      	cmp	r3, #5
 800e0c6:	f43f af73 	beq.w	800dfb0 <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 800e0ca:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e0cc:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800e0ce:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800e0d0:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800e0d2:	6a19      	ldr	r1, [r3, #32]
 800e0d4:	f021 0101 	bic.w	r1, r1, #1
 800e0d8:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800e0da:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e0dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800e0e0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800e0e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800e0e6:	621c      	str	r4, [r3, #32]
}
 800e0e8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ea:	bf00      	nop
 800e0ec:	fffefff8 	.word	0xfffefff8
 800e0f0:	40010000 	.word	0x40010000
 800e0f4:	40000400 	.word	0x40000400
 800e0f8:	40001800 	.word	0x40001800
 800e0fc:	40000800 	.word	0x40000800
 800e100:	40000c00 	.word	0x40000c00
 800e104:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e108:	4a85      	ldr	r2, [pc, #532]	; (800e320 <TIM_SlaveTimer_SetConfig+0x448>)
 800e10a:	4986      	ldr	r1, [pc, #536]	; (800e324 <TIM_SlaveTimer_SetConfig+0x44c>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	bf18      	it	ne
 800e110:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e114:	bf14      	ite	ne
 800e116:	2201      	movne	r2, #1
 800e118:	2200      	moveq	r2, #0
 800e11a:	428b      	cmp	r3, r1
 800e11c:	bf0c      	ite	eq
 800e11e:	2200      	moveq	r2, #0
 800e120:	f002 0201 	andne.w	r2, r2, #1
 800e124:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e128:	428b      	cmp	r3, r1
 800e12a:	bf0c      	ite	eq
 800e12c:	2200      	moveq	r2, #0
 800e12e:	f002 0201 	andne.w	r2, r2, #1
 800e132:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e136:	428b      	cmp	r3, r1
 800e138:	bf0c      	ite	eq
 800e13a:	2200      	moveq	r2, #0
 800e13c:	f002 0201 	andne.w	r2, r2, #1
 800e140:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800e144:	428b      	cmp	r3, r1
 800e146:	bf0c      	ite	eq
 800e148:	2200      	moveq	r2, #0
 800e14a:	f002 0201 	andne.w	r2, r2, #1
 800e14e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800e152:	428b      	cmp	r3, r1
 800e154:	bf0c      	ite	eq
 800e156:	2200      	moveq	r2, #0
 800e158:	f002 0201 	andne.w	r2, r2, #1
 800e15c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e160:	428b      	cmp	r3, r1
 800e162:	bf0c      	ite	eq
 800e164:	2200      	moveq	r2, #0
 800e166:	f002 0201 	andne.w	r2, r2, #1
 800e16a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e16e:	428b      	cmp	r3, r1
 800e170:	bf0c      	ite	eq
 800e172:	2200      	moveq	r2, #0
 800e174:	f002 0201 	andne.w	r2, r2, #1
 800e178:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800e17c:	428b      	cmp	r3, r1
 800e17e:	bf0c      	ite	eq
 800e180:	2200      	moveq	r2, #0
 800e182:	f002 0201 	andne.w	r2, r2, #1
 800e186:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e18a:	428b      	cmp	r3, r1
 800e18c:	bf0c      	ite	eq
 800e18e:	2200      	moveq	r2, #0
 800e190:	f002 0201 	andne.w	r2, r2, #1
 800e194:	b11a      	cbz	r2, 800e19e <TIM_SlaveTimer_SetConfig+0x2c6>
 800e196:	4a64      	ldr	r2, [pc, #400]	; (800e328 <TIM_SlaveTimer_SetConfig+0x450>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	f040 80ba 	bne.w	800e312 <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e19e:	68a3      	ldr	r3, [r4, #8]
 800e1a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1a4:	bf18      	it	ne
 800e1a6:	2b0a      	cmpne	r3, #10
 800e1a8:	d003      	beq.n	800e1b2 <TIM_SlaveTimer_SetConfig+0x2da>
 800e1aa:	f033 0302 	bics.w	r3, r3, #2
 800e1ae:	f040 808b 	bne.w	800e2c8 <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e1b2:	6926      	ldr	r6, [r4, #16]
 800e1b4:	2e0f      	cmp	r6, #15
 800e1b6:	d874      	bhi.n	800e2a2 <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e1b8:	682b      	ldr	r3, [r5, #0]
 800e1ba:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800e1bc:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1be:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e1c0:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1c4:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800e1c8:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800e1ca:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1cc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1ce:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e1d4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800e1d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e1da:	6219      	str	r1, [r3, #32]
}
 800e1dc:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e1de:	4a50      	ldr	r2, [pc, #320]	; (800e320 <TIM_SlaveTimer_SetConfig+0x448>)
 800e1e0:	4950      	ldr	r1, [pc, #320]	; (800e324 <TIM_SlaveTimer_SetConfig+0x44c>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	bf18      	it	ne
 800e1e6:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e1ea:	bf14      	ite	ne
 800e1ec:	2201      	movne	r2, #1
 800e1ee:	2200      	moveq	r2, #0
 800e1f0:	428b      	cmp	r3, r1
 800e1f2:	bf0c      	ite	eq
 800e1f4:	2200      	moveq	r2, #0
 800e1f6:	f002 0201 	andne.w	r2, r2, #1
 800e1fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e1fe:	428b      	cmp	r3, r1
 800e200:	bf0c      	ite	eq
 800e202:	2200      	moveq	r2, #0
 800e204:	f002 0201 	andne.w	r2, r2, #1
 800e208:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e20c:	428b      	cmp	r3, r1
 800e20e:	bf0c      	ite	eq
 800e210:	2200      	moveq	r2, #0
 800e212:	f002 0201 	andne.w	r2, r2, #1
 800e216:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800e21a:	428b      	cmp	r3, r1
 800e21c:	bf0c      	ite	eq
 800e21e:	2200      	moveq	r2, #0
 800e220:	f002 0201 	andne.w	r2, r2, #1
 800e224:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800e228:	428b      	cmp	r3, r1
 800e22a:	bf0c      	ite	eq
 800e22c:	2200      	moveq	r2, #0
 800e22e:	f002 0201 	andne.w	r2, r2, #1
 800e232:	b112      	cbz	r2, 800e23a <TIM_SlaveTimer_SetConfig+0x362>
 800e234:	4a3d      	ldr	r2, [pc, #244]	; (800e32c <TIM_SlaveTimer_SetConfig+0x454>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d15f      	bne.n	800e2fa <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e23a:	68a3      	ldr	r3, [r4, #8]
 800e23c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e240:	bf18      	it	ne
 800e242:	2b0a      	cmpne	r3, #10
 800e244:	d002      	beq.n	800e24c <TIM_SlaveTimer_SetConfig+0x374>
 800e246:	f033 0302 	bics.w	r3, r3, #2
 800e24a:	d137      	bne.n	800e2bc <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e24c:	6926      	ldr	r6, [r4, #16]
 800e24e:	2e0f      	cmp	r6, #15
 800e250:	d81a      	bhi.n	800e288 <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e252:	682b      	ldr	r3, [r5, #0]
 800e254:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e256:	6a18      	ldr	r0, [r3, #32]
 800e258:	f020 0010 	bic.w	r0, r0, #16
 800e25c:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800e25e:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800e260:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800e262:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e264:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e26c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800e270:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800e274:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800e276:	621a      	str	r2, [r3, #32]
}
 800e278:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e27a:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 800e27e:	482c      	ldr	r0, [pc, #176]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e280:	f7f5 fe64 	bl	8003f4c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800e284:	6921      	ldr	r1, [r4, #16]
 800e286:	e683      	b.n	800df90 <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e288:	f641 511f 	movw	r1, #7455	; 0x1d1f
 800e28c:	4828      	ldr	r0, [pc, #160]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e28e:	f7f5 fe5d 	bl	8003f4c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e292:	6926      	ldr	r6, [r4, #16]
 800e294:	e7dd      	b.n	800e252 <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e296:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 800e29a:	4825      	ldr	r0, [pc, #148]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e29c:	f7f5 fe56 	bl	8003f4c <assert_failed>
 800e2a0:	e70f      	b.n	800e0c2 <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e2a2:	f641 5111 	movw	r1, #7441	; 0x1d11
 800e2a6:	4822      	ldr	r0, [pc, #136]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e2a8:	f7f5 fe50 	bl	8003f4c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e2ac:	6926      	ldr	r6, [r4, #16]
 800e2ae:	e783      	b.n	800e1b8 <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800e2b0:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 800e2b4:	481e      	ldr	r0, [pc, #120]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e2b6:	f7f5 fe49 	bl	8003f4c <assert_failed>
 800e2ba:	e65b      	b.n	800df74 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e2bc:	f641 511e 	movw	r1, #7454	; 0x1d1e
 800e2c0:	481b      	ldr	r0, [pc, #108]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e2c2:	f7f5 fe43 	bl	8003f4c <assert_failed>
 800e2c6:	e7c1      	b.n	800e24c <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e2c8:	f641 5110 	movw	r1, #7440	; 0x1d10
 800e2cc:	4818      	ldr	r0, [pc, #96]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e2ce:	f7f5 fe3d 	bl	8003f4c <assert_failed>
 800e2d2:	e76e      	b.n	800e1b2 <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e2d4:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800e2d8:	4815      	ldr	r0, [pc, #84]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e2da:	f7f5 fe37 	bl	8003f4c <assert_failed>
 800e2de:	e653      	b.n	800df88 <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800e2e0:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 800e2e4:	4812      	ldr	r0, [pc, #72]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e2e6:	f7f5 fe31 	bl	8003f4c <assert_failed>
 800e2ea:	e63e      	b.n	800df6a <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e2ec:	f641 512e 	movw	r1, #7470	; 0x1d2e
 800e2f0:	480f      	ldr	r0, [pc, #60]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e2f2:	f7f5 fe2b 	bl	8003f4c <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800e2f6:	2000      	movs	r0, #0
}
 800e2f8:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e2fa:	f641 511d 	movw	r1, #7453	; 0x1d1d
 800e2fe:	480c      	ldr	r0, [pc, #48]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e300:	f7f5 fe24 	bl	8003f4c <assert_failed>
 800e304:	e799      	b.n	800e23a <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e306:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 800e30a:	4809      	ldr	r0, [pc, #36]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e30c:	f7f5 fe1e 	bl	8003f4c <assert_failed>
 800e310:	e6d3      	b.n	800e0ba <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e312:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800e316:	4806      	ldr	r0, [pc, #24]	; (800e330 <TIM_SlaveTimer_SetConfig+0x458>)
 800e318:	f7f5 fe18 	bl	8003f4c <assert_failed>
 800e31c:	e73f      	b.n	800e19e <TIM_SlaveTimer_SetConfig+0x2c6>
 800e31e:	bf00      	nop
 800e320:	40010000 	.word	0x40010000
 800e324:	40000400 	.word	0x40000400
 800e328:	40002000 	.word	0x40002000
 800e32c:	40001800 	.word	0x40001800
 800e330:	0802b1bc 	.word	0x0802b1bc

0800e334 <HAL_TIM_Base_Start>:
{
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e338:	4b52      	ldr	r3, [pc, #328]	; (800e484 <HAL_TIM_Base_Start+0x150>)
 800e33a:	4d53      	ldr	r5, [pc, #332]	; (800e488 <HAL_TIM_Base_Start+0x154>)
 800e33c:	6822      	ldr	r2, [r4, #0]
 800e33e:	4953      	ldr	r1, [pc, #332]	; (800e48c <HAL_TIM_Base_Start+0x158>)
 800e340:	429a      	cmp	r2, r3
 800e342:	bf18      	it	ne
 800e344:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e348:	4851      	ldr	r0, [pc, #324]	; (800e490 <HAL_TIM_Base_Start+0x15c>)
 800e34a:	bf14      	ite	ne
 800e34c:	2301      	movne	r3, #1
 800e34e:	2300      	moveq	r3, #0
 800e350:	42aa      	cmp	r2, r5
 800e352:	bf0c      	ite	eq
 800e354:	2300      	moveq	r3, #0
 800e356:	f003 0301 	andne.w	r3, r3, #1
 800e35a:	428a      	cmp	r2, r1
 800e35c:	bf0c      	ite	eq
 800e35e:	2300      	moveq	r3, #0
 800e360:	f003 0301 	andne.w	r3, r3, #1
 800e364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e368:	4282      	cmp	r2, r0
 800e36a:	bf0c      	ite	eq
 800e36c:	2300      	moveq	r3, #0
 800e36e:	f003 0301 	andne.w	r3, r3, #1
 800e372:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e376:	428a      	cmp	r2, r1
 800e378:	bf0c      	ite	eq
 800e37a:	2300      	moveq	r3, #0
 800e37c:	f003 0301 	andne.w	r3, r3, #1
 800e380:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800e384:	4282      	cmp	r2, r0
 800e386:	bf0c      	ite	eq
 800e388:	2300      	moveq	r3, #0
 800e38a:	f003 0301 	andne.w	r3, r3, #1
 800e38e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800e392:	428a      	cmp	r2, r1
 800e394:	bf0c      	ite	eq
 800e396:	2300      	moveq	r3, #0
 800e398:	f003 0301 	andne.w	r3, r3, #1
 800e39c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800e3a0:	4282      	cmp	r2, r0
 800e3a2:	bf0c      	ite	eq
 800e3a4:	2300      	moveq	r3, #0
 800e3a6:	f003 0301 	andne.w	r3, r3, #1
 800e3aa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e3ae:	428a      	cmp	r2, r1
 800e3b0:	bf0c      	ite	eq
 800e3b2:	2300      	moveq	r3, #0
 800e3b4:	f003 0301 	andne.w	r3, r3, #1
 800e3b8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800e3bc:	4282      	cmp	r2, r0
 800e3be:	bf0c      	ite	eq
 800e3c0:	2300      	moveq	r3, #0
 800e3c2:	f003 0301 	andne.w	r3, r3, #1
 800e3c6:	428a      	cmp	r2, r1
 800e3c8:	bf0c      	ite	eq
 800e3ca:	2300      	moveq	r3, #0
 800e3cc:	f003 0301 	andne.w	r3, r3, #1
 800e3d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e3d4:	428a      	cmp	r2, r1
 800e3d6:	bf0c      	ite	eq
 800e3d8:	2300      	moveq	r3, #0
 800e3da:	f003 0301 	andne.w	r3, r3, #1
 800e3de:	b113      	cbz	r3, 800e3e6 <HAL_TIM_Base_Start+0xb2>
 800e3e0:	4b2c      	ldr	r3, [pc, #176]	; (800e494 <HAL_TIM_Base_Start+0x160>)
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d143      	bne.n	800e46e <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 800e3e6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d13b      	bne.n	800e466 <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3ee:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800e3f0:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3f2:	4b24      	ldr	r3, [pc, #144]	; (800e484 <HAL_TIM_Base_Start+0x150>)
 800e3f4:	4d24      	ldr	r5, [pc, #144]	; (800e488 <HAL_TIM_Base_Start+0x154>)
 800e3f6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e3fa:	bf18      	it	ne
 800e3fc:	429a      	cmpne	r2, r3
 800e3fe:	4923      	ldr	r1, [pc, #140]	; (800e48c <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 800e400:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e404:	bf0c      	ite	eq
 800e406:	2301      	moveq	r3, #1
 800e408:	2300      	movne	r3, #0
 800e40a:	4c21      	ldr	r4, [pc, #132]	; (800e490 <HAL_TIM_Base_Start+0x15c>)
 800e40c:	42aa      	cmp	r2, r5
 800e40e:	bf08      	it	eq
 800e410:	f043 0301 	orreq.w	r3, r3, #1
 800e414:	4820      	ldr	r0, [pc, #128]	; (800e498 <HAL_TIM_Base_Start+0x164>)
 800e416:	428a      	cmp	r2, r1
 800e418:	bf08      	it	eq
 800e41a:	f043 0301 	orreq.w	r3, r3, #1
 800e41e:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800e422:	42a2      	cmp	r2, r4
 800e424:	bf08      	it	eq
 800e426:	f043 0301 	orreq.w	r3, r3, #1
 800e42a:	4282      	cmp	r2, r0
 800e42c:	bf08      	it	eq
 800e42e:	f043 0301 	orreq.w	r3, r3, #1
 800e432:	428a      	cmp	r2, r1
 800e434:	bf08      	it	eq
 800e436:	f043 0301 	orreq.w	r3, r3, #1
 800e43a:	b933      	cbnz	r3, 800e44a <HAL_TIM_Base_Start+0x116>
 800e43c:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800e440:	1a10      	subs	r0, r2, r0
 800e442:	fab0 f080 	clz	r0, r0
 800e446:	0940      	lsrs	r0, r0, #5
 800e448:	b1b8      	cbz	r0, 800e47a <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e44a:	6891      	ldr	r1, [r2, #8]
 800e44c:	4b13      	ldr	r3, [pc, #76]	; (800e49c <HAL_TIM_Base_Start+0x168>)
 800e44e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e450:	2b06      	cmp	r3, #6
 800e452:	d00a      	beq.n	800e46a <HAL_TIM_Base_Start+0x136>
 800e454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e458:	d007      	beq.n	800e46a <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 800e45a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800e45c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800e45e:	f043 0301 	orr.w	r3, r3, #1
 800e462:	6013      	str	r3, [r2, #0]
}
 800e464:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e466:	2001      	movs	r0, #1
}
 800e468:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800e46a:	2000      	movs	r0, #0
}
 800e46c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e46e:	f240 1197 	movw	r1, #407	; 0x197
 800e472:	480b      	ldr	r0, [pc, #44]	; (800e4a0 <HAL_TIM_Base_Start+0x16c>)
 800e474:	f7f5 fd6a 	bl	8003f4c <assert_failed>
 800e478:	e7b5      	b.n	800e3e6 <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 800e47a:	6813      	ldr	r3, [r2, #0]
 800e47c:	f043 0301 	orr.w	r3, r3, #1
 800e480:	6013      	str	r3, [r2, #0]
}
 800e482:	bd38      	pop	{r3, r4, r5, pc}
 800e484:	40010000 	.word	0x40010000
 800e488:	40000400 	.word	0x40000400
 800e48c:	40000800 	.word	0x40000800
 800e490:	40000c00 	.word	0x40000c00
 800e494:	40002000 	.word	0x40002000
 800e498:	40010400 	.word	0x40010400
 800e49c:	00010007 	.word	0x00010007
 800e4a0:	0802b1bc 	.word	0x0802b1bc

0800e4a4 <HAL_TIM_Base_Start_IT>:
{
 800e4a4:	b538      	push	{r3, r4, r5, lr}
 800e4a6:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e4a8:	4b54      	ldr	r3, [pc, #336]	; (800e5fc <HAL_TIM_Base_Start_IT+0x158>)
 800e4aa:	4d55      	ldr	r5, [pc, #340]	; (800e600 <HAL_TIM_Base_Start_IT+0x15c>)
 800e4ac:	6822      	ldr	r2, [r4, #0]
 800e4ae:	4955      	ldr	r1, [pc, #340]	; (800e604 <HAL_TIM_Base_Start_IT+0x160>)
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	bf18      	it	ne
 800e4b4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e4b8:	4853      	ldr	r0, [pc, #332]	; (800e608 <HAL_TIM_Base_Start_IT+0x164>)
 800e4ba:	bf14      	ite	ne
 800e4bc:	2301      	movne	r3, #1
 800e4be:	2300      	moveq	r3, #0
 800e4c0:	42aa      	cmp	r2, r5
 800e4c2:	bf0c      	ite	eq
 800e4c4:	2300      	moveq	r3, #0
 800e4c6:	f003 0301 	andne.w	r3, r3, #1
 800e4ca:	428a      	cmp	r2, r1
 800e4cc:	bf0c      	ite	eq
 800e4ce:	2300      	moveq	r3, #0
 800e4d0:	f003 0301 	andne.w	r3, r3, #1
 800e4d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e4d8:	4282      	cmp	r2, r0
 800e4da:	bf0c      	ite	eq
 800e4dc:	2300      	moveq	r3, #0
 800e4de:	f003 0301 	andne.w	r3, r3, #1
 800e4e2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e4e6:	428a      	cmp	r2, r1
 800e4e8:	bf0c      	ite	eq
 800e4ea:	2300      	moveq	r3, #0
 800e4ec:	f003 0301 	andne.w	r3, r3, #1
 800e4f0:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800e4f4:	4282      	cmp	r2, r0
 800e4f6:	bf0c      	ite	eq
 800e4f8:	2300      	moveq	r3, #0
 800e4fa:	f003 0301 	andne.w	r3, r3, #1
 800e4fe:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800e502:	428a      	cmp	r2, r1
 800e504:	bf0c      	ite	eq
 800e506:	2300      	moveq	r3, #0
 800e508:	f003 0301 	andne.w	r3, r3, #1
 800e50c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800e510:	4282      	cmp	r2, r0
 800e512:	bf0c      	ite	eq
 800e514:	2300      	moveq	r3, #0
 800e516:	f003 0301 	andne.w	r3, r3, #1
 800e51a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e51e:	428a      	cmp	r2, r1
 800e520:	bf0c      	ite	eq
 800e522:	2300      	moveq	r3, #0
 800e524:	f003 0301 	andne.w	r3, r3, #1
 800e528:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800e52c:	4282      	cmp	r2, r0
 800e52e:	bf0c      	ite	eq
 800e530:	2300      	moveq	r3, #0
 800e532:	f003 0301 	andne.w	r3, r3, #1
 800e536:	428a      	cmp	r2, r1
 800e538:	bf0c      	ite	eq
 800e53a:	2300      	moveq	r3, #0
 800e53c:	f003 0301 	andne.w	r3, r3, #1
 800e540:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e544:	428a      	cmp	r2, r1
 800e546:	bf0c      	ite	eq
 800e548:	2300      	moveq	r3, #0
 800e54a:	f003 0301 	andne.w	r3, r3, #1
 800e54e:	b113      	cbz	r3, 800e556 <HAL_TIM_Base_Start_IT+0xb2>
 800e550:	4b2e      	ldr	r3, [pc, #184]	; (800e60c <HAL_TIM_Base_Start_IT+0x168>)
 800e552:	429a      	cmp	r2, r3
 800e554:	d147      	bne.n	800e5e6 <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 800e556:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d13f      	bne.n	800e5de <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e55e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800e560:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e562:	4b26      	ldr	r3, [pc, #152]	; (800e5fc <HAL_TIM_Base_Start_IT+0x158>)
 800e564:	4d26      	ldr	r5, [pc, #152]	; (800e600 <HAL_TIM_Base_Start_IT+0x15c>)
 800e566:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e56a:	bf18      	it	ne
 800e56c:	429a      	cmpne	r2, r3
 800e56e:	4825      	ldr	r0, [pc, #148]	; (800e604 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 800e570:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e574:	bf0c      	ite	eq
 800e576:	2301      	moveq	r3, #1
 800e578:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e57a:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e57c:	42aa      	cmp	r2, r5
 800e57e:	bf08      	it	eq
 800e580:	f043 0301 	orreq.w	r3, r3, #1
 800e584:	4c20      	ldr	r4, [pc, #128]	; (800e608 <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e586:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e58a:	4282      	cmp	r2, r0
 800e58c:	bf08      	it	eq
 800e58e:	f043 0301 	orreq.w	r3, r3, #1
 800e592:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e596:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e598:	42a2      	cmp	r2, r4
 800e59a:	bf08      	it	eq
 800e59c:	f043 0301 	orreq.w	r3, r3, #1
 800e5a0:	491b      	ldr	r1, [pc, #108]	; (800e610 <HAL_TIM_Base_Start_IT+0x16c>)
 800e5a2:	4282      	cmp	r2, r0
 800e5a4:	bf08      	it	eq
 800e5a6:	f043 0301 	orreq.w	r3, r3, #1
 800e5aa:	428a      	cmp	r2, r1
 800e5ac:	bf08      	it	eq
 800e5ae:	f043 0301 	orreq.w	r3, r3, #1
 800e5b2:	b933      	cbnz	r3, 800e5c2 <HAL_TIM_Base_Start_IT+0x11e>
 800e5b4:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800e5b8:	1a10      	subs	r0, r2, r0
 800e5ba:	fab0 f080 	clz	r0, r0
 800e5be:	0940      	lsrs	r0, r0, #5
 800e5c0:	b1b8      	cbz	r0, 800e5f2 <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e5c2:	6891      	ldr	r1, [r2, #8]
 800e5c4:	4b13      	ldr	r3, [pc, #76]	; (800e614 <HAL_TIM_Base_Start_IT+0x170>)
 800e5c6:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5c8:	2b06      	cmp	r3, #6
 800e5ca:	d00a      	beq.n	800e5e2 <HAL_TIM_Base_Start_IT+0x13e>
 800e5cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5d0:	d007      	beq.n	800e5e2 <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 800e5d2:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800e5d4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800e5d6:	f043 0301 	orr.w	r3, r3, #1
 800e5da:	6013      	str	r3, [r2, #0]
}
 800e5dc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e5de:	2001      	movs	r0, #1
}
 800e5e0:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800e5e2:	2000      	movs	r0, #0
}
 800e5e4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e5e6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800e5ea:	480b      	ldr	r0, [pc, #44]	; (800e618 <HAL_TIM_Base_Start_IT+0x174>)
 800e5ec:	f7f5 fcae 	bl	8003f4c <assert_failed>
 800e5f0:	e7b1      	b.n	800e556 <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 800e5f2:	6813      	ldr	r3, [r2, #0]
 800e5f4:	f043 0301 	orr.w	r3, r3, #1
 800e5f8:	6013      	str	r3, [r2, #0]
}
 800e5fa:	bd38      	pop	{r3, r4, r5, pc}
 800e5fc:	40010000 	.word	0x40010000
 800e600:	40000400 	.word	0x40000400
 800e604:	40000800 	.word	0x40000800
 800e608:	40000c00 	.word	0x40000c00
 800e60c:	40002000 	.word	0x40002000
 800e610:	40014000 	.word	0x40014000
 800e614:	00010007 	.word	0x00010007
 800e618:	0802b1bc 	.word	0x0802b1bc

0800e61c <HAL_TIM_OC_MspInit>:
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop

0800e620 <HAL_TIM_PWM_MspInit>:
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop

0800e624 <HAL_TIM_IC_MspInit>:
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop

0800e628 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800e628:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	f000 8151 	beq.w	800e8d4 <HAL_TIM_ConfigClockSource+0x2ac>
 800e632:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800e634:	2302      	movs	r3, #2
{
 800e636:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800e638:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800e63c:	460d      	mov	r5, r1
 800e63e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800e642:	4604      	mov	r4, r0
 800e644:	680b      	ldr	r3, [r1, #0]
 800e646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e64a:	bf18      	it	ne
 800e64c:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800e650:	bf14      	ite	ne
 800e652:	2201      	movne	r2, #1
 800e654:	2200      	moveq	r2, #0
 800e656:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 800e65a:	f002 0201 	and.w	r2, r2, #1
 800e65e:	bf08      	it	eq
 800e660:	2200      	moveq	r2, #0
 800e662:	b112      	cbz	r2, 800e66a <HAL_TIM_ConfigClockSource+0x42>
 800e664:	2940      	cmp	r1, #64	; 0x40
 800e666:	f040 8267 	bne.w	800eb38 <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 800e66a:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800e66c:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e66e:	499a      	ldr	r1, [pc, #616]	; (800e8d8 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 800e670:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e672:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800e676:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800e678:	f000 8138 	beq.w	800e8ec <HAL_TIM_ConfigClockSource+0x2c4>
 800e67c:	d84f      	bhi.n	800e71e <HAL_TIM_ConfigClockSource+0xf6>
 800e67e:	2b40      	cmp	r3, #64	; 0x40
 800e680:	f000 81d7 	beq.w	800ea32 <HAL_TIM_ConfigClockSource+0x40a>
 800e684:	f240 80a2 	bls.w	800e7cc <HAL_TIM_ConfigClockSource+0x1a4>
 800e688:	2b50      	cmp	r3, #80	; 0x50
 800e68a:	f040 8097 	bne.w	800e7bc <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800e68e:	4b93      	ldr	r3, [pc, #588]	; (800e8dc <HAL_TIM_ConfigClockSource+0x2b4>)
 800e690:	4993      	ldr	r1, [pc, #588]	; (800e8e0 <HAL_TIM_ConfigClockSource+0x2b8>)
 800e692:	429a      	cmp	r2, r3
 800e694:	bf18      	it	ne
 800e696:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e69a:	bf14      	ite	ne
 800e69c:	2301      	movne	r3, #1
 800e69e:	2300      	moveq	r3, #0
 800e6a0:	428a      	cmp	r2, r1
 800e6a2:	bf0c      	ite	eq
 800e6a4:	2300      	moveq	r3, #0
 800e6a6:	f003 0301 	andne.w	r3, r3, #1
 800e6aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e6ae:	428a      	cmp	r2, r1
 800e6b0:	bf0c      	ite	eq
 800e6b2:	2300      	moveq	r3, #0
 800e6b4:	f003 0301 	andne.w	r3, r3, #1
 800e6b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e6bc:	428a      	cmp	r2, r1
 800e6be:	bf0c      	ite	eq
 800e6c0:	2300      	moveq	r3, #0
 800e6c2:	f003 0301 	andne.w	r3, r3, #1
 800e6c6:	b11b      	cbz	r3, 800e6d0 <HAL_TIM_ConfigClockSource+0xa8>
 800e6c8:	4b86      	ldr	r3, [pc, #536]	; (800e8e4 <HAL_TIM_ConfigClockSource+0x2bc>)
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	f040 8222 	bne.w	800eb14 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e6d0:	686b      	ldr	r3, [r5, #4]
 800e6d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6d6:	bf18      	it	ne
 800e6d8:	2b0a      	cmpne	r3, #10
 800e6da:	d003      	beq.n	800e6e4 <HAL_TIM_ConfigClockSource+0xbc>
 800e6dc:	f033 0302 	bics.w	r3, r3, #2
 800e6e0:	f040 81fe 	bne.w	800eae0 <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e6e4:	68ee      	ldr	r6, [r5, #12]
 800e6e6:	2e0f      	cmp	r6, #15
 800e6e8:	f200 8242 	bhi.w	800eb70 <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6ec:	6823      	ldr	r3, [r4, #0]
 800e6ee:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800e6f0:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6f2:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6f4:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6f8:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800e6fc:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800e6fe:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e700:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e702:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e704:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e708:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800e70c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e70e:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800e710:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e712:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e716:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800e71a:	609a      	str	r2, [r3, #8]
}
 800e71c:	e04f      	b.n	800e7be <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800e71e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e722:	f000 812c 	beq.w	800e97e <HAL_TIM_ConfigClockSource+0x356>
 800e726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e72a:	d17e      	bne.n	800e82a <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800e72c:	4b6b      	ldr	r3, [pc, #428]	; (800e8dc <HAL_TIM_ConfigClockSource+0x2b4>)
 800e72e:	496c      	ldr	r1, [pc, #432]	; (800e8e0 <HAL_TIM_ConfigClockSource+0x2b8>)
 800e730:	429a      	cmp	r2, r3
 800e732:	bf18      	it	ne
 800e734:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e738:	bf14      	ite	ne
 800e73a:	2301      	movne	r3, #1
 800e73c:	2300      	moveq	r3, #0
 800e73e:	428a      	cmp	r2, r1
 800e740:	bf0c      	ite	eq
 800e742:	2300      	moveq	r3, #0
 800e744:	f003 0301 	andne.w	r3, r3, #1
 800e748:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e74c:	428a      	cmp	r2, r1
 800e74e:	bf0c      	ite	eq
 800e750:	2300      	moveq	r3, #0
 800e752:	f003 0301 	andne.w	r3, r3, #1
 800e756:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e75a:	428a      	cmp	r2, r1
 800e75c:	bf0c      	ite	eq
 800e75e:	2300      	moveq	r3, #0
 800e760:	f003 0301 	andne.w	r3, r3, #1
 800e764:	b11b      	cbz	r3, 800e76e <HAL_TIM_ConfigClockSource+0x146>
 800e766:	4b5f      	ldr	r3, [pc, #380]	; (800e8e4 <HAL_TIM_ConfigClockSource+0x2bc>)
 800e768:	429a      	cmp	r2, r3
 800e76a:	f040 81c5 	bne.w	800eaf8 <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800e76e:	68ab      	ldr	r3, [r5, #8]
 800e770:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800e774:	f040 8210 	bne.w	800eb98 <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e778:	686b      	ldr	r3, [r5, #4]
 800e77a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e77e:	bf18      	it	ne
 800e780:	2b0a      	cmpne	r3, #10
 800e782:	d003      	beq.n	800e78c <HAL_TIM_ConfigClockSource+0x164>
 800e784:	f033 0302 	bics.w	r3, r3, #2
 800e788:	f040 81a4 	bne.w	800ead4 <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e78c:	68ee      	ldr	r6, [r5, #12]
 800e78e:	2e0f      	cmp	r6, #15
 800e790:	f200 81d9 	bhi.w	800eb46 <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 800e794:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800e796:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800e79a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e79c:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800e79e:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7a0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800e7a4:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7a6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800e7aa:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e7ac:	6893      	ldr	r3, [r2, #8]
 800e7ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e7b2:	6093      	str	r3, [r2, #8]
      break;
 800e7b4:	e003      	b.n	800e7be <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800e7b6:	f033 0110 	bics.w	r1, r3, #16
 800e7ba:	d00c      	beq.n	800e7d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800e7bc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800e7be:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800e7c0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800e7c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e7c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e7ca:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800e7cc:	2b20      	cmp	r3, #32
 800e7ce:	d002      	beq.n	800e7d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800e7d0:	d9f1      	bls.n	800e7b6 <HAL_TIM_ConfigClockSource+0x18e>
 800e7d2:	2b30      	cmp	r3, #48	; 0x30
 800e7d4:	d1f2      	bne.n	800e7bc <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800e7d6:	4941      	ldr	r1, [pc, #260]	; (800e8dc <HAL_TIM_ConfigClockSource+0x2b4>)
 800e7d8:	4841      	ldr	r0, [pc, #260]	; (800e8e0 <HAL_TIM_ConfigClockSource+0x2b8>)
 800e7da:	428a      	cmp	r2, r1
 800e7dc:	bf18      	it	ne
 800e7de:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e7e2:	bf14      	ite	ne
 800e7e4:	2101      	movne	r1, #1
 800e7e6:	2100      	moveq	r1, #0
 800e7e8:	4282      	cmp	r2, r0
 800e7ea:	bf0c      	ite	eq
 800e7ec:	2100      	moveq	r1, #0
 800e7ee:	f001 0101 	andne.w	r1, r1, #1
 800e7f2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800e7f6:	4282      	cmp	r2, r0
 800e7f8:	bf0c      	ite	eq
 800e7fa:	2100      	moveq	r1, #0
 800e7fc:	f001 0101 	andne.w	r1, r1, #1
 800e800:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800e804:	4282      	cmp	r2, r0
 800e806:	bf0c      	ite	eq
 800e808:	2100      	moveq	r1, #0
 800e80a:	f001 0101 	andne.w	r1, r1, #1
 800e80e:	b119      	cbz	r1, 800e818 <HAL_TIM_ConfigClockSource+0x1f0>
 800e810:	4934      	ldr	r1, [pc, #208]	; (800e8e4 <HAL_TIM_ConfigClockSource+0x2bc>)
 800e812:	428a      	cmp	r2, r1
 800e814:	f040 8176 	bne.w	800eb04 <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 800e818:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800e81a:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800e81c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e820:	430b      	orrs	r3, r1
 800e822:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800e826:	6093      	str	r3, [r2, #8]
}
 800e828:	e7c9      	b.n	800e7be <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800e82a:	2b70      	cmp	r3, #112	; 0x70
 800e82c:	d1c6      	bne.n	800e7bc <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800e82e:	4b2b      	ldr	r3, [pc, #172]	; (800e8dc <HAL_TIM_ConfigClockSource+0x2b4>)
 800e830:	492b      	ldr	r1, [pc, #172]	; (800e8e0 <HAL_TIM_ConfigClockSource+0x2b8>)
 800e832:	429a      	cmp	r2, r3
 800e834:	bf18      	it	ne
 800e836:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e83a:	bf14      	ite	ne
 800e83c:	2301      	movne	r3, #1
 800e83e:	2300      	moveq	r3, #0
 800e840:	428a      	cmp	r2, r1
 800e842:	bf0c      	ite	eq
 800e844:	2300      	moveq	r3, #0
 800e846:	f003 0301 	andne.w	r3, r3, #1
 800e84a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e84e:	428a      	cmp	r2, r1
 800e850:	bf0c      	ite	eq
 800e852:	2300      	moveq	r3, #0
 800e854:	f003 0301 	andne.w	r3, r3, #1
 800e858:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e85c:	428a      	cmp	r2, r1
 800e85e:	bf0c      	ite	eq
 800e860:	2300      	moveq	r3, #0
 800e862:	f003 0301 	andne.w	r3, r3, #1
 800e866:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800e86a:	428a      	cmp	r2, r1
 800e86c:	bf0c      	ite	eq
 800e86e:	2300      	moveq	r3, #0
 800e870:	f003 0301 	andne.w	r3, r3, #1
 800e874:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800e878:	428a      	cmp	r2, r1
 800e87a:	bf0c      	ite	eq
 800e87c:	2300      	moveq	r3, #0
 800e87e:	f003 0301 	andne.w	r3, r3, #1
 800e882:	b11b      	cbz	r3, 800e88c <HAL_TIM_ConfigClockSource+0x264>
 800e884:	4b18      	ldr	r3, [pc, #96]	; (800e8e8 <HAL_TIM_ConfigClockSource+0x2c0>)
 800e886:	429a      	cmp	r2, r3
 800e888:	f040 818c 	bne.w	800eba4 <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800e88c:	68ab      	ldr	r3, [r5, #8]
 800e88e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800e892:	f040 817b 	bne.w	800eb8c <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e896:	686b      	ldr	r3, [r5, #4]
 800e898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e89c:	bf18      	it	ne
 800e89e:	2b0a      	cmpne	r3, #10
 800e8a0:	d003      	beq.n	800e8aa <HAL_TIM_ConfigClockSource+0x282>
 800e8a2:	f033 0302 	bics.w	r3, r3, #2
 800e8a6:	f040 8121 	bne.w	800eaec <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e8aa:	68ee      	ldr	r6, [r5, #12]
 800e8ac:	2e0f      	cmp	r6, #15
 800e8ae:	f200 8166 	bhi.w	800eb7e <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 800e8b2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800e8b4:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800e8b8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e8ba:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800e8bc:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8be:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800e8c2:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e8c4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800e8c8:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800e8ca:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e8cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800e8d0:	6093      	str	r3, [r2, #8]
      break;
 800e8d2:	e774      	b.n	800e7be <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 800e8d4:	2002      	movs	r0, #2
}
 800e8d6:	4770      	bx	lr
 800e8d8:	fffe0088 	.word	0xfffe0088
 800e8dc:	40010000 	.word	0x40010000
 800e8e0:	40000400 	.word	0x40000400
 800e8e4:	40010400 	.word	0x40010400
 800e8e8:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800e8ec:	4bb0      	ldr	r3, [pc, #704]	; (800ebb0 <HAL_TIM_ConfigClockSource+0x588>)
 800e8ee:	49b1      	ldr	r1, [pc, #708]	; (800ebb4 <HAL_TIM_ConfigClockSource+0x58c>)
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	bf18      	it	ne
 800e8f4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e8f8:	bf14      	ite	ne
 800e8fa:	2301      	movne	r3, #1
 800e8fc:	2300      	moveq	r3, #0
 800e8fe:	428a      	cmp	r2, r1
 800e900:	bf0c      	ite	eq
 800e902:	2300      	moveq	r3, #0
 800e904:	f003 0301 	andne.w	r3, r3, #1
 800e908:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e90c:	428a      	cmp	r2, r1
 800e90e:	bf0c      	ite	eq
 800e910:	2300      	moveq	r3, #0
 800e912:	f003 0301 	andne.w	r3, r3, #1
 800e916:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e91a:	428a      	cmp	r2, r1
 800e91c:	bf0c      	ite	eq
 800e91e:	2300      	moveq	r3, #0
 800e920:	f003 0301 	andne.w	r3, r3, #1
 800e924:	b11b      	cbz	r3, 800e92e <HAL_TIM_ConfigClockSource+0x306>
 800e926:	4ba4      	ldr	r3, [pc, #656]	; (800ebb8 <HAL_TIM_ConfigClockSource+0x590>)
 800e928:	429a      	cmp	r2, r3
 800e92a:	f040 80ff 	bne.w	800eb2c <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e92e:	686b      	ldr	r3, [r5, #4]
 800e930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e934:	bf18      	it	ne
 800e936:	2b0a      	cmpne	r3, #10
 800e938:	d003      	beq.n	800e942 <HAL_TIM_ConfigClockSource+0x31a>
 800e93a:	f033 0302 	bics.w	r3, r3, #2
 800e93e:	f040 80c3 	bne.w	800eac8 <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e942:	68ee      	ldr	r6, [r5, #12]
 800e944:	2e0f      	cmp	r6, #15
 800e946:	f200 810c 	bhi.w	800eb62 <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e94e:	6a18      	ldr	r0, [r3, #32]
 800e950:	f020 0010 	bic.w	r0, r0, #16
 800e954:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800e956:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800e958:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800e95a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e95c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e960:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e964:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800e968:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800e96c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800e96e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800e970:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e972:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e976:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800e97a:	609a      	str	r2, [r3, #8]
}
 800e97c:	e71f      	b.n	800e7be <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e97e:	4b8c      	ldr	r3, [pc, #560]	; (800ebb0 <HAL_TIM_ConfigClockSource+0x588>)
 800e980:	488c      	ldr	r0, [pc, #560]	; (800ebb4 <HAL_TIM_ConfigClockSource+0x58c>)
 800e982:	429a      	cmp	r2, r3
 800e984:	bf18      	it	ne
 800e986:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e98a:	498c      	ldr	r1, [pc, #560]	; (800ebbc <HAL_TIM_ConfigClockSource+0x594>)
 800e98c:	bf14      	ite	ne
 800e98e:	2301      	movne	r3, #1
 800e990:	2300      	moveq	r3, #0
 800e992:	4282      	cmp	r2, r0
 800e994:	bf0c      	ite	eq
 800e996:	2300      	moveq	r3, #0
 800e998:	f003 0301 	andne.w	r3, r3, #1
 800e99c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e9a0:	428a      	cmp	r2, r1
 800e9a2:	bf0c      	ite	eq
 800e9a4:	2300      	moveq	r3, #0
 800e9a6:	f003 0301 	andne.w	r3, r3, #1
 800e9aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9ae:	4282      	cmp	r2, r0
 800e9b0:	bf0c      	ite	eq
 800e9b2:	2300      	moveq	r3, #0
 800e9b4:	f003 0301 	andne.w	r3, r3, #1
 800e9b8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e9bc:	428a      	cmp	r2, r1
 800e9be:	bf0c      	ite	eq
 800e9c0:	2300      	moveq	r3, #0
 800e9c2:	f003 0301 	andne.w	r3, r3, #1
 800e9c6:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800e9ca:	4282      	cmp	r2, r0
 800e9cc:	bf0c      	ite	eq
 800e9ce:	2300      	moveq	r3, #0
 800e9d0:	f003 0301 	andne.w	r3, r3, #1
 800e9d4:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800e9d8:	428a      	cmp	r2, r1
 800e9da:	bf0c      	ite	eq
 800e9dc:	2300      	moveq	r3, #0
 800e9de:	f003 0301 	andne.w	r3, r3, #1
 800e9e2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800e9e6:	4282      	cmp	r2, r0
 800e9e8:	bf0c      	ite	eq
 800e9ea:	2300      	moveq	r3, #0
 800e9ec:	f003 0301 	andne.w	r3, r3, #1
 800e9f0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e9f4:	428a      	cmp	r2, r1
 800e9f6:	bf0c      	ite	eq
 800e9f8:	2300      	moveq	r3, #0
 800e9fa:	f003 0301 	andne.w	r3, r3, #1
 800e9fe:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800ea02:	4282      	cmp	r2, r0
 800ea04:	bf0c      	ite	eq
 800ea06:	2300      	moveq	r3, #0
 800ea08:	f003 0301 	andne.w	r3, r3, #1
 800ea0c:	428a      	cmp	r2, r1
 800ea0e:	bf0c      	ite	eq
 800ea10:	2300      	moveq	r3, #0
 800ea12:	f003 0301 	andne.w	r3, r3, #1
 800ea16:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ea1a:	428a      	cmp	r2, r1
 800ea1c:	bf0c      	ite	eq
 800ea1e:	2300      	moveq	r3, #0
 800ea20:	f003 0301 	andne.w	r3, r3, #1
 800ea24:	b11b      	cbz	r3, 800ea2e <HAL_TIM_ConfigClockSource+0x406>
 800ea26:	4b66      	ldr	r3, [pc, #408]	; (800ebc0 <HAL_TIM_ConfigClockSource+0x598>)
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	f040 80cd 	bne.w	800ebc8 <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 800ea2e:	2000      	movs	r0, #0
 800ea30:	e6c5      	b.n	800e7be <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ea32:	4b5f      	ldr	r3, [pc, #380]	; (800ebb0 <HAL_TIM_ConfigClockSource+0x588>)
 800ea34:	495f      	ldr	r1, [pc, #380]	; (800ebb4 <HAL_TIM_ConfigClockSource+0x58c>)
 800ea36:	429a      	cmp	r2, r3
 800ea38:	bf18      	it	ne
 800ea3a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ea3e:	bf14      	ite	ne
 800ea40:	2301      	movne	r3, #1
 800ea42:	2300      	moveq	r3, #0
 800ea44:	428a      	cmp	r2, r1
 800ea46:	bf0c      	ite	eq
 800ea48:	2300      	moveq	r3, #0
 800ea4a:	f003 0301 	andne.w	r3, r3, #1
 800ea4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ea52:	428a      	cmp	r2, r1
 800ea54:	bf0c      	ite	eq
 800ea56:	2300      	moveq	r3, #0
 800ea58:	f003 0301 	andne.w	r3, r3, #1
 800ea5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ea60:	428a      	cmp	r2, r1
 800ea62:	bf0c      	ite	eq
 800ea64:	2300      	moveq	r3, #0
 800ea66:	f003 0301 	andne.w	r3, r3, #1
 800ea6a:	b113      	cbz	r3, 800ea72 <HAL_TIM_ConfigClockSource+0x44a>
 800ea6c:	4b52      	ldr	r3, [pc, #328]	; (800ebb8 <HAL_TIM_ConfigClockSource+0x590>)
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d156      	bne.n	800eb20 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ea72:	686b      	ldr	r3, [r5, #4]
 800ea74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea78:	bf18      	it	ne
 800ea7a:	2b0a      	cmpne	r3, #10
 800ea7c:	d002      	beq.n	800ea84 <HAL_TIM_ConfigClockSource+0x45c>
 800ea7e:	f033 0302 	bics.w	r3, r3, #2
 800ea82:	d11b      	bne.n	800eabc <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ea84:	68ee      	ldr	r6, [r5, #12]
 800ea86:	2e0f      	cmp	r6, #15
 800ea88:	d864      	bhi.n	800eb54 <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea8a:	6823      	ldr	r3, [r4, #0]
 800ea8c:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800ea8e:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea90:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ea92:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea96:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800ea9a:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800ea9c:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea9e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eaa0:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eaa2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eaa6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800eaaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eaac:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800eaae:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800eab0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eab4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800eab8:	609a      	str	r2, [r3, #8]
}
 800eaba:	e680      	b.n	800e7be <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800eabc:	f241 51a6 	movw	r1, #5542	; 0x15a6
 800eac0:	4840      	ldr	r0, [pc, #256]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eac2:	f7f5 fa43 	bl	8003f4c <assert_failed>
 800eac6:	e7dd      	b.n	800ea84 <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800eac8:	f241 5196 	movw	r1, #5526	; 0x1596
 800eacc:	483d      	ldr	r0, [pc, #244]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eace:	f7f5 fa3d 	bl	8003f4c <assert_failed>
 800ead2:	e736      	b.n	800e942 <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ead4:	f241 5173 	movw	r1, #5491	; 0x1573
 800ead8:	483a      	ldr	r0, [pc, #232]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eada:	f7f5 fa37 	bl	8003f4c <assert_failed>
 800eade:	e655      	b.n	800e78c <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800eae0:	f241 5186 	movw	r1, #5510	; 0x1586
 800eae4:	4837      	ldr	r0, [pc, #220]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eae6:	f7f5 fa31 	bl	8003f4c <assert_failed>
 800eaea:	e5fb      	b.n	800e6e4 <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800eaec:	f241 515b 	movw	r1, #5467	; 0x155b
 800eaf0:	4834      	ldr	r0, [pc, #208]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eaf2:	f7f5 fa2b 	bl	8003f4c <assert_failed>
 800eaf6:	e6d8      	b.n	800e8aa <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800eaf8:	f241 516f 	movw	r1, #5487	; 0x156f
 800eafc:	4831      	ldr	r0, [pc, #196]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eafe:	f7f5 fa25 	bl	8003f4c <assert_failed>
 800eb02:	e634      	b.n	800e76e <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800eb04:	f241 51b6 	movw	r1, #5558	; 0x15b6
 800eb08:	482e      	ldr	r0, [pc, #184]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb0a:	f7f5 fa1f 	bl	8003f4c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eb0e:	6822      	ldr	r2, [r4, #0]
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	e681      	b.n	800e818 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800eb14:	f241 5183 	movw	r1, #5507	; 0x1583
 800eb18:	482a      	ldr	r0, [pc, #168]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb1a:	f7f5 fa17 	bl	8003f4c <assert_failed>
 800eb1e:	e5d7      	b.n	800e6d0 <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800eb20:	f241 51a3 	movw	r1, #5539	; 0x15a3
 800eb24:	4827      	ldr	r0, [pc, #156]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb26:	f7f5 fa11 	bl	8003f4c <assert_failed>
 800eb2a:	e7a2      	b.n	800ea72 <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800eb2c:	f241 5193 	movw	r1, #5523	; 0x1593
 800eb30:	4824      	ldr	r0, [pc, #144]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb32:	f7f5 fa0b 	bl	8003f4c <assert_failed>
 800eb36:	e6fa      	b.n	800e92e <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800eb38:	f241 5144 	movw	r1, #5444	; 0x1544
 800eb3c:	4821      	ldr	r0, [pc, #132]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb3e:	f7f5 fa05 	bl	8003f4c <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 800eb42:	682b      	ldr	r3, [r5, #0]
 800eb44:	e591      	b.n	800e66a <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800eb46:	f241 5174 	movw	r1, #5492	; 0x1574
 800eb4a:	481e      	ldr	r0, [pc, #120]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb4c:	f7f5 f9fe 	bl	8003f4c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800eb50:	68ee      	ldr	r6, [r5, #12]
 800eb52:	e61f      	b.n	800e794 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800eb54:	f241 51a7 	movw	r1, #5543	; 0x15a7
 800eb58:	481a      	ldr	r0, [pc, #104]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb5a:	f7f5 f9f7 	bl	8003f4c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb5e:	68ee      	ldr	r6, [r5, #12]
 800eb60:	e793      	b.n	800ea8a <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800eb62:	f241 5197 	movw	r1, #5527	; 0x1597
 800eb66:	4817      	ldr	r0, [pc, #92]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb68:	f7f5 f9f0 	bl	8003f4c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb6c:	68ee      	ldr	r6, [r5, #12]
 800eb6e:	e6ec      	b.n	800e94a <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800eb70:	f241 5187 	movw	r1, #5511	; 0x1587
 800eb74:	4813      	ldr	r0, [pc, #76]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb76:	f7f5 f9e9 	bl	8003f4c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb7a:	68ee      	ldr	r6, [r5, #12]
 800eb7c:	e5b6      	b.n	800e6ec <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800eb7e:	f241 515c 	movw	r1, #5468	; 0x155c
 800eb82:	4810      	ldr	r0, [pc, #64]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb84:	f7f5 f9e2 	bl	8003f4c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800eb88:	68ee      	ldr	r6, [r5, #12]
 800eb8a:	e692      	b.n	800e8b2 <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800eb8c:	f241 515a 	movw	r1, #5466	; 0x155a
 800eb90:	480c      	ldr	r0, [pc, #48]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb92:	f7f5 f9db 	bl	8003f4c <assert_failed>
 800eb96:	e67e      	b.n	800e896 <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800eb98:	f241 5172 	movw	r1, #5490	; 0x1572
 800eb9c:	4809      	ldr	r0, [pc, #36]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800eb9e:	f7f5 f9d5 	bl	8003f4c <assert_failed>
 800eba2:	e5e9      	b.n	800e778 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800eba4:	f241 5157 	movw	r1, #5463	; 0x1557
 800eba8:	4806      	ldr	r0, [pc, #24]	; (800ebc4 <HAL_TIM_ConfigClockSource+0x59c>)
 800ebaa:	f7f5 f9cf 	bl	8003f4c <assert_failed>
 800ebae:	e66d      	b.n	800e88c <HAL_TIM_ConfigClockSource+0x264>
 800ebb0:	40010000 	.word	0x40010000
 800ebb4:	40000400 	.word	0x40000400
 800ebb8:	40010400 	.word	0x40010400
 800ebbc:	40000800 	.word	0x40000800
 800ebc0:	40002000 	.word	0x40002000
 800ebc4:	0802b1bc 	.word	0x0802b1bc
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ebc8:	4803      	ldr	r0, [pc, #12]	; (800ebd8 <HAL_TIM_ConfigClockSource+0x5b0>)
 800ebca:	f241 5150 	movw	r1, #5456	; 0x1550
 800ebce:	f7f5 f9bd 	bl	8003f4c <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	e5f3      	b.n	800e7be <HAL_TIM_ConfigClockSource+0x196>
 800ebd6:	bf00      	nop
 800ebd8:	0802b1bc 	.word	0x0802b1bc

0800ebdc <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800ebdc:	6802      	ldr	r2, [r0, #0]
{
 800ebde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800ebe0:	4b39      	ldr	r3, [pc, #228]	; (800ecc8 <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 800ebe2:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800ebe4:	4f39      	ldr	r7, [pc, #228]	; (800eccc <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800ebe6:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	bf18      	it	ne
 800ebec:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ebf0:	4e37      	ldr	r6, [pc, #220]	; (800ecd0 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800ebf2:	4938      	ldr	r1, [pc, #224]	; (800ecd4 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800ebf4:	bf14      	ite	ne
 800ebf6:	2301      	movne	r3, #1
 800ebf8:	2300      	moveq	r3, #0
 800ebfa:	42ba      	cmp	r2, r7
 800ebfc:	bf0c      	ite	eq
 800ebfe:	2300      	moveq	r3, #0
 800ec00:	f003 0301 	andne.w	r3, r3, #1
 800ec04:	42b2      	cmp	r2, r6
 800ec06:	bf0c      	ite	eq
 800ec08:	2300      	moveq	r3, #0
 800ec0a:	f003 0301 	andne.w	r3, r3, #1
 800ec0e:	428a      	cmp	r2, r1
 800ec10:	bf0c      	ite	eq
 800ec12:	2300      	moveq	r3, #0
 800ec14:	f003 0301 	andne.w	r3, r3, #1
 800ec18:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ec1c:	428a      	cmp	r2, r1
 800ec1e:	bf0c      	ite	eq
 800ec20:	2300      	moveq	r3, #0
 800ec22:	f003 0301 	andne.w	r3, r3, #1
 800ec26:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800ec2a:	428a      	cmp	r2, r1
 800ec2c:	bf0c      	ite	eq
 800ec2e:	2300      	moveq	r3, #0
 800ec30:	f003 0301 	andne.w	r3, r3, #1
 800ec34:	b113      	cbz	r3, 800ec3c <HAL_TIM_SlaveConfigSynchro+0x60>
 800ec36:	4b28      	ldr	r3, [pc, #160]	; (800ecd8 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d138      	bne.n	800ecae <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800ec3c:	682b      	ldr	r3, [r5, #0]
 800ec3e:	1f1a      	subs	r2, r3, #4
 800ec40:	2a03      	cmp	r2, #3
 800ec42:	d902      	bls.n	800ec4a <HAL_TIM_SlaveConfigSynchro+0x6e>
 800ec44:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800ec48:	d12b      	bne.n	800eca2 <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800ec4a:	686b      	ldr	r3, [r5, #4]
 800ec4c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ec50:	2b40      	cmp	r3, #64	; 0x40
 800ec52:	d000      	beq.n	800ec56 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800ec54:	bb8b      	cbnz	r3, 800ecba <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800ec56:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d01f      	beq.n	800ec9e <HAL_TIM_SlaveConfigSynchro+0xc2>
 800ec5e:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800ec60:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ec62:	4629      	mov	r1, r5
 800ec64:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800ec66:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ec6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ec6e:	f7ff f933 	bl	800ded8 <TIM_SlaveTimer_SetConfig>
 800ec72:	b968      	cbnz	r0, 800ec90 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ec74:	6823      	ldr	r3, [r4, #0]
 800ec76:	68da      	ldr	r2, [r3, #12]
 800ec78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec7c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ec7e:	68da      	ldr	r2, [r3, #12]
 800ec80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ec84:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ec86:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ec8a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ec8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 800ec90:	2300      	movs	r3, #0
    return HAL_ERROR;
 800ec92:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 800ec94:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ec98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ec9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800ec9e:	2002      	movs	r0, #2
}
 800eca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800eca2:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800eca6:	480d      	ldr	r0, [pc, #52]	; (800ecdc <HAL_TIM_SlaveConfigSynchro+0x100>)
 800eca8:	f7f5 f950 	bl	8003f4c <assert_failed>
 800ecac:	e7cd      	b.n	800ec4a <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800ecae:	f241 51f6 	movw	r1, #5622	; 0x15f6
 800ecb2:	480a      	ldr	r0, [pc, #40]	; (800ecdc <HAL_TIM_SlaveConfigSynchro+0x100>)
 800ecb4:	f7f5 f94a 	bl	8003f4c <assert_failed>
 800ecb8:	e7c0      	b.n	800ec3c <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800ecba:	f241 51f8 	movw	r1, #5624	; 0x15f8
 800ecbe:	4807      	ldr	r0, [pc, #28]	; (800ecdc <HAL_TIM_SlaveConfigSynchro+0x100>)
 800ecc0:	f7f5 f944 	bl	8003f4c <assert_failed>
 800ecc4:	e7c7      	b.n	800ec56 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800ecc6:	bf00      	nop
 800ecc8:	40010000 	.word	0x40010000
 800eccc:	40000400 	.word	0x40000400
 800ecd0:	40000800 	.word	0x40000800
 800ecd4:	40000c00 	.word	0x40000c00
 800ecd8:	40001800 	.word	0x40001800
 800ecdc:	0802b1bc 	.word	0x0802b1bc

0800ece0 <HAL_TIM_OC_DelayElapsedCallback>:
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop

0800ece4 <TIM_DMACaptureCplt>:
{
 800ece4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ece6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ece8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecea:	4283      	cmp	r3, r0
 800ecec:	d01e      	beq.n	800ed2c <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ecee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ecf0:	4283      	cmp	r3, r0
 800ecf2:	d00b      	beq.n	800ed0c <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ecf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ecf6:	4283      	cmp	r3, r0
 800ecf8:	d027      	beq.n	800ed4a <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ecfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ecfc:	4283      	cmp	r3, r0
 800ecfe:	d02f      	beq.n	800ed60 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 800ed00:	4620      	mov	r0, r4
 800ed02:	f7f4 f81b 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed06:	2300      	movs	r3, #0
 800ed08:	7723      	strb	r3, [r4, #28]
}
 800ed0a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed0c:	2202      	movs	r2, #2
 800ed0e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ed10:	69db      	ldr	r3, [r3, #28]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d1f4      	bne.n	800ed00 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ed16:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 800ed18:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ed1a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ed1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 800ed22:	f7f4 f80b 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed26:	2300      	movs	r3, #0
 800ed28:	7723      	strb	r3, [r4, #28]
}
 800ed2a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ed30:	69db      	ldr	r3, [r3, #28]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1e4      	bne.n	800ed00 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ed36:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 800ed3a:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ed3c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800ed40:	f7f3 fffc 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed44:	2300      	movs	r3, #0
 800ed46:	7723      	strb	r3, [r4, #28]
}
 800ed48:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed4a:	2204      	movs	r2, #4
 800ed4c:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ed4e:	69db      	ldr	r3, [r3, #28]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1d5      	bne.n	800ed00 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ed54:	2301      	movs	r3, #1
 800ed56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ed5a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ed5e:	e7cf      	b.n	800ed00 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed60:	2208      	movs	r2, #8
 800ed62:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ed64:	69db      	ldr	r3, [r3, #28]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1ca      	bne.n	800ed00 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ed70:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800ed74:	e7c4      	b.n	800ed00 <TIM_DMACaptureCplt+0x1c>
 800ed76:	bf00      	nop

0800ed78 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop

0800ed7c <TIM_DMACaptureHalfCplt>:
{
 800ed7c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed7e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ed80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed82:	4283      	cmp	r3, r0
 800ed84:	d016      	beq.n	800edb4 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ed86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ed88:	4283      	cmp	r3, r0
 800ed8a:	d00b      	beq.n	800eda4 <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ed8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ed8e:	4283      	cmp	r3, r0
 800ed90:	d018      	beq.n	800edc4 <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ed92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ed94:	4283      	cmp	r3, r0
 800ed96:	d01d      	beq.n	800edd4 <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f7ff ffed 	bl	800ed78 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	7723      	strb	r3, [r4, #28]
}
 800eda2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eda4:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800eda6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eda8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800edaa:	f7ff ffe5 	bl	800ed78 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edae:	2300      	movs	r3, #0
 800edb0:	7723      	strb	r3, [r4, #28]
}
 800edb2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800edb4:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800edb6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800edb8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800edba:	f7ff ffdd 	bl	800ed78 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edbe:	2300      	movs	r3, #0
 800edc0:	7723      	strb	r3, [r4, #28]
}
 800edc2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800edc4:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800edc6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800edc8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800edca:	f7ff ffd5 	bl	800ed78 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edce:	2300      	movs	r3, #0
 800edd0:	7723      	strb	r3, [r4, #28]
}
 800edd2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edd4:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800edd6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edd8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800edda:	f7ff ffcd 	bl	800ed78 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edde:	2300      	movs	r3, #0
 800ede0:	7723      	strb	r3, [r4, #28]
}
 800ede2:	bd10      	pop	{r4, pc}

0800ede4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop

0800ede8 <HAL_TIM_TriggerCallback>:
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop

0800edec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800edec:	6803      	ldr	r3, [r0, #0]
 800edee:	691a      	ldr	r2, [r3, #16]
 800edf0:	0791      	lsls	r1, r2, #30
{
 800edf2:	b510      	push	{r4, lr}
 800edf4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800edf6:	d502      	bpl.n	800edfe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800edf8:	68da      	ldr	r2, [r3, #12]
 800edfa:	0792      	lsls	r2, r2, #30
 800edfc:	d468      	bmi.n	800eed0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800edfe:	691a      	ldr	r2, [r3, #16]
 800ee00:	0752      	lsls	r2, r2, #29
 800ee02:	d502      	bpl.n	800ee0a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ee04:	68da      	ldr	r2, [r3, #12]
 800ee06:	0750      	lsls	r0, r2, #29
 800ee08:	d44f      	bmi.n	800eeaa <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ee0a:	691a      	ldr	r2, [r3, #16]
 800ee0c:	0711      	lsls	r1, r2, #28
 800ee0e:	d502      	bpl.n	800ee16 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ee10:	68da      	ldr	r2, [r3, #12]
 800ee12:	0712      	lsls	r2, r2, #28
 800ee14:	d437      	bmi.n	800ee86 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ee16:	691a      	ldr	r2, [r3, #16]
 800ee18:	06d0      	lsls	r0, r2, #27
 800ee1a:	d502      	bpl.n	800ee22 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ee1c:	68da      	ldr	r2, [r3, #12]
 800ee1e:	06d1      	lsls	r1, r2, #27
 800ee20:	d41e      	bmi.n	800ee60 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ee22:	691a      	ldr	r2, [r3, #16]
 800ee24:	07d2      	lsls	r2, r2, #31
 800ee26:	d502      	bpl.n	800ee2e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ee28:	68da      	ldr	r2, [r3, #12]
 800ee2a:	07d0      	lsls	r0, r2, #31
 800ee2c:	d469      	bmi.n	800ef02 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ee2e:	691a      	ldr	r2, [r3, #16]
 800ee30:	0611      	lsls	r1, r2, #24
 800ee32:	d502      	bpl.n	800ee3a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee34:	68da      	ldr	r2, [r3, #12]
 800ee36:	0612      	lsls	r2, r2, #24
 800ee38:	d46b      	bmi.n	800ef12 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ee3a:	691a      	ldr	r2, [r3, #16]
 800ee3c:	05d0      	lsls	r0, r2, #23
 800ee3e:	d502      	bpl.n	800ee46 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee40:	68da      	ldr	r2, [r3, #12]
 800ee42:	0611      	lsls	r1, r2, #24
 800ee44:	d46d      	bmi.n	800ef22 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ee46:	691a      	ldr	r2, [r3, #16]
 800ee48:	0652      	lsls	r2, r2, #25
 800ee4a:	d502      	bpl.n	800ee52 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ee4c:	68da      	ldr	r2, [r3, #12]
 800ee4e:	0650      	lsls	r0, r2, #25
 800ee50:	d46f      	bmi.n	800ef32 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ee52:	691a      	ldr	r2, [r3, #16]
 800ee54:	0691      	lsls	r1, r2, #26
 800ee56:	d502      	bpl.n	800ee5e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ee58:	68da      	ldr	r2, [r3, #12]
 800ee5a:	0692      	lsls	r2, r2, #26
 800ee5c:	d449      	bmi.n	800eef2 <HAL_TIM_IRQHandler+0x106>
}
 800ee5e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee60:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee64:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800ee66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee68:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee6a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee6c:	69db      	ldr	r3, [r3, #28]
 800ee6e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ee72:	d16f      	bne.n	800ef54 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee74:	f7ff ff34 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f7ff ffb3 	bl	800ede4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee7e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ee80:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee82:	7722      	strb	r2, [r4, #28]
 800ee84:	e7cd      	b.n	800ee22 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ee86:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee8a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800ee8c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ee8e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee90:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee92:	69db      	ldr	r3, [r3, #28]
 800ee94:	079b      	lsls	r3, r3, #30
 800ee96:	d15a      	bne.n	800ef4e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee98:	f7ff ff22 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f7ff ffa1 	bl	800ede4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eea2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eea4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eea6:	7722      	strb	r2, [r4, #28]
 800eea8:	e7b5      	b.n	800ee16 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eeaa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eeae:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800eeb0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eeb2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eeb4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eeb6:	699b      	ldr	r3, [r3, #24]
 800eeb8:	f413 7f40 	tst.w	r3, #768	; 0x300
 800eebc:	d144      	bne.n	800ef48 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eebe:	f7ff ff0f 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eec2:	4620      	mov	r0, r4
 800eec4:	f7ff ff8e 	bl	800ede4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eec8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eeca:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eecc:	7722      	strb	r2, [r4, #28]
 800eece:	e79c      	b.n	800ee0a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eed0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eed4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eed6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eed8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eeda:	699b      	ldr	r3, [r3, #24]
 800eedc:	0799      	lsls	r1, r3, #30
 800eede:	d130      	bne.n	800ef42 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eee0:	f7ff fefe 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eee4:	4620      	mov	r0, r4
 800eee6:	f7ff ff7d 	bl	800ede4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eeea:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eeec:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eeee:	7722      	strb	r2, [r4, #28]
 800eef0:	e785      	b.n	800edfe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eef2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800eef6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eef8:	611a      	str	r2, [r3, #16]
}
 800eefa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800eefe:	f001 be53 	b.w	8010ba8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ef02:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ef08:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef0a:	f7f3 ff8d 	bl	8002e28 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ef0e:	6823      	ldr	r3, [r4, #0]
 800ef10:	e78d      	b.n	800ee2e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ef12:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800ef16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ef18:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ef1a:	f001 fe47 	bl	8010bac <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	e78b      	b.n	800ee3a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef22:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ef26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ef2a:	f001 fe41 	bl	8010bb0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ef2e:	6823      	ldr	r3, [r4, #0]
 800ef30:	e789      	b.n	800ee46 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ef32:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800ef36:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ef38:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ef3a:	f7ff ff55 	bl	800ede8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ef3e:	6823      	ldr	r3, [r4, #0]
 800ef40:	e787      	b.n	800ee52 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800ef42:	f7f3 fefb 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
 800ef46:	e7d0      	b.n	800eeea <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800ef48:	f7f3 fef8 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
 800ef4c:	e7bc      	b.n	800eec8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800ef4e:	f7f3 fef5 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
 800ef52:	e7a6      	b.n	800eea2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800ef54:	f7f3 fef2 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
 800ef58:	e791      	b.n	800ee7e <HAL_TIM_IRQHandler+0x92>
 800ef5a:	bf00      	nop

0800ef5c <HAL_TIM_ErrorCallback>:
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop

0800ef60 <TIM_DMAError>:
{
 800ef60:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef62:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ef64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef66:	4283      	cmp	r3, r0
 800ef68:	d01c      	beq.n	800efa4 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ef6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef6c:	4283      	cmp	r3, r0
 800ef6e:	d00e      	beq.n	800ef8e <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ef70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef72:	4283      	cmp	r3, r0
 800ef74:	d020      	beq.n	800efb8 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ef76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ef78:	4283      	cmp	r3, r0
 800ef7a:	d028      	beq.n	800efce <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 800ef7c:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800ef7e:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 800ef80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800ef84:	f7ff ffea 	bl	800ef5c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	7723      	strb	r3, [r4, #28]
}
 800ef8c:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ef8e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef90:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 800ef92:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ef94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef98:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800ef9a:	f7ff ffdf 	bl	800ef5c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	7723      	strb	r3, [r4, #28]
}
 800efa2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efa4:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800efa6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efa8:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800efaa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800efae:	f7ff ffd5 	bl	800ef5c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efb2:	2300      	movs	r3, #0
 800efb4:	7723      	strb	r3, [r4, #28]
}
 800efb6:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800efb8:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efba:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 800efbc:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800efbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efc2:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800efc4:	f7ff ffca 	bl	800ef5c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efc8:	2300      	movs	r3, #0
 800efca:	7723      	strb	r3, [r4, #28]
}
 800efcc:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800efce:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800efd0:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 800efd2:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800efd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800efd8:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800efda:	f7ff ffbf 	bl	800ef5c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efde:	2300      	movs	r3, #0
 800efe0:	7723      	strb	r3, [r4, #28]
}
 800efe2:	bd10      	pop	{r4, pc}

0800efe4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800efe4:	4a3c      	ldr	r2, [pc, #240]	; (800f0d8 <TIM_Base_SetConfig+0xf4>)
 800efe6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800efea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800efec:	eba0 0202 	sub.w	r2, r0, r2
 800eff0:	fab2 f282 	clz	r2, r2
{
 800eff4:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eff6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800effa:	d010      	beq.n	800f01e <TIM_Base_SetConfig+0x3a>
 800effc:	b97a      	cbnz	r2, 800f01e <TIM_Base_SetConfig+0x3a>
 800effe:	4d37      	ldr	r5, [pc, #220]	; (800f0dc <TIM_Base_SetConfig+0xf8>)
 800f000:	4c37      	ldr	r4, [pc, #220]	; (800f0e0 <TIM_Base_SetConfig+0xfc>)
 800f002:	42a0      	cmp	r0, r4
 800f004:	bf18      	it	ne
 800f006:	42a8      	cmpne	r0, r5
 800f008:	d12b      	bne.n	800f062 <TIM_Base_SetConfig+0x7e>
 800f00a:	4c36      	ldr	r4, [pc, #216]	; (800f0e4 <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f00c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800f010:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f012:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 800f014:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f016:	fab4 f484 	clz	r4, r4
 800f01a:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f01c:	e008      	b.n	800f030 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 800f01e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800f024:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f026:	4c2f      	ldr	r4, [pc, #188]	; (800f0e4 <TIM_Base_SetConfig+0x100>)
 800f028:	1b04      	subs	r4, r0, r4
 800f02a:	fab4 f484 	clz	r4, r4
 800f02e:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f030:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800f032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f036:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f038:	694d      	ldr	r5, [r1, #20]
 800f03a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f03e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800f040:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f042:	688b      	ldr	r3, [r1, #8]
 800f044:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800f046:	680b      	ldr	r3, [r1, #0]
 800f048:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f04a:	b922      	cbnz	r2, 800f056 <TIM_Base_SetConfig+0x72>
 800f04c:	b91c      	cbnz	r4, 800f056 <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 800f04e:	2301      	movs	r3, #1
}
 800f050:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800f052:	6143      	str	r3, [r0, #20]
}
 800f054:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800f056:	690b      	ldr	r3, [r1, #16]
 800f058:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800f05a:	2301      	movs	r3, #1
}
 800f05c:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800f05e:	6143      	str	r3, [r0, #20]
}
 800f060:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f062:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800f066:	42a0      	cmp	r0, r4
 800f068:	d024      	beq.n	800f0b4 <TIM_Base_SetConfig+0xd0>
 800f06a:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800f06e:	42a0      	cmp	r0, r4
 800f070:	d020      	beq.n	800f0b4 <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f072:	4c1d      	ldr	r4, [pc, #116]	; (800f0e8 <TIM_Base_SetConfig+0x104>)
 800f074:	4d1d      	ldr	r5, [pc, #116]	; (800f0ec <TIM_Base_SetConfig+0x108>)
 800f076:	42a0      	cmp	r0, r4
 800f078:	bf18      	it	ne
 800f07a:	42a8      	cmpne	r0, r5
 800f07c:	bf0c      	ite	eq
 800f07e:	2401      	moveq	r4, #1
 800f080:	2400      	movne	r4, #0
 800f082:	d027      	beq.n	800f0d4 <TIM_Base_SetConfig+0xf0>
 800f084:	4e1a      	ldr	r6, [pc, #104]	; (800f0f0 <TIM_Base_SetConfig+0x10c>)
 800f086:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800f08a:	42a8      	cmp	r0, r5
 800f08c:	bf18      	it	ne
 800f08e:	42b0      	cmpne	r0, r6
 800f090:	d0ce      	beq.n	800f030 <TIM_Base_SetConfig+0x4c>
 800f092:	4c18      	ldr	r4, [pc, #96]	; (800f0f4 <TIM_Base_SetConfig+0x110>)
 800f094:	42a0      	cmp	r0, r4
 800f096:	d01d      	beq.n	800f0d4 <TIM_Base_SetConfig+0xf0>
 800f098:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800f09c:	42a0      	cmp	r0, r4
 800f09e:	d019      	beq.n	800f0d4 <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f0a0:	694d      	ldr	r5, [r1, #20]
 800f0a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f0a6:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800f0a8:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f0aa:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800f0ac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f0ae:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800f0b0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f0b2:	e7cc      	b.n	800f04e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800f0b4:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f0b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0ba:	4c0a      	ldr	r4, [pc, #40]	; (800f0e4 <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 800f0bc:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0be:	4d0e      	ldr	r5, [pc, #56]	; (800f0f8 <TIM_Base_SetConfig+0x114>)
 800f0c0:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f0c2:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0c4:	fab4 f484 	clz	r4, r4
 800f0c8:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f0cc:	d0b0      	beq.n	800f030 <TIM_Base_SetConfig+0x4c>
 800f0ce:	2c00      	cmp	r4, #0
 800f0d0:	d1ae      	bne.n	800f030 <TIM_Base_SetConfig+0x4c>
 800f0d2:	e7ce      	b.n	800f072 <TIM_Base_SetConfig+0x8e>
 800f0d4:	2400      	movs	r4, #0
 800f0d6:	e7ab      	b.n	800f030 <TIM_Base_SetConfig+0x4c>
 800f0d8:	40010000 	.word	0x40010000
 800f0dc:	40000400 	.word	0x40000400
 800f0e0:	40000800 	.word	0x40000800
 800f0e4:	40010400 	.word	0x40010400
 800f0e8:	40014400 	.word	0x40014400
 800f0ec:	40014000 	.word	0x40014000
 800f0f0:	40014800 	.word	0x40014800
 800f0f4:	40001c00 	.word	0x40001c00
 800f0f8:	40000c00 	.word	0x40000c00

0800f0fc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	f000 80b8 	beq.w	800f272 <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f102:	6802      	ldr	r2, [r0, #0]
 800f104:	4b5f      	ldr	r3, [pc, #380]	; (800f284 <HAL_TIM_Base_Init+0x188>)
 800f106:	4960      	ldr	r1, [pc, #384]	; (800f288 <HAL_TIM_Base_Init+0x18c>)
 800f108:	429a      	cmp	r2, r3
 800f10a:	bf18      	it	ne
 800f10c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800f110:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f112:	bf14      	ite	ne
 800f114:	2301      	movne	r3, #1
 800f116:	2300      	moveq	r3, #0
 800f118:	4604      	mov	r4, r0
 800f11a:	485c      	ldr	r0, [pc, #368]	; (800f28c <HAL_TIM_Base_Init+0x190>)
 800f11c:	4282      	cmp	r2, r0
 800f11e:	bf0c      	ite	eq
 800f120:	2300      	moveq	r3, #0
 800f122:	f003 0301 	andne.w	r3, r3, #1
 800f126:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f12a:	428a      	cmp	r2, r1
 800f12c:	bf0c      	ite	eq
 800f12e:	2300      	moveq	r3, #0
 800f130:	f003 0301 	andne.w	r3, r3, #1
 800f134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f138:	4282      	cmp	r2, r0
 800f13a:	bf0c      	ite	eq
 800f13c:	2300      	moveq	r3, #0
 800f13e:	f003 0301 	andne.w	r3, r3, #1
 800f142:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f146:	428a      	cmp	r2, r1
 800f148:	bf0c      	ite	eq
 800f14a:	2300      	moveq	r3, #0
 800f14c:	f003 0301 	andne.w	r3, r3, #1
 800f150:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f154:	4282      	cmp	r2, r0
 800f156:	bf0c      	ite	eq
 800f158:	2300      	moveq	r3, #0
 800f15a:	f003 0301 	andne.w	r3, r3, #1
 800f15e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f162:	428a      	cmp	r2, r1
 800f164:	bf0c      	ite	eq
 800f166:	2300      	moveq	r3, #0
 800f168:	f003 0301 	andne.w	r3, r3, #1
 800f16c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f170:	4282      	cmp	r2, r0
 800f172:	bf0c      	ite	eq
 800f174:	2300      	moveq	r3, #0
 800f176:	f003 0301 	andne.w	r3, r3, #1
 800f17a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f17e:	428a      	cmp	r2, r1
 800f180:	bf0c      	ite	eq
 800f182:	2300      	moveq	r3, #0
 800f184:	f003 0301 	andne.w	r3, r3, #1
 800f188:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f18c:	4282      	cmp	r2, r0
 800f18e:	bf0c      	ite	eq
 800f190:	2300      	moveq	r3, #0
 800f192:	f003 0301 	andne.w	r3, r3, #1
 800f196:	428a      	cmp	r2, r1
 800f198:	bf0c      	ite	eq
 800f19a:	2300      	moveq	r3, #0
 800f19c:	f003 0301 	andne.w	r3, r3, #1
 800f1a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f1a4:	428a      	cmp	r2, r1
 800f1a6:	bf0c      	ite	eq
 800f1a8:	2300      	moveq	r3, #0
 800f1aa:	f003 0301 	andne.w	r3, r3, #1
 800f1ae:	b113      	cbz	r3, 800f1b6 <HAL_TIM_Base_Init+0xba>
 800f1b0:	4b37      	ldr	r3, [pc, #220]	; (800f290 <HAL_TIM_Base_Init+0x194>)
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d15f      	bne.n	800f276 <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f1b6:	68a3      	ldr	r3, [r4, #8]
 800f1b8:	f023 0210 	bic.w	r2, r3, #16
 800f1bc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800f1c0:	2920      	cmp	r1, #32
 800f1c2:	bf18      	it	ne
 800f1c4:	2a00      	cmpne	r2, #0
 800f1c6:	d001      	beq.n	800f1cc <HAL_TIM_Base_Init+0xd0>
 800f1c8:	2b40      	cmp	r3, #64	; 0x40
 800f1ca:	d14c      	bne.n	800f266 <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f1cc:	6923      	ldr	r3, [r4, #16]
 800f1ce:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f1d2:	d002      	beq.n	800f1da <HAL_TIM_Base_Init+0xde>
 800f1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1d8:	d12b      	bne.n	800f232 <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f1da:	69a3      	ldr	r3, [r4, #24]
 800f1dc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f1e0:	d130      	bne.n	800f244 <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f1e2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f1e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f1ea:	b3b3      	cbz	r3, 800f25a <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1ec:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800f1ee:	2302      	movs	r3, #2
 800f1f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1f4:	f851 0b04 	ldr.w	r0, [r1], #4
 800f1f8:	f7ff fef4 	bl	800efe4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f1fc:	2301      	movs	r3, #1
  return HAL_OK;
 800f1fe:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f200:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f204:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f208:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f20c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f210:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f21c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f220:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f224:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f228:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f22c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800f230:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f232:	f44f 718c 	mov.w	r1, #280	; 0x118
 800f236:	4817      	ldr	r0, [pc, #92]	; (800f294 <HAL_TIM_Base_Init+0x198>)
 800f238:	f7f4 fe88 	bl	8003f4c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f23c:	69a3      	ldr	r3, [r4, #24]
 800f23e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f242:	d0ce      	beq.n	800f1e2 <HAL_TIM_Base_Init+0xe6>
 800f244:	f240 1119 	movw	r1, #281	; 0x119
 800f248:	4812      	ldr	r0, [pc, #72]	; (800f294 <HAL_TIM_Base_Init+0x198>)
 800f24a:	f7f4 fe7f 	bl	8003f4c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f24e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f252:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1c8      	bne.n	800f1ec <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 800f25a:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800f25c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800f260:	f7f6 fa92 	bl	8005788 <HAL_TIM_Base_MspInit>
 800f264:	e7c2      	b.n	800f1ec <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f266:	f240 1117 	movw	r1, #279	; 0x117
 800f26a:	480a      	ldr	r0, [pc, #40]	; (800f294 <HAL_TIM_Base_Init+0x198>)
 800f26c:	f7f4 fe6e 	bl	8003f4c <assert_failed>
 800f270:	e7ac      	b.n	800f1cc <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 800f272:	2001      	movs	r0, #1
}
 800f274:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f276:	f44f 718b 	mov.w	r1, #278	; 0x116
 800f27a:	4806      	ldr	r0, [pc, #24]	; (800f294 <HAL_TIM_Base_Init+0x198>)
 800f27c:	f7f4 fe66 	bl	8003f4c <assert_failed>
 800f280:	e799      	b.n	800f1b6 <HAL_TIM_Base_Init+0xba>
 800f282:	bf00      	nop
 800f284:	40010000 	.word	0x40010000
 800f288:	40000800 	.word	0x40000800
 800f28c:	40000400 	.word	0x40000400
 800f290:	40002000 	.word	0x40002000
 800f294:	0802b1bc 	.word	0x0802b1bc

0800f298 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800f298:	2800      	cmp	r0, #0
 800f29a:	f000 80b8 	beq.w	800f40e <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f29e:	6802      	ldr	r2, [r0, #0]
 800f2a0:	4b5f      	ldr	r3, [pc, #380]	; (800f420 <HAL_TIM_OC_Init+0x188>)
 800f2a2:	4960      	ldr	r1, [pc, #384]	; (800f424 <HAL_TIM_OC_Init+0x18c>)
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	bf18      	it	ne
 800f2a8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800f2ac:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f2ae:	bf14      	ite	ne
 800f2b0:	2301      	movne	r3, #1
 800f2b2:	2300      	moveq	r3, #0
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	485c      	ldr	r0, [pc, #368]	; (800f428 <HAL_TIM_OC_Init+0x190>)
 800f2b8:	4282      	cmp	r2, r0
 800f2ba:	bf0c      	ite	eq
 800f2bc:	2300      	moveq	r3, #0
 800f2be:	f003 0301 	andne.w	r3, r3, #1
 800f2c2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f2c6:	428a      	cmp	r2, r1
 800f2c8:	bf0c      	ite	eq
 800f2ca:	2300      	moveq	r3, #0
 800f2cc:	f003 0301 	andne.w	r3, r3, #1
 800f2d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2d4:	4282      	cmp	r2, r0
 800f2d6:	bf0c      	ite	eq
 800f2d8:	2300      	moveq	r3, #0
 800f2da:	f003 0301 	andne.w	r3, r3, #1
 800f2de:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f2e2:	428a      	cmp	r2, r1
 800f2e4:	bf0c      	ite	eq
 800f2e6:	2300      	moveq	r3, #0
 800f2e8:	f003 0301 	andne.w	r3, r3, #1
 800f2ec:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f2f0:	4282      	cmp	r2, r0
 800f2f2:	bf0c      	ite	eq
 800f2f4:	2300      	moveq	r3, #0
 800f2f6:	f003 0301 	andne.w	r3, r3, #1
 800f2fa:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f2fe:	428a      	cmp	r2, r1
 800f300:	bf0c      	ite	eq
 800f302:	2300      	moveq	r3, #0
 800f304:	f003 0301 	andne.w	r3, r3, #1
 800f308:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f30c:	4282      	cmp	r2, r0
 800f30e:	bf0c      	ite	eq
 800f310:	2300      	moveq	r3, #0
 800f312:	f003 0301 	andne.w	r3, r3, #1
 800f316:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f31a:	428a      	cmp	r2, r1
 800f31c:	bf0c      	ite	eq
 800f31e:	2300      	moveq	r3, #0
 800f320:	f003 0301 	andne.w	r3, r3, #1
 800f324:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f328:	4282      	cmp	r2, r0
 800f32a:	bf0c      	ite	eq
 800f32c:	2300      	moveq	r3, #0
 800f32e:	f003 0301 	andne.w	r3, r3, #1
 800f332:	428a      	cmp	r2, r1
 800f334:	bf0c      	ite	eq
 800f336:	2300      	moveq	r3, #0
 800f338:	f003 0301 	andne.w	r3, r3, #1
 800f33c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f340:	428a      	cmp	r2, r1
 800f342:	bf0c      	ite	eq
 800f344:	2300      	moveq	r3, #0
 800f346:	f003 0301 	andne.w	r3, r3, #1
 800f34a:	b113      	cbz	r3, 800f352 <HAL_TIM_OC_Init+0xba>
 800f34c:	4b37      	ldr	r3, [pc, #220]	; (800f42c <HAL_TIM_OC_Init+0x194>)
 800f34e:	429a      	cmp	r2, r3
 800f350:	d15f      	bne.n	800f412 <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f352:	68a3      	ldr	r3, [r4, #8]
 800f354:	f023 0210 	bic.w	r2, r3, #16
 800f358:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800f35c:	2920      	cmp	r1, #32
 800f35e:	bf18      	it	ne
 800f360:	2a00      	cmpne	r2, #0
 800f362:	d001      	beq.n	800f368 <HAL_TIM_OC_Init+0xd0>
 800f364:	2b40      	cmp	r3, #64	; 0x40
 800f366:	d14c      	bne.n	800f402 <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f368:	6923      	ldr	r3, [r4, #16]
 800f36a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f36e:	d002      	beq.n	800f376 <HAL_TIM_OC_Init+0xde>
 800f370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f374:	d12b      	bne.n	800f3ce <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f376:	69a3      	ldr	r3, [r4, #24]
 800f378:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f37c:	d130      	bne.n	800f3e0 <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f37e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f382:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f386:	b3b3      	cbz	r3, 800f3f6 <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f388:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800f38a:	2302      	movs	r3, #2
 800f38c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f390:	f851 0b04 	ldr.w	r0, [r1], #4
 800f394:	f7ff fe26 	bl	800efe4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f398:	2301      	movs	r3, #1
  return HAL_OK;
 800f39a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f39c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f3a4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f3a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f3ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f3b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f3bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f3c0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f3c4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f3c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800f3cc:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f3ce:	f240 2197 	movw	r1, #663	; 0x297
 800f3d2:	4817      	ldr	r0, [pc, #92]	; (800f430 <HAL_TIM_OC_Init+0x198>)
 800f3d4:	f7f4 fdba 	bl	8003f4c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f3d8:	69a3      	ldr	r3, [r4, #24]
 800f3da:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f3de:	d0ce      	beq.n	800f37e <HAL_TIM_OC_Init+0xe6>
 800f3e0:	f44f 7126 	mov.w	r1, #664	; 0x298
 800f3e4:	4812      	ldr	r0, [pc, #72]	; (800f430 <HAL_TIM_OC_Init+0x198>)
 800f3e6:	f7f4 fdb1 	bl	8003f4c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f3ea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f3ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1c8      	bne.n	800f388 <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 800f3f6:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800f3f8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800f3fc:	f7ff f90e 	bl	800e61c <HAL_TIM_OC_MspInit>
 800f400:	e7c2      	b.n	800f388 <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f402:	f240 2196 	movw	r1, #662	; 0x296
 800f406:	480a      	ldr	r0, [pc, #40]	; (800f430 <HAL_TIM_OC_Init+0x198>)
 800f408:	f7f4 fda0 	bl	8003f4c <assert_failed>
 800f40c:	e7ac      	b.n	800f368 <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 800f40e:	2001      	movs	r0, #1
}
 800f410:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f412:	f240 2195 	movw	r1, #661	; 0x295
 800f416:	4806      	ldr	r0, [pc, #24]	; (800f430 <HAL_TIM_OC_Init+0x198>)
 800f418:	f7f4 fd98 	bl	8003f4c <assert_failed>
 800f41c:	e799      	b.n	800f352 <HAL_TIM_OC_Init+0xba>
 800f41e:	bf00      	nop
 800f420:	40010000 	.word	0x40010000
 800f424:	40000800 	.word	0x40000800
 800f428:	40000400 	.word	0x40000400
 800f42c:	40002000 	.word	0x40002000
 800f430:	0802b1bc 	.word	0x0802b1bc

0800f434 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800f434:	2800      	cmp	r0, #0
 800f436:	f000 80b8 	beq.w	800f5aa <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f43a:	6802      	ldr	r2, [r0, #0]
 800f43c:	4b5f      	ldr	r3, [pc, #380]	; (800f5bc <HAL_TIM_PWM_Init+0x188>)
 800f43e:	4960      	ldr	r1, [pc, #384]	; (800f5c0 <HAL_TIM_PWM_Init+0x18c>)
 800f440:	429a      	cmp	r2, r3
 800f442:	bf18      	it	ne
 800f444:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800f448:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f44a:	bf14      	ite	ne
 800f44c:	2301      	movne	r3, #1
 800f44e:	2300      	moveq	r3, #0
 800f450:	4604      	mov	r4, r0
 800f452:	485c      	ldr	r0, [pc, #368]	; (800f5c4 <HAL_TIM_PWM_Init+0x190>)
 800f454:	4282      	cmp	r2, r0
 800f456:	bf0c      	ite	eq
 800f458:	2300      	moveq	r3, #0
 800f45a:	f003 0301 	andne.w	r3, r3, #1
 800f45e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f462:	428a      	cmp	r2, r1
 800f464:	bf0c      	ite	eq
 800f466:	2300      	moveq	r3, #0
 800f468:	f003 0301 	andne.w	r3, r3, #1
 800f46c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f470:	4282      	cmp	r2, r0
 800f472:	bf0c      	ite	eq
 800f474:	2300      	moveq	r3, #0
 800f476:	f003 0301 	andne.w	r3, r3, #1
 800f47a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f47e:	428a      	cmp	r2, r1
 800f480:	bf0c      	ite	eq
 800f482:	2300      	moveq	r3, #0
 800f484:	f003 0301 	andne.w	r3, r3, #1
 800f488:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f48c:	4282      	cmp	r2, r0
 800f48e:	bf0c      	ite	eq
 800f490:	2300      	moveq	r3, #0
 800f492:	f003 0301 	andne.w	r3, r3, #1
 800f496:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f49a:	428a      	cmp	r2, r1
 800f49c:	bf0c      	ite	eq
 800f49e:	2300      	moveq	r3, #0
 800f4a0:	f003 0301 	andne.w	r3, r3, #1
 800f4a4:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f4a8:	4282      	cmp	r2, r0
 800f4aa:	bf0c      	ite	eq
 800f4ac:	2300      	moveq	r3, #0
 800f4ae:	f003 0301 	andne.w	r3, r3, #1
 800f4b2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f4b6:	428a      	cmp	r2, r1
 800f4b8:	bf0c      	ite	eq
 800f4ba:	2300      	moveq	r3, #0
 800f4bc:	f003 0301 	andne.w	r3, r3, #1
 800f4c0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f4c4:	4282      	cmp	r2, r0
 800f4c6:	bf0c      	ite	eq
 800f4c8:	2300      	moveq	r3, #0
 800f4ca:	f003 0301 	andne.w	r3, r3, #1
 800f4ce:	428a      	cmp	r2, r1
 800f4d0:	bf0c      	ite	eq
 800f4d2:	2300      	moveq	r3, #0
 800f4d4:	f003 0301 	andne.w	r3, r3, #1
 800f4d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f4dc:	428a      	cmp	r2, r1
 800f4de:	bf0c      	ite	eq
 800f4e0:	2300      	moveq	r3, #0
 800f4e2:	f003 0301 	andne.w	r3, r3, #1
 800f4e6:	b113      	cbz	r3, 800f4ee <HAL_TIM_PWM_Init+0xba>
 800f4e8:	4b37      	ldr	r3, [pc, #220]	; (800f5c8 <HAL_TIM_PWM_Init+0x194>)
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d15f      	bne.n	800f5ae <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f4ee:	68a3      	ldr	r3, [r4, #8]
 800f4f0:	f023 0210 	bic.w	r2, r3, #16
 800f4f4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800f4f8:	2920      	cmp	r1, #32
 800f4fa:	bf18      	it	ne
 800f4fc:	2a00      	cmpne	r2, #0
 800f4fe:	d001      	beq.n	800f504 <HAL_TIM_PWM_Init+0xd0>
 800f500:	2b40      	cmp	r3, #64	; 0x40
 800f502:	d14c      	bne.n	800f59e <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f504:	6923      	ldr	r3, [r4, #16]
 800f506:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f50a:	d002      	beq.n	800f512 <HAL_TIM_PWM_Init+0xde>
 800f50c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f510:	d12b      	bne.n	800f56a <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f512:	69a3      	ldr	r3, [r4, #24]
 800f514:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f518:	d130      	bne.n	800f57c <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f51a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f51e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f522:	b3b3      	cbz	r3, 800f592 <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f524:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800f526:	2302      	movs	r3, #2
 800f528:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f52c:	f851 0b04 	ldr.w	r0, [r1], #4
 800f530:	f7ff fd58 	bl	800efe4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f534:	2301      	movs	r3, #1
  return HAL_OK;
 800f536:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f538:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f53c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f540:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f544:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f548:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f54c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f554:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f558:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f55c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f560:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f564:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800f568:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f56a:	f240 5132 	movw	r1, #1330	; 0x532
 800f56e:	4817      	ldr	r0, [pc, #92]	; (800f5cc <HAL_TIM_PWM_Init+0x198>)
 800f570:	f7f4 fcec 	bl	8003f4c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f574:	69a3      	ldr	r3, [r4, #24]
 800f576:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f57a:	d0ce      	beq.n	800f51a <HAL_TIM_PWM_Init+0xe6>
 800f57c:	f240 5133 	movw	r1, #1331	; 0x533
 800f580:	4812      	ldr	r0, [pc, #72]	; (800f5cc <HAL_TIM_PWM_Init+0x198>)
 800f582:	f7f4 fce3 	bl	8003f4c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f586:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f58a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1c8      	bne.n	800f524 <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 800f592:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800f594:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800f598:	f7ff f842 	bl	800e620 <HAL_TIM_PWM_MspInit>
 800f59c:	e7c2      	b.n	800f524 <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f59e:	f240 5131 	movw	r1, #1329	; 0x531
 800f5a2:	480a      	ldr	r0, [pc, #40]	; (800f5cc <HAL_TIM_PWM_Init+0x198>)
 800f5a4:	f7f4 fcd2 	bl	8003f4c <assert_failed>
 800f5a8:	e7ac      	b.n	800f504 <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 800f5aa:	2001      	movs	r0, #1
}
 800f5ac:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f5ae:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 800f5b2:	4806      	ldr	r0, [pc, #24]	; (800f5cc <HAL_TIM_PWM_Init+0x198>)
 800f5b4:	f7f4 fcca 	bl	8003f4c <assert_failed>
 800f5b8:	e799      	b.n	800f4ee <HAL_TIM_PWM_Init+0xba>
 800f5ba:	bf00      	nop
 800f5bc:	40010000 	.word	0x40010000
 800f5c0:	40000800 	.word	0x40000800
 800f5c4:	40000400 	.word	0x40000400
 800f5c8:	40002000 	.word	0x40002000
 800f5cc:	0802b1bc 	.word	0x0802b1bc

0800f5d0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	f000 80b8 	beq.w	800f746 <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f5d6:	6802      	ldr	r2, [r0, #0]
 800f5d8:	4b5f      	ldr	r3, [pc, #380]	; (800f758 <HAL_TIM_IC_Init+0x188>)
 800f5da:	4960      	ldr	r1, [pc, #384]	; (800f75c <HAL_TIM_IC_Init+0x18c>)
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	bf18      	it	ne
 800f5e0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800f5e4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f5e6:	bf14      	ite	ne
 800f5e8:	2301      	movne	r3, #1
 800f5ea:	2300      	moveq	r3, #0
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	485c      	ldr	r0, [pc, #368]	; (800f760 <HAL_TIM_IC_Init+0x190>)
 800f5f0:	4282      	cmp	r2, r0
 800f5f2:	bf0c      	ite	eq
 800f5f4:	2300      	moveq	r3, #0
 800f5f6:	f003 0301 	andne.w	r3, r3, #1
 800f5fa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f5fe:	428a      	cmp	r2, r1
 800f600:	bf0c      	ite	eq
 800f602:	2300      	moveq	r3, #0
 800f604:	f003 0301 	andne.w	r3, r3, #1
 800f608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f60c:	4282      	cmp	r2, r0
 800f60e:	bf0c      	ite	eq
 800f610:	2300      	moveq	r3, #0
 800f612:	f003 0301 	andne.w	r3, r3, #1
 800f616:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f61a:	428a      	cmp	r2, r1
 800f61c:	bf0c      	ite	eq
 800f61e:	2300      	moveq	r3, #0
 800f620:	f003 0301 	andne.w	r3, r3, #1
 800f624:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f628:	4282      	cmp	r2, r0
 800f62a:	bf0c      	ite	eq
 800f62c:	2300      	moveq	r3, #0
 800f62e:	f003 0301 	andne.w	r3, r3, #1
 800f632:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f636:	428a      	cmp	r2, r1
 800f638:	bf0c      	ite	eq
 800f63a:	2300      	moveq	r3, #0
 800f63c:	f003 0301 	andne.w	r3, r3, #1
 800f640:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f644:	4282      	cmp	r2, r0
 800f646:	bf0c      	ite	eq
 800f648:	2300      	moveq	r3, #0
 800f64a:	f003 0301 	andne.w	r3, r3, #1
 800f64e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f652:	428a      	cmp	r2, r1
 800f654:	bf0c      	ite	eq
 800f656:	2300      	moveq	r3, #0
 800f658:	f003 0301 	andne.w	r3, r3, #1
 800f65c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f660:	4282      	cmp	r2, r0
 800f662:	bf0c      	ite	eq
 800f664:	2300      	moveq	r3, #0
 800f666:	f003 0301 	andne.w	r3, r3, #1
 800f66a:	428a      	cmp	r2, r1
 800f66c:	bf0c      	ite	eq
 800f66e:	2300      	moveq	r3, #0
 800f670:	f003 0301 	andne.w	r3, r3, #1
 800f674:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f678:	428a      	cmp	r2, r1
 800f67a:	bf0c      	ite	eq
 800f67c:	2300      	moveq	r3, #0
 800f67e:	f003 0301 	andne.w	r3, r3, #1
 800f682:	b113      	cbz	r3, 800f68a <HAL_TIM_IC_Init+0xba>
 800f684:	4b37      	ldr	r3, [pc, #220]	; (800f764 <HAL_TIM_IC_Init+0x194>)
 800f686:	429a      	cmp	r2, r3
 800f688:	d15f      	bne.n	800f74a <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f68a:	68a3      	ldr	r3, [r4, #8]
 800f68c:	f023 0210 	bic.w	r2, r3, #16
 800f690:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800f694:	2920      	cmp	r1, #32
 800f696:	bf18      	it	ne
 800f698:	2a00      	cmpne	r2, #0
 800f69a:	d001      	beq.n	800f6a0 <HAL_TIM_IC_Init+0xd0>
 800f69c:	2b40      	cmp	r3, #64	; 0x40
 800f69e:	d14c      	bne.n	800f73a <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f6a0:	6923      	ldr	r3, [r4, #16]
 800f6a2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f6a6:	d002      	beq.n	800f6ae <HAL_TIM_IC_Init+0xde>
 800f6a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6ac:	d12b      	bne.n	800f706 <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f6ae:	69a3      	ldr	r3, [r4, #24]
 800f6b0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f6b4:	d130      	bne.n	800f718 <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f6b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f6ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f6be:	b3b3      	cbz	r3, 800f72e <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6c0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800f6c2:	2302      	movs	r3, #2
 800f6c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6c8:	f851 0b04 	ldr.w	r0, [r1], #4
 800f6cc:	f7ff fc8a 	bl	800efe4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6d0:	2301      	movs	r3, #1
  return HAL_OK;
 800f6d2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6d4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f6dc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f6e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f6e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f6e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f6f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f6f8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f6fc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f700:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800f704:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f706:	f240 71cc 	movw	r1, #1996	; 0x7cc
 800f70a:	4817      	ldr	r0, [pc, #92]	; (800f768 <HAL_TIM_IC_Init+0x198>)
 800f70c:	f7f4 fc1e 	bl	8003f4c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f710:	69a3      	ldr	r3, [r4, #24]
 800f712:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f716:	d0ce      	beq.n	800f6b6 <HAL_TIM_IC_Init+0xe6>
 800f718:	f240 71cd 	movw	r1, #1997	; 0x7cd
 800f71c:	4812      	ldr	r0, [pc, #72]	; (800f768 <HAL_TIM_IC_Init+0x198>)
 800f71e:	f7f4 fc15 	bl	8003f4c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f722:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f726:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d1c8      	bne.n	800f6c0 <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 800f72e:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800f730:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800f734:	f7fe ff76 	bl	800e624 <HAL_TIM_IC_MspInit>
 800f738:	e7c2      	b.n	800f6c0 <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f73a:	f240 71cb 	movw	r1, #1995	; 0x7cb
 800f73e:	480a      	ldr	r0, [pc, #40]	; (800f768 <HAL_TIM_IC_Init+0x198>)
 800f740:	f7f4 fc04 	bl	8003f4c <assert_failed>
 800f744:	e7ac      	b.n	800f6a0 <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 800f746:	2001      	movs	r0, #1
}
 800f748:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f74a:	f240 71ca 	movw	r1, #1994	; 0x7ca
 800f74e:	4806      	ldr	r0, [pc, #24]	; (800f768 <HAL_TIM_IC_Init+0x198>)
 800f750:	f7f4 fbfc 	bl	8003f4c <assert_failed>
 800f754:	e799      	b.n	800f68a <HAL_TIM_IC_Init+0xba>
 800f756:	bf00      	nop
 800f758:	40010000 	.word	0x40010000
 800f75c:	40000800 	.word	0x40000800
 800f760:	40000400 	.word	0x40000400
 800f764:	40002000 	.word	0x40002000
 800f768:	0802b1bc 	.word	0x0802b1bc

0800f76c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f76c:	6a03      	ldr	r3, [r0, #32]
 800f76e:	f023 0310 	bic.w	r3, r3, #16
{
 800f772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f776:	6203      	str	r3, [r0, #32]
{
 800f778:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800f77a:	6a05      	ldr	r5, [r0, #32]
{
 800f77c:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800f77e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f782:	4b29      	ldr	r3, [pc, #164]	; (800f828 <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 800f784:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 800f788:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f78a:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f78c:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f78e:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f792:	688b      	ldr	r3, [r1, #8]
 800f794:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f798:	4b24      	ldr	r3, [pc, #144]	; (800f82c <TIM_OC2_SetConfig+0xc0>)
 800f79a:	4298      	cmp	r0, r3
 800f79c:	d00b      	beq.n	800f7b6 <TIM_OC2_SetConfig+0x4a>
 800f79e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f7a2:	4298      	cmp	r0, r3
 800f7a4:	d007      	beq.n	800f7b6 <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 800f7a6:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800f7a8:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800f7ac:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800f7ae:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800f7b0:	6225      	str	r5, [r4, #32]
}
 800f7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f7b6:	68f3      	ldr	r3, [r6, #12]
 800f7b8:	f033 0208 	bics.w	r2, r3, #8
 800f7bc:	d123      	bne.n	800f806 <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800f7be:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f7c2:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f7c6:	69b3      	ldr	r3, [r6, #24]
 800f7c8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800f7cc:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f7d0:	d120      	bne.n	800f814 <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f7d2:	6973      	ldr	r3, [r6, #20]
 800f7d4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f7d8:	d107      	bne.n	800f7ea <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7da:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7de:	69b1      	ldr	r1, [r6, #24]
 800f7e0:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800f7e4:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800f7e8:	e7dd      	b.n	800f7a6 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f7ea:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 800f7ee:	4810      	ldr	r0, [pc, #64]	; (800f830 <TIM_OC2_SetConfig+0xc4>)
 800f7f0:	f7f4 fbac 	bl	8003f4c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7f4:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7f8:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f7fa:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7fc:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800f800:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800f804:	e7cf      	b.n	800f7a6 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f806:	f641 31aa 	movw	r1, #7082	; 0x1baa
 800f80a:	4809      	ldr	r0, [pc, #36]	; (800f830 <TIM_OC2_SetConfig+0xc4>)
 800f80c:	f7f4 fb9e 	bl	8003f4c <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f810:	68f3      	ldr	r3, [r6, #12]
 800f812:	e7d4      	b.n	800f7be <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f814:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 800f818:	4805      	ldr	r0, [pc, #20]	; (800f830 <TIM_OC2_SetConfig+0xc4>)
 800f81a:	f7f4 fb97 	bl	8003f4c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f81e:	6973      	ldr	r3, [r6, #20]
 800f820:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f824:	d0d9      	beq.n	800f7da <TIM_OC2_SetConfig+0x6e>
 800f826:	e7e0      	b.n	800f7ea <TIM_OC2_SetConfig+0x7e>
 800f828:	feff8cff 	.word	0xfeff8cff
 800f82c:	40010000 	.word	0x40010000
 800f830:	0802b1bc 	.word	0x0802b1bc

0800f834 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800f834:	2a14      	cmp	r2, #20
{
 800f836:	b570      	push	{r4, r5, r6, lr}
 800f838:	4614      	mov	r4, r2
 800f83a:	4605      	mov	r5, r0
 800f83c:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800f83e:	d937      	bls.n	800f8b0 <HAL_TIM_OC_ConfigChannel+0x7c>
 800f840:	2a3c      	cmp	r2, #60	; 0x3c
 800f842:	d139      	bne.n	800f8b8 <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800f844:	6833      	ldr	r3, [r6, #0]
 800f846:	f023 0210 	bic.w	r2, r3, #16
 800f84a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800f84e:	2a40      	cmp	r2, #64	; 0x40
 800f850:	bf18      	it	ne
 800f852:	2b00      	cmpne	r3, #0
 800f854:	d003      	beq.n	800f85e <HAL_TIM_OC_ConfigChannel+0x2a>
 800f856:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f85a:	f040 8138 	bne.w	800face <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800f85e:	68b3      	ldr	r3, [r6, #8]
 800f860:	f033 0302 	bics.w	r3, r3, #2
 800f864:	d12e      	bne.n	800f8c4 <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 800f866:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d033      	beq.n	800f8d6 <HAL_TIM_OC_ConfigChannel+0xa2>
 800f86e:	2301      	movs	r3, #1
 800f870:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 800f874:	2c14      	cmp	r4, #20
 800f876:	d816      	bhi.n	800f8a6 <HAL_TIM_OC_ConfigChannel+0x72>
 800f878:	e8df f014 	tbh	[pc, r4, lsl #1]
 800f87c:	0015002f 	.word	0x0015002f
 800f880:	00150015 	.word	0x00150015
 800f884:	00150080 	.word	0x00150080
 800f888:	00150015 	.word	0x00150015
 800f88c:	001500b5 	.word	0x001500b5
 800f890:	00150015 	.word	0x00150015
 800f894:	001500db 	.word	0x001500db
 800f898:	00150015 	.word	0x00150015
 800f89c:	00150101 	.word	0x00150101
 800f8a0:	00150015 	.word	0x00150015
 800f8a4:	010e      	.short	0x010e
 800f8a6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800f8ae:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800f8b0:	4b98      	ldr	r3, [pc, #608]	; (800fb14 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800f8b2:	40d3      	lsrs	r3, r2
 800f8b4:	07db      	lsls	r3, r3, #31
 800f8b6:	d4c5      	bmi.n	800f844 <HAL_TIM_OC_ConfigChannel+0x10>
 800f8b8:	f640 71df 	movw	r1, #4063	; 0xfdf
 800f8bc:	4896      	ldr	r0, [pc, #600]	; (800fb18 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800f8be:	f7f4 fb45 	bl	8003f4c <assert_failed>
 800f8c2:	e7bf      	b.n	800f844 <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800f8c4:	f640 71e1 	movw	r1, #4065	; 0xfe1
 800f8c8:	4893      	ldr	r0, [pc, #588]	; (800fb18 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800f8ca:	f7f4 fb3f 	bl	8003f4c <assert_failed>
  __HAL_LOCK(htim);
 800f8ce:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d1cb      	bne.n	800f86e <HAL_TIM_OC_ConfigChannel+0x3a>
 800f8d6:	2002      	movs	r0, #2
}
 800f8d8:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f8da:	6828      	ldr	r0, [r5, #0]
 800f8dc:	4b8f      	ldr	r3, [pc, #572]	; (800fb1c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800f8de:	4a90      	ldr	r2, [pc, #576]	; (800fb20 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800f8e0:	4298      	cmp	r0, r3
 800f8e2:	bf18      	it	ne
 800f8e4:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f8e8:	bf14      	ite	ne
 800f8ea:	2301      	movne	r3, #1
 800f8ec:	2300      	moveq	r3, #0
 800f8ee:	4290      	cmp	r0, r2
 800f8f0:	bf0c      	ite	eq
 800f8f2:	2300      	moveq	r3, #0
 800f8f4:	f003 0301 	andne.w	r3, r3, #1
 800f8f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f8fc:	4290      	cmp	r0, r2
 800f8fe:	bf0c      	ite	eq
 800f900:	2300      	moveq	r3, #0
 800f902:	f003 0301 	andne.w	r3, r3, #1
 800f906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f90a:	4290      	cmp	r0, r2
 800f90c:	bf0c      	ite	eq
 800f90e:	2300      	moveq	r3, #0
 800f910:	f003 0301 	andne.w	r3, r3, #1
 800f914:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800f918:	4290      	cmp	r0, r2
 800f91a:	bf0c      	ite	eq
 800f91c:	2300      	moveq	r3, #0
 800f91e:	f003 0301 	andne.w	r3, r3, #1
 800f922:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800f926:	4290      	cmp	r0, r2
 800f928:	bf0c      	ite	eq
 800f92a:	2300      	moveq	r3, #0
 800f92c:	f003 0301 	andne.w	r3, r3, #1
 800f930:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f934:	4290      	cmp	r0, r2
 800f936:	bf0c      	ite	eq
 800f938:	2300      	moveq	r3, #0
 800f93a:	f003 0301 	andne.w	r3, r3, #1
 800f93e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f942:	4290      	cmp	r0, r2
 800f944:	bf0c      	ite	eq
 800f946:	2300      	moveq	r3, #0
 800f948:	f003 0301 	andne.w	r3, r3, #1
 800f94c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800f950:	4290      	cmp	r0, r2
 800f952:	bf0c      	ite	eq
 800f954:	2300      	moveq	r3, #0
 800f956:	f003 0301 	andne.w	r3, r3, #1
 800f95a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f95e:	4290      	cmp	r0, r2
 800f960:	bf0c      	ite	eq
 800f962:	2300      	moveq	r3, #0
 800f964:	f003 0301 	andne.w	r3, r3, #1
 800f968:	b11b      	cbz	r3, 800f972 <HAL_TIM_OC_ConfigChannel+0x13e>
 800f96a:	4b6e      	ldr	r3, [pc, #440]	; (800fb24 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 800f96c:	4298      	cmp	r0, r3
 800f96e:	f040 80c9 	bne.w	800fb04 <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f972:	4631      	mov	r1, r6
 800f974:	f7fe f9ac 	bl	800dcd0 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800f978:	2000      	movs	r0, #0
      break;
 800f97a:	e795      	b.n	800f8a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f97c:	6828      	ldr	r0, [r5, #0]
 800f97e:	4b67      	ldr	r3, [pc, #412]	; (800fb1c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800f980:	4a67      	ldr	r2, [pc, #412]	; (800fb20 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800f982:	4298      	cmp	r0, r3
 800f984:	bf18      	it	ne
 800f986:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f98a:	bf14      	ite	ne
 800f98c:	2301      	movne	r3, #1
 800f98e:	2300      	moveq	r3, #0
 800f990:	4290      	cmp	r0, r2
 800f992:	bf0c      	ite	eq
 800f994:	2300      	moveq	r3, #0
 800f996:	f003 0301 	andne.w	r3, r3, #1
 800f99a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f99e:	4290      	cmp	r0, r2
 800f9a0:	bf0c      	ite	eq
 800f9a2:	2300      	moveq	r3, #0
 800f9a4:	f003 0301 	andne.w	r3, r3, #1
 800f9a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f9ac:	4290      	cmp	r0, r2
 800f9ae:	bf0c      	ite	eq
 800f9b0:	2300      	moveq	r3, #0
 800f9b2:	f003 0301 	andne.w	r3, r3, #1
 800f9b6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800f9ba:	4290      	cmp	r0, r2
 800f9bc:	bf0c      	ite	eq
 800f9be:	2300      	moveq	r3, #0
 800f9c0:	f003 0301 	andne.w	r3, r3, #1
 800f9c4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800f9c8:	4290      	cmp	r0, r2
 800f9ca:	bf0c      	ite	eq
 800f9cc:	2300      	moveq	r3, #0
 800f9ce:	f003 0301 	andne.w	r3, r3, #1
 800f9d2:	b11b      	cbz	r3, 800f9dc <HAL_TIM_OC_ConfigChannel+0x1a8>
 800f9d4:	4b54      	ldr	r3, [pc, #336]	; (800fb28 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800f9d6:	4298      	cmp	r0, r3
 800f9d8:	f040 808d 	bne.w	800faf6 <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f9dc:	4631      	mov	r1, r6
 800f9de:	f7ff fec5 	bl	800f76c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800f9e2:	2000      	movs	r0, #0
      break;
 800f9e4:	e760      	b.n	800f8a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f9e6:	6828      	ldr	r0, [r5, #0]
 800f9e8:	4b4c      	ldr	r3, [pc, #304]	; (800fb1c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800f9ea:	4a4d      	ldr	r2, [pc, #308]	; (800fb20 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800f9ec:	4298      	cmp	r0, r3
 800f9ee:	bf18      	it	ne
 800f9f0:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f9f4:	bf14      	ite	ne
 800f9f6:	2301      	movne	r3, #1
 800f9f8:	2300      	moveq	r3, #0
 800f9fa:	4290      	cmp	r0, r2
 800f9fc:	bf0c      	ite	eq
 800f9fe:	2300      	moveq	r3, #0
 800fa00:	f003 0301 	andne.w	r3, r3, #1
 800fa04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa08:	4290      	cmp	r0, r2
 800fa0a:	bf0c      	ite	eq
 800fa0c:	2300      	moveq	r3, #0
 800fa0e:	f003 0301 	andne.w	r3, r3, #1
 800fa12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa16:	4290      	cmp	r0, r2
 800fa18:	bf0c      	ite	eq
 800fa1a:	2300      	moveq	r3, #0
 800fa1c:	f003 0301 	andne.w	r3, r3, #1
 800fa20:	b113      	cbz	r3, 800fa28 <HAL_TIM_OC_ConfigChannel+0x1f4>
 800fa22:	4b42      	ldr	r3, [pc, #264]	; (800fb2c <HAL_TIM_OC_ConfigChannel+0x2f8>)
 800fa24:	4298      	cmp	r0, r3
 800fa26:	d15f      	bne.n	800fae8 <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fa28:	4631      	mov	r1, r6
 800fa2a:	f7fe f9b1 	bl	800dd90 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800fa2e:	2000      	movs	r0, #0
      break;
 800fa30:	e73a      	b.n	800f8a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800fa32:	6828      	ldr	r0, [r5, #0]
 800fa34:	4b39      	ldr	r3, [pc, #228]	; (800fb1c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800fa36:	4a3a      	ldr	r2, [pc, #232]	; (800fb20 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800fa38:	4298      	cmp	r0, r3
 800fa3a:	bf18      	it	ne
 800fa3c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fa40:	bf14      	ite	ne
 800fa42:	2301      	movne	r3, #1
 800fa44:	2300      	moveq	r3, #0
 800fa46:	4290      	cmp	r0, r2
 800fa48:	bf0c      	ite	eq
 800fa4a:	2300      	moveq	r3, #0
 800fa4c:	f003 0301 	andne.w	r3, r3, #1
 800fa50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa54:	4290      	cmp	r0, r2
 800fa56:	bf0c      	ite	eq
 800fa58:	2300      	moveq	r3, #0
 800fa5a:	f003 0301 	andne.w	r3, r3, #1
 800fa5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa62:	4290      	cmp	r0, r2
 800fa64:	bf0c      	ite	eq
 800fa66:	2300      	moveq	r3, #0
 800fa68:	f003 0301 	andne.w	r3, r3, #1
 800fa6c:	b113      	cbz	r3, 800fa74 <HAL_TIM_OC_ConfigChannel+0x240>
 800fa6e:	4b2f      	ldr	r3, [pc, #188]	; (800fb2c <HAL_TIM_OC_ConfigChannel+0x2f8>)
 800fa70:	4298      	cmp	r0, r3
 800fa72:	d132      	bne.n	800fada <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fa74:	4631      	mov	r1, r6
 800fa76:	f7fe f9ef 	bl	800de58 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800fa7a:	2000      	movs	r0, #0
      break;
 800fa7c:	e714      	b.n	800f8a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800fa7e:	6828      	ldr	r0, [r5, #0]
 800fa80:	4b26      	ldr	r3, [pc, #152]	; (800fb1c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800fa82:	4298      	cmp	r0, r3
 800fa84:	d003      	beq.n	800fa8e <HAL_TIM_OC_ConfigChannel+0x25a>
 800fa86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa8a:	4298      	cmp	r0, r3
 800fa8c:	d118      	bne.n	800fac0 <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fa8e:	4631      	mov	r1, r6
 800fa90:	f7fe f8ca 	bl	800dc28 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800fa94:	2000      	movs	r0, #0
      break;
 800fa96:	e707      	b.n	800f8a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800fa98:	6828      	ldr	r0, [r5, #0]
 800fa9a:	4b20      	ldr	r3, [pc, #128]	; (800fb1c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800fa9c:	4298      	cmp	r0, r3
 800fa9e:	d003      	beq.n	800faa8 <HAL_TIM_OC_ConfigChannel+0x274>
 800faa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800faa4:	4298      	cmp	r0, r3
 800faa6:	d104      	bne.n	800fab2 <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800faa8:	4631      	mov	r1, r6
 800faaa:	f7fe f8e7 	bl	800dc7c <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800faae:	2000      	movs	r0, #0
      break;
 800fab0:	e6fa      	b.n	800f8a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800fab2:	4819      	ldr	r0, [pc, #100]	; (800fb18 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fab4:	f241 011d 	movw	r1, #4125	; 0x101d
 800fab8:	f7f4 fa48 	bl	8003f4c <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fabc:	6828      	ldr	r0, [r5, #0]
 800fabe:	e7f3      	b.n	800faa8 <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800fac0:	4815      	ldr	r0, [pc, #84]	; (800fb18 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fac2:	f241 0113 	movw	r1, #4115	; 0x1013
 800fac6:	f7f4 fa41 	bl	8003f4c <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800faca:	6828      	ldr	r0, [r5, #0]
 800facc:	e7df      	b.n	800fa8e <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800face:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 800fad2:	4811      	ldr	r0, [pc, #68]	; (800fb18 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fad4:	f7f4 fa3a 	bl	8003f4c <assert_failed>
 800fad8:	e6c1      	b.n	800f85e <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800fada:	480f      	ldr	r0, [pc, #60]	; (800fb18 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fadc:	f241 0109 	movw	r1, #4105	; 0x1009
 800fae0:	f7f4 fa34 	bl	8003f4c <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fae4:	6828      	ldr	r0, [r5, #0]
 800fae6:	e7c5      	b.n	800fa74 <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800fae8:	480b      	ldr	r0, [pc, #44]	; (800fb18 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800faea:	f640 71ff 	movw	r1, #4095	; 0xfff
 800faee:	f7f4 fa2d 	bl	8003f4c <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800faf2:	6828      	ldr	r0, [r5, #0]
 800faf4:	e798      	b.n	800fa28 <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800faf6:	4808      	ldr	r0, [pc, #32]	; (800fb18 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800faf8:	f640 71f5 	movw	r1, #4085	; 0xff5
 800fafc:	f7f4 fa26 	bl	8003f4c <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fb00:	6828      	ldr	r0, [r5, #0]
 800fb02:	e76b      	b.n	800f9dc <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800fb04:	4804      	ldr	r0, [pc, #16]	; (800fb18 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fb06:	f640 71eb 	movw	r1, #4075	; 0xfeb
 800fb0a:	f7f4 fa1f 	bl	8003f4c <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fb0e:	6828      	ldr	r0, [r5, #0]
 800fb10:	e72f      	b.n	800f972 <HAL_TIM_OC_ConfigChannel+0x13e>
 800fb12:	bf00      	nop
 800fb14:	00111111 	.word	0x00111111
 800fb18:	0802b1bc 	.word	0x0802b1bc
 800fb1c:	40010000 	.word	0x40010000
 800fb20:	40000400 	.word	0x40000400
 800fb24:	40002000 	.word	0x40002000
 800fb28:	40001800 	.word	0x40001800
 800fb2c:	40010400 	.word	0x40010400

0800fb30 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800fb30:	2a14      	cmp	r2, #20
{
 800fb32:	b570      	push	{r4, r5, r6, lr}
 800fb34:	4616      	mov	r6, r2
 800fb36:	4605      	mov	r5, r0
 800fb38:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800fb3a:	d933      	bls.n	800fba4 <HAL_TIM_PWM_ConfigChannel+0x74>
 800fb3c:	2a3c      	cmp	r2, #60	; 0x3c
 800fb3e:	d135      	bne.n	800fbac <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800fb40:	6822      	ldr	r2, [r4, #0]
 800fb42:	4b90      	ldr	r3, [pc, #576]	; (800fd84 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800fb44:	4013      	ands	r3, r2
 800fb46:	2b60      	cmp	r3, #96	; 0x60
 800fb48:	d004      	beq.n	800fb54 <HAL_TIM_PWM_ConfigChannel+0x24>
 800fb4a:	f022 0210 	bic.w	r2, r2, #16
 800fb4e:	4b8e      	ldr	r3, [pc, #568]	; (800fd88 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d147      	bne.n	800fbe4 <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800fb54:	68a3      	ldr	r3, [r4, #8]
 800fb56:	f033 0302 	bics.w	r3, r3, #2
 800fb5a:	d13d      	bne.n	800fbd8 <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800fb5c:	6923      	ldr	r3, [r4, #16]
 800fb5e:	f033 0304 	bics.w	r3, r3, #4
 800fb62:	d12e      	bne.n	800fbc2 <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 800fb64:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d033      	beq.n	800fbd4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 800fb72:	2e14      	cmp	r6, #20
 800fb74:	d820      	bhi.n	800fbb8 <HAL_TIM_PWM_ConfigChannel+0x88>
 800fb76:	e8df f016 	tbh	[pc, r6, lsl #1]
 800fb7a:	00a7      	.short	0x00a7
 800fb7c:	001f001f 	.word	0x001f001f
 800fb80:	0115001f 	.word	0x0115001f
 800fb84:	001f001f 	.word	0x001f001f
 800fb88:	0157001f 	.word	0x0157001f
 800fb8c:	001f001f 	.word	0x001f001f
 800fb90:	0057001f 	.word	0x0057001f
 800fb94:	001f001f 	.word	0x001f001f
 800fb98:	008c001f 	.word	0x008c001f
 800fb9c:	001f001f 	.word	0x001f001f
 800fba0:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 800fba4:	4b79      	ldr	r3, [pc, #484]	; (800fd8c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800fba6:	40d3      	lsrs	r3, r2
 800fba8:	07db      	lsls	r3, r3, #31
 800fbaa:	d4c9      	bmi.n	800fb40 <HAL_TIM_PWM_ConfigChannel+0x10>
 800fbac:	f241 01a7 	movw	r1, #4263	; 0x10a7
 800fbb0:	4877      	ldr	r0, [pc, #476]	; (800fd90 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800fbb2:	f7f4 f9cb 	bl	8003f4c <assert_failed>
 800fbb6:	e7c3      	b.n	800fb40 <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 800fbb8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800fbba:	2300      	movs	r3, #0
 800fbbc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800fbc0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800fbc2:	f241 01aa 	movw	r1, #4266	; 0x10aa
 800fbc6:	4872      	ldr	r0, [pc, #456]	; (800fd90 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800fbc8:	f7f4 f9c0 	bl	8003f4c <assert_failed>
  __HAL_LOCK(htim);
 800fbcc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d1cb      	bne.n	800fb6c <HAL_TIM_PWM_ConfigChannel+0x3c>
 800fbd4:	2002      	movs	r0, #2
}
 800fbd6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800fbd8:	f241 01a9 	movw	r1, #4265	; 0x10a9
 800fbdc:	486c      	ldr	r0, [pc, #432]	; (800fd90 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800fbde:	f7f4 f9b5 	bl	8003f4c <assert_failed>
 800fbe2:	e7bb      	b.n	800fb5c <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800fbe4:	f241 01a8 	movw	r1, #4264	; 0x10a8
 800fbe8:	4869      	ldr	r0, [pc, #420]	; (800fd90 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800fbea:	f7f4 f9af 	bl	8003f4c <assert_failed>
 800fbee:	e7b1      	b.n	800fb54 <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800fbf0:	6828      	ldr	r0, [r5, #0]
 800fbf2:	4b68      	ldr	r3, [pc, #416]	; (800fd94 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800fbf4:	4298      	cmp	r0, r3
 800fbf6:	d004      	beq.n	800fc02 <HAL_TIM_PWM_ConfigChannel+0xd2>
 800fbf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbfc:	4298      	cmp	r0, r3
 800fbfe:	f040 814d 	bne.w	800fe9c <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fc02:	4621      	mov	r1, r4
 800fc04:	f7fe f83a 	bl	800dc7c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fc08:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fc0a:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fc0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc0e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800fc12:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fc14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc16:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800fc1a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fc1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc1e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 800fc22:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fc24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fc26:	e7c8      	b.n	800fbba <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800fc28:	6828      	ldr	r0, [r5, #0]
 800fc2a:	4b5a      	ldr	r3, [pc, #360]	; (800fd94 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800fc2c:	4a5a      	ldr	r2, [pc, #360]	; (800fd98 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800fc2e:	4298      	cmp	r0, r3
 800fc30:	bf18      	it	ne
 800fc32:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fc36:	bf14      	ite	ne
 800fc38:	2301      	movne	r3, #1
 800fc3a:	2300      	moveq	r3, #0
 800fc3c:	4290      	cmp	r0, r2
 800fc3e:	bf0c      	ite	eq
 800fc40:	2300      	moveq	r3, #0
 800fc42:	f003 0301 	andne.w	r3, r3, #1
 800fc46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fc4a:	4290      	cmp	r0, r2
 800fc4c:	bf0c      	ite	eq
 800fc4e:	2300      	moveq	r3, #0
 800fc50:	f003 0301 	andne.w	r3, r3, #1
 800fc54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fc58:	4290      	cmp	r0, r2
 800fc5a:	bf0c      	ite	eq
 800fc5c:	2300      	moveq	r3, #0
 800fc5e:	f003 0301 	andne.w	r3, r3, #1
 800fc62:	b11b      	cbz	r3, 800fc6c <HAL_TIM_PWM_ConfigChannel+0x13c>
 800fc64:	4b4d      	ldr	r3, [pc, #308]	; (800fd9c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800fc66:	4298      	cmp	r0, r3
 800fc68:	f040 811f 	bne.w	800feaa <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fc6c:	4621      	mov	r1, r4
 800fc6e:	f7fe f8f3 	bl	800de58 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fc72:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fc74:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fc76:	69d9      	ldr	r1, [r3, #28]
 800fc78:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800fc7c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fc7e:	69d9      	ldr	r1, [r3, #28]
 800fc80:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800fc84:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fc86:	69da      	ldr	r2, [r3, #28]
 800fc88:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 800fc8c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fc8e:	61da      	str	r2, [r3, #28]
      break;
 800fc90:	e793      	b.n	800fbba <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800fc92:	6828      	ldr	r0, [r5, #0]
 800fc94:	4b3f      	ldr	r3, [pc, #252]	; (800fd94 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800fc96:	4298      	cmp	r0, r3
 800fc98:	d004      	beq.n	800fca4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800fc9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc9e:	4298      	cmp	r0, r3
 800fca0:	f040 80f5 	bne.w	800fe8e <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fca4:	4621      	mov	r1, r4
 800fca6:	f7fd ffbf 	bl	800dc28 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fcaa:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fcac:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fcae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fcb0:	f041 0108 	orr.w	r1, r1, #8
 800fcb4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fcb6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fcb8:	f021 0104 	bic.w	r1, r1, #4
 800fcbc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fcbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fcc0:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 800fcc2:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fcc4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fcc6:	e778      	b.n	800fbba <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800fcc8:	6828      	ldr	r0, [r5, #0]
 800fcca:	4b32      	ldr	r3, [pc, #200]	; (800fd94 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800fccc:	4a32      	ldr	r2, [pc, #200]	; (800fd98 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800fcce:	4298      	cmp	r0, r3
 800fcd0:	bf18      	it	ne
 800fcd2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fcd6:	bf14      	ite	ne
 800fcd8:	2301      	movne	r3, #1
 800fcda:	2300      	moveq	r3, #0
 800fcdc:	4290      	cmp	r0, r2
 800fcde:	bf0c      	ite	eq
 800fce0:	2300      	moveq	r3, #0
 800fce2:	f003 0301 	andne.w	r3, r3, #1
 800fce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fcea:	4290      	cmp	r0, r2
 800fcec:	bf0c      	ite	eq
 800fcee:	2300      	moveq	r3, #0
 800fcf0:	f003 0301 	andne.w	r3, r3, #1
 800fcf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fcf8:	4290      	cmp	r0, r2
 800fcfa:	bf0c      	ite	eq
 800fcfc:	2300      	moveq	r3, #0
 800fcfe:	f003 0301 	andne.w	r3, r3, #1
 800fd02:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800fd06:	4290      	cmp	r0, r2
 800fd08:	bf0c      	ite	eq
 800fd0a:	2300      	moveq	r3, #0
 800fd0c:	f003 0301 	andne.w	r3, r3, #1
 800fd10:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800fd14:	4290      	cmp	r0, r2
 800fd16:	bf0c      	ite	eq
 800fd18:	2300      	moveq	r3, #0
 800fd1a:	f003 0301 	andne.w	r3, r3, #1
 800fd1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fd22:	4290      	cmp	r0, r2
 800fd24:	bf0c      	ite	eq
 800fd26:	2300      	moveq	r3, #0
 800fd28:	f003 0301 	andne.w	r3, r3, #1
 800fd2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fd30:	4290      	cmp	r0, r2
 800fd32:	bf0c      	ite	eq
 800fd34:	2300      	moveq	r3, #0
 800fd36:	f003 0301 	andne.w	r3, r3, #1
 800fd3a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800fd3e:	4290      	cmp	r0, r2
 800fd40:	bf0c      	ite	eq
 800fd42:	2300      	moveq	r3, #0
 800fd44:	f003 0301 	andne.w	r3, r3, #1
 800fd48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fd4c:	4290      	cmp	r0, r2
 800fd4e:	bf0c      	ite	eq
 800fd50:	2300      	moveq	r3, #0
 800fd52:	f003 0301 	andne.w	r3, r3, #1
 800fd56:	b11b      	cbz	r3, 800fd60 <HAL_TIM_PWM_ConfigChannel+0x230>
 800fd58:	4b11      	ldr	r3, [pc, #68]	; (800fda0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800fd5a:	4298      	cmp	r0, r3
 800fd5c:	f040 80ba 	bne.w	800fed4 <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fd60:	4621      	mov	r1, r4
 800fd62:	f7fd ffb5 	bl	800dcd0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd66:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd68:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd6a:	6999      	ldr	r1, [r3, #24]
 800fd6c:	f041 0108 	orr.w	r1, r1, #8
 800fd70:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fd72:	6999      	ldr	r1, [r3, #24]
 800fd74:	f021 0104 	bic.w	r1, r1, #4
 800fd78:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd7a:	699a      	ldr	r2, [r3, #24]
 800fd7c:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 800fd7e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd80:	619a      	str	r2, [r3, #24]
      break;
 800fd82:	e71a      	b.n	800fbba <HAL_TIM_PWM_ConfigChannel+0x8a>
 800fd84:	fffeffef 	.word	0xfffeffef
 800fd88:	00010040 	.word	0x00010040
 800fd8c:	00111111 	.word	0x00111111
 800fd90:	0802b1bc 	.word	0x0802b1bc
 800fd94:	40010000 	.word	0x40010000
 800fd98:	40000400 	.word	0x40000400
 800fd9c:	40010400 	.word	0x40010400
 800fda0:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800fda4:	6828      	ldr	r0, [r5, #0]
 800fda6:	4b4f      	ldr	r3, [pc, #316]	; (800fee4 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800fda8:	4a4f      	ldr	r2, [pc, #316]	; (800fee8 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 800fdaa:	4298      	cmp	r0, r3
 800fdac:	bf18      	it	ne
 800fdae:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fdb2:	bf14      	ite	ne
 800fdb4:	2301      	movne	r3, #1
 800fdb6:	2300      	moveq	r3, #0
 800fdb8:	4290      	cmp	r0, r2
 800fdba:	bf0c      	ite	eq
 800fdbc:	2300      	moveq	r3, #0
 800fdbe:	f003 0301 	andne.w	r3, r3, #1
 800fdc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fdc6:	4290      	cmp	r0, r2
 800fdc8:	bf0c      	ite	eq
 800fdca:	2300      	moveq	r3, #0
 800fdcc:	f003 0301 	andne.w	r3, r3, #1
 800fdd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fdd4:	4290      	cmp	r0, r2
 800fdd6:	bf0c      	ite	eq
 800fdd8:	2300      	moveq	r3, #0
 800fdda:	f003 0301 	andne.w	r3, r3, #1
 800fdde:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800fde2:	4290      	cmp	r0, r2
 800fde4:	bf0c      	ite	eq
 800fde6:	2300      	moveq	r3, #0
 800fde8:	f003 0301 	andne.w	r3, r3, #1
 800fdec:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800fdf0:	4290      	cmp	r0, r2
 800fdf2:	bf0c      	ite	eq
 800fdf4:	2300      	moveq	r3, #0
 800fdf6:	f003 0301 	andne.w	r3, r3, #1
 800fdfa:	b113      	cbz	r3, 800fe02 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 800fdfc:	4b3b      	ldr	r3, [pc, #236]	; (800feec <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 800fdfe:	4298      	cmp	r0, r3
 800fe00:	d161      	bne.n	800fec6 <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fe02:	4621      	mov	r1, r4
 800fe04:	f7ff fcb2 	bl	800f76c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fe08:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fe0a:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fe0c:	6999      	ldr	r1, [r3, #24]
 800fe0e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800fe12:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fe14:	6999      	ldr	r1, [r3, #24]
 800fe16:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800fe1a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fe1c:	699a      	ldr	r2, [r3, #24]
 800fe1e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 800fe22:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fe24:	619a      	str	r2, [r3, #24]
      break;
 800fe26:	e6c8      	b.n	800fbba <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800fe28:	6828      	ldr	r0, [r5, #0]
 800fe2a:	4b2e      	ldr	r3, [pc, #184]	; (800fee4 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800fe2c:	4a2e      	ldr	r2, [pc, #184]	; (800fee8 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 800fe2e:	4298      	cmp	r0, r3
 800fe30:	bf18      	it	ne
 800fe32:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fe36:	bf14      	ite	ne
 800fe38:	2301      	movne	r3, #1
 800fe3a:	2300      	moveq	r3, #0
 800fe3c:	4290      	cmp	r0, r2
 800fe3e:	bf0c      	ite	eq
 800fe40:	2300      	moveq	r3, #0
 800fe42:	f003 0301 	andne.w	r3, r3, #1
 800fe46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe4a:	4290      	cmp	r0, r2
 800fe4c:	bf0c      	ite	eq
 800fe4e:	2300      	moveq	r3, #0
 800fe50:	f003 0301 	andne.w	r3, r3, #1
 800fe54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe58:	4290      	cmp	r0, r2
 800fe5a:	bf0c      	ite	eq
 800fe5c:	2300      	moveq	r3, #0
 800fe5e:	f003 0301 	andne.w	r3, r3, #1
 800fe62:	b113      	cbz	r3, 800fe6a <HAL_TIM_PWM_ConfigChannel+0x33a>
 800fe64:	4b22      	ldr	r3, [pc, #136]	; (800fef0 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 800fe66:	4298      	cmp	r0, r3
 800fe68:	d126      	bne.n	800feb8 <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fe6a:	4621      	mov	r1, r4
 800fe6c:	f7fd ff90 	bl	800dd90 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fe70:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fe72:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fe74:	69d9      	ldr	r1, [r3, #28]
 800fe76:	f041 0108 	orr.w	r1, r1, #8
 800fe7a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fe7c:	69d9      	ldr	r1, [r3, #28]
 800fe7e:	f021 0104 	bic.w	r1, r1, #4
 800fe82:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fe84:	69da      	ldr	r2, [r3, #28]
 800fe86:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 800fe88:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fe8a:	61da      	str	r2, [r3, #28]
      break;
 800fe8c:	e695      	b.n	800fbba <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800fe8e:	4819      	ldr	r0, [pc, #100]	; (800fef4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 800fe90:	f241 01f8 	movw	r1, #4344	; 0x10f8
 800fe94:	f7f4 f85a 	bl	8003f4c <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fe98:	6828      	ldr	r0, [r5, #0]
 800fe9a:	e703      	b.n	800fca4 <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800fe9c:	4815      	ldr	r0, [pc, #84]	; (800fef4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 800fe9e:	f241 1109 	movw	r1, #4361	; 0x1109
 800fea2:	f7f4 f853 	bl	8003f4c <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fea6:	6828      	ldr	r0, [r5, #0]
 800fea8:	e6ab      	b.n	800fc02 <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800feaa:	4812      	ldr	r0, [pc, #72]	; (800fef4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 800feac:	f241 01e7 	movw	r1, #4327	; 0x10e7
 800feb0:	f7f4 f84c 	bl	8003f4c <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800feb4:	6828      	ldr	r0, [r5, #0]
 800feb6:	e6d9      	b.n	800fc6c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800feb8:	480e      	ldr	r0, [pc, #56]	; (800fef4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 800feba:	f241 01d6 	movw	r1, #4310	; 0x10d6
 800febe:	f7f4 f845 	bl	8003f4c <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fec2:	6828      	ldr	r0, [r5, #0]
 800fec4:	e7d1      	b.n	800fe6a <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800fec6:	480b      	ldr	r0, [pc, #44]	; (800fef4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 800fec8:	f241 01c5 	movw	r1, #4293	; 0x10c5
 800fecc:	f7f4 f83e 	bl	8003f4c <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fed0:	6828      	ldr	r0, [r5, #0]
 800fed2:	e796      	b.n	800fe02 <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800fed4:	4807      	ldr	r0, [pc, #28]	; (800fef4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 800fed6:	f241 01b4 	movw	r1, #4276	; 0x10b4
 800feda:	f7f4 f837 	bl	8003f4c <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fede:	6828      	ldr	r0, [r5, #0]
 800fee0:	e73e      	b.n	800fd60 <HAL_TIM_PWM_ConfigChannel+0x230>
 800fee2:	bf00      	nop
 800fee4:	40010000 	.word	0x40010000
 800fee8:	40000400 	.word	0x40000400
 800feec:	40001800 	.word	0x40001800
 800fef0:	40010400 	.word	0x40010400
 800fef4:	0802b1bc 	.word	0x0802b1bc

0800fef8 <TIM_TI1_SetConfig>:
{
 800fef8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fefa:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fefc:	4e1b      	ldr	r6, [pc, #108]	; (800ff6c <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fefe:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ff02:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ff04:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff06:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800ff08:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ff0a:	d01d      	beq.n	800ff48 <TIM_TI1_SetConfig+0x50>
 800ff0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ff10:	d01a      	beq.n	800ff48 <TIM_TI1_SetConfig+0x50>
 800ff12:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800ff16:	42b0      	cmp	r0, r6
 800ff18:	d016      	beq.n	800ff48 <TIM_TI1_SetConfig+0x50>
 800ff1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800ff1e:	42b0      	cmp	r0, r6
 800ff20:	d012      	beq.n	800ff48 <TIM_TI1_SetConfig+0x50>
 800ff22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800ff26:	42b0      	cmp	r0, r6
 800ff28:	d00e      	beq.n	800ff48 <TIM_TI1_SetConfig+0x50>
 800ff2a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800ff2e:	42b0      	cmp	r0, r6
 800ff30:	d00a      	beq.n	800ff48 <TIM_TI1_SetConfig+0x50>
 800ff32:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800ff36:	42b0      	cmp	r0, r6
 800ff38:	d006      	beq.n	800ff48 <TIM_TI1_SetConfig+0x50>
 800ff3a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800ff3e:	42b0      	cmp	r0, r6
 800ff40:	d002      	beq.n	800ff48 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ff42:	f044 0201 	orr.w	r2, r4, #1
 800ff46:	e002      	b.n	800ff4e <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ff48:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800ff4c:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ff4e:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ff50:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ff54:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ff58:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ff5c:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ff5e:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ff60:	4313      	orrs	r3, r2
}
 800ff62:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 800ff64:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800ff66:	6201      	str	r1, [r0, #32]
}
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop
 800ff6c:	40010000 	.word	0x40010000

0800ff70 <HAL_TIM_IC_ConfigChannel>:
{
 800ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ff72:	4ba8      	ldr	r3, [pc, #672]	; (8010214 <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 800ff74:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ff76:	6801      	ldr	r1, [r0, #0]
{
 800ff78:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ff7a:	4fa7      	ldr	r7, [pc, #668]	; (8010218 <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 800ff7c:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ff7e:	4299      	cmp	r1, r3
 800ff80:	bf18      	it	ne
 800ff82:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800ff86:	4aa5      	ldr	r2, [pc, #660]	; (801021c <HAL_TIM_IC_ConfigChannel+0x2ac>)
 800ff88:	bf14      	ite	ne
 800ff8a:	2301      	movne	r3, #1
 800ff8c:	2300      	moveq	r3, #0
 800ff8e:	42b9      	cmp	r1, r7
 800ff90:	bf0c      	ite	eq
 800ff92:	2300      	moveq	r3, #0
 800ff94:	f003 0301 	andne.w	r3, r3, #1
 800ff98:	4291      	cmp	r1, r2
 800ff9a:	bf0c      	ite	eq
 800ff9c:	2300      	moveq	r3, #0
 800ff9e:	f003 0301 	andne.w	r3, r3, #1
 800ffa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ffa6:	4291      	cmp	r1, r2
 800ffa8:	bf0c      	ite	eq
 800ffaa:	2300      	moveq	r3, #0
 800ffac:	f003 0301 	andne.w	r3, r3, #1
 800ffb0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ffb4:	4291      	cmp	r1, r2
 800ffb6:	bf0c      	ite	eq
 800ffb8:	2300      	moveq	r3, #0
 800ffba:	f003 0301 	andne.w	r3, r3, #1
 800ffbe:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ffc2:	4291      	cmp	r1, r2
 800ffc4:	bf0c      	ite	eq
 800ffc6:	2300      	moveq	r3, #0
 800ffc8:	f003 0301 	andne.w	r3, r3, #1
 800ffcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ffd0:	4291      	cmp	r1, r2
 800ffd2:	bf0c      	ite	eq
 800ffd4:	2300      	moveq	r3, #0
 800ffd6:	f003 0301 	andne.w	r3, r3, #1
 800ffda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ffde:	4291      	cmp	r1, r2
 800ffe0:	bf0c      	ite	eq
 800ffe2:	2300      	moveq	r3, #0
 800ffe4:	f003 0301 	andne.w	r3, r3, #1
 800ffe8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ffec:	4291      	cmp	r1, r2
 800ffee:	bf0c      	ite	eq
 800fff0:	2300      	moveq	r3, #0
 800fff2:	f003 0301 	andne.w	r3, r3, #1
 800fff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fffa:	4291      	cmp	r1, r2
 800fffc:	bf0c      	ite	eq
 800fffe:	2300      	moveq	r3, #0
 8010000:	f003 0301 	andne.w	r3, r3, #1
 8010004:	b11b      	cbz	r3, 801000e <HAL_TIM_IC_ConfigChannel+0x9e>
 8010006:	4b86      	ldr	r3, [pc, #536]	; (8010220 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 8010008:	4299      	cmp	r1, r3
 801000a:	f040 8158 	bne.w	80102be <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 801000e:	6823      	ldr	r3, [r4, #0]
 8010010:	f033 0202 	bics.w	r2, r3, #2
 8010014:	d001      	beq.n	801001a <HAL_TIM_IC_ConfigChannel+0xaa>
 8010016:	2b0a      	cmp	r3, #10
 8010018:	d11e      	bne.n	8010058 <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 801001a:	6863      	ldr	r3, [r4, #4]
 801001c:	3b01      	subs	r3, #1
 801001e:	2b02      	cmp	r3, #2
 8010020:	d823      	bhi.n	801006a <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8010022:	68a3      	ldr	r3, [r4, #8]
 8010024:	f033 030c 	bics.w	r3, r3, #12
 8010028:	d128      	bne.n	801007c <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 801002a:	68e3      	ldr	r3, [r4, #12]
 801002c:	2b0f      	cmp	r3, #15
 801002e:	d82d      	bhi.n	801008c <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 8010030:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010034:	2b01      	cmp	r3, #1
 8010036:	d032      	beq.n	801009e <HAL_TIM_IC_ConfigChannel+0x12e>
 8010038:	2001      	movs	r0, #1
 801003a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 801003e:	b386      	cbz	r6, 80100a2 <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 8010040:	2e04      	cmp	r6, #4
 8010042:	d042      	beq.n	80100ca <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 8010044:	2e08      	cmp	r6, #8
 8010046:	f000 80f3 	beq.w	8010230 <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 801004a:	2e0c      	cmp	r6, #12
 801004c:	f000 8095 	beq.w	801017a <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 8010050:	2300      	movs	r3, #0
 8010052:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8010058:	f241 0141 	movw	r1, #4161	; 0x1041
 801005c:	4871      	ldr	r0, [pc, #452]	; (8010224 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 801005e:	f7f3 ff75 	bl	8003f4c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8010062:	6863      	ldr	r3, [r4, #4]
 8010064:	3b01      	subs	r3, #1
 8010066:	2b02      	cmp	r3, #2
 8010068:	d9db      	bls.n	8010022 <HAL_TIM_IC_ConfigChannel+0xb2>
 801006a:	f241 0142 	movw	r1, #4162	; 0x1042
 801006e:	486d      	ldr	r0, [pc, #436]	; (8010224 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010070:	f7f3 ff6c 	bl	8003f4c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8010074:	68a3      	ldr	r3, [r4, #8]
 8010076:	f033 030c 	bics.w	r3, r3, #12
 801007a:	d0d6      	beq.n	801002a <HAL_TIM_IC_ConfigChannel+0xba>
 801007c:	f241 0143 	movw	r1, #4163	; 0x1043
 8010080:	4868      	ldr	r0, [pc, #416]	; (8010224 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010082:	f7f3 ff63 	bl	8003f4c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8010086:	68e3      	ldr	r3, [r4, #12]
 8010088:	2b0f      	cmp	r3, #15
 801008a:	d9d1      	bls.n	8010030 <HAL_TIM_IC_ConfigChannel+0xc0>
 801008c:	f241 0144 	movw	r1, #4164	; 0x1044
 8010090:	4864      	ldr	r0, [pc, #400]	; (8010224 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010092:	f7f3 ff5b 	bl	8003f4c <assert_failed>
  __HAL_LOCK(htim);
 8010096:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801009a:	2b01      	cmp	r3, #1
 801009c:	d1cc      	bne.n	8010038 <HAL_TIM_IC_ConfigChannel+0xc8>
 801009e:	2002      	movs	r0, #2
}
 80100a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80100a2:	e9d4 1200 	ldrd	r1, r2, [r4]
 80100a6:	68e3      	ldr	r3, [r4, #12]
 80100a8:	6828      	ldr	r0, [r5, #0]
 80100aa:	f7ff ff25 	bl	800fef8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80100ae:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80100b0:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80100b2:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80100b4:	6999      	ldr	r1, [r3, #24]
 80100b6:	f021 010c 	bic.w	r1, r1, #12
 80100ba:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80100bc:	699a      	ldr	r2, [r3, #24]
 80100be:	4322      	orrs	r2, r4
 80100c0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80100c2:	2300      	movs	r3, #0
 80100c4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 80100c8:	e7c5      	b.n	8010056 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80100ca:	682a      	ldr	r2, [r5, #0]
 80100cc:	4b51      	ldr	r3, [pc, #324]	; (8010214 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 80100ce:	4952      	ldr	r1, [pc, #328]	; (8010218 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 80100d0:	429a      	cmp	r2, r3
 80100d2:	bf18      	it	ne
 80100d4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80100d8:	bf14      	ite	ne
 80100da:	2301      	movne	r3, #1
 80100dc:	2300      	moveq	r3, #0
 80100de:	428a      	cmp	r2, r1
 80100e0:	bf0c      	ite	eq
 80100e2:	2300      	moveq	r3, #0
 80100e4:	f003 0301 	andne.w	r3, r3, #1
 80100e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80100ec:	428a      	cmp	r2, r1
 80100ee:	bf0c      	ite	eq
 80100f0:	2300      	moveq	r3, #0
 80100f2:	f003 0301 	andne.w	r3, r3, #1
 80100f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80100fa:	428a      	cmp	r2, r1
 80100fc:	bf0c      	ite	eq
 80100fe:	2300      	moveq	r3, #0
 8010100:	f003 0301 	andne.w	r3, r3, #1
 8010104:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010108:	428a      	cmp	r2, r1
 801010a:	bf0c      	ite	eq
 801010c:	2300      	moveq	r3, #0
 801010e:	f003 0301 	andne.w	r3, r3, #1
 8010112:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010116:	428a      	cmp	r2, r1
 8010118:	bf0c      	ite	eq
 801011a:	2300      	moveq	r3, #0
 801011c:	f003 0301 	andne.w	r3, r3, #1
 8010120:	b11b      	cbz	r3, 801012a <HAL_TIM_IC_ConfigChannel+0x1ba>
 8010122:	4b41      	ldr	r3, [pc, #260]	; (8010228 <HAL_TIM_IC_ConfigChannel+0x2b8>)
 8010124:	429a      	cmp	r2, r3
 8010126:	f040 80d7 	bne.w	80102d8 <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801012a:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 801012c:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801012e:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010132:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 8010134:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010138:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801013a:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 801013c:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801013e:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010140:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010142:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010146:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801014a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801014e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010152:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 8010154:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8010156:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010158:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801015c:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 801015e:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8010160:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010162:	6991      	ldr	r1, [r2, #24]
 8010164:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8010168:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801016a:	6993      	ldr	r3, [r2, #24]
 801016c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8010170:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8010172:	2300      	movs	r3, #0
 8010174:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010178:	e76d      	b.n	8010056 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 801017a:	682b      	ldr	r3, [r5, #0]
 801017c:	4a25      	ldr	r2, [pc, #148]	; (8010214 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 801017e:	4926      	ldr	r1, [pc, #152]	; (8010218 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8010180:	4293      	cmp	r3, r2
 8010182:	bf18      	it	ne
 8010184:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010188:	bf14      	ite	ne
 801018a:	2201      	movne	r2, #1
 801018c:	2200      	moveq	r2, #0
 801018e:	428b      	cmp	r3, r1
 8010190:	bf0c      	ite	eq
 8010192:	2200      	moveq	r2, #0
 8010194:	f002 0201 	andne.w	r2, r2, #1
 8010198:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801019c:	428b      	cmp	r3, r1
 801019e:	bf0c      	ite	eq
 80101a0:	2200      	moveq	r2, #0
 80101a2:	f002 0201 	andne.w	r2, r2, #1
 80101a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80101aa:	428b      	cmp	r3, r1
 80101ac:	bf0c      	ite	eq
 80101ae:	2200      	moveq	r2, #0
 80101b0:	f002 0201 	andne.w	r2, r2, #1
 80101b4:	b142      	cbz	r2, 80101c8 <HAL_TIM_IC_ConfigChannel+0x258>
 80101b6:	4a1d      	ldr	r2, [pc, #116]	; (801022c <HAL_TIM_IC_ConfigChannel+0x2bc>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d005      	beq.n	80101c8 <HAL_TIM_IC_ConfigChannel+0x258>
 80101bc:	f241 017a 	movw	r1, #4218	; 0x107a
 80101c0:	4818      	ldr	r0, [pc, #96]	; (8010224 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80101c2:	f7f3 fec3 	bl	8003f4c <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 80101c6:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80101c8:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 80101ca:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80101cc:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80101d0:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 80101d2:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80101d6:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80101d8:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 80101da:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80101dc:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80101de:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80101e0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80101e4:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80101e8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80101ec:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80101f0:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 80101f2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 80101f4:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80101f6:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80101fa:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80101fc:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 80101fe:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8010200:	69d9      	ldr	r1, [r3, #28]
 8010202:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8010206:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010208:	69da      	ldr	r2, [r3, #28]
 801020a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 801020e:	61da      	str	r2, [r3, #28]
 8010210:	e71e      	b.n	8010050 <HAL_TIM_IC_ConfigChannel+0xe0>
 8010212:	bf00      	nop
 8010214:	40010000 	.word	0x40010000
 8010218:	40000400 	.word	0x40000400
 801021c:	40000800 	.word	0x40000800
 8010220:	40002000 	.word	0x40002000
 8010224:	0802b1bc 	.word	0x0802b1bc
 8010228:	40001800 	.word	0x40001800
 801022c:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010230:	682b      	ldr	r3, [r5, #0]
 8010232:	4a2d      	ldr	r2, [pc, #180]	; (80102e8 <HAL_TIM_IC_ConfigChannel+0x378>)
 8010234:	492d      	ldr	r1, [pc, #180]	; (80102ec <HAL_TIM_IC_ConfigChannel+0x37c>)
 8010236:	4293      	cmp	r3, r2
 8010238:	bf18      	it	ne
 801023a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801023e:	bf14      	ite	ne
 8010240:	2201      	movne	r2, #1
 8010242:	2200      	moveq	r2, #0
 8010244:	428b      	cmp	r3, r1
 8010246:	bf0c      	ite	eq
 8010248:	2200      	moveq	r2, #0
 801024a:	f002 0201 	andne.w	r2, r2, #1
 801024e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010252:	428b      	cmp	r3, r1
 8010254:	bf0c      	ite	eq
 8010256:	2200      	moveq	r2, #0
 8010258:	f002 0201 	andne.w	r2, r2, #1
 801025c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010260:	428b      	cmp	r3, r1
 8010262:	bf0c      	ite	eq
 8010264:	2200      	moveq	r2, #0
 8010266:	f002 0201 	andne.w	r2, r2, #1
 801026a:	b112      	cbz	r2, 8010272 <HAL_TIM_IC_ConfigChannel+0x302>
 801026c:	4a20      	ldr	r2, [pc, #128]	; (80102f0 <HAL_TIM_IC_ConfigChannel+0x380>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d12b      	bne.n	80102ca <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010272:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 8010274:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010276:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801027a:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 801027c:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010280:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010282:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8010284:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010286:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010288:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801028a:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801028e:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 8010292:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010294:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010298:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 801029a:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801029c:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 80102a0:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80102a2:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 80102a4:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80102a6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80102a8:	69d9      	ldr	r1, [r3, #28]
 80102aa:	f021 010c 	bic.w	r1, r1, #12
 80102ae:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80102b0:	69da      	ldr	r2, [r3, #28]
 80102b2:	4322      	orrs	r2, r4
 80102b4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80102b6:	2300      	movs	r3, #0
 80102b8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 80102bc:	e6cb      	b.n	8010056 <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80102be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80102c2:	480c      	ldr	r0, [pc, #48]	; (80102f4 <HAL_TIM_IC_ConfigChannel+0x384>)
 80102c4:	f7f3 fe42 	bl	8003f4c <assert_failed>
 80102c8:	e6a1      	b.n	801000e <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80102ca:	f241 016a 	movw	r1, #4202	; 0x106a
 80102ce:	4809      	ldr	r0, [pc, #36]	; (80102f4 <HAL_TIM_IC_ConfigChannel+0x384>)
 80102d0:	f7f3 fe3c 	bl	8003f4c <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 80102d4:	682b      	ldr	r3, [r5, #0]
 80102d6:	e7cc      	b.n	8010272 <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80102d8:	f241 015a 	movw	r1, #4186	; 0x105a
 80102dc:	4805      	ldr	r0, [pc, #20]	; (80102f4 <HAL_TIM_IC_ConfigChannel+0x384>)
 80102de:	f7f3 fe35 	bl	8003f4c <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 80102e2:	682a      	ldr	r2, [r5, #0]
 80102e4:	e721      	b.n	801012a <HAL_TIM_IC_ConfigChannel+0x1ba>
 80102e6:	bf00      	nop
 80102e8:	40010000 	.word	0x40010000
 80102ec:	40000400 	.word	0x40000400
 80102f0:	40010400 	.word	0x40010400
 80102f4:	0802b1bc 	.word	0x0802b1bc

080102f8 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80102f8:	4b2b      	ldr	r3, [pc, #172]	; (80103a8 <TIM_CCxChannelCmd+0xb0>)
 80102fa:	4298      	cmp	r0, r3
{
 80102fc:	b530      	push	{r4, r5, lr}
 80102fe:	4604      	mov	r4, r0
 8010300:	b083      	sub	sp, #12
 8010302:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8010304:	d031      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 8010306:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801030a:	d02e      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 801030c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8010310:	4298      	cmp	r0, r3
 8010312:	d02a      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 8010314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010318:	4298      	cmp	r0, r3
 801031a:	d026      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 801031c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010320:	4298      	cmp	r0, r3
 8010322:	d022      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 8010324:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8010328:	4298      	cmp	r0, r3
 801032a:	d01e      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 801032c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8010330:	4298      	cmp	r0, r3
 8010332:	d01a      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 8010334:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010338:	4298      	cmp	r0, r3
 801033a:	d016      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 801033c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010340:	4298      	cmp	r0, r3
 8010342:	d012      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 8010344:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8010348:	4298      	cmp	r0, r3
 801034a:	d00e      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 801034c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010350:	4298      	cmp	r0, r3
 8010352:	d00a      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 8010354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010358:	4298      	cmp	r0, r3
 801035a:	d006      	beq.n	801036a <TIM_CCxChannelCmd+0x72>
 801035c:	f641 6199 	movw	r1, #7833	; 0x1e99
 8010360:	4812      	ldr	r0, [pc, #72]	; (80103ac <TIM_CCxChannelCmd+0xb4>)
 8010362:	9201      	str	r2, [sp, #4]
 8010364:	f7f3 fdf2 	bl	8003f4c <assert_failed>
 8010368:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 801036a:	2d14      	cmp	r5, #20
 801036c:	d90f      	bls.n	801038e <TIM_CCxChannelCmd+0x96>
 801036e:	2d3c      	cmp	r5, #60	; 0x3c
 8010370:	d111      	bne.n	8010396 <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010372:	f005 051f 	and.w	r5, r5, #31
 8010376:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010378:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801037a:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801037c:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 801037e:	ea23 0301 	bic.w	r3, r3, r1
 8010382:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010384:	6a25      	ldr	r5, [r4, #32]
 8010386:	4315      	orrs	r5, r2
 8010388:	6225      	str	r5, [r4, #32]
}
 801038a:	b003      	add	sp, #12
 801038c:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 801038e:	4b08      	ldr	r3, [pc, #32]	; (80103b0 <TIM_CCxChannelCmd+0xb8>)
 8010390:	40eb      	lsrs	r3, r5
 8010392:	07db      	lsls	r3, r3, #31
 8010394:	d4ed      	bmi.n	8010372 <TIM_CCxChannelCmd+0x7a>
 8010396:	f641 619a 	movw	r1, #7834	; 0x1e9a
 801039a:	4804      	ldr	r0, [pc, #16]	; (80103ac <TIM_CCxChannelCmd+0xb4>)
 801039c:	9201      	str	r2, [sp, #4]
 801039e:	f7f3 fdd5 	bl	8003f4c <assert_failed>
 80103a2:	9a01      	ldr	r2, [sp, #4]
 80103a4:	e7e5      	b.n	8010372 <TIM_CCxChannelCmd+0x7a>
 80103a6:	bf00      	nop
 80103a8:	40010000 	.word	0x40010000
 80103ac:	0802b1bc 	.word	0x0802b1bc
 80103b0:	00111111 	.word	0x00111111

080103b4 <HAL_TIM_IC_Start_DMA>:
{
 80103b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103b8:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80103ba:	460d      	mov	r5, r1
{
 80103bc:	4617      	mov	r7, r2
 80103be:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80103c0:	2900      	cmp	r1, #0
 80103c2:	f040 8087 	bne.w	80104d4 <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80103c6:	6803      	ldr	r3, [r0, #0]
 80103c8:	4aa4      	ldr	r2, [pc, #656]	; (801065c <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80103ca:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80103ce:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80103d0:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80103d4:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80103d6:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80103da:	d037      	beq.n	801044c <HAL_TIM_IC_Start_DMA+0x98>
 80103dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103e0:	d034      	beq.n	801044c <HAL_TIM_IC_Start_DMA+0x98>
 80103e2:	4a9f      	ldr	r2, [pc, #636]	; (8010660 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80103e4:	4293      	cmp	r3, r2
 80103e6:	d031      	beq.n	801044c <HAL_TIM_IC_Start_DMA+0x98>
 80103e8:	4a9e      	ldr	r2, [pc, #632]	; (8010664 <HAL_TIM_IC_Start_DMA+0x2b0>)
 80103ea:	4293      	cmp	r3, r2
 80103ec:	d066      	beq.n	80104bc <HAL_TIM_IC_Start_DMA+0x108>
 80103ee:	4a9e      	ldr	r2, [pc, #632]	; (8010668 <HAL_TIM_IC_Start_DMA+0x2b4>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d063      	beq.n	80104bc <HAL_TIM_IC_Start_DMA+0x108>
 80103f4:	4a9d      	ldr	r2, [pc, #628]	; (801066c <HAL_TIM_IC_Start_DMA+0x2b8>)
 80103f6:	4293      	cmp	r3, r2
 80103f8:	f040 80f7 	bne.w	80105ea <HAL_TIM_IC_Start_DMA+0x236>
 80103fc:	2d14      	cmp	r5, #20
 80103fe:	d862      	bhi.n	80104c6 <HAL_TIM_IC_Start_DMA+0x112>
 8010400:	4a9b      	ldr	r2, [pc, #620]	; (8010670 <HAL_TIM_IC_Start_DMA+0x2bc>)
 8010402:	40ea      	lsrs	r2, r5
 8010404:	07d2      	lsls	r2, r2, #31
 8010406:	d55e      	bpl.n	80104c6 <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8010408:	4994      	ldr	r1, [pc, #592]	; (801065c <HAL_TIM_IC_Start_DMA+0x2a8>)
 801040a:	4a95      	ldr	r2, [pc, #596]	; (8010660 <HAL_TIM_IC_Start_DMA+0x2ac>)
 801040c:	428b      	cmp	r3, r1
 801040e:	bf18      	it	ne
 8010410:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010414:	bf14      	ite	ne
 8010416:	2101      	movne	r1, #1
 8010418:	2100      	moveq	r1, #0
 801041a:	4293      	cmp	r3, r2
 801041c:	bf0c      	ite	eq
 801041e:	2100      	moveq	r1, #0
 8010420:	f001 0101 	andne.w	r1, r1, #1
 8010424:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010428:	4293      	cmp	r3, r2
 801042a:	bf0c      	ite	eq
 801042c:	2100      	moveq	r1, #0
 801042e:	f001 0101 	andne.w	r1, r1, #1
 8010432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010436:	4293      	cmp	r3, r2
 8010438:	bf0c      	ite	eq
 801043a:	2100      	moveq	r1, #0
 801043c:	f001 0101 	andne.w	r1, r1, #1
 8010440:	b121      	cbz	r1, 801044c <HAL_TIM_IC_Start_DMA+0x98>
 8010442:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010446:	4293      	cmp	r3, r2
 8010448:	f040 80c5 	bne.w	80105d6 <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 801044c:	2e02      	cmp	r6, #2
 801044e:	d06a      	beq.n	8010526 <HAL_TIM_IC_Start_DMA+0x172>
 8010450:	f1b9 0f02 	cmp.w	r9, #2
 8010454:	d067      	beq.n	8010526 <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8010456:	2e01      	cmp	r6, #1
 8010458:	d106      	bne.n	8010468 <HAL_TIM_IC_Start_DMA+0xb4>
 801045a:	f1b9 0f01 	cmp.w	r9, #1
 801045e:	d103      	bne.n	8010468 <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 8010460:	b92f      	cbnz	r7, 801046e <HAL_TIM_IC_Start_DMA+0xba>
 8010462:	f1b8 0f00 	cmp.w	r8, #0
 8010466:	d002      	beq.n	801046e <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 8010468:	2001      	movs	r0, #1
}
 801046a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801046e:	2302      	movs	r3, #2
 8010470:	2d00      	cmp	r5, #0
 8010472:	d05b      	beq.n	801052c <HAL_TIM_IC_Start_DMA+0x178>
 8010474:	2d04      	cmp	r5, #4
 8010476:	f000 8119 	beq.w	80106ac <HAL_TIM_IC_Start_DMA+0x2f8>
 801047a:	2d08      	cmp	r5, #8
 801047c:	f000 8141 	beq.w	8010702 <HAL_TIM_IC_Start_DMA+0x34e>
 8010480:	2d0c      	cmp	r5, #12
 8010482:	f000 815d 	beq.w	8010740 <HAL_TIM_IC_Start_DMA+0x38c>
 8010486:	2d10      	cmp	r5, #16
 8010488:	f000 812f 	beq.w	80106ea <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801048c:	4629      	mov	r1, r5
  switch (Channel)
 801048e:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010494:	2201      	movs	r2, #1
 8010496:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010498:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801049c:	f7ff ff2c 	bl	80102f8 <TIM_CCxChannelCmd>
  switch (Channel)
 80104a0:	2d08      	cmp	r5, #8
 80104a2:	f200 812b 	bhi.w	80106fc <HAL_TIM_IC_Start_DMA+0x348>
 80104a6:	e8df f015 	tbh	[pc, r5, lsl #1]
 80104aa:	010a      	.short	0x010a
 80104ac:	01290129 	.word	0x01290129
 80104b0:	01350129 	.word	0x01350129
 80104b4:	01290129 	.word	0x01290129
 80104b8:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80104bc:	f035 0204 	bics.w	r2, r5, #4
 80104c0:	d0a2      	beq.n	8010408 <HAL_TIM_IC_Start_DMA+0x54>
 80104c2:	2a08      	cmp	r2, #8
 80104c4:	d0a0      	beq.n	8010408 <HAL_TIM_IC_Start_DMA+0x54>
 80104c6:	f640 114a 	movw	r1, #2378	; 0x94a
 80104ca:	486a      	ldr	r0, [pc, #424]	; (8010674 <HAL_TIM_IC_Start_DMA+0x2c0>)
 80104cc:	f7f3 fd3e 	bl	8003f4c <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80104d0:	6823      	ldr	r3, [r4, #0]
 80104d2:	e799      	b.n	8010408 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80104d4:	2904      	cmp	r1, #4
 80104d6:	f000 8090 	beq.w	80105fa <HAL_TIM_IC_Start_DMA+0x246>
 80104da:	2908      	cmp	r1, #8
 80104dc:	f000 80e0 	beq.w	80106a0 <HAL_TIM_IC_Start_DMA+0x2ec>
 80104e0:	290c      	cmp	r1, #12
 80104e2:	d07e      	beq.n	80105e2 <HAL_TIM_IC_Start_DMA+0x22e>
 80104e4:	2910      	cmp	r1, #16
 80104e6:	f000 814a 	beq.w	801077e <HAL_TIM_IC_Start_DMA+0x3ca>
 80104ea:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 80104ee:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80104f0:	6823      	ldr	r3, [r4, #0]
 80104f2:	4a5a      	ldr	r2, [pc, #360]	; (801065c <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80104f4:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80104f8:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80104fa:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80104fe:	f000 8098 	beq.w	8010632 <HAL_TIM_IC_Start_DMA+0x27e>
 8010502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010506:	f000 8088 	beq.w	801061a <HAL_TIM_IC_Start_DMA+0x266>
 801050a:	4a55      	ldr	r2, [pc, #340]	; (8010660 <HAL_TIM_IC_Start_DMA+0x2ac>)
 801050c:	4293      	cmp	r3, r2
 801050e:	f47f af6b 	bne.w	80103e8 <HAL_TIM_IC_Start_DMA+0x34>
 8010512:	f035 020c 	bics.w	r2, r5, #12
 8010516:	d099      	beq.n	801044c <HAL_TIM_IC_Start_DMA+0x98>
 8010518:	4a57      	ldr	r2, [pc, #348]	; (8010678 <HAL_TIM_IC_Start_DMA+0x2c4>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d1d3      	bne.n	80104c6 <HAL_TIM_IC_Start_DMA+0x112>
 801051e:	2d00      	cmp	r5, #0
 8010520:	f43f af72 	beq.w	8010408 <HAL_TIM_IC_Start_DMA+0x54>
 8010524:	e7cf      	b.n	80104c6 <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 8010526:	2002      	movs	r0, #2
}
 8010528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801052c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010530:	4629      	mov	r1, r5
 8010532:	2201      	movs	r2, #1
 8010534:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010536:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801053a:	f7ff fedd 	bl	80102f8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801053e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010540:	494e      	ldr	r1, [pc, #312]	; (801067c <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8010542:	4643      	mov	r3, r8
 8010544:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8010546:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010548:	494d      	ldr	r1, [pc, #308]	; (8010680 <HAL_TIM_IC_Start_DMA+0x2cc>)
 801054a:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 801054c:	494d      	ldr	r1, [pc, #308]	; (8010684 <HAL_TIM_IC_Start_DMA+0x2d0>)
 801054e:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8010550:	6821      	ldr	r1, [r4, #0]
 8010552:	3134      	adds	r1, #52	; 0x34
 8010554:	f7f8 fa70 	bl	8008a38 <HAL_DMA_Start_IT>
 8010558:	2800      	cmp	r0, #0
 801055a:	d185      	bne.n	8010468 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801055c:	6822      	ldr	r2, [r4, #0]
 801055e:	68d3      	ldr	r3, [r2, #12]
 8010560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010564:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010566:	4b3d      	ldr	r3, [pc, #244]	; (801065c <HAL_TIM_IC_Start_DMA+0x2a8>)
 8010568:	4c3d      	ldr	r4, [pc, #244]	; (8010660 <HAL_TIM_IC_Start_DMA+0x2ac>)
 801056a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801056e:	bf18      	it	ne
 8010570:	429a      	cmpne	r2, r3
 8010572:	493c      	ldr	r1, [pc, #240]	; (8010664 <HAL_TIM_IC_Start_DMA+0x2b0>)
 8010574:	bf0c      	ite	eq
 8010576:	2301      	moveq	r3, #1
 8010578:	2300      	movne	r3, #0
 801057a:	42a2      	cmp	r2, r4
 801057c:	bf08      	it	eq
 801057e:	f043 0301 	orreq.w	r3, r3, #1
 8010582:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8010586:	428a      	cmp	r2, r1
 8010588:	bf08      	it	eq
 801058a:	f043 0301 	orreq.w	r3, r3, #1
 801058e:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 8010592:	42a2      	cmp	r2, r4
 8010594:	bf08      	it	eq
 8010596:	f043 0301 	orreq.w	r3, r3, #1
 801059a:	428a      	cmp	r2, r1
 801059c:	bf08      	it	eq
 801059e:	f043 0301 	orreq.w	r3, r3, #1
 80105a2:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80105a6:	428a      	cmp	r2, r1
 80105a8:	bf08      	it	eq
 80105aa:	f043 0301 	orreq.w	r3, r3, #1
 80105ae:	b913      	cbnz	r3, 80105b6 <HAL_TIM_IC_Start_DMA+0x202>
 80105b0:	4b35      	ldr	r3, [pc, #212]	; (8010688 <HAL_TIM_IC_Start_DMA+0x2d4>)
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d109      	bne.n	80105ca <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80105b6:	6891      	ldr	r1, [r2, #8]
 80105b8:	4b34      	ldr	r3, [pc, #208]	; (801068c <HAL_TIM_IC_Start_DMA+0x2d8>)
 80105ba:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105bc:	2b06      	cmp	r3, #6
 80105be:	f43f af54 	beq.w	801046a <HAL_TIM_IC_Start_DMA+0xb6>
 80105c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105c6:	f43f af50 	beq.w	801046a <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 80105ca:	6813      	ldr	r3, [r2, #0]
 80105cc:	f043 0301 	orr.w	r3, r3, #1
 80105d0:	6013      	str	r3, [r2, #0]
}
 80105d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80105d6:	f640 114b 	movw	r1, #2379	; 0x94b
 80105da:	4826      	ldr	r0, [pc, #152]	; (8010674 <HAL_TIM_IC_Start_DMA+0x2c0>)
 80105dc:	f7f3 fcb6 	bl	8003f4c <assert_failed>
 80105e0:	e734      	b.n	801044c <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80105e2:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 80105e6:	b2f6      	uxtb	r6, r6
 80105e8:	e782      	b.n	80104f0 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80105ea:	4a29      	ldr	r2, [pc, #164]	; (8010690 <HAL_TIM_IC_Start_DMA+0x2dc>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d128      	bne.n	8010642 <HAL_TIM_IC_Start_DMA+0x28e>
 80105f0:	f035 0204 	bics.w	r2, r5, #4
 80105f4:	f47f af67 	bne.w	80104c6 <HAL_TIM_IC_Start_DMA+0x112>
 80105f8:	e706      	b.n	8010408 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80105fa:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80105fe:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010602:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010604:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010606:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801060a:	4a14      	ldr	r2, [pc, #80]	; (801065c <HAL_TIM_IC_Start_DMA+0x2a8>)
 801060c:	4293      	cmp	r3, r2
 801060e:	f43f af1d 	beq.w	801044c <HAL_TIM_IC_Start_DMA+0x98>
 8010612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010616:	f47f af78 	bne.w	801050a <HAL_TIM_IC_Start_DMA+0x156>
 801061a:	f035 020c 	bics.w	r2, r5, #12
 801061e:	f43f af15 	beq.w	801044c <HAL_TIM_IC_Start_DMA+0x98>
 8010622:	4a1c      	ldr	r2, [pc, #112]	; (8010694 <HAL_TIM_IC_Start_DMA+0x2e0>)
 8010624:	4293      	cmp	r3, r2
 8010626:	f47f af77 	bne.w	8010518 <HAL_TIM_IC_Start_DMA+0x164>
 801062a:	2d00      	cmp	r5, #0
 801062c:	f43f aeec 	beq.w	8010408 <HAL_TIM_IC_Start_DMA+0x54>
 8010630:	e749      	b.n	80104c6 <HAL_TIM_IC_Start_DMA+0x112>
 8010632:	f025 0204 	bic.w	r2, r5, #4
 8010636:	2a08      	cmp	r2, #8
 8010638:	f43f af08 	beq.w	801044c <HAL_TIM_IC_Start_DMA+0x98>
 801063c:	2a10      	cmp	r2, #16
 801063e:	f43f af05 	beq.w	801044c <HAL_TIM_IC_Start_DMA+0x98>
 8010642:	4a15      	ldr	r2, [pc, #84]	; (8010698 <HAL_TIM_IC_Start_DMA+0x2e4>)
 8010644:	4293      	cmp	r3, r2
 8010646:	f43f af6a 	beq.w	801051e <HAL_TIM_IC_Start_DMA+0x16a>
 801064a:	4a14      	ldr	r2, [pc, #80]	; (801069c <HAL_TIM_IC_Start_DMA+0x2e8>)
 801064c:	4293      	cmp	r3, r2
 801064e:	f43f af66 	beq.w	801051e <HAL_TIM_IC_Start_DMA+0x16a>
 8010652:	4a0d      	ldr	r2, [pc, #52]	; (8010688 <HAL_TIM_IC_Start_DMA+0x2d4>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d0cb      	beq.n	80105f0 <HAL_TIM_IC_Start_DMA+0x23c>
 8010658:	e7e3      	b.n	8010622 <HAL_TIM_IC_Start_DMA+0x26e>
 801065a:	bf00      	nop
 801065c:	40010000 	.word	0x40010000
 8010660:	40000400 	.word	0x40000400
 8010664:	40000800 	.word	0x40000800
 8010668:	40000c00 	.word	0x40000c00
 801066c:	40010400 	.word	0x40010400
 8010670:	00111111 	.word	0x00111111
 8010674:	0802b1bc 	.word	0x0802b1bc
 8010678:	40002000 	.word	0x40002000
 801067c:	0800ece5 	.word	0x0800ece5
 8010680:	0800ed7d 	.word	0x0800ed7d
 8010684:	0800ef61 	.word	0x0800ef61
 8010688:	40001800 	.word	0x40001800
 801068c:	00010007 	.word	0x00010007
 8010690:	40014000 	.word	0x40014000
 8010694:	40001c00 	.word	0x40001c00
 8010698:	40014400 	.word	0x40014400
 801069c:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80106a0:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80106a4:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80106a8:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80106aa:	e7ab      	b.n	8010604 <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80106ac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80106b0:	4629      	mov	r1, r5
 80106b2:	2201      	movs	r2, #1
 80106b4:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80106b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80106ba:	f7ff fe1d 	bl	80102f8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80106be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80106c0:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80106c2:	4931      	ldr	r1, [pc, #196]	; (8010788 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80106c4:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80106c6:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80106c8:	4930      	ldr	r1, [pc, #192]	; (801078c <HAL_TIM_IC_Start_DMA+0x3d8>)
 80106ca:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80106cc:	4930      	ldr	r1, [pc, #192]	; (8010790 <HAL_TIM_IC_Start_DMA+0x3dc>)
 80106ce:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80106d0:	6821      	ldr	r1, [r4, #0]
 80106d2:	3138      	adds	r1, #56	; 0x38
 80106d4:	f7f8 f9b0 	bl	8008a38 <HAL_DMA_Start_IT>
 80106d8:	2800      	cmp	r0, #0
 80106da:	f47f aec5 	bne.w	8010468 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80106de:	6822      	ldr	r2, [r4, #0]
 80106e0:	68d3      	ldr	r3, [r2, #12]
 80106e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80106e6:	60d3      	str	r3, [r2, #12]
      break;
 80106e8:	e73d      	b.n	8010566 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80106ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80106ee:	2201      	movs	r2, #1
 80106f0:	4629      	mov	r1, r5
 80106f2:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80106f4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80106f8:	f7ff fdfe 	bl	80102f8 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80106fc:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 80106fe:	2001      	movs	r0, #1
 8010700:	e731      	b.n	8010566 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010702:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010706:	4629      	mov	r1, r5
 8010708:	2201      	movs	r2, #1
 801070a:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801070c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010710:	f7ff fdf2 	bl	80102f8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8010714:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8010716:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8010718:	491b      	ldr	r1, [pc, #108]	; (8010788 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 801071a:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 801071c:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801071e:	491b      	ldr	r1, [pc, #108]	; (801078c <HAL_TIM_IC_Start_DMA+0x3d8>)
 8010720:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010722:	491b      	ldr	r1, [pc, #108]	; (8010790 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8010724:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8010726:	6821      	ldr	r1, [r4, #0]
 8010728:	313c      	adds	r1, #60	; 0x3c
 801072a:	f7f8 f985 	bl	8008a38 <HAL_DMA_Start_IT>
 801072e:	2800      	cmp	r0, #0
 8010730:	f47f ae9a 	bne.w	8010468 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010734:	6822      	ldr	r2, [r4, #0]
 8010736:	68d3      	ldr	r3, [r2, #12]
 8010738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801073c:	60d3      	str	r3, [r2, #12]
      break;
 801073e:	e712      	b.n	8010566 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010740:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010744:	4629      	mov	r1, r5
 8010746:	2201      	movs	r2, #1
 8010748:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801074a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801074e:	f7ff fdd3 	bl	80102f8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8010752:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8010754:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8010756:	490c      	ldr	r1, [pc, #48]	; (8010788 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8010758:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 801075a:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801075c:	490b      	ldr	r1, [pc, #44]	; (801078c <HAL_TIM_IC_Start_DMA+0x3d8>)
 801075e:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010760:	490b      	ldr	r1, [pc, #44]	; (8010790 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8010762:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8010764:	6821      	ldr	r1, [r4, #0]
 8010766:	3140      	adds	r1, #64	; 0x40
 8010768:	f7f8 f966 	bl	8008a38 <HAL_DMA_Start_IT>
 801076c:	2800      	cmp	r0, #0
 801076e:	f47f ae7b 	bne.w	8010468 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010772:	6822      	ldr	r2, [r4, #0]
 8010774:	68d3      	ldr	r3, [r2, #12]
 8010776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801077a:	60d3      	str	r3, [r2, #12]
      break;
 801077c:	e6f3      	b.n	8010566 <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801077e:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8010782:	b2f6      	uxtb	r6, r6
 8010784:	e6b4      	b.n	80104f0 <HAL_TIM_IC_Start_DMA+0x13c>
 8010786:	bf00      	nop
 8010788:	0800ece5 	.word	0x0800ece5
 801078c:	0800ed7d 	.word	0x0800ed7d
 8010790:	0800ef61 	.word	0x0800ef61

08010794 <HAL_TIM_IC_Stop_DMA>:
{
 8010794:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010796:	4b82      	ldr	r3, [pc, #520]	; (80109a0 <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 8010798:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801079a:	6800      	ldr	r0, [r0, #0]
{
 801079c:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801079e:	4298      	cmp	r0, r3
 80107a0:	f000 80cc 	beq.w	801093c <HAL_TIM_IC_Stop_DMA+0x1a8>
 80107a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80107a8:	d056      	beq.n	8010858 <HAL_TIM_IC_Stop_DMA+0xc4>
 80107aa:	4b7e      	ldr	r3, [pc, #504]	; (80109a4 <HAL_TIM_IC_Stop_DMA+0x210>)
 80107ac:	4298      	cmp	r0, r3
 80107ae:	d053      	beq.n	8010858 <HAL_TIM_IC_Stop_DMA+0xc4>
 80107b0:	4b7d      	ldr	r3, [pc, #500]	; (80109a8 <HAL_TIM_IC_Stop_DMA+0x214>)
 80107b2:	4298      	cmp	r0, r3
 80107b4:	d050      	beq.n	8010858 <HAL_TIM_IC_Stop_DMA+0xc4>
 80107b6:	4b7d      	ldr	r3, [pc, #500]	; (80109ac <HAL_TIM_IC_Stop_DMA+0x218>)
 80107b8:	4298      	cmp	r0, r3
 80107ba:	d04d      	beq.n	8010858 <HAL_TIM_IC_Stop_DMA+0xc4>
 80107bc:	4b7c      	ldr	r3, [pc, #496]	; (80109b0 <HAL_TIM_IC_Stop_DMA+0x21c>)
 80107be:	4298      	cmp	r0, r3
 80107c0:	f000 80bc 	beq.w	801093c <HAL_TIM_IC_Stop_DMA+0x1a8>
 80107c4:	4b7b      	ldr	r3, [pc, #492]	; (80109b4 <HAL_TIM_IC_Stop_DMA+0x220>)
 80107c6:	4298      	cmp	r0, r3
 80107c8:	d00c      	beq.n	80107e4 <HAL_TIM_IC_Stop_DMA+0x50>
 80107ca:	4b7b      	ldr	r3, [pc, #492]	; (80109b8 <HAL_TIM_IC_Stop_DMA+0x224>)
 80107cc:	4298      	cmp	r0, r3
 80107ce:	f000 80d9 	beq.w	8010984 <HAL_TIM_IC_Stop_DMA+0x1f0>
 80107d2:	4b7a      	ldr	r3, [pc, #488]	; (80109bc <HAL_TIM_IC_Stop_DMA+0x228>)
 80107d4:	4298      	cmp	r0, r3
 80107d6:	f000 80d5 	beq.w	8010984 <HAL_TIM_IC_Stop_DMA+0x1f0>
 80107da:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80107de:	4298      	cmp	r0, r3
 80107e0:	f040 80c9 	bne.w	8010976 <HAL_TIM_IC_Stop_DMA+0x1e2>
 80107e4:	f035 0304 	bics.w	r3, r5, #4
 80107e8:	f000 80cf 	beq.w	801098a <HAL_TIM_IC_Stop_DMA+0x1f6>
 80107ec:	4874      	ldr	r0, [pc, #464]	; (80109c0 <HAL_TIM_IC_Stop_DMA+0x22c>)
 80107ee:	f640 11e5 	movw	r1, #2533	; 0x9e5
 80107f2:	f7f3 fbab 	bl	8003f4c <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80107f6:	6820      	ldr	r0, [r4, #0]
 80107f8:	4b69      	ldr	r3, [pc, #420]	; (80109a0 <HAL_TIM_IC_Stop_DMA+0x20c>)
 80107fa:	4a6a      	ldr	r2, [pc, #424]	; (80109a4 <HAL_TIM_IC_Stop_DMA+0x210>)
 80107fc:	4298      	cmp	r0, r3
 80107fe:	bf18      	it	ne
 8010800:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010804:	bf14      	ite	ne
 8010806:	2301      	movne	r3, #1
 8010808:	2300      	moveq	r3, #0
 801080a:	4290      	cmp	r0, r2
 801080c:	bf0c      	ite	eq
 801080e:	2300      	moveq	r3, #0
 8010810:	f003 0301 	andne.w	r3, r3, #1
 8010814:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010818:	4290      	cmp	r0, r2
 801081a:	bf0c      	ite	eq
 801081c:	2300      	moveq	r3, #0
 801081e:	f003 0301 	andne.w	r3, r3, #1
 8010822:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010826:	4290      	cmp	r0, r2
 8010828:	bf0c      	ite	eq
 801082a:	2300      	moveq	r3, #0
 801082c:	f003 0301 	andne.w	r3, r3, #1
 8010830:	b11b      	cbz	r3, 801083a <HAL_TIM_IC_Stop_DMA+0xa6>
 8010832:	4b5f      	ldr	r3, [pc, #380]	; (80109b0 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8010834:	4298      	cmp	r0, r3
 8010836:	f040 80a8 	bne.w	801098a <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801083a:	2200      	movs	r2, #0
 801083c:	4629      	mov	r1, r5
 801083e:	f7ff fd5b 	bl	80102f8 <TIM_CCxChannelCmd>
  switch (Channel)
 8010842:	2d0c      	cmp	r5, #12
 8010844:	d80c      	bhi.n	8010860 <HAL_TIM_IC_Stop_DMA+0xcc>
 8010846:	e8df f005 	tbb	[pc, r5]
 801084a:	0b0d      	.short	0x0b0d
 801084c:	0b640b0b 	.word	0x0b640b0b
 8010850:	0b4a0b0b 	.word	0x0b4a0b0b
 8010854:	0b0b      	.short	0x0b0b
 8010856:	22          	.byte	0x22
 8010857:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010858:	f035 030c 	bics.w	r3, r5, #12
 801085c:	d1c6      	bne.n	80107ec <HAL_TIM_IC_Stop_DMA+0x58>
 801085e:	e7ec      	b.n	801083a <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8010860:	2001      	movs	r0, #1
}
 8010862:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010864:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010866:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010868:	68d3      	ldr	r3, [r2, #12]
 801086a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801086e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010870:	f7f8 f986 	bl	8008b80 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8010874:	6823      	ldr	r3, [r4, #0]
 8010876:	f241 1211 	movw	r2, #4369	; 0x1111
 801087a:	6a19      	ldr	r1, [r3, #32]
 801087c:	4211      	tst	r1, r2
 801087e:	d06c      	beq.n	801095a <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010880:	2301      	movs	r3, #1
 8010882:	2000      	movs	r0, #0
 8010884:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010888:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 801088c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 801088e:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8010890:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8010892:	68d3      	ldr	r3, [r2, #12]
 8010894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010898:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 801089a:	f7f8 f971 	bl	8008b80 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 801089e:	6823      	ldr	r3, [r4, #0]
 80108a0:	f241 1211 	movw	r2, #4369	; 0x1111
 80108a4:	6a19      	ldr	r1, [r3, #32]
 80108a6:	4211      	tst	r1, r2
 80108a8:	d161      	bne.n	801096e <HAL_TIM_IC_Stop_DMA+0x1da>
 80108aa:	6a19      	ldr	r1, [r3, #32]
 80108ac:	f240 4244 	movw	r2, #1092	; 0x444
 80108b0:	4211      	tst	r1, r2
 80108b2:	d15c      	bne.n	801096e <HAL_TIM_IC_Stop_DMA+0x1da>
 80108b4:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80108b6:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 80108b8:	f022 0201 	bic.w	r2, r2, #1
 80108bc:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80108be:	d036      	beq.n	801092e <HAL_TIM_IC_Stop_DMA+0x19a>
 80108c0:	2d08      	cmp	r5, #8
 80108c2:	d01f      	beq.n	8010904 <HAL_TIM_IC_Stop_DMA+0x170>
 80108c4:	2d0c      	cmp	r5, #12
 80108c6:	d052      	beq.n	801096e <HAL_TIM_IC_Stop_DMA+0x1da>
 80108c8:	2d10      	cmp	r5, #16
 80108ca:	f04f 0301 	mov.w	r3, #1
 80108ce:	d063      	beq.n	8010998 <HAL_TIM_IC_Stop_DMA+0x204>
 80108d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80108d4:	2301      	movs	r3, #1
 80108d6:	2000      	movs	r0, #0
 80108d8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 80108dc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80108de:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80108e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80108e2:	68d3      	ldr	r3, [r2, #12]
 80108e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80108e8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80108ea:	f7f8 f949 	bl	8008b80 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 80108ee:	6823      	ldr	r3, [r4, #0]
 80108f0:	f241 1211 	movw	r2, #4369	; 0x1111
 80108f4:	6a19      	ldr	r1, [r3, #32]
 80108f6:	4211      	tst	r1, r2
 80108f8:	d104      	bne.n	8010904 <HAL_TIM_IC_Stop_DMA+0x170>
 80108fa:	6a19      	ldr	r1, [r3, #32]
 80108fc:	f240 4244 	movw	r2, #1092	; 0x444
 8010900:	4211      	tst	r1, r2
 8010902:	d0d7      	beq.n	80108b4 <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010904:	2301      	movs	r3, #1
 8010906:	2000      	movs	r0, #0
 8010908:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801090c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8010910:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8010912:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8010914:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8010916:	68d3      	ldr	r3, [r2, #12]
 8010918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801091c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 801091e:	f7f8 f92f 	bl	8008b80 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8010922:	6823      	ldr	r3, [r4, #0]
 8010924:	f241 1211 	movw	r2, #4369	; 0x1111
 8010928:	6a19      	ldr	r1, [r3, #32]
 801092a:	4211      	tst	r1, r2
 801092c:	d00f      	beq.n	801094e <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801092e:	2301      	movs	r3, #1
 8010930:	2000      	movs	r0, #0
 8010932:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 801093a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801093c:	2d14      	cmp	r5, #20
 801093e:	f63f af55 	bhi.w	80107ec <HAL_TIM_IC_Stop_DMA+0x58>
 8010942:	4b20      	ldr	r3, [pc, #128]	; (80109c4 <HAL_TIM_IC_Stop_DMA+0x230>)
 8010944:	40eb      	lsrs	r3, r5
 8010946:	07db      	lsls	r3, r3, #31
 8010948:	f53f af77 	bmi.w	801083a <HAL_TIM_IC_Stop_DMA+0xa6>
 801094c:	e74e      	b.n	80107ec <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 801094e:	6a19      	ldr	r1, [r3, #32]
 8010950:	f240 4244 	movw	r2, #1092	; 0x444
 8010954:	4211      	tst	r1, r2
 8010956:	d0ad      	beq.n	80108b4 <HAL_TIM_IC_Stop_DMA+0x120>
 8010958:	e7e9      	b.n	801092e <HAL_TIM_IC_Stop_DMA+0x19a>
 801095a:	6a19      	ldr	r1, [r3, #32]
 801095c:	f240 4244 	movw	r2, #1092	; 0x444
 8010960:	4211      	tst	r1, r2
 8010962:	d18d      	bne.n	8010880 <HAL_TIM_IC_Stop_DMA+0xec>
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	f022 0201 	bic.w	r2, r2, #1
 801096a:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801096c:	e788      	b.n	8010880 <HAL_TIM_IC_Stop_DMA+0xec>
 801096e:	2301      	movs	r3, #1
 8010970:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010974:	e7ae      	b.n	80108d4 <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010976:	4b14      	ldr	r3, [pc, #80]	; (80109c8 <HAL_TIM_IC_Stop_DMA+0x234>)
 8010978:	4298      	cmp	r0, r3
 801097a:	d003      	beq.n	8010984 <HAL_TIM_IC_Stop_DMA+0x1f0>
 801097c:	4b13      	ldr	r3, [pc, #76]	; (80109cc <HAL_TIM_IC_Stop_DMA+0x238>)
 801097e:	4298      	cmp	r0, r3
 8010980:	f47f af34 	bne.w	80107ec <HAL_TIM_IC_Stop_DMA+0x58>
 8010984:	2d00      	cmp	r5, #0
 8010986:	f47f af31 	bne.w	80107ec <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 801098a:	480d      	ldr	r0, [pc, #52]	; (80109c0 <HAL_TIM_IC_Stop_DMA+0x22c>)
 801098c:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8010990:	f7f3 fadc 	bl	8003f4c <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010994:	6820      	ldr	r0, [r4, #0]
 8010996:	e750      	b.n	801083a <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801099c:	e79a      	b.n	80108d4 <HAL_TIM_IC_Stop_DMA+0x140>
 801099e:	bf00      	nop
 80109a0:	40010000 	.word	0x40010000
 80109a4:	40000400 	.word	0x40000400
 80109a8:	40000800 	.word	0x40000800
 80109ac:	40000c00 	.word	0x40000c00
 80109b0:	40010400 	.word	0x40010400
 80109b4:	40014000 	.word	0x40014000
 80109b8:	40014400 	.word	0x40014400
 80109bc:	40014800 	.word	0x40014800
 80109c0:	0802b1bc 	.word	0x0802b1bc
 80109c4:	00111111 	.word	0x00111111
 80109c8:	40001c00 	.word	0x40001c00
 80109cc:	40002000 	.word	0x40002000

080109d0 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80109d0:	6802      	ldr	r2, [r0, #0]
{
 80109d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80109d6:	4b6d      	ldr	r3, [pc, #436]	; (8010b8c <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 80109d8:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80109da:	4f6d      	ldr	r7, [pc, #436]	; (8010b90 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 80109dc:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80109de:	429a      	cmp	r2, r3
 80109e0:	bf18      	it	ne
 80109e2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80109e6:	4e6b      	ldr	r6, [pc, #428]	; (8010b94 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 80109e8:	496b      	ldr	r1, [pc, #428]	; (8010b98 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 80109ea:	bf14      	ite	ne
 80109ec:	2301      	movne	r3, #1
 80109ee:	2300      	moveq	r3, #0
 80109f0:	42ba      	cmp	r2, r7
 80109f2:	bf0c      	ite	eq
 80109f4:	2300      	moveq	r3, #0
 80109f6:	f003 0301 	andne.w	r3, r3, #1
 80109fa:	42b2      	cmp	r2, r6
 80109fc:	bf0c      	ite	eq
 80109fe:	2300      	moveq	r3, #0
 8010a00:	f003 0301 	andne.w	r3, r3, #1
 8010a04:	428a      	cmp	r2, r1
 8010a06:	bf0c      	ite	eq
 8010a08:	2300      	moveq	r3, #0
 8010a0a:	f003 0301 	andne.w	r3, r3, #1
 8010a0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010a12:	428a      	cmp	r2, r1
 8010a14:	bf0c      	ite	eq
 8010a16:	2300      	moveq	r3, #0
 8010a18:	f003 0301 	andne.w	r3, r3, #1
 8010a1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010a20:	428a      	cmp	r2, r1
 8010a22:	bf0c      	ite	eq
 8010a24:	2300      	moveq	r3, #0
 8010a26:	f003 0301 	andne.w	r3, r3, #1
 8010a2a:	b11b      	cbz	r3, 8010a34 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8010a2c:	4b5b      	ldr	r3, [pc, #364]	; (8010b9c <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	f040 808c 	bne.w	8010b4c <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8010a34:	682b      	ldr	r3, [r5, #0]
 8010a36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8010a3a:	2b40      	cmp	r3, #64	; 0x40
 8010a3c:	d002      	beq.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	f040 808a 	bne.w	8010b58 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8010a44:	68ab      	ldr	r3, [r5, #8]
 8010a46:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010a4a:	d173      	bne.n	8010b34 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 8010a4c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d078      	beq.n	8010b46 <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010a54:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 8010a56:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a58:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8010b8c <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 8010a5c:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a5e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8010b9c <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 8010a62:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a66:	eba2 0009 	sub.w	r0, r2, r9
 8010a6a:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 8010a6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a72:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 8010a76:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a78:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 8010a7c:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a7e:	0940      	lsrs	r0, r0, #5
 8010a80:	0949      	lsrs	r1, r1, #5
 8010a82:	ea50 0301 	orrs.w	r3, r0, r1
 8010a86:	d135      	bne.n	8010af4 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8010a88:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a8a:	430b      	orrs	r3, r1
 8010a8c:	4940      	ldr	r1, [pc, #256]	; (8010b90 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a8e:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a92:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8010a96:	bf08      	it	eq
 8010a98:	f043 0301 	orreq.w	r3, r3, #1
 8010a9c:	428a      	cmp	r2, r1
 8010a9e:	bf08      	it	eq
 8010aa0:	f043 0301 	orreq.w	r3, r3, #1
 8010aa4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010aa8:	428a      	cmp	r2, r1
 8010aaa:	bf08      	it	eq
 8010aac:	f043 0301 	orreq.w	r3, r3, #1
 8010ab0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010ab4:	428a      	cmp	r2, r1
 8010ab6:	bf08      	it	eq
 8010ab8:	f043 0301 	orreq.w	r3, r3, #1
 8010abc:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8010ac0:	428a      	cmp	r2, r1
 8010ac2:	bf08      	it	eq
 8010ac4:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010ac8:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010aca:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010acc:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 8010ace:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ad0:	b913      	cbnz	r3, 8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010ad2:	4b33      	ldr	r3, [pc, #204]	; (8010ba0 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d104      	bne.n	8010ae2 <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010ad8:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010ada:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010ade:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010ae0:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8010ae2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010ae4:	2201      	movs	r2, #1

  return HAL_OK;
 8010ae6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8010ae8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010aec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8010af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8010af4:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8010af8:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 8010afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010b00:	bf18      	it	ne
 8010b02:	2b00      	cmpne	r3, #0
 8010b04:	bf14      	ite	ne
 8010b06:	f04f 0c01 	movne.w	ip, #1
 8010b0a:	f04f 0c00 	moveq.w	ip, #0
 8010b0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010b12:	bf0c      	ite	eq
 8010b14:	f04f 0c00 	moveq.w	ip, #0
 8010b18:	f00c 0c01 	andne.w	ip, ip, #1
 8010b1c:	f1bc 0f00 	cmp.w	ip, #0
 8010b20:	d002      	beq.n	8010b28 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8010b22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010b26:	d11d      	bne.n	8010b64 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010b28:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	ea47 070e 	orr.w	r7, r7, lr
 8010b32:	e7aa      	b.n	8010a8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8010b34:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8010b38:	481a      	ldr	r0, [pc, #104]	; (8010ba4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8010b3a:	f7f3 fa07 	bl	8003f4c <assert_failed>
  __HAL_LOCK(htim);
 8010b3e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d186      	bne.n	8010a54 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8010b46:	2002      	movs	r0, #2
}
 8010b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8010b4c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8010b50:	4814      	ldr	r0, [pc, #80]	; (8010ba4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8010b52:	f7f3 f9fb 	bl	8003f4c <assert_failed>
 8010b56:	e76d      	b.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8010b58:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8010b5c:	4811      	ldr	r0, [pc, #68]	; (8010ba4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8010b5e:	f7f3 f9f5 	bl	8003f4c <assert_failed>
 8010b62:	e76f      	b.n	8010a44 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8010b64:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8010b68:	480e      	ldr	r0, [pc, #56]	; (8010ba4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8010b6a:	f7f3 f9ef 	bl	8003f4c <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 8010b6e:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010b70:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b74:	eba2 0309 	sub.w	r3, r2, r9
 8010b78:	eba2 0c08 	sub.w	ip, r2, r8
 8010b7c:	4258      	negs	r0, r3
 8010b7e:	4158      	adcs	r0, r3
 8010b80:	f1dc 0100 	rsbs	r1, ip, #0
 8010b84:	eb41 010c 	adc.w	r1, r1, ip
 8010b88:	e7ce      	b.n	8010b28 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8010b8a:	bf00      	nop
 8010b8c:	40010000 	.word	0x40010000
 8010b90:	40000400 	.word	0x40000400
 8010b94:	40000800 	.word	0x40000800
 8010b98:	40000c00 	.word	0x40000c00
 8010b9c:	40010400 	.word	0x40010400
 8010ba0:	40001800 	.word	0x40001800
 8010ba4:	0802b1f4 	.word	0x0802b1f4

08010ba8 <HAL_TIMEx_CommutCallback>:
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop

08010bac <HAL_TIMEx_BreakCallback>:
 8010bac:	4770      	bx	lr
 8010bae:	bf00      	nop

08010bb0 <HAL_TIMEx_Break2Callback>:
 8010bb0:	4770      	bx	lr
 8010bb2:	bf00      	nop

08010bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010bb4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb6:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010bba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bbe:	e842 3100 	strex	r1, r3, [r2]
 8010bc2:	2900      	cmp	r1, #0
 8010bc4:	d1f7      	bne.n	8010bb6 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc6:	f102 0308 	add.w	r3, r2, #8
 8010bca:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd2:	f102 0c08 	add.w	ip, r2, #8
 8010bd6:	e84c 3100 	strex	r1, r3, [ip]
 8010bda:	2900      	cmp	r1, #0
 8010bdc:	d1f3      	bne.n	8010bc6 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bde:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d005      	beq.n	8010bf0 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010be4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8010be6:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010be8:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 8010bea:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bec:	6603      	str	r3, [r0, #96]	; 0x60
}
 8010bee:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bf4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf8:	e842 3100 	strex	r1, r3, [r2]
 8010bfc:	2900      	cmp	r1, #0
 8010bfe:	d0f1      	beq.n	8010be4 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c00:	e852 3f00 	ldrex	r3, [r2]
 8010c04:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c08:	e842 3100 	strex	r1, r3, [r2]
 8010c0c:	2900      	cmp	r1, #0
 8010c0e:	d1ef      	bne.n	8010bf0 <UART_EndRxTransfer+0x3c>
 8010c10:	e7e8      	b.n	8010be4 <UART_EndRxTransfer+0x30>
 8010c12:	bf00      	nop

08010c14 <HAL_UART_DeInit>:
  if (huart == NULL)
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d046      	beq.n	8010ca6 <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8010c18:	6802      	ldr	r2, [r0, #0]
 8010c1a:	4927      	ldr	r1, [pc, #156]	; (8010cb8 <HAL_UART_DeInit+0xa4>)
{
 8010c1c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8010c1e:	4b27      	ldr	r3, [pc, #156]	; (8010cbc <HAL_UART_DeInit+0xa8>)
 8010c20:	4604      	mov	r4, r0
 8010c22:	4827      	ldr	r0, [pc, #156]	; (8010cc0 <HAL_UART_DeInit+0xac>)
 8010c24:	429a      	cmp	r2, r3
 8010c26:	bf18      	it	ne
 8010c28:	4282      	cmpne	r2, r0
 8010c2a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010c2e:	bf14      	ite	ne
 8010c30:	2301      	movne	r3, #1
 8010c32:	2300      	moveq	r3, #0
 8010c34:	428a      	cmp	r2, r1
 8010c36:	bf0c      	ite	eq
 8010c38:	2300      	moveq	r3, #0
 8010c3a:	f003 0301 	andne.w	r3, r3, #1
 8010c3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010c42:	4282      	cmp	r2, r0
 8010c44:	bf0c      	ite	eq
 8010c46:	2300      	moveq	r3, #0
 8010c48:	f003 0301 	andne.w	r3, r3, #1
 8010c4c:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8010c50:	428a      	cmp	r2, r1
 8010c52:	bf0c      	ite	eq
 8010c54:	2300      	moveq	r3, #0
 8010c56:	f003 0301 	andne.w	r3, r3, #1
 8010c5a:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8010c5e:	4282      	cmp	r2, r0
 8010c60:	bf0c      	ite	eq
 8010c62:	2300      	moveq	r3, #0
 8010c64:	f003 0301 	andne.w	r3, r3, #1
 8010c68:	428a      	cmp	r2, r1
 8010c6a:	bf0c      	ite	eq
 8010c6c:	2300      	moveq	r3, #0
 8010c6e:	f003 0301 	andne.w	r3, r3, #1
 8010c72:	b113      	cbz	r3, 8010c7a <HAL_UART_DeInit+0x66>
 8010c74:	4b13      	ldr	r3, [pc, #76]	; (8010cc4 <HAL_UART_DeInit+0xb0>)
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d117      	bne.n	8010caa <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 8010c7a:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8010c7c:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 8010c7e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8010c80:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8010c82:	6813      	ldr	r3, [r2, #0]
 8010c84:	f023 0301 	bic.w	r3, r3, #1
 8010c88:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8010c8a:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 8010c8c:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 8010c8e:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 8010c90:	f7f5 f972 	bl	8005f78 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c94:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 8010c98:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 8010c9a:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8010c9c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8010ca0:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ca2:	6625      	str	r5, [r4, #96]	; 0x60
}
 8010ca4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010ca6:	2001      	movs	r0, #1
}
 8010ca8:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8010caa:	f240 2167 	movw	r1, #615	; 0x267
 8010cae:	4806      	ldr	r0, [pc, #24]	; (8010cc8 <HAL_UART_DeInit+0xb4>)
 8010cb0:	f7f3 f94c 	bl	8003f4c <assert_failed>
  __HAL_UART_DISABLE(huart);
 8010cb4:	6822      	ldr	r2, [r4, #0]
 8010cb6:	e7e0      	b.n	8010c7a <HAL_UART_DeInit+0x66>
 8010cb8:	40004800 	.word	0x40004800
 8010cbc:	40011000 	.word	0x40011000
 8010cc0:	40004400 	.word	0x40004400
 8010cc4:	40007c00 	.word	0x40007c00
 8010cc8:	0802b230 	.word	0x0802b230

08010ccc <HAL_UART_Transmit_DMA>:
{
 8010ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8010cce:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8010cd0:	2f20      	cmp	r7, #32
 8010cd2:	d141      	bne.n	8010d58 <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 8010cd4:	2900      	cmp	r1, #0
 8010cd6:	d03d      	beq.n	8010d54 <HAL_UART_Transmit_DMA+0x88>
 8010cd8:	fab2 f682 	clz	r6, r2
 8010cdc:	0976      	lsrs	r6, r6, #5
 8010cde:	2a00      	cmp	r2, #0
 8010ce0:	d038      	beq.n	8010d54 <HAL_UART_Transmit_DMA+0x88>
 8010ce2:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8010ce4:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8010ce8:	2801      	cmp	r0, #1
 8010cea:	d035      	beq.n	8010d58 <HAL_UART_Transmit_DMA+0x8c>
 8010cec:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010cee:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 8010cf0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8010cf2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 8010cf6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cf8:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 8010cfc:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8010d00:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010d04:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8010d06:	b190      	cbz	r0, 8010d2e <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010d08:	f8df c060 	ldr.w	ip, [pc, #96]	; 8010d6c <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010d0c:	4613      	mov	r3, r2
 8010d0e:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010d10:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010d14:	f8df c058 	ldr.w	ip, [pc, #88]	; 8010d70 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010d18:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8010d1a:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010d1c:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010d20:	f8df c050 	ldr.w	ip, [pc, #80]	; 8010d74 <HAL_UART_Transmit_DMA+0xa8>
 8010d24:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010d28:	f7f7 fe86 	bl	8008a38 <HAL_DMA_Start_IT>
 8010d2c:	b9b0      	cbnz	r0, 8010d5c <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010d2e:	6822      	ldr	r2, [r4, #0]
 8010d30:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8010d32:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010d34:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8010d36:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d3a:	f102 0308 	add.w	r3, r2, #8
 8010d3e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d46:	f102 0108 	add.w	r1, r2, #8
 8010d4a:	e841 3000 	strex	r0, r3, [r1]
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	d1f3      	bne.n	8010d3a <HAL_UART_Transmit_DMA+0x6e>
}
 8010d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8010d54:	2001      	movs	r0, #1
}
 8010d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8010d58:	2002      	movs	r0, #2
}
 8010d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010d5c:	2310      	movs	r3, #16
        return HAL_ERROR;
 8010d5e:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8010d60:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010d64:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8010d68:	67a7      	str	r7, [r4, #120]	; 0x78
}
 8010d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d6c:	08010e7d 	.word	0x08010e7d
 8010d70:	08010ec5 	.word	0x08010ec5
 8010d74:	08010ed5 	.word	0x08010ed5

08010d78 <HAL_UART_Abort>:
{
 8010d78:	b538      	push	{r3, r4, r5, lr}
 8010d7a:	4604      	mov	r4, r0
 8010d7c:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d7e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010d82:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d86:	e843 2100 	strex	r1, r2, [r3]
 8010d8a:	2900      	cmp	r1, #0
 8010d8c:	d1f7      	bne.n	8010d7e <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d8e:	f103 0208 	add.w	r2, r3, #8
 8010d92:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d96:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d9a:	f103 0008 	add.w	r0, r3, #8
 8010d9e:	e840 2100 	strex	r1, r2, [r0]
 8010da2:	2900      	cmp	r1, #0
 8010da4:	d1f3      	bne.n	8010d8e <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010da6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010da8:	2a01      	cmp	r2, #1
 8010daa:	d043      	beq.n	8010e34 <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010dac:	6899      	ldr	r1, [r3, #8]
 8010dae:	461a      	mov	r2, r3
 8010db0:	0608      	lsls	r0, r1, #24
 8010db2:	d42a      	bmi.n	8010e0a <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010db4:	6899      	ldr	r1, [r3, #8]
 8010db6:	0649      	lsls	r1, r1, #25
 8010db8:	d514      	bpl.n	8010de4 <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dba:	f103 0208 	add.w	r2, r3, #8
 8010dbe:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc6:	f103 0008 	add.w	r0, r3, #8
 8010dca:	e840 2100 	strex	r1, r2, [r0]
 8010dce:	2900      	cmp	r1, #0
 8010dd0:	d1f3      	bne.n	8010dba <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 8010dd2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	d03e      	beq.n	8010e56 <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 8010dd8:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010dda:	f7f7 fe89 	bl	8008af0 <HAL_DMA_Abort>
 8010dde:	2800      	cmp	r0, #0
 8010de0:	d145      	bne.n	8010e6e <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010de2:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 8010de4:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010de6:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 8010de8:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 8010dea:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 8010dee:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 8010df0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010df4:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010df6:	6991      	ldr	r1, [r2, #24]
 8010df8:	f041 0108 	orr.w	r1, r1, #8
 8010dfc:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8010dfe:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010e00:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e02:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e04:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8010e08:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e0a:	f103 0208 	add.w	r2, r3, #8
 8010e0e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e16:	f103 0008 	add.w	r0, r3, #8
 8010e1a:	e840 2100 	strex	r1, r2, [r0]
 8010e1e:	2900      	cmp	r1, #0
 8010e20:	d1f3      	bne.n	8010e0a <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 8010e22:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010e24:	b120      	cbz	r0, 8010e30 <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 8010e26:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8010e28:	f7f7 fe62 	bl	8008af0 <HAL_DMA_Abort>
 8010e2c:	b9a8      	cbnz	r0, 8010e5a <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e2e:	6823      	ldr	r3, [r4, #0]
 8010e30:	461a      	mov	r2, r3
 8010e32:	e7bf      	b.n	8010db4 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e34:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010e38:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e3c:	e843 2100 	strex	r1, r2, [r3]
 8010e40:	2900      	cmp	r1, #0
 8010e42:	d0b3      	beq.n	8010dac <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e44:	e853 2f00 	ldrex	r2, [r3]
 8010e48:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e4c:	e843 2100 	strex	r1, r2, [r3]
 8010e50:	2900      	cmp	r1, #0
 8010e52:	d1ef      	bne.n	8010e34 <HAL_UART_Abort+0xbc>
 8010e54:	e7aa      	b.n	8010dac <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010e56:	461a      	mov	r2, r3
 8010e58:	e7c4      	b.n	8010de4 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8010e5a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010e5c:	f7f7 ff94 	bl	8008d88 <HAL_DMA_GetError>
 8010e60:	2820      	cmp	r0, #32
 8010e62:	d1e4      	bne.n	8010e2e <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010e64:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 8010e66:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010e68:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8010e6c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010e6e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8010e70:	f7f7 ff8a 	bl	8008d88 <HAL_DMA_GetError>
 8010e74:	2820      	cmp	r0, #32
 8010e76:	d1b4      	bne.n	8010de2 <HAL_UART_Abort+0x6a>
 8010e78:	e7f4      	b.n	8010e64 <HAL_UART_Abort+0xec>
 8010e7a:	bf00      	nop

08010e7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010e7c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010e7e:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e80:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e86:	d018      	beq.n	8010eba <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	6802      	ldr	r2, [r0, #0]
 8010e8c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e90:	f102 0308 	add.w	r3, r2, #8
 8010e94:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e9c:	f102 0008 	add.w	r0, r2, #8
 8010ea0:	e840 3100 	strex	r1, r3, [r0]
 8010ea4:	2900      	cmp	r1, #0
 8010ea6:	d1f3      	bne.n	8010e90 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea8:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eb0:	e842 3100 	strex	r1, r3, [r2]
 8010eb4:	2900      	cmp	r1, #0
 8010eb6:	d1f7      	bne.n	8010ea8 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010eb8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8010eba:	f7f0 f8d1 	bl	8001060 <HAL_UART_TxCpltCallback>
}
 8010ebe:	bd08      	pop	{r3, pc}

08010ec0 <HAL_UART_TxHalfCpltCallback>:
 8010ec0:	4770      	bx	lr
 8010ec2:	bf00      	nop

08010ec4 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010ec4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8010ec6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8010ec8:	f7ff fffa 	bl	8010ec0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ecc:	bd08      	pop	{r3, pc}
 8010ece:	bf00      	nop

08010ed0 <HAL_UART_RxHalfCpltCallback>:
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop

08010ed4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ed4:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010ed6:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010ed8:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8010eda:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010edc:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010ede:	6893      	ldr	r3, [r2, #8]
 8010ee0:	061b      	lsls	r3, r3, #24
 8010ee2:	d501      	bpl.n	8010ee8 <UART_DMAError+0x14>
 8010ee4:	2921      	cmp	r1, #33	; 0x21
 8010ee6:	d00d      	beq.n	8010f04 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010ee8:	6893      	ldr	r3, [r2, #8]
 8010eea:	065b      	lsls	r3, r3, #25
 8010eec:	d501      	bpl.n	8010ef2 <UART_DMAError+0x1e>
 8010eee:	2c22      	cmp	r4, #34	; 0x22
 8010ef0:	d016      	beq.n	8010f20 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010ef2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8010ef6:	f043 0310 	orr.w	r3, r3, #16
 8010efa:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010efe:	f7f3 fb03 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f02:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8010f04:	2300      	movs	r3, #0
 8010f06:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f0a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010f0e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f12:	e842 3100 	strex	r1, r3, [r2]
 8010f16:	2900      	cmp	r1, #0
 8010f18:	d1f7      	bne.n	8010f0a <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8010f1a:	2320      	movs	r3, #32
 8010f1c:	6783      	str	r3, [r0, #120]	; 0x78
}
 8010f1e:	e7e3      	b.n	8010ee8 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8010f20:	2300      	movs	r3, #0
 8010f22:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8010f26:	f7ff fe45 	bl	8010bb4 <UART_EndRxTransfer>
 8010f2a:	e7e2      	b.n	8010ef2 <UART_DMAError+0x1e>

08010f2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f2c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f2e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8010f30:	2300      	movs	r3, #0
 8010f32:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010f36:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f3a:	f7f3 fae5 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f3e:	bd08      	pop	{r3, pc}

08010f40 <HAL_UART_AbortCpltCallback>:
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop

08010f44 <HAL_UART_Abort_IT>:
{
 8010f44:	b570      	push	{r4, r5, r6, lr}
 8010f46:	6803      	ldr	r3, [r0, #0]
 8010f48:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f4a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010f4e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f52:	e843 2100 	strex	r1, r2, [r3]
 8010f56:	2900      	cmp	r1, #0
 8010f58:	d1f7      	bne.n	8010f4a <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f5a:	f103 0208 	add.w	r2, r3, #8
 8010f5e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f62:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f66:	f103 0008 	add.w	r0, r3, #8
 8010f6a:	e840 2100 	strex	r1, r2, [r0]
 8010f6e:	2900      	cmp	r1, #0
 8010f70:	d1f3      	bne.n	8010f5a <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f72:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8010f74:	2a01      	cmp	r2, #1
 8010f76:	d05e      	beq.n	8011036 <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 8010f78:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	d071      	beq.n	8011062 <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010f7e:	689a      	ldr	r2, [r3, #8]
 8010f80:	461c      	mov	r4, r3
 8010f82:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8010f86:	bf18      	it	ne
 8010f88:	4a3b      	ldrne	r2, [pc, #236]	; (8011078 <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 8010f8a:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8010f8c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8010f8e:	b129      	cbz	r1, 8010f9c <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f90:	689a      	ldr	r2, [r3, #8]
 8010f92:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8010f96:	bf18      	it	ne
 8010f98:	4a38      	ldrne	r2, [pc, #224]	; (801107c <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 8010f9a:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010f9c:	689a      	ldr	r2, [r3, #8]
 8010f9e:	0612      	lsls	r2, r2, #24
 8010fa0:	d430      	bmi.n	8011004 <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fa2:	689a      	ldr	r2, [r3, #8]
 8010fa4:	0656      	lsls	r6, r2, #25
 8010fa6:	d515      	bpl.n	8010fd4 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8010fa8:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010faa:	f103 0208 	add.w	r2, r3, #8
 8010fae:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fb6:	f103 0008 	add.w	r0, r3, #8
 8010fba:	e840 2600 	strex	r6, r2, [r0]
 8010fbe:	2e00      	cmp	r6, #0
 8010fc0:	d1f3      	bne.n	8010faa <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 8010fc2:	2900      	cmp	r1, #0
 8010fc4:	d04f      	beq.n	8011066 <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010fc6:	4608      	mov	r0, r1
 8010fc8:	f7f7 fdda 	bl	8008b80 <HAL_DMA_Abort_IT>
 8010fcc:	b1c0      	cbz	r0, 8011000 <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 8010fce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010fd0:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 8010fd2:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 8010fd4:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010fd6:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 8010fd8:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 8010fda:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 8010fdc:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 8010fe0:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 8010fe2:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 8010fe6:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010fe8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010fec:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010fee:	69a2      	ldr	r2, [r4, #24]
 8010ff0:	f042 0208 	orr.w	r2, r2, #8
 8010ff4:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 8010ff6:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 8010ff8:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ffa:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 8010ffc:	f7ff ffa0 	bl	8010f40 <HAL_UART_AbortCpltCallback>
}
 8011000:	2000      	movs	r0, #0
 8011002:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011004:	f103 0208 	add.w	r2, r3, #8
 8011008:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801100c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011010:	f103 0608 	add.w	r6, r3, #8
 8011014:	e846 2400 	strex	r4, r2, [r6]
 8011018:	2c00      	cmp	r4, #0
 801101a:	d1f3      	bne.n	8011004 <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 801101c:	b1e0      	cbz	r0, 8011058 <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801101e:	f7f7 fdaf 	bl	8008b80 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011022:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8011024:	b318      	cbz	r0, 801106e <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 8011026:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011028:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 801102a:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801102c:	461c      	mov	r4, r3
 801102e:	0651      	lsls	r1, r2, #25
 8011030:	d5d0      	bpl.n	8010fd4 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8011032:	2401      	movs	r4, #1
 8011034:	e01e      	b.n	8011074 <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011036:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801103a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801103e:	e843 2100 	strex	r1, r2, [r3]
 8011042:	2900      	cmp	r1, #0
 8011044:	d098      	beq.n	8010f78 <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011046:	e853 2f00 	ldrex	r2, [r3]
 801104a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801104e:	e843 2100 	strex	r1, r2, [r3]
 8011052:	2900      	cmp	r1, #0
 8011054:	d1ef      	bne.n	8011036 <HAL_UART_Abort_IT+0xf2>
 8011056:	e78f      	b.n	8010f78 <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011058:	689a      	ldr	r2, [r3, #8]
 801105a:	461c      	mov	r4, r3
 801105c:	0652      	lsls	r2, r2, #25
 801105e:	d5b9      	bpl.n	8010fd4 <HAL_UART_Abort_IT+0x90>
 8011060:	e7a2      	b.n	8010fa8 <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011062:	461c      	mov	r4, r3
 8011064:	e792      	b.n	8010f8c <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 8011066:	2c01      	cmp	r4, #1
 8011068:	d1ca      	bne.n	8011000 <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801106a:	461c      	mov	r4, r3
 801106c:	e7b2      	b.n	8010fd4 <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801106e:	689a      	ldr	r2, [r3, #8]
 8011070:	0650      	lsls	r0, r2, #25
 8011072:	d5c5      	bpl.n	8011000 <HAL_UART_Abort_IT+0xbc>
 8011074:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8011076:	e798      	b.n	8010faa <HAL_UART_Abort_IT+0x66>
 8011078:	080110c1 	.word	0x080110c1
 801107c:	08011081 	.word	0x08011081

08011080 <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011080:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 8011082:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011084:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 8011088:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 801108a:	b113      	cbz	r3, 8011092 <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 801108c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801108e:	b103      	cbz	r3, 8011092 <UART_DMARxAbortCallback+0x12>
 8011090:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011092:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011094:	6802      	ldr	r2, [r0, #0]
 8011096:	210f      	movs	r1, #15
{
 8011098:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 801109a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801109e:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 80110a0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110a4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80110a8:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80110aa:	6991      	ldr	r1, [r2, #24]
 80110ac:	f041 0108 	orr.w	r1, r1, #8
 80110b0:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 80110b2:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80110b4:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110b6:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80110b8:	f7ff ff42 	bl	8010f40 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80110bc:	bd10      	pop	{r4, pc}
 80110be:	bf00      	nop

080110c0 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80110c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 80110c2:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 80110c4:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 80110c8:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80110ca:	b113      	cbz	r3, 80110d2 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 80110cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110ce:	b103      	cbz	r3, 80110d2 <UART_DMATxAbortCallback+0x12>
 80110d0:	4770      	bx	lr
{
 80110d2:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 80110d4:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 80110d6:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80110d8:	6801      	ldr	r1, [r0, #0]
 80110da:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 80110dc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 80110e0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110e4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80110e8:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 80110ea:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80110ec:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110ee:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 80110f0:	f7ff ff26 	bl	8010f40 <HAL_UART_AbortCpltCallback>
}
 80110f4:	bd10      	pop	{r4, pc}
 80110f6:	bf00      	nop

080110f8 <HAL_UARTEx_RxEventCallback>:
}
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop

080110fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80110fc:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80110fe:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8011100:	2b22      	cmp	r3, #34	; 0x22
 8011102:	d005      	beq.n	8011110 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011104:	6802      	ldr	r2, [r0, #0]
 8011106:	6993      	ldr	r3, [r2, #24]
 8011108:	f043 0308 	orr.w	r3, r3, #8
 801110c:	6193      	str	r3, [r2, #24]
  }
}
 801110e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011110:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011112:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011118:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801111a:	400b      	ands	r3, r1
 801111c:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 801111e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8011122:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8011124:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 8011126:	3201      	adds	r2, #1
    huart->RxXferCount--;
 8011128:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 801112a:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 801112c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8011130:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8011134:	b29b      	uxth	r3, r3
 8011136:	2b00      	cmp	r3, #0
 8011138:	d1e9      	bne.n	801110e <UART_RxISR_8BIT+0x12>
 801113a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801113c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011140:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011144:	e843 2100 	strex	r1, r2, [r3]
 8011148:	2900      	cmp	r1, #0
 801114a:	d1f7      	bne.n	801113c <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801114c:	f103 0208 	add.w	r2, r3, #8
 8011150:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011154:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011158:	f103 0c08 	add.w	ip, r3, #8
 801115c:	e84c 2100 	strex	r1, r2, [ip]
 8011160:	2900      	cmp	r1, #0
 8011162:	d1f3      	bne.n	801114c <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 8011164:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8011166:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8011168:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801116a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801116c:	2a01      	cmp	r2, #1
 801116e:	d112      	bne.n	8011196 <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011170:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011172:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011176:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801117a:	e843 2100 	strex	r1, r2, [r3]
 801117e:	2900      	cmp	r1, #0
 8011180:	d1f7      	bne.n	8011172 <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011182:	69da      	ldr	r2, [r3, #28]
 8011184:	06d2      	lsls	r2, r2, #27
 8011186:	d501      	bpl.n	801118c <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011188:	2210      	movs	r2, #16
 801118a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801118c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8011190:	f7ff ffb2 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
}
 8011194:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8011196:	f7f3 f941 	bl	800441c <HAL_UART_RxCpltCallback>
}
 801119a:	bd08      	pop	{r3, pc}

0801119c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801119c:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801119e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80111a0:	2b22      	cmp	r3, #34	; 0x22
 80111a2:	d005      	beq.n	80111b0 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80111a4:	6802      	ldr	r2, [r0, #0]
 80111a6:	6993      	ldr	r3, [r2, #24]
 80111a8:	f043 0308 	orr.w	r3, r3, #8
 80111ac:	6193      	str	r3, [r2, #24]
  }
}
 80111ae:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80111b0:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 80111b2:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80111b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80111b8:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80111ba:	ea02 020c 	and.w	r2, r2, ip
 80111be:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80111c2:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 80111c6:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80111c8:	3a01      	subs	r2, #1
 80111ca:	b292      	uxth	r2, r2
 80111cc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80111d0:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80111d4:	b292      	uxth	r2, r2
 80111d6:	2a00      	cmp	r2, #0
 80111d8:	d1e9      	bne.n	80111ae <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111da:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80111de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111e2:	e843 2100 	strex	r1, r2, [r3]
 80111e6:	2900      	cmp	r1, #0
 80111e8:	d1f7      	bne.n	80111da <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ea:	f103 0208 	add.w	r2, r3, #8
 80111ee:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111f2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111f6:	f103 0c08 	add.w	ip, r3, #8
 80111fa:	e84c 2100 	strex	r1, r2, [ip]
 80111fe:	2900      	cmp	r1, #0
 8011200:	d1f3      	bne.n	80111ea <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 8011202:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8011204:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8011206:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011208:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801120a:	2a01      	cmp	r2, #1
 801120c:	d112      	bne.n	8011234 <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801120e:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011210:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011214:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011218:	e843 2100 	strex	r1, r2, [r3]
 801121c:	2900      	cmp	r1, #0
 801121e:	d1f7      	bne.n	8011210 <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011220:	69da      	ldr	r2, [r3, #28]
 8011222:	06d2      	lsls	r2, r2, #27
 8011224:	d501      	bpl.n	801122a <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011226:	2210      	movs	r2, #16
 8011228:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801122a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 801122e:	f7ff ff63 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
}
 8011232:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8011234:	f7f3 f8f2 	bl	800441c <HAL_UART_RxCpltCallback>
}
 8011238:	bd08      	pop	{r3, pc}
 801123a:	bf00      	nop

0801123c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801123c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801123e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011240:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011242:	2b01      	cmp	r3, #1
 8011244:	d002      	beq.n	801124c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8011246:	f7ff fe43 	bl	8010ed0 <HAL_UART_RxHalfCpltCallback>
}
 801124a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801124c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8011250:	0849      	lsrs	r1, r1, #1
 8011252:	f7ff ff51 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
}
 8011256:	bd08      	pop	{r3, pc}

08011258 <UART_DMAReceiveCplt>:
{
 8011258:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801125a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801125c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801125e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011262:	d028      	beq.n	80112b6 <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 8011264:	2200      	movs	r2, #0
 8011266:	6803      	ldr	r3, [r0, #0]
 8011268:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801126c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011274:	e843 2100 	strex	r1, r2, [r3]
 8011278:	2900      	cmp	r1, #0
 801127a:	d1f7      	bne.n	801126c <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801127c:	f103 0208 	add.w	r2, r3, #8
 8011280:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011284:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011288:	f103 0c08 	add.w	ip, r3, #8
 801128c:	e84c 2100 	strex	r1, r2, [ip]
 8011290:	2900      	cmp	r1, #0
 8011292:	d1f3      	bne.n	801127c <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011294:	f103 0208 	add.w	r2, r3, #8
 8011298:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801129c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112a0:	f103 0c08 	add.w	ip, r3, #8
 80112a4:	e84c 2100 	strex	r1, r2, [ip]
 80112a8:	2900      	cmp	r1, #0
 80112aa:	d1f3      	bne.n	8011294 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 80112ac:	2220      	movs	r2, #32
 80112ae:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80112b0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80112b2:	2a01      	cmp	r2, #1
 80112b4:	d005      	beq.n	80112c2 <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80112b6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	d013      	beq.n	80112e4 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80112bc:	f7f3 f8ae 	bl	800441c <HAL_UART_RxCpltCallback>
}
 80112c0:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112c2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112c6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112ca:	e843 2100 	strex	r1, r2, [r3]
 80112ce:	2900      	cmp	r1, #0
 80112d0:	d0f1      	beq.n	80112b6 <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112d2:	e853 2f00 	ldrex	r2, [r3]
 80112d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112da:	e843 2100 	strex	r1, r2, [r3]
 80112de:	2900      	cmp	r1, #0
 80112e0:	d1ef      	bne.n	80112c2 <UART_DMAReceiveCplt+0x6a>
 80112e2:	e7e8      	b.n	80112b6 <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80112e4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80112e8:	f7ff ff06 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
}
 80112ec:	bd08      	pop	{r3, pc}
 80112ee:	bf00      	nop

080112f0 <HAL_UARTEx_WakeupCallback>:
}
 80112f0:	4770      	bx	lr
 80112f2:	bf00      	nop

080112f4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80112f4:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80112f6:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80112fa:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80112fc:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 80112fe:	ea12 0f0c 	tst.w	r2, ip
{
 8011302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011306:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011308:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 801130a:	d17d      	bne.n	8011408 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801130c:	0697      	lsls	r7, r2, #26
 801130e:	d502      	bpl.n	8011316 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011310:	068e      	lsls	r6, r1, #26
 8011312:	f100 80f4 	bmi.w	80114fe <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011316:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8011318:	2801      	cmp	r0, #1
 801131a:	d024      	beq.n	8011366 <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801131c:	02d0      	lsls	r0, r2, #11
 801131e:	d502      	bpl.n	8011326 <HAL_UART_IRQHandler+0x32>
 8011320:	026f      	lsls	r7, r5, #9
 8011322:	f100 80f1 	bmi.w	8011508 <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011326:	0616      	lsls	r6, r2, #24
 8011328:	d414      	bmi.n	8011354 <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801132a:	0650      	lsls	r0, r2, #25
 801132c:	d501      	bpl.n	8011332 <HAL_UART_IRQHandler+0x3e>
 801132e:	064a      	lsls	r2, r1, #25
 8011330:	d401      	bmi.n	8011336 <HAL_UART_IRQHandler+0x42>
}
 8011332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011336:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801133a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801133e:	e843 2100 	strex	r1, r2, [r3]
 8011342:	2900      	cmp	r1, #0
 8011344:	d1f7      	bne.n	8011336 <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 8011346:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 8011348:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 801134a:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 801134c:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 801134e:	f7ef fe87 	bl	8001060 <HAL_UART_TxCpltCallback>
}
 8011352:	e7ee      	b.n	8011332 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011354:	060d      	lsls	r5, r1, #24
 8011356:	d5e8      	bpl.n	801132a <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 8011358:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801135a:	2b00      	cmp	r3, #0
 801135c:	d0e9      	beq.n	8011332 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 801135e:	4620      	mov	r0, r4
}
 8011360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8011364:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011366:	06d7      	lsls	r7, r2, #27
 8011368:	d5d8      	bpl.n	801131c <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801136a:	06ce      	lsls	r6, r1, #27
 801136c:	d5d6      	bpl.n	801131c <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801136e:	2210      	movs	r2, #16
 8011370:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011372:	689a      	ldr	r2, [r3, #8]
 8011374:	0655      	lsls	r5, r2, #25
 8011376:	f140 80d9 	bpl.w	801152c <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801137a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801137c:	6802      	ldr	r2, [r0, #0]
 801137e:	6852      	ldr	r2, [r2, #4]
 8011380:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8011382:	2a00      	cmp	r2, #0
 8011384:	d0d5      	beq.n	8011332 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011386:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 801138a:	4291      	cmp	r1, r2
 801138c:	d9d1      	bls.n	8011332 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 801138e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011392:	69c2      	ldr	r2, [r0, #28]
 8011394:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8011398:	d02e      	beq.n	80113f8 <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801139a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801139e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a2:	e843 2100 	strex	r1, r2, [r3]
 80113a6:	2900      	cmp	r1, #0
 80113a8:	d1f7      	bne.n	801139a <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113aa:	f103 0208 	add.w	r2, r3, #8
 80113ae:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113b2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113b6:	f103 0508 	add.w	r5, r3, #8
 80113ba:	e845 2100 	strex	r1, r2, [r5]
 80113be:	2900      	cmp	r1, #0
 80113c0:	d1f3      	bne.n	80113aa <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c2:	f103 0208 	add.w	r2, r3, #8
 80113c6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80113ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113ce:	f103 0508 	add.w	r5, r3, #8
 80113d2:	e845 2100 	strex	r1, r2, [r5]
 80113d6:	2900      	cmp	r1, #0
 80113d8:	d1f3      	bne.n	80113c2 <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 80113da:	2220      	movs	r2, #32
 80113dc:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113de:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113e0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113e4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e8:	e843 2100 	strex	r1, r2, [r3]
 80113ec:	2900      	cmp	r1, #0
 80113ee:	d1f7      	bne.n	80113e0 <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80113f0:	f7f7 fb7e 	bl	8008af0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80113f4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80113f8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80113fc:	4620      	mov	r0, r4
 80113fe:	1ac9      	subs	r1, r1, r3
 8011400:	b289      	uxth	r1, r1
 8011402:	f7ff fe79 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
 8011406:	e794      	b.n	8011332 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011408:	4864      	ldr	r0, [pc, #400]	; (801159c <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 801140a:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801140e:	4008      	ands	r0, r1
 8011410:	4330      	orrs	r0, r6
 8011412:	d080      	beq.n	8011316 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011414:	07d5      	lsls	r5, r2, #31
 8011416:	461f      	mov	r7, r3
 8011418:	d509      	bpl.n	801142e <HAL_UART_IRQHandler+0x13a>
 801141a:	05c8      	lsls	r0, r1, #23
 801141c:	d507      	bpl.n	801142e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801141e:	2001      	movs	r0, #1
 8011420:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011422:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8011426:	f040 0001 	orr.w	r0, r0, #1
 801142a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801142e:	0795      	lsls	r5, r2, #30
 8011430:	d560      	bpl.n	80114f4 <HAL_UART_IRQHandler+0x200>
 8011432:	b18e      	cbz	r6, 8011458 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011434:	2002      	movs	r0, #2
 8011436:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011438:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801143c:	f040 0004 	orr.w	r0, r0, #4
 8011440:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011444:	0750      	lsls	r0, r2, #29
 8011446:	d507      	bpl.n	8011458 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011448:	2004      	movs	r0, #4
 801144a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801144c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8011450:	f040 0002 	orr.w	r0, r0, #2
 8011454:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011458:	0710      	lsls	r0, r2, #28
 801145a:	d50b      	bpl.n	8011474 <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801145c:	f001 0020 	and.w	r0, r1, #32
 8011460:	4330      	orrs	r0, r6
 8011462:	d007      	beq.n	8011474 <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011464:	2008      	movs	r0, #8
 8011466:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011468:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801146c:	f040 0008 	orr.w	r0, r0, #8
 8011470:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011474:	0516      	lsls	r6, r2, #20
 8011476:	d50a      	bpl.n	801148e <HAL_UART_IRQHandler+0x19a>
 8011478:	014d      	lsls	r5, r1, #5
 801147a:	d508      	bpl.n	801148e <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801147c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011480:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011482:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8011486:	f043 0320 	orr.w	r3, r3, #32
 801148a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801148e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8011492:	2b00      	cmp	r3, #0
 8011494:	f43f af4d 	beq.w	8011332 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011498:	0690      	lsls	r0, r2, #26
 801149a:	d501      	bpl.n	80114a0 <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801149c:	0689      	lsls	r1, r1, #26
 801149e:	d43e      	bmi.n	801151e <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 80114a0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 80114a4:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80114a6:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80114a8:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80114ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114b0:	431d      	orrs	r5, r3
 80114b2:	d06e      	beq.n	8011592 <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 80114b4:	f7ff fb7e 	bl	8010bb4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114b8:	6823      	ldr	r3, [r4, #0]
 80114ba:	689a      	ldr	r2, [r3, #8]
 80114bc:	0652      	lsls	r2, r2, #25
 80114be:	d52a      	bpl.n	8011516 <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114c0:	f103 0208 	add.w	r2, r3, #8
 80114c4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80114c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114cc:	f103 0008 	add.w	r0, r3, #8
 80114d0:	e840 2100 	strex	r1, r2, [r0]
 80114d4:	2900      	cmp	r1, #0
 80114d6:	d1f3      	bne.n	80114c0 <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 80114d8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80114da:	b1e0      	cbz	r0, 8011516 <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80114dc:	4b30      	ldr	r3, [pc, #192]	; (80115a0 <HAL_UART_IRQHandler+0x2ac>)
 80114de:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80114e0:	f7f7 fb4e 	bl	8008b80 <HAL_DMA_Abort_IT>
 80114e4:	2800      	cmp	r0, #0
 80114e6:	f43f af24 	beq.w	8011332 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80114ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 80114ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80114f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80114f2:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80114f4:	0755      	lsls	r5, r2, #29
 80114f6:	d5af      	bpl.n	8011458 <HAL_UART_IRQHandler+0x164>
 80114f8:	2e00      	cmp	r6, #0
 80114fa:	d1a5      	bne.n	8011448 <HAL_UART_IRQHandler+0x154>
 80114fc:	e7ac      	b.n	8011458 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 80114fe:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8011500:	2b00      	cmp	r3, #0
 8011502:	f47f af2d 	bne.w	8011360 <HAL_UART_IRQHandler+0x6c>
 8011506:	e714      	b.n	8011332 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011508:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 801150c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801150e:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8011510:	f7ff feee 	bl	80112f0 <HAL_UARTEx_WakeupCallback>
    return;
 8011514:	e70d      	b.n	8011332 <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 8011516:	4620      	mov	r0, r4
 8011518:	f7f2 fff6 	bl	8004508 <HAL_UART_ErrorCallback>
 801151c:	e709      	b.n	8011332 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 801151e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011520:	2b00      	cmp	r3, #0
 8011522:	d0bd      	beq.n	80114a0 <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 8011524:	4620      	mov	r0, r4
 8011526:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011528:	6827      	ldr	r7, [r4, #0]
 801152a:	e7b9      	b.n	80114a0 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801152c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8011530:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8011534:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011538:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 801153a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801153c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 801153e:	2900      	cmp	r1, #0
 8011540:	f43f aef7 	beq.w	8011332 <HAL_UART_IRQHandler+0x3e>
 8011544:	2a00      	cmp	r2, #0
 8011546:	f43f aef4 	beq.w	8011332 <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801154a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801154e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011552:	e843 2000 	strex	r0, r2, [r3]
 8011556:	2800      	cmp	r0, #0
 8011558:	d1f7      	bne.n	801154a <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801155a:	f103 0208 	add.w	r2, r3, #8
 801155e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011562:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011566:	f103 0508 	add.w	r5, r3, #8
 801156a:	e845 2000 	strex	r0, r2, [r5]
 801156e:	2800      	cmp	r0, #0
 8011570:	d1f3      	bne.n	801155a <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 8011572:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8011574:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8011576:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011578:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801157a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801157e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011582:	e843 2000 	strex	r0, r2, [r3]
 8011586:	2800      	cmp	r0, #0
 8011588:	d1f7      	bne.n	801157a <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801158a:	4620      	mov	r0, r4
 801158c:	f7ff fdb4 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
 8011590:	e6cf      	b.n	8011332 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 8011592:	f7f2 ffb9 	bl	8004508 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011596:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 801159a:	e6ca      	b.n	8011332 <HAL_UART_IRQHandler+0x3e>
 801159c:	04000120 	.word	0x04000120
 80115a0:	08010f2d 	.word	0x08010f2d

080115a4 <UART_SetConfig>:
{
 80115a4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80115a6:	6842      	ldr	r2, [r0, #4]
{
 80115a8:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80115aa:	4bac      	ldr	r3, [pc, #688]	; (801185c <UART_SetConfig+0x2b8>)
 80115ac:	429a      	cmp	r2, r3
 80115ae:	f200 80bb 	bhi.w	8011728 <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80115b2:	68a3      	ldr	r3, [r4, #8]
 80115b4:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80115b8:	d002      	beq.n	80115c0 <UART_SetConfig+0x1c>
 80115ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80115be:	d179      	bne.n	80116b4 <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80115c0:	68e3      	ldr	r3, [r4, #12]
 80115c2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80115c6:	d17e      	bne.n	80116c6 <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80115c8:	6a23      	ldr	r3, [r4, #32]
 80115ca:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80115ce:	f040 8084 	bne.w	80116da <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80115d2:	6923      	ldr	r3, [r4, #16]
 80115d4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80115d8:	d002      	beq.n	80115e0 <UART_SetConfig+0x3c>
 80115da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80115de:	d163      	bne.n	80116a8 <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80115e0:	6963      	ldr	r3, [r4, #20]
 80115e2:	f033 020c 	bics.w	r2, r3, #12
 80115e6:	d146      	bne.n	8011676 <UART_SetConfig+0xd2>
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d044      	beq.n	8011676 <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80115ec:	69a3      	ldr	r3, [r4, #24]
 80115ee:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80115f2:	d149      	bne.n	8011688 <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80115f4:	69e0      	ldr	r0, [r4, #28]
 80115f6:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 80115fa:	d14e      	bne.n	801169a <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80115fc:	6921      	ldr	r1, [r4, #16]
 80115fe:	68a2      	ldr	r2, [r4, #8]
 8011600:	6823      	ldr	r3, [r4, #0]
 8011602:	430a      	orrs	r2, r1
 8011604:	6961      	ldr	r1, [r4, #20]
 8011606:	681d      	ldr	r5, [r3, #0]
 8011608:	430a      	orrs	r2, r1
 801160a:	4995      	ldr	r1, [pc, #596]	; (8011860 <UART_SetConfig+0x2bc>)
 801160c:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801160e:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011610:	430a      	orrs	r2, r1
 8011612:	4302      	orrs	r2, r0
 8011614:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011616:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011618:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801161a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 801161e:	4329      	orrs	r1, r5
 8011620:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8011622:	6a21      	ldr	r1, [r4, #32]
 8011624:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011626:	6899      	ldr	r1, [r3, #8]
 8011628:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 801162c:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 801162e:	498d      	ldr	r1, [pc, #564]	; (8011864 <UART_SetConfig+0x2c0>)
 8011630:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011632:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011634:	d07e      	beq.n	8011734 <UART_SetConfig+0x190>
 8011636:	4a8c      	ldr	r2, [pc, #560]	; (8011868 <UART_SetConfig+0x2c4>)
 8011638:	4293      	cmp	r3, r2
 801163a:	d054      	beq.n	80116e6 <UART_SetConfig+0x142>
 801163c:	4a8b      	ldr	r2, [pc, #556]	; (801186c <UART_SetConfig+0x2c8>)
 801163e:	4293      	cmp	r3, r2
 8011640:	f000 812a 	beq.w	8011898 <UART_SetConfig+0x2f4>
 8011644:	4a8a      	ldr	r2, [pc, #552]	; (8011870 <UART_SetConfig+0x2cc>)
 8011646:	4293      	cmp	r3, r2
 8011648:	f000 8137 	beq.w	80118ba <UART_SetConfig+0x316>
 801164c:	4a89      	ldr	r2, [pc, #548]	; (8011874 <UART_SetConfig+0x2d0>)
 801164e:	4293      	cmp	r3, r2
 8011650:	f000 809e 	beq.w	8011790 <UART_SetConfig+0x1ec>
 8011654:	4a88      	ldr	r2, [pc, #544]	; (8011878 <UART_SetConfig+0x2d4>)
 8011656:	4293      	cmp	r3, r2
 8011658:	f000 80d1 	beq.w	80117fe <UART_SetConfig+0x25a>
 801165c:	4a87      	ldr	r2, [pc, #540]	; (801187c <UART_SetConfig+0x2d8>)
 801165e:	4293      	cmp	r3, r2
 8011660:	f000 8151 	beq.w	8011906 <UART_SetConfig+0x362>
 8011664:	4a86      	ldr	r2, [pc, #536]	; (8011880 <UART_SetConfig+0x2dc>)
 8011666:	4293      	cmp	r3, r2
 8011668:	f000 8164 	beq.w	8011934 <UART_SetConfig+0x390>
    switch (clocksource)
 801166c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 801166e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8011670:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8011674:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8011676:	f640 3176 	movw	r1, #2934	; 0xb76
 801167a:	4882      	ldr	r0, [pc, #520]	; (8011884 <UART_SetConfig+0x2e0>)
 801167c:	f7f2 fc66 	bl	8003f4c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8011680:	69a3      	ldr	r3, [r4, #24]
 8011682:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8011686:	d0b5      	beq.n	80115f4 <UART_SetConfig+0x50>
 8011688:	487e      	ldr	r0, [pc, #504]	; (8011884 <UART_SetConfig+0x2e0>)
 801168a:	f640 3177 	movw	r1, #2935	; 0xb77
 801168e:	f7f2 fc5d 	bl	8003f4c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8011692:	69e0      	ldr	r0, [r4, #28]
 8011694:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8011698:	d0b0      	beq.n	80115fc <UART_SetConfig+0x58>
 801169a:	487a      	ldr	r0, [pc, #488]	; (8011884 <UART_SetConfig+0x2e0>)
 801169c:	f640 3178 	movw	r1, #2936	; 0xb78
 80116a0:	f7f2 fc54 	bl	8003f4c <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80116a4:	69e0      	ldr	r0, [r4, #28]
 80116a6:	e7a9      	b.n	80115fc <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80116a8:	f640 3175 	movw	r1, #2933	; 0xb75
 80116ac:	4875      	ldr	r0, [pc, #468]	; (8011884 <UART_SetConfig+0x2e0>)
 80116ae:	f7f2 fc4d 	bl	8003f4c <assert_failed>
 80116b2:	e795      	b.n	80115e0 <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80116b4:	f640 3171 	movw	r1, #2929	; 0xb71
 80116b8:	4872      	ldr	r0, [pc, #456]	; (8011884 <UART_SetConfig+0x2e0>)
 80116ba:	f7f2 fc47 	bl	8003f4c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80116be:	68e3      	ldr	r3, [r4, #12]
 80116c0:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80116c4:	d080      	beq.n	80115c8 <UART_SetConfig+0x24>
 80116c6:	f640 3172 	movw	r1, #2930	; 0xb72
 80116ca:	486e      	ldr	r0, [pc, #440]	; (8011884 <UART_SetConfig+0x2e0>)
 80116cc:	f7f2 fc3e 	bl	8003f4c <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80116d0:	6a23      	ldr	r3, [r4, #32]
 80116d2:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80116d6:	f43f af7c 	beq.w	80115d2 <UART_SetConfig+0x2e>
 80116da:	f640 3173 	movw	r1, #2931	; 0xb73
 80116de:	4869      	ldr	r0, [pc, #420]	; (8011884 <UART_SetConfig+0x2e0>)
 80116e0:	f7f2 fc34 	bl	8003f4c <assert_failed>
 80116e4:	e775      	b.n	80115d2 <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80116e6:	4b68      	ldr	r3, [pc, #416]	; (8011888 <UART_SetConfig+0x2e4>)
 80116e8:	4a68      	ldr	r2, [pc, #416]	; (801188c <UART_SetConfig+0x2e8>)
 80116ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116ee:	f003 030c 	and.w	r3, r3, #12
 80116f2:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80116f8:	d033      	beq.n	8011762 <UART_SetConfig+0x1be>
    switch (clocksource)
 80116fa:	2b08      	cmp	r3, #8
 80116fc:	d8b6      	bhi.n	801166c <UART_SetConfig+0xc8>
 80116fe:	a201      	add	r2, pc, #4	; (adr r2, 8011704 <UART_SetConfig+0x160>)
 8011700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011704:	080117bf 	.word	0x080117bf
 8011708:	0801174b 	.word	0x0801174b
 801170c:	08011815 	.word	0x08011815
 8011710:	0801166d 	.word	0x0801166d
 8011714:	080117b3 	.word	0x080117b3
 8011718:	0801166d 	.word	0x0801166d
 801171c:	0801166d 	.word	0x0801166d
 8011720:	0801166d 	.word	0x0801166d
 8011724:	080117d5 	.word	0x080117d5
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8011728:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 801172c:	4855      	ldr	r0, [pc, #340]	; (8011884 <UART_SetConfig+0x2e0>)
 801172e:	f7f2 fc0d 	bl	8003f4c <assert_failed>
 8011732:	e73e      	b.n	80115b2 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011734:	4b54      	ldr	r3, [pc, #336]	; (8011888 <UART_SetConfig+0x2e4>)
 8011736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801173a:	f003 0303 	and.w	r3, r3, #3
 801173e:	3b01      	subs	r3, #1
 8011740:	2b02      	cmp	r3, #2
 8011742:	d90b      	bls.n	801175c <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011744:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8011748:	d066      	beq.n	8011818 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 801174a:	f7fb f9d5 	bl	800caf8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801174e:	2800      	cmp	r0, #0
 8011750:	d142      	bne.n	80117d8 <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 8011752:	2300      	movs	r3, #0
 8011754:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 8011756:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 801175a:	bd38      	pop	{r3, r4, r5, pc}
 801175c:	4a4c      	ldr	r2, [pc, #304]	; (8011890 <UART_SetConfig+0x2ec>)
 801175e:	5cd3      	ldrb	r3, [r2, r3]
 8011760:	e7c8      	b.n	80116f4 <UART_SetConfig+0x150>
    switch (clocksource)
 8011762:	2b08      	cmp	r3, #8
 8011764:	d882      	bhi.n	801166c <UART_SetConfig+0xc8>
 8011766:	a201      	add	r2, pc, #4	; (adr r2, 801176c <UART_SetConfig+0x1c8>)
 8011768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801176c:	08011855 	.word	0x08011855
 8011770:	08011819 	.word	0x08011819
 8011774:	080118fd 	.word	0x080118fd
 8011778:	0801166d 	.word	0x0801166d
 801177c:	0801184f 	.word	0x0801184f
 8011780:	0801166d 	.word	0x0801166d
 8011784:	0801166d 	.word	0x0801166d
 8011788:	0801166d 	.word	0x0801166d
 801178c:	08011901 	.word	0x08011901
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011790:	4b3d      	ldr	r3, [pc, #244]	; (8011888 <UART_SetConfig+0x2e4>)
 8011792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801179a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801179e:	d036      	beq.n	801180e <UART_SetConfig+0x26a>
 80117a0:	d810      	bhi.n	80117c4 <UART_SetConfig+0x220>
 80117a2:	b14b      	cbz	r3, 80117b8 <UART_SetConfig+0x214>
 80117a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117a8:	f47f af60 	bne.w	801166c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80117ac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80117b0:	d04d      	beq.n	801184e <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 80117b2:	f7fb f839 	bl	800c828 <HAL_RCC_GetSysClockFreq>
        break;
 80117b6:	e7ca      	b.n	801174e <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80117b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80117bc:	d04a      	beq.n	8011854 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80117be:	f7fb f98b 	bl	800cad8 <HAL_RCC_GetPCLK1Freq>
        break;
 80117c2:	e7c4      	b.n	801174e <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80117c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80117c8:	f47f af50 	bne.w	801166c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80117cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80117d0:	f000 8096 	beq.w	8011900 <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 80117d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80117d8:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117da:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80117de:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80117e2:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117e6:	f1a3 0110 	sub.w	r1, r3, #16
 80117ea:	4291      	cmp	r1, r2
 80117ec:	f63f af3e 	bhi.w	801166c <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80117f0:	6822      	ldr	r2, [r4, #0]
 80117f2:	2000      	movs	r0, #0
 80117f4:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80117f6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80117f8:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80117fc:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80117fe:	4b22      	ldr	r3, [pc, #136]	; (8011888 <UART_SetConfig+0x2e4>)
 8011800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011804:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801180c:	d168      	bne.n	80118e0 <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801180e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8011812:	d073      	beq.n	80118fc <UART_SetConfig+0x358>
    switch (clocksource)
 8011814:	481f      	ldr	r0, [pc, #124]	; (8011894 <UART_SetConfig+0x2f0>)
 8011816:	e7df      	b.n	80117d8 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 8011818:	f7fb f96e 	bl	800caf8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801181c:	2800      	cmp	r0, #0
 801181e:	d098      	beq.n	8011752 <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011820:	0043      	lsls	r3, r0, #1
 8011822:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011824:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011828:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801182c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011830:	f1a3 0210 	sub.w	r2, r3, #16
 8011834:	428a      	cmp	r2, r1
 8011836:	f63f af19 	bhi.w	801166c <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801183a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801183e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8011842:	6821      	ldr	r1, [r4, #0]
 8011844:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011846:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8011848:	4313      	orrs	r3, r2
 801184a:	60cb      	str	r3, [r1, #12]
 801184c:	e70f      	b.n	801166e <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 801184e:	f7fa ffeb 	bl	800c828 <HAL_RCC_GetSysClockFreq>
        break;
 8011852:	e7e3      	b.n	801181c <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8011854:	f7fb f940 	bl	800cad8 <HAL_RCC_GetPCLK1Freq>
        break;
 8011858:	e7e0      	b.n	801181c <UART_SetConfig+0x278>
 801185a:	bf00      	nop
 801185c:	019bfcc0 	.word	0x019bfcc0
 8011860:	efff69f3 	.word	0xefff69f3
 8011864:	40011000 	.word	0x40011000
 8011868:	40004400 	.word	0x40004400
 801186c:	40004800 	.word	0x40004800
 8011870:	40004c00 	.word	0x40004c00
 8011874:	40005000 	.word	0x40005000
 8011878:	40011400 	.word	0x40011400
 801187c:	40007800 	.word	0x40007800
 8011880:	40007c00 	.word	0x40007c00
 8011884:	0802b230 	.word	0x0802b230
 8011888:	40023800 	.word	0x40023800
 801188c:	0802b270 	.word	0x0802b270
 8011890:	0802b26c 	.word	0x0802b26c
 8011894:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011898:	4b32      	ldr	r3, [pc, #200]	; (8011964 <UART_SetConfig+0x3c0>)
 801189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801189e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80118a2:	2b20      	cmp	r3, #32
 80118a4:	d0b3      	beq.n	801180e <UART_SetConfig+0x26a>
 80118a6:	d805      	bhi.n	80118b4 <UART_SetConfig+0x310>
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d085      	beq.n	80117b8 <UART_SetConfig+0x214>
 80118ac:	2b10      	cmp	r3, #16
 80118ae:	f43f af7d 	beq.w	80117ac <UART_SetConfig+0x208>
 80118b2:	e6db      	b.n	801166c <UART_SetConfig+0xc8>
 80118b4:	2b30      	cmp	r3, #48	; 0x30
 80118b6:	d089      	beq.n	80117cc <UART_SetConfig+0x228>
 80118b8:	e6d8      	b.n	801166c <UART_SetConfig+0xc8>
 80118ba:	4b2a      	ldr	r3, [pc, #168]	; (8011964 <UART_SetConfig+0x3c0>)
 80118bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80118c4:	2b80      	cmp	r3, #128	; 0x80
 80118c6:	d0a2      	beq.n	801180e <UART_SetConfig+0x26a>
 80118c8:	d806      	bhi.n	80118d8 <UART_SetConfig+0x334>
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f43f af74 	beq.w	80117b8 <UART_SetConfig+0x214>
 80118d0:	2b40      	cmp	r3, #64	; 0x40
 80118d2:	f43f af6b 	beq.w	80117ac <UART_SetConfig+0x208>
 80118d6:	e6c9      	b.n	801166c <UART_SetConfig+0xc8>
 80118d8:	2bc0      	cmp	r3, #192	; 0xc0
 80118da:	f43f af77 	beq.w	80117cc <UART_SetConfig+0x228>
 80118de:	e6c5      	b.n	801166c <UART_SetConfig+0xc8>
 80118e0:	d807      	bhi.n	80118f2 <UART_SetConfig+0x34e>
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f43f af2e 	beq.w	8011744 <UART_SetConfig+0x1a0>
 80118e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80118ec:	f43f af5e 	beq.w	80117ac <UART_SetConfig+0x208>
 80118f0:	e6bc      	b.n	801166c <UART_SetConfig+0xc8>
 80118f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80118f6:	f43f af69 	beq.w	80117cc <UART_SetConfig+0x228>
 80118fa:	e6b7      	b.n	801166c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80118fc:	4b1a      	ldr	r3, [pc, #104]	; (8011968 <UART_SetConfig+0x3c4>)
 80118fe:	e790      	b.n	8011822 <UART_SetConfig+0x27e>
    switch (clocksource)
 8011900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011904:	e78d      	b.n	8011822 <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011906:	4b17      	ldr	r3, [pc, #92]	; (8011964 <UART_SetConfig+0x3c0>)
 8011908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801190c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011914:	f43f af7b 	beq.w	801180e <UART_SetConfig+0x26a>
 8011918:	d807      	bhi.n	801192a <UART_SetConfig+0x386>
 801191a:	2b00      	cmp	r3, #0
 801191c:	f43f af4c 	beq.w	80117b8 <UART_SetConfig+0x214>
 8011920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011924:	f43f af42 	beq.w	80117ac <UART_SetConfig+0x208>
 8011928:	e6a0      	b.n	801166c <UART_SetConfig+0xc8>
 801192a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801192e:	f43f af4d 	beq.w	80117cc <UART_SetConfig+0x228>
 8011932:	e69b      	b.n	801166c <UART_SetConfig+0xc8>
 8011934:	4b0b      	ldr	r3, [pc, #44]	; (8011964 <UART_SetConfig+0x3c0>)
 8011936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801193a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801193e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011942:	f43f af64 	beq.w	801180e <UART_SetConfig+0x26a>
 8011946:	d807      	bhi.n	8011958 <UART_SetConfig+0x3b4>
 8011948:	2b00      	cmp	r3, #0
 801194a:	f43f af35 	beq.w	80117b8 <UART_SetConfig+0x214>
 801194e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011952:	f43f af2b 	beq.w	80117ac <UART_SetConfig+0x208>
 8011956:	e689      	b.n	801166c <UART_SetConfig+0xc8>
 8011958:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801195c:	f43f af36 	beq.w	80117cc <UART_SetConfig+0x228>
 8011960:	e684      	b.n	801166c <UART_SetConfig+0xc8>
 8011962:	bf00      	nop
 8011964:	40023800 	.word	0x40023800
 8011968:	01e84800 	.word	0x01e84800

0801196c <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 801196c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801196e:	2bff      	cmp	r3, #255	; 0xff
{
 8011970:	b510      	push	{r4, lr}
 8011972:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8011974:	d87b      	bhi.n	8011a6e <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011976:	07da      	lsls	r2, r3, #31
 8011978:	d50a      	bpl.n	8011990 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 801197a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801197c:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8011980:	f040 808e 	bne.w	8011aa0 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011984:	6820      	ldr	r0, [r4, #0]
 8011986:	6842      	ldr	r2, [r0, #4]
 8011988:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801198c:	430a      	orrs	r2, r1
 801198e:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011990:	0798      	lsls	r0, r3, #30
 8011992:	d50a      	bpl.n	80119aa <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8011994:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011996:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 801199a:	f040 8089 	bne.w	8011ab0 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801199e:	6820      	ldr	r0, [r4, #0]
 80119a0:	6842      	ldr	r2, [r0, #4]
 80119a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80119a6:	430a      	orrs	r2, r1
 80119a8:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80119aa:	0759      	lsls	r1, r3, #29
 80119ac:	d50a      	bpl.n	80119c4 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80119ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80119b0:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 80119b4:	f040 8084 	bne.w	8011ac0 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80119b8:	6820      	ldr	r0, [r4, #0]
 80119ba:	6842      	ldr	r2, [r0, #4]
 80119bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80119c0:	430a      	orrs	r2, r1
 80119c2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80119c4:	071a      	lsls	r2, r3, #28
 80119c6:	d509      	bpl.n	80119dc <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80119c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119ca:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 80119ce:	d17f      	bne.n	8011ad0 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80119d0:	6820      	ldr	r0, [r4, #0]
 80119d2:	6842      	ldr	r2, [r0, #4]
 80119d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80119d8:	430a      	orrs	r2, r1
 80119da:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80119dc:	06d8      	lsls	r0, r3, #27
 80119de:	d509      	bpl.n	80119f4 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80119e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80119e2:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 80119e6:	d17b      	bne.n	8011ae0 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80119e8:	6820      	ldr	r0, [r4, #0]
 80119ea:	6882      	ldr	r2, [r0, #8]
 80119ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80119f0:	430a      	orrs	r2, r1
 80119f2:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80119f4:	0699      	lsls	r1, r3, #26
 80119f6:	d509      	bpl.n	8011a0c <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80119f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80119fa:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 80119fe:	d177      	bne.n	8011af0 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011a00:	6820      	ldr	r0, [r4, #0]
 8011a02:	6882      	ldr	r2, [r0, #8]
 8011a04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011a08:	430a      	orrs	r2, r1
 8011a0a:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a0c:	065a      	lsls	r2, r3, #25
 8011a0e:	d521      	bpl.n	8011a54 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8011a10:	4b46      	ldr	r3, [pc, #280]	; (8011b2c <UART_AdvFeatureConfig+0x1c0>)
 8011a12:	6822      	ldr	r2, [r4, #0]
 8011a14:	4846      	ldr	r0, [pc, #280]	; (8011b30 <UART_AdvFeatureConfig+0x1c4>)
 8011a16:	4947      	ldr	r1, [pc, #284]	; (8011b34 <UART_AdvFeatureConfig+0x1c8>)
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	bf18      	it	ne
 8011a1c:	4282      	cmpne	r2, r0
 8011a1e:	bf14      	ite	ne
 8011a20:	2301      	movne	r3, #1
 8011a22:	2300      	moveq	r3, #0
 8011a24:	428a      	cmp	r2, r1
 8011a26:	bf0c      	ite	eq
 8011a28:	2300      	moveq	r3, #0
 8011a2a:	f003 0301 	andne.w	r3, r3, #1
 8011a2e:	b113      	cbz	r3, 8011a36 <UART_AdvFeatureConfig+0xca>
 8011a30:	4b41      	ldr	r3, [pc, #260]	; (8011b38 <UART_AdvFeatureConfig+0x1cc>)
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d16b      	bne.n	8011b0e <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8011a36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8011a38:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8011a3c:	d160      	bne.n	8011b00 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a3e:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a40:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a44:	684b      	ldr	r3, [r1, #4]
 8011a46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011a4a:	ea43 0302 	orr.w	r3, r3, r2
 8011a4e:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a50:	d014      	beq.n	8011a7c <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a54:	061b      	lsls	r3, r3, #24
 8011a56:	d509      	bpl.n	8011a6c <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8011a58:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8011a5a:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8011a5e:	d118      	bne.n	8011a92 <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a60:	6821      	ldr	r1, [r4, #0]
 8011a62:	684b      	ldr	r3, [r1, #4]
 8011a64:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	604b      	str	r3, [r1, #4]
}
 8011a6c:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8011a6e:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8011a72:	4832      	ldr	r0, [pc, #200]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011a74:	f7f2 fa6a 	bl	8003f4c <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a7a:	e77c      	b.n	8011976 <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8011a7c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011a7e:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8011a82:	d14a      	bne.n	8011b1a <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a84:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a88:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8011a8c:	4302      	orrs	r2, r0
 8011a8e:	604a      	str	r2, [r1, #4]
 8011a90:	e7e0      	b.n	8011a54 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8011a92:	f640 4136 	movw	r1, #3126	; 0xc36
 8011a96:	4829      	ldr	r0, [pc, #164]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011a98:	f7f2 fa58 	bl	8003f4c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8011a9e:	e7df      	b.n	8011a60 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8011aa0:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8011aa4:	4825      	ldr	r0, [pc, #148]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011aa6:	f7f2 fa51 	bl	8003f4c <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011aaa:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8011aae:	e769      	b.n	8011984 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8011ab0:	f640 4105 	movw	r1, #3077	; 0xc05
 8011ab4:	4821      	ldr	r0, [pc, #132]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011ab6:	f7f2 fa49 	bl	8003f4c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011aba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011abe:	e76e      	b.n	801199e <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8011ac0:	f640 410c 	movw	r1, #3084	; 0xc0c
 8011ac4:	481d      	ldr	r0, [pc, #116]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011ac6:	f7f2 fa41 	bl	8003f4c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011aca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ace:	e773      	b.n	80119b8 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8011ad0:	f640 4113 	movw	r1, #3091	; 0xc13
 8011ad4:	4819      	ldr	r0, [pc, #100]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011ad6:	f7f2 fa39 	bl	8003f4c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011adc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ade:	e777      	b.n	80119d0 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8011ae0:	f640 411a 	movw	r1, #3098	; 0xc1a
 8011ae4:	4815      	ldr	r0, [pc, #84]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011ae6:	f7f2 fa31 	bl	8003f4c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011aea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011aee:	e77b      	b.n	80119e8 <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8011af0:	f640 4121 	movw	r1, #3105	; 0xc21
 8011af4:	4811      	ldr	r0, [pc, #68]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011af6:	f7f2 fa29 	bl	8003f4c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011afa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011afe:	e77f      	b.n	8011a00 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8011b00:	f640 4129 	movw	r1, #3113	; 0xc29
 8011b04:	480d      	ldr	r0, [pc, #52]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011b06:	f7f2 fa21 	bl	8003f4c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011b0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8011b0c:	e797      	b.n	8011a3e <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8011b0e:	f640 4128 	movw	r1, #3112	; 0xc28
 8011b12:	480a      	ldr	r0, [pc, #40]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011b14:	f7f2 fa1a 	bl	8003f4c <assert_failed>
 8011b18:	e78d      	b.n	8011a36 <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8011b1a:	f640 412e 	movw	r1, #3118	; 0xc2e
 8011b1e:	4807      	ldr	r0, [pc, #28]	; (8011b3c <UART_AdvFeatureConfig+0x1d0>)
 8011b20:	f7f2 fa14 	bl	8003f4c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011b24:	6821      	ldr	r1, [r4, #0]
 8011b26:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011b28:	e7ac      	b.n	8011a84 <UART_AdvFeatureConfig+0x118>
 8011b2a:	bf00      	nop
 8011b2c:	40011000 	.word	0x40011000
 8011b30:	40004400 	.word	0x40004400
 8011b34:	40004800 	.word	0x40004800
 8011b38:	40011400 	.word	0x40011400
 8011b3c:	0802b230 	.word	0x0802b230

08011b40 <UART_WaitOnFlagUntilTimeout>:
{
 8011b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b48:	4681      	mov	r9, r0
 8011b4a:	460f      	mov	r7, r1
 8011b4c:	4616      	mov	r6, r2
 8011b4e:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b50:	6805      	ldr	r5, [r0, #0]
 8011b52:	e002      	b.n	8011b5a <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8011b54:	f1b8 3fff 	cmp.w	r8, #4294967295
 8011b58:	d10c      	bne.n	8011b74 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b5a:	69ec      	ldr	r4, [r5, #28]
 8011b5c:	ea37 0304 	bics.w	r3, r7, r4
 8011b60:	bf0c      	ite	eq
 8011b62:	f04f 0c01 	moveq.w	ip, #1
 8011b66:	f04f 0c00 	movne.w	ip, #0
 8011b6a:	45b4      	cmp	ip, r6
 8011b6c:	d0f2      	beq.n	8011b54 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8011b6e:	2000      	movs	r0, #0
}
 8011b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b74:	f7f5 fd96 	bl	80076a4 <HAL_GetTick>
 8011b78:	eba0 000a 	sub.w	r0, r0, sl
 8011b7c:	4540      	cmp	r0, r8
 8011b7e:	d82d      	bhi.n	8011bdc <UART_WaitOnFlagUntilTimeout+0x9c>
 8011b80:	f1b8 0f00 	cmp.w	r8, #0
 8011b84:	d02a      	beq.n	8011bdc <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011b86:	f8d9 5000 	ldr.w	r5, [r9]
 8011b8a:	682b      	ldr	r3, [r5, #0]
 8011b8c:	462a      	mov	r2, r5
 8011b8e:	0759      	lsls	r1, r3, #29
 8011b90:	d5e3      	bpl.n	8011b5a <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011b92:	69eb      	ldr	r3, [r5, #28]
 8011b94:	051b      	lsls	r3, r3, #20
 8011b96:	d5e0      	bpl.n	8011b5a <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011b9c:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9e:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011ba2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba6:	e842 3100 	strex	r1, r3, [r2]
 8011baa:	2900      	cmp	r1, #0
 8011bac:	d1f7      	bne.n	8011b9e <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bae:	f102 0308 	add.w	r3, r2, #8
 8011bb2:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bb6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bba:	f102 0008 	add.w	r0, r2, #8
 8011bbe:	e840 3100 	strex	r1, r3, [r0]
 8011bc2:	2900      	cmp	r1, #0
 8011bc4:	d1f3      	bne.n	8011bae <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 8011bc6:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8011bc8:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8011bca:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8011bce:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8011bd2:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011bd6:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8011bda:	e7c9      	b.n	8011b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8011bdc:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be0:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011be8:	e842 3100 	strex	r1, r3, [r2]
 8011bec:	2900      	cmp	r1, #0
 8011bee:	d1f7      	bne.n	8011be0 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf0:	f102 0308 	add.w	r3, r2, #8
 8011bf4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bf8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bfc:	f102 0008 	add.w	r0, r2, #8
 8011c00:	e840 3100 	strex	r1, r3, [r0]
 8011c04:	2900      	cmp	r1, #0
 8011c06:	d1f3      	bne.n	8011bf0 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8011c08:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8011c0a:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8011c0c:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8011c10:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8011c14:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8011c18:	e7aa      	b.n	8011b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8011c1a:	bf00      	nop

08011c1c <HAL_UART_Transmit>:
{
 8011c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c20:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8011c22:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8011c24:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8011c26:	2b20      	cmp	r3, #32
 8011c28:	d14b      	bne.n	8011cc2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8011c2a:	460d      	mov	r5, r1
 8011c2c:	2900      	cmp	r1, #0
 8011c2e:	d044      	beq.n	8011cba <HAL_UART_Transmit+0x9e>
 8011c30:	fab2 f982 	clz	r9, r2
 8011c34:	4617      	mov	r7, r2
 8011c36:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8011c3a:	2a00      	cmp	r2, #0
 8011c3c:	d03d      	beq.n	8011cba <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 8011c3e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8011c42:	4604      	mov	r4, r0
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d03c      	beq.n	8011cc2 <HAL_UART_Transmit+0xa6>
 8011c48:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c4a:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8011c4e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011c52:	2321      	movs	r3, #33	; 0x21
 8011c54:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8011c56:	f7f5 fd25 	bl	80076a4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c5a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8011c5c:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8011c5e:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8011c66:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c6a:	d040      	beq.n	8011cee <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 8011c6c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8011c70:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8011c72:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8011c74:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8011c78:	b973      	cbnz	r3, 8011c98 <HAL_UART_Transmit+0x7c>
 8011c7a:	e02a      	b.n	8011cd2 <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011c7c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8011c80:	6823      	ldr	r3, [r4, #0]
 8011c82:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8011c84:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8011c88:	3a01      	subs	r2, #1
 8011c8a:	b292      	uxth	r2, r2
 8011c8c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011c90:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8011c94:	b292      	uxth	r2, r2
 8011c96:	b1e2      	cbz	r2, 8011cd2 <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011c98:	4643      	mov	r3, r8
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	2180      	movs	r1, #128	; 0x80
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	9600      	str	r6, [sp, #0]
 8011ca2:	f7ff ff4d 	bl	8011b40 <UART_WaitOnFlagUntilTimeout>
 8011ca6:	b980      	cbnz	r0, 8011cca <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 8011ca8:	2d00      	cmp	r5, #0
 8011caa:	d1e7      	bne.n	8011c7c <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011cac:	f839 3b02 	ldrh.w	r3, [r9], #2
 8011cb0:	6822      	ldr	r2, [r4, #0]
 8011cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cb6:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8011cb8:	e7e4      	b.n	8011c84 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 8011cba:	2001      	movs	r0, #1
}
 8011cbc:	b003      	add	sp, #12
 8011cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8011cc2:	2002      	movs	r0, #2
}
 8011cc4:	b003      	add	sp, #12
 8011cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8011cca:	2003      	movs	r0, #3
}
 8011ccc:	b003      	add	sp, #12
 8011cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011cd2:	4643      	mov	r3, r8
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	2140      	movs	r1, #64	; 0x40
 8011cd8:	4620      	mov	r0, r4
 8011cda:	9600      	str	r6, [sp, #0]
 8011cdc:	f7ff ff30 	bl	8011b40 <UART_WaitOnFlagUntilTimeout>
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	d1f2      	bne.n	8011cca <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8011ce4:	2320      	movs	r3, #32
 8011ce6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8011ce8:	b003      	add	sp, #12
 8011cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011cee:	6923      	ldr	r3, [r4, #16]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d1bb      	bne.n	8011c6c <HAL_UART_Transmit+0x50>
 8011cf4:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8011cf6:	461d      	mov	r5, r3
 8011cf8:	e7b8      	b.n	8011c6c <HAL_UART_Transmit+0x50>
 8011cfa:	bf00      	nop

08011cfc <UART_CheckIdleState>:
{
 8011cfc:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cfe:	2600      	movs	r6, #0
{
 8011d00:	4604      	mov	r4, r0
 8011d02:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d04:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8011d08:	f7f5 fccc 	bl	80076a4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d0c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8011d0e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	0712      	lsls	r2, r2, #28
 8011d14:	d40c      	bmi.n	8011d30 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	075b      	lsls	r3, r3, #29
 8011d1a:	d418      	bmi.n	8011d4e <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d1c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8011d1e:	2220      	movs	r2, #32
  return HAL_OK;
 8011d20:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8011d22:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8011d24:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8011d28:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d2a:	6623      	str	r3, [r4, #96]	; 0x60
}
 8011d2c:	b002      	add	sp, #8
 8011d2e:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d30:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8011d34:	4603      	mov	r3, r0
 8011d36:	4632      	mov	r2, r6
 8011d38:	4620      	mov	r0, r4
 8011d3a:	9100      	str	r1, [sp, #0]
 8011d3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011d40:	f7ff fefe 	bl	8011b40 <UART_WaitOnFlagUntilTimeout>
 8011d44:	b978      	cbnz	r0, 8011d66 <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	075b      	lsls	r3, r3, #29
 8011d4c:	d5e6      	bpl.n	8011d1c <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d4e:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8011d52:	462b      	mov	r3, r5
 8011d54:	2200      	movs	r2, #0
 8011d56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011d5a:	9000      	str	r0, [sp, #0]
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	f7ff feef 	bl	8011b40 <UART_WaitOnFlagUntilTimeout>
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d0da      	beq.n	8011d1c <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8011d66:	2003      	movs	r0, #3
}
 8011d68:	b002      	add	sp, #8
 8011d6a:	bd70      	pop	{r4, r5, r6, pc}

08011d6c <HAL_UART_Init>:
  if (huart == NULL)
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	f000 8099 	beq.w	8011ea4 <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8011d72:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8011d74:	6802      	ldr	r2, [r0, #0]
{
 8011d76:	b510      	push	{r4, lr}
 8011d78:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d051      	beq.n	8011e22 <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8011d7e:	4b4d      	ldr	r3, [pc, #308]	; (8011eb4 <HAL_UART_Init+0x148>)
 8011d80:	484d      	ldr	r0, [pc, #308]	; (8011eb8 <HAL_UART_Init+0x14c>)
 8011d82:	494e      	ldr	r1, [pc, #312]	; (8011ebc <HAL_UART_Init+0x150>)
 8011d84:	429a      	cmp	r2, r3
 8011d86:	bf18      	it	ne
 8011d88:	4282      	cmpne	r2, r0
 8011d8a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011d8e:	bf14      	ite	ne
 8011d90:	2301      	movne	r3, #1
 8011d92:	2300      	moveq	r3, #0
 8011d94:	428a      	cmp	r2, r1
 8011d96:	bf0c      	ite	eq
 8011d98:	2300      	moveq	r3, #0
 8011d9a:	f003 0301 	andne.w	r3, r3, #1
 8011d9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011da2:	4282      	cmp	r2, r0
 8011da4:	bf0c      	ite	eq
 8011da6:	2300      	moveq	r3, #0
 8011da8:	f003 0301 	andne.w	r3, r3, #1
 8011dac:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8011db0:	428a      	cmp	r2, r1
 8011db2:	bf0c      	ite	eq
 8011db4:	2300      	moveq	r3, #0
 8011db6:	f003 0301 	andne.w	r3, r3, #1
 8011dba:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8011dbe:	4282      	cmp	r2, r0
 8011dc0:	bf0c      	ite	eq
 8011dc2:	2300      	moveq	r3, #0
 8011dc4:	f003 0301 	andne.w	r3, r3, #1
 8011dc8:	428a      	cmp	r2, r1
 8011dca:	bf0c      	ite	eq
 8011dcc:	2300      	moveq	r3, #0
 8011dce:	f003 0301 	andne.w	r3, r3, #1
 8011dd2:	b113      	cbz	r3, 8011dda <HAL_UART_Init+0x6e>
 8011dd4:	4b3a      	ldr	r3, [pc, #232]	; (8011ec0 <HAL_UART_Init+0x154>)
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d166      	bne.n	8011ea8 <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8011dda:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d057      	beq.n	8011e90 <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 8011de0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011de2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011de4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011de6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8011de8:	6813      	ldr	r3, [r2, #0]
 8011dea:	f023 0301 	bic.w	r3, r3, #1
 8011dee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011df0:	f7ff fbd8 	bl	80115a4 <UART_SetConfig>
 8011df4:	2801      	cmp	r0, #1
 8011df6:	d049      	beq.n	8011e8c <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d14e      	bne.n	8011e9c <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011dfe:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8011e00:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011e02:	685a      	ldr	r2, [r3, #4]
 8011e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011e08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011e0a:	689a      	ldr	r2, [r3, #8]
 8011e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011e10:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8011e12:	681a      	ldr	r2, [r3, #0]
 8011e14:	f042 0201 	orr.w	r2, r2, #1
}
 8011e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8011e1c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011e1e:	f7ff bf6d 	b.w	8011cfc <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8011e22:	4b24      	ldr	r3, [pc, #144]	; (8011eb4 <HAL_UART_Init+0x148>)
 8011e24:	4824      	ldr	r0, [pc, #144]	; (8011eb8 <HAL_UART_Init+0x14c>)
 8011e26:	4925      	ldr	r1, [pc, #148]	; (8011ebc <HAL_UART_Init+0x150>)
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	bf18      	it	ne
 8011e2c:	4282      	cmpne	r2, r0
 8011e2e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011e32:	bf14      	ite	ne
 8011e34:	2301      	movne	r3, #1
 8011e36:	2300      	moveq	r3, #0
 8011e38:	428a      	cmp	r2, r1
 8011e3a:	bf0c      	ite	eq
 8011e3c:	2300      	moveq	r3, #0
 8011e3e:	f003 0301 	andne.w	r3, r3, #1
 8011e42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e46:	4282      	cmp	r2, r0
 8011e48:	bf0c      	ite	eq
 8011e4a:	2300      	moveq	r3, #0
 8011e4c:	f003 0301 	andne.w	r3, r3, #1
 8011e50:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8011e54:	428a      	cmp	r2, r1
 8011e56:	bf0c      	ite	eq
 8011e58:	2300      	moveq	r3, #0
 8011e5a:	f003 0301 	andne.w	r3, r3, #1
 8011e5e:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8011e62:	4282      	cmp	r2, r0
 8011e64:	bf0c      	ite	eq
 8011e66:	2300      	moveq	r3, #0
 8011e68:	f003 0301 	andne.w	r3, r3, #1
 8011e6c:	428a      	cmp	r2, r1
 8011e6e:	bf0c      	ite	eq
 8011e70:	2300      	moveq	r3, #0
 8011e72:	f003 0301 	andne.w	r3, r3, #1
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d0af      	beq.n	8011dda <HAL_UART_Init+0x6e>
 8011e7a:	4b11      	ldr	r3, [pc, #68]	; (8011ec0 <HAL_UART_Init+0x154>)
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d0ac      	beq.n	8011dda <HAL_UART_Init+0x6e>
 8011e80:	f240 1131 	movw	r1, #305	; 0x131
 8011e84:	480f      	ldr	r0, [pc, #60]	; (8011ec4 <HAL_UART_Init+0x158>)
 8011e86:	f7f2 f861 	bl	8003f4c <assert_failed>
 8011e8a:	e7a6      	b.n	8011dda <HAL_UART_Init+0x6e>
}
 8011e8c:	2001      	movs	r0, #1
 8011e8e:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 8011e90:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8011e92:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8011e96:	f7f3 fdbd 	bl	8005a14 <HAL_UART_MspInit>
 8011e9a:	e7a1      	b.n	8011de0 <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	f7ff fd65 	bl	801196c <UART_AdvFeatureConfig>
 8011ea2:	e7ac      	b.n	8011dfe <HAL_UART_Init+0x92>
}
 8011ea4:	2001      	movs	r0, #1
 8011ea6:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8011ea8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8011eac:	4805      	ldr	r0, [pc, #20]	; (8011ec4 <HAL_UART_Init+0x158>)
 8011eae:	f7f2 f84d 	bl	8003f4c <assert_failed>
 8011eb2:	e792      	b.n	8011dda <HAL_UART_Init+0x6e>
 8011eb4:	40011000 	.word	0x40011000
 8011eb8:	40004400 	.word	0x40004400
 8011ebc:	40004800 	.word	0x40004800
 8011ec0:	40007c00 	.word	0x40007c00
 8011ec4:	0802b230 	.word	0x0802b230

08011ec8 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d04a      	beq.n	8011f62 <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8011ecc:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 8011ed0:	b570      	push	{r4, r5, r6, lr}
 8011ed2:	460e      	mov	r6, r1
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8011ed8:	d13d      	bne.n	8011f56 <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 8011eda:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d034      	beq.n	8011f4a <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 8011ee0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011ee2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011ee4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011ee6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8011ee8:	6813      	ldr	r3, [r2, #0]
 8011eea:	f023 0301 	bic.w	r3, r3, #1
 8011eee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011ef0:	f7ff fb58 	bl	80115a4 <UART_SetConfig>
 8011ef4:	2801      	cmp	r0, #1
 8011ef6:	d026      	beq.n	8011f46 <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011efa:	bb03      	cbnz	r3, 8011f3e <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011efc:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8011efe:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011f02:	685a      	ldr	r2, [r3, #4]
 8011f04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011f08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011f0a:	689a      	ldr	r2, [r3, #8]
 8011f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011f10:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8011f12:	d00d      	beq.n	8011f30 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8011f14:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011f16:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8011f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011f1c:	4315      	orrs	r5, r2
 8011f1e:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8011f20:	681a      	ldr	r2, [r3, #0]
 8011f22:	f042 0201 	orr.w	r2, r2, #1
}
 8011f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 8011f2a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011f2c:	f7ff bee6 	b.w	8011cfc <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8011f30:	6859      	ldr	r1, [r3, #4]
 8011f32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8011f36:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 8011f3a:	605e      	str	r6, [r3, #4]
 8011f3c:	e7ea      	b.n	8011f14 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 8011f3e:	4620      	mov	r0, r4
 8011f40:	f7ff fd14 	bl	801196c <UART_AdvFeatureConfig>
 8011f44:	e7da      	b.n	8011efc <HAL_MultiProcessor_Init+0x34>
}
 8011f46:	2001      	movs	r0, #1
 8011f48:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 8011f4a:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8011f4c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8011f50:	f7f3 fd60 	bl	8005a14 <HAL_UART_MspInit>
 8011f54:	e7c4      	b.n	8011ee0 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8011f56:	f240 211d 	movw	r1, #541	; 0x21d
 8011f5a:	4803      	ldr	r0, [pc, #12]	; (8011f68 <HAL_MultiProcessor_Init+0xa0>)
 8011f5c:	f7f1 fff6 	bl	8003f4c <assert_failed>
 8011f60:	e7bb      	b.n	8011eda <HAL_MultiProcessor_Init+0x12>
}
 8011f62:	2001      	movs	r0, #1
 8011f64:	4770      	bx	lr
 8011f66:	bf00      	nop
 8011f68:	0802b230 	.word	0x0802b230

08011f6c <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8011f6c:	6883      	ldr	r3, [r0, #8]
{
 8011f6e:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 8011f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8011f74:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 8011f78:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8011f7a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8011f7e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8011f82:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8011f84:	d04f      	beq.n	8012026 <UART_Start_Receive_IT+0xba>
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d043      	beq.n	8012012 <UART_Start_Receive_IT+0xa6>
 8011f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011f8e:	d057      	beq.n	8012040 <UART_Start_Receive_IT+0xd4>
 8011f90:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f94:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011f96:	2322      	movs	r3, #34	; 0x22
 8011f98:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f9a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011f9e:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa0:	f102 0308 	add.w	r3, r2, #8
 8011fa4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fa8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fac:	f102 0408 	add.w	r4, r2, #8
 8011fb0:	e844 3100 	strex	r1, r3, [r4]
 8011fb4:	2900      	cmp	r1, #0
 8011fb6:	d1f3      	bne.n	8011fa0 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011fb8:	6883      	ldr	r3, [r0, #8]
 8011fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011fbe:	d011      	beq.n	8011fe4 <UART_Start_Receive_IT+0x78>
 8011fc0:	4c23      	ldr	r4, [pc, #140]	; (8012050 <UART_Start_Receive_IT+0xe4>)
 8011fc2:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 8011fc4:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8011fc8:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011fca:	b18b      	cbz	r3, 8011ff0 <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fcc:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8011fd0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fd4:	e842 3100 	strex	r1, r3, [r2]
 8011fd8:	2900      	cmp	r1, #0
 8011fda:	d1f7      	bne.n	8011fcc <UART_Start_Receive_IT+0x60>
}
 8011fdc:	2000      	movs	r0, #0
 8011fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fe2:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011fe4:	6903      	ldr	r3, [r0, #16]
 8011fe6:	bb33      	cbnz	r3, 8012036 <UART_Start_Receive_IT+0xca>
 8011fe8:	491a      	ldr	r1, [pc, #104]	; (8012054 <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 8011fea:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8011fee:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8011ff4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff8:	e842 3100 	strex	r1, r3, [r2]
 8011ffc:	2900      	cmp	r1, #0
 8011ffe:	d0ed      	beq.n	8011fdc <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012000:	e852 3f00 	ldrex	r3, [r2]
 8012004:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012008:	e842 3100 	strex	r1, r3, [r2]
 801200c:	2900      	cmp	r1, #0
 801200e:	d1ef      	bne.n	8011ff0 <UART_Start_Receive_IT+0x84>
 8012010:	e7e4      	b.n	8011fdc <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 8012012:	6903      	ldr	r3, [r0, #16]
 8012014:	b91b      	cbnz	r3, 801201e <UART_Start_Receive_IT+0xb2>
 8012016:	23ff      	movs	r3, #255	; 0xff
 8012018:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801201c:	e7ba      	b.n	8011f94 <UART_Start_Receive_IT+0x28>
 801201e:	237f      	movs	r3, #127	; 0x7f
 8012020:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012024:	e7b6      	b.n	8011f94 <UART_Start_Receive_IT+0x28>
 8012026:	6903      	ldr	r3, [r0, #16]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d1f4      	bne.n	8012016 <UART_Start_Receive_IT+0xaa>
 801202c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8012030:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012034:	e7ae      	b.n	8011f94 <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 8012036:	4b06      	ldr	r3, [pc, #24]	; (8012050 <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 8012038:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 801203c:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 801203e:	e7c5      	b.n	8011fcc <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 8012040:	6903      	ldr	r3, [r0, #16]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d0eb      	beq.n	801201e <UART_Start_Receive_IT+0xb2>
 8012046:	233f      	movs	r3, #63	; 0x3f
 8012048:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801204c:	e7a2      	b.n	8011f94 <UART_Start_Receive_IT+0x28>
 801204e:	bf00      	nop
 8012050:	080110fd 	.word	0x080110fd
 8012054:	0801119d 	.word	0x0801119d

08012058 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8012058:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801205a:	2b20      	cmp	r3, #32
 801205c:	d11e      	bne.n	801209c <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 801205e:	b1d9      	cbz	r1, 8012098 <HAL_UART_Receive_IT+0x40>
 8012060:	fab2 f382 	clz	r3, r2
 8012064:	095b      	lsrs	r3, r3, #5
 8012066:	b1ba      	cbz	r2, 8012098 <HAL_UART_Receive_IT+0x40>
{
 8012068:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 801206a:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 801206e:	2c01      	cmp	r4, #1
 8012070:	d016      	beq.n	80120a0 <HAL_UART_Receive_IT+0x48>
 8012072:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012074:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012076:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8012078:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801207c:	6863      	ldr	r3, [r4, #4]
 801207e:	021b      	lsls	r3, r3, #8
 8012080:	d507      	bpl.n	8012092 <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012082:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012086:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801208a:	e844 3500 	strex	r5, r3, [r4]
 801208e:	2d00      	cmp	r5, #0
 8012090:	d1f7      	bne.n	8012082 <HAL_UART_Receive_IT+0x2a>
}
 8012092:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8012094:	f7ff bf6a 	b.w	8011f6c <UART_Start_Receive_IT>
      return HAL_ERROR;
 8012098:	2001      	movs	r0, #1
}
 801209a:	4770      	bx	lr
    return HAL_BUSY;
 801209c:	2002      	movs	r0, #2
 801209e:	4770      	bx	lr
 80120a0:	2002      	movs	r0, #2
}
 80120a2:	bc30      	pop	{r4, r5}
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop

080120a8 <UART_Start_Receive_DMA>:
{
 80120a8:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80120aa:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120ac:	2500      	movs	r5, #0
{
 80120ae:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80120b0:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120b2:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 80120b6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80120ba:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80120bc:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80120be:	b168      	cbz	r0, 80120dc <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80120c0:	4e1f      	ldr	r6, [pc, #124]	; (8012140 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80120c2:	4613      	mov	r3, r2
 80120c4:	460a      	mov	r2, r1
 80120c6:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80120c8:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80120ca:	4e1e      	ldr	r6, [pc, #120]	; (8012144 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80120cc:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 80120ce:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80120d0:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80120d2:	4e1d      	ldr	r6, [pc, #116]	; (8012148 <UART_Start_Receive_DMA+0xa0>)
 80120d4:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80120d6:	f7f6 fcaf 	bl	8008a38 <HAL_DMA_Start_IT>
 80120da:	bb40      	cbnz	r0, 801212e <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 80120dc:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 80120de:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 80120e0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 80120e4:	b14b      	cbz	r3, 80120fa <UART_Start_Receive_DMA+0x52>
 80120e6:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120e8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f0:	e843 2100 	strex	r1, r2, [r3]
 80120f4:	2900      	cmp	r1, #0
 80120f6:	d1f7      	bne.n	80120e8 <UART_Start_Receive_DMA+0x40>
 80120f8:	e000      	b.n	80120fc <UART_Start_Receive_DMA+0x54>
 80120fa:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fc:	f103 0208 	add.w	r2, r3, #8
 8012100:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012104:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012108:	f103 0008 	add.w	r0, r3, #8
 801210c:	e840 2100 	strex	r1, r2, [r0]
 8012110:	2900      	cmp	r1, #0
 8012112:	d1f3      	bne.n	80120fc <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012114:	f103 0208 	add.w	r2, r3, #8
 8012118:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801211c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012120:	f103 0108 	add.w	r1, r3, #8
 8012124:	e841 2000 	strex	r0, r2, [r1]
 8012128:	2800      	cmp	r0, #0
 801212a:	d1f3      	bne.n	8012114 <UART_Start_Receive_DMA+0x6c>
}
 801212c:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801212e:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8012130:	2320      	movs	r3, #32
      return HAL_ERROR;
 8012132:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8012134:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012138:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 801213c:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 801213e:	bd70      	pop	{r4, r5, r6, pc}
 8012140:	08011259 	.word	0x08011259
 8012144:	0801123d 	.word	0x0801123d
 8012148:	08010ed5 	.word	0x08010ed5

0801214c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 801214c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801214e:	2b20      	cmp	r3, #32
 8012150:	d11e      	bne.n	8012190 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 8012152:	b1d9      	cbz	r1, 801218c <HAL_UART_Receive_DMA+0x40>
 8012154:	fab2 f382 	clz	r3, r2
 8012158:	095b      	lsrs	r3, r3, #5
 801215a:	b1ba      	cbz	r2, 801218c <HAL_UART_Receive_DMA+0x40>
{
 801215c:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 801215e:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8012162:	2c01      	cmp	r4, #1
 8012164:	d016      	beq.n	8012194 <HAL_UART_Receive_DMA+0x48>
 8012166:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012168:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801216a:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 801216c:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012170:	6863      	ldr	r3, [r4, #4]
 8012172:	021b      	lsls	r3, r3, #8
 8012174:	d507      	bpl.n	8012186 <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012176:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801217a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217e:	e844 3500 	strex	r5, r3, [r4]
 8012182:	2d00      	cmp	r5, #0
 8012184:	d1f7      	bne.n	8012176 <HAL_UART_Receive_DMA+0x2a>
}
 8012186:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012188:	f7ff bf8e 	b.w	80120a8 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 801218c:	2001      	movs	r0, #1
}
 801218e:	4770      	bx	lr
    return HAL_BUSY;
 8012190:	2002      	movs	r0, #2
 8012192:	4770      	bx	lr
 8012194:	2002      	movs	r0, #2
}
 8012196:	bc30      	pop	{r4, r5}
 8012198:	4770      	bx	lr
 801219a:	bf00      	nop

0801219c <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 801219c:	2800      	cmp	r0, #0
 801219e:	f000 808a 	beq.w	80122b6 <HAL_RS485Ex_Init+0x11a>
{
 80121a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80121a6:	4c47      	ldr	r4, [pc, #284]	; (80122c4 <HAL_RS485Ex_Init+0x128>)
 80121a8:	4617      	mov	r7, r2
 80121aa:	461d      	mov	r5, r3
 80121ac:	4a46      	ldr	r2, [pc, #280]	; (80122c8 <HAL_RS485Ex_Init+0x12c>)
 80121ae:	6803      	ldr	r3, [r0, #0]
 80121b0:	460e      	mov	r6, r1
 80121b2:	4680      	mov	r8, r0
 80121b4:	42a3      	cmp	r3, r4
 80121b6:	bf18      	it	ne
 80121b8:	4293      	cmpne	r3, r2
 80121ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80121be:	bf14      	ite	ne
 80121c0:	2401      	movne	r4, #1
 80121c2:	2400      	moveq	r4, #0
 80121c4:	4293      	cmp	r3, r2
 80121c6:	bf0c      	ite	eq
 80121c8:	2400      	moveq	r4, #0
 80121ca:	f004 0401 	andne.w	r4, r4, #1
 80121ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80121d2:	4293      	cmp	r3, r2
 80121d4:	bf0c      	ite	eq
 80121d6:	2400      	moveq	r4, #0
 80121d8:	f004 0401 	andne.w	r4, r4, #1
 80121dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80121e0:	4293      	cmp	r3, r2
 80121e2:	bf0c      	ite	eq
 80121e4:	2400      	moveq	r4, #0
 80121e6:	f004 0401 	andne.w	r4, r4, #1
 80121ea:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80121ee:	4293      	cmp	r3, r2
 80121f0:	bf0c      	ite	eq
 80121f2:	2400      	moveq	r4, #0
 80121f4:	f004 0401 	andne.w	r4, r4, #1
 80121f8:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80121fc:	4293      	cmp	r3, r2
 80121fe:	bf0c      	ite	eq
 8012200:	2400      	moveq	r4, #0
 8012202:	f004 0401 	andne.w	r4, r4, #1
 8012206:	b11c      	cbz	r4, 8012210 <HAL_RS485Ex_Init+0x74>
 8012208:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801220c:	4293      	cmp	r3, r2
 801220e:	d154      	bne.n	80122ba <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8012210:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 8012214:	d14a      	bne.n	80122ac <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 8012216:	2f1f      	cmp	r7, #31
 8012218:	d843      	bhi.n	80122a2 <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 801221a:	2d1f      	cmp	r5, #31
 801221c:	d83c      	bhi.n	8012298 <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 801221e:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8012222:	b39b      	cbz	r3, 801228c <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8012224:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 8012228:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801222a:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 801222c:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8012230:	6813      	ldr	r3, [r2, #0]
 8012232:	f023 0301 	bic.w	r3, r3, #1
 8012236:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012238:	f7ff f9b4 	bl	80115a4 <UART_SetConfig>
 801223c:	2801      	cmp	r0, #1
 801223e:	d022      	beq.n	8012286 <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012240:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8012244:	b9db      	cbnz	r3, 801227e <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012246:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 801224a:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801224c:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801224e:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8012250:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012254:	4d1d      	ldr	r5, [pc, #116]	; (80122cc <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801225a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 801225c:	6899      	ldr	r1, [r3, #8]
 801225e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8012262:	430e      	orrs	r6, r1
 8012264:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	4015      	ands	r5, r2
 801226a:	432f      	orrs	r7, r5
 801226c:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	f042 0201 	orr.w	r2, r2, #1
}
 8012274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 8012278:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801227a:	f7ff bd3f 	b.w	8011cfc <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 801227e:	4640      	mov	r0, r8
 8012280:	f7ff fb74 	bl	801196c <UART_AdvFeatureConfig>
 8012284:	e7df      	b.n	8012246 <HAL_RS485Ex_Init+0xaa>
}
 8012286:	2001      	movs	r0, #1
 8012288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 801228c:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 801228e:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8012292:	f7f3 fbbf 	bl	8005a14 <HAL_UART_MspInit>
 8012296:	e7c5      	b.n	8012224 <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8012298:	21aa      	movs	r1, #170	; 0xaa
 801229a:	480d      	ldr	r0, [pc, #52]	; (80122d0 <HAL_RS485Ex_Init+0x134>)
 801229c:	f7f1 fe56 	bl	8003f4c <assert_failed>
 80122a0:	e7bd      	b.n	801221e <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 80122a2:	21a7      	movs	r1, #167	; 0xa7
 80122a4:	480a      	ldr	r0, [pc, #40]	; (80122d0 <HAL_RS485Ex_Init+0x134>)
 80122a6:	f7f1 fe51 	bl	8003f4c <assert_failed>
 80122aa:	e7b6      	b.n	801221a <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 80122ac:	21a4      	movs	r1, #164	; 0xa4
 80122ae:	4808      	ldr	r0, [pc, #32]	; (80122d0 <HAL_RS485Ex_Init+0x134>)
 80122b0:	f7f1 fe4c 	bl	8003f4c <assert_failed>
 80122b4:	e7af      	b.n	8012216 <HAL_RS485Ex_Init+0x7a>
}
 80122b6:	2001      	movs	r0, #1
 80122b8:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80122ba:	21a1      	movs	r1, #161	; 0xa1
 80122bc:	4804      	ldr	r0, [pc, #16]	; (80122d0 <HAL_RS485Ex_Init+0x134>)
 80122be:	f7f1 fe45 	bl	8003f4c <assert_failed>
 80122c2:	e7a5      	b.n	8012210 <HAL_RS485Ex_Init+0x74>
 80122c4:	40011000 	.word	0x40011000
 80122c8:	40004400 	.word	0x40004400
 80122cc:	fc00ffff 	.word	0xfc00ffff
 80122d0:	0802b280 	.word	0x0802b280

080122d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80122d4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80122d6:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80122d8:	4a11      	ldr	r2, [pc, #68]	; (8012320 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 80122da:	9301      	str	r3, [sp, #4]
 80122dc:	e002      	b.n	80122e4 <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80122de:	6903      	ldr	r3, [r0, #16]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	db07      	blt.n	80122f4 <USB_CoreReset+0x20>
    if (++count > 200000U)
 80122e4:	9b01      	ldr	r3, [sp, #4]
 80122e6:	3301      	adds	r3, #1
 80122e8:	4293      	cmp	r3, r2
 80122ea:	9301      	str	r3, [sp, #4]
 80122ec:	d9f7      	bls.n	80122de <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 80122ee:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 80122f0:	b002      	add	sp, #8
 80122f2:	4770      	bx	lr
  count = 0U;
 80122f4:	2300      	movs	r3, #0
    if (++count > 200000U)
 80122f6:	4a0a      	ldr	r2, [pc, #40]	; (8012320 <USB_CoreReset+0x4c>)
  count = 0U;
 80122f8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80122fa:	6903      	ldr	r3, [r0, #16]
 80122fc:	f043 0301 	orr.w	r3, r3, #1
 8012300:	6103      	str	r3, [r0, #16]
 8012302:	e003      	b.n	801230c <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012304:	6903      	ldr	r3, [r0, #16]
 8012306:	f013 0301 	ands.w	r3, r3, #1
 801230a:	d005      	beq.n	8012318 <USB_CoreReset+0x44>
    if (++count > 200000U)
 801230c:	9b01      	ldr	r3, [sp, #4]
 801230e:	3301      	adds	r3, #1
 8012310:	4293      	cmp	r3, r2
 8012312:	9301      	str	r3, [sp, #4]
 8012314:	d9f6      	bls.n	8012304 <USB_CoreReset+0x30>
 8012316:	e7ea      	b.n	80122ee <USB_CoreReset+0x1a>
  return HAL_OK;
 8012318:	4618      	mov	r0, r3
}
 801231a:	b002      	add	sp, #8
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop
 8012320:	00030d40 	.word	0x00030d40

08012324 <USB_CoreInit>:
{
 8012324:	b084      	sub	sp, #16
 8012326:	b510      	push	{r4, lr}
 8012328:	f10d 0c0c 	add.w	ip, sp, #12
 801232c:	4604      	mov	r4, r0
 801232e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012332:	9b08      	ldr	r3, [sp, #32]
 8012334:	2b01      	cmp	r3, #1
 8012336:	d122      	bne.n	801237e <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012338:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801233a:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 801233e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012340:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8012344:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012346:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012348:	68c2      	ldr	r2, [r0, #12]
 801234a:	ea03 0302 	and.w	r3, r3, r2
 801234e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012350:	68c3      	ldr	r3, [r0, #12]
 8012352:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012356:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8012358:	d01c      	beq.n	8012394 <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 801235a:	4620      	mov	r0, r4
 801235c:	f7ff ffba 	bl	80122d4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8012360:	9b06      	ldr	r3, [sp, #24]
 8012362:	2b01      	cmp	r3, #1
 8012364:	d107      	bne.n	8012376 <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012366:	68a3      	ldr	r3, [r4, #8]
 8012368:	f043 0306 	orr.w	r3, r3, #6
 801236c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801236e:	68a3      	ldr	r3, [r4, #8]
 8012370:	f043 0320 	orr.w	r3, r3, #32
 8012374:	60a3      	str	r3, [r4, #8]
}
 8012376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801237a:	b004      	add	sp, #16
 801237c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801237e:	68c3      	ldr	r3, [r0, #12]
 8012380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012384:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8012386:	f7ff ffa5 	bl	80122d4 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801238a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012390:	63a3      	str	r3, [r4, #56]	; 0x38
 8012392:	e7e5      	b.n	8012360 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012394:	68c3      	ldr	r3, [r0, #12]
 8012396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801239a:	60c3      	str	r3, [r0, #12]
 801239c:	e7dd      	b.n	801235a <USB_CoreInit+0x36>
 801239e:	bf00      	nop

080123a0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80123a0:	2a02      	cmp	r2, #2
{
 80123a2:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 80123a4:	d00b      	beq.n	80123be <USB_SetTurnaroundTime+0x1e>
 80123a6:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80123aa:	68d9      	ldr	r1, [r3, #12]
}
 80123ac:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80123ae:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 80123b2:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80123b4:	68da      	ldr	r2, [r3, #12]
 80123b6:	ea42 020c 	orr.w	r2, r2, ip
 80123ba:	60da      	str	r2, [r3, #12]
}
 80123bc:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80123be:	4a23      	ldr	r2, [pc, #140]	; (801244c <USB_SetTurnaroundTime+0xac>)
 80123c0:	4823      	ldr	r0, [pc, #140]	; (8012450 <USB_SetTurnaroundTime+0xb0>)
 80123c2:	440a      	add	r2, r1
 80123c4:	4282      	cmp	r2, r0
 80123c6:	d92c      	bls.n	8012422 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80123c8:	4a22      	ldr	r2, [pc, #136]	; (8012454 <USB_SetTurnaroundTime+0xb4>)
 80123ca:	4823      	ldr	r0, [pc, #140]	; (8012458 <USB_SetTurnaroundTime+0xb8>)
 80123cc:	440a      	add	r2, r1
 80123ce:	4282      	cmp	r2, r0
 80123d0:	d92a      	bls.n	8012428 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80123d2:	4a22      	ldr	r2, [pc, #136]	; (801245c <USB_SetTurnaroundTime+0xbc>)
 80123d4:	4822      	ldr	r0, [pc, #136]	; (8012460 <USB_SetTurnaroundTime+0xc0>)
 80123d6:	440a      	add	r2, r1
 80123d8:	4282      	cmp	r2, r0
 80123da:	d928      	bls.n	801242e <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80123dc:	4a21      	ldr	r2, [pc, #132]	; (8012464 <USB_SetTurnaroundTime+0xc4>)
 80123de:	4822      	ldr	r0, [pc, #136]	; (8012468 <USB_SetTurnaroundTime+0xc8>)
 80123e0:	440a      	add	r2, r1
 80123e2:	4282      	cmp	r2, r0
 80123e4:	d326      	bcc.n	8012434 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80123e6:	4a21      	ldr	r2, [pc, #132]	; (801246c <USB_SetTurnaroundTime+0xcc>)
 80123e8:	4821      	ldr	r0, [pc, #132]	; (8012470 <USB_SetTurnaroundTime+0xd0>)
 80123ea:	440a      	add	r2, r1
 80123ec:	4282      	cmp	r2, r0
 80123ee:	d924      	bls.n	801243a <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80123f0:	4a20      	ldr	r2, [pc, #128]	; (8012474 <USB_SetTurnaroundTime+0xd4>)
 80123f2:	4821      	ldr	r0, [pc, #132]	; (8012478 <USB_SetTurnaroundTime+0xd8>)
 80123f4:	440a      	add	r2, r1
 80123f6:	4282      	cmp	r2, r0
 80123f8:	d322      	bcc.n	8012440 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80123fa:	4a20      	ldr	r2, [pc, #128]	; (801247c <USB_SetTurnaroundTime+0xdc>)
 80123fc:	4820      	ldr	r0, [pc, #128]	; (8012480 <USB_SetTurnaroundTime+0xe0>)
 80123fe:	440a      	add	r2, r1
 8012400:	4282      	cmp	r2, r0
 8012402:	d3d0      	bcc.n	80123a6 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012404:	4a1f      	ldr	r2, [pc, #124]	; (8012484 <USB_SetTurnaroundTime+0xe4>)
 8012406:	4820      	ldr	r0, [pc, #128]	; (8012488 <USB_SetTurnaroundTime+0xe8>)
 8012408:	440a      	add	r2, r1
 801240a:	4282      	cmp	r2, r0
 801240c:	d31b      	bcc.n	8012446 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801240e:	4a1f      	ldr	r2, [pc, #124]	; (801248c <USB_SetTurnaroundTime+0xec>)
 8012410:	481f      	ldr	r0, [pc, #124]	; (8012490 <USB_SetTurnaroundTime+0xf0>)
 8012412:	440a      	add	r2, r1
 8012414:	4282      	cmp	r2, r0
 8012416:	bf34      	ite	cc
 8012418:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 801241c:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 8012420:	e7c3      	b.n	80123aa <USB_SetTurnaroundTime+0xa>
 8012422:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 8012426:	e7c0      	b.n	80123aa <USB_SetTurnaroundTime+0xa>
 8012428:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 801242c:	e7bd      	b.n	80123aa <USB_SetTurnaroundTime+0xa>
 801242e:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8012432:	e7ba      	b.n	80123aa <USB_SetTurnaroundTime+0xa>
 8012434:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8012438:	e7b7      	b.n	80123aa <USB_SetTurnaroundTime+0xa>
 801243a:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 801243e:	e7b4      	b.n	80123aa <USB_SetTurnaroundTime+0xa>
 8012440:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 8012444:	e7b1      	b.n	80123aa <USB_SetTurnaroundTime+0xa>
 8012446:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 801244a:	e7ae      	b.n	80123aa <USB_SetTurnaroundTime+0xa>
 801244c:	ff275340 	.word	0xff275340
 8012450:	000c34ff 	.word	0x000c34ff
 8012454:	ff1b1e40 	.word	0xff1b1e40
 8012458:	000f423f 	.word	0x000f423f
 801245c:	ff0bdc00 	.word	0xff0bdc00
 8012460:	00124f7f 	.word	0x00124f7f
 8012464:	fef98c80 	.word	0xfef98c80
 8012468:	0013d620 	.word	0x0013d620
 801246c:	fee5b660 	.word	0xfee5b660
 8012470:	0016e35f 	.word	0x0016e35f
 8012474:	feced300 	.word	0xfeced300
 8012478:	001b7740 	.word	0x001b7740
 801247c:	feb35bc0 	.word	0xfeb35bc0
 8012480:	002191c0 	.word	0x002191c0
 8012484:	fe91ca00 	.word	0xfe91ca00
 8012488:	00387520 	.word	0x00387520
 801248c:	fe5954e0 	.word	0xfe5954e0
 8012490:	00419ce0 	.word	0x00419ce0

08012494 <USB_EnableGlobalInt>:
{
 8012494:	4603      	mov	r3, r0
}
 8012496:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012498:	689a      	ldr	r2, [r3, #8]
 801249a:	f042 0201 	orr.w	r2, r2, #1
 801249e:	609a      	str	r2, [r3, #8]
}
 80124a0:	4770      	bx	lr
 80124a2:	bf00      	nop

080124a4 <USB_DisableGlobalInt>:
{
 80124a4:	4603      	mov	r3, r0
}
 80124a6:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80124a8:	689a      	ldr	r2, [r3, #8]
 80124aa:	f022 0201 	bic.w	r2, r2, #1
 80124ae:	609a      	str	r2, [r3, #8]
}
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop

080124b4 <USB_SetCurrentMode>:
{
 80124b4:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80124b6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80124b8:	2901      	cmp	r1, #1
{
 80124ba:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80124bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80124c0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80124c2:	d017      	beq.n	80124f4 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 80124c4:	b9a1      	cbnz	r1, 80124f0 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80124c6:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80124c8:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80124ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80124ce:	60c3      	str	r3, [r0, #12]
 80124d0:	e001      	b.n	80124d6 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80124d2:	2c32      	cmp	r4, #50	; 0x32
 80124d4:	d00c      	beq.n	80124f0 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80124d6:	2001      	movs	r0, #1
      ms++;
 80124d8:	4404      	add	r4, r0
      HAL_Delay(1U);
 80124da:	f7f5 f8e9 	bl	80076b0 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80124de:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80124e0:	07db      	lsls	r3, r3, #31
 80124e2:	d4f6      	bmi.n	80124d2 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 80124e4:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80124e8:	fab0 f080 	clz	r0, r0
 80124ec:	0940      	lsrs	r0, r0, #5
}
 80124ee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80124f0:	2001      	movs	r0, #1
}
 80124f2:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80124f4:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80124f6:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80124f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80124fc:	60c3      	str	r3, [r0, #12]
 80124fe:	e001      	b.n	8012504 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012500:	2c32      	cmp	r4, #50	; 0x32
 8012502:	d0f5      	beq.n	80124f0 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8012504:	2001      	movs	r0, #1
      ms++;
 8012506:	4404      	add	r4, r0
      HAL_Delay(1U);
 8012508:	f7f5 f8d2 	bl	80076b0 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 801250c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801250e:	07da      	lsls	r2, r3, #31
 8012510:	d5f6      	bpl.n	8012500 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 8012512:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8012516:	fab0 f080 	clz	r0, r0
 801251a:	0940      	lsrs	r0, r0, #5
 801251c:	e7e7      	b.n	80124ee <USB_SetCurrentMode+0x3a>
 801251e:	bf00      	nop

08012520 <USB_FlushTxFifo>:
{
 8012520:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8012522:	2300      	movs	r3, #0
    if (++count > 200000U)
 8012524:	4a11      	ldr	r2, [pc, #68]	; (801256c <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 8012526:	9301      	str	r3, [sp, #4]
 8012528:	e002      	b.n	8012530 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801252a:	6903      	ldr	r3, [r0, #16]
 801252c:	2b00      	cmp	r3, #0
 801252e:	db07      	blt.n	8012540 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8012530:	9b01      	ldr	r3, [sp, #4]
 8012532:	3301      	adds	r3, #1
 8012534:	4293      	cmp	r3, r2
 8012536:	9301      	str	r3, [sp, #4]
 8012538:	d9f7      	bls.n	801252a <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 801253a:	2003      	movs	r0, #3
}
 801253c:	b002      	add	sp, #8
 801253e:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012540:	0189      	lsls	r1, r1, #6
  count = 0U;
 8012542:	2300      	movs	r3, #0
    if (++count > 200000U)
 8012544:	4a09      	ldr	r2, [pc, #36]	; (801256c <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012546:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 801254a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801254c:	6101      	str	r1, [r0, #16]
 801254e:	e003      	b.n	8012558 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012550:	6903      	ldr	r3, [r0, #16]
 8012552:	f013 0320 	ands.w	r3, r3, #32
 8012556:	d005      	beq.n	8012564 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 8012558:	9b01      	ldr	r3, [sp, #4]
 801255a:	3301      	adds	r3, #1
 801255c:	4293      	cmp	r3, r2
 801255e:	9301      	str	r3, [sp, #4]
 8012560:	d9f6      	bls.n	8012550 <USB_FlushTxFifo+0x30>
 8012562:	e7ea      	b.n	801253a <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 8012564:	4618      	mov	r0, r3
}
 8012566:	b002      	add	sp, #8
 8012568:	4770      	bx	lr
 801256a:	bf00      	nop
 801256c:	00030d40 	.word	0x00030d40

08012570 <USB_FlushRxFifo>:
{
 8012570:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8012572:	2300      	movs	r3, #0
    if (++count > 200000U)
 8012574:	4a10      	ldr	r2, [pc, #64]	; (80125b8 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 8012576:	9301      	str	r3, [sp, #4]
 8012578:	e002      	b.n	8012580 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801257a:	6903      	ldr	r3, [r0, #16]
 801257c:	2b00      	cmp	r3, #0
 801257e:	db07      	blt.n	8012590 <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 8012580:	9b01      	ldr	r3, [sp, #4]
 8012582:	3301      	adds	r3, #1
 8012584:	4293      	cmp	r3, r2
 8012586:	9301      	str	r3, [sp, #4]
 8012588:	d9f7      	bls.n	801257a <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 801258a:	2003      	movs	r0, #3
}
 801258c:	b002      	add	sp, #8
 801258e:	4770      	bx	lr
  count = 0U;
 8012590:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012592:	2310      	movs	r3, #16
    if (++count > 200000U)
 8012594:	4a08      	ldr	r2, [pc, #32]	; (80125b8 <USB_FlushRxFifo+0x48>)
  count = 0U;
 8012596:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012598:	6103      	str	r3, [r0, #16]
 801259a:	e003      	b.n	80125a4 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801259c:	6903      	ldr	r3, [r0, #16]
 801259e:	f013 0310 	ands.w	r3, r3, #16
 80125a2:	d005      	beq.n	80125b0 <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 80125a4:	9b01      	ldr	r3, [sp, #4]
 80125a6:	3301      	adds	r3, #1
 80125a8:	4293      	cmp	r3, r2
 80125aa:	9301      	str	r3, [sp, #4]
 80125ac:	d9f6      	bls.n	801259c <USB_FlushRxFifo+0x2c>
 80125ae:	e7ec      	b.n	801258a <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 80125b0:	4618      	mov	r0, r3
}
 80125b2:	b002      	add	sp, #8
 80125b4:	4770      	bx	lr
 80125b6:	bf00      	nop
 80125b8:	00030d40 	.word	0x00030d40

080125bc <USB_DevInit>:
{
 80125bc:	b084      	sub	sp, #16
 80125be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125c2:	ad09      	add	r5, sp, #36	; 0x24
 80125c4:	4604      	mov	r4, r0
 80125c6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80125c8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80125cc:	2300      	movs	r3, #0
 80125ce:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 80125d0:	4619      	mov	r1, r3
 80125d2:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80125d6:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80125d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80125dc:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80125de:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80125e0:	d1f7      	bne.n	80125d2 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 80125e2:	2e00      	cmp	r6, #0
 80125e4:	f040 8092 	bne.w	801270c <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80125e8:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80125ec:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 80125f0:	f043 0302 	orr.w	r3, r3, #2
 80125f4:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80125f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80125f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80125fc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80125fe:	6823      	ldr	r3, [r4, #0]
 8012600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012604:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012606:	6823      	ldr	r3, [r4, #0]
 8012608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801260c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 801260e:	2300      	movs	r3, #0
 8012610:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801261a:	2b01      	cmp	r3, #1
 801261c:	d07d      	beq.n	801271a <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	f043 0303 	orr.w	r3, r3, #3
 8012624:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012626:	2110      	movs	r1, #16
 8012628:	4620      	mov	r0, r4
 801262a:	f7ff ff79 	bl	8012520 <USB_FlushTxFifo>
 801262e:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012630:	4620      	mov	r0, r4
 8012632:	f7ff ff9d 	bl	8012570 <USB_FlushRxFifo>
 8012636:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 801263a:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801263c:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 801263e:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 8012640:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 8012642:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012644:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 8012646:	bf18      	it	ne
 8012648:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801264a:	b1ed      	cbz	r5, 8012688 <USB_DevInit+0xcc>
 801264c:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012650:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012654:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8012658:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801265a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 801265e:	e009      	b.n	8012674 <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8012660:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012664:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012666:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801266a:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801266e:	3320      	adds	r3, #32
 8012670:	4295      	cmp	r5, r2
 8012672:	d02c      	beq.n	80126ce <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012674:	6819      	ldr	r1, [r3, #0]
 8012676:	2900      	cmp	r1, #0
 8012678:	daf2      	bge.n	8012660 <USB_DevInit+0xa4>
      if (i == 0U)
 801267a:	b112      	cbz	r2, 8012682 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801267c:	f8c3 8000 	str.w	r8, [r3]
 8012680:	e7f0      	b.n	8012664 <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012682:	f8c3 9000 	str.w	r9, [r3]
 8012686:	e7ed      	b.n	8012664 <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012688:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 801268a:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801268c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012690:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012692:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8012696:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012698:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 801269a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801269c:	b91b      	cbnz	r3, 80126a6 <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801269e:	69a3      	ldr	r3, [r4, #24]
 80126a0:	f043 0310 	orr.w	r3, r3, #16
 80126a4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80126a6:	69a2      	ldr	r2, [r4, #24]
 80126a8:	4b21      	ldr	r3, [pc, #132]	; (8012730 <USB_DevInit+0x174>)
 80126aa:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 80126ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80126ae:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80126b0:	b11a      	cbz	r2, 80126ba <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80126b2:	69a3      	ldr	r3, [r4, #24]
 80126b4:	f043 0308 	orr.w	r3, r3, #8
 80126b8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80126ba:	2e01      	cmp	r6, #1
 80126bc:	d103      	bne.n	80126c6 <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80126be:	69a2      	ldr	r2, [r4, #24]
 80126c0:	4b1c      	ldr	r3, [pc, #112]	; (8012734 <USB_DevInit+0x178>)
 80126c2:	4313      	orrs	r3, r2
 80126c4:	61a3      	str	r3, [r4, #24]
}
 80126c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126ca:	b004      	add	sp, #16
 80126cc:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80126ce:	2200      	movs	r2, #0
 80126d0:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80126d4:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80126d8:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80126dc:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80126de:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80126e2:	e009      	b.n	80126f8 <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80126e4:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80126e8:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80126ea:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80126ee:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80126f2:	3320      	adds	r3, #32
 80126f4:	4295      	cmp	r5, r2
 80126f6:	d0c7      	beq.n	8012688 <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80126f8:	6819      	ldr	r1, [r3, #0]
 80126fa:	2900      	cmp	r1, #0
 80126fc:	daf2      	bge.n	80126e4 <USB_DevInit+0x128>
      if (i == 0U)
 80126fe:	b112      	cbz	r2, 8012706 <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012700:	f8c3 8000 	str.w	r8, [r3]
 8012704:	e7f0      	b.n	80126e8 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012706:	f8c3 9000 	str.w	r9, [r3]
 801270a:	e7ed      	b.n	80126e8 <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801270c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801270e:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012712:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012716:	63a3      	str	r3, [r4, #56]	; 0x38
 8012718:	e779      	b.n	801260e <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 801271a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801271c:	b913      	cbnz	r3, 8012724 <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8012722:	e780      	b.n	8012626 <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	f043 0301 	orr.w	r3, r3, #1
 801272a:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 801272c:	e77b      	b.n	8012626 <USB_DevInit+0x6a>
 801272e:	bf00      	nop
 8012730:	803c3800 	.word	0x803c3800
 8012734:	40000004 	.word	0x40000004

08012738 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012738:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801273c:	f013 0006 	ands.w	r0, r3, #6
 8012740:	d004      	beq.n	801274c <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8012742:	f013 0f02 	tst.w	r3, #2
 8012746:	bf14      	ite	ne
 8012748:	2002      	movne	r0, #2
 801274a:	200f      	moveq	r0, #15
}
 801274c:	4770      	bx	lr
 801274e:	bf00      	nop

08012750 <USB_ActivateEndpoint>:
{
 8012750:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8012752:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8012754:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8012756:	2b01      	cmp	r3, #1
 8012758:	d020      	beq.n	801279c <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801275a:	f002 0c0f 	and.w	ip, r2, #15
 801275e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012762:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012766:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801276a:	fa03 f30c 	lsl.w	r3, r3, ip
 801276e:	4323      	orrs	r3, r4
 8012770:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012774:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8012778:	041b      	lsls	r3, r3, #16
 801277a:	d40c      	bmi.n	8012796 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801277c:	688b      	ldr	r3, [r1, #8]
 801277e:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 8012782:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012786:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012788:	4914      	ldr	r1, [pc, #80]	; (80127dc <USB_ActivateEndpoint+0x8c>)
 801278a:	4323      	orrs	r3, r4
 801278c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8012790:	4319      	orrs	r1, r3
 8012792:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8012796:	2000      	movs	r0, #0
 8012798:	bc30      	pop	{r4, r5}
 801279a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801279c:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 80127a0:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80127a4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80127a8:	40ab      	lsls	r3, r5
 80127aa:	69e5      	ldr	r5, [r4, #28]
 80127ac:	432b      	orrs	r3, r5
 80127ae:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80127b0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80127b4:	041c      	lsls	r4, r3, #16
 80127b6:	d4ee      	bmi.n	8012796 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80127b8:	688b      	ldr	r3, [r1, #8]
 80127ba:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 80127be:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80127c2:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80127c4:	4905      	ldr	r1, [pc, #20]	; (80127dc <USB_ActivateEndpoint+0x8c>)
 80127c6:	432b      	orrs	r3, r5
 80127c8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80127cc:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 80127d0:	4311      	orrs	r1, r2
}
 80127d2:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80127d4:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 80127d8:	2000      	movs	r0, #0
 80127da:	4770      	bx	lr
 80127dc:	10008000 	.word	0x10008000

080127e0 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 80127e0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80127e2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80127e4:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80127e6:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80127ea:	d02a      	beq.n	8012842 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80127ec:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 80127f0:	2a00      	cmp	r2, #0
 80127f2:	db19      	blt.n	8012828 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80127f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80127f8:	f003 030f 	and.w	r3, r3, #15
 80127fc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8012800:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012804:	4a23      	ldr	r2, [pc, #140]	; (8012894 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012806:	ea21 0103 	bic.w	r1, r1, r3
 801280a:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801280e:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8012812:	ea21 0303 	bic.w	r3, r1, r3
 8012816:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 801281a:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801281c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8012820:	401a      	ands	r2, r3
 8012822:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 8012826:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012828:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 801282c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8012830:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012834:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8012838:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801283c:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8012840:	e7d8      	b.n	80127f4 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012842:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8012846:	2a00      	cmp	r2, #0
 8012848:	da0b      	bge.n	8012862 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801284a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 801284e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8012852:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012856:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 801285a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801285e:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012862:	f003 020f 	and.w	r2, r3, #15
 8012866:	2301      	movs	r3, #1
 8012868:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 801286c:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801286e:	4a0a      	ldr	r2, [pc, #40]	; (8012898 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012870:	ea21 0103 	bic.w	r1, r1, r3
 8012874:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012878:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 801287c:	ea21 0303 	bic.w	r3, r1, r3
 8012880:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8012884:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012886:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 801288a:	401a      	ands	r2, r3
 801288c:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8012890:	4770      	bx	lr
 8012892:	bf00      	nop
 8012894:	eff37800 	.word	0xeff37800
 8012898:	ec337800 	.word	0xec337800

0801289c <USB_EPStartXfer>:
{
 801289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 80128a0:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80128a2:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d051      	beq.n	801294e <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80128aa:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 80128ae:	4c84      	ldr	r4, [pc, #528]	; (8012ac0 <USB_EPStartXfer+0x224>)
 80128b0:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 80128b4:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 80128b8:	402c      	ands	r4, r5
 80128ba:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80128bc:	4c81      	ldr	r4, [pc, #516]	; (8012ac4 <USB_EPStartXfer+0x228>)
 80128be:	691d      	ldr	r5, [r3, #16]
 80128c0:	402c      	ands	r4, r5
 80128c2:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 80128c4:	694c      	ldr	r4, [r1, #20]
 80128c6:	b384      	cbz	r4, 801292a <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80128c8:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 80128ca:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80128cc:	4e7e      	ldr	r6, [pc, #504]	; (8012ac8 <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80128ce:	442c      	add	r4, r5
 80128d0:	f104 34ff 	add.w	r4, r4, #4294967295
 80128d4:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80128d8:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 80128dc:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80128de:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80128e2:	691d      	ldr	r5, [r3, #16]
 80128e4:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80128e8:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80128ec:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80128ee:	691d      	ldr	r5, [r3, #16]
 80128f0:	ea44 0405 	orr.w	r4, r4, r5
 80128f4:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80128f6:	d025      	beq.n	8012944 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 80128f8:	78cb      	ldrb	r3, [r1, #3]
 80128fa:	2b01      	cmp	r3, #1
 80128fc:	d10c      	bne.n	8012918 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80128fe:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8012902:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012906:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 801290a:	bf0c      	ite	eq
 801290c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012910:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8012914:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012918:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 801291c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012920:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8012924:	2000      	movs	r0, #0
 8012926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801292a:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 801292c:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801292e:	691d      	ldr	r5, [r3, #16]
 8012930:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8012934:	ea44 0405 	orr.w	r4, r4, r5
 8012938:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801293a:	691c      	ldr	r4, [r3, #16]
 801293c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8012940:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8012942:	d1d9      	bne.n	80128f8 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8012944:	68ca      	ldr	r2, [r1, #12]
 8012946:	2a00      	cmp	r2, #0
 8012948:	d0d6      	beq.n	80128f8 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801294a:	615a      	str	r2, [r3, #20]
 801294c:	e7d4      	b.n	80128f8 <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 801294e:	694d      	ldr	r5, [r1, #20]
 8012950:	2d00      	cmp	r5, #0
 8012952:	d03d      	beq.n	80129d0 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012954:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 8012958:	4e59      	ldr	r6, [pc, #356]	; (8012ac0 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801295a:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801295e:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012962:	4f58      	ldr	r7, [pc, #352]	; (8012ac4 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012964:	ea08 0606 	and.w	r6, r8, r6
 8012968:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801296c:	eb05 060e 	add.w	r6, r5, lr
 8012970:	3e01      	subs	r6, #1
 8012972:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012976:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 801297a:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801297c:	4e52      	ldr	r6, [pc, #328]	; (8012ac8 <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801297e:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012982:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 8012986:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 801298a:	433e      	orrs	r6, r7
 801298c:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012990:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8012994:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8012998:	433e      	orrs	r6, r7
 801299a:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801299e:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80129a2:	f891 e003 	ldrb.w	lr, [r1, #3]
 80129a6:	f1be 0f01 	cmp.w	lr, #1
 80129aa:	d057      	beq.n	8012a5c <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 80129ac:	2a01      	cmp	r2, #1
 80129ae:	d072      	beq.n	8012a96 <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80129b0:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80129b4:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80129b8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80129bc:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80129c0:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80129c4:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80129c8:	4313      	orrs	r3, r2
 80129ca:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 80129ce:	e7a9      	b.n	8012924 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80129d0:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 80129d4:	4e3b      	ldr	r6, [pc, #236]	; (8012ac4 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129d6:	4c3a      	ldr	r4, [pc, #232]	; (8012ac0 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 80129d8:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80129da:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 80129de:	ea06 0607 	and.w	r6, r6, r7
 80129e2:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80129e6:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 80129ea:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80129ee:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129f2:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 80129f6:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80129fa:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129fe:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8012a02:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 8012a06:	d03a      	beq.n	8012a7e <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a08:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8012a0c:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a10:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8012a14:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8012a18:	d184      	bne.n	8012924 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012a1a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8012a1e:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012a22:	6833      	ldr	r3, [r6, #0]
 8012a24:	bf0c      	ite	eq
 8012a26:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012a2a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8012a2e:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8012a30:	2a00      	cmp	r2, #0
 8012a32:	f47f af77 	bne.w	8012924 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 8012a36:	b2ad      	uxth	r5, r5
 8012a38:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8012a3a:	08ad      	lsrs	r5, r5, #2
 8012a3c:	f43f af72 	beq.w	8012924 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012a40:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012a42:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 8012a46:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8012a4a:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8012a4e:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8012a52:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012a54:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8012a58:	d1f9      	bne.n	8012a4e <USB_EPStartXfer+0x1b2>
 8012a5a:	e763      	b.n	8012924 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012a5c:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 8012a5e:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012a60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012a64:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012a66:	6933      	ldr	r3, [r6, #16]
 8012a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012a6c:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8012a6e:	d017      	beq.n	8012aa0 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a70:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8012a74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a78:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8012a7c:	e7cd      	b.n	8012a1a <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 8012a7e:	690b      	ldr	r3, [r1, #16]
 8012a80:	b963      	cbnz	r3, 8012a9c <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 8012a82:	f1be 0f01 	cmp.w	lr, #1
 8012a86:	d00e      	beq.n	8012aa6 <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a88:	6833      	ldr	r3, [r6, #0]
}
 8012a8a:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a90:	6033      	str	r3, [r6, #0]
}
 8012a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8012a96:	690b      	ldr	r3, [r1, #16]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d0f5      	beq.n	8012a88 <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012a9c:	6173      	str	r3, [r6, #20]
 8012a9e:	e7f0      	b.n	8012a82 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 8012aa0:	690b      	ldr	r3, [r1, #16]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d1fa      	bne.n	8012a9c <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012aa6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8012aaa:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012aae:	6833      	ldr	r3, [r6, #0]
 8012ab0:	bf0c      	ite	eq
 8012ab2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012ab6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8012aba:	6033      	str	r3, [r6, #0]
 8012abc:	e7e4      	b.n	8012a88 <USB_EPStartXfer+0x1ec>
 8012abe:	bf00      	nop
 8012ac0:	fff80000 	.word	0xfff80000
 8012ac4:	e007ffff 	.word	0xe007ffff
 8012ac8:	1ff80000 	.word	0x1ff80000

08012acc <USB_EP0StartXfer>:
{
 8012acc:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8012ace:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8012ad0:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8012ad2:	2b01      	cmp	r3, #1
 8012ad4:	d027      	beq.n	8012b26 <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012ad6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8012ada:	4c3c      	ldr	r4, [pc, #240]	; (8012bcc <USB_EP0StartXfer+0x100>)
 8012adc:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 8012ae0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8012ae4:	402c      	ands	r4, r5
 8012ae6:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012ae8:	4c39      	ldr	r4, [pc, #228]	; (8012bd0 <USB_EP0StartXfer+0x104>)
 8012aea:	691d      	ldr	r5, [r3, #16]
 8012aec:	402c      	ands	r4, r5
 8012aee:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8012af0:	694c      	ldr	r4, [r1, #20]
 8012af2:	b9ac      	cbnz	r4, 8012b20 <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 8012af4:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012af6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012af8:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8012afc:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012afe:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8012b02:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012b04:	691d      	ldr	r5, [r3, #16]
 8012b06:	ea44 0405 	orr.w	r4, r4, r5
 8012b0a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8012b0c:	d03e      	beq.n	8012b8c <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012b0e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012b12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b16:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8012b1a:	2000      	movs	r0, #0
 8012b1c:	bcf0      	pop	{r4, r5, r6, r7}
 8012b1e:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8012b20:	688c      	ldr	r4, [r1, #8]
 8012b22:	614c      	str	r4, [r1, #20]
 8012b24:	e7e7      	b.n	8012af6 <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b26:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 8012b2a:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8012b30:	2d00      	cmp	r5, #0
 8012b32:	d030      	beq.n	8012b96 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012b34:	691f      	ldr	r7, [r3, #16]
 8012b36:	4e25      	ldr	r6, [pc, #148]	; (8012bcc <USB_EP0StartXfer+0x100>)
 8012b38:	403e      	ands	r6, r7
 8012b3a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b3c:	4e24      	ldr	r6, [pc, #144]	; (8012bd0 <USB_EP0StartXfer+0x104>)
 8012b3e:	691f      	ldr	r7, [r3, #16]
 8012b40:	403e      	ands	r6, r7
 8012b42:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8012b44:	688e      	ldr	r6, [r1, #8]
 8012b46:	42b5      	cmp	r5, r6
 8012b48:	d901      	bls.n	8012b4e <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 8012b4a:	4635      	mov	r5, r6
 8012b4c:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012b4e:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012b50:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8012b54:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012b56:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8012b5a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012b5c:	691e      	ldr	r6, [r3, #16]
 8012b5e:	ea45 0506 	orr.w	r5, r5, r6
 8012b62:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8012b64:	d027      	beq.n	8012bb6 <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012b66:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8012b68:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012b6a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8012b6e:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8012b70:	2900      	cmp	r1, #0
 8012b72:	d0d2      	beq.n	8012b1a <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012b74:	f004 020f 	and.w	r2, r4, #15
 8012b78:	2401      	movs	r4, #1
 8012b7a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8012b7e:	4094      	lsls	r4, r2
 8012b80:	431c      	orrs	r4, r3
 8012b82:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8012b86:	2000      	movs	r0, #0
 8012b88:	bcf0      	pop	{r4, r5, r6, r7}
 8012b8a:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8012b8c:	68ca      	ldr	r2, [r1, #12]
 8012b8e:	2a00      	cmp	r2, #0
 8012b90:	d0bd      	beq.n	8012b0e <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012b92:	615a      	str	r2, [r3, #20]
 8012b94:	e7bb      	b.n	8012b0e <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b96:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8012b98:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b9a:	4d0d      	ldr	r5, [pc, #52]	; (8012bd0 <USB_EP0StartXfer+0x104>)
 8012b9c:	ea05 0506 	and.w	r5, r5, r6
 8012ba0:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012ba2:	691d      	ldr	r5, [r3, #16]
 8012ba4:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8012ba8:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012baa:	4d08      	ldr	r5, [pc, #32]	; (8012bcc <USB_EP0StartXfer+0x100>)
 8012bac:	691e      	ldr	r6, [r3, #16]
 8012bae:	ea05 0506 	and.w	r5, r5, r6
 8012bb2:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8012bb4:	d1d7      	bne.n	8012b66 <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 8012bb6:	690a      	ldr	r2, [r1, #16]
 8012bb8:	b102      	cbz	r2, 8012bbc <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012bba:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012bbc:	681a      	ldr	r2, [r3, #0]
}
 8012bbe:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012bc0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8012bc4:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012bc6:	601a      	str	r2, [r3, #0]
}
 8012bc8:	4770      	bx	lr
 8012bca:	bf00      	nop
 8012bcc:	fff80000 	.word	0xfff80000
 8012bd0:	e007ffff 	.word	0xe007ffff

08012bd4 <USB_WritePacket>:
{
 8012bd4:	b410      	push	{r4}
 8012bd6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8012bda:	b964      	cbnz	r4, 8012bf6 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8012bdc:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8012bde:	089b      	lsrs	r3, r3, #2
 8012be0:	d009      	beq.n	8012bf6 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012be2:	3201      	adds	r2, #1
 8012be4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012be8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8012bec:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8012bf0:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012bf2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8012bf4:	d1fa      	bne.n	8012bec <USB_WritePacket+0x18>
}
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop

08012c00 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8012c00:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8012c04:	b570      	push	{r4, r5, r6, lr}
 8012c06:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8012c08:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8012c0c:	d01a      	beq.n	8012c44 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012c0e:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8012c12:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8012c14:	2300      	movs	r3, #0
 8012c16:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012c18:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 8012c1c:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012c1e:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8012c22:	d1f8      	bne.n	8012c16 <USB_ReadPacket+0x16>
    pDest++;
 8012c24:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8012c28:	b15e      	cbz	r6, 8012c42 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012c2a:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8012c2e:	4406      	add	r6, r0
 8012c30:	2200      	movs	r2, #0
 8012c32:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012c34:	fa21 f302 	lsr.w	r3, r1, r2
 8012c38:	3208      	adds	r2, #8
 8012c3a:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 8012c3e:	42b0      	cmp	r0, r6
 8012c40:	d1f8      	bne.n	8012c34 <USB_ReadPacket+0x34>
}
 8012c42:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8012c44:	4608      	mov	r0, r1
 8012c46:	e7ef      	b.n	8012c28 <USB_ReadPacket+0x28>

08012c48 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8012c48:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8012c4a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8012c4c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012c4e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8012c52:	d00c      	beq.n	8012c6e <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012c54:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8012c58:	b10b      	cbz	r3, 8012c5e <USB_EPSetStall+0x16>
 8012c5a:	2a00      	cmp	r2, #0
 8012c5c:	da14      	bge.n	8012c88 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012c5e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012c66:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8012c6a:	2000      	movs	r0, #0
 8012c6c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012c6e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8012c72:	2a00      	cmp	r2, #0
 8012c74:	db00      	blt.n	8012c78 <USB_EPSetStall+0x30>
 8012c76:	b973      	cbnz	r3, 8012c96 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012c78:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012c80:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8012c84:	2000      	movs	r0, #0
 8012c86:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012c88:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012c8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012c90:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8012c94:	e7e3      	b.n	8012c5e <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012c96:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012c9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012c9e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012ca2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012caa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8012cae:	e7e9      	b.n	8012c84 <USB_EPSetStall+0x3c>

08012cb0 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8012cb0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8012cb2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8012cb4:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012cb6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8012cba:	d013      	beq.n	8012ce4 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012cbc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012cc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012cc4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012cc8:	78cb      	ldrb	r3, [r1, #3]
 8012cca:	3b02      	subs	r3, #2
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d901      	bls.n	8012cd4 <USB_EPClearStall+0x24>
}
 8012cd0:	2000      	movs	r0, #0
 8012cd2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012cd4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012cdc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8012ce0:	2000      	movs	r0, #0
 8012ce2:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012ce4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012ce8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012cec:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012cf0:	78cb      	ldrb	r3, [r1, #3]
 8012cf2:	3b02      	subs	r3, #2
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d8eb      	bhi.n	8012cd0 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012cf8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012d00:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8012d04:	2000      	movs	r0, #0
 8012d06:	4770      	bx	lr

08012d08 <USB_SetDevAddress>:
{
 8012d08:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012d0a:	0109      	lsls	r1, r1, #4
}
 8012d0c:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012d0e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012d12:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012d16:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8012d1a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012d1e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8012d22:	4311      	orrs	r1, r2
 8012d24:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8012d28:	4770      	bx	lr
 8012d2a:	bf00      	nop

08012d2c <USB_DevConnect>:
{
 8012d2c:	4603      	mov	r3, r0
}
 8012d2e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012d30:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012d34:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012d38:	f022 0203 	bic.w	r2, r2, #3
 8012d3c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012d40:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8012d44:	f023 0302 	bic.w	r3, r3, #2
 8012d48:	604b      	str	r3, [r1, #4]
}
 8012d4a:	4770      	bx	lr

08012d4c <USB_DevDisconnect>:
{
 8012d4c:	4603      	mov	r3, r0
}
 8012d4e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012d50:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012d54:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012d58:	f022 0203 	bic.w	r2, r2, #3
 8012d5c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012d60:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8012d64:	f043 0302 	orr.w	r3, r3, #2
 8012d68:	604b      	str	r3, [r1, #4]
}
 8012d6a:	4770      	bx	lr

08012d6c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8012d6c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8012d6e:	6980      	ldr	r0, [r0, #24]
}
 8012d70:	4010      	ands	r0, r2
 8012d72:	4770      	bx	lr

08012d74 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8012d74:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012d78:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8012d7c:	4018      	ands	r0, r3
}
 8012d7e:	0c00      	lsrs	r0, r0, #16
 8012d80:	4770      	bx	lr
 8012d82:	bf00      	nop

08012d84 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8012d84:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012d88:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8012d8c:	4018      	ands	r0, r3
}
 8012d8e:	b280      	uxth	r0, r0
 8012d90:	4770      	bx	lr
 8012d92:	bf00      	nop

08012d94 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012d94:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012d98:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012d9c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012da0:	6940      	ldr	r0, [r0, #20]
}
 8012da2:	4010      	ands	r0, r2
 8012da4:	4770      	bx	lr
 8012da6:	bf00      	nop

08012da8 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8012da8:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012dac:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012db0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012db4:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012db8:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012dbc:	40cb      	lsrs	r3, r1
 8012dbe:	01db      	lsls	r3, r3, #7
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	4313      	orrs	r3, r2
}
 8012dc4:	4018      	ands	r0, r3
 8012dc6:	4770      	bx	lr

08012dc8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8012dc8:	6940      	ldr	r0, [r0, #20]
}
 8012dca:	f000 0001 	and.w	r0, r0, #1
 8012dce:	4770      	bx	lr

08012dd0 <USB_ActivateSetup>:
{
 8012dd0:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012dd2:	4a09      	ldr	r2, [pc, #36]	; (8012df8 <USB_ActivateSetup+0x28>)
}
 8012dd4:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012dd6:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8012dda:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012ddc:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8012de0:	4022      	ands	r2, r4
}
 8012de2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012de6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012dea:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8012dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012df2:	604b      	str	r3, [r1, #4]
}
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop
 8012df8:	fffff800 	.word	0xfffff800

08012dfc <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012dfc:	4b14      	ldr	r3, [pc, #80]	; (8012e50 <USB_EP0_OutStart+0x54>)
{
 8012dfe:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012e00:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012e02:	429c      	cmp	r4, r3
 8012e04:	d81a      	bhi.n	8012e3c <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012e06:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012e0a:	2300      	movs	r3, #0
  if (dma == 1U)
 8012e0c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012e0e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012e10:	6903      	ldr	r3, [r0, #16]
 8012e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012e16:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012e18:	6903      	ldr	r3, [r0, #16]
 8012e1a:	f043 0318 	orr.w	r3, r3, #24
 8012e1e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012e20:	6903      	ldr	r3, [r0, #16]
 8012e22:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012e26:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8012e28:	d104      	bne.n	8012e34 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012e2a:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012e2c:	6803      	ldr	r3, [r0, #0]
 8012e2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012e32:	6003      	str	r3, [r0, #0]
}
 8012e34:	2000      	movs	r0, #0
 8012e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e3a:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012e3c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012e40:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	dae0      	bge.n	8012e0a <USB_EP0_OutStart+0xe>
}
 8012e48:	2000      	movs	r0, #0
 8012e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e4e:	4770      	bx	lr
 8012e50:	4f54300a 	.word	0x4f54300a

08012e54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012e54:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012e56:	4903      	ldr	r1, [pc, #12]	; (8012e64 <MX_FATFS_Init+0x10>)
 8012e58:	4803      	ldr	r0, [pc, #12]	; (8012e68 <MX_FATFS_Init+0x14>)
 8012e5a:	f001 f96f 	bl	801413c <FATFS_LinkDriver>
 8012e5e:	4b03      	ldr	r3, [pc, #12]	; (8012e6c <MX_FATFS_Init+0x18>)
 8012e60:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012e62:	bd08      	pop	{r3, pc}
 8012e64:	20002da4 	.word	0x20002da4
 8012e68:	200002e4 	.word	0x200002e4
 8012e6c:	20002da8 	.word	0x20002da8

08012e70 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8012e70:	4b02      	ldr	r3, [pc, #8]	; (8012e7c <USER_initialize+0xc>)
 8012e72:	2201      	movs	r2, #1
 8012e74:	701a      	strb	r2, [r3, #0]
    return Stat;
 8012e76:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8012e78:	4770      	bx	lr
 8012e7a:	bf00      	nop
 8012e7c:	200002e0 	.word	0x200002e0

08012e80 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8012e80:	2000      	movs	r0, #0
 8012e82:	4770      	bx	lr

08012e84 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8012e84:	2001      	movs	r0, #1
 8012e86:	4770      	bx	lr

08012e88 <USER_write>:
 8012e88:	2000      	movs	r0, #0
 8012e8a:	4770      	bx	lr

08012e8c <USER_status>:
 8012e8c:	4b02      	ldr	r3, [pc, #8]	; (8012e98 <USER_status+0xc>)
 8012e8e:	2201      	movs	r2, #1
 8012e90:	701a      	strb	r2, [r3, #0]
 8012e92:	7818      	ldrb	r0, [r3, #0]
 8012e94:	4770      	bx	lr
 8012e96:	bf00      	nop
 8012e98:	200002e0 	.word	0x200002e0

08012e9c <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8012e9c:	2100      	movs	r1, #0
{
 8012e9e:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 8012ea0:	4608      	mov	r0, r1
{
 8012ea2:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 8012ea4:	f003 fe36 	bl	8016b14 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8012ea8:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 8012eaa:	4b1f      	ldr	r3, [pc, #124]	; (8012f28 <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 8012eac:	491f      	ldr	r1, [pc, #124]	; (8012f2c <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 8012eae:	4a20      	ldr	r2, [pc, #128]	; (8012f30 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8012eb0:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 8012eb2:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 8012eb4:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 8012eb6:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8012eb8:	481e      	ldr	r0, [pc, #120]	; (8012f34 <MX_LWIP_Init+0x98>)
 8012eba:	4d1f      	ldr	r5, [pc, #124]	; (8012f38 <MX_LWIP_Init+0x9c>)
 8012ebc:	9002      	str	r0, [sp, #8]
 8012ebe:	481f      	ldr	r0, [pc, #124]	; (8012f3c <MX_LWIP_Init+0xa0>)
 8012ec0:	9001      	str	r0, [sp, #4]
 8012ec2:	4628      	mov	r0, r5
 8012ec4:	f006 fc38 	bl	8019738 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8012ec8:	4628      	mov	r0, r5
 8012eca:	f006 fce3 	bl	8019894 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8012ece:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8012ed2:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8012ed4:	075b      	lsls	r3, r3, #29
 8012ed6:	d524      	bpl.n	8012f22 <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 8012ed8:	f006 fce2 	bl	80198a0 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8012edc:	4918      	ldr	r1, [pc, #96]	; (8012f40 <MX_LWIP_Init+0xa4>)
 8012ede:	4816      	ldr	r0, [pc, #88]	; (8012f38 <MX_LWIP_Init+0x9c>)
 8012ee0:	f006 fd68 	bl	80199b4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8012ee4:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8012ee6:	2101      	movs	r1, #1
 8012ee8:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 8012eea:	4e16      	ldr	r6, [pc, #88]	; (8012f44 <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8012eec:	4c16      	ldr	r4, [pc, #88]	; (8012f48 <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 8012eee:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8012ef2:	f001 fa0d 	bl	8014310 <osSemaphoreCreate>
 8012ef6:	4b15      	ldr	r3, [pc, #84]	; (8012f4c <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 8012ef8:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8012efa:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8012efe:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 8012f00:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8012f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f08:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8012f0c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8012f10:	4631      	mov	r1, r6
 8012f12:	a807      	add	r0, sp, #28
 8012f14:	f001 f944 	bl	80141a0 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8012f18:	4807      	ldr	r0, [pc, #28]	; (8012f38 <MX_LWIP_Init+0x9c>)
 8012f1a:	f00d fdbb 	bl	8020a94 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8012f1e:	b00e      	add	sp, #56	; 0x38
 8012f20:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 8012f22:	f006 fcdf 	bl	80198e4 <netif_set_down>
 8012f26:	e7d9      	b.n	8012edc <MX_LWIP_Init+0x40>
 8012f28:	20002dec 	.word	0x20002dec
 8012f2c:	20002df0 	.word	0x20002df0
 8012f30:	20002dfc 	.word	0x20002dfc
 8012f34:	08016a8d 	.word	0x08016a8d
 8012f38:	20002db0 	.word	0x20002db0
 8012f3c:	0801324d 	.word	0x0801324d
 8012f40:	0801342d 	.word	0x0801342d
 8012f44:	20002df4 	.word	0x20002df4
 8012f48:	08028808 	.word	0x08028808
 8012f4c:	20002dac 	.word	0x20002dac

08012f50 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8012f50:	4b2c      	ldr	r3, [pc, #176]	; (8013004 <low_level_output+0xb4>)
{
 8012f52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8012f56:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 8012f58:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8012f5a:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8012f5c:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 8012f5e:	2900      	cmp	r1, #0
 8012f60:	d04d      	beq.n	8012ffe <low_level_output+0xae>
  bufferoffset = 0;
 8012f62:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012f64:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 8012f68:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8012f6a:	6822      	ldr	r2, [r4, #0]
 8012f6c:	2a00      	cmp	r2, #0
 8012f6e:	db1b      	blt.n	8012fa8 <low_level_output+0x58>
      byteslefttocopy = q->len;
 8012f70:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012f74:	1995      	adds	r5, r2, r6
 8012f76:	454d      	cmp	r5, r9
 8012f78:	d93c      	bls.n	8012ff4 <low_level_output+0xa4>
      payloadoffset = 0;
 8012f7a:	2700      	movs	r7, #0
 8012f7c:	e002      	b.n	8012f84 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012f7e:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8012f80:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012f82:	d921      	bls.n	8012fc8 <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8012f84:	eba9 0a06 	sub.w	sl, r9, r6
 8012f88:	f8db 1004 	ldr.w	r1, [fp, #4]
 8012f8c:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 8012f8e:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8012f90:	4439      	add	r1, r7
 8012f92:	4652      	mov	r2, sl
 8012f94:	f010 face 	bl	8023534 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8012f98:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8012f9a:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8012f9e:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8012fa0:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8012fa2:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8012fa4:	42b3      	cmp	r3, r6
 8012fa6:	daea      	bge.n	8012f7e <low_level_output+0x2e>
        errval = ERR_USE;
 8012fa8:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8012fac:	4b15      	ldr	r3, [pc, #84]	; (8013004 <low_level_output+0xb4>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fb4:	695a      	ldr	r2, [r3, #20]
 8012fb6:	0692      	lsls	r2, r2, #26
 8012fb8:	d503      	bpl.n	8012fc2 <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8012fba:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8012fbc:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8012fbe:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 8012fc0:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 8012fc2:	b003      	add	sp, #12
 8012fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8012fcc:	f8db 1004 	ldr.w	r1, [fp, #4]
 8012fd0:	462a      	mov	r2, r5
 8012fd2:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8012fd4:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8012fd6:	4439      	add	r1, r7
 8012fd8:	f010 faac 	bl	8023534 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8012fdc:	f8db b000 	ldr.w	fp, [fp]
 8012fe0:	9b01      	ldr	r3, [sp, #4]
 8012fe2:	f1bb 0f00 	cmp.w	fp, #0
 8012fe6:	d1c0      	bne.n	8012f6a <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 8012fe8:	4641      	mov	r1, r8
 8012fea:	4806      	ldr	r0, [pc, #24]	; (8013004 <low_level_output+0xb4>)
 8012fec:	f7f6 fc88 	bl	8009900 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	e7db      	b.n	8012fac <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8012ff4:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 8012ff6:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8012ff8:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 8012ffa:	4615      	mov	r5, r2
 8012ffc:	e7e6      	b.n	8012fcc <low_level_output+0x7c>
  uint32_t framelength = 0;
 8012ffe:	4688      	mov	r8, r1
 8013000:	e7f2      	b.n	8012fe8 <low_level_output+0x98>
 8013002:	bf00      	nop
 8013004:	20005ea0 	.word	0x20005ea0

08013008 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8013008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801300c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8013120 <ethernetif_input+0x118>
 8013010:	b083      	sub	sp, #12
 8013012:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8013014:	4b40      	ldr	r3, [pc, #256]	; (8013118 <ethernetif_input+0x110>)
 8013016:	f04f 31ff 	mov.w	r1, #4294967295
 801301a:	6818      	ldr	r0, [r3, #0]
 801301c:	f001 f99e 	bl	801435c <osSemaphoreWait>
 8013020:	2800      	cmp	r0, #0
 8013022:	d1f7      	bne.n	8013014 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8013024:	483d      	ldr	r0, [pc, #244]	; (801311c <ethernetif_input+0x114>)
 8013026:	f00f fdfd 	bl	8022c24 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801302a:	483d      	ldr	r0, [pc, #244]	; (8013120 <ethernetif_input+0x118>)
 801302c:	f7f6 fcec 	bl	8009a08 <HAL_ETH_GetReceivedFrame_IT>
 8013030:	4604      	mov	r4, r0
 8013032:	2800      	cmp	r0, #0
 8013034:	d168      	bne.n	8013108 <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 8013036:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 801303a:	bb51      	cbnz	r1, 8013092 <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 801303c:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013040:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013044:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013048:	b140      	cbz	r0, 801305c <ethernetif_input+0x54>
 801304a:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801304c:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801304e:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013050:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013054:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013056:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013058:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801305a:	d1f7      	bne.n	801304c <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 801305c:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 8013060:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 8013066:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 801306a:	695a      	ldr	r2, [r3, #20]
 801306c:	0612      	lsls	r2, r2, #24
 801306e:	d503      	bpl.n	8013078 <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8013070:	2280      	movs	r2, #128	; 0x80
 8013072:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 8013074:	2200      	movs	r2, #0
 8013076:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 8013078:	f1ba 0f00 	cmp.w	sl, #0
 801307c:	d044      	beq.n	8013108 <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 801307e:	9901      	ldr	r1, [sp, #4]
 8013080:	4650      	mov	r0, sl
 8013082:	690b      	ldr	r3, [r1, #16]
 8013084:	4798      	blx	r3
 8013086:	2800      	cmp	r0, #0
 8013088:	d142      	bne.n	8013110 <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 801308a:	4824      	ldr	r0, [pc, #144]	; (801311c <ethernetif_input+0x114>)
 801308c:	f00f fdd0 	bl	8022c30 <sys_mutex_unlock>
      } while(p!=NULL);
 8013090:	e7c8      	b.n	8013024 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8013092:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8013096:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801309a:	f006 fde3 	bl	8019c64 <pbuf_alloc>
  if (p != NULL)
 801309e:	4682      	mov	sl, r0
 80130a0:	2800      	cmp	r0, #0
 80130a2:	d0cb      	beq.n	801303c <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80130a4:	4683      	mov	fp, r0
    bufferoffset = 0;
 80130a6:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80130a8:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80130ac:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 80130b0:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80130b4:	1854      	adds	r4, r2, r1
 80130b6:	4544      	cmp	r4, r8
 80130b8:	d923      	bls.n	8013102 <ethernetif_input+0xfa>
      payloadoffset = 0;
 80130ba:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80130bc:	f8db 0004 	ldr.w	r0, [fp, #4]
 80130c0:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80130c4:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80130c8:	4439      	add	r1, r7
 80130ca:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80130cc:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80130ce:	f010 fa31 	bl	8023534 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80130d2:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80130d4:	4544      	cmp	r4, r8
        bufferoffset = 0;
 80130d6:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80130da:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80130dc:	d8ee      	bhi.n	80130bc <ethernetif_input+0xb4>
 80130de:	4639      	mov	r1, r7
 80130e0:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80130e2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80130e6:	4428      	add	r0, r5
 80130e8:	f010 fa24 	bl	8023534 <memcpy>
    for(q = p; q != NULL; q = q->next)
 80130ec:	f8db b000 	ldr.w	fp, [fp]
 80130f0:	f1bb 0f00 	cmp.w	fp, #0
 80130f4:	d0a4      	beq.n	8013040 <ethernetif_input+0x38>
 80130f6:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 80130f8:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80130fc:	1854      	adds	r4, r2, r1
 80130fe:	4544      	cmp	r4, r8
 8013100:	d8db      	bhi.n	80130ba <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013102:	4439      	add	r1, r7
      payloadoffset = 0;
 8013104:	2500      	movs	r5, #0
 8013106:	e7ec      	b.n	80130e2 <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 8013108:	4804      	ldr	r0, [pc, #16]	; (801311c <ethernetif_input+0x114>)
 801310a:	f00f fd91 	bl	8022c30 <sys_mutex_unlock>
      } while(p!=NULL);
 801310e:	e781      	b.n	8013014 <ethernetif_input+0xc>
            pbuf_free(p);
 8013110:	4650      	mov	r0, sl
 8013112:	f006 ff5d 	bl	8019fd0 <pbuf_free>
 8013116:	e7b8      	b.n	801308a <ethernetif_input+0x82>
 8013118:	20005ee8 	.word	0x20005ee8
 801311c:	2001e1a8 	.word	0x2001e1a8
 8013120:	20005ea0 	.word	0x20005ea0

08013124 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8013124:	4b41      	ldr	r3, [pc, #260]	; (801322c <HAL_ETH_MspInit+0x108>)
 8013126:	6802      	ldr	r2, [r0, #0]
{
 8013128:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 801312a:	429a      	cmp	r2, r3
{
 801312c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801312e:	f04f 0400 	mov.w	r4, #0
 8013132:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8013136:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 801313a:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 801313c:	d001      	beq.n	8013142 <HAL_ETH_MspInit+0x1e>
}
 801313e:	b00d      	add	sp, #52	; 0x34
 8013140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8013142:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013146:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8013148:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801314a:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 801314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801314e:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013150:	4837      	ldr	r0, [pc, #220]	; (8013230 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8013152:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8013156:	631a      	str	r2, [r3, #48]	; 0x30
 8013158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801315a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 801315e:	9200      	str	r2, [sp, #0]
 8013160:	9a00      	ldr	r2, [sp, #0]
 8013162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013164:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013168:	631a      	str	r2, [r3, #48]	; 0x30
 801316a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801316c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8013170:	9201      	str	r2, [sp, #4]
 8013172:	9a01      	ldr	r2, [sp, #4]
 8013174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013176:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801317a:	631a      	str	r2, [r3, #48]	; 0x30
 801317c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801317e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8013182:	9202      	str	r2, [sp, #8]
 8013184:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013188:	f042 0204 	orr.w	r2, r2, #4
 801318c:	631a      	str	r2, [r3, #48]	; 0x30
 801318e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013190:	f002 0204 	and.w	r2, r2, #4
 8013194:	9203      	str	r2, [sp, #12]
 8013196:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801319a:	f042 0201 	orr.w	r2, r2, #1
 801319e:	631a      	str	r2, [r3, #48]	; 0x30
 80131a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80131a2:	f002 0201 	and.w	r2, r2, #1
 80131a6:	9204      	str	r2, [sp, #16]
 80131a8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80131aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80131ac:	433a      	orrs	r2, r7
 80131ae:	631a      	str	r2, [r3, #48]	; 0x30
 80131b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80131b2:	403a      	ands	r2, r7
 80131b4:	9205      	str	r2, [sp, #20]
 80131b6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80131b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80131ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80131be:	631a      	str	r2, [r3, #48]	; 0x30
 80131c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131c2:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80131c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80131c8:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131ca:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80131ce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80131d0:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80131d2:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80131d4:	f7f7 f984 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80131d8:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80131da:	a907      	add	r1, sp, #28
 80131dc:	4815      	ldr	r0, [pc, #84]	; (8013234 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80131de:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131e0:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80131e4:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80131e8:	f7f7 f97a 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80131ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80131f0:	a907      	add	r1, sp, #28
 80131f2:	4811      	ldr	r0, [pc, #68]	; (8013238 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80131f4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131f6:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80131fa:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80131fe:	f7f7 f96f 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8013202:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013206:	a907      	add	r1, sp, #28
 8013208:	480c      	ldr	r0, [pc, #48]	; (801323c <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 801320a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801320c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801320e:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013210:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013214:	f7f7 f964 	bl	800a4e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8013218:	4622      	mov	r2, r4
 801321a:	2106      	movs	r1, #6
 801321c:	203d      	movs	r0, #61	; 0x3d
 801321e:	f7f4 fe99 	bl	8007f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8013222:	203d      	movs	r0, #61	; 0x3d
 8013224:	f7f4 fee0 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
}
 8013228:	b00d      	add	sp, #52	; 0x34
 801322a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801322c:	40028000 	.word	0x40028000
 8013230:	40020800 	.word	0x40020800
 8013234:	40020000 	.word	0x40020000
 8013238:	40020400 	.word	0x40020400
 801323c:	40021800 	.word	0x40021800

08013240 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8013240:	4b01      	ldr	r3, [pc, #4]	; (8013248 <HAL_ETH_RxCpltCallback+0x8>)
 8013242:	6818      	ldr	r0, [r3, #0]
 8013244:	f001 b8b6 	b.w	80143b4 <osSemaphoreRelease>
 8013248:	20005ee8 	.word	0x20005ee8

0801324c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801324c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801324e:	4604      	mov	r4, r0
{
 8013250:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013252:	2800      	cmp	r0, #0
 8013254:	f000 809e 	beq.w	8013394 <ethernetif_init+0x148>
  heth.Instance = ETH;
 8013258:	4d52      	ldr	r5, [pc, #328]	; (80133a4 <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 801325a:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 801325c:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8013260:	4b51      	ldr	r3, [pc, #324]	; (80133a8 <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 8013262:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 8013264:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 8013266:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 801326a:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 801326e:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 8013270:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 8013272:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 8013274:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8013278:	494c      	ldr	r1, [pc, #304]	; (80133ac <ethernetif_init+0x160>)
  heth.Instance = ETH;
 801327a:	4a4d      	ldr	r2, [pc, #308]	; (80133b0 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 801327c:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 801327e:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8013280:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8013282:	494c      	ldr	r1, [pc, #304]	; (80133b4 <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 8013284:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8013288:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 801328a:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801328c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 8013290:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8013294:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8013298:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801329c:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 801329e:	4042      	eors	r2, r0
 80132a0:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 80132a4:	404a      	eors	r2, r1
 80132a6:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80132aa:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80132ae:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80132b2:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 80132b6:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80132ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80132be:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80132c0:	404b      	eors	r3, r1
 80132c2:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80132c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80132ca:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 80132ce:	ab01      	add	r3, sp, #4
 80132d0:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80132d2:	f7f6 fcbd 	bl	8009c50 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80132d6:	b928      	cbnz	r0, 80132e4 <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80132d8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80132dc:	f043 0304 	orr.w	r3, r3, #4
 80132e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80132e4:	2304      	movs	r3, #4
 80132e6:	4a34      	ldr	r2, [pc, #208]	; (80133b8 <ethernetif_init+0x16c>)
 80132e8:	4934      	ldr	r1, [pc, #208]	; (80133bc <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 80132ea:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80132ec:	482d      	ldr	r0, [pc, #180]	; (80133a4 <ethernetif_init+0x158>)
 80132ee:	f7f6 fa83 	bl	80097f8 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80132f2:	2304      	movs	r3, #4
 80132f4:	4a32      	ldr	r2, [pc, #200]	; (80133c0 <ethernetif_init+0x174>)
 80132f6:	4933      	ldr	r1, [pc, #204]	; (80133c4 <ethernetif_init+0x178>)
 80132f8:	482a      	ldr	r0, [pc, #168]	; (80133a4 <ethernetif_init+0x158>)
 80132fa:	f7f6 fac3 	bl	8009884 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80132fe:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8013300:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8013302:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 8013306:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801330a:	4e2f      	ldr	r6, [pc, #188]	; (80133c8 <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801330c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8013310:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8013314:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8013316:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8013318:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801331c:	7858      	ldrb	r0, [r3, #1]
 801331e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8013322:	7898      	ldrb	r0, [r3, #2]
 8013324:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8013328:	78d8      	ldrb	r0, [r3, #3]
 801332a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801332e:	7918      	ldrb	r0, [r3, #4]
 8013330:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8013334:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8013336:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 8013338:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801333a:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801333c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8013340:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 8013344:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8013348:	f000 ffe2 	bl	8014310 <osSemaphoreCreate>
 801334c:	4b1f      	ldr	r3, [pc, #124]	; (80133cc <ethernetif_init+0x180>)
 801334e:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8013350:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013354:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013358:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 801335c:	4621      	mov	r1, r4
 801335e:	a805      	add	r0, sp, #20
 8013360:	f000 ff1e 	bl	80141a0 <osThreadCreate>
  HAL_ETH_Start(&heth);
 8013364:	480f      	ldr	r0, [pc, #60]	; (80133a4 <ethernetif_init+0x158>)
 8013366:	f7f6 fdc9 	bl	8009efc <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 801336a:	466a      	mov	r2, sp
 801336c:	211d      	movs	r1, #29
 801336e:	480d      	ldr	r0, [pc, #52]	; (80133a4 <ethernetif_init+0x158>)
 8013370:	f7f6 fbdc 	bl	8009b2c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8013374:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8013376:	211d      	movs	r1, #29
 8013378:	480a      	ldr	r0, [pc, #40]	; (80133a4 <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 801337a:	f042 020b 	orr.w	r2, r2, #11
 801337e:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8013380:	f7f6 fc1e 	bl	8009bc0 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8013384:	466a      	mov	r2, sp
 8013386:	211d      	movs	r1, #29
 8013388:	4806      	ldr	r0, [pc, #24]	; (80133a4 <ethernetif_init+0x158>)
 801338a:	f7f6 fbcf 	bl	8009b2c <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 801338e:	4638      	mov	r0, r7
 8013390:	b00d      	add	sp, #52	; 0x34
 8013392:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013394:	4b0e      	ldr	r3, [pc, #56]	; (80133d0 <ethernetif_init+0x184>)
 8013396:	f240 223a 	movw	r2, #570	; 0x23a
 801339a:	490e      	ldr	r1, [pc, #56]	; (80133d4 <ethernetif_init+0x188>)
 801339c:	480e      	ldr	r0, [pc, #56]	; (80133d8 <ethernetif_init+0x18c>)
 801339e:	f011 f88d 	bl	80244bc <iprintf>
 80133a2:	e759      	b.n	8013258 <ethernetif_init+0xc>
 80133a4:	20005ea0 	.word	0x20005ea0
 80133a8:	1ff0f000 	.word	0x1ff0f000
 80133ac:	08021675 	.word	0x08021675
 80133b0:	40028000 	.word	0x40028000
 80133b4:	08012f51 	.word	0x08012f51
 80133b8:	200046d0 	.word	0x200046d0
 80133bc:	20002e80 	.word	0x20002e80
 80133c0:	20002f00 	.word	0x20002f00
 80133c4:	20002e00 	.word	0x20002e00
 80133c8:	08028824 	.word	0x08028824
 80133cc:	20005ee8 	.word	0x20005ee8
 80133d0:	0802b2cc 	.word	0x0802b2cc
 80133d4:	0802b2e8 	.word	0x0802b2e8
 80133d8:	0802ac68 	.word	0x0802ac68

080133dc <sys_now>:
 80133dc:	f7f4 b962 	b.w	80076a4 <HAL_GetTick>

080133e0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80133e0:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 80133e2:	2300      	movs	r3, #0
{
 80133e4:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80133e6:	4d0f      	ldr	r5, [pc, #60]	; (8013424 <ethernetif_set_link+0x44>)
{
 80133e8:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 80133ea:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 80133ec:	e003      	b.n	80133f6 <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80133ee:	b1b3      	cbz	r3, 801341e <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80133f0:	20c8      	movs	r0, #200	; 0xc8
 80133f2:	f000 ff07 	bl	8014204 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80133f6:	aa01      	add	r2, sp, #4
 80133f8:	2101      	movs	r1, #1
 80133fa:	4628      	mov	r0, r5
 80133fc:	f7f6 fb96 	bl	8009b2c <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8013400:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 8013402:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8013404:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 8013408:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 801340c:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 801340e:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8013410:	d4ed      	bmi.n	80133ee <ethernetif_set_link+0xe>
 8013412:	b113      	cbz	r3, 801341a <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 8013414:	f006 fa8e 	bl	8019934 <netif_set_link_up>
 8013418:	e7ea      	b.n	80133f0 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 801341a:	0753      	lsls	r3, r2, #29
 801341c:	d5e8      	bpl.n	80133f0 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 801341e:	f006 faaf 	bl	8019980 <netif_set_link_down>
 8013422:	e7e5      	b.n	80133f0 <ethernetif_set_link+0x10>
 8013424:	20005ea0 	.word	0x20005ea0

08013428 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8013428:	4770      	bx	lr
 801342a:	bf00      	nop

0801342c <ethernetif_update_config>:
{
 801342c:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 801342e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8013432:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 8013434:	2100      	movs	r1, #0
{
 8013436:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8013438:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 801343a:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 801343c:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 801343e:	d538      	bpl.n	80134b2 <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8013440:	4c32      	ldr	r4, [pc, #200]	; (801350c <ethernetif_update_config+0xe0>)
 8013442:	6863      	ldr	r3, [r4, #4]
 8013444:	b9e3      	cbnz	r3, 8013480 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8013446:	68a3      	ldr	r3, [r4, #8]
 8013448:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 801344c:	d140      	bne.n	80134d0 <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 801344e:	68e2      	ldr	r2, [r4, #12]
 8013450:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8013454:	d135      	bne.n	80134c2 <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8013456:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8013458:	08d2      	lsrs	r2, r2, #3
 801345a:	2100      	movs	r1, #0
 801345c:	482b      	ldr	r0, [pc, #172]	; (801350c <ethernetif_update_config+0xe0>)
 801345e:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8013462:	b292      	uxth	r2, r2
 8013464:	f7f6 fbac 	bl	8009bc0 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8013468:	2100      	movs	r1, #0
 801346a:	4828      	ldr	r0, [pc, #160]	; (801350c <ethernetif_update_config+0xe0>)
 801346c:	f7f6 fde0 	bl	800a030 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8013470:	4826      	ldr	r0, [pc, #152]	; (801350c <ethernetif_update_config+0xe0>)
 8013472:	f7f6 fd43 	bl	8009efc <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8013476:	4628      	mov	r0, r5
 8013478:	f7ff ffd6 	bl	8013428 <ethernetif_notify_conn_changed>
}
 801347c:	b003      	add	sp, #12
 801347e:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8013480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013484:	4620      	mov	r0, r4
 8013486:	f7f6 fb9b 	bl	8009bc0 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 801348a:	f7f4 f90b 	bl	80076a4 <HAL_GetTick>
 801348e:	9000      	str	r0, [sp, #0]
 8013490:	e002      	b.n	8013498 <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8013492:	9b01      	ldr	r3, [sp, #4]
 8013494:	069a      	lsls	r2, r3, #26
 8013496:	d425      	bmi.n	80134e4 <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8013498:	aa01      	add	r2, sp, #4
 801349a:	2101      	movs	r1, #1
 801349c:	4620      	mov	r0, r4
 801349e:	f7f6 fb45 	bl	8009b2c <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 80134a2:	f7f4 f8ff 	bl	80076a4 <HAL_GetTick>
 80134a6:	9b00      	ldr	r3, [sp, #0]
 80134a8:	1ac3      	subs	r3, r0, r3
 80134aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80134ae:	d9f0      	bls.n	8013492 <ethernetif_update_config+0x66>
 80134b0:	e7c9      	b.n	8013446 <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 80134b2:	4816      	ldr	r0, [pc, #88]	; (801350c <ethernetif_update_config+0xe0>)
 80134b4:	f7f6 fd6e 	bl	8009f94 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 80134b8:	4628      	mov	r0, r5
 80134ba:	f7ff ffb5 	bl	8013428 <ethernetif_notify_conn_changed>
}
 80134be:	b003      	add	sp, #12
 80134c0:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80134c2:	f240 21e3 	movw	r1, #739	; 0x2e3
 80134c6:	4812      	ldr	r0, [pc, #72]	; (8013510 <ethernetif_update_config+0xe4>)
 80134c8:	f7f0 fd40 	bl	8003f4c <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80134cc:	68e2      	ldr	r2, [r4, #12]
 80134ce:	e7c2      	b.n	8013456 <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 80134d0:	f240 21e2 	movw	r1, #738	; 0x2e2
 80134d4:	480e      	ldr	r0, [pc, #56]	; (8013510 <ethernetif_update_config+0xe4>)
 80134d6:	f7f0 fd39 	bl	8003f4c <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80134da:	68e2      	ldr	r2, [r4, #12]
 80134dc:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 80134e0:	d0b9      	beq.n	8013456 <ethernetif_update_config+0x2a>
 80134e2:	e7ee      	b.n	80134c2 <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80134e4:	aa01      	add	r2, sp, #4
 80134e6:	2110      	movs	r1, #16
 80134e8:	4808      	ldr	r0, [pc, #32]	; (801350c <ethernetif_update_config+0xe0>)
 80134ea:	f7f6 fb1f 	bl	8009b2c <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80134ee:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80134f0:	f013 0204 	ands.w	r2, r3, #4
 80134f4:	bf18      	it	ne
 80134f6:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 80134fa:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 80134fc:	bf4c      	ite	mi
 80134fe:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8013500:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8013504:	60e2      	str	r2, [r4, #12]
 8013506:	60a3      	str	r3, [r4, #8]
 8013508:	e7ae      	b.n	8013468 <ethernetif_update_config+0x3c>
 801350a:	bf00      	nop
 801350c:	20005ea0 	.word	0x20005ea0
 8013510:	0802b2cc 	.word	0x0802b2cc

08013514 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013514:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8013518:	b183      	cbz	r3, 801353c <USBD_CDC_EP0_RxReady+0x28>
{
 801351a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801351c:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013520:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8013524:	28ff      	cmp	r0, #255	; 0xff
 8013526:	d007      	beq.n	8013538 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013528:	689b      	ldr	r3, [r3, #8]
 801352a:	4621      	mov	r1, r4
 801352c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8013530:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8013532:	23ff      	movs	r3, #255	; 0xff
 8013534:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8013538:	2000      	movs	r0, #0
 801353a:	bd10      	pop	{r4, pc}
 801353c:	2000      	movs	r0, #0
 801353e:	4770      	bx	lr

08013540 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013540:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013542:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 8013544:	4801      	ldr	r0, [pc, #4]	; (801354c <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013546:	801a      	strh	r2, [r3, #0]
}
 8013548:	4770      	bx	lr
 801354a:	bf00      	nop
 801354c:	20000330 	.word	0x20000330

08013550 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013550:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013552:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 8013554:	4801      	ldr	r0, [pc, #4]	; (801355c <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013556:	801a      	strh	r2, [r3, #0]
}
 8013558:	4770      	bx	lr
 801355a:	bf00      	nop
 801355c:	20000374 	.word	0x20000374

08013560 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013560:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013562:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8013564:	4801      	ldr	r0, [pc, #4]	; (801356c <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013566:	801a      	strh	r2, [r3, #0]
}
 8013568:	4770      	bx	lr
 801356a:	bf00      	nop
 801356c:	200003c4 	.word	0x200003c4

08013570 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013570:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013572:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8013574:	4801      	ldr	r0, [pc, #4]	; (801357c <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013576:	801a      	strh	r2, [r3, #0]
}
 8013578:	4770      	bx	lr
 801357a:	bf00      	nop
 801357c:	200003b8 	.word	0x200003b8

08013580 <USBD_CDC_DataOut>:
{
 8013580:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013582:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8013586:	b17d      	cbz	r5, 80135a8 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013588:	4604      	mov	r4, r0
 801358a:	f00f fdc7 	bl	802311c <USBD_LL_GetRxDataSize>
 801358e:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013590:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8013594:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8013598:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 801359c:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801359e:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80135a2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80135a4:	2000      	movs	r0, #0
}
 80135a6:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80135a8:	2003      	movs	r0, #3
}
 80135aa:	bd38      	pop	{r3, r4, r5, pc}

080135ac <USBD_CDC_DataIn>:
{
 80135ac:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 80135ae:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 80135b2:	b34d      	cbz	r5, 8013608 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80135b4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80135b8:	4686      	mov	lr, r0
 80135ba:	460a      	mov	r2, r1
 80135bc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80135c0:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80135c4:	b15b      	cbz	r3, 80135de <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80135c6:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 80135ca:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80135ce:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80135d2:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80135d4:	fbb3 f6f4 	udiv	r6, r3, r4
 80135d8:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80135dc:	b164      	cbz	r4, 80135f8 <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80135de:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 80135e2:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80135e4:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80135e8:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 80135ec:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 80135ee:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80135f2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80135f4:	4620      	mov	r0, r4
}
 80135f6:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80135f8:	4623      	mov	r3, r4
 80135fa:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 80135fc:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013600:	f00f fd70 	bl	80230e4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8013604:	4620      	mov	r0, r4
}
 8013606:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8013608:	2003      	movs	r0, #3
}
 801360a:	bd70      	pop	{r4, r5, r6, pc}

0801360c <USBD_CDC_Setup>:
{
 801360c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801360e:	f891 c000 	ldrb.w	ip, [r1]
{
 8013612:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 8013614:	2300      	movs	r3, #0
{
 8013616:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013618:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 801361c:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801361e:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8013622:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8013626:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801362a:	d01c      	beq.n	8013666 <USBD_CDC_Setup+0x5a>
 801362c:	2e20      	cmp	r6, #32
 801362e:	d112      	bne.n	8013656 <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8013630:	88ca      	ldrh	r2, [r1, #6]
 8013632:	2a00      	cmp	r2, #0
 8013634:	d036      	beq.n	80136a4 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 8013636:	f01c 0f80 	tst.w	ip, #128	; 0x80
 801363a:	d055      	beq.n	80136e8 <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 801363c:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801363e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8013642:	4639      	mov	r1, r7
 8013644:	7860      	ldrb	r0, [r4, #1]
 8013646:	689b      	ldr	r3, [r3, #8]
 8013648:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801364a:	88e2      	ldrh	r2, [r4, #6]
 801364c:	4639      	mov	r1, r7
 801364e:	4628      	mov	r0, r5
 8013650:	f000 fd2c 	bl	80140ac <USBD_CtlSendData>
 8013654:	e004      	b.n	8013660 <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 8013656:	4621      	mov	r1, r4
 8013658:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 801365a:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 801365c:	f000 fcf0 	bl	8014040 <USBD_CtlError>
}
 8013660:	4630      	mov	r0, r6
 8013662:	b003      	add	sp, #12
 8013664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8013666:	784b      	ldrb	r3, [r1, #1]
 8013668:	2b0b      	cmp	r3, #11
 801366a:	d8f4      	bhi.n	8013656 <USBD_CDC_Setup+0x4a>
 801366c:	a201      	add	r2, pc, #4	; (adr r2, 8013674 <USBD_CDC_Setup+0x68>)
 801366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013672:	bf00      	nop
 8013674:	080136b7 	.word	0x080136b7
 8013678:	08013661 	.word	0x08013661
 801367c:	08013657 	.word	0x08013657
 8013680:	08013657 	.word	0x08013657
 8013684:	08013657 	.word	0x08013657
 8013688:	08013657 	.word	0x08013657
 801368c:	08013657 	.word	0x08013657
 8013690:	08013657 	.word	0x08013657
 8013694:	08013657 	.word	0x08013657
 8013698:	08013657 	.word	0x08013657
 801369c:	080136d5 	.word	0x080136d5
 80136a0:	080136cb 	.word	0x080136cb
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80136a4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 80136a8:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80136aa:	7848      	ldrb	r0, [r1, #1]
 80136ac:	689b      	ldr	r3, [r3, #8]
 80136ae:	4798      	blx	r3
}
 80136b0:	4630      	mov	r0, r6
 80136b2:	b003      	add	sp, #12
 80136b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136b6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80136ba:	2a03      	cmp	r2, #3
 80136bc:	d01e      	beq.n	80136fc <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 80136be:	4621      	mov	r1, r4
 80136c0:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 80136c2:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 80136c4:	f000 fcbc 	bl	8014040 <USBD_CtlError>
        ret = USBD_FAIL;
 80136c8:	e7ca      	b.n	8013660 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80136ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80136ce:	2b03      	cmp	r3, #3
 80136d0:	d0c6      	beq.n	8013660 <USBD_CDC_Setup+0x54>
 80136d2:	e7f4      	b.n	80136be <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80136d8:	2b03      	cmp	r3, #3
 80136da:	d1f0      	bne.n	80136be <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80136dc:	2201      	movs	r2, #1
 80136de:	f10d 0105 	add.w	r1, sp, #5
 80136e2:	f000 fce3 	bl	80140ac <USBD_CtlSendData>
 80136e6:	e7bb      	b.n	8013660 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 80136e8:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 80136ea:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 80136ec:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 80136f0:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80136f4:	4639      	mov	r1, r7
 80136f6:	f000 fcf1 	bl	80140dc <USBD_CtlPrepareRx>
 80136fa:	e7b1      	b.n	8013660 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80136fc:	2202      	movs	r2, #2
 80136fe:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8013702:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013704:	f000 fcd2 	bl	80140ac <USBD_CtlSendData>
 8013708:	e7aa      	b.n	8013660 <USBD_CDC_Setup+0x54>
 801370a:	bf00      	nop

0801370c <USBD_CDC_DeInit>:
{
 801370c:	b538      	push	{r3, r4, r5, lr}
 801370e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013710:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013712:	2181      	movs	r1, #129	; 0x81
 8013714:	f00f fc9a 	bl	802304c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013718:	2101      	movs	r1, #1
 801371a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801371c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801371e:	f00f fc95 	bl	802304c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013722:	2182      	movs	r1, #130	; 0x82
 8013724:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013726:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801372a:	f00f fc8f 	bl	802304c <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 801372e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013732:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8013734:	b14b      	cbz	r3, 801374a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013736:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 801373a:	685b      	ldr	r3, [r3, #4]
 801373c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801373e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8013742:	f00f fedf 	bl	8023504 <free>
    pdev->pClassData = NULL;
 8013746:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 801374a:	2000      	movs	r0, #0
 801374c:	bd38      	pop	{r3, r4, r5, pc}
 801374e:	bf00      	nop

08013750 <USBD_CDC_Init>:
{
 8013750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013754:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013756:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801375a:	f00f fecb 	bl	80234f4 <malloc>
  if (hcdc == NULL)
 801375e:	4605      	mov	r5, r0
 8013760:	2800      	cmp	r0, #0
 8013762:	d04c      	beq.n	80137fe <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013764:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8013766:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801376a:	b393      	cbz	r3, 80137d2 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801376c:	2340      	movs	r3, #64	; 0x40
 801376e:	2202      	movs	r2, #2
 8013770:	2181      	movs	r1, #129	; 0x81
 8013772:	4620      	mov	r0, r4
 8013774:	f00f fc58 	bl	8023028 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013778:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801377a:	2340      	movs	r3, #64	; 0x40
 801377c:	4631      	mov	r1, r6
 801377e:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013780:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013782:	4620      	mov	r0, r4
 8013784:	f00f fc50 	bl	8023028 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013788:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801378a:	2203      	movs	r2, #3
 801378c:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801378e:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013792:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013794:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013798:	2308      	movs	r3, #8
 801379a:	f00f fc45 	bl	8023028 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801379e:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80137a2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 80137a6:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80137a8:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137b0:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 80137b2:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 80137b6:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137ba:	b9ae      	cbnz	r6, 80137e8 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80137bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137c0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80137c4:	4641      	mov	r1, r8
 80137c6:	4620      	mov	r0, r4
 80137c8:	f00f fc9a 	bl	8023100 <USBD_LL_PrepareReceive>
}
 80137cc:	4630      	mov	r0, r6
 80137ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80137d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137d6:	2202      	movs	r2, #2
 80137d8:	2181      	movs	r1, #129	; 0x81
 80137da:	4620      	mov	r0, r4
 80137dc:	f00f fc24 	bl	8023028 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80137e0:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80137e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137e6:	e7c9      	b.n	801377c <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 80137e8:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80137ea:	2340      	movs	r3, #64	; 0x40
 80137ec:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80137f0:	4641      	mov	r1, r8
 80137f2:	4620      	mov	r0, r4
 80137f4:	f00f fc84 	bl	8023100 <USBD_LL_PrepareReceive>
}
 80137f8:	4630      	mov	r0, r6
 80137fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 80137fe:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8013800:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013804:	e7e2      	b.n	80137cc <USBD_CDC_Init+0x7c>
 8013806:	bf00      	nop

08013808 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013808:	4603      	mov	r3, r0
  if (fops == NULL)
 801380a:	b119      	cbz	r1, 8013814 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 801380c:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 801380e:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 8013812:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8013814:	2003      	movs	r0, #3
}
 8013816:	4770      	bx	lr

08013818 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013818:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 801381a:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801381c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8013820:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013824:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8013828:	4770      	bx	lr
 801382a:	bf00      	nop

0801382c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801382c:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 801382e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8013830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013834:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8013838:	4770      	bx	lr
 801383a:	bf00      	nop

0801383c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801383c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8013840:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8013842:	b19a      	cbz	r2, 801386c <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013844:	7c04      	ldrb	r4, [r0, #16]
 8013846:	b144      	cbz	r4, 801385a <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013848:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801384a:	2340      	movs	r3, #64	; 0x40
 801384c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8013850:	2101      	movs	r1, #1
 8013852:	f00f fc55 	bl	8023100 <USBD_LL_PrepareReceive>
}
 8013856:	4620      	mov	r0, r4
 8013858:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801385a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801385e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8013862:	2101      	movs	r1, #1
 8013864:	f00f fc4c 	bl	8023100 <USBD_LL_PrepareReceive>
}
 8013868:	4620      	mov	r0, r4
 801386a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 801386c:	2403      	movs	r4, #3
}
 801386e:	4620      	mov	r0, r4
 8013870:	bd10      	pop	{r4, pc}
 8013872:	bf00      	nop

08013874 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013874:	b1a0      	cbz	r0, 80138a0 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8013876:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801387a:	b113      	cbz	r3, 8013882 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 801387c:	2300      	movs	r3, #0
 801387e:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8013882:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8013886:	b113      	cbz	r3, 801388e <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8013888:	2300      	movs	r3, #0
 801388a:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801388e:	b109      	cbz	r1, 8013894 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8013890:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013894:	2301      	movs	r3, #1
  pdev->id = id;
 8013896:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013898:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801389c:	f00f bb84 	b.w	8022fa8 <USBD_LL_Init>

  return ret;
}
 80138a0:	2003      	movs	r0, #3
 80138a2:	4770      	bx	lr

080138a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80138a4:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 80138a6:	2400      	movs	r4, #0
{
 80138a8:	b083      	sub	sp, #12
  uint16_t len = 0U;
 80138aa:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 80138ae:	b159      	cbz	r1, 80138c8 <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80138b0:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80138b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80138b4:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 80138b8:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80138bc:	4798      	blx	r3
 80138be:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 80138c2:	4620      	mov	r0, r4
 80138c4:	b003      	add	sp, #12
 80138c6:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80138c8:	2403      	movs	r4, #3
}
 80138ca:	4620      	mov	r0, r4
 80138cc:	b003      	add	sp, #12
 80138ce:	bd30      	pop	{r4, r5, pc}

080138d0 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80138d0:	f00f bb9c 	b.w	802300c <USBD_LL_Start>

080138d4 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80138d4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80138d8:	b10b      	cbz	r3, 80138de <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	4718      	bx	r3
  }

  return ret;
}
 80138de:	2003      	movs	r0, #3
 80138e0:	4770      	bx	lr
 80138e2:	bf00      	nop

080138e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138e4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80138e6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80138ea:	b10b      	cbz	r3, 80138f0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80138ec:	685b      	ldr	r3, [r3, #4]
 80138ee:	4798      	blx	r3
  }

  return USBD_OK;
}
 80138f0:	2000      	movs	r0, #0
 80138f2:	bd08      	pop	{r3, pc}

080138f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80138f4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80138f6:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 80138fa:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80138fc:	4628      	mov	r0, r5
 80138fe:	f000 fb93 	bl	8014028 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013902:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8013904:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8013908:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 801390c:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8013910:	f001 031f 	and.w	r3, r1, #31
 8013914:	4293      	cmp	r3, r2
 8013916:	d009      	beq.n	801392c <USBD_LL_SetupStage+0x38>
 8013918:	2b02      	cmp	r3, #2
 801391a:	d013      	beq.n	8013944 <USBD_LL_SetupStage+0x50>
 801391c:	b163      	cbz	r3, 8013938 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801391e:	4620      	mov	r0, r4
 8013920:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8013924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013928:	f00f bb9e 	b.w	8023068 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801392c:	4629      	mov	r1, r5
 801392e:	4620      	mov	r0, r4
}
 8013930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013934:	f000 ba9e 	b.w	8013e74 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013938:	4629      	mov	r1, r5
 801393a:	4620      	mov	r0, r4
}
 801393c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013940:	f000 b8fa 	b.w	8013b38 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013944:	4629      	mov	r1, r5
 8013946:	4620      	mov	r0, r4
}
 8013948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801394c:	f000 baca 	b.w	8013ee4 <USBD_StdEPReq>

08013950 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013950:	b570      	push	{r4, r5, r6, lr}
 8013952:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013954:	b939      	cbnz	r1, 8013966 <USBD_LL_DataOutStage+0x16>
 8013956:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013958:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 801395c:	460c      	mov	r4, r1
 801395e:	2a03      	cmp	r2, #3
 8013960:	d00e      	beq.n	8013980 <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8013962:	2000      	movs	r0, #0
}
 8013964:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8013966:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801396a:	699b      	ldr	r3, [r3, #24]
 801396c:	b133      	cbz	r3, 801397c <USBD_LL_DataOutStage+0x2c>
 801396e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013972:	2a03      	cmp	r2, #3
 8013974:	d102      	bne.n	801397c <USBD_LL_DataOutStage+0x2c>
}
 8013976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801397a:	4718      	bx	r3
    return USBD_FAIL;
 801397c:	2003      	movs	r0, #3
}
 801397e:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8013980:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8013984:	4291      	cmp	r1, r2
 8013986:	d80d      	bhi.n	80139a4 <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013988:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801398c:	691b      	ldr	r3, [r3, #16]
 801398e:	b123      	cbz	r3, 801399a <USBD_LL_DataOutStage+0x4a>
 8013990:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013994:	2a03      	cmp	r2, #3
 8013996:	d100      	bne.n	801399a <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8013998:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 801399a:	4628      	mov	r0, r5
 801399c:	f000 fbb6 	bl	801410c <USBD_CtlSendStatus>
  return USBD_OK;
 80139a0:	2000      	movs	r0, #0
 80139a2:	e7df      	b.n	8013964 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 80139a4:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80139a6:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 80139a8:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80139ac:	bf28      	it	cs
 80139ae:	460a      	movcs	r2, r1
 80139b0:	4619      	mov	r1, r3
 80139b2:	f000 fba1 	bl	80140f8 <USBD_CtlContinueRx>
  return USBD_OK;
 80139b6:	4620      	mov	r0, r4
}
 80139b8:	bd70      	pop	{r4, r5, r6, pc}
 80139ba:	bf00      	nop

080139bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80139bc:	b570      	push	{r4, r5, r6, lr}
 80139be:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80139c0:	b949      	cbnz	r1, 80139d6 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80139c2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80139c6:	2b02      	cmp	r3, #2
 80139c8:	d012      	beq.n	80139f0 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80139ca:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	d027      	beq.n	8013a22 <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80139d2:	2000      	movs	r0, #0
}
 80139d4:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80139d6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80139da:	695b      	ldr	r3, [r3, #20]
 80139dc:	b133      	cbz	r3, 80139ec <USBD_LL_DataInStage+0x30>
 80139de:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80139e2:	2a03      	cmp	r2, #3
 80139e4:	d102      	bne.n	80139ec <USBD_LL_DataInStage+0x30>
}
 80139e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80139ea:	4718      	bx	r3
    return USBD_FAIL;
 80139ec:	2003      	movs	r0, #3
}
 80139ee:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80139f0:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 80139f4:	460d      	mov	r5, r1
 80139f6:	42b3      	cmp	r3, r6
 80139f8:	d818      	bhi.n	8013a2c <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 80139fa:	d027      	beq.n	8013a4c <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80139fc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	b11b      	cbz	r3, 8013a0c <USBD_LL_DataInStage+0x50>
 8013a04:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8013a08:	2a03      	cmp	r2, #3
 8013a0a:	d01c      	beq.n	8013a46 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a0c:	2180      	movs	r1, #128	; 0x80
 8013a0e:	4620      	mov	r0, r4
 8013a10:	f00f fb2a 	bl	8023068 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013a14:	4620      	mov	r0, r4
 8013a16:	f000 fb85 	bl	8014124 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8013a1a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8013a1e:	2b01      	cmp	r3, #1
 8013a20:	d1d7      	bne.n	80139d2 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8013a22:	2300      	movs	r3, #0
  return USBD_OK;
 8013a24:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 8013a26:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8013a2a:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8013a2c:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013a2e:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8013a30:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013a32:	461a      	mov	r2, r3
 8013a34:	f000 fb48 	bl	80140c8 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a38:	462b      	mov	r3, r5
 8013a3a:	462a      	mov	r2, r5
 8013a3c:	4629      	mov	r1, r5
 8013a3e:	4620      	mov	r0, r4
 8013a40:	f00f fb5e 	bl	8023100 <USBD_LL_PrepareReceive>
 8013a44:	e7c1      	b.n	80139ca <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8013a46:	4620      	mov	r0, r4
 8013a48:	4798      	blx	r3
 8013a4a:	e7df      	b.n	8013a0c <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 8013a4c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8013a4e:	4293      	cmp	r3, r2
 8013a50:	d8d4      	bhi.n	80139fc <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8013a52:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d2d0      	bcs.n	80139fc <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013a5a:	460a      	mov	r2, r1
 8013a5c:	f000 fb34 	bl	80140c8 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a60:	462b      	mov	r3, r5
 8013a62:	462a      	mov	r2, r5
 8013a64:	4629      	mov	r1, r5
 8013a66:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8013a68:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a6c:	f00f fb48 	bl	8023100 <USBD_LL_PrepareReceive>
 8013a70:	e7ab      	b.n	80139ca <USBD_LL_DataInStage+0xe>
 8013a72:	bf00      	nop

08013a74 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8013a74:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a76:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8013a78:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8013a7c:	b570      	push	{r4, r5, r6, lr}
 8013a7e:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a80:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013a84:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8013a88:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8013a8a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8013a8e:	b11b      	cbz	r3, 8013a98 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013a90:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a98:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a9a:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013a9c:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	462b      	mov	r3, r5
 8013aa2:	4611      	mov	r1, r2
 8013aa4:	f00f fac0 	bl	8023028 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013aa8:	462b      	mov	r3, r5
 8013aaa:	2200      	movs	r2, #0
 8013aac:	2180      	movs	r1, #128	; 0x80
 8013aae:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013ab0:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013ab4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013ab8:	f00f fab6 	bl	8023028 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8013abc:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013abe:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013ac0:	6225      	str	r5, [r4, #32]
}
 8013ac2:	bd70      	pop	{r4, r5, r6, pc}

08013ac4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013ac4:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8013ac6:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8013ac8:	7419      	strb	r1, [r3, #16]
}
 8013aca:	4770      	bx	lr

08013acc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013acc:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013ace:	2104      	movs	r1, #4

  return USBD_OK;
}
 8013ad0:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8013ad2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013ad6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 8013ada:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8013ade:	4770      	bx	lr

08013ae0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013ae0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013ae4:	2b04      	cmp	r3, #4
 8013ae6:	d103      	bne.n	8013af0 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013ae8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8013aec:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8013af0:	2000      	movs	r0, #0
 8013af2:	4770      	bx	lr

08013af4 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013af4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013af8:	2a03      	cmp	r2, #3
 8013afa:	d001      	beq.n	8013b00 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8013afc:	2000      	movs	r0, #0
 8013afe:	4770      	bx	lr
{
 8013b00:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8013b02:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013b06:	69db      	ldr	r3, [r3, #28]
 8013b08:	b103      	cbz	r3, 8013b0c <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8013b0a:	4798      	blx	r3
}
 8013b0c:	2000      	movs	r0, #0
 8013b0e:	bd08      	pop	{r3, pc}

08013b10 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8013b10:	2000      	movs	r0, #0
 8013b12:	4770      	bx	lr

08013b14 <USBD_LL_IsoOUTIncomplete>:
 8013b14:	2000      	movs	r0, #0
 8013b16:	4770      	bx	lr

08013b18 <USBD_LL_DevConnected>:
 8013b18:	2000      	movs	r0, #0
 8013b1a:	4770      	bx	lr

08013b1c <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b1c:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8013b1e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b22:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8013b26:	b12a      	cbz	r2, 8013b34 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013b28:	6852      	ldr	r2, [r2, #4]
 8013b2a:	7901      	ldrb	r1, [r0, #4]
{
 8013b2c:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013b2e:	4790      	blx	r2
  }

  return USBD_OK;
}
 8013b30:	2000      	movs	r0, #0
 8013b32:	bd08      	pop	{r3, pc}
 8013b34:	2000      	movs	r0, #0
 8013b36:	4770      	bx	lr

08013b38 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b38:	b570      	push	{r4, r5, r6, lr}
 8013b3a:	780c      	ldrb	r4, [r1, #0]
 8013b3c:	b082      	sub	sp, #8
 8013b3e:	460e      	mov	r6, r1
 8013b40:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013b42:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8013b46:	2c20      	cmp	r4, #32
 8013b48:	d00e      	beq.n	8013b68 <USBD_StdDevReq+0x30>
 8013b4a:	2c40      	cmp	r4, #64	; 0x40
 8013b4c:	d00c      	beq.n	8013b68 <USBD_StdDevReq+0x30>
 8013b4e:	b1a4      	cbz	r4, 8013b7a <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013b50:	2180      	movs	r1, #128	; 0x80
 8013b52:	4628      	mov	r0, r5
 8013b54:	f00f fa88 	bl	8023068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013b58:	2100      	movs	r1, #0
 8013b5a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8013b5c:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8013b5e:	f00f fa83 	bl	8023068 <USBD_LL_StallEP>
}
 8013b62:	4620      	mov	r0, r4
 8013b64:	b002      	add	sp, #8
 8013b66:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013b68:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8013b6c:	4631      	mov	r1, r6
 8013b6e:	4628      	mov	r0, r5
 8013b70:	689b      	ldr	r3, [r3, #8]
}
 8013b72:	b002      	add	sp, #8
 8013b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013b78:	4718      	bx	r3
    switch (req->bRequest)
 8013b7a:	784b      	ldrb	r3, [r1, #1]
 8013b7c:	2b09      	cmp	r3, #9
 8013b7e:	d8e7      	bhi.n	8013b50 <USBD_StdDevReq+0x18>
 8013b80:	a201      	add	r2, pc, #4	; (adr r2, 8013b88 <USBD_StdDevReq+0x50>)
 8013b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b86:	bf00      	nop
 8013b88:	08013be7 	.word	0x08013be7
 8013b8c:	08013c15 	.word	0x08013c15
 8013b90:	08013b51 	.word	0x08013b51
 8013b94:	08013c33 	.word	0x08013c33
 8013b98:	08013b51 	.word	0x08013b51
 8013b9c:	08013c3b 	.word	0x08013c3b
 8013ba0:	08013c73 	.word	0x08013c73
 8013ba4:	08013b51 	.word	0x08013b51
 8013ba8:	08013c97 	.word	0x08013c97
 8013bac:	08013bb1 	.word	0x08013bb1
  cfgidx = (uint8_t)(req->wValue);
 8013bb0:	7889      	ldrb	r1, [r1, #2]
 8013bb2:	4eaa      	ldr	r6, [pc, #680]	; (8013e5c <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013bb4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8013bb6:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013bb8:	f200 8146 	bhi.w	8013e48 <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 8013bbc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013bc0:	2b02      	cmp	r3, #2
 8013bc2:	f000 8130 	beq.w	8013e26 <USBD_StdDevReq+0x2ee>
 8013bc6:	2b03      	cmp	r3, #3
 8013bc8:	f000 810c 	beq.w	8013de4 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013bcc:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8013bce:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013bd0:	f00f fa4a 	bl	8023068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013bd4:	2100      	movs	r1, #0
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	f00f fa46 	bl	8023068 <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013bdc:	7831      	ldrb	r1, [r6, #0]
 8013bde:	4628      	mov	r0, r5
 8013be0:	f7ff fe80 	bl	80138e4 <USBD_ClrClassConfig>
    break;
 8013be4:	e7bd      	b.n	8013b62 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8013be6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013bea:	3a01      	subs	r2, #1
 8013bec:	2a02      	cmp	r2, #2
 8013bee:	d868      	bhi.n	8013cc2 <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 8013bf0:	88ca      	ldrh	r2, [r1, #6]
 8013bf2:	2a02      	cmp	r2, #2
 8013bf4:	d165      	bne.n	8013cc2 <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013bf6:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8013bf8:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013bfc:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8013bfe:	b10a      	cbz	r2, 8013c04 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013c00:	2203      	movs	r2, #3
 8013c02:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013c04:	2202      	movs	r2, #2
 8013c06:	f105 010c 	add.w	r1, r5, #12
 8013c0a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8013c0c:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013c0e:	f000 fa4d 	bl	80140ac <USBD_CtlSendData>
    break;
 8013c12:	e7a6      	b.n	8013b62 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8013c14:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013c18:	3b01      	subs	r3, #1
 8013c1a:	2b02      	cmp	r3, #2
 8013c1c:	d851      	bhi.n	8013cc2 <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013c1e:	884b      	ldrh	r3, [r1, #2]
 8013c20:	2b01      	cmp	r3, #1
 8013c22:	d19e      	bne.n	8013b62 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8013c24:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 8013c26:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 8013c28:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013c2c:	f000 fa6e 	bl	801410c <USBD_CtlSendStatus>
 8013c30:	e797      	b.n	8013b62 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013c32:	884b      	ldrh	r3, [r1, #2]
 8013c34:	2b01      	cmp	r3, #1
 8013c36:	d194      	bne.n	8013b62 <USBD_StdDevReq+0x2a>
 8013c38:	e7f5      	b.n	8013c26 <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013c3a:	888b      	ldrh	r3, [r1, #4]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d140      	bne.n	8013cc2 <USBD_StdDevReq+0x18a>
 8013c40:	88cb      	ldrh	r3, [r1, #6]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d13d      	bne.n	8013cc2 <USBD_StdDevReq+0x18a>
 8013c46:	884e      	ldrh	r6, [r1, #2]
 8013c48:	2e7f      	cmp	r6, #127	; 0x7f
 8013c4a:	d83a      	bhi.n	8013cc2 <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c4c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013c50:	2b03      	cmp	r3, #3
 8013c52:	d036      	beq.n	8013cc2 <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013c54:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8013c56:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013c5a:	f00f fa35 	bl	80230c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013c5e:	4628      	mov	r0, r5
 8013c60:	f000 fa54 	bl	801410c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8013c64:	2e00      	cmp	r6, #0
 8013c66:	f040 80da 	bne.w	8013e1e <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8013c70:	e777      	b.n	8013b62 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 8013c72:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8013c74:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8013c76:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8013c7a:	0a13      	lsrs	r3, r2, #8
 8013c7c:	3b01      	subs	r3, #1
 8013c7e:	2b0e      	cmp	r3, #14
 8013c80:	d81f      	bhi.n	8013cc2 <USBD_StdDevReq+0x18a>
 8013c82:	e8df f003 	tbb	[pc, r3]
 8013c86:	6b77      	.short	0x6b77
 8013c88:	4f1e1e59 	.word	0x4f1e1e59
 8013c8c:	1e1e1e43 	.word	0x1e1e1e43
 8013c90:	1e1e1e1e 	.word	0x1e1e1e1e
 8013c94:	29          	.byte	0x29
 8013c95:	00          	.byte	0x00
  if (req->wLength != 1U)
 8013c96:	88ca      	ldrh	r2, [r1, #6]
 8013c98:	2a01      	cmp	r2, #1
 8013c9a:	d112      	bne.n	8013cc2 <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 8013c9c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013ca0:	2b02      	cmp	r3, #2
 8013ca2:	f200 8098 	bhi.w	8013dd6 <USBD_StdDevReq+0x29e>
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	f43f af52 	beq.w	8013b50 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8013cac:	4601      	mov	r1, r0
 8013cae:	2300      	movs	r3, #0
 8013cb0:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013cb4:	f000 f9fa 	bl	80140ac <USBD_CtlSendData>
      break;
 8013cb8:	e753      	b.n	8013b62 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013cba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013cbe:	699b      	ldr	r3, [r3, #24]
 8013cc0:	b97b      	cbnz	r3, 8013ce2 <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013cc2:	2180      	movs	r1, #128	; 0x80
 8013cc4:	4628      	mov	r0, r5
 8013cc6:	f00f f9cf 	bl	8023068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013cca:	2100      	movs	r1, #0
 8013ccc:	4628      	mov	r0, r5
 8013cce:	f00f f9cb 	bl	8023068 <USBD_LL_StallEP>
}
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	b002      	add	sp, #8
 8013cd6:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013cd8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013cdc:	69db      	ldr	r3, [r3, #28]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d0ef      	beq.n	8013cc2 <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013ce2:	f10d 0106 	add.w	r1, sp, #6
 8013ce6:	7c28      	ldrb	r0, [r5, #16]
 8013ce8:	4798      	blx	r3
    if (req->wLength != 0U)
 8013cea:	88f2      	ldrh	r2, [r6, #6]
 8013cec:	2a00      	cmp	r2, #0
 8013cee:	d06e      	beq.n	8013dce <USBD_StdDevReq+0x296>
      if (len != 0U)
 8013cf0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d0e4      	beq.n	8013cc2 <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 8013cf8:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8013cfa:	4601      	mov	r1, r0
 8013cfc:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 8013cfe:	bf28      	it	cs
 8013d00:	461a      	movcs	r2, r3
 8013d02:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8013d06:	f000 f9d1 	bl	80140ac <USBD_CtlSendData>
 8013d0a:	e72a      	b.n	8013b62 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d0c:	7c03      	ldrb	r3, [r0, #16]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d1d7      	bne.n	8013cc2 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013d12:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013d16:	f10d 0006 	add.w	r0, sp, #6
 8013d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d1c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013d1e:	2307      	movs	r3, #7
 8013d20:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8013d22:	e7e2      	b.n	8013cea <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d24:	7c03      	ldrb	r3, [r0, #16]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d1cb      	bne.n	8013cc2 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013d2a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013d2e:	f10d 0006 	add.w	r0, sp, #6
 8013d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d34:	4798      	blx	r3
  if (err != 0U)
 8013d36:	e7d8      	b.n	8013cea <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 8013d38:	b2d2      	uxtb	r2, r2
 8013d3a:	2a05      	cmp	r2, #5
 8013d3c:	d8c1      	bhi.n	8013cc2 <USBD_StdDevReq+0x18a>
 8013d3e:	a301      	add	r3, pc, #4	; (adr r3, 8013d44 <USBD_StdDevReq+0x20c>)
 8013d40:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8013d44:	08013db5 	.word	0x08013db5
 8013d48:	08013da9 	.word	0x08013da9
 8013d4c:	08013d9d 	.word	0x08013d9d
 8013d50:	08013d91 	.word	0x08013d91
 8013d54:	08013d85 	.word	0x08013d85
 8013d58:	08013cbb 	.word	0x08013cbb
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d5c:	7c03      	ldrb	r3, [r0, #16]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d17e      	bne.n	8013e60 <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013d62:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013d66:	f10d 0006 	add.w	r0, sp, #6
 8013d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d6c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d6e:	2302      	movs	r3, #2
 8013d70:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8013d72:	e7ba      	b.n	8013cea <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013d74:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013d78:	f10d 0106 	add.w	r1, sp, #6
 8013d7c:	7c00      	ldrb	r0, [r0, #16]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4798      	blx	r3
  if (err != 0U)
 8013d82:	e7b2      	b.n	8013cea <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013d84:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013d88:	695b      	ldr	r3, [r3, #20]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d1a9      	bne.n	8013ce2 <USBD_StdDevReq+0x1aa>
 8013d8e:	e798      	b.n	8013cc2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013d90:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013d94:	691b      	ldr	r3, [r3, #16]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d1a3      	bne.n	8013ce2 <USBD_StdDevReq+0x1aa>
 8013d9a:	e792      	b.n	8013cc2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013d9c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d19d      	bne.n	8013ce2 <USBD_StdDevReq+0x1aa>
 8013da6:	e78c      	b.n	8013cc2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013da8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013dac:	689b      	ldr	r3, [r3, #8]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d197      	bne.n	8013ce2 <USBD_StdDevReq+0x1aa>
 8013db2:	e786      	b.n	8013cc2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013db4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013db8:	685b      	ldr	r3, [r3, #4]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d191      	bne.n	8013ce2 <USBD_StdDevReq+0x1aa>
 8013dbe:	e780      	b.n	8013cc2 <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8013dc0:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8013dc2:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013dc4:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8013dc6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013dca:	f7ff fd8b 	bl	80138e4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8013dce:	4628      	mov	r0, r5
 8013dd0:	f000 f99c 	bl	801410c <USBD_CtlSendStatus>
 8013dd4:	e6c5      	b.n	8013b62 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8013dd6:	2b03      	cmp	r3, #3
 8013dd8:	f47f aeba 	bne.w	8013b50 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013ddc:	1d01      	adds	r1, r0, #4
 8013dde:	f000 f965 	bl	80140ac <USBD_CtlSendData>
      break;
 8013de2:	e6be      	b.n	8013b62 <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 8013de4:	2900      	cmp	r1, #0
 8013de6:	d0eb      	beq.n	8013dc0 <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 8013de8:	6841      	ldr	r1, [r0, #4]
 8013dea:	2901      	cmp	r1, #1
 8013dec:	d0ef      	beq.n	8013dce <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013dee:	b2c9      	uxtb	r1, r1
 8013df0:	f7ff fd78 	bl	80138e4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8013df4:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8013df6:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 8013df8:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8013dfa:	f7ff fd6b 	bl	80138d4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8013dfe:	4606      	mov	r6, r0
 8013e00:	2800      	cmp	r0, #0
 8013e02:	d0e4      	beq.n	8013dce <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e04:	2180      	movs	r1, #128	; 0x80
 8013e06:	4628      	mov	r0, r5
 8013e08:	f00f f92e 	bl	8023068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013e0c:	2100      	movs	r1, #0
 8013e0e:	4628      	mov	r0, r5
 8013e10:	4634      	mov	r4, r6
 8013e12:	f00f f929 	bl	8023068 <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013e16:	7929      	ldrb	r1, [r5, #4]
 8013e18:	4628      	mov	r0, r5
 8013e1a:	f7ff fd63 	bl	80138e4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e1e:	2302      	movs	r3, #2
 8013e20:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8013e24:	e69d      	b.n	8013b62 <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8013e26:	2900      	cmp	r1, #0
 8013e28:	d0d1      	beq.n	8013dce <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 8013e2a:	2101      	movs	r1, #1
 8013e2c:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8013e2e:	f7ff fd51 	bl	80138d4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8013e32:	4604      	mov	r4, r0
 8013e34:	2800      	cmp	r0, #0
 8013e36:	f47f af44 	bne.w	8013cc2 <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	f000 f966 	bl	801410c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8013e40:	2303      	movs	r3, #3
 8013e42:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8013e46:	e68c      	b.n	8013b62 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e48:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 8013e4a:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e4c:	f00f f90c 	bl	8023068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013e50:	2100      	movs	r1, #0
 8013e52:	4628      	mov	r0, r5
 8013e54:	f00f f908 	bl	8023068 <USBD_LL_StallEP>
}
 8013e58:	e683      	b.n	8013b62 <USBD_StdDevReq+0x2a>
 8013e5a:	bf00      	nop
 8013e5c:	20005eec 	.word	0x20005eec
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013e60:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013e64:	f10d 0006 	add.w	r0, sp, #6
 8013e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e6a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013e6c:	2302      	movs	r3, #2
 8013e6e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8013e70:	e73b      	b.n	8013cea <USBD_StdDevReq+0x1b2>
 8013e72:	bf00      	nop

08013e74 <USBD_StdItfReq>:
{
 8013e74:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e76:	780b      	ldrb	r3, [r1, #0]
{
 8013e78:	460d      	mov	r5, r1
 8013e7a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e7c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8013e80:	2a40      	cmp	r2, #64	; 0x40
 8013e82:	d00b      	beq.n	8013e9c <USBD_StdItfReq+0x28>
 8013e84:	065b      	lsls	r3, r3, #25
 8013e86:	d509      	bpl.n	8013e9c <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8013e88:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e8a:	2180      	movs	r1, #128	; 0x80
 8013e8c:	f00f f8ec 	bl	8023068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013e90:	4620      	mov	r0, r4
 8013e92:	4629      	mov	r1, r5
 8013e94:	f00f f8e8 	bl	8023068 <USBD_LL_StallEP>
}
 8013e98:	4628      	mov	r0, r5
 8013e9a:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8013e9c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8013ea0:	3b01      	subs	r3, #1
 8013ea2:	2b02      	cmp	r3, #2
 8013ea4:	d812      	bhi.n	8013ecc <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013ea6:	792b      	ldrb	r3, [r5, #4]
 8013ea8:	2b01      	cmp	r3, #1
 8013eaa:	d80f      	bhi.n	8013ecc <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013eac:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8013eb0:	4629      	mov	r1, r5
 8013eb2:	4620      	mov	r0, r4
 8013eb4:	689b      	ldr	r3, [r3, #8]
 8013eb6:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8013eb8:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013eba:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d1eb      	bne.n	8013e98 <USBD_StdItfReq+0x24>
 8013ec0:	2800      	cmp	r0, #0
 8013ec2:	d1e9      	bne.n	8013e98 <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	f000 f921 	bl	801410c <USBD_CtlSendStatus>
 8013eca:	e7e5      	b.n	8013e98 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013ecc:	2180      	movs	r1, #128	; 0x80
 8013ece:	4620      	mov	r0, r4
 8013ed0:	f00f f8ca 	bl	8023068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013ed4:	2100      	movs	r1, #0
 8013ed6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8013ed8:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8013eda:	f00f f8c5 	bl	8023068 <USBD_LL_StallEP>
}
 8013ede:	4628      	mov	r0, r5
 8013ee0:	bd38      	pop	{r3, r4, r5, pc}
 8013ee2:	bf00      	nop

08013ee4 <USBD_StdEPReq>:
{
 8013ee4:	b570      	push	{r4, r5, r6, lr}
 8013ee6:	780b      	ldrb	r3, [r1, #0]
 8013ee8:	460d      	mov	r5, r1
 8013eea:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013eec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013ef0:	2b20      	cmp	r3, #32
 8013ef2:	d00c      	beq.n	8013f0e <USBD_StdEPReq+0x2a>
 8013ef4:	2b40      	cmp	r3, #64	; 0x40
 8013ef6:	d00a      	beq.n	8013f0e <USBD_StdEPReq+0x2a>
 8013ef8:	b18b      	cbz	r3, 8013f1e <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013efa:	2180      	movs	r1, #128	; 0x80
 8013efc:	4620      	mov	r0, r4
 8013efe:	f00f f8b3 	bl	8023068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013f02:	2100      	movs	r1, #0
 8013f04:	4620      	mov	r0, r4
 8013f06:	f00f f8af 	bl	8023068 <USBD_LL_StallEP>
}
 8013f0a:	2000      	movs	r0, #0
 8013f0c:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013f0e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8013f12:	4629      	mov	r1, r5
 8013f14:	4620      	mov	r0, r4
 8013f16:	689b      	ldr	r3, [r3, #8]
}
 8013f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013f1c:	4718      	bx	r3
    switch (req->bRequest)
 8013f1e:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8013f20:	888a      	ldrh	r2, [r1, #4]
 8013f22:	2b01      	cmp	r3, #1
 8013f24:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8013f26:	d036      	beq.n	8013f96 <USBD_StdEPReq+0xb2>
 8013f28:	2b03      	cmp	r3, #3
 8013f2a:	d023      	beq.n	8013f74 <USBD_StdEPReq+0x90>
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d1e4      	bne.n	8013efa <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8013f30:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013f34:	2b02      	cmp	r3, #2
 8013f36:	d04c      	beq.n	8013fd2 <USBD_StdEPReq+0xee>
 8013f38:	2b03      	cmp	r3, #3
 8013f3a:	d1de      	bne.n	8013efa <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013f3c:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8013f40:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013f42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013f46:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8013f4a:	d453      	bmi.n	8013ff4 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013f4c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d0d2      	beq.n	8013efa <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013f54:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8013f58:	2514      	movs	r5, #20
 8013f5a:	fb05 0503 	mla	r5, r5, r3, r0
 8013f5e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d152      	bne.n	801400c <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 8013f66:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013f68:	2202      	movs	r2, #2
 8013f6a:	4629      	mov	r1, r5
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f000 f89d 	bl	80140ac <USBD_CtlSendData>
          break;
 8013f72:	e7ca      	b.n	8013f0a <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8013f74:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013f78:	2b02      	cmp	r3, #2
 8013f7a:	d021      	beq.n	8013fc0 <USBD_StdEPReq+0xdc>
 8013f7c:	2b03      	cmp	r3, #3
 8013f7e:	d1bc      	bne.n	8013efa <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8013f80:	886b      	ldrh	r3, [r5, #2]
 8013f82:	b923      	cbnz	r3, 8013f8e <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013f84:	064a      	lsls	r2, r1, #25
 8013f86:	d002      	beq.n	8013f8e <USBD_StdEPReq+0xaa>
 8013f88:	88eb      	ldrh	r3, [r5, #6]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d049      	beq.n	8014022 <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 8013f8e:	4620      	mov	r0, r4
 8013f90:	f000 f8bc 	bl	801410c <USBD_CtlSendStatus>
        break;
 8013f94:	e7b9      	b.n	8013f0a <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8013f96:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013f9a:	2b02      	cmp	r3, #2
 8013f9c:	d010      	beq.n	8013fc0 <USBD_StdEPReq+0xdc>
 8013f9e:	2b03      	cmp	r3, #3
 8013fa0:	d1ab      	bne.n	8013efa <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8013fa2:	886b      	ldrh	r3, [r5, #2]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d1b0      	bne.n	8013f0a <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8013fa8:	064e      	lsls	r6, r1, #25
 8013faa:	d135      	bne.n	8014018 <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 8013fac:	4620      	mov	r0, r4
 8013fae:	f000 f8ad 	bl	801410c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013fb2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	4620      	mov	r0, r4
 8013fba:	689b      	ldr	r3, [r3, #8]
 8013fbc:	4798      	blx	r3
 8013fbe:	e7a4      	b.n	8013f0a <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fc0:	064b      	lsls	r3, r1, #25
 8013fc2:	d09a      	beq.n	8013efa <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8013fc4:	f00f f850 	bl	8023068 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fc8:	2180      	movs	r1, #128	; 0x80
 8013fca:	4620      	mov	r0, r4
 8013fcc:	f00f f84c 	bl	8023068 <USBD_LL_StallEP>
 8013fd0:	e79b      	b.n	8013f0a <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fd2:	0648      	lsls	r0, r1, #25
 8013fd4:	d191      	bne.n	8013efa <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013fd6:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 8013fd8:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013fdc:	f04f 0202 	mov.w	r2, #2
 8013fe0:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013fe2:	bf4c      	ite	mi
 8013fe4:	f104 0114 	addmi.w	r1, r4, #20
 8013fe8:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 8013fec:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013fee:	f000 f85d 	bl	80140ac <USBD_CtlSendData>
        break;
 8013ff2:	e78a      	b.n	8013f0a <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013ff4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	f43f af7f 	beq.w	8013efa <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013ffc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8014000:	1c5d      	adds	r5, r3, #1
 8014002:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014006:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801400a:	e7aa      	b.n	8013f62 <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801400c:	4620      	mov	r0, r4
 801400e:	f00f f847 	bl	80230a0 <USBD_LL_IsStallEP>
 8014012:	b120      	cbz	r0, 801401e <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 8014014:	2301      	movs	r3, #1
 8014016:	e7a6      	b.n	8013f66 <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014018:	f00f f834 	bl	8023084 <USBD_LL_ClearStallEP>
 801401c:	e7c6      	b.n	8013fac <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 801401e:	6028      	str	r0, [r5, #0]
 8014020:	e7a2      	b.n	8013f68 <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8014022:	f00f f821 	bl	8023068 <USBD_LL_StallEP>
 8014026:	e7b2      	b.n	8013f8e <USBD_StdEPReq+0xaa>

08014028 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8014028:	780b      	ldrb	r3, [r1, #0]
 801402a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 801402c:	784b      	ldrb	r3, [r1, #1]
 801402e:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8014030:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8014032:	8043      	strh	r3, [r0, #2]
 8014034:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8014036:	8083      	strh	r3, [r0, #4]
 8014038:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 801403a:	80c3      	strh	r3, [r0, #6]
}
 801403c:	4770      	bx	lr
 801403e:	bf00      	nop

08014040 <USBD_CtlError>:
{
 8014040:	b510      	push	{r4, lr}
 8014042:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014044:	2180      	movs	r1, #128	; 0x80
 8014046:	f00f f80f 	bl	8023068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801404a:	2100      	movs	r1, #0
 801404c:	4620      	mov	r0, r4
}
 801404e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8014052:	f00f b809 	b.w	8023068 <USBD_LL_StallEP>
 8014056:	bf00      	nop

08014058 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8014058:	b318      	cbz	r0, 80140a2 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 801405a:	7803      	ldrb	r3, [r0, #0]
{
 801405c:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 801405e:	b30b      	cbz	r3, 80140a4 <USBD_GetString+0x4c>
 8014060:	4604      	mov	r4, r0
 8014062:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8014066:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 801406a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801406e:	b2db      	uxtb	r3, r3
 8014070:	2d00      	cmp	r5, #0
 8014072:	d1f8      	bne.n	8014066 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014074:	3301      	adds	r3, #1
 8014076:	005b      	lsls	r3, r3, #1
 8014078:	b2dc      	uxtb	r4, r3
 801407a:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801407c:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 801407e:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014080:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8014082:	7804      	ldrb	r4, [r0, #0]
 8014084:	b15c      	cbz	r4, 801409e <USBD_GetString+0x46>
  idx++;
 8014086:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8014088:	2500      	movs	r5, #0
    idx++;
 801408a:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 801408c:	54cc      	strb	r4, [r1, r3]
    idx++;
 801408e:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8014090:	b2d2      	uxtb	r2, r2
    idx++;
 8014092:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8014094:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8014096:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801409a:	2c00      	cmp	r4, #0
 801409c:	d1f5      	bne.n	801408a <USBD_GetString+0x32>
}
 801409e:	bc30      	pop	{r4, r5}
 80140a0:	4770      	bx	lr
 80140a2:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80140a4:	2402      	movs	r4, #2
 80140a6:	4623      	mov	r3, r4
 80140a8:	e7e7      	b.n	801407a <USBD_GetString+0x22>
 80140aa:	bf00      	nop

080140ac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80140ac:	b510      	push	{r4, lr}
 80140ae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80140b0:	2402      	movs	r4, #2
{
 80140b2:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80140b4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80140b6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 80140ba:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80140be:	f00f f811 	bl	80230e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80140c2:	2000      	movs	r0, #0
 80140c4:	bd10      	pop	{r4, pc}
 80140c6:	bf00      	nop

080140c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80140c8:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80140ca:	2100      	movs	r1, #0
{
 80140cc:	b508      	push	{r3, lr}
 80140ce:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80140d0:	4662      	mov	r2, ip
 80140d2:	f00f f807 	bl	80230e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80140d6:	2000      	movs	r0, #0
 80140d8:	bd08      	pop	{r3, pc}
 80140da:	bf00      	nop

080140dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80140dc:	b510      	push	{r4, lr}
 80140de:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80140e0:	2403      	movs	r4, #3
{
 80140e2:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80140e4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80140e6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 80140ea:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80140ee:	f00f f807 	bl	8023100 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80140f2:	2000      	movs	r0, #0
 80140f4:	bd10      	pop	{r4, pc}
 80140f6:	bf00      	nop

080140f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80140f8:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80140fa:	2100      	movs	r1, #0
{
 80140fc:	b508      	push	{r3, lr}
 80140fe:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014100:	4662      	mov	r2, ip
 8014102:	f00e fffd 	bl	8023100 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014106:	2000      	movs	r0, #0
 8014108:	bd08      	pop	{r3, pc}
 801410a:	bf00      	nop

0801410c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801410c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801410e:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014110:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014112:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014116:	461a      	mov	r2, r3
 8014118:	4619      	mov	r1, r3
 801411a:	f00e ffe3 	bl	80230e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 801411e:	2000      	movs	r0, #0
 8014120:	bd08      	pop	{r3, pc}
 8014122:	bf00      	nop

08014124 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014124:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014126:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014128:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801412a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801412e:	461a      	mov	r2, r3
 8014130:	4619      	mov	r1, r3
 8014132:	f00e ffe5 	bl	8023100 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014136:	2000      	movs	r0, #0
 8014138:	bd08      	pop	{r3, pc}
 801413a:	bf00      	nop

0801413c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801413c:	4b10      	ldr	r3, [pc, #64]	; (8014180 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801413e:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8014140:	7a5c      	ldrb	r4, [r3, #9]
 8014142:	b9cc      	cbnz	r4, 8014178 <FATFS_LinkDriver+0x3c>
 8014144:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8014146:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 801414a:	7a5c      	ldrb	r4, [r3, #9]
 801414c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 801414e:	7a5c      	ldrb	r4, [r3, #9]
 8014150:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014154:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8014156:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8014158:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 801415a:	441c      	add	r4, r3
 801415c:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 801415e:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8014160:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8014162:	b2e4      	uxtb	r4, r4
 8014164:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8014166:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8014168:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 801416a:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 801416c:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 801416e:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8014170:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8014174:	708b      	strb	r3, [r1, #2]
}
 8014176:	4770      	bx	lr
  uint8_t ret = 1;
 8014178:	2001      	movs	r0, #1
}
 801417a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801417e:	4770      	bx	lr
 8014180:	20005ef0 	.word	0x20005ef0

08014184 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014184:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8014186:	f001 f9a7 	bl	80154d8 <vTaskStartScheduler>
  
  return osOK;
}
 801418a:	2000      	movs	r0, #0
 801418c:	bd08      	pop	{r3, pc}
 801418e:	bf00      	nop

08014190 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014190:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8014194:	b10b      	cbz	r3, 801419a <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8014196:	f001 b9f7 	b.w	8015588 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 801419a:	f001 b9ef 	b.w	801557c <xTaskGetTickCount>
 801419e:	bf00      	nop

080141a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80141a0:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80141a2:	6944      	ldr	r4, [r0, #20]
{
 80141a4:	b086      	sub	sp, #24
 80141a6:	4684      	mov	ip, r0
 80141a8:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80141aa:	b1ac      	cbz	r4, 80141d8 <osThreadCreate+0x38>
 80141ac:	6986      	ldr	r6, [r0, #24]
 80141ae:	b19e      	cbz	r6, 80141d8 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80141b0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80141b4:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 80141b8:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80141bc:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80141c0:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 80141c2:	bf14      	ite	ne
 80141c4:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80141c8:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80141ca:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80141ce:	9500      	str	r5, [sp, #0]
 80141d0:	f001 f910 	bl	80153f4 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80141d4:	b006      	add	sp, #24
 80141d6:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80141d8:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 80141dc:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 80141e0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80141e2:	bf14      	ite	ne
 80141e4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80141e6:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80141e8:	e9dc 1000 	ldrd	r1, r0, [ip]
 80141ec:	9400      	str	r4, [sp, #0]
 80141ee:	ac05      	add	r4, sp, #20
 80141f0:	9401      	str	r4, [sp, #4]
 80141f2:	f001 f93f 	bl	8015474 <xTaskCreate>
 80141f6:	2801      	cmp	r0, #1
  return handle;
 80141f8:	bf0c      	ite	eq
 80141fa:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 80141fc:	2000      	movne	r0, #0
}
 80141fe:	b006      	add	sp, #24
 8014200:	bd70      	pop	{r4, r5, r6, pc}
 8014202:	bf00      	nop

08014204 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014204:	2801      	cmp	r0, #1
{
 8014206:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014208:	bf38      	it	cc
 801420a:	2001      	movcc	r0, #1
 801420c:	f001 fb1c 	bl	8015848 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014210:	2000      	movs	r0, #0
 8014212:	bd08      	pop	{r3, pc}

08014214 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8014214:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8014216:	6844      	ldr	r4, [r0, #4]
{
 8014218:	b082      	sub	sp, #8
 801421a:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 801421c:	b16c      	cbz	r4, 801423a <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 801421e:	f1a1 0201 	sub.w	r2, r1, #1
 8014222:	6800      	ldr	r0, [r0, #0]
 8014224:	2101      	movs	r1, #1
 8014226:	fab2 f282 	clz	r2, r2
 801422a:	0952      	lsrs	r2, r2, #5
 801422c:	e9cd 0400 	strd	r0, r4, [sp]
 8014230:	4808      	ldr	r0, [pc, #32]	; (8014254 <osTimerCreate+0x40>)
 8014232:	f001 feb7 	bl	8015fa4 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8014236:	b002      	add	sp, #8
 8014238:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 801423a:	f1a1 0201 	sub.w	r2, r1, #1
 801423e:	6804      	ldr	r4, [r0, #0]
 8014240:	2101      	movs	r1, #1
 8014242:	4804      	ldr	r0, [pc, #16]	; (8014254 <osTimerCreate+0x40>)
 8014244:	fab2 f282 	clz	r2, r2
 8014248:	9400      	str	r4, [sp, #0]
 801424a:	0952      	lsrs	r2, r2, #5
 801424c:	f001 fe7a 	bl	8015f44 <xTimerCreate>
}
 8014250:	b002      	add	sp, #8
 8014252:	bd10      	pop	{r4, pc}
 8014254:	08028968 	.word	0x08028968

08014258 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8014258:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801425a:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 801425c:	b109      	cbz	r1, 8014262 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801425e:	f000 bbc9 	b.w	80149f4 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8014262:	f000 bbdf 	b.w	8014a24 <xQueueCreateMutex>
 8014266:	bf00      	nop

08014268 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8014268:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801426a:	2400      	movs	r4, #0
{
 801426c:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801426e:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8014270:	b310      	cbz	r0, 80142b8 <osMutexWait+0x50>
 8014272:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8014276:	b933      	cbnz	r3, 8014286 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8014278:	f000 fd88 	bl	8014d8c <xQueueSemaphoreTake>
 801427c:	2801      	cmp	r0, #1
 801427e:	d118      	bne.n	80142b2 <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8014280:	2000      	movs	r0, #0
}
 8014282:	b002      	add	sp, #8
 8014284:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8014286:	aa01      	add	r2, sp, #4
 8014288:	4621      	mov	r1, r4
 801428a:	f000 fe63 	bl	8014f54 <xQueueReceiveFromISR>
 801428e:	2801      	cmp	r0, #1
 8014290:	d10f      	bne.n	80142b2 <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 8014292:	9b01      	ldr	r3, [sp, #4]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d0f3      	beq.n	8014280 <osMutexWait+0x18>
 8014298:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801429c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80142a4:	f3bf 8f4f 	dsb	sy
 80142a8:	f3bf 8f6f 	isb	sy
  return osOK;
 80142ac:	4620      	mov	r0, r4
}
 80142ae:	b002      	add	sp, #8
 80142b0:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80142b2:	20ff      	movs	r0, #255	; 0xff
}
 80142b4:	b002      	add	sp, #8
 80142b6:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80142b8:	2080      	movs	r0, #128	; 0x80
}
 80142ba:	b002      	add	sp, #8
 80142bc:	bd10      	pop	{r4, pc}
 80142be:	bf00      	nop

080142c0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80142c0:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80142c2:	2400      	movs	r4, #0
{
 80142c4:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 80142c6:	9401      	str	r4, [sp, #4]
 80142c8:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 80142cc:	b19b      	cbz	r3, 80142f6 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80142ce:	a901      	add	r1, sp, #4
 80142d0:	f000 fc34 	bl	8014b3c <xQueueGiveFromISR>
 80142d4:	2801      	cmp	r0, #1
 80142d6:	d114      	bne.n	8014302 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80142d8:	9b01      	ldr	r3, [sp, #4]
 80142da:	b1ab      	cbz	r3, 8014308 <osMutexRelease+0x48>
 80142dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80142e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80142e8:	f3bf 8f4f 	dsb	sy
 80142ec:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80142f0:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 80142f2:	b002      	add	sp, #8
 80142f4:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80142f6:	461a      	mov	r2, r3
 80142f8:	4619      	mov	r1, r3
 80142fa:	f000 faad 	bl	8014858 <xQueueGenericSend>
 80142fe:	2801      	cmp	r0, #1
 8014300:	d002      	beq.n	8014308 <osMutexRelease+0x48>
    result = osErrorOS;
 8014302:	20ff      	movs	r0, #255	; 0xff
}
 8014304:	b002      	add	sp, #8
 8014306:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8014308:	2000      	movs	r0, #0
}
 801430a:	b002      	add	sp, #8
 801430c:	bd10      	pop	{r4, pc}
 801430e:	bf00      	nop

08014310 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014310:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8014312:	6844      	ldr	r4, [r0, #4]
{ 
 8014314:	b083      	sub	sp, #12
 8014316:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8014318:	b184      	cbz	r4, 801433c <osSemaphoreCreate+0x2c>
    if (count == 1) {
 801431a:	2901      	cmp	r1, #1
 801431c:	d003      	beq.n	8014326 <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801431e:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8014320:	4620      	mov	r0, r4
 8014322:	b003      	add	sp, #12
 8014324:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8014326:	2200      	movs	r2, #0
 8014328:	2503      	movs	r5, #3
 801432a:	4623      	mov	r3, r4
 801432c:	4611      	mov	r1, r2
 801432e:	9500      	str	r5, [sp, #0]
 8014330:	f000 fa08 	bl	8014744 <xQueueGenericCreateStatic>
 8014334:	4604      	mov	r4, r0
}
 8014336:	4620      	mov	r0, r4
 8014338:	b003      	add	sp, #12
 801433a:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 801433c:	2901      	cmp	r1, #1
 801433e:	d1ef      	bne.n	8014320 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8014340:	4621      	mov	r1, r4
 8014342:	2203      	movs	r2, #3
 8014344:	f000 fa56 	bl	80147f4 <xQueueGenericCreate>
 8014348:	4604      	mov	r4, r0
 801434a:	2800      	cmp	r0, #0
 801434c:	d0e8      	beq.n	8014320 <osSemaphoreCreate+0x10>
 801434e:	2300      	movs	r3, #0
 8014350:	461a      	mov	r2, r3
 8014352:	4619      	mov	r1, r3
 8014354:	f000 fa80 	bl	8014858 <xQueueGenericSend>
 8014358:	e7e2      	b.n	8014320 <osSemaphoreCreate+0x10>
 801435a:	bf00      	nop

0801435c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801435c:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801435e:	2400      	movs	r4, #0
{
 8014360:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8014362:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8014364:	b310      	cbz	r0, 80143ac <osSemaphoreWait+0x50>
 8014366:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801436a:	b933      	cbnz	r3, 801437a <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801436c:	f000 fd0e 	bl	8014d8c <xQueueSemaphoreTake>
 8014370:	2801      	cmp	r0, #1
 8014372:	d118      	bne.n	80143a6 <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8014374:	2000      	movs	r0, #0
}
 8014376:	b002      	add	sp, #8
 8014378:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801437a:	aa01      	add	r2, sp, #4
 801437c:	4621      	mov	r1, r4
 801437e:	f000 fde9 	bl	8014f54 <xQueueReceiveFromISR>
 8014382:	2801      	cmp	r0, #1
 8014384:	d10f      	bne.n	80143a6 <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 8014386:	9b01      	ldr	r3, [sp, #4]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d0f3      	beq.n	8014374 <osSemaphoreWait+0x18>
 801438c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014394:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014398:	f3bf 8f4f 	dsb	sy
 801439c:	f3bf 8f6f 	isb	sy
  return osOK;
 80143a0:	4620      	mov	r0, r4
}
 80143a2:	b002      	add	sp, #8
 80143a4:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80143a6:	20ff      	movs	r0, #255	; 0xff
}
 80143a8:	b002      	add	sp, #8
 80143aa:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80143ac:	2080      	movs	r0, #128	; 0x80
}
 80143ae:	b002      	add	sp, #8
 80143b0:	bd10      	pop	{r4, pc}
 80143b2:	bf00      	nop

080143b4 <osSemaphoreRelease>:
 80143b4:	b510      	push	{r4, lr}
 80143b6:	2400      	movs	r4, #0
 80143b8:	b082      	sub	sp, #8
 80143ba:	9401      	str	r4, [sp, #4]
 80143bc:	f3ef 8305 	mrs	r3, IPSR
 80143c0:	b19b      	cbz	r3, 80143ea <osSemaphoreRelease+0x36>
 80143c2:	a901      	add	r1, sp, #4
 80143c4:	f000 fbba 	bl	8014b3c <xQueueGiveFromISR>
 80143c8:	2801      	cmp	r0, #1
 80143ca:	d114      	bne.n	80143f6 <osSemaphoreRelease+0x42>
 80143cc:	9b01      	ldr	r3, [sp, #4]
 80143ce:	b1ab      	cbz	r3, 80143fc <osSemaphoreRelease+0x48>
 80143d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80143d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80143dc:	f3bf 8f4f 	dsb	sy
 80143e0:	f3bf 8f6f 	isb	sy
 80143e4:	4620      	mov	r0, r4
 80143e6:	b002      	add	sp, #8
 80143e8:	bd10      	pop	{r4, pc}
 80143ea:	461a      	mov	r2, r3
 80143ec:	4619      	mov	r1, r3
 80143ee:	f000 fa33 	bl	8014858 <xQueueGenericSend>
 80143f2:	2801      	cmp	r0, #1
 80143f4:	d002      	beq.n	80143fc <osSemaphoreRelease+0x48>
 80143f6:	20ff      	movs	r0, #255	; 0xff
 80143f8:	b002      	add	sp, #8
 80143fa:	bd10      	pop	{r4, pc}
 80143fc:	2000      	movs	r0, #0
 80143fe:	b002      	add	sp, #8
 8014400:	bd10      	pop	{r4, pc}
 8014402:	bf00      	nop

08014404 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014404:	6882      	ldr	r2, [r0, #8]
 8014406:	b15a      	cbz	r2, 8014420 <osMessageCreate+0x1c>
 8014408:	68c3      	ldr	r3, [r0, #12]
 801440a:	b14b      	cbz	r3, 8014420 <osMessageCreate+0x1c>
{
 801440c:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801440e:	2400      	movs	r4, #0
{
 8014410:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014412:	e9d0 0100 	ldrd	r0, r1, [r0]
 8014416:	9400      	str	r4, [sp, #0]
 8014418:	f000 f994 	bl	8014744 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801441c:	b002      	add	sp, #8
 801441e:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014420:	2200      	movs	r2, #0
 8014422:	e9d0 0100 	ldrd	r0, r1, [r0]
 8014426:	f000 b9e5 	b.w	80147f4 <xQueueGenericCreate>
 801442a:	bf00      	nop

0801442c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801442c:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 801442e:	2400      	movs	r4, #0
{
 8014430:	b084      	sub	sp, #16
 8014432:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014434:	9403      	str	r4, [sp, #12]
 8014436:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 801443a:	b15b      	cbz	r3, 8014454 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801443c:	4623      	mov	r3, r4
 801443e:	aa03      	add	r2, sp, #12
 8014440:	a901      	add	r1, sp, #4
 8014442:	f000 fb09 	bl	8014a58 <xQueueGenericSendFromISR>
 8014446:	2801      	cmp	r0, #1
 8014448:	d10c      	bne.n	8014464 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801444a:	9b03      	ldr	r3, [sp, #12]
 801444c:	b96b      	cbnz	r3, 801446a <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 801444e:	2000      	movs	r0, #0
}
 8014450:	b004      	add	sp, #16
 8014452:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014454:	2a01      	cmp	r2, #1
 8014456:	a901      	add	r1, sp, #4
 8014458:	bf38      	it	cc
 801445a:	2201      	movcc	r2, #1
 801445c:	f000 f9fc 	bl	8014858 <xQueueGenericSend>
 8014460:	2801      	cmp	r0, #1
 8014462:	d0f4      	beq.n	801444e <osMessagePut+0x22>
      return osErrorOS;
 8014464:	20ff      	movs	r0, #255	; 0xff
}
 8014466:	b004      	add	sp, #16
 8014468:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 801446a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801446e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014472:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014476:	f3bf 8f4f 	dsb	sy
 801447a:	f3bf 8f6f 	isb	sy
  return osOK;
 801447e:	4620      	mov	r0, r4
}
 8014480:	b004      	add	sp, #16
 8014482:	bd10      	pop	{r4, pc}

08014484 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014484:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8014486:	2600      	movs	r6, #0
{
 8014488:	b084      	sub	sp, #16
 801448a:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 801448c:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 8014490:	b379      	cbz	r1, 80144f2 <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8014492:	460b      	mov	r3, r1
 8014494:	9600      	str	r6, [sp, #0]
 8014496:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801449a:	b991      	cbnz	r1, 80144c2 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801449c:	a902      	add	r1, sp, #8
 801449e:	4618      	mov	r0, r3
 80144a0:	4615      	mov	r5, r2
 80144a2:	f000 fbab 	bl	8014bfc <xQueueReceive>
 80144a6:	2801      	cmp	r0, #1
 80144a8:	d02d      	beq.n	8014506 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80144aa:	2d00      	cmp	r5, #0
 80144ac:	bf18      	it	ne
 80144ae:	2540      	movne	r5, #64	; 0x40
 80144b0:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 80144b2:	ab04      	add	r3, sp, #16
 80144b4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80144b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80144bc:	4620      	mov	r0, r4
 80144be:	b004      	add	sp, #16
 80144c0:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80144c2:	466a      	mov	r2, sp
 80144c4:	4618      	mov	r0, r3
 80144c6:	a902      	add	r1, sp, #8
 80144c8:	f000 fd44 	bl	8014f54 <xQueueReceiveFromISR>
      event.status = osOK;
 80144cc:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 80144ce:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80144d0:	bf0c      	ite	eq
 80144d2:	2210      	moveq	r2, #16
 80144d4:	2200      	movne	r2, #0
 80144d6:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d0ea      	beq.n	80144b2 <osMessageGet+0x2e>
 80144dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80144e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80144e8:	f3bf 8f4f 	dsb	sy
 80144ec:	f3bf 8f6f 	isb	sy
 80144f0:	e7df      	b.n	80144b2 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 80144f2:	2380      	movs	r3, #128	; 0x80
 80144f4:	9301      	str	r3, [sp, #4]
    return event;
 80144f6:	ab04      	add	r3, sp, #16
 80144f8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80144fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014500:	4620      	mov	r0, r4
 8014502:	b004      	add	sp, #16
 8014504:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8014506:	2310      	movs	r3, #16
 8014508:	9301      	str	r3, [sp, #4]
 801450a:	e7d2      	b.n	80144b2 <osMessageGet+0x2e>

0801450c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801450c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014510:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014514:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014516:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014518:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801451a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801451c:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014520:	4770      	bx	lr
 8014522:	bf00      	nop

08014524 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014524:	2300      	movs	r3, #0
 8014526:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014528:	4770      	bx	lr
 801452a:	bf00      	nop

0801452c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 801452c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801452e:	6802      	ldr	r2, [r0, #0]
{
 8014530:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014532:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8014534:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8014536:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014538:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801453a:	689c      	ldr	r4, [r3, #8]
 801453c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801453e:	6099      	str	r1, [r3, #8]
}
 8014540:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8014544:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8014546:	6002      	str	r2, [r0, #0]
}
 8014548:	4770      	bx	lr
 801454a:	bf00      	nop

0801454c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801454c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801454e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014550:	1c6b      	adds	r3, r5, #1
 8014552:	d010      	beq.n	8014576 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014554:	f100 0308 	add.w	r3, r0, #8
 8014558:	461c      	mov	r4, r3
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	42aa      	cmp	r2, r5
 8014560:	d9fa      	bls.n	8014558 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8014562:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8014564:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8014566:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014568:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801456a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801456c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 801456e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8014570:	6002      	str	r2, [r0, #0]
}
 8014572:	bc30      	pop	{r4, r5}
 8014574:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8014576:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8014578:	6863      	ldr	r3, [r4, #4]
 801457a:	e7f2      	b.n	8014562 <vListInsert+0x16>

0801457c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801457c:	6903      	ldr	r3, [r0, #16]
{
 801457e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014580:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014582:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8014586:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8014588:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801458c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801458e:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8014590:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014594:	bf08      	it	eq
 8014596:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8014598:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 801459a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801459c:	3a01      	subs	r2, #1
 801459e:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80145a0:	6818      	ldr	r0, [r3, #0]
}
 80145a2:	4770      	bx	lr

080145a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80145a4:	b570      	push	{r4, r5, r6, lr}
 80145a6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80145a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80145aa:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80145ac:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80145ae:	b92a      	cbnz	r2, 80145bc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80145b0:	6805      	ldr	r5, [r0, #0]
 80145b2:	b365      	cbz	r5, 801460e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80145b4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80145b6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80145b8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80145ba:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80145bc:	b97d      	cbnz	r5, 80145de <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80145be:	6840      	ldr	r0, [r0, #4]
 80145c0:	f00e ffb8 	bl	8023534 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80145c4:	6863      	ldr	r3, [r4, #4]
 80145c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80145c8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80145ca:	68a2      	ldr	r2, [r4, #8]
 80145cc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80145ce:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80145d0:	d319      	bcc.n	8014606 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80145d2:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80145d4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80145d6:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80145d8:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80145da:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80145dc:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80145de:	68c0      	ldr	r0, [r0, #12]
 80145e0:	f00e ffa8 	bl	8023534 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80145e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80145e6:	68e3      	ldr	r3, [r4, #12]
 80145e8:	4251      	negs	r1, r2
 80145ea:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80145ec:	6822      	ldr	r2, [r4, #0]
 80145ee:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80145f0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80145f2:	d202      	bcs.n	80145fa <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80145f4:	68a3      	ldr	r3, [r4, #8]
 80145f6:	440b      	add	r3, r1
 80145f8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80145fa:	2d02      	cmp	r5, #2
 80145fc:	d00d      	beq.n	801461a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80145fe:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8014600:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014602:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8014604:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014606:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8014608:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801460a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 801460c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801460e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014610:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014612:	f001 faaf 	bl	8015b74 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014616:	60a5      	str	r5, [r4, #8]
 8014618:	e7ce      	b.n	80145b8 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801461a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 801461c:	f04f 0000 	mov.w	r0, #0
 8014620:	bf38      	it	cc
 8014622:	2601      	movcc	r6, #1
 8014624:	e7c8      	b.n	80145b8 <prvCopyDataToQueue+0x14>
 8014626:	bf00      	nop

08014628 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014628:	b570      	push	{r4, r5, r6, lr}
 801462a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801462c:	f001 ff32 	bl	8016494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014630:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8014634:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014636:	2c00      	cmp	r4, #0
 8014638:	dd14      	ble.n	8014664 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801463a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 801463e:	e003      	b.n	8014648 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014640:	1e63      	subs	r3, r4, #1
 8014642:	b2da      	uxtb	r2, r3
 8014644:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014646:	b16a      	cbz	r2, 8014664 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014648:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801464a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801464c:	b153      	cbz	r3, 8014664 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801464e:	f001 f979 	bl	8015944 <xTaskRemoveFromEventList>
 8014652:	2800      	cmp	r0, #0
 8014654:	d0f4      	beq.n	8014640 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8014656:	f001 fa19 	bl	8015a8c <vTaskMissedYield>
			--cTxLock;
 801465a:	1e63      	subs	r3, r4, #1
 801465c:	b2da      	uxtb	r2, r3
 801465e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014660:	2a00      	cmp	r2, #0
 8014662:	d1f1      	bne.n	8014648 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014664:	23ff      	movs	r3, #255	; 0xff
 8014666:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801466a:	f001 ff39 	bl	80164e0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801466e:	f001 ff11 	bl	8016494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014672:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8014676:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014678:	2c00      	cmp	r4, #0
 801467a:	dd14      	ble.n	80146a6 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801467c:	f105 0610 	add.w	r6, r5, #16
 8014680:	e003      	b.n	801468a <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014682:	1e63      	subs	r3, r4, #1
 8014684:	b2da      	uxtb	r2, r3
 8014686:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014688:	b16a      	cbz	r2, 80146a6 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801468a:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801468c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801468e:	b153      	cbz	r3, 80146a6 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014690:	f001 f958 	bl	8015944 <xTaskRemoveFromEventList>
 8014694:	2800      	cmp	r0, #0
 8014696:	d0f4      	beq.n	8014682 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8014698:	f001 f9f8 	bl	8015a8c <vTaskMissedYield>
				--cRxLock;
 801469c:	1e63      	subs	r3, r4, #1
 801469e:	b2da      	uxtb	r2, r3
 80146a0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80146a2:	2a00      	cmp	r2, #0
 80146a4:	d1f1      	bne.n	801468a <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80146a6:	23ff      	movs	r3, #255	; 0xff
 80146a8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80146ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80146b0:	f001 bf16 	b.w	80164e0 <vPortExitCritical>

080146b4 <xQueueGenericReset>:
{
 80146b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80146b6:	b1e0      	cbz	r0, 80146f2 <xQueueGenericReset+0x3e>
 80146b8:	4604      	mov	r4, r0
 80146ba:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80146bc:	f001 feea 	bl	8016494 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80146c0:	6822      	ldr	r2, [r4, #0]
 80146c2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80146c6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80146c8:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80146cc:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80146ce:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80146d0:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80146d2:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80146d4:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80146d6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80146d8:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80146da:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80146dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80146e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80146e4:	b985      	cbnz	r5, 8014708 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80146e6:	6923      	ldr	r3, [r4, #16]
 80146e8:	b9d3      	cbnz	r3, 8014720 <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 80146ea:	f001 fef9 	bl	80164e0 <vPortExitCritical>
}
 80146ee:	2001      	movs	r0, #1
 80146f0:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80146f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80146f6:	b672      	cpsid	i
 80146f8:	f383 8811 	msr	BASEPRI, r3
 80146fc:	f3bf 8f6f 	isb	sy
 8014700:	f3bf 8f4f 	dsb	sy
 8014704:	b662      	cpsie	i
	configASSERT( pxQueue );
 8014706:	e7fe      	b.n	8014706 <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014708:	f104 0010 	add.w	r0, r4, #16
 801470c:	f7ff fefe 	bl	801450c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014710:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014714:	f7ff fefa 	bl	801450c <vListInitialise>
	taskEXIT_CRITICAL();
 8014718:	f001 fee2 	bl	80164e0 <vPortExitCritical>
}
 801471c:	2001      	movs	r0, #1
 801471e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014720:	f104 0010 	add.w	r0, r4, #16
 8014724:	f001 f90e 	bl	8015944 <xTaskRemoveFromEventList>
 8014728:	2800      	cmp	r0, #0
 801472a:	d0de      	beq.n	80146ea <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 801472c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014734:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014738:	f3bf 8f4f 	dsb	sy
 801473c:	f3bf 8f6f 	isb	sy
 8014740:	e7d3      	b.n	80146ea <xQueueGenericReset+0x36>
 8014742:	bf00      	nop

08014744 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014744:	b950      	cbnz	r0, 801475c <xQueueGenericCreateStatic+0x18>
 8014746:	f04f 0330 	mov.w	r3, #48	; 0x30
 801474a:	b672      	cpsid	i
 801474c:	f383 8811 	msr	BASEPRI, r3
 8014750:	f3bf 8f6f 	isb	sy
 8014754:	f3bf 8f4f 	dsb	sy
 8014758:	b662      	cpsie	i
 801475a:	e7fe      	b.n	801475a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 801475c:	b17b      	cbz	r3, 801477e <xQueueGenericCreateStatic+0x3a>
	{
 801475e:	b510      	push	{r4, lr}
 8014760:	460c      	mov	r4, r1
 8014762:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014764:	b33a      	cbz	r2, 80147b6 <xQueueGenericCreateStatic+0x72>
 8014766:	b9a9      	cbnz	r1, 8014794 <xQueueGenericCreateStatic+0x50>
 8014768:	f04f 0330 	mov.w	r3, #48	; 0x30
 801476c:	b672      	cpsid	i
 801476e:	f383 8811 	msr	BASEPRI, r3
 8014772:	f3bf 8f6f 	isb	sy
 8014776:	f3bf 8f4f 	dsb	sy
 801477a:	b662      	cpsie	i
 801477c:	e7fe      	b.n	801477c <xQueueGenericCreateStatic+0x38>
 801477e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014782:	b672      	cpsid	i
 8014784:	f383 8811 	msr	BASEPRI, r3
 8014788:	f3bf 8f6f 	isb	sy
 801478c:	f3bf 8f4f 	dsb	sy
 8014790:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8014792:	e7fe      	b.n	8014792 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014794:	b17a      	cbz	r2, 80147b6 <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014796:	2148      	movs	r1, #72	; 0x48
 8014798:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 801479a:	9903      	ldr	r1, [sp, #12]
 801479c:	2948      	cmp	r1, #72	; 0x48
 801479e:	d017      	beq.n	80147d0 <xQueueGenericCreateStatic+0x8c>
 80147a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147a4:	b672      	cpsid	i
 80147a6:	f383 8811 	msr	BASEPRI, r3
 80147aa:	f3bf 8f6f 	isb	sy
 80147ae:	f3bf 8f4f 	dsb	sy
 80147b2:	b662      	cpsie	i
 80147b4:	e7fe      	b.n	80147b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80147b6:	2c00      	cmp	r4, #0
 80147b8:	d0ed      	beq.n	8014796 <xQueueGenericCreateStatic+0x52>
 80147ba:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147be:	b672      	cpsid	i
 80147c0:	f383 8811 	msr	BASEPRI, r3
 80147c4:	f3bf 8f6f 	isb	sy
 80147c8:	f3bf 8f4f 	dsb	sy
 80147cc:	b662      	cpsie	i
 80147ce:	e7fe      	b.n	80147ce <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80147d0:	2c00      	cmp	r4, #0
 80147d2:	bf08      	it	eq
 80147d4:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80147d6:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 80147d8:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80147da:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80147dc:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 80147e0:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80147e2:	641c      	str	r4, [r3, #64]	; 0x40
 80147e4:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80147e6:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80147e8:	f7ff ff64 	bl	80146b4 <xQueueGenericReset>
	}
 80147ec:	9b01      	ldr	r3, [sp, #4]
 80147ee:	4618      	mov	r0, r3
 80147f0:	b004      	add	sp, #16
 80147f2:	bd10      	pop	{r4, pc}

080147f4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80147f4:	b950      	cbnz	r0, 801480c <xQueueGenericCreate+0x18>
 80147f6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147fa:	b672      	cpsid	i
 80147fc:	f383 8811 	msr	BASEPRI, r3
 8014800:	f3bf 8f6f 	isb	sy
 8014804:	f3bf 8f4f 	dsb	sy
 8014808:	b662      	cpsie	i
 801480a:	e7fe      	b.n	801480a <xQueueGenericCreate+0x16>
	{
 801480c:	b570      	push	{r4, r5, r6, lr}
 801480e:	4605      	mov	r5, r0
 8014810:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 8014812:	b979      	cbnz	r1, 8014834 <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014814:	2048      	movs	r0, #72	; 0x48
 8014816:	f001 ffa7 	bl	8016768 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801481a:	4604      	mov	r4, r0
 801481c:	b1c0      	cbz	r0, 8014850 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801481e:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014822:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014824:	2101      	movs	r1, #1
 8014826:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8014828:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801482c:	f7ff ff42 	bl	80146b4 <xQueueGenericReset>
	}
 8014830:	4620      	mov	r0, r4
 8014832:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014834:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014838:	3048      	adds	r0, #72	; 0x48
 801483a:	f001 ff95 	bl	8016768 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801483e:	4604      	mov	r4, r0
 8014840:	b130      	cbz	r0, 8014850 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014842:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014844:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014848:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801484c:	6003      	str	r3, [r0, #0]
 801484e:	e7e9      	b.n	8014824 <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014850:	2400      	movs	r4, #0
	}
 8014852:	4620      	mov	r0, r4
 8014854:	bd70      	pop	{r4, r5, r6, pc}
 8014856:	bf00      	nop

08014858 <xQueueGenericSend>:
{
 8014858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801485c:	b085      	sub	sp, #20
 801485e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8014860:	2800      	cmp	r0, #0
 8014862:	f000 8083 	beq.w	801496c <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014866:	460f      	mov	r7, r1
 8014868:	4604      	mov	r4, r0
 801486a:	461e      	mov	r6, r3
 801486c:	2900      	cmp	r1, #0
 801486e:	d06b      	beq.n	8014948 <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014870:	2e02      	cmp	r6, #2
 8014872:	d10d      	bne.n	8014890 <xQueueGenericSend+0x38>
 8014874:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014876:	2b01      	cmp	r3, #1
 8014878:	d00a      	beq.n	8014890 <xQueueGenericSend+0x38>
 801487a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801487e:	b672      	cpsid	i
 8014880:	f383 8811 	msr	BASEPRI, r3
 8014884:	f3bf 8f6f 	isb	sy
 8014888:	f3bf 8f4f 	dsb	sy
 801488c:	b662      	cpsie	i
 801488e:	e7fe      	b.n	801488e <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014890:	f001 f908 	bl	8015aa4 <xTaskGetSchedulerState>
 8014894:	2800      	cmp	r0, #0
 8014896:	d074      	beq.n	8014982 <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014898:	f1a6 0802 	sub.w	r8, r6, #2
 801489c:	2500      	movs	r5, #0
 801489e:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 80148a2:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80148a4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80148a8:	e007      	b.n	80148ba <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80148aa:	f001 fe19 	bl	80164e0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80148ae:	4620      	mov	r0, r4
 80148b0:	f7ff feba 	bl	8014628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80148b4:	f000 ffb6 	bl	8015824 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80148b8:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80148ba:	f001 fdeb 	bl	8016494 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80148be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80148c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80148c2:	4290      	cmp	r0, r2
 80148c4:	d36b      	bcc.n	801499e <xQueueGenericSend+0x146>
 80148c6:	f1b8 0f00 	cmp.w	r8, #0
 80148ca:	d168      	bne.n	801499e <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 80148cc:	9b01      	ldr	r3, [sp, #4]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d07d      	beq.n	80149ce <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 80148d2:	2d00      	cmp	r5, #0
 80148d4:	d046      	beq.n	8014964 <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 80148d6:	f001 fe03 	bl	80164e0 <vPortExitCritical>
		vTaskSuspendAll();
 80148da:	f000 fe47 	bl	801556c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80148de:	f001 fdd9 	bl	8016494 <vPortEnterCritical>
 80148e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80148e6:	2bff      	cmp	r3, #255	; 0xff
 80148e8:	d101      	bne.n	80148ee <xQueueGenericSend+0x96>
 80148ea:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80148ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80148f2:	2bff      	cmp	r3, #255	; 0xff
 80148f4:	d101      	bne.n	80148fa <xQueueGenericSend+0xa2>
 80148f6:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80148fa:	f001 fdf1 	bl	80164e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80148fe:	a901      	add	r1, sp, #4
 8014900:	a802      	add	r0, sp, #8
 8014902:	f001 f877 	bl	80159f4 <xTaskCheckForTimeOut>
 8014906:	2800      	cmp	r0, #0
 8014908:	d165      	bne.n	80149d6 <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 801490a:	f001 fdc3 	bl	8016494 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801490e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014910:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014912:	429a      	cmp	r2, r3
 8014914:	d1c9      	bne.n	80148aa <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 8014916:	f001 fde3 	bl	80164e0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801491a:	9901      	ldr	r1, [sp, #4]
 801491c:	f104 0010 	add.w	r0, r4, #16
 8014920:	f000 ffd4 	bl	80158cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014924:	4620      	mov	r0, r4
 8014926:	f7ff fe7f 	bl	8014628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801492a:	f000 ff7b 	bl	8015824 <xTaskResumeAll>
 801492e:	2800      	cmp	r0, #0
 8014930:	d1c2      	bne.n	80148b8 <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 8014932:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801493a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801493e:	f3bf 8f4f 	dsb	sy
 8014942:	f3bf 8f6f 	isb	sy
 8014946:	e7b7      	b.n	80148b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014948:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801494a:	2b00      	cmp	r3, #0
 801494c:	d090      	beq.n	8014870 <xQueueGenericSend+0x18>
 801494e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014952:	b672      	cpsid	i
 8014954:	f383 8811 	msr	BASEPRI, r3
 8014958:	f3bf 8f6f 	isb	sy
 801495c:	f3bf 8f4f 	dsb	sy
 8014960:	b662      	cpsie	i
 8014962:	e7fe      	b.n	8014962 <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014964:	a802      	add	r0, sp, #8
 8014966:	f001 f839 	bl	80159dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801496a:	e7b4      	b.n	80148d6 <xQueueGenericSend+0x7e>
 801496c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014970:	b672      	cpsid	i
 8014972:	f383 8811 	msr	BASEPRI, r3
 8014976:	f3bf 8f6f 	isb	sy
 801497a:	f3bf 8f4f 	dsb	sy
 801497e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8014980:	e7fe      	b.n	8014980 <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014982:	9b01      	ldr	r3, [sp, #4]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d087      	beq.n	8014898 <xQueueGenericSend+0x40>
 8014988:	f04f 0330 	mov.w	r3, #48	; 0x30
 801498c:	b672      	cpsid	i
 801498e:	f383 8811 	msr	BASEPRI, r3
 8014992:	f3bf 8f6f 	isb	sy
 8014996:	f3bf 8f4f 	dsb	sy
 801499a:	b662      	cpsie	i
 801499c:	e7fe      	b.n	801499c <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801499e:	4632      	mov	r2, r6
 80149a0:	4639      	mov	r1, r7
 80149a2:	4620      	mov	r0, r4
 80149a4:	f7ff fdfe 	bl	80145a4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80149a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149aa:	b9db      	cbnz	r3, 80149e4 <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 80149ac:	b148      	cbz	r0, 80149c2 <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 80149ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80149b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80149ba:	f3bf 8f4f 	dsb	sy
 80149be:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80149c2:	f001 fd8d 	bl	80164e0 <vPortExitCritical>
				return pdPASS;
 80149c6:	2001      	movs	r0, #1
}
 80149c8:	b005      	add	sp, #20
 80149ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 80149ce:	f001 fd87 	bl	80164e0 <vPortExitCritical>
					return errQUEUE_FULL;
 80149d2:	4640      	mov	r0, r8
 80149d4:	e7f8      	b.n	80149c8 <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 80149d6:	4620      	mov	r0, r4
 80149d8:	f7ff fe26 	bl	8014628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80149dc:	f000 ff22 	bl	8015824 <xTaskResumeAll>
			return errQUEUE_FULL;
 80149e0:	2000      	movs	r0, #0
 80149e2:	e7f1      	b.n	80149c8 <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80149e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80149e8:	f000 ffac 	bl	8015944 <xTaskRemoveFromEventList>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d0e8      	beq.n	80149c2 <xQueueGenericSend+0x16a>
 80149f0:	e7dd      	b.n	80149ae <xQueueGenericSend+0x156>
 80149f2:	bf00      	nop

080149f4 <xQueueCreateMutexStatic>:
	{
 80149f4:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80149f6:	2200      	movs	r2, #0
	{
 80149f8:	4604      	mov	r4, r0
 80149fa:	b082      	sub	sp, #8
 80149fc:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80149fe:	2001      	movs	r0, #1
 8014a00:	4611      	mov	r1, r2
 8014a02:	9400      	str	r4, [sp, #0]
 8014a04:	f7ff fe9e 	bl	8014744 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8014a08:	4604      	mov	r4, r0
 8014a0a:	b138      	cbz	r0, 8014a1c <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014a0c:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014a0e:	461a      	mov	r2, r3
 8014a10:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014a12:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014a14:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014a16:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014a18:	f7ff ff1e 	bl	8014858 <xQueueGenericSend>
	}
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	b002      	add	sp, #8
 8014a20:	bd10      	pop	{r4, pc}
 8014a22:	bf00      	nop

08014a24 <xQueueCreateMutex>:
	{
 8014a24:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014a26:	2048      	movs	r0, #72	; 0x48
 8014a28:	f001 fe9e 	bl	8016768 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8014a2c:	4604      	mov	r4, r0
 8014a2e:	b188      	cbz	r0, 8014a54 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014a30:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8014a32:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014a34:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014a36:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8014a3a:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014a3e:	f7ff fe39 	bl	80146b4 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014a42:	462b      	mov	r3, r5
 8014a44:	462a      	mov	r2, r5
 8014a46:	4629      	mov	r1, r5
 8014a48:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014a4a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014a4c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014a4e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014a50:	f7ff ff02 	bl	8014858 <xQueueGenericSend>
	}
 8014a54:	4620      	mov	r0, r4
 8014a56:	bd38      	pop	{r3, r4, r5, pc}

08014a58 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d053      	beq.n	8014b04 <xQueueGenericSendFromISR+0xac>
{
 8014a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a60:	460e      	mov	r6, r1
 8014a62:	4604      	mov	r4, r0
 8014a64:	4617      	mov	r7, r2
 8014a66:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014a68:	b359      	cbz	r1, 8014ac2 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014a6a:	2d02      	cmp	r5, #2
 8014a6c:	d10d      	bne.n	8014a8a <xQueueGenericSendFromISR+0x32>
 8014a6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	d00a      	beq.n	8014a8a <xQueueGenericSendFromISR+0x32>
 8014a74:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a78:	b672      	cpsid	i
 8014a7a:	f383 8811 	msr	BASEPRI, r3
 8014a7e:	f3bf 8f6f 	isb	sy
 8014a82:	f3bf 8f4f 	dsb	sy
 8014a86:	b662      	cpsie	i
 8014a88:	e7fe      	b.n	8014a88 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014a8a:	f001 fe09 	bl	80166a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014a8e:	f3ef 8811 	mrs	r8, BASEPRI
 8014a92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a96:	b672      	cpsid	i
 8014a98:	f383 8811 	msr	BASEPRI, r3
 8014a9c:	f3bf 8f6f 	isb	sy
 8014aa0:	f3bf 8f4f 	dsb	sy
 8014aa4:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014aa6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014aa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d317      	bcc.n	8014ade <xQueueGenericSendFromISR+0x86>
 8014aae:	f1a5 0002 	sub.w	r0, r5, #2
 8014ab2:	fab0 f080 	clz	r0, r0
 8014ab6:	0940      	lsrs	r0, r0, #5
 8014ab8:	b988      	cbnz	r0, 8014ade <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014aba:	f388 8811 	msr	BASEPRI, r8
}
 8014abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014ac2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d0d0      	beq.n	8014a6a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8014ac8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014acc:	b672      	cpsid	i
 8014ace:	f383 8811 	msr	BASEPRI, r3
 8014ad2:	f3bf 8f6f 	isb	sy
 8014ad6:	f3bf 8f4f 	dsb	sy
 8014ada:	b662      	cpsie	i
 8014adc:	e7fe      	b.n	8014adc <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014ade:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8014ae0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014ae4:	4631      	mov	r1, r6
 8014ae6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8014ae8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014aea:	f7ff fd5b 	bl	80145a4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8014aee:	1c6b      	adds	r3, r5, #1
 8014af0:	d013      	beq.n	8014b1a <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014af2:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8014af4:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014af6:	b25b      	sxtb	r3, r3
 8014af8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8014afc:	f388 8811 	msr	BASEPRI, r8
}
 8014b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8014b04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b08:	b672      	cpsid	i
 8014b0a:	f383 8811 	msr	BASEPRI, r3
 8014b0e:	f3bf 8f6f 	isb	sy
 8014b12:	f3bf 8f4f 	dsb	sy
 8014b16:	b662      	cpsie	i
	configASSERT( pxQueue );
 8014b18:	e7fe      	b.n	8014b18 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b1c:	b90b      	cbnz	r3, 8014b22 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8014b1e:	2001      	movs	r0, #1
 8014b20:	e7cb      	b.n	8014aba <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014b22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014b26:	f000 ff0d 	bl	8015944 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8014b2a:	2800      	cmp	r0, #0
 8014b2c:	d0f7      	beq.n	8014b1e <xQueueGenericSendFromISR+0xc6>
 8014b2e:	2f00      	cmp	r7, #0
 8014b30:	d0f5      	beq.n	8014b1e <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014b32:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8014b34:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014b36:	603b      	str	r3, [r7, #0]
 8014b38:	e7bf      	b.n	8014aba <xQueueGenericSendFromISR+0x62>
 8014b3a:	bf00      	nop

08014b3c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8014b3c:	b380      	cbz	r0, 8014ba0 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8014b3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8014b40:	b570      	push	{r4, r5, r6, lr}
 8014b42:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8014b44:	b153      	cbz	r3, 8014b5c <xQueueGiveFromISR+0x20>
 8014b46:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b4a:	b672      	cpsid	i
 8014b4c:	f383 8811 	msr	BASEPRI, r3
 8014b50:	f3bf 8f6f 	isb	sy
 8014b54:	f3bf 8f4f 	dsb	sy
 8014b58:	b662      	cpsie	i
 8014b5a:	e7fe      	b.n	8014b5a <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014b5c:	6803      	ldr	r3, [r0, #0]
 8014b5e:	460d      	mov	r5, r1
 8014b60:	b34b      	cbz	r3, 8014bb6 <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014b62:	f001 fd9d 	bl	80166a0 <vPortValidateInterruptPriority>
	__asm volatile
 8014b66:	f3ef 8611 	mrs	r6, BASEPRI
 8014b6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b6e:	b672      	cpsid	i
 8014b70:	f383 8811 	msr	BASEPRI, r3
 8014b74:	f3bf 8f6f 	isb	sy
 8014b78:	f3bf 8f4f 	dsb	sy
 8014b7c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014b80:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d925      	bls.n	8014bd2 <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8014b86:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014b8a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8014b8c:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014b8e:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8014b90:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8014b92:	d022      	beq.n	8014bda <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014b94:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8014b96:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014b98:	b25b      	sxtb	r3, r3
 8014b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014b9e:	e019      	b.n	8014bd4 <xQueueGiveFromISR+0x98>
	__asm volatile
 8014ba0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014ba4:	b672      	cpsid	i
 8014ba6:	f383 8811 	msr	BASEPRI, r3
 8014baa:	f3bf 8f6f 	isb	sy
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	b662      	cpsie	i
	configASSERT( pxQueue );
 8014bb4:	e7fe      	b.n	8014bb4 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014bb6:	6883      	ldr	r3, [r0, #8]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d0d2      	beq.n	8014b62 <xQueueGiveFromISR+0x26>
 8014bbc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014bc0:	b672      	cpsid	i
 8014bc2:	f383 8811 	msr	BASEPRI, r3
 8014bc6:	f3bf 8f6f 	isb	sy
 8014bca:	f3bf 8f4f 	dsb	sy
 8014bce:	b662      	cpsie	i
 8014bd0:	e7fe      	b.n	8014bd0 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8014bd2:	2000      	movs	r0, #0
	__asm volatile
 8014bd4:	f386 8811 	msr	BASEPRI, r6
}
 8014bd8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bdc:	b90b      	cbnz	r3, 8014be2 <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8014bde:	2001      	movs	r0, #1
 8014be0:	e7f8      	b.n	8014bd4 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014be2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014be6:	f000 fead 	bl	8015944 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8014bea:	2d00      	cmp	r5, #0
 8014bec:	d0f7      	beq.n	8014bde <xQueueGiveFromISR+0xa2>
 8014bee:	2800      	cmp	r0, #0
 8014bf0:	d0f5      	beq.n	8014bde <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014bf2:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8014bf4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014bf6:	602b      	str	r3, [r5, #0]
 8014bf8:	e7ec      	b.n	8014bd4 <xQueueGiveFromISR+0x98>
 8014bfa:	bf00      	nop

08014bfc <xQueueReceive>:
{
 8014bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c00:	b085      	sub	sp, #20
 8014c02:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8014c04:	2800      	cmp	r0, #0
 8014c06:	f000 80a4 	beq.w	8014d52 <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c0a:	460d      	mov	r5, r1
 8014c0c:	4604      	mov	r4, r0
 8014c0e:	2900      	cmp	r1, #0
 8014c10:	d047      	beq.n	8014ca2 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014c12:	f000 ff47 	bl	8015aa4 <xTaskGetSchedulerState>
 8014c16:	2800      	cmp	r0, #0
 8014c18:	d051      	beq.n	8014cbe <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 8014c1a:	f001 fc3b 	bl	8016494 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014c1e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c20:	2e00      	cmp	r6, #0
 8014c22:	d16b      	bne.n	8014cfc <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8014c24:	9b01      	ldr	r3, [sp, #4]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d035      	beq.n	8014c96 <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8014c2a:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014c2c:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8014c30:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014c34:	a802      	add	r0, sp, #8
 8014c36:	f000 fed1 	bl	80159dc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8014c3a:	f001 fc51 	bl	80164e0 <vPortExitCritical>
		vTaskSuspendAll();
 8014c3e:	f000 fc95 	bl	801556c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014c42:	f001 fc27 	bl	8016494 <vPortEnterCritical>
 8014c46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014c4a:	2bff      	cmp	r3, #255	; 0xff
 8014c4c:	d101      	bne.n	8014c52 <xQueueReceive+0x56>
 8014c4e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8014c52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014c56:	2bff      	cmp	r3, #255	; 0xff
 8014c58:	d101      	bne.n	8014c5e <xQueueReceive+0x62>
 8014c5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014c5e:	f001 fc3f 	bl	80164e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014c62:	a901      	add	r1, sp, #4
 8014c64:	a802      	add	r0, sp, #8
 8014c66:	f000 fec5 	bl	80159f4 <xTaskCheckForTimeOut>
 8014c6a:	2800      	cmp	r0, #0
 8014c6c:	d135      	bne.n	8014cda <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 8014c6e:	f001 fc11 	bl	8016494 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014c72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d056      	beq.n	8014d26 <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 8014c78:	f001 fc32 	bl	80164e0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8014c7c:	4620      	mov	r0, r4
 8014c7e:	f7ff fcd3 	bl	8014628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014c82:	f000 fdcf 	bl	8015824 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8014c86:	f001 fc05 	bl	8016494 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014c8a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c8c:	2e00      	cmp	r6, #0
 8014c8e:	d135      	bne.n	8014cfc <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8014c90:	9b01      	ldr	r3, [sp, #4]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d1d1      	bne.n	8014c3a <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8014c96:	f001 fc23 	bl	80164e0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8014c9a:	2000      	movs	r0, #0
}
 8014c9c:	b005      	add	sp, #20
 8014c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014ca2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d0b4      	beq.n	8014c12 <xQueueReceive+0x16>
	__asm volatile
 8014ca8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014cac:	b672      	cpsid	i
 8014cae:	f383 8811 	msr	BASEPRI, r3
 8014cb2:	f3bf 8f6f 	isb	sy
 8014cb6:	f3bf 8f4f 	dsb	sy
 8014cba:	b662      	cpsie	i
 8014cbc:	e7fe      	b.n	8014cbc <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014cbe:	9b01      	ldr	r3, [sp, #4]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d0aa      	beq.n	8014c1a <xQueueReceive+0x1e>
 8014cc4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014cc8:	b672      	cpsid	i
 8014cca:	f383 8811 	msr	BASEPRI, r3
 8014cce:	f3bf 8f6f 	isb	sy
 8014cd2:	f3bf 8f4f 	dsb	sy
 8014cd6:	b662      	cpsie	i
 8014cd8:	e7fe      	b.n	8014cd8 <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 8014cda:	4620      	mov	r0, r4
 8014cdc:	f7ff fca4 	bl	8014628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014ce0:	f000 fda0 	bl	8015824 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8014ce4:	f001 fbd6 	bl	8016494 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014ce8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d0d3      	beq.n	8014c96 <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8014cee:	f001 fbf7 	bl	80164e0 <vPortExitCritical>
		taskENTER_CRITICAL();
 8014cf2:	f001 fbcf 	bl	8016494 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014cf6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014cf8:	2e00      	cmp	r6, #0
 8014cfa:	d0c9      	beq.n	8014c90 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014cfc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014cfe:	b152      	cbz	r2, 8014d16 <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014d00:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014d02:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014d04:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014d06:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014d08:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014d0a:	d301      	bcc.n	8014d10 <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014d0c:	6821      	ldr	r1, [r4, #0]
 8014d0e:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014d10:	4628      	mov	r0, r5
 8014d12:	f00e fc0f 	bl	8023534 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014d16:	3e01      	subs	r6, #1
 8014d18:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014d1a:	6923      	ldr	r3, [r4, #16]
 8014d1c:	bb23      	cbnz	r3, 8014d68 <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 8014d1e:	f001 fbdf 	bl	80164e0 <vPortExitCritical>
				return pdPASS;
 8014d22:	2001      	movs	r0, #1
 8014d24:	e7ba      	b.n	8014c9c <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 8014d26:	f001 fbdb 	bl	80164e0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014d2a:	9901      	ldr	r1, [sp, #4]
 8014d2c:	4640      	mov	r0, r8
 8014d2e:	f000 fdcd 	bl	80158cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014d32:	4620      	mov	r0, r4
 8014d34:	f7ff fc78 	bl	8014628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014d38:	f000 fd74 	bl	8015824 <xTaskResumeAll>
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	d1d8      	bne.n	8014cf2 <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8014d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014d44:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8014d48:	f3bf 8f4f 	dsb	sy
 8014d4c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8014d50:	e7cf      	b.n	8014cf2 <xQueueReceive+0xf6>
 8014d52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d56:	b672      	cpsid	i
 8014d58:	f383 8811 	msr	BASEPRI, r3
 8014d5c:	f3bf 8f6f 	isb	sy
 8014d60:	f3bf 8f4f 	dsb	sy
 8014d64:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8014d66:	e7fe      	b.n	8014d66 <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014d68:	f104 0010 	add.w	r0, r4, #16
 8014d6c:	f000 fdea 	bl	8015944 <xTaskRemoveFromEventList>
 8014d70:	2800      	cmp	r0, #0
 8014d72:	d0d4      	beq.n	8014d1e <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 8014d74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014d80:	f3bf 8f4f 	dsb	sy
 8014d84:	f3bf 8f6f 	isb	sy
 8014d88:	e7c9      	b.n	8014d1e <xQueueReceive+0x122>
 8014d8a:	bf00      	nop

08014d8c <xQueueSemaphoreTake>:
{
 8014d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d8e:	b085      	sub	sp, #20
 8014d90:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8014d92:	2800      	cmp	r0, #0
 8014d94:	d057      	beq.n	8014e46 <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 8014d96:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8014d98:	4604      	mov	r4, r0
 8014d9a:	b156      	cbz	r6, 8014db2 <xQueueSemaphoreTake+0x26>
 8014d9c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014da0:	b672      	cpsid	i
 8014da2:	f383 8811 	msr	BASEPRI, r3
 8014da6:	f3bf 8f6f 	isb	sy
 8014daa:	f3bf 8f4f 	dsb	sy
 8014dae:	b662      	cpsie	i
 8014db0:	e7fe      	b.n	8014db0 <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014db2:	f000 fe77 	bl	8015aa4 <xTaskGetSchedulerState>
 8014db6:	4605      	mov	r5, r0
 8014db8:	2800      	cmp	r0, #0
 8014dba:	d04f      	beq.n	8014e5c <xQueueSemaphoreTake+0xd0>
 8014dbc:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8014dbe:	f001 fb69 	bl	8016494 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014dc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8014dc4:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014dc6:	bb8b      	cbnz	r3, 8014e2c <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8014dc8:	9b01      	ldr	r3, [sp, #4]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	f000 809f 	beq.w	8014f0e <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 8014dd0:	2d00      	cmp	r5, #0
 8014dd2:	d05d      	beq.n	8014e90 <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 8014dd4:	f001 fb84 	bl	80164e0 <vPortExitCritical>
		vTaskSuspendAll();
 8014dd8:	f000 fbc8 	bl	801556c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014ddc:	f001 fb5a 	bl	8016494 <vPortEnterCritical>
 8014de0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014de4:	2bff      	cmp	r3, #255	; 0xff
 8014de6:	d101      	bne.n	8014dec <xQueueSemaphoreTake+0x60>
 8014de8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8014dec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014df0:	2bff      	cmp	r3, #255	; 0xff
 8014df2:	d101      	bne.n	8014df8 <xQueueSemaphoreTake+0x6c>
 8014df4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014df8:	f001 fb72 	bl	80164e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014dfc:	a901      	add	r1, sp, #4
 8014dfe:	a802      	add	r0, sp, #8
 8014e00:	f000 fdf8 	bl	80159f4 <xTaskCheckForTimeOut>
 8014e04:	2800      	cmp	r0, #0
 8014e06:	d137      	bne.n	8014e78 <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 8014e08:	f001 fb44 	bl	8016494 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014e0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d042      	beq.n	8014e98 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 8014e12:	f001 fb65 	bl	80164e0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8014e16:	4620      	mov	r0, r4
 8014e18:	f7ff fc06 	bl	8014628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014e1c:	f000 fd02 	bl	8015824 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8014e20:	f001 fb38 	bl	8016494 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014e24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014e26:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d0cd      	beq.n	8014dc8 <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014e2c:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014e2e:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014e30:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014e32:	2a00      	cmp	r2, #0
 8014e34:	f000 8089 	beq.w	8014f4a <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e38:	6923      	ldr	r3, [r4, #16]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d174      	bne.n	8014f28 <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 8014e3e:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8014e40:	f001 fb4e 	bl	80164e0 <vPortExitCritical>
				return pdPASS;
 8014e44:	e046      	b.n	8014ed4 <xQueueSemaphoreTake+0x148>
 8014e46:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014e4a:	b672      	cpsid	i
 8014e4c:	f383 8811 	msr	BASEPRI, r3
 8014e50:	f3bf 8f6f 	isb	sy
 8014e54:	f3bf 8f4f 	dsb	sy
 8014e58:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8014e5a:	e7fe      	b.n	8014e5a <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014e5c:	9b01      	ldr	r3, [sp, #4]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d03b      	beq.n	8014eda <xQueueSemaphoreTake+0x14e>
 8014e62:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014e66:	b672      	cpsid	i
 8014e68:	f383 8811 	msr	BASEPRI, r3
 8014e6c:	f3bf 8f6f 	isb	sy
 8014e70:	f3bf 8f4f 	dsb	sy
 8014e74:	b662      	cpsie	i
 8014e76:	e7fe      	b.n	8014e76 <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 8014e78:	4620      	mov	r0, r4
 8014e7a:	f7ff fbd5 	bl	8014628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014e7e:	f000 fcd1 	bl	8015824 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8014e82:	f001 fb07 	bl	8016494 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014e86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014e88:	b30b      	cbz	r3, 8014ece <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 8014e8a:	f001 fb29 	bl	80164e0 <vPortExitCritical>
	return xReturn;
 8014e8e:	e7c7      	b.n	8014e20 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014e90:	a802      	add	r0, sp, #8
 8014e92:	f000 fda3 	bl	80159dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014e96:	e79d      	b.n	8014dd4 <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 8014e98:	f001 fb22 	bl	80164e0 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014e9c:	6823      	ldr	r3, [r4, #0]
 8014e9e:	b36b      	cbz	r3, 8014efc <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014ea0:	9901      	ldr	r1, [sp, #4]
 8014ea2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014ea6:	f000 fd11 	bl	80158cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014eaa:	4620      	mov	r0, r4
 8014eac:	f7ff fbbc 	bl	8014628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014eb0:	f000 fcb8 	bl	8015824 <xTaskResumeAll>
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	d1b3      	bne.n	8014e20 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 8014eb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ec0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014ec4:	f3bf 8f4f 	dsb	sy
 8014ec8:	f3bf 8f6f 	isb	sy
 8014ecc:	e7a8      	b.n	8014e20 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 8014ece:	f001 fb07 	bl	80164e0 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8014ed2:	b926      	cbnz	r6, 8014ede <xQueueSemaphoreTake+0x152>
}
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	b005      	add	sp, #20
 8014ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014eda:	4606      	mov	r6, r0
 8014edc:	e76f      	b.n	8014dbe <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 8014ede:	f001 fad9 	bl	8016494 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014ee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014ee4:	b119      	cbz	r1, 8014eee <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014ee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014ee8:	6819      	ldr	r1, [r3, #0]
 8014eea:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014eee:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8014ef0:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014ef2:	f000 fe9f 	bl	8015c34 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8014ef6:	f001 faf3 	bl	80164e0 <vPortExitCritical>
 8014efa:	e7eb      	b.n	8014ed4 <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 8014efc:	f001 faca 	bl	8016494 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014f00:	68a0      	ldr	r0, [r4, #8]
 8014f02:	f000 fddf 	bl	8015ac4 <xTaskPriorityInherit>
 8014f06:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8014f08:	f001 faea 	bl	80164e0 <vPortExitCritical>
 8014f0c:	e7c8      	b.n	8014ea0 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014f0e:	2e00      	cmp	r6, #0
 8014f10:	d0f1      	beq.n	8014ef6 <xQueueSemaphoreTake+0x16a>
 8014f12:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f16:	b672      	cpsid	i
 8014f18:	f383 8811 	msr	BASEPRI, r3
 8014f1c:	f3bf 8f6f 	isb	sy
 8014f20:	f3bf 8f4f 	dsb	sy
 8014f24:	b662      	cpsie	i
 8014f26:	e7fe      	b.n	8014f26 <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014f28:	f104 0010 	add.w	r0, r4, #16
 8014f2c:	f000 fd0a 	bl	8015944 <xTaskRemoveFromEventList>
 8014f30:	2800      	cmp	r0, #0
 8014f32:	d084      	beq.n	8014e3e <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8014f34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014f40:	f3bf 8f4f 	dsb	sy
 8014f44:	f3bf 8f6f 	isb	sy
 8014f48:	e779      	b.n	8014e3e <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014f4a:	f000 fee1 	bl	8015d10 <pvTaskIncrementMutexHeldCount>
 8014f4e:	60a0      	str	r0, [r4, #8]
 8014f50:	e772      	b.n	8014e38 <xQueueSemaphoreTake+0xac>
 8014f52:	bf00      	nop

08014f54 <xQueueReceiveFromISR>:
{
 8014f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8014f58:	b330      	cbz	r0, 8014fa8 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f5a:	460e      	mov	r6, r1
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	4617      	mov	r7, r2
 8014f60:	b1a1      	cbz	r1, 8014f8c <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014f62:	f001 fb9d 	bl	80166a0 <vPortValidateInterruptPriority>
	__asm volatile
 8014f66:	f3ef 8911 	mrs	r9, BASEPRI
 8014f6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f6e:	b672      	cpsid	i
 8014f70:	f383 8811 	msr	BASEPRI, r3
 8014f74:	f3bf 8f6f 	isb	sy
 8014f78:	f3bf 8f4f 	dsb	sy
 8014f7c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014f7e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014f80:	b9ed      	cbnz	r5, 8014fbe <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 8014f82:	4628      	mov	r0, r5
	__asm volatile
 8014f84:	f389 8811 	msr	BASEPRI, r9
}
 8014f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d0e7      	beq.n	8014f62 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8014f92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f96:	b672      	cpsid	i
 8014f98:	f383 8811 	msr	BASEPRI, r3
 8014f9c:	f3bf 8f6f 	isb	sy
 8014fa0:	f3bf 8f4f 	dsb	sy
 8014fa4:	b662      	cpsie	i
 8014fa6:	e7fe      	b.n	8014fa6 <xQueueReceiveFromISR+0x52>
 8014fa8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014fac:	b672      	cpsid	i
 8014fae:	f383 8811 	msr	BASEPRI, r3
 8014fb2:	f3bf 8f6f 	isb	sy
 8014fb6:	f3bf 8f4f 	dsb	sy
 8014fba:	b662      	cpsie	i
	configASSERT( pxQueue );
 8014fbc:	e7fe      	b.n	8014fbc <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 8014fbe:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014fc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8014fc4:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014fc8:	b142      	cbz	r2, 8014fdc <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014fca:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014fcc:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014fce:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014fd0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014fd2:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014fd4:	d215      	bcs.n	8015002 <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014fd6:	4630      	mov	r0, r6
 8014fd8:	f00e faac 	bl	8023534 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014fdc:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8014fde:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014fe2:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8014fe4:	d009      	beq.n	8014ffa <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014fe6:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 8014fea:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014fec:	b25b      	sxtb	r3, r3
 8014fee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 8014ff2:	f389 8811 	msr	BASEPRI, r9
}
 8014ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014ffa:	6923      	ldr	r3, [r4, #16]
 8014ffc:	b923      	cbnz	r3, 8015008 <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 8014ffe:	2001      	movs	r0, #1
 8015000:	e7c0      	b.n	8014f84 <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015002:	6821      	ldr	r1, [r4, #0]
 8015004:	60e1      	str	r1, [r4, #12]
 8015006:	e7e6      	b.n	8014fd6 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015008:	f104 0010 	add.w	r0, r4, #16
 801500c:	f000 fc9a 	bl	8015944 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8015010:	2f00      	cmp	r7, #0
 8015012:	d0f4      	beq.n	8014ffe <xQueueReceiveFromISR+0xaa>
 8015014:	2800      	cmp	r0, #0
 8015016:	d0f2      	beq.n	8014ffe <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015018:	2301      	movs	r3, #1
			xReturn = pdPASS;
 801501a:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 801501c:	603b      	str	r3, [r7, #0]
 801501e:	e7b1      	b.n	8014f84 <xQueueReceiveFromISR+0x30>

08015020 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015020:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015022:	2300      	movs	r3, #0
 8015024:	4c08      	ldr	r4, [pc, #32]	; (8015048 <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015026:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 801502a:	b12a      	cbz	r2, 8015038 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801502c:	3301      	adds	r3, #1
 801502e:	2b08      	cmp	r3, #8
 8015030:	d1f9      	bne.n	8015026 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015036:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015038:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801503c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8015040:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015044:	6050      	str	r0, [r2, #4]
	}
 8015046:	4770      	bx	lr
 8015048:	20005efc 	.word	0x20005efc

0801504c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801504c:	b570      	push	{r4, r5, r6, lr}
 801504e:	4604      	mov	r4, r0
 8015050:	460e      	mov	r6, r1
 8015052:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015054:	f001 fa1e 	bl	8016494 <vPortEnterCritical>
 8015058:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801505c:	2bff      	cmp	r3, #255	; 0xff
 801505e:	d102      	bne.n	8015066 <vQueueWaitForMessageRestricted+0x1a>
 8015060:	2300      	movs	r3, #0
 8015062:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8015066:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801506a:	2bff      	cmp	r3, #255	; 0xff
 801506c:	d102      	bne.n	8015074 <vQueueWaitForMessageRestricted+0x28>
 801506e:	2300      	movs	r3, #0
 8015070:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015074:	f001 fa34 	bl	80164e0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015078:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801507a:	b123      	cbz	r3, 8015086 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801507c:	4620      	mov	r0, r4
	}
 801507e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8015082:	f7ff bad1 	b.w	8014628 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015086:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801508a:	462a      	mov	r2, r5
 801508c:	4631      	mov	r1, r6
 801508e:	f000 fc39 	bl	8015904 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8015092:	4620      	mov	r0, r4
	}
 8015094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8015098:	f7ff bac6 	b.w	8014628 <prvUnlockQueue>

0801509c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801509c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150a0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80150a2:	f001 f9f7 	bl	8016494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80150a6:	4a35      	ldr	r2, [pc, #212]	; (801517c <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 80150a8:	4d35      	ldr	r5, [pc, #212]	; (8015180 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 80150aa:	6813      	ldr	r3, [r2, #0]
 80150ac:	3301      	adds	r3, #1
 80150ae:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80150b0:	682b      	ldr	r3, [r5, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d034      	beq.n	8015120 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80150b6:	4e33      	ldr	r6, [pc, #204]	; (8015184 <prvAddNewTaskToReadyList+0xe8>)
 80150b8:	6833      	ldr	r3, [r6, #0]
 80150ba:	b343      	cbz	r3, 801510e <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80150bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80150be:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80151a8 <prvAddNewTaskToReadyList+0x10c>
 80150c2:	2201      	movs	r2, #1
		uxTaskNumber++;
 80150c4:	4f30      	ldr	r7, [pc, #192]	; (8015188 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80150c6:	4931      	ldr	r1, [pc, #196]	; (801518c <prvAddNewTaskToReadyList+0xf0>)
 80150c8:	409a      	lsls	r2, r3
 80150ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80150ce:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	3301      	adds	r3, #1
 80150d6:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80150d8:	680b      	ldr	r3, [r1, #0]
 80150da:	431a      	orrs	r2, r3
 80150dc:	600a      	str	r2, [r1, #0]
 80150de:	1d21      	adds	r1, r4, #4
 80150e0:	f7ff fa24 	bl	801452c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80150e4:	f001 f9fc 	bl	80164e0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80150e8:	6833      	ldr	r3, [r6, #0]
 80150ea:	b173      	cbz	r3, 801510a <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80150ec:	682a      	ldr	r2, [r5, #0]
 80150ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80150f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d209      	bcs.n	801510a <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80150f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80150fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015102:	f3bf 8f4f 	dsb	sy
 8015106:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801510a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801510e:	682a      	ldr	r2, [r5, #0]
 8015110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015112:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015114:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80151a8 <prvAddNewTaskToReadyList+0x10c>
 8015118:	429a      	cmp	r2, r3
 801511a:	d8d2      	bhi.n	80150c2 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 801511c:	602c      	str	r4, [r5, #0]
 801511e:	e7d0      	b.n	80150c2 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8015120:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015122:	6813      	ldr	r3, [r2, #0]
 8015124:	2b01      	cmp	r3, #1
 8015126:	d004      	beq.n	8015132 <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 8015128:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801512a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80151a8 <prvAddNewTaskToReadyList+0x10c>
 801512e:	4e15      	ldr	r6, [pc, #84]	; (8015184 <prvAddNewTaskToReadyList+0xe8>)
 8015130:	e7c7      	b.n	80150c2 <prvAddNewTaskToReadyList+0x26>
 8015132:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80151a8 <prvAddNewTaskToReadyList+0x10c>
 8015136:	4646      	mov	r6, r8
 8015138:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801513c:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801513e:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015140:	f7ff f9e4 	bl	801450c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015144:	42b7      	cmp	r7, r6
 8015146:	d1f9      	bne.n	801513c <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015148:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80151ac <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 801514c:	4f10      	ldr	r7, [pc, #64]	; (8015190 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 801514e:	4648      	mov	r0, r9
 8015150:	4e0c      	ldr	r6, [pc, #48]	; (8015184 <prvAddNewTaskToReadyList+0xe8>)
 8015152:	f7ff f9db 	bl	801450c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015156:	4638      	mov	r0, r7
 8015158:	f7ff f9d8 	bl	801450c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801515c:	480d      	ldr	r0, [pc, #52]	; (8015194 <prvAddNewTaskToReadyList+0xf8>)
 801515e:	f7ff f9d5 	bl	801450c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015162:	480d      	ldr	r0, [pc, #52]	; (8015198 <prvAddNewTaskToReadyList+0xfc>)
 8015164:	f7ff f9d2 	bl	801450c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015168:	480c      	ldr	r0, [pc, #48]	; (801519c <prvAddNewTaskToReadyList+0x100>)
 801516a:	f7ff f9cf 	bl	801450c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801516e:	4b0c      	ldr	r3, [pc, #48]	; (80151a0 <prvAddNewTaskToReadyList+0x104>)
 8015170:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015174:	4b0b      	ldr	r3, [pc, #44]	; (80151a4 <prvAddNewTaskToReadyList+0x108>)
 8015176:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8015178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 801517a:	e7a2      	b.n	80150c2 <prvAddNewTaskToReadyList+0x26>
 801517c:	20005fd4 	.word	0x20005fd4
 8015180:	20005f3c 	.word	0x20005f3c
 8015184:	20006030 	.word	0x20006030
 8015188:	20005fe4 	.word	0x20005fe4
 801518c:	20005fe8 	.word	0x20005fe8
 8015190:	20006000 	.word	0x20006000
 8015194:	2000601c 	.word	0x2000601c
 8015198:	20006048 	.word	0x20006048
 801519c:	20006034 	.word	0x20006034
 80151a0:	20005f40 	.word	0x20005f40
 80151a4:	20005f44 	.word	0x20005f44
 80151a8:	20005f48 	.word	0x20005f48
 80151ac:	20005fec 	.word	0x20005fec

080151b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80151b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80151b2:	4b1b      	ldr	r3, [pc, #108]	; (8015220 <prvAddCurrentTaskToDelayedList+0x70>)
{
 80151b4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151b6:	4e1b      	ldr	r6, [pc, #108]	; (8015224 <prvAddCurrentTaskToDelayedList+0x74>)
{
 80151b8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80151ba:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151bc:	6833      	ldr	r3, [r6, #0]
 80151be:	1d18      	adds	r0, r3, #4
 80151c0:	f7ff f9dc 	bl	801457c <uxListRemove>
 80151c4:	b948      	cbnz	r0, 80151da <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80151c6:	6833      	ldr	r3, [r6, #0]
 80151c8:	4917      	ldr	r1, [pc, #92]	; (8015228 <prvAddCurrentTaskToDelayedList+0x78>)
 80151ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151cc:	2301      	movs	r3, #1
 80151ce:	fa03 f202 	lsl.w	r2, r3, r2
 80151d2:	680b      	ldr	r3, [r1, #0]
 80151d4:	ea23 0302 	bic.w	r3, r3, r2
 80151d8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80151da:	1c63      	adds	r3, r4, #1
 80151dc:	d100      	bne.n	80151e0 <prvAddCurrentTaskToDelayedList+0x30>
 80151de:	b9bf      	cbnz	r7, 8015210 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80151e0:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80151e2:	6833      	ldr	r3, [r6, #0]
 80151e4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80151e6:	d307      	bcc.n	80151f8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151e8:	4b10      	ldr	r3, [pc, #64]	; (801522c <prvAddCurrentTaskToDelayedList+0x7c>)
 80151ea:	6818      	ldr	r0, [r3, #0]
 80151ec:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80151ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151f2:	3104      	adds	r1, #4
 80151f4:	f7ff b9aa 	b.w	801454c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151f8:	4b0d      	ldr	r3, [pc, #52]	; (8015230 <prvAddCurrentTaskToDelayedList+0x80>)
 80151fa:	6818      	ldr	r0, [r3, #0]
 80151fc:	6831      	ldr	r1, [r6, #0]
 80151fe:	3104      	adds	r1, #4
 8015200:	f7ff f9a4 	bl	801454c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015204:	4b0b      	ldr	r3, [pc, #44]	; (8015234 <prvAddCurrentTaskToDelayedList+0x84>)
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	42a2      	cmp	r2, r4
 801520a:	d900      	bls.n	801520e <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 801520c:	601c      	str	r4, [r3, #0]
}
 801520e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015210:	6831      	ldr	r1, [r6, #0]
 8015212:	4809      	ldr	r0, [pc, #36]	; (8015238 <prvAddCurrentTaskToDelayedList+0x88>)
 8015214:	3104      	adds	r1, #4
}
 8015216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801521a:	f7ff b987 	b.w	801452c <vListInsertEnd>
 801521e:	bf00      	nop
 8015220:	2000605c 	.word	0x2000605c
 8015224:	20005f3c 	.word	0x20005f3c
 8015228:	20005fe8 	.word	0x20005fe8
 801522c:	20005f44 	.word	0x20005f44
 8015230:	20005f40 	.word	0x20005f40
 8015234:	20006014 	.word	0x20006014
 8015238:	20006034 	.word	0x20006034

0801523c <prvDeleteTCB>:
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801523c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8015240:	b173      	cbz	r3, 8015260 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015242:	2b01      	cmp	r3, #1
 8015244:	d017      	beq.n	8015276 <prvDeleteTCB+0x3a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015246:	2b02      	cmp	r3, #2
 8015248:	d014      	beq.n	8015274 <prvDeleteTCB+0x38>
	__asm volatile
 801524a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801524e:	b672      	cpsid	i
 8015250:	f383 8811 	msr	BASEPRI, r3
 8015254:	f3bf 8f6f 	isb	sy
 8015258:	f3bf 8f4f 	dsb	sy
 801525c:	b662      	cpsie	i
 801525e:	e7fe      	b.n	801525e <prvDeleteTCB+0x22>
	{
 8015260:	b510      	push	{r4, lr}
 8015262:	4604      	mov	r4, r0
				vPortFree( pxTCB->pxStack );
 8015264:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015266:	f001 fb1b 	bl	80168a0 <vPortFree>
				vPortFree( pxTCB );
 801526a:	4620      	mov	r0, r4
	}
 801526c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8015270:	f001 bb16 	b.w	80168a0 <vPortFree>
 8015274:	4770      	bx	lr
				vPortFree( pxTCB );
 8015276:	f001 bb13 	b.w	80168a0 <vPortFree>
 801527a:	bf00      	nop

0801527c <prvIdleTask>:
{
 801527c:	4c16      	ldr	r4, [pc, #88]	; (80152d8 <prvIdleTask+0x5c>)
				taskYIELD();
 801527e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8015282:	4e16      	ldr	r6, [pc, #88]	; (80152dc <prvIdleTask+0x60>)
 8015284:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8015288:	4d15      	ldr	r5, [pc, #84]	; (80152e0 <prvIdleTask+0x64>)
 801528a:	f8df a058 	ldr.w	sl, [pc, #88]	; 80152e4 <prvIdleTask+0x68>
{
 801528e:	b580      	push	{r7, lr}
 8015290:	e011      	b.n	80152b6 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8015292:	f001 f8ff 	bl	8016494 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015296:	68f3      	ldr	r3, [r6, #12]
 8015298:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801529a:	1d38      	adds	r0, r7, #4
 801529c:	f7ff f96e 	bl	801457c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80152a0:	682b      	ldr	r3, [r5, #0]
 80152a2:	3b01      	subs	r3, #1
 80152a4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80152a6:	6823      	ldr	r3, [r4, #0]
 80152a8:	3b01      	subs	r3, #1
 80152aa:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80152ac:	f001 f918 	bl	80164e0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80152b0:	4638      	mov	r0, r7
 80152b2:	f7ff ffc3 	bl	801523c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80152b6:	6823      	ldr	r3, [r4, #0]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d1ea      	bne.n	8015292 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80152bc:	f8da 3000 	ldr.w	r3, [sl]
 80152c0:	2b01      	cmp	r3, #1
 80152c2:	d905      	bls.n	80152d0 <prvIdleTask+0x54>
				taskYIELD();
 80152c4:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 80152c8:	f3bf 8f4f 	dsb	sy
 80152cc:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80152d0:	f7eb fc76 	bl	8000bc0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80152d4:	e7ef      	b.n	80152b6 <prvIdleTask+0x3a>
 80152d6:	bf00      	nop
 80152d8:	20005fd8 	.word	0x20005fd8
 80152dc:	20006048 	.word	0x20006048
 80152e0:	20005fd4 	.word	0x20005fd4
 80152e4:	20005f48 	.word	0x20005f48

080152e8 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 80152e8:	4b1c      	ldr	r3, [pc, #112]	; (801535c <vTaskSwitchContext.part.0+0x74>)
 80152ea:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 80152ec:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 80152ee:	4c1c      	ldr	r4, [pc, #112]	; (8015360 <vTaskSwitchContext.part.0+0x78>)
		xYieldPending = pdFALSE;
 80152f0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80152f2:	6822      	ldr	r2, [r4, #0]
 80152f4:	6823      	ldr	r3, [r4, #0]
 80152f6:	6812      	ldr	r2, [r2, #0]
 80152f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d923      	bls.n	8015346 <vTaskSwitchContext.part.0+0x5e>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152fe:	4b19      	ldr	r3, [pc, #100]	; (8015364 <vTaskSwitchContext.part.0+0x7c>)
 8015300:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015302:	fab3 f383 	clz	r3, r3
 8015306:	b2db      	uxtb	r3, r3
 8015308:	4a17      	ldr	r2, [pc, #92]	; (8015368 <vTaskSwitchContext.part.0+0x80>)
 801530a:	f1c3 031f 	rsb	r3, r3, #31
 801530e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015312:	0099      	lsls	r1, r3, #2
 8015314:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015318:	5850      	ldr	r0, [r2, r1]
 801531a:	b950      	cbnz	r0, 8015332 <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 801531c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015320:	b672      	cpsid	i
 8015322:	f383 8811 	msr	BASEPRI, r3
 8015326:	f3bf 8f6f 	isb	sy
 801532a:	f3bf 8f4f 	dsb	sy
 801532e:	b662      	cpsie	i
 8015330:	e7fe      	b.n	8015330 <vTaskSwitchContext.part.0+0x48>
 8015332:	6858      	ldr	r0, [r3, #4]
 8015334:	3108      	adds	r1, #8
 8015336:	6840      	ldr	r0, [r0, #4]
 8015338:	440a      	add	r2, r1
 801533a:	4290      	cmp	r0, r2
 801533c:	6058      	str	r0, [r3, #4]
 801533e:	d008      	beq.n	8015352 <vTaskSwitchContext.part.0+0x6a>
 8015340:	68c3      	ldr	r3, [r0, #12]
 8015342:	6023      	str	r3, [r4, #0]
}
 8015344:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8015346:	6820      	ldr	r0, [r4, #0]
 8015348:	6821      	ldr	r1, [r4, #0]
 801534a:	3134      	adds	r1, #52	; 0x34
 801534c:	f7eb fc3a 	bl	8000bc4 <vApplicationStackOverflowHook>
 8015350:	e7d5      	b.n	80152fe <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015352:	6840      	ldr	r0, [r0, #4]
 8015354:	6058      	str	r0, [r3, #4]
 8015356:	68c3      	ldr	r3, [r0, #12]
 8015358:	6023      	str	r3, [r4, #0]
}
 801535a:	bd10      	pop	{r4, pc}
 801535c:	20006060 	.word	0x20006060
 8015360:	20005f3c 	.word	0x20005f3c
 8015364:	20005fe8 	.word	0x20005fe8
 8015368:	20005f48 	.word	0x20005f48

0801536c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801536c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015370:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015372:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8015376:	469a      	mov	sl, r3
 8015378:	4681      	mov	r9, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801537a:	4490      	add	r8, r2
 801537c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801537e:	9f09      	ldr	r7, [sp, #36]	; 0x24
	if( pcName != NULL )
 8015380:	460e      	mov	r6, r1
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015382:	eb03 0388 	add.w	r3, r3, r8, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015386:	f023 0807 	bic.w	r8, r3, #7
	if( pcName != NULL )
 801538a:	b379      	cbz	r1, 80153ec <prvInitialiseNewTask.constprop.0+0x80>
 801538c:	f101 3cff 	add.w	ip, r1, #4294967295
 8015390:	360f      	adds	r6, #15
 8015392:	f105 0e33 	add.w	lr, r5, #51	; 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015396:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 801539a:	f80e 4f01 	strb.w	r4, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 801539e:	b10c      	cbz	r4, 80153a4 <prvInitialiseNewTask.constprop.0+0x38>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80153a0:	45b4      	cmp	ip, r6
 80153a2:	d1f8      	bne.n	8015396 <prvInitialiseNewTask.constprop.0+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80153a4:	2300      	movs	r3, #0
 80153a6:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80153aa:	9c08      	ldr	r4, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80153ac:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80153ae:	1d28      	adds	r0, r5, #4
 80153b0:	2c06      	cmp	r4, #6
		pxNewTCB->uxMutexesHeld = 0;
 80153b2:	64ae      	str	r6, [r5, #72]	; 0x48
 80153b4:	bf28      	it	cs
 80153b6:	2406      	movcs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 80153b8:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80153ba:	646c      	str	r4, [r5, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80153bc:	f1c4 0407 	rsb	r4, r4, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80153c0:	f7ff f8b0 	bl	8014524 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80153c4:	f105 0018 	add.w	r0, r5, #24
 80153c8:	f7ff f8ac 	bl	8014524 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80153cc:	64ee      	str	r6, [r5, #76]	; 0x4c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80153ce:	4652      	mov	r2, sl
 80153d0:	4649      	mov	r1, r9
 80153d2:	4640      	mov	r0, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80153d4:	61ac      	str	r4, [r5, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80153d6:	f885 6050 	strb.w	r6, [r5, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80153da:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80153dc:	626d      	str	r5, [r5, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80153de:	f001 f82f 	bl	8016440 <pxPortInitialiseStack>
 80153e2:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 80153e4:	b107      	cbz	r7, 80153e8 <prvInitialiseNewTask.constprop.0+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80153e6:	603d      	str	r5, [r7, #0]
}
 80153e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80153ec:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 80153f0:	e7db      	b.n	80153aa <prvInitialiseNewTask.constprop.0+0x3e>
 80153f2:	bf00      	nop

080153f4 <xTaskCreateStatic>:
	{
 80153f4:	b530      	push	{r4, r5, lr}
 80153f6:	b087      	sub	sp, #28
 80153f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80153fa:	b1e4      	cbz	r4, 8015436 <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 80153fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80153fe:	b17d      	cbz	r5, 8015420 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 8015400:	2554      	movs	r5, #84	; 0x54
 8015402:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015404:	9d05      	ldr	r5, [sp, #20]
 8015406:	2d54      	cmp	r5, #84	; 0x54
 8015408:	d020      	beq.n	801544c <xTaskCreateStatic+0x58>
 801540a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801540e:	b672      	cpsid	i
 8015410:	f383 8811 	msr	BASEPRI, r3
 8015414:	f3bf 8f6f 	isb	sy
 8015418:	f3bf 8f4f 	dsb	sy
 801541c:	b662      	cpsie	i
 801541e:	e7fe      	b.n	801541e <xTaskCreateStatic+0x2a>
 8015420:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015424:	b672      	cpsid	i
 8015426:	f383 8811 	msr	BASEPRI, r3
 801542a:	f3bf 8f6f 	isb	sy
 801542e:	f3bf 8f4f 	dsb	sy
 8015432:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8015434:	e7fe      	b.n	8015434 <xTaskCreateStatic+0x40>
 8015436:	f04f 0330 	mov.w	r3, #48	; 0x30
 801543a:	b672      	cpsid	i
 801543c:	f383 8811 	msr	BASEPRI, r3
 8015440:	f3bf 8f6f 	isb	sy
 8015444:	f3bf 8f4f 	dsb	sy
 8015448:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 801544a:	e7fe      	b.n	801544a <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801544c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801544e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015450:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015452:	9502      	str	r5, [sp, #8]
 8015454:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015456:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015458:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801545a:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801545e:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015460:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015462:	9401      	str	r4, [sp, #4]
 8015464:	f7ff ff82 	bl	801536c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015468:	980c      	ldr	r0, [sp, #48]	; 0x30
 801546a:	f7ff fe17 	bl	801509c <prvAddNewTaskToReadyList>
	}
 801546e:	9804      	ldr	r0, [sp, #16]
 8015470:	b007      	add	sp, #28
 8015472:	bd30      	pop	{r4, r5, pc}

08015474 <xTaskCreate>:
	{
 8015474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015478:	4607      	mov	r7, r0
 801547a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801547c:	0090      	lsls	r0, r2, #2
	{
 801547e:	4615      	mov	r5, r2
 8015480:	4688      	mov	r8, r1
 8015482:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015484:	f001 f970 	bl	8016768 <pvPortMalloc>
			if( pxStack != NULL )
 8015488:	b1d8      	cbz	r0, 80154c2 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801548a:	4604      	mov	r4, r0
 801548c:	2054      	movs	r0, #84	; 0x54
 801548e:	f001 f96b 	bl	8016768 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8015492:	4606      	mov	r6, r0
 8015494:	b1d0      	cbz	r0, 80154cc <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8015496:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015498:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801549a:	464b      	mov	r3, r9
 801549c:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801549e:	f886 4051 	strb.w	r4, [r6, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80154a2:	4641      	mov	r1, r8
 80154a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80154a6:	4638      	mov	r0, r7
 80154a8:	9602      	str	r6, [sp, #8]
 80154aa:	9401      	str	r4, [sp, #4]
 80154ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80154ae:	9400      	str	r4, [sp, #0]
 80154b0:	f7ff ff5c 	bl	801536c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80154b4:	4630      	mov	r0, r6
 80154b6:	f7ff fdf1 	bl	801509c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80154ba:	2001      	movs	r0, #1
	}
 80154bc:	b005      	add	sp, #20
 80154be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80154c2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80154c6:	b005      	add	sp, #20
 80154c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80154cc:	4620      	mov	r0, r4
 80154ce:	f001 f9e7 	bl	80168a0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80154d2:	f04f 30ff 	mov.w	r0, #4294967295
 80154d6:	e7f1      	b.n	80154bc <xTaskCreate+0x48>

080154d8 <vTaskStartScheduler>:
{
 80154d8:	b510      	push	{r4, lr}
 80154da:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80154dc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80154de:	aa07      	add	r2, sp, #28
 80154e0:	a906      	add	r1, sp, #24
 80154e2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80154e4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80154e8:	f7eb fb70 	bl	8000bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80154ec:	4623      	mov	r3, r4
 80154ee:	9a07      	ldr	r2, [sp, #28]
 80154f0:	9400      	str	r4, [sp, #0]
 80154f2:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80154f6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80154fa:	4917      	ldr	r1, [pc, #92]	; (8015558 <vTaskStartScheduler+0x80>)
 80154fc:	4817      	ldr	r0, [pc, #92]	; (801555c <vTaskStartScheduler+0x84>)
 80154fe:	f7ff ff79 	bl	80153f4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8015502:	b1d0      	cbz	r0, 801553a <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 8015504:	f000 fcea 	bl	8015edc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8015508:	2801      	cmp	r0, #1
 801550a:	d118      	bne.n	801553e <vTaskStartScheduler+0x66>
 801550c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015510:	b672      	cpsid	i
 8015512:	f383 8811 	msr	BASEPRI, r3
 8015516:	f3bf 8f6f 	isb	sy
 801551a:	f3bf 8f4f 	dsb	sy
 801551e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8015520:	4b0f      	ldr	r3, [pc, #60]	; (8015560 <vTaskStartScheduler+0x88>)
 8015522:	f04f 31ff 	mov.w	r1, #4294967295
		xSchedulerRunning = pdTRUE;
 8015526:	4a0f      	ldr	r2, [pc, #60]	; (8015564 <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8015528:	6019      	str	r1, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801552a:	4b0f      	ldr	r3, [pc, #60]	; (8015568 <vTaskStartScheduler+0x90>)
		xSchedulerRunning = pdTRUE;
 801552c:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801552e:	601c      	str	r4, [r3, #0]
}
 8015530:	b008      	add	sp, #32
 8015532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8015536:	f001 b849 	b.w	80165cc <xPortStartScheduler>
}
 801553a:	b008      	add	sp, #32
 801553c:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801553e:	3001      	adds	r0, #1
 8015540:	d1fb      	bne.n	801553a <vTaskStartScheduler+0x62>
 8015542:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015546:	b672      	cpsid	i
 8015548:	f383 8811 	msr	BASEPRI, r3
 801554c:	f3bf 8f6f 	isb	sy
 8015550:	f3bf 8f4f 	dsb	sy
 8015554:	b662      	cpsie	i
 8015556:	e7fe      	b.n	8015556 <vTaskStartScheduler+0x7e>
 8015558:	0802b2f8 	.word	0x0802b2f8
 801555c:	0801527d 	.word	0x0801527d
 8015560:	20006014 	.word	0x20006014
 8015564:	20006030 	.word	0x20006030
 8015568:	2000605c 	.word	0x2000605c

0801556c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 801556c:	4a02      	ldr	r2, [pc, #8]	; (8015578 <vTaskSuspendAll+0xc>)
 801556e:	6813      	ldr	r3, [r2, #0]
 8015570:	3301      	adds	r3, #1
 8015572:	6013      	str	r3, [r2, #0]
}
 8015574:	4770      	bx	lr
 8015576:	bf00      	nop
 8015578:	20005fe0 	.word	0x20005fe0

0801557c <xTaskGetTickCount>:
		xTicks = xTickCount;
 801557c:	4b01      	ldr	r3, [pc, #4]	; (8015584 <xTaskGetTickCount+0x8>)
 801557e:	6818      	ldr	r0, [r3, #0]
}
 8015580:	4770      	bx	lr
 8015582:	bf00      	nop
 8015584:	2000605c 	.word	0x2000605c

08015588 <xTaskGetTickCountFromISR>:
{
 8015588:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801558a:	f001 f889 	bl	80166a0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 801558e:	4b01      	ldr	r3, [pc, #4]	; (8015594 <xTaskGetTickCountFromISR+0xc>)
 8015590:	6818      	ldr	r0, [r3, #0]
}
 8015592:	bd08      	pop	{r3, pc}
 8015594:	2000605c 	.word	0x2000605c

08015598 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015598:	4b52      	ldr	r3, [pc, #328]	; (80156e4 <xTaskIncrementTick+0x14c>)
 801559a:	681b      	ldr	r3, [r3, #0]
{
 801559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155a0:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d14c      	bne.n	8015640 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80155a6:	4b50      	ldr	r3, [pc, #320]	; (80156e8 <xTaskIncrementTick+0x150>)
 80155a8:	681d      	ldr	r5, [r3, #0]
 80155aa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80155ac:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80155ae:	2d00      	cmp	r5, #0
 80155b0:	d054      	beq.n	801565c <xTaskIncrementTick+0xc4>
 80155b2:	4b4e      	ldr	r3, [pc, #312]	; (80156ec <xTaskIncrementTick+0x154>)
 80155b4:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 80155b6:	9b01      	ldr	r3, [sp, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	42ab      	cmp	r3, r5
 80155bc:	d85d      	bhi.n	801567a <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80155be:	4e4c      	ldr	r6, [pc, #304]	; (80156f0 <xTaskIncrementTick+0x158>)
 80155c0:	6833      	ldr	r3, [r6, #0]
 80155c2:	681c      	ldr	r4, [r3, #0]
 80155c4:	2c00      	cmp	r4, #0
 80155c6:	d07c      	beq.n	80156c2 <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 80155c8:	2400      	movs	r4, #0
 80155ca:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8015708 <xTaskIncrementTick+0x170>
 80155ce:	f8df 913c 	ldr.w	r9, [pc, #316]	; 801570c <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 80155d2:	f04f 0a01 	mov.w	sl, #1
 80155d6:	4f47      	ldr	r7, [pc, #284]	; (80156f4 <xTaskIncrementTick+0x15c>)
 80155d8:	e024      	b.n	8015624 <xTaskIncrementTick+0x8c>
 80155da:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80155dc:	f7fe ffce 	bl	801457c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80155e0:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80155e4:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80155e8:	9900      	ldr	r1, [sp, #0]
 80155ea:	b112      	cbz	r2, 80155f2 <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80155ec:	f7fe ffc6 	bl	801457c <uxListRemove>
 80155f0:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 80155f2:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	fa0a f200 	lsl.w	r2, sl, r0
 80155fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015600:	431a      	orrs	r2, r3
 8015602:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8015606:	603a      	str	r2, [r7, #0]
 8015608:	f7fe ff90 	bl	801452c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801560c:	f8d9 3000 	ldr.w	r3, [r9]
 8015610:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8015614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8015616:	429a      	cmp	r2, r3
 8015618:	bf28      	it	cs
 801561a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801561c:	6833      	ldr	r3, [r6, #0]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d052      	beq.n	80156ca <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015624:	6833      	ldr	r3, [r6, #0]
 8015626:	68db      	ldr	r3, [r3, #12]
 8015628:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801562c:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015630:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8015634:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015636:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8015638:	d2cf      	bcs.n	80155da <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 801563a:	9b01      	ldr	r3, [sp, #4]
 801563c:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801563e:	e021      	b.n	8015684 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 8015640:	4a2d      	ldr	r2, [pc, #180]	; (80156f8 <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 8015642:	2400      	movs	r4, #0
		++uxPendedTicks;
 8015644:	6813      	ldr	r3, [r2, #0]
 8015646:	3301      	adds	r3, #1
 8015648:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 801564a:	4b2c      	ldr	r3, [pc, #176]	; (80156fc <xTaskIncrementTick+0x164>)
 801564c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 801564e:	2b00      	cmp	r3, #0
}
 8015650:	bf0c      	ite	eq
 8015652:	4620      	moveq	r0, r4
 8015654:	2001      	movne	r0, #1
 8015656:	b003      	add	sp, #12
 8015658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 801565c:	4b24      	ldr	r3, [pc, #144]	; (80156f0 <xTaskIncrementTick+0x158>)
 801565e:	681a      	ldr	r2, [r3, #0]
 8015660:	6812      	ldr	r2, [r2, #0]
 8015662:	b1da      	cbz	r2, 801569c <xTaskIncrementTick+0x104>
 8015664:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015668:	b672      	cpsid	i
 801566a:	f383 8811 	msr	BASEPRI, r3
 801566e:	f3bf 8f6f 	isb	sy
 8015672:	f3bf 8f4f 	dsb	sy
 8015676:	b662      	cpsie	i
 8015678:	e7fe      	b.n	8015678 <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 801567a:	2400      	movs	r4, #0
 801567c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8015708 <xTaskIncrementTick+0x170>
 8015680:	f8df 9088 	ldr.w	r9, [pc, #136]	; 801570c <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015684:	f8d9 3000 	ldr.w	r3, [r9]
 8015688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801568a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801568e:	009b      	lsls	r3, r3, #2
 8015690:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8015694:	2b02      	cmp	r3, #2
 8015696:	bf28      	it	cs
 8015698:	2401      	movcs	r4, #1
 801569a:	e7d6      	b.n	801564a <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 801569c:	4a18      	ldr	r2, [pc, #96]	; (8015700 <xTaskIncrementTick+0x168>)
 801569e:	6818      	ldr	r0, [r3, #0]
 80156a0:	6811      	ldr	r1, [r2, #0]
 80156a2:	6019      	str	r1, [r3, #0]
 80156a4:	4917      	ldr	r1, [pc, #92]	; (8015704 <xTaskIncrementTick+0x16c>)
 80156a6:	6010      	str	r0, [r2, #0]
 80156a8:	680a      	ldr	r2, [r1, #0]
 80156aa:	3201      	adds	r2, #1
 80156ac:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80156ae:	681a      	ldr	r2, [r3, #0]
 80156b0:	6812      	ldr	r2, [r2, #0]
 80156b2:	b97a      	cbnz	r2, 80156d4 <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 80156b4:	4b0d      	ldr	r3, [pc, #52]	; (80156ec <xTaskIncrementTick+0x154>)
 80156b6:	461a      	mov	r2, r3
 80156b8:	9301      	str	r3, [sp, #4]
 80156ba:	f04f 33ff 	mov.w	r3, #4294967295
 80156be:	6013      	str	r3, [r2, #0]
 80156c0:	e779      	b.n	80155b6 <xTaskIncrementTick+0x1e>
 80156c2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8015708 <xTaskIncrementTick+0x170>
 80156c6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 801570c <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156ca:	f04f 33ff 	mov.w	r3, #4294967295
 80156ce:	9a01      	ldr	r2, [sp, #4]
 80156d0:	6013      	str	r3, [r2, #0]
					break;
 80156d2:	e7d7      	b.n	8015684 <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156d4:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80156d6:	4a05      	ldr	r2, [pc, #20]	; (80156ec <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156d8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80156da:	9201      	str	r2, [sp, #4]
 80156dc:	68db      	ldr	r3, [r3, #12]
 80156de:	685b      	ldr	r3, [r3, #4]
 80156e0:	6013      	str	r3, [r2, #0]
}
 80156e2:	e768      	b.n	80155b6 <xTaskIncrementTick+0x1e>
 80156e4:	20005fe0 	.word	0x20005fe0
 80156e8:	2000605c 	.word	0x2000605c
 80156ec:	20006014 	.word	0x20006014
 80156f0:	20005f40 	.word	0x20005f40
 80156f4:	20005fe8 	.word	0x20005fe8
 80156f8:	20005fdc 	.word	0x20005fdc
 80156fc:	20006060 	.word	0x20006060
 8015700:	20005f44 	.word	0x20005f44
 8015704:	20006018 	.word	0x20006018
 8015708:	20005f48 	.word	0x20005f48
 801570c:	20005f3c 	.word	0x20005f3c

08015710 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8015710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015714:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8015716:	f000 febd 	bl	8016494 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801571a:	4b38      	ldr	r3, [pc, #224]	; (80157fc <xTaskResumeAll.part.0+0xec>)
 801571c:	681a      	ldr	r2, [r3, #0]
 801571e:	3a01      	subs	r2, #1
 8015720:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d159      	bne.n	80157dc <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015728:	4b35      	ldr	r3, [pc, #212]	; (8015800 <xTaskResumeAll.part.0+0xf0>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d055      	beq.n	80157dc <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015730:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015818 <xTaskResumeAll.part.0+0x108>
 8015734:	f8da 3000 	ldr.w	r3, [sl]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d05c      	beq.n	80157f6 <xTaskResumeAll.part.0+0xe6>
 801573c:	4d31      	ldr	r5, [pc, #196]	; (8015804 <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 801573e:	2601      	movs	r6, #1
 8015740:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 801581c <xTaskResumeAll.part.0+0x10c>
 8015744:	4f30      	ldr	r7, [pc, #192]	; (8015808 <xTaskResumeAll.part.0+0xf8>)
 8015746:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8015820 <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801574a:	f8da 300c 	ldr.w	r3, [sl, #12]
 801574e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015750:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015754:	f104 0018 	add.w	r0, r4, #24
 8015758:	f7fe ff10 	bl	801457c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801575c:	4658      	mov	r0, fp
 801575e:	f7fe ff0d 	bl	801457c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015762:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015764:	682a      	ldr	r2, [r5, #0]
 8015766:	4659      	mov	r1, fp
 8015768:	fa06 f300 	lsl.w	r3, r6, r0
 801576c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015770:	4313      	orrs	r3, r2
 8015772:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8015776:	602b      	str	r3, [r5, #0]
 8015778:	f7fe fed8 	bl	801452c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015782:	429a      	cmp	r2, r3
 8015784:	d301      	bcc.n	801578a <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 8015786:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801578a:	f8da 3000 	ldr.w	r3, [sl]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d1db      	bne.n	801574a <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015792:	4b1e      	ldr	r3, [pc, #120]	; (801580c <xTaskResumeAll.part.0+0xfc>)
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	6812      	ldr	r2, [r2, #0]
 8015798:	b342      	cbz	r2, 80157ec <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801579a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801579c:	4b1c      	ldr	r3, [pc, #112]	; (8015810 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801579e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80157a0:	68d2      	ldr	r2, [r2, #12]
 80157a2:	6852      	ldr	r2, [r2, #4]
 80157a4:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80157a6:	4e1b      	ldr	r6, [pc, #108]	; (8015814 <xTaskResumeAll.part.0+0x104>)
 80157a8:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80157aa:	b144      	cbz	r4, 80157be <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 80157ac:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 80157ae:	f7ff fef3 	bl	8015598 <xTaskIncrementTick>
 80157b2:	b108      	cbz	r0, 80157b8 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 80157b4:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80157b8:	3c01      	subs	r4, #1
 80157ba:	d1f8      	bne.n	80157ae <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 80157bc:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80157be:	f8d9 3000 	ldr.w	r3, [r9]
 80157c2:	b15b      	cbz	r3, 80157dc <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 80157c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80157c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80157d0:	f3bf 8f4f 	dsb	sy
 80157d4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80157d8:	2001      	movs	r0, #1
 80157da:	e000      	b.n	80157de <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 80157dc:	2000      	movs	r0, #0
 80157de:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80157e0:	f000 fe7e 	bl	80164e0 <vPortExitCritical>
}
 80157e4:	9801      	ldr	r0, [sp, #4]
 80157e6:	b003      	add	sp, #12
 80157e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 80157ec:	4b08      	ldr	r3, [pc, #32]	; (8015810 <xTaskResumeAll.part.0+0x100>)
 80157ee:	f04f 32ff 	mov.w	r2, #4294967295
 80157f2:	601a      	str	r2, [r3, #0]
 80157f4:	e7d7      	b.n	80157a6 <xTaskResumeAll.part.0+0x96>
 80157f6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8015820 <xTaskResumeAll.part.0+0x110>
 80157fa:	e7d4      	b.n	80157a6 <xTaskResumeAll.part.0+0x96>
 80157fc:	20005fe0 	.word	0x20005fe0
 8015800:	20005fd4 	.word	0x20005fd4
 8015804:	20005fe8 	.word	0x20005fe8
 8015808:	20005f3c 	.word	0x20005f3c
 801580c:	20005f40 	.word	0x20005f40
 8015810:	20006014 	.word	0x20006014
 8015814:	20005fdc 	.word	0x20005fdc
 8015818:	2000601c 	.word	0x2000601c
 801581c:	20005f48 	.word	0x20005f48
 8015820:	20006060 	.word	0x20006060

08015824 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8015824:	4b07      	ldr	r3, [pc, #28]	; (8015844 <xTaskResumeAll+0x20>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	b953      	cbnz	r3, 8015840 <xTaskResumeAll+0x1c>
 801582a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801582e:	b672      	cpsid	i
 8015830:	f383 8811 	msr	BASEPRI, r3
 8015834:	f3bf 8f6f 	isb	sy
 8015838:	f3bf 8f4f 	dsb	sy
 801583c:	b662      	cpsie	i
 801583e:	e7fe      	b.n	801583e <xTaskResumeAll+0x1a>
 8015840:	f7ff bf66 	b.w	8015710 <xTaskResumeAll.part.0>
 8015844:	20005fe0 	.word	0x20005fe0

08015848 <vTaskDelay>:
	{
 8015848:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801584a:	b950      	cbnz	r0, 8015862 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 801584c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015854:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015858:	f3bf 8f4f 	dsb	sy
 801585c:	f3bf 8f6f 	isb	sy
	}
 8015860:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8015862:	4c12      	ldr	r4, [pc, #72]	; (80158ac <vTaskDelay+0x64>)
 8015864:	6821      	ldr	r1, [r4, #0]
 8015866:	b151      	cbz	r1, 801587e <vTaskDelay+0x36>
 8015868:	f04f 0330 	mov.w	r3, #48	; 0x30
 801586c:	b672      	cpsid	i
 801586e:	f383 8811 	msr	BASEPRI, r3
 8015872:	f3bf 8f6f 	isb	sy
 8015876:	f3bf 8f4f 	dsb	sy
 801587a:	b662      	cpsie	i
 801587c:	e7fe      	b.n	801587c <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 801587e:	6823      	ldr	r3, [r4, #0]
 8015880:	3301      	adds	r3, #1
 8015882:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015884:	f7ff fc94 	bl	80151b0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8015888:	6823      	ldr	r3, [r4, #0]
 801588a:	b953      	cbnz	r3, 80158a2 <vTaskDelay+0x5a>
 801588c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015890:	b672      	cpsid	i
 8015892:	f383 8811 	msr	BASEPRI, r3
 8015896:	f3bf 8f6f 	isb	sy
 801589a:	f3bf 8f4f 	dsb	sy
 801589e:	b662      	cpsie	i
 80158a0:	e7fe      	b.n	80158a0 <vTaskDelay+0x58>
 80158a2:	f7ff ff35 	bl	8015710 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80158a6:	2800      	cmp	r0, #0
 80158a8:	d0d0      	beq.n	801584c <vTaskDelay+0x4>
	}
 80158aa:	bd10      	pop	{r4, pc}
 80158ac:	20005fe0 	.word	0x20005fe0

080158b0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80158b0:	4b04      	ldr	r3, [pc, #16]	; (80158c4 <vTaskSwitchContext+0x14>)
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	b11b      	cbz	r3, 80158be <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80158b6:	4b04      	ldr	r3, [pc, #16]	; (80158c8 <vTaskSwitchContext+0x18>)
 80158b8:	2201      	movs	r2, #1
 80158ba:	601a      	str	r2, [r3, #0]
}
 80158bc:	4770      	bx	lr
 80158be:	f7ff bd13 	b.w	80152e8 <vTaskSwitchContext.part.0>
 80158c2:	bf00      	nop
 80158c4:	20005fe0 	.word	0x20005fe0
 80158c8:	20006060 	.word	0x20006060

080158cc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80158cc:	b160      	cbz	r0, 80158e8 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80158ce:	4b0c      	ldr	r3, [pc, #48]	; (8015900 <vTaskPlaceOnEventList+0x34>)
{
 80158d0:	b510      	push	{r4, lr}
 80158d2:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80158d4:	6819      	ldr	r1, [r3, #0]
 80158d6:	3118      	adds	r1, #24
 80158d8:	f7fe fe38 	bl	801454c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80158dc:	4620      	mov	r0, r4
 80158de:	2101      	movs	r1, #1
}
 80158e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80158e4:	f7ff bc64 	b.w	80151b0 <prvAddCurrentTaskToDelayedList>
 80158e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80158ec:	b672      	cpsid	i
 80158ee:	f383 8811 	msr	BASEPRI, r3
 80158f2:	f3bf 8f6f 	isb	sy
 80158f6:	f3bf 8f4f 	dsb	sy
 80158fa:	b662      	cpsie	i
	configASSERT( pxEventList );
 80158fc:	e7fe      	b.n	80158fc <vTaskPlaceOnEventList+0x30>
 80158fe:	bf00      	nop
 8015900:	20005f3c 	.word	0x20005f3c

08015904 <vTaskPlaceOnEventListRestricted>:
	{
 8015904:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8015906:	b180      	cbz	r0, 801592a <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015908:	4b0d      	ldr	r3, [pc, #52]	; (8015940 <vTaskPlaceOnEventListRestricted+0x3c>)
 801590a:	460d      	mov	r5, r1
 801590c:	4614      	mov	r4, r2
 801590e:	6819      	ldr	r1, [r3, #0]
 8015910:	3118      	adds	r1, #24
 8015912:	f7fe fe0b 	bl	801452c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8015916:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015918:	4621      	mov	r1, r4
 801591a:	bf0c      	ite	eq
 801591c:	4628      	moveq	r0, r5
 801591e:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8015922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015926:	f7ff bc43 	b.w	80151b0 <prvAddCurrentTaskToDelayedList>
 801592a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801592e:	b672      	cpsid	i
 8015930:	f383 8811 	msr	BASEPRI, r3
 8015934:	f3bf 8f6f 	isb	sy
 8015938:	f3bf 8f4f 	dsb	sy
 801593c:	b662      	cpsie	i
		configASSERT( pxEventList );
 801593e:	e7fe      	b.n	801593e <vTaskPlaceOnEventListRestricted+0x3a>
 8015940:	20005f3c 	.word	0x20005f3c

08015944 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015944:	68c3      	ldr	r3, [r0, #12]
{
 8015946:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015948:	68dc      	ldr	r4, [r3, #12]
{
 801594a:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 801594c:	b364      	cbz	r4, 80159a8 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801594e:	f104 0518 	add.w	r5, r4, #24
 8015952:	4628      	mov	r0, r5
 8015954:	f7fe fe12 	bl	801457c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015958:	4b1a      	ldr	r3, [pc, #104]	; (80159c4 <xTaskRemoveFromEventList+0x80>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	b17b      	cbz	r3, 801597e <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801595e:	4629      	mov	r1, r5
 8015960:	4819      	ldr	r0, [pc, #100]	; (80159c8 <xTaskRemoveFromEventList+0x84>)
 8015962:	f7fe fde3 	bl	801452c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015966:	4b19      	ldr	r3, [pc, #100]	; (80159cc <xTaskRemoveFromEventList+0x88>)
 8015968:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801596e:	429a      	cmp	r2, r3
 8015970:	d925      	bls.n	80159be <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 8015972:	2301      	movs	r3, #1
 8015974:	4a16      	ldr	r2, [pc, #88]	; (80159d0 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 8015976:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8015978:	6013      	str	r3, [r2, #0]
}
 801597a:	b003      	add	sp, #12
 801597c:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801597e:	1d21      	adds	r1, r4, #4
 8015980:	4608      	mov	r0, r1
 8015982:	9101      	str	r1, [sp, #4]
 8015984:	f7fe fdfa 	bl	801457c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015988:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801598a:	4a12      	ldr	r2, [pc, #72]	; (80159d4 <xTaskRemoveFromEventList+0x90>)
 801598c:	2301      	movs	r3, #1
 801598e:	9901      	ldr	r1, [sp, #4]
 8015990:	6815      	ldr	r5, [r2, #0]
 8015992:	4083      	lsls	r3, r0
 8015994:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015998:	432b      	orrs	r3, r5
 801599a:	6013      	str	r3, [r2, #0]
 801599c:	4b0e      	ldr	r3, [pc, #56]	; (80159d8 <xTaskRemoveFromEventList+0x94>)
 801599e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80159a2:	f7fe fdc3 	bl	801452c <vListInsertEnd>
 80159a6:	e7de      	b.n	8015966 <xTaskRemoveFromEventList+0x22>
 80159a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159ac:	b672      	cpsid	i
 80159ae:	f383 8811 	msr	BASEPRI, r3
 80159b2:	f3bf 8f6f 	isb	sy
 80159b6:	f3bf 8f4f 	dsb	sy
 80159ba:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 80159bc:	e7fe      	b.n	80159bc <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 80159be:	2000      	movs	r0, #0
}
 80159c0:	b003      	add	sp, #12
 80159c2:	bd30      	pop	{r4, r5, pc}
 80159c4:	20005fe0 	.word	0x20005fe0
 80159c8:	2000601c 	.word	0x2000601c
 80159cc:	20005f3c 	.word	0x20005f3c
 80159d0:	20006060 	.word	0x20006060
 80159d4:	20005fe8 	.word	0x20005fe8
 80159d8:	20005f48 	.word	0x20005f48

080159dc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80159dc:	4a03      	ldr	r2, [pc, #12]	; (80159ec <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80159de:	4b04      	ldr	r3, [pc, #16]	; (80159f0 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80159e0:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	e9c0 2300 	strd	r2, r3, [r0]
}
 80159e8:	4770      	bx	lr
 80159ea:	bf00      	nop
 80159ec:	20006018 	.word	0x20006018
 80159f0:	2000605c 	.word	0x2000605c

080159f4 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80159f4:	b338      	cbz	r0, 8015a46 <xTaskCheckForTimeOut+0x52>
{
 80159f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159f8:	460d      	mov	r5, r1
 80159fa:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 80159fc:	b1c1      	cbz	r1, 8015a30 <xTaskCheckForTimeOut+0x3c>
 80159fe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8015a00:	f000 fd48 	bl	8016494 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8015a04:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8015a06:	4a1f      	ldr	r2, [pc, #124]	; (8015a84 <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 8015a08:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8015a0a:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8015a0c:	d034      	beq.n	8015a78 <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015a0e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8015a88 <xTaskCheckForTimeOut+0x94>
 8015a12:	6826      	ldr	r6, [r4, #0]
 8015a14:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015a18:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015a1a:	42be      	cmp	r6, r7
 8015a1c:	d01e      	beq.n	8015a5c <xTaskCheckForTimeOut+0x68>
 8015a1e:	4288      	cmp	r0, r1
 8015a20:	d81c      	bhi.n	8015a5c <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8015a22:	2001      	movs	r0, #1
 8015a24:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8015a26:	f000 fd5b 	bl	80164e0 <vPortExitCritical>
}
 8015a2a:	9801      	ldr	r0, [sp, #4]
 8015a2c:	b003      	add	sp, #12
 8015a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a30:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a34:	b672      	cpsid	i
 8015a36:	f383 8811 	msr	BASEPRI, r3
 8015a3a:	f3bf 8f6f 	isb	sy
 8015a3e:	f3bf 8f4f 	dsb	sy
 8015a42:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8015a44:	e7fe      	b.n	8015a44 <xTaskCheckForTimeOut+0x50>
 8015a46:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a4a:	b672      	cpsid	i
 8015a4c:	f383 8811 	msr	BASEPRI, r3
 8015a50:	f3bf 8f6f 	isb	sy
 8015a54:	f3bf 8f4f 	dsb	sy
 8015a58:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8015a5a:	e7fe      	b.n	8015a5a <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015a5c:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015a60:	4573      	cmp	r3, lr
 8015a62:	d90b      	bls.n	8015a7c <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 8015a64:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015a66:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015a6a:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8015a6c:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8015a6e:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8015a70:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015a72:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8015a76:	e7d5      	b.n	8015a24 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8015a78:	2000      	movs	r0, #0
 8015a7a:	e7d3      	b.n	8015a24 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8015a7c:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8015a7e:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8015a80:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8015a82:	e7cf      	b.n	8015a24 <xTaskCheckForTimeOut+0x30>
 8015a84:	2000605c 	.word	0x2000605c
 8015a88:	20006018 	.word	0x20006018

08015a8c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8015a8c:	4b01      	ldr	r3, [pc, #4]	; (8015a94 <vTaskMissedYield+0x8>)
 8015a8e:	2201      	movs	r2, #1
 8015a90:	601a      	str	r2, [r3, #0]
}
 8015a92:	4770      	bx	lr
 8015a94:	20006060 	.word	0x20006060

08015a98 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8015a98:	4b01      	ldr	r3, [pc, #4]	; (8015aa0 <xTaskGetCurrentTaskHandle+0x8>)
 8015a9a:	6818      	ldr	r0, [r3, #0]
	}
 8015a9c:	4770      	bx	lr
 8015a9e:	bf00      	nop
 8015aa0:	20005f3c 	.word	0x20005f3c

08015aa4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8015aa4:	4b05      	ldr	r3, [pc, #20]	; (8015abc <xTaskGetSchedulerState+0x18>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	b133      	cbz	r3, 8015ab8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015aaa:	4b05      	ldr	r3, [pc, #20]	; (8015ac0 <xTaskGetSchedulerState+0x1c>)
 8015aac:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	bf0c      	ite	eq
 8015ab2:	2002      	moveq	r0, #2
 8015ab4:	2000      	movne	r0, #0
 8015ab6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015ab8:	2001      	movs	r0, #1
	}
 8015aba:	4770      	bx	lr
 8015abc:	20006030 	.word	0x20006030
 8015ac0:	20005fe0 	.word	0x20005fe0

08015ac4 <xTaskPriorityInherit>:
	{
 8015ac4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8015ac6:	4604      	mov	r4, r0
	{
 8015ac8:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8015aca:	b1c8      	cbz	r0, 8015b00 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015acc:	4d26      	ldr	r5, [pc, #152]	; (8015b68 <xTaskPriorityInherit+0xa4>)
 8015ace:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015ad0:	682a      	ldr	r2, [r5, #0]
 8015ad2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015ad4:	4293      	cmp	r3, r2
 8015ad6:	d215      	bcs.n	8015b04 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015ad8:	6982      	ldr	r2, [r0, #24]
 8015ada:	2a00      	cmp	r2, #0
 8015adc:	db04      	blt.n	8015ae8 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ade:	682a      	ldr	r2, [r5, #0]
 8015ae0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015ae2:	f1c2 0207 	rsb	r2, r2, #7
 8015ae6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015ae8:	4e20      	ldr	r6, [pc, #128]	; (8015b6c <xTaskPriorityInherit+0xa8>)
 8015aea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015aee:	6962      	ldr	r2, [r4, #20]
 8015af0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d00e      	beq.n	8015b16 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015af8:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8015afa:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015afe:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8015b00:	b002      	add	sp, #8
 8015b02:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015b04:	682b      	ldr	r3, [r5, #0]
 8015b06:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8015b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b0a:	4298      	cmp	r0, r3
 8015b0c:	bf2c      	ite	cs
 8015b0e:	2000      	movcs	r0, #0
 8015b10:	2001      	movcc	r0, #1
	}
 8015b12:	b002      	add	sp, #8
 8015b14:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b16:	1d21      	adds	r1, r4, #4
 8015b18:	4608      	mov	r0, r1
 8015b1a:	9101      	str	r1, [sp, #4]
 8015b1c:	f7fe fd2e 	bl	801457c <uxListRemove>
 8015b20:	9901      	ldr	r1, [sp, #4]
 8015b22:	b970      	cbnz	r0, 8015b42 <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8015b24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015b26:	4a12      	ldr	r2, [pc, #72]	; (8015b70 <xTaskPriorityInherit+0xac>)
 8015b28:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8015b2c:	009b      	lsls	r3, r3, #2
 8015b2e:	58f3      	ldr	r3, [r6, r3]
 8015b30:	b943      	cbnz	r3, 8015b44 <xTaskPriorityInherit+0x80>
 8015b32:	2301      	movs	r3, #1
 8015b34:	fa03 f000 	lsl.w	r0, r3, r0
 8015b38:	6813      	ldr	r3, [r2, #0]
 8015b3a:	ea23 0300 	bic.w	r3, r3, r0
 8015b3e:	6013      	str	r3, [r2, #0]
 8015b40:	e000      	b.n	8015b44 <xTaskPriorityInherit+0x80>
 8015b42:	4a0b      	ldr	r2, [pc, #44]	; (8015b70 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015b44:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015b46:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015b4c:	2401      	movs	r4, #1
 8015b4e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8015b52:	fa04 f303 	lsl.w	r3, r4, r3
 8015b56:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8015b5a:	432b      	orrs	r3, r5
 8015b5c:	6013      	str	r3, [r2, #0]
 8015b5e:	f7fe fce5 	bl	801452c <vListInsertEnd>
				xReturn = pdTRUE;
 8015b62:	4620      	mov	r0, r4
 8015b64:	e7cc      	b.n	8015b00 <xTaskPriorityInherit+0x3c>
 8015b66:	bf00      	nop
 8015b68:	20005f3c 	.word	0x20005f3c
 8015b6c:	20005f48 	.word	0x20005f48
 8015b70:	20005fe8 	.word	0x20005fe8

08015b74 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8015b74:	b340      	cbz	r0, 8015bc8 <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 8015b76:	4b2c      	ldr	r3, [pc, #176]	; (8015c28 <xTaskPriorityDisinherit+0xb4>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	4283      	cmp	r3, r0
	{
 8015b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b7e:	4604      	mov	r4, r0
 8015b80:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 8015b82:	d00a      	beq.n	8015b9a <xTaskPriorityDisinherit+0x26>
 8015b84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015b88:	b672      	cpsid	i
 8015b8a:	f383 8811 	msr	BASEPRI, r3
 8015b8e:	f3bf 8f6f 	isb	sy
 8015b92:	f3bf 8f4f 	dsb	sy
 8015b96:	b662      	cpsie	i
 8015b98:	e7fe      	b.n	8015b98 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8015b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b9c:	b14b      	cbz	r3, 8015bb2 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015b9e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8015ba0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015ba2:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8015ba4:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015ba6:	4291      	cmp	r1, r2
 8015ba8:	d000      	beq.n	8015bac <xTaskPriorityDisinherit+0x38>
 8015baa:	b17b      	cbz	r3, 8015bcc <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8015bac:	2000      	movs	r0, #0
	}
 8015bae:	b003      	add	sp, #12
 8015bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bb2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015bb6:	b672      	cpsid	i
 8015bb8:	f383 8811 	msr	BASEPRI, r3
 8015bbc:	f3bf 8f6f 	isb	sy
 8015bc0:	f3bf 8f4f 	dsb	sy
 8015bc4:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8015bc6:	e7fe      	b.n	8015bc6 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8015bc8:	2000      	movs	r0, #0
	}
 8015bca:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015bcc:	1d01      	adds	r1, r0, #4
 8015bce:	4608      	mov	r0, r1
 8015bd0:	9101      	str	r1, [sp, #4]
 8015bd2:	f7fe fcd3 	bl	801457c <uxListRemove>
 8015bd6:	9901      	ldr	r1, [sp, #4]
 8015bd8:	b1a0      	cbz	r0, 8015c04 <xTaskPriorityDisinherit+0x90>
 8015bda:	4814      	ldr	r0, [pc, #80]	; (8015c2c <xTaskPriorityDisinherit+0xb8>)
 8015bdc:	4a14      	ldr	r2, [pc, #80]	; (8015c30 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015bde:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8015be0:	2501      	movs	r5, #1
 8015be2:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015be4:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015be8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015bea:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8015bec:	fa05 f403 	lsl.w	r4, r5, r3
 8015bf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015bf4:	4334      	orrs	r4, r6
 8015bf6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8015bfa:	6014      	str	r4, [r2, #0]
 8015bfc:	f7fe fc96 	bl	801452c <vListInsertEnd>
					xReturn = pdTRUE;
 8015c00:	4628      	mov	r0, r5
		return xReturn;
 8015c02:	e7d4      	b.n	8015bae <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015c04:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8015c06:	4809      	ldr	r0, [pc, #36]	; (8015c2c <xTaskPriorityDisinherit+0xb8>)
 8015c08:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8015c0c:	4a08      	ldr	r2, [pc, #32]	; (8015c30 <xTaskPriorityDisinherit+0xbc>)
 8015c0e:	009b      	lsls	r3, r3, #2
 8015c10:	58c3      	ldr	r3, [r0, r3]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d1e3      	bne.n	8015bde <xTaskPriorityDisinherit+0x6a>
 8015c16:	2301      	movs	r3, #1
 8015c18:	fa03 f505 	lsl.w	r5, r3, r5
 8015c1c:	6813      	ldr	r3, [r2, #0]
 8015c1e:	ea23 0305 	bic.w	r3, r3, r5
 8015c22:	6013      	str	r3, [r2, #0]
 8015c24:	e7db      	b.n	8015bde <xTaskPriorityDisinherit+0x6a>
 8015c26:	bf00      	nop
 8015c28:	20005f3c 	.word	0x20005f3c
 8015c2c:	20005f48 	.word	0x20005f48
 8015c30:	20005fe8 	.word	0x20005fe8

08015c34 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d044      	beq.n	8015cc2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8015c38:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 8015c3a:	b530      	push	{r4, r5, lr}
 8015c3c:	4604      	mov	r4, r0
 8015c3e:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8015c40:	b153      	cbz	r3, 8015c58 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015c42:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015c44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015c46:	4281      	cmp	r1, r0
 8015c48:	bf38      	it	cc
 8015c4a:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015c4c:	428a      	cmp	r2, r1
 8015c4e:	d001      	beq.n	8015c54 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	d00c      	beq.n	8015c6e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 8015c54:	b003      	add	sp, #12
 8015c56:	bd30      	pop	{r4, r5, pc}
 8015c58:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c5c:	b672      	cpsid	i
 8015c5e:	f383 8811 	msr	BASEPRI, r3
 8015c62:	f3bf 8f6f 	isb	sy
 8015c66:	f3bf 8f4f 	dsb	sy
 8015c6a:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8015c6c:	e7fe      	b.n	8015c6c <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 8015c6e:	4b25      	ldr	r3, [pc, #148]	; (8015d04 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	42a3      	cmp	r3, r4
 8015c74:	d026      	beq.n	8015cc4 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015c76:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8015c78:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	db02      	blt.n	8015c84 <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c7e:	f1c1 0107 	rsb	r1, r1, #7
 8015c82:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015c84:	4d20      	ldr	r5, [pc, #128]	; (8015d08 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8015c86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015c8a:	6961      	ldr	r1, [r4, #20]
 8015c8c:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8015c90:	4299      	cmp	r1, r3
 8015c92:	d1df      	bne.n	8015c54 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015c94:	1d21      	adds	r1, r4, #4
 8015c96:	4608      	mov	r0, r1
 8015c98:	9101      	str	r1, [sp, #4]
 8015c9a:	f7fe fc6f 	bl	801457c <uxListRemove>
 8015c9e:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015ca0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ca2:	b1d0      	cbz	r0, 8015cda <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	0090      	lsls	r0, r2, #2
 8015ca8:	4c18      	ldr	r4, [pc, #96]	; (8015d0c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8015caa:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8015cac:	4410      	add	r0, r2
 8015cae:	6822      	ldr	r2, [r4, #0]
 8015cb0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8015cb4:	4313      	orrs	r3, r2
 8015cb6:	6023      	str	r3, [r4, #0]
	}
 8015cb8:	b003      	add	sp, #12
 8015cba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8015cbe:	f7fe bc35 	b.w	801452c <vListInsertEnd>
 8015cc2:	4770      	bx	lr
 8015cc4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015cc8:	b672      	cpsid	i
 8015cca:	f383 8811 	msr	BASEPRI, r3
 8015cce:	f3bf 8f6f 	isb	sy
 8015cd2:	f3bf 8f4f 	dsb	sy
 8015cd6:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8015cd8:	e7fe      	b.n	8015cd8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015cda:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8015cde:	0090      	lsls	r0, r2, #2
 8015ce0:	009b      	lsls	r3, r3, #2
 8015ce2:	58eb      	ldr	r3, [r5, r3]
 8015ce4:	b11b      	cbz	r3, 8015cee <vTaskPriorityDisinheritAfterTimeout+0xba>
 8015ce6:	2301      	movs	r3, #1
 8015ce8:	4c08      	ldr	r4, [pc, #32]	; (8015d0c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8015cea:	4093      	lsls	r3, r2
 8015cec:	e7de      	b.n	8015cac <vTaskPriorityDisinheritAfterTimeout+0x78>
 8015cee:	4c07      	ldr	r4, [pc, #28]	; (8015d0c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8015cf0:	2301      	movs	r3, #1
 8015cf2:	f8d4 c000 	ldr.w	ip, [r4]
 8015cf6:	4093      	lsls	r3, r2
 8015cf8:	ea2c 0c03 	bic.w	ip, ip, r3
 8015cfc:	f8c4 c000 	str.w	ip, [r4]
 8015d00:	e7d4      	b.n	8015cac <vTaskPriorityDisinheritAfterTimeout+0x78>
 8015d02:	bf00      	nop
 8015d04:	20005f3c 	.word	0x20005f3c
 8015d08:	20005f48 	.word	0x20005f48
 8015d0c:	20005fe8 	.word	0x20005fe8

08015d10 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8015d10:	4b04      	ldr	r3, [pc, #16]	; (8015d24 <pvTaskIncrementMutexHeldCount+0x14>)
 8015d12:	681a      	ldr	r2, [r3, #0]
 8015d14:	b11a      	cbz	r2, 8015d1e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8015d16:	6819      	ldr	r1, [r3, #0]
 8015d18:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8015d1a:	3201      	adds	r2, #1
 8015d1c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8015d1e:	6818      	ldr	r0, [r3, #0]
	}
 8015d20:	4770      	bx	lr
 8015d22:	bf00      	nop
 8015d24:	20005f3c 	.word	0x20005f3c

08015d28 <ulTaskNotifyTake>:
	{
 8015d28:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015d2a:	4c18      	ldr	r4, [pc, #96]	; (8015d8c <ulTaskNotifyTake+0x64>)
	{
 8015d2c:	4606      	mov	r6, r0
 8015d2e:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8015d30:	f000 fbb0 	bl	8016494 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015d34:	6823      	ldr	r3, [r4, #0]
 8015d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015d38:	b923      	cbnz	r3, 8015d44 <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015d3a:	6823      	ldr	r3, [r4, #0]
 8015d3c:	2101      	movs	r1, #1
 8015d3e:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 8015d42:	b9ad      	cbnz	r5, 8015d70 <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 8015d44:	f000 fbcc 	bl	80164e0 <vPortExitCritical>
		taskENTER_CRITICAL();
 8015d48:	f000 fba4 	bl	8016494 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015d4c:	6823      	ldr	r3, [r4, #0]
 8015d4e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 8015d50:	b11d      	cbz	r5, 8015d5a <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015d52:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8015d54:	b14e      	cbz	r6, 8015d6a <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015d56:	2200      	movs	r2, #0
 8015d58:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015d5a:	6823      	ldr	r3, [r4, #0]
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 8015d62:	f000 fbbd 	bl	80164e0 <vPortExitCritical>
	}
 8015d66:	4628      	mov	r0, r5
 8015d68:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015d6a:	1e6a      	subs	r2, r5, #1
 8015d6c:	64da      	str	r2, [r3, #76]	; 0x4c
 8015d6e:	e7f4      	b.n	8015d5a <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015d70:	4628      	mov	r0, r5
 8015d72:	f7ff fa1d 	bl	80151b0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8015d76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015d82:	f3bf 8f4f 	dsb	sy
 8015d86:	f3bf 8f6f 	isb	sy
 8015d8a:	e7db      	b.n	8015d44 <ulTaskNotifyTake+0x1c>
 8015d8c:	20005f3c 	.word	0x20005f3c

08015d90 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8015d90:	b308      	cbz	r0, 8015dd6 <vTaskNotifyGiveFromISR+0x46>
	{
 8015d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d94:	b083      	sub	sp, #12
 8015d96:	4604      	mov	r4, r0
 8015d98:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d9a:	f000 fc81 	bl	80166a0 <vPortValidateInterruptPriority>
	__asm volatile
 8015d9e:	f3ef 8611 	mrs	r6, BASEPRI
 8015da2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015da6:	b672      	cpsid	i
 8015da8:	f383 8811 	msr	BASEPRI, r3
 8015dac:	f3bf 8f6f 	isb	sy
 8015db0:	f3bf 8f4f 	dsb	sy
 8015db4:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015db6:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015db8:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015dbc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015dc0:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8015dc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015dc4:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 8015dc6:	f103 0301 	add.w	r3, r3, #1
 8015dca:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015dcc:	d00e      	beq.n	8015dec <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
 8015dce:	f386 8811 	msr	BASEPRI, r6
	}
 8015dd2:	b003      	add	sp, #12
 8015dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 8015dd6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015dda:	b672      	cpsid	i
 8015ddc:	f383 8811 	msr	BASEPRI, r3
 8015de0:	f3bf 8f6f 	isb	sy
 8015de4:	f3bf 8f4f 	dsb	sy
 8015de8:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 8015dea:	e7fe      	b.n	8015dea <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015dec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015dee:	b153      	cbz	r3, 8015e06 <vTaskNotifyGiveFromISR+0x76>
 8015df0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015df4:	b672      	cpsid	i
 8015df6:	f383 8811 	msr	BASEPRI, r3
 8015dfa:	f3bf 8f6f 	isb	sy
 8015dfe:	f3bf 8f4f 	dsb	sy
 8015e02:	b662      	cpsie	i
 8015e04:	e7fe      	b.n	8015e04 <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e06:	4b14      	ldr	r3, [pc, #80]	; (8015e58 <vTaskNotifyGiveFromISR+0xc8>)
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	b18b      	cbz	r3, 8015e30 <vTaskNotifyGiveFromISR+0xa0>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015e0c:	f104 0118 	add.w	r1, r4, #24
 8015e10:	4812      	ldr	r0, [pc, #72]	; (8015e5c <vTaskNotifyGiveFromISR+0xcc>)
 8015e12:	f7fe fb8b 	bl	801452c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015e16:	4b12      	ldr	r3, [pc, #72]	; (8015e60 <vTaskNotifyGiveFromISR+0xd0>)
 8015e18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d9d5      	bls.n	8015dce <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
 8015e22:	b10d      	cbz	r5, 8015e28 <vTaskNotifyGiveFromISR+0x98>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015e24:	2301      	movs	r3, #1
 8015e26:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 8015e28:	4b0e      	ldr	r3, [pc, #56]	; (8015e64 <vTaskNotifyGiveFromISR+0xd4>)
 8015e2a:	2201      	movs	r2, #1
 8015e2c:	601a      	str	r2, [r3, #0]
 8015e2e:	e7ce      	b.n	8015dce <vTaskNotifyGiveFromISR+0x3e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015e30:	1d21      	adds	r1, r4, #4
 8015e32:	4608      	mov	r0, r1
 8015e34:	9101      	str	r1, [sp, #4]
 8015e36:	f7fe fba1 	bl	801457c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015e3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015e3c:	4b0a      	ldr	r3, [pc, #40]	; (8015e68 <vTaskNotifyGiveFromISR+0xd8>)
 8015e3e:	4087      	lsls	r7, r0
 8015e40:	4a0a      	ldr	r2, [pc, #40]	; (8015e6c <vTaskNotifyGiveFromISR+0xdc>)
 8015e42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015e46:	9901      	ldr	r1, [sp, #4]
 8015e48:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8015e4c:	681a      	ldr	r2, [r3, #0]
 8015e4e:	4317      	orrs	r7, r2
 8015e50:	601f      	str	r7, [r3, #0]
 8015e52:	f7fe fb6b 	bl	801452c <vListInsertEnd>
 8015e56:	e7de      	b.n	8015e16 <vTaskNotifyGiveFromISR+0x86>
 8015e58:	20005fe0 	.word	0x20005fe0
 8015e5c:	2000601c 	.word	0x2000601c
 8015e60:	20005f3c 	.word	0x20005f3c
 8015e64:	20006060 	.word	0x20006060
 8015e68:	20005fe8 	.word	0x20005fe8
 8015e6c:	20005f48 	.word	0x20005f48

08015e70 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015e70:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8015e72:	4c12      	ldr	r4, [pc, #72]	; (8015ebc <prvCheckForValidListAndQueue+0x4c>)
{
 8015e74:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8015e76:	f000 fb0d 	bl	8016494 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8015e7a:	6825      	ldr	r5, [r4, #0]
 8015e7c:	b125      	cbz	r5, 8015e88 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8015e7e:	b003      	add	sp, #12
 8015e80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8015e84:	f000 bb2c 	b.w	80164e0 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8015e88:	4f0d      	ldr	r7, [pc, #52]	; (8015ec0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8015e8a:	4e0e      	ldr	r6, [pc, #56]	; (8015ec4 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8015e8c:	4638      	mov	r0, r7
 8015e8e:	f7fe fb3d 	bl	801450c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015e92:	4630      	mov	r0, r6
 8015e94:	f7fe fb3a 	bl	801450c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015e98:	4a0b      	ldr	r2, [pc, #44]	; (8015ec8 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015e9a:	9500      	str	r5, [sp, #0]
 8015e9c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8015e9e:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015ea0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8015ea2:	4a0a      	ldr	r2, [pc, #40]	; (8015ecc <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015ea4:	4b0a      	ldr	r3, [pc, #40]	; (8015ed0 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8015ea6:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015ea8:	4a0a      	ldr	r2, [pc, #40]	; (8015ed4 <prvCheckForValidListAndQueue+0x64>)
 8015eaa:	f7fe fc4b 	bl	8014744 <xQueueGenericCreateStatic>
 8015eae:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	d0e4      	beq.n	8015e7e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015eb4:	4908      	ldr	r1, [pc, #32]	; (8015ed8 <prvCheckForValidListAndQueue+0x68>)
 8015eb6:	f7ff f8b3 	bl	8015020 <vQueueAddToRegistry>
 8015eba:	e7e0      	b.n	8015e7e <prvCheckForValidListAndQueue+0xe>
 8015ebc:	20006180 	.word	0x20006180
 8015ec0:	2000610c 	.word	0x2000610c
 8015ec4:	20006120 	.word	0x20006120
 8015ec8:	20006064 	.word	0x20006064
 8015ecc:	20006068 	.word	0x20006068
 8015ed0:	20006138 	.word	0x20006138
 8015ed4:	2000606c 	.word	0x2000606c
 8015ed8:	0802b300 	.word	0x0802b300

08015edc <xTimerCreateTimerTask>:
{
 8015edc:	b530      	push	{r4, r5, lr}
 8015ede:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8015ee0:	f7ff ffc6 	bl	8015e70 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8015ee4:	4b13      	ldr	r3, [pc, #76]	; (8015f34 <xTimerCreateTimerTask+0x58>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	b1cb      	cbz	r3, 8015f1e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015eea:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015eec:	aa07      	add	r2, sp, #28
 8015eee:	a906      	add	r1, sp, #24
 8015ef0:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015ef2:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015ef4:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015ef8:	f7ea fe78 	bl	8000bec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015efc:	4623      	mov	r3, r4
 8015efe:	9a07      	ldr	r2, [sp, #28]
 8015f00:	9500      	str	r5, [sp, #0]
 8015f02:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8015f06:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8015f0a:	490b      	ldr	r1, [pc, #44]	; (8015f38 <xTimerCreateTimerTask+0x5c>)
 8015f0c:	480b      	ldr	r0, [pc, #44]	; (8015f3c <xTimerCreateTimerTask+0x60>)
 8015f0e:	f7ff fa71 	bl	80153f4 <xTaskCreateStatic>
 8015f12:	4b0b      	ldr	r3, [pc, #44]	; (8015f40 <xTimerCreateTimerTask+0x64>)
 8015f14:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8015f16:	b110      	cbz	r0, 8015f1e <xTimerCreateTimerTask+0x42>
}
 8015f18:	2001      	movs	r0, #1
 8015f1a:	b009      	add	sp, #36	; 0x24
 8015f1c:	bd30      	pop	{r4, r5, pc}
 8015f1e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015f22:	b672      	cpsid	i
 8015f24:	f383 8811 	msr	BASEPRI, r3
 8015f28:	f3bf 8f6f 	isb	sy
 8015f2c:	f3bf 8f4f 	dsb	sy
 8015f30:	b662      	cpsie	i
	configASSERT( xReturn );
 8015f32:	e7fe      	b.n	8015f32 <xTimerCreateTimerTask+0x56>
 8015f34:	20006180 	.word	0x20006180
 8015f38:	0802b308 	.word	0x0802b308
 8015f3c:	0801613d 	.word	0x0801613d
 8015f40:	20006184 	.word	0x20006184

08015f44 <xTimerCreate>:
	{
 8015f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f48:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8015f4a:	2028      	movs	r0, #40	; 0x28
	{
 8015f4c:	4688      	mov	r8, r1
 8015f4e:	4615      	mov	r5, r2
 8015f50:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8015f52:	f000 fc09 	bl	8016768 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8015f56:	4604      	mov	r4, r0
 8015f58:	b1b0      	cbz	r0, 8015f88 <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015f60:	f1b8 0f00 	cmp.w	r8, #0
 8015f64:	d013      	beq.n	8015f8e <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 8015f66:	f7ff ff83 	bl	8015e70 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015f6a:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015f6c:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 8015f6e:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015f70:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 8015f72:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015f76:	f7fe fad5 	bl	8014524 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015f7a:	b12d      	cbz	r5, 8015f88 <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8015f7c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015f80:	f043 0304 	orr.w	r3, r3, #4
 8015f84:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8015f88:	4620      	mov	r0, r4
 8015f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f8e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015f92:	b672      	cpsid	i
 8015f94:	f383 8811 	msr	BASEPRI, r3
 8015f98:	f3bf 8f6f 	isb	sy
 8015f9c:	f3bf 8f4f 	dsb	sy
 8015fa0:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015fa2:	e7fe      	b.n	8015fa2 <xTimerCreate+0x5e>

08015fa4 <xTimerCreateStatic>:
	{
 8015fa4:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8015fa6:	2428      	movs	r4, #40	; 0x28
	{
 8015fa8:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 8015faa:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 8015fac:	9d05      	ldr	r5, [sp, #20]
 8015fae:	2d28      	cmp	r5, #40	; 0x28
 8015fb0:	d00a      	beq.n	8015fc8 <xTimerCreateStatic+0x24>
 8015fb2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015fb6:	b672      	cpsid	i
 8015fb8:	f383 8811 	msr	BASEPRI, r3
 8015fbc:	f3bf 8f6f 	isb	sy
 8015fc0:	f3bf 8f4f 	dsb	sy
 8015fc4:	b662      	cpsie	i
 8015fc6:	e7fe      	b.n	8015fc6 <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015fc8:	4604      	mov	r4, r0
 8015fca:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 8015fcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015fce:	b318      	cbz	r0, 8016018 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8015fd0:	2002      	movs	r0, #2
 8015fd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015fd4:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015fd8:	b349      	cbz	r1, 801602e <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 8015fda:	9101      	str	r1, [sp, #4]
 8015fdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015fe0:	f7ff ff46 	bl	8015e70 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015fe6:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 8015fe8:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 8015fea:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015fec:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015fee:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 8015ff0:	9b03      	ldr	r3, [sp, #12]
 8015ff2:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015ff4:	4613      	mov	r3, r2
 8015ff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ff8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015ffa:	f7fe fa93 	bl	8014524 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015ffe:	9a02      	ldr	r2, [sp, #8]
 8016000:	b13a      	cbz	r2, 8016012 <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8016002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016006:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801600a:	f043 0304 	orr.w	r3, r3, #4
 801600e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 8016012:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016014:	b007      	add	sp, #28
 8016016:	bd30      	pop	{r4, r5, pc}
 8016018:	f04f 0330 	mov.w	r3, #48	; 0x30
 801601c:	b672      	cpsid	i
 801601e:	f383 8811 	msr	BASEPRI, r3
 8016022:	f3bf 8f6f 	isb	sy
 8016026:	f3bf 8f4f 	dsb	sy
 801602a:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 801602c:	e7fe      	b.n	801602c <xTimerCreateStatic+0x88>
 801602e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016032:	b672      	cpsid	i
 8016034:	f383 8811 	msr	BASEPRI, r3
 8016038:	f3bf 8f6f 	isb	sy
 801603c:	f3bf 8f4f 	dsb	sy
 8016040:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016042:	e7fe      	b.n	8016042 <xTimerCreateStatic+0x9e>

08016044 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8016044:	b1c8      	cbz	r0, 801607a <xTimerGenericCommand+0x36>
{
 8016046:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8016048:	4d19      	ldr	r5, [pc, #100]	; (80160b0 <xTimerGenericCommand+0x6c>)
{
 801604a:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 801604c:	682c      	ldr	r4, [r5, #0]
 801604e:	b18c      	cbz	r4, 8016074 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016050:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016052:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8016054:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016058:	dc1a      	bgt.n	8016090 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801605a:	f7ff fd23 	bl	8015aa4 <xTaskGetSchedulerState>
 801605e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016060:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016064:	d01d      	beq.n	80160a2 <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016066:	4669      	mov	r1, sp
 8016068:	461a      	mov	r2, r3
 801606a:	6828      	ldr	r0, [r5, #0]
 801606c:	f7fe fbf4 	bl	8014858 <xQueueGenericSend>
}
 8016070:	b005      	add	sp, #20
 8016072:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8016074:	4620      	mov	r0, r4
}
 8016076:	b005      	add	sp, #20
 8016078:	bd30      	pop	{r4, r5, pc}
 801607a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801607e:	b672      	cpsid	i
 8016080:	f383 8811 	msr	BASEPRI, r3
 8016084:	f3bf 8f6f 	isb	sy
 8016088:	f3bf 8f4f 	dsb	sy
 801608c:	b662      	cpsie	i
	configASSERT( xTimer );
 801608e:	e7fe      	b.n	801608e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016090:	469c      	mov	ip, r3
 8016092:	4669      	mov	r1, sp
 8016094:	2300      	movs	r3, #0
 8016096:	4620      	mov	r0, r4
 8016098:	4662      	mov	r2, ip
 801609a:	f7fe fcdd 	bl	8014a58 <xQueueGenericSendFromISR>
}
 801609e:	b005      	add	sp, #20
 80160a0:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80160a2:	9a08      	ldr	r2, [sp, #32]
 80160a4:	4669      	mov	r1, sp
 80160a6:	6828      	ldr	r0, [r5, #0]
 80160a8:	f7fe fbd6 	bl	8014858 <xQueueGenericSend>
 80160ac:	e7e3      	b.n	8016076 <xTimerGenericCommand+0x32>
 80160ae:	bf00      	nop
 80160b0:	20006180 	.word	0x20006180

080160b4 <prvSwitchTimerLists>:
{
 80160b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160b8:	4e1e      	ldr	r6, [pc, #120]	; (8016134 <prvSwitchTimerLists+0x80>)
 80160ba:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80160bc:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80160c0:	e00d      	b.n	80160de <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80160c2:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80160c4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80160c6:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80160c8:	1d25      	adds	r5, r4, #4
 80160ca:	4628      	mov	r0, r5
 80160cc:	f7fe fa56 	bl	801457c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80160d0:	6a23      	ldr	r3, [r4, #32]
 80160d2:	4620      	mov	r0, r4
 80160d4:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80160d6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80160da:	075b      	lsls	r3, r3, #29
 80160dc:	d40a      	bmi.n	80160f4 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80160de:	6833      	ldr	r3, [r6, #0]
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	2a00      	cmp	r2, #0
 80160e4:	d1ed      	bne.n	80160c2 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 80160e6:	4a14      	ldr	r2, [pc, #80]	; (8016138 <prvSwitchTimerLists+0x84>)
 80160e8:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80160ea:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80160ec:	6031      	str	r1, [r6, #0]
}
 80160ee:	b002      	add	sp, #8
 80160f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80160f4:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80160f6:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80160f8:	2300      	movs	r3, #0
 80160fa:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80160fc:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80160fe:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8016100:	42af      	cmp	r7, r5
 8016102:	d205      	bcs.n	8016110 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016104:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016106:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016108:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801610a:	f7fe fa1f 	bl	801454c <vListInsert>
 801610e:	e7e6      	b.n	80160de <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016110:	4619      	mov	r1, r3
 8016112:	f8cd 8000 	str.w	r8, [sp]
 8016116:	f7ff ff95 	bl	8016044 <xTimerGenericCommand>
				configASSERT( xResult );
 801611a:	2800      	cmp	r0, #0
 801611c:	d1df      	bne.n	80160de <prvSwitchTimerLists+0x2a>
 801611e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016122:	b672      	cpsid	i
 8016124:	f383 8811 	msr	BASEPRI, r3
 8016128:	f3bf 8f6f 	isb	sy
 801612c:	f3bf 8f4f 	dsb	sy
 8016130:	b662      	cpsie	i
 8016132:	e7fe      	b.n	8016132 <prvSwitchTimerLists+0x7e>
 8016134:	20006064 	.word	0x20006064
 8016138:	20006068 	.word	0x20006068

0801613c <prvTimerTask>:
{
 801613c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016140:	4e9a      	ldr	r6, [pc, #616]	; (80163ac <prvTimerTask+0x270>)
 8016142:	b087      	sub	sp, #28
 8016144:	4d9a      	ldr	r5, [pc, #616]	; (80163b0 <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 8016146:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 801614a:	4c9a      	ldr	r4, [pc, #616]	; (80163b4 <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801614c:	6833      	ldr	r3, [r6, #0]
 801614e:	681f      	ldr	r7, [r3, #0]
 8016150:	2f00      	cmp	r7, #0
 8016152:	f000 80ac 	beq.w	80162ae <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016156:	68db      	ldr	r3, [r3, #12]
 8016158:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 801615a:	f7ff fa07 	bl	801556c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801615e:	f7ff fa0d 	bl	801557c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8016162:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8016164:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8016166:	4290      	cmp	r0, r2
 8016168:	f0c0 80a9 	bcc.w	80162be <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801616c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 801616e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016170:	f200 80ca 	bhi.w	8016308 <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 8016174:	f7ff fb56 	bl	8015824 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016178:	6832      	ldr	r2, [r6, #0]
 801617a:	68d2      	ldr	r2, [r2, #12]
 801617c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016180:	f10b 0804 	add.w	r8, fp, #4
 8016184:	4640      	mov	r0, r8
 8016186:	f7fe f9f9 	bl	801457c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801618a:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 801618e:	0743      	lsls	r3, r0, #29
 8016190:	f100 80ca 	bmi.w	8016328 <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016194:	f020 0001 	bic.w	r0, r0, #1
 8016198:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801619c:	f8db 3020 	ldr.w	r3, [fp, #32]
 80161a0:	4658      	mov	r0, fp
 80161a2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80161a4:	2200      	movs	r2, #0
 80161a6:	a902      	add	r1, sp, #8
 80161a8:	6820      	ldr	r0, [r4, #0]
 80161aa:	f7fe fd27 	bl	8014bfc <xQueueReceive>
 80161ae:	2800      	cmp	r0, #0
 80161b0:	d0cc      	beq.n	801614c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80161b2:	9b02      	ldr	r3, [sp, #8]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	db71      	blt.n	801629c <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80161b8:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80161ba:	697b      	ldr	r3, [r7, #20]
 80161bc:	b113      	cbz	r3, 80161c4 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80161be:	1d38      	adds	r0, r7, #4
 80161c0:	f7fe f9dc 	bl	801457c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80161c4:	f7ff f9da 	bl	801557c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80161c8:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80161ca:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 80161cc:	4298      	cmp	r0, r3
 80161ce:	d37d      	bcc.n	80162cc <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 80161d0:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80161d2:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 80161d6:	2b09      	cmp	r3, #9
 80161d8:	d8e4      	bhi.n	80161a4 <prvTimerTask+0x68>
 80161da:	e8df f003 	tbb	[pc, r3]
 80161de:	0505      	.short	0x0505
 80161e0:	56394f05 	.word	0x56394f05
 80161e4:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80161e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80161ec:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80161ee:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80161f2:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80161f4:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80161f6:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80161fa:	185a      	adds	r2, r3, r1
 80161fc:	bf2c      	ite	cs
 80161fe:	2001      	movcs	r0, #1
 8016200:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8016202:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016204:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8016206:	f200 8081 	bhi.w	801630c <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801620a:	eba8 0303 	sub.w	r3, r8, r3
 801620e:	4299      	cmp	r1, r3
 8016210:	f200 80b5 	bhi.w	801637e <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016214:	6a3b      	ldr	r3, [r7, #32]
 8016216:	4638      	mov	r0, r7
 8016218:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801621a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801621e:	0759      	lsls	r1, r3, #29
 8016220:	d5c0      	bpl.n	80161a4 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016222:	2200      	movs	r2, #0
 8016224:	69bb      	ldr	r3, [r7, #24]
 8016226:	4638      	mov	r0, r7
 8016228:	9200      	str	r2, [sp, #0]
 801622a:	9a03      	ldr	r2, [sp, #12]
 801622c:	441a      	add	r2, r3
 801622e:	2300      	movs	r3, #0
 8016230:	4619      	mov	r1, r3
 8016232:	f7ff ff07 	bl	8016044 <xTimerGenericCommand>
							configASSERT( xResult );
 8016236:	2800      	cmp	r0, #0
 8016238:	d1b4      	bne.n	80161a4 <prvTimerTask+0x68>
 801623a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801623e:	b672      	cpsid	i
 8016240:	f383 8811 	msr	BASEPRI, r3
 8016244:	f3bf 8f6f 	isb	sy
 8016248:	f3bf 8f4f 	dsb	sy
 801624c:	b662      	cpsie	i
 801624e:	e7fe      	b.n	801624e <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016250:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016254:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016256:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801625a:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801625c:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016260:	2b00      	cmp	r3, #0
 8016262:	f000 8098 	beq.w	8016396 <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016266:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016268:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801626a:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 801626c:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801626e:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8016270:	d856      	bhi.n	8016320 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016272:	4b51      	ldr	r3, [pc, #324]	; (80163b8 <prvTimerTask+0x27c>)
 8016274:	6818      	ldr	r0, [r3, #0]
 8016276:	f7fe f969 	bl	801454c <vListInsert>
	return xProcessTimerNow;
 801627a:	e793      	b.n	80161a4 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801627c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016280:	f023 0301 	bic.w	r3, r3, #1
 8016284:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 8016288:	e78c      	b.n	80161a4 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801628a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801628e:	079a      	lsls	r2, r3, #30
 8016290:	d56c      	bpl.n	801636c <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016292:	f023 0301 	bic.w	r3, r3, #1
 8016296:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801629a:	e783      	b.n	80161a4 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801629c:	9b03      	ldr	r3, [sp, #12]
 801629e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80162a2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80162a4:	9b02      	ldr	r3, [sp, #8]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	f6ff af7c 	blt.w	80161a4 <prvTimerTask+0x68>
 80162ac:	e784      	b.n	80161b8 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 80162ae:	f7ff f95d 	bl	801556c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80162b2:	f7ff f963 	bl	801557c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80162b6:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80162b8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80162ba:	4282      	cmp	r2, r0
 80162bc:	d909      	bls.n	80162d2 <prvTimerTask+0x196>
		prvSwitchTimerLists();
 80162be:	f7ff fef9 	bl	80160b4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80162c2:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80162c6:	f7ff faad 	bl	8015824 <xTaskResumeAll>
 80162ca:	e76b      	b.n	80161a4 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 80162cc:	f7ff fef2 	bl	80160b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80162d0:	e77e      	b.n	80161d0 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80162d2:	4b39      	ldr	r3, [pc, #228]	; (80163b8 <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 80162d4:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80162d8:	681a      	ldr	r2, [r3, #0]
 80162da:	6812      	ldr	r2, [r2, #0]
 80162dc:	fab2 f282 	clz	r2, r2
 80162e0:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80162e2:	eba7 010a 	sub.w	r1, r7, sl
 80162e6:	6820      	ldr	r0, [r4, #0]
 80162e8:	f7fe feb0 	bl	801504c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80162ec:	f7ff fa9a 	bl	8015824 <xTaskResumeAll>
 80162f0:	2800      	cmp	r0, #0
 80162f2:	f47f af57 	bne.w	80161a4 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 80162f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80162fa:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 80162fe:	f3bf 8f4f 	dsb	sy
 8016302:	f3bf 8f6f 	isb	sy
 8016306:	e74d      	b.n	80161a4 <prvTimerTask+0x68>
 8016308:	2200      	movs	r2, #0
 801630a:	e7ea      	b.n	80162e2 <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801630c:	4543      	cmp	r3, r8
 801630e:	d902      	bls.n	8016316 <prvTimerTask+0x1da>
 8016310:	2800      	cmp	r0, #0
 8016312:	f43f af7f 	beq.w	8016214 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016316:	1d39      	adds	r1, r7, #4
 8016318:	6830      	ldr	r0, [r6, #0]
 801631a:	f7fe f917 	bl	801454c <vListInsert>
	return xProcessTimerNow;
 801631e:	e741      	b.n	80161a4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016320:	6830      	ldr	r0, [r6, #0]
 8016322:	f7fe f913 	bl	801454c <vListInsert>
 8016326:	e73d      	b.n	80161a4 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016328:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801632c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016330:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8016332:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016334:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8016338:	d31c      	bcc.n	8016374 <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801633a:	ebaa 0307 	sub.w	r3, sl, r7
 801633e:	429a      	cmp	r2, r3
 8016340:	d823      	bhi.n	801638a <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016342:	2300      	movs	r3, #0
 8016344:	463a      	mov	r2, r7
 8016346:	4658      	mov	r0, fp
 8016348:	4619      	mov	r1, r3
 801634a:	9300      	str	r3, [sp, #0]
 801634c:	f7ff fe7a 	bl	8016044 <xTimerGenericCommand>
			configASSERT( xResult );
 8016350:	2800      	cmp	r0, #0
 8016352:	f47f af23 	bne.w	801619c <prvTimerTask+0x60>
 8016356:	f04f 0330 	mov.w	r3, #48	; 0x30
 801635a:	b672      	cpsid	i
 801635c:	f383 8811 	msr	BASEPRI, r3
 8016360:	f3bf 8f6f 	isb	sy
 8016364:	f3bf 8f4f 	dsb	sy
 8016368:	b662      	cpsie	i
 801636a:	e7fe      	b.n	801636a <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 801636c:	4638      	mov	r0, r7
 801636e:	f000 fa97 	bl	80168a0 <vPortFree>
 8016372:	e717      	b.n	80161a4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016374:	4641      	mov	r1, r8
 8016376:	6830      	ldr	r0, [r6, #0]
 8016378:	f7fe f8e8 	bl	801454c <vListInsert>
	return xProcessTimerNow;
 801637c:	e70e      	b.n	801619c <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801637e:	4b0e      	ldr	r3, [pc, #56]	; (80163b8 <prvTimerTask+0x27c>)
 8016380:	1d39      	adds	r1, r7, #4
 8016382:	6818      	ldr	r0, [r3, #0]
 8016384:	f7fe f8e2 	bl	801454c <vListInsert>
	return xProcessTimerNow;
 8016388:	e70c      	b.n	80161a4 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801638a:	4b0b      	ldr	r3, [pc, #44]	; (80163b8 <prvTimerTask+0x27c>)
 801638c:	4641      	mov	r1, r8
 801638e:	6818      	ldr	r0, [r3, #0]
 8016390:	f7fe f8dc 	bl	801454c <vListInsert>
	return xProcessTimerNow;
 8016394:	e702      	b.n	801619c <prvTimerTask+0x60>
 8016396:	f04f 0330 	mov.w	r3, #48	; 0x30
 801639a:	b672      	cpsid	i
 801639c:	f383 8811 	msr	BASEPRI, r3
 80163a0:	f3bf 8f6f 	isb	sy
 80163a4:	f3bf 8f4f 	dsb	sy
 80163a8:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80163aa:	e7fe      	b.n	80163aa <prvTimerTask+0x26e>
 80163ac:	20006064 	.word	0x20006064
 80163b0:	20006134 	.word	0x20006134
 80163b4:	20006180 	.word	0x20006180
 80163b8:	20006068 	.word	0x20006068

080163bc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80163bc:	4808      	ldr	r0, [pc, #32]	; (80163e0 <prvPortStartFirstTask+0x24>)
 80163be:	6800      	ldr	r0, [r0, #0]
 80163c0:	6800      	ldr	r0, [r0, #0]
 80163c2:	f380 8808 	msr	MSP, r0
 80163c6:	f04f 0000 	mov.w	r0, #0
 80163ca:	f380 8814 	msr	CONTROL, r0
 80163ce:	b662      	cpsie	i
 80163d0:	b661      	cpsie	f
 80163d2:	f3bf 8f4f 	dsb	sy
 80163d6:	f3bf 8f6f 	isb	sy
 80163da:	df00      	svc	0
 80163dc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80163de:	0000      	.short	0x0000
 80163e0:	e000ed08 	.word	0xe000ed08

080163e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80163e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80163f4 <vPortEnableVFP+0x10>
 80163e8:	6801      	ldr	r1, [r0, #0]
 80163ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80163ee:	6001      	str	r1, [r0, #0]
 80163f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80163f2:	0000      	.short	0x0000
 80163f4:	e000ed88 	.word	0xe000ed88

080163f8 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80163f8:	4b10      	ldr	r3, [pc, #64]	; (801643c <prvTaskExitError+0x44>)
{
 80163fa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80163fc:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80163fe:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8016400:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8016402:	3301      	adds	r3, #1
 8016404:	d00a      	beq.n	801641c <prvTaskExitError+0x24>
 8016406:	f04f 0330 	mov.w	r3, #48	; 0x30
 801640a:	b672      	cpsid	i
 801640c:	f383 8811 	msr	BASEPRI, r3
 8016410:	f3bf 8f6f 	isb	sy
 8016414:	f3bf 8f4f 	dsb	sy
 8016418:	b662      	cpsie	i
 801641a:	e7fe      	b.n	801641a <prvTaskExitError+0x22>
 801641c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016420:	b672      	cpsid	i
 8016422:	f383 8811 	msr	BASEPRI, r3
 8016426:	f3bf 8f6f 	isb	sy
 801642a:	f3bf 8f4f 	dsb	sy
 801642e:	b662      	cpsie	i
	while( ulDummy == 0 )
 8016430:	9b01      	ldr	r3, [sp, #4]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d0fc      	beq.n	8016430 <prvTaskExitError+0x38>
}
 8016436:	b002      	add	sp, #8
 8016438:	4770      	bx	lr
 801643a:	bf00      	nop
 801643c:	20000408 	.word	0x20000408

08016440 <pxPortInitialiseStack>:
{
 8016440:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016442:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016446:	4809      	ldr	r0, [pc, #36]	; (801646c <pxPortInitialiseStack+0x2c>)
{
 8016448:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801644a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801644e:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016452:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8016456:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801645a:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801645e:	f06f 0102 	mvn.w	r1, #2
}
 8016462:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016466:	f843 1c24 	str.w	r1, [r3, #-36]
}
 801646a:	4770      	bx	lr
 801646c:	080163f9 	.word	0x080163f9

08016470 <SVC_Handler>:
	__asm volatile (
 8016470:	4b07      	ldr	r3, [pc, #28]	; (8016490 <pxCurrentTCBConst2>)
 8016472:	6819      	ldr	r1, [r3, #0]
 8016474:	6808      	ldr	r0, [r1, #0]
 8016476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801647a:	f380 8809 	msr	PSP, r0
 801647e:	f3bf 8f6f 	isb	sy
 8016482:	f04f 0000 	mov.w	r0, #0
 8016486:	f380 8811 	msr	BASEPRI, r0
 801648a:	4770      	bx	lr
 801648c:	f3af 8000 	nop.w

08016490 <pxCurrentTCBConst2>:
 8016490:	20005f3c 	.word	0x20005f3c

08016494 <vPortEnterCritical>:
 8016494:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016498:	b672      	cpsid	i
 801649a:	f383 8811 	msr	BASEPRI, r3
 801649e:	f3bf 8f6f 	isb	sy
 80164a2:	f3bf 8f4f 	dsb	sy
 80164a6:	b662      	cpsie	i
	uxCriticalNesting++;
 80164a8:	4a0c      	ldr	r2, [pc, #48]	; (80164dc <vPortEnterCritical+0x48>)
 80164aa:	6813      	ldr	r3, [r2, #0]
 80164ac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80164ae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80164b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80164b2:	d000      	beq.n	80164b6 <vPortEnterCritical+0x22>
}
 80164b4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80164b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80164ba:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80164be:	b2db      	uxtb	r3, r3
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d0f7      	beq.n	80164b4 <vPortEnterCritical+0x20>
 80164c4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80164c8:	b672      	cpsid	i
 80164ca:	f383 8811 	msr	BASEPRI, r3
 80164ce:	f3bf 8f6f 	isb	sy
 80164d2:	f3bf 8f4f 	dsb	sy
 80164d6:	b662      	cpsie	i
 80164d8:	e7fe      	b.n	80164d8 <vPortEnterCritical+0x44>
 80164da:	bf00      	nop
 80164dc:	20000408 	.word	0x20000408

080164e0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80164e0:	4a09      	ldr	r2, [pc, #36]	; (8016508 <vPortExitCritical+0x28>)
 80164e2:	6813      	ldr	r3, [r2, #0]
 80164e4:	b953      	cbnz	r3, 80164fc <vPortExitCritical+0x1c>
 80164e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80164ea:	b672      	cpsid	i
 80164ec:	f383 8811 	msr	BASEPRI, r3
 80164f0:	f3bf 8f6f 	isb	sy
 80164f4:	f3bf 8f4f 	dsb	sy
 80164f8:	b662      	cpsie	i
 80164fa:	e7fe      	b.n	80164fa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80164fc:	3b01      	subs	r3, #1
 80164fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016500:	b90b      	cbnz	r3, 8016506 <vPortExitCritical+0x26>
	__asm volatile
 8016502:	f383 8811 	msr	BASEPRI, r3
}
 8016506:	4770      	bx	lr
 8016508:	20000408 	.word	0x20000408
 801650c:	00000000 	.word	0x00000000

08016510 <PendSV_Handler>:
	__asm volatile
 8016510:	f3ef 8009 	mrs	r0, PSP
 8016514:	f3bf 8f6f 	isb	sy
 8016518:	4b15      	ldr	r3, [pc, #84]	; (8016570 <pxCurrentTCBConst>)
 801651a:	681a      	ldr	r2, [r3, #0]
 801651c:	f01e 0f10 	tst.w	lr, #16
 8016520:	bf08      	it	eq
 8016522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801652a:	6010      	str	r0, [r2, #0]
 801652c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016530:	f04f 0030 	mov.w	r0, #48	; 0x30
 8016534:	b672      	cpsid	i
 8016536:	f380 8811 	msr	BASEPRI, r0
 801653a:	f3bf 8f4f 	dsb	sy
 801653e:	f3bf 8f6f 	isb	sy
 8016542:	b662      	cpsie	i
 8016544:	f7ff f9b4 	bl	80158b0 <vTaskSwitchContext>
 8016548:	f04f 0000 	mov.w	r0, #0
 801654c:	f380 8811 	msr	BASEPRI, r0
 8016550:	bc09      	pop	{r0, r3}
 8016552:	6819      	ldr	r1, [r3, #0]
 8016554:	6808      	ldr	r0, [r1, #0]
 8016556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801655a:	f01e 0f10 	tst.w	lr, #16
 801655e:	bf08      	it	eq
 8016560:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016564:	f380 8809 	msr	PSP, r0
 8016568:	f3bf 8f6f 	isb	sy
 801656c:	4770      	bx	lr
 801656e:	bf00      	nop

08016570 <pxCurrentTCBConst>:
 8016570:	20005f3c 	.word	0x20005f3c

08016574 <SysTick_Handler>:
{
 8016574:	b508      	push	{r3, lr}
	__asm volatile
 8016576:	f04f 0330 	mov.w	r3, #48	; 0x30
 801657a:	b672      	cpsid	i
 801657c:	f383 8811 	msr	BASEPRI, r3
 8016580:	f3bf 8f6f 	isb	sy
 8016584:	f3bf 8f4f 	dsb	sy
 8016588:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801658a:	f7ff f805 	bl	8015598 <xTaskIncrementTick>
 801658e:	b128      	cbz	r0, 801659c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016590:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016598:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 801659c:	2300      	movs	r3, #0
 801659e:	f383 8811 	msr	BASEPRI, r3
}
 80165a2:	bd08      	pop	{r3, pc}

080165a4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80165a4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80165a8:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80165aa:	4b06      	ldr	r3, [pc, #24]	; (80165c4 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80165ac:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80165ae:	4806      	ldr	r0, [pc, #24]	; (80165c8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80165b0:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80165b2:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	fba0 0303 	umull	r0, r3, r0, r3
 80165ba:	099b      	lsrs	r3, r3, #6
 80165bc:	3b01      	subs	r3, #1
 80165be:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80165c0:	6111      	str	r1, [r2, #16]
}
 80165c2:	4770      	bx	lr
 80165c4:	2000027c 	.word	0x2000027c
 80165c8:	10624dd3 	.word	0x10624dd3

080165cc <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80165cc:	4b30      	ldr	r3, [pc, #192]	; (8016690 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80165ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80165d2:	4830      	ldr	r0, [pc, #192]	; (8016694 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80165d4:	4930      	ldr	r1, [pc, #192]	; (8016698 <xPortStartScheduler+0xcc>)
{
 80165d6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80165d8:	781a      	ldrb	r2, [r3, #0]
{
 80165da:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80165dc:	b2d2      	uxtb	r2, r2
 80165de:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80165e0:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80165e2:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80165e6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80165e8:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80165ea:	b2db      	uxtb	r3, r3
 80165ec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80165f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80165f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165fc:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80165fe:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016600:	d50f      	bpl.n	8016622 <xPortStartScheduler+0x56>
 8016602:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016604:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016608:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801660a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801660c:	005b      	lsls	r3, r3, #1
 801660e:	b2db      	uxtb	r3, r3
 8016610:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016614:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016618:	061b      	lsls	r3, r3, #24
 801661a:	d4f3      	bmi.n	8016604 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801661c:	2903      	cmp	r1, #3
 801661e:	d00b      	beq.n	8016638 <xPortStartScheduler+0x6c>
 8016620:	6001      	str	r1, [r0, #0]
	__asm volatile
 8016622:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016626:	b672      	cpsid	i
 8016628:	f383 8811 	msr	BASEPRI, r3
 801662c:	f3bf 8f6f 	isb	sy
 8016630:	f3bf 8f4f 	dsb	sy
 8016634:	b662      	cpsie	i
 8016636:	e7fe      	b.n	8016636 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016638:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801663a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801663e:	4a14      	ldr	r2, [pc, #80]	; (8016690 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016640:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016644:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8016646:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016648:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801664a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801664c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8016650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016654:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016658:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 801665c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016660:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8016664:	f7ff ff9e 	bl	80165a4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8016668:	4b0c      	ldr	r3, [pc, #48]	; (801669c <xPortStartScheduler+0xd0>)
 801666a:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801666c:	f7ff feba 	bl	80163e4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016670:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8016674:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016678:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 801667c:	f7ff fe9e 	bl	80163bc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8016680:	f7ff f916 	bl	80158b0 <vTaskSwitchContext>
}
 8016684:	4628      	mov	r0, r5
	prvTaskExitError();
 8016686:	f7ff feb7 	bl	80163f8 <prvTaskExitError>
}
 801668a:	b003      	add	sp, #12
 801668c:	bd30      	pop	{r4, r5, pc}
 801668e:	bf00      	nop
 8016690:	e000e400 	.word	0xe000e400
 8016694:	2000618c 	.word	0x2000618c
 8016698:	20006188 	.word	0x20006188
 801669c:	20000408 	.word	0x20000408

080166a0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80166a0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80166a4:	2b0f      	cmp	r3, #15
 80166a6:	d910      	bls.n	80166ca <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80166a8:	4913      	ldr	r1, [pc, #76]	; (80166f8 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80166aa:	4a14      	ldr	r2, [pc, #80]	; (80166fc <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80166ac:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80166ae:	7812      	ldrb	r2, [r2, #0]
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d90a      	bls.n	80166ca <vPortValidateInterruptPriority+0x2a>
 80166b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166b8:	b672      	cpsid	i
 80166ba:	f383 8811 	msr	BASEPRI, r3
 80166be:	f3bf 8f6f 	isb	sy
 80166c2:	f3bf 8f4f 	dsb	sy
 80166c6:	b662      	cpsie	i
 80166c8:	e7fe      	b.n	80166c8 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80166ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80166ce:	4a0c      	ldr	r2, [pc, #48]	; (8016700 <vPortValidateInterruptPriority+0x60>)
 80166d0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80166d4:	6812      	ldr	r2, [r2, #0]
 80166d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80166da:	4293      	cmp	r3, r2
 80166dc:	d90a      	bls.n	80166f4 <vPortValidateInterruptPriority+0x54>
 80166de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166e2:	b672      	cpsid	i
 80166e4:	f383 8811 	msr	BASEPRI, r3
 80166e8:	f3bf 8f6f 	isb	sy
 80166ec:	f3bf 8f4f 	dsb	sy
 80166f0:	b662      	cpsie	i
 80166f2:	e7fe      	b.n	80166f2 <vPortValidateInterruptPriority+0x52>
	}
 80166f4:	4770      	bx	lr
 80166f6:	bf00      	nop
 80166f8:	e000e3f0 	.word	0xe000e3f0
 80166fc:	20006188 	.word	0x20006188
 8016700:	2000618c 	.word	0x2000618c

08016704 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016704:	4b16      	ldr	r3, [pc, #88]	; (8016760 <prvInsertBlockIntoFreeList+0x5c>)
{
 8016706:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016708:	461a      	mov	r2, r3
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	4283      	cmp	r3, r0
 801670e:	d3fb      	bcc.n	8016708 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016710:	6851      	ldr	r1, [r2, #4]
 8016712:	eb02 0c01 	add.w	ip, r2, r1
 8016716:	4560      	cmp	r0, ip
 8016718:	d00b      	beq.n	8016732 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801671a:	6841      	ldr	r1, [r0, #4]
 801671c:	eb00 0c01 	add.w	ip, r0, r1
 8016720:	4563      	cmp	r3, ip
 8016722:	d00e      	beq.n	8016742 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016724:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016726:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016728:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801672c:	bf18      	it	ne
 801672e:	6010      	strne	r0, [r2, #0]
}
 8016730:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016732:	6844      	ldr	r4, [r0, #4]
 8016734:	4610      	mov	r0, r2
 8016736:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016738:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801673c:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801673e:	4563      	cmp	r3, ip
 8016740:	d1f0      	bne.n	8016724 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016742:	4c08      	ldr	r4, [pc, #32]	; (8016764 <prvInsertBlockIntoFreeList+0x60>)
 8016744:	6824      	ldr	r4, [r4, #0]
 8016746:	42a3      	cmp	r3, r4
 8016748:	d0ec      	beq.n	8016724 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 801674a:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801674c:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016750:	4421      	add	r1, r4
}
 8016752:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016756:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801675a:	bf18      	it	ne
 801675c:	6010      	strne	r0, [r2, #0]
}
 801675e:	4770      	bx	lr
 8016760:	2001e1a0 	.word	0x2001e1a0
 8016764:	20006190 	.word	0x20006190

08016768 <pvPortMalloc>:
{
 8016768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801676c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801676e:	f7fe fefd 	bl	801556c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8016772:	f8df c128 	ldr.w	ip, [pc, #296]	; 801689c <pvPortMalloc+0x134>
 8016776:	f8dc 3000 	ldr.w	r3, [ip]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d05d      	beq.n	801683a <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801677e:	4b42      	ldr	r3, [pc, #264]	; (8016888 <pvPortMalloc+0x120>)
 8016780:	681d      	ldr	r5, [r3, #0]
 8016782:	422c      	tst	r4, r5
 8016784:	d130      	bne.n	80167e8 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 8016786:	b37c      	cbz	r4, 80167e8 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016788:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 801678a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801678e:	d002      	beq.n	8016796 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016790:	f021 0107 	bic.w	r1, r1, #7
 8016794:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016796:	b339      	cbz	r1, 80167e8 <pvPortMalloc+0x80>
 8016798:	4f3c      	ldr	r7, [pc, #240]	; (801688c <pvPortMalloc+0x124>)
 801679a:	683e      	ldr	r6, [r7, #0]
 801679c:	428e      	cmp	r6, r1
 801679e:	d323      	bcc.n	80167e8 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 80167a0:	483b      	ldr	r0, [pc, #236]	; (8016890 <pvPortMalloc+0x128>)
 80167a2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80167a4:	e003      	b.n	80167ae <pvPortMalloc+0x46>
 80167a6:	6823      	ldr	r3, [r4, #0]
 80167a8:	b123      	cbz	r3, 80167b4 <pvPortMalloc+0x4c>
 80167aa:	4620      	mov	r0, r4
 80167ac:	461c      	mov	r4, r3
 80167ae:	6862      	ldr	r2, [r4, #4]
 80167b0:	428a      	cmp	r2, r1
 80167b2:	d3f8      	bcc.n	80167a6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80167b4:	f8dc 3000 	ldr.w	r3, [ip]
 80167b8:	42a3      	cmp	r3, r4
 80167ba:	d015      	beq.n	80167e8 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80167bc:	6803      	ldr	r3, [r0, #0]
 80167be:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80167c2:	6823      	ldr	r3, [r4, #0]
 80167c4:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80167c6:	1a53      	subs	r3, r2, r1
 80167c8:	2b10      	cmp	r3, #16
 80167ca:	d91b      	bls.n	8016804 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80167cc:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80167ce:	0742      	lsls	r2, r0, #29
 80167d0:	d013      	beq.n	80167fa <pvPortMalloc+0x92>
 80167d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80167d6:	b672      	cpsid	i
 80167d8:	f383 8811 	msr	BASEPRI, r3
 80167dc:	f3bf 8f6f 	isb	sy
 80167e0:	f3bf 8f4f 	dsb	sy
 80167e4:	b662      	cpsie	i
 80167e6:	e7fe      	b.n	80167e6 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 80167e8:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 80167ec:	f7ff f81a 	bl	8015824 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80167f0:	f7ea f9ea 	bl	8000bc8 <vApplicationMallocFailedHook>
}
 80167f4:	4640      	mov	r0, r8
 80167f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80167fa:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80167fc:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80167fe:	f7ff ff81 	bl	8016704 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016802:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016804:	4b23      	ldr	r3, [pc, #140]	; (8016894 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016806:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016808:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801680a:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801680c:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801680e:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016810:	bf38      	it	cc
 8016812:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8016814:	2300      	movs	r3, #0
 8016816:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 801681a:	f7ff f803 	bl	8015824 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801681e:	f018 0f07 	tst.w	r8, #7
 8016822:	d0e7      	beq.n	80167f4 <pvPortMalloc+0x8c>
 8016824:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016828:	b672      	cpsid	i
 801682a:	f383 8811 	msr	BASEPRI, r3
 801682e:	f3bf 8f6f 	isb	sy
 8016832:	f3bf 8f4f 	dsb	sy
 8016836:	b662      	cpsie	i
 8016838:	e7fe      	b.n	8016838 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 801683a:	4b17      	ldr	r3, [pc, #92]	; (8016898 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801683c:	075d      	lsls	r5, r3, #29
 801683e:	d11b      	bne.n	8016878 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016840:	461a      	mov	r2, r3
 8016842:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8016846:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8016848:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 801684a:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801684c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016850:	f023 0307 	bic.w	r3, r3, #7
}
 8016854:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016856:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8016858:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 801685c:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016860:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016864:	4b0a      	ldr	r3, [pc, #40]	; (8016890 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 8016866:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801686a:	4b0a      	ldr	r3, [pc, #40]	; (8016894 <pvPortMalloc+0x12c>)
 801686c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801686e:	4b07      	ldr	r3, [pc, #28]	; (801688c <pvPortMalloc+0x124>)
 8016870:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016872:	4b05      	ldr	r3, [pc, #20]	; (8016888 <pvPortMalloc+0x120>)
 8016874:	601e      	str	r6, [r3, #0]
}
 8016876:	e784      	b.n	8016782 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016878:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801687a:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 801687e:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016882:	4610      	mov	r0, r2
 8016884:	e7e0      	b.n	8016848 <pvPortMalloc+0xe0>
 8016886:	bf00      	nop
 8016888:	2001e194 	.word	0x2001e194
 801688c:	2001e198 	.word	0x2001e198
 8016890:	2001e1a0 	.word	0x2001e1a0
 8016894:	2001e19c 	.word	0x2001e19c
 8016898:	20006194 	.word	0x20006194
 801689c:	20006190 	.word	0x20006190

080168a0 <vPortFree>:
	if( pv != NULL )
 80168a0:	b1f0      	cbz	r0, 80168e0 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80168a2:	4a1c      	ldr	r2, [pc, #112]	; (8016914 <vPortFree+0x74>)
 80168a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80168a8:	6812      	ldr	r2, [r2, #0]
 80168aa:	4213      	tst	r3, r2
 80168ac:	d00d      	beq.n	80168ca <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80168ae:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80168b2:	b1b1      	cbz	r1, 80168e2 <vPortFree+0x42>
 80168b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80168b8:	b672      	cpsid	i
 80168ba:	f383 8811 	msr	BASEPRI, r3
 80168be:	f3bf 8f6f 	isb	sy
 80168c2:	f3bf 8f4f 	dsb	sy
 80168c6:	b662      	cpsie	i
 80168c8:	e7fe      	b.n	80168c8 <vPortFree+0x28>
 80168ca:	f04f 0330 	mov.w	r3, #48	; 0x30
 80168ce:	b672      	cpsid	i
 80168d0:	f383 8811 	msr	BASEPRI, r3
 80168d4:	f3bf 8f6f 	isb	sy
 80168d8:	f3bf 8f4f 	dsb	sy
 80168dc:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80168de:	e7fe      	b.n	80168de <vPortFree+0x3e>
 80168e0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80168e2:	ea23 0302 	bic.w	r3, r3, r2
{
 80168e6:	b500      	push	{lr}
 80168e8:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80168ea:	f840 3c04 	str.w	r3, [r0, #-4]
 80168ee:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80168f0:	f7fe fe3c 	bl	801556c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80168f4:	4a08      	ldr	r2, [pc, #32]	; (8016918 <vPortFree+0x78>)
 80168f6:	9801      	ldr	r0, [sp, #4]
 80168f8:	6811      	ldr	r1, [r2, #0]
 80168fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80168fe:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016900:	440b      	add	r3, r1
 8016902:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016904:	f7ff fefe 	bl	8016704 <prvInsertBlockIntoFreeList>
}
 8016908:	b003      	add	sp, #12
 801690a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 801690e:	f7fe bf89 	b.w	8015824 <xTaskResumeAll>
 8016912:	bf00      	nop
 8016914:	2001e194 	.word	0x2001e194
 8016918:	2001e198 	.word	0x2001e198

0801691c <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 801691c:	f003 bb58 	b.w	8019fd0 <pbuf_free>

08016920 <tcpip_thread>:
{
 8016920:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8016922:	4839      	ldr	r0, [pc, #228]	; (8016a08 <tcpip_thread+0xe8>)
{
 8016924:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8016926:	f00c f97d 	bl	8022c24 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801692a:	4b38      	ldr	r3, [pc, #224]	; (8016a0c <tcpip_thread+0xec>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	b113      	cbz	r3, 8016936 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8016930:	4a37      	ldr	r2, [pc, #220]	; (8016a10 <tcpip_thread+0xf0>)
 8016932:	6810      	ldr	r0, [r2, #0]
 8016934:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8016936:	4d34      	ldr	r5, [pc, #208]	; (8016a08 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016938:	4e36      	ldr	r6, [pc, #216]	; (8016a14 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801693a:	4f37      	ldr	r7, [pc, #220]	; (8016a18 <tcpip_thread+0xf8>)
 801693c:	e010      	b.n	8016960 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 801693e:	b168      	cbz	r0, 801695c <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8016940:	4628      	mov	r0, r5
 8016942:	f00c f975 	bl	8022c30 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016946:	4622      	mov	r2, r4
 8016948:	a901      	add	r1, sp, #4
 801694a:	4630      	mov	r0, r6
 801694c:	f00c f910 	bl	8022b70 <sys_arch_mbox_fetch>
 8016950:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8016952:	4628      	mov	r0, r5
 8016954:	f00c f966 	bl	8022c24 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016958:	3401      	adds	r4, #1
 801695a:	d111      	bne.n	8016980 <tcpip_thread+0x60>
    sys_check_timeouts();
 801695c:	f008 f962 	bl	801ec24 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8016960:	f008 f988 	bl	801ec74 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016964:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8016966:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016968:	d1e9      	bne.n	801693e <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 801696a:	4628      	mov	r0, r5
 801696c:	f00c f960 	bl	8022c30 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016970:	2200      	movs	r2, #0
 8016972:	a901      	add	r1, sp, #4
 8016974:	4630      	mov	r0, r6
 8016976:	f00c f8fb 	bl	8022b70 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801697a:	4628      	mov	r0, r5
 801697c:	f00c f952 	bl	8022c24 <sys_mutex_lock>
    if (msg == NULL) {
 8016980:	9c01      	ldr	r4, [sp, #4]
 8016982:	b37c      	cbz	r4, 80169e4 <tcpip_thread+0xc4>
  switch (msg->type) {
 8016984:	7823      	ldrb	r3, [r4, #0]
 8016986:	2b04      	cmp	r3, #4
 8016988:	d837      	bhi.n	80169fa <tcpip_thread+0xda>
 801698a:	e8df f003 	tbb	[pc, r3]
 801698e:	1821      	.short	0x1821
 8016990:	070f      	.short	0x070f
 8016992:	03          	.byte	0x03
 8016993:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016994:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8016998:	4798      	blx	r3
      break;
 801699a:	e7e1      	b.n	8016960 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 801699c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80169a0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80169a2:	4621      	mov	r1, r4
 80169a4:	2009      	movs	r0, #9
 80169a6:	f002 fe17 	bl	80195d8 <memp_free>
      break;
 80169aa:	e7d9      	b.n	8016960 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 80169ac:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80169b0:	f008 f91a 	bl	801ebe8 <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80169b4:	4621      	mov	r1, r4
 80169b6:	2009      	movs	r0, #9
 80169b8:	f002 fe0e 	bl	80195d8 <memp_free>
      break;
 80169bc:	e7d0      	b.n	8016960 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 80169be:	1d20      	adds	r0, r4, #4
 80169c0:	c807      	ldmia	r0, {r0, r1, r2}
 80169c2:	f008 f8f3 	bl	801ebac <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80169c6:	4621      	mov	r1, r4
 80169c8:	2009      	movs	r0, #9
 80169ca:	f002 fe05 	bl	80195d8 <memp_free>
      break;
 80169ce:	e7c7      	b.n	8016960 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80169d0:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80169d4:	6860      	ldr	r0, [r4, #4]
 80169d6:	4798      	blx	r3
 80169d8:	b958      	cbnz	r0, 80169f2 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80169da:	4621      	mov	r1, r4
 80169dc:	200a      	movs	r0, #10
 80169de:	f002 fdfb 	bl	80195d8 <memp_free>
      break;
 80169e2:	e7bd      	b.n	8016960 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80169e4:	463b      	mov	r3, r7
 80169e6:	2291      	movs	r2, #145	; 0x91
 80169e8:	490c      	ldr	r1, [pc, #48]	; (8016a1c <tcpip_thread+0xfc>)
 80169ea:	480d      	ldr	r0, [pc, #52]	; (8016a20 <tcpip_thread+0x100>)
 80169ec:	f00d fd66 	bl	80244bc <iprintf>
      continue;
 80169f0:	e7b6      	b.n	8016960 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 80169f2:	6860      	ldr	r0, [r4, #4]
 80169f4:	f003 faec 	bl	8019fd0 <pbuf_free>
 80169f8:	e7ef      	b.n	80169da <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80169fa:	463b      	mov	r3, r7
 80169fc:	22cf      	movs	r2, #207	; 0xcf
 80169fe:	4907      	ldr	r1, [pc, #28]	; (8016a1c <tcpip_thread+0xfc>)
 8016a00:	4807      	ldr	r0, [pc, #28]	; (8016a20 <tcpip_thread+0x100>)
 8016a02:	f00d fd5b 	bl	80244bc <iprintf>
      break;
 8016a06:	e7ab      	b.n	8016960 <tcpip_thread+0x40>
 8016a08:	2001e1a8 	.word	0x2001e1a8
 8016a0c:	2001e1ac 	.word	0x2001e1ac
 8016a10:	2001e1b0 	.word	0x2001e1b0
 8016a14:	2001e1b4 	.word	0x2001e1b4
 8016a18:	0802b310 	.word	0x0802b310
 8016a1c:	0802b340 	.word	0x0802b340
 8016a20:	0802ac68 	.word	0x0802ac68

08016a24 <tcpip_inpkt>:
{
 8016a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a26:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016a28:	4814      	ldr	r0, [pc, #80]	; (8016a7c <tcpip_inpkt+0x58>)
{
 8016a2a:	460e      	mov	r6, r1
 8016a2c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016a2e:	f00c f8c1 	bl	8022bb4 <sys_mbox_valid>
 8016a32:	b188      	cbz	r0, 8016a58 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8016a34:	22fe      	movs	r2, #254	; 0xfe
 8016a36:	4912      	ldr	r1, [pc, #72]	; (8016a80 <tcpip_inpkt+0x5c>)
 8016a38:	200a      	movs	r0, #10
 8016a3a:	f002 fd89 	bl	8019550 <memp_malloc_fn>
  if (msg == NULL) {
 8016a3e:	4604      	mov	r4, r0
 8016a40:	b1c0      	cbz	r0, 8016a74 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8016a42:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8016a44:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8016a46:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016a48:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8016a4a:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016a4c:	480b      	ldr	r0, [pc, #44]	; (8016a7c <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 8016a4e:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016a50:	f00c f87c 	bl	8022b4c <sys_mbox_trypost>
 8016a54:	b938      	cbnz	r0, 8016a66 <tcpip_inpkt+0x42>
}
 8016a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016a58:	4b09      	ldr	r3, [pc, #36]	; (8016a80 <tcpip_inpkt+0x5c>)
 8016a5a:	22fc      	movs	r2, #252	; 0xfc
 8016a5c:	4909      	ldr	r1, [pc, #36]	; (8016a84 <tcpip_inpkt+0x60>)
 8016a5e:	480a      	ldr	r0, [pc, #40]	; (8016a88 <tcpip_inpkt+0x64>)
 8016a60:	f00d fd2c 	bl	80244bc <iprintf>
 8016a64:	e7e6      	b.n	8016a34 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016a66:	4621      	mov	r1, r4
 8016a68:	200a      	movs	r0, #10
 8016a6a:	f002 fdb5 	bl	80195d8 <memp_free>
    return ERR_MEM;
 8016a6e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8016a74:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a7a:	bf00      	nop
 8016a7c:	2001e1b4 	.word	0x2001e1b4
 8016a80:	0802b310 	.word	0x0802b310
 8016a84:	0802b360 	.word	0x0802b360
 8016a88:	0802ac68 	.word	0x0802ac68

08016a8c <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8016a8c:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8016a90:	f013 0f18 	tst.w	r3, #24
 8016a94:	d002      	beq.n	8016a9c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016a96:	4a03      	ldr	r2, [pc, #12]	; (8016aa4 <tcpip_input+0x18>)
 8016a98:	f7ff bfc4 	b.w	8016a24 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 8016a9c:	4a02      	ldr	r2, [pc, #8]	; (8016aa8 <tcpip_input+0x1c>)
 8016a9e:	f7ff bfc1 	b.w	8016a24 <tcpip_inpkt>
 8016aa2:	bf00      	nop
 8016aa4:	080229c1 	.word	0x080229c1
 8016aa8:	08021b35 	.word	0x08021b35

08016aac <tcpip_try_callback>:
{
 8016aac:	b570      	push	{r4, r5, r6, lr}
 8016aae:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016ab0:	4814      	ldr	r0, [pc, #80]	; (8016b04 <tcpip_try_callback+0x58>)
{
 8016ab2:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016ab4:	f00c f87e 	bl	8022bb4 <sys_mbox_valid>
 8016ab8:	b188      	cbz	r0, 8016ade <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8016aba:	f240 125f 	movw	r2, #351	; 0x15f
 8016abe:	4912      	ldr	r1, [pc, #72]	; (8016b08 <tcpip_try_callback+0x5c>)
 8016ac0:	2009      	movs	r0, #9
 8016ac2:	f002 fd45 	bl	8019550 <memp_malloc_fn>
  if (msg == NULL) {
 8016ac6:	4604      	mov	r4, r0
 8016ac8:	b1c0      	cbz	r0, 8016afc <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 8016aca:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016acc:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8016ace:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016ad2:	480c      	ldr	r0, [pc, #48]	; (8016b04 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 8016ad4:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016ad6:	f00c f839 	bl	8022b4c <sys_mbox_trypost>
 8016ada:	b940      	cbnz	r0, 8016aee <tcpip_try_callback+0x42>
}
 8016adc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016ade:	4b0a      	ldr	r3, [pc, #40]	; (8016b08 <tcpip_try_callback+0x5c>)
 8016ae0:	f240 125d 	movw	r2, #349	; 0x15d
 8016ae4:	4909      	ldr	r1, [pc, #36]	; (8016b0c <tcpip_try_callback+0x60>)
 8016ae6:	480a      	ldr	r0, [pc, #40]	; (8016b10 <tcpip_try_callback+0x64>)
 8016ae8:	f00d fce8 	bl	80244bc <iprintf>
 8016aec:	e7e5      	b.n	8016aba <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8016aee:	4621      	mov	r1, r4
 8016af0:	2009      	movs	r0, #9
 8016af2:	f002 fd71 	bl	80195d8 <memp_free>
    return ERR_MEM;
 8016af6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016afa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8016afc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016b00:	bd70      	pop	{r4, r5, r6, pc}
 8016b02:	bf00      	nop
 8016b04:	2001e1b4 	.word	0x2001e1b4
 8016b08:	0802b310 	.word	0x0802b310
 8016b0c:	0802b360 	.word	0x0802b360
 8016b10:	0802ac68 	.word	0x0802ac68

08016b14 <tcpip_init>:
{
 8016b14:	b530      	push	{r4, r5, lr}
 8016b16:	b083      	sub	sp, #12
 8016b18:	4605      	mov	r5, r0
 8016b1a:	460c      	mov	r4, r1
  lwip_init();
 8016b1c:	f001 ffae 	bl	8018a7c <lwip_init>
  tcpip_init_done = initfunc;
 8016b20:	4a15      	ldr	r2, [pc, #84]	; (8016b78 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016b22:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8016b24:	4b15      	ldr	r3, [pc, #84]	; (8016b7c <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016b26:	4816      	ldr	r0, [pc, #88]	; (8016b80 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8016b28:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8016b2a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016b2c:	f00b ffe8 	bl	8022b00 <sys_mbox_new>
 8016b30:	b968      	cbnz	r0, 8016b4e <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016b32:	4814      	ldr	r0, [pc, #80]	; (8016b84 <tcpip_init+0x70>)
 8016b34:	f00c f850 	bl	8022bd8 <sys_mutex_new>
 8016b38:	b9a8      	cbnz	r0, 8016b66 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b40:	4911      	ldr	r1, [pc, #68]	; (8016b88 <tcpip_init+0x74>)
 8016b42:	9200      	str	r2, [sp, #0]
 8016b44:	4811      	ldr	r0, [pc, #68]	; (8016b8c <tcpip_init+0x78>)
 8016b46:	f00c f877 	bl	8022c38 <sys_thread_new>
}
 8016b4a:	b003      	add	sp, #12
 8016b4c:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016b4e:	4b10      	ldr	r3, [pc, #64]	; (8016b90 <tcpip_init+0x7c>)
 8016b50:	f240 2261 	movw	r2, #609	; 0x261
 8016b54:	490f      	ldr	r1, [pc, #60]	; (8016b94 <tcpip_init+0x80>)
 8016b56:	4810      	ldr	r0, [pc, #64]	; (8016b98 <tcpip_init+0x84>)
 8016b58:	f00d fcb0 	bl	80244bc <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016b5c:	4809      	ldr	r0, [pc, #36]	; (8016b84 <tcpip_init+0x70>)
 8016b5e:	f00c f83b 	bl	8022bd8 <sys_mutex_new>
 8016b62:	2800      	cmp	r0, #0
 8016b64:	d0e9      	beq.n	8016b3a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8016b66:	4b0a      	ldr	r3, [pc, #40]	; (8016b90 <tcpip_init+0x7c>)
 8016b68:	f240 2265 	movw	r2, #613	; 0x265
 8016b6c:	490b      	ldr	r1, [pc, #44]	; (8016b9c <tcpip_init+0x88>)
 8016b6e:	480a      	ldr	r0, [pc, #40]	; (8016b98 <tcpip_init+0x84>)
 8016b70:	f00d fca4 	bl	80244bc <iprintf>
 8016b74:	e7e1      	b.n	8016b3a <tcpip_init+0x26>
 8016b76:	bf00      	nop
 8016b78:	2001e1ac 	.word	0x2001e1ac
 8016b7c:	2001e1b0 	.word	0x2001e1b0
 8016b80:	2001e1b4 	.word	0x2001e1b4
 8016b84:	2001e1a8 	.word	0x2001e1a8
 8016b88:	08016921 	.word	0x08016921
 8016b8c:	0802b3b8 	.word	0x0802b3b8
 8016b90:	0802b310 	.word	0x0802b310
 8016b94:	0802b370 	.word	0x0802b370
 8016b98:	0802ac68 	.word	0x0802ac68
 8016b9c:	0802b394 	.word	0x0802b394

08016ba0 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8016ba0:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8016ba2:	4801      	ldr	r0, [pc, #4]	; (8016ba8 <pbuf_free_callback+0x8>)
 8016ba4:	f7ff bf82 	b.w	8016aac <tcpip_try_callback>
 8016ba8:	0801691d 	.word	0x0801691d

08016bac <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8016bac:	b1e8      	cbz	r0, 8016bea <fs_open+0x3e>
{
 8016bae:	b570      	push	{r4, r5, r6, lr}
 8016bb0:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8016bb2:	b1b9      	cbz	r1, 8016be4 <fs_open+0x38>
 8016bb4:	4606      	mov	r6, r0
 8016bb6:	490e      	ldr	r1, [pc, #56]	; (8016bf0 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8016bb8:	4c0e      	ldr	r4, [pc, #56]	; (8016bf4 <fs_open+0x48>)
 8016bba:	e000      	b.n	8016bbe <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 8016bbc:	6861      	ldr	r1, [r4, #4]
 8016bbe:	4628      	mov	r0, r5
 8016bc0:	f7e9 fb3e 	bl	8000240 <strcmp>
 8016bc4:	b128      	cbz	r0, 8016bd2 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8016bc6:	6824      	ldr	r4, [r4, #0]
 8016bc8:	2c00      	cmp	r4, #0
 8016bca:	d1f7      	bne.n	8016bbc <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8016bcc:	f06f 0005 	mvn.w	r0, #5
}
 8016bd0:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8016bd2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 8016bd6:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 8016bd8:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 8016bda:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 8016bde:	7c23      	ldrb	r3, [r4, #16]
 8016be0:	7433      	strb	r3, [r6, #16]
}
 8016be2:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8016be4:	f06f 000f 	mvn.w	r0, #15
}
 8016be8:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8016bea:	f06f 000f 	mvn.w	r0, #15
}
 8016bee:	4770      	bx	lr
 8016bf0:	080db658 	.word	0x080db658
 8016bf4:	080df448 	.word	0x080df448

08016bf8 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8016bf8:	4770      	bx	lr
 8016bfa:	bf00      	nop

08016bfc <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8016bfc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8016c00:	1a10      	subs	r0, r2, r0
 8016c02:	4770      	bx	lr

08016c04 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8016c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8016c08:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 8016c0a:	b374      	cbz	r4, 8016c6a <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8016c0c:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 8016c10:	4617      	mov	r7, r2
 8016c12:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8016c16:	4605      	mov	r5, r0
 8016c18:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8016c1c:	460e      	mov	r6, r1
 8016c1e:	4698      	mov	r8, r3
 8016c20:	fa1f fc8c 	uxth.w	ip, ip
 8016c24:	4594      	cmp	ip, r2
 8016c26:	bf28      	it	cs
 8016c28:	4694      	movcs	ip, r2
 8016c2a:	4564      	cmp	r4, ip
 8016c2c:	bf28      	it	cs
 8016c2e:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8016c30:	4643      	mov	r3, r8
 8016c32:	4622      	mov	r2, r4
 8016c34:	4631      	mov	r1, r6
 8016c36:	4628      	mov	r0, r5
 8016c38:	f006 fdd8 	bl	801d7ec <tcp_write>
    if (err == ERR_MEM) {
 8016c3c:	1c43      	adds	r3, r0, #1
 8016c3e:	d007      	beq.n	8016c50 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8016c40:	b970      	cbnz	r0, 8016c60 <http_write+0x5c>
 8016c42:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8016c44:	8b6b      	ldrh	r3, [r5, #26]
 8016c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016c4a:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 8016c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 8016c50:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8016c54:	b123      	cbz	r3, 8016c60 <http_write+0x5c>
 8016c56:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 8016c5a:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 8016c5c:	2b08      	cmp	r3, #8
 8016c5e:	d901      	bls.n	8016c64 <http_write+0x60>
    *length = 0;
 8016c60:	2400      	movs	r4, #0
 8016c62:	e7ee      	b.n	8016c42 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 8016c64:	2c01      	cmp	r4, #1
 8016c66:	d8e3      	bhi.n	8016c30 <http_write+0x2c>
 8016c68:	e7fa      	b.n	8016c60 <http_write+0x5c>
    return ERR_OK;
 8016c6a:	4620      	mov	r0, r4
}
 8016c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c70 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8016c70:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 8016c72:	4b0e      	ldr	r3, [pc, #56]	; (8016cac <http_get_404_file+0x3c>)
{
 8016c74:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8016c76:	4604      	mov	r4, r0
 8016c78:	4619      	mov	r1, r3
  *uri = "/404.html";
 8016c7a:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8016c7c:	f7ff ff96 	bl	8016bac <fs_open>
  if (err != ERR_OK) {
 8016c80:	b908      	cbnz	r0, 8016c86 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 8016c82:	4620      	mov	r0, r4
 8016c84:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8016c86:	490a      	ldr	r1, [pc, #40]	; (8016cb0 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8016c88:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8016c8a:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8016c8c:	f7ff ff8e 	bl	8016bac <fs_open>
    if (err != ERR_OK) {
 8016c90:	2800      	cmp	r0, #0
 8016c92:	d0f6      	beq.n	8016c82 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8016c94:	4907      	ldr	r1, [pc, #28]	; (8016cb4 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8016c96:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8016c98:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8016c9a:	f7ff ff87 	bl	8016bac <fs_open>
      if (err != ERR_OK) {
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	d0ef      	beq.n	8016c82 <http_get_404_file+0x12>
        *uri = NULL;
 8016ca2:	2300      	movs	r3, #0
        return NULL;
 8016ca4:	461c      	mov	r4, r3
        *uri = NULL;
 8016ca6:	602b      	str	r3, [r5, #0]
        return NULL;
 8016ca8:	e7eb      	b.n	8016c82 <http_get_404_file+0x12>
 8016caa:	bf00      	nop
 8016cac:	080df45c 	.word	0x080df45c
 8016cb0:	080df468 	.word	0x080df468
 8016cb4:	080df474 	.word	0x080df474

08016cb8 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8016cb8:	bb82      	cbnz	r2, 8016d1c <http_accept+0x64>
{
 8016cba:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8016cbc:	fab1 f581 	clz	r5, r1
 8016cc0:	460c      	mov	r4, r1
 8016cc2:	096d      	lsrs	r5, r5, #5
 8016cc4:	b339      	cbz	r1, 8016d16 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8016cc6:	2101      	movs	r1, #1
 8016cc8:	4620      	mov	r0, r4
 8016cca:	f003 feff 	bl	801aacc <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8016cce:	2034      	movs	r0, #52	; 0x34
 8016cd0:	f002 fa70 	bl	80191b4 <mem_malloc>
  if (ret != NULL) {
 8016cd4:	4606      	mov	r6, r0
 8016cd6:	b1d8      	cbz	r0, 8016d10 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8016cd8:	2234      	movs	r2, #52	; 0x34
 8016cda:	4629      	mov	r1, r5
 8016cdc:	f00c fc52 	bl	8023584 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8016ce0:	4631      	mov	r1, r6
 8016ce2:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8016ce4:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8016ce6:	f003 ff27 	bl	801ab38 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8016cea:	4620      	mov	r0, r4
 8016cec:	490d      	ldr	r1, [pc, #52]	; (8016d24 <http_accept+0x6c>)
 8016cee:	f003 ff27 	bl	801ab40 <tcp_recv>
  altcp_err(pcb, http_err);
 8016cf2:	4620      	mov	r0, r4
 8016cf4:	490c      	ldr	r1, [pc, #48]	; (8016d28 <http_accept+0x70>)
 8016cf6:	f003 ff5b 	bl	801abb0 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8016cfa:	2204      	movs	r2, #4
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	490b      	ldr	r1, [pc, #44]	; (8016d2c <http_accept+0x74>)
 8016d00:	f003 ff78 	bl	801abf4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8016d04:	4620      	mov	r0, r4
 8016d06:	490a      	ldr	r1, [pc, #40]	; (8016d30 <http_accept+0x78>)
 8016d08:	f003 ff36 	bl	801ab78 <tcp_sent>

  return ERR_OK;
 8016d0c:	4628      	mov	r0, r5
}
 8016d0e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8016d10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016d14:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8016d16:	f06f 0005 	mvn.w	r0, #5
}
 8016d1a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8016d1c:	f06f 0005 	mvn.w	r0, #5
}
 8016d20:	4770      	bx	lr
 8016d22:	bf00      	nop
 8016d24:	08017991 	.word	0x08017991
 8016d28:	08017279 	.word	0x08017279
 8016d2c:	08017939 	.word	0x08017939
 8016d30:	08017921 	.word	0x08017921

08016d34 <http_init_file>:
{
 8016d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d38:	b087      	sub	sp, #28
 8016d3a:	4604      	mov	r4, r0
  if (file != NULL) {
 8016d3c:	460e      	mov	r6, r1
{
 8016d3e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8016d42:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016d44:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 8016d48:	2900      	cmp	r1, #0
 8016d4a:	f000 80aa 	beq.w	8016ea2 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8016d4e:	680b      	ldr	r3, [r1, #0]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	f000 80ac 	beq.w	8016eae <http_init_file+0x17a>
    if (tag_check) {
 8016d56:	2f00      	cmp	r7, #0
 8016d58:	d16f      	bne.n	8016e3a <http_init_file+0x106>
    hs->handle = file;
 8016d5a:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8016d5c:	2d00      	cmp	r5, #0
 8016d5e:	d04f      	beq.n	8016e00 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 8016d60:	782b      	ldrb	r3, [r5, #0]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	f000 80c0 	beq.w	8016ee8 <http_init_file+0x1b4>
 8016d68:	4b61      	ldr	r3, [pc, #388]	; (8016ef0 <http_init_file+0x1bc>)
 8016d6a:	2701      	movs	r7, #1
 8016d6c:	9405      	str	r4, [sp, #20]
 8016d6e:	462c      	mov	r4, r5
 8016d70:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8016ef4 <http_init_file+0x1c0>
 8016d74:	4698      	mov	r8, r3
 8016d76:	9304      	str	r3, [sp, #16]
 8016d78:	e017      	b.n	8016daa <http_init_file+0x76>
 8016d7a:	2d0e      	cmp	r5, #14
      *pair = '\0';
 8016d7c:	f04f 0300 	mov.w	r3, #0
 8016d80:	bfcc      	ite	gt
 8016d82:	2500      	movgt	r5, #0
 8016d84:	2501      	movle	r5, #1
 8016d86:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	213d      	movs	r1, #61	; 0x3d
 8016d8e:	f00d fdb7 	bl	8024900 <strchr>
    if (equals) {
 8016d92:	b320      	cbz	r0, 8016dde <http_init_file+0xaa>
      *equals = '\0';
 8016d94:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016d98:	f108 0804 	add.w	r8, r8, #4
 8016d9c:	3701      	adds	r7, #1
 8016d9e:	465c      	mov	r4, fp
      *equals = '\0';
 8016da0:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8016da4:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016da8:	b30d      	cbz	r5, 8016dee <http_init_file+0xba>
    pair = strchr(pair, '&');
 8016daa:	4620      	mov	r0, r4
 8016dac:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 8016dae:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 8016db2:	1e7d      	subs	r5, r7, #1
 8016db4:	f00d fda4 	bl	8024900 <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016db8:	46ba      	mov	sl, r7
    if (pair) {
 8016dba:	4683      	mov	fp, r0
 8016dbc:	2800      	cmp	r0, #0
 8016dbe:	d1dc      	bne.n	8016d7a <http_init_file+0x46>
      pair = strchr(equals, ' ');
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016dc4:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 8016dc6:	f00d fd9b 	bl	8024900 <strchr>
      if (pair) {
 8016dca:	2800      	cmp	r0, #0
 8016dcc:	d0dd      	beq.n	8016d8a <http_init_file+0x56>
        *pair = '\0';
 8016dce:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8016dd2:	213d      	movs	r1, #61	; 0x3d
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	f00d fd93 	bl	8024900 <strchr>
    if (equals) {
 8016dda:	2800      	cmp	r0, #0
 8016ddc:	d1da      	bne.n	8016d94 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 8016dde:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016de2:	3701      	adds	r7, #1
 8016de4:	f108 0804 	add.w	r8, r8, #4
 8016de8:	465c      	mov	r4, fp
 8016dea:	2d00      	cmp	r5, #0
 8016dec:	d1dd      	bne.n	8016daa <http_init_file+0x76>
 8016dee:	4652      	mov	r2, sl
 8016df0:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 8016df2:	9b04      	ldr	r3, [sp, #16]
 8016df4:	4630      	mov	r0, r6
 8016df6:	9903      	ldr	r1, [sp, #12]
 8016df8:	9300      	str	r3, [sp, #0]
 8016dfa:	4b3e      	ldr	r3, [pc, #248]	; (8016ef4 <http_init_file+0x1c0>)
 8016dfc:	f7ef fe92 	bl	8006b24 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8016e00:	e9d6 3200 	ldrd	r3, r2, [r6]
 8016e04:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8016e06:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8016e08:	db5c      	blt.n	8016ec4 <http_init_file+0x190>
    hs->retries = 0;
 8016e0a:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 8016e0c:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 8016e0e:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 8016e10:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8016e14:	7c1b      	ldrb	r3, [r3, #16]
 8016e16:	07d9      	lsls	r1, r3, #31
 8016e18:	d526      	bpl.n	8016e68 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8016e1a:	9b02      	ldr	r3, [sp, #8]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d132      	bne.n	8016e86 <http_init_file+0x152>
  if (hs->keepalive) {
 8016e20:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8016e24:	b12b      	cbz	r3, 8016e32 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 8016e26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d054      	beq.n	8016ed6 <http_init_file+0x1a2>
      hs->keepalive = 0;
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8016e32:	2000      	movs	r0, #0
 8016e34:	b007      	add	sp, #28
 8016e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8016e3a:	f44f 7090 	mov.w	r0, #288	; 0x120
 8016e3e:	f002 f9b9 	bl	80191b4 <mem_malloc>
  if (ret != NULL) {
 8016e42:	4607      	mov	r7, r0
 8016e44:	2800      	cmp	r0, #0
 8016e46:	d088      	beq.n	8016d5a <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8016e48:	f44f 7290 	mov.w	r2, #288	; 0x120
 8016e4c:	2100      	movs	r1, #0
 8016e4e:	f00c fb99 	bl	8023584 <memset>
        ssi->parsed = file->data;
 8016e52:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 8016e54:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 8016e56:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 8016e58:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 8016e5c:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 8016e5e:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8016e60:	2d00      	cmp	r5, #0
 8016e62:	f47f af7d 	bne.w	8016d60 <http_init_file+0x2c>
 8016e66:	e7cb      	b.n	8016e00 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 8016e68:	4b23      	ldr	r3, [pc, #140]	; (8016ef8 <http_init_file+0x1c4>)
 8016e6a:	f640 1243 	movw	r2, #2371	; 0x943
 8016e6e:	4923      	ldr	r1, [pc, #140]	; (8016efc <http_init_file+0x1c8>)
 8016e70:	4823      	ldr	r0, [pc, #140]	; (8016f00 <http_init_file+0x1cc>)
 8016e72:	f00d fb23 	bl	80244bc <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8016e76:	9b02      	ldr	r3, [sp, #8]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d0d1      	beq.n	8016e20 <http_init_file+0xec>
 8016e7c:	6963      	ldr	r3, [r4, #20]
 8016e7e:	7c1b      	ldrb	r3, [r3, #16]
 8016e80:	07db      	lsls	r3, r3, #31
 8016e82:	d5cd      	bpl.n	8016e20 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8016e84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016e86:	491f      	ldr	r1, [pc, #124]	; (8016f04 <http_init_file+0x1d0>)
 8016e88:	69a0      	ldr	r0, [r4, #24]
 8016e8a:	f001 f823 	bl	8017ed4 <lwip_strnstr>
      if (file_start != NULL) {
 8016e8e:	2800      	cmp	r0, #0
 8016e90:	d0c6      	beq.n	8016e20 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 8016e92:	3004      	adds	r0, #4
 8016e94:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8016e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8016e98:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 8016e9a:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8016e9c:	1a9b      	subs	r3, r3, r2
 8016e9e:	6263      	str	r3, [r4, #36]	; 0x24
 8016ea0:	e7be      	b.n	8016e20 <http_init_file+0xec>
    hs->file = NULL;
 8016ea2:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8016ea6:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8016ea8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8016eac:	e7b8      	b.n	8016e20 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8016eae:	4b12      	ldr	r3, [pc, #72]	; (8016ef8 <http_init_file+0x1c4>)
 8016eb0:	f640 120b 	movw	r2, #2315	; 0x90b
 8016eb4:	4914      	ldr	r1, [pc, #80]	; (8016f08 <http_init_file+0x1d4>)
 8016eb6:	4812      	ldr	r0, [pc, #72]	; (8016f00 <http_init_file+0x1cc>)
 8016eb8:	f00d fb00 	bl	80244bc <iprintf>
    if (tag_check) {
 8016ebc:	2f00      	cmp	r7, #0
 8016ebe:	f43f af4c 	beq.w	8016d5a <http_init_file+0x26>
 8016ec2:	e7ba      	b.n	8016e3a <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8016ec4:	f640 1234 	movw	r2, #2356	; 0x934
 8016ec8:	4b0b      	ldr	r3, [pc, #44]	; (8016ef8 <http_init_file+0x1c4>)
 8016eca:	4910      	ldr	r1, [pc, #64]	; (8016f0c <http_init_file+0x1d8>)
 8016ecc:	480c      	ldr	r0, [pc, #48]	; (8016f00 <http_init_file+0x1cc>)
 8016ece:	f00d faf5 	bl	80244bc <iprintf>
      hs->left = (u32_t)file->len;
 8016ed2:	6872      	ldr	r2, [r6, #4]
 8016ed4:	e799      	b.n	8016e0a <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 8016ed6:	6963      	ldr	r3, [r4, #20]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d0aa      	beq.n	8016e32 <http_init_file+0xfe>
 8016edc:	7c1b      	ldrb	r3, [r3, #16]
 8016ede:	f003 0303 	and.w	r3, r3, #3
 8016ee2:	2b01      	cmp	r3, #1
 8016ee4:	d1a5      	bne.n	8016e32 <http_init_file+0xfe>
 8016ee6:	e7a1      	b.n	8016e2c <http_init_file+0xf8>
    return (0);
 8016ee8:	461a      	mov	r2, r3
 8016eea:	4b01      	ldr	r3, [pc, #4]	; (8016ef0 <http_init_file+0x1bc>)
 8016eec:	9304      	str	r3, [sp, #16]
 8016eee:	e780      	b.n	8016df2 <http_init_file+0xbe>
 8016ef0:	2001e1b8 	.word	0x2001e1b8
 8016ef4:	2001e1f8 	.word	0x2001e1f8
 8016ef8:	080df480 	.word	0x080df480
 8016efc:	080df4ec 	.word	0x080df4ec
 8016f00:	0802ac68 	.word	0x0802ac68
 8016f04:	08028964 	.word	0x08028964
 8016f08:	080df4b8 	.word	0x080df4b8
 8016f0c:	080df4cc 	.word	0x080df4cc

08016f10 <http_find_file>:
{
 8016f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f14:	ed2d 8b02 	vpush	{d8}
 8016f18:	b087      	sub	sp, #28
 8016f1a:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 8016f1c:	4608      	mov	r0, r1
 8016f1e:	460c      	mov	r4, r1
{
 8016f20:	4690      	mov	r8, r2
 8016f22:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 8016f24:	f7e9 f996 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8016f28:	4606      	mov	r6, r0
 8016f2a:	b148      	cbz	r0, 8016f40 <http_find_file+0x30>
 8016f2c:	f100 39ff 	add.w	r9, r0, #4294967295
 8016f30:	f814 3009 	ldrb.w	r3, [r4, r9]
 8016f34:	2b2f      	cmp	r3, #47	; 0x2f
 8016f36:	d06a      	beq.n	801700e <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 8016f38:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 8016f3a:	f04f 0900 	mov.w	r9, #0
 8016f3e:	e001      	b.n	8016f44 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 8016f40:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 8016f42:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 8016f44:	213f      	movs	r1, #63	; 0x3f
 8016f46:	4620      	mov	r0, r4
 8016f48:	f00d fcda 	bl	8024900 <strchr>
    if (params != NULL) {
 8016f4c:	4606      	mov	r6, r0
 8016f4e:	b118      	cbz	r0, 8016f58 <http_find_file+0x48>
      *params = '\0';
 8016f50:	2300      	movs	r3, #0
 8016f52:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 8016f56:	9c05      	ldr	r4, [sp, #20]
 8016f58:	4621      	mov	r1, r4
 8016f5a:	4628      	mov	r0, r5
 8016f5c:	f7ff fe26 	bl	8016bac <fs_open>
    if (err == ERR_OK) {
 8016f60:	b9b0      	cbnz	r0, 8016f90 <http_find_file+0x80>
    if (file != NULL) {
 8016f62:	b1e7      	cbz	r7, 8016f9e <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8016f64:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8016f68:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8016f6a:	f019 0908 	ands.w	r9, r9, #8
 8016f6e:	d01d      	beq.n	8016fac <http_find_file+0x9c>
        tag_check = 1;
 8016f70:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8016f74:	4623      	mov	r3, r4
 8016f76:	4642      	mov	r2, r8
 8016f78:	4639      	mov	r1, r7
 8016f7a:	4628      	mov	r0, r5
 8016f7c:	9601      	str	r6, [sp, #4]
 8016f7e:	f8cd 9000 	str.w	r9, [sp]
 8016f82:	f7ff fed7 	bl	8016d34 <http_init_file>
}
 8016f86:	b007      	add	sp, #28
 8016f88:	ecbd 8b02 	vpop	{d8}
 8016f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8016f90:	a905      	add	r1, sp, #20
 8016f92:	4628      	mov	r0, r5
 8016f94:	f7ff fe6c 	bl	8016c70 <http_get_404_file>
 8016f98:	4607      	mov	r7, r0
    if (file != NULL) {
 8016f9a:	2f00      	cmp	r7, #0
 8016f9c:	d1e2      	bne.n	8016f64 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 8016f9e:	a905      	add	r1, sp, #20
 8016fa0:	4628      	mov	r0, r5
 8016fa2:	f7ff fe65 	bl	8016c70 <http_get_404_file>
 8016fa6:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8016fa8:	9c05      	ldr	r4, [sp, #20]
 8016faa:	e7e3      	b.n	8016f74 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 8016fac:	213f      	movs	r1, #63	; 0x3f
 8016fae:	4620      	mov	r0, r4
 8016fb0:	f00d fca6 	bl	8024900 <strchr>
    if (param != NULL) {
 8016fb4:	4682      	mov	sl, r0
 8016fb6:	b108      	cbz	r0, 8016fbc <http_find_file+0xac>
      *param = 0;
 8016fb8:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8016fbc:	212e      	movs	r1, #46	; 0x2e
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f00d fc9e 	bl	8024900 <strchr>
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	b138      	cbz	r0, 8016fd8 <http_find_file+0xc8>
 8016fc8:	1c58      	adds	r0, r3, #1
 8016fca:	212e      	movs	r1, #46	; 0x2e
 8016fcc:	461c      	mov	r4, r3
 8016fce:	f00d fc97 	bl	8024900 <strchr>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	2800      	cmp	r0, #0
 8016fd6:	d1f7      	bne.n	8016fc8 <http_find_file+0xb8>
  u8_t tag_check = 0;
 8016fd8:	4940      	ldr	r1, [pc, #256]	; (80170dc <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8016fda:	4620      	mov	r0, r4
 8016fdc:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80170ec <http_find_file+0x1dc>
 8016fe0:	f000 ffa0 	bl	8017f24 <lwip_stricmp>
 8016fe4:	b148      	cbz	r0, 8016ffa <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8016fe6:	4b3e      	ldr	r3, [pc, #248]	; (80170e0 <http_find_file+0x1d0>)
 8016fe8:	459b      	cmp	fp, r3
 8016fea:	d008      	beq.n	8016ffe <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8016fec:	f85b 1b04 	ldr.w	r1, [fp], #4
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	f000 ff97 	bl	8017f24 <lwip_stricmp>
 8016ff6:	2800      	cmp	r0, #0
 8016ff8:	d1f5      	bne.n	8016fe6 <http_find_file+0xd6>
        tag_check = 1;
 8016ffa:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 8016ffe:	f1ba 0f00 	cmp.w	sl, #0
 8017002:	d0d1      	beq.n	8016fa8 <http_find_file+0x98>
      *param = '?';
 8017004:	233f      	movs	r3, #63	; 0x3f
 8017006:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801700a:	9c05      	ldr	r4, [sp, #20]
 801700c:	e7b2      	b.n	8016f74 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801700e:	4b35      	ldr	r3, [pc, #212]	; (80170e4 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8017010:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017012:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8017014:	d106      	bne.n	8017024 <http_find_file+0x114>
 8017016:	f1a0 0001 	sub.w	r0, r0, #1
 801701a:	fab0 f080 	clz	r0, r0
 801701e:	0940      	lsrs	r0, r0, #5
 8017020:	2800      	cmp	r0, #0
 8017022:	d057      	beq.n	80170d4 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8017024:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8017028:	bf28      	it	cs
 801702a:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 801702e:	2e01      	cmp	r6, #1
 8017030:	d008      	beq.n	8017044 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 8017032:	464a      	mov	r2, r9
 8017034:	4621      	mov	r1, r4
 8017036:	482b      	ldr	r0, [pc, #172]	; (80170e4 <http_find_file+0x1d4>)
 8017038:	f00c fa7c 	bl	8023534 <memcpy>
      http_uri_buf[copy_len] = 0;
 801703c:	2300      	movs	r3, #0
 801703e:	9a02      	ldr	r2, [sp, #8]
 8017040:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 8017044:	462f      	mov	r7, r5
 8017046:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 801704a:	f8df a098 	ldr.w	sl, [pc, #152]	; 80170e4 <http_find_file+0x1d4>
 801704e:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 8017052:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 8017054:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 8017056:	d012      	beq.n	801707e <http_find_file+0x16e>
        if (len_left > 0) {
 8017058:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 801705c:	d113      	bne.n	8017086 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 801705e:	4641      	mov	r1, r8
 8017060:	4628      	mov	r0, r5
 8017062:	f7ff fda3 	bl	8016bac <fs_open>
      if (err == ERR_OK) {
 8017066:	b338      	cbz	r0, 80170b8 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8017068:	f10b 0b01 	add.w	fp, fp, #1
 801706c:	f1bb 0f05 	cmp.w	fp, #5
 8017070:	d1ef      	bne.n	8017052 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 8017072:	ee18 8a10 	vmov	r8, s16
 8017076:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8017078:	f04f 0900 	mov.w	r9, #0
 801707c:	e762      	b.n	8016f44 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 801707e:	4b1a      	ldr	r3, [pc, #104]	; (80170e8 <http_find_file+0x1d8>)
 8017080:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 8017084:	e7eb      	b.n	801705e <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017086:	4b18      	ldr	r3, [pc, #96]	; (80170e8 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017088:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801708a:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 801708e:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017090:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017092:	4608      	mov	r0, r1
 8017094:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 8017096:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801709a:	f7e9 f8db 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801709e:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80170a0:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80170a2:	4282      	cmp	r2, r0
 80170a4:	bf28      	it	cs
 80170a6:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80170a8:	4620      	mov	r0, r4
 80170aa:	9203      	str	r2, [sp, #12]
 80170ac:	f00c fa42 	bl	8023534 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80170b0:	2300      	movs	r3, #0
 80170b2:	9a03      	ldr	r2, [sp, #12]
 80170b4:	54a3      	strb	r3, [r4, r2]
 80170b6:	e7d2      	b.n	801705e <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 80170b8:	4a0b      	ldr	r2, [pc, #44]	; (80170e8 <http_find_file+0x1d8>)
        uri = file_name;
 80170ba:	4644      	mov	r4, r8
 80170bc:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 80170c0:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 80170c4:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 80170c6:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 80170ca:	2d00      	cmp	r5, #0
 80170cc:	f43f af3a 	beq.w	8016f44 <http_find_file+0x34>
  char *params = NULL;
 80170d0:	4606      	mov	r6, r0
 80170d2:	e74f      	b.n	8016f74 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 80170d4:	462f      	mov	r7, r5
 80170d6:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 80170d8:	4681      	mov	r9, r0
 80170da:	e733      	b.n	8016f44 <http_find_file+0x34>
 80170dc:	080df540 	.word	0x080df540
 80170e0:	080df7a0 	.word	0x080df7a0
 80170e4:	2001e238 	.word	0x2001e238
 80170e8:	080df7b0 	.word	0x080df7b0
 80170ec:	080df790 	.word	0x080df790

080170f0 <http_post_rxpbuf>:
{
 80170f0:	b538      	push	{r3, r4, r5, lr}
 80170f2:	4604      	mov	r4, r0
  if (p != NULL) {
 80170f4:	b1c9      	cbz	r1, 801712a <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 80170f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80170f8:	890a      	ldrh	r2, [r1, #8]
 80170fa:	4293      	cmp	r3, r2
 80170fc:	d31a      	bcc.n	8017134 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 80170fe:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 8017100:	4620      	mov	r0, r4
 8017102:	6323      	str	r3, [r4, #48]	; 0x30
 8017104:	f7ef fe1c 	bl	8006d40 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8017108:	b178      	cbz	r0, 801712a <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 801710a:	2300      	movs	r3, #0
 801710c:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 801710e:	490a      	ldr	r1, [pc, #40]	; (8017138 <http_post_rxpbuf+0x48>)
 8017110:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017112:	4620      	mov	r0, r4
 8017114:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8017116:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017118:	f7ef fe22 	bl	8006d60 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 801711c:	462a      	mov	r2, r5
 801711e:	4620      	mov	r0, r4
 8017120:	4905      	ldr	r1, [pc, #20]	; (8017138 <http_post_rxpbuf+0x48>)
}
 8017122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8017126:	f7ff bef3 	b.w	8016f10 <http_find_file>
  if (hs->post_content_len_left == 0) {
 801712a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801712c:	2b00      	cmp	r3, #0
 801712e:	d0ee      	beq.n	801710e <http_post_rxpbuf+0x1e>
}
 8017130:	2000      	movs	r0, #0
 8017132:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 8017134:	2300      	movs	r3, #0
 8017136:	e7e3      	b.n	8017100 <http_post_rxpbuf+0x10>
 8017138:	2001e238 	.word	0x2001e238

0801713c <http_find_error_file>:
  if (error_nr == 501) {
 801713c:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 8017140:	4a17      	ldr	r2, [pc, #92]	; (80171a0 <http_find_error_file+0x64>)
 8017142:	4299      	cmp	r1, r3
 8017144:	4b17      	ldr	r3, [pc, #92]	; (80171a4 <http_find_error_file+0x68>)
 8017146:	4918      	ldr	r1, [pc, #96]	; (80171a8 <http_find_error_file+0x6c>)
{
 8017148:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 801714a:	4e18      	ldr	r6, [pc, #96]	; (80171ac <http_find_error_file+0x70>)
 801714c:	bf18      	it	ne
 801714e:	461e      	movne	r6, r3
 8017150:	4b17      	ldr	r3, [pc, #92]	; (80171b0 <http_find_error_file+0x74>)
 8017152:	bf18      	it	ne
 8017154:	460b      	movne	r3, r1
{
 8017156:	b084      	sub	sp, #16
 8017158:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801715a:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 801715c:	4d15      	ldr	r5, [pc, #84]	; (80171b4 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801715e:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 8017160:	bf08      	it	eq
 8017162:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8017164:	f7ff fd22 	bl	8016bac <fs_open>
 8017168:	9b03      	ldr	r3, [sp, #12]
 801716a:	b128      	cbz	r0, 8017178 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 801716c:	4629      	mov	r1, r5
 801716e:	4620      	mov	r0, r4
 8017170:	f7ff fd1c 	bl	8016bac <fs_open>
 8017174:	b948      	cbnz	r0, 801718a <http_find_error_file+0x4e>
    uri = uri2;
 8017176:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8017178:	2200      	movs	r2, #0
 801717a:	4621      	mov	r1, r4
 801717c:	4620      	mov	r0, r4
 801717e:	e9cd 2200 	strd	r2, r2, [sp]
 8017182:	f7ff fdd7 	bl	8016d34 <http_init_file>
}
 8017186:	b004      	add	sp, #16
 8017188:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 801718a:	4631      	mov	r1, r6
 801718c:	4620      	mov	r0, r4
 801718e:	f7ff fd0d 	bl	8016bac <fs_open>
 8017192:	b908      	cbnz	r0, 8017198 <http_find_error_file+0x5c>
    uri = uri3;
 8017194:	4633      	mov	r3, r6
 8017196:	e7ef      	b.n	8017178 <http_find_error_file+0x3c>
    return ERR_ARG;
 8017198:	f06f 000f 	mvn.w	r0, #15
 801719c:	e7f3      	b.n	8017186 <http_find_error_file+0x4a>
 801719e:	bf00      	nop
 80171a0:	080df524 	.word	0x080df524
 80171a4:	080df53c 	.word	0x080df53c
 80171a8:	080df554 	.word	0x080df554
 80171ac:	080df518 	.word	0x080df518
 80171b0:	080df530 	.word	0x080df530
 80171b4:	080df548 	.word	0x080df548

080171b8 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 80171b8:	b538      	push	{r3, r4, r5, lr}
 80171ba:	4605      	mov	r5, r0
  if (hs != NULL) {
 80171bc:	460c      	mov	r4, r1
 80171be:	2900      	cmp	r1, #0
 80171c0:	d041      	beq.n	8017246 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 80171c2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80171c4:	bb83      	cbnz	r3, 8017228 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 80171c6:	2100      	movs	r1, #0
 80171c8:	4628      	mov	r0, r5
 80171ca:	f003 fcb5 	bl	801ab38 <tcp_arg>
  altcp_recv(pcb, NULL);
 80171ce:	2100      	movs	r1, #0
 80171d0:	4628      	mov	r0, r5
 80171d2:	f003 fcb5 	bl	801ab40 <tcp_recv>
  altcp_err(pcb, NULL);
 80171d6:	2100      	movs	r1, #0
 80171d8:	4628      	mov	r0, r5
 80171da:	f003 fce9 	bl	801abb0 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80171de:	2200      	movs	r2, #0
 80171e0:	4628      	mov	r0, r5
 80171e2:	4611      	mov	r1, r2
 80171e4:	f003 fd06 	bl	801abf4 <tcp_poll>
  altcp_sent(pcb, NULL);
 80171e8:	4628      	mov	r0, r5
 80171ea:	2100      	movs	r1, #0
 80171ec:	f003 fcc4 	bl	801ab78 <tcp_sent>
  if (hs->handle) {
 80171f0:	6960      	ldr	r0, [r4, #20]
 80171f2:	b118      	cbz	r0, 80171fc <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 80171f4:	f7ff fd00 	bl	8016bf8 <fs_close>
    hs->handle = NULL;
 80171f8:	2300      	movs	r3, #0
 80171fa:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80171fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80171fe:	b118      	cbz	r0, 8017208 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 8017200:	f001 fdf8 	bl	8018df4 <mem_free>
    hs->ssi = NULL;
 8017204:	2300      	movs	r3, #0
 8017206:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8017208:	6a20      	ldr	r0, [r4, #32]
 801720a:	b118      	cbz	r0, 8017214 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 801720c:	f002 fee0 	bl	8019fd0 <pbuf_free>
    hs->req = NULL;
 8017210:	2300      	movs	r3, #0
 8017212:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8017214:	4620      	mov	r0, r4
 8017216:	f001 fded 	bl	8018df4 <mem_free>
  err = altcp_close(pcb);
 801721a:	4628      	mov	r0, r5
 801721c:	f004 fb64 	bl	801b8e8 <tcp_close>
  if (err != ERR_OK) {
 8017220:	4604      	mov	r4, r0
 8017222:	b948      	cbnz	r0, 8017238 <http_close_or_abort_conn.constprop.0+0x80>
}
 8017224:	4620      	mov	r0, r4
 8017226:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8017228:	4911      	ldr	r1, [pc, #68]	; (8017270 <http_close_or_abort_conn.constprop.0+0xb8>)
 801722a:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801722c:	223f      	movs	r2, #63	; 0x3f
 801722e:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 8017230:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017232:	f7ef fd95 	bl	8006d60 <httpd_post_finished>
 8017236:	e7c6      	b.n	80171c6 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8017238:	4628      	mov	r0, r5
 801723a:	2204      	movs	r2, #4
 801723c:	490d      	ldr	r1, [pc, #52]	; (8017274 <http_close_or_abort_conn.constprop.0+0xbc>)
 801723e:	f003 fcd9 	bl	801abf4 <tcp_poll>
}
 8017242:	4620      	mov	r0, r4
 8017244:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 8017246:	f003 fc77 	bl	801ab38 <tcp_arg>
  altcp_recv(pcb, NULL);
 801724a:	4621      	mov	r1, r4
 801724c:	4628      	mov	r0, r5
 801724e:	f003 fc77 	bl	801ab40 <tcp_recv>
  altcp_err(pcb, NULL);
 8017252:	4621      	mov	r1, r4
 8017254:	4628      	mov	r0, r5
 8017256:	f003 fcab 	bl	801abb0 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801725a:	4621      	mov	r1, r4
 801725c:	4628      	mov	r0, r5
 801725e:	4622      	mov	r2, r4
 8017260:	f003 fcc8 	bl	801abf4 <tcp_poll>
  altcp_sent(pcb, NULL);
 8017264:	4621      	mov	r1, r4
 8017266:	4628      	mov	r0, r5
 8017268:	f003 fc86 	bl	801ab78 <tcp_sent>
  if (hs != NULL) {
 801726c:	e7d5      	b.n	801721a <http_close_or_abort_conn.constprop.0+0x62>
 801726e:	bf00      	nop
 8017270:	2001e238 	.word	0x2001e238
 8017274:	08017939 	.word	0x08017939

08017278 <http_err>:
  if (hs != NULL) {
 8017278:	b1c0      	cbz	r0, 80172ac <http_err+0x34>
{
 801727a:	b510      	push	{r4, lr}
 801727c:	4604      	mov	r4, r0
  if (hs->handle) {
 801727e:	6940      	ldr	r0, [r0, #20]
 8017280:	b118      	cbz	r0, 801728a <http_err+0x12>
    fs_close(hs->handle);
 8017282:	f7ff fcb9 	bl	8016bf8 <fs_close>
    hs->handle = NULL;
 8017286:	2300      	movs	r3, #0
 8017288:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801728a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801728c:	b118      	cbz	r0, 8017296 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 801728e:	f001 fdb1 	bl	8018df4 <mem_free>
    hs->ssi = NULL;
 8017292:	2300      	movs	r3, #0
 8017294:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8017296:	6a20      	ldr	r0, [r4, #32]
 8017298:	b118      	cbz	r0, 80172a2 <http_err+0x2a>
    pbuf_free(hs->req);
 801729a:	f002 fe99 	bl	8019fd0 <pbuf_free>
    hs->req = NULL;
 801729e:	2300      	movs	r3, #0
 80172a0:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 80172a2:	4620      	mov	r0, r4
}
 80172a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 80172a8:	f001 bda4 	b.w	8018df4 <mem_free>
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop

080172b0 <http_eof>:
{
 80172b0:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 80172b2:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 80172b6:	b1fb      	cbz	r3, 80172f8 <http_eof+0x48>
 80172b8:	4605      	mov	r5, r0
  if (hs->handle) {
 80172ba:	6948      	ldr	r0, [r1, #20]
 80172bc:	460c      	mov	r4, r1
 80172be:	b118      	cbz	r0, 80172c8 <http_eof+0x18>
    fs_close(hs->handle);
 80172c0:	f7ff fc9a 	bl	8016bf8 <fs_close>
    hs->handle = NULL;
 80172c4:	2300      	movs	r3, #0
 80172c6:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80172c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80172ca:	b118      	cbz	r0, 80172d4 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 80172cc:	f001 fd92 	bl	8018df4 <mem_free>
    hs->ssi = NULL;
 80172d0:	2300      	movs	r3, #0
 80172d2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80172d4:	6a20      	ldr	r0, [r4, #32]
 80172d6:	b108      	cbz	r0, 80172dc <http_eof+0x2c>
    pbuf_free(hs->req);
 80172d8:	f002 fe7a 	bl	8019fd0 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 80172dc:	2234      	movs	r2, #52	; 0x34
 80172de:	2100      	movs	r1, #0
 80172e0:	4620      	mov	r0, r4
 80172e2:	f00c f94f 	bl	8023584 <memset>
    hs->keepalive = 1;
 80172e6:	2301      	movs	r3, #1
    hs->pcb = pcb;
 80172e8:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 80172ea:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 80172ee:	8b6b      	ldrh	r3, [r5, #26]
 80172f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172f4:	836b      	strh	r3, [r5, #26]
}
 80172f6:	bd38      	pop	{r3, r4, r5, pc}
 80172f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 80172fc:	f7ff bf5c 	b.w	80171b8 <http_close_or_abort_conn.constprop.0>

08017300 <http_send>:
{
 8017300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8017304:	460d      	mov	r5, r1
{
 8017306:	b087      	sub	sp, #28
  if (hs == NULL) {
 8017308:	2900      	cmp	r1, #0
 801730a:	f000 824b 	beq.w	80177a4 <http_send+0x4a4>
  if (hs->left == 0) {
 801730e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8017310:	4607      	mov	r7, r0
 8017312:	2b00      	cmp	r3, #0
 8017314:	f000 818c 	beq.w	8017630 <http_send+0x330>
  if (hs->ssi) {
 8017318:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801731a:	2c00      	cmp	r4, #0
 801731c:	f000 819a 	beq.w	8017654 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 8017320:	6823      	ldr	r3, [r4, #0]
 8017322:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 8017324:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8017328:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 801732a:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 801732e:	f200 80c3 	bhi.w	80174b8 <http_send+0x1b8>
  u8_t data_to_send = 0;
 8017332:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 8017336:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017338:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 801733c:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017340:	2b04      	cmp	r3, #4
 8017342:	d003      	beq.n	801734c <http_send+0x4c>
 8017344:	68e1      	ldr	r1, [r4, #12]
 8017346:	2900      	cmp	r1, #0
 8017348:	f000 8091 	beq.w	801746e <http_send+0x16e>
 801734c:	2e00      	cmp	r6, #0
 801734e:	f040 811b 	bne.w	8017588 <http_send+0x288>
    if (len == 0) {
 8017352:	2a00      	cmp	r2, #0
 8017354:	f000 811b 	beq.w	801758e <http_send+0x28e>
    switch (ssi->tag_state) {
 8017358:	2b04      	cmp	r3, #4
 801735a:	d8f1      	bhi.n	8017340 <http_send+0x40>
 801735c:	e8df f003 	tbb	[pc, r3]
 8017360:	23407466 	.word	0x23407466
 8017364:	03          	.byte	0x03
 8017365:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 8017366:	68a3      	ldr	r3, [r4, #8]
 8017368:	69a9      	ldr	r1, [r5, #24]
 801736a:	428b      	cmp	r3, r1
 801736c:	f240 80f1 	bls.w	8017552 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8017370:	6863      	ldr	r3, [r4, #4]
 8017372:	4299      	cmp	r1, r3
 8017374:	f200 81fc 	bhi.w	8017770 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8017378:	1a5a      	subs	r2, r3, r1
 801737a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 801737e:	4282      	cmp	r2, r0
 8017380:	f340 8117 	ble.w	80175b2 <http_send+0x2b2>
 8017384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017388:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801738c:	2300      	movs	r3, #0
 801738e:	f10d 0216 	add.w	r2, sp, #22
 8017392:	4638      	mov	r0, r7
 8017394:	f7ff fc36 	bl	8016c04 <http_write>
          if (err == ERR_OK) {
 8017398:	2800      	cmp	r0, #0
 801739a:	f000 81fe 	beq.w	801779a <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801739e:	4606      	mov	r6, r0
    if (len == 0) {
 80173a0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80173a4:	e11a      	b.n	80175dc <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80173a6:	6821      	ldr	r1, [r4, #0]
 80173a8:	8a20      	ldrh	r0, [r4, #16]
 80173aa:	f891 e000 	ldrb.w	lr, [r1]
 80173ae:	2800      	cmp	r0, #0
 80173b0:	f040 80b9 	bne.w	8017526 <http_send+0x226>
 80173b4:	f1ae 0c09 	sub.w	ip, lr, #9
 80173b8:	fa5f fc8c 	uxtb.w	ip, ip
 80173bc:	f1bc 0f17 	cmp.w	ip, #23
 80173c0:	f200 80b1 	bhi.w	8017526 <http_send+0x226>
 80173c4:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 801776c <http_send+0x46c>
 80173c8:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80173cc:	f01c 0f01 	tst.w	ip, #1
 80173d0:	f000 80a9 	beq.w	8017526 <http_send+0x226>
          ssi->parsed++;
 80173d4:	3101      	adds	r1, #1
 80173d6:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 80173d8:	68e1      	ldr	r1, [r4, #12]
 80173da:	3901      	subs	r1, #1
 80173dc:	60e1      	str	r1, [r4, #12]
          break;
 80173de:	e7af      	b.n	8017340 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80173e0:	8a20      	ldrh	r0, [r4, #16]
 80173e2:	2800      	cmp	r0, #0
 80173e4:	f040 8083 	bne.w	80174ee <http_send+0x1ee>
 80173e8:	6821      	ldr	r1, [r4, #0]
 80173ea:	f891 e000 	ldrb.w	lr, [r1]
 80173ee:	f1ae 0c09 	sub.w	ip, lr, #9
 80173f2:	fa5f fc8c 	uxtb.w	ip, ip
 80173f6:	f1bc 0f17 	cmp.w	ip, #23
 80173fa:	f240 8110 	bls.w	801761e <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80173fe:	f8df c350 	ldr.w	ip, [pc, #848]	; 8017750 <http_send+0x450>
 8017402:	f894 9014 	ldrb.w	r9, [r4, #20]
 8017406:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 801740a:	f8dc c004 	ldr.w	ip, [ip, #4]
 801740e:	f89c c000 	ldrb.w	ip, [ip]
 8017412:	45f4      	cmp	ip, lr
 8017414:	f000 8083 	beq.w	801751e <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8017418:	f100 0c01 	add.w	ip, r0, #1
 801741c:	4420      	add	r0, r4
 801741e:	f8a4 c010 	strh.w	ip, [r4, #16]
 8017422:	f891 c000 	ldrb.w	ip, [r1]
 8017426:	f880 c016 	strb.w	ip, [r0, #22]
 801742a:	e7d3      	b.n	80173d4 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 801742c:	6821      	ldr	r1, [r4, #0]
 801742e:	7808      	ldrb	r0, [r1, #0]
 8017430:	283c      	cmp	r0, #60	; 0x3c
 8017432:	d002      	beq.n	801743a <http_send+0x13a>
 8017434:	282f      	cmp	r0, #47	; 0x2f
 8017436:	d1cd      	bne.n	80173d4 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8017438:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 801743a:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 801743c:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 801743e:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 8017440:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8017444:	8223      	strh	r3, [r4, #16]
            break;
 8017446:	e7c5      	b.n	80173d4 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8017448:	49c1      	ldr	r1, [pc, #772]	; (8017750 <http_send+0x450>)
 801744a:	7d20      	ldrb	r0, [r4, #20]
 801744c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017450:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8017454:	f811 100c 	ldrb.w	r1, [r1, ip]
 8017458:	2900      	cmp	r1, #0
 801745a:	f040 8086 	bne.w	801756a <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 801745e:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8017460:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017462:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8017464:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017468:	2900      	cmp	r1, #0
 801746a:	f47f af6f 	bne.w	801734c <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 801746e:	6823      	ldr	r3, [r4, #0]
 8017470:	69a9      	ldr	r1, [r5, #24]
 8017472:	428b      	cmp	r3, r1
 8017474:	f240 808b 	bls.w	801758e <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8017478:	1a5b      	subs	r3, r3, r1
 801747a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801747e:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8017480:	4293      	cmp	r3, r2
 8017482:	bfa8      	it	ge
 8017484:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017486:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801748a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801748e:	2300      	movs	r3, #0
 8017490:	f7ff fbb8 	bl	8016c04 <http_write>
    if (err == ERR_OK) {
 8017494:	2800      	cmp	r0, #0
 8017496:	d17a      	bne.n	801758e <http_send+0x28e>
    hs->file += len;
 8017498:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 801749c:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 80174a0:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 80174a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 80174a4:	440a      	add	r2, r1
    hs->left -= len;
 80174a6:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 80174a8:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 80174aa:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d071      	beq.n	8017594 <http_send+0x294>
}
 80174b0:	4640      	mov	r0, r8
 80174b2:	b007      	add	sp, #28
 80174b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80174b8:	1a5b      	subs	r3, r3, r1
 80174ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80174be:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80174c0:	4293      	cmp	r3, r2
 80174c2:	bfa8      	it	ge
 80174c4:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80174c6:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80174ca:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80174ce:	2300      	movs	r3, #0
 80174d0:	f7ff fb98 	bl	8016c04 <http_write>
    if (err == ERR_OK) {
 80174d4:	4606      	mov	r6, r0
 80174d6:	2800      	cmp	r0, #0
 80174d8:	f000 8154 	beq.w	8017784 <http_send+0x484>
  u8_t data_to_send = 0;
 80174dc:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 80174e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d052      	beq.n	801758e <http_send+0x28e>
    if (len == 0) {
 80174e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80174ec:	e724      	b.n	8017338 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80174ee:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8017750 <http_send+0x450>
 80174f2:	7d21      	ldrb	r1, [r4, #20]
 80174f4:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 80174f8:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80174fc:	6821      	ldr	r1, [r4, #0]
 80174fe:	f89e a000 	ldrb.w	sl, [lr]
 8017502:	f891 c000 	ldrb.w	ip, [r1]
 8017506:	45e2      	cmp	sl, ip
 8017508:	d072      	beq.n	80175f0 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 801750a:	f1ac 0c09 	sub.w	ip, ip, #9
 801750e:	fa5f fc8c 	uxtb.w	ip, ip
 8017512:	f1bc 0f17 	cmp.w	ip, #23
 8017516:	d964      	bls.n	80175e2 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8017518:	2807      	cmp	r0, #7
 801751a:	f67f af7d 	bls.w	8017418 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 801751e:	2300      	movs	r3, #0
 8017520:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 8017524:	e756      	b.n	80173d4 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8017526:	f894 9014 	ldrb.w	r9, [r4, #20]
 801752a:	f8df c224 	ldr.w	ip, [pc, #548]	; 8017750 <http_send+0x450>
 801752e:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8017532:	f8dc c004 	ldr.w	ip, [ip, #4]
 8017536:	f81c 9000 	ldrb.w	r9, [ip, r0]
 801753a:	45f1      	cmp	r9, lr
 801753c:	f000 80a1 	beq.w	8017682 <http_send+0x382>
          ssi->parse_left--;
 8017540:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 8017542:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8017544:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8017548:	3b01      	subs	r3, #1
          ssi->parsed++;
 801754a:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 801754c:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 801754e:	2300      	movs	r3, #0
 8017550:	e6f8      	b.n	8017344 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8017552:	8a21      	ldrh	r1, [r4, #16]
 8017554:	8a60      	ldrh	r0, [r4, #18]
 8017556:	4281      	cmp	r1, r0
 8017558:	f0c0 80e0 	bcc.w	801771c <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 801755c:	6023      	str	r3, [r4, #0]
 801755e:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 8017560:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 8017564:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8017568:	e6ec      	b.n	8017344 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 801756a:	6820      	ldr	r0, [r4, #0]
 801756c:	f890 e000 	ldrb.w	lr, [r0]
 8017570:	458e      	cmp	lr, r1
 8017572:	f000 80ce 	beq.w	8017712 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 8017576:	2300      	movs	r3, #0
 8017578:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 801757c:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 801757e:	3001      	adds	r0, #1
          ssi->parse_left--;
 8017580:	3901      	subs	r1, #1
          ssi->parsed++;
 8017582:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8017584:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8017586:	e6db      	b.n	8017340 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8017588:	2b04      	cmp	r3, #4
 801758a:	f47f af70 	bne.w	801746e <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801758e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017590:	2b00      	cmp	r3, #0
 8017592:	d18d      	bne.n	80174b0 <http_send+0x1b0>
 8017594:	6968      	ldr	r0, [r5, #20]
 8017596:	f7ff fb31 	bl	8016bfc <fs_bytes_left>
 801759a:	2800      	cmp	r0, #0
 801759c:	dc88      	bgt.n	80174b0 <http_send+0x1b0>
      return 0;
 801759e:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 80175a2:	4638      	mov	r0, r7
 80175a4:	4629      	mov	r1, r5
 80175a6:	f7ff fe83 	bl	80172b0 <http_eof>
}
 80175aa:	4640      	mov	r0, r8
 80175ac:	b007      	add	sp, #28
 80175ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b2:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80175b4:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 80175b8:	2a00      	cmp	r2, #0
 80175ba:	f47f aee7 	bne.w	801738c <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 80175be:	428b      	cmp	r3, r1
 80175c0:	d805      	bhi.n	80175ce <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 80175c2:	68a0      	ldr	r0, [r4, #8]
 80175c4:	1ac3      	subs	r3, r0, r3
 80175c6:	441a      	add	r2, r3
 80175c8:	b292      	uxth	r2, r2
 80175ca:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 80175ce:	4411      	add	r1, r2
 80175d0:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 80175d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 80175d4:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 80175d8:	1a9b      	subs	r3, r3, r2
 80175da:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80175dc:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80175e0:	e6ae      	b.n	8017340 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80175e2:	f8df a188 	ldr.w	sl, [pc, #392]	; 801776c <http_send+0x46c>
 80175e6:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80175ea:	f01c 0f01 	tst.w	ip, #1
 80175ee:	d093      	beq.n	8017518 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 80175f0:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80175f2:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 80175f4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80175f8:	f200 80e0 	bhi.w	80177bc <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80175fc:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 80175fe:	4420      	add	r0, r4
 8017600:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8017604:	f89e 3000 	ldrb.w	r3, [lr]
 8017608:	780a      	ldrb	r2, [r1, #0]
 801760a:	429a      	cmp	r2, r3
 801760c:	f000 80cf 	beq.w	80177ae <http_send+0x4ae>
              ssi->tag_index = 0;
 8017610:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017614:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8017618:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801761c:	e6da      	b.n	80173d4 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 801761e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 801776c <http_send+0x46c>
 8017622:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8017626:	f01c 0f01 	tst.w	ip, #1
 801762a:	f47f aed3 	bne.w	80173d4 <http_send+0xd4>
 801762e:	e6e6      	b.n	80173fe <http_send+0xfe>
  if (hs->handle == NULL) {
 8017630:	6948      	ldr	r0, [r1, #20]
 8017632:	2800      	cmp	r0, #0
 8017634:	d0b3      	beq.n	801759e <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 8017636:	f7ff fae1 	bl	8016bfc <fs_bytes_left>
  if (bytes_left <= 0) {
 801763a:	2800      	cmp	r0, #0
 801763c:	ddaf      	ble.n	801759e <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 801763e:	4b45      	ldr	r3, [pc, #276]	; (8017754 <http_send+0x454>)
 8017640:	f240 429d 	movw	r2, #1181	; 0x49d
 8017644:	4944      	ldr	r1, [pc, #272]	; (8017758 <http_send+0x458>)
 8017646:	4845      	ldr	r0, [pc, #276]	; (801775c <http_send+0x45c>)
 8017648:	f00c ff38 	bl	80244bc <iprintf>
  if (hs->ssi) {
 801764c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801764e:	2c00      	cmp	r4, #0
 8017650:	f47f ae66 	bne.w	8017320 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8017654:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8017658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801765c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801765e:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8017660:	428a      	cmp	r2, r1
 8017662:	bf88      	it	hi
 8017664:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017666:	4623      	mov	r3, r4
 8017668:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 801766a:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801766e:	f10d 0216 	add.w	r2, sp, #22
 8017672:	f7ff fac7 	bl	8016c04 <http_write>
  if (err == ERR_OK) {
 8017676:	2800      	cmp	r0, #0
 8017678:	f43f af0e 	beq.w	8017498 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801767c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 801767e:	46a0      	mov	r8, r4
 8017680:	e714      	b.n	80174ac <http_send+0x1ac>
          ssi->parsed++;
 8017682:	3101      	adds	r1, #1
          ssi->tag_index++;
 8017684:	3001      	adds	r0, #1
          ssi->parsed++;
 8017686:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 8017688:	b280      	uxth	r0, r0
          ssi->parse_left--;
 801768a:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 801768c:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 801768e:	3901      	subs	r1, #1
 8017690:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8017692:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8017696:	2900      	cmp	r1, #0
 8017698:	f47f ae52 	bne.w	8017340 <http_send+0x40>
  ssi = hs->ssi;
 801769c:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80176a0:	f1b9 0f00 	cmp.w	r9, #0
 80176a4:	f000 8115 	beq.w	80178d2 <http_send+0x5d2>
  if (httpd_ssi_handler
 80176a8:	4b2d      	ldr	r3, [pc, #180]	; (8017760 <http_send+0x460>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	9300      	str	r3, [sp, #0]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	f000 8093 	beq.w	80177da <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 80176b4:	4b2b      	ldr	r3, [pc, #172]	; (8017764 <http_send+0x464>)
 80176b6:	681a      	ldr	r2, [r3, #0]
 80176b8:	2a00      	cmp	r2, #0
 80176ba:	f000 808e 	beq.w	80177da <http_send+0x4da>
 80176be:	4b2a      	ldr	r3, [pc, #168]	; (8017768 <http_send+0x468>)
 80176c0:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80176c2:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 80176c4:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80176c6:	f340 8088 	ble.w	80177da <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80176ca:	f109 0a16 	add.w	sl, r9, #22
 80176ce:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80176d0:	2300      	movs	r3, #0
 80176d2:	9503      	str	r5, [sp, #12]
 80176d4:	460d      	mov	r5, r1
 80176d6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80176da:	4656      	mov	r6, sl
 80176dc:	461c      	mov	r4, r3
 80176de:	4692      	mov	sl, r2
 80176e0:	e003      	b.n	80176ea <http_send+0x3ea>
 80176e2:	3401      	adds	r4, #1
 80176e4:	42a5      	cmp	r5, r4
 80176e6:	f000 8105 	beq.w	80178f4 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80176ea:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 80176ee:	4630      	mov	r0, r6
 80176f0:	f7e8 fda6 	bl	8000240 <strcmp>
 80176f4:	2800      	cmp	r0, #0
 80176f6:	d1f4      	bne.n	80176e2 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 80176f8:	4623      	mov	r3, r4
 80176fa:	22fe      	movs	r2, #254	; 0xfe
 80176fc:	f109 011f 	add.w	r1, r9, #31
 8017700:	9e02      	ldr	r6, [sp, #8]
 8017702:	4618      	mov	r0, r3
 8017704:	9b00      	ldr	r3, [sp, #0]
 8017706:	9c01      	ldr	r4, [sp, #4]
 8017708:	9d03      	ldr	r5, [sp, #12]
 801770a:	4798      	blx	r3
 801770c:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 8017710:	e0a6      	b.n	8017860 <http_send+0x560>
            ssi->tag_index++;
 8017712:	f10c 0c01 	add.w	ip, ip, #1
 8017716:	f8a4 c010 	strh.w	ip, [r4, #16]
 801771a:	e72f      	b.n	801757c <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 801771c:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801771e:	311f      	adds	r1, #31
 8017720:	f10d 0216 	add.w	r2, sp, #22
 8017724:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 8017726:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801772a:	4421      	add	r1, r4
 801772c:	4638      	mov	r0, r7
 801772e:	f7ff fa69 	bl	8016c04 <http_write>
              ssi->tag_index += len;
 8017732:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 8017736:	4606      	mov	r6, r0
 8017738:	2800      	cmp	r0, #0
 801773a:	f47f af4f 	bne.w	80175dc <http_send+0x2dc>
              ssi->tag_index += len;
 801773e:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 8017740:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 8017744:	4413      	add	r3, r2
 8017746:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017748:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 801774c:	e5f8      	b.n	8017340 <http_send+0x40>
 801774e:	bf00      	nop
 8017750:	080df7a0 	.word	0x080df7a0
 8017754:	080df480 	.word	0x080df480
 8017758:	080df560 	.word	0x080df560
 801775c:	0802ac68 	.word	0x0802ac68
 8017760:	2001e67c 	.word	0x2001e67c
 8017764:	2001e680 	.word	0x2001e680
 8017768:	2001e278 	.word	0x2001e278
 801776c:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8017770:	4b63      	ldr	r3, [pc, #396]	; (8017900 <http_send+0x600>)
 8017772:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8017776:	4963      	ldr	r1, [pc, #396]	; (8017904 <http_send+0x604>)
 8017778:	4863      	ldr	r0, [pc, #396]	; (8017908 <http_send+0x608>)
 801777a:	f00c fe9f 	bl	80244bc <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801777e:	6863      	ldr	r3, [r4, #4]
 8017780:	69a9      	ldr	r1, [r5, #24]
 8017782:	e5f9      	b.n	8017378 <http_send+0x78>
      hs->file += len;
 8017784:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 8017788:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 801778c:	69ab      	ldr	r3, [r5, #24]
 801778e:	4413      	add	r3, r2
 8017790:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8017792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017794:	1a9b      	subs	r3, r3, r2
 8017796:	626b      	str	r3, [r5, #36]	; 0x24
 8017798:	e6a2      	b.n	80174e0 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 801779a:	6863      	ldr	r3, [r4, #4]
 801779c:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 801779e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80177a2:	e70c      	b.n	80175be <http_send+0x2be>
    return 0;
 80177a4:	4688      	mov	r8, r1
}
 80177a6:	4640      	mov	r0, r8
 80177a8:	b007      	add	sp, #28
 80177aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 80177ae:	2301      	movs	r3, #1
 80177b0:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80177b2:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 80177b6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80177ba:	e60b      	b.n	80173d4 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80177bc:	4b50      	ldr	r3, [pc, #320]	; (8017900 <http_send+0x600>)
 80177be:	f240 523a 	movw	r2, #1338	; 0x53a
 80177c2:	4952      	ldr	r1, [pc, #328]	; (801790c <http_send+0x60c>)
 80177c4:	4850      	ldr	r0, [pc, #320]	; (8017908 <http_send+0x608>)
 80177c6:	f00c fe79 	bl	80244bc <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80177ca:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80177cc:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80177ce:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 80177d2:	6821      	ldr	r1, [r4, #0]
 80177d4:	f8d9 e004 	ldr.w	lr, [r9, #4]
 80177d8:	e710      	b.n	80175fc <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80177da:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80177de:	4650      	mov	r0, sl
 80177e0:	f7e8 fd38 	bl	8000254 <strlen>
 80177e4:	28e4      	cmp	r0, #228	; 0xe4
 80177e6:	d865      	bhi.n	80178b4 <http_send+0x5b4>
 80177e8:	2809      	cmp	r0, #9
 80177ea:	bf28      	it	cs
 80177ec:	2009      	movcs	r0, #9
 80177ee:	f100 0331 	add.w	r3, r0, #49	; 0x31
 80177f2:	4686      	mov	lr, r0
 80177f4:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80177f6:	f100 0319 	add.w	r3, r0, #25
 80177fa:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80177fc:	f8df c11c 	ldr.w	ip, [pc, #284]	; 801791c <http_send+0x61c>
 8017800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017804:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8017808:	f8bc 3000 	ldrh.w	r3, [ip]
 801780c:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8017810:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8017814:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8017818:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 801781a:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 801781e:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8017820:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8017824:	f00b fe86 	bl	8023534 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8017828:	4b39      	ldr	r3, [pc, #228]	; (8017910 <http_send+0x610>)
 801782a:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 801782c:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 801782e:	eb09 0e02 	add.w	lr, r9, r2
 8017832:	6818      	ldr	r0, [r3, #0]
 8017834:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8017838:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 801783a:	799b      	ldrb	r3, [r3, #6]
 801783c:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 8017840:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8017844:	f8ae c004 	strh.w	ip, [lr, #4]
 8017848:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 801784c:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 8017850:	f7e8 fd00 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8017854:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8017858:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 801785a:	d232      	bcs.n	80178c2 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 801785c:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 8017860:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 8017862:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 8017864:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 8017866:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 801786a:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 801786c:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8017870:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 8017872:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8017874:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8017876:	d802      	bhi.n	801787e <http_send+0x57e>
    if (len == 0) {
 8017878:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801787c:	e566      	b.n	801734c <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801787e:	1a52      	subs	r2, r2, r1
 8017880:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017884:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8017886:	429a      	cmp	r2, r3
 8017888:	bfa8      	it	ge
 801788a:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801788c:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801788e:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017892:	f10d 0216 	add.w	r2, sp, #22
 8017896:	f7ff f9b5 	bl	8016c04 <http_write>
              if (err == ERR_OK) {
 801789a:	4606      	mov	r6, r0
 801789c:	2800      	cmp	r0, #0
 801789e:	f47f ad7f 	bne.w	80173a0 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 80178a2:	6861      	ldr	r1, [r4, #4]
 80178a4:	69ab      	ldr	r3, [r5, #24]
 80178a6:	4299      	cmp	r1, r3
 80178a8:	d91b      	bls.n	80178e2 <http_send+0x5e2>
                hs->file += len;
 80178aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80178ae:	4413      	add	r3, r2
 80178b0:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 80178b2:	e68e      	b.n	80175d2 <http_send+0x2d2>
 80178b4:	233a      	movs	r3, #58	; 0x3a
 80178b6:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80178b8:	f04f 0e09 	mov.w	lr, #9
 80178bc:	e9cd 3200 	strd	r3, r2, [sp]
 80178c0:	e79c      	b.n	80177fc <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80178c2:	4b0f      	ldr	r3, [pc, #60]	; (8017900 <http_send+0x600>)
 80178c4:	f240 323f 	movw	r2, #831	; 0x33f
 80178c8:	4912      	ldr	r1, [pc, #72]	; (8017914 <http_send+0x614>)
 80178ca:	480f      	ldr	r0, [pc, #60]	; (8017908 <http_send+0x608>)
 80178cc:	f00c fdf6 	bl	80244bc <iprintf>
 80178d0:	e7c4      	b.n	801785c <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80178d2:	4b0b      	ldr	r3, [pc, #44]	; (8017900 <http_send+0x600>)
 80178d4:	f240 3206 	movw	r2, #774	; 0x306
 80178d8:	490f      	ldr	r1, [pc, #60]	; (8017918 <http_send+0x618>)
 80178da:	480b      	ldr	r0, [pc, #44]	; (8017908 <http_send+0x608>)
 80178dc:	f00c fdee 	bl	80244bc <iprintf>
 80178e0:	e6e2      	b.n	80176a8 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 80178e2:	68a2      	ldr	r2, [r4, #8]
 80178e4:	1a52      	subs	r2, r2, r1
 80178e6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80178ea:	440a      	add	r2, r1
 80178ec:	b292      	uxth	r2, r2
 80178ee:	f8ad 2016 	strh.w	r2, [sp, #22]
 80178f2:	e7dc      	b.n	80178ae <http_send+0x5ae>
 80178f4:	46b2      	mov	sl, r6
 80178f6:	9c01      	ldr	r4, [sp, #4]
 80178f8:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 80178fc:	e76f      	b.n	80177de <http_send+0x4de>
 80178fe:	bf00      	nop
 8017900:	080df480 	.word	0x080df480
 8017904:	080df5e8 	.word	0x080df5e8
 8017908:	0802ac68 	.word	0x0802ac68
 801790c:	080df598 	.word	0x080df598
 8017910:	080df5d0 	.word	0x080df5d0
 8017914:	080df5d8 	.word	0x080df5d8
 8017918:	080df5b0 	.word	0x080df5b0
 801791c:	080df5bc 	.word	0x080df5bc

08017920 <http_sent>:
{
 8017920:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8017922:	4603      	mov	r3, r0
 8017924:	b130      	cbz	r0, 8017934 <http_sent+0x14>
  hs->retries = 0;
 8017926:	2200      	movs	r2, #0
 8017928:	4608      	mov	r0, r1
  http_send(pcb, hs);
 801792a:	4619      	mov	r1, r3
  hs->retries = 0;
 801792c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8017930:	f7ff fce6 	bl	8017300 <http_send>
}
 8017934:	2000      	movs	r0, #0
 8017936:	bd08      	pop	{r3, pc}

08017938 <http_poll>:
{
 8017938:	b510      	push	{r4, lr}
 801793a:	460c      	mov	r4, r1
  if (hs == NULL) {
 801793c:	b1a8      	cbz	r0, 801796a <http_poll+0x32>
    hs->retries++;
 801793e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8017942:	3301      	adds	r3, #1
 8017944:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8017946:	2b04      	cmp	r3, #4
    hs->retries++;
 8017948:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 801794c:	d019      	beq.n	8017982 <http_poll+0x4a>
    if (hs->handle) {
 801794e:	6943      	ldr	r3, [r0, #20]
 8017950:	b123      	cbz	r3, 801795c <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8017952:	4601      	mov	r1, r0
 8017954:	4620      	mov	r0, r4
 8017956:	f7ff fcd3 	bl	8017300 <http_send>
 801795a:	b908      	cbnz	r0, 8017960 <http_poll+0x28>
  return ERR_OK;
 801795c:	2000      	movs	r0, #0
}
 801795e:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8017960:	4620      	mov	r0, r4
 8017962:	f006 fd9b 	bl	801e49c <tcp_output>
  return ERR_OK;
 8017966:	2000      	movs	r0, #0
 8017968:	e7f9      	b.n	801795e <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 801796a:	4601      	mov	r1, r0
 801796c:	4620      	mov	r0, r4
 801796e:	f7ff fc23 	bl	80171b8 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 8017972:	3001      	adds	r0, #1
 8017974:	d1f2      	bne.n	801795c <http_poll+0x24>
      altcp_abort(pcb);
 8017976:	4620      	mov	r0, r4
 8017978:	f003 fda2 	bl	801b4c0 <tcp_abort>
      return ERR_ABRT;
 801797c:	f06f 000c 	mvn.w	r0, #12
}
 8017980:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 8017982:	4601      	mov	r1, r0
 8017984:	4620      	mov	r0, r4
 8017986:	f7ff fc17 	bl	80171b8 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 801798a:	2000      	movs	r0, #0
}
 801798c:	bd10      	pop	{r4, pc}
 801798e:	bf00      	nop

08017990 <http_recv>:
{
 8017990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017994:	4605      	mov	r5, r0
 8017996:	b08d      	sub	sp, #52	; 0x34
 8017998:	460e      	mov	r6, r1
 801799a:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 801799c:	b9ab      	cbnz	r3, 80179ca <http_recv+0x3a>
 801799e:	fab2 f782 	clz	r7, r2
 80179a2:	097f      	lsrs	r7, r7, #5
 80179a4:	b1ca      	cbz	r2, 80179da <http_recv+0x4a>
 80179a6:	b188      	cbz	r0, 80179cc <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 80179a8:	8911      	ldrh	r1, [r2, #8]
 80179aa:	4630      	mov	r0, r6
 80179ac:	f002 ff84 	bl	801a8b8 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 80179b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f040 813c 	bne.w	8017c30 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 80179b8:	696b      	ldr	r3, [r5, #20]
 80179ba:	b1b3      	cbz	r3, 80179ea <http_recv+0x5a>
      pbuf_free(p);
 80179bc:	4620      	mov	r0, r4
 80179be:	f002 fb07 	bl	8019fd0 <pbuf_free>
}
 80179c2:	2000      	movs	r0, #0
 80179c4:	b00d      	add	sp, #52	; 0x34
 80179c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 80179ca:	b132      	cbz	r2, 80179da <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 80179cc:	4630      	mov	r0, r6
 80179ce:	8921      	ldrh	r1, [r4, #8]
 80179d0:	f002 ff72 	bl	801a8b8 <tcp_recved>
      pbuf_free(p);
 80179d4:	4620      	mov	r0, r4
 80179d6:	f002 fafb 	bl	8019fd0 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 80179da:	4629      	mov	r1, r5
 80179dc:	4630      	mov	r0, r6
 80179de:	f7ff fbeb 	bl	80171b8 <http_close_or_abort_conn.constprop.0>
}
 80179e2:	2000      	movs	r0, #0
 80179e4:	b00d      	add	sp, #52	; 0x34
 80179e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80179ea:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 80179ec:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	f040 8173 	bne.w	8017cda <http_recv+0x34a>
  if (hs->req == NULL) {
 80179f4:	2800      	cmp	r0, #0
 80179f6:	f000 8136 	beq.w	8017c66 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 80179fa:	4621      	mov	r1, r4
 80179fc:	f002 fb1a 	bl	801a034 <pbuf_cat>
  pbuf_ref(p);
 8017a00:	4620      	mov	r0, r4
 8017a02:	f002 fb03 	bl	801a00c <pbuf_ref>
  if (hs->req->next != NULL) {
 8017a06:	6a28      	ldr	r0, [r5, #32]
 8017a08:	6803      	ldr	r3, [r0, #0]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	f000 812d 	beq.w	8017c6a <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8017a10:	8907      	ldrh	r7, [r0, #8]
 8017a12:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8017a16:	49bc      	ldr	r1, [pc, #752]	; (8017d08 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8017a18:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 8017a1a:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8017a1c:	bf28      	it	cs
 8017a1e:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8017a20:	2300      	movs	r3, #0
 8017a22:	463a      	mov	r2, r7
 8017a24:	f002 fb78 	bl	801a118 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8017a28:	2f06      	cmp	r7, #6
 8017a2a:	f240 80ef 	bls.w	8017c0c <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8017a2e:	463a      	mov	r2, r7
 8017a30:	49b6      	ldr	r1, [pc, #728]	; (8017d0c <http_recv+0x37c>)
 8017a32:	4640      	mov	r0, r8
 8017a34:	f000 fa4e 	bl	8017ed4 <lwip_strnstr>
    if (crlf != NULL) {
 8017a38:	2800      	cmp	r0, #0
 8017a3a:	f000 80e7 	beq.w	8017c0c <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 8017a3e:	2204      	movs	r2, #4
 8017a40:	49b3      	ldr	r1, [pc, #716]	; (8017d10 <http_recv+0x380>)
 8017a42:	4640      	mov	r0, r8
 8017a44:	f00d fcac 	bl	80253a0 <strncmp>
 8017a48:	4682      	mov	sl, r0
 8017a4a:	2800      	cmp	r0, #0
 8017a4c:	f040 8118 	bne.w	8017c80 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8017a50:	1f3a      	subs	r2, r7, #4
 8017a52:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8017a56:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8017a5a:	49ae      	ldr	r1, [pc, #696]	; (8017d14 <http_recv+0x384>)
 8017a5c:	b292      	uxth	r2, r2
 8017a5e:	4658      	mov	r0, fp
 8017a60:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8017a64:	f000 fa36 	bl	8017ed4 <lwip_strnstr>
      if (sp2 == NULL) {
 8017a68:	9a05      	ldr	r2, [sp, #20]
 8017a6a:	4681      	mov	r9, r0
 8017a6c:	2800      	cmp	r0, #0
 8017a6e:	f000 8123 	beq.w	8017cb8 <http_recv+0x328>
      int is_09 = 0;
 8017a72:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 8017a74:	9305      	str	r3, [sp, #20]
 8017a76:	f1b9 0f00 	cmp.w	r9, #0
 8017a7a:	f000 80c7 	beq.w	8017c0c <http_recv+0x27c>
 8017a7e:	9b04      	ldr	r3, [sp, #16]
 8017a80:	4599      	cmp	r9, r3
 8017a82:	f240 80c3 	bls.w	8017c0c <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8017a86:	463a      	mov	r2, r7
 8017a88:	49a3      	ldr	r1, [pc, #652]	; (8017d18 <http_recv+0x388>)
 8017a8a:	4640      	mov	r0, r8
 8017a8c:	f000 fa22 	bl	8017ed4 <lwip_strnstr>
 8017a90:	2800      	cmp	r0, #0
 8017a92:	f000 80bb 	beq.w	8017c0c <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8017a96:	9b05      	ldr	r3, [sp, #20]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	f000 812b 	beq.w	8017cf4 <http_recv+0x364>
            hs->keepalive = 0;
 8017a9e:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8017aa0:	eba9 020b 	sub.w	r2, r9, fp
 8017aa4:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 8017aa8:	2100      	movs	r1, #0
 8017aaa:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 8017aac:	b292      	uxth	r2, r2
          *sp1 = 0;
 8017aae:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8017ab0:	f80b 1002 	strb.w	r1, [fp, r2]
 8017ab4:	445a      	add	r2, fp
 8017ab6:	9206      	str	r2, [sp, #24]
          if (is_post) {
 8017ab8:	f1ba 0f00 	cmp.w	sl, #0
 8017abc:	f000 8113 	beq.w	8017ce6 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8017ac0:	f109 0301 	add.w	r3, r9, #1
 8017ac4:	4994      	ldr	r1, [pc, #592]	; (8017d18 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 8017ac6:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8017aca:	eba3 0208 	sub.w	r2, r3, r8
 8017ace:	4618      	mov	r0, r3
 8017ad0:	9305      	str	r3, [sp, #20]
 8017ad2:	1aba      	subs	r2, r7, r2
 8017ad4:	f000 f9fe 	bl	8017ed4 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8017ad8:	9008      	str	r0, [sp, #32]
 8017ada:	2800      	cmp	r0, #0
 8017adc:	f000 8168 	beq.w	8017db0 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8017ae0:	9b05      	ldr	r3, [sp, #20]
 8017ae2:	498e      	ldr	r1, [pc, #568]	; (8017d1c <http_recv+0x38c>)
 8017ae4:	1ac2      	subs	r2, r0, r3
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f000 f9f4 	bl	8017ed4 <lwip_strnstr>
    if (scontent_len != NULL) {
 8017aec:	4603      	mov	r3, r0
 8017aee:	9009      	str	r0, [sp, #36]	; 0x24
 8017af0:	2800      	cmp	r0, #0
 8017af2:	f000 812f 	beq.w	8017d54 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8017af6:	3310      	adds	r3, #16
 8017af8:	220a      	movs	r2, #10
 8017afa:	4984      	ldr	r1, [pc, #528]	; (8017d0c <http_recv+0x37c>)
 8017afc:	4618      	mov	r0, r3
 8017afe:	9307      	str	r3, [sp, #28]
 8017b00:	f000 f9e8 	bl	8017ed4 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8017b04:	2800      	cmp	r0, #0
 8017b06:	f000 8125 	beq.w	8017d54 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 8017b0a:	9b07      	ldr	r3, [sp, #28]
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f00b fb3b 	bl	8023188 <atoi>
        if (content_len == 0) {
 8017b12:	1e02      	subs	r2, r0, #0
 8017b14:	9207      	str	r2, [sp, #28]
 8017b16:	f040 811b 	bne.w	8017d50 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8017b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b1c:	7c1b      	ldrb	r3, [r3, #16]
 8017b1e:	2b30      	cmp	r3, #48	; 0x30
 8017b20:	f040 8118 	bne.w	8017d54 <http_recv+0x3c4>
 8017b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b26:	7c5b      	ldrb	r3, [r3, #17]
 8017b28:	2b0d      	cmp	r3, #13
 8017b2a:	f040 8113 	bne.w	8017d54 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8017b2e:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8017b30:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8017b32:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8017b34:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8017b36:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 8017b38:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8017d34 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 8017b3c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8017b40:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8017b44:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 8017b46:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8017b48:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8017b4a:	9a05      	ldr	r2, [sp, #20]
 8017b4c:	bfb4      	ite	lt
 8017b4e:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8017b50:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8017b54:	429f      	cmp	r7, r3
 8017b56:	bfa8      	it	ge
 8017b58:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8017b5a:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8017b5c:	2700      	movs	r7, #0
 8017b5e:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 8017b62:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8017b64:	9807      	ldr	r0, [sp, #28]
 8017b66:	f8cd b004 	str.w	fp, [sp, #4]
 8017b6a:	9000      	str	r0, [sp, #0]
 8017b6c:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 8017b70:	9003      	str	r0, [sp, #12]
 8017b72:	203f      	movs	r0, #63	; 0x3f
 8017b74:	9002      	str	r0, [sp, #8]
 8017b76:	4628      	mov	r0, r5
 8017b78:	f7ef f8ea 	bl	8006d50 <httpd_post_begin>
          if (err == ERR_OK) {
 8017b7c:	2800      	cmp	r0, #0
 8017b7e:	f040 80f7 	bne.w	8017d70 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 8017b82:	9807      	ldr	r0, [sp, #28]
 8017b84:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8017b86:	f1ba 0f00 	cmp.w	sl, #0
 8017b8a:	f000 80d5 	beq.w	8017d38 <http_recv+0x3a8>
 8017b8e:	4652      	mov	r2, sl
 8017b90:	e005      	b.n	8017b9e <http_recv+0x20e>
              q = q->next;
 8017b92:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8017b94:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8017b98:	2a00      	cmp	r2, #0
 8017b9a:	f000 80cd 	beq.w	8017d38 <http_recv+0x3a8>
 8017b9e:	8953      	ldrh	r3, [r2, #10]
 8017ba0:	4543      	cmp	r3, r8
              start_offset -= q->len;
 8017ba2:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8017ba6:	d9f4      	bls.n	8017b92 <http_recv+0x202>
 8017ba8:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 8017baa:	4641      	mov	r1, r8
 8017bac:	4610      	mov	r0, r2
 8017bae:	f002 f99f 	bl	8019ef0 <pbuf_remove_header>
              pbuf_ref(q);
 8017bb2:	4650      	mov	r0, sl
 8017bb4:	f002 fa2a 	bl	801a00c <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8017bb8:	4651      	mov	r1, sl
 8017bba:	4628      	mov	r0, r5
 8017bbc:	f7ff fa98 	bl	80170f0 <http_post_rxpbuf>
 8017bc0:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8017bc2:	2f00      	cmp	r7, #0
 8017bc4:	f000 80ba 	beq.w	8017d3c <http_recv+0x3ac>
              *sp1 = ' ';
 8017bc8:	2320      	movs	r3, #32
 8017bca:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 8017bcc:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8017bd0:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8017bd2:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8017bd4:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8017bd8:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8017bda:	d022      	beq.n	8017c22 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8017bdc:	2f00      	cmp	r7, #0
 8017bde:	d048      	beq.n	8017c72 <http_recv+0x2e2>
 8017be0:	1d7a      	adds	r2, r7, #5
 8017be2:	f43f aeeb 	beq.w	80179bc <http_recv+0x2c>
 8017be6:	f027 0308 	bic.w	r3, r7, #8
 8017bea:	b25b      	sxtb	r3, r3
 8017bec:	3310      	adds	r3, #16
 8017bee:	d12e      	bne.n	8017c4e <http_recv+0x2be>
        if (hs->req != NULL) {
 8017bf0:	6a28      	ldr	r0, [r5, #32]
 8017bf2:	b3a0      	cbz	r0, 8017c5e <http_recv+0x2ce>
          pbuf_free(hs->req);
 8017bf4:	f002 f9ec 	bl	8019fd0 <pbuf_free>
          hs->req = NULL;
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8017bfc:	4620      	mov	r0, r4
 8017bfe:	f002 f9e7 	bl	8019fd0 <pbuf_free>
      if (parsed == ERR_OK) {
 8017c02:	b1df      	cbz	r7, 8017c3c <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 8017c04:	3710      	adds	r7, #16
 8017c06:	f43f aee8 	beq.w	80179da <http_recv+0x4a>
 8017c0a:	e6ea      	b.n	80179e2 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 8017c0c:	6a28      	ldr	r0, [r5, #32]
 8017c0e:	f002 f9f3 	bl	8019ff8 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8017c12:	6a2b      	ldr	r3, [r5, #32]
 8017c14:	891b      	ldrh	r3, [r3, #8]
 8017c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017c1a:	d202      	bcs.n	8017c22 <http_recv+0x292>
 8017c1c:	2805      	cmp	r0, #5
 8017c1e:	f67f aecd 	bls.w	80179bc <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 8017c22:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8017c26:	4628      	mov	r0, r5
 8017c28:	f7ff fa88 	bl	801713c <http_find_error_file>
 8017c2c:	4607      	mov	r7, r0
 8017c2e:	e7d5      	b.n	8017bdc <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 8017c30:	4621      	mov	r1, r4
 8017c32:	4628      	mov	r0, r5
    hs->retries = 0;
 8017c34:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8017c38:	f7ff fa5a 	bl	80170f0 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8017c3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	f47f aecf 	bne.w	80179e2 <http_recv+0x52>
      http_send(pcb, hs);
 8017c44:	4629      	mov	r1, r5
 8017c46:	4630      	mov	r0, r6
 8017c48:	f7ff fb5a 	bl	8017300 <http_send>
 8017c4c:	e6c9      	b.n	80179e2 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8017c4e:	4b34      	ldr	r3, [pc, #208]	; (8017d20 <http_recv+0x390>)
 8017c50:	f640 2204 	movw	r2, #2564	; 0xa04
 8017c54:	4933      	ldr	r1, [pc, #204]	; (8017d24 <http_recv+0x394>)
 8017c56:	4834      	ldr	r0, [pc, #208]	; (8017d28 <http_recv+0x398>)
 8017c58:	f00c fc30 	bl	80244bc <iprintf>
 8017c5c:	e7c8      	b.n	8017bf0 <http_recv+0x260>
      pbuf_free(p);
 8017c5e:	4620      	mov	r0, r4
 8017c60:	f002 f9b6 	bl	8019fd0 <pbuf_free>
      if (parsed == ERR_OK) {
 8017c64:	e7ce      	b.n	8017c04 <http_recv+0x274>
    hs->req = p;
 8017c66:	622c      	str	r4, [r5, #32]
 8017c68:	e6ca      	b.n	8017a00 <http_recv+0x70>
    data = (char *)p->payload;
 8017c6a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8017c6e:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 8017c70:	e6da      	b.n	8017a28 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 8017c72:	1d7b      	adds	r3, r7, #5
 8017c74:	f43f aea2 	beq.w	80179bc <http_recv+0x2c>
        if (hs->req != NULL) {
 8017c78:	6a28      	ldr	r0, [r5, #32]
 8017c7a:	2800      	cmp	r0, #0
 8017c7c:	d0be      	beq.n	8017bfc <http_recv+0x26c>
 8017c7e:	e7b9      	b.n	8017bf4 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 8017c80:	2205      	movs	r2, #5
 8017c82:	492a      	ldr	r1, [pc, #168]	; (8017d2c <http_recv+0x39c>)
 8017c84:	4640      	mov	r0, r8
 8017c86:	f00d fb8b 	bl	80253a0 <strncmp>
 8017c8a:	9005      	str	r0, [sp, #20]
 8017c8c:	b9d8      	cbnz	r0, 8017cc6 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8017c8e:	f1a7 0a05 	sub.w	sl, r7, #5
 8017c92:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 8017c96:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8017c9a:	491e      	ldr	r1, [pc, #120]	; (8017d14 <http_recv+0x384>)
 8017c9c:	fa1f fa8a 	uxth.w	sl, sl
 8017ca0:	4658      	mov	r0, fp
        sp1 = data + 4;
 8017ca2:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8017ca4:	4652      	mov	r2, sl
 8017ca6:	f000 f915 	bl	8017ed4 <lwip_strnstr>
      if (sp2 == NULL) {
 8017caa:	4681      	mov	r9, r0
 8017cac:	2800      	cmp	r0, #0
 8017cae:	d059      	beq.n	8017d64 <http_recv+0x3d4>
        is_post = 1;
 8017cb0:	f04f 0a01 	mov.w	sl, #1
 8017cb4:	9b05      	ldr	r3, [sp, #20]
 8017cb6:	e6dd      	b.n	8017a74 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8017cb8:	4914      	ldr	r1, [pc, #80]	; (8017d0c <http_recv+0x37c>)
 8017cba:	4658      	mov	r0, fp
 8017cbc:	f000 f90a 	bl	8017ed4 <lwip_strnstr>
        is_09 = 1;
 8017cc0:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8017cc2:	4681      	mov	r9, r0
        if (is_post) {
 8017cc4:	e6d6      	b.n	8017a74 <http_recv+0xe4>
        data[4] = 0;
 8017cc6:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8017cc8:	f240 11f5 	movw	r1, #501	; 0x1f5
 8017ccc:	4628      	mov	r0, r5
        data[4] = 0;
 8017cce:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8017cd2:	f7ff fa33 	bl	801713c <http_find_error_file>
 8017cd6:	4607      	mov	r7, r0
 8017cd8:	e780      	b.n	8017bdc <http_recv+0x24c>
        if (hs->req != NULL) {
 8017cda:	2800      	cmp	r0, #0
 8017cdc:	f43f ae6e 	beq.w	80179bc <http_recv+0x2c>
 8017ce0:	f06f 0707 	mvn.w	r7, #7
 8017ce4:	e786      	b.n	8017bf4 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 8017ce6:	461a      	mov	r2, r3
 8017ce8:	4659      	mov	r1, fp
 8017cea:	4628      	mov	r0, r5
 8017cec:	f7ff f910 	bl	8016f10 <http_find_file>
 8017cf0:	4607      	mov	r7, r0
 8017cf2:	e773      	b.n	8017bdc <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8017cf4:	463a      	mov	r2, r7
 8017cf6:	490e      	ldr	r1, [pc, #56]	; (8017d30 <http_recv+0x3a0>)
 8017cf8:	4640      	mov	r0, r8
 8017cfa:	f000 f8eb 	bl	8017ed4 <lwip_strnstr>
 8017cfe:	9b05      	ldr	r3, [sp, #20]
 8017d00:	2800      	cmp	r0, #0
 8017d02:	d047      	beq.n	8017d94 <http_recv+0x404>
            hs->keepalive = 1;
 8017d04:	2001      	movs	r0, #1
 8017d06:	e6cb      	b.n	8017aa0 <http_recv+0x110>
 8017d08:	2001e27c 	.word	0x2001e27c
 8017d0c:	08029eb4 	.word	0x08029eb4
 8017d10:	080df600 	.word	0x080df600
 8017d14:	0802a9dc 	.word	0x0802a9dc
 8017d18:	08028964 	.word	0x08028964
 8017d1c:	080df640 	.word	0x080df640
 8017d20:	080df480 	.word	0x080df480
 8017d24:	080df654 	.word	0x080df654
 8017d28:	0802ac68 	.word	0x0802ac68
 8017d2c:	080df608 	.word	0x080df608
 8017d30:	080df610 	.word	0x080df610
 8017d34:	2001e238 	.word	0x2001e238
            } else if (hs->post_content_len_left == 0) {
 8017d38:	9b07      	ldr	r3, [sp, #28]
 8017d3a:	b303      	cbz	r3, 8017d7e <http_recv+0x3ee>
        if (hs->req != NULL) {
 8017d3c:	6a28      	ldr	r0, [r5, #32]
 8017d3e:	b398      	cbz	r0, 8017da8 <http_recv+0x418>
          pbuf_free(hs->req);
 8017d40:	f002 f946 	bl	8019fd0 <pbuf_free>
          hs->req = NULL;
 8017d44:	2300      	movs	r3, #0
      pbuf_free(p);
 8017d46:	4620      	mov	r0, r4
          hs->req = NULL;
 8017d48:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8017d4a:	f002 f941 	bl	8019fd0 <pbuf_free>
      if (parsed == ERR_OK) {
 8017d4e:	e775      	b.n	8017c3c <http_recv+0x2ac>
        if (content_len >= 0) {
 8017d50:	f6bf aeed 	bge.w	8017b2e <http_recv+0x19e>
              *sp1 = ' ';
 8017d54:	2320      	movs	r3, #32
 8017d56:	9a04      	ldr	r2, [sp, #16]
 8017d58:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8017d5a:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8017d5c:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8017d60:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8017d62:	e75e      	b.n	8017c22 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8017d64:	4652      	mov	r2, sl
 8017d66:	4658      	mov	r0, fp
 8017d68:	4915      	ldr	r1, [pc, #84]	; (8017dc0 <http_recv+0x430>)
 8017d6a:	f000 f8b3 	bl	8017ed4 <lwip_strnstr>
        if (is_post) {
 8017d6e:	e758      	b.n	8017c22 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 8017d70:	463a      	mov	r2, r7
 8017d72:	4659      	mov	r1, fp
 8017d74:	4628      	mov	r0, r5
 8017d76:	f7ff f8cb 	bl	8016f10 <http_find_file>
 8017d7a:	4607      	mov	r7, r0
 8017d7c:	e721      	b.n	8017bc2 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8017d7e:	9907      	ldr	r1, [sp, #28]
 8017d80:	2241      	movs	r2, #65	; 0x41
 8017d82:	4608      	mov	r0, r1
 8017d84:	f001 ff6e 	bl	8019c64 <pbuf_alloc>
 8017d88:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 8017d8a:	4628      	mov	r0, r5
 8017d8c:	f7ff f9b0 	bl	80170f0 <http_post_rxpbuf>
 8017d90:	4607      	mov	r7, r0
 8017d92:	e716      	b.n	8017bc2 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 8017d94:	463a      	mov	r2, r7
 8017d96:	490b      	ldr	r1, [pc, #44]	; (8017dc4 <http_recv+0x434>)
 8017d98:	4640      	mov	r0, r8
 8017d9a:	f000 f89b 	bl	8017ed4 <lwip_strnstr>
            hs->keepalive = 1;
 8017d9e:	3800      	subs	r0, #0
 8017da0:	9b05      	ldr	r3, [sp, #20]
 8017da2:	bf18      	it	ne
 8017da4:	2001      	movne	r0, #1
 8017da6:	e67b      	b.n	8017aa0 <http_recv+0x110>
      pbuf_free(p);
 8017da8:	4620      	mov	r0, r4
 8017daa:	f002 f911 	bl	8019fd0 <pbuf_free>
      if (parsed == ERR_OK) {
 8017dae:	e745      	b.n	8017c3c <http_recv+0x2ac>
              *sp1 = ' ';
 8017db0:	2320      	movs	r3, #32
 8017db2:	9a04      	ldr	r2, [sp, #16]
 8017db4:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8017db6:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8017db8:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8017dbc:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 8017dbe:	e5fd      	b.n	80179bc <http_recv+0x2c>
 8017dc0:	08029eb4 	.word	0x08029eb4
 8017dc4:	080df628 	.word	0x080df628

08017dc8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8017dc8:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8017dca:	202e      	movs	r0, #46	; 0x2e
 8017dcc:	f003 fcb8 	bl	801b740 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8017dd0:	b358      	cbz	r0, 8017e2a <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8017dd2:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8017dd4:	2101      	movs	r1, #1
 8017dd6:	f002 fe79 	bl	801aacc <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8017dda:	2250      	movs	r2, #80	; 0x50
 8017ddc:	4917      	ldr	r1, [pc, #92]	; (8017e3c <httpd_init+0x74>)
 8017dde:	4620      	mov	r0, r4
 8017de0:	f002 fc48 	bl	801a674 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8017de4:	b958      	cbnz	r0, 8017dfe <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 8017de6:	4620      	mov	r0, r4
 8017de8:	21ff      	movs	r1, #255	; 0xff
 8017dea:	f002 fd25 	bl	801a838 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8017dee:	4604      	mov	r4, r0
 8017df0:	b198      	cbz	r0, 8017e1a <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 8017df2:	4620      	mov	r0, r4
 8017df4:	4912      	ldr	r1, [pc, #72]	; (8017e40 <httpd_init+0x78>)
}
 8017df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 8017dfa:	f002 bef5 	b.w	801abe8 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8017dfe:	4b11      	ldr	r3, [pc, #68]	; (8017e44 <httpd_init+0x7c>)
 8017e00:	f640 2257 	movw	r2, #2647	; 0xa57
 8017e04:	4910      	ldr	r1, [pc, #64]	; (8017e48 <httpd_init+0x80>)
 8017e06:	4811      	ldr	r0, [pc, #68]	; (8017e4c <httpd_init+0x84>)
 8017e08:	f00c fb58 	bl	80244bc <iprintf>
    pcb = altcp_listen(pcb);
 8017e0c:	4620      	mov	r0, r4
 8017e0e:	21ff      	movs	r1, #255	; 0xff
 8017e10:	f002 fd12 	bl	801a838 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8017e14:	4604      	mov	r4, r0
 8017e16:	2800      	cmp	r0, #0
 8017e18:	d1eb      	bne.n	8017df2 <httpd_init+0x2a>
 8017e1a:	4b0a      	ldr	r3, [pc, #40]	; (8017e44 <httpd_init+0x7c>)
 8017e1c:	f640 2259 	movw	r2, #2649	; 0xa59
 8017e20:	490b      	ldr	r1, [pc, #44]	; (8017e50 <httpd_init+0x88>)
 8017e22:	480a      	ldr	r0, [pc, #40]	; (8017e4c <httpd_init+0x84>)
 8017e24:	f00c fb4a 	bl	80244bc <iprintf>
 8017e28:	e7e3      	b.n	8017df2 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8017e2a:	4b06      	ldr	r3, [pc, #24]	; (8017e44 <httpd_init+0x7c>)
 8017e2c:	f640 2272 	movw	r2, #2674	; 0xa72
 8017e30:	4908      	ldr	r1, [pc, #32]	; (8017e54 <httpd_init+0x8c>)
 8017e32:	4806      	ldr	r0, [pc, #24]	; (8017e4c <httpd_init+0x84>)
}
 8017e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8017e38:	f00c bb40 	b.w	80244bc <iprintf>
 8017e3c:	080e1ff0 	.word	0x080e1ff0
 8017e40:	08016cb9 	.word	0x08016cb9
 8017e44:	080df480 	.word	0x080df480
 8017e48:	080df69c 	.word	0x080df69c
 8017e4c:	0802ac68 	.word	0x0802ac68
 8017e50:	080df6b8 	.word	0x080df6b8
 8017e54:	080df680 	.word	0x080df680

08017e58 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8017e58:	b570      	push	{r4, r5, r6, lr}
 8017e5a:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8017e5c:	4606      	mov	r6, r0
{
 8017e5e:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8017e60:	b1c8      	cbz	r0, 8017e96 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 8017e62:	4b11      	ldr	r3, [pc, #68]	; (8017ea8 <http_set_ssi_handler+0x50>)
 8017e64:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8017e66:	b175      	cbz	r5, 8017e86 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8017e68:	2c00      	cmp	r4, #0
 8017e6a:	dd04      	ble.n	8017e76 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 8017e6c:	4a0f      	ldr	r2, [pc, #60]	; (8017eac <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 8017e6e:	4b10      	ldr	r3, [pc, #64]	; (8017eb0 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 8017e70:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 8017e72:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8017e74:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8017e76:	4b0f      	ldr	r3, [pc, #60]	; (8017eb4 <http_set_ssi_handler+0x5c>)
 8017e78:	f640 229f 	movw	r2, #2719	; 0xa9f
 8017e7c:	490e      	ldr	r1, [pc, #56]	; (8017eb8 <http_set_ssi_handler+0x60>)
 8017e7e:	480f      	ldr	r0, [pc, #60]	; (8017ebc <http_set_ssi_handler+0x64>)
 8017e80:	f00c fb1c 	bl	80244bc <iprintf>
 8017e84:	e7f2      	b.n	8017e6c <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 8017e86:	4b0b      	ldr	r3, [pc, #44]	; (8017eb4 <http_set_ssi_handler+0x5c>)
 8017e88:	f640 229e 	movw	r2, #2718	; 0xa9e
 8017e8c:	490c      	ldr	r1, [pc, #48]	; (8017ec0 <http_set_ssi_handler+0x68>)
 8017e8e:	480b      	ldr	r0, [pc, #44]	; (8017ebc <http_set_ssi_handler+0x64>)
 8017e90:	f00c fb14 	bl	80244bc <iprintf>
 8017e94:	e7e8      	b.n	8017e68 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8017e96:	4b07      	ldr	r3, [pc, #28]	; (8017eb4 <http_set_ssi_handler+0x5c>)
 8017e98:	f640 2297 	movw	r2, #2711	; 0xa97
 8017e9c:	4909      	ldr	r1, [pc, #36]	; (8017ec4 <http_set_ssi_handler+0x6c>)
 8017e9e:	4807      	ldr	r0, [pc, #28]	; (8017ebc <http_set_ssi_handler+0x64>)
 8017ea0:	f00c fb0c 	bl	80244bc <iprintf>
 8017ea4:	e7dd      	b.n	8017e62 <http_set_ssi_handler+0xa>
 8017ea6:	bf00      	nop
 8017ea8:	2001e67c 	.word	0x2001e67c
 8017eac:	2001e680 	.word	0x2001e680
 8017eb0:	2001e278 	.word	0x2001e278
 8017eb4:	080df480 	.word	0x080df480
 8017eb8:	080df700 	.word	0x080df700
 8017ebc:	0802ac68 	.word	0x0802ac68
 8017ec0:	080df6f0 	.word	0x080df6f0
 8017ec4:	080df6d8 	.word	0x080df6d8

08017ec8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8017ec8:	ba40      	rev16	r0, r0
}
 8017eca:	b280      	uxth	r0, r0
 8017ecc:	4770      	bx	lr
 8017ece:	bf00      	nop

08017ed0 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8017ed0:	ba00      	rev	r0, r0
 8017ed2:	4770      	bx	lr

08017ed4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8017ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ed8:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 8017eda:	4608      	mov	r0, r1
{
 8017edc:	4688      	mov	r8, r1
 8017ede:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8017ee0:	f7e8 f9b8 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8017ee4:	b1c0      	cbz	r0, 8017f18 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8017ee6:	4605      	mov	r5, r0
 8017ee8:	7820      	ldrb	r0, [r4, #0]
 8017eea:	b1b0      	cbz	r0, 8017f1a <lwip_strnstr+0x46>
 8017eec:	4426      	add	r6, r4
 8017eee:	1962      	adds	r2, r4, r5
 8017ef0:	4296      	cmp	r6, r2
 8017ef2:	d314      	bcc.n	8017f1e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8017ef4:	f898 7000 	ldrb.w	r7, [r8]
 8017ef8:	e005      	b.n	8017f06 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8017efa:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8017efe:	1962      	adds	r2, r4, r5
 8017f00:	b158      	cbz	r0, 8017f1a <lwip_strnstr+0x46>
 8017f02:	4296      	cmp	r6, r2
 8017f04:	d30b      	bcc.n	8017f1e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8017f06:	4287      	cmp	r7, r0
 8017f08:	d1f7      	bne.n	8017efa <lwip_strnstr+0x26>
 8017f0a:	4620      	mov	r0, r4
 8017f0c:	462a      	mov	r2, r5
 8017f0e:	4641      	mov	r1, r8
 8017f10:	f00d fa46 	bl	80253a0 <strncmp>
 8017f14:	2800      	cmp	r0, #0
 8017f16:	d1f0      	bne.n	8017efa <lwip_strnstr+0x26>
 8017f18:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 8017f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8017f1e:	2000      	movs	r0, #0
}
 8017f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f24 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8017f24:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8017f28:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8017f2c:	4293      	cmp	r3, r2
 8017f2e:	d01c      	beq.n	8017f6a <lwip_stricmp+0x46>
 8017f30:	f043 0c20 	orr.w	ip, r3, #32
{
 8017f34:	b500      	push	{lr}
 8017f36:	f042 0e20 	orr.w	lr, r2, #32
 8017f3a:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8017f3e:	2a19      	cmp	r2, #25
 8017f40:	d810      	bhi.n	8017f64 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8017f42:	45f4      	cmp	ip, lr
 8017f44:	d10e      	bne.n	8017f64 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8017f46:	b1a3      	cbz	r3, 8017f72 <lwip_stricmp+0x4e>
    c1 = *str1++;
 8017f48:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8017f4c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8017f50:	4293      	cmp	r3, r2
 8017f52:	d0f8      	beq.n	8017f46 <lwip_stricmp+0x22>
 8017f54:	f043 0c20 	orr.w	ip, r3, #32
 8017f58:	f042 0e20 	orr.w	lr, r2, #32
 8017f5c:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8017f60:	2a19      	cmp	r2, #25
 8017f62:	d9ee      	bls.n	8017f42 <lwip_stricmp+0x1e>
        return 1;
 8017f64:	2001      	movs	r0, #1
  return 0;
}
 8017f66:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d1da      	bne.n	8017f24 <lwip_stricmp>
  return 0;
 8017f6e:	4618      	mov	r0, r3
}
 8017f70:	4770      	bx	lr
  return 0;
 8017f72:	4618      	mov	r0, r3
}
 8017f74:	f85d fb04 	ldr.w	pc, [sp], #4

08017f78 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8017f78:	4684      	mov	ip, r0
 8017f7a:	b570      	push	{r4, r5, r6, lr}
 8017f7c:	e004      	b.n	8017f88 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8017f7e:	42b4      	cmp	r4, r6
 8017f80:	d113      	bne.n	8017faa <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 8017f82:	42e8      	cmn	r0, r5
 8017f84:	d013      	beq.n	8017fae <lwip_strnicmp+0x36>
 8017f86:	b193      	cbz	r3, 8017fae <lwip_strnicmp+0x36>
    c1 = *str1++;
 8017f88:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 8017f8c:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 8017f90:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8017f94:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 8017f98:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 8017f9a:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8017f9e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 8017fa2:	d0ee      	beq.n	8017f82 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8017fa4:	f1be 0f19 	cmp.w	lr, #25
 8017fa8:	d9e9      	bls.n	8017f7e <lwip_strnicmp+0x6>
        return 1;
 8017faa:	2001      	movs	r0, #1
  return 0;
}
 8017fac:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 8017fae:	2000      	movs	r0, #0
}
 8017fb0:	bd70      	pop	{r4, r5, r6, pc}
 8017fb2:	bf00      	nop

08017fb4 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8017fb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fb8:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8017fba:	4f24      	ldr	r7, [pc, #144]	; (801804c <dns_call_found+0x98>)
 8017fbc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8017fc0:	4c23      	ldr	r4, [pc, #140]	; (8018050 <dns_call_found+0x9c>)
{
 8017fc2:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8017fc4:	012e      	lsls	r6, r5, #4
 8017fc6:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 8017fca:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 8017fce:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8017fd2:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8017fd6:	6823      	ldr	r3, [r4, #0]
 8017fd8:	b143      	cbz	r3, 8017fec <dns_call_found+0x38>
 8017fda:	7a22      	ldrb	r2, [r4, #8]
 8017fdc:	42aa      	cmp	r2, r5
 8017fde:	d105      	bne.n	8017fec <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8017fe0:	6862      	ldr	r2, [r4, #4]
 8017fe2:	4651      	mov	r1, sl
 8017fe4:	4640      	mov	r0, r8
 8017fe6:	4798      	blx	r3
      dns_requests[i].found = NULL;
 8017fe8:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8017fec:	340c      	adds	r4, #12
 8017fee:	454c      	cmp	r4, r9
 8017ff0:	d1f1      	bne.n	8017fd6 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8017ff2:	1973      	adds	r3, r6, r5
 8017ff4:	2400      	movs	r4, #0
 8017ff6:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8017ffa:	4f14      	ldr	r7, [pc, #80]	; (801804c <dns_call_found+0x98>)
 8017ffc:	7bd9      	ldrb	r1, [r3, #15]
 8017ffe:	463a      	mov	r2, r7
    if (i == idx) {
 8018000:	b2e3      	uxtb	r3, r4
 8018002:	3401      	adds	r4, #1
 8018004:	429d      	cmp	r5, r3
 8018006:	d002      	beq.n	801800e <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8018008:	7a93      	ldrb	r3, [r2, #10]
 801800a:	2b02      	cmp	r3, #2
 801800c:	d015      	beq.n	801803a <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801800e:	2c04      	cmp	r4, #4
 8018010:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8018014:	d1f4      	bne.n	8018000 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8018016:	2903      	cmp	r1, #3
 8018018:	d80d      	bhi.n	8018036 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801801a:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801801c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8018054 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018020:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8018024:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8018028:	f007 f9aa 	bl	801f380 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801802c:	2200      	movs	r2, #0
 801802e:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8018030:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018032:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8018036:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801803a:	7bd3      	ldrb	r3, [r2, #15]
 801803c:	428b      	cmp	r3, r1
 801803e:	d1e6      	bne.n	801800e <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8018040:	4435      	add	r5, r6
 8018042:	2304      	movs	r3, #4
 8018044:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8018048:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801804a:	e7f4      	b.n	8018036 <dns_call_found+0x82>
 801804c:	2001e6d4 	.word	0x2001e6d4
 8018050:	2001e698 	.word	0x2001e698
 8018054:	2001e688 	.word	0x2001e688

08018058 <dns_send.isra.0>:
dns_send(u8_t idx)
 8018058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801805c:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 801805e:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018060:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 8018064:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018066:	9301      	str	r3, [sp, #4]
 8018068:	4b56      	ldr	r3, [pc, #344]	; (80181c4 <dns_send.isra.0+0x16c>)
 801806a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801806e:	7ae3      	ldrb	r3, [r4, #11]
 8018070:	2b01      	cmp	r3, #1
 8018072:	d907      	bls.n	8018084 <dns_send.isra.0+0x2c>
 8018074:	4b54      	ldr	r3, [pc, #336]	; (80181c8 <dns_send.isra.0+0x170>)
 8018076:	f240 22fa 	movw	r2, #762	; 0x2fa
 801807a:	4954      	ldr	r1, [pc, #336]	; (80181cc <dns_send.isra.0+0x174>)
 801807c:	4854      	ldr	r0, [pc, #336]	; (80181d0 <dns_send.isra.0+0x178>)
 801807e:	f00c fa1d 	bl	80244bc <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8018082:	7ae3      	ldrb	r3, [r4, #11]
 8018084:	4a53      	ldr	r2, [pc, #332]	; (80181d4 <dns_send.isra.0+0x17c>)
 8018086:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801808a:	2c00      	cmp	r4, #0
 801808c:	f000 808b 	beq.w	80181a6 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8018090:	9b01      	ldr	r3, [sp, #4]
 8018092:	4e4c      	ldr	r6, [pc, #304]	; (80181c4 <dns_send.isra.0+0x16c>)
 8018094:	eb03 0409 	add.w	r4, r3, r9
 8018098:	0124      	lsls	r4, r4, #4
 801809a:	f104 0510 	add.w	r5, r4, #16
 801809e:	4435      	add	r5, r6
 80180a0:	4628      	mov	r0, r5
 80180a2:	f7e8 f8d7 	bl	8000254 <strlen>
 80180a6:	3012      	adds	r0, #18
 80180a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80180ac:	b281      	uxth	r1, r0
 80180ae:	2036      	movs	r0, #54	; 0x36
 80180b0:	f001 fdd8 	bl	8019c64 <pbuf_alloc>
  if (p != NULL) {
 80180b4:	4680      	mov	r8, r0
 80180b6:	2800      	cmp	r0, #0
 80180b8:	d06d      	beq.n	8018196 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 80180ba:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80180bc:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 80180be:	260c      	movs	r6, #12
    --hostname;
 80180c0:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 80180c2:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 80180c4:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80180c8:	9305      	str	r3, [sp, #20]
 80180ca:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 80180ce:	f7ff fefb 	bl	8017ec8 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 80180d2:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 80180d4:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80180d8:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 80180da:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 80180de:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80180e2:	4632      	mov	r2, r6
 80180e4:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 80180e6:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80180ea:	f002 f865 	bl	801a1b8 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80180ee:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 80180f0:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80180f2:	2b2e      	cmp	r3, #46	; 0x2e
 80180f4:	d052      	beq.n	801819c <dns_send.isra.0+0x144>
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d050      	beq.n	801819c <dns_send.isra.0+0x144>
      ++hostname;
 80180fa:	463d      	mov	r5, r7
 80180fc:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 8018100:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018102:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8018106:	2b2e      	cmp	r3, #46	; 0x2e
 8018108:	b2e4      	uxtb	r4, r4
 801810a:	d001      	beq.n	8018110 <dns_send.isra.0+0xb8>
 801810c:	2b00      	cmp	r3, #0
 801810e:	d1f7      	bne.n	8018100 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 8018110:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8018114:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 8018116:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 801811a:	4433      	add	r3, r6
 801811c:	4553      	cmp	r3, sl
 801811e:	dc37      	bgt.n	8018190 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 8018120:	4622      	mov	r2, r4
 8018122:	4631      	mov	r1, r6
 8018124:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8018126:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8018128:	f002 f91e 	bl	801a368 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801812c:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 801812e:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8018130:	465a      	mov	r2, fp
 8018132:	4639      	mov	r1, r7
 8018134:	b29b      	uxth	r3, r3
 8018136:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8018138:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801813a:	f002 f8a3 	bl	801a284 <pbuf_take_at>
    } while (*hostname != 0);
 801813e:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8018140:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8018142:	2a00      	cmp	r2, #0
 8018144:	d1d3      	bne.n	80180ee <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 8018146:	4631      	mov	r1, r6
 8018148:	4640      	mov	r0, r8
 801814a:	f002 f90d 	bl	801a368 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801814e:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 8018152:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8018154:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8018156:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801815a:	4640      	mov	r0, r8
 801815c:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 801815e:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8018162:	2204      	movs	r2, #4
 8018164:	f002 f88e 	bl	801a284 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8018168:	9b01      	ldr	r3, [sp, #4]
 801816a:	4a16      	ldr	r2, [pc, #88]	; (80181c4 <dns_send.isra.0+0x16c>)
 801816c:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801816e:	4919      	ldr	r1, [pc, #100]	; (80181d4 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 8018170:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8018172:	4b19      	ldr	r3, [pc, #100]	; (80181d8 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 8018174:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 8018178:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801817c:	f89b 000f 	ldrb.w	r0, [fp, #15]
 8018180:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8018184:	4641      	mov	r1, r8
 8018186:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801818a:	2335      	movs	r3, #53	; 0x35
 801818c:	f007 f84c 	bl	801f228 <udp_sendto>
    pbuf_free(p);
 8018190:	4640      	mov	r0, r8
 8018192:	f001 ff1d 	bl	8019fd0 <pbuf_free>
}
 8018196:	b007      	add	sp, #28
 8018198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801819c:	2300      	movs	r3, #0
      ++hostname;
 801819e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80181a0:	469b      	mov	fp, r3
 80181a2:	461c      	mov	r4, r3
 80181a4:	e7b9      	b.n	801811a <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 80181a6:	4648      	mov	r0, r9
 80181a8:	4621      	mov	r1, r4
 80181aa:	f7ff ff03 	bl	8017fb4 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 80181ae:	9b01      	ldr	r3, [sp, #4]
 80181b0:	444b      	add	r3, r9
 80181b2:	4699      	mov	r9, r3
 80181b4:	4b03      	ldr	r3, [pc, #12]	; (80181c4 <dns_send.isra.0+0x16c>)
 80181b6:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 80181ba:	f88b 400a 	strb.w	r4, [fp, #10]
}
 80181be:	b007      	add	sp, #28
 80181c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181c4:	2001e6d4 	.word	0x2001e6d4
 80181c8:	080df7d8 	.word	0x080df7d8
 80181cc:	080df808 	.word	0x080df808
 80181d0:	0802ac68 	.word	0x0802ac68
 80181d4:	2001e6cc 	.word	0x2001e6cc
 80181d8:	2001e688 	.word	0x2001e688

080181dc <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80181dc:	2803      	cmp	r0, #3
{
 80181de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181e2:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80181e4:	d846      	bhi.n	8018274 <dns_check_entry+0x98>

  switch (entry->state) {
 80181e6:	4e3a      	ldr	r6, [pc, #232]	; (80182d0 <dns_check_entry+0xf4>)
 80181e8:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 80181ec:	0125      	lsls	r5, r4, #4
 80181ee:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 80181f2:	7a9b      	ldrb	r3, [r3, #10]
 80181f4:	2b03      	cmp	r3, #3
 80181f6:	d861      	bhi.n	80182bc <dns_check_entry+0xe0>
 80181f8:	e8df f003 	tbb	[pc, r3]
 80181fc:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8018200:	192b      	adds	r3, r5, r4
 8018202:	011b      	lsls	r3, r3, #4
 8018204:	58f2      	ldr	r2, [r6, r3]
 8018206:	2a00      	cmp	r2, #0
 8018208:	d140      	bne.n	801828c <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 801820a:	442c      	add	r4, r5
 801820c:	2300      	movs	r3, #0
 801820e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8018212:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8018214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018218:	4f2e      	ldr	r7, [pc, #184]	; (80182d4 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 801821a:	f00c f9f3 	bl	8024604 <rand>
 801821e:	4b2c      	ldr	r3, [pc, #176]	; (80182d0 <dns_check_entry+0xf4>)
 8018220:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8018222:	7a9a      	ldrb	r2, [r3, #10]
 8018224:	2a02      	cmp	r2, #2
 8018226:	d02d      	beq.n	8018284 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8018228:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801822c:	429f      	cmp	r7, r3
 801822e:	d1f8      	bne.n	8018222 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 8018230:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 8018232:	2202      	movs	r2, #2
      entry->tmr = 1;
 8018234:	2301      	movs	r3, #1
      err = dns_send(i);
 8018236:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 8018238:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 801823c:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 801823e:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 8018240:	81b3      	strh	r3, [r6, #12]
}
 8018242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8018246:	f7ff bf07 	b.w	8018058 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 801824a:	192a      	adds	r2, r5, r4
 801824c:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8018250:	7b13      	ldrb	r3, [r2, #12]
 8018252:	3b01      	subs	r3, #1
 8018254:	b2db      	uxtb	r3, r3
 8018256:	7313      	strb	r3, [r2, #12]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d1db      	bne.n	8018214 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801825c:	7b53      	ldrb	r3, [r2, #13]
 801825e:	3301      	adds	r3, #1
 8018260:	b2db      	uxtb	r3, r3
 8018262:	2b04      	cmp	r3, #4
 8018264:	7353      	strb	r3, [r2, #13]
 8018266:	d016      	beq.n	8018296 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 8018268:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 801826a:	4620      	mov	r0, r4
}
 801826c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 8018270:	f7ff bef2 	b.w	8018058 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8018274:	4b18      	ldr	r3, [pc, #96]	; (80182d8 <dns_check_entry+0xfc>)
 8018276:	f240 421c 	movw	r2, #1052	; 0x41c
 801827a:	4918      	ldr	r1, [pc, #96]	; (80182dc <dns_check_entry+0x100>)
 801827c:	4818      	ldr	r0, [pc, #96]	; (80182e0 <dns_check_entry+0x104>)
 801827e:	f00c f91d 	bl	80244bc <iprintf>
 8018282:	e7b0      	b.n	80181e6 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8018284:	891a      	ldrh	r2, [r3, #8]
 8018286:	428a      	cmp	r2, r1
 8018288:	d1ce      	bne.n	8018228 <dns_check_entry+0x4c>
 801828a:	e7c6      	b.n	801821a <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801828c:	3a01      	subs	r2, #1
 801828e:	50f2      	str	r2, [r6, r3]
 8018290:	2a00      	cmp	r2, #0
 8018292:	d0ba      	beq.n	801820a <dns_check_entry+0x2e>
 8018294:	e7be      	b.n	8018214 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8018296:	7ad3      	ldrb	r3, [r2, #11]
 8018298:	b913      	cbnz	r3, 80182a0 <dns_check_entry+0xc4>
 801829a:	4b12      	ldr	r3, [pc, #72]	; (80182e4 <dns_check_entry+0x108>)
 801829c:	685b      	ldr	r3, [r3, #4]
 801829e:	b94b      	cbnz	r3, 80182b4 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 80182a0:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 80182a2:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 80182a4:	2100      	movs	r1, #0
 80182a6:	f7ff fe85 	bl	8017fb4 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 80182aa:	2300      	movs	r3, #0
 80182ac:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80182b0:	72b3      	strb	r3, [r6, #10]
            break;
 80182b2:	e7af      	b.n	8018214 <dns_check_entry+0x38>
            entry->server_idx++;
 80182b4:	2301      	movs	r3, #1
 80182b6:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 80182b8:	8193      	strh	r3, [r2, #12]
 80182ba:	e7d6      	b.n	801826a <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80182bc:	4b06      	ldr	r3, [pc, #24]	; (80182d8 <dns_check_entry+0xfc>)
 80182be:	f240 425b 	movw	r2, #1115	; 0x45b
 80182c2:	4909      	ldr	r1, [pc, #36]	; (80182e8 <dns_check_entry+0x10c>)
 80182c4:	4806      	ldr	r0, [pc, #24]	; (80182e0 <dns_check_entry+0x104>)
}
 80182c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80182ca:	f00c b8f7 	b.w	80244bc <iprintf>
 80182ce:	bf00      	nop
 80182d0:	2001e6d4 	.word	0x2001e6d4
 80182d4:	2001eb14 	.word	0x2001eb14
 80182d8:	080df7d8 	.word	0x080df7d8
 80182dc:	080df820 	.word	0x080df820
 80182e0:	0802ac68 	.word	0x0802ac68
 80182e4:	2001e6cc 	.word	0x2001e6cc
 80182e8:	080df83c 	.word	0x080df83c

080182ec <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80182ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182f0:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 80182f2:	8912      	ldrh	r2, [r2, #8]
{
 80182f4:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 80182f6:	2a0f      	cmp	r2, #15
 80182f8:	d805      	bhi.n	8018306 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 80182fa:	4620      	mov	r0, r4
 80182fc:	f001 fe68 	bl	8019fd0 <pbuf_free>
  return;
}
 8018300:	b00d      	add	sp, #52	; 0x34
 8018302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8018306:	4699      	mov	r9, r3
 8018308:	220c      	movs	r2, #12
 801830a:	2300      	movs	r3, #0
 801830c:	a906      	add	r1, sp, #24
 801830e:	4620      	mov	r0, r4
 8018310:	f001 ff02 	bl	801a118 <pbuf_copy_partial>
 8018314:	280c      	cmp	r0, #12
 8018316:	4605      	mov	r5, r0
 8018318:	d1ef      	bne.n	80182fa <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 801831a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8018610 <dns_recv+0x324>
 801831e:	2600      	movs	r6, #0
 8018320:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8018324:	f7ff fdd0 	bl	8017ec8 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8018328:	4643      	mov	r3, r8
 801832a:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 801832c:	7a9a      	ldrb	r2, [r3, #10]
 801832e:	2a02      	cmp	r2, #2
 8018330:	d008      	beq.n	8018344 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8018332:	3601      	adds	r6, #1
 8018334:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8018338:	2e04      	cmp	r6, #4
 801833a:	d0de      	beq.n	80182fa <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 801833c:	7a9a      	ldrb	r2, [r3, #10]
 801833e:	b2f7      	uxtb	r7, r6
 8018340:	2a02      	cmp	r2, #2
 8018342:	d1f6      	bne.n	8018332 <dns_recv+0x46>
 8018344:	891a      	ldrh	r2, [r3, #8]
 8018346:	4282      	cmp	r2, r0
 8018348:	d1f3      	bne.n	8018332 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 801834a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801834e:	f7ff fdbb 	bl	8017ec8 <lwip_htons>
 8018352:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8018354:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8018358:	f7ff fdb6 	bl	8017ec8 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 801835c:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 8018360:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 8018362:	09db      	lsrs	r3, r3, #7
 8018364:	d0c9      	beq.n	80182fa <dns_recv+0xe>
 8018366:	f1ba 0f01 	cmp.w	sl, #1
 801836a:	d1c6      	bne.n	80182fa <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 801836c:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 8018370:	49a5      	ldr	r1, [pc, #660]	; (8018608 <dns_recv+0x31c>)
 8018372:	f8d9 2000 	ldr.w	r2, [r9]
 8018376:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 801837a:	7adb      	ldrb	r3, [r3, #11]
 801837c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8018380:	429a      	cmp	r2, r3
 8018382:	d1ba      	bne.n	80182fa <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8018384:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8018388:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801838c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8018614 <dns_recv+0x328>
 8018390:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8018394:	f103 0210 	add.w	r2, r3, #16
 8018398:	9301      	str	r3, [sp, #4]
 801839a:	4442      	add	r2, r8
 801839c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 80183a0:	462e      	mov	r6, r5
 80183a2:	4627      	mov	r7, r4
 80183a4:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 80183a6:	4631      	mov	r1, r6
 80183a8:	4638      	mov	r0, r7
 80183aa:	f001 ffcd 	bl	801a348 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 80183ae:	2800      	cmp	r0, #0
 80183b0:	db2d      	blt.n	801840e <dns_recv+0x122>
 80183b2:	455e      	cmp	r6, fp
 80183b4:	d02b      	beq.n	801840e <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 80183b6:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 80183ba:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 80183bc:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 80183be:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 80183c0:	d025      	beq.n	801840e <dns_recv+0x122>
      while (n > 0) {
 80183c2:	b330      	cbz	r0, 8018412 <dns_recv+0x126>
 80183c4:	46aa      	mov	sl, r5
 80183c6:	182c      	adds	r4, r5, r0
 80183c8:	e01b      	b.n	8018402 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80183ca:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 80183ce:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80183d0:	f819 2000 	ldrb.w	r2, [r9, r0]
 80183d4:	4601      	mov	r1, r0
        ++query;
 80183d6:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80183d8:	f002 0203 	and.w	r2, r2, #3
 80183dc:	2a01      	cmp	r2, #1
 80183de:	f819 2003 	ldrb.w	r2, [r9, r3]
 80183e2:	f002 0203 	and.w	r2, r2, #3
 80183e6:	bf08      	it	eq
 80183e8:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 80183ec:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80183ee:	2a01      	cmp	r2, #1
 80183f0:	bf08      	it	eq
 80183f2:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 80183f4:	455e      	cmp	r6, fp
        response_offset++;
 80183f6:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 80183f8:	d009      	beq.n	801840e <dns_recv+0x122>
 80183fa:	4299      	cmp	r1, r3
 80183fc:	d107      	bne.n	801840e <dns_recv+0x122>
      while (n > 0) {
 80183fe:	4554      	cmp	r4, sl
 8018400:	d007      	beq.n	8018412 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 8018402:	4631      	mov	r1, r6
 8018404:	4638      	mov	r0, r7
 8018406:	f001 ff9f 	bl	801a348 <pbuf_try_get_at>
        if (c < 0) {
 801840a:	1e03      	subs	r3, r0, #0
 801840c:	dadd      	bge.n	80183ca <dns_recv+0xde>
 801840e:	463c      	mov	r4, r7
 8018410:	e773      	b.n	80182fa <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 8018412:	4631      	mov	r1, r6
 8018414:	4638      	mov	r0, r7
 8018416:	f001 ff97 	bl	801a348 <pbuf_try_get_at>
    if (n < 0) {
 801841a:	2800      	cmp	r0, #0
      ++query;
 801841c:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 8018420:	dbf5      	blt.n	801840e <dns_recv+0x122>
  } while (n != 0);
 8018422:	d1c0      	bne.n	80183a6 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 8018424:	4635      	mov	r5, r6
 8018426:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801842a:	463c      	mov	r4, r7
 801842c:	9e03      	ldr	r6, [sp, #12]
 801842e:	454d      	cmp	r5, r9
 8018430:	9f02      	ldr	r7, [sp, #8]
 8018432:	f43f af62 	beq.w	80182fa <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 8018436:	f105 0a01 	add.w	sl, r5, #1
 801843a:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 801843e:	45ca      	cmp	sl, r9
 8018440:	f43f af5b 	beq.w	80182fa <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8018444:	4653      	mov	r3, sl
 8018446:	2204      	movs	r2, #4
 8018448:	a904      	add	r1, sp, #16
 801844a:	4620      	mov	r0, r4
 801844c:	f001 fe64 	bl	801a118 <pbuf_copy_partial>
 8018450:	2804      	cmp	r0, #4
 8018452:	f47f af52 	bne.w	80182fa <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8018456:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801845a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801845e:	f47f af4c 	bne.w	80182fa <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8018462:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8018466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801846a:	f47f af46 	bne.w	80182fa <dns_recv+0xe>
 801846e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8018472:	459a      	cmp	sl, r3
 8018474:	f63f af41 	bhi.w	80182fa <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8018478:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801847c:	071b      	lsls	r3, r3, #28
 801847e:	d017      	beq.n	80184b0 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8018480:	f44f 7388 	mov.w	r3, #272	; 0x110
 8018484:	fb03 8306 	mla	r3, r3, r6, r8
 8018488:	7adb      	ldrb	r3, [r3, #11]
 801848a:	2b00      	cmp	r3, #0
 801848c:	f040 80ae 	bne.w	80185ec <dns_recv+0x300>
 8018490:	4b5d      	ldr	r3, [pc, #372]	; (8018608 <dns_recv+0x31c>)
 8018492:	685b      	ldr	r3, [r3, #4]
 8018494:	2b00      	cmp	r3, #0
 8018496:	f000 80a9 	beq.w	80185ec <dns_recv+0x300>
            entry->tmr     = 1;
 801849a:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 801849e:	4638      	mov	r0, r7
            entry->tmr     = 1;
 80184a0:	fb03 8606 	mla	r6, r3, r6, r8
 80184a4:	f240 3301 	movw	r3, #769	; 0x301
 80184a8:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 80184aa:	f7ff fe97 	bl	80181dc <dns_check_entry>
            goto ignore_packet;
 80184ae:	e724      	b.n	80182fa <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 80184b0:	3505      	adds	r5, #5
 80184b2:	f8dd a000 	ldr.w	sl, [sp]
 80184b6:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 80184b8:	f1ba 0f00 	cmp.w	sl, #0
 80184bc:	f000 8096 	beq.w	80185ec <dns_recv+0x300>
 80184c0:	8923      	ldrh	r3, [r4, #8]
 80184c2:	42ab      	cmp	r3, r5
 80184c4:	d80b      	bhi.n	80184de <dns_recv+0x1f2>
 80184c6:	e091      	b.n	80185ec <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 80184c8:	8922      	ldrh	r2, [r4, #8]
 80184ca:	4293      	cmp	r3, r2
 80184cc:	f6bf af15 	bge.w	80182fa <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 80184d0:	4629      	mov	r1, r5
 80184d2:	f001 ff39 	bl	801a348 <pbuf_try_get_at>
    if (n < 0) {
 80184d6:	2800      	cmp	r0, #0
 80184d8:	f6ff af0f 	blt.w	80182fa <dns_recv+0xe>
  } while (n != 0);
 80184dc:	d017      	beq.n	801850e <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 80184de:	4629      	mov	r1, r5
 80184e0:	4620      	mov	r0, r4
 80184e2:	f001 ff31 	bl	801a348 <pbuf_try_get_at>
 80184e6:	f105 0b01 	add.w	fp, r5, #1
 80184ea:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 80184ec:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 80184ee:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 80184f2:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 80184f4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 80184f8:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 80184fa:	f6ff aefe 	blt.w	80182fa <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 80184fe:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 8018500:	f1bb 0f00 	cmp.w	fp, #0
 8018504:	f43f aef9 	beq.w	80182fa <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 8018508:	2ac0      	cmp	r2, #192	; 0xc0
 801850a:	d1dd      	bne.n	80184c8 <dns_recv+0x1dc>
 801850c:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 801850e:	454d      	cmp	r5, r9
 8018510:	f43f aef3 	beq.w	80182fa <dns_recv+0xe>
  return (u16_t)(offset + 1);
 8018514:	f105 0b01 	add.w	fp, r5, #1
 8018518:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 801851c:	45cb      	cmp	fp, r9
 801851e:	f43f aeec 	beq.w	80182fa <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8018522:	465b      	mov	r3, fp
 8018524:	220a      	movs	r2, #10
 8018526:	a909      	add	r1, sp, #36	; 0x24
 8018528:	4620      	mov	r0, r4
 801852a:	f001 fdf5 	bl	801a118 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 801852e:	280a      	cmp	r0, #10
 8018530:	f47f aee3 	bne.w	80182fa <dns_recv+0xe>
 8018534:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8018538:	459b      	cmp	fp, r3
 801853a:	f63f aede 	bhi.w	80182fa <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801853e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8018542:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8018544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8018548:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801854a:	d013      	beq.n	8018574 <dns_recv+0x288>
 801854c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8018550:	f7ff fcba 	bl	8017ec8 <lwip_htons>
 8018554:	4428      	add	r0, r5
 8018556:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801855a:	f6bf aece 	bge.w	80182fa <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801855e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 8018562:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8018566:	f7ff fcaf 	bl	8017ec8 <lwip_htons>
 801856a:	4405      	add	r5, r0
            --nanswers;
 801856c:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8018570:	b2ad      	uxth	r5, r5
            --nanswers;
 8018572:	e7a1      	b.n	80184b8 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8018574:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018578:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 801857c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018580:	d1e6      	bne.n	8018550 <dns_recv+0x264>
 8018582:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018586:	d1e3      	bne.n	8018550 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8018588:	462b      	mov	r3, r5
 801858a:	2204      	movs	r2, #4
 801858c:	a905      	add	r1, sp, #20
 801858e:	4620      	mov	r0, r4
 8018590:	f001 fdc2 	bl	801a118 <pbuf_copy_partial>
 8018594:	2804      	cmp	r0, #4
 8018596:	f47f aeb0 	bne.w	80182fa <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801859a:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801859e:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 80185a0:	fb03 f606 	mul.w	r6, r3, r6
 80185a4:	9b05      	ldr	r3, [sp, #20]
 80185a6:	eb08 0406 	add.w	r4, r8, r6
 80185aa:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 80185ac:	f001 fd10 	bl	8019fd0 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 80185b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80185b2:	f7ff fc8d 	bl	8017ed0 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 80185b6:	4a15      	ldr	r2, [pc, #84]	; (801860c <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 80185b8:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 80185ba:	9901      	ldr	r1, [sp, #4]
 80185bc:	4638      	mov	r0, r7
  entry->ttl = ttl;
 80185be:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 80185c0:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 80185c4:	bf28      	it	cs
 80185c6:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 80185c8:	4441      	add	r1, r8
  entry->ttl = ttl;
 80185ca:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 80185ce:	2303      	movs	r3, #3
 80185d0:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 80185d2:	f7ff fcef 	bl	8017fb4 <dns_call_found>
  if (entry->ttl == 0) {
 80185d6:	f858 3006 	ldr.w	r3, [r8, r6]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	f47f ae90 	bne.w	8018300 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 80185e0:	7aa2      	ldrb	r2, [r4, #10]
 80185e2:	2a03      	cmp	r2, #3
 80185e4:	f47f ae8c 	bne.w	8018300 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 80185e8:	72a3      	strb	r3, [r4, #10]
                  return;
 80185ea:	e689      	b.n	8018300 <dns_recv+0x14>
        pbuf_free(p);
 80185ec:	4620      	mov	r0, r4
 80185ee:	f001 fcef 	bl	8019fd0 <pbuf_free>
        dns_call_found(i, NULL);
 80185f2:	2100      	movs	r1, #0
 80185f4:	4638      	mov	r0, r7
 80185f6:	f7ff fcdd 	bl	8017fb4 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 80185fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80185fe:	2200      	movs	r2, #0
 8018600:	fb03 8606 	mla	r6, r3, r6, r8
 8018604:	72b2      	strb	r2, [r6, #10]
        return;
 8018606:	e67b      	b.n	8018300 <dns_recv+0x14>
 8018608:	2001e6cc 	.word	0x2001e6cc
 801860c:	00093a80 	.word	0x00093a80
 8018610:	2001e6d4 	.word	0x2001e6d4
 8018614:	080e224d 	.word	0x080e224d

08018618 <dns_init>:
}
 8018618:	4770      	bx	lr
 801861a:	bf00      	nop

0801861c <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 801861c:	2801      	cmp	r0, #1
 801861e:	d900      	bls.n	8018622 <dns_setserver+0x6>
}
 8018620:	4770      	bx	lr
    if (dnsserver != NULL) {
 8018622:	b121      	cbz	r1, 801862e <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 8018624:	4b05      	ldr	r3, [pc, #20]	; (801863c <dns_setserver+0x20>)
 8018626:	680a      	ldr	r2, [r1, #0]
 8018628:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 801862c:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 801862e:	4a04      	ldr	r2, [pc, #16]	; (8018640 <dns_setserver+0x24>)
 8018630:	4b02      	ldr	r3, [pc, #8]	; (801863c <dns_setserver+0x20>)
 8018632:	6812      	ldr	r2, [r2, #0]
 8018634:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8018638:	4770      	bx	lr
 801863a:	bf00      	nop
 801863c:	2001e6cc 	.word	0x2001e6cc
 8018640:	080e1ff0 	.word	0x080e1ff0

08018644 <dns_tmr>:
{
 8018644:	b508      	push	{r3, lr}
    dns_check_entry(i);
 8018646:	2000      	movs	r0, #0
 8018648:	f7ff fdc8 	bl	80181dc <dns_check_entry>
 801864c:	2001      	movs	r0, #1
 801864e:	f7ff fdc5 	bl	80181dc <dns_check_entry>
 8018652:	2002      	movs	r0, #2
 8018654:	f7ff fdc2 	bl	80181dc <dns_check_entry>
 8018658:	2003      	movs	r0, #3
}
 801865a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 801865e:	f7ff bdbd 	b.w	80181dc <dns_check_entry>
 8018662:	bf00      	nop

08018664 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8018664:	2900      	cmp	r1, #0
 8018666:	f000 812e 	beq.w	80188c6 <dns_gethostbyname_addrtype+0x262>
{
 801866a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 801866e:	fab0 f780 	clz	r7, r0
{
 8018672:	b083      	sub	sp, #12
 8018674:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 8018676:	097f      	lsrs	r7, r7, #5
 8018678:	2800      	cmp	r0, #0
 801867a:	f000 8103 	beq.w	8018884 <dns_gethostbyname_addrtype+0x220>
 801867e:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 8018680:	7803      	ldrb	r3, [r0, #0]
 8018682:	2b00      	cmp	r3, #0
 8018684:	f000 80fe 	beq.w	8018884 <dns_gethostbyname_addrtype+0x220>
 8018688:	4615      	mov	r5, r2
 801868a:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 801868c:	f7e7 fde2 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8018690:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 8018692:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8018694:	f200 80f6 	bhi.w	8018884 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8018698:	4641      	mov	r1, r8
 801869a:	4630      	mov	r0, r6
 801869c:	f009 fc62 	bl	8021f64 <ip4addr_aton>
 80186a0:	b118      	cbz	r0, 80186aa <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 80186a2:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 80186a4:	b003      	add	sp, #12
 80186a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186aa:	4f88      	ldr	r7, [pc, #544]	; (80188cc <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 80186ac:	4604      	mov	r4, r0
 80186ae:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80186b0:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 80186b4:	2b03      	cmp	r3, #3
 80186b6:	d03a      	beq.n	801872e <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80186b8:	3401      	adds	r4, #1
 80186ba:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 80186be:	2c04      	cmp	r4, #4
 80186c0:	d1f6      	bne.n	80186b0 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 80186c2:	4b83      	ldr	r3, [pc, #524]	; (80188d0 <dns_gethostbyname_addrtype+0x26c>)
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	f000 80f6 	beq.w	80188b8 <dns_gethostbyname_addrtype+0x254>
 80186cc:	2400      	movs	r4, #0
 80186ce:	f8df a20c 	ldr.w	sl, [pc, #524]	; 80188dc <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80186d2:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 80186d6:	fa5f f884 	uxtb.w	r8, r4
 80186da:	2b02      	cmp	r3, #2
 80186dc:	d040      	beq.n	8018760 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80186de:	3401      	adds	r4, #1
 80186e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80186e4:	2c04      	cmp	r4, #4
 80186e6:	d1f4      	bne.n	80186d2 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80186e8:	4a7a      	ldr	r2, [pc, #488]	; (80188d4 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 80186ea:	4623      	mov	r3, r4
 80186ec:	4f7a      	ldr	r7, [pc, #488]	; (80188d8 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80186ee:	2400      	movs	r4, #0
 80186f0:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 80186f2:	46a4      	mov	ip, r4
 80186f4:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 80186f6:	7a90      	ldrb	r0, [r2, #10]
 80186f8:	fa5f f884 	uxtb.w	r8, r4
 80186fc:	2800      	cmp	r0, #0
 80186fe:	d041      	beq.n	8018784 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 8018700:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8018702:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 8018706:	d023      	beq.n	8018750 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8018708:	2c04      	cmp	r4, #4
 801870a:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801870e:	d1f2      	bne.n	80186f6 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8018710:	2b04      	cmp	r3, #4
 8018712:	d007      	beq.n	8018724 <dns_gethostbyname_addrtype+0xc0>
 8018714:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8018718:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 801871c:	7aa2      	ldrb	r2, [r4, #10]
 801871e:	2a03      	cmp	r2, #3
 8018720:	f000 80ae 	beq.w	8018880 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 8018724:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018728:	b003      	add	sp, #12
 801872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 801872e:	4651      	mov	r1, sl
 8018730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018734:	4630      	mov	r0, r6
 8018736:	f7ff fc1f 	bl	8017f78 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801873a:	2800      	cmp	r0, #0
 801873c:	d1bc      	bne.n	80186b8 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 801873e:	4b66      	ldr	r3, [pc, #408]	; (80188d8 <dns_gethostbyname_addrtype+0x274>)
 8018740:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8018744:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8018748:	6863      	ldr	r3, [r4, #4]
 801874a:	f8c8 3000 	str.w	r3, [r8]
 801874e:	e7a9      	b.n	80186a4 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8018750:	7b90      	ldrb	r0, [r2, #14]
 8018752:	1a08      	subs	r0, r1, r0
 8018754:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 8018756:	4560      	cmp	r0, ip
 8018758:	d9d6      	bls.n	8018708 <dns_gethostbyname_addrtype+0xa4>
 801875a:	4643      	mov	r3, r8
 801875c:	4684      	mov	ip, r0
 801875e:	e7d3      	b.n	8018708 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8018760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018764:	4639      	mov	r1, r7
 8018766:	4630      	mov	r0, r6
 8018768:	f7ff fc06 	bl	8017f78 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801876c:	2800      	cmp	r0, #0
 801876e:	d1b6      	bne.n	80186de <dns_gethostbyname_addrtype+0x7a>
 8018770:	4b5a      	ldr	r3, [pc, #360]	; (80188dc <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 8018772:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8018774:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 8018776:	2a00      	cmp	r2, #0
 8018778:	f000 8091 	beq.w	801889e <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801877c:	3001      	adds	r0, #1
 801877e:	2804      	cmp	r0, #4
 8018780:	d1f7      	bne.n	8018772 <dns_gethostbyname_addrtype+0x10e>
 8018782:	e7ac      	b.n	80186de <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 8018784:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8018788:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801878c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80188dc <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 8018790:	2700      	movs	r7, #0
 8018792:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 8018794:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8018796:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 8018798:	b12b      	cbz	r3, 80187a6 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801879a:	3701      	adds	r7, #1
 801879c:	2f04      	cmp	r7, #4
 801879e:	d1f9      	bne.n	8018794 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 80187a0:	f04f 30ff 	mov.w	r0, #4294967295
 80187a4:	e7c0      	b.n	8018728 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 80187a6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 80187aa:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 80187ac:	f104 0010 	add.w	r0, r4, #16
 80187b0:	4631      	mov	r1, r6
  req->found = found;
 80187b2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 80187b6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 80187ba:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 80187bc:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 80187c0:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 80187c4:	2201      	movs	r2, #1
 80187c6:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 80187c8:	464a      	mov	r2, r9
 80187ca:	f00a feb3 	bl	8023534 <memcpy>
  entry->name[namelen] = 0;
 80187ce:	44a1      	add	r9, r4
 80187d0:	9b01      	ldr	r3, [sp, #4]
 80187d2:	461d      	mov	r5, r3
 80187d4:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 80187d8:	007b      	lsls	r3, r7, #1
 80187da:	9301      	str	r3, [sp, #4]
 80187dc:	4b40      	ldr	r3, [pc, #256]	; (80188e0 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 80187de:	f853 2b04 	ldr.w	r2, [r3], #4
 80187e2:	b2ee      	uxtb	r6, r5
 80187e4:	b30a      	cbz	r2, 801882a <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 80187e6:	3501      	adds	r5, #1
 80187e8:	2d04      	cmp	r5, #4
 80187ea:	d1f8      	bne.n	80187de <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80187ec:	483d      	ldr	r0, [pc, #244]	; (80188e4 <dns_gethostbyname_addrtype+0x280>)
 80187ee:	2304      	movs	r3, #4
 80187f0:	7806      	ldrb	r6, [r0, #0]
 80187f2:	3601      	adds	r6, #1
 80187f4:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 80187f6:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 80187f8:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 80187fa:	d901      	bls.n	8018800 <dns_gethostbyname_addrtype+0x19c>
 80187fc:	2600      	movs	r6, #0
      idx = 0;
 80187fe:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 8018800:	4d37      	ldr	r5, [pc, #220]	; (80188e0 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8018802:	1c71      	adds	r1, r6, #1
 8018804:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 8018806:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801880a:	2a00      	cmp	r2, #0
 801880c:	d13d      	bne.n	801888a <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801880e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8018812:	b2ce      	uxtb	r6, r1
 8018814:	d1ef      	bne.n	80187f6 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 8018816:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 8018818:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 801881c:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 801881e:	443a      	add	r2, r7
 8018820:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8018824:	2304      	movs	r3, #4
 8018826:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 8018828:	e73c      	b.n	80186a4 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 801882a:	202e      	movs	r0, #46	; 0x2e
 801882c:	f006 fde6 	bl	801f3fc <udp_new_ip_type>
  if (pcb == NULL) {
 8018830:	4681      	mov	r9, r0
 8018832:	2800      	cmp	r0, #0
 8018834:	d043      	beq.n	80188be <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8018836:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80188ec <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 801883a:	f00b fee3 	bl	8024604 <rand>
 801883e:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 8018840:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8018844:	d3f9      	bcc.n	801883a <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8018846:	4659      	mov	r1, fp
 8018848:	4648      	mov	r0, r9
 801884a:	f006 fb5f 	bl	801ef0c <udp_bind>
  } while (err == ERR_USE);
 801884e:	f110 0f08 	cmn.w	r0, #8
 8018852:	d0f2      	beq.n	801883a <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 8018854:	b9d8      	cbnz	r0, 801888e <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 8018856:	4602      	mov	r2, r0
 8018858:	4923      	ldr	r1, [pc, #140]	; (80188e8 <dns_gethostbyname_addrtype+0x284>)
 801885a:	4648      	mov	r0, r9
 801885c:	f006 fd7e 	bl	801f35c <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 8018860:	4b1f      	ldr	r3, [pc, #124]	; (80188e0 <dns_gethostbyname_addrtype+0x27c>)
 8018862:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 8018866:	4b1f      	ldr	r3, [pc, #124]	; (80188e4 <dns_gethostbyname_addrtype+0x280>)
 8018868:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 801886a:	4a1a      	ldr	r2, [pc, #104]	; (80188d4 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 801886c:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 801886e:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 8018870:	7813      	ldrb	r3, [r2, #0]
 8018872:	3301      	adds	r3, #1
 8018874:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8018876:	f7ff fcb1 	bl	80181dc <dns_check_entry>
  return ERR_INPROGRESS;
 801887a:	f06f 0004 	mvn.w	r0, #4
 801887e:	e711      	b.n	80186a4 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 8018880:	4698      	mov	r8, r3
 8018882:	e783      	b.n	801878c <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 8018884:	f06f 000f 	mvn.w	r0, #15
 8018888:	e70c      	b.n	80186a4 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 801888a:	7006      	strb	r6, [r0, #0]
      return idx;
 801888c:	e7ed      	b.n	801886a <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 801888e:	4648      	mov	r0, r9
 8018890:	f006 fd76 	bl	801f380 <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8018894:	2300      	movs	r3, #0
 8018896:	4a12      	ldr	r2, [pc, #72]	; (80188e0 <dns_gethostbyname_addrtype+0x27c>)
 8018898:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801889c:	e7a6      	b.n	80187ec <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 801889e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80188a2:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 80188a6:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 80188aa:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 80188ae:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 80188b2:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 80188b6:	e6f5      	b.n	80186a4 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 80188b8:	f06f 0005 	mvn.w	r0, #5
 80188bc:	e6f2      	b.n	80186a4 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 80188be:	4b08      	ldr	r3, [pc, #32]	; (80188e0 <dns_gethostbyname_addrtype+0x27c>)
 80188c0:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 80188c4:	e792      	b.n	80187ec <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 80188c6:	f06f 000f 	mvn.w	r0, #15
}
 80188ca:	4770      	bx	lr
 80188cc:	2001e6e4 	.word	0x2001e6e4
 80188d0:	2001e6cc 	.word	0x2001e6cc
 80188d4:	2001e6c8 	.word	0x2001e6c8
 80188d8:	2001e6d4 	.word	0x2001e6d4
 80188dc:	2001e698 	.word	0x2001e698
 80188e0:	2001e688 	.word	0x2001e688
 80188e4:	2001e684 	.word	0x2001e684
 80188e8:	080182ed 	.word	0x080182ed
 80188ec:	080e1ff0 	.word	0x080e1ff0

080188f0 <dns_gethostbyname>:
{
 80188f0:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 80188f2:	2400      	movs	r4, #0
{
 80188f4:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 80188f6:	9400      	str	r4, [sp, #0]
 80188f8:	f7ff feb4 	bl	8018664 <dns_gethostbyname_addrtype>
}
 80188fc:	b002      	add	sp, #8
 80188fe:	bd10      	pop	{r4, pc}

08018900 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8018900:	2300      	movs	r3, #0
{
 8018902:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8018904:	4299      	cmp	r1, r3
{
 8018906:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 8018908:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 801890c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8018910:	dd05      	ble.n	801891e <lwip_standard_chksum+0x1e>
 8018912:	b124      	cbz	r4, 801891e <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8018914:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8018918:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 801891a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 801891e:	2901      	cmp	r1, #1
 8018920:	dd28      	ble.n	8018974 <lwip_standard_chksum+0x74>
 8018922:	3902      	subs	r1, #2
  u32_t sum = 0;
 8018924:	2300      	movs	r3, #0
 8018926:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 801892a:	f10e 0c01 	add.w	ip, lr, #1
 801892e:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8018932:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8018936:	4584      	cmp	ip, r0
    sum += *ps++;
 8018938:	4413      	add	r3, r2
  while (len > 1) {
 801893a:	d1fa      	bne.n	8018932 <lwip_standard_chksum+0x32>
    len -= 2;
 801893c:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 8018940:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8018944:	2901      	cmp	r1, #1
 8018946:	d103      	bne.n	8018950 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8018948:	f89c 2000 	ldrb.w	r2, [ip]
 801894c:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8018950:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018954:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8018956:	b298      	uxth	r0, r3
 8018958:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 801895c:	b298      	uxth	r0, r3
 801895e:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8018962:	b124      	cbz	r4, 801896e <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 8018964:	0203      	lsls	r3, r0, #8
 8018966:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801896a:	b29b      	uxth	r3, r3
 801896c:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 801896e:	b280      	uxth	r0, r0
 8018970:	b002      	add	sp, #8
 8018972:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 8018974:	4684      	mov	ip, r0
  u32_t sum = 0;
 8018976:	2300      	movs	r3, #0
 8018978:	e7e4      	b.n	8018944 <lwip_standard_chksum+0x44>
 801897a:	bf00      	nop

0801897c <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 801897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018980:	4688      	mov	r8, r1
 8018982:	4617      	mov	r7, r2
 8018984:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8018986:	b1f8      	cbz	r0, 80189c8 <inet_cksum_pseudo_base+0x4c>
 8018988:	4605      	mov	r5, r0
  int swapped = 0;
 801898a:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 801898c:	8969      	ldrh	r1, [r5, #10]
 801898e:	6868      	ldr	r0, [r5, #4]
 8018990:	f7ff ffb6 	bl	8018900 <lwip_standard_chksum>
 8018994:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8018996:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 8018998:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 801899a:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 801899e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80189a2:	ea4f 2304 	mov.w	r3, r4, lsl #8
 80189a6:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 80189aa:	d004      	beq.n	80189b6 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 80189ac:	b29b      	uxth	r3, r3
 80189ae:	f086 0601 	eor.w	r6, r6, #1
 80189b2:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 80189b6:	682d      	ldr	r5, [r5, #0]
 80189b8:	2d00      	cmp	r5, #0
 80189ba:	d1e7      	bne.n	801898c <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 80189bc:	b126      	cbz	r6, 80189c8 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 80189be:	0222      	lsls	r2, r4, #8
 80189c0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80189c4:	b292      	uxth	r2, r2
 80189c6:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 80189c8:	4640      	mov	r0, r8
 80189ca:	f7ff fa7d 	bl	8017ec8 <lwip_htons>
 80189ce:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 80189d0:	4638      	mov	r0, r7
 80189d2:	f7ff fa79 	bl	8017ec8 <lwip_htons>
 80189d6:	4428      	add	r0, r5
 80189d8:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 80189da:	b2a0      	uxth	r0, r4
 80189dc:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 80189e0:	b2a0      	uxth	r0, r4
 80189e2:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 80189e6:	43c0      	mvns	r0, r0
}
 80189e8:	b280      	uxth	r0, r0
 80189ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189ee:	bf00      	nop

080189f0 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80189f0:	b430      	push	{r4, r5}
 80189f2:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 80189f4:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 80189f6:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80189f8:	0c23      	lsrs	r3, r4, #16
 80189fa:	fa13 f384 	uxtah	r3, r3, r4
 80189fe:	fa13 f385 	uxtah	r3, r3, r5
 8018a02:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 8018a06:	b29c      	uxth	r4, r3
 8018a08:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8018a0c:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8018a0e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 8018a12:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8018a14:	f7ff bfb2 	b.w	801897c <inet_cksum_pseudo_base>

08018a18 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8018a18:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8018a1a:	f7ff ff71 	bl	8018900 <lwip_standard_chksum>
 8018a1e:	43c0      	mvns	r0, r0
}
 8018a20:	b280      	uxth	r0, r0
 8018a22:	bd08      	pop	{r3, pc}

08018a24 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8018a24:	b338      	cbz	r0, 8018a76 <inet_chksum_pbuf+0x52>
{
 8018a26:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 8018a28:	2600      	movs	r6, #0
 8018a2a:	4605      	mov	r5, r0
  acc = 0;
 8018a2c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 8018a2e:	8969      	ldrh	r1, [r5, #10]
 8018a30:	6868      	ldr	r0, [r5, #4]
 8018a32:	f7ff ff65 	bl	8018900 <lwip_standard_chksum>
 8018a36:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8018a38:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 8018a3a:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 8018a3c:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8018a40:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8018a44:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8018a48:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8018a4c:	d004      	beq.n	8018a58 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8018a4e:	b29b      	uxth	r3, r3
 8018a50:	f086 0601 	eor.w	r6, r6, #1
 8018a54:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8018a58:	682d      	ldr	r5, [r5, #0]
 8018a5a:	2d00      	cmp	r5, #0
 8018a5c:	d1e7      	bne.n	8018a2e <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8018a5e:	b13e      	cbz	r6, 8018a70 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8018a60:	0220      	lsls	r0, r4, #8
 8018a62:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018a66:	b280      	uxth	r0, r0
 8018a68:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8018a6a:	43c0      	mvns	r0, r0
 8018a6c:	b280      	uxth	r0, r0
}
 8018a6e:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 8018a70:	43e0      	mvns	r0, r4
 8018a72:	b280      	uxth	r0, r0
}
 8018a74:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8018a76:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8018a7a:	4770      	bx	lr

08018a7c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8018a7c:	b508      	push	{r3, lr}
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8018a7e:	f001 fd69 	bl	801a554 <stats_init>
#if !NO_SYS
  sys_init();
 8018a82:	f00a f89d 	bl	8022bc0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8018a86:	f000 f975 	bl	8018d74 <mem_init>
  memp_init();
 8018a8a:	f000 fd45 	bl	8019518 <memp_init>
  pbuf_init();
  netif_init();
 8018a8e:	f000 fe1f 	bl	80196d0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8018a92:	f006 f901 	bl	801ec98 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8018a96:	f001 fdc3 	bl	801a620 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8018a9a:	f7ff fdbd 	bl	8018618 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8018a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8018aa2:	f006 b851 	b.w	801eb48 <sys_timeouts_init>
 8018aa6:	bf00      	nop

08018aa8 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018aa8:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 8018aac:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 8018aae:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018ab2:	4299      	cmp	r1, r3
 8018ab4:	d81b      	bhi.n	8018aee <mem_link_valid+0x46>
 8018ab6:	459c      	cmp	ip, r3
 8018ab8:	bf94      	ite	ls
 8018aba:	2200      	movls	r2, #0
 8018abc:	2201      	movhi	r2, #1
 8018abe:	b9b2      	cbnz	r2, 8018aee <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 8018ac0:	4b0f      	ldr	r3, [pc, #60]	; (8018b00 <mem_link_valid+0x58>)
{
 8018ac2:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 8018ac4:	681c      	ldr	r4, [r3, #0]
 8018ac6:	1b03      	subs	r3, r0, r4
 8018ac8:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018aca:	4299      	cmp	r1, r3
 8018acc:	d002      	beq.n	8018ad4 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018ace:	5a61      	ldrh	r1, [r4, r1]
 8018ad0:	4299      	cmp	r1, r3
 8018ad2:	d10e      	bne.n	8018af2 <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018ad4:	4a0b      	ldr	r2, [pc, #44]	; (8018b04 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 8018ad6:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018ad8:	6812      	ldr	r2, [r2, #0]
 8018ada:	42a2      	cmp	r2, r4
 8018adc:	d00d      	beq.n	8018afa <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018ade:	8860      	ldrh	r0, [r4, #2]
 8018ae0:	1ac0      	subs	r0, r0, r3
 8018ae2:	fab0 f080 	clz	r0, r0
 8018ae6:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 8018ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018aec:	4770      	bx	lr
    return 0;
 8018aee:	2000      	movs	r0, #0
}
 8018af0:	4770      	bx	lr
    return 0;
 8018af2:	4610      	mov	r0, r2
}
 8018af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018af8:	4770      	bx	lr
  return 1;
 8018afa:	2001      	movs	r0, #1
 8018afc:	e7f4      	b.n	8018ae8 <mem_link_valid+0x40>
 8018afe:	bf00      	nop
 8018b00:	2001eb38 	.word	0x2001eb38
 8018b04:	2001eb3c 	.word	0x2001eb3c

08018b08 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8018b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 8018b0c:	4f5f      	ldr	r7, [pc, #380]	; (8018c8c <mem_sanity+0x184>)
 8018b0e:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 8018b10:	7935      	ldrb	r5, [r6, #4]
 8018b12:	2d01      	cmp	r5, #1
 8018b14:	d907      	bls.n	8018b26 <mem_sanity+0x1e>
 8018b16:	4b5e      	ldr	r3, [pc, #376]	; (8018c90 <mem_sanity+0x188>)
 8018b18:	f240 223f 	movw	r2, #575	; 0x23f
 8018b1c:	495d      	ldr	r1, [pc, #372]	; (8018c94 <mem_sanity+0x18c>)
 8018b1e:	485e      	ldr	r0, [pc, #376]	; (8018c98 <mem_sanity+0x190>)
 8018b20:	f00b fccc 	bl	80244bc <iprintf>
  last_used = mem->used;
 8018b24:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8018b26:	8873      	ldrh	r3, [r6, #2]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	f040 80a7 	bne.w	8018c7c <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8018b2e:	8834      	ldrh	r4, [r6, #0]
 8018b30:	f242 7310 	movw	r3, #10000	; 0x2710
 8018b34:	429c      	cmp	r4, r3
 8018b36:	f200 8098 	bhi.w	8018c6a <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 8018b3a:	683b      	ldr	r3, [r7, #0]
 8018b3c:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 8018b3e:	429c      	cmp	r4, r3
 8018b40:	d961      	bls.n	8018c06 <mem_sanity+0xfe>
 8018b42:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8018cb4 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8018b46:	f8df a148 	ldr.w	sl, [pc, #328]	; 8018c90 <mem_sanity+0x188>
 8018b4a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8018cb8 <mem_sanity+0x1b0>
 8018b4e:	4e52      	ldr	r6, [pc, #328]	; (8018c98 <mem_sanity+0x190>)
 8018b50:	e012      	b.n	8018b78 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8018b52:	2b01      	cmp	r3, #1
 8018b54:	d006      	beq.n	8018b64 <mem_sanity+0x5c>
 8018b56:	4653      	mov	r3, sl
 8018b58:	f240 2251 	movw	r2, #593	; 0x251
 8018b5c:	494f      	ldr	r1, [pc, #316]	; (8018c9c <mem_sanity+0x194>)
 8018b5e:	4630      	mov	r0, r6
 8018b60:	f00b fcac 	bl	80244bc <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8018b64:	4620      	mov	r0, r4
 8018b66:	f7ff ff9f 	bl	8018aa8 <mem_link_valid>
 8018b6a:	b380      	cbz	r0, 8018bce <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 8018b6c:	683b      	ldr	r3, [r7, #0]
 8018b6e:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 8018b70:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 8018b72:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 8018b74:	42a3      	cmp	r3, r4
 8018b76:	d246      	bcs.n	8018c06 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8018b78:	f8d8 2000 	ldr.w	r2, [r8]
 8018b7c:	42a2      	cmp	r2, r4
 8018b7e:	d942      	bls.n	8018c06 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8018b80:	1ce2      	adds	r2, r4, #3
 8018b82:	f022 0203 	bic.w	r2, r2, #3
 8018b86:	4294      	cmp	r4, r2
 8018b88:	d006      	beq.n	8018b98 <mem_sanity+0x90>
 8018b8a:	4653      	mov	r3, sl
 8018b8c:	f240 2249 	movw	r2, #585	; 0x249
 8018b90:	4649      	mov	r1, r9
 8018b92:	4630      	mov	r0, r6
 8018b94:	f00b fc92 	bl	80244bc <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8018b98:	8862      	ldrh	r2, [r4, #2]
 8018b9a:	f242 7310 	movw	r3, #10000	; 0x2710
 8018b9e:	429a      	cmp	r2, r3
 8018ba0:	d81d      	bhi.n	8018bde <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8018ba2:	8822      	ldrh	r2, [r4, #0]
 8018ba4:	f242 7310 	movw	r3, #10000	; 0x2710
 8018ba8:	429a      	cmp	r2, r3
 8018baa:	d824      	bhi.n	8018bf6 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8018bac:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 8018bae:	2d00      	cmp	r5, #0
 8018bb0:	d0cf      	beq.n	8018b52 <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 8018bb2:	2b01      	cmp	r3, #1
 8018bb4:	d9d6      	bls.n	8018b64 <mem_sanity+0x5c>
 8018bb6:	4653      	mov	r3, sl
 8018bb8:	f240 2253 	movw	r2, #595	; 0x253
 8018bbc:	4938      	ldr	r1, [pc, #224]	; (8018ca0 <mem_sanity+0x198>)
 8018bbe:	4630      	mov	r0, r6
 8018bc0:	f00b fc7c 	bl	80244bc <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8018bc4:	4620      	mov	r0, r4
 8018bc6:	f7ff ff6f 	bl	8018aa8 <mem_link_valid>
 8018bca:	2800      	cmp	r0, #0
 8018bcc:	d1ce      	bne.n	8018b6c <mem_sanity+0x64>
 8018bce:	4653      	mov	r3, sl
 8018bd0:	f240 2256 	movw	r2, #598	; 0x256
 8018bd4:	4933      	ldr	r1, [pc, #204]	; (8018ca4 <mem_sanity+0x19c>)
 8018bd6:	4630      	mov	r0, r6
 8018bd8:	f00b fc70 	bl	80244bc <iprintf>
 8018bdc:	e7c6      	b.n	8018b6c <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8018bde:	4653      	mov	r3, sl
 8018be0:	f240 224a 	movw	r2, #586	; 0x24a
 8018be4:	4930      	ldr	r1, [pc, #192]	; (8018ca8 <mem_sanity+0x1a0>)
 8018be6:	4630      	mov	r0, r6
 8018be8:	f00b fc68 	bl	80244bc <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8018bec:	8822      	ldrh	r2, [r4, #0]
 8018bee:	f242 7310 	movw	r3, #10000	; 0x2710
 8018bf2:	429a      	cmp	r2, r3
 8018bf4:	d9da      	bls.n	8018bac <mem_sanity+0xa4>
 8018bf6:	4653      	mov	r3, sl
 8018bf8:	f240 224b 	movw	r2, #587	; 0x24b
 8018bfc:	492b      	ldr	r1, [pc, #172]	; (8018cac <mem_sanity+0x1a4>)
 8018bfe:	4630      	mov	r0, r6
 8018c00:	f00b fc5c 	bl	80244bc <iprintf>
 8018c04:	e7d2      	b.n	8018bac <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 8018c06:	f242 7210 	movw	r2, #10000	; 0x2710
 8018c0a:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 8018c0c:	4294      	cmp	r4, r2
 8018c0e:	d006      	beq.n	8018c1e <mem_sanity+0x116>
 8018c10:	4b1f      	ldr	r3, [pc, #124]	; (8018c90 <mem_sanity+0x188>)
 8018c12:	f240 225b 	movw	r2, #603	; 0x25b
 8018c16:	4926      	ldr	r1, [pc, #152]	; (8018cb0 <mem_sanity+0x1a8>)
 8018c18:	481f      	ldr	r0, [pc, #124]	; (8018c98 <mem_sanity+0x190>)
 8018c1a:	f00b fc4f 	bl	80244bc <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 8018c1e:	7923      	ldrb	r3, [r4, #4]
 8018c20:	2b01      	cmp	r3, #1
 8018c22:	d006      	beq.n	8018c32 <mem_sanity+0x12a>
 8018c24:	4b1a      	ldr	r3, [pc, #104]	; (8018c90 <mem_sanity+0x188>)
 8018c26:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8018c2a:	491a      	ldr	r1, [pc, #104]	; (8018c94 <mem_sanity+0x18c>)
 8018c2c:	481a      	ldr	r0, [pc, #104]	; (8018c98 <mem_sanity+0x190>)
 8018c2e:	f00b fc45 	bl	80244bc <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 8018c32:	8862      	ldrh	r2, [r4, #2]
 8018c34:	f242 7310 	movw	r3, #10000	; 0x2710
 8018c38:	429a      	cmp	r2, r3
 8018c3a:	d006      	beq.n	8018c4a <mem_sanity+0x142>
 8018c3c:	4b14      	ldr	r3, [pc, #80]	; (8018c90 <mem_sanity+0x188>)
 8018c3e:	f240 225d 	movw	r2, #605	; 0x25d
 8018c42:	4919      	ldr	r1, [pc, #100]	; (8018ca8 <mem_sanity+0x1a0>)
 8018c44:	4814      	ldr	r0, [pc, #80]	; (8018c98 <mem_sanity+0x190>)
 8018c46:	f00b fc39 	bl	80244bc <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8018c4a:	8822      	ldrh	r2, [r4, #0]
 8018c4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8018c50:	429a      	cmp	r2, r3
 8018c52:	d101      	bne.n	8018c58 <mem_sanity+0x150>
}
 8018c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8018c58:	4b0d      	ldr	r3, [pc, #52]	; (8018c90 <mem_sanity+0x188>)
 8018c5a:	f240 225e 	movw	r2, #606	; 0x25e
 8018c5e:	4913      	ldr	r1, [pc, #76]	; (8018cac <mem_sanity+0x1a4>)
 8018c60:	480d      	ldr	r0, [pc, #52]	; (8018c98 <mem_sanity+0x190>)
}
 8018c62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8018c66:	f00b bc29 	b.w	80244bc <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8018c6a:	4b09      	ldr	r3, [pc, #36]	; (8018c90 <mem_sanity+0x188>)
 8018c6c:	f240 2242 	movw	r2, #578	; 0x242
 8018c70:	490e      	ldr	r1, [pc, #56]	; (8018cac <mem_sanity+0x1a4>)
 8018c72:	4809      	ldr	r0, [pc, #36]	; (8018c98 <mem_sanity+0x190>)
 8018c74:	f00b fc22 	bl	80244bc <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 8018c78:	8834      	ldrh	r4, [r6, #0]
 8018c7a:	e75e      	b.n	8018b3a <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8018c7c:	4b04      	ldr	r3, [pc, #16]	; (8018c90 <mem_sanity+0x188>)
 8018c7e:	f240 2241 	movw	r2, #577	; 0x241
 8018c82:	4909      	ldr	r1, [pc, #36]	; (8018ca8 <mem_sanity+0x1a0>)
 8018c84:	4804      	ldr	r0, [pc, #16]	; (8018c98 <mem_sanity+0x190>)
 8018c86:	f00b fc19 	bl	80244bc <iprintf>
 8018c8a:	e750      	b.n	8018b2e <mem_sanity+0x26>
 8018c8c:	2001eb38 	.word	0x2001eb38
 8018c90:	080df85c 	.word	0x080df85c
 8018c94:	080df88c 	.word	0x080df88c
 8018c98:	0802ac68 	.word	0x0802ac68
 8018c9c:	080df8f4 	.word	0x080df8f4
 8018ca0:	080df90c 	.word	0x080df90c
 8018ca4:	080df928 	.word	0x080df928
 8018ca8:	080df8a4 	.word	0x080df8a4
 8018cac:	080df8c0 	.word	0x080df8c0
 8018cb0:	080df940 	.word	0x080df940
 8018cb4:	2001eb3c 	.word	0x2001eb3c
 8018cb8:	080df8dc 	.word	0x080df8dc

08018cbc <mem_overflow_check_raw>:
{
 8018cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc0:	1e4c      	subs	r4, r1, #1
 8018cc2:	310f      	adds	r1, #15
 8018cc4:	b0a3      	sub	sp, #140	; 0x8c
 8018cc6:	4606      	mov	r6, r0
 8018cc8:	4615      	mov	r5, r2
 8018cca:	4698      	mov	r8, r3
 8018ccc:	4404      	add	r4, r0
 8018cce:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8018cd0:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8018d48 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 8018cd4:	f8df b074 	ldr.w	fp, [pc, #116]	; 8018d4c <mem_overflow_check_raw+0x90>
 8018cd8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8018d50 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8018cdc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8018ce0:	464a      	mov	r2, r9
 8018ce2:	2180      	movs	r1, #128	; 0x80
 8018ce4:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8018ce6:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8018ce8:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8018cea:	d009      	beq.n	8018d00 <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8018cec:	f8cd 8000 	str.w	r8, [sp]
 8018cf0:	f00b fd38 	bl	8024764 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8018cf4:	465b      	mov	r3, fp
 8018cf6:	226d      	movs	r2, #109	; 0x6d
 8018cf8:	a902      	add	r1, sp, #8
 8018cfa:	4650      	mov	r0, sl
 8018cfc:	f00b fbde 	bl	80244bc <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8018d00:	42bc      	cmp	r4, r7
 8018d02:	d1eb      	bne.n	8018cdc <mem_overflow_check_raw+0x20>
 8018d04:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018d08:	4f0e      	ldr	r7, [pc, #56]	; (8018d44 <mem_overflow_check_raw+0x88>)
 8018d0a:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 8018d0c:	f8df a03c 	ldr.w	sl, [pc, #60]	; 8018d4c <mem_overflow_check_raw+0x90>
 8018d10:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8018d50 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8018d14:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018d18:	463a      	mov	r2, r7
 8018d1a:	2180      	movs	r1, #128	; 0x80
 8018d1c:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8018d1e:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018d20:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8018d22:	d009      	beq.n	8018d38 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018d24:	f8cd 8000 	str.w	r8, [sp]
 8018d28:	f00b fd1c 	bl	8024764 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8018d2c:	4653      	mov	r3, sl
 8018d2e:	2278      	movs	r2, #120	; 0x78
 8018d30:	a902      	add	r1, sp, #8
 8018d32:	4648      	mov	r0, r9
 8018d34:	f00b fbc2 	bl	80244bc <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8018d38:	42b4      	cmp	r4, r6
 8018d3a:	d1eb      	bne.n	8018d14 <mem_overflow_check_raw+0x58>
}
 8018d3c:	b023      	add	sp, #140	; 0x8c
 8018d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d42:	bf00      	nop
 8018d44:	080df974 	.word	0x080df974
 8018d48:	080df954 	.word	0x080df954
 8018d4c:	080df85c 	.word	0x080df85c
 8018d50:	0802ac68 	.word	0x0802ac68

08018d54 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8018d54:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 8018d58:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8018d5a:	f840 3c10 	str.w	r3, [r0, #-16]
 8018d5e:	f840 3c0c 	str.w	r3, [r0, #-12]
 8018d62:	f840 3c08 	str.w	r3, [r0, #-8]
 8018d66:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 8018d6a:	5043      	str	r3, [r0, r1]
 8018d6c:	6053      	str	r3, [r2, #4]
 8018d6e:	6093      	str	r3, [r2, #8]
 8018d70:	60d3      	str	r3, [r2, #12]
}
 8018d72:	4770      	bx	lr

08018d74 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018d74:	4b15      	ldr	r3, [pc, #84]	; (8018dcc <mem_init+0x58>)
  mem->used = 0;
 8018d76:	2200      	movs	r2, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8018d78:	4915      	ldr	r1, [pc, #84]	; (8018dd0 <mem_init+0x5c>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018d7a:	f023 0303 	bic.w	r3, r3, #3
{
 8018d7e:	b570      	push	{r4, r5, r6, lr}
  mem->next = MEM_SIZE_ALIGNED;
 8018d80:	f242 7410 	movw	r4, #10000	; 0x2710
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018d84:	4d13      	ldr	r5, [pc, #76]	; (8018dd4 <mem_init+0x60>)
  mem->used = 0;
 8018d86:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8018d88:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
  mem->next = MEM_SIZE_ALIGNED;
 8018d8c:	601c      	str	r4, [r3, #0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018d8e:	602b      	str	r3, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 8018d90:	4423      	add	r3, r4
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8018d92:	600b      	str	r3, [r1, #0]
  ram_end->used = 1;
 8018d94:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8018d96:	4910      	ldr	r1, [pc, #64]	; (8018dd8 <mem_init+0x64>)
  ram_end->used = 1;
 8018d98:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  ram_end->next = MEM_SIZE_ALIGNED;
 8018d9c:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  MEM_SANITY();
 8018da0:	f7ff feb2 	bl	8018b08 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 8018da4:	6829      	ldr	r1, [r5, #0]
 8018da6:	4a0d      	ldr	r2, [pc, #52]	; (8018ddc <mem_init+0x68>)
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8018da8:	4b0d      	ldr	r3, [pc, #52]	; (8018de0 <mem_init+0x6c>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8018daa:	480e      	ldr	r0, [pc, #56]	; (8018de4 <mem_init+0x70>)
  lfree = (struct mem *)(void *)ram;
 8018dac:	6011      	str	r1, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8018dae:	f8a3 40aa 	strh.w	r4, [r3, #170]	; 0xaa
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8018db2:	f009 ff11 	bl	8022bd8 <sys_mutex_new>
 8018db6:	b900      	cbnz	r0, 8018dba <mem_init+0x46>
}
 8018db8:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8018dba:	4b0b      	ldr	r3, [pc, #44]	; (8018de8 <mem_init+0x74>)
 8018dbc:	f240 221f 	movw	r2, #543	; 0x21f
 8018dc0:	490a      	ldr	r1, [pc, #40]	; (8018dec <mem_init+0x78>)
 8018dc2:	480b      	ldr	r0, [pc, #44]	; (8018df0 <mem_init+0x7c>)
}
 8018dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8018dc8:	f00b bb78 	b.w	80244bc <iprintf>
 8018dcc:	2001eb43 	.word	0x2001eb43
 8018dd0:	2001eb3c 	.word	0x2001eb3c
 8018dd4:	2001eb38 	.word	0x2001eb38
 8018dd8:	27102710 	.word	0x27102710
 8018ddc:	2001eb2c 	.word	0x2001eb2c
 8018de0:	2002db54 	.word	0x2002db54
 8018de4:	2001eb34 	.word	0x2001eb34
 8018de8:	080df85c 	.word	0x080df85c
 8018dec:	080df994 	.word	0x080df994
 8018df0:	0802ac68 	.word	0x0802ac68

08018df4 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8018df4:	2800      	cmp	r0, #0
 8018df6:	f000 8088 	beq.w	8018f0a <mem_free+0x116>
{
 8018dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8018dfe:	f010 0803 	ands.w	r8, r0, #3
 8018e02:	4604      	mov	r4, r0
 8018e04:	f040 8082 	bne.w	8018f0c <mem_free+0x118>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8018e08:	4e5f      	ldr	r6, [pc, #380]	; (8018f88 <mem_free+0x194>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018e0a:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8018e0e:	6833      	ldr	r3, [r6, #0]
 8018e10:	42ab      	cmp	r3, r5
 8018e12:	d805      	bhi.n	8018e20 <mem_free+0x2c>
 8018e14:	4f5d      	ldr	r7, [pc, #372]	; (8018f8c <mem_free+0x198>)
 8018e16:	f100 030c 	add.w	r3, r0, #12
 8018e1a:	683a      	ldr	r2, [r7, #0]
 8018e1c:	429a      	cmp	r2, r3
 8018e1e:	d20e      	bcs.n	8018e3e <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8018e20:	4b5b      	ldr	r3, [pc, #364]	; (8018f90 <mem_free+0x19c>)
 8018e22:	f240 227f 	movw	r2, #639	; 0x27f
 8018e26:	495b      	ldr	r1, [pc, #364]	; (8018f94 <mem_free+0x1a0>)
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8018e28:	485b      	ldr	r0, [pc, #364]	; (8018f98 <mem_free+0x1a4>)
 8018e2a:	f00b fb47 	bl	80244bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018e2e:	4a5b      	ldr	r2, [pc, #364]	; (8018f9c <mem_free+0x1a8>)
 8018e30:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8018e34:	3301      	adds	r3, #1
 8018e36:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8018e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8018e3e:	4b58      	ldr	r3, [pc, #352]	; (8018fa0 <mem_free+0x1ac>)
 8018e40:	4a58      	ldr	r2, [pc, #352]	; (8018fa4 <mem_free+0x1b0>)
 8018e42:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 8018e46:	f7ff ff39 	bl	8018cbc <mem_overflow_check_raw>
  if (!mem->used) {
 8018e4a:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	f000 8089 	beq.w	8018f66 <mem_free+0x172>
  if (!mem_link_valid(mem)) {
 8018e54:	4628      	mov	r0, r5
 8018e56:	f7ff fe27 	bl	8018aa8 <mem_link_valid>
 8018e5a:	2800      	cmp	r0, #0
 8018e5c:	f000 8088 	beq.w	8018f70 <mem_free+0x17c>
  mem->used = 0;
 8018e60:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 8018e64:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8018fc8 <mem_free+0x1d4>
 8018e68:	f8d8 3000 	ldr.w	r3, [r8]
 8018e6c:	42ab      	cmp	r3, r5
 8018e6e:	d901      	bls.n	8018e74 <mem_free+0x80>
    lfree = mem;
 8018e70:	f8c8 5000 	str.w	r5, [r8]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8018e74:	4849      	ldr	r0, [pc, #292]	; (8018f9c <mem_free+0x1a8>)
 8018e76:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8018e7a:	6831      	ldr	r1, [r6, #0]
 8018e7c:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
 8018e80:	eba5 0c01 	sub.w	ip, r5, r1
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8018e84:	42a9      	cmp	r1, r5
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8018e86:	eba2 0203 	sub.w	r2, r2, r3
 8018e8a:	4462      	add	r2, ip
 8018e8c:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8018e90:	d84b      	bhi.n	8018f2a <mem_free+0x136>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8018e92:	683a      	ldr	r2, [r7, #0]
 8018e94:	4295      	cmp	r5, r2
 8018e96:	d252      	bcs.n	8018f3e <mem_free+0x14a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8018e98:	f242 7210 	movw	r2, #10000	; 0x2710
 8018e9c:	4293      	cmp	r3, r2
 8018e9e:	d83a      	bhi.n	8018f16 <mem_free+0x122>
  return (struct mem *)(void *)&ram[ptr];
 8018ea0:	6832      	ldr	r2, [r6, #0]
 8018ea2:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8018ea4:	429d      	cmp	r5, r3
 8018ea6:	d013      	beq.n	8018ed0 <mem_free+0xdc>
 8018ea8:	7919      	ldrb	r1, [r3, #4]
 8018eaa:	b989      	cbnz	r1, 8018ed0 <mem_free+0xdc>
 8018eac:	6839      	ldr	r1, [r7, #0]
 8018eae:	428b      	cmp	r3, r1
 8018eb0:	d00e      	beq.n	8018ed0 <mem_free+0xdc>
    if (lfree == nmem) {
 8018eb2:	f8d8 1000 	ldr.w	r1, [r8]
 8018eb6:	428b      	cmp	r3, r1
 8018eb8:	d062      	beq.n	8018f80 <mem_free+0x18c>
    mem->next = nmem->next;
 8018eba:	8819      	ldrh	r1, [r3, #0]
 8018ebc:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8018ec0:	f242 7110 	movw	r1, #10000	; 0x2710
 8018ec4:	881b      	ldrh	r3, [r3, #0]
 8018ec6:	428b      	cmp	r3, r1
 8018ec8:	d002      	beq.n	8018ed0 <mem_free+0xdc>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8018eca:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8018ecc:	1aa9      	subs	r1, r5, r2
 8018ece:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8018ed0:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 8018ed4:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8018ed6:	429d      	cmp	r5, r3
 8018ed8:	d010      	beq.n	8018efc <mem_free+0x108>
 8018eda:	7918      	ldrb	r0, [r3, #4]
 8018edc:	b970      	cbnz	r0, 8018efc <mem_free+0x108>
    if (lfree == mem) {
 8018ede:	f8d8 0000 	ldr.w	r0, [r8]
 8018ee2:	4285      	cmp	r5, r0
 8018ee4:	d049      	beq.n	8018f7a <mem_free+0x186>
    pmem->next = mem->next;
 8018ee6:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8018eea:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 8018eee:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8018ef0:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8018ef4:	4283      	cmp	r3, r0
 8018ef6:	d001      	beq.n	8018efc <mem_free+0x108>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8018ef8:	441a      	add	r2, r3
 8018efa:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 8018efc:	f7ff fe04 	bl	8018b08 <mem_sanity>
  mem_free_count = 1;
 8018f00:	4b29      	ldr	r3, [pc, #164]	; (8018fa8 <mem_free+0x1b4>)
 8018f02:	2201      	movs	r2, #1
 8018f04:	701a      	strb	r2, [r3, #0]
}
 8018f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f0a:	4770      	bx	lr
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8018f0c:	4b20      	ldr	r3, [pc, #128]	; (8018f90 <mem_free+0x19c>)
 8018f0e:	f240 2273 	movw	r2, #627	; 0x273
 8018f12:	4926      	ldr	r1, [pc, #152]	; (8018fac <mem_free+0x1b8>)
 8018f14:	e788      	b.n	8018e28 <mem_free+0x34>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8018f16:	4b1e      	ldr	r3, [pc, #120]	; (8018f90 <mem_free+0x19c>)
 8018f18:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8018f1c:	4924      	ldr	r1, [pc, #144]	; (8018fb0 <mem_free+0x1bc>)
 8018f1e:	481e      	ldr	r0, [pc, #120]	; (8018f98 <mem_free+0x1a4>)
 8018f20:	f00b facc 	bl	80244bc <iprintf>
  nmem = ptr_to_mem(mem->next);
 8018f24:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8018f28:	e7ba      	b.n	8018ea0 <mem_free+0xac>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8018f2a:	4b19      	ldr	r3, [pc, #100]	; (8018f90 <mem_free+0x19c>)
 8018f2c:	f240 12df 	movw	r2, #479	; 0x1df
 8018f30:	4920      	ldr	r1, [pc, #128]	; (8018fb4 <mem_free+0x1c0>)
 8018f32:	4819      	ldr	r0, [pc, #100]	; (8018f98 <mem_free+0x1a4>)
 8018f34:	f00b fac2 	bl	80244bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8018f38:	683b      	ldr	r3, [r7, #0]
 8018f3a:	429d      	cmp	r5, r3
 8018f3c:	d306      	bcc.n	8018f4c <mem_free+0x158>
 8018f3e:	4b14      	ldr	r3, [pc, #80]	; (8018f90 <mem_free+0x19c>)
 8018f40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018f44:	491c      	ldr	r1, [pc, #112]	; (8018fb8 <mem_free+0x1c4>)
 8018f46:	4814      	ldr	r0, [pc, #80]	; (8018f98 <mem_free+0x1a4>)
 8018f48:	f00b fab8 	bl	80244bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8018f4c:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8018f50:	b133      	cbz	r3, 8018f60 <mem_free+0x16c>
 8018f52:	4b0f      	ldr	r3, [pc, #60]	; (8018f90 <mem_free+0x19c>)
 8018f54:	f240 12e1 	movw	r2, #481	; 0x1e1
 8018f58:	4918      	ldr	r1, [pc, #96]	; (8018fbc <mem_free+0x1c8>)
 8018f5a:	480f      	ldr	r0, [pc, #60]	; (8018f98 <mem_free+0x1a4>)
 8018f5c:	f00b faae 	bl	80244bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8018f60:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8018f64:	e798      	b.n	8018e98 <mem_free+0xa4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8018f66:	4b0a      	ldr	r3, [pc, #40]	; (8018f90 <mem_free+0x19c>)
 8018f68:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8018f6c:	4914      	ldr	r1, [pc, #80]	; (8018fc0 <mem_free+0x1cc>)
 8018f6e:	e75b      	b.n	8018e28 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8018f70:	4b07      	ldr	r3, [pc, #28]	; (8018f90 <mem_free+0x19c>)
 8018f72:	f240 2295 	movw	r2, #661	; 0x295
 8018f76:	4913      	ldr	r1, [pc, #76]	; (8018fc4 <mem_free+0x1d0>)
 8018f78:	e756      	b.n	8018e28 <mem_free+0x34>
      lfree = pmem;
 8018f7a:	f8c8 3000 	str.w	r3, [r8]
 8018f7e:	e7b2      	b.n	8018ee6 <mem_free+0xf2>
      lfree = mem;
 8018f80:	f8c8 5000 	str.w	r5, [r8]
 8018f84:	e799      	b.n	8018eba <mem_free+0xc6>
 8018f86:	bf00      	nop
 8018f88:	2001eb38 	.word	0x2001eb38
 8018f8c:	2001eb3c 	.word	0x2001eb3c
 8018f90:	080df85c 	.word	0x080df85c
 8018f94:	080df9d4 	.word	0x080df9d4
 8018f98:	0802ac68 	.word	0x0802ac68
 8018f9c:	2002db54 	.word	0x2002db54
 8018fa0:	08028968 	.word	0x08028968
 8018fa4:	080df9f0 	.word	0x080df9f0
 8018fa8:	2001eb30 	.word	0x2001eb30
 8018fac:	080df9b0 	.word	0x080df9b0
 8018fb0:	080dfaa4 	.word	0x080dfaa4
 8018fb4:	080dfa54 	.word	0x080dfa54
 8018fb8:	080dfa6c 	.word	0x080dfa6c
 8018fbc:	080dfa88 	.word	0x080dfa88
 8018fc0:	080df9f8 	.word	0x080df9f8
 8018fc4:	080dfa20 	.word	0x080dfa20
 8018fc8:	2001eb2c 	.word	0x2001eb2c

08018fcc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8018fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8018fd0:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8018fd2:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8018fd6:	f024 0403 	bic.w	r4, r4, #3
 8018fda:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8018fdc:	2c0c      	cmp	r4, #12
 8018fde:	bf38      	it	cc
 8018fe0:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8018fe2:	3420      	adds	r4, #32
 8018fe4:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8018fe6:	429c      	cmp	r4, r3
 8018fe8:	f200 808d 	bhi.w	8019106 <mem_trim+0x13a>
 8018fec:	42a1      	cmp	r1, r4
 8018fee:	460e      	mov	r6, r1
 8018ff0:	f200 8089 	bhi.w	8019106 <mem_trim+0x13a>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8018ff4:	4f63      	ldr	r7, [pc, #396]	; (8019184 <mem_trim+0x1b8>)
 8018ff6:	4605      	mov	r5, r0
 8018ff8:	683b      	ldr	r3, [r7, #0]
 8018ffa:	4283      	cmp	r3, r0
 8018ffc:	d803      	bhi.n	8019006 <mem_trim+0x3a>
 8018ffe:	4b62      	ldr	r3, [pc, #392]	; (8019188 <mem_trim+0x1bc>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	4283      	cmp	r3, r0
 8019004:	d816      	bhi.n	8019034 <mem_trim+0x68>
 8019006:	4b61      	ldr	r3, [pc, #388]	; (801918c <mem_trim+0x1c0>)
 8019008:	f240 22d1 	movw	r2, #721	; 0x2d1
 801900c:	4960      	ldr	r1, [pc, #384]	; (8019190 <mem_trim+0x1c4>)
 801900e:	4861      	ldr	r0, [pc, #388]	; (8019194 <mem_trim+0x1c8>)
 8019010:	f00b fa54 	bl	80244bc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8019014:	683b      	ldr	r3, [r7, #0]
 8019016:	42ab      	cmp	r3, r5
 8019018:	d908      	bls.n	801902c <mem_trim+0x60>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801901a:	4a5f      	ldr	r2, [pc, #380]	; (8019198 <mem_trim+0x1cc>)
    return rmem;
 801901c:	4628      	mov	r0, r5
    MEM_STATS_INC_LOCKED(illegal);
 801901e:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8019022:	3301      	adds	r3, #1
 8019024:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8019028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801902c:	4b56      	ldr	r3, [pc, #344]	; (8019188 <mem_trim+0x1bc>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	429d      	cmp	r5, r3
 8019032:	d2f2      	bcs.n	801901a <mem_trim+0x4e>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019034:	4b59      	ldr	r3, [pc, #356]	; (801919c <mem_trim+0x1d0>)
 8019036:	4628      	mov	r0, r5
 8019038:	4a59      	ldr	r2, [pc, #356]	; (80191a0 <mem_trim+0x1d4>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801903a:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801903e:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 8019042:	f7ff fe3b 	bl	8018cbc <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 8019046:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019048:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 801904c:	eba8 0802 	sub.w	r8, r8, r2
 8019050:	f1a1 0928 	sub.w	r9, r1, #40	; 0x28
 8019054:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019058:	fa1f f989 	uxth.w	r9, r9
 801905c:	eba9 0308 	sub.w	r3, r9, r8
 8019060:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8019062:	429c      	cmp	r4, r3
 8019064:	d846      	bhi.n	80190f4 <mem_trim+0x128>
  if (newsize == size) {
 8019066:	d075      	beq.n	8019154 <mem_trim+0x188>
  return (struct mem *)(void *)&ram[ptr];
 8019068:	eb02 0a01 	add.w	sl, r2, r1
  if (mem2->used == 0) {
 801906c:	f89a 0004 	ldrb.w	r0, [sl, #4]
 8019070:	2800      	cmp	r0, #0
 8019072:	d14b      	bne.n	801910c <mem_trim+0x140>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019074:	f242 7310 	movw	r3, #10000	; 0x2710
 8019078:	4299      	cmp	r1, r3
 801907a:	d06f      	beq.n	801915c <mem_trim+0x190>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801907c:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 8019080:	4848      	ldr	r0, [pc, #288]	; (80191a4 <mem_trim+0x1d8>)
    next = mem2->next;
 8019082:	f8ba 7000 	ldrh.w	r7, [sl]
    if (lfree == mem2) {
 8019086:	6801      	ldr	r1, [r0, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019088:	4423      	add	r3, r4
    if (lfree == mem2) {
 801908a:	4551      	cmp	r1, sl
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801908c:	b29b      	uxth	r3, r3
  return (struct mem *)(void *)&ram[ptr];
 801908e:	eb02 0103 	add.w	r1, r2, r3
    if (lfree == mem2) {
 8019092:	d061      	beq.n	8019158 <mem_trim+0x18c>
    mem2->used = 0;
 8019094:	2000      	movs	r0, #0
    mem2->next = next;
 8019096:	800f      	strh	r7, [r1, #0]
    mem2->prev = ptr;
 8019098:	f8a1 8002 	strh.w	r8, [r1, #2]
    mem2->used = 0;
 801909c:	7108      	strb	r0, [r1, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801909e:	f242 7010 	movw	r0, #10000	; 0x2710
    mem->next = ptr2;
 80190a2:	f825 3c18 	strh.w	r3, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80190a6:	8809      	ldrh	r1, [r1, #0]
 80190a8:	4281      	cmp	r1, r0
 80190aa:	d001      	beq.n	80190b0 <mem_trim+0xe4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80190ac:	440a      	add	r2, r1
 80190ae:	8053      	strh	r3, [r2, #2]
    MEM_STATS_DEC_USED(used, (size - newsize));
 80190b0:	4b39      	ldr	r3, [pc, #228]	; (8019198 <mem_trim+0x1cc>)
 80190b2:	eba8 0809 	sub.w	r8, r8, r9
 80190b6:	f8b3 90ac 	ldrh.w	r9, [r3, #172]	; 0xac
 80190ba:	44c8      	add	r8, r9
 80190bc:	4444      	add	r4, r8
 80190be:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80190c2:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 80190c6:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 80190c8:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80190cc:	f845 3c10 	str.w	r3, [r5, #-16]
 80190d0:	f845 3c0c 	str.w	r3, [r5, #-12]
 80190d4:	f845 3c08 	str.w	r3, [r5, #-8]
 80190d8:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 80190dc:	51ab      	str	r3, [r5, r6]
 80190de:	6053      	str	r3, [r2, #4]
 80190e0:	6093      	str	r3, [r2, #8]
 80190e2:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 80190e4:	f7ff fd10 	bl	8018b08 <mem_sanity>
  mem_free_count = 1;
 80190e8:	4b2f      	ldr	r3, [pc, #188]	; (80191a8 <mem_trim+0x1dc>)
 80190ea:	2201      	movs	r2, #1
  return rmem;
 80190ec:	4628      	mov	r0, r5
  mem_free_count = 1;
 80190ee:	701a      	strb	r2, [r3, #0]
}
 80190f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80190f4:	4b25      	ldr	r3, [pc, #148]	; (801918c <mem_trim+0x1c0>)
 80190f6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80190fa:	492c      	ldr	r1, [pc, #176]	; (80191ac <mem_trim+0x1e0>)
 80190fc:	4825      	ldr	r0, [pc, #148]	; (8019194 <mem_trim+0x1c8>)
 80190fe:	f00b f9dd 	bl	80244bc <iprintf>
    return NULL;
 8019102:	2000      	movs	r0, #0
 8019104:	e790      	b.n	8019028 <mem_trim+0x5c>
    return NULL;
 8019106:	2000      	movs	r0, #0
}
 8019108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801910c:	f104 0014 	add.w	r0, r4, #20
 8019110:	4298      	cmp	r0, r3
 8019112:	d8d6      	bhi.n	80190c2 <mem_trim+0xf6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019114:	f108 0a08 	add.w	sl, r8, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019118:	f242 7310 	movw	r3, #10000	; 0x2710
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801911c:	44a2      	add	sl, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801911e:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019120:	fa1f fa8a 	uxth.w	sl, sl
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019124:	d023      	beq.n	801916e <mem_trim+0x1a2>
    if (mem2 < lfree) {
 8019126:	481f      	ldr	r0, [pc, #124]	; (80191a4 <mem_trim+0x1d8>)
  return (struct mem *)(void *)&ram[ptr];
 8019128:	eb02 030a 	add.w	r3, r2, sl
    if (mem2 < lfree) {
 801912c:	6807      	ldr	r7, [r0, #0]
 801912e:	429f      	cmp	r7, r3
 8019130:	d900      	bls.n	8019134 <mem_trim+0x168>
      lfree = mem2;
 8019132:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 8019134:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 8019136:	2100      	movs	r1, #0
    mem2->prev = ptr;
 8019138:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801913c:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801913e:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 8019142:	f825 ac18 	strh.w	sl, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019146:	881b      	ldrh	r3, [r3, #0]
 8019148:	428b      	cmp	r3, r1
 801914a:	d0b1      	beq.n	80190b0 <mem_trim+0xe4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801914c:	441a      	add	r2, r3
 801914e:	f8a2 a002 	strh.w	sl, [r2, #2]
 8019152:	e7ad      	b.n	80190b0 <mem_trim+0xe4>
 8019154:	4628      	mov	r0, r5
 8019156:	e767      	b.n	8019028 <mem_trim+0x5c>
      lfree = ptr_to_mem(ptr2);
 8019158:	6001      	str	r1, [r0, #0]
 801915a:	e79b      	b.n	8019094 <mem_trim+0xc8>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801915c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8019160:	4b0a      	ldr	r3, [pc, #40]	; (801918c <mem_trim+0x1c0>)
 8019162:	4913      	ldr	r1, [pc, #76]	; (80191b0 <mem_trim+0x1e4>)
 8019164:	480b      	ldr	r0, [pc, #44]	; (8019194 <mem_trim+0x1c8>)
 8019166:	f00b f9a9 	bl	80244bc <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801916a:	683a      	ldr	r2, [r7, #0]
 801916c:	e786      	b.n	801907c <mem_trim+0xb0>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801916e:	f240 3216 	movw	r2, #790	; 0x316
 8019172:	490f      	ldr	r1, [pc, #60]	; (80191b0 <mem_trim+0x1e4>)
 8019174:	4b05      	ldr	r3, [pc, #20]	; (801918c <mem_trim+0x1c0>)
 8019176:	4807      	ldr	r0, [pc, #28]	; (8019194 <mem_trim+0x1c8>)
 8019178:	f00b f9a0 	bl	80244bc <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801917c:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 801917e:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 8019182:	e7d0      	b.n	8019126 <mem_trim+0x15a>
 8019184:	2001eb38 	.word	0x2001eb38
 8019188:	2001eb3c 	.word	0x2001eb3c
 801918c:	080df85c 	.word	0x080df85c
 8019190:	080dfad0 	.word	0x080dfad0
 8019194:	0802ac68 	.word	0x0802ac68
 8019198:	2002db54 	.word	0x2002db54
 801919c:	08028968 	.word	0x08028968
 80191a0:	080df9f0 	.word	0x080df9f0
 80191a4:	2001eb2c 	.word	0x2001eb2c
 80191a8:	2001eb30 	.word	0x2001eb30
 80191ac:	080dfae8 	.word	0x080dfae8
 80191b0:	080dfb08 	.word	0x080dfb08

080191b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80191b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80191b8:	4680      	mov	r8, r0
 80191ba:	2800      	cmp	r0, #0
 80191bc:	f000 80c9 	beq.w	8019352 <mem_malloc+0x19e>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80191c0:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80191c4:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80191c8:	f02b 0b03 	bic.w	fp, fp, #3
 80191cc:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 80191d0:	f1bb 0f0c 	cmp.w	fp, #12
 80191d4:	bf38      	it	cc
 80191d6:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 80191da:	f10b 0720 	add.w	r7, fp, #32
 80191de:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80191e0:	42a7      	cmp	r7, r4
 80191e2:	f200 80b6 	bhi.w	8019352 <mem_malloc+0x19e>
 80191e6:	42b8      	cmp	r0, r7
 80191e8:	bf94      	ite	ls
 80191ea:	f04f 0a00 	movls.w	sl, #0
 80191ee:	f04f 0a01 	movhi.w	sl, #1
 80191f2:	f1ba 0f00 	cmp.w	sl, #0
 80191f6:	f040 80ac 	bne.w	8019352 <mem_malloc+0x19e>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80191fa:	4874      	ldr	r0, [pc, #464]	; (80193cc <mem_malloc+0x218>)
 80191fc:	f009 fd12 	bl	8022c24 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8019200:	4b73      	ldr	r3, [pc, #460]	; (80193d0 <mem_malloc+0x21c>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019202:	eba4 0c07 	sub.w	ip, r4, r7
 8019206:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 80193fc <mem_malloc+0x248>
  return (mem_size_t)((u8_t *)mem - ram);
 801920a:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801920c:	f06f 0e07 	mvn.w	lr, #7
 8019210:	4d70      	ldr	r5, [pc, #448]	; (80193d4 <mem_malloc+0x220>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019212:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 8019216:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019218:	b2b3      	uxth	r3, r6
 801921a:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 801921c:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801921e:	f240 808b 	bls.w	8019338 <mem_malloc+0x184>
      mem_free_count = 0;
 8019222:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019226:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 801922a:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 801922c:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 801922e:	2900      	cmp	r1, #0
 8019230:	d1ef      	bne.n	8019212 <mem_malloc+0x5e>
      if ((!mem->used) &&
 8019232:	7923      	ldrb	r3, [r4, #4]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d17a      	bne.n	801932e <mem_malloc+0x17a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019238:	8821      	ldrh	r1, [r4, #0]
 801923a:	440a      	add	r2, r1
 801923c:	460b      	mov	r3, r1
      if ((!mem->used) &&
 801923e:	42ba      	cmp	r2, r7
 8019240:	d3eb      	bcc.n	801921a <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8019242:	f107 0314 	add.w	r3, r7, #20
 8019246:	429a      	cmp	r2, r3
 8019248:	f0c0 8087 	bcc.w	801935a <mem_malloc+0x1a6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801924c:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019250:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8019254:	44b2      	add	sl, r6
 8019256:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801925a:	459a      	cmp	sl, r3
 801925c:	f000 80a9 	beq.w	80193b2 <mem_malloc+0x1fe>
  return (struct mem *)(void *)&ram[ptr];
 8019260:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 8019264:	2200      	movs	r2, #0
 8019266:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8019268:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 801926c:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 8019270:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 8019272:	2301      	movs	r3, #1
          mem->next = ptr2;
 8019274:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 8019278:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801927a:	f830 300a 	ldrh.w	r3, [r0, sl]
 801927e:	4293      	cmp	r3, r2
 8019280:	d002      	beq.n	8019288 <mem_malloc+0xd4>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8019282:	4418      	add	r0, r3
 8019284:	f8a0 a002 	strh.w	sl, [r0, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8019288:	4a53      	ldr	r2, [pc, #332]	; (80193d8 <mem_malloc+0x224>)
 801928a:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 801928e:	3308      	adds	r3, #8
 8019290:	443b      	add	r3, r7
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8019292:	b29b      	uxth	r3, r3
 8019294:	f8b2 10ae 	ldrh.w	r1, [r2, #174]	; 0xae
 8019298:	4299      	cmp	r1, r3
 801929a:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
 801929e:	bf38      	it	cc
 80192a0:	f8a2 30ae 	strhcc.w	r3, [r2, #174]	; 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80192a4:	f8d9 3000 	ldr.w	r3, [r9]
 80192a8:	42a3      	cmp	r3, r4
 80192aa:	f040 808d 	bne.w	80193c8 <mem_malloc+0x214>
  return (struct mem *)(void *)&ram[ptr];
 80192ae:	4b48      	ldr	r3, [pc, #288]	; (80193d0 <mem_malloc+0x21c>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 80192b0:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 80192b2:	4e4a      	ldr	r6, [pc, #296]	; (80193dc <mem_malloc+0x228>)
  return (struct mem *)(void *)&ram[ptr];
 80192b4:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 80192b8:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 80192ba:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 80192be:	791a      	ldrb	r2, [r3, #4]
 80192c0:	b942      	cbnz	r2, 80192d4 <mem_malloc+0x120>
 80192c2:	e009      	b.n	80192d8 <mem_malloc+0x124>
            mem_free_count = 0;
 80192c4:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 80192c6:	782a      	ldrb	r2, [r5, #0]
 80192c8:	2a00      	cmp	r2, #0
 80192ca:	d14e      	bne.n	801936a <mem_malloc+0x1b6>
  return (struct mem *)(void *)&ram[ptr];
 80192cc:	881b      	ldrh	r3, [r3, #0]
 80192ce:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 80192d0:	791a      	ldrb	r2, [r3, #4]
 80192d2:	b10a      	cbz	r2, 80192d8 <mem_malloc+0x124>
 80192d4:	4299      	cmp	r1, r3
 80192d6:	d1f5      	bne.n	80192c4 <mem_malloc+0x110>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 80192d8:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80192dc:	f8d9 3000 	ldr.w	r3, [r9]
 80192e0:	4299      	cmp	r1, r3
 80192e2:	d004      	beq.n	80192ee <mem_malloc+0x13a>
 80192e4:	f8d9 3000 	ldr.w	r3, [r9]
 80192e8:	791b      	ldrb	r3, [r3, #4]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d159      	bne.n	80193a2 <mem_malloc+0x1ee>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80192ee:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 80192f0:	4836      	ldr	r0, [pc, #216]	; (80193cc <mem_malloc+0x218>)
 80192f2:	f009 fc9d 	bl	8022c30 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80192f6:	6833      	ldr	r3, [r6, #0]
 80192f8:	4427      	add	r7, r4
 80192fa:	42bb      	cmp	r3, r7
 80192fc:	d349      	bcc.n	8019392 <mem_malloc+0x1de>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80192fe:	07a3      	lsls	r3, r4, #30
 8019300:	d138      	bne.n	8019374 <mem_malloc+0x1c0>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8019302:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019306:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 801930a:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 801930e:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019312:	60a3      	str	r3, [r4, #8]
 8019314:	60e3      	str	r3, [r4, #12]
 8019316:	6123      	str	r3, [r4, #16]
 8019318:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801931a:	f845 3008 	str.w	r3, [r5, r8]
 801931e:	6053      	str	r3, [r2, #4]
 8019320:	6093      	str	r3, [r2, #8]
 8019322:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 8019324:	f7ff fbf0 	bl	8018b08 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8019328:	4628      	mov	r0, r5
 801932a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801932e:	8826      	ldrh	r6, [r4, #0]
 8019330:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019332:	459c      	cmp	ip, r3
 8019334:	f63f af75 	bhi.w	8019222 <mem_malloc+0x6e>
  MEM_STATS_INC(err);
 8019338:	4a27      	ldr	r2, [pc, #156]	; (80193d8 <mem_malloc+0x224>)
  return NULL;
 801933a:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 801933c:	4823      	ldr	r0, [pc, #140]	; (80193cc <mem_malloc+0x218>)
  MEM_STATS_INC(err);
 801933e:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	; 0xa8
 8019342:	3301      	adds	r3, #1
 8019344:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
  sys_mutex_unlock(&mem_mutex);
 8019348:	f009 fc72 	bl	8022c30 <sys_mutex_unlock>
}
 801934c:	4628      	mov	r0, r5
 801934e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 8019352:	2500      	movs	r5, #0
}
 8019354:	4628      	mov	r0, r5
 8019356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 801935a:	2301      	movs	r3, #1
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 801935c:	4a1e      	ldr	r2, [pc, #120]	; (80193d8 <mem_malloc+0x224>)
          mem->used = 1;
 801935e:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8019360:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 8019364:	440b      	add	r3, r1
 8019366:	1b9b      	subs	r3, r3, r6
 8019368:	e793      	b.n	8019292 <mem_malloc+0xde>
        if (mem == lfree) {
 801936a:	f8d9 3000 	ldr.w	r3, [r9]
 801936e:	42a3      	cmp	r3, r4
 8019370:	d0a3      	beq.n	80192ba <mem_malloc+0x106>
 8019372:	e7bc      	b.n	80192ee <mem_malloc+0x13a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8019374:	4b1a      	ldr	r3, [pc, #104]	; (80193e0 <mem_malloc+0x22c>)
 8019376:	f240 32bb 	movw	r2, #955	; 0x3bb
 801937a:	491a      	ldr	r1, [pc, #104]	; (80193e4 <mem_malloc+0x230>)
 801937c:	481a      	ldr	r0, [pc, #104]	; (80193e8 <mem_malloc+0x234>)
 801937e:	f00b f89d 	bl	80244bc <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8019382:	4b17      	ldr	r3, [pc, #92]	; (80193e0 <mem_malloc+0x22c>)
 8019384:	f240 32bd 	movw	r2, #957	; 0x3bd
 8019388:	4918      	ldr	r1, [pc, #96]	; (80193ec <mem_malloc+0x238>)
 801938a:	4817      	ldr	r0, [pc, #92]	; (80193e8 <mem_malloc+0x234>)
 801938c:	f00b f896 	bl	80244bc <iprintf>
 8019390:	e7b7      	b.n	8019302 <mem_malloc+0x14e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8019392:	4b13      	ldr	r3, [pc, #76]	; (80193e0 <mem_malloc+0x22c>)
 8019394:	f240 32b9 	movw	r2, #953	; 0x3b9
 8019398:	4915      	ldr	r1, [pc, #84]	; (80193f0 <mem_malloc+0x23c>)
 801939a:	4813      	ldr	r0, [pc, #76]	; (80193e8 <mem_malloc+0x234>)
 801939c:	f00b f88e 	bl	80244bc <iprintf>
 80193a0:	e7ad      	b.n	80192fe <mem_malloc+0x14a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80193a2:	4b0f      	ldr	r3, [pc, #60]	; (80193e0 <mem_malloc+0x22c>)
 80193a4:	f240 32b5 	movw	r2, #949	; 0x3b5
 80193a8:	4912      	ldr	r1, [pc, #72]	; (80193f4 <mem_malloc+0x240>)
 80193aa:	480f      	ldr	r0, [pc, #60]	; (80193e8 <mem_malloc+0x234>)
 80193ac:	f00b f886 	bl	80244bc <iprintf>
 80193b0:	e79d      	b.n	80192ee <mem_malloc+0x13a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80193b2:	4b0b      	ldr	r3, [pc, #44]	; (80193e0 <mem_malloc+0x22c>)
 80193b4:	f240 3287 	movw	r2, #903	; 0x387
 80193b8:	490f      	ldr	r1, [pc, #60]	; (80193f8 <mem_malloc+0x244>)
 80193ba:	480b      	ldr	r0, [pc, #44]	; (80193e8 <mem_malloc+0x234>)
 80193bc:	f00b f87e 	bl	80244bc <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 80193c0:	4b03      	ldr	r3, [pc, #12]	; (80193d0 <mem_malloc+0x21c>)
          mem2->next = mem->next;
 80193c2:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 80193c4:	6818      	ldr	r0, [r3, #0]
 80193c6:	e74b      	b.n	8019260 <mem_malloc+0xac>
 80193c8:	4e04      	ldr	r6, [pc, #16]	; (80193dc <mem_malloc+0x228>)
 80193ca:	e790      	b.n	80192ee <mem_malloc+0x13a>
 80193cc:	2001eb34 	.word	0x2001eb34
 80193d0:	2001eb38 	.word	0x2001eb38
 80193d4:	2001eb30 	.word	0x2001eb30
 80193d8:	2002db54 	.word	0x2002db54
 80193dc:	2001eb3c 	.word	0x2001eb3c
 80193e0:	080df85c 	.word	0x080df85c
 80193e4:	080dfb68 	.word	0x080dfb68
 80193e8:	0802ac68 	.word	0x0802ac68
 80193ec:	080dfb98 	.word	0x080dfb98
 80193f0:	080dfb38 	.word	0x080dfb38
 80193f4:	080dfb1c 	.word	0x080dfb1c
 80193f8:	080dfb08 	.word	0x080dfb08
 80193fc:	2001eb2c 	.word	0x2001eb2c

08019400 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 8019400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019404:	4f12      	ldr	r7, [pc, #72]	; (8019450 <memp_overflow_check_all+0x50>)
 8019406:	2308      	movs	r3, #8
 8019408:	4c12      	ldr	r4, [pc, #72]	; (8019454 <memp_overflow_check_all+0x54>)
 801940a:	4d13      	ldr	r5, [pc, #76]	; (8019458 <memp_overflow_check_all+0x58>)
 801940c:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8019410:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801945c <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 8019414:	3403      	adds	r4, #3
 8019416:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801941a:	b183      	cbz	r3, 801943e <memp_overflow_check_all+0x3e>
 801941c:	8929      	ldrh	r1, [r5, #8]
 801941e:	2600      	movs	r6, #0
 8019420:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8019422:	f104 001c 	add.w	r0, r4, #28
 8019426:	682b      	ldr	r3, [r5, #0]
 8019428:	464a      	mov	r2, r9
 801942a:	f7ff fc47 	bl	8018cbc <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801942e:	8929      	ldrh	r1, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8019430:	8968      	ldrh	r0, [r5, #10]
 8019432:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8019434:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8019438:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801943a:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801943c:	d8f0      	bhi.n	8019420 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 801943e:	45b8      	cmp	r8, r7
 8019440:	d004      	beq.n	801944c <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 8019442:	f857 5b04 	ldr.w	r5, [r7], #4
 8019446:	68ec      	ldr	r4, [r5, #12]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8019448:	896b      	ldrh	r3, [r5, #10]
 801944a:	e7e3      	b.n	8019414 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 801944c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019450:	080dfe8c 	.word	0x080dfe8c
 8019454:	20029064 	.word	0x20029064
 8019458:	080dfdd4 	.word	0x080dfdd4
 801945c:	080dfbbc 	.word	0x080dfbbc

08019460 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8019460:	078b      	lsls	r3, r1, #30
{
 8019462:	b570      	push	{r4, r5, r6, lr}
 8019464:	460c      	mov	r4, r1
 8019466:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 8019468:	d123      	bne.n	80194b2 <do_memp_free_pool+0x52>
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 801946a:	6868      	ldr	r0, [r5, #4]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801946c:	f1a4 031c 	sub.w	r3, r4, #28
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8019470:	6929      	ldr	r1, [r5, #16]
  desc->stats->used--;
 8019472:	8882      	ldrh	r2, [r0, #4]
 8019474:	3a01      	subs	r2, #1
 8019476:	8082      	strh	r2, [r0, #4]
  memp->next = *desc->tab;
 8019478:	680a      	ldr	r2, [r1, #0]
 801947a:	f844 2c1c 	str.w	r2, [r4, #-28]
  *desc->tab = memp;
 801947e:	600b      	str	r3, [r1, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8019480:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 8019484:	b15a      	cbz	r2, 801949e <do_memp_free_pool+0x3e>
      if (t == h) {
 8019486:	429a      	cmp	r2, r3
 8019488:	d105      	bne.n	8019496 <do_memp_free_pool+0x36>
 801948a:	e009      	b.n	80194a0 <do_memp_free_pool+0x40>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801948c:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801948e:	b133      	cbz	r3, 801949e <do_memp_free_pool+0x3e>
 8019490:	b12a      	cbz	r2, 801949e <do_memp_free_pool+0x3e>
      if (t == h) {
 8019492:	4293      	cmp	r3, r2
 8019494:	d004      	beq.n	80194a0 <do_memp_free_pool+0x40>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8019496:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8019498:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801949a:	2a00      	cmp	r2, #0
 801949c:	d1f6      	bne.n	801948c <do_memp_free_pool+0x2c>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801949e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 80194a0:	4b08      	ldr	r3, [pc, #32]	; (80194c4 <do_memp_free_pool+0x64>)
 80194a2:	f240 1285 	movw	r2, #389	; 0x185
 80194a6:	4908      	ldr	r1, [pc, #32]	; (80194c8 <do_memp_free_pool+0x68>)
 80194a8:	4808      	ldr	r0, [pc, #32]	; (80194cc <do_memp_free_pool+0x6c>)
}
 80194aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 80194ae:	f00b b805 	b.w	80244bc <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 80194b2:	4b04      	ldr	r3, [pc, #16]	; (80194c4 <do_memp_free_pool+0x64>)
 80194b4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80194b8:	4905      	ldr	r1, [pc, #20]	; (80194d0 <do_memp_free_pool+0x70>)
 80194ba:	4804      	ldr	r0, [pc, #16]	; (80194cc <do_memp_free_pool+0x6c>)
 80194bc:	f00a fffe 	bl	80244bc <iprintf>
 80194c0:	e7d3      	b.n	801946a <do_memp_free_pool+0xa>
 80194c2:	bf00      	nop
 80194c4:	080dfbc4 	.word	0x080dfbc4
 80194c8:	080dfc14 	.word	0x080dfc14
 80194cc:	0802ac68 	.word	0x0802ac68
 80194d0:	080dfbf4 	.word	0x080dfbf4

080194d4 <memp_init_pool>:
{
 80194d4:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 80194d6:	2200      	movs	r2, #0
{
 80194d8:	4605      	mov	r5, r0
  *desc->tab = NULL;
 80194da:	e9d0 4303 	ldrd	r4, r3, [r0, #12]
  for (i = 0; i < desc->num; ++i) {
 80194de:	8940      	ldrh	r0, [r0, #10]
  *desc->tab = NULL;
 80194e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 80194e2:	b1a8      	cbz	r0, 8019510 <memp_init_pool+0x3c>
 80194e4:	3403      	adds	r4, #3
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 80194e6:	8929      	ldrh	r1, [r5, #8]
  for (i = 0; i < desc->num; ++i) {
 80194e8:	4616      	mov	r6, r2
 80194ea:	f024 0403 	bic.w	r4, r4, #3
 80194ee:	e001      	b.n	80194f4 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 80194f0:	692b      	ldr	r3, [r5, #16]
 80194f2:	681a      	ldr	r2, [r3, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 80194f4:	f104 001c 	add.w	r0, r4, #28
    memp->next = *desc->tab;
 80194f8:	6022      	str	r2, [r4, #0]
    *desc->tab = memp;
 80194fa:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 80194fc:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 80194fe:	f7ff fc29 	bl	8018d54 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8019502:	8929      	ldrh	r1, [r5, #8]
  for (i = 0; i < desc->num; ++i) {
 8019504:	8968      	ldrh	r0, [r5, #10]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 8019506:	f101 032c 	add.w	r3, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 801950a:	42b0      	cmp	r0, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801950c:	441c      	add	r4, r3
  for (i = 0; i < desc->num; ++i) {
 801950e:	dcef      	bgt.n	80194f0 <memp_init_pool+0x1c>
  desc->stats->avail = desc->num;
 8019510:	686b      	ldr	r3, [r5, #4]
 8019512:	8058      	strh	r0, [r3, #2]
}
 8019514:	bd70      	pop	{r4, r5, r6, pc}
 8019516:	bf00      	nop

08019518 <memp_init>:
{
 8019518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801951a:	4c0a      	ldr	r4, [pc, #40]	; (8019544 <memp_init+0x2c>)
 801951c:	4e0a      	ldr	r6, [pc, #40]	; (8019548 <memp_init+0x30>)
 801951e:	4d0b      	ldr	r5, [pc, #44]	; (801954c <memp_init+0x34>)
 8019520:	f104 0740 	add.w	r7, r4, #64	; 0x40
 8019524:	e001      	b.n	801952a <memp_init+0x12>
    memp_init_pool(memp_pools[i]);
 8019526:	f856 5b04 	ldr.w	r5, [r6], #4
 801952a:	4628      	mov	r0, r5
 801952c:	f7ff ffd2 	bl	80194d4 <memp_init_pool>
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8019530:	686b      	ldr	r3, [r5, #4]
 8019532:	f844 3b04 	str.w	r3, [r4], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8019536:	42bc      	cmp	r4, r7
 8019538:	d1f5      	bne.n	8019526 <memp_init+0xe>
}
 801953a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  memp_overflow_check_all();
 801953e:	f7ff bf5f 	b.w	8019400 <memp_overflow_check_all>
 8019542:	bf00      	nop
 8019544:	2002dc08 	.word	0x2002dc08
 8019548:	080dfe8c 	.word	0x080dfe8c
 801954c:	080dfdd4 	.word	0x080dfdd4

08019550 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8019550:	280f      	cmp	r0, #15
{
 8019552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8019554:	d82c      	bhi.n	80195b0 <memp_malloc_fn+0x60>
  memp_overflow_check_all();
 8019556:	4604      	mov	r4, r0
 8019558:	460f      	mov	r7, r1
 801955a:	4616      	mov	r6, r2
 801955c:	f7ff ff50 	bl	8019400 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8019560:	4b18      	ldr	r3, [pc, #96]	; (80195c4 <memp_malloc_fn+0x74>)
 8019562:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  memp = *desc->tab;
 8019566:	692b      	ldr	r3, [r5, #16]
 8019568:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 801956a:	b1dc      	cbz	r4, 80195a4 <memp_malloc_fn+0x54>
    *desc->tab = memp->next;
 801956c:	6822      	ldr	r2, [r4, #0]
 801956e:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 8019570:	2300      	movs	r3, #0
 8019572:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8019574:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 8019576:	e9c4 7601 	strd	r7, r6, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801957a:	d10b      	bne.n	8019594 <memp_malloc_fn+0x44>
    desc->stats->used++;
 801957c:	686a      	ldr	r2, [r5, #4]
    return ((u8_t *)memp + MEMP_SIZE);
 801957e:	341c      	adds	r4, #28
    desc->stats->used++;
 8019580:	8893      	ldrh	r3, [r2, #4]
}
 8019582:	4620      	mov	r0, r4
    if (desc->stats->used > desc->stats->max) {
 8019584:	88d1      	ldrh	r1, [r2, #6]
    desc->stats->used++;
 8019586:	3301      	adds	r3, #1
 8019588:	b29b      	uxth	r3, r3
    if (desc->stats->used > desc->stats->max) {
 801958a:	4299      	cmp	r1, r3
    desc->stats->used++;
 801958c:	8093      	strh	r3, [r2, #4]
      desc->stats->max = desc->stats->used;
 801958e:	bf38      	it	cc
 8019590:	80d3      	strhcc	r3, [r2, #6]
}
 8019592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8019594:	4b0c      	ldr	r3, [pc, #48]	; (80195c8 <memp_malloc_fn+0x78>)
 8019596:	f44f 728c 	mov.w	r2, #280	; 0x118
 801959a:	490c      	ldr	r1, [pc, #48]	; (80195cc <memp_malloc_fn+0x7c>)
 801959c:	480c      	ldr	r0, [pc, #48]	; (80195d0 <memp_malloc_fn+0x80>)
 801959e:	f00a ff8d 	bl	80244bc <iprintf>
 80195a2:	e7eb      	b.n	801957c <memp_malloc_fn+0x2c>
    desc->stats->err++;
 80195a4:	686a      	ldr	r2, [r5, #4]
}
 80195a6:	4620      	mov	r0, r4
    desc->stats->err++;
 80195a8:	8813      	ldrh	r3, [r2, #0]
 80195aa:	3301      	adds	r3, #1
 80195ac:	8013      	strh	r3, [r2, #0]
}
 80195ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80195b0:	2400      	movs	r4, #0
 80195b2:	4b05      	ldr	r3, [pc, #20]	; (80195c8 <memp_malloc_fn+0x78>)
 80195b4:	f240 1257 	movw	r2, #343	; 0x157
 80195b8:	4906      	ldr	r1, [pc, #24]	; (80195d4 <memp_malloc_fn+0x84>)
 80195ba:	4805      	ldr	r0, [pc, #20]	; (80195d0 <memp_malloc_fn+0x80>)
 80195bc:	f00a ff7e 	bl	80244bc <iprintf>
}
 80195c0:	4620      	mov	r0, r4
 80195c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195c4:	080dfe88 	.word	0x080dfe88
 80195c8:	080dfbc4 	.word	0x080dfbc4
 80195cc:	080dfc34 	.word	0x080dfc34
 80195d0:	0802ac68 	.word	0x0802ac68
 80195d4:	080dfc58 	.word	0x080dfc58

080195d8 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80195d8:	280f      	cmp	r0, #15
 80195da:	d80e      	bhi.n	80195fa <memp_free+0x22>
{
 80195dc:	b570      	push	{r4, r5, r6, lr}
 80195de:	460d      	mov	r5, r1

  if (mem == NULL) {
 80195e0:	b151      	cbz	r1, 80195f8 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 80195e2:	4604      	mov	r4, r0
 80195e4:	f7ff ff0c 	bl	8019400 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80195e8:	4b07      	ldr	r3, [pc, #28]	; (8019608 <memp_free+0x30>)
 80195ea:	4629      	mov	r1, r5
 80195ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80195f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 80195f4:	f7ff bf34 	b.w	8019460 <do_memp_free_pool>
}
 80195f8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80195fa:	4b04      	ldr	r3, [pc, #16]	; (801960c <memp_free+0x34>)
 80195fc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8019600:	4903      	ldr	r1, [pc, #12]	; (8019610 <memp_free+0x38>)
 8019602:	4804      	ldr	r0, [pc, #16]	; (8019614 <memp_free+0x3c>)
 8019604:	f00a bf5a 	b.w	80244bc <iprintf>
 8019608:	080dfe88 	.word	0x080dfe88
 801960c:	080dfbc4 	.word	0x080dfbc4
 8019610:	080dfc78 	.word	0x080dfc78
 8019614:	0802ac68 	.word	0x0802ac68

08019618 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8019618:	f06f 000b 	mvn.w	r0, #11
 801961c:	4770      	bx	lr
 801961e:	bf00      	nop

08019620 <netif_issue_reports>:
{
 8019620:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8019622:	4604      	mov	r4, r0
 8019624:	b150      	cbz	r0, 801963c <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8019626:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801962a:	f003 0205 	and.w	r2, r3, #5
 801962e:	2a05      	cmp	r2, #5
 8019630:	d103      	bne.n	801963a <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019632:	6862      	ldr	r2, [r4, #4]
 8019634:	b10a      	cbz	r2, 801963a <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8019636:	071b      	lsls	r3, r3, #28
 8019638:	d408      	bmi.n	801964c <netif_issue_reports+0x2c>
}
 801963a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801963c:	4b06      	ldr	r3, [pc, #24]	; (8019658 <netif_issue_reports+0x38>)
 801963e:	f240 326d 	movw	r2, #877	; 0x36d
 8019642:	4906      	ldr	r1, [pc, #24]	; (801965c <netif_issue_reports+0x3c>)
 8019644:	4806      	ldr	r0, [pc, #24]	; (8019660 <netif_issue_reports+0x40>)
 8019646:	f00a ff39 	bl	80244bc <iprintf>
 801964a:	e7ec      	b.n	8019626 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 801964c:	1d21      	adds	r1, r4, #4
 801964e:	4620      	mov	r0, r4
}
 8019650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8019654:	f008 b8c8 	b.w	80217e8 <etharp_request>
 8019658:	080dfec8 	.word	0x080dfec8
 801965c:	080dfefc 	.word	0x080dfefc
 8019660:	0802ac68 	.word	0x0802ac68

08019664 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8019664:	b570      	push	{r4, r5, r6, lr}
 8019666:	4605      	mov	r5, r0
 8019668:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801966a:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801966c:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801966e:	b301      	cbz	r1, 80196b2 <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8019670:	686b      	ldr	r3, [r5, #4]
 8019672:	6822      	ldr	r2, [r4, #0]
 8019674:	429a      	cmp	r2, r3
 8019676:	d101      	bne.n	801967c <netif_do_set_ipaddr.isra.0+0x18>
}
 8019678:	b002      	add	sp, #8
 801967a:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801967c:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801967e:	4630      	mov	r0, r6
 8019680:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 8019682:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8019684:	f002 fa4e 	bl	801bb24 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8019688:	a901      	add	r1, sp, #4
 801968a:	4630      	mov	r0, r6
 801968c:	f005 feca 	bl	801f424 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 8019690:	a901      	add	r1, sp, #4
 8019692:	4630      	mov	r0, r6
 8019694:	f000 ff42 	bl	801a51c <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8019698:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801969a:	2101      	movs	r1, #1
 801969c:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801969e:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80196a0:	f7ff ffbe 	bl	8019620 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 80196a4:	69eb      	ldr	r3, [r5, #28]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d0e6      	beq.n	8019678 <netif_do_set_ipaddr.isra.0+0x14>
 80196aa:	4628      	mov	r0, r5
 80196ac:	4798      	blx	r3
}
 80196ae:	b002      	add	sp, #8
 80196b0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80196b2:	4b04      	ldr	r3, [pc, #16]	; (80196c4 <netif_do_set_ipaddr.isra.0+0x60>)
 80196b4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80196b8:	4903      	ldr	r1, [pc, #12]	; (80196c8 <netif_do_set_ipaddr.isra.0+0x64>)
 80196ba:	4804      	ldr	r0, [pc, #16]	; (80196cc <netif_do_set_ipaddr.isra.0+0x68>)
 80196bc:	f00a fefe 	bl	80244bc <iprintf>
 80196c0:	e7d6      	b.n	8019670 <netif_do_set_ipaddr.isra.0+0xc>
 80196c2:	bf00      	nop
 80196c4:	080dfec8 	.word	0x080dfec8
 80196c8:	080dff20 	.word	0x080dff20
 80196cc:	0802ac68 	.word	0x0802ac68

080196d0 <netif_init>:
}
 80196d0:	4770      	bx	lr
 80196d2:	bf00      	nop

080196d4 <netif_set_addr>:
{
 80196d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 80196d6:	2900      	cmp	r1, #0
{
 80196d8:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 80196da:	4b16      	ldr	r3, [pc, #88]	; (8019734 <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 80196dc:	460c      	mov	r4, r1
{
 80196de:	b083      	sub	sp, #12
 80196e0:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 80196e2:	bf14      	ite	ne
 80196e4:	460c      	movne	r4, r1
 80196e6:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 80196e8:	b30a      	cbz	r2, 801972e <netif_set_addr+0x5a>
 80196ea:	4616      	mov	r6, r2
  if (gw == NULL) {
 80196ec:	b1ef      	cbz	r7, 801972a <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 80196ee:	6823      	ldr	r3, [r4, #0]
 80196f0:	b993      	cbnz	r3, 8019718 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80196f2:	4621      	mov	r1, r4
 80196f4:	aa01      	add	r2, sp, #4
 80196f6:	4628      	mov	r0, r5
 80196f8:	f7ff ffb4 	bl	8019664 <netif_do_set_ipaddr.isra.0>
 80196fc:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80196fe:	6833      	ldr	r3, [r6, #0]
 8019700:	68aa      	ldr	r2, [r5, #8]
 8019702:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8019704:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8019706:	bf18      	it	ne
 8019708:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801970a:	683b      	ldr	r3, [r7, #0]
 801970c:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801970e:	bf18      	it	ne
 8019710:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 8019712:	b119      	cbz	r1, 801971c <netif_set_addr+0x48>
}
 8019714:	b003      	add	sp, #12
 8019716:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8019718:	2100      	movs	r1, #0
 801971a:	e7f0      	b.n	80196fe <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801971c:	aa01      	add	r2, sp, #4
 801971e:	4621      	mov	r1, r4
 8019720:	4628      	mov	r0, r5
 8019722:	f7ff ff9f 	bl	8019664 <netif_do_set_ipaddr.isra.0>
}
 8019726:	b003      	add	sp, #12
 8019728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 801972a:	4f02      	ldr	r7, [pc, #8]	; (8019734 <netif_set_addr+0x60>)
 801972c:	e7df      	b.n	80196ee <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 801972e:	461e      	mov	r6, r3
 8019730:	e7dc      	b.n	80196ec <netif_set_addr+0x18>
 8019732:	bf00      	nop
 8019734:	080e1ff0 	.word	0x080e1ff0

08019738 <netif_add>:
{
 8019738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801973c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801973e:	4606      	mov	r6, r0
 8019740:	2800      	cmp	r0, #0
 8019742:	f000 8081 	beq.w	8019848 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8019746:	2d00      	cmp	r5, #0
 8019748:	f000 8087 	beq.w	801985a <netif_add+0x122>
  if (ipaddr == NULL) {
 801974c:	2900      	cmp	r1, #0
 801974e:	d06f      	beq.n	8019830 <netif_add+0xf8>
  if (netmask == NULL) {
 8019750:	2a00      	cmp	r2, #0
 8019752:	d068      	beq.n	8019826 <netif_add+0xee>
  if (gw == NULL) {
 8019754:	2b00      	cmp	r3, #0
 8019756:	d069      	beq.n	801982c <netif_add+0xf4>
  netif->state = state;
 8019758:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801975a:	2400      	movs	r4, #0
  netif->num = netif_num;
 801975c:	f8df a128 	ldr.w	sl, [pc, #296]	; 8019888 <netif_add+0x150>
  netif->state = state;
 8019760:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 8019762:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 8019764:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 8019766:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 8019768:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 801976c:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 801976e:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 8019772:	483e      	ldr	r0, [pc, #248]	; (801986c <netif_add+0x134>)
  netif->flags = 0;
 8019774:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 8019778:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801977a:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801977c:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 801977e:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 8019782:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8019786:	f7ff ffa5 	bl	80196d4 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801978a:	4630      	mov	r0, r6
 801978c:	47a8      	blx	r5
 801978e:	2800      	cmp	r0, #0
 8019790:	d157      	bne.n	8019842 <netif_add+0x10a>
      if (netif->num == 255) {
 8019792:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 8019796:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801988c <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801979a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801987c <netif_add+0x144>
 801979e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8019890 <netif_add+0x158>
 80197a2:	4f33      	ldr	r7, [pc, #204]	; (8019870 <netif_add+0x138>)
      if (netif->num == 255) {
 80197a4:	2aff      	cmp	r2, #255	; 0xff
 80197a6:	d102      	bne.n	80197ae <netif_add+0x76>
        netif->num = 0;
 80197a8:	2300      	movs	r3, #0
 80197aa:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80197ae:	f8d8 4000 	ldr.w	r4, [r8]
 80197b2:	2c00      	cmp	r4, #0
 80197b4:	d042      	beq.n	801983c <netif_add+0x104>
      num_netifs = 0;
 80197b6:	2500      	movs	r5, #0
 80197b8:	e007      	b.n	80197ca <netif_add+0x92>
        if (netif2->num == netif->num) {
 80197ba:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80197be:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 80197c2:	429a      	cmp	r2, r3
 80197c4:	d014      	beq.n	80197f0 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80197c6:	6824      	ldr	r4, [r4, #0]
 80197c8:	b1fc      	cbz	r4, 801980a <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80197ca:	42a6      	cmp	r6, r4
        num_netifs++;
 80197cc:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 80197d0:	d013      	beq.n	80197fa <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80197d2:	2dff      	cmp	r5, #255	; 0xff
 80197d4:	ddf1      	ble.n	80197ba <netif_add+0x82>
 80197d6:	465b      	mov	r3, fp
 80197d8:	f240 128d 	movw	r2, #397	; 0x18d
 80197dc:	4925      	ldr	r1, [pc, #148]	; (8019874 <netif_add+0x13c>)
 80197de:	4638      	mov	r0, r7
 80197e0:	f00a fe6c 	bl	80244bc <iprintf>
        if (netif2->num == netif->num) {
 80197e4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80197e8:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 80197ec:	429a      	cmp	r2, r3
 80197ee:	d1ea      	bne.n	80197c6 <netif_add+0x8e>
          netif->num++;
 80197f0:	3201      	adds	r2, #1
 80197f2:	b2d2      	uxtb	r2, r2
 80197f4:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 80197f8:	e7d4      	b.n	80197a4 <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80197fa:	465b      	mov	r3, fp
 80197fc:	f240 128b 	movw	r2, #395	; 0x18b
 8019800:	4649      	mov	r1, r9
 8019802:	4638      	mov	r0, r7
 8019804:	f00a fe5a 	bl	80244bc <iprintf>
 8019808:	e7e3      	b.n	80197d2 <netif_add+0x9a>
  netif->next = netif_list;
 801980a:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801980e:	2bfe      	cmp	r3, #254	; 0xfe
 8019810:	d012      	beq.n	8019838 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 8019812:	3301      	adds	r3, #1
 8019814:	b2db      	uxtb	r3, r3
  return netif;
 8019816:	4630      	mov	r0, r6
  netif->next = netif_list;
 8019818:	6034      	str	r4, [r6, #0]
 801981a:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801981e:	f8c8 6000 	str.w	r6, [r8]
}
 8019822:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8019826:	4a14      	ldr	r2, [pc, #80]	; (8019878 <netif_add+0x140>)
  if (gw == NULL) {
 8019828:	2b00      	cmp	r3, #0
 801982a:	d195      	bne.n	8019758 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801982c:	4b12      	ldr	r3, [pc, #72]	; (8019878 <netif_add+0x140>)
 801982e:	e793      	b.n	8019758 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8019830:	4911      	ldr	r1, [pc, #68]	; (8019878 <netif_add+0x140>)
  if (netmask == NULL) {
 8019832:	2a00      	cmp	r2, #0
 8019834:	d18e      	bne.n	8019754 <netif_add+0x1c>
 8019836:	e7f6      	b.n	8019826 <netif_add+0xee>
    netif_num = 0;
 8019838:	2300      	movs	r3, #0
 801983a:	e7ec      	b.n	8019816 <netif_add+0xde>
  if (netif->num == 254) {
 801983c:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8019840:	e7e5      	b.n	801980e <netif_add+0xd6>
    return NULL;
 8019842:	4620      	mov	r0, r4
}
 8019844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8019848:	4b0c      	ldr	r3, [pc, #48]	; (801987c <netif_add+0x144>)
 801984a:	f240 1227 	movw	r2, #295	; 0x127
 801984e:	490c      	ldr	r1, [pc, #48]	; (8019880 <netif_add+0x148>)
 8019850:	4807      	ldr	r0, [pc, #28]	; (8019870 <netif_add+0x138>)
 8019852:	f00a fe33 	bl	80244bc <iprintf>
 8019856:	4630      	mov	r0, r6
 8019858:	e7e3      	b.n	8019822 <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801985a:	4b08      	ldr	r3, [pc, #32]	; (801987c <netif_add+0x144>)
 801985c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8019860:	4908      	ldr	r1, [pc, #32]	; (8019884 <netif_add+0x14c>)
 8019862:	4803      	ldr	r0, [pc, #12]	; (8019870 <netif_add+0x138>)
 8019864:	f00a fe2a 	bl	80244bc <iprintf>
 8019868:	4628      	mov	r0, r5
 801986a:	e7da      	b.n	8019822 <netif_add+0xea>
 801986c:	08019619 	.word	0x08019619
 8019870:	0802ac68 	.word	0x0802ac68
 8019874:	080dff84 	.word	0x080dff84
 8019878:	080e1ff0 	.word	0x080e1ff0
 801987c:	080dfec8 	.word	0x080dfec8
 8019880:	080dff30 	.word	0x080dff30
 8019884:	080dff4c 	.word	0x080dff4c
 8019888:	2002db4c 	.word	0x2002db4c
 801988c:	2002db48 	.word	0x2002db48
 8019890:	080dff70 	.word	0x080dff70

08019894 <netif_set_default>:
  netif_default = netif;
 8019894:	4b01      	ldr	r3, [pc, #4]	; (801989c <netif_set_default+0x8>)
 8019896:	6018      	str	r0, [r3, #0]
}
 8019898:	4770      	bx	lr
 801989a:	bf00      	nop
 801989c:	2002db44 	.word	0x2002db44

080198a0 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80198a0:	b198      	cbz	r0, 80198ca <netif_set_up+0x2a>
{
 80198a2:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80198a4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80198a8:	4604      	mov	r4, r0
 80198aa:	07da      	lsls	r2, r3, #31
 80198ac:	d40c      	bmi.n	80198c8 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80198ae:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 80198b2:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 80198b4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 80198b8:	b102      	cbz	r2, 80198bc <netif_set_up+0x1c>
 80198ba:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80198bc:	4620      	mov	r0, r4
 80198be:	2103      	movs	r1, #3
}
 80198c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80198c4:	f7ff beac 	b.w	8019620 <netif_issue_reports>
}
 80198c8:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80198ca:	4b03      	ldr	r3, [pc, #12]	; (80198d8 <netif_set_up+0x38>)
 80198cc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80198d0:	4902      	ldr	r1, [pc, #8]	; (80198dc <netif_set_up+0x3c>)
 80198d2:	4803      	ldr	r0, [pc, #12]	; (80198e0 <netif_set_up+0x40>)
 80198d4:	f00a bdf2 	b.w	80244bc <iprintf>
 80198d8:	080dfec8 	.word	0x080dfec8
 80198dc:	080dffb4 	.word	0x080dffb4
 80198e0:	0802ac68 	.word	0x0802ac68

080198e4 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80198e4:	b1a8      	cbz	r0, 8019912 <netif_set_down+0x2e>
{
 80198e6:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 80198e8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80198ec:	4604      	mov	r4, r0
 80198ee:	07da      	lsls	r2, r3, #31
 80198f0:	d50b      	bpl.n	801990a <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80198f2:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80198f6:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80198f8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80198fc:	d406      	bmi.n	801990c <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 80198fe:	69e3      	ldr	r3, [r4, #28]
 8019900:	b11b      	cbz	r3, 801990a <netif_set_down+0x26>
 8019902:	4620      	mov	r0, r4
}
 8019904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 8019908:	4718      	bx	r3
}
 801990a:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 801990c:	f007 fcb8 	bl	8021280 <etharp_cleanup_netif>
 8019910:	e7f5      	b.n	80198fe <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8019912:	4b03      	ldr	r3, [pc, #12]	; (8019920 <netif_set_down+0x3c>)
 8019914:	f240 329b 	movw	r2, #923	; 0x39b
 8019918:	4902      	ldr	r1, [pc, #8]	; (8019924 <netif_set_down+0x40>)
 801991a:	4803      	ldr	r0, [pc, #12]	; (8019928 <netif_set_down+0x44>)
 801991c:	f00a bdce 	b.w	80244bc <iprintf>
 8019920:	080dfec8 	.word	0x080dfec8
 8019924:	080dffd0 	.word	0x080dffd0
 8019928:	0802ac68 	.word	0x0802ac68

0801992c <netif_set_status_callback>:
  if (netif) {
 801992c:	b100      	cbz	r0, 8019930 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801992e:	61c1      	str	r1, [r0, #28]
}
 8019930:	4770      	bx	lr
 8019932:	bf00      	nop

08019934 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8019934:	b1b8      	cbz	r0, 8019966 <netif_set_link_up+0x32>
{
 8019936:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8019938:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801993c:	4604      	mov	r4, r0
 801993e:	075a      	lsls	r2, r3, #29
 8019940:	d500      	bpl.n	8019944 <netif_set_link_up+0x10>
}
 8019942:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8019944:	f043 0304 	orr.w	r3, r3, #4
 8019948:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 801994c:	f006 fe7c 	bl	8020648 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019950:	2103      	movs	r1, #3
 8019952:	4620      	mov	r0, r4
 8019954:	f7ff fe64 	bl	8019620 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8019958:	6a23      	ldr	r3, [r4, #32]
 801995a:	2b00      	cmp	r3, #0
 801995c:	d0f1      	beq.n	8019942 <netif_set_link_up+0xe>
 801995e:	4620      	mov	r0, r4
}
 8019960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8019964:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8019966:	4b03      	ldr	r3, [pc, #12]	; (8019974 <netif_set_link_up+0x40>)
 8019968:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801996c:	4902      	ldr	r1, [pc, #8]	; (8019978 <netif_set_link_up+0x44>)
 801996e:	4803      	ldr	r0, [pc, #12]	; (801997c <netif_set_link_up+0x48>)
 8019970:	f00a bda4 	b.w	80244bc <iprintf>
 8019974:	080dfec8 	.word	0x080dfec8
 8019978:	080dfff0 	.word	0x080dfff0
 801997c:	0802ac68 	.word	0x0802ac68

08019980 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8019980:	b158      	cbz	r0, 801999a <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8019982:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8019986:	0751      	lsls	r1, r2, #29
 8019988:	d506      	bpl.n	8019998 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801998a:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801998e:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8019990:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 8019994:	b101      	cbz	r1, 8019998 <netif_set_link_down+0x18>
 8019996:	4708      	bx	r1
}
 8019998:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801999a:	4b03      	ldr	r3, [pc, #12]	; (80199a8 <netif_set_link_down+0x28>)
 801999c:	f240 4206 	movw	r2, #1030	; 0x406
 80199a0:	4902      	ldr	r1, [pc, #8]	; (80199ac <netif_set_link_down+0x2c>)
 80199a2:	4803      	ldr	r0, [pc, #12]	; (80199b0 <netif_set_link_down+0x30>)
 80199a4:	f00a bd8a 	b.w	80244bc <iprintf>
 80199a8:	080dfec8 	.word	0x080dfec8
 80199ac:	080e0014 	.word	0x080e0014
 80199b0:	0802ac68 	.word	0x0802ac68

080199b4 <netif_set_link_callback>:
  if (netif) {
 80199b4:	b100      	cbz	r0, 80199b8 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80199b6:	6201      	str	r1, [r0, #32]
}
 80199b8:	4770      	bx	lr
 80199ba:	bf00      	nop

080199bc <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80199bc:	4602      	mov	r2, r0
 80199be:	b158      	cbz	r0, 80199d8 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80199c0:	4b06      	ldr	r3, [pc, #24]	; (80199dc <netif_get_by_index+0x20>)
 80199c2:	6818      	ldr	r0, [r3, #0]
 80199c4:	b910      	cbnz	r0, 80199cc <netif_get_by_index+0x10>
 80199c6:	e007      	b.n	80199d8 <netif_get_by_index+0x1c>
 80199c8:	6800      	ldr	r0, [r0, #0]
 80199ca:	b130      	cbz	r0, 80199da <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 80199cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80199d0:	3301      	adds	r3, #1
 80199d2:	b2db      	uxtb	r3, r3
 80199d4:	4293      	cmp	r3, r2
 80199d6:	d1f7      	bne.n	80199c8 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 80199d8:	4770      	bx	lr
 80199da:	4770      	bx	lr
 80199dc:	2002db48 	.word	0x2002db48

080199e0 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80199e0:	4907      	ldr	r1, [pc, #28]	; (8019a00 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80199e2:	2200      	movs	r2, #0
 80199e4:	4b07      	ldr	r3, [pc, #28]	; (8019a04 <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80199e6:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80199e8:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80199ea:	b910      	cbnz	r0, 80199f2 <pbuf_free_ooseq_callback+0x12>
 80199ec:	e006      	b.n	80199fc <pbuf_free_ooseq_callback+0x1c>
 80199ee:	68c0      	ldr	r0, [r0, #12]
 80199f0:	b120      	cbz	r0, 80199fc <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 80199f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d0fa      	beq.n	80199ee <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80199f8:	f002 b8be 	b.w	801bb78 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 80199fc:	4770      	bx	lr
 80199fe:	bf00      	nop
 8019a00:	2002dc5c 	.word	0x2002dc5c
 8019a04:	2002db4d 	.word	0x2002db4d

08019a08 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 8019a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8019a0c:	4604      	mov	r4, r0
 8019a0e:	2800      	cmp	r0, #0
 8019a10:	d052      	beq.n	8019ab8 <pbuf_free.part.0+0xb0>
  count = 0;
 8019a12:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8019a14:	4f29      	ldr	r7, [pc, #164]	; (8019abc <pbuf_free.part.0+0xb4>)
 8019a16:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8019acc <pbuf_free.part.0+0xc4>
 8019a1a:	4e29      	ldr	r6, [pc, #164]	; (8019ac0 <pbuf_free.part.0+0xb8>)
 8019a1c:	e00a      	b.n	8019a34 <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8019a1e:	6923      	ldr	r3, [r4, #16]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d03b      	beq.n	8019a9c <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 8019a24:	4620      	mov	r0, r4
 8019a26:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 8019a28:	3501      	adds	r5, #1
 8019a2a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8019a2c:	f1b9 0f00 	cmp.w	r9, #0
 8019a30:	d01b      	beq.n	8019a6a <pbuf_free.part.0+0x62>
 8019a32:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8019a34:	7ba3      	ldrb	r3, [r4, #14]
 8019a36:	b1db      	cbz	r3, 8019a70 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 8019a38:	3b01      	subs	r3, #1
 8019a3a:	b2db      	uxtb	r3, r3
 8019a3c:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 8019a3e:	b9a3      	cbnz	r3, 8019a6a <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8019a40:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8019a42:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8019a46:	079b      	lsls	r3, r3, #30
 8019a48:	d4e9      	bmi.n	8019a1e <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 8019a4a:	7b23      	ldrb	r3, [r4, #12]
 8019a4c:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8019a50:	2b02      	cmp	r3, #2
 8019a52:	d01e      	beq.n	8019a92 <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8019a54:	2b01      	cmp	r3, #1
 8019a56:	d02a      	beq.n	8019aae <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8019a58:	b99b      	cbnz	r3, 8019a82 <pbuf_free.part.0+0x7a>
      count++;
 8019a5a:	3501      	adds	r5, #1
          mem_free(p);
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	f7ff f9c9 	bl	8018df4 <mem_free>
      count++;
 8019a62:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8019a64:	f1b9 0f00 	cmp.w	r9, #0
 8019a68:	d1e3      	bne.n	8019a32 <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8019a6a:	4628      	mov	r0, r5
 8019a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8019a70:	463b      	mov	r3, r7
 8019a72:	f240 22f1 	movw	r2, #753	; 0x2f1
 8019a76:	4641      	mov	r1, r8
 8019a78:	4630      	mov	r0, r6
 8019a7a:	f00a fd1f 	bl	80244bc <iprintf>
    ref = --(p->ref);
 8019a7e:	7ba3      	ldrb	r3, [r4, #14]
 8019a80:	e7da      	b.n	8019a38 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 8019a82:	463b      	mov	r3, r7
 8019a84:	f240 320f 	movw	r2, #783	; 0x30f
 8019a88:	490e      	ldr	r1, [pc, #56]	; (8019ac4 <pbuf_free.part.0+0xbc>)
 8019a8a:	4630      	mov	r0, r6
 8019a8c:	f00a fd16 	bl	80244bc <iprintf>
 8019a90:	e7ca      	b.n	8019a28 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 8019a92:	4621      	mov	r1, r4
 8019a94:	200f      	movs	r0, #15
 8019a96:	f7ff fd9f 	bl	80195d8 <memp_free>
 8019a9a:	e7c5      	b.n	8019a28 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8019a9c:	463b      	mov	r3, r7
 8019a9e:	f240 22ff 	movw	r2, #767	; 0x2ff
 8019aa2:	4909      	ldr	r1, [pc, #36]	; (8019ac8 <pbuf_free.part.0+0xc0>)
 8019aa4:	4630      	mov	r0, r6
 8019aa6:	f00a fd09 	bl	80244bc <iprintf>
        pc->custom_free_function(p);
 8019aaa:	6923      	ldr	r3, [r4, #16]
 8019aac:	e7ba      	b.n	8019a24 <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 8019aae:	4621      	mov	r1, r4
 8019ab0:	200e      	movs	r0, #14
 8019ab2:	f7ff fd91 	bl	80195d8 <memp_free>
 8019ab6:	e7b7      	b.n	8019a28 <pbuf_free.part.0+0x20>
  count = 0;
 8019ab8:	4605      	mov	r5, r0
 8019aba:	e7d6      	b.n	8019a6a <pbuf_free.part.0+0x62>
 8019abc:	080e0038 	.word	0x080e0038
 8019ac0:	0802ac68 	.word	0x0802ac68
 8019ac4:	080e00a4 	.word	0x080e00a4
 8019ac8:	080e0080 	.word	0x080e0080
 8019acc:	080e0068 	.word	0x080e0068

08019ad0 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8019ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 8019ad4:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019ad6:	f8df a124 	ldr.w	sl, [pc, #292]	; 8019bfc <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8019ada:	4605      	mov	r5, r0
 8019adc:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 8019ade:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8019ae0:	8944      	ldrh	r4, [r0, #10]
 8019ae2:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019ae4:	f8df b128 	ldr.w	fp, [pc, #296]	; 8019c10 <pbuf_copy.part.0+0x140>
 8019ae8:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8019c04 <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8019aec:	1be4      	subs	r4, r4, r7
 8019aee:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8019af0:	6868      	ldr	r0, [r5, #4]
 8019af2:	4294      	cmp	r4, r2
 8019af4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019af8:	4438      	add	r0, r7
 8019afa:	bf28      	it	cs
 8019afc:	4614      	movcs	r4, r2
 8019afe:	4431      	add	r1, r6
 8019b00:	4622      	mov	r2, r4
    offset_to += len;
 8019b02:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8019b04:	f009 fd16 	bl	8023534 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019b08:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8019b0a:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019b0c:	429f      	cmp	r7, r3
 8019b0e:	d837      	bhi.n	8019b80 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8019b10:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8019b14:	4296      	cmp	r6, r2
 8019b16:	d829      	bhi.n	8019b6c <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 8019b18:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8019b1a:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 8019b1c:	d317      	bcc.n	8019b4e <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 8019b1e:	429f      	cmp	r7, r3
      p_from = p_from->next;
 8019b20:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 8019b24:	d04b      	beq.n	8019bbe <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019b26:	f1b8 0f00 	cmp.w	r8, #0
 8019b2a:	d144      	bne.n	8019bb6 <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8019b2c:	892a      	ldrh	r2, [r5, #8]
 8019b2e:	896b      	ldrh	r3, [r5, #10]
 8019b30:	429a      	cmp	r2, r3
 8019b32:	d14c      	bne.n	8019bce <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019b34:	6828      	ldr	r0, [r5, #0]
 8019b36:	b140      	cbz	r0, 8019b4a <pbuf_copy.part.0+0x7a>
 8019b38:	4b30      	ldr	r3, [pc, #192]	; (8019bfc <pbuf_copy.part.0+0x12c>)
 8019b3a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8019b3e:	4930      	ldr	r1, [pc, #192]	; (8019c00 <pbuf_copy.part.0+0x130>)
 8019b40:	4830      	ldr	r0, [pc, #192]	; (8019c04 <pbuf_copy.part.0+0x134>)
 8019b42:	f00a fcbb 	bl	80244bc <iprintf>
 8019b46:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8019b4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 8019b4e:	429f      	cmp	r7, r3
 8019b50:	d040      	beq.n	8019bd4 <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019b52:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8019b56:	4293      	cmp	r3, r2
 8019b58:	d01a      	beq.n	8019b90 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8019b5a:	896c      	ldrh	r4, [r5, #10]
 8019b5c:	2d00      	cmp	r5, #0
 8019b5e:	d0c5      	beq.n	8019aec <pbuf_copy.part.0+0x1c>
 8019b60:	892b      	ldrh	r3, [r5, #8]
 8019b62:	42a3      	cmp	r3, r4
 8019b64:	d045      	beq.n	8019bf2 <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8019b66:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8019b6a:	e7bf      	b.n	8019aec <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8019b6c:	f240 32da 	movw	r2, #986	; 0x3da
 8019b70:	4653      	mov	r3, sl
 8019b72:	4925      	ldr	r1, [pc, #148]	; (8019c08 <pbuf_copy.part.0+0x138>)
 8019b74:	4648      	mov	r0, r9
 8019b76:	f00a fca1 	bl	80244bc <iprintf>
    if (offset_from >= p_from->len) {
 8019b7a:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8019b7e:	e7cb      	b.n	8019b18 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019b80:	4653      	mov	r3, sl
 8019b82:	f240 32d9 	movw	r2, #985	; 0x3d9
 8019b86:	4659      	mov	r1, fp
 8019b88:	4648      	mov	r0, r9
 8019b8a:	f00a fc97 	bl	80244bc <iprintf>
 8019b8e:	e7bf      	b.n	8019b10 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019b90:	f8d8 3000 	ldr.w	r3, [r8]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d0e0      	beq.n	8019b5a <pbuf_copy.part.0+0x8a>
 8019b98:	4b18      	ldr	r3, [pc, #96]	; (8019bfc <pbuf_copy.part.0+0x12c>)
 8019b9a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8019b9e:	4918      	ldr	r1, [pc, #96]	; (8019c00 <pbuf_copy.part.0+0x130>)
 8019ba0:	4818      	ldr	r0, [pc, #96]	; (8019c04 <pbuf_copy.part.0+0x134>)
 8019ba2:	f00a fc8b 	bl	80244bc <iprintf>
 8019ba6:	f06f 0005 	mvn.w	r0, #5
}
 8019baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019bae:	f1b8 0f00 	cmp.w	r8, #0
 8019bb2:	d00a      	beq.n	8019bca <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 8019bb4:	2700      	movs	r7, #0
 8019bb6:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019bb8:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8019bbc:	e7c9      	b.n	8019b52 <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 8019bbe:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019bc0:	2d00      	cmp	r5, #0
 8019bc2:	d1f4      	bne.n	8019bae <pbuf_copy.part.0+0xde>
 8019bc4:	f1b8 0f00 	cmp.w	r8, #0
 8019bc8:	d108      	bne.n	8019bdc <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8019bca:	2d00      	cmp	r5, #0
 8019bcc:	d1ae      	bne.n	8019b2c <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 8019bce:	2000      	movs	r0, #0
}
 8019bd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 8019bd4:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019bd6:	b10d      	cbz	r5, 8019bdc <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 8019bd8:	2700      	movs	r7, #0
 8019bda:	e7ed      	b.n	8019bb8 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019bdc:	4b07      	ldr	r3, [pc, #28]	; (8019bfc <pbuf_copy.part.0+0x12c>)
 8019bde:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8019be2:	490a      	ldr	r1, [pc, #40]	; (8019c0c <pbuf_copy.part.0+0x13c>)
 8019be4:	4807      	ldr	r0, [pc, #28]	; (8019c04 <pbuf_copy.part.0+0x134>)
 8019be6:	f00a fc69 	bl	80244bc <iprintf>
 8019bea:	f06f 000f 	mvn.w	r0, #15
}
 8019bee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019bf2:	682b      	ldr	r3, [r5, #0]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d0b6      	beq.n	8019b66 <pbuf_copy.part.0+0x96>
 8019bf8:	e79e      	b.n	8019b38 <pbuf_copy.part.0+0x68>
 8019bfa:	bf00      	nop
 8019bfc:	080e0038 	.word	0x080e0038
 8019c00:	080e00fc 	.word	0x080e00fc
 8019c04:	0802ac68 	.word	0x0802ac68
 8019c08:	080e00d0 	.word	0x080e00d0
 8019c0c:	080e00ec 	.word	0x080e00ec
 8019c10:	080e00b8 	.word	0x080e00b8

08019c14 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8019c14:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8019c18:	2b01      	cmp	r3, #1
{
 8019c1a:	b570      	push	{r4, r5, r6, lr}
 8019c1c:	4614      	mov	r4, r2
 8019c1e:	4606      	mov	r6, r0
 8019c20:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8019c22:	d110      	bne.n	8019c46 <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8019c24:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8019c28:	490b      	ldr	r1, [pc, #44]	; (8019c58 <pbuf_alloc_reference+0x44>)
 8019c2a:	200e      	movs	r0, #14
 8019c2c:	f7ff fc90 	bl	8019550 <memp_malloc_fn>
  if (p == NULL) {
 8019c30:	b140      	cbz	r0, 8019c44 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8019c32:	2300      	movs	r3, #0
  p->ref = 1;
 8019c34:	2201      	movs	r2, #1
  p->payload = payload;
 8019c36:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8019c38:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 8019c3a:	6003      	str	r3, [r0, #0]
  p->len = len;
 8019c3c:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8019c3e:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8019c40:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8019c42:	81c2      	strh	r2, [r0, #14]
}
 8019c44:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8019c46:	4b04      	ldr	r3, [pc, #16]	; (8019c58 <pbuf_alloc_reference+0x44>)
 8019c48:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8019c4c:	4903      	ldr	r1, [pc, #12]	; (8019c5c <pbuf_alloc_reference+0x48>)
 8019c4e:	4804      	ldr	r0, [pc, #16]	; (8019c60 <pbuf_alloc_reference+0x4c>)
 8019c50:	f00a fc34 	bl	80244bc <iprintf>
 8019c54:	e7e6      	b.n	8019c24 <pbuf_alloc_reference+0x10>
 8019c56:	bf00      	nop
 8019c58:	080e0038 	.word	0x080e0038
 8019c5c:	080e0128 	.word	0x080e0128
 8019c60:	0802ac68 	.word	0x0802ac68

08019c64 <pbuf_alloc>:
  switch (type) {
 8019c64:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8019c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c6c:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 8019c6e:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 8019c72:	d03d      	beq.n	8019cf0 <pbuf_alloc+0x8c>
 8019c74:	d80e      	bhi.n	8019c94 <pbuf_alloc+0x30>
 8019c76:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 8019c7a:	2c01      	cmp	r4, #1
 8019c7c:	d033      	beq.n	8019ce6 <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8019c7e:	4b41      	ldr	r3, [pc, #260]	; (8019d84 <pbuf_alloc+0x120>)
 8019c80:	f240 1227 	movw	r2, #295	; 0x127
 8019c84:	4940      	ldr	r1, [pc, #256]	; (8019d88 <pbuf_alloc+0x124>)
      return NULL;
 8019c86:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8019c88:	4840      	ldr	r0, [pc, #256]	; (8019d8c <pbuf_alloc+0x128>)
 8019c8a:	f00a fc17 	bl	80244bc <iprintf>
}
 8019c8e:	4628      	mov	r0, r5
 8019c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 8019c94:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8019c98:	d1f1      	bne.n	8019c7e <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8019c9a:	f10a 0303 	add.w	r3, sl, #3
 8019c9e:	1cca      	adds	r2, r1, #3
 8019ca0:	4606      	mov	r6, r0
 8019ca2:	f022 0203 	bic.w	r2, r2, #3
 8019ca6:	f023 0303 	bic.w	r3, r3, #3
 8019caa:	4413      	add	r3, r2
 8019cac:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8019cae:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019cb2:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8019cb4:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019cb6:	d34d      	bcc.n	8019d54 <pbuf_alloc+0xf0>
 8019cb8:	4282      	cmp	r2, r0
 8019cba:	d84b      	bhi.n	8019d54 <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8019cbc:	f7ff fa7a 	bl	80191b4 <mem_malloc>
      if (p == NULL) {
 8019cc0:	4605      	mov	r5, r0
 8019cc2:	2800      	cmp	r0, #0
 8019cc4:	d0e3      	beq.n	8019c8e <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019cc6:	1983      	adds	r3, r0, r6
  p->next = NULL;
 8019cc8:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 8019cca:	4a31      	ldr	r2, [pc, #196]	; (8019d90 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019ccc:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 8019cce:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 8019cd2:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019cd4:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 8019cd8:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 8019cdc:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 8019cde:	6043      	str	r3, [r0, #4]
}
 8019ce0:	4628      	mov	r0, r5
 8019ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8019ce6:	2000      	movs	r0, #0
}
 8019ce8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8019cec:	f7ff bf92 	b.w	8019c14 <pbuf_alloc_reference>
  switch (type) {
 8019cf0:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8019cf2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8019d84 <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 8019cf6:	4f27      	ldr	r7, [pc, #156]	; (8019d94 <pbuf_alloc+0x130>)
  switch (type) {
 8019cf8:	4625      	mov	r5, r4
 8019cfa:	e009      	b.n	8019d10 <pbuf_alloc+0xac>
          last->next = q;
 8019cfc:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 8019cfe:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 8019d02:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 8019d06:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 8019d0a:	f1b9 0f00 	cmp.w	r9, #0
 8019d0e:	d0be      	beq.n	8019c8e <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8019d10:	22f3      	movs	r2, #243	; 0xf3
 8019d12:	4641      	mov	r1, r8
 8019d14:	200f      	movs	r0, #15
 8019d16:	4626      	mov	r6, r4
 8019d18:	f7ff fc1a 	bl	8019550 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019d1c:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 8019d20:	2100      	movs	r1, #0
        if (q == NULL) {
 8019d22:	4604      	mov	r4, r0
 8019d24:	b1d0      	cbz	r0, 8019d5c <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019d26:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019d2a:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 8019d2e:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019d32:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019d36:	3213      	adds	r2, #19
  p->next = NULL;
 8019d38:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019d3a:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019d3c:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 8019d40:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019d42:	454b      	cmp	r3, r9
  p->payload = payload;
 8019d44:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019d46:	bf28      	it	cs
 8019d48:	464b      	movcs	r3, r9
  p->len = len;
 8019d4a:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8019d4c:	2d00      	cmp	r5, #0
 8019d4e:	d1d5      	bne.n	8019cfc <pbuf_alloc+0x98>
 8019d50:	4605      	mov	r5, r0
 8019d52:	e7d4      	b.n	8019cfe <pbuf_alloc+0x9a>
          return NULL;
 8019d54:	2500      	movs	r5, #0
}
 8019d56:	4628      	mov	r0, r5
 8019d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 8019d5c:	4e0e      	ldr	r6, [pc, #56]	; (8019d98 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 8019d5e:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 8019d60:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8019d62:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 8019d64:	b133      	cbz	r3, 8019d74 <pbuf_alloc+0x110>
          if (p) {
 8019d66:	2d00      	cmp	r5, #0
 8019d68:	d0f4      	beq.n	8019d54 <pbuf_alloc+0xf0>
  if (p == NULL) {
 8019d6a:	4628      	mov	r0, r5
          return NULL;
 8019d6c:	2500      	movs	r5, #0
 8019d6e:	f7ff fe4b 	bl	8019a08 <pbuf_free.part.0>
 8019d72:	e78c      	b.n	8019c8e <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8019d74:	4601      	mov	r1, r0
 8019d76:	4809      	ldr	r0, [pc, #36]	; (8019d9c <pbuf_alloc+0x138>)
 8019d78:	f7fc fe98 	bl	8016aac <tcpip_try_callback>
 8019d7c:	2800      	cmp	r0, #0
 8019d7e:	d0f2      	beq.n	8019d66 <pbuf_alloc+0x102>
 8019d80:	7034      	strb	r4, [r6, #0]
 8019d82:	e7f0      	b.n	8019d66 <pbuf_alloc+0x102>
 8019d84:	080e0038 	.word	0x080e0038
 8019d88:	080e013c 	.word	0x080e013c
 8019d8c:	0802ac68 	.word	0x0802ac68
 8019d90:	00010080 	.word	0x00010080
 8019d94:	00010082 	.word	0x00010082
 8019d98:	2002db4d 	.word	0x2002db4d
 8019d9c:	080199e1 	.word	0x080199e1

08019da0 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8019da0:	3003      	adds	r0, #3
 8019da2:	f020 0003 	bic.w	r0, r0, #3
{
 8019da6:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8019da8:	eb01 0e00 	add.w	lr, r1, r0
{
 8019dac:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 8019db0:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8019db2:	45e6      	cmp	lr, ip
 8019db4:	d80d      	bhi.n	8019dd2 <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8019db6:	b104      	cbz	r4, 8019dba <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8019db8:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8019dba:	4618      	mov	r0, r3
  p->next = NULL;
 8019dbc:	2300      	movs	r3, #0
  p->payload = payload;
 8019dbe:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 8019dc0:	2402      	movs	r4, #2
  p->next = NULL;
 8019dc2:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 8019dc4:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8019dc6:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8019dc8:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8019dca:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8019dcc:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 8019dce:	81c3      	strh	r3, [r0, #14]
}
 8019dd0:	bd10      	pop	{r4, pc}
    return NULL;
 8019dd2:	2000      	movs	r0, #0
}
 8019dd4:	bd10      	pop	{r4, pc}
 8019dd6:	bf00      	nop

08019dd8 <pbuf_realloc>:
{
 8019dd8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019dda:	4604      	mov	r4, r0
{
 8019ddc:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019dde:	2800      	cmp	r0, #0
 8019de0:	d037      	beq.n	8019e52 <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 8019de2:	8922      	ldrh	r2, [r4, #8]
 8019de4:	42aa      	cmp	r2, r5
 8019de6:	d91b      	bls.n	8019e20 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 8019de8:	8963      	ldrh	r3, [r4, #10]
 8019dea:	429d      	cmp	r5, r3
 8019dec:	d90d      	bls.n	8019e0a <pbuf_realloc+0x32>
 8019dee:	1aa9      	subs	r1, r5, r2
 8019df0:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8019df2:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 8019df4:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8019df6:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 8019df8:	b29d      	uxth	r5, r3
    q = q->next;
 8019dfa:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8019dfc:	2c00      	cmp	r4, #0
 8019dfe:	d030      	beq.n	8019e62 <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 8019e00:	8963      	ldrh	r3, [r4, #10]
 8019e02:	42ab      	cmp	r3, r5
 8019e04:	d201      	bcs.n	8019e0a <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8019e06:	8922      	ldrh	r2, [r4, #8]
 8019e08:	e7f3      	b.n	8019df2 <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8019e0a:	7b22      	ldrb	r2, [r4, #12]
 8019e0c:	0712      	lsls	r2, r2, #28
 8019e0e:	d008      	beq.n	8019e22 <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 8019e10:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8019e12:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8019e14:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8019e16:	b108      	cbz	r0, 8019e1c <pbuf_realloc+0x44>
  if (p == NULL) {
 8019e18:	f7ff fdf6 	bl	8019a08 <pbuf_free.part.0>
  q->next = NULL;
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	6023      	str	r3, [r4, #0]
}
 8019e20:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8019e22:	429d      	cmp	r5, r3
 8019e24:	d0f4      	beq.n	8019e10 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8019e26:	7b63      	ldrb	r3, [r4, #13]
 8019e28:	079b      	lsls	r3, r3, #30
 8019e2a:	d4f1      	bmi.n	8019e10 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8019e2c:	6863      	ldr	r3, [r4, #4]
 8019e2e:	4620      	mov	r0, r4
 8019e30:	1b1b      	subs	r3, r3, r4
 8019e32:	18e9      	adds	r1, r5, r3
 8019e34:	b289      	uxth	r1, r1
 8019e36:	f7ff f8c9 	bl	8018fcc <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8019e3a:	4604      	mov	r4, r0
 8019e3c:	2800      	cmp	r0, #0
 8019e3e:	d1e7      	bne.n	8019e10 <pbuf_realloc+0x38>
 8019e40:	4b0c      	ldr	r3, [pc, #48]	; (8019e74 <pbuf_realloc+0x9c>)
 8019e42:	f240 12bd 	movw	r2, #445	; 0x1bd
 8019e46:	490c      	ldr	r1, [pc, #48]	; (8019e78 <pbuf_realloc+0xa0>)
 8019e48:	480c      	ldr	r0, [pc, #48]	; (8019e7c <pbuf_realloc+0xa4>)
 8019e4a:	f00a fb37 	bl	80244bc <iprintf>
  q->len = rem_len;
 8019e4e:	8164      	strh	r4, [r4, #10]
 8019e50:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019e52:	4b08      	ldr	r3, [pc, #32]	; (8019e74 <pbuf_realloc+0x9c>)
 8019e54:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8019e58:	4909      	ldr	r1, [pc, #36]	; (8019e80 <pbuf_realloc+0xa8>)
 8019e5a:	4808      	ldr	r0, [pc, #32]	; (8019e7c <pbuf_realloc+0xa4>)
 8019e5c:	f00a fb2e 	bl	80244bc <iprintf>
 8019e60:	e7bf      	b.n	8019de2 <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8019e62:	4b04      	ldr	r3, [pc, #16]	; (8019e74 <pbuf_realloc+0x9c>)
 8019e64:	f240 12af 	movw	r2, #431	; 0x1af
 8019e68:	4906      	ldr	r1, [pc, #24]	; (8019e84 <pbuf_realloc+0xac>)
 8019e6a:	4804      	ldr	r0, [pc, #16]	; (8019e7c <pbuf_realloc+0xa4>)
 8019e6c:	f00a fb26 	bl	80244bc <iprintf>
  while (rem_len > q->len) {
 8019e70:	8963      	ldrh	r3, [r4, #10]
 8019e72:	deff      	udf	#255	; 0xff
 8019e74:	080e0038 	.word	0x080e0038
 8019e78:	080e0188 	.word	0x080e0188
 8019e7c:	0802ac68 	.word	0x0802ac68
 8019e80:	080e0158 	.word	0x080e0158
 8019e84:	080e0170 	.word	0x080e0170

08019e88 <pbuf_add_header>:
{
 8019e88:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8019e8a:	b310      	cbz	r0, 8019ed2 <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8019e8c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8019e90:	d20c      	bcs.n	8019eac <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 8019e92:	b169      	cbz	r1, 8019eb0 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 8019e94:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8019e98:	8902      	ldrh	r2, [r0, #8]
 8019e9a:	4603      	mov	r3, r0
 8019e9c:	4462      	add	r2, ip
 8019e9e:	b292      	uxth	r2, r2
 8019ea0:	4594      	cmp	ip, r2
 8019ea2:	d803      	bhi.n	8019eac <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8019ea4:	f990 000c 	ldrsb.w	r0, [r0, #12]
 8019ea8:	2800      	cmp	r0, #0
 8019eaa:	db03      	blt.n	8019eb4 <pbuf_add_header+0x2c>
    return 1;
 8019eac:	2001      	movs	r0, #1
}
 8019eae:	bd08      	pop	{r3, pc}
    return 0;
 8019eb0:	4608      	mov	r0, r1
}
 8019eb2:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 8019eb4:	6858      	ldr	r0, [r3, #4]
 8019eb6:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8019eb8:	f103 0010 	add.w	r0, r3, #16
 8019ebc:	4281      	cmp	r1, r0
 8019ebe:	d3f5      	bcc.n	8019eac <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 8019ec0:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 8019ec4:	2000      	movs	r0, #0
  p->payload = payload;
 8019ec6:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8019ec8:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8019eca:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8019ecc:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 8019ed0:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8019ed2:	4b04      	ldr	r3, [pc, #16]	; (8019ee4 <pbuf_add_header+0x5c>)
 8019ed4:	f240 12df 	movw	r2, #479	; 0x1df
 8019ed8:	4903      	ldr	r1, [pc, #12]	; (8019ee8 <pbuf_add_header+0x60>)
 8019eda:	4804      	ldr	r0, [pc, #16]	; (8019eec <pbuf_add_header+0x64>)
 8019edc:	f00a faee 	bl	80244bc <iprintf>
    return 1;
 8019ee0:	2001      	movs	r0, #1
}
 8019ee2:	bd08      	pop	{r3, pc}
 8019ee4:	080e0038 	.word	0x080e0038
 8019ee8:	080e1a64 	.word	0x080e1a64
 8019eec:	0802ac68 	.word	0x0802ac68

08019ef0 <pbuf_remove_header>:
{
 8019ef0:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8019ef2:	b1c8      	cbz	r0, 8019f28 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8019ef4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8019ef8:	d21f      	bcs.n	8019f3a <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 8019efa:	b199      	cbz	r1, 8019f24 <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 8019efc:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8019f00:	8942      	ldrh	r2, [r0, #10]
 8019f02:	4603      	mov	r3, r0
 8019f04:	4594      	cmp	ip, r2
 8019f06:	d81a      	bhi.n	8019f3e <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8019f08:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8019f0a:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8019f0e:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8019f12:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 8019f14:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8019f16:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 8019f1a:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8019f1c:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8019f1e:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 8019f22:	bd08      	pop	{r3, pc}
    return 0;
 8019f24:	4608      	mov	r0, r1
}
 8019f26:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8019f28:	4b09      	ldr	r3, [pc, #36]	; (8019f50 <pbuf_remove_header+0x60>)
 8019f2a:	f240 224b 	movw	r2, #587	; 0x24b
 8019f2e:	4909      	ldr	r1, [pc, #36]	; (8019f54 <pbuf_remove_header+0x64>)
 8019f30:	4809      	ldr	r0, [pc, #36]	; (8019f58 <pbuf_remove_header+0x68>)
 8019f32:	f00a fac3 	bl	80244bc <iprintf>
    return 1;
 8019f36:	2001      	movs	r0, #1
}
 8019f38:	bd08      	pop	{r3, pc}
    return 1;
 8019f3a:	2001      	movs	r0, #1
}
 8019f3c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8019f3e:	4b04      	ldr	r3, [pc, #16]	; (8019f50 <pbuf_remove_header+0x60>)
 8019f40:	f240 2255 	movw	r2, #597	; 0x255
 8019f44:	4905      	ldr	r1, [pc, #20]	; (8019f5c <pbuf_remove_header+0x6c>)
 8019f46:	4804      	ldr	r0, [pc, #16]	; (8019f58 <pbuf_remove_header+0x68>)
 8019f48:	f00a fab8 	bl	80244bc <iprintf>
 8019f4c:	2001      	movs	r0, #1
}
 8019f4e:	bd08      	pop	{r3, pc}
 8019f50:	080e0038 	.word	0x080e0038
 8019f54:	080e1a64 	.word	0x080e1a64
 8019f58:	0802ac68 	.word	0x0802ac68
 8019f5c:	080e01a4 	.word	0x080e01a4

08019f60 <pbuf_header_force>:
  if (header_size_increment < 0) {
 8019f60:	2900      	cmp	r1, #0
 8019f62:	db1a      	blt.n	8019f9a <pbuf_header_force+0x3a>
{
 8019f64:	b508      	push	{r3, lr}
 8019f66:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 8019f68:	b1d0      	cbz	r0, 8019fa0 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 8019f6a:	b341      	cbz	r1, 8019fbe <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 8019f6c:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8019f70:	891a      	ldrh	r2, [r3, #8]
 8019f72:	4462      	add	r2, ip
 8019f74:	b292      	uxth	r2, r2
 8019f76:	4594      	cmp	ip, r2
 8019f78:	d81f      	bhi.n	8019fba <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8019f7a:	f993 000c 	ldrsb.w	r0, [r3, #12]
 8019f7e:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 8019f80:	6858      	ldr	r0, [r3, #4]
 8019f82:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8019f86:	db14      	blt.n	8019fb2 <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 8019f88:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 8019f8c:	2000      	movs	r0, #0
  p->payload = payload;
 8019f8e:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8019f90:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8019f92:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8019f94:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 8019f98:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8019f9a:	4249      	negs	r1, r1
 8019f9c:	f7ff bfa8 	b.w	8019ef0 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 8019fa0:	4b08      	ldr	r3, [pc, #32]	; (8019fc4 <pbuf_header_force+0x64>)
 8019fa2:	f240 12df 	movw	r2, #479	; 0x1df
 8019fa6:	4908      	ldr	r1, [pc, #32]	; (8019fc8 <pbuf_header_force+0x68>)
 8019fa8:	4808      	ldr	r0, [pc, #32]	; (8019fcc <pbuf_header_force+0x6c>)
 8019faa:	f00a fa87 	bl	80244bc <iprintf>
    return 1;
 8019fae:	2001      	movs	r0, #1
}
 8019fb0:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8019fb2:	f103 0010 	add.w	r0, r3, #16
 8019fb6:	4281      	cmp	r1, r0
 8019fb8:	d2e6      	bcs.n	8019f88 <pbuf_header_force+0x28>
    return 1;
 8019fba:	2001      	movs	r0, #1
}
 8019fbc:	bd08      	pop	{r3, pc}
    return 0;
 8019fbe:	4608      	mov	r0, r1
}
 8019fc0:	bd08      	pop	{r3, pc}
 8019fc2:	bf00      	nop
 8019fc4:	080e0038 	.word	0x080e0038
 8019fc8:	080e1a64 	.word	0x080e1a64
 8019fcc:	0802ac68 	.word	0x0802ac68

08019fd0 <pbuf_free>:
  if (p == NULL) {
 8019fd0:	b108      	cbz	r0, 8019fd6 <pbuf_free+0x6>
 8019fd2:	f7ff bd19 	b.w	8019a08 <pbuf_free.part.0>
{
 8019fd6:	b510      	push	{r4, lr}
 8019fd8:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 8019fda:	4b04      	ldr	r3, [pc, #16]	; (8019fec <pbuf_free+0x1c>)
 8019fdc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8019fe0:	4903      	ldr	r1, [pc, #12]	; (8019ff0 <pbuf_free+0x20>)
 8019fe2:	4804      	ldr	r0, [pc, #16]	; (8019ff4 <pbuf_free+0x24>)
 8019fe4:	f00a fa6a 	bl	80244bc <iprintf>
}
 8019fe8:	4620      	mov	r0, r4
 8019fea:	bd10      	pop	{r4, pc}
 8019fec:	080e0038 	.word	0x080e0038
 8019ff0:	080e1a64 	.word	0x080e1a64
 8019ff4:	0802ac68 	.word	0x0802ac68

08019ff8 <pbuf_clen>:
  while (p != NULL) {
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	b130      	cbz	r0, 801a00a <pbuf_clen+0x12>
  len = 0;
 8019ffc:	2000      	movs	r0, #0
    ++len;
 8019ffe:	3001      	adds	r0, #1
    p = p->next;
 801a000:	681b      	ldr	r3, [r3, #0]
    ++len;
 801a002:	b280      	uxth	r0, r0
  while (p != NULL) {
 801a004:	2b00      	cmp	r3, #0
 801a006:	d1fa      	bne.n	8019ffe <pbuf_clen+0x6>
 801a008:	4770      	bx	lr
}
 801a00a:	4770      	bx	lr

0801a00c <pbuf_ref>:
  if (p != NULL) {
 801a00c:	b120      	cbz	r0, 801a018 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801a00e:	7b83      	ldrb	r3, [r0, #14]
 801a010:	3301      	adds	r3, #1
 801a012:	b2db      	uxtb	r3, r3
 801a014:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a016:	b103      	cbz	r3, 801a01a <pbuf_ref+0xe>
}
 801a018:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a01a:	4b03      	ldr	r3, [pc, #12]	; (801a028 <pbuf_ref+0x1c>)
 801a01c:	f240 3242 	movw	r2, #834	; 0x342
 801a020:	4902      	ldr	r1, [pc, #8]	; (801a02c <pbuf_ref+0x20>)
 801a022:	4803      	ldr	r0, [pc, #12]	; (801a030 <pbuf_ref+0x24>)
 801a024:	f00a ba4a 	b.w	80244bc <iprintf>
 801a028:	080e0038 	.word	0x080e0038
 801a02c:	080e01c4 	.word	0x080e01c4
 801a030:	0802ac68 	.word	0x0802ac68

0801a034 <pbuf_cat>:
{
 801a034:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a036:	b330      	cbz	r0, 801a086 <pbuf_cat+0x52>
 801a038:	460d      	mov	r5, r1
 801a03a:	b321      	cbz	r1, 801a086 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801a03c:	6803      	ldr	r3, [r0, #0]
 801a03e:	4604      	mov	r4, r0
 801a040:	b13b      	cbz	r3, 801a052 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a042:	8922      	ldrh	r2, [r4, #8]
 801a044:	8928      	ldrh	r0, [r5, #8]
 801a046:	4402      	add	r2, r0
 801a048:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801a04a:	461c      	mov	r4, r3
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d1f7      	bne.n	801a042 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801a052:	8963      	ldrh	r3, [r4, #10]
 801a054:	8922      	ldrh	r2, [r4, #8]
 801a056:	429a      	cmp	r2, r3
 801a058:	d010      	beq.n	801a07c <pbuf_cat+0x48>
 801a05a:	4b0f      	ldr	r3, [pc, #60]	; (801a098 <pbuf_cat+0x64>)
 801a05c:	f240 3262 	movw	r2, #866	; 0x362
 801a060:	490e      	ldr	r1, [pc, #56]	; (801a09c <pbuf_cat+0x68>)
 801a062:	480f      	ldr	r0, [pc, #60]	; (801a0a0 <pbuf_cat+0x6c>)
 801a064:	f00a fa2a 	bl	80244bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801a068:	6823      	ldr	r3, [r4, #0]
 801a06a:	b133      	cbz	r3, 801a07a <pbuf_cat+0x46>
 801a06c:	4b0a      	ldr	r3, [pc, #40]	; (801a098 <pbuf_cat+0x64>)
 801a06e:	f240 3263 	movw	r2, #867	; 0x363
 801a072:	490c      	ldr	r1, [pc, #48]	; (801a0a4 <pbuf_cat+0x70>)
 801a074:	480a      	ldr	r0, [pc, #40]	; (801a0a0 <pbuf_cat+0x6c>)
 801a076:	f00a fa21 	bl	80244bc <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a07a:	8923      	ldrh	r3, [r4, #8]
 801a07c:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801a07e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a080:	4413      	add	r3, r2
 801a082:	8123      	strh	r3, [r4, #8]
}
 801a084:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a086:	4b04      	ldr	r3, [pc, #16]	; (801a098 <pbuf_cat+0x64>)
 801a088:	f240 3259 	movw	r2, #857	; 0x359
 801a08c:	4906      	ldr	r1, [pc, #24]	; (801a0a8 <pbuf_cat+0x74>)
 801a08e:	4804      	ldr	r0, [pc, #16]	; (801a0a0 <pbuf_cat+0x6c>)
}
 801a090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a094:	f00a ba12 	b.w	80244bc <iprintf>
 801a098:	080e0038 	.word	0x080e0038
 801a09c:	080e0210 	.word	0x080e0210
 801a0a0:	0802ac68 	.word	0x0802ac68
 801a0a4:	080e0240 	.word	0x080e0240
 801a0a8:	080e01d8 	.word	0x080e01d8

0801a0ac <pbuf_chain>:
{
 801a0ac:	b510      	push	{r4, lr}
 801a0ae:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801a0b0:	f7ff ffc0 	bl	801a034 <pbuf_cat>
  if (p != NULL) {
 801a0b4:	b124      	cbz	r4, 801a0c0 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801a0b6:	7ba3      	ldrb	r3, [r4, #14]
 801a0b8:	3301      	adds	r3, #1
 801a0ba:	b2db      	uxtb	r3, r3
 801a0bc:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a0be:	b103      	cbz	r3, 801a0c2 <pbuf_chain+0x16>
}
 801a0c0:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a0c2:	4b04      	ldr	r3, [pc, #16]	; (801a0d4 <pbuf_chain+0x28>)
 801a0c4:	f240 3242 	movw	r2, #834	; 0x342
 801a0c8:	4903      	ldr	r1, [pc, #12]	; (801a0d8 <pbuf_chain+0x2c>)
 801a0ca:	4804      	ldr	r0, [pc, #16]	; (801a0dc <pbuf_chain+0x30>)
}
 801a0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a0d0:	f00a b9f4 	b.w	80244bc <iprintf>
 801a0d4:	080e0038 	.word	0x080e0038
 801a0d8:	080e01c4 	.word	0x080e01c4
 801a0dc:	0802ac68 	.word	0x0802ac68

0801a0e0 <pbuf_copy>:
{
 801a0e0:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a0e2:	b140      	cbz	r0, 801a0f6 <pbuf_copy+0x16>
 801a0e4:	b139      	cbz	r1, 801a0f6 <pbuf_copy+0x16>
 801a0e6:	8902      	ldrh	r2, [r0, #8]
 801a0e8:	890b      	ldrh	r3, [r1, #8]
 801a0ea:	429a      	cmp	r2, r3
 801a0ec:	d303      	bcc.n	801a0f6 <pbuf_copy+0x16>
}
 801a0ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a0f2:	f7ff bced 	b.w	8019ad0 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a0f6:	4b05      	ldr	r3, [pc, #20]	; (801a10c <pbuf_copy+0x2c>)
 801a0f8:	f240 32c9 	movw	r2, #969	; 0x3c9
 801a0fc:	4904      	ldr	r1, [pc, #16]	; (801a110 <pbuf_copy+0x30>)
 801a0fe:	4805      	ldr	r0, [pc, #20]	; (801a114 <pbuf_copy+0x34>)
 801a100:	f00a f9dc 	bl	80244bc <iprintf>
}
 801a104:	f06f 000f 	mvn.w	r0, #15
 801a108:	bd08      	pop	{r3, pc}
 801a10a:	bf00      	nop
 801a10c:	080e0038 	.word	0x080e0038
 801a110:	080e0250 	.word	0x080e0250
 801a114:	0802ac68 	.word	0x0802ac68

0801a118 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801a118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801a11c:	4605      	mov	r5, r0
 801a11e:	b370      	cbz	r0, 801a17e <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801a120:	460f      	mov	r7, r1
 801a122:	2900      	cmp	r1, #0
 801a124:	d036      	beq.n	801a194 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a126:	4690      	mov	r8, r2
 801a128:	b392      	cbz	r2, 801a190 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801a12a:	2600      	movs	r6, #0
 801a12c:	e005      	b.n	801a13a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801a12e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a130:	682d      	ldr	r5, [r5, #0]
 801a132:	f1b8 0f00 	cmp.w	r8, #0
 801a136:	d01f      	beq.n	801a178 <pbuf_copy_partial+0x60>
 801a138:	b1f5      	cbz	r5, 801a178 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a13a:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801a13c:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801a140:	b11b      	cbz	r3, 801a14a <pbuf_copy_partial+0x32>
 801a142:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801a144:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801a148:	d2f1      	bcs.n	801a12e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801a14a:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a14e:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801a150:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a154:	4419      	add	r1, r3
 801a156:	4544      	cmp	r4, r8
 801a158:	bf28      	it	cs
 801a15a:	4644      	movcs	r4, r8
 801a15c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801a15e:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801a160:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a164:	f009 f9e6 	bl	8023534 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801a168:	b2b6      	uxth	r6, r6
      offset = 0;
 801a16a:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801a16c:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a170:	682d      	ldr	r5, [r5, #0]
 801a172:	f1b8 0f00 	cmp.w	r8, #0
 801a176:	d1df      	bne.n	801a138 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801a178:	4630      	mov	r0, r6
 801a17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801a17e:	4b0a      	ldr	r3, [pc, #40]	; (801a1a8 <pbuf_copy_partial+0x90>)
 801a180:	f240 420a 	movw	r2, #1034	; 0x40a
 801a184:	4909      	ldr	r1, [pc, #36]	; (801a1ac <pbuf_copy_partial+0x94>)
 801a186:	462e      	mov	r6, r5
 801a188:	4809      	ldr	r0, [pc, #36]	; (801a1b0 <pbuf_copy_partial+0x98>)
 801a18a:	f00a f997 	bl	80244bc <iprintf>
 801a18e:	e7f3      	b.n	801a178 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801a190:	4616      	mov	r6, r2
 801a192:	e7f1      	b.n	801a178 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801a194:	4b04      	ldr	r3, [pc, #16]	; (801a1a8 <pbuf_copy_partial+0x90>)
 801a196:	f240 420b 	movw	r2, #1035	; 0x40b
 801a19a:	4906      	ldr	r1, [pc, #24]	; (801a1b4 <pbuf_copy_partial+0x9c>)
 801a19c:	463e      	mov	r6, r7
 801a19e:	4804      	ldr	r0, [pc, #16]	; (801a1b0 <pbuf_copy_partial+0x98>)
 801a1a0:	f00a f98c 	bl	80244bc <iprintf>
 801a1a4:	e7e8      	b.n	801a178 <pbuf_copy_partial+0x60>
 801a1a6:	bf00      	nop
 801a1a8:	080e0038 	.word	0x080e0038
 801a1ac:	080e0280 	.word	0x080e0280
 801a1b0:	0802ac68 	.word	0x0802ac68
 801a1b4:	080e02a0 	.word	0x080e02a0

0801a1b8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801a1b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801a1bc:	2800      	cmp	r0, #0
 801a1be:	d049      	beq.n	801a254 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801a1c0:	460f      	mov	r7, r1
 801a1c2:	2900      	cmp	r1, #0
 801a1c4:	d03c      	beq.n	801a240 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801a1c6:	8903      	ldrh	r3, [r0, #8]
 801a1c8:	4604      	mov	r4, r0
 801a1ca:	4690      	mov	r8, r2
 801a1cc:	4293      	cmp	r3, r2
 801a1ce:	d32d      	bcc.n	801a22c <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801a1d0:	b34a      	cbz	r2, 801a226 <pbuf_take+0x6e>
 801a1d2:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801a1d4:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801a1d6:	f8df b094 	ldr.w	fp, [pc, #148]	; 801a26c <pbuf_take+0xb4>
 801a1da:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801a280 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801a1de:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801a1e0:	19b9      	adds	r1, r7, r6
 801a1e2:	6860      	ldr	r0, [r4, #4]
 801a1e4:	42aa      	cmp	r2, r5
 801a1e6:	bf28      	it	cs
 801a1e8:	462a      	movcs	r2, r5
 801a1ea:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801a1ec:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801a1ee:	f009 f9a1 	bl	8023534 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801a1f2:	6824      	ldr	r4, [r4, #0]
 801a1f4:	ebb5 0509 	subs.w	r5, r5, r9
 801a1f8:	d009      	beq.n	801a20e <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801a1fa:	2c00      	cmp	r4, #0
 801a1fc:	d1ef      	bne.n	801a1de <pbuf_take+0x26>
 801a1fe:	465b      	mov	r3, fp
 801a200:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801a204:	4651      	mov	r1, sl
 801a206:	4818      	ldr	r0, [pc, #96]	; (801a268 <pbuf_take+0xb0>)
 801a208:	f00a f958 	bl	80244bc <iprintf>
 801a20c:	e7e7      	b.n	801a1de <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801a20e:	45b0      	cmp	r8, r6
 801a210:	d009      	beq.n	801a226 <pbuf_take+0x6e>
 801a212:	4b16      	ldr	r3, [pc, #88]	; (801a26c <pbuf_take+0xb4>)
 801a214:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801a218:	4915      	ldr	r1, [pc, #84]	; (801a270 <pbuf_take+0xb8>)
 801a21a:	4813      	ldr	r0, [pc, #76]	; (801a268 <pbuf_take+0xb0>)
 801a21c:	f00a f94e 	bl	80244bc <iprintf>
  return ERR_OK;
 801a220:	4628      	mov	r0, r5
}
 801a222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801a226:	2000      	movs	r0, #0
}
 801a228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801a22c:	4b0f      	ldr	r3, [pc, #60]	; (801a26c <pbuf_take+0xb4>)
 801a22e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801a232:	4910      	ldr	r1, [pc, #64]	; (801a274 <pbuf_take+0xbc>)
 801a234:	480c      	ldr	r0, [pc, #48]	; (801a268 <pbuf_take+0xb0>)
 801a236:	f00a f941 	bl	80244bc <iprintf>
 801a23a:	f04f 30ff 	mov.w	r0, #4294967295
 801a23e:	e7f3      	b.n	801a228 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801a240:	4b0a      	ldr	r3, [pc, #40]	; (801a26c <pbuf_take+0xb4>)
 801a242:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801a246:	490c      	ldr	r1, [pc, #48]	; (801a278 <pbuf_take+0xc0>)
 801a248:	4807      	ldr	r0, [pc, #28]	; (801a268 <pbuf_take+0xb0>)
 801a24a:	f00a f937 	bl	80244bc <iprintf>
 801a24e:	f06f 000f 	mvn.w	r0, #15
 801a252:	e7e9      	b.n	801a228 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801a254:	4b05      	ldr	r3, [pc, #20]	; (801a26c <pbuf_take+0xb4>)
 801a256:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801a25a:	4908      	ldr	r1, [pc, #32]	; (801a27c <pbuf_take+0xc4>)
 801a25c:	4802      	ldr	r0, [pc, #8]	; (801a268 <pbuf_take+0xb0>)
 801a25e:	f00a f92d 	bl	80244bc <iprintf>
 801a262:	f06f 000f 	mvn.w	r0, #15
 801a266:	e7df      	b.n	801a228 <pbuf_take+0x70>
 801a268:	0802ac68 	.word	0x0802ac68
 801a26c:	080e0038 	.word	0x080e0038
 801a270:	080e0330 	.word	0x080e0330
 801a274:	080e02f8 	.word	0x080e02f8
 801a278:	080e02dc 	.word	0x080e02dc
 801a27c:	080e02c4 	.word	0x080e02c4
 801a280:	080e0318 	.word	0x080e0318

0801a284 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801a284:	b390      	cbz	r0, 801a2ec <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801a286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a28a:	460f      	mov	r7, r1
 801a28c:	4604      	mov	r4, r0
 801a28e:	e002      	b.n	801a296 <pbuf_take_at+0x12>
    q = q->next;
 801a290:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801a292:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801a294:	b334      	cbz	r4, 801a2e4 <pbuf_take_at+0x60>
 801a296:	8965      	ldrh	r5, [r4, #10]
 801a298:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801a29a:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801a29e:	d9f7      	bls.n	801a290 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801a2a0:	8921      	ldrh	r1, [r4, #8]
 801a2a2:	189e      	adds	r6, r3, r2
 801a2a4:	42b1      	cmp	r1, r6
 801a2a6:	db1d      	blt.n	801a2e4 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801a2a8:	1ae9      	subs	r1, r5, r3
 801a2aa:	428a      	cmp	r2, r1
 801a2ac:	dc07      	bgt.n	801a2be <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801a2ae:	6860      	ldr	r0, [r4, #4]
 801a2b0:	4639      	mov	r1, r7
 801a2b2:	4418      	add	r0, r3
 801a2b4:	f009 f93e 	bl	8023534 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801a2b8:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801a2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801a2be:	fa1f f881 	uxth.w	r8, r1
 801a2c2:	6860      	ldr	r0, [r4, #4]
 801a2c4:	4639      	mov	r1, r7
 801a2c6:	4642      	mov	r2, r8
 801a2c8:	4418      	add	r0, r3
 801a2ca:	f009 f933 	bl	8023534 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801a2ce:	1b70      	subs	r0, r6, r5
 801a2d0:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801a2d2:	2a00      	cmp	r2, #0
 801a2d4:	d0f0      	beq.n	801a2b8 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801a2d6:	eb07 0108 	add.w	r1, r7, r8
 801a2da:	6820      	ldr	r0, [r4, #0]
}
 801a2dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801a2e0:	f7ff bf6a 	b.w	801a1b8 <pbuf_take>
  return ERR_MEM;
 801a2e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801a2ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a2f0:	4770      	bx	lr
 801a2f2:	bf00      	nop

0801a2f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801a2f4:	b538      	push	{r3, r4, r5, lr}
 801a2f6:	4615      	mov	r5, r2
 801a2f8:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801a2fa:	8929      	ldrh	r1, [r5, #8]
 801a2fc:	f7ff fcb2 	bl	8019c64 <pbuf_alloc>
  if (q == NULL) {
 801a300:	4604      	mov	r4, r0
 801a302:	b138      	cbz	r0, 801a314 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a304:	8902      	ldrh	r2, [r0, #8]
 801a306:	892b      	ldrh	r3, [r5, #8]
 801a308:	429a      	cmp	r2, r3
 801a30a:	d305      	bcc.n	801a318 <pbuf_clone+0x24>
 801a30c:	4629      	mov	r1, r5
 801a30e:	f7ff fbdf 	bl	8019ad0 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801a312:	b940      	cbnz	r0, 801a326 <pbuf_clone+0x32>
  return q;
}
 801a314:	4620      	mov	r0, r4
 801a316:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a318:	4b07      	ldr	r3, [pc, #28]	; (801a338 <pbuf_clone+0x44>)
 801a31a:	f240 32c9 	movw	r2, #969	; 0x3c9
 801a31e:	4907      	ldr	r1, [pc, #28]	; (801a33c <pbuf_clone+0x48>)
 801a320:	4807      	ldr	r0, [pc, #28]	; (801a340 <pbuf_clone+0x4c>)
 801a322:	f00a f8cb 	bl	80244bc <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801a326:	4b04      	ldr	r3, [pc, #16]	; (801a338 <pbuf_clone+0x44>)
 801a328:	f240 5224 	movw	r2, #1316	; 0x524
 801a32c:	4905      	ldr	r1, [pc, #20]	; (801a344 <pbuf_clone+0x50>)
 801a32e:	4804      	ldr	r0, [pc, #16]	; (801a340 <pbuf_clone+0x4c>)
 801a330:	f00a f8c4 	bl	80244bc <iprintf>
}
 801a334:	4620      	mov	r0, r4
 801a336:	bd38      	pop	{r3, r4, r5, pc}
 801a338:	080e0038 	.word	0x080e0038
 801a33c:	080e0250 	.word	0x080e0250
 801a340:	0802ac68 	.word	0x0802ac68
 801a344:	080e0348 	.word	0x080e0348

0801a348 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801a348:	b140      	cbz	r0, 801a35c <pbuf_try_get_at+0x14>
 801a34a:	8943      	ldrh	r3, [r0, #10]
 801a34c:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801a34e:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801a352:	d806      	bhi.n	801a362 <pbuf_try_get_at+0x1a>
    q = q->next;
 801a354:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801a356:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801a358:	2800      	cmp	r0, #0
 801a35a:	d1f6      	bne.n	801a34a <pbuf_try_get_at+0x2>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
  }
  return -1;
 801a35c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a360:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801a362:	6843      	ldr	r3, [r0, #4]
 801a364:	5c58      	ldrb	r0, [r3, r1]
 801a366:	4770      	bx	lr

0801a368 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801a368:	b918      	cbnz	r0, 801a372 <pbuf_put_at+0xa>
 801a36a:	e00a      	b.n	801a382 <pbuf_put_at+0x1a>
    q = q->next;
 801a36c:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801a36e:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801a370:	b130      	cbz	r0, 801a380 <pbuf_put_at+0x18>
 801a372:	8943      	ldrh	r3, [r0, #10]
 801a374:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801a376:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801a37a:	d9f7      	bls.n	801a36c <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801a37c:	6843      	ldr	r3, [r0, #4]
 801a37e:	545a      	strb	r2, [r3, r1]
  }
}
 801a380:	4770      	bx	lr
 801a382:	4770      	bx	lr

0801a384 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801a384:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801a386:	8905      	ldrh	r5, [r0, #8]
 801a388:	18cc      	adds	r4, r1, r3
 801a38a:	42a5      	cmp	r5, r4
 801a38c:	db2e      	blt.n	801a3ec <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801a38e:	8944      	ldrh	r4, [r0, #10]
 801a390:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801a392:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801a396:	d803      	bhi.n	801a3a0 <pbuf_memcmp+0x1c>
    q = q->next;
 801a398:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801a39a:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801a39c:	2800      	cmp	r0, #0
 801a39e:	d1f6      	bne.n	801a38e <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801a3a0:	b1f3      	cbz	r3, 801a3e0 <pbuf_memcmp+0x5c>
 801a3a2:	2500      	movs	r5, #0
 801a3a4:	1e56      	subs	r6, r2, #1
 801a3a6:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801a3a8:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801a3ac:	4604      	mov	r4, r0
 801a3ae:	fa1f fc8c 	uxth.w	ip, ip
 801a3b2:	b920      	cbnz	r0, 801a3be <pbuf_memcmp+0x3a>
 801a3b4:	e00b      	b.n	801a3ce <pbuf_memcmp+0x4a>
    q = q->next;
 801a3b6:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801a3b8:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801a3bc:	b13c      	cbz	r4, 801a3ce <pbuf_memcmp+0x4a>
 801a3be:	8962      	ldrh	r2, [r4, #10]
 801a3c0:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801a3c2:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801a3c6:	d2f6      	bcs.n	801a3b6 <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801a3c8:	6862      	ldr	r2, [r4, #4]
 801a3ca:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801a3ce:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801a3d2:	42a2      	cmp	r2, r4
 801a3d4:	d106      	bne.n	801a3e4 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801a3d6:	3501      	adds	r5, #1
 801a3d8:	fa1f fe85 	uxth.w	lr, r5
 801a3dc:	4573      	cmp	r3, lr
 801a3de:	d8e3      	bhi.n	801a3a8 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801a3e0:	2000      	movs	r0, #0
}
 801a3e2:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801a3e4:	f10e 0001 	add.w	r0, lr, #1
 801a3e8:	b280      	uxth	r0, r0
}
 801a3ea:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801a3ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801a3f0:	bd70      	pop	{r4, r5, r6, pc}
 801a3f2:	bf00      	nop

0801a3f4 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3f6:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801a3f8:	8905      	ldrh	r5, [r0, #8]
{
 801a3fa:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801a3fc:	4422      	add	r2, r4
 801a3fe:	4295      	cmp	r5, r2
 801a400:	db15      	blt.n	801a42e <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801a402:	1aed      	subs	r5, r5, r3
 801a404:	4606      	mov	r6, r0
 801a406:	460f      	mov	r7, r1
 801a408:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801a40a:	42a5      	cmp	r5, r4
 801a40c:	d204      	bcs.n	801a418 <pbuf_memfind+0x24>
 801a40e:	e00e      	b.n	801a42e <pbuf_memfind+0x3a>
 801a410:	fa1f f48c 	uxth.w	r4, ip
 801a414:	42a5      	cmp	r5, r4
 801a416:	d30a      	bcc.n	801a42e <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801a418:	4621      	mov	r1, r4
 801a41a:	463a      	mov	r2, r7
 801a41c:	4630      	mov	r0, r6
 801a41e:	f7ff ffb1 	bl	801a384 <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801a422:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801a426:	2800      	cmp	r0, #0
 801a428:	d1f2      	bne.n	801a410 <pbuf_memfind+0x1c>
 801a42a:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801a42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801a42e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801a432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a434 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801a434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a438:	4e33      	ldr	r6, [pc, #204]	; (801a508 <raw_input+0xd4>)
{
 801a43a:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a43c:	6831      	ldr	r1, [r6, #0]
 801a43e:	6970      	ldr	r0, [r6, #20]
 801a440:	f007 fd72 	bl	8021f28 <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801a444:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a448:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801a44a:	4b30      	ldr	r3, [pc, #192]	; (801a50c <raw_input+0xd8>)
 801a44c:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801a44e:	2c00      	cmp	r4, #0
 801a450:	d056      	beq.n	801a500 <raw_input+0xcc>
 801a452:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801a454:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801a456:	f106 0b10 	add.w	fp, r6, #16
 801a45a:	46ca      	mov	sl, r9
  prev = NULL;
 801a45c:	4606      	mov	r6, r0
 801a45e:	e004      	b.n	801a46a <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801a460:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801a462:	4626      	mov	r6, r4
 801a464:	2b00      	cmp	r3, #0
 801a466:	d037      	beq.n	801a4d8 <raw_input+0xa4>
 801a468:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801a46a:	7c23      	ldrb	r3, [r4, #16]
 801a46c:	42ab      	cmp	r3, r5
 801a46e:	d1f7      	bne.n	801a460 <raw_input+0x2c>
 801a470:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a472:	b13a      	cbz	r2, 801a484 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a474:	4b24      	ldr	r3, [pc, #144]	; (801a508 <raw_input+0xd4>)
 801a476:	685b      	ldr	r3, [r3, #4]
 801a478:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a47c:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a47e:	b2db      	uxtb	r3, r3
 801a480:	429a      	cmp	r2, r3
 801a482:	d1ed      	bne.n	801a460 <raw_input+0x2c>
 801a484:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801a486:	f1ba 0f00 	cmp.w	sl, #0
 801a48a:	d027      	beq.n	801a4dc <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d1e7      	bne.n	801a460 <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801a490:	7c63      	ldrb	r3, [r4, #17]
 801a492:	07db      	lsls	r3, r3, #31
 801a494:	d504      	bpl.n	801a4a0 <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801a496:	4b1c      	ldr	r3, [pc, #112]	; (801a508 <raw_input+0xd4>)
 801a498:	6862      	ldr	r2, [r4, #4]
 801a49a:	691b      	ldr	r3, [r3, #16]
 801a49c:	429a      	cmp	r2, r3
 801a49e:	d1df      	bne.n	801a460 <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801a4a0:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801a4a4:	f1b9 0f00 	cmp.w	r9, #0
 801a4a8:	d0da      	beq.n	801a460 <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801a4aa:	465b      	mov	r3, fp
 801a4ac:	4642      	mov	r2, r8
 801a4ae:	4621      	mov	r1, r4
 801a4b0:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801a4b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801a4b6:	47c8      	blx	r9
        if (eaten != 0) {
 801a4b8:	b9c8      	cbnz	r0, 801a4ee <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801a4ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a4be:	42bb      	cmp	r3, r7
 801a4c0:	d013      	beq.n	801a4ea <raw_input+0xb6>
 801a4c2:	4b13      	ldr	r3, [pc, #76]	; (801a510 <raw_input+0xdc>)
 801a4c4:	22c0      	movs	r2, #192	; 0xc0
 801a4c6:	4913      	ldr	r1, [pc, #76]	; (801a514 <raw_input+0xe0>)
 801a4c8:	4626      	mov	r6, r4
 801a4ca:	4813      	ldr	r0, [pc, #76]	; (801a518 <raw_input+0xe4>)
 801a4cc:	f009 fff6 	bl	80244bc <iprintf>
    pcb = pcb->next;
 801a4d0:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801a4d2:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d1c7      	bne.n	801a468 <raw_input+0x34>
  }
  return ret;
}
 801a4d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d0d7      	beq.n	801a490 <raw_input+0x5c>
 801a4e0:	4a09      	ldr	r2, [pc, #36]	; (801a508 <raw_input+0xd4>)
 801a4e2:	6952      	ldr	r2, [r2, #20]
 801a4e4:	4293      	cmp	r3, r2
 801a4e6:	d1bb      	bne.n	801a460 <raw_input+0x2c>
 801a4e8:	e7d2      	b.n	801a490 <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801a4ea:	2002      	movs	r0, #2
 801a4ec:	e7b8      	b.n	801a460 <raw_input+0x2c>
          if (prev != NULL) {
 801a4ee:	b14e      	cbz	r6, 801a504 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801a4f0:	4906      	ldr	r1, [pc, #24]	; (801a50c <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801a4f2:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801a4f4:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801a4f6:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801a4f8:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801a4fa:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801a4fc:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801a4fe:	e7eb      	b.n	801a4d8 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801a500:	4620      	mov	r0, r4
 801a502:	e7e9      	b.n	801a4d8 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801a504:	2001      	movs	r0, #1
 801a506:	e7e7      	b.n	801a4d8 <raw_input+0xa4>
 801a508:	2001eb14 	.word	0x2001eb14
 801a50c:	2002db50 	.word	0x2002db50
 801a510:	080e035c 	.word	0x080e035c
 801a514:	080e038c 	.word	0x080e038c
 801a518:	0802ac68 	.word	0x0802ac68

0801a51c <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a51c:	b110      	cbz	r0, 801a524 <raw_netif_ip_addr_changed+0x8>
 801a51e:	6802      	ldr	r2, [r0, #0]
 801a520:	b101      	cbz	r1, 801a524 <raw_netif_ip_addr_changed+0x8>
 801a522:	b902      	cbnz	r2, 801a526 <raw_netif_ip_addr_changed+0xa>
 801a524:	4770      	bx	lr
 801a526:	680b      	ldr	r3, [r1, #0]
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d0fb      	beq.n	801a524 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801a52c:	4b08      	ldr	r3, [pc, #32]	; (801a550 <raw_netif_ip_addr_changed+0x34>)
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d0f7      	beq.n	801a524 <raw_netif_ip_addr_changed+0x8>
{
 801a534:	b410      	push	{r4}
 801a536:	e000      	b.n	801a53a <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801a538:	6802      	ldr	r2, [r0, #0]
 801a53a:	681c      	ldr	r4, [r3, #0]
 801a53c:	4294      	cmp	r4, r2
 801a53e:	d101      	bne.n	801a544 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801a540:	680a      	ldr	r2, [r1, #0]
 801a542:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801a544:	68db      	ldr	r3, [r3, #12]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d1f6      	bne.n	801a538 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801a54a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a54e:	4770      	bx	lr
 801a550:	2002db50 	.word	0x2002db50

0801a554 <stats_init>:
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 801a554:	4770      	bx	lr
 801a556:	bf00      	nop

0801a558 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801a558:	b4f0      	push	{r4, r5, r6, r7}
 801a55a:	4f13      	ldr	r7, [pc, #76]	; (801a5a8 <tcp_new_port+0x50>)
 801a55c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801a560:	4e12      	ldr	r6, [pc, #72]	; (801a5ac <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801a562:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801a566:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801a568:	4d11      	ldr	r5, [pc, #68]	; (801a5b0 <tcp_new_port+0x58>)
  tcp_port++;
 801a56a:	3001      	adds	r0, #1
 801a56c:	4c11      	ldr	r4, [pc, #68]	; (801a5b4 <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801a56e:	462b      	mov	r3, r5
  tcp_port++;
 801a570:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801a572:	4560      	cmp	r0, ip
 801a574:	bf08      	it	eq
 801a576:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	b913      	cbnz	r3, 801a584 <tcp_new_port+0x2c>
 801a57e:	e00b      	b.n	801a598 <tcp_new_port+0x40>
 801a580:	68db      	ldr	r3, [r3, #12]
 801a582:	b14b      	cbz	r3, 801a598 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801a584:	8ada      	ldrh	r2, [r3, #22]
 801a586:	4282      	cmp	r2, r0
 801a588:	d1fa      	bne.n	801a580 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801a58a:	3901      	subs	r1, #1
 801a58c:	b289      	uxth	r1, r1
 801a58e:	2900      	cmp	r1, #0
 801a590:	d1eb      	bne.n	801a56a <tcp_new_port+0x12>
 801a592:	8038      	strh	r0, [r7, #0]
          return 0;
 801a594:	4608      	mov	r0, r1
 801a596:	e005      	b.n	801a5a4 <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801a598:	42b4      	cmp	r4, r6
 801a59a:	d002      	beq.n	801a5a2 <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a59c:	f854 3b04 	ldr.w	r3, [r4], #4
 801a5a0:	e7eb      	b.n	801a57a <tcp_new_port+0x22>
 801a5a2:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801a5a4:	bcf0      	pop	{r4, r5, r6, r7}
 801a5a6:	4770      	bx	lr
 801a5a8:	20000410 	.word	0x20000410
 801a5ac:	080e0acc 	.word	0x080e0acc
 801a5b0:	2002dc68 	.word	0x2002dc68
 801a5b4:	080e0ac0 	.word	0x080e0ac0

0801a5b8 <tcp_close_shutdown_fin>:
{
 801a5b8:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801a5ba:	4604      	mov	r4, r0
 801a5bc:	b310      	cbz	r0, 801a604 <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801a5be:	7d23      	ldrb	r3, [r4, #20]
 801a5c0:	2b04      	cmp	r3, #4
 801a5c2:	d005      	beq.n	801a5d0 <tcp_close_shutdown_fin+0x18>
 801a5c4:	2b07      	cmp	r3, #7
 801a5c6:	d00e      	beq.n	801a5e6 <tcp_close_shutdown_fin+0x2e>
 801a5c8:	2b03      	cmp	r3, #3
 801a5ca:	d001      	beq.n	801a5d0 <tcp_close_shutdown_fin+0x18>
 801a5cc:	2000      	movs	r0, #0
}
 801a5ce:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801a5d0:	4620      	mov	r0, r4
 801a5d2:	f003 fdf3 	bl	801e1bc <tcp_send_fin>
      if (err == ERR_OK) {
 801a5d6:	b950      	cbnz	r0, 801a5ee <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801a5d8:	2305      	movs	r3, #5
 801a5da:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801a5dc:	4620      	mov	r0, r4
 801a5de:	f003 ff5d 	bl	801e49c <tcp_output>
 801a5e2:	2000      	movs	r0, #0
}
 801a5e4:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801a5e6:	4620      	mov	r0, r4
 801a5e8:	f003 fde8 	bl	801e1bc <tcp_send_fin>
      if (err == ERR_OK) {
 801a5ec:	b138      	cbz	r0, 801a5fe <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801a5ee:	1c43      	adds	r3, r0, #1
 801a5f0:	d1ed      	bne.n	801a5ce <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801a5f2:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801a5f4:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801a5f6:	f043 0308 	orr.w	r3, r3, #8
 801a5fa:	8363      	strh	r3, [r4, #26]
}
 801a5fc:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801a5fe:	2309      	movs	r3, #9
 801a600:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801a602:	e7eb      	b.n	801a5dc <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801a604:	4b03      	ldr	r3, [pc, #12]	; (801a614 <tcp_close_shutdown_fin+0x5c>)
 801a606:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801a60a:	4903      	ldr	r1, [pc, #12]	; (801a618 <tcp_close_shutdown_fin+0x60>)
 801a60c:	4803      	ldr	r0, [pc, #12]	; (801a61c <tcp_close_shutdown_fin+0x64>)
 801a60e:	f009 ff55 	bl	80244bc <iprintf>
 801a612:	e7d4      	b.n	801a5be <tcp_close_shutdown_fin+0x6>
 801a614:	080e03d8 	.word	0x080e03d8
 801a618:	080e0408 	.word	0x080e0408
 801a61c:	0802ac68 	.word	0x0802ac68

0801a620 <tcp_init>:
{
 801a620:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a622:	f009 ffef 	bl	8024604 <rand>
 801a626:	4b02      	ldr	r3, [pc, #8]	; (801a630 <tcp_init+0x10>)
 801a628:	4a02      	ldr	r2, [pc, #8]	; (801a634 <tcp_init+0x14>)
 801a62a:	4303      	orrs	r3, r0
 801a62c:	8013      	strh	r3, [r2, #0]
}
 801a62e:	bd08      	pop	{r3, pc}
 801a630:	ffffc000 	.word	0xffffc000
 801a634:	20000410 	.word	0x20000410

0801a638 <tcp_free>:
{
 801a638:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a63a:	7d03      	ldrb	r3, [r0, #20]
{
 801a63c:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a63e:	2b01      	cmp	r3, #1
 801a640:	d005      	beq.n	801a64e <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801a642:	4621      	mov	r1, r4
 801a644:	2002      	movs	r0, #2
}
 801a646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801a64a:	f7fe bfc5 	b.w	80195d8 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a64e:	4906      	ldr	r1, [pc, #24]	; (801a668 <tcp_free+0x30>)
 801a650:	22d4      	movs	r2, #212	; 0xd4
 801a652:	4b06      	ldr	r3, [pc, #24]	; (801a66c <tcp_free+0x34>)
 801a654:	4806      	ldr	r0, [pc, #24]	; (801a670 <tcp_free+0x38>)
 801a656:	f009 ff31 	bl	80244bc <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801a65a:	4621      	mov	r1, r4
 801a65c:	2002      	movs	r0, #2
}
 801a65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801a662:	f7fe bfb9 	b.w	80195d8 <memp_free>
 801a666:	bf00      	nop
 801a668:	080e0414 	.word	0x080e0414
 801a66c:	080e03d8 	.word	0x080e03d8
 801a670:	0802ac68 	.word	0x0802ac68

0801a674 <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801a674:	2900      	cmp	r1, #0
{
 801a676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801a678:	4b26      	ldr	r3, [pc, #152]	; (801a714 <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801a67a:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801a67c:	bf14      	ite	ne
 801a67e:	460e      	movne	r6, r1
 801a680:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a682:	2800      	cmp	r0, #0
 801a684:	d03c      	beq.n	801a700 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801a686:	7d03      	ldrb	r3, [r0, #20]
 801a688:	4607      	mov	r7, r0
 801a68a:	bb7b      	cbnz	r3, 801a6ec <tcp_bind+0x78>
  if (port == 0) {
 801a68c:	b31a      	cbz	r2, 801a6d6 <tcp_bind+0x62>
 801a68e:	4922      	ldr	r1, [pc, #136]	; (801a718 <tcp_bind+0xa4>)
 801a690:	4b22      	ldr	r3, [pc, #136]	; (801a71c <tcp_bind+0xa8>)
 801a692:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	b913      	cbnz	r3, 801a6a0 <tcp_bind+0x2c>
 801a69a:	e00e      	b.n	801a6ba <tcp_bind+0x46>
 801a69c:	68db      	ldr	r3, [r3, #12]
 801a69e:	b163      	cbz	r3, 801a6ba <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801a6a0:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801a6a4:	4594      	cmp	ip, r2
 801a6a6:	d1f9      	bne.n	801a69c <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801a6a8:	681c      	ldr	r4, [r3, #0]
 801a6aa:	b11c      	cbz	r4, 801a6b4 <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801a6ac:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801a6ae:	b10d      	cbz	r5, 801a6b4 <tcp_bind+0x40>
 801a6b0:	42ac      	cmp	r4, r5
 801a6b2:	d1f3      	bne.n	801a69c <tcp_bind+0x28>
              return ERR_USE;
 801a6b4:	f06f 0007 	mvn.w	r0, #7
}
 801a6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801a6ba:	4281      	cmp	r1, r0
 801a6bc:	d113      	bne.n	801a6e6 <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801a6be:	6833      	ldr	r3, [r6, #0]
 801a6c0:	b103      	cbz	r3, 801a6c4 <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801a6c2:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801a6c4:	4b16      	ldr	r3, [pc, #88]	; (801a720 <tcp_bind+0xac>)
  pcb->local_port = port;
 801a6c6:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801a6c8:	681a      	ldr	r2, [r3, #0]
 801a6ca:	601f      	str	r7, [r3, #0]
 801a6cc:	60fa      	str	r2, [r7, #12]
 801a6ce:	f004 fa1b 	bl	801eb08 <tcp_timer_needed>
  return ERR_OK;
 801a6d2:	2000      	movs	r0, #0
}
 801a6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801a6d6:	f7ff ff3f 	bl	801a558 <tcp_new_port>
    if (port == 0) {
 801a6da:	4602      	mov	r2, r0
 801a6dc:	2800      	cmp	r0, #0
 801a6de:	d1ee      	bne.n	801a6be <tcp_bind+0x4a>
      return ERR_BUF;
 801a6e0:	f06f 0001 	mvn.w	r0, #1
}
 801a6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801a6e6:	f851 3b04 	ldr.w	r3, [r1], #4
 801a6ea:	e7d4      	b.n	801a696 <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801a6ec:	4b0d      	ldr	r3, [pc, #52]	; (801a724 <tcp_bind+0xb0>)
 801a6ee:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a6f2:	490d      	ldr	r1, [pc, #52]	; (801a728 <tcp_bind+0xb4>)
 801a6f4:	480d      	ldr	r0, [pc, #52]	; (801a72c <tcp_bind+0xb8>)
 801a6f6:	f009 fee1 	bl	80244bc <iprintf>
 801a6fa:	f06f 0005 	mvn.w	r0, #5
}
 801a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a700:	4b08      	ldr	r3, [pc, #32]	; (801a724 <tcp_bind+0xb0>)
 801a702:	f240 22a9 	movw	r2, #681	; 0x2a9
 801a706:	490a      	ldr	r1, [pc, #40]	; (801a730 <tcp_bind+0xbc>)
 801a708:	4808      	ldr	r0, [pc, #32]	; (801a72c <tcp_bind+0xb8>)
 801a70a:	f009 fed7 	bl	80244bc <iprintf>
 801a70e:	f06f 000f 	mvn.w	r0, #15
}
 801a712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a714:	080e1ff0 	.word	0x080e1ff0
 801a718:	080e0ac0 	.word	0x080e0ac0
 801a71c:	2002dc68 	.word	0x2002dc68
 801a720:	2002dc64 	.word	0x2002dc64
 801a724:	080e03d8 	.word	0x080e03d8
 801a728:	080e0440 	.word	0x080e0440
 801a72c:	0802ac68 	.word	0x0802ac68
 801a730:	080e0428 	.word	0x080e0428

0801a734 <tcp_listen_with_backlog_and_err>:
{
 801a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801a736:	4604      	mov	r4, r0
{
 801a738:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801a73a:	2800      	cmp	r0, #0
 801a73c:	d060      	beq.n	801a800 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801a73e:	7d05      	ldrb	r5, [r0, #20]
 801a740:	2d00      	cmp	r5, #0
 801a742:	d14a      	bne.n	801a7da <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801a744:	f240 3272 	movw	r2, #882	; 0x372
 801a748:	4933      	ldr	r1, [pc, #204]	; (801a818 <tcp_listen_with_backlog_and_err+0xe4>)
 801a74a:	2003      	movs	r0, #3
 801a74c:	f7fe ff00 	bl	8019550 <memp_malloc_fn>
  if (lpcb == NULL) {
 801a750:	4606      	mov	r6, r0
 801a752:	2800      	cmp	r0, #0
 801a754:	d051      	beq.n	801a7fa <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801a756:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801a758:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801a75a:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801a75c:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801a75e:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801a760:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801a762:	7d62      	ldrb	r2, [r4, #21]
 801a764:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801a766:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801a768:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801a76a:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801a76c:	7ae2      	ldrb	r2, [r4, #11]
 801a76e:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801a770:	7aa2      	ldrb	r2, [r4, #10]
 801a772:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801a774:	6822      	ldr	r2, [r4, #0]
 801a776:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801a778:	b99b      	cbnz	r3, 801a7a2 <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a77a:	7d23      	ldrb	r3, [r4, #20]
 801a77c:	2b01      	cmp	r3, #1
 801a77e:	d020      	beq.n	801a7c2 <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801a780:	4621      	mov	r1, r4
 801a782:	2002      	movs	r0, #2
 801a784:	f7fe ff28 	bl	80195d8 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801a788:	4b24      	ldr	r3, [pc, #144]	; (801a81c <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801a78a:	4925      	ldr	r1, [pc, #148]	; (801a820 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801a78c:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801a78e:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801a790:	60f2      	str	r2, [r6, #12]
 801a792:	601e      	str	r6, [r3, #0]
 801a794:	f004 f9b8 	bl	801eb08 <tcp_timer_needed>
  res = ERR_OK;
 801a798:	2300      	movs	r3, #0
  if (err != NULL) {
 801a79a:	b107      	cbz	r7, 801a79e <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801a79c:	703b      	strb	r3, [r7, #0]
}
 801a79e:	4630      	mov	r0, r6
 801a7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801a7a2:	4a20      	ldr	r2, [pc, #128]	; (801a824 <tcp_listen_with_backlog_and_err+0xf0>)
 801a7a4:	6813      	ldr	r3, [r2, #0]
 801a7a6:	42a3      	cmp	r3, r4
 801a7a8:	d012      	beq.n	801a7d0 <tcp_listen_with_backlog_and_err+0x9c>
 801a7aa:	b12b      	cbz	r3, 801a7b8 <tcp_listen_with_backlog_and_err+0x84>
 801a7ac:	68d9      	ldr	r1, [r3, #12]
 801a7ae:	42a1      	cmp	r1, r4
 801a7b0:	d01e      	beq.n	801a7f0 <tcp_listen_with_backlog_and_err+0xbc>
 801a7b2:	460b      	mov	r3, r1
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d1f9      	bne.n	801a7ac <tcp_listen_with_backlog_and_err+0x78>
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a7bc:	7d23      	ldrb	r3, [r4, #20]
 801a7be:	2b01      	cmp	r3, #1
 801a7c0:	d1de      	bne.n	801a780 <tcp_listen_with_backlog_and_err+0x4c>
 801a7c2:	4b15      	ldr	r3, [pc, #84]	; (801a818 <tcp_listen_with_backlog_and_err+0xe4>)
 801a7c4:	22d4      	movs	r2, #212	; 0xd4
 801a7c6:	4918      	ldr	r1, [pc, #96]	; (801a828 <tcp_listen_with_backlog_and_err+0xf4>)
 801a7c8:	4818      	ldr	r0, [pc, #96]	; (801a82c <tcp_listen_with_backlog_and_err+0xf8>)
 801a7ca:	f009 fe77 	bl	80244bc <iprintf>
 801a7ce:	e7d7      	b.n	801a780 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801a7d0:	68e3      	ldr	r3, [r4, #12]
 801a7d2:	6013      	str	r3, [r2, #0]
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	60e3      	str	r3, [r4, #12]
 801a7d8:	e7f0      	b.n	801a7bc <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801a7da:	4b0f      	ldr	r3, [pc, #60]	; (801a818 <tcp_listen_with_backlog_and_err+0xe4>)
 801a7dc:	f240 325a 	movw	r2, #858	; 0x35a
 801a7e0:	4913      	ldr	r1, [pc, #76]	; (801a830 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801a7e2:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801a7e4:	4811      	ldr	r0, [pc, #68]	; (801a82c <tcp_listen_with_backlog_and_err+0xf8>)
 801a7e6:	f009 fe69 	bl	80244bc <iprintf>
 801a7ea:	f06f 030e 	mvn.w	r3, #14
 801a7ee:	e7d4      	b.n	801a79a <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801a7f0:	68e2      	ldr	r2, [r4, #12]
 801a7f2:	60da      	str	r2, [r3, #12]
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	60e3      	str	r3, [r4, #12]
 801a7f8:	e7e0      	b.n	801a7bc <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801a7fa:	f04f 33ff 	mov.w	r3, #4294967295
 801a7fe:	e7cc      	b.n	801a79a <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801a800:	4b05      	ldr	r3, [pc, #20]	; (801a818 <tcp_listen_with_backlog_and_err+0xe4>)
 801a802:	f240 3259 	movw	r2, #857	; 0x359
 801a806:	490b      	ldr	r1, [pc, #44]	; (801a834 <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801a808:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801a80a:	4808      	ldr	r0, [pc, #32]	; (801a82c <tcp_listen_with_backlog_and_err+0xf8>)
 801a80c:	f009 fe56 	bl	80244bc <iprintf>
 801a810:	f06f 030f 	mvn.w	r3, #15
 801a814:	e7c1      	b.n	801a79a <tcp_listen_with_backlog_and_err+0x66>
 801a816:	bf00      	nop
 801a818:	080e03d8 	.word	0x080e03d8
 801a81c:	2002dc68 	.word	0x2002dc68
 801a820:	0801b4c9 	.word	0x0801b4c9
 801a824:	2002dc64 	.word	0x2002dc64
 801a828:	080e0414 	.word	0x080e0414
 801a82c:	0802ac68 	.word	0x0802ac68
 801a830:	080e0498 	.word	0x080e0498
 801a834:	080e0468 	.word	0x080e0468

0801a838 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801a838:	2200      	movs	r2, #0
 801a83a:	f7ff bf7b 	b.w	801a734 <tcp_listen_with_backlog_and_err>
 801a83e:	bf00      	nop

0801a840 <tcp_update_rcv_ann_wnd>:
{
 801a840:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801a842:	4604      	mov	r4, r0
 801a844:	b1c0      	cbz	r0, 801a878 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801a846:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801a848:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a84a:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801a84e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801a850:	1ad0      	subs	r0, r2, r3
 801a852:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801a856:	4428      	add	r0, r5
 801a858:	bf94      	ite	ls
 801a85a:	eba0 010c 	subls.w	r1, r0, ip
 801a85e:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801a862:	2900      	cmp	r1, #0
 801a864:	db01      	blt.n	801a86a <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801a866:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801a868:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801a86a:	1aea      	subs	r2, r5, r3
 801a86c:	2a00      	cmp	r2, #0
 801a86e:	dd0b      	ble.n	801a888 <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801a870:	2300      	movs	r3, #0
    return 0;
 801a872:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801a874:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801a876:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801a878:	4b0b      	ldr	r3, [pc, #44]	; (801a8a8 <tcp_update_rcv_ann_wnd+0x68>)
 801a87a:	f240 32a6 	movw	r2, #934	; 0x3a6
 801a87e:	490b      	ldr	r1, [pc, #44]	; (801a8ac <tcp_update_rcv_ann_wnd+0x6c>)
 801a880:	480b      	ldr	r0, [pc, #44]	; (801a8b0 <tcp_update_rcv_ann_wnd+0x70>)
 801a882:	f009 fe1b 	bl	80244bc <iprintf>
 801a886:	e7de      	b.n	801a846 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801a888:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801a88a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801a88e:	d202      	bcs.n	801a896 <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801a890:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801a892:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801a894:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801a896:	4b04      	ldr	r3, [pc, #16]	; (801a8a8 <tcp_update_rcv_ann_wnd+0x68>)
 801a898:	f240 32b6 	movw	r2, #950	; 0x3b6
 801a89c:	4905      	ldr	r1, [pc, #20]	; (801a8b4 <tcp_update_rcv_ann_wnd+0x74>)
 801a89e:	4804      	ldr	r0, [pc, #16]	; (801a8b0 <tcp_update_rcv_ann_wnd+0x70>)
 801a8a0:	f009 fe0c 	bl	80244bc <iprintf>
 801a8a4:	e7f4      	b.n	801a890 <tcp_update_rcv_ann_wnd+0x50>
 801a8a6:	bf00      	nop
 801a8a8:	080e03d8 	.word	0x080e03d8
 801a8ac:	080e04d0 	.word	0x080e04d0
 801a8b0:	0802ac68 	.word	0x0802ac68
 801a8b4:	080e04f4 	.word	0x080e04f4

0801a8b8 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801a8b8:	b340      	cbz	r0, 801a90c <tcp_recved+0x54>
{
 801a8ba:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801a8bc:	7d03      	ldrb	r3, [r0, #20]
 801a8be:	4605      	mov	r5, r0
 801a8c0:	460c      	mov	r4, r1
 801a8c2:	2b01      	cmp	r3, #1
 801a8c4:	d01a      	beq.n	801a8fc <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801a8c6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801a8c8:	1919      	adds	r1, r3, r4
 801a8ca:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801a8cc:	428b      	cmp	r3, r1
 801a8ce:	d802      	bhi.n	801a8d6 <tcp_recved+0x1e>
 801a8d0:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801a8d4:	d901      	bls.n	801a8da <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801a8d6:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801a8da:	4628      	mov	r0, r5
 801a8dc:	8529      	strh	r1, [r5, #40]	; 0x28
 801a8de:	f7ff ffaf 	bl	801a840 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801a8e2:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801a8e6:	d200      	bcs.n	801a8ea <tcp_recved+0x32>
}
 801a8e8:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801a8ea:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801a8ec:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801a8ee:	f043 0302 	orr.w	r3, r3, #2
 801a8f2:	836b      	strh	r3, [r5, #26]
}
 801a8f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801a8f8:	f003 bdd0 	b.w	801e49c <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801a8fc:	4b07      	ldr	r3, [pc, #28]	; (801a91c <tcp_recved+0x64>)
 801a8fe:	f240 32d2 	movw	r2, #978	; 0x3d2
 801a902:	4907      	ldr	r1, [pc, #28]	; (801a920 <tcp_recved+0x68>)
 801a904:	4807      	ldr	r0, [pc, #28]	; (801a924 <tcp_recved+0x6c>)
 801a906:	f009 fdd9 	bl	80244bc <iprintf>
 801a90a:	e7dc      	b.n	801a8c6 <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801a90c:	4b03      	ldr	r3, [pc, #12]	; (801a91c <tcp_recved+0x64>)
 801a90e:	f240 32cf 	movw	r2, #975	; 0x3cf
 801a912:	4905      	ldr	r1, [pc, #20]	; (801a928 <tcp_recved+0x70>)
 801a914:	4803      	ldr	r0, [pc, #12]	; (801a924 <tcp_recved+0x6c>)
 801a916:	f009 bdd1 	b.w	80244bc <iprintf>
 801a91a:	bf00      	nop
 801a91c:	080e03d8 	.word	0x080e03d8
 801a920:	080e0528 	.word	0x080e0528
 801a924:	0802ac68 	.word	0x0802ac68
 801a928:	080e0510 	.word	0x080e0510

0801a92c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801a92e:	2800      	cmp	r0, #0
 801a930:	f000 808c 	beq.w	801aa4c <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801a934:	2900      	cmp	r1, #0
 801a936:	d07f      	beq.n	801aa38 <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801a938:	461e      	mov	r6, r3
 801a93a:	7d03      	ldrb	r3, [r0, #20]
 801a93c:	4604      	mov	r4, r0
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d16a      	bne.n	801aa18 <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801a942:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a944:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801a946:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801a948:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a94a:	2800      	cmp	r0, #0
 801a94c:	d049      	beq.n	801a9e2 <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801a94e:	f7ff f835 	bl	80199bc <netif_get_by_index>
 801a952:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801a954:	2d00      	cmp	r5, #0
 801a956:	d06c      	beq.n	801aa32 <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a958:	6823      	ldr	r3, [r4, #0]
 801a95a:	b90b      	cbnz	r3, 801a960 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a95c:	686b      	ldr	r3, [r5, #4]
 801a95e:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801a960:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801a962:	b927      	cbnz	r7, 801a96e <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801a964:	f7ff fdf8 	bl	801a558 <tcp_new_port>
 801a968:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801a96a:	2800      	cmp	r0, #0
 801a96c:	d05e      	beq.n	801aa2c <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801a96e:	4b3c      	ldr	r3, [pc, #240]	; (801aa60 <tcp_connect+0x134>)
 801a970:	4a3c      	ldr	r2, [pc, #240]	; (801aa64 <tcp_connect+0x138>)
 801a972:	6811      	ldr	r1, [r2, #0]
 801a974:	681a      	ldr	r2, [r3, #0]
 801a976:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801a978:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801a97c:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801a97e:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801a980:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a982:	4b39      	ldr	r3, [pc, #228]	; (801aa68 <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801a984:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a986:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801a988:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801a98a:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801a98e:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801a992:	2200      	movs	r2, #0
 801a994:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a996:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d037      	beq.n	801aa0c <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801a99c:	2b28      	cmp	r3, #40	; 0x28
 801a99e:	d907      	bls.n	801a9b0 <tcp_connect+0x84>
 801a9a0:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801a9a4:	b292      	uxth	r2, r2
 801a9a6:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801a9aa:	bf28      	it	cs
 801a9ac:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801a9b0:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801a9b2:	2102      	movs	r1, #2
 801a9b4:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801a9b6:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801a9b8:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801a9bc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801a9c0:	f003 fb48 	bl	801e054 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801a9c4:	4605      	mov	r5, r0
 801a9c6:	b9f8      	cbnz	r0, 801aa08 <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801a9c8:	2302      	movs	r3, #2
 801a9ca:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801a9cc:	b187      	cbz	r7, 801a9f0 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801a9ce:	4a27      	ldr	r2, [pc, #156]	; (801aa6c <tcp_connect+0x140>)
 801a9d0:	6813      	ldr	r3, [r2, #0]
 801a9d2:	42a3      	cmp	r3, r4
 801a9d4:	d01d      	beq.n	801aa12 <tcp_connect+0xe6>
 801a9d6:	b15b      	cbz	r3, 801a9f0 <tcp_connect+0xc4>
 801a9d8:	68da      	ldr	r2, [r3, #12]
 801a9da:	42a2      	cmp	r2, r4
 801a9dc:	d006      	beq.n	801a9ec <tcp_connect+0xc0>
 801a9de:	4613      	mov	r3, r2
 801a9e0:	e7f9      	b.n	801a9d6 <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a9e2:	1d20      	adds	r0, r4, #4
 801a9e4:	f007 f86e 	bl	8021ac4 <ip4_route>
 801a9e8:	4605      	mov	r5, r0
 801a9ea:	e7b3      	b.n	801a954 <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801a9ec:	68e2      	ldr	r2, [r4, #12]
 801a9ee:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801a9f0:	4b1f      	ldr	r3, [pc, #124]	; (801aa70 <tcp_connect+0x144>)
 801a9f2:	681a      	ldr	r2, [r3, #0]
 801a9f4:	601c      	str	r4, [r3, #0]
 801a9f6:	60e2      	str	r2, [r4, #12]
 801a9f8:	f004 f886 	bl	801eb08 <tcp_timer_needed>
 801a9fc:	4b1d      	ldr	r3, [pc, #116]	; (801aa74 <tcp_connect+0x148>)
 801a9fe:	2201      	movs	r2, #1
    tcp_output(pcb);
 801aa00:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801aa02:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801aa04:	f003 fd4a 	bl	801e49c <tcp_output>
}
 801aa08:	4628      	mov	r0, r5
 801aa0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa0c:	f44f 7206 	mov.w	r2, #536	; 0x218
 801aa10:	e7ce      	b.n	801a9b0 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801aa12:	68e3      	ldr	r3, [r4, #12]
 801aa14:	6013      	str	r3, [r2, #0]
 801aa16:	e7eb      	b.n	801a9f0 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801aa18:	4b17      	ldr	r3, [pc, #92]	; (801aa78 <tcp_connect+0x14c>)
 801aa1a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801aa1e:	4917      	ldr	r1, [pc, #92]	; (801aa7c <tcp_connect+0x150>)
 801aa20:	f06f 0509 	mvn.w	r5, #9
 801aa24:	4816      	ldr	r0, [pc, #88]	; (801aa80 <tcp_connect+0x154>)
 801aa26:	f009 fd49 	bl	80244bc <iprintf>
 801aa2a:	e7ed      	b.n	801aa08 <tcp_connect+0xdc>
      return ERR_BUF;
 801aa2c:	f06f 0501 	mvn.w	r5, #1
 801aa30:	e7ea      	b.n	801aa08 <tcp_connect+0xdc>
    return ERR_RTE;
 801aa32:	f06f 0503 	mvn.w	r5, #3
 801aa36:	e7e7      	b.n	801aa08 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801aa38:	4b0f      	ldr	r3, [pc, #60]	; (801aa78 <tcp_connect+0x14c>)
 801aa3a:	f240 4236 	movw	r2, #1078	; 0x436
 801aa3e:	4911      	ldr	r1, [pc, #68]	; (801aa84 <tcp_connect+0x158>)
 801aa40:	f06f 050f 	mvn.w	r5, #15
 801aa44:	480e      	ldr	r0, [pc, #56]	; (801aa80 <tcp_connect+0x154>)
 801aa46:	f009 fd39 	bl	80244bc <iprintf>
 801aa4a:	e7dd      	b.n	801aa08 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa4c:	4b0a      	ldr	r3, [pc, #40]	; (801aa78 <tcp_connect+0x14c>)
 801aa4e:	f240 4235 	movw	r2, #1077	; 0x435
 801aa52:	490d      	ldr	r1, [pc, #52]	; (801aa88 <tcp_connect+0x15c>)
 801aa54:	f06f 050f 	mvn.w	r5, #15
 801aa58:	4809      	ldr	r0, [pc, #36]	; (801aa80 <tcp_connect+0x154>)
 801aa5a:	f009 fd2f 	bl	80244bc <iprintf>
 801aa5e:	e7d3      	b.n	801aa08 <tcp_connect+0xdc>
 801aa60:	2000040c 	.word	0x2000040c
 801aa64:	2002dc6c 	.word	0x2002dc6c
 801aa68:	08600860 	.word	0x08600860
 801aa6c:	2002dc64 	.word	0x2002dc64
 801aa70:	2002dc5c 	.word	0x2002dc5c
 801aa74:	2002dc60 	.word	0x2002dc60
 801aa78:	080e03d8 	.word	0x080e03d8
 801aa7c:	080e0588 	.word	0x080e0588
 801aa80:	0802ac68 	.word	0x0802ac68
 801aa84:	080e056c 	.word	0x080e056c
 801aa88:	080e0550 	.word	0x080e0550

0801aa8c <tcp_segs_free>:
  while (seg != NULL) {
 801aa8c:	b170      	cbz	r0, 801aaac <tcp_segs_free+0x20>
{
 801aa8e:	b538      	push	{r3, r4, r5, lr}
 801aa90:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801aa92:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801aa94:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801aa96:	6868      	ldr	r0, [r5, #4]
 801aa98:	b108      	cbz	r0, 801aa9e <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801aa9a:	f7ff fa99 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801aa9e:	4629      	mov	r1, r5
 801aaa0:	2004      	movs	r0, #4
 801aaa2:	f7fe fd99 	bl	80195d8 <memp_free>
  while (seg != NULL) {
 801aaa6:	2c00      	cmp	r4, #0
 801aaa8:	d1f3      	bne.n	801aa92 <tcp_segs_free+0x6>
}
 801aaaa:	bd38      	pop	{r3, r4, r5, pc}
 801aaac:	4770      	bx	lr
 801aaae:	bf00      	nop

0801aab0 <tcp_seg_free>:
  if (seg != NULL) {
 801aab0:	b158      	cbz	r0, 801aaca <tcp_seg_free+0x1a>
{
 801aab2:	b510      	push	{r4, lr}
 801aab4:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801aab6:	6840      	ldr	r0, [r0, #4]
 801aab8:	b108      	cbz	r0, 801aabe <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801aaba:	f7ff fa89 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801aabe:	4621      	mov	r1, r4
 801aac0:	2004      	movs	r0, #4
}
 801aac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801aac6:	f7fe bd87 	b.w	80195d8 <memp_free>
 801aaca:	4770      	bx	lr

0801aacc <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801aacc:	b108      	cbz	r0, 801aad2 <tcp_setprio+0x6>
  pcb->prio = prio;
 801aace:	7541      	strb	r1, [r0, #21]
}
 801aad0:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801aad2:	4b03      	ldr	r3, [pc, #12]	; (801aae0 <tcp_setprio+0x14>)
 801aad4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801aad8:	4902      	ldr	r1, [pc, #8]	; (801aae4 <tcp_setprio+0x18>)
 801aada:	4803      	ldr	r0, [pc, #12]	; (801aae8 <tcp_setprio+0x1c>)
 801aadc:	f009 bcee 	b.w	80244bc <iprintf>
 801aae0:	080e03d8 	.word	0x080e03d8
 801aae4:	080e05b8 	.word	0x080e05b8
 801aae8:	0802ac68 	.word	0x0802ac68

0801aaec <tcp_seg_copy>:
{
 801aaec:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801aaee:	4605      	mov	r5, r0
 801aaf0:	b1a0      	cbz	r0, 801ab1c <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801aaf2:	f240 6284 	movw	r2, #1668	; 0x684
 801aaf6:	490d      	ldr	r1, [pc, #52]	; (801ab2c <tcp_seg_copy+0x40>)
 801aaf8:	2004      	movs	r0, #4
 801aafa:	f7fe fd29 	bl	8019550 <memp_malloc_fn>
  if (cseg == NULL) {
 801aafe:	4604      	mov	r4, r0
 801ab00:	b150      	cbz	r0, 801ab18 <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801ab02:	6868      	ldr	r0, [r5, #4]
 801ab04:	6829      	ldr	r1, [r5, #0]
 801ab06:	68aa      	ldr	r2, [r5, #8]
 801ab08:	68eb      	ldr	r3, [r5, #12]
 801ab0a:	6060      	str	r0, [r4, #4]
 801ab0c:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801ab0e:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801ab10:	60a2      	str	r2, [r4, #8]
 801ab12:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801ab14:	f7ff fa7a 	bl	801a00c <pbuf_ref>
}
 801ab18:	4620      	mov	r0, r4
 801ab1a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801ab1c:	4b03      	ldr	r3, [pc, #12]	; (801ab2c <tcp_seg_copy+0x40>)
 801ab1e:	f240 6282 	movw	r2, #1666	; 0x682
 801ab22:	4903      	ldr	r1, [pc, #12]	; (801ab30 <tcp_seg_copy+0x44>)
 801ab24:	4803      	ldr	r0, [pc, #12]	; (801ab34 <tcp_seg_copy+0x48>)
 801ab26:	f009 fcc9 	bl	80244bc <iprintf>
 801ab2a:	e7e2      	b.n	801aaf2 <tcp_seg_copy+0x6>
 801ab2c:	080e03d8 	.word	0x080e03d8
 801ab30:	080e05d4 	.word	0x080e05d4
 801ab34:	0802ac68 	.word	0x0802ac68

0801ab38 <tcp_arg>:
  if (pcb != NULL) {
 801ab38:	b100      	cbz	r0, 801ab3c <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801ab3a:	6101      	str	r1, [r0, #16]
}
 801ab3c:	4770      	bx	lr
 801ab3e:	bf00      	nop

0801ab40 <tcp_recv>:
  if (pcb != NULL) {
 801ab40:	b140      	cbz	r0, 801ab54 <tcp_recv+0x14>
{
 801ab42:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801ab44:	7d03      	ldrb	r3, [r0, #20]
 801ab46:	4604      	mov	r4, r0
 801ab48:	460d      	mov	r5, r1
 801ab4a:	2b01      	cmp	r3, #1
 801ab4c:	d003      	beq.n	801ab56 <tcp_recv+0x16>
    pcb->recv = recv;
 801ab4e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801ab52:	bd38      	pop	{r3, r4, r5, pc}
 801ab54:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801ab56:	4b05      	ldr	r3, [pc, #20]	; (801ab6c <tcp_recv+0x2c>)
 801ab58:	f240 72df 	movw	r2, #2015	; 0x7df
 801ab5c:	4904      	ldr	r1, [pc, #16]	; (801ab70 <tcp_recv+0x30>)
 801ab5e:	4805      	ldr	r0, [pc, #20]	; (801ab74 <tcp_recv+0x34>)
 801ab60:	f009 fcac 	bl	80244bc <iprintf>
    pcb->recv = recv;
 801ab64:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801ab68:	bd38      	pop	{r3, r4, r5, pc}
 801ab6a:	bf00      	nop
 801ab6c:	080e03d8 	.word	0x080e03d8
 801ab70:	080e05f0 	.word	0x080e05f0
 801ab74:	0802ac68 	.word	0x0802ac68

0801ab78 <tcp_sent>:
  if (pcb != NULL) {
 801ab78:	b140      	cbz	r0, 801ab8c <tcp_sent+0x14>
{
 801ab7a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801ab7c:	7d03      	ldrb	r3, [r0, #20]
 801ab7e:	4604      	mov	r4, r0
 801ab80:	460d      	mov	r5, r1
 801ab82:	2b01      	cmp	r3, #1
 801ab84:	d003      	beq.n	801ab8e <tcp_sent+0x16>
    pcb->sent = sent;
 801ab86:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801ab8a:	bd38      	pop	{r3, r4, r5, pc}
 801ab8c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801ab8e:	4b05      	ldr	r3, [pc, #20]	; (801aba4 <tcp_sent+0x2c>)
 801ab90:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801ab94:	4904      	ldr	r1, [pc, #16]	; (801aba8 <tcp_sent+0x30>)
 801ab96:	4805      	ldr	r0, [pc, #20]	; (801abac <tcp_sent+0x34>)
 801ab98:	f009 fc90 	bl	80244bc <iprintf>
    pcb->sent = sent;
 801ab9c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801aba0:	bd38      	pop	{r3, r4, r5, pc}
 801aba2:	bf00      	nop
 801aba4:	080e03d8 	.word	0x080e03d8
 801aba8:	080e0618 	.word	0x080e0618
 801abac:	0802ac68 	.word	0x0802ac68

0801abb0 <tcp_err>:
  if (pcb != NULL) {
 801abb0:	b140      	cbz	r0, 801abc4 <tcp_err+0x14>
{
 801abb2:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801abb4:	7d03      	ldrb	r3, [r0, #20]
 801abb6:	4604      	mov	r4, r0
 801abb8:	460d      	mov	r5, r1
 801abba:	2b01      	cmp	r3, #1
 801abbc:	d003      	beq.n	801abc6 <tcp_err+0x16>
    pcb->errf = err;
 801abbe:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801abc2:	bd38      	pop	{r3, r4, r5, pc}
 801abc4:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801abc6:	4b05      	ldr	r3, [pc, #20]	; (801abdc <tcp_err+0x2c>)
 801abc8:	f640 020d 	movw	r2, #2061	; 0x80d
 801abcc:	4904      	ldr	r1, [pc, #16]	; (801abe0 <tcp_err+0x30>)
 801abce:	4805      	ldr	r0, [pc, #20]	; (801abe4 <tcp_err+0x34>)
 801abd0:	f009 fc74 	bl	80244bc <iprintf>
    pcb->errf = err;
 801abd4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801abd8:	bd38      	pop	{r3, r4, r5, pc}
 801abda:	bf00      	nop
 801abdc:	080e03d8 	.word	0x080e03d8
 801abe0:	080e0640 	.word	0x080e0640
 801abe4:	0802ac68 	.word	0x0802ac68

0801abe8 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801abe8:	b118      	cbz	r0, 801abf2 <tcp_accept+0xa>
 801abea:	7d03      	ldrb	r3, [r0, #20]
 801abec:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801abee:	bf08      	it	eq
 801abf0:	6181      	streq	r1, [r0, #24]
}
 801abf2:	4770      	bx	lr

0801abf4 <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801abf4:	b1a8      	cbz	r0, 801ac22 <tcp_poll+0x2e>
{
 801abf6:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801abf8:	7d03      	ldrb	r3, [r0, #20]
 801abfa:	460e      	mov	r6, r1
 801abfc:	4604      	mov	r4, r0
 801abfe:	4615      	mov	r5, r2
 801ac00:	2b01      	cmp	r3, #1
 801ac02:	d003      	beq.n	801ac0c <tcp_poll+0x18>
  pcb->poll = poll;
 801ac04:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801ac08:	7765      	strb	r5, [r4, #29]
}
 801ac0a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801ac0c:	4b08      	ldr	r3, [pc, #32]	; (801ac30 <tcp_poll+0x3c>)
 801ac0e:	f640 023e 	movw	r2, #2110	; 0x83e
 801ac12:	4908      	ldr	r1, [pc, #32]	; (801ac34 <tcp_poll+0x40>)
 801ac14:	4808      	ldr	r0, [pc, #32]	; (801ac38 <tcp_poll+0x44>)
 801ac16:	f009 fc51 	bl	80244bc <iprintf>
  pcb->poll = poll;
 801ac1a:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801ac1e:	7765      	strb	r5, [r4, #29]
}
 801ac20:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801ac22:	4b03      	ldr	r3, [pc, #12]	; (801ac30 <tcp_poll+0x3c>)
 801ac24:	f640 023d 	movw	r2, #2109	; 0x83d
 801ac28:	4904      	ldr	r1, [pc, #16]	; (801ac3c <tcp_poll+0x48>)
 801ac2a:	4803      	ldr	r0, [pc, #12]	; (801ac38 <tcp_poll+0x44>)
 801ac2c:	f009 bc46 	b.w	80244bc <iprintf>
 801ac30:	080e03d8 	.word	0x080e03d8
 801ac34:	080e0680 	.word	0x080e0680
 801ac38:	0802ac68 	.word	0x0802ac68
 801ac3c:	080e0668 	.word	0x080e0668

0801ac40 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801ac40:	2800      	cmp	r0, #0
 801ac42:	d041      	beq.n	801acc8 <tcp_pcb_purge+0x88>
{
 801ac44:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801ac46:	7d03      	ldrb	r3, [r0, #20]
 801ac48:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801ac4a:	2b0a      	cmp	r3, #10
 801ac4c:	d001      	beq.n	801ac52 <tcp_pcb_purge+0x12>
 801ac4e:	2b01      	cmp	r3, #1
 801ac50:	d800      	bhi.n	801ac54 <tcp_pcb_purge+0x14>
}
 801ac52:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801ac54:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801ac56:	b118      	cbz	r0, 801ac60 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801ac58:	f7ff f9ba 	bl	8019fd0 <pbuf_free>
      pcb->refused_data = NULL;
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801ac60:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801ac62:	b164      	cbz	r4, 801ac7e <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801ac64:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801ac66:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801ac68:	6870      	ldr	r0, [r6, #4]
 801ac6a:	b108      	cbz	r0, 801ac70 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801ac6c:	f7ff f9b0 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ac70:	4631      	mov	r1, r6
 801ac72:	2004      	movs	r0, #4
 801ac74:	f7fe fcb0 	bl	80195d8 <memp_free>
  while (seg != NULL) {
 801ac78:	2c00      	cmp	r4, #0
 801ac7a:	d1f3      	bne.n	801ac64 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801ac7c:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801ac7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801ac82:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801ac84:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801ac86:	b15c      	cbz	r4, 801aca0 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801ac88:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801ac8a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801ac8c:	6870      	ldr	r0, [r6, #4]
 801ac8e:	b108      	cbz	r0, 801ac94 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801ac90:	f7ff f99e 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ac94:	4631      	mov	r1, r6
 801ac96:	2004      	movs	r0, #4
 801ac98:	f7fe fc9e 	bl	80195d8 <memp_free>
  while (seg != NULL) {
 801ac9c:	2c00      	cmp	r4, #0
 801ac9e:	d1f3      	bne.n	801ac88 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801aca0:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801aca2:	b15c      	cbz	r4, 801acbc <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801aca4:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801aca6:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801aca8:	6870      	ldr	r0, [r6, #4]
 801acaa:	b108      	cbz	r0, 801acb0 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801acac:	f7ff f990 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801acb0:	4631      	mov	r1, r6
 801acb2:	2004      	movs	r0, #4
 801acb4:	f7fe fc90 	bl	80195d8 <memp_free>
  while (seg != NULL) {
 801acb8:	2c00      	cmp	r4, #0
 801acba:	d1f3      	bne.n	801aca4 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801acbc:	2300      	movs	r3, #0
 801acbe:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801acc2:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801acc6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801acc8:	4b03      	ldr	r3, [pc, #12]	; (801acd8 <tcp_pcb_purge+0x98>)
 801acca:	f640 0251 	movw	r2, #2129	; 0x851
 801acce:	4903      	ldr	r1, [pc, #12]	; (801acdc <tcp_pcb_purge+0x9c>)
 801acd0:	4803      	ldr	r0, [pc, #12]	; (801ace0 <tcp_pcb_purge+0xa0>)
 801acd2:	f009 bbf3 	b.w	80244bc <iprintf>
 801acd6:	bf00      	nop
 801acd8:	080e03d8 	.word	0x080e03d8
 801acdc:	080e06a0 	.word	0x080e06a0
 801ace0:	0802ac68 	.word	0x0802ac68

0801ace4 <tcp_slowtmr>:
{
 801ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801ace8:	4da9      	ldr	r5, [pc, #676]	; (801af90 <tcp_slowtmr+0x2ac>)
{
 801acea:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801acec:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801afbc <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801acf0:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801acf2:	4fa8      	ldr	r7, [pc, #672]	; (801af94 <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801acf4:	3301      	adds	r3, #1
 801acf6:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801acf8:	f89b 3000 	ldrb.w	r3, [fp]
 801acfc:	3301      	adds	r3, #1
 801acfe:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801ad02:	4ba5      	ldr	r3, [pc, #660]	; (801af98 <tcp_slowtmr+0x2b4>)
 801ad04:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801ad06:	2c00      	cmp	r4, #0
 801ad08:	f000 808a 	beq.w	801ae20 <tcp_slowtmr+0x13c>
  prev = NULL;
 801ad0c:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801ad0e:	46b1      	mov	r9, r6
 801ad10:	7d23      	ldrb	r3, [r4, #20]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	f000 80fc 	beq.w	801af10 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801ad18:	2b01      	cmp	r3, #1
 801ad1a:	f000 8104 	beq.w	801af26 <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801ad1e:	2b0a      	cmp	r3, #10
 801ad20:	f000 810c 	beq.w	801af3c <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801ad24:	f89b 2000 	ldrb.w	r2, [fp]
 801ad28:	7fa3      	ldrb	r3, [r4, #30]
 801ad2a:	4293      	cmp	r3, r2
 801ad2c:	f000 8113 	beq.w	801af56 <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801ad30:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801ad32:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801ad34:	2b02      	cmp	r3, #2
 801ad36:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801ad3a:	f000 8112 	beq.w	801af62 <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801ad3e:	2a0b      	cmp	r2, #11
 801ad40:	f240 80cb 	bls.w	801aeda <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801ad44:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801ad48:	2b06      	cmp	r3, #6
 801ad4a:	f000 80b7 	beq.w	801aebc <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801ad4e:	f894 a009 	ldrb.w	sl, [r4, #9]
 801ad52:	f01a 0a08 	ands.w	sl, sl, #8
 801ad56:	d01d      	beq.n	801ad94 <tcp_slowtmr+0xb0>
 801ad58:	2b04      	cmp	r3, #4
 801ad5a:	d007      	beq.n	801ad6c <tcp_slowtmr+0x88>
 801ad5c:	f1a3 0307 	sub.w	r3, r3, #7
 801ad60:	fab3 f383 	clz	r3, r3
 801ad64:	095b      	lsrs	r3, r3, #5
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	f000 80b4 	beq.w	801aed4 <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801ad6c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801ad70:	4b8a      	ldr	r3, [pc, #552]	; (801af9c <tcp_slowtmr+0x2b8>)
 801ad72:	488b      	ldr	r0, [pc, #556]	; (801afa0 <tcp_slowtmr+0x2bc>)
 801ad74:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ad76:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801ad78:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ad7c:	6a20      	ldr	r0, [r4, #32]
 801ad7e:	1a12      	subs	r2, r2, r0
 801ad80:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801ad84:	f240 8160 	bls.w	801b048 <tcp_slowtmr+0x364>
        ++pcb_remove;
 801ad88:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801ad8c:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801ad90:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801ad94:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801ad96:	b156      	cbz	r6, 801adae <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801ad98:	682b      	ldr	r3, [r5, #0]
 801ad9a:	6a22      	ldr	r2, [r4, #32]
 801ad9c:	1a9a      	subs	r2, r3, r2
 801ad9e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801ada2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801ada6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801adaa:	f080 80e1 	bcs.w	801af70 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801adae:	7d23      	ldrb	r3, [r4, #20]
 801adb0:	2b03      	cmp	r3, #3
 801adb2:	d057      	beq.n	801ae64 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801adb4:	2b09      	cmp	r3, #9
 801adb6:	d15a      	bne.n	801ae6e <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801adb8:	682b      	ldr	r3, [r5, #0]
 801adba:	6a22      	ldr	r2, [r4, #32]
 801adbc:	1a9b      	subs	r3, r3, r2
 801adbe:	2bf0      	cmp	r3, #240	; 0xf0
 801adc0:	d955      	bls.n	801ae6e <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801adc2:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801adc4:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801adc8:	f7ff ff3a 	bl	801ac40 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801adcc:	4b72      	ldr	r3, [pc, #456]	; (801af98 <tcp_slowtmr+0x2b4>)
 801adce:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801add0:	f1b9 0f00 	cmp.w	r9, #0
 801add4:	f000 817e 	beq.w	801b0d4 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801add8:	42a3      	cmp	r3, r4
 801adda:	f000 81df 	beq.w	801b19c <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801adde:	68e3      	ldr	r3, [r4, #12]
 801ade0:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801ade4:	f1ba 0f00 	cmp.w	sl, #0
 801ade8:	f040 8147 	bne.w	801b07a <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801adec:	7d23      	ldrb	r3, [r4, #20]
 801adee:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801adf0:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801adf4:	f000 8153 	beq.w	801b09e <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801adf8:	4621      	mov	r1, r4
 801adfa:	2002      	movs	r0, #2
 801adfc:	f7fe fbec 	bl	80195d8 <memp_free>
      tcp_active_pcbs_changed = 0;
 801ae00:	4c68      	ldr	r4, [pc, #416]	; (801afa4 <tcp_slowtmr+0x2c0>)
 801ae02:	2300      	movs	r3, #0
 801ae04:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801ae06:	b13e      	cbz	r6, 801ae18 <tcp_slowtmr+0x134>
 801ae08:	f06f 010c 	mvn.w	r1, #12
 801ae0c:	4650      	mov	r0, sl
 801ae0e:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801ae10:	7823      	ldrb	r3, [r4, #0]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	f47f af75 	bne.w	801ad02 <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801ae18:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801ae1a:	2c00      	cmp	r4, #0
 801ae1c:	f47f af78 	bne.w	801ad10 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801ae20:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801afc0 <tcp_slowtmr+0x2dc>
 801ae24:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801ae28:	b1cc      	cbz	r4, 801ae5e <tcp_slowtmr+0x17a>
  prev = NULL;
 801ae2a:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ae2c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801af94 <tcp_slowtmr+0x2b0>
 801ae30:	f8df a190 	ldr.w	sl, [pc, #400]	; 801afc4 <tcp_slowtmr+0x2e0>
 801ae34:	4f5c      	ldr	r7, [pc, #368]	; (801afa8 <tcp_slowtmr+0x2c4>)
 801ae36:	7d23      	ldrb	r3, [r4, #20]
 801ae38:	2b0a      	cmp	r3, #10
 801ae3a:	d006      	beq.n	801ae4a <tcp_slowtmr+0x166>
 801ae3c:	4643      	mov	r3, r8
 801ae3e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801ae42:	4651      	mov	r1, sl
 801ae44:	4638      	mov	r0, r7
 801ae46:	f009 fb39 	bl	80244bc <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801ae4a:	682b      	ldr	r3, [r5, #0]
 801ae4c:	6a22      	ldr	r2, [r4, #32]
 801ae4e:	1a9b      	subs	r3, r3, r2
 801ae50:	2bf0      	cmp	r3, #240	; 0xf0
 801ae52:	f200 80d4 	bhi.w	801affe <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801ae56:	4626      	mov	r6, r4
 801ae58:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801ae5a:	2c00      	cmp	r4, #0
 801ae5c:	d1eb      	bne.n	801ae36 <tcp_slowtmr+0x152>
}
 801ae5e:	b007      	add	sp, #28
 801ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ae64:	682b      	ldr	r3, [r5, #0]
 801ae66:	6a22      	ldr	r2, [r4, #32]
 801ae68:	1a9b      	subs	r3, r3, r2
 801ae6a:	2b28      	cmp	r3, #40	; 0x28
 801ae6c:	d8a9      	bhi.n	801adc2 <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801ae6e:	f1b8 0f00 	cmp.w	r8, #0
 801ae72:	d1a6      	bne.n	801adc2 <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801ae74:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801ae76:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801ae78:	3301      	adds	r3, #1
      pcb = pcb->next;
 801ae7a:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801ae7c:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801ae7e:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801ae80:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801ae82:	d815      	bhi.n	801aeb0 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801ae84:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801afa4 <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801ae88:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801ae8c:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801ae90:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	f000 80ce 	beq.w	801b036 <tcp_slowtmr+0x352>
 801ae9a:	4621      	mov	r1, r4
 801ae9c:	6920      	ldr	r0, [r4, #16]
 801ae9e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801aea0:	f899 3000 	ldrb.w	r3, [r9]
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	f47f af2c 	bne.w	801ad02 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801aeaa:	2800      	cmp	r0, #0
 801aeac:	f000 80c3 	beq.w	801b036 <tcp_slowtmr+0x352>
 801aeb0:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801aeb2:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801aeb4:	2c00      	cmp	r4, #0
 801aeb6:	f47f af2b 	bne.w	801ad10 <tcp_slowtmr+0x2c>
 801aeba:	e7b1      	b.n	801ae20 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801aebc:	8b63      	ldrh	r3, [r4, #26]
 801aebe:	06db      	lsls	r3, r3, #27
 801aec0:	d508      	bpl.n	801aed4 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801aec2:	682b      	ldr	r3, [r5, #0]
 801aec4:	6a22      	ldr	r2, [r4, #32]
 801aec6:	1a9b      	subs	r3, r3, r2
 801aec8:	2b28      	cmp	r3, #40	; 0x28
 801aeca:	d903      	bls.n	801aed4 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801aecc:	f108 0801 	add.w	r8, r8, #1
 801aed0:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801aed4:	f04f 0a00 	mov.w	sl, #0
 801aed8:	e75c      	b.n	801ad94 <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801aeda:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801aede:	f1b8 0f00 	cmp.w	r8, #0
 801aee2:	d071      	beq.n	801afc8 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801aee4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801aee6:	b133      	cbz	r3, 801aef6 <tcp_slowtmr+0x212>
 801aee8:	463b      	mov	r3, r7
 801aeea:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801aeee:	492f      	ldr	r1, [pc, #188]	; (801afac <tcp_slowtmr+0x2c8>)
 801aef0:	482d      	ldr	r0, [pc, #180]	; (801afa8 <tcp_slowtmr+0x2c4>)
 801aef2:	f009 fae3 	bl	80244bc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801aef6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	f000 8171 	beq.w	801b1e0 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801aefe:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801af02:	2b0b      	cmp	r3, #11
 801af04:	f240 80d2 	bls.w	801b0ac <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801af08:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801af0a:	f04f 0801 	mov.w	r8, #1
 801af0e:	e71b      	b.n	801ad48 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801af10:	463b      	mov	r3, r7
 801af12:	f240 42be 	movw	r2, #1214	; 0x4be
 801af16:	4926      	ldr	r1, [pc, #152]	; (801afb0 <tcp_slowtmr+0x2cc>)
 801af18:	4823      	ldr	r0, [pc, #140]	; (801afa8 <tcp_slowtmr+0x2c4>)
 801af1a:	f009 facf 	bl	80244bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801af1e:	7d23      	ldrb	r3, [r4, #20]
 801af20:	2b01      	cmp	r3, #1
 801af22:	f47f aefc 	bne.w	801ad1e <tcp_slowtmr+0x3a>
 801af26:	463b      	mov	r3, r7
 801af28:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801af2c:	4921      	ldr	r1, [pc, #132]	; (801afb4 <tcp_slowtmr+0x2d0>)
 801af2e:	481e      	ldr	r0, [pc, #120]	; (801afa8 <tcp_slowtmr+0x2c4>)
 801af30:	f009 fac4 	bl	80244bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801af34:	7d23      	ldrb	r3, [r4, #20]
 801af36:	2b0a      	cmp	r3, #10
 801af38:	f47f aef4 	bne.w	801ad24 <tcp_slowtmr+0x40>
 801af3c:	463b      	mov	r3, r7
 801af3e:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801af42:	491d      	ldr	r1, [pc, #116]	; (801afb8 <tcp_slowtmr+0x2d4>)
 801af44:	4818      	ldr	r0, [pc, #96]	; (801afa8 <tcp_slowtmr+0x2c4>)
 801af46:	f009 fab9 	bl	80244bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801af4a:	f89b 2000 	ldrb.w	r2, [fp]
 801af4e:	7fa3      	ldrb	r3, [r4, #30]
 801af50:	4293      	cmp	r3, r2
 801af52:	f47f aeed 	bne.w	801ad30 <tcp_slowtmr+0x4c>
      continue;
 801af56:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801af58:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801af5a:	2c00      	cmp	r4, #0
 801af5c:	f47f aed8 	bne.w	801ad10 <tcp_slowtmr+0x2c>
 801af60:	e75e      	b.n	801ae20 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801af62:	2a05      	cmp	r2, #5
 801af64:	d9b9      	bls.n	801aeda <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801af66:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801af6a:	f04f 0801 	mov.w	r8, #1
 801af6e:	e711      	b.n	801ad94 <tcp_slowtmr+0xb0>
 801af70:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801af72:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801af74:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801af76:	6860      	ldr	r0, [r4, #4]
 801af78:	b108      	cbz	r0, 801af7e <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801af7a:	f7ff f829 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801af7e:	4621      	mov	r1, r4
 801af80:	2004      	movs	r0, #4
 801af82:	f7fe fb29 	bl	80195d8 <memp_free>
  while (seg != NULL) {
 801af86:	2e00      	cmp	r6, #0
 801af88:	d1f3      	bne.n	801af72 <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801af8a:	9c05      	ldr	r4, [sp, #20]
 801af8c:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801af8e:	e70e      	b.n	801adae <tcp_slowtmr+0xca>
 801af90:	2002dc6c 	.word	0x2002dc6c
 801af94:	080e03d8 	.word	0x080e03d8
 801af98:	2002dc5c 	.word	0x2002dc5c
 801af9c:	000a4cb8 	.word	0x000a4cb8
 801afa0:	10624dd3 	.word	0x10624dd3
 801afa4:	2002dc60 	.word	0x2002dc60
 801afa8:	0802ac68 	.word	0x0802ac68
 801afac:	080e0744 	.word	0x080e0744
 801afb0:	080e06bc 	.word	0x080e06bc
 801afb4:	080e06e8 	.word	0x080e06e8
 801afb8:	080e0714 	.word	0x080e0714
 801afbc:	2002dc71 	.word	0x2002dc71
 801afc0:	2002dc74 	.word	0x2002dc74
 801afc4:	080e0808 	.word	0x080e0808
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801afc8:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801afcc:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801afd0:	b291      	uxth	r1, r2
 801afd2:	4281      	cmp	r1, r0
 801afd4:	d802      	bhi.n	801afdc <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801afd6:	1c4a      	adds	r2, r1, #1
 801afd8:	b212      	sxth	r2, r2
 801afda:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801afdc:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801afe0:	4291      	cmp	r1, r2
 801afe2:	f73f aeb1 	bgt.w	801ad48 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801afe6:	4620      	mov	r0, r4
 801afe8:	f003 f91a 	bl	801e220 <tcp_rexmit_rto_prepare>
 801afec:	2800      	cmp	r0, #0
 801afee:	f000 80a0 	beq.w	801b132 <tcp_slowtmr+0x44e>
 801aff2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	f000 8098 	beq.w	801b12a <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801affa:	7d23      	ldrb	r3, [r4, #20]
 801affc:	e6a4      	b.n	801ad48 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801affe:	4620      	mov	r0, r4
 801b000:	f7ff fe1e 	bl	801ac40 <tcp_pcb_purge>
      if (prev != NULL) {
 801b004:	2e00      	cmp	r6, #0
 801b006:	f000 80d1 	beq.w	801b1ac <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801b00a:	f8d9 3000 	ldr.w	r3, [r9]
 801b00e:	42a3      	cmp	r3, r4
 801b010:	f000 80ee 	beq.w	801b1f0 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801b014:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801b018:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b01c:	7d23      	ldrb	r3, [r4, #20]
 801b01e:	2b01      	cmp	r3, #1
 801b020:	f000 80d7 	beq.w	801b1d2 <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801b024:	4621      	mov	r1, r4
      pcb = pcb->next;
 801b026:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801b028:	2002      	movs	r0, #2
 801b02a:	f7fe fad5 	bl	80195d8 <memp_free>
  while (pcb != NULL) {
 801b02e:	2c00      	cmp	r4, #0
 801b030:	f47f af01 	bne.w	801ae36 <tcp_slowtmr+0x152>
 801b034:	e713      	b.n	801ae5e <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801b036:	4620      	mov	r0, r4
 801b038:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801b03a:	4634      	mov	r4, r6
          tcp_output(prev);
 801b03c:	f003 fa2e 	bl	801e49c <tcp_output>
  while (pcb != NULL) {
 801b040:	2c00      	cmp	r4, #0
 801b042:	f47f ae65 	bne.w	801ad10 <tcp_slowtmr+0x2c>
 801b046:	e6eb      	b.n	801ae20 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801b048:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801b04c:	4870      	ldr	r0, [pc, #448]	; (801b210 <tcp_slowtmr+0x52c>)
 801b04e:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801b052:	4b70      	ldr	r3, [pc, #448]	; (801b214 <tcp_slowtmr+0x530>)
 801b054:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b058:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801b05c:	f67f af3a 	bls.w	801aed4 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801b060:	4620      	mov	r0, r4
 801b062:	f003 fc5b 	bl	801e91c <tcp_keepalive>
        if (err == ERR_OK) {
 801b066:	2800      	cmp	r0, #0
 801b068:	f47f af34 	bne.w	801aed4 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801b06c:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801b070:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801b072:	3301      	adds	r3, #1
 801b074:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801b078:	e68c      	b.n	801ad94 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b07a:	8b23      	ldrh	r3, [r4, #24]
 801b07c:	4620      	mov	r0, r4
 801b07e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801b080:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801b082:	9302      	str	r3, [sp, #8]
 801b084:	8ae3      	ldrh	r3, [r4, #22]
 801b086:	9301      	str	r3, [sp, #4]
 801b088:	1d23      	adds	r3, r4, #4
 801b08a:	9300      	str	r3, [sp, #0]
 801b08c:	4623      	mov	r3, r4
 801b08e:	f003 f98b 	bl	801e3a8 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b092:	7d23      	ldrb	r3, [r4, #20]
 801b094:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801b096:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b09a:	f47f aead 	bne.w	801adf8 <tcp_slowtmr+0x114>
 801b09e:	463b      	mov	r3, r7
 801b0a0:	22d4      	movs	r2, #212	; 0xd4
 801b0a2:	495d      	ldr	r1, [pc, #372]	; (801b218 <tcp_slowtmr+0x534>)
 801b0a4:	485d      	ldr	r0, [pc, #372]	; (801b21c <tcp_slowtmr+0x538>)
 801b0a6:	f009 fa09 	bl	80244bc <iprintf>
 801b0aa:	e6a5      	b.n	801adf8 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801b0ac:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801b0b0:	4a5b      	ldr	r2, [pc, #364]	; (801b220 <tcp_slowtmr+0x53c>)
 801b0b2:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801b0b4:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801b0b8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801b0bc:	4293      	cmp	r3, r2
 801b0be:	d216      	bcs.n	801b0ee <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801b0c0:	3301      	adds	r3, #1
 801b0c2:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801b0c4:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801b0c6:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801b0ca:	d210      	bcs.n	801b0ee <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801b0cc:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801b0ce:	f04f 0800 	mov.w	r8, #0
 801b0d2:	e639      	b.n	801ad48 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801b0d4:	42a3      	cmp	r3, r4
 801b0d6:	d006      	beq.n	801b0e6 <tcp_slowtmr+0x402>
 801b0d8:	463b      	mov	r3, r7
 801b0da:	f240 5271 	movw	r2, #1393	; 0x571
 801b0de:	4951      	ldr	r1, [pc, #324]	; (801b224 <tcp_slowtmr+0x540>)
 801b0e0:	484e      	ldr	r0, [pc, #312]	; (801b21c <tcp_slowtmr+0x538>)
 801b0e2:	f009 f9eb 	bl	80244bc <iprintf>
        tcp_active_pcbs = pcb->next;
 801b0e6:	68e3      	ldr	r3, [r4, #12]
 801b0e8:	4a4f      	ldr	r2, [pc, #316]	; (801b228 <tcp_slowtmr+0x544>)
 801b0ea:	6013      	str	r3, [r2, #0]
 801b0ec:	e67a      	b.n	801ade4 <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801b0ee:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801b0f2:	b936      	cbnz	r6, 801b102 <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801b0f4:	4620      	mov	r0, r4
 801b0f6:	f003 fc37 	bl	801e968 <tcp_zero_window_probe>
 801b0fa:	b140      	cbz	r0, 801b10e <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801b0fc:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801b0fe:	7d23      	ldrb	r3, [r4, #20]
 801b100:	e622      	b.n	801ad48 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801b102:	4631      	mov	r1, r6
 801b104:	4620      	mov	r0, r4
 801b106:	f002 febb 	bl	801de80 <tcp_split_unsent_seg>
 801b10a:	2800      	cmp	r0, #0
 801b10c:	d078      	beq.n	801b200 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b10e:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801b112:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b116:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801b118:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b11c:	f63f af6d 	bhi.w	801affa <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801b120:	3301      	adds	r3, #1
 801b122:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801b126:	7d23      	ldrb	r3, [r4, #20]
 801b128:	e60e      	b.n	801ad48 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801b12a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	f43f af64 	beq.w	801affa <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801b132:	7d23      	ldrb	r3, [r4, #20]
 801b134:	2b02      	cmp	r3, #2
 801b136:	d014      	beq.n	801b162 <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801b138:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801b13c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801b140:	2a0c      	cmp	r2, #12
 801b142:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801b146:	bf28      	it	cs
 801b148:	220c      	movcs	r2, #12
 801b14a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801b14e:	4937      	ldr	r1, [pc, #220]	; (801b22c <tcp_slowtmr+0x548>)
 801b150:	5c8a      	ldrb	r2, [r1, r2]
 801b152:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801b154:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b158:	4293      	cmp	r3, r2
 801b15a:	bfa8      	it	ge
 801b15c:	4613      	movge	r3, r2
 801b15e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801b162:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801b166:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801b168:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b16c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801b16e:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801b170:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b174:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801b178:	bf28      	it	cs
 801b17a:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b17c:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801b17e:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801b182:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801b186:	bf88      	it	hi
 801b188:	4613      	movhi	r3, r2
 801b18a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801b18e:	2300      	movs	r3, #0
 801b190:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801b192:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801b196:	f003 fb75 	bl	801e884 <tcp_rexmit_rto_commit>
 801b19a:	e72e      	b.n	801affa <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b19c:	463b      	mov	r3, r7
 801b19e:	f240 526d 	movw	r2, #1389	; 0x56d
 801b1a2:	4923      	ldr	r1, [pc, #140]	; (801b230 <tcp_slowtmr+0x54c>)
 801b1a4:	481d      	ldr	r0, [pc, #116]	; (801b21c <tcp_slowtmr+0x538>)
 801b1a6:	f009 f989 	bl	80244bc <iprintf>
 801b1aa:	e618      	b.n	801adde <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801b1ac:	f8d9 3000 	ldr.w	r3, [r9]
 801b1b0:	42a3      	cmp	r3, r4
 801b1b2:	d006      	beq.n	801b1c2 <tcp_slowtmr+0x4de>
 801b1b4:	4643      	mov	r3, r8
 801b1b6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801b1ba:	491e      	ldr	r1, [pc, #120]	; (801b234 <tcp_slowtmr+0x550>)
 801b1bc:	4638      	mov	r0, r7
 801b1be:	f009 f97d 	bl	80244bc <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b1c2:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801b1c4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b1c8:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801b1ca:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b1ce:	f47f af29 	bne.w	801b024 <tcp_slowtmr+0x340>
 801b1d2:	4643      	mov	r3, r8
 801b1d4:	22d4      	movs	r2, #212	; 0xd4
 801b1d6:	4910      	ldr	r1, [pc, #64]	; (801b218 <tcp_slowtmr+0x534>)
 801b1d8:	4638      	mov	r0, r7
 801b1da:	f009 f96f 	bl	80244bc <iprintf>
 801b1de:	e721      	b.n	801b024 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801b1e0:	463b      	mov	r3, r7
 801b1e2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801b1e6:	4914      	ldr	r1, [pc, #80]	; (801b238 <tcp_slowtmr+0x554>)
 801b1e8:	480c      	ldr	r0, [pc, #48]	; (801b21c <tcp_slowtmr+0x538>)
 801b1ea:	f009 f967 	bl	80244bc <iprintf>
 801b1ee:	e686      	b.n	801aefe <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801b1f0:	4643      	mov	r3, r8
 801b1f2:	f240 52af 	movw	r2, #1455	; 0x5af
 801b1f6:	4911      	ldr	r1, [pc, #68]	; (801b23c <tcp_slowtmr+0x558>)
 801b1f8:	4638      	mov	r0, r7
 801b1fa:	f009 f95f 	bl	80244bc <iprintf>
 801b1fe:	e709      	b.n	801b014 <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801b200:	4620      	mov	r0, r4
 801b202:	f003 f94b 	bl	801e49c <tcp_output>
 801b206:	2800      	cmp	r0, #0
 801b208:	d181      	bne.n	801b10e <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801b20a:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801b20c:	7d23      	ldrb	r3, [r4, #20]
 801b20e:	e59b      	b.n	801ad48 <tcp_slowtmr+0x64>
 801b210:	000124f8 	.word	0x000124f8
 801b214:	10624dd3 	.word	0x10624dd3
 801b218:	080e0414 	.word	0x080e0414
 801b21c:	0802ac68 	.word	0x0802ac68
 801b220:	080e0acc 	.word	0x080e0acc
 801b224:	080e07dc 	.word	0x080e07dc
 801b228:	2002dc5c 	.word	0x2002dc5c
 801b22c:	080e0aac 	.word	0x080e0aac
 801b230:	080e07b0 	.word	0x080e07b0
 801b234:	080e0860 	.word	0x080e0860
 801b238:	080e0778 	.word	0x080e0778
 801b23c:	080e0838 	.word	0x080e0838

0801b240 <tcp_pcb_remove>:
{
 801b240:	b538      	push	{r3, r4, r5, lr}
 801b242:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801b244:	460c      	mov	r4, r1
 801b246:	2900      	cmp	r1, #0
 801b248:	d04a      	beq.n	801b2e0 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801b24a:	2d00      	cmp	r5, #0
 801b24c:	d051      	beq.n	801b2f2 <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801b24e:	682b      	ldr	r3, [r5, #0]
 801b250:	42a3      	cmp	r3, r4
 801b252:	d032      	beq.n	801b2ba <tcp_pcb_remove+0x7a>
 801b254:	b12b      	cbz	r3, 801b262 <tcp_pcb_remove+0x22>
 801b256:	68da      	ldr	r2, [r3, #12]
 801b258:	42a2      	cmp	r2, r4
 801b25a:	d03e      	beq.n	801b2da <tcp_pcb_remove+0x9a>
 801b25c:	4613      	mov	r3, r2
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d1f9      	bne.n	801b256 <tcp_pcb_remove+0x16>
 801b262:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801b264:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801b266:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801b268:	f7ff fcea 	bl	801ac40 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801b26c:	7d23      	ldrb	r3, [r4, #20]
 801b26e:	2b0a      	cmp	r3, #10
 801b270:	d02d      	beq.n	801b2ce <tcp_pcb_remove+0x8e>
 801b272:	2b01      	cmp	r3, #1
 801b274:	d01d      	beq.n	801b2b2 <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801b276:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801b278:	07da      	lsls	r2, r3, #31
 801b27a:	d421      	bmi.n	801b2c0 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b27c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b27e:	b133      	cbz	r3, 801b28e <tcp_pcb_remove+0x4e>
 801b280:	4b20      	ldr	r3, [pc, #128]	; (801b304 <tcp_pcb_remove+0xc4>)
 801b282:	f640 0293 	movw	r2, #2195	; 0x893
 801b286:	4920      	ldr	r1, [pc, #128]	; (801b308 <tcp_pcb_remove+0xc8>)
 801b288:	4820      	ldr	r0, [pc, #128]	; (801b30c <tcp_pcb_remove+0xcc>)
 801b28a:	f009 f917 	bl	80244bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801b28e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b290:	b133      	cbz	r3, 801b2a0 <tcp_pcb_remove+0x60>
 801b292:	4b1c      	ldr	r3, [pc, #112]	; (801b304 <tcp_pcb_remove+0xc4>)
 801b294:	f640 0294 	movw	r2, #2196	; 0x894
 801b298:	491d      	ldr	r1, [pc, #116]	; (801b310 <tcp_pcb_remove+0xd0>)
 801b29a:	481c      	ldr	r0, [pc, #112]	; (801b30c <tcp_pcb_remove+0xcc>)
 801b29c:	f009 f90e 	bl	80244bc <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801b2a0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b2a2:	b133      	cbz	r3, 801b2b2 <tcp_pcb_remove+0x72>
 801b2a4:	4b17      	ldr	r3, [pc, #92]	; (801b304 <tcp_pcb_remove+0xc4>)
 801b2a6:	f640 0296 	movw	r2, #2198	; 0x896
 801b2aa:	491a      	ldr	r1, [pc, #104]	; (801b314 <tcp_pcb_remove+0xd4>)
 801b2ac:	4817      	ldr	r0, [pc, #92]	; (801b30c <tcp_pcb_remove+0xcc>)
 801b2ae:	f009 f905 	bl	80244bc <iprintf>
  pcb->state = CLOSED;
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801b2b6:	82e3      	strh	r3, [r4, #22]
}
 801b2b8:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801b2ba:	68e3      	ldr	r3, [r4, #12]
 801b2bc:	602b      	str	r3, [r5, #0]
 801b2be:	e7d0      	b.n	801b262 <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801b2c0:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801b2c4:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801b2c6:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801b2c8:	f003 f8e8 	bl	801e49c <tcp_output>
  if (pcb->state != LISTEN) {
 801b2cc:	7d23      	ldrb	r3, [r4, #20]
 801b2ce:	2b01      	cmp	r3, #1
 801b2d0:	d0ef      	beq.n	801b2b2 <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b2d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d1d3      	bne.n	801b280 <tcp_pcb_remove+0x40>
 801b2d8:	e7d9      	b.n	801b28e <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801b2da:	68e2      	ldr	r2, [r4, #12]
 801b2dc:	60da      	str	r2, [r3, #12]
 801b2de:	e7c0      	b.n	801b262 <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801b2e0:	4b08      	ldr	r3, [pc, #32]	; (801b304 <tcp_pcb_remove+0xc4>)
 801b2e2:	f640 0283 	movw	r2, #2179	; 0x883
 801b2e6:	490c      	ldr	r1, [pc, #48]	; (801b318 <tcp_pcb_remove+0xd8>)
 801b2e8:	4808      	ldr	r0, [pc, #32]	; (801b30c <tcp_pcb_remove+0xcc>)
 801b2ea:	f009 f8e7 	bl	80244bc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801b2ee:	2d00      	cmp	r5, #0
 801b2f0:	d1ad      	bne.n	801b24e <tcp_pcb_remove+0xe>
 801b2f2:	4b04      	ldr	r3, [pc, #16]	; (801b304 <tcp_pcb_remove+0xc4>)
 801b2f4:	f640 0284 	movw	r2, #2180	; 0x884
 801b2f8:	4908      	ldr	r1, [pc, #32]	; (801b31c <tcp_pcb_remove+0xdc>)
 801b2fa:	4804      	ldr	r0, [pc, #16]	; (801b30c <tcp_pcb_remove+0xcc>)
 801b2fc:	f009 f8de 	bl	80244bc <iprintf>
 801b300:	e7a5      	b.n	801b24e <tcp_pcb_remove+0xe>
 801b302:	bf00      	nop
 801b304:	080e03d8 	.word	0x080e03d8
 801b308:	080e08c4 	.word	0x080e08c4
 801b30c:	0802ac68 	.word	0x0802ac68
 801b310:	080e08dc 	.word	0x080e08dc
 801b314:	080e08f8 	.word	0x080e08f8
 801b318:	080e0888 	.word	0x080e0888
 801b31c:	080e08a4 	.word	0x080e08a4

0801b320 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801b320:	2800      	cmp	r0, #0
 801b322:	f000 80ad 	beq.w	801b480 <tcp_abandon+0x160>
{
 801b326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801b32a:	7d03      	ldrb	r3, [r0, #20]
{
 801b32c:	b087      	sub	sp, #28
 801b32e:	4605      	mov	r5, r0
 801b330:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801b332:	2b01      	cmp	r3, #1
 801b334:	f000 808b 	beq.w	801b44e <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801b338:	2b0a      	cmp	r3, #10
 801b33a:	f000 8093 	beq.w	801b464 <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801b33e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801b340:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801b344:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801b348:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801b34c:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801b34e:	b96b      	cbnz	r3, 801b36c <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801b350:	8aef      	ldrh	r7, [r5, #22]
 801b352:	2f00      	cmp	r7, #0
 801b354:	d052      	beq.n	801b3fc <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b356:	4a51      	ldr	r2, [pc, #324]	; (801b49c <tcp_abandon+0x17c>)
 801b358:	6813      	ldr	r3, [r2, #0]
 801b35a:	42ab      	cmp	r3, r5
 801b35c:	d074      	beq.n	801b448 <tcp_abandon+0x128>
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d050      	beq.n	801b404 <tcp_abandon+0xe4>
 801b362:	68da      	ldr	r2, [r3, #12]
 801b364:	42aa      	cmp	r2, r5
 801b366:	d04b      	beq.n	801b400 <tcp_abandon+0xe0>
 801b368:	4613      	mov	r3, r2
 801b36a:	e7f8      	b.n	801b35e <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b36c:	4629      	mov	r1, r5
 801b36e:	484c      	ldr	r0, [pc, #304]	; (801b4a0 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801b370:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b372:	f7ff ff65 	bl	801b240 <tcp_pcb_remove>
 801b376:	4b4b      	ldr	r3, [pc, #300]	; (801b4a4 <tcp_abandon+0x184>)
 801b378:	2201      	movs	r2, #1
 801b37a:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801b37c:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801b37e:	b164      	cbz	r4, 801b39a <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801b380:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801b382:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b384:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b388:	b108      	cbz	r0, 801b38e <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801b38a:	f7fe fe21 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b38e:	4651      	mov	r1, sl
 801b390:	2004      	movs	r0, #4
 801b392:	f7fe f921 	bl	80195d8 <memp_free>
  while (seg != NULL) {
 801b396:	2c00      	cmp	r4, #0
 801b398:	d1f2      	bne.n	801b380 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801b39a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801b39c:	b164      	cbz	r4, 801b3b8 <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801b39e:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801b3a0:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b3a2:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b3a6:	b108      	cbz	r0, 801b3ac <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801b3a8:	f7fe fe12 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b3ac:	4651      	mov	r1, sl
 801b3ae:	2004      	movs	r0, #4
 801b3b0:	f7fe f912 	bl	80195d8 <memp_free>
  while (seg != NULL) {
 801b3b4:	2c00      	cmp	r4, #0
 801b3b6:	d1f2      	bne.n	801b39e <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801b3b8:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801b3ba:	b164      	cbz	r4, 801b3d6 <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801b3bc:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801b3be:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b3c0:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b3c4:	b108      	cbz	r0, 801b3ca <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801b3c6:	f7fe fe03 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b3ca:	4651      	mov	r1, sl
 801b3cc:	2004      	movs	r0, #4
 801b3ce:	f7fe f903 	bl	80195d8 <memp_free>
  while (seg != NULL) {
 801b3d2:	2c00      	cmp	r4, #0
 801b3d4:	d1f2      	bne.n	801b3bc <tcp_abandon+0x9c>
    if (send_rst) {
 801b3d6:	b9ce      	cbnz	r6, 801b40c <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b3d8:	7d2b      	ldrb	r3, [r5, #20]
 801b3da:	2b01      	cmp	r3, #1
 801b3dc:	d024      	beq.n	801b428 <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801b3de:	4629      	mov	r1, r5
 801b3e0:	2002      	movs	r0, #2
 801b3e2:	f7fe f8f9 	bl	80195d8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b3e6:	f1b8 0f00 	cmp.w	r8, #0
 801b3ea:	d02a      	beq.n	801b442 <tcp_abandon+0x122>
 801b3ec:	f06f 010c 	mvn.w	r1, #12
 801b3f0:	4648      	mov	r0, r9
 801b3f2:	4643      	mov	r3, r8
}
 801b3f4:	b007      	add	sp, #28
 801b3f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b3fa:	4718      	bx	r3
    int send_rst = 0;
 801b3fc:	461e      	mov	r6, r3
 801b3fe:	e7bd      	b.n	801b37c <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b400:	68ea      	ldr	r2, [r5, #12]
 801b402:	60da      	str	r2, [r3, #12]
 801b404:	2700      	movs	r7, #0
    int send_rst = 0;
 801b406:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b408:	60ef      	str	r7, [r5, #12]
 801b40a:	e7b7      	b.n	801b37c <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801b40c:	9701      	str	r7, [sp, #4]
 801b40e:	465a      	mov	r2, fp
 801b410:	8b2b      	ldrh	r3, [r5, #24]
 801b412:	4628      	mov	r0, r5
 801b414:	9905      	ldr	r1, [sp, #20]
 801b416:	9302      	str	r3, [sp, #8]
 801b418:	1d2b      	adds	r3, r5, #4
 801b41a:	9300      	str	r3, [sp, #0]
 801b41c:	462b      	mov	r3, r5
 801b41e:	f002 ffc3 	bl	801e3a8 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b422:	7d2b      	ldrb	r3, [r5, #20]
 801b424:	2b01      	cmp	r3, #1
 801b426:	d1da      	bne.n	801b3de <tcp_abandon+0xbe>
 801b428:	491f      	ldr	r1, [pc, #124]	; (801b4a8 <tcp_abandon+0x188>)
 801b42a:	22d4      	movs	r2, #212	; 0xd4
 801b42c:	4b1f      	ldr	r3, [pc, #124]	; (801b4ac <tcp_abandon+0x18c>)
 801b42e:	4820      	ldr	r0, [pc, #128]	; (801b4b0 <tcp_abandon+0x190>)
 801b430:	f009 f844 	bl	80244bc <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801b434:	4629      	mov	r1, r5
 801b436:	2002      	movs	r0, #2
 801b438:	f7fe f8ce 	bl	80195d8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b43c:	f1b8 0f00 	cmp.w	r8, #0
 801b440:	d1d4      	bne.n	801b3ec <tcp_abandon+0xcc>
}
 801b442:	b007      	add	sp, #28
 801b444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b448:	68eb      	ldr	r3, [r5, #12]
 801b44a:	6013      	str	r3, [r2, #0]
 801b44c:	e7da      	b.n	801b404 <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801b44e:	4b17      	ldr	r3, [pc, #92]	; (801b4ac <tcp_abandon+0x18c>)
 801b450:	f44f 7210 	mov.w	r2, #576	; 0x240
 801b454:	4917      	ldr	r1, [pc, #92]	; (801b4b4 <tcp_abandon+0x194>)
 801b456:	4816      	ldr	r0, [pc, #88]	; (801b4b0 <tcp_abandon+0x190>)
 801b458:	f009 f830 	bl	80244bc <iprintf>
  if (pcb->state == TIME_WAIT) {
 801b45c:	7d2b      	ldrb	r3, [r5, #20]
 801b45e:	2b0a      	cmp	r3, #10
 801b460:	f47f af6d 	bne.w	801b33e <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801b464:	4629      	mov	r1, r5
 801b466:	4814      	ldr	r0, [pc, #80]	; (801b4b8 <tcp_abandon+0x198>)
 801b468:	f7ff feea 	bl	801b240 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b46c:	7d2b      	ldrb	r3, [r5, #20]
 801b46e:	2b01      	cmp	r3, #1
 801b470:	d00d      	beq.n	801b48e <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801b472:	4629      	mov	r1, r5
 801b474:	2002      	movs	r0, #2
}
 801b476:	b007      	add	sp, #28
 801b478:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b47c:	f7fe b8ac 	b.w	80195d8 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801b480:	4b0a      	ldr	r3, [pc, #40]	; (801b4ac <tcp_abandon+0x18c>)
 801b482:	f240 223d 	movw	r2, #573	; 0x23d
 801b486:	490d      	ldr	r1, [pc, #52]	; (801b4bc <tcp_abandon+0x19c>)
 801b488:	4809      	ldr	r0, [pc, #36]	; (801b4b0 <tcp_abandon+0x190>)
 801b48a:	f009 b817 	b.w	80244bc <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b48e:	4b07      	ldr	r3, [pc, #28]	; (801b4ac <tcp_abandon+0x18c>)
 801b490:	22d4      	movs	r2, #212	; 0xd4
 801b492:	4905      	ldr	r1, [pc, #20]	; (801b4a8 <tcp_abandon+0x188>)
 801b494:	4806      	ldr	r0, [pc, #24]	; (801b4b0 <tcp_abandon+0x190>)
 801b496:	f009 f811 	bl	80244bc <iprintf>
 801b49a:	e7ea      	b.n	801b472 <tcp_abandon+0x152>
 801b49c:	2002dc64 	.word	0x2002dc64
 801b4a0:	2002dc5c 	.word	0x2002dc5c
 801b4a4:	2002dc60 	.word	0x2002dc60
 801b4a8:	080e0414 	.word	0x080e0414
 801b4ac:	080e03d8 	.word	0x080e03d8
 801b4b0:	0802ac68 	.word	0x0802ac68
 801b4b4:	080e092c 	.word	0x080e092c
 801b4b8:	2002dc74 	.word	0x2002dc74
 801b4bc:	080e0910 	.word	0x080e0910

0801b4c0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801b4c0:	2101      	movs	r1, #1
 801b4c2:	f7ff bf2d 	b.w	801b320 <tcp_abandon>
 801b4c6:	bf00      	nop

0801b4c8 <tcp_accept_null>:
{
 801b4c8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801b4ca:	460c      	mov	r4, r1
 801b4cc:	b131      	cbz	r1, 801b4dc <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801b4ce:	4620      	mov	r0, r4
 801b4d0:	2101      	movs	r1, #1
 801b4d2:	f7ff ff25 	bl	801b320 <tcp_abandon>
}
 801b4d6:	f06f 000c 	mvn.w	r0, #12
 801b4da:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801b4dc:	4b06      	ldr	r3, [pc, #24]	; (801b4f8 <tcp_accept_null+0x30>)
 801b4de:	f240 320f 	movw	r2, #783	; 0x30f
 801b4e2:	4906      	ldr	r1, [pc, #24]	; (801b4fc <tcp_accept_null+0x34>)
 801b4e4:	4806      	ldr	r0, [pc, #24]	; (801b500 <tcp_accept_null+0x38>)
 801b4e6:	f008 ffe9 	bl	80244bc <iprintf>
  tcp_abandon(pcb, 1);
 801b4ea:	4620      	mov	r0, r4
 801b4ec:	2101      	movs	r1, #1
 801b4ee:	f7ff ff17 	bl	801b320 <tcp_abandon>
}
 801b4f2:	f06f 000c 	mvn.w	r0, #12
 801b4f6:	bd10      	pop	{r4, pc}
 801b4f8:	080e03d8 	.word	0x080e03d8
 801b4fc:	080e0960 	.word	0x080e0960
 801b500:	0802ac68 	.word	0x0802ac68

0801b504 <tcp_netif_ip_addr_changed_pcblist>:
{
 801b504:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b506:	4605      	mov	r5, r0
{
 801b508:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b50a:	b178      	cbz	r0, 801b52c <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801b50c:	b134      	cbz	r4, 801b51c <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801b50e:	6822      	ldr	r2, [r4, #0]
 801b510:	682b      	ldr	r3, [r5, #0]
 801b512:	429a      	cmp	r2, r3
 801b514:	d003      	beq.n	801b51e <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801b516:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801b518:	2c00      	cmp	r4, #0
 801b51a:	d1f8      	bne.n	801b50e <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801b51c:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801b51e:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801b520:	4620      	mov	r0, r4
 801b522:	2101      	movs	r1, #1
      pcb = next;
 801b524:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801b526:	f7ff fefb 	bl	801b320 <tcp_abandon>
      pcb = next;
 801b52a:	e7ef      	b.n	801b50c <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b52c:	4b03      	ldr	r3, [pc, #12]	; (801b53c <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801b52e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801b532:	4903      	ldr	r1, [pc, #12]	; (801b540 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801b534:	4803      	ldr	r0, [pc, #12]	; (801b544 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801b536:	f008 ffc1 	bl	80244bc <iprintf>
 801b53a:	e7e7      	b.n	801b50c <tcp_netif_ip_addr_changed_pcblist+0x8>
 801b53c:	080e03d8 	.word	0x080e03d8
 801b540:	080e0980 	.word	0x080e0980
 801b544:	0802ac68 	.word	0x0802ac68

0801b548 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b548:	4b0f      	ldr	r3, [pc, #60]	; (801b588 <tcp_kill_state+0x40>)
 801b54a:	6819      	ldr	r1, [r3, #0]
 801b54c:	b1d1      	cbz	r1, 801b584 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b54e:	4b0f      	ldr	r3, [pc, #60]	; (801b58c <tcp_kill_state+0x44>)
  inactivity = 0;
 801b550:	2200      	movs	r2, #0
{
 801b552:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b554:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801b556:	4614      	mov	r4, r2
 801b558:	e001      	b.n	801b55e <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b55a:	68c9      	ldr	r1, [r1, #12]
 801b55c:	b159      	cbz	r1, 801b576 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801b55e:	7d0b      	ldrb	r3, [r1, #20]
 801b560:	4283      	cmp	r3, r0
 801b562:	d1fa      	bne.n	801b55a <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b564:	6a0b      	ldr	r3, [r1, #32]
 801b566:	1aeb      	subs	r3, r5, r3
 801b568:	4293      	cmp	r3, r2
 801b56a:	d3f6      	bcc.n	801b55a <tcp_kill_state+0x12>
 801b56c:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b56e:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b570:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b572:	2900      	cmp	r1, #0
 801b574:	d1f3      	bne.n	801b55e <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801b576:	b11c      	cbz	r4, 801b580 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801b578:	4620      	mov	r0, r4
}
 801b57a:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801b57c:	f7ff bed0 	b.w	801b320 <tcp_abandon>
}
 801b580:	bc30      	pop	{r4, r5}
 801b582:	4770      	bx	lr
 801b584:	4770      	bx	lr
 801b586:	bf00      	nop
 801b588:	2002dc5c 	.word	0x2002dc5c
 801b58c:	2002dc6c 	.word	0x2002dc6c

0801b590 <tcp_alloc>:
{
 801b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b592:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801b596:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b598:	495c      	ldr	r1, [pc, #368]	; (801b70c <tcp_alloc+0x17c>)
 801b59a:	2002      	movs	r0, #2
 801b59c:	f7fd ffd8 	bl	8019550 <memp_malloc_fn>
  if (pcb == NULL) {
 801b5a0:	b328      	cbz	r0, 801b5ee <tcp_alloc+0x5e>
 801b5a2:	4603      	mov	r3, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801b5a4:	229c      	movs	r2, #156	; 0x9c
 801b5a6:	2100      	movs	r1, #0
 801b5a8:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801b5aa:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801b5ae:	f007 ffe9 	bl	8023584 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801b5b2:	4957      	ldr	r1, [pc, #348]	; (801b710 <tcp_alloc+0x180>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801b5b4:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801b5b6:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801b5b8:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801b5ba:	4856      	ldr	r0, [pc, #344]	; (801b714 <tcp_alloc+0x184>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801b5bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801b5c0:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801b5c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801b5c4:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801b5c6:	4a54      	ldr	r2, [pc, #336]	; (801b718 <tcp_alloc+0x188>)
    pcb->recv = tcp_recv_null;
 801b5c8:	4954      	ldr	r1, [pc, #336]	; (801b71c <tcp_alloc+0x18c>)
    pcb->snd_buf = TCP_SND_BUF;
 801b5ca:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801b5ce:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801b5d0:	4c53      	ldr	r4, [pc, #332]	; (801b720 <tcp_alloc+0x190>)
    pcb->cwnd = 1;
 801b5d2:	4854      	ldr	r0, [pc, #336]	; (801b724 <tcp_alloc+0x194>)
    pcb->recv = tcp_recv_null;
 801b5d4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801b5d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801b5dc:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b5de:	4952      	ldr	r1, [pc, #328]	; (801b728 <tcp_alloc+0x198>)
    pcb->prio = prio;
 801b5e0:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801b5e2:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801b5e4:	6498      	str	r0, [r3, #72]	; 0x48
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b5e6:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801b5e8:	72da      	strb	r2, [r3, #11]
}
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801b5ee:	4e4f      	ldr	r6, [pc, #316]	; (801b72c <tcp_alloc+0x19c>)
 801b5f0:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801b5f2:	b15c      	cbz	r4, 801b60c <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801b5f4:	4620      	mov	r0, r4
 801b5f6:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801b5f8:	8b43      	ldrh	r3, [r0, #26]
 801b5fa:	0719      	lsls	r1, r3, #28
 801b5fc:	d5f9      	bpl.n	801b5f2 <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801b5fe:	f023 0308 	bic.w	r3, r3, #8
 801b602:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801b604:	f7fe ffd8 	bl	801a5b8 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801b608:	2c00      	cmp	r4, #0
 801b60a:	d1f3      	bne.n	801b5f4 <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b60c:	4b48      	ldr	r3, [pc, #288]	; (801b730 <tcp_alloc+0x1a0>)
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	b193      	cbz	r3, 801b638 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b612:	4a40      	ldr	r2, [pc, #256]	; (801b714 <tcp_alloc+0x184>)
 801b614:	4618      	mov	r0, r3
 801b616:	6a19      	ldr	r1, [r3, #32]
 801b618:	6814      	ldr	r4, [r2, #0]
 801b61a:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b61c:	68db      	ldr	r3, [r3, #12]
 801b61e:	b143      	cbz	r3, 801b632 <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b620:	6a1a      	ldr	r2, [r3, #32]
 801b622:	1aa2      	subs	r2, r4, r2
 801b624:	428a      	cmp	r2, r1
 801b626:	d3f9      	bcc.n	801b61c <tcp_alloc+0x8c>
 801b628:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b62a:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b62c:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d1f6      	bne.n	801b620 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801b632:	2101      	movs	r1, #1
 801b634:	f7ff fe74 	bl	801b320 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b638:	f240 7239 	movw	r2, #1849	; 0x739
 801b63c:	4933      	ldr	r1, [pc, #204]	; (801b70c <tcp_alloc+0x17c>)
 801b63e:	2002      	movs	r0, #2
 801b640:	f7fd ff86 	bl	8019550 <memp_malloc_fn>
    if (pcb == NULL) {
 801b644:	4603      	mov	r3, r0
 801b646:	b130      	cbz	r0, 801b656 <tcp_alloc+0xc6>
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801b648:	4a3a      	ldr	r2, [pc, #232]	; (801b734 <tcp_alloc+0x1a4>)
 801b64a:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 801b64e:	880a      	ldrh	r2, [r1, #0]
 801b650:	3a01      	subs	r2, #1
 801b652:	800a      	strh	r2, [r1, #0]
 801b654:	e7a6      	b.n	801b5a4 <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801b656:	2009      	movs	r0, #9
 801b658:	f7ff ff76 	bl	801b548 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b65c:	f240 723f 	movw	r2, #1855	; 0x73f
 801b660:	492a      	ldr	r1, [pc, #168]	; (801b70c <tcp_alloc+0x17c>)
 801b662:	2002      	movs	r0, #2
 801b664:	f7fd ff74 	bl	8019550 <memp_malloc_fn>
      if (pcb == NULL) {
 801b668:	4603      	mov	r3, r0
 801b66a:	b138      	cbz	r0, 801b67c <tcp_alloc+0xec>
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801b66c:	4a31      	ldr	r2, [pc, #196]	; (801b734 <tcp_alloc+0x1a4>)
 801b66e:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 801b672:	880a      	ldrh	r2, [r1, #0]
 801b674:	3a01      	subs	r2, #1
 801b676:	b292      	uxth	r2, r2
 801b678:	800a      	strh	r2, [r1, #0]
 801b67a:	e7e9      	b.n	801b650 <tcp_alloc+0xc0>
        tcp_kill_state(CLOSING);
 801b67c:	2008      	movs	r0, #8
 801b67e:	f7ff ff63 	bl	801b548 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b682:	f240 7245 	movw	r2, #1861	; 0x745
 801b686:	4921      	ldr	r1, [pc, #132]	; (801b70c <tcp_alloc+0x17c>)
 801b688:	2002      	movs	r0, #2
 801b68a:	f7fd ff61 	bl	8019550 <memp_malloc_fn>
        if (pcb == NULL) {
 801b68e:	4603      	mov	r3, r0
 801b690:	b138      	cbz	r0, 801b6a2 <tcp_alloc+0x112>
 801b692:	4a28      	ldr	r2, [pc, #160]	; (801b734 <tcp_alloc+0x1a4>)
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801b694:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 801b698:	880a      	ldrh	r2, [r1, #0]
 801b69a:	3a01      	subs	r2, #1
 801b69c:	b292      	uxth	r2, r2
 801b69e:	800a      	strh	r2, [r1, #0]
 801b6a0:	e7e8      	b.n	801b674 <tcp_alloc+0xe4>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801b6a2:	062a      	lsls	r2, r5, #24
 801b6a4:	d42f      	bmi.n	801b706 <tcp_alloc+0x176>
  if (mprio == 0) {
 801b6a6:	b1ed      	cbz	r5, 801b6e4 <tcp_alloc+0x154>
 801b6a8:	462a      	mov	r2, r5
  mprio--;
 801b6aa:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b6ac:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801b6ae:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b6b0:	b1c2      	cbz	r2, 801b6e4 <tcp_alloc+0x154>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801b6b2:	4818      	ldr	r0, [pc, #96]	; (801b714 <tcp_alloc+0x184>)
  inactivity = 0;
 801b6b4:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801b6b6:	6807      	ldr	r7, [r0, #0]
 801b6b8:	e005      	b.n	801b6c6 <tcp_alloc+0x136>
 801b6ba:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801b6bc:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801b6be:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801b6c0:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b6c2:	68d2      	ldr	r2, [r2, #12]
 801b6c4:	b14a      	cbz	r2, 801b6da <tcp_alloc+0x14a>
    if ((pcb->prio < mprio) ||
 801b6c6:	7d50      	ldrb	r0, [r2, #21]
 801b6c8:	4281      	cmp	r1, r0
 801b6ca:	d8f6      	bhi.n	801b6ba <tcp_alloc+0x12a>
 801b6cc:	d1f9      	bne.n	801b6c2 <tcp_alloc+0x132>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801b6ce:	6a14      	ldr	r4, [r2, #32]
 801b6d0:	eba7 0e04 	sub.w	lr, r7, r4
 801b6d4:	4576      	cmp	r6, lr
 801b6d6:	d8f4      	bhi.n	801b6c2 <tcp_alloc+0x132>
 801b6d8:	e7f0      	b.n	801b6bc <tcp_alloc+0x12c>
  if (inactive != NULL) {
 801b6da:	b11b      	cbz	r3, 801b6e4 <tcp_alloc+0x154>
  tcp_abandon(pcb, 1);
 801b6dc:	2101      	movs	r1, #1
 801b6de:	4618      	mov	r0, r3
 801b6e0:	f7ff fe1e 	bl	801b320 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b6e4:	f240 724b 	movw	r2, #1867	; 0x74b
 801b6e8:	4908      	ldr	r1, [pc, #32]	; (801b70c <tcp_alloc+0x17c>)
 801b6ea:	2002      	movs	r0, #2
 801b6ec:	f7fd ff30 	bl	8019550 <memp_malloc_fn>
          if (pcb != NULL) {
 801b6f0:	4603      	mov	r3, r0
 801b6f2:	2800      	cmp	r0, #0
 801b6f4:	f43f af79 	beq.w	801b5ea <tcp_alloc+0x5a>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801b6f8:	4a0e      	ldr	r2, [pc, #56]	; (801b734 <tcp_alloc+0x1a4>)
 801b6fa:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 801b6fe:	8801      	ldrh	r1, [r0, #0]
 801b700:	3901      	subs	r1, #1
 801b702:	8001      	strh	r1, [r0, #0]
 801b704:	e7c6      	b.n	801b694 <tcp_alloc+0x104>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801b706:	227f      	movs	r2, #127	; 0x7f
 801b708:	e7cf      	b.n	801b6aa <tcp_alloc+0x11a>
 801b70a:	bf00      	nop
 801b70c:	080e03d8 	.word	0x080e03d8
 801b710:	2002dc71 	.word	0x2002dc71
 801b714:	2002dc6c 	.word	0x2002dc6c
 801b718:	006ddd00 	.word	0x006ddd00
 801b71c:	0801b925 	.word	0x0801b925
 801b720:	0218ffff 	.word	0x0218ffff
 801b724:	04300001 	.word	0x04300001
 801b728:	08600860 	.word	0x08600860
 801b72c:	2002dc5c 	.word	0x2002dc5c
 801b730:	2002dc74 	.word	0x2002dc74
 801b734:	2002db54 	.word	0x2002db54

0801b738 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801b738:	2040      	movs	r0, #64	; 0x40
 801b73a:	f7ff bf29 	b.w	801b590 <tcp_alloc>
 801b73e:	bf00      	nop

0801b740 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801b740:	2040      	movs	r0, #64	; 0x40
 801b742:	f7ff bf25 	b.w	801b590 <tcp_alloc>
 801b746:	bf00      	nop

0801b748 <tcp_close_shutdown>:
{
 801b748:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801b74a:	4604      	mov	r4, r0
{
 801b74c:	b085      	sub	sp, #20
 801b74e:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801b750:	2800      	cmp	r0, #0
 801b752:	d06a      	beq.n	801b82a <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801b754:	7d23      	ldrb	r3, [r4, #20]
 801b756:	b11d      	cbz	r5, 801b760 <tcp_close_shutdown+0x18>
 801b758:	2b04      	cmp	r3, #4
 801b75a:	d00c      	beq.n	801b776 <tcp_close_shutdown+0x2e>
 801b75c:	2b07      	cmp	r3, #7
 801b75e:	d00a      	beq.n	801b776 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801b760:	2b01      	cmp	r3, #1
 801b762:	d06a      	beq.n	801b83a <tcp_close_shutdown+0xf2>
 801b764:	2b02      	cmp	r3, #2
 801b766:	d030      	beq.n	801b7ca <tcp_close_shutdown+0x82>
 801b768:	b333      	cbz	r3, 801b7b8 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801b76a:	4620      	mov	r0, r4
}
 801b76c:	b005      	add	sp, #20
 801b76e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801b772:	f7fe bf21 	b.w	801a5b8 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801b776:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801b778:	2a00      	cmp	r2, #0
 801b77a:	d037      	beq.n	801b7ec <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801b77c:	8b63      	ldrh	r3, [r4, #26]
 801b77e:	06db      	lsls	r3, r3, #27
 801b780:	f140 8084 	bpl.w	801b88c <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b784:	8b21      	ldrh	r1, [r4, #24]
 801b786:	1d20      	adds	r0, r4, #4
 801b788:	8ae2      	ldrh	r2, [r4, #22]
 801b78a:	4623      	mov	r3, r4
 801b78c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801b790:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801b792:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801b794:	9000      	str	r0, [sp, #0]
 801b796:	4620      	mov	r0, r4
 801b798:	f002 fe06 	bl	801e3a8 <tcp_rst>
      tcp_pcb_purge(pcb);
 801b79c:	4620      	mov	r0, r4
 801b79e:	f7ff fa4f 	bl	801ac40 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801b7a2:	4a45      	ldr	r2, [pc, #276]	; (801b8b8 <tcp_close_shutdown+0x170>)
 801b7a4:	6813      	ldr	r3, [r2, #0]
 801b7a6:	42a3      	cmp	r3, r4
 801b7a8:	d030      	beq.n	801b80c <tcp_close_shutdown+0xc4>
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d030      	beq.n	801b810 <tcp_close_shutdown+0xc8>
 801b7ae:	68da      	ldr	r2, [r3, #12]
 801b7b0:	42a2      	cmp	r2, r4
 801b7b2:	d068      	beq.n	801b886 <tcp_close_shutdown+0x13e>
 801b7b4:	4613      	mov	r3, r2
 801b7b6:	e7f8      	b.n	801b7aa <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801b7b8:	8ae3      	ldrh	r3, [r4, #22]
 801b7ba:	b9e3      	cbnz	r3, 801b7f6 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801b7bc:	4621      	mov	r1, r4
 801b7be:	2002      	movs	r0, #2
 801b7c0:	f7fd ff0a 	bl	80195d8 <memp_free>
}
 801b7c4:	2000      	movs	r0, #0
 801b7c6:	b005      	add	sp, #20
 801b7c8:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b7ca:	4621      	mov	r1, r4
 801b7cc:	483a      	ldr	r0, [pc, #232]	; (801b8b8 <tcp_close_shutdown+0x170>)
 801b7ce:	f7ff fd37 	bl	801b240 <tcp_pcb_remove>
 801b7d2:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b7d4:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b7d6:	4a39      	ldr	r2, [pc, #228]	; (801b8bc <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b7d8:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b7da:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b7dc:	d1ee      	bne.n	801b7bc <tcp_close_shutdown+0x74>
 801b7de:	4b38      	ldr	r3, [pc, #224]	; (801b8c0 <tcp_close_shutdown+0x178>)
 801b7e0:	22d4      	movs	r2, #212	; 0xd4
 801b7e2:	4938      	ldr	r1, [pc, #224]	; (801b8c4 <tcp_close_shutdown+0x17c>)
 801b7e4:	4838      	ldr	r0, [pc, #224]	; (801b8c8 <tcp_close_shutdown+0x180>)
 801b7e6:	f008 fe69 	bl	80244bc <iprintf>
 801b7ea:	e7e7      	b.n	801b7bc <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801b7ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801b7ee:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801b7f2:	d0b5      	beq.n	801b760 <tcp_close_shutdown+0x18>
 801b7f4:	e7c2      	b.n	801b77c <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b7f6:	4a35      	ldr	r2, [pc, #212]	; (801b8cc <tcp_close_shutdown+0x184>)
 801b7f8:	6813      	ldr	r3, [r2, #0]
 801b7fa:	42a3      	cmp	r3, r4
 801b7fc:	d051      	beq.n	801b8a2 <tcp_close_shutdown+0x15a>
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d03e      	beq.n	801b880 <tcp_close_shutdown+0x138>
 801b802:	68da      	ldr	r2, [r3, #12]
 801b804:	42a2      	cmp	r2, r4
 801b806:	d039      	beq.n	801b87c <tcp_close_shutdown+0x134>
 801b808:	4613      	mov	r3, r2
 801b80a:	e7f8      	b.n	801b7fe <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801b80c:	68e3      	ldr	r3, [r4, #12]
 801b80e:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801b810:	4b2f      	ldr	r3, [pc, #188]	; (801b8d0 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801b812:	2000      	movs	r0, #0
 801b814:	4a29      	ldr	r2, [pc, #164]	; (801b8bc <tcp_close_shutdown+0x174>)
 801b816:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801b818:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801b81a:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801b81c:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801b81e:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801b820:	d03c      	beq.n	801b89c <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b822:	7d23      	ldrb	r3, [r4, #20]
 801b824:	2b01      	cmp	r3, #1
 801b826:	d1c9      	bne.n	801b7bc <tcp_close_shutdown+0x74>
 801b828:	e7d9      	b.n	801b7de <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801b82a:	4b25      	ldr	r3, [pc, #148]	; (801b8c0 <tcp_close_shutdown+0x178>)
 801b82c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801b830:	4928      	ldr	r1, [pc, #160]	; (801b8d4 <tcp_close_shutdown+0x18c>)
 801b832:	4825      	ldr	r0, [pc, #148]	; (801b8c8 <tcp_close_shutdown+0x180>)
 801b834:	f008 fe42 	bl	80244bc <iprintf>
 801b838:	e78c      	b.n	801b754 <tcp_close_shutdown+0xc>
 801b83a:	4927      	ldr	r1, [pc, #156]	; (801b8d8 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801b83c:	2000      	movs	r0, #0
  switch (pcb->state) {
 801b83e:	4b23      	ldr	r3, [pc, #140]	; (801b8cc <tcp_close_shutdown+0x184>)
 801b840:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801b844:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801b846:	b133      	cbz	r3, 801b856 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801b848:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801b84a:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801b84c:	bf08      	it	eq
 801b84e:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801b850:	68db      	ldr	r3, [r3, #12]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d1f8      	bne.n	801b848 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801b856:	42a9      	cmp	r1, r5
 801b858:	d002      	beq.n	801b860 <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801b85a:	f851 3b04 	ldr.w	r3, [r1], #4
 801b85e:	e7f1      	b.n	801b844 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801b860:	4621      	mov	r1, r4
 801b862:	481e      	ldr	r0, [pc, #120]	; (801b8dc <tcp_close_shutdown+0x194>)
 801b864:	f7ff fcec 	bl	801b240 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801b868:	7d23      	ldrb	r3, [r4, #20]
 801b86a:	2b01      	cmp	r3, #1
 801b86c:	d01c      	beq.n	801b8a8 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801b86e:	4621      	mov	r1, r4
 801b870:	2003      	movs	r0, #3
 801b872:	f7fd feb1 	bl	80195d8 <memp_free>
}
 801b876:	2000      	movs	r0, #0
 801b878:	b005      	add	sp, #20
 801b87a:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b87c:	68e2      	ldr	r2, [r4, #12]
 801b87e:	60da      	str	r2, [r3, #12]
 801b880:	2300      	movs	r3, #0
 801b882:	60e3      	str	r3, [r4, #12]
 801b884:	e79a      	b.n	801b7bc <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801b886:	68e2      	ldr	r2, [r4, #12]
 801b888:	60da      	str	r2, [r3, #12]
 801b88a:	e7c1      	b.n	801b810 <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801b88c:	4b0c      	ldr	r3, [pc, #48]	; (801b8c0 <tcp_close_shutdown+0x178>)
 801b88e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801b892:	4913      	ldr	r1, [pc, #76]	; (801b8e0 <tcp_close_shutdown+0x198>)
 801b894:	480c      	ldr	r0, [pc, #48]	; (801b8c8 <tcp_close_shutdown+0x180>)
 801b896:	f008 fe11 	bl	80244bc <iprintf>
 801b89a:	e773      	b.n	801b784 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801b89c:	f001 fdf4 	bl	801d488 <tcp_trigger_input_pcb_close>
 801b8a0:	e790      	b.n	801b7c4 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b8a2:	68e3      	ldr	r3, [r4, #12]
 801b8a4:	6013      	str	r3, [r2, #0]
 801b8a6:	e7eb      	b.n	801b880 <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801b8a8:	4b05      	ldr	r3, [pc, #20]	; (801b8c0 <tcp_close_shutdown+0x178>)
 801b8aa:	22df      	movs	r2, #223	; 0xdf
 801b8ac:	490d      	ldr	r1, [pc, #52]	; (801b8e4 <tcp_close_shutdown+0x19c>)
 801b8ae:	4806      	ldr	r0, [pc, #24]	; (801b8c8 <tcp_close_shutdown+0x180>)
 801b8b0:	f008 fe04 	bl	80244bc <iprintf>
 801b8b4:	e7db      	b.n	801b86e <tcp_close_shutdown+0x126>
 801b8b6:	bf00      	nop
 801b8b8:	2002dc5c 	.word	0x2002dc5c
 801b8bc:	2002dc60 	.word	0x2002dc60
 801b8c0:	080e03d8 	.word	0x080e03d8
 801b8c4:	080e0414 	.word	0x080e0414
 801b8c8:	0802ac68 	.word	0x0802ac68
 801b8cc:	2002dc64 	.word	0x2002dc64
 801b8d0:	2002dca0 	.word	0x2002dca0
 801b8d4:	080e09b4 	.word	0x080e09b4
 801b8d8:	080e0ac4 	.word	0x080e0ac4
 801b8dc:	2002dc68 	.word	0x2002dc68
 801b8e0:	080e09d4 	.word	0x080e09d4
 801b8e4:	080e09f0 	.word	0x080e09f0

0801b8e8 <tcp_close>:
{
 801b8e8:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801b8ea:	b158      	cbz	r0, 801b904 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801b8ec:	7d03      	ldrb	r3, [r0, #20]
 801b8ee:	2b01      	cmp	r3, #1
 801b8f0:	d003      	beq.n	801b8fa <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801b8f2:	8b43      	ldrh	r3, [r0, #26]
 801b8f4:	f043 0310 	orr.w	r3, r3, #16
 801b8f8:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801b8fa:	2101      	movs	r1, #1
}
 801b8fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801b900:	f7ff bf22 	b.w	801b748 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801b904:	4b04      	ldr	r3, [pc, #16]	; (801b918 <tcp_close+0x30>)
 801b906:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801b90a:	4904      	ldr	r1, [pc, #16]	; (801b91c <tcp_close+0x34>)
 801b90c:	4804      	ldr	r0, [pc, #16]	; (801b920 <tcp_close+0x38>)
 801b90e:	f008 fdd5 	bl	80244bc <iprintf>
}
 801b912:	f06f 000f 	mvn.w	r0, #15
 801b916:	bd08      	pop	{r3, pc}
 801b918:	080e03d8 	.word	0x080e03d8
 801b91c:	080e0a0c 	.word	0x080e0a0c
 801b920:	0802ac68 	.word	0x0802ac68

0801b924 <tcp_recv_null>:
{
 801b924:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801b926:	b1c9      	cbz	r1, 801b95c <tcp_recv_null+0x38>
  if (p != NULL) {
 801b928:	4614      	mov	r4, r2
 801b92a:	4608      	mov	r0, r1
 801b92c:	b13a      	cbz	r2, 801b93e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801b92e:	8911      	ldrh	r1, [r2, #8]
 801b930:	f7fe ffc2 	bl	801a8b8 <tcp_recved>
    pbuf_free(p);
 801b934:	4620      	mov	r0, r4
 801b936:	f7fe fb4b 	bl	8019fd0 <pbuf_free>
  return ERR_OK;
 801b93a:	2000      	movs	r0, #0
}
 801b93c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801b93e:	b10b      	cbz	r3, 801b944 <tcp_recv_null+0x20>
  return ERR_OK;
 801b940:	4610      	mov	r0, r2
}
 801b942:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801b944:	7d0b      	ldrb	r3, [r1, #20]
 801b946:	2b01      	cmp	r3, #1
 801b948:	d003      	beq.n	801b952 <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801b94a:	8b4b      	ldrh	r3, [r1, #26]
 801b94c:	f043 0310 	orr.w	r3, r3, #16
 801b950:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801b952:	2101      	movs	r1, #1
}
 801b954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801b958:	f7ff bef6 	b.w	801b748 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801b95c:	4b04      	ldr	r3, [pc, #16]	; (801b970 <tcp_recv_null+0x4c>)
 801b95e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b962:	4904      	ldr	r1, [pc, #16]	; (801b974 <tcp_recv_null+0x50>)
 801b964:	4804      	ldr	r0, [pc, #16]	; (801b978 <tcp_recv_null+0x54>)
 801b966:	f008 fda9 	bl	80244bc <iprintf>
 801b96a:	f06f 000f 	mvn.w	r0, #15
}
 801b96e:	bd10      	pop	{r4, pc}
 801b970:	080e03d8 	.word	0x080e03d8
 801b974:	080e0a24 	.word	0x080e0a24
 801b978:	0802ac68 	.word	0x0802ac68

0801b97c <tcp_process_refused_data>:
{
 801b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801b97e:	b378      	cbz	r0, 801b9e0 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801b980:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801b982:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801b984:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801b988:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801b98a:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801b98c:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801b98e:	b156      	cbz	r6, 801b9a6 <tcp_process_refused_data+0x2a>
 801b990:	4601      	mov	r1, r0
 801b992:	462a      	mov	r2, r5
 801b994:	6900      	ldr	r0, [r0, #16]
 801b996:	47b0      	blx	r6
    if (err == ERR_OK) {
 801b998:	b158      	cbz	r0, 801b9b2 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801b99a:	300d      	adds	r0, #13
 801b99c:	d01d      	beq.n	801b9da <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801b99e:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801b9a2:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801b9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801b9a6:	8929      	ldrh	r1, [r5, #8]
 801b9a8:	f7fe ff86 	bl	801a8b8 <tcp_recved>
    pbuf_free(p);
 801b9ac:	4628      	mov	r0, r5
 801b9ae:	f7fe fb0f 	bl	8019fd0 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801b9b2:	06bb      	lsls	r3, r7, #26
 801b9b4:	d50f      	bpl.n	801b9d6 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b9b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801b9b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b9bc:	d001      	beq.n	801b9c2 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801b9be:	3301      	adds	r3, #1
 801b9c0:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801b9c2:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801b9c6:	b135      	cbz	r5, 801b9d6 <tcp_process_refused_data+0x5a>
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	4621      	mov	r1, r4
 801b9cc:	6920      	ldr	r0, [r4, #16]
 801b9ce:	461a      	mov	r2, r3
 801b9d0:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801b9d2:	300d      	adds	r0, #13
 801b9d4:	d001      	beq.n	801b9da <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801b9d6:	2000      	movs	r0, #0
}
 801b9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801b9da:	f06f 000c 	mvn.w	r0, #12
}
 801b9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801b9e0:	4b04      	ldr	r3, [pc, #16]	; (801b9f4 <tcp_process_refused_data+0x78>)
 801b9e2:	f240 6209 	movw	r2, #1545	; 0x609
 801b9e6:	4904      	ldr	r1, [pc, #16]	; (801b9f8 <tcp_process_refused_data+0x7c>)
 801b9e8:	4804      	ldr	r0, [pc, #16]	; (801b9fc <tcp_process_refused_data+0x80>)
 801b9ea:	f008 fd67 	bl	80244bc <iprintf>
 801b9ee:	f06f 000f 	mvn.w	r0, #15
}
 801b9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9f4:	080e03d8 	.word	0x080e03d8
 801b9f8:	080e0a40 	.word	0x080e0a40
 801b9fc:	0802ac68 	.word	0x0802ac68

0801ba00 <tcp_fasttmr>:
{
 801ba00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801ba04:	4d1c      	ldr	r5, [pc, #112]	; (801ba78 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801ba06:	2700      	movs	r7, #0
 801ba08:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801ba80 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801ba0c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801ba0e:	4e1b      	ldr	r6, [pc, #108]	; (801ba7c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801ba10:	3301      	adds	r3, #1
 801ba12:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801ba14:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801ba18:	b1bc      	cbz	r4, 801ba4a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801ba1a:	782a      	ldrb	r2, [r5, #0]
 801ba1c:	7fa3      	ldrb	r3, [r4, #30]
 801ba1e:	4293      	cmp	r3, r2
 801ba20:	d015      	beq.n	801ba4e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801ba22:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801ba24:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801ba26:	07d9      	lsls	r1, r3, #31
 801ba28:	d41a      	bmi.n	801ba60 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801ba2a:	071a      	lsls	r2, r3, #28
 801ba2c:	d411      	bmi.n	801ba52 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801ba2e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801ba30:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801ba34:	b133      	cbz	r3, 801ba44 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801ba36:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801ba38:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801ba3a:	f7ff ff9f 	bl	801b97c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801ba3e:	7833      	ldrb	r3, [r6, #0]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d1e7      	bne.n	801ba14 <tcp_fasttmr+0x14>
      pcb = next;
 801ba44:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801ba46:	2c00      	cmp	r4, #0
 801ba48:	d1e7      	bne.n	801ba1a <tcp_fasttmr+0x1a>
}
 801ba4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801ba4e:	68e4      	ldr	r4, [r4, #12]
 801ba50:	e7e2      	b.n	801ba18 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801ba52:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801ba56:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801ba58:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801ba5a:	f7fe fdad 	bl	801a5b8 <tcp_close_shutdown_fin>
 801ba5e:	e7e6      	b.n	801ba2e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801ba60:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801ba64:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801ba66:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801ba68:	f002 fd18 	bl	801e49c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ba6c:	8b63      	ldrh	r3, [r4, #26]
 801ba6e:	f023 0303 	bic.w	r3, r3, #3
 801ba72:	b29b      	uxth	r3, r3
 801ba74:	8363      	strh	r3, [r4, #26]
 801ba76:	e7d8      	b.n	801ba2a <tcp_fasttmr+0x2a>
 801ba78:	2002dc71 	.word	0x2002dc71
 801ba7c:	2002dc60 	.word	0x2002dc60
 801ba80:	2002dc5c 	.word	0x2002dc5c

0801ba84 <tcp_tmr>:
{
 801ba84:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801ba86:	f7ff ffbb 	bl	801ba00 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801ba8a:	4a06      	ldr	r2, [pc, #24]	; (801baa4 <tcp_tmr+0x20>)
 801ba8c:	7813      	ldrb	r3, [r2, #0]
 801ba8e:	3301      	adds	r3, #1
 801ba90:	b2db      	uxtb	r3, r3
 801ba92:	7013      	strb	r3, [r2, #0]
 801ba94:	07db      	lsls	r3, r3, #31
 801ba96:	d400      	bmi.n	801ba9a <tcp_tmr+0x16>
}
 801ba98:	bd08      	pop	{r3, pc}
 801ba9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801ba9e:	f7ff b921 	b.w	801ace4 <tcp_slowtmr>
 801baa2:	bf00      	nop
 801baa4:	2002dc70 	.word	0x2002dc70

0801baa8 <tcp_next_iss>:
{
 801baa8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801baaa:	b130      	cbz	r0, 801baba <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801baac:	4b07      	ldr	r3, [pc, #28]	; (801bacc <tcp_next_iss+0x24>)
 801baae:	4a08      	ldr	r2, [pc, #32]	; (801bad0 <tcp_next_iss+0x28>)
 801bab0:	6818      	ldr	r0, [r3, #0]
 801bab2:	6812      	ldr	r2, [r2, #0]
 801bab4:	4410      	add	r0, r2
 801bab6:	6018      	str	r0, [r3, #0]
}
 801bab8:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801baba:	4b06      	ldr	r3, [pc, #24]	; (801bad4 <tcp_next_iss+0x2c>)
 801babc:	f640 02af 	movw	r2, #2223	; 0x8af
 801bac0:	4905      	ldr	r1, [pc, #20]	; (801bad8 <tcp_next_iss+0x30>)
 801bac2:	4806      	ldr	r0, [pc, #24]	; (801badc <tcp_next_iss+0x34>)
 801bac4:	f008 fcfa 	bl	80244bc <iprintf>
 801bac8:	e7f0      	b.n	801baac <tcp_next_iss+0x4>
 801baca:	bf00      	nop
 801bacc:	2000040c 	.word	0x2000040c
 801bad0:	2002dc6c 	.word	0x2002dc6c
 801bad4:	080e03d8 	.word	0x080e03d8
 801bad8:	080e0a68 	.word	0x080e0a68
 801badc:	0802ac68 	.word	0x0802ac68

0801bae0 <tcp_eff_send_mss_netif>:
{
 801bae0:	b538      	push	{r3, r4, r5, lr}
 801bae2:	4605      	mov	r5, r0
 801bae4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801bae6:	b172      	cbz	r2, 801bb06 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801bae8:	b144      	cbz	r4, 801bafc <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801baea:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801baec:	b133      	cbz	r3, 801bafc <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801baee:	2b28      	cmp	r3, #40	; 0x28
 801baf0:	d906      	bls.n	801bb00 <tcp_eff_send_mss_netif+0x20>
 801baf2:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801baf4:	b29b      	uxth	r3, r3
 801baf6:	429d      	cmp	r5, r3
 801baf8:	bf28      	it	cs
 801bafa:	461d      	movcs	r5, r3
}
 801bafc:	4628      	mov	r0, r5
 801bafe:	bd38      	pop	{r3, r4, r5, pc}
 801bb00:	2500      	movs	r5, #0
 801bb02:	4628      	mov	r0, r5
 801bb04:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801bb06:	4b04      	ldr	r3, [pc, #16]	; (801bb18 <tcp_eff_send_mss_netif+0x38>)
 801bb08:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801bb0c:	4903      	ldr	r1, [pc, #12]	; (801bb1c <tcp_eff_send_mss_netif+0x3c>)
 801bb0e:	4804      	ldr	r0, [pc, #16]	; (801bb20 <tcp_eff_send_mss_netif+0x40>)
 801bb10:	f008 fcd4 	bl	80244bc <iprintf>
 801bb14:	e7e8      	b.n	801bae8 <tcp_eff_send_mss_netif+0x8>
 801bb16:	bf00      	nop
 801bb18:	080e03d8 	.word	0x080e03d8
 801bb1c:	080e0a84 	.word	0x080e0a84
 801bb20:	0802ac68 	.word	0x0802ac68

0801bb24 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801bb24:	b308      	cbz	r0, 801bb6a <tcp_netif_ip_addr_changed+0x46>
{
 801bb26:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801bb28:	6803      	ldr	r3, [r0, #0]
 801bb2a:	4604      	mov	r4, r0
 801bb2c:	b903      	cbnz	r3, 801bb30 <tcp_netif_ip_addr_changed+0xc>
}
 801bb2e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801bb30:	4b0e      	ldr	r3, [pc, #56]	; (801bb6c <tcp_netif_ip_addr_changed+0x48>)
 801bb32:	460d      	mov	r5, r1
 801bb34:	6819      	ldr	r1, [r3, #0]
 801bb36:	f7ff fce5 	bl	801b504 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801bb3a:	4b0d      	ldr	r3, [pc, #52]	; (801bb70 <tcp_netif_ip_addr_changed+0x4c>)
 801bb3c:	4620      	mov	r0, r4
 801bb3e:	6819      	ldr	r1, [r3, #0]
 801bb40:	f7ff fce0 	bl	801b504 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801bb44:	2d00      	cmp	r5, #0
 801bb46:	d0f2      	beq.n	801bb2e <tcp_netif_ip_addr_changed+0xa>
 801bb48:	682b      	ldr	r3, [r5, #0]
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d0ef      	beq.n	801bb2e <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bb4e:	4b09      	ldr	r3, [pc, #36]	; (801bb74 <tcp_netif_ip_addr_changed+0x50>)
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d0eb      	beq.n	801bb2e <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801bb56:	6819      	ldr	r1, [r3, #0]
 801bb58:	6822      	ldr	r2, [r4, #0]
 801bb5a:	4291      	cmp	r1, r2
 801bb5c:	d101      	bne.n	801bb62 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801bb5e:	682a      	ldr	r2, [r5, #0]
 801bb60:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bb62:	68db      	ldr	r3, [r3, #12]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d1f6      	bne.n	801bb56 <tcp_netif_ip_addr_changed+0x32>
}
 801bb68:	bd38      	pop	{r3, r4, r5, pc}
 801bb6a:	4770      	bx	lr
 801bb6c:	2002dc5c 	.word	0x2002dc5c
 801bb70:	2002dc64 	.word	0x2002dc64
 801bb74:	2002dc68 	.word	0x2002dc68

0801bb78 <tcp_free_ooseq>:
{
 801bb78:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801bb7a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801bb7c:	b16c      	cbz	r4, 801bb9a <tcp_free_ooseq+0x22>
 801bb7e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801bb80:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801bb82:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bb84:	6868      	ldr	r0, [r5, #4]
 801bb86:	b108      	cbz	r0, 801bb8c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801bb88:	f7fe fa22 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bb8c:	4629      	mov	r1, r5
 801bb8e:	2004      	movs	r0, #4
 801bb90:	f7fd fd22 	bl	80195d8 <memp_free>
  while (seg != NULL) {
 801bb94:	2c00      	cmp	r4, #0
 801bb96:	d1f3      	bne.n	801bb80 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801bb98:	6774      	str	r4, [r6, #116]	; 0x74
}
 801bb9a:	bd70      	pop	{r4, r5, r6, pc}

0801bb9c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801bb9e:	4605      	mov	r5, r0
{
 801bba0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801bba2:	2800      	cmp	r0, #0
 801bba4:	d03e      	beq.n	801bc24 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801bba6:	68eb      	ldr	r3, [r5, #12]
 801bba8:	8998      	ldrh	r0, [r3, #12]
 801bbaa:	f7fc f98d 	bl	8017ec8 <lwip_htons>
 801bbae:	07c2      	lsls	r2, r0, #31
 801bbb0:	d432      	bmi.n	801bc18 <tcp_oos_insert_segment+0x7c>
 801bbb2:	4e20      	ldr	r6, [pc, #128]	; (801bc34 <tcp_oos_insert_segment+0x98>)
 801bbb4:	e005      	b.n	801bbc2 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801bbb6:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801bbb8:	4620      	mov	r0, r4
 801bbba:	f7fe ff79 	bl	801aab0 <tcp_seg_free>
    while (next &&
 801bbbe:	463c      	mov	r4, r7
 801bbc0:	b1ef      	cbz	r7, 801bbfe <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801bbc2:	68e1      	ldr	r1, [r4, #12]
 801bbc4:	8923      	ldrh	r3, [r4, #8]
 801bbc6:	6837      	ldr	r7, [r6, #0]
 801bbc8:	892a      	ldrh	r2, [r5, #8]
 801bbca:	6848      	ldr	r0, [r1, #4]
 801bbcc:	443a      	add	r2, r7
 801bbce:	4403      	add	r3, r0
 801bbd0:	1ad3      	subs	r3, r2, r3
    while (next &&
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	db15      	blt.n	801bc02 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801bbd6:	8988      	ldrh	r0, [r1, #12]
 801bbd8:	f7fc f976 	bl	8017ec8 <lwip_htons>
 801bbdc:	07c3      	lsls	r3, r0, #31
 801bbde:	d5ea      	bpl.n	801bbb6 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801bbe0:	68eb      	ldr	r3, [r5, #12]
 801bbe2:	2001      	movs	r0, #1
 801bbe4:	899f      	ldrh	r7, [r3, #12]
 801bbe6:	f7fc f96f 	bl	8017ec8 <lwip_htons>
 801bbea:	68eb      	ldr	r3, [r5, #12]
 801bbec:	4338      	orrs	r0, r7
      next = next->next;
 801bbee:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801bbf0:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801bbf2:	4620      	mov	r0, r4
 801bbf4:	f7fe ff5c 	bl	801aab0 <tcp_seg_free>
    while (next &&
 801bbf8:	463c      	mov	r4, r7
 801bbfa:	2f00      	cmp	r7, #0
 801bbfc:	d1e1      	bne.n	801bbc2 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801bbfe:	602c      	str	r4, [r5, #0]
}
 801bc00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801bc02:	1a12      	subs	r2, r2, r0
    if (next &&
 801bc04:	2a00      	cmp	r2, #0
 801bc06:	ddfa      	ble.n	801bbfe <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801bc08:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801bc0a:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801bc0c:	b289      	uxth	r1, r1
 801bc0e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801bc10:	f7fe f8e2 	bl	8019dd8 <pbuf_realloc>
  cseg->next = next;
 801bc14:	602c      	str	r4, [r5, #0]
}
 801bc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801bc18:	4620      	mov	r0, r4
    next = NULL;
 801bc1a:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801bc1c:	f7fe ff36 	bl	801aa8c <tcp_segs_free>
  cseg->next = next;
 801bc20:	602c      	str	r4, [r5, #0]
}
 801bc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801bc24:	4b04      	ldr	r3, [pc, #16]	; (801bc38 <tcp_oos_insert_segment+0x9c>)
 801bc26:	f240 421f 	movw	r2, #1055	; 0x41f
 801bc2a:	4904      	ldr	r1, [pc, #16]	; (801bc3c <tcp_oos_insert_segment+0xa0>)
 801bc2c:	4804      	ldr	r0, [pc, #16]	; (801bc40 <tcp_oos_insert_segment+0xa4>)
 801bc2e:	f008 fc45 	bl	80244bc <iprintf>
 801bc32:	e7b8      	b.n	801bba6 <tcp_oos_insert_segment+0xa>
 801bc34:	2002dc9c 	.word	0x2002dc9c
 801bc38:	080e0ad4 	.word	0x080e0ad4
 801bc3c:	080e0b08 	.word	0x080e0b08
 801bc40:	0802ac68 	.word	0x0802ac68

0801bc44 <tcp_input_delayed_close>:
{
 801bc44:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801bc46:	4604      	mov	r4, r0
 801bc48:	b1c8      	cbz	r0, 801bc7e <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801bc4a:	4b11      	ldr	r3, [pc, #68]	; (801bc90 <tcp_input_delayed_close+0x4c>)
 801bc4c:	781b      	ldrb	r3, [r3, #0]
 801bc4e:	f013 0310 	ands.w	r3, r3, #16
 801bc52:	d101      	bne.n	801bc58 <tcp_input_delayed_close+0x14>
  return 0;
 801bc54:	4618      	mov	r0, r3
}
 801bc56:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801bc58:	8b63      	ldrh	r3, [r4, #26]
 801bc5a:	06db      	lsls	r3, r3, #27
 801bc5c:	d406      	bmi.n	801bc6c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801bc5e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801bc62:	b11b      	cbz	r3, 801bc6c <tcp_input_delayed_close+0x28>
 801bc64:	f06f 010e 	mvn.w	r1, #14
 801bc68:	6920      	ldr	r0, [r4, #16]
 801bc6a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801bc6c:	4621      	mov	r1, r4
 801bc6e:	4809      	ldr	r0, [pc, #36]	; (801bc94 <tcp_input_delayed_close+0x50>)
 801bc70:	f7ff fae6 	bl	801b240 <tcp_pcb_remove>
    tcp_free(pcb);
 801bc74:	4620      	mov	r0, r4
 801bc76:	f7fe fcdf 	bl	801a638 <tcp_free>
 801bc7a:	2001      	movs	r0, #1
}
 801bc7c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801bc7e:	4b06      	ldr	r3, [pc, #24]	; (801bc98 <tcp_input_delayed_close+0x54>)
 801bc80:	f240 225a 	movw	r2, #602	; 0x25a
 801bc84:	4905      	ldr	r1, [pc, #20]	; (801bc9c <tcp_input_delayed_close+0x58>)
 801bc86:	4806      	ldr	r0, [pc, #24]	; (801bca0 <tcp_input_delayed_close+0x5c>)
 801bc88:	f008 fc18 	bl	80244bc <iprintf>
 801bc8c:	e7dd      	b.n	801bc4a <tcp_input_delayed_close+0x6>
 801bc8e:	bf00      	nop
 801bc90:	2002dc98 	.word	0x2002dc98
 801bc94:	2002dc5c 	.word	0x2002dc5c
 801bc98:	080e0ad4 	.word	0x080e0ad4
 801bc9c:	080e0b30 	.word	0x080e0b30
 801bca0:	0802ac68 	.word	0x0802ac68

0801bca4 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801bca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bca8:	b083      	sub	sp, #12
 801bcaa:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801bcac:	2900      	cmp	r1, #0
 801bcae:	d03d      	beq.n	801bd2c <tcp_free_acked_segments.constprop.0+0x88>
 801bcb0:	4607      	mov	r7, r0
 801bcb2:	460c      	mov	r4, r1
 801bcb4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801bd7c <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801bcb8:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801bd70 <tcp_free_acked_segments.constprop.0+0xcc>
 801bcbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801bd80 <tcp_free_acked_segments.constprop.0+0xdc>
 801bcc0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801bd78 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801bcc4:	68e3      	ldr	r3, [r4, #12]
 801bcc6:	6858      	ldr	r0, [r3, #4]
 801bcc8:	f7fc f902 	bl	8017ed0 <lwip_htonl>
 801bccc:	68e3      	ldr	r3, [r4, #12]
 801bcce:	4605      	mov	r5, r0
 801bcd0:	8926      	ldrh	r6, [r4, #8]
 801bcd2:	8998      	ldrh	r0, [r3, #12]
 801bcd4:	f7fc f8f8 	bl	8017ec8 <lwip_htons>
 801bcd8:	f8d8 3000 	ldr.w	r3, [r8]
 801bcdc:	f010 0003 	ands.w	r0, r0, #3
 801bce0:	eba5 0503 	sub.w	r5, r5, r3
 801bce4:	bf18      	it	ne
 801bce6:	2001      	movne	r0, #1
 801bce8:	4435      	add	r5, r6
 801bcea:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801bcec:	2800      	cmp	r0, #0
 801bcee:	dc37      	bgt.n	801bd60 <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801bcf0:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801bcf4:	f7fe f980 	bl	8019ff8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801bcf8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801bcfc:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801bcfe:	4298      	cmp	r0, r3
 801bd00:	d824      	bhi.n	801bd4c <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801bd02:	491a      	ldr	r1, [pc, #104]	; (801bd6c <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801bd04:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801bd06:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801bd08:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801bd0a:	880d      	ldrh	r5, [r1, #0]
 801bd0c:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801bd0e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801bd12:	1953      	adds	r3, r2, r5
 801bd14:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801bd16:	f7fe fecb 	bl	801aab0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801bd1a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801bd1e:	b11b      	cbz	r3, 801bd28 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801bd20:	9b01      	ldr	r3, [sp, #4]
 801bd22:	ea56 0503 	orrs.w	r5, r6, r3
 801bd26:	d006      	beq.n	801bd36 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801bd28:	2e00      	cmp	r6, #0
 801bd2a:	d1cb      	bne.n	801bcc4 <tcp_free_acked_segments.constprop.0+0x20>
 801bd2c:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801bd2e:	4628      	mov	r0, r5
 801bd30:	b003      	add	sp, #12
 801bd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801bd36:	4b0e      	ldr	r3, [pc, #56]	; (801bd70 <tcp_free_acked_segments.constprop.0+0xcc>)
 801bd38:	f240 4261 	movw	r2, #1121	; 0x461
 801bd3c:	490d      	ldr	r1, [pc, #52]	; (801bd74 <tcp_free_acked_segments.constprop.0+0xd0>)
 801bd3e:	480e      	ldr	r0, [pc, #56]	; (801bd78 <tcp_free_acked_segments.constprop.0+0xd4>)
 801bd40:	f008 fbbc 	bl	80244bc <iprintf>
}
 801bd44:	4628      	mov	r0, r5
 801bd46:	b003      	add	sp, #12
 801bd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801bd4c:	465b      	mov	r3, fp
 801bd4e:	f240 4257 	movw	r2, #1111	; 0x457
 801bd52:	4651      	mov	r1, sl
 801bd54:	4648      	mov	r0, r9
 801bd56:	f008 fbb1 	bl	80244bc <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801bd5a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801bd5e:	e7d0      	b.n	801bd02 <tcp_free_acked_segments.constprop.0+0x5e>
 801bd60:	4625      	mov	r5, r4
}
 801bd62:	4628      	mov	r0, r5
 801bd64:	b003      	add	sp, #12
 801bd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd6a:	bf00      	nop
 801bd6c:	2002dc90 	.word	0x2002dc90
 801bd70:	080e0ad4 	.word	0x080e0ad4
 801bd74:	080e0b80 	.word	0x080e0b80
 801bd78:	0802ac68 	.word	0x0802ac68
 801bd7c:	2002dc78 	.word	0x2002dc78
 801bd80:	080e0b58 	.word	0x080e0b58

0801bd84 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801bd84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801bd88:	4604      	mov	r4, r0
 801bd8a:	2800      	cmp	r0, #0
 801bd8c:	f000 8200 	beq.w	801c190 <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801bd90:	7d23      	ldrb	r3, [r4, #20]
 801bd92:	2b03      	cmp	r3, #3
 801bd94:	f240 811e 	bls.w	801bfd4 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801bd98:	4bb4      	ldr	r3, [pc, #720]	; (801c06c <tcp_receive+0x2e8>)
 801bd9a:	781b      	ldrb	r3, [r3, #0]
 801bd9c:	06dd      	lsls	r5, r3, #27
 801bd9e:	f100 8097 	bmi.w	801bed0 <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801bda2:	4fb3      	ldr	r7, [pc, #716]	; (801c070 <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801bda4:	4eb3      	ldr	r6, [pc, #716]	; (801c074 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801bda6:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801bda8:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801bdaa:	2900      	cmp	r1, #0
 801bdac:	d07f      	beq.n	801beae <tcp_receive+0x12a>
 801bdae:	7d22      	ldrb	r2, [r4, #20]
 801bdb0:	2a06      	cmp	r2, #6
 801bdb2:	d87c      	bhi.n	801beae <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801bdb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801bdb6:	eba2 0803 	sub.w	r8, r2, r3
 801bdba:	f1b8 0f01 	cmp.w	r8, #1
 801bdbe:	d405      	bmi.n	801bdcc <tcp_receive+0x48>
 801bdc0:	1c50      	adds	r0, r2, #1
 801bdc2:	1ac0      	subs	r0, r0, r3
 801bdc4:	1a41      	subs	r1, r0, r1
 801bdc6:	2900      	cmp	r1, #0
 801bdc8:	f340 81f3 	ble.w	801c1b2 <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801bdcc:	1a99      	subs	r1, r3, r2
 801bdce:	2900      	cmp	r1, #0
 801bdd0:	f2c0 81ea 	blt.w	801c1a8 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bdd4:	f103 0c01 	add.w	ip, r3, #1
 801bdd8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801bdda:	ebac 0102 	sub.w	r1, ip, r2
 801bdde:	1a09      	subs	r1, r1, r0
 801bde0:	2900      	cmp	r1, #0
 801bde2:	dc39      	bgt.n	801be58 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801bde4:	429a      	cmp	r2, r3
 801bde6:	f000 8470 	beq.w	801c6ca <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801bdea:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801bdec:	2d00      	cmp	r5, #0
 801bdee:	f000 8378 	beq.w	801c4e2 <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801bdf2:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801bdf4:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801bdf8:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801bdfc:	6842      	ldr	r2, [r0, #4]
 801bdfe:	429a      	cmp	r2, r3
 801be00:	d019      	beq.n	801be36 <tcp_receive+0xb2>
              if (prev == NULL) {
 801be02:	f1b8 0f00 	cmp.w	r8, #0
 801be06:	f000 815b 	beq.w	801c0c0 <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801be0a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801be0e:	6849      	ldr	r1, [r1, #4]
 801be10:	ebae 0101 	sub.w	r1, lr, r1
 801be14:	2900      	cmp	r1, #0
 801be16:	db04      	blt.n	801be22 <tcp_receive+0x9e>
 801be18:	ebac 0102 	sub.w	r1, ip, r2
 801be1c:	2900      	cmp	r1, #0
 801be1e:	f340 8369 	ble.w	801c4f4 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801be22:	6829      	ldr	r1, [r5, #0]
 801be24:	46a8      	mov	r8, r5
 801be26:	2900      	cmp	r1, #0
 801be28:	f000 8159 	beq.w	801c0de <tcp_receive+0x35a>
 801be2c:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801be2e:	68e8      	ldr	r0, [r5, #12]
 801be30:	6842      	ldr	r2, [r0, #4]
 801be32:	429a      	cmp	r2, r3
 801be34:	d1e5      	bne.n	801be02 <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801be36:	4890      	ldr	r0, [pc, #576]	; (801c078 <tcp_receive+0x2f4>)
 801be38:	892b      	ldrh	r3, [r5, #8]
 801be3a:	8902      	ldrh	r2, [r0, #8]
 801be3c:	429a      	cmp	r2, r3
 801be3e:	d90b      	bls.n	801be58 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801be40:	f7fe fe54 	bl	801aaec <tcp_seg_copy>
                if (cseg != NULL) {
 801be44:	b140      	cbz	r0, 801be58 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801be46:	f1b8 0f00 	cmp.w	r8, #0
 801be4a:	f000 8414 	beq.w	801c676 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801be4e:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801be52:	4629      	mov	r1, r5
 801be54:	f7ff fea2 	bl	801bb9c <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801be58:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801be5a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801be5e:	f002 baeb 	b.w	801e438 <tcp_send_empty_ack>
      if (tcplen == 0) {
 801be62:	4f83      	ldr	r7, [pc, #524]	; (801c070 <tcp_receive+0x2ec>)
 801be64:	8839      	ldrh	r1, [r7, #0]
 801be66:	2900      	cmp	r1, #0
 801be68:	f040 8116 	bne.w	801c098 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801be6c:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801be6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be70:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801be74:	4470      	add	r0, lr
 801be76:	4560      	cmp	r0, ip
 801be78:	f040 810e 	bne.w	801c098 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801be7c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801be7e:	0400      	lsls	r0, r0, #16
 801be80:	f100 810a 	bmi.w	801c098 <tcp_receive+0x314>
 801be84:	4590      	cmp	r8, r2
 801be86:	f040 8107 	bne.w	801c098 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801be8a:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801be8e:	28ff      	cmp	r0, #255	; 0xff
 801be90:	f000 8393 	beq.w	801c5ba <tcp_receive+0x836>
                ++pcb->dupacks;
 801be94:	3001      	adds	r0, #1
 801be96:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801be98:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801be9a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801be9e:	f200 838c 	bhi.w	801c5ba <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801bea2:	f000 8396 	beq.w	801c5d2 <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801bea6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801bea8:	2800      	cmp	r0, #0
 801beaa:	f040 80b6 	bne.w	801c01a <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801beae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801beb0:	1a99      	subs	r1, r3, r2
 801beb2:	2900      	cmp	r1, #0
 801beb4:	db06      	blt.n	801bec4 <tcp_receive+0x140>
 801beb6:	f1c2 0201 	rsb	r2, r2, #1
 801beba:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801bebc:	1a52      	subs	r2, r2, r1
 801bebe:	4413      	add	r3, r2
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	dd03      	ble.n	801becc <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801bec4:	8b63      	ldrh	r3, [r4, #26]
 801bec6:	f043 0302 	orr.w	r3, r3, #2
 801beca:	8363      	strh	r3, [r4, #26]
}
 801becc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801bed0:	4e68      	ldr	r6, [pc, #416]	; (801c074 <tcp_receive+0x2f0>)
 801bed2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801bed4:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801bed6:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801beda:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801bedc:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801bee0:	2900      	cmp	r1, #0
 801bee2:	db7f      	blt.n	801bfe4 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801bee4:	4d65      	ldr	r5, [pc, #404]	; (801c07c <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801bee6:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801bee8:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801beea:	f000 80d9 	beq.w	801c0a0 <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801beee:	4594      	cmp	ip, r2
 801bef0:	f000 80df 	beq.w	801c0b2 <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801bef4:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801bef8:	eba2 0108 	sub.w	r1, r2, r8
 801befc:	2900      	cmp	r1, #0
 801befe:	ddb0      	ble.n	801be62 <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bf00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801bf02:	1ad3      	subs	r3, r2, r3
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	dc7d      	bgt.n	801c004 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801bf08:	8b63      	ldrh	r3, [r4, #26]
 801bf0a:	0758      	lsls	r0, r3, #29
 801bf0c:	d509      	bpl.n	801bf22 <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801bf0e:	f023 0304 	bic.w	r3, r3, #4
 801bf12:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801bf14:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801bf18:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801bf1c:	2300      	movs	r3, #0
 801bf1e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801bf22:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801bf26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801bf28:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801bf2a:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801bf2e:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801bf30:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801bf34:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801bf36:	f04f 0300 	mov.w	r3, #0
 801bf3a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801bf3e:	d913      	bls.n	801bf68 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801bf40:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801bf44:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801bf46:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801bf4a:	429a      	cmp	r2, r3
 801bf4c:	f200 81c9 	bhi.w	801c2e2 <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801bf50:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801bf54:	4411      	add	r1, r2
 801bf56:	b289      	uxth	r1, r1
 801bf58:	428a      	cmp	r2, r1
 801bf5a:	f200 82a9 	bhi.w	801c4b0 <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801bf5e:	428b      	cmp	r3, r1
 801bf60:	f240 82a8 	bls.w	801c4b4 <tcp_receive+0x730>
 801bf64:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801bf68:	4620      	mov	r0, r4
 801bf6a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801bf6e:	f7ff fe99 	bl	801bca4 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801bf72:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801bf74:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801bf76:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801bf78:	4620      	mov	r0, r4
 801bf7a:	f7ff fe93 	bl	801bca4 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801bf7e:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801bf80:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801bf82:	fab2 f382 	clz	r3, r2
 801bf86:	095b      	lsrs	r3, r3, #5
 801bf88:	425b      	negs	r3, r3
 801bf8a:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801bf8c:	2300      	movs	r3, #0
 801bf8e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801bf90:	2800      	cmp	r0, #0
 801bf92:	f000 81a3 	beq.w	801c2dc <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801bf96:	4b3a      	ldr	r3, [pc, #232]	; (801c080 <tcp_receive+0x2fc>)
 801bf98:	8819      	ldrh	r1, [r3, #0]
 801bf9a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801bf9e:	440b      	add	r3, r1
 801bfa0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801bfa4:	8b63      	ldrh	r3, [r4, #26]
 801bfa6:	0519      	lsls	r1, r3, #20
 801bfa8:	f140 80fa 	bpl.w	801c1a0 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801bfac:	2a00      	cmp	r2, #0
 801bfae:	f000 81af 	beq.w	801c310 <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801bfb2:	68d3      	ldr	r3, [r2, #12]
 801bfb4:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801bfb6:	6858      	ldr	r0, [r3, #4]
 801bfb8:	f7fb ff8a 	bl	8017ed0 <lwip_htonl>
 801bfbc:	1a38      	subs	r0, r7, r0
 801bfbe:	2800      	cmp	r0, #0
 801bfc0:	f300 80ee 	bgt.w	801c1a0 <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801bfc4:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801bfc6:	4f2a      	ldr	r7, [pc, #168]	; (801c070 <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801bfc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801bfcc:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801bfce:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801bfd0:	6833      	ldr	r3, [r6, #0]
 801bfd2:	e01d      	b.n	801c010 <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801bfd4:	4b2b      	ldr	r3, [pc, #172]	; (801c084 <tcp_receive+0x300>)
 801bfd6:	f240 427c 	movw	r2, #1148	; 0x47c
 801bfda:	492b      	ldr	r1, [pc, #172]	; (801c088 <tcp_receive+0x304>)
 801bfdc:	482b      	ldr	r0, [pc, #172]	; (801c08c <tcp_receive+0x308>)
 801bfde:	f008 fa6d 	bl	80244bc <iprintf>
 801bfe2:	e6d9      	b.n	801bd98 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801bfe4:	4a2a      	ldr	r2, [pc, #168]	; (801c090 <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801bfe6:	4d25      	ldr	r5, [pc, #148]	; (801c07c <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801bfe8:	6812      	ldr	r2, [r2, #0]
 801bfea:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801bfec:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801bfee:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801bff2:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801bff6:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801bff8:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801bffc:	bf38      	it	cc
 801bffe:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801c002:	e777      	b.n	801bef4 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c004:	4f1a      	ldr	r7, [pc, #104]	; (801c070 <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801c006:	4620      	mov	r0, r4
 801c008:	f002 fa16 	bl	801e438 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c00c:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c00e:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c010:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801c012:	2800      	cmp	r0, #0
 801c014:	f43f aec9 	beq.w	801bdaa <tcp_receive+0x26>
 801c018:	682a      	ldr	r2, [r5, #0]
 801c01a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801c01c:	1aaa      	subs	r2, r5, r2
 801c01e:	2a00      	cmp	r2, #0
 801c020:	f6bf aec3 	bge.w	801bdaa <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801c024:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c028:	b280      	uxth	r0, r0
 801c02a:	4a1a      	ldr	r2, [pc, #104]	; (801c094 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801c02c:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c030:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801c034:	ebae 020c 	sub.w	r2, lr, ip
 801c038:	1a12      	subs	r2, r2, r0
 801c03a:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801c03c:	4415      	add	r5, r2
      if (m < 0) {
 801c03e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801c042:	b22d      	sxth	r5, r5
 801c044:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801c046:	d003      	beq.n	801c050 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801c048:	ebac 0c0e 	sub.w	ip, ip, lr
 801c04c:	4460      	add	r0, ip
 801c04e:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801c050:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801c054:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801c058:	4410      	add	r0, r2
      pcb->rttest = 0;
 801c05a:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801c05c:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801c05e:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c060:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801c064:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c066:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801c06a:	e69e      	b.n	801bdaa <tcp_receive+0x26>
 801c06c:	2002dc7c 	.word	0x2002dc7c
 801c070:	2002dcb6 	.word	0x2002dcb6
 801c074:	2002dc9c 	.word	0x2002dc9c
 801c078:	2002dc80 	.word	0x2002dc80
 801c07c:	2002dc78 	.word	0x2002dc78
 801c080:	2002dc90 	.word	0x2002dc90
 801c084:	080e0ad4 	.word	0x080e0ad4
 801c088:	080e0bbc 	.word	0x080e0bbc
 801c08c:	0802ac68 	.word	0x0802ac68
 801c090:	2002dca8 	.word	0x2002dca8
 801c094:	2002dc6c 	.word	0x2002dc6c
        pcb->dupacks = 0;
 801c098:	2200      	movs	r2, #0
 801c09a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801c09e:	e7b7      	b.n	801c010 <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c0a0:	ebac 0102 	sub.w	r1, ip, r2
 801c0a4:	2900      	cmp	r1, #0
 801c0a6:	f6bf af22 	bge.w	801beee <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c0aa:	49ac      	ldr	r1, [pc, #688]	; (801c35c <tcp_receive+0x5d8>)
 801c0ac:	6809      	ldr	r1, [r1, #0]
 801c0ae:	89c9      	ldrh	r1, [r1, #14]
 801c0b0:	e79d      	b.n	801bfee <tcp_receive+0x26a>
 801c0b2:	49aa      	ldr	r1, [pc, #680]	; (801c35c <tcp_receive+0x5d8>)
 801c0b4:	6809      	ldr	r1, [r1, #0]
 801c0b6:	89c9      	ldrh	r1, [r1, #14]
 801c0b8:	458e      	cmp	lr, r1
 801c0ba:	f4bf af1b 	bcs.w	801bef4 <tcp_receive+0x170>
 801c0be:	e796      	b.n	801bfee <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801c0c0:	1a99      	subs	r1, r3, r2
 801c0c2:	2900      	cmp	r1, #0
 801c0c4:	f6bf aead 	bge.w	801be22 <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c0c8:	48a5      	ldr	r0, [pc, #660]	; (801c360 <tcp_receive+0x5dc>)
 801c0ca:	f7fe fd0f 	bl	801aaec <tcp_seg_copy>
                  if (cseg != NULL) {
 801c0ce:	2800      	cmp	r0, #0
 801c0d0:	f43f aec2 	beq.w	801be58 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801c0d4:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801c0d6:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801c0d8:	f7ff fd60 	bl	801bb9c <tcp_oos_insert_segment>
 801c0dc:	e6bc      	b.n	801be58 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801c0de:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	f77f aeb9 	ble.w	801be58 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c0e6:	8980      	ldrh	r0, [r0, #12]
 801c0e8:	f7fb feee 	bl	8017ec8 <lwip_htons>
 801c0ec:	07c1      	lsls	r1, r0, #31
 801c0ee:	f53f aeb3 	bmi.w	801be58 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801c0f2:	489b      	ldr	r0, [pc, #620]	; (801c360 <tcp_receive+0x5dc>)
 801c0f4:	f7fe fcfa 	bl	801aaec <tcp_seg_copy>
 801c0f8:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801c0fa:	2800      	cmp	r0, #0
 801c0fc:	f43f aeac 	beq.w	801be58 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801c100:	68eb      	ldr	r3, [r5, #12]
 801c102:	892a      	ldrh	r2, [r5, #8]
 801c104:	6859      	ldr	r1, [r3, #4]
 801c106:	6833      	ldr	r3, [r6, #0]
 801c108:	440a      	add	r2, r1
 801c10a:	1ad2      	subs	r2, r2, r3
 801c10c:	2a00      	cmp	r2, #0
 801c10e:	dd05      	ble.n	801c11c <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801c110:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801c112:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801c114:	b299      	uxth	r1, r3
 801c116:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801c118:	f7fd fe5e 	bl	8019dd8 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801c11c:	6832      	ldr	r2, [r6, #0]
 801c11e:	883b      	ldrh	r3, [r7, #0]
 801c120:	4413      	add	r3, r2
 801c122:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c124:	1a9b      	subs	r3, r3, r2
 801c126:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801c128:	1a9b      	subs	r3, r3, r2
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	f77f ae94 	ble.w	801be58 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801c130:	682b      	ldr	r3, [r5, #0]
 801c132:	68db      	ldr	r3, [r3, #12]
 801c134:	8998      	ldrh	r0, [r3, #12]
 801c136:	f7fb fec7 	bl	8017ec8 <lwip_htons>
 801c13a:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801c13c:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801c13e:	f100 82b1 	bmi.w	801c6a4 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801c142:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801c144:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801c146:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801c148:	1a89      	subs	r1, r1, r2
 801c14a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c14c:	4411      	add	r1, r2
 801c14e:	b289      	uxth	r1, r1
 801c150:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801c152:	f7fd fe41 	bl	8019dd8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801c156:	682b      	ldr	r3, [r5, #0]
 801c158:	891d      	ldrh	r5, [r3, #8]
 801c15a:	68db      	ldr	r3, [r3, #12]
 801c15c:	8998      	ldrh	r0, [r3, #12]
 801c15e:	f7fb feb3 	bl	8017ec8 <lwip_htons>
 801c162:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c166:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801c168:	bf18      	it	ne
 801c16a:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c16c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801c16e:	442b      	add	r3, r5
 801c170:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c172:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801c174:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c178:	4413      	add	r3, r2
 801c17a:	4299      	cmp	r1, r3
 801c17c:	f43f ae6c 	beq.w	801be58 <tcp_receive+0xd4>
 801c180:	4b78      	ldr	r3, [pc, #480]	; (801c364 <tcp_receive+0x5e0>)
 801c182:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801c186:	4978      	ldr	r1, [pc, #480]	; (801c368 <tcp_receive+0x5e4>)
 801c188:	4878      	ldr	r0, [pc, #480]	; (801c36c <tcp_receive+0x5e8>)
 801c18a:	f008 f997 	bl	80244bc <iprintf>
 801c18e:	e663      	b.n	801be58 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c190:	4b74      	ldr	r3, [pc, #464]	; (801c364 <tcp_receive+0x5e0>)
 801c192:	f240 427b 	movw	r2, #1147	; 0x47b
 801c196:	4976      	ldr	r1, [pc, #472]	; (801c370 <tcp_receive+0x5ec>)
 801c198:	4874      	ldr	r0, [pc, #464]	; (801c36c <tcp_receive+0x5e8>)
 801c19a:	f008 f98f 	bl	80244bc <iprintf>
 801c19e:	e5f7      	b.n	801bd90 <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c1a0:	4f74      	ldr	r7, [pc, #464]	; (801c374 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c1a2:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c1a4:	8839      	ldrh	r1, [r7, #0]
 801c1a6:	e733      	b.n	801c010 <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801c1a8:	8b63      	ldrh	r3, [r4, #26]
 801c1aa:	f043 0302 	orr.w	r3, r3, #2
 801c1ae:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c1b0:	e652      	b.n	801be58 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801c1b2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801c360 <tcp_receive+0x5dc>
 801c1b6:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c1ba:	2d00      	cmp	r5, #0
 801c1bc:	f000 8170 	beq.w	801c4a0 <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c1c0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801c1c4:	4598      	cmp	r8, r3
 801c1c6:	f200 80c0 	bhi.w	801c34a <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c1ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801c1ce:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c1d2:	891a      	ldrh	r2, [r3, #8]
 801c1d4:	4542      	cmp	r2, r8
 801c1d6:	f0c0 80ad 	bcc.w	801c334 <tcp_receive+0x5b0>
      inseg.len -= off;
 801c1da:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c1de:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801c1e2:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c1e6:	b292      	uxth	r2, r2
      inseg.len -= off;
 801c1e8:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801c1ec:	896b      	ldrh	r3, [r5, #10]
 801c1ee:	4543      	cmp	r3, r8
 801c1f0:	d20a      	bcs.n	801c208 <tcp_receive+0x484>
        p->len = 0;
 801c1f2:	2100      	movs	r1, #0
        off -= p->len;
 801c1f4:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801c1f8:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801c1fa:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801c1fc:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801c1fe:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801c202:	896b      	ldrh	r3, [r5, #10]
 801c204:	4543      	cmp	r3, r8
 801c206:	d3f5      	bcc.n	801c1f4 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801c208:	4641      	mov	r1, r8
 801c20a:	4628      	mov	r0, r5
 801c20c:	f7fd fe70 	bl	8019ef0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801c210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c212:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c216:	6033      	str	r3, [r6, #0]
 801c218:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c21a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	f43f ae1b 	beq.w	801be58 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801c222:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c226:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801c22a:	8998      	ldrh	r0, [r3, #12]
 801c22c:	f7fb fe4c 	bl	8017ec8 <lwip_htons>
 801c230:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801c234:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801c236:	bf18      	it	ne
 801c238:	2301      	movne	r3, #1
 801c23a:	442b      	add	r3, r5
 801c23c:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801c23e:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801c240:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801c242:	f0c0 8181 	bcc.w	801c548 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801c246:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801c248:	2b00      	cmp	r3, #0
 801c24a:	f000 80a0 	beq.w	801c38e <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c24e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c252:	8998      	ldrh	r0, [r3, #12]
 801c254:	f7fb fe38 	bl	8017ec8 <lwip_htons>
 801c258:	07c2      	lsls	r2, r0, #31
 801c25a:	f100 8095 	bmi.w	801c388 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801c25e:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801c260:	b955      	cbnz	r5, 801c278 <tcp_receive+0x4f4>
 801c262:	e1f4      	b.n	801c64e <tcp_receive+0x8ca>
              next = next->next;
 801c264:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801c268:	4628      	mov	r0, r5
 801c26a:	f7fe fc21 	bl	801aab0 <tcp_seg_free>
            while (next &&
 801c26e:	4645      	mov	r5, r8
 801c270:	f1b8 0f00 	cmp.w	r8, #0
 801c274:	f000 81eb 	beq.w	801c64e <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801c278:	68e8      	ldr	r0, [r5, #12]
 801c27a:	883a      	ldrh	r2, [r7, #0]
 801c27c:	f8d6 e000 	ldr.w	lr, [r6]
 801c280:	892b      	ldrh	r3, [r5, #8]
 801c282:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801c286:	eb02 010e 	add.w	r1, r2, lr
 801c28a:	4463      	add	r3, ip
 801c28c:	1acb      	subs	r3, r1, r3
            while (next &&
 801c28e:	2b00      	cmp	r3, #0
 801c290:	f2c0 81a5 	blt.w	801c5de <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c294:	8980      	ldrh	r0, [r0, #12]
 801c296:	f7fb fe17 	bl	8017ec8 <lwip_htons>
 801c29a:	07c3      	lsls	r3, r0, #31
 801c29c:	d5e2      	bpl.n	801c264 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801c29e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c2a2:	8998      	ldrh	r0, [r3, #12]
 801c2a4:	f7fb fe10 	bl	8017ec8 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c2a8:	0780      	lsls	r0, r0, #30
 801c2aa:	d4db      	bmi.n	801c264 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801c2ac:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c2b0:	2001      	movs	r0, #1
 801c2b2:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801c2b6:	f7fb fe07 	bl	8017ec8 <lwip_htons>
 801c2ba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c2be:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801c2c2:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801c2c6:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801c2c8:	b280      	uxth	r0, r0
 801c2ca:	f7fb fdfd 	bl	8017ec8 <lwip_htons>
 801c2ce:	f010 0003 	ands.w	r0, r0, #3
 801c2d2:	bf18      	it	ne
 801c2d4:	2001      	movne	r0, #1
 801c2d6:	4440      	add	r0, r8
 801c2d8:	8038      	strh	r0, [r7, #0]
 801c2da:	e7c3      	b.n	801c264 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801c2dc:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801c2e0:	e659      	b.n	801bf96 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c2e2:	8b62      	ldrh	r2, [r4, #26]
 801c2e4:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c2e8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c2ea:	bf14      	ite	ne
 801c2ec:	2001      	movne	r0, #1
 801c2ee:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c2f0:	fb12 f200 	smulbb	r2, r2, r0
 801c2f4:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801c2f6:	428a      	cmp	r2, r1
 801c2f8:	bf94      	ite	ls
 801c2fa:	1898      	addls	r0, r3, r2
 801c2fc:	1858      	addhi	r0, r3, r1
 801c2fe:	b282      	uxth	r2, r0
 801c300:	4293      	cmp	r3, r2
 801c302:	f240 80e0 	bls.w	801c4c6 <tcp_receive+0x742>
 801c306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c30a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801c30e:	e62b      	b.n	801bf68 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801c310:	b148      	cbz	r0, 801c326 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801c312:	68c3      	ldr	r3, [r0, #12]
 801c314:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801c316:	6858      	ldr	r0, [r3, #4]
 801c318:	f7fb fdda 	bl	8017ed0 <lwip_htonl>
 801c31c:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801c31e:	2800      	cmp	r0, #0
 801c320:	f73f af3e 	bgt.w	801c1a0 <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801c324:	8b63      	ldrh	r3, [r4, #26]
 801c326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c32a:	4f12      	ldr	r7, [pc, #72]	; (801c374 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801c32c:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c32e:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c330:	6833      	ldr	r3, [r6, #0]
 801c332:	e66d      	b.n	801c010 <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c334:	4b0b      	ldr	r3, [pc, #44]	; (801c364 <tcp_receive+0x5e0>)
 801c336:	f240 5297 	movw	r2, #1431	; 0x597
 801c33a:	490f      	ldr	r1, [pc, #60]	; (801c378 <tcp_receive+0x5f4>)
 801c33c:	480b      	ldr	r0, [pc, #44]	; (801c36c <tcp_receive+0x5e8>)
 801c33e:	f008 f8bd 	bl	80244bc <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c342:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c346:	891a      	ldrh	r2, [r3, #8]
 801c348:	e747      	b.n	801c1da <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c34a:	4b06      	ldr	r3, [pc, #24]	; (801c364 <tcp_receive+0x5e0>)
 801c34c:	f240 5295 	movw	r2, #1429	; 0x595
 801c350:	490a      	ldr	r1, [pc, #40]	; (801c37c <tcp_receive+0x5f8>)
 801c352:	4806      	ldr	r0, [pc, #24]	; (801c36c <tcp_receive+0x5e8>)
 801c354:	f008 f8b2 	bl	80244bc <iprintf>
 801c358:	e737      	b.n	801c1ca <tcp_receive+0x446>
 801c35a:	bf00      	nop
 801c35c:	2002dca8 	.word	0x2002dca8
 801c360:	2002dc80 	.word	0x2002dc80
 801c364:	080e0ad4 	.word	0x080e0ad4
 801c368:	080e0c08 	.word	0x080e0c08
 801c36c:	0802ac68 	.word	0x0802ac68
 801c370:	080e0ba0 	.word	0x080e0ba0
 801c374:	2002dcb6 	.word	0x2002dcb6
 801c378:	080e0bf8 	.word	0x080e0bf8
 801c37c:	080e0be8 	.word	0x080e0be8
              pcb->ooseq = pcb->ooseq->next;
 801c380:	6803      	ldr	r3, [r0, #0]
 801c382:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801c384:	f7fe fb94 	bl	801aab0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801c388:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801c38a:	2800      	cmp	r0, #0
 801c38c:	d1f8      	bne.n	801c380 <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801c38e:	883a      	ldrh	r2, [r7, #0]
 801c390:	6831      	ldr	r1, [r6, #0]
 801c392:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801c394:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801c396:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801c398:	4293      	cmp	r3, r2
 801c39a:	f0c0 80cb 	bcc.w	801c534 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801c39e:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801c3a0:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801c3a2:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801c3a4:	f7fe fa4c 	bl	801a840 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801c3a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c3ac:	891a      	ldrh	r2, [r3, #8]
 801c3ae:	b122      	cbz	r2, 801c3ba <tcp_receive+0x636>
          recv_data = inseg.p;
 801c3b0:	4ab2      	ldr	r2, [pc, #712]	; (801c67c <tcp_receive+0x8f8>)
 801c3b2:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c3ba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c3be:	8998      	ldrh	r0, [r3, #12]
 801c3c0:	f7fb fd82 	bl	8017ec8 <lwip_htons>
 801c3c4:	07c2      	lsls	r2, r0, #31
 801c3c6:	d504      	bpl.n	801c3d2 <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801c3c8:	4aad      	ldr	r2, [pc, #692]	; (801c680 <tcp_receive+0x8fc>)
 801c3ca:	7813      	ldrb	r3, [r2, #0]
 801c3cc:	f043 0320 	orr.w	r3, r3, #32
 801c3d0:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801c3d2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801c3d4:	2d00      	cmp	r5, #0
 801c3d6:	d07b      	beq.n	801c4d0 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c3d8:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801c688 <tcp_receive+0x904>
 801c3dc:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801c6a0 <tcp_receive+0x91c>
 801c3e0:	4fa8      	ldr	r7, [pc, #672]	; (801c684 <tcp_receive+0x900>)
 801c3e2:	e033      	b.n	801c44c <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801c3e4:	68eb      	ldr	r3, [r5, #12]
 801c3e6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801c3ea:	8998      	ldrh	r0, [r3, #12]
 801c3ec:	f7fb fd6c 	bl	8017ec8 <lwip_htons>
 801c3f0:	f010 0003 	ands.w	r0, r0, #3
 801c3f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c3f6:	bf18      	it	ne
 801c3f8:	2001      	movne	r0, #1
 801c3fa:	4450      	add	r0, sl
 801c3fc:	1a18      	subs	r0, r3, r0
 801c3fe:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801c400:	4620      	mov	r0, r4
 801c402:	f7fe fa1d 	bl	801a840 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801c406:	6869      	ldr	r1, [r5, #4]
 801c408:	890b      	ldrh	r3, [r1, #8]
 801c40a:	b13b      	cbz	r3, 801c41c <tcp_receive+0x698>
            if (recv_data) {
 801c40c:	4b9b      	ldr	r3, [pc, #620]	; (801c67c <tcp_receive+0x8f8>)
 801c40e:	6818      	ldr	r0, [r3, #0]
 801c410:	2800      	cmp	r0, #0
 801c412:	d05b      	beq.n	801c4cc <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801c414:	f7fd fe0e 	bl	801a034 <pbuf_cat>
            cseg->p = NULL;
 801c418:	2300      	movs	r3, #0
 801c41a:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c41c:	68eb      	ldr	r3, [r5, #12]
 801c41e:	8998      	ldrh	r0, [r3, #12]
 801c420:	f7fb fd52 	bl	8017ec8 <lwip_htons>
 801c424:	07c3      	lsls	r3, r0, #31
 801c426:	d509      	bpl.n	801c43c <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801c428:	4a95      	ldr	r2, [pc, #596]	; (801c680 <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801c42a:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801c42c:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801c42e:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801c430:	f043 0320 	orr.w	r3, r3, #32
 801c434:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801c436:	d101      	bne.n	801c43c <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801c438:	2307      	movs	r3, #7
 801c43a:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801c43c:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801c43e:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801c440:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801c442:	f7fe fb35 	bl	801aab0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801c446:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801c448:	2d00      	cmp	r5, #0
 801c44a:	d041      	beq.n	801c4d0 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801c44c:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801c44e:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801c450:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801c452:	428b      	cmp	r3, r1
 801c454:	d13c      	bne.n	801c4d0 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801c456:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c458:	8990      	ldrh	r0, [r2, #12]
 801c45a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801c45e:	f7fb fd33 	bl	8017ec8 <lwip_htons>
 801c462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c464:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c468:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c46c:	bf18      	it	ne
 801c46e:	2001      	movne	r0, #1
 801c470:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c472:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c474:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c476:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c47a:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c47c:	8998      	ldrh	r0, [r3, #12]
 801c47e:	f7fb fd23 	bl	8017ec8 <lwip_htons>
 801c482:	f010 0003 	ands.w	r0, r0, #3
 801c486:	bf18      	it	ne
 801c488:	2001      	movne	r0, #1
 801c48a:	4458      	add	r0, fp
 801c48c:	4582      	cmp	sl, r0
 801c48e:	d2a9      	bcs.n	801c3e4 <tcp_receive+0x660>
 801c490:	464b      	mov	r3, r9
 801c492:	f240 622b 	movw	r2, #1579	; 0x62b
 801c496:	4641      	mov	r1, r8
 801c498:	4638      	mov	r0, r7
 801c49a:	f008 f80f 	bl	80244bc <iprintf>
 801c49e:	e7a1      	b.n	801c3e4 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c4a0:	4b79      	ldr	r3, [pc, #484]	; (801c688 <tcp_receive+0x904>)
 801c4a2:	f240 5294 	movw	r2, #1428	; 0x594
 801c4a6:	4979      	ldr	r1, [pc, #484]	; (801c68c <tcp_receive+0x908>)
 801c4a8:	4876      	ldr	r0, [pc, #472]	; (801c684 <tcp_receive+0x900>)
 801c4aa:	f008 f807 	bl	80244bc <iprintf>
 801c4ae:	e687      	b.n	801c1c0 <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c4b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c4b4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c4b6:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c4b8:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c4ba:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c4be:	b292      	uxth	r2, r2
 801c4c0:	4293      	cmp	r3, r2
 801c4c2:	f63f af20 	bhi.w	801c306 <tcp_receive+0x582>
 801c4c6:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801c4ca:	e54d      	b.n	801bf68 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801c4cc:	6019      	str	r1, [r3, #0]
 801c4ce:	e7a3      	b.n	801c418 <tcp_receive+0x694>
        tcp_ack(pcb);
 801c4d0:	8b63      	ldrh	r3, [r4, #26]
 801c4d2:	07d8      	lsls	r0, r3, #31
 801c4d4:	d50a      	bpl.n	801c4ec <tcp_receive+0x768>
 801c4d6:	f023 0301 	bic.w	r3, r3, #1
 801c4da:	f043 0302 	orr.w	r3, r3, #2
 801c4de:	8363      	strh	r3, [r4, #26]
 801c4e0:	e4f4      	b.n	801becc <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801c4e2:	486b      	ldr	r0, [pc, #428]	; (801c690 <tcp_receive+0x90c>)
 801c4e4:	f7fe fb02 	bl	801aaec <tcp_seg_copy>
 801c4e8:	6760      	str	r0, [r4, #116]	; 0x74
 801c4ea:	e4b5      	b.n	801be58 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801c4ec:	f043 0301 	orr.w	r3, r3, #1
 801c4f0:	8363      	strh	r3, [r4, #26]
 801c4f2:	e4eb      	b.n	801becc <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c4f4:	4866      	ldr	r0, [pc, #408]	; (801c690 <tcp_receive+0x90c>)
 801c4f6:	f7fe faf9 	bl	801aaec <tcp_seg_copy>
                  if (cseg != NULL) {
 801c4fa:	4607      	mov	r7, r0
 801c4fc:	2800      	cmp	r0, #0
 801c4fe:	f43f acab 	beq.w	801be58 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801c502:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c506:	6832      	ldr	r2, [r6, #0]
 801c508:	6859      	ldr	r1, [r3, #4]
 801c50a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801c50e:	440b      	add	r3, r1
 801c510:	1a9b      	subs	r3, r3, r2
 801c512:	2b00      	cmp	r3, #0
 801c514:	dd07      	ble.n	801c526 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801c516:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801c518:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801c51c:	b291      	uxth	r1, r2
 801c51e:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801c522:	f7fd fc59 	bl	8019dd8 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801c526:	4629      	mov	r1, r5
 801c528:	4638      	mov	r0, r7
                    prev->next = cseg;
 801c52a:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801c52e:	f7ff fb35 	bl	801bb9c <tcp_oos_insert_segment>
 801c532:	e491      	b.n	801be58 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801c534:	4b54      	ldr	r3, [pc, #336]	; (801c688 <tcp_receive+0x904>)
 801c536:	f240 6207 	movw	r2, #1543	; 0x607
 801c53a:	4956      	ldr	r1, [pc, #344]	; (801c694 <tcp_receive+0x910>)
 801c53c:	4851      	ldr	r0, [pc, #324]	; (801c684 <tcp_receive+0x900>)
 801c53e:	f007 ffbd 	bl	80244bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 801c542:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c544:	883a      	ldrh	r2, [r7, #0]
 801c546:	e72a      	b.n	801c39e <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c548:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c54c:	8998      	ldrh	r0, [r3, #12]
 801c54e:	f7fb fcbb 	bl	8017ec8 <lwip_htons>
 801c552:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801c554:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c558:	d47d      	bmi.n	801c656 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c55a:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801c55c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c55e:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c562:	f7fb fcb1 	bl	8017ec8 <lwip_htons>
 801c566:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801c568:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c56c:	d503      	bpl.n	801c576 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801c56e:	3901      	subs	r1, #1
 801c570:	b289      	uxth	r1, r1
 801c572:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801c576:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801c57a:	f7fd fc2d 	bl	8019dd8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801c57e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c582:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801c586:	8998      	ldrh	r0, [r3, #12]
 801c588:	f7fb fc9e 	bl	8017ec8 <lwip_htons>
 801c58c:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c590:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801c592:	bf18      	it	ne
 801c594:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c596:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801c598:	442b      	add	r3, r5
 801c59a:	b29b      	uxth	r3, r3
 801c59c:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c59e:	4413      	add	r3, r2
 801c5a0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801c5a2:	440a      	add	r2, r1
 801c5a4:	4293      	cmp	r3, r2
 801c5a6:	f43f ae4e 	beq.w	801c246 <tcp_receive+0x4c2>
 801c5aa:	4b37      	ldr	r3, [pc, #220]	; (801c688 <tcp_receive+0x904>)
 801c5ac:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801c5b0:	4939      	ldr	r1, [pc, #228]	; (801c698 <tcp_receive+0x914>)
 801c5b2:	4834      	ldr	r0, [pc, #208]	; (801c684 <tcp_receive+0x900>)
 801c5b4:	f007 ff82 	bl	80244bc <iprintf>
 801c5b8:	e645      	b.n	801c246 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c5ba:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801c5be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c5c2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c5c4:	4413      	add	r3, r2
 801c5c6:	b29b      	uxth	r3, r3
 801c5c8:	429a      	cmp	r2, r3
 801c5ca:	bf88      	it	hi
 801c5cc:	460b      	movhi	r3, r1
 801c5ce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801c5d2:	4620      	mov	r0, r4
 801c5d4:	f001 feae 	bl	801e334 <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c5d8:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c5da:	6833      	ldr	r3, [r6, #0]
 801c5dc:	e518      	b.n	801c010 <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801c5de:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	dc01      	bgt.n	801c5ea <tcp_receive+0x866>
            pcb->ooseq = next;
 801c5e6:	6765      	str	r5, [r4, #116]	; 0x74
 801c5e8:	e6d4      	b.n	801c394 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801c5ea:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c5ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801c5f2:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c5f6:	8998      	ldrh	r0, [r3, #12]
 801c5f8:	f7fb fc66 	bl	8017ec8 <lwip_htons>
 801c5fc:	0781      	lsls	r1, r0, #30
 801c5fe:	d504      	bpl.n	801c60a <tcp_receive+0x886>
                inseg.len -= 1;
 801c600:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801c604:	3b01      	subs	r3, #1
 801c606:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801c60a:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801c60e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801c612:	f7fd fbe1 	bl	8019dd8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801c616:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c61a:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801c61e:	8998      	ldrh	r0, [r3, #12]
 801c620:	f7fb fc52 	bl	8017ec8 <lwip_htons>
 801c624:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801c628:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801c62a:	bf18      	it	ne
 801c62c:	2001      	movne	r0, #1
 801c62e:	eb08 0200 	add.w	r2, r8, r0
 801c632:	b292      	uxth	r2, r2
 801c634:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801c636:	6859      	ldr	r1, [r3, #4]
 801c638:	6833      	ldr	r3, [r6, #0]
 801c63a:	4413      	add	r3, r2
 801c63c:	428b      	cmp	r3, r1
 801c63e:	d0d2      	beq.n	801c5e6 <tcp_receive+0x862>
 801c640:	4b11      	ldr	r3, [pc, #68]	; (801c688 <tcp_receive+0x904>)
 801c642:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801c646:	4915      	ldr	r1, [pc, #84]	; (801c69c <tcp_receive+0x918>)
 801c648:	480e      	ldr	r0, [pc, #56]	; (801c684 <tcp_receive+0x900>)
 801c64a:	f007 ff37 	bl	80244bc <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801c64e:	883a      	ldrh	r2, [r7, #0]
 801c650:	6831      	ldr	r1, [r6, #0]
 801c652:	4411      	add	r1, r2
 801c654:	e7c7      	b.n	801c5e6 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801c656:	899d      	ldrh	r5, [r3, #12]
 801c658:	4628      	mov	r0, r5
 801c65a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801c65e:	f7fb fc33 	bl	8017ec8 <lwip_htons>
 801c662:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801c666:	f7fb fc2f 	bl	8017ec8 <lwip_htons>
 801c66a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c66e:	4328      	orrs	r0, r5
 801c670:	8198      	strh	r0, [r3, #12]
 801c672:	b280      	uxth	r0, r0
 801c674:	e772      	b.n	801c55c <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801c676:	6760      	str	r0, [r4, #116]	; 0x74
 801c678:	f7ff bbeb 	b.w	801be52 <tcp_receive+0xce>
 801c67c:	2002dc94 	.word	0x2002dc94
 801c680:	2002dc98 	.word	0x2002dc98
 801c684:	0802ac68 	.word	0x0802ac68
 801c688:	080e0ad4 	.word	0x080e0ad4
 801c68c:	080e0bd8 	.word	0x080e0bd8
 801c690:	2002dc80 	.word	0x2002dc80
 801c694:	080e0c7c 	.word	0x080e0c7c
 801c698:	080e0c08 	.word	0x080e0c08
 801c69c:	080e0c40 	.word	0x080e0c40
 801c6a0:	080e0c9c 	.word	0x080e0c9c
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801c6a4:	68db      	ldr	r3, [r3, #12]
 801c6a6:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801c6aa:	4640      	mov	r0, r8
 801c6ac:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801c6b0:	f7fb fc0a 	bl	8017ec8 <lwip_htons>
 801c6b4:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801c6b8:	f7fb fc06 	bl	8017ec8 <lwip_htons>
 801c6bc:	682b      	ldr	r3, [r5, #0]
 801c6be:	ea48 0800 	orr.w	r8, r8, r0
 801c6c2:	68da      	ldr	r2, [r3, #12]
 801c6c4:	f8a2 800c 	strh.w	r8, [r2, #12]
 801c6c8:	e53b      	b.n	801c142 <tcp_receive+0x3be>
 801c6ca:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801c6d0 <tcp_receive+0x94c>
 801c6ce:	e5a8      	b.n	801c222 <tcp_receive+0x49e>
 801c6d0:	2002dc80 	.word	0x2002dc80

0801c6d4 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c6d4:	494a      	ldr	r1, [pc, #296]	; (801c800 <tcp_parseopt.part.0+0x12c>)
 801c6d6:	4b4b      	ldr	r3, [pc, #300]	; (801c804 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c6d8:	4a4b      	ldr	r2, [pc, #300]	; (801c808 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801c6da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c6de:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c6e2:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c6e4:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c6e6:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c6ea:	4b48      	ldr	r3, [pc, #288]	; (801c80c <tcp_parseopt.part.0+0x138>)
 801c6ec:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801c810 <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c6f0:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801c6f2:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c6f6:	681d      	ldr	r5, [r3, #0]
 801c6f8:	f8b9 2000 	ldrh.w	r2, [r9]
 801c6fc:	f102 0c14 	add.w	ip, r2, #20
 801c700:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c702:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801c704:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c708:	d96d      	bls.n	801c7e6 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801c70a:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c70c:	b1ac      	cbz	r4, 801c73a <tcp_parseopt.part.0+0x66>
 801c70e:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801c710:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c714:	d811      	bhi.n	801c73a <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801c716:	b2c9      	uxtb	r1, r1
 801c718:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801c71a:	2901      	cmp	r1, #1
 801c71c:	d011      	beq.n	801c742 <tcp_parseopt.part.0+0x6e>
 801c71e:	2902      	cmp	r1, #2
 801c720:	d017      	beq.n	801c752 <tcp_parseopt.part.0+0x7e>
 801c722:	b191      	cbz	r1, 801c74a <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c724:	b10c      	cbz	r4, 801c72a <tcp_parseopt.part.0+0x56>
 801c726:	4573      	cmp	r3, lr
 801c728:	d242      	bcs.n	801c7b0 <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801c72a:	442b      	add	r3, r5
 801c72c:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801c72e:	2b01      	cmp	r3, #1
 801c730:	d961      	bls.n	801c7f6 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801c732:	441a      	add	r2, r3
 801c734:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801c736:	2101      	movs	r1, #1
 801c738:	e7e0      	b.n	801c6fc <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801c73a:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801c73e:	2901      	cmp	r1, #1
 801c740:	d1ed      	bne.n	801c71e <tcp_parseopt.part.0+0x4a>
 801c742:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801c746:	461a      	mov	r2, r3
 801c748:	e7db      	b.n	801c702 <tcp_parseopt.part.0+0x2e>
 801c74a:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801c74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801c752:	1c91      	adds	r1, r2, #2
 801c754:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c756:	b10c      	cbz	r4, 801c75c <tcp_parseopt.part.0+0x88>
 801c758:	4573      	cmp	r3, lr
 801c75a:	d224      	bcs.n	801c7a6 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801c75c:	442b      	add	r3, r5
 801c75e:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801c760:	2b04      	cmp	r3, #4
 801c762:	d145      	bne.n	801c7f0 <tcp_parseopt.part.0+0x11c>
 801c764:	1c4b      	adds	r3, r1, #1
 801c766:	42b3      	cmp	r3, r6
 801c768:	da42      	bge.n	801c7f0 <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801c76a:	1cd3      	adds	r3, r2, #3
 801c76c:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c76e:	b384      	cbz	r4, 801c7d2 <tcp_parseopt.part.0+0xfe>
 801c770:	458e      	cmp	lr, r1
 801c772:	d822      	bhi.n	801c7ba <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c774:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801c778:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c77a:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801c77c:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801c77e:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c780:	f814 c001 	ldrb.w	ip, [r4, r1]
 801c784:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c788:	d820      	bhi.n	801c7cc <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c78a:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801c78e:	b2c9      	uxtb	r1, r1
 801c790:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801c792:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801c796:	1e59      	subs	r1, r3, #1
 801c798:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801c79c:	bf28      	it	cs
 801c79e:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801c7a2:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801c7a4:	e7c7      	b.n	801c736 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c7a6:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801c7aa:	b2db      	uxtb	r3, r3
 801c7ac:	5ce3      	ldrb	r3, [r4, r3]
 801c7ae:	e7d7      	b.n	801c760 <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c7b0:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801c7b4:	b2db      	uxtb	r3, r3
 801c7b6:	5ce3      	ldrb	r3, [r4, r3]
 801c7b8:	e7b9      	b.n	801c72e <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801c7ba:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801c7bc:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c7be:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c7c0:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801c7c4:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c7c6:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c7ca:	d9de      	bls.n	801c78a <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801c7cc:	442b      	add	r3, r5
 801c7ce:	7d1b      	ldrb	r3, [r3, #20]
 801c7d0:	e7df      	b.n	801c792 <tcp_parseopt.part.0+0xbe>
 801c7d2:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801c7d4:	3204      	adds	r2, #4
    return opts[optidx];
 801c7d6:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c7d8:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801c7dc:	b292      	uxth	r2, r2
    return opts[optidx];
 801c7de:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c7e0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801c7e4:	e7d5      	b.n	801c792 <tcp_parseopt.part.0+0xbe>
 801c7e6:	2900      	cmp	r1, #0
 801c7e8:	d0b1      	beq.n	801c74e <tcp_parseopt.part.0+0x7a>
 801c7ea:	f8a9 2000 	strh.w	r2, [r9]
 801c7ee:	e7ae      	b.n	801c74e <tcp_parseopt.part.0+0x7a>
 801c7f0:	f8a9 1000 	strh.w	r1, [r9]
 801c7f4:	e7ab      	b.n	801c74e <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801c7f6:	3202      	adds	r2, #2
 801c7f8:	f8a9 2000 	strh.w	r2, [r9]
 801c7fc:	e7a7      	b.n	801c74e <tcp_parseopt.part.0+0x7a>
 801c7fe:	bf00      	nop
 801c800:	2002dcac 	.word	0x2002dcac
 801c804:	2002dcb0 	.word	0x2002dcb0
 801c808:	2002dcb4 	.word	0x2002dcb4
 801c80c:	2002dca8 	.word	0x2002dca8
 801c810:	2002dca4 	.word	0x2002dca4

0801c814 <tcp_input>:
{
 801c814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801c818:	4604      	mov	r4, r0
{
 801c81a:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801c81c:	2800      	cmp	r0, #0
 801c81e:	f000 80f6 	beq.w	801ca0e <tcp_input+0x1fa>
  TCP_STATS_INC(tcp.recv);
 801c822:	4d7e      	ldr	r5, [pc, #504]	; (801ca1c <tcp_input+0x208>)
  if (p->len < TCP_HLEN) {
 801c824:	8962      	ldrh	r2, [r4, #10]
  TCP_STATS_INC(tcp.recv);
 801c826:	f8b5 3092 	ldrh.w	r3, [r5, #146]	; 0x92
  tcphdr = (struct tcp_hdr *)p->payload;
 801c82a:	6861      	ldr	r1, [r4, #4]
  if (p->len < TCP_HLEN) {
 801c82c:	2a13      	cmp	r2, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801c82e:	4f7c      	ldr	r7, [pc, #496]	; (801ca20 <tcp_input+0x20c>)
  TCP_STATS_INC(tcp.recv);
 801c830:	f103 0301 	add.w	r3, r3, #1
  tcphdr = (struct tcp_hdr *)p->payload;
 801c834:	6039      	str	r1, [r7, #0]
  TCP_STATS_INC(tcp.recv);
 801c836:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
  if (p->len < TCP_HLEN) {
 801c83a:	d80f      	bhi.n	801c85c <tcp_input+0x48>
      TCP_STATS_INC(tcp.lenerr);
 801c83c:	f8b5 309a 	ldrh.w	r3, [r5, #154]	; 0x9a
 801c840:	3301      	adds	r3, #1
 801c842:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  TCP_STATS_INC(tcp.drop);
 801c846:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
  pbuf_free(p);
 801c84a:	4620      	mov	r0, r4
  TCP_STATS_INC(tcp.drop);
 801c84c:	3301      	adds	r3, #1
 801c84e:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
}
 801c852:	b007      	add	sp, #28
 801c854:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801c858:	f7fd bbba 	b.w	8019fd0 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c85c:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 801ca50 <tcp_input+0x23c>
 801c860:	f8d8 1000 	ldr.w	r1, [r8]
 801c864:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801c868:	f005 fb5e 	bl	8021f28 <ip4_addr_isbroadcast_u32>
 801c86c:	b9b8      	cbnz	r0, 801c89e <tcp_input+0x8a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801c86e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801c872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c876:	2be0      	cmp	r3, #224	; 0xe0
 801c878:	d011      	beq.n	801c89e <tcp_input+0x8a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801c87a:	f108 0314 	add.w	r3, r8, #20
 801c87e:	2106      	movs	r1, #6
 801c880:	4620      	mov	r0, r4
 801c882:	9300      	str	r3, [sp, #0]
 801c884:	f108 0310 	add.w	r3, r8, #16
 801c888:	8922      	ldrh	r2, [r4, #8]
 801c88a:	f7fc f8b1 	bl	80189f0 <ip_chksum_pseudo>
    if (chksum != 0) {
 801c88e:	4606      	mov	r6, r0
 801c890:	b158      	cbz	r0, 801c8aa <tcp_input+0x96>
      TCP_STATS_INC(tcp.chkerr);
 801c892:	f8b5 3098 	ldrh.w	r3, [r5, #152]	; 0x98
 801c896:	3301      	adds	r3, #1
 801c898:	f8a5 3098 	strh.w	r3, [r5, #152]	; 0x98
      goto dropped;
 801c89c:	e7d3      	b.n	801c846 <tcp_input+0x32>
    TCP_STATS_INC(tcp.proterr);
 801c89e:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 801c8a2:	3301      	adds	r3, #1
 801c8a4:	f8a5 30a0 	strh.w	r3, [r5, #160]	; 0xa0
    goto dropped;
 801c8a8:	e7cd      	b.n	801c846 <tcp_input+0x32>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801c8aa:	683b      	ldr	r3, [r7, #0]
 801c8ac:	8998      	ldrh	r0, [r3, #12]
 801c8ae:	f7fb fb0b 	bl	8017ec8 <lwip_htons>
 801c8b2:	0a80      	lsrs	r0, r0, #10
 801c8b4:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801c8b8:	2913      	cmp	r1, #19
 801c8ba:	d9bf      	bls.n	801c83c <tcp_input+0x28>
 801c8bc:	8923      	ldrh	r3, [r4, #8]
 801c8be:	b28a      	uxth	r2, r1
 801c8c0:	428b      	cmp	r3, r1
 801c8c2:	d3bb      	bcc.n	801c83c <tcp_input+0x28>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801c8c4:	f1a2 0314 	sub.w	r3, r2, #20
 801c8c8:	4856      	ldr	r0, [pc, #344]	; (801ca24 <tcp_input+0x210>)
  tcphdr_opt2 = NULL;
 801c8ca:	f8df 9188 	ldr.w	r9, [pc, #392]	; 801ca54 <tcp_input+0x240>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801c8ce:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801c8d0:	f8c9 6000 	str.w	r6, [r9]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801c8d4:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801c8d6:	8960      	ldrh	r0, [r4, #10]
 801c8d8:	4290      	cmp	r0, r2
 801c8da:	f080 81af 	bcs.w	801cc3c <tcp_input+0x428>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801c8de:	6823      	ldr	r3, [r4, #0]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	f000 8392 	beq.w	801d00a <tcp_input+0x7f6>
    pbuf_remove_header(p, TCP_HLEN);
 801c8e6:	2114      	movs	r1, #20
 801c8e8:	4620      	mov	r0, r4
 801c8ea:	f7fd fb01 	bl	8019ef0 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801c8ee:	4b4d      	ldr	r3, [pc, #308]	; (801ca24 <tcp_input+0x210>)
    tcphdr_opt1len = p->len;
 801c8f0:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801c8f4:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801c8f6:	881e      	ldrh	r6, [r3, #0]
    tcphdr_opt1len = p->len;
 801c8f8:	4b4b      	ldr	r3, [pc, #300]	; (801ca28 <tcp_input+0x214>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801c8fa:	4651      	mov	r1, sl
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801c8fc:	eba6 0b0a 	sub.w	fp, r6, sl
    tcphdr_opt1len = p->len;
 801c900:	f8a3 a000 	strh.w	sl, [r3]
    pbuf_remove_header(p, tcphdr_opt1len);
 801c904:	f7fd faf4 	bl	8019ef0 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801c908:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801c90a:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801c90e:	8943      	ldrh	r3, [r0, #10]
 801c910:	455b      	cmp	r3, fp
 801c912:	d393      	bcc.n	801c83c <tcp_input+0x28>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801c914:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801c916:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801c918:	f8c9 3000 	str.w	r3, [r9]
    pbuf_remove_header(p->next, opt2len);
 801c91c:	f7fd fae8 	bl	8019ef0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801c920:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801c922:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801c924:	4453      	add	r3, sl
 801c926:	1b9b      	subs	r3, r3, r6
 801c928:	b29b      	uxth	r3, r3
 801c92a:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801c92c:	2a00      	cmp	r2, #0
 801c92e:	f040 8373 	bne.w	801d018 <tcp_input+0x804>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801c932:	6822      	ldr	r2, [r4, #0]
 801c934:	8912      	ldrh	r2, [r2, #8]
 801c936:	429a      	cmp	r2, r3
 801c938:	d005      	beq.n	801c946 <tcp_input+0x132>
 801c93a:	4b3c      	ldr	r3, [pc, #240]	; (801ca2c <tcp_input+0x218>)
 801c93c:	22e0      	movs	r2, #224	; 0xe0
 801c93e:	493c      	ldr	r1, [pc, #240]	; (801ca30 <tcp_input+0x21c>)
 801c940:	483c      	ldr	r0, [pc, #240]	; (801ca34 <tcp_input+0x220>)
 801c942:	f007 fdbb 	bl	80244bc <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801c946:	683e      	ldr	r6, [r7, #0]
 801c948:	8830      	ldrh	r0, [r6, #0]
 801c94a:	f7fb fabd 	bl	8017ec8 <lwip_htons>
 801c94e:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801c950:	683e      	ldr	r6, [r7, #0]
 801c952:	8870      	ldrh	r0, [r6, #2]
 801c954:	f7fb fab8 	bl	8017ec8 <lwip_htons>
 801c958:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801c95a:	683e      	ldr	r6, [r7, #0]
 801c95c:	6870      	ldr	r0, [r6, #4]
 801c95e:	f7fb fab7 	bl	8017ed0 <lwip_htonl>
 801c962:	4b35      	ldr	r3, [pc, #212]	; (801ca38 <tcp_input+0x224>)
 801c964:	6070      	str	r0, [r6, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801c966:	683e      	ldr	r6, [r7, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801c968:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801c96a:	68b0      	ldr	r0, [r6, #8]
 801c96c:	f7fb fab0 	bl	8017ed0 <lwip_htonl>
 801c970:	4b32      	ldr	r3, [pc, #200]	; (801ca3c <tcp_input+0x228>)
 801c972:	60b0      	str	r0, [r6, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801c974:	683e      	ldr	r6, [r7, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801c976:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801c978:	89f0      	ldrh	r0, [r6, #14]
 801c97a:	f7fb faa5 	bl	8017ec8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801c97e:	683b      	ldr	r3, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801c980:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 801c982:	8998      	ldrh	r0, [r3, #12]
 801c984:	f7fb faa0 	bl	8017ec8 <lwip_htons>
 801c988:	492d      	ldr	r1, [pc, #180]	; (801ca40 <tcp_input+0x22c>)
 801c98a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801c98e:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801c990:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801c992:	0782      	lsls	r2, r0, #30
 801c994:	f000 814e 	beq.w	801cc34 <tcp_input+0x420>
    tcplen++;
 801c998:	1c5a      	adds	r2, r3, #1
 801c99a:	492a      	ldr	r1, [pc, #168]	; (801ca44 <tcp_input+0x230>)
 801c99c:	b292      	uxth	r2, r2
 801c99e:	9104      	str	r1, [sp, #16]
    if (tcplen < p->tot_len) {
 801c9a0:	4293      	cmp	r3, r2
    tcplen++;
 801c9a2:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801c9a4:	f63f af4a 	bhi.w	801c83c <tcp_input+0x28>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c9a8:	4b27      	ldr	r3, [pc, #156]	; (801ca48 <tcp_input+0x234>)
 801c9aa:	681e      	ldr	r6, [r3, #0]
 801c9ac:	2e00      	cmp	r6, #0
 801c9ae:	f000 80f4 	beq.w	801cb9a <tcp_input+0x386>
  prev = NULL;
 801c9b2:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801c9b6:	4b1d      	ldr	r3, [pc, #116]	; (801ca2c <tcp_input+0x218>)
 801c9b8:	f8df b09c 	ldr.w	fp, [pc, #156]	; 801ca58 <tcp_input+0x244>
 801c9bc:	f8df a074 	ldr.w	sl, [pc, #116]	; 801ca34 <tcp_input+0x220>
 801c9c0:	e01a      	b.n	801c9f8 <tcp_input+0x1e4>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801c9c2:	2a0a      	cmp	r2, #10
 801c9c4:	f000 80e1 	beq.w	801cb8a <tcp_input+0x376>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801c9c8:	2a01      	cmp	r2, #1
 801c9ca:	f000 80d7 	beq.w	801cb7c <tcp_input+0x368>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c9ce:	7a31      	ldrb	r1, [r6, #8]
 801c9d0:	b139      	cbz	r1, 801c9e2 <tcp_input+0x1ce>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c9d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c9d6:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801c9da:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c9dc:	b2d2      	uxtb	r2, r2
 801c9de:	4291      	cmp	r1, r2
 801c9e0:	d104      	bne.n	801c9ec <tcp_input+0x1d8>
    if (pcb->remote_port == tcphdr->src &&
 801c9e2:	683a      	ldr	r2, [r7, #0]
 801c9e4:	8b30      	ldrh	r0, [r6, #24]
 801c9e6:	8811      	ldrh	r1, [r2, #0]
 801c9e8:	4288      	cmp	r0, r1
 801c9ea:	d037      	beq.n	801ca5c <tcp_input+0x248>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c9ec:	68f2      	ldr	r2, [r6, #12]
 801c9ee:	46b1      	mov	r9, r6
 801c9f0:	2a00      	cmp	r2, #0
 801c9f2:	f000 80d2 	beq.w	801cb9a <tcp_input+0x386>
 801c9f6:	4616      	mov	r6, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801c9f8:	7d32      	ldrb	r2, [r6, #20]
 801c9fa:	2a00      	cmp	r2, #0
 801c9fc:	d1e1      	bne.n	801c9c2 <tcp_input+0x1ae>
 801c9fe:	22fb      	movs	r2, #251	; 0xfb
 801ca00:	4659      	mov	r1, fp
 801ca02:	4650      	mov	r0, sl
 801ca04:	f007 fd5a 	bl	80244bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ca08:	7d32      	ldrb	r2, [r6, #20]
 801ca0a:	4b08      	ldr	r3, [pc, #32]	; (801ca2c <tcp_input+0x218>)
 801ca0c:	e7d9      	b.n	801c9c2 <tcp_input+0x1ae>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ca0e:	4b07      	ldr	r3, [pc, #28]	; (801ca2c <tcp_input+0x218>)
 801ca10:	2283      	movs	r2, #131	; 0x83
 801ca12:	490e      	ldr	r1, [pc, #56]	; (801ca4c <tcp_input+0x238>)
 801ca14:	4807      	ldr	r0, [pc, #28]	; (801ca34 <tcp_input+0x220>)
 801ca16:	f007 fd51 	bl	80244bc <iprintf>
 801ca1a:	e702      	b.n	801c822 <tcp_input+0xe>
 801ca1c:	2002db54 	.word	0x2002db54
 801ca20:	2002dca8 	.word	0x2002dca8
 801ca24:	2002dcb4 	.word	0x2002dcb4
 801ca28:	2002dcac 	.word	0x2002dcac
 801ca2c:	080e0ad4 	.word	0x080e0ad4
 801ca30:	080e0cf8 	.word	0x080e0cf8
 801ca34:	0802ac68 	.word	0x0802ac68
 801ca38:	2002dc9c 	.word	0x2002dc9c
 801ca3c:	2002dc78 	.word	0x2002dc78
 801ca40:	2002dc7c 	.word	0x2002dc7c
 801ca44:	2002dcb6 	.word	0x2002dcb6
 801ca48:	2002dc5c 	.word	0x2002dc5c
 801ca4c:	080e0cc4 	.word	0x080e0cc4
 801ca50:	2001eb14 	.word	0x2001eb14
 801ca54:	2002dcb0 	.word	0x2002dcb0
 801ca58:	080e0d18 	.word	0x080e0d18
    if (pcb->remote_port == tcphdr->src &&
 801ca5c:	8852      	ldrh	r2, [r2, #2]
 801ca5e:	8af1      	ldrh	r1, [r6, #22]
 801ca60:	4291      	cmp	r1, r2
 801ca62:	d1c3      	bne.n	801c9ec <tcp_input+0x1d8>
        pcb->local_port == tcphdr->dest &&
 801ca64:	6871      	ldr	r1, [r6, #4]
 801ca66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ca6a:	4291      	cmp	r1, r2
 801ca6c:	d1be      	bne.n	801c9ec <tcp_input+0x1d8>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ca6e:	6831      	ldr	r1, [r6, #0]
 801ca70:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801ca74:	4291      	cmp	r1, r2
 801ca76:	d1b9      	bne.n	801c9ec <tcp_input+0x1d8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ca78:	68f3      	ldr	r3, [r6, #12]
 801ca7a:	42b3      	cmp	r3, r6
 801ca7c:	d075      	beq.n	801cb6a <tcp_input+0x356>
      if (prev != NULL) {
 801ca7e:	f1b9 0f00 	cmp.w	r9, #0
 801ca82:	f000 844a 	beq.w	801d31a <tcp_input+0xb06>
        pcb->next = tcp_active_pcbs;
 801ca86:	4a78      	ldr	r2, [pc, #480]	; (801cc68 <tcp_input+0x454>)
        prev->next = pcb->next;
 801ca88:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 801ca8c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801ca8e:	6016      	str	r6, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801ca90:	60f3      	str	r3, [r6, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ca92:	42b3      	cmp	r3, r6
 801ca94:	f000 8448 	beq.w	801d328 <tcp_input+0xb14>
    inseg.next = NULL;
 801ca98:	2300      	movs	r3, #0
 801ca9a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 801cc98 <tcp_input+0x484>
    recv_data = NULL;
 801ca9e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 801cc9c <tcp_input+0x488>
    recv_flags = 0;
 801caa2:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 801cca0 <tcp_input+0x48c>
    recv_acked = 0;
 801caa6:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801cca4 <tcp_input+0x490>
    inseg.len = p->tot_len;
 801caaa:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801caac:	f8c8 3000 	str.w	r3, [r8]
    recv_data = NULL;
 801cab0:	f8c9 3000 	str.w	r3, [r9]
    recv_flags = 0;
 801cab4:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801cab8:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801cabc:	4b6b      	ldr	r3, [pc, #428]	; (801cc6c <tcp_input+0x458>)
    inseg.len = p->tot_len;
 801cabe:	f8a8 2008 	strh.w	r2, [r8, #8]
    if (flags & TCP_PSH) {
 801cac2:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801cac4:	683a      	ldr	r2, [r7, #0]
    inseg.p = p;
 801cac6:	f8c8 4004 	str.w	r4, [r8, #4]
    inseg.tcphdr = tcphdr;
 801caca:	f8c8 200c 	str.w	r2, [r8, #12]
    if (flags & TCP_PSH) {
 801cace:	071a      	lsls	r2, r3, #28
 801cad0:	d503      	bpl.n	801cada <tcp_input+0x2c6>
      p->flags |= PBUF_FLAG_PUSH;
 801cad2:	7b62      	ldrb	r2, [r4, #13]
 801cad4:	f042 0201 	orr.w	r2, r2, #1
 801cad8:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801cada:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 801cadc:	b172      	cbz	r2, 801cafc <tcp_input+0x2e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801cade:	4630      	mov	r0, r6
 801cae0:	f7fe ff4c 	bl	801b97c <tcp_process_refused_data>
 801cae4:	300d      	adds	r0, #13
 801cae6:	f000 829f 	beq.w	801d028 <tcp_input+0x814>
 801caea:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801caec:	b123      	cbz	r3, 801caf8 <tcp_input+0x2e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801caee:	9b04      	ldr	r3, [sp, #16]
 801caf0:	881b      	ldrh	r3, [r3, #0]
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	f040 8298 	bne.w	801d028 <tcp_input+0x814>
  if (flags & TCP_RST) {
 801caf8:	4b5c      	ldr	r3, [pc, #368]	; (801cc6c <tcp_input+0x458>)
 801cafa:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801cafc:	4c5c      	ldr	r4, [pc, #368]	; (801cc70 <tcp_input+0x45c>)
  if (flags & TCP_RST) {
 801cafe:	0758      	lsls	r0, r3, #29
    tcp_input_pcb = pcb;
 801cb00:	6026      	str	r6, [r4, #0]
  if (flags & TCP_RST) {
 801cb02:	f140 8169 	bpl.w	801cdd8 <tcp_input+0x5c4>
    if (pcb->state == SYN_SENT) {
 801cb06:	7d31      	ldrb	r1, [r6, #20]
 801cb08:	2902      	cmp	r1, #2
 801cb0a:	f000 836a 	beq.w	801d1e2 <tcp_input+0x9ce>
      if (seqno == pcb->rcv_nxt) {
 801cb0e:	4b59      	ldr	r3, [pc, #356]	; (801cc74 <tcp_input+0x460>)
 801cb10:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	429a      	cmp	r2, r3
 801cb16:	f000 8487 	beq.w	801d428 <tcp_input+0xc14>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cb1a:	1a9b      	subs	r3, r3, r2
 801cb1c:	d404      	bmi.n	801cb28 <tcp_input+0x314>
 801cb1e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 801cb20:	1a9b      	subs	r3, r3, r2
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	f340 8358 	ble.w	801d1d8 <tcp_input+0x9c4>
      if (recv_flags & TF_RESET) {
 801cb28:	f89a 3000 	ldrb.w	r3, [sl]
 801cb2c:	0718      	lsls	r0, r3, #28
 801cb2e:	f140 8286 	bpl.w	801d03e <tcp_input+0x82a>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801cb32:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 801cb36:	b11b      	cbz	r3, 801cb40 <tcp_input+0x32c>
 801cb38:	f06f 010d 	mvn.w	r1, #13
 801cb3c:	6930      	ldr	r0, [r6, #16]
 801cb3e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801cb40:	4849      	ldr	r0, [pc, #292]	; (801cc68 <tcp_input+0x454>)
 801cb42:	4631      	mov	r1, r6
 801cb44:	f7fe fb7c 	bl	801b240 <tcp_pcb_remove>
        tcp_free(pcb);
 801cb48:	4630      	mov	r0, r6
 801cb4a:	f7fd fd75 	bl	801a638 <tcp_free>
    tcp_input_pcb = NULL;
 801cb4e:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801cb50:	f8d8 0004 	ldr.w	r0, [r8, #4]
    tcp_input_pcb = NULL;
 801cb54:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801cb56:	f8c9 5000 	str.w	r5, [r9]
    if (inseg.p != NULL) {
 801cb5a:	b118      	cbz	r0, 801cb64 <tcp_input+0x350>
      pbuf_free(inseg.p);
 801cb5c:	f7fd fa38 	bl	8019fd0 <pbuf_free>
      inseg.p = NULL;
 801cb60:	f8c8 5004 	str.w	r5, [r8, #4]
}
 801cb64:	b007      	add	sp, #28
 801cb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801cb6a:	4b43      	ldr	r3, [pc, #268]	; (801cc78 <tcp_input+0x464>)
 801cb6c:	f240 120d 	movw	r2, #269	; 0x10d
 801cb70:	4942      	ldr	r1, [pc, #264]	; (801cc7c <tcp_input+0x468>)
 801cb72:	4843      	ldr	r0, [pc, #268]	; (801cc80 <tcp_input+0x46c>)
 801cb74:	f007 fca2 	bl	80244bc <iprintf>
 801cb78:	68f3      	ldr	r3, [r6, #12]
 801cb7a:	e780      	b.n	801ca7e <tcp_input+0x26a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801cb7c:	22fd      	movs	r2, #253	; 0xfd
 801cb7e:	4941      	ldr	r1, [pc, #260]	; (801cc84 <tcp_input+0x470>)
 801cb80:	4650      	mov	r0, sl
 801cb82:	f007 fc9b 	bl	80244bc <iprintf>
 801cb86:	4b3c      	ldr	r3, [pc, #240]	; (801cc78 <tcp_input+0x464>)
 801cb88:	e721      	b.n	801c9ce <tcp_input+0x1ba>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801cb8a:	22fc      	movs	r2, #252	; 0xfc
 801cb8c:	493e      	ldr	r1, [pc, #248]	; (801cc88 <tcp_input+0x474>)
 801cb8e:	4650      	mov	r0, sl
 801cb90:	f007 fc94 	bl	80244bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801cb94:	7d32      	ldrb	r2, [r6, #20]
 801cb96:	4b38      	ldr	r3, [pc, #224]	; (801cc78 <tcp_input+0x464>)
 801cb98:	e716      	b.n	801c9c8 <tcp_input+0x1b4>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801cb9a:	4b3c      	ldr	r3, [pc, #240]	; (801cc8c <tcp_input+0x478>)
 801cb9c:	681e      	ldr	r6, [r3, #0]
 801cb9e:	2e00      	cmp	r6, #0
 801cba0:	d052      	beq.n	801cc48 <tcp_input+0x434>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801cba2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801cc78 <tcp_input+0x464>
 801cba6:	f8df a100 	ldr.w	sl, [pc, #256]	; 801cca8 <tcp_input+0x494>
 801cbaa:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801cc80 <tcp_input+0x46c>
 801cbae:	e002      	b.n	801cbb6 <tcp_input+0x3a2>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801cbb0:	68f6      	ldr	r6, [r6, #12]
 801cbb2:	2e00      	cmp	r6, #0
 801cbb4:	d048      	beq.n	801cc48 <tcp_input+0x434>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801cbb6:	7d33      	ldrb	r3, [r6, #20]
 801cbb8:	2b0a      	cmp	r3, #10
 801cbba:	464b      	mov	r3, r9
 801cbbc:	d005      	beq.n	801cbca <tcp_input+0x3b6>
 801cbbe:	f240 121f 	movw	r2, #287	; 0x11f
 801cbc2:	4651      	mov	r1, sl
 801cbc4:	4658      	mov	r0, fp
 801cbc6:	f007 fc79 	bl	80244bc <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801cbca:	7a32      	ldrb	r2, [r6, #8]
 801cbcc:	b13a      	cbz	r2, 801cbde <tcp_input+0x3ca>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801cbce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cbd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801cbd6:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801cbd8:	b2db      	uxtb	r3, r3
 801cbda:	429a      	cmp	r2, r3
 801cbdc:	d1e8      	bne.n	801cbb0 <tcp_input+0x39c>
      if (pcb->remote_port == tcphdr->src &&
 801cbde:	683a      	ldr	r2, [r7, #0]
 801cbe0:	8b33      	ldrh	r3, [r6, #24]
 801cbe2:	8811      	ldrh	r1, [r2, #0]
 801cbe4:	428b      	cmp	r3, r1
 801cbe6:	d1e3      	bne.n	801cbb0 <tcp_input+0x39c>
          pcb->local_port == tcphdr->dest &&
 801cbe8:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801cbea:	8af0      	ldrh	r0, [r6, #22]
 801cbec:	4290      	cmp	r0, r2
 801cbee:	d1df      	bne.n	801cbb0 <tcp_input+0x39c>
          pcb->local_port == tcphdr->dest &&
 801cbf0:	6871      	ldr	r1, [r6, #4]
 801cbf2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801cbf6:	4291      	cmp	r1, r2
 801cbf8:	d1da      	bne.n	801cbb0 <tcp_input+0x39c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801cbfa:	6831      	ldr	r1, [r6, #0]
 801cbfc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801cc00:	4291      	cmp	r1, r2
 801cc02:	d1d5      	bne.n	801cbb0 <tcp_input+0x39c>
  if (flags & TCP_RST) {
 801cc04:	4a19      	ldr	r2, [pc, #100]	; (801cc6c <tcp_input+0x458>)
 801cc06:	7812      	ldrb	r2, [r2, #0]
 801cc08:	0757      	lsls	r7, r2, #29
 801cc0a:	d411      	bmi.n	801cc30 <tcp_input+0x41c>
  if (flags & TCP_SYN) {
 801cc0c:	0795      	lsls	r5, r2, #30
 801cc0e:	f140 83d0 	bpl.w	801d3b2 <tcp_input+0xb9e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801cc12:	4a18      	ldr	r2, [pc, #96]	; (801cc74 <tcp_input+0x460>)
 801cc14:	6a71      	ldr	r1, [r6, #36]	; 0x24
 801cc16:	6812      	ldr	r2, [r2, #0]
 801cc18:	1a51      	subs	r1, r2, r1
 801cc1a:	d404      	bmi.n	801cc26 <tcp_input+0x412>
 801cc1c:	8d35      	ldrh	r5, [r6, #40]	; 0x28
 801cc1e:	1b49      	subs	r1, r1, r5
 801cc20:	2900      	cmp	r1, #0
 801cc22:	f340 83fa 	ble.w	801d41a <tcp_input+0xc06>
  if ((tcplen > 0)) {
 801cc26:	9b04      	ldr	r3, [sp, #16]
 801cc28:	881b      	ldrh	r3, [r3, #0]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	f040 8407 	bne.w	801d43e <tcp_input+0xc2a>
        pbuf_free(p);
 801cc30:	4620      	mov	r0, r4
 801cc32:	e60e      	b.n	801c852 <tcp_input+0x3e>
  tcplen = p->tot_len;
 801cc34:	4a16      	ldr	r2, [pc, #88]	; (801cc90 <tcp_input+0x47c>)
 801cc36:	9204      	str	r2, [sp, #16]
 801cc38:	8013      	strh	r3, [r2, #0]
 801cc3a:	e6b5      	b.n	801c9a8 <tcp_input+0x194>
    tcphdr_opt1len = tcphdr_optlen;
 801cc3c:	4a15      	ldr	r2, [pc, #84]	; (801cc94 <tcp_input+0x480>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801cc3e:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801cc40:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801cc42:	f7fd f955 	bl	8019ef0 <pbuf_remove_header>
 801cc46:	e67e      	b.n	801c946 <tcp_input+0x132>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801cc48:	f8df a060 	ldr.w	sl, [pc, #96]	; 801ccac <tcp_input+0x498>
 801cc4c:	f8da 9000 	ldr.w	r9, [sl]
 801cc50:	f1b9 0f00 	cmp.w	r9, #0
 801cc54:	f000 8243 	beq.w	801d0de <tcp_input+0x8ca>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801cc58:	f8d8 c004 	ldr.w	ip, [r8, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801cc5c:	464e      	mov	r6, r9
      if (lpcb->local_port == tcphdr->dest) {
 801cc5e:	6838      	ldr	r0, [r7, #0]
    prev = NULL;
 801cc60:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801cc62:	f8d8 e014 	ldr.w	lr, [r8, #20]
 801cc66:	e029      	b.n	801ccbc <tcp_input+0x4a8>
 801cc68:	2002dc5c 	.word	0x2002dc5c
 801cc6c:	2002dc7c 	.word	0x2002dc7c
 801cc70:	2002dca0 	.word	0x2002dca0
 801cc74:	2002dc9c 	.word	0x2002dc9c
 801cc78:	080e0ad4 	.word	0x080e0ad4
 801cc7c:	080e0d94 	.word	0x080e0d94
 801cc80:	0802ac68 	.word	0x0802ac68
 801cc84:	080e0d6c 	.word	0x080e0d6c
 801cc88:	080e0d40 	.word	0x080e0d40
 801cc8c:	2002dc74 	.word	0x2002dc74
 801cc90:	2002dcb6 	.word	0x2002dcb6
 801cc94:	2002dcac 	.word	0x2002dcac
 801cc98:	2002dc80 	.word	0x2002dc80
 801cc9c:	2002dc94 	.word	0x2002dc94
 801cca0:	2002dc98 	.word	0x2002dc98
 801cca4:	2002dc90 	.word	0x2002dc90
 801cca8:	080e0dec 	.word	0x080e0dec
 801ccac:	2002dc68 	.word	0x2002dc68
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ccb0:	68f3      	ldr	r3, [r6, #12]
 801ccb2:	4631      	mov	r1, r6
 801ccb4:	461e      	mov	r6, r3
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	f000 8212 	beq.w	801d0e0 <tcp_input+0x8cc>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ccbc:	7a32      	ldrb	r2, [r6, #8]
 801ccbe:	b12a      	cbz	r2, 801cccc <tcp_input+0x4b8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ccc0:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801ccc4:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ccc6:	b2db      	uxtb	r3, r3
 801ccc8:	429a      	cmp	r2, r3
 801ccca:	d1f1      	bne.n	801ccb0 <tcp_input+0x49c>
      if (lpcb->local_port == tcphdr->dest) {
 801cccc:	8af2      	ldrh	r2, [r6, #22]
 801ccce:	8843      	ldrh	r3, [r0, #2]
 801ccd0:	429a      	cmp	r2, r3
 801ccd2:	d1ed      	bne.n	801ccb0 <tcp_input+0x49c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801ccd4:	6832      	ldr	r2, [r6, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801ccd6:	b10a      	cbz	r2, 801ccdc <tcp_input+0x4c8>
 801ccd8:	4572      	cmp	r2, lr
 801ccda:	d1e9      	bne.n	801ccb0 <tcp_input+0x49c>
      if (prev != NULL) {
 801ccdc:	2900      	cmp	r1, #0
 801ccde:	f000 8295 	beq.w	801d20c <tcp_input+0x9f8>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801cce2:	68f2      	ldr	r2, [r6, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801cce4:	f8ca 6000 	str.w	r6, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801cce8:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801ccea:	f8c6 900c 	str.w	r9, [r6, #12]
  if (flags & TCP_RST) {
 801ccee:	4a9c      	ldr	r2, [pc, #624]	; (801cf60 <tcp_input+0x74c>)
 801ccf0:	7812      	ldrb	r2, [r2, #0]
 801ccf2:	0751      	lsls	r1, r2, #29
 801ccf4:	d49c      	bmi.n	801cc30 <tcp_input+0x41c>
  if (flags & TCP_ACK) {
 801ccf6:	f012 0910 	ands.w	r9, r2, #16
 801ccfa:	f040 828d 	bne.w	801d218 <tcp_input+0xa04>
  } else if (flags & TCP_SYN) {
 801ccfe:	0793      	lsls	r3, r2, #30
 801cd00:	d596      	bpl.n	801cc30 <tcp_input+0x41c>
    npcb = tcp_alloc(pcb->prio);
 801cd02:	7d70      	ldrb	r0, [r6, #21]
 801cd04:	f7fe fc44 	bl	801b590 <tcp_alloc>
    if (npcb == NULL) {
 801cd08:	4682      	mov	sl, r0
 801cd0a:	2800      	cmp	r0, #0
 801cd0c:	f000 82ec 	beq.w	801d2e8 <tcp_input+0xad4>
    npcb->rcv_nxt = seqno + 1;
 801cd10:	4d94      	ldr	r5, [pc, #592]	; (801cf64 <tcp_input+0x750>)
    npcb->remote_port = tcphdr->src;
 801cd12:	6839      	ldr	r1, [r7, #0]
    npcb->rcv_nxt = seqno + 1;
 801cd14:	682b      	ldr	r3, [r5, #0]
    npcb->remote_port = tcphdr->src;
 801cd16:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801cd18:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801cd1a:	7849      	ldrb	r1, [r1, #1]
 801cd1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801cd20:	8af1      	ldrh	r1, [r6, #22]
    npcb->rcv_nxt = seqno + 1;
 801cd22:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801cd24:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801cd26:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 801cd2a:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801cd2c:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801cd2e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    npcb->local_port = pcb->local_port;
 801cd32:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801cd34:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801cd36:	2303      	movs	r3, #3
 801cd38:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801cd3a:	f7fe feb5 	bl	801baa8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801cd3e:	682b      	ldr	r3, [r5, #0]
    npcb->snd_nxt = iss;
 801cd40:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801cd44:	3b01      	subs	r3, #1
    npcb->lastack = iss;
 801cd46:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_lbb = iss;
 801cd4a:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801cd4e:	4a86      	ldr	r2, [pc, #536]	; (801cf68 <tcp_input+0x754>)
    npcb->snd_wl2 = iss;
 801cd50:	e9ca 3015 	strd	r3, r0, [sl, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801cd54:	6933      	ldr	r3, [r6, #16]
    npcb->listener = pcb;
 801cd56:	f8ca 607c 	str.w	r6, [sl, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801cd5a:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801cd5e:	7a73      	ldrb	r3, [r6, #9]
 801cd60:	f003 030c 	and.w	r3, r3, #12
 801cd64:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 801cd68:	7a33      	ldrb	r3, [r6, #8]
 801cd6a:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 801cd6e:	6813      	ldr	r3, [r2, #0]
 801cd70:	f8c2 a000 	str.w	sl, [r2]
 801cd74:	f8ca 300c 	str.w	r3, [sl, #12]
 801cd78:	f001 fec6 	bl	801eb08 <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801cd7c:	4b7b      	ldr	r3, [pc, #492]	; (801cf6c <tcp_input+0x758>)
    TCP_REG_ACTIVE(npcb);
 801cd7e:	4a7c      	ldr	r2, [pc, #496]	; (801cf70 <tcp_input+0x75c>)
 801cd80:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801cd82:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801cd84:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801cd86:	b12b      	cbz	r3, 801cd94 <tcp_input+0x580>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801cd88:	4b7a      	ldr	r3, [pc, #488]	; (801cf74 <tcp_input+0x760>)
 801cd8a:	4650      	mov	r0, sl
 801cd8c:	f8a3 9000 	strh.w	r9, [r3]
 801cd90:	f7ff fca0 	bl	801c6d4 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801cd94:	683b      	ldr	r3, [r7, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801cd96:	f10a 0204 	add.w	r2, sl, #4
 801cd9a:	f8ba 5032 	ldrh.w	r5, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801cd9e:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801cda0:	4610      	mov	r0, r2
 801cda2:	9204      	str	r2, [sp, #16]
    npcb->snd_wnd = tcphdr->wnd;
 801cda4:	f8aa 3060 	strh.w	r3, [sl, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801cda8:	f8aa 3062 	strh.w	r3, [sl, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801cdac:	f004 fe8a 	bl	8021ac4 <ip4_route>
 801cdb0:	9a04      	ldr	r2, [sp, #16]
 801cdb2:	4601      	mov	r1, r0
 801cdb4:	4628      	mov	r0, r5
 801cdb6:	f7fe fe93 	bl	801bae0 <tcp_eff_send_mss_netif>
 801cdba:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801cdbc:	2112      	movs	r1, #18
 801cdbe:	4650      	mov	r0, sl
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801cdc0:	f8aa 3032 	strh.w	r3, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801cdc4:	f001 f946 	bl	801e054 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801cdc8:	2800      	cmp	r0, #0
 801cdca:	f040 82be 	bne.w	801d34a <tcp_input+0xb36>
    tcp_output(npcb);
 801cdce:	4650      	mov	r0, sl
 801cdd0:	f001 fb64 	bl	801e49c <tcp_output>
        pbuf_free(p);
 801cdd4:	4620      	mov	r0, r4
 801cdd6:	e53c      	b.n	801c852 <tcp_input+0x3e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801cdd8:	f013 0502 	ands.w	r5, r3, #2
 801cddc:	d004      	beq.n	801cde8 <tcp_input+0x5d4>
 801cdde:	7d32      	ldrb	r2, [r6, #20]
 801cde0:	3a02      	subs	r2, #2
 801cde2:	2a01      	cmp	r2, #1
 801cde4:	f200 81f8 	bhi.w	801d1d8 <tcp_input+0x9c4>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801cde8:	8b72      	ldrh	r2, [r6, #26]
 801cdea:	06d1      	lsls	r1, r2, #27
 801cdec:	d402      	bmi.n	801cdf4 <tcp_input+0x5e0>
    pcb->tmr = tcp_ticks;
 801cdee:	4a62      	ldr	r2, [pc, #392]	; (801cf78 <tcp_input+0x764>)
 801cdf0:	6812      	ldr	r2, [r2, #0]
 801cdf2:	6232      	str	r2, [r6, #32]
  if (tcphdr_optlen != 0) {
 801cdf4:	4a5d      	ldr	r2, [pc, #372]	; (801cf6c <tcp_input+0x758>)
 801cdf6:	8811      	ldrh	r1, [r2, #0]
  pcb->persist_probe = 0;
 801cdf8:	2200      	movs	r2, #0
 801cdfa:	f8a6 209a 	strh.w	r2, [r6, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801cdfe:	b131      	cbz	r1, 801ce0e <tcp_input+0x5fa>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ce00:	495c      	ldr	r1, [pc, #368]	; (801cf74 <tcp_input+0x760>)
 801ce02:	4630      	mov	r0, r6
 801ce04:	9305      	str	r3, [sp, #20]
 801ce06:	800a      	strh	r2, [r1, #0]
 801ce08:	f7ff fc64 	bl	801c6d4 <tcp_parseopt.part.0>
 801ce0c:	9b05      	ldr	r3, [sp, #20]
  switch (pcb->state) {
 801ce0e:	7d32      	ldrb	r2, [r6, #20]
 801ce10:	3a02      	subs	r2, #2
 801ce12:	2a07      	cmp	r2, #7
 801ce14:	f63f ae88 	bhi.w	801cb28 <tcp_input+0x314>
 801ce18:	e8df f002 	tbb	[pc, r2]
 801ce1c:	890413b4 	.word	0x890413b4
 801ce20:	324b046e 	.word	0x324b046e
      tcp_receive(pcb);
 801ce24:	4630      	mov	r0, r6
 801ce26:	f7fe ffad 	bl	801bd84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801ce2a:	f89a 3000 	ldrb.w	r3, [sl]
 801ce2e:	0698      	lsls	r0, r3, #26
 801ce30:	f57f ae7a 	bpl.w	801cb28 <tcp_input+0x314>
        tcp_ack_now(pcb);
 801ce34:	8b73      	ldrh	r3, [r6, #26]
 801ce36:	f043 0302 	orr.w	r3, r3, #2
 801ce3a:	8373      	strh	r3, [r6, #26]
        pcb->state = CLOSE_WAIT;
 801ce3c:	2307      	movs	r3, #7
 801ce3e:	7533      	strb	r3, [r6, #20]
    if (err != ERR_ABRT) {
 801ce40:	e672      	b.n	801cb28 <tcp_input+0x314>
      if (flags & TCP_ACK) {
 801ce42:	06db      	lsls	r3, r3, #27
 801ce44:	f140 8242 	bpl.w	801d2cc <tcp_input+0xab8>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ce48:	4b4c      	ldr	r3, [pc, #304]	; (801cf7c <tcp_input+0x768>)
 801ce4a:	6819      	ldr	r1, [r3, #0]
 801ce4c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801ce4e:	43db      	mvns	r3, r3
 801ce50:	42cb      	cmn	r3, r1
 801ce52:	d404      	bmi.n	801ce5e <tcp_input+0x64a>
 801ce54:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801ce56:	1acb      	subs	r3, r1, r3
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	f340 8280 	ble.w	801d35e <tcp_input+0xb4a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce5e:	9a04      	ldr	r2, [sp, #16]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ce60:	683b      	ldr	r3, [r7, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce62:	8810      	ldrh	r0, [r2, #0]
 801ce64:	4a3f      	ldr	r2, [pc, #252]	; (801cf64 <tcp_input+0x750>)
 801ce66:	6812      	ldr	r2, [r2, #0]
 801ce68:	4402      	add	r2, r0
 801ce6a:	8818      	ldrh	r0, [r3, #0]
 801ce6c:	9002      	str	r0, [sp, #8]
 801ce6e:	4844      	ldr	r0, [pc, #272]	; (801cf80 <tcp_input+0x76c>)
 801ce70:	885b      	ldrh	r3, [r3, #2]
 801ce72:	e9cd 0300 	strd	r0, r3, [sp]
 801ce76:	1d03      	adds	r3, r0, #4
 801ce78:	4630      	mov	r0, r6
 801ce7a:	f001 fa95 	bl	801e3a8 <tcp_rst>
    if (err != ERR_ABRT) {
 801ce7e:	e653      	b.n	801cb28 <tcp_input+0x314>
      tcp_receive(pcb);
 801ce80:	4630      	mov	r0, r6
 801ce82:	f7fe ff7f 	bl	801bd84 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ce86:	4b36      	ldr	r3, [pc, #216]	; (801cf60 <tcp_input+0x74c>)
 801ce88:	781b      	ldrb	r3, [r3, #0]
 801ce8a:	06dd      	lsls	r5, r3, #27
 801ce8c:	f57f ae4c 	bpl.w	801cb28 <tcp_input+0x314>
 801ce90:	4b3a      	ldr	r3, [pc, #232]	; (801cf7c <tcp_input+0x768>)
 801ce92:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801ce94:	681b      	ldr	r3, [r3, #0]
 801ce96:	429a      	cmp	r2, r3
 801ce98:	f47f ae46 	bne.w	801cb28 <tcp_input+0x314>
 801ce9c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	f47f ae42 	bne.w	801cb28 <tcp_input+0x314>
        recv_flags |= TF_CLOSED;
 801cea4:	f89a 3000 	ldrb.w	r3, [sl]
 801cea8:	f043 0310 	orr.w	r3, r3, #16
 801ceac:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801ceb0:	e63a      	b.n	801cb28 <tcp_input+0x314>
      tcp_receive(pcb);
 801ceb2:	4630      	mov	r0, r6
 801ceb4:	f7fe ff66 	bl	801bd84 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ceb8:	4b29      	ldr	r3, [pc, #164]	; (801cf60 <tcp_input+0x74c>)
 801ceba:	781b      	ldrb	r3, [r3, #0]
 801cebc:	06df      	lsls	r7, r3, #27
 801cebe:	f57f ae33 	bpl.w	801cb28 <tcp_input+0x314>
 801cec2:	4b2e      	ldr	r3, [pc, #184]	; (801cf7c <tcp_input+0x768>)
 801cec4:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	429a      	cmp	r2, r3
 801ceca:	f47f ae2d 	bne.w	801cb28 <tcp_input+0x314>
 801cece:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	f47f ae29 	bne.w	801cb28 <tcp_input+0x314>
        tcp_pcb_purge(pcb);
 801ced6:	4630      	mov	r0, r6
 801ced8:	f7fd feb2 	bl	801ac40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801cedc:	4b22      	ldr	r3, [pc, #136]	; (801cf68 <tcp_input+0x754>)
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	42b3      	cmp	r3, r6
 801cee2:	f000 8083 	beq.w	801cfec <tcp_input+0x7d8>
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	f000 8083 	beq.w	801cff2 <tcp_input+0x7de>
 801ceec:	68da      	ldr	r2, [r3, #12]
 801ceee:	42b2      	cmp	r2, r6
 801cef0:	f000 8232 	beq.w	801d358 <tcp_input+0xb44>
 801cef4:	4613      	mov	r3, r2
 801cef6:	e7f6      	b.n	801cee6 <tcp_input+0x6d2>
      tcp_receive(pcb);
 801cef8:	4630      	mov	r0, r6
 801cefa:	f7fe ff43 	bl	801bd84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801cefe:	f89a 3000 	ldrb.w	r3, [sl]
 801cf02:	069b      	lsls	r3, r3, #26
 801cf04:	f57f ae10 	bpl.w	801cb28 <tcp_input+0x314>
        tcp_ack_now(pcb);
 801cf08:	8b73      	ldrh	r3, [r6, #26]
        tcp_pcb_purge(pcb);
 801cf0a:	4630      	mov	r0, r6
        tcp_ack_now(pcb);
 801cf0c:	f043 0302 	orr.w	r3, r3, #2
 801cf10:	8373      	strh	r3, [r6, #26]
        tcp_pcb_purge(pcb);
 801cf12:	f7fd fe95 	bl	801ac40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801cf16:	4b14      	ldr	r3, [pc, #80]	; (801cf68 <tcp_input+0x754>)
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	42b3      	cmp	r3, r6
 801cf1c:	d066      	beq.n	801cfec <tcp_input+0x7d8>
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d067      	beq.n	801cff2 <tcp_input+0x7de>
 801cf22:	68da      	ldr	r2, [r3, #12]
 801cf24:	42b2      	cmp	r2, r6
 801cf26:	f000 8217 	beq.w	801d358 <tcp_input+0xb44>
 801cf2a:	4613      	mov	r3, r2
 801cf2c:	e7f7      	b.n	801cf1e <tcp_input+0x70a>
      tcp_receive(pcb);
 801cf2e:	4630      	mov	r0, r6
 801cf30:	f7fe ff28 	bl	801bd84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801cf34:	f89a 3000 	ldrb.w	r3, [sl]
 801cf38:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801cf3c:	4b08      	ldr	r3, [pc, #32]	; (801cf60 <tcp_input+0x74c>)
 801cf3e:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801cf40:	f000 81b4 	beq.w	801d2ac <tcp_input+0xa98>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801cf44:	06d9      	lsls	r1, r3, #27
 801cf46:	d504      	bpl.n	801cf52 <tcp_input+0x73e>
 801cf48:	4b0c      	ldr	r3, [pc, #48]	; (801cf7c <tcp_input+0x768>)
 801cf4a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	429a      	cmp	r2, r3
 801cf50:	d03d      	beq.n	801cfce <tcp_input+0x7ba>
          tcp_ack_now(pcb);
 801cf52:	8b73      	ldrh	r3, [r6, #26]
 801cf54:	f043 0302 	orr.w	r3, r3, #2
 801cf58:	8373      	strh	r3, [r6, #26]
          pcb->state = CLOSING;
 801cf5a:	2308      	movs	r3, #8
 801cf5c:	7533      	strb	r3, [r6, #20]
    if (err != ERR_ABRT) {
 801cf5e:	e5e3      	b.n	801cb28 <tcp_input+0x314>
 801cf60:	2002dc7c 	.word	0x2002dc7c
 801cf64:	2002dc9c 	.word	0x2002dc9c
 801cf68:	2002dc5c 	.word	0x2002dc5c
 801cf6c:	2002dcb4 	.word	0x2002dcb4
 801cf70:	2002dc60 	.word	0x2002dc60
 801cf74:	2002dca4 	.word	0x2002dca4
 801cf78:	2002dc6c 	.word	0x2002dc6c
 801cf7c:	2002dc78 	.word	0x2002dc78
 801cf80:	2001eb24 	.word	0x2001eb24
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801cf84:	f003 0212 	and.w	r2, r3, #18
 801cf88:	2a12      	cmp	r2, #18
 801cf8a:	f000 80ce 	beq.w	801d12a <tcp_input+0x916>
      else if (flags & TCP_ACK) {
 801cf8e:	06da      	lsls	r2, r3, #27
 801cf90:	f57f adca 	bpl.w	801cb28 <tcp_input+0x314>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf94:	9a04      	ldr	r2, [sp, #16]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cf96:	683b      	ldr	r3, [r7, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf98:	8811      	ldrh	r1, [r2, #0]
 801cf9a:	4aa9      	ldr	r2, [pc, #676]	; (801d240 <tcp_input+0xa2c>)
 801cf9c:	8818      	ldrh	r0, [r3, #0]
 801cf9e:	6812      	ldr	r2, [r2, #0]
 801cfa0:	440a      	add	r2, r1
 801cfa2:	49a8      	ldr	r1, [pc, #672]	; (801d244 <tcp_input+0xa30>)
 801cfa4:	6809      	ldr	r1, [r1, #0]
 801cfa6:	9002      	str	r0, [sp, #8]
 801cfa8:	48a7      	ldr	r0, [pc, #668]	; (801d248 <tcp_input+0xa34>)
 801cfaa:	885b      	ldrh	r3, [r3, #2]
 801cfac:	e9cd 0300 	strd	r0, r3, [sp]
 801cfb0:	1d03      	adds	r3, r0, #4
 801cfb2:	4630      	mov	r0, r6
 801cfb4:	f001 f9f8 	bl	801e3a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801cfb8:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
 801cfbc:	2b05      	cmp	r3, #5
 801cfbe:	f63f adb3 	bhi.w	801cb28 <tcp_input+0x314>
          pcb->rtime = 0;
 801cfc2:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801cfc4:	4630      	mov	r0, r6
          pcb->rtime = 0;
 801cfc6:	8633      	strh	r3, [r6, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801cfc8:	f001 fc7a 	bl	801e8c0 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801cfcc:	e5ac      	b.n	801cb28 <tcp_input+0x314>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801cfce:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d1be      	bne.n	801cf52 <tcp_input+0x73e>
          tcp_ack_now(pcb);
 801cfd4:	8b73      	ldrh	r3, [r6, #26]
          tcp_pcb_purge(pcb);
 801cfd6:	4630      	mov	r0, r6
          tcp_ack_now(pcb);
 801cfd8:	f043 0302 	orr.w	r3, r3, #2
 801cfdc:	8373      	strh	r3, [r6, #26]
          tcp_pcb_purge(pcb);
 801cfde:	f7fd fe2f 	bl	801ac40 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801cfe2:	4b9a      	ldr	r3, [pc, #616]	; (801d24c <tcp_input+0xa38>)
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	42b3      	cmp	r3, r6
 801cfe8:	f040 81a7 	bne.w	801d33a <tcp_input+0xb26>
        TCP_RMV_ACTIVE(pcb);
 801cfec:	68f3      	ldr	r3, [r6, #12]
 801cfee:	4a97      	ldr	r2, [pc, #604]	; (801d24c <tcp_input+0xa38>)
 801cff0:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801cff2:	4b97      	ldr	r3, [pc, #604]	; (801d250 <tcp_input+0xa3c>)
        pcb->state = TIME_WAIT;
 801cff4:	220a      	movs	r2, #10
 801cff6:	7532      	strb	r2, [r6, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801cff8:	681a      	ldr	r2, [r3, #0]
 801cffa:	601e      	str	r6, [r3, #0]
 801cffc:	60f2      	str	r2, [r6, #12]
        TCP_RMV_ACTIVE(pcb);
 801cffe:	2201      	movs	r2, #1
 801d000:	4b94      	ldr	r3, [pc, #592]	; (801d254 <tcp_input+0xa40>)
 801d002:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d004:	f001 fd80 	bl	801eb08 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801d008:	e58e      	b.n	801cb28 <tcp_input+0x314>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801d00a:	4b93      	ldr	r3, [pc, #588]	; (801d258 <tcp_input+0xa44>)
 801d00c:	22c2      	movs	r2, #194	; 0xc2
 801d00e:	4993      	ldr	r1, [pc, #588]	; (801d25c <tcp_input+0xa48>)
 801d010:	4893      	ldr	r0, [pc, #588]	; (801d260 <tcp_input+0xa4c>)
 801d012:	f007 fa53 	bl	80244bc <iprintf>
 801d016:	e466      	b.n	801c8e6 <tcp_input+0xd2>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d018:	4b8f      	ldr	r3, [pc, #572]	; (801d258 <tcp_input+0xa44>)
 801d01a:	22df      	movs	r2, #223	; 0xdf
 801d01c:	4991      	ldr	r1, [pc, #580]	; (801d264 <tcp_input+0xa50>)
 801d01e:	4890      	ldr	r0, [pc, #576]	; (801d260 <tcp_input+0xa4c>)
 801d020:	f007 fa4c 	bl	80244bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801d024:	8923      	ldrh	r3, [r4, #8]
 801d026:	e484      	b.n	801c932 <tcp_input+0x11e>
        if (pcb->rcv_ann_wnd == 0) {
 801d028:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	f000 80ea 	beq.w	801d204 <tcp_input+0x9f0>
        TCP_STATS_INC(tcp.drop);
 801d030:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
 801d034:	4c8c      	ldr	r4, [pc, #560]	; (801d268 <tcp_input+0xa54>)
 801d036:	3301      	adds	r3, #1
 801d038:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
        goto aborted;
 801d03c:	e587      	b.n	801cb4e <tcp_input+0x33a>
        if (recv_acked > 0) {
 801d03e:	f8bb 2000 	ldrh.w	r2, [fp]
 801d042:	b15a      	cbz	r2, 801d05c <tcp_input+0x848>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801d044:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801d048:	b12b      	cbz	r3, 801d056 <tcp_input+0x842>
 801d04a:	4631      	mov	r1, r6
 801d04c:	6930      	ldr	r0, [r6, #16]
 801d04e:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801d050:	300d      	adds	r0, #13
 801d052:	f43f ad7c 	beq.w	801cb4e <tcp_input+0x33a>
          recv_acked = 0;
 801d056:	2300      	movs	r3, #0
 801d058:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801d05c:	4630      	mov	r0, r6
 801d05e:	f7fe fdf1 	bl	801bc44 <tcp_input_delayed_close>
 801d062:	2800      	cmp	r0, #0
 801d064:	f47f ad73 	bne.w	801cb4e <tcp_input+0x33a>
        if (recv_data != NULL) {
 801d068:	f8d9 3000 	ldr.w	r3, [r9]
 801d06c:	b1fb      	cbz	r3, 801d0ae <tcp_input+0x89a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801d06e:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801d070:	b133      	cbz	r3, 801d080 <tcp_input+0x86c>
 801d072:	4b79      	ldr	r3, [pc, #484]	; (801d258 <tcp_input+0xa44>)
 801d074:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801d078:	497c      	ldr	r1, [pc, #496]	; (801d26c <tcp_input+0xa58>)
 801d07a:	4879      	ldr	r0, [pc, #484]	; (801d260 <tcp_input+0xa4c>)
 801d07c:	f007 fa1e 	bl	80244bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801d080:	8b73      	ldrh	r3, [r6, #26]
 801d082:	f013 0310 	ands.w	r3, r3, #16
 801d086:	f040 8109 	bne.w	801d29c <tcp_input+0xa88>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801d08a:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
 801d08e:	2d00      	cmp	r5, #0
 801d090:	f000 813b 	beq.w	801d30a <tcp_input+0xaf6>
 801d094:	f8d9 2000 	ldr.w	r2, [r9]
 801d098:	4631      	mov	r1, r6
 801d09a:	6930      	ldr	r0, [r6, #16]
 801d09c:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 801d09e:	f110 0f0d 	cmn.w	r0, #13
 801d0a2:	f43f ad54 	beq.w	801cb4e <tcp_input+0x33a>
          if (err != ERR_OK) {
 801d0a6:	b110      	cbz	r0, 801d0ae <tcp_input+0x89a>
            pcb->refused_data = recv_data;
 801d0a8:	f8d9 3000 	ldr.w	r3, [r9]
 801d0ac:	67b3      	str	r3, [r6, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801d0ae:	f89a 3000 	ldrb.w	r3, [sl]
 801d0b2:	0699      	lsls	r1, r3, #26
 801d0b4:	d507      	bpl.n	801d0c6 <tcp_input+0x8b2>
          if (pcb->refused_data != NULL) {
 801d0b6:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	f000 80db 	beq.w	801d274 <tcp_input+0xa60>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801d0be:	7b5a      	ldrb	r2, [r3, #13]
 801d0c0:	f042 0220 	orr.w	r2, r2, #32
 801d0c4:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801d0c6:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801d0c8:	4630      	mov	r0, r6
        tcp_input_pcb = NULL;
 801d0ca:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801d0cc:	f7fe fdba 	bl	801bc44 <tcp_input_delayed_close>
 801d0d0:	2800      	cmp	r0, #0
 801d0d2:	f47f ad3c 	bne.w	801cb4e <tcp_input+0x33a>
        tcp_output(pcb);
 801d0d6:	4630      	mov	r0, r6
 801d0d8:	f001 f9e0 	bl	801e49c <tcp_output>
 801d0dc:	e537      	b.n	801cb4e <tcp_input+0x33a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801d0de:	6838      	ldr	r0, [r7, #0]
 801d0e0:	8980      	ldrh	r0, [r0, #12]
 801d0e2:	f7fa fef1 	bl	8017ec8 <lwip_htons>
 801d0e6:	f010 0004 	ands.w	r0, r0, #4
 801d0ea:	f47f ada1 	bne.w	801cc30 <tcp_input+0x41c>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d0ee:	9b04      	ldr	r3, [sp, #16]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d0f0:	683e      	ldr	r6, [r7, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d0f2:	881a      	ldrh	r2, [r3, #0]
 801d0f4:	4b52      	ldr	r3, [pc, #328]	; (801d240 <tcp_input+0xa2c>)
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	441a      	add	r2, r3
 801d0fa:	4b52      	ldr	r3, [pc, #328]	; (801d244 <tcp_input+0xa30>)
 801d0fc:	6819      	ldr	r1, [r3, #0]
      TCP_STATS_INC(tcp.proterr);
 801d0fe:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 801d102:	3301      	adds	r3, #1
 801d104:	f8a5 30a0 	strh.w	r3, [r5, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 801d108:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
 801d10c:	3301      	adds	r3, #1
 801d10e:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d112:	8833      	ldrh	r3, [r6, #0]
 801d114:	4d4c      	ldr	r5, [pc, #304]	; (801d248 <tcp_input+0xa34>)
 801d116:	9302      	str	r3, [sp, #8]
 801d118:	8873      	ldrh	r3, [r6, #2]
 801d11a:	e9cd 5300 	strd	r5, r3, [sp]
 801d11e:	1d2b      	adds	r3, r5, #4
 801d120:	f001 f942 	bl	801e3a8 <tcp_rst>
        pbuf_free(p);
 801d124:	4620      	mov	r0, r4
 801d126:	f7ff bb94 	b.w	801c852 <tcp_input+0x3e>
          && (ackno == pcb->lastack + 1)) {
 801d12a:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801d12c:	4945      	ldr	r1, [pc, #276]	; (801d244 <tcp_input+0xa30>)
 801d12e:	3201      	adds	r2, #1
 801d130:	6809      	ldr	r1, [r1, #0]
 801d132:	428a      	cmp	r2, r1
 801d134:	f47f af2b 	bne.w	801cf8e <tcp_input+0x77a>
        pcb->rcv_nxt = seqno + 1;
 801d138:	4b41      	ldr	r3, [pc, #260]	; (801d240 <tcp_input+0xa2c>)
        pcb->snd_wnd = tcphdr->wnd;
 801d13a:	6838      	ldr	r0, [r7, #0]
        pcb->rcv_nxt = seqno + 1;
 801d13c:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801d13e:	6472      	str	r2, [r6, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d140:	1d32      	adds	r2, r6, #4
        pcb->rcv_nxt = seqno + 1;
 801d142:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801d144:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d146:	8e75      	ldrh	r5, [r6, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801d148:	6271      	str	r1, [r6, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801d14a:	62f1      	str	r1, [r6, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801d14c:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d14e:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801d150:	6573      	str	r3, [r6, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801d152:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801d154:	f8a6 1060 	strh.w	r1, [r6, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801d158:	7533      	strb	r3, [r6, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d15a:	f8a6 1062 	strh.w	r1, [r6, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d15e:	9204      	str	r2, [sp, #16]
 801d160:	f004 fcb0 	bl	8021ac4 <ip4_route>
 801d164:	9a04      	ldr	r2, [sp, #16]
 801d166:	4601      	mov	r1, r0
 801d168:	4628      	mov	r0, r5
 801d16a:	f7fe fcb9 	bl	801bae0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d16e:	f241 131c 	movw	r3, #4380	; 0x111c
 801d172:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d174:	8670      	strh	r0, [r6, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d176:	0081      	lsls	r1, r0, #2
 801d178:	429a      	cmp	r2, r3
 801d17a:	4615      	mov	r5, r2
 801d17c:	bf38      	it	cc
 801d17e:	461d      	movcc	r5, r3
 801d180:	ebb5 0f80 	cmp.w	r5, r0, lsl #2
 801d184:	f240 813d 	bls.w	801d402 <tcp_input+0xbee>
 801d188:	b28b      	uxth	r3, r1
 801d18a:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801d18e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 801d192:	2b00      	cmp	r3, #0
 801d194:	f000 812d 	beq.w	801d3f2 <tcp_input+0xbde>
        --pcb->snd_queuelen;
 801d198:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
        rseg = pcb->unacked;
 801d19c:	6f35      	ldr	r5, [r6, #112]	; 0x70
        --pcb->snd_queuelen;
 801d19e:	3b01      	subs	r3, #1
 801d1a0:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
        if (rseg == NULL) {
 801d1a4:	2d00      	cmp	r5, #0
 801d1a6:	f000 811f 	beq.w	801d3e8 <tcp_input+0xbd4>
          pcb->unacked = rseg->next;
 801d1aa:	682b      	ldr	r3, [r5, #0]
 801d1ac:	6733      	str	r3, [r6, #112]	; 0x70
        tcp_seg_free(rseg);
 801d1ae:	4628      	mov	r0, r5
 801d1b0:	f7fd fc7e 	bl	801aab0 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801d1b4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	f000 8112 	beq.w	801d3e0 <tcp_input+0xbcc>
          pcb->rtime = 0;
 801d1bc:	2300      	movs	r3, #0
 801d1be:	8633      	strh	r3, [r6, #48]	; 0x30
          pcb->nrtx = 0;
 801d1c0:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801d1c4:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801d1c8:	b133      	cbz	r3, 801d1d8 <tcp_input+0x9c4>
 801d1ca:	2200      	movs	r2, #0
 801d1cc:	4631      	mov	r1, r6
 801d1ce:	6930      	ldr	r0, [r6, #16]
 801d1d0:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801d1d2:	300d      	adds	r0, #13
 801d1d4:	f43f acbb 	beq.w	801cb4e <tcp_input+0x33a>
        tcp_ack_now(pcb);
 801d1d8:	8b73      	ldrh	r3, [r6, #26]
 801d1da:	f043 0302 	orr.w	r3, r3, #2
 801d1de:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801d1e0:	e4a2      	b.n	801cb28 <tcp_input+0x314>
      if (ackno == pcb->snd_nxt) {
 801d1e2:	4b18      	ldr	r3, [pc, #96]	; (801d244 <tcp_input+0xa30>)
 801d1e4:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	429a      	cmp	r2, r3
 801d1ea:	f47f ac9d 	bne.w	801cb28 <tcp_input+0x314>
      recv_flags |= TF_RESET;
 801d1ee:	f89a 3000 	ldrb.w	r3, [sl]
 801d1f2:	f043 0308 	orr.w	r3, r3, #8
 801d1f6:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801d1fa:	8b73      	ldrh	r3, [r6, #26]
 801d1fc:	f023 0301 	bic.w	r3, r3, #1
 801d200:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801d202:	e491      	b.n	801cb28 <tcp_input+0x314>
          tcp_send_empty_ack(pcb);
 801d204:	4630      	mov	r0, r6
 801d206:	f001 f917 	bl	801e438 <tcp_send_empty_ack>
 801d20a:	e711      	b.n	801d030 <tcp_input+0x81c>
        TCP_STATS_INC(tcp.cachehit);
 801d20c:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
 801d210:	3201      	adds	r2, #1
 801d212:	f8a5 20a6 	strh.w	r2, [r5, #166]	; 0xa6
 801d216:	e56a      	b.n	801ccee <tcp_input+0x4da>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d218:	8802      	ldrh	r2, [r0, #0]
 801d21a:	9301      	str	r3, [sp, #4]
 801d21c:	4b0a      	ldr	r3, [pc, #40]	; (801d248 <tcp_input+0xa34>)
 801d21e:	9202      	str	r2, [sp, #8]
 801d220:	9300      	str	r3, [sp, #0]
 801d222:	9b04      	ldr	r3, [sp, #16]
 801d224:	881a      	ldrh	r2, [r3, #0]
 801d226:	4b06      	ldr	r3, [pc, #24]	; (801d240 <tcp_input+0xa2c>)
 801d228:	681b      	ldr	r3, [r3, #0]
 801d22a:	441a      	add	r2, r3
 801d22c:	4b05      	ldr	r3, [pc, #20]	; (801d244 <tcp_input+0xa30>)
 801d22e:	4630      	mov	r0, r6
 801d230:	6819      	ldr	r1, [r3, #0]
 801d232:	4b0f      	ldr	r3, [pc, #60]	; (801d270 <tcp_input+0xa5c>)
 801d234:	f001 f8b8 	bl	801e3a8 <tcp_rst>
        pbuf_free(p);
 801d238:	4620      	mov	r0, r4
 801d23a:	f7ff bb0a 	b.w	801c852 <tcp_input+0x3e>
 801d23e:	bf00      	nop
 801d240:	2002dc9c 	.word	0x2002dc9c
 801d244:	2002dc78 	.word	0x2002dc78
 801d248:	2001eb24 	.word	0x2001eb24
 801d24c:	2002dc5c 	.word	0x2002dc5c
 801d250:	2002dc74 	.word	0x2002dc74
 801d254:	2002dc60 	.word	0x2002dc60
 801d258:	080e0ad4 	.word	0x080e0ad4
 801d25c:	080e0cdc 	.word	0x080e0cdc
 801d260:	0802ac68 	.word	0x0802ac68
 801d264:	080e0cec 	.word	0x080e0cec
 801d268:	2002dca0 	.word	0x2002dca0
 801d26c:	080e0e88 	.word	0x080e0e88
 801d270:	2001eb28 	.word	0x2001eb28
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801d274:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 801d276:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801d27a:	d001      	beq.n	801d280 <tcp_input+0xa6c>
              pcb->rcv_wnd++;
 801d27c:	3301      	adds	r3, #1
 801d27e:	8533      	strh	r3, [r6, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801d280:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
 801d284:	2d00      	cmp	r5, #0
 801d286:	f43f af1e 	beq.w	801d0c6 <tcp_input+0x8b2>
 801d28a:	2300      	movs	r3, #0
 801d28c:	4631      	mov	r1, r6
 801d28e:	6930      	ldr	r0, [r6, #16]
 801d290:	461a      	mov	r2, r3
 801d292:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 801d294:	300d      	adds	r0, #13
 801d296:	f47f af16 	bne.w	801d0c6 <tcp_input+0x8b2>
 801d29a:	e458      	b.n	801cb4e <tcp_input+0x33a>
            pbuf_free(recv_data);
 801d29c:	f8d9 0000 	ldr.w	r0, [r9]
 801d2a0:	f7fc fe96 	bl	8019fd0 <pbuf_free>
            tcp_abort(pcb);
 801d2a4:	4630      	mov	r0, r6
 801d2a6:	f7fe f90b 	bl	801b4c0 <tcp_abort>
            goto aborted;
 801d2aa:	e450      	b.n	801cb4e <tcp_input+0x33a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d2ac:	06da      	lsls	r2, r3, #27
 801d2ae:	f57f ac3b 	bpl.w	801cb28 <tcp_input+0x314>
 801d2b2:	4b6a      	ldr	r3, [pc, #424]	; (801d45c <tcp_input+0xc48>)
 801d2b4:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	429a      	cmp	r2, r3
 801d2ba:	f47f ac35 	bne.w	801cb28 <tcp_input+0x314>
 801d2be:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	f47f ac31 	bne.w	801cb28 <tcp_input+0x314>
        pcb->state = FIN_WAIT_2;
 801d2c6:	2306      	movs	r3, #6
 801d2c8:	7533      	strb	r3, [r6, #20]
    if (err != ERR_ABRT) {
 801d2ca:	e42d      	b.n	801cb28 <tcp_input+0x314>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801d2cc:	2d00      	cmp	r5, #0
 801d2ce:	f43f ac2b 	beq.w	801cb28 <tcp_input+0x314>
 801d2d2:	4b63      	ldr	r3, [pc, #396]	; (801d460 <tcp_input+0xc4c>)
 801d2d4:	681a      	ldr	r2, [r3, #0]
 801d2d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d2d8:	3b01      	subs	r3, #1
 801d2da:	4293      	cmp	r3, r2
 801d2dc:	f47f ac24 	bne.w	801cb28 <tcp_input+0x314>
        tcp_rexmit(pcb);
 801d2e0:	4630      	mov	r0, r6
 801d2e2:	f000 ffe3 	bl	801e2ac <tcp_rexmit>
    if (err != ERR_ABRT) {
 801d2e6:	e41f      	b.n	801cb28 <tcp_input+0x314>
      TCP_STATS_INC(tcp.memerr);
 801d2e8:	f8b5 309c 	ldrh.w	r3, [r5, #156]	; 0x9c
 801d2ec:	3301      	adds	r3, #1
 801d2ee:	f8a5 309c 	strh.w	r3, [r5, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801d2f2:	69b3      	ldr	r3, [r6, #24]
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	f43f ac9b 	beq.w	801cc30 <tcp_input+0x41c>
 801d2fa:	4601      	mov	r1, r0
 801d2fc:	f04f 32ff 	mov.w	r2, #4294967295
 801d300:	6930      	ldr	r0, [r6, #16]
 801d302:	4798      	blx	r3
        pbuf_free(p);
 801d304:	4620      	mov	r0, r4
 801d306:	f7ff baa4 	b.w	801c852 <tcp_input+0x3e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801d30a:	462b      	mov	r3, r5
 801d30c:	4628      	mov	r0, r5
 801d30e:	f8d9 2000 	ldr.w	r2, [r9]
 801d312:	4631      	mov	r1, r6
 801d314:	f7fe fb06 	bl	801b924 <tcp_recv_null>
 801d318:	e6c1      	b.n	801d09e <tcp_input+0x88a>
        TCP_STATS_INC(tcp.cachehit);
 801d31a:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
 801d31e:	3201      	adds	r2, #1
 801d320:	f8a5 20a6 	strh.w	r2, [r5, #166]	; 0xa6
 801d324:	f7ff bbb5 	b.w	801ca92 <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801d328:	4b4e      	ldr	r3, [pc, #312]	; (801d464 <tcp_input+0xc50>)
 801d32a:	f240 1215 	movw	r2, #277	; 0x115
 801d32e:	494e      	ldr	r1, [pc, #312]	; (801d468 <tcp_input+0xc54>)
 801d330:	484e      	ldr	r0, [pc, #312]	; (801d46c <tcp_input+0xc58>)
 801d332:	f007 f8c3 	bl	80244bc <iprintf>
 801d336:	f7ff bbaf 	b.w	801ca98 <tcp_input+0x284>
          TCP_RMV_ACTIVE(pcb);
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	f43f ae59 	beq.w	801cff2 <tcp_input+0x7de>
 801d340:	68da      	ldr	r2, [r3, #12]
 801d342:	42b2      	cmp	r2, r6
 801d344:	d008      	beq.n	801d358 <tcp_input+0xb44>
 801d346:	4613      	mov	r3, r2
 801d348:	e7f7      	b.n	801d33a <tcp_input+0xb26>
      tcp_abandon(npcb, 0);
 801d34a:	4650      	mov	r0, sl
 801d34c:	2100      	movs	r1, #0
 801d34e:	f7fd ffe7 	bl	801b320 <tcp_abandon>
        pbuf_free(p);
 801d352:	4620      	mov	r0, r4
 801d354:	f7ff ba7d 	b.w	801c852 <tcp_input+0x3e>
        TCP_RMV_ACTIVE(pcb);
 801d358:	68f2      	ldr	r2, [r6, #12]
 801d35a:	60da      	str	r2, [r3, #12]
 801d35c:	e649      	b.n	801cff2 <tcp_input+0x7de>
          pcb->state = ESTABLISHED;
 801d35e:	2304      	movs	r3, #4
 801d360:	7533      	strb	r3, [r6, #20]
          if (pcb->listener == NULL) {
 801d362:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 801d364:	2b00      	cmp	r3, #0
 801d366:	d09d      	beq.n	801d2a4 <tcp_input+0xa90>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801d368:	699b      	ldr	r3, [r3, #24]
 801d36a:	b36b      	cbz	r3, 801d3c8 <tcp_input+0xbb4>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801d36c:	2200      	movs	r2, #0
 801d36e:	4631      	mov	r1, r6
 801d370:	6930      	ldr	r0, [r6, #16]
 801d372:	4798      	blx	r3
          if (err != ERR_OK) {
 801d374:	bb20      	cbnz	r0, 801d3c0 <tcp_input+0xbac>
          tcp_receive(pcb);
 801d376:	4630      	mov	r0, r6
 801d378:	f7fe fd04 	bl	801bd84 <tcp_receive>
          if (recv_acked != 0) {
 801d37c:	f8bb 3000 	ldrh.w	r3, [fp]
 801d380:	b113      	cbz	r3, 801d388 <tcp_input+0xb74>
            recv_acked--;
 801d382:	3b01      	subs	r3, #1
 801d384:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d388:	8e71      	ldrh	r1, [r6, #50]	; 0x32
 801d38a:	f241 131c 	movw	r3, #4380	; 0x111c
 801d38e:	004a      	lsls	r2, r1, #1
 801d390:	0088      	lsls	r0, r1, #2
 801d392:	429a      	cmp	r2, r3
 801d394:	4615      	mov	r5, r2
 801d396:	bf38      	it	cc
 801d398:	461d      	movcc	r5, r3
 801d39a:	ebb5 0f81 	cmp.w	r5, r1, lsl #2
 801d39e:	d958      	bls.n	801d452 <tcp_input+0xc3e>
 801d3a0:	b283      	uxth	r3, r0
 801d3a2:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801d3a6:	f89a 3000 	ldrb.w	r3, [sl]
 801d3aa:	069d      	lsls	r5, r3, #26
 801d3ac:	f57f abbc 	bpl.w	801cb28 <tcp_input+0x314>
 801d3b0:	e540      	b.n	801ce34 <tcp_input+0x620>
  } else if (flags & TCP_FIN) {
 801d3b2:	07d0      	lsls	r0, r2, #31
 801d3b4:	f57f ac37 	bpl.w	801cc26 <tcp_input+0x412>
    pcb->tmr = tcp_ticks;
 801d3b8:	4b2d      	ldr	r3, [pc, #180]	; (801d470 <tcp_input+0xc5c>)
 801d3ba:	681b      	ldr	r3, [r3, #0]
 801d3bc:	6233      	str	r3, [r6, #32]
 801d3be:	e432      	b.n	801cc26 <tcp_input+0x412>
            if (err != ERR_ABRT) {
 801d3c0:	300d      	adds	r0, #13
 801d3c2:	f43f abc4 	beq.w	801cb4e <tcp_input+0x33a>
 801d3c6:	e76d      	b.n	801d2a4 <tcp_input+0xa90>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801d3c8:	4b26      	ldr	r3, [pc, #152]	; (801d464 <tcp_input+0xc50>)
 801d3ca:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801d3ce:	4929      	ldr	r1, [pc, #164]	; (801d474 <tcp_input+0xc60>)
 801d3d0:	4826      	ldr	r0, [pc, #152]	; (801d46c <tcp_input+0xc58>)
 801d3d2:	f007 f873 	bl	80244bc <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801d3d6:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 801d3d8:	699b      	ldr	r3, [r3, #24]
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d1c6      	bne.n	801d36c <tcp_input+0xb58>
 801d3de:	e761      	b.n	801d2a4 <tcp_input+0xa90>
          pcb->rtime = -1;
 801d3e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d3e4:	8633      	strh	r3, [r6, #48]	; 0x30
 801d3e6:	e6ed      	b.n	801d1c4 <tcp_input+0x9b0>
          rseg = pcb->unsent;
 801d3e8:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801d3ea:	b175      	cbz	r5, 801d40a <tcp_input+0xbf6>
          pcb->unsent = rseg->next;
 801d3ec:	682b      	ldr	r3, [r5, #0]
 801d3ee:	66f3      	str	r3, [r6, #108]	; 0x6c
 801d3f0:	e6dd      	b.n	801d1ae <tcp_input+0x99a>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801d3f2:	4b1c      	ldr	r3, [pc, #112]	; (801d464 <tcp_input+0xc50>)
 801d3f4:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801d3f8:	491f      	ldr	r1, [pc, #124]	; (801d478 <tcp_input+0xc64>)
 801d3fa:	481c      	ldr	r0, [pc, #112]	; (801d46c <tcp_input+0xc58>)
 801d3fc:	f007 f85e 	bl	80244bc <iprintf>
 801d400:	e6ca      	b.n	801d198 <tcp_input+0x984>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d402:	429a      	cmp	r2, r3
 801d404:	bf88      	it	hi
 801d406:	b293      	uxthhi	r3, r2
 801d408:	e6bf      	b.n	801d18a <tcp_input+0x976>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801d40a:	4b16      	ldr	r3, [pc, #88]	; (801d464 <tcp_input+0xc50>)
 801d40c:	f44f 725d 	mov.w	r2, #884	; 0x374
 801d410:	491a      	ldr	r1, [pc, #104]	; (801d47c <tcp_input+0xc68>)
 801d412:	4816      	ldr	r0, [pc, #88]	; (801d46c <tcp_input+0xc58>)
 801d414:	f007 f852 	bl	80244bc <iprintf>
 801d418:	e7e8      	b.n	801d3ec <tcp_input+0xbd8>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d41a:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801d41e:	4b18      	ldr	r3, [pc, #96]	; (801d480 <tcp_input+0xc6c>)
 801d420:	9300      	str	r3, [sp, #0]
 801d422:	9b04      	ldr	r3, [sp, #16]
 801d424:	881b      	ldrh	r3, [r3, #0]
 801d426:	e700      	b.n	801d22a <tcp_input+0xa16>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801d428:	2900      	cmp	r1, #0
 801d42a:	f47f aee0 	bne.w	801d1ee <tcp_input+0x9da>
 801d42e:	4b0d      	ldr	r3, [pc, #52]	; (801d464 <tcp_input+0xc50>)
 801d430:	f44f 724e 	mov.w	r2, #824	; 0x338
 801d434:	4913      	ldr	r1, [pc, #76]	; (801d484 <tcp_input+0xc70>)
 801d436:	480d      	ldr	r0, [pc, #52]	; (801d46c <tcp_input+0xc58>)
 801d438:	f007 f840 	bl	80244bc <iprintf>
 801d43c:	e6d7      	b.n	801d1ee <tcp_input+0x9da>
    tcp_ack_now(pcb);
 801d43e:	8b73      	ldrh	r3, [r6, #26]
    tcp_output(pcb);
 801d440:	4630      	mov	r0, r6
    tcp_ack_now(pcb);
 801d442:	f043 0302 	orr.w	r3, r3, #2
 801d446:	8373      	strh	r3, [r6, #26]
    tcp_output(pcb);
 801d448:	f001 f828 	bl	801e49c <tcp_output>
        pbuf_free(p);
 801d44c:	4620      	mov	r0, r4
 801d44e:	f7ff ba00 	b.w	801c852 <tcp_input+0x3e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d452:	429a      	cmp	r2, r3
 801d454:	bf88      	it	hi
 801d456:	b293      	uxthhi	r3, r2
 801d458:	e7a3      	b.n	801d3a2 <tcp_input+0xb8e>
 801d45a:	bf00      	nop
 801d45c:	2002dc78 	.word	0x2002dc78
 801d460:	2002dc9c 	.word	0x2002dc9c
 801d464:	080e0ad4 	.word	0x080e0ad4
 801d468:	080e0dc0 	.word	0x080e0dc0
 801d46c:	0802ac68 	.word	0x0802ac68
 801d470:	2002dc6c 	.word	0x2002dc6c
 801d474:	080e0e68 	.word	0x080e0e68
 801d478:	080e0e3c 	.word	0x080e0e3c
 801d47c:	080e0e54 	.word	0x080e0e54
 801d480:	2001eb24 	.word	0x2001eb24
 801d484:	080e0e1c 	.word	0x080e0e1c

0801d488 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801d488:	4a02      	ldr	r2, [pc, #8]	; (801d494 <tcp_trigger_input_pcb_close+0xc>)
 801d48a:	7813      	ldrb	r3, [r2, #0]
 801d48c:	f043 0310 	orr.w	r3, r3, #16
 801d490:	7013      	strb	r3, [r2, #0]
}
 801d492:	4770      	bx	lr
 801d494:	2002dc98 	.word	0x2002dc98

0801d498 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801d498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d49c:	9f08      	ldr	r7, [sp, #32]
 801d49e:	4680      	mov	r8, r0
 801d4a0:	460d      	mov	r5, r1
 801d4a2:	4614      	mov	r4, r2
 801d4a4:	461e      	mov	r6, r3
 801d4a6:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801d4aa:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d4ae:	2f00      	cmp	r7, #0
 801d4b0:	d033      	beq.n	801d51a <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801d4b2:	42a5      	cmp	r5, r4
 801d4b4:	d20e      	bcs.n	801d4d4 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d4b6:	f019 0f02 	tst.w	r9, #2
 801d4ba:	d008      	beq.n	801d4ce <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801d4bc:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801d4c0:	f021 0103 	bic.w	r1, r1, #3
 801d4c4:	428c      	cmp	r4, r1
 801d4c6:	bf28      	it	cs
 801d4c8:	460c      	movcs	r4, r1
 801d4ca:	b2a1      	uxth	r1, r4
 801d4cc:	e003      	b.n	801d4d6 <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d4ce:	8b7b      	ldrh	r3, [r7, #26]
 801d4d0:	065b      	lsls	r3, r3, #25
 801d4d2:	d518      	bpl.n	801d506 <tcp_pbuf_prealloc+0x6e>
 801d4d4:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801d4d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d4da:	4640      	mov	r0, r8
 801d4dc:	f7fc fbc2 	bl	8019c64 <pbuf_alloc>
  if (p == NULL) {
 801d4e0:	4604      	mov	r4, r0
 801d4e2:	b168      	cbz	r0, 801d500 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801d4e4:	6803      	ldr	r3, [r0, #0]
 801d4e6:	b133      	cbz	r3, 801d4f6 <tcp_pbuf_prealloc+0x5e>
 801d4e8:	4b0f      	ldr	r3, [pc, #60]	; (801d528 <tcp_pbuf_prealloc+0x90>)
 801d4ea:	f240 120b 	movw	r2, #267	; 0x10b
 801d4ee:	490f      	ldr	r1, [pc, #60]	; (801d52c <tcp_pbuf_prealloc+0x94>)
 801d4f0:	480f      	ldr	r0, [pc, #60]	; (801d530 <tcp_pbuf_prealloc+0x98>)
 801d4f2:	f006 ffe3 	bl	80244bc <iprintf>
  *oversize = p->len - length;
 801d4f6:	8963      	ldrh	r3, [r4, #10]
 801d4f8:	1b5b      	subs	r3, r3, r5
 801d4fa:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801d4fc:	8125      	strh	r5, [r4, #8]
 801d4fe:	8165      	strh	r5, [r4, #10]
  return p;
}
 801d500:	4620      	mov	r0, r4
 801d502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801d506:	f1ba 0f00 	cmp.w	sl, #0
 801d50a:	d0d7      	beq.n	801d4bc <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801d50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d1d4      	bne.n	801d4bc <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801d512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d514:	2b00      	cmp	r3, #0
 801d516:	d1d1      	bne.n	801d4bc <tcp_pbuf_prealloc+0x24>
 801d518:	e7dc      	b.n	801d4d4 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d51a:	4b03      	ldr	r3, [pc, #12]	; (801d528 <tcp_pbuf_prealloc+0x90>)
 801d51c:	22e9      	movs	r2, #233	; 0xe9
 801d51e:	4905      	ldr	r1, [pc, #20]	; (801d534 <tcp_pbuf_prealloc+0x9c>)
 801d520:	4803      	ldr	r0, [pc, #12]	; (801d530 <tcp_pbuf_prealloc+0x98>)
 801d522:	f006 ffcb 	bl	80244bc <iprintf>
 801d526:	e7c4      	b.n	801d4b2 <tcp_pbuf_prealloc+0x1a>
 801d528:	080e0ea4 	.word	0x080e0ea4
 801d52c:	080e0ef8 	.word	0x080e0ef8
 801d530:	0802ac68 	.word	0x0802ac68
 801d534:	080e0ed8 	.word	0x080e0ed8

0801d538 <tcp_create_segment>:
{
 801d538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d53c:	460e      	mov	r6, r1
 801d53e:	f89d a020 	ldrb.w	sl, [sp, #32]
 801d542:	4690      	mov	r8, r2
 801d544:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d546:	4607      	mov	r7, r0
 801d548:	2800      	cmp	r0, #0
 801d54a:	d04c      	beq.n	801d5e6 <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d54c:	2e00      	cmp	r6, #0
 801d54e:	d052      	beq.n	801d5f6 <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d550:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d554:	22a8      	movs	r2, #168	; 0xa8
 801d556:	4934      	ldr	r1, [pc, #208]	; (801d628 <tcp_create_segment+0xf0>)
 801d558:	2004      	movs	r0, #4
 801d55a:	f7fb fff9 	bl	8019550 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d55e:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d562:	4604      	mov	r4, r0
 801d564:	2800      	cmp	r0, #0
 801d566:	d05a      	beq.n	801d61e <tcp_create_segment+0xe6>
  seg->flags = optflags;
 801d568:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801d56c:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d56e:	8932      	ldrh	r2, [r6, #8]
 801d570:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801d574:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d576:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801d578:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d57a:	d32c      	bcc.n	801d5d6 <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801d57c:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d580:	4630      	mov	r0, r6
 801d582:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801d584:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d586:	f7fc fc7f 	bl	8019e88 <pbuf_add_header>
 801d58a:	4606      	mov	r6, r0
 801d58c:	2800      	cmp	r0, #0
 801d58e:	d139      	bne.n	801d604 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d590:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d592:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d594:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d596:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d59a:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d59e:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d5a2:	f7fa fc91 	bl	8017ec8 <lwip_htons>
 801d5a6:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d5aa:	8b38      	ldrh	r0, [r7, #24]
 801d5ac:	68e7      	ldr	r7, [r4, #12]
 801d5ae:	f7fa fc8b 	bl	8017ec8 <lwip_htons>
 801d5b2:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d5b4:	4648      	mov	r0, r9
 801d5b6:	68e7      	ldr	r7, [r4, #12]
 801d5b8:	f7fa fc8a 	bl	8017ed0 <lwip_htonl>
 801d5bc:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d5be:	ea45 0008 	orr.w	r0, r5, r8
 801d5c2:	68e7      	ldr	r7, [r4, #12]
 801d5c4:	f7fa fc80 	bl	8017ec8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801d5c8:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d5ca:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801d5cc:	749e      	strb	r6, [r3, #18]
 801d5ce:	74de      	strb	r6, [r3, #19]
}
 801d5d0:	4620      	mov	r0, r4
 801d5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d5d6:	22b0      	movs	r2, #176	; 0xb0
 801d5d8:	4b13      	ldr	r3, [pc, #76]	; (801d628 <tcp_create_segment+0xf0>)
 801d5da:	4914      	ldr	r1, [pc, #80]	; (801d62c <tcp_create_segment+0xf4>)
 801d5dc:	4814      	ldr	r0, [pc, #80]	; (801d630 <tcp_create_segment+0xf8>)
 801d5de:	f006 ff6d 	bl	80244bc <iprintf>
  seg->len = p->tot_len - optlen;
 801d5e2:	8932      	ldrh	r2, [r6, #8]
 801d5e4:	e7ca      	b.n	801d57c <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d5e6:	4b10      	ldr	r3, [pc, #64]	; (801d628 <tcp_create_segment+0xf0>)
 801d5e8:	22a3      	movs	r2, #163	; 0xa3
 801d5ea:	4912      	ldr	r1, [pc, #72]	; (801d634 <tcp_create_segment+0xfc>)
 801d5ec:	4810      	ldr	r0, [pc, #64]	; (801d630 <tcp_create_segment+0xf8>)
 801d5ee:	f006 ff65 	bl	80244bc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d5f2:	2e00      	cmp	r6, #0
 801d5f4:	d1ac      	bne.n	801d550 <tcp_create_segment+0x18>
 801d5f6:	4b0c      	ldr	r3, [pc, #48]	; (801d628 <tcp_create_segment+0xf0>)
 801d5f8:	22a4      	movs	r2, #164	; 0xa4
 801d5fa:	490f      	ldr	r1, [pc, #60]	; (801d638 <tcp_create_segment+0x100>)
 801d5fc:	480c      	ldr	r0, [pc, #48]	; (801d630 <tcp_create_segment+0xf8>)
 801d5fe:	f006 ff5d 	bl	80244bc <iprintf>
 801d602:	e7a5      	b.n	801d550 <tcp_create_segment+0x18>
    TCP_STATS_INC(tcp.err);
 801d604:	4a0d      	ldr	r2, [pc, #52]	; (801d63c <tcp_create_segment+0x104>)
    tcp_seg_free(seg);
 801d606:	4620      	mov	r0, r4
    return NULL;
 801d608:	2400      	movs	r4, #0
    TCP_STATS_INC(tcp.err);
 801d60a:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 801d60e:	3301      	adds	r3, #1
 801d610:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 801d614:	f7fd fa4c 	bl	801aab0 <tcp_seg_free>
}
 801d618:	4620      	mov	r0, r4
 801d61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801d61e:	4630      	mov	r0, r6
 801d620:	f7fc fcd6 	bl	8019fd0 <pbuf_free>
    return NULL;
 801d624:	e7d4      	b.n	801d5d0 <tcp_create_segment+0x98>
 801d626:	bf00      	nop
 801d628:	080e0ea4 	.word	0x080e0ea4
 801d62c:	080e0f50 	.word	0x080e0f50
 801d630:	0802ac68 	.word	0x0802ac68
 801d634:	080e0f0c 	.word	0x080e0f0c
 801d638:	080e0f2c 	.word	0x080e0f2c
 801d63c:	2002db54 	.word	0x2002db54

0801d640 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d640:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801d642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d646:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801d648:	4606      	mov	r6, r0
 801d64a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d64c:	2022      	movs	r0, #34	; 0x22
 801d64e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801d652:	461c      	mov	r4, r3
 801d654:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801d658:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801d65c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d660:	f7fc fb00 	bl	8019c64 <pbuf_alloc>
  if (p != NULL) {
 801d664:	4605      	mov	r5, r0
 801d666:	b300      	cbz	r0, 801d6aa <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801d668:	8943      	ldrh	r3, [r0, #10]
 801d66a:	2b13      	cmp	r3, #19
 801d66c:	d920      	bls.n	801d6b0 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801d66e:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801d670:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801d672:	f7fa fc29 	bl	8017ec8 <lwip_htons>
 801d676:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801d678:	4650      	mov	r0, sl
 801d67a:	f7fa fc25 	bl	8017ec8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801d67e:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801d680:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801d682:	4630      	mov	r0, r6
 801d684:	f7fa fc24 	bl	8017ed0 <lwip_htonl>
 801d688:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801d68a:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801d68e:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801d690:	f7fa fc1a 	bl	8017ec8 <lwip_htons>
 801d694:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801d696:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801d698:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801d69a:	f7fa fc15 	bl	8017ec8 <lwip_htons>
    tcphdr->chksum = 0;
 801d69e:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801d6a0:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801d6a2:	7423      	strb	r3, [r4, #16]
 801d6a4:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801d6a6:	74a3      	strb	r3, [r4, #18]
 801d6a8:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801d6aa:	4628      	mov	r0, r5
 801d6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801d6b0:	4b03      	ldr	r3, [pc, #12]	; (801d6c0 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801d6b2:	f240 7223 	movw	r2, #1827	; 0x723
 801d6b6:	4903      	ldr	r1, [pc, #12]	; (801d6c4 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801d6b8:	4803      	ldr	r0, [pc, #12]	; (801d6c8 <tcp_output_alloc_header_common.constprop.0+0x88>)
 801d6ba:	f006 feff 	bl	80244bc <iprintf>
 801d6be:	e7d6      	b.n	801d66e <tcp_output_alloc_header_common.constprop.0+0x2e>
 801d6c0:	080e0ea4 	.word	0x080e0ea4
 801d6c4:	080e0f68 	.word	0x080e0f68
 801d6c8:	0802ac68 	.word	0x0802ac68

0801d6cc <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801d6cc:	b570      	push	{r4, r5, r6, lr}
 801d6ce:	460d      	mov	r5, r1
 801d6d0:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d6d2:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801d6d4:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d6d6:	b190      	cbz	r0, 801d6fe <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801d6d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801d6da:	2210      	movs	r2, #16
 801d6dc:	8b21      	ldrh	r1, [r4, #24]
 801d6de:	9302      	str	r3, [sp, #8]
 801d6e0:	e9cd 1200 	strd	r1, r2, [sp]
 801d6e4:	4632      	mov	r2, r6
 801d6e6:	4629      	mov	r1, r5
 801d6e8:	8ae3      	ldrh	r3, [r4, #22]
 801d6ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d6ec:	f7ff ffa8 	bl	801d640 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801d6f0:	b118      	cbz	r0, 801d6fa <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d6f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801d6f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d6f6:	4413      	add	r3, r2
 801d6f8:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801d6fa:	b004      	add	sp, #16
 801d6fc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d6fe:	4b04      	ldr	r3, [pc, #16]	; (801d710 <tcp_output_alloc_header.constprop.0+0x44>)
 801d700:	f240 7242 	movw	r2, #1858	; 0x742
 801d704:	4903      	ldr	r1, [pc, #12]	; (801d714 <tcp_output_alloc_header.constprop.0+0x48>)
 801d706:	4804      	ldr	r0, [pc, #16]	; (801d718 <tcp_output_alloc_header.constprop.0+0x4c>)
 801d708:	f006 fed8 	bl	80244bc <iprintf>
 801d70c:	e7e4      	b.n	801d6d8 <tcp_output_alloc_header.constprop.0+0xc>
 801d70e:	bf00      	nop
 801d710:	080e0ea4 	.word	0x080e0ea4
 801d714:	080e0f98 	.word	0x080e0f98
 801d718:	0802ac68 	.word	0x0802ac68

0801d71c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801d71c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d720:	4605      	mov	r5, r0
 801d722:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d724:	460c      	mov	r4, r1
{
 801d726:	4690      	mov	r8, r2
 801d728:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d72a:	2900      	cmp	r1, #0
 801d72c:	d03a      	beq.n	801d7a4 <tcp_output_control_segment+0x88>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d72e:	2d00      	cmp	r5, #0
 801d730:	d040      	beq.n	801d7b4 <tcp_output_control_segment+0x98>
 801d732:	7a28      	ldrb	r0, [r5, #8]
 801d734:	bb40      	cbnz	r0, 801d788 <tcp_output_control_segment+0x6c>
    return ip_route(src, dst);
 801d736:	4630      	mov	r0, r6
 801d738:	f004 f9c4 	bl	8021ac4 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801d73c:	4607      	mov	r7, r0
 801d73e:	b340      	cbz	r0, 801d792 <tcp_output_control_segment+0x76>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d740:	9600      	str	r6, [sp, #0]
 801d742:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801d744:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d748:	2106      	movs	r1, #6
 801d74a:	8922      	ldrh	r2, [r4, #8]
 801d74c:	4620      	mov	r0, r4
 801d74e:	f7fb f94f 	bl	80189f0 <ip_chksum_pseudo>
 801d752:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801d756:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801d758:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801d75a:	9500      	str	r5, [sp, #0]
 801d75c:	4632      	mov	r2, r6
 801d75e:	2506      	movs	r5, #6
    TCP_STATS_INC(tcp.xmit);
 801d760:	4e1e      	ldr	r6, [pc, #120]	; (801d7dc <tcp_output_control_segment+0xc0>)
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801d762:	9702      	str	r7, [sp, #8]
 801d764:	4641      	mov	r1, r8
 801d766:	9501      	str	r5, [sp, #4]
 801d768:	4620      	mov	r0, r4
    TCP_STATS_INC(tcp.xmit);
 801d76a:	f8b6 5090 	ldrh.w	r5, [r6, #144]	; 0x90
 801d76e:	3501      	adds	r5, #1
 801d770:	f8a6 5090 	strh.w	r5, [r6, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801d774:	f004 fbc6 	bl	8021f04 <ip4_output_if>
 801d778:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801d77a:	4620      	mov	r0, r4
 801d77c:	f7fc fc28 	bl	8019fd0 <pbuf_free>
  return err;
}
 801d780:	4628      	mov	r0, r5
 801d782:	b005      	add	sp, #20
 801d784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801d788:	f7fc f918 	bl	80199bc <netif_get_by_index>
  if (netif == NULL) {
 801d78c:	4607      	mov	r7, r0
 801d78e:	2800      	cmp	r0, #0
 801d790:	d1d6      	bne.n	801d740 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801d792:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801d796:	4620      	mov	r0, r4
 801d798:	f7fc fc1a 	bl	8019fd0 <pbuf_free>
}
 801d79c:	4628      	mov	r0, r5
 801d79e:	b005      	add	sp, #20
 801d7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d7a4:	4b0e      	ldr	r3, [pc, #56]	; (801d7e0 <tcp_output_control_segment+0xc4>)
 801d7a6:	f240 7287 	movw	r2, #1927	; 0x787
 801d7aa:	490e      	ldr	r1, [pc, #56]	; (801d7e4 <tcp_output_control_segment+0xc8>)
 801d7ac:	480e      	ldr	r0, [pc, #56]	; (801d7e8 <tcp_output_control_segment+0xcc>)
 801d7ae:	f006 fe85 	bl	80244bc <iprintf>
 801d7b2:	e7bc      	b.n	801d72e <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801d7b4:	4630      	mov	r0, r6
 801d7b6:	f004 f985 	bl	8021ac4 <ip4_route>
  if (netif == NULL) {
 801d7ba:	4607      	mov	r7, r0
 801d7bc:	2800      	cmp	r0, #0
 801d7be:	d0e8      	beq.n	801d792 <tcp_output_control_segment+0x76>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d7c0:	9600      	str	r6, [sp, #0]
 801d7c2:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801d7c4:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d7c8:	2106      	movs	r1, #6
 801d7ca:	8922      	ldrh	r2, [r4, #8]
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	f7fb f90f 	bl	80189f0 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801d7d2:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d7d4:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801d7d8:	e7bf      	b.n	801d75a <tcp_output_control_segment+0x3e>
 801d7da:	bf00      	nop
 801d7dc:	2002db54 	.word	0x2002db54
 801d7e0:	080e0ea4 	.word	0x080e0ea4
 801d7e4:	080e0fc0 	.word	0x080e0fc0
 801d7e8:	0802ac68 	.word	0x0802ac68

0801d7ec <tcp_write>:
{
 801d7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801d7f0:	2400      	movs	r4, #0
{
 801d7f2:	b091      	sub	sp, #68	; 0x44
 801d7f4:	9107      	str	r1, [sp, #28]
 801d7f6:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801d7f8:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801d7fc:	2800      	cmp	r0, #0
 801d7fe:	f000 831b 	beq.w	801de38 <tcp_write+0x64c>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801d802:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801d806:	4692      	mov	sl, r2
 801d808:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801d80a:	4681      	mov	r9, r0
 801d80c:	085b      	lsrs	r3, r3, #1
 801d80e:	4293      	cmp	r3, r2
 801d810:	bf28      	it	cs
 801d812:	4613      	movcs	r3, r2
 801d814:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801d816:	2b00      	cmp	r3, #0
 801d818:	bf08      	it	eq
 801d81a:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801d81c:	9b07      	ldr	r3, [sp, #28]
 801d81e:	2b00      	cmp	r3, #0
 801d820:	f000 8300 	beq.w	801de24 <tcp_write+0x638>
  if ((pcb->state != ESTABLISHED) &&
 801d824:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801d826:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801d828:	2a02      	cmp	r2, #2
 801d82a:	d902      	bls.n	801d832 <tcp_write+0x46>
 801d82c:	2b07      	cmp	r3, #7
 801d82e:	f040 82ae 	bne.w	801dd8e <tcp_write+0x5a2>
  } else if (len == 0) {
 801d832:	f1ba 0f00 	cmp.w	sl, #0
 801d836:	f000 80ec 	beq.w	801da12 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801d83a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801d83e:	4553      	cmp	r3, sl
 801d840:	f0c0 82c8 	bcc.w	801ddd4 <tcp_write+0x5e8>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801d844:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801d848:	2e08      	cmp	r6, #8
 801d84a:	f200 82cc 	bhi.w	801dde6 <tcp_write+0x5fa>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d84e:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801d852:	2e00      	cmp	r6, #0
 801d854:	f000 80d3 	beq.w	801d9fe <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d858:	2b00      	cmp	r3, #0
 801d85a:	f040 80dc 	bne.w	801da16 <tcp_write+0x22a>
 801d85e:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801d862:	f1b8 0f00 	cmp.w	r8, #0
 801d866:	f000 8274 	beq.w	801dd52 <tcp_write+0x566>
 801d86a:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d86c:	461a      	mov	r2, r3
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	2b00      	cmp	r3, #0
 801d872:	d1fb      	bne.n	801d86c <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d874:	7a94      	ldrb	r4, [r2, #10]
 801d876:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d878:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d87a:	00a4      	lsls	r4, r4, #2
 801d87c:	920b      	str	r2, [sp, #44]	; 0x2c
 801d87e:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d882:	191a      	adds	r2, r3, r4
 801d884:	4593      	cmp	fp, r2
 801d886:	f2c0 81b0 	blt.w	801dbea <tcp_write+0x3fe>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d88a:	ebab 0404 	sub.w	r4, fp, r4
 801d88e:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801d890:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d894:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801d896:	930a      	str	r3, [sp, #40]	; 0x28
 801d898:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	f000 80cf 	beq.w	801da40 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801d8a2:	42a3      	cmp	r3, r4
 801d8a4:	f200 8194 	bhi.w	801dbd0 <tcp_write+0x3e4>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801d8a8:	45a2      	cmp	sl, r4
 801d8aa:	4653      	mov	r3, sl
 801d8ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d8ae:	bf28      	it	cs
 801d8b0:	4623      	movcs	r3, r4
 801d8b2:	4293      	cmp	r3, r2
 801d8b4:	bf28      	it	cs
 801d8b6:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801d8b8:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801d8ba:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d8bc:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801d8be:	b292      	uxth	r2, r2
      space -= oversize_used;
 801d8c0:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801d8c2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d8c6:	2a00      	cmp	r2, #0
 801d8c8:	f000 818d 	beq.w	801dbe6 <tcp_write+0x3fa>
 801d8cc:	459a      	cmp	sl, r3
 801d8ce:	f000 818a 	beq.w	801dbe6 <tcp_write+0x3fa>
 801d8d2:	4bb6      	ldr	r3, [pc, #728]	; (801dbac <tcp_write+0x3c0>)
 801d8d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d8d8:	49b5      	ldr	r1, [pc, #724]	; (801dbb0 <tcp_write+0x3c4>)
 801d8da:	48b6      	ldr	r0, [pc, #728]	; (801dbb4 <tcp_write+0x3c8>)
 801d8dc:	f006 fdee 	bl	80244bc <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801d8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d8e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801d8e4:	459a      	cmp	sl, r3
 801d8e6:	f200 80b0 	bhi.w	801da4a <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d8ee:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801d8f0:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801d8f2:	45a2      	cmp	sl, r4
 801d8f4:	f240 80ee 	bls.w	801dad4 <tcp_write+0x2e8>
 801d8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8fa:	f04f 0800 	mov.w	r8, #0
 801d8fe:	f003 0301 	and.w	r3, r3, #1
 801d902:	f8cd 8014 	str.w	r8, [sp, #20]
 801d906:	9308      	str	r3, [sp, #32]
 801d908:	4643      	mov	r3, r8
 801d90a:	46d8      	mov	r8, fp
 801d90c:	469b      	mov	fp, r3
 801d90e:	e042      	b.n	801d996 <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801d910:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801d914:	2b00      	cmp	r3, #0
 801d916:	f040 80f1 	bne.w	801dafc <tcp_write+0x310>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801d91a:	2201      	movs	r2, #1
 801d91c:	4629      	mov	r1, r5
 801d91e:	2036      	movs	r0, #54	; 0x36
 801d920:	f7fc f9a0 	bl	8019c64 <pbuf_alloc>
 801d924:	2800      	cmp	r0, #0
 801d926:	f000 8101 	beq.w	801db2c <tcp_write+0x340>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801d92a:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d92c:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801d92e:	9006      	str	r0, [sp, #24]
 801d930:	4422      	add	r2, r4
 801d932:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d934:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d938:	2036      	movs	r0, #54	; 0x36
 801d93a:	f7fc f993 	bl	8019c64 <pbuf_alloc>
 801d93e:	9b06      	ldr	r3, [sp, #24]
 801d940:	4607      	mov	r7, r0
 801d942:	2800      	cmp	r0, #0
 801d944:	f000 819f 	beq.w	801dc86 <tcp_write+0x49a>
      pbuf_cat(p/*header*/, p2/*data*/);
 801d948:	4619      	mov	r1, r3
 801d94a:	f7fc fb73 	bl	801a034 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801d94e:	4638      	mov	r0, r7
 801d950:	f7fc fb52 	bl	8019ff8 <pbuf_clen>
 801d954:	4430      	add	r0, r6
 801d956:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801d958:	2e09      	cmp	r6, #9
 801d95a:	d84a      	bhi.n	801d9f2 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801d95c:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801d960:	2200      	movs	r2, #0
 801d962:	4639      	mov	r1, r7
 801d964:	4648      	mov	r0, r9
 801d966:	4423      	add	r3, r4
 801d968:	9200      	str	r2, [sp, #0]
 801d96a:	f7ff fde5 	bl	801d538 <tcp_create_segment>
 801d96e:	4607      	mov	r7, r0
 801d970:	2800      	cmp	r0, #0
 801d972:	f000 80db 	beq.w	801db2c <tcp_write+0x340>
    if (queue == NULL) {
 801d976:	9b05      	ldr	r3, [sp, #20]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	f000 80a3 	beq.w	801dac4 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801d97e:	f1bb 0f00 	cmp.w	fp, #0
 801d982:	f000 80c3 	beq.w	801db0c <tcp_write+0x320>
    pos += seglen;
 801d986:	442c      	add	r4, r5
      prev_seg->next = seg;
 801d988:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801d98c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801d98e:	45a2      	cmp	sl, r4
 801d990:	f240 809e 	bls.w	801dad0 <tcp_write+0x2e4>
 801d994:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801d996:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d99a:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801d99c:	b2ad      	uxth	r5, r5
 801d99e:	4545      	cmp	r5, r8
 801d9a0:	bf28      	it	cs
 801d9a2:	4645      	movcs	r5, r8
 801d9a4:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d0b2      	beq.n	801d910 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801d9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9ac:	4642      	mov	r2, r8
 801d9ae:	4629      	mov	r1, r5
 801d9b0:	2036      	movs	r0, #54	; 0x36
 801d9b2:	e9cd 9300 	strd	r9, r3, [sp]
 801d9b6:	9b05      	ldr	r3, [sp, #20]
 801d9b8:	fab3 f383 	clz	r3, r3
 801d9bc:	095b      	lsrs	r3, r3, #5
 801d9be:	9302      	str	r3, [sp, #8]
 801d9c0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801d9c4:	f7ff fd68 	bl	801d498 <tcp_pbuf_prealloc>
 801d9c8:	4607      	mov	r7, r0
 801d9ca:	2800      	cmp	r0, #0
 801d9cc:	f000 80ae 	beq.w	801db2c <tcp_write+0x340>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801d9d0:	8943      	ldrh	r3, [r0, #10]
 801d9d2:	42ab      	cmp	r3, r5
 801d9d4:	f0c0 80a2 	bcc.w	801db1c <tcp_write+0x330>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801d9d8:	9b07      	ldr	r3, [sp, #28]
 801d9da:	462a      	mov	r2, r5
 801d9dc:	6878      	ldr	r0, [r7, #4]
 801d9de:	1919      	adds	r1, r3, r4
 801d9e0:	f005 fda8 	bl	8023534 <memcpy>
    queuelen += pbuf_clen(p);
 801d9e4:	4638      	mov	r0, r7
 801d9e6:	f7fc fb07 	bl	8019ff8 <pbuf_clen>
 801d9ea:	4430      	add	r0, r6
 801d9ec:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801d9ee:	2e09      	cmp	r6, #9
 801d9f0:	d9b4      	bls.n	801d95c <tcp_write+0x170>
      pbuf_free(p);
 801d9f2:	4638      	mov	r0, r7
 801d9f4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d9f8:	f7fc faea 	bl	8019fd0 <pbuf_free>
      goto memerr;
 801d9fc:	e098      	b.n	801db30 <tcp_write+0x344>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	f000 80bd 	beq.w	801db7e <tcp_write+0x392>
 801da04:	4b69      	ldr	r3, [pc, #420]	; (801dbac <tcp_write+0x3c0>)
 801da06:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801da0a:	496b      	ldr	r1, [pc, #428]	; (801dbb8 <tcp_write+0x3cc>)
 801da0c:	4869      	ldr	r0, [pc, #420]	; (801dbb4 <tcp_write+0x3c8>)
 801da0e:	f006 fd55 	bl	80244bc <iprintf>
  queuelen = pcb->snd_queuelen;
 801da12:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801da16:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801da1a:	f1b8 0f00 	cmp.w	r8, #0
 801da1e:	f47f af24 	bne.w	801d86a <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801da22:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801da26:	2b00      	cmp	r3, #0
 801da28:	f040 80b3 	bne.w	801db92 <tcp_write+0x3a6>
  while (pos < len) {
 801da2c:	f1ba 0f00 	cmp.w	sl, #0
 801da30:	f000 81e8 	beq.w	801de04 <tcp_write+0x618>
          extendlen = seglen;
 801da34:	2400      	movs	r4, #0
 801da36:	940d      	str	r4, [sp, #52]	; 0x34
 801da38:	940c      	str	r4, [sp, #48]	; 0x30
 801da3a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801da3e:	e75b      	b.n	801d8f8 <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801da40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801da42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da44:	459a      	cmp	sl, r3
 801da46:	f67f af50 	bls.w	801d8ea <tcp_write+0xfe>
 801da4a:	2c00      	cmp	r4, #0
 801da4c:	f43f af4d 	beq.w	801d8ea <tcp_write+0xfe>
 801da50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801da52:	8912      	ldrh	r2, [r2, #8]
 801da54:	920d      	str	r2, [sp, #52]	; 0x34
 801da56:	2a00      	cmp	r2, #0
 801da58:	f000 80a3 	beq.w	801dba2 <tcp_write+0x3b6>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801da5c:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801da60:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801da62:	42a7      	cmp	r7, r4
 801da64:	bfa8      	it	ge
 801da66:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801da68:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801da6a:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801da6c:	f100 8199 	bmi.w	801dda2 <tcp_write+0x5b6>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801da70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da72:	685a      	ldr	r2, [r3, #4]
 801da74:	4613      	mov	r3, r2
 801da76:	6812      	ldr	r2, [r2, #0]
 801da78:	2a00      	cmp	r2, #0
 801da7a:	d1fb      	bne.n	801da74 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801da7c:	920c      	str	r2, [sp, #48]	; 0x30
 801da7e:	7b1a      	ldrb	r2, [r3, #12]
 801da80:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801da84:	d106      	bne.n	801da94 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801da86:	895a      	ldrh	r2, [r3, #10]
 801da88:	685b      	ldr	r3, [r3, #4]
 801da8a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801da8c:	9a07      	ldr	r2, [sp, #28]
 801da8e:	429a      	cmp	r2, r3
 801da90:	f000 8178 	beq.w	801dd84 <tcp_write+0x598>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801da94:	2201      	movs	r2, #1
 801da96:	4629      	mov	r1, r5
 801da98:	2000      	movs	r0, #0
 801da9a:	f7fc f8e3 	bl	8019c64 <pbuf_alloc>
 801da9e:	900c      	str	r0, [sp, #48]	; 0x30
 801daa0:	2800      	cmp	r0, #0
 801daa2:	f000 8149 	beq.w	801dd38 <tcp_write+0x54c>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801daa6:	9b07      	ldr	r3, [sp, #28]
 801daa8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801daaa:	440b      	add	r3, r1
 801daac:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801daae:	f7fc faa3 	bl	8019ff8 <pbuf_clen>
 801dab2:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801dab4:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801dab6:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801dab8:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801daba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dabc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dabe:	18ec      	adds	r4, r5, r3
 801dac0:	b2a4      	uxth	r4, r4
 801dac2:	e716      	b.n	801d8f2 <tcp_write+0x106>
    pos += seglen;
 801dac4:	442c      	add	r4, r5
 801dac6:	9005      	str	r0, [sp, #20]
 801dac8:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801daca:	45a2      	cmp	sl, r4
 801dacc:	f63f af62 	bhi.w	801d994 <tcp_write+0x1a8>
 801dad0:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801dad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	f000 80e5 	beq.w	801dca6 <tcp_write+0x4ba>
    for (p = last_unsent->p; p; p = p->next) {
 801dadc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dade:	6854      	ldr	r4, [r2, #4]
 801dae0:	2c00      	cmp	r4, #0
 801dae2:	f000 809a 	beq.w	801dc1a <tcp_write+0x42e>
 801dae6:	469b      	mov	fp, r3
 801dae8:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801daea:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801daec:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801daee:	445b      	add	r3, fp
 801daf0:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801daf2:	2a00      	cmp	r2, #0
 801daf4:	f000 8083 	beq.w	801dbfe <tcp_write+0x412>
  u16_t extendlen = 0;
 801daf8:	4614      	mov	r4, r2
 801dafa:	e7f6      	b.n	801daea <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801dafc:	4b2b      	ldr	r3, [pc, #172]	; (801dbac <tcp_write+0x3c0>)
 801dafe:	f240 2271 	movw	r2, #625	; 0x271
 801db02:	492e      	ldr	r1, [pc, #184]	; (801dbbc <tcp_write+0x3d0>)
 801db04:	482b      	ldr	r0, [pc, #172]	; (801dbb4 <tcp_write+0x3c8>)
 801db06:	f006 fcd9 	bl	80244bc <iprintf>
 801db0a:	e706      	b.n	801d91a <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801db0c:	4b27      	ldr	r3, [pc, #156]	; (801dbac <tcp_write+0x3c0>)
 801db0e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801db12:	492b      	ldr	r1, [pc, #172]	; (801dbc0 <tcp_write+0x3d4>)
 801db14:	4827      	ldr	r0, [pc, #156]	; (801dbb4 <tcp_write+0x3c8>)
 801db16:	f006 fcd1 	bl	80244bc <iprintf>
 801db1a:	e734      	b.n	801d986 <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801db1c:	4b23      	ldr	r3, [pc, #140]	; (801dbac <tcp_write+0x3c0>)
 801db1e:	f240 2266 	movw	r2, #614	; 0x266
 801db22:	4928      	ldr	r1, [pc, #160]	; (801dbc4 <tcp_write+0x3d8>)
 801db24:	4823      	ldr	r0, [pc, #140]	; (801dbb4 <tcp_write+0x3c8>)
 801db26:	f006 fcc9 	bl	80244bc <iprintf>
 801db2a:	e755      	b.n	801d9d8 <tcp_write+0x1ec>
 801db2c:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801db30:	f8b9 301a 	ldrh.w	r3, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801db34:	4a24      	ldr	r2, [pc, #144]	; (801dbc8 <tcp_write+0x3dc>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801db36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db3a:	f8a9 301a 	strh.w	r3, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801db3e:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801db42:	3301      	adds	r3, #1
 801db44:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
  if (concat_p != NULL) {
 801db48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db4a:	b113      	cbz	r3, 801db52 <tcp_write+0x366>
    pbuf_free(concat_p);
 801db4c:	4618      	mov	r0, r3
 801db4e:	f7fc fa3f 	bl	8019fd0 <pbuf_free>
  if (queue != NULL) {
 801db52:	f1b8 0f00 	cmp.w	r8, #0
 801db56:	d002      	beq.n	801db5e <tcp_write+0x372>
    tcp_segs_free(queue);
 801db58:	4640      	mov	r0, r8
 801db5a:	f7fc ff97 	bl	801aa8c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801db5e:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801db62:	b13b      	cbz	r3, 801db74 <tcp_write+0x388>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801db64:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801db68:	b923      	cbnz	r3, 801db74 <tcp_write+0x388>
 801db6a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801db6e:	2b00      	cmp	r3, #0
 801db70:	f000 808f 	beq.w	801dc92 <tcp_write+0x4a6>
  return ERR_MEM;
 801db74:	f04f 30ff 	mov.w	r0, #4294967295
}
 801db78:	b011      	add	sp, #68	; 0x44
 801db7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801db7e:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801db82:	2b00      	cmp	r3, #0
 801db84:	f47f af3e 	bne.w	801da04 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801db88:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	f43f af51 	beq.w	801da34 <tcp_write+0x248>
 801db92:	4b06      	ldr	r3, [pc, #24]	; (801dbac <tcp_write+0x3c0>)
 801db94:	f240 224a 	movw	r2, #586	; 0x24a
 801db98:	490c      	ldr	r1, [pc, #48]	; (801dbcc <tcp_write+0x3e0>)
 801db9a:	4806      	ldr	r0, [pc, #24]	; (801dbb4 <tcp_write+0x3c8>)
 801db9c:	f006 fc8e 	bl	80244bc <iprintf>
 801dba0:	e744      	b.n	801da2c <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 801dba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dba4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dba6:	930c      	str	r3, [sp, #48]	; 0x30
 801dba8:	e6a6      	b.n	801d8f8 <tcp_write+0x10c>
 801dbaa:	bf00      	nop
 801dbac:	080e0ea4 	.word	0x080e0ea4
 801dbb0:	080e10e0 	.word	0x080e10e0
 801dbb4:	0802ac68 	.word	0x0802ac68
 801dbb8:	080e1074 	.word	0x080e1074
 801dbbc:	080e119c 	.word	0x080e119c
 801dbc0:	080e11ac 	.word	0x080e11ac
 801dbc4:	080e115c 	.word	0x080e115c
 801dbc8:	2002db54 	.word	0x2002db54
 801dbcc:	080e112c 	.word	0x080e112c
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801dbd0:	4b9f      	ldr	r3, [pc, #636]	; (801de50 <tcp_write+0x664>)
 801dbd2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801dbd6:	499f      	ldr	r1, [pc, #636]	; (801de54 <tcp_write+0x668>)
 801dbd8:	489f      	ldr	r0, [pc, #636]	; (801de58 <tcp_write+0x66c>)
 801dbda:	f006 fc6f 	bl	80244bc <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801dbde:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801dbe2:	930a      	str	r3, [sp, #40]	; 0x28
 801dbe4:	e660      	b.n	801d8a8 <tcp_write+0xbc>
 801dbe6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dbe8:	e72b      	b.n	801da42 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801dbea:	4b99      	ldr	r3, [pc, #612]	; (801de50 <tcp_write+0x664>)
 801dbec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801dbf0:	499a      	ldr	r1, [pc, #616]	; (801de5c <tcp_write+0x670>)
 801dbf2:	4899      	ldr	r0, [pc, #612]	; (801de58 <tcp_write+0x66c>)
 801dbf4:	f006 fc62 	bl	80244bc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801dbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dbfa:	891b      	ldrh	r3, [r3, #8]
 801dbfc:	e645      	b.n	801d88a <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801dbfe:	8963      	ldrh	r3, [r4, #10]
 801dc00:	465a      	mov	r2, fp
 801dc02:	6860      	ldr	r0, [r4, #4]
 801dc04:	4629      	mov	r1, r5
 801dc06:	4418      	add	r0, r3
 801dc08:	f005 fc94 	bl	8023534 <memcpy>
        p->len += oversize_used;
 801dc0c:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801dc0e:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801dc10:	445b      	add	r3, fp
 801dc12:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801dc14:	2a00      	cmp	r2, #0
 801dc16:	f47f af6f 	bne.w	801daf8 <tcp_write+0x30c>
    last_unsent->len += oversize_used;
 801dc1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dc1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801dc1e:	8913      	ldrh	r3, [r2, #8]
 801dc20:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 801dc22:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801dc26:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 801dc28:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801dc2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	d061      	beq.n	801dcf6 <tcp_write+0x50a>
    pbuf_cat(last_unsent->p, concat_p);
 801dc32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dc34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dc36:	6860      	ldr	r0, [r4, #4]
 801dc38:	4629      	mov	r1, r5
 801dc3a:	f7fc f9fb 	bl	801a034 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801dc3e:	892a      	ldrh	r2, [r5, #8]
 801dc40:	8923      	ldrh	r3, [r4, #8]
 801dc42:	4413      	add	r3, r2
 801dc44:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801dc46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc48:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801dc4c:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 801dc50:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 801dc54:	4453      	add	r3, sl
 801dc56:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801dc5a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801dc5e:	eba3 0a0a 	sub.w	sl, r3, sl
 801dc62:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801dc66:	b11e      	cbz	r6, 801dc70 <tcp_write+0x484>
    LWIP_ASSERT("tcp_write: valid queue length",
 801dc68:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d036      	beq.n	801dcde <tcp_write+0x4f2>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801dc70:	b12f      	cbz	r7, 801dc7e <tcp_write+0x492>
 801dc72:	68fb      	ldr	r3, [r7, #12]
 801dc74:	b11b      	cbz	r3, 801dc7e <tcp_write+0x492>
 801dc76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc78:	f012 0502 	ands.w	r5, r2, #2
 801dc7c:	d025      	beq.n	801dcca <tcp_write+0x4de>
  return ERR_OK;
 801dc7e:	2000      	movs	r0, #0
}
 801dc80:	b011      	add	sp, #68	; 0x44
 801dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801dc86:	4618      	mov	r0, r3
 801dc88:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801dc8c:	f7fc f9a0 	bl	8019fd0 <pbuf_free>
        goto memerr;
 801dc90:	e74e      	b.n	801db30 <tcp_write+0x344>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801dc92:	4b6f      	ldr	r3, [pc, #444]	; (801de50 <tcp_write+0x664>)
 801dc94:	f240 3227 	movw	r2, #807	; 0x327
 801dc98:	4971      	ldr	r1, [pc, #452]	; (801de60 <tcp_write+0x674>)
 801dc9a:	486f      	ldr	r0, [pc, #444]	; (801de58 <tcp_write+0x66c>)
 801dc9c:	f006 fc0e 	bl	80244bc <iprintf>
  return ERR_MEM;
 801dca0:	f04f 30ff 	mov.w	r0, #4294967295
 801dca4:	e768      	b.n	801db78 <tcp_write+0x38c>
  pcb->unsent_oversize = oversize;
 801dca6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801dcaa:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801dcae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d058      	beq.n	801dd66 <tcp_write+0x57a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801dcb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dcb6:	2b00      	cmp	r3, #0
 801dcb8:	d1bb      	bne.n	801dc32 <tcp_write+0x446>
 801dcba:	4b65      	ldr	r3, [pc, #404]	; (801de50 <tcp_write+0x664>)
 801dcbc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801dcc0:	4968      	ldr	r1, [pc, #416]	; (801de64 <tcp_write+0x678>)
 801dcc2:	4865      	ldr	r0, [pc, #404]	; (801de58 <tcp_write+0x66c>)
 801dcc4:	f006 fbfa 	bl	80244bc <iprintf>
 801dcc8:	e7b3      	b.n	801dc32 <tcp_write+0x446>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801dcca:	2008      	movs	r0, #8
 801dccc:	899c      	ldrh	r4, [r3, #12]
 801dcce:	f7fa f8fb 	bl	8017ec8 <lwip_htons>
 801dcd2:	4602      	mov	r2, r0
 801dcd4:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801dcd6:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801dcd8:	4314      	orrs	r4, r2
 801dcda:	819c      	strh	r4, [r3, #12]
 801dcdc:	e74c      	b.n	801db78 <tcp_write+0x38c>
    LWIP_ASSERT("tcp_write: valid queue length",
 801dcde:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d1c4      	bne.n	801dc70 <tcp_write+0x484>
 801dce6:	4b5a      	ldr	r3, [pc, #360]	; (801de50 <tcp_write+0x664>)
 801dce8:	f240 3212 	movw	r2, #786	; 0x312
 801dcec:	495c      	ldr	r1, [pc, #368]	; (801de60 <tcp_write+0x674>)
 801dcee:	485a      	ldr	r0, [pc, #360]	; (801de58 <tcp_write+0x66c>)
 801dcf0:	f006 fbe4 	bl	80244bc <iprintf>
 801dcf4:	e7bc      	b.n	801dc70 <tcp_write+0x484>
  } else if (extendlen > 0) {
 801dcf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d0a4      	beq.n	801dc46 <tcp_write+0x45a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801dcfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dcfe:	6859      	ldr	r1, [r3, #4]
 801dd00:	2900      	cmp	r1, #0
 801dd02:	d035      	beq.n	801dd70 <tcp_write+0x584>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dd04:	680a      	ldr	r2, [r1, #0]
 801dd06:	2a00      	cmp	r2, #0
 801dd08:	f000 80a0 	beq.w	801de4c <tcp_write+0x660>
 801dd0c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dd0e:	e000      	b.n	801dd12 <tcp_write+0x526>
 801dd10:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801dd12:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dd14:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801dd16:	4423      	add	r3, r4
 801dd18:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dd1a:	4611      	mov	r1, r2
 801dd1c:	2800      	cmp	r0, #0
 801dd1e:	d1f7      	bne.n	801dd10 <tcp_write+0x524>
    p->tot_len += extendlen;
 801dd20:	8913      	ldrh	r3, [r2, #8]
 801dd22:	990d      	ldr	r1, [sp, #52]	; 0x34
 801dd24:	440b      	add	r3, r1
 801dd26:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 801dd28:	8953      	ldrh	r3, [r2, #10]
 801dd2a:	440b      	add	r3, r1
 801dd2c:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 801dd2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dd30:	8913      	ldrh	r3, [r2, #8]
 801dd32:	440b      	add	r3, r1
 801dd34:	8113      	strh	r3, [r2, #8]
 801dd36:	e786      	b.n	801dc46 <tcp_write+0x45a>
  TCP_STATS_INC(tcp.memerr);
 801dd38:	494b      	ldr	r1, [pc, #300]	; (801de68 <tcp_write+0x67c>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dd3a:	f8b9 201a 	ldrh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801dd3e:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dd42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801dd46:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dd48:	f8a9 201a 	strh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801dd4c:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
  if (concat_p != NULL) {
 801dd50:	e705      	b.n	801db5e <tcp_write+0x372>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801dd52:	4b3f      	ldr	r3, [pc, #252]	; (801de50 <tcp_write+0x664>)
 801dd54:	f240 1255 	movw	r2, #341	; 0x155
 801dd58:	4944      	ldr	r1, [pc, #272]	; (801de6c <tcp_write+0x680>)
 801dd5a:	483f      	ldr	r0, [pc, #252]	; (801de58 <tcp_write+0x66c>)
 801dd5c:	f006 fbae 	bl	80244bc <iprintf>
  queuelen = pcb->snd_queuelen;
 801dd60:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801dd64:	e657      	b.n	801da16 <tcp_write+0x22a>
  } else if (extendlen > 0) {
 801dd66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd68:	b1a3      	cbz	r3, 801dd94 <tcp_write+0x5a8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801dd6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d1c5      	bne.n	801dcfc <tcp_write+0x510>
 801dd70:	4b37      	ldr	r3, [pc, #220]	; (801de50 <tcp_write+0x664>)
 801dd72:	f240 22e6 	movw	r2, #742	; 0x2e6
 801dd76:	493e      	ldr	r1, [pc, #248]	; (801de70 <tcp_write+0x684>)
 801dd78:	4837      	ldr	r0, [pc, #220]	; (801de58 <tcp_write+0x66c>)
 801dd7a:	f006 fb9f 	bl	80244bc <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd80:	6859      	ldr	r1, [r3, #4]
 801dd82:	e7bf      	b.n	801dd04 <tcp_write+0x518>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801dd84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d143      	bne.n	801de12 <tcp_write+0x626>
          extendlen = seglen;
 801dd8a:	950d      	str	r5, [sp, #52]	; 0x34
 801dd8c:	e695      	b.n	801daba <tcp_write+0x2ce>
    return ERR_CONN;
 801dd8e:	f06f 000a 	mvn.w	r0, #10
 801dd92:	e6f1      	b.n	801db78 <tcp_write+0x38c>
  if (last_unsent == NULL) {
 801dd94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	f47f af55 	bne.w	801dc46 <tcp_write+0x45a>
    pcb->unsent = queue;
 801dd9c:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801dda0:	e754      	b.n	801dc4c <tcp_write+0x460>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801dda2:	e9cd 9300 	strd	r9, r3, [sp]
 801dda6:	2301      	movs	r3, #1
 801dda8:	4622      	mov	r2, r4
 801ddaa:	4629      	mov	r1, r5
 801ddac:	2000      	movs	r0, #0
 801ddae:	9302      	str	r3, [sp, #8]
 801ddb0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801ddb4:	f7ff fb70 	bl	801d498 <tcp_pbuf_prealloc>
 801ddb8:	4603      	mov	r3, r0
 801ddba:	4604      	mov	r4, r0
 801ddbc:	900c      	str	r0, [sp, #48]	; 0x30
 801ddbe:	2800      	cmp	r0, #0
 801ddc0:	d0ba      	beq.n	801dd38 <tcp_write+0x54c>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ddc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ddc4:	462a      	mov	r2, r5
 801ddc6:	9907      	ldr	r1, [sp, #28]
 801ddc8:	4401      	add	r1, r0
 801ddca:	6858      	ldr	r0, [r3, #4]
 801ddcc:	f005 fbb2 	bl	8023534 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	e66c      	b.n	801daae <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ddd4:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801ddd8:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dde0:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801dde4:	e6c8      	b.n	801db78 <tcp_write+0x38c>
    TCP_STATS_INC(tcp.memerr);
 801dde6:	4920      	ldr	r1, [pc, #128]	; (801de68 <tcp_write+0x67c>)
    return ERR_MEM;
 801dde8:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ddec:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    TCP_STATS_INC(tcp.memerr);
 801ddf0:	f8b1 209c 	ldrh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ddf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801ddf8:	3201      	adds	r2, #1
 801ddfa:	f8a1 209c 	strh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ddfe:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801de02:	e6b9      	b.n	801db78 <tcp_write+0x38c>
  pcb->unsent_oversize = oversize;
 801de04:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801de08:	46d0      	mov	r8, sl
 801de0a:	4657      	mov	r7, sl
 801de0c:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801de10:	e7c4      	b.n	801dd9c <tcp_write+0x5b0>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801de12:	4b0f      	ldr	r3, [pc, #60]	; (801de50 <tcp_write+0x664>)
 801de14:	f240 2231 	movw	r2, #561	; 0x231
 801de18:	4916      	ldr	r1, [pc, #88]	; (801de74 <tcp_write+0x688>)
 801de1a:	480f      	ldr	r0, [pc, #60]	; (801de58 <tcp_write+0x66c>)
 801de1c:	f006 fb4e 	bl	80244bc <iprintf>
          extendlen = seglen;
 801de20:	950d      	str	r5, [sp, #52]	; 0x34
 801de22:	e64a      	b.n	801daba <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801de24:	4b0a      	ldr	r3, [pc, #40]	; (801de50 <tcp_write+0x664>)
 801de26:	f240 12ad 	movw	r2, #429	; 0x1ad
 801de2a:	4913      	ldr	r1, [pc, #76]	; (801de78 <tcp_write+0x68c>)
 801de2c:	480a      	ldr	r0, [pc, #40]	; (801de58 <tcp_write+0x66c>)
 801de2e:	f006 fb45 	bl	80244bc <iprintf>
 801de32:	f06f 000f 	mvn.w	r0, #15
 801de36:	e69f      	b.n	801db78 <tcp_write+0x38c>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801de38:	4b05      	ldr	r3, [pc, #20]	; (801de50 <tcp_write+0x664>)
 801de3a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801de3e:	490f      	ldr	r1, [pc, #60]	; (801de7c <tcp_write+0x690>)
 801de40:	4805      	ldr	r0, [pc, #20]	; (801de58 <tcp_write+0x66c>)
 801de42:	f006 fb3b 	bl	80244bc <iprintf>
 801de46:	f06f 000f 	mvn.w	r0, #15
 801de4a:	e695      	b.n	801db78 <tcp_write+0x38c>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801de4c:	460a      	mov	r2, r1
 801de4e:	e767      	b.n	801dd20 <tcp_write+0x534>
 801de50:	080e0ea4 	.word	0x080e0ea4
 801de54:	080e10c0 	.word	0x080e10c0
 801de58:	0802ac68 	.word	0x0802ac68
 801de5c:	080e10a8 	.word	0x080e10a8
 801de60:	080e1230 	.word	0x080e1230
 801de64:	080e11c0 	.word	0x080e11c0
 801de68:	2002db54 	.word	0x2002db54
 801de6c:	080e1038 	.word	0x080e1038
 801de70:	080e11f8 	.word	0x080e11f8
 801de74:	080e1100 	.word	0x080e1100
 801de78:	080e1004 	.word	0x080e1004
 801de7c:	080e0fec 	.word	0x080e0fec

0801de80 <tcp_split_unsent_seg>:
{
 801de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801de84:	4605      	mov	r5, r0
{
 801de86:	b083      	sub	sp, #12
 801de88:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801de8a:	2800      	cmp	r0, #0
 801de8c:	f000 80b8 	beq.w	801e000 <tcp_split_unsent_seg+0x180>
  useg = pcb->unsent;
 801de90:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801de92:	b3a6      	cbz	r6, 801defe <tcp_split_unsent_seg+0x7e>
  if (split == 0) {
 801de94:	2c00      	cmp	r4, #0
 801de96:	f000 80c4 	beq.w	801e022 <tcp_split_unsent_seg+0x1a2>
  if (useg->len <= split) {
 801de9a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801de9e:	45a1      	cmp	r9, r4
 801dea0:	f240 80aa 	bls.w	801dff8 <tcp_split_unsent_seg+0x178>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801dea4:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801dea6:	42a3      	cmp	r3, r4
 801dea8:	d32e      	bcc.n	801df08 <tcp_split_unsent_seg+0x88>
  optflags = useg->flags;
 801deaa:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801deae:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801deb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801deb6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801deb8:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801debc:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801dec0:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801dec4:	eb08 010b 	add.w	r1, r8, fp
 801dec8:	b289      	uxth	r1, r1
 801deca:	f7fb fecb 	bl	8019c64 <pbuf_alloc>
  if (p == NULL) {
 801dece:	4607      	mov	r7, r0
 801ded0:	b380      	cbz	r0, 801df34 <tcp_split_unsent_seg+0xb4>
  offset = useg->p->tot_len - useg->len + split;
 801ded2:	6870      	ldr	r0, [r6, #4]
 801ded4:	8932      	ldrh	r2, [r6, #8]
 801ded6:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ded8:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 801deda:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801dedc:	4642      	mov	r2, r8
 801dede:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 801dee0:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801dee2:	b29b      	uxth	r3, r3
 801dee4:	f7fc f918 	bl	801a118 <pbuf_copy_partial>
 801dee8:	4540      	cmp	r0, r8
 801deea:	d02e      	beq.n	801df4a <tcp_split_unsent_seg+0xca>
  TCP_STATS_INC(tcp.memerr);
 801deec:	4a52      	ldr	r2, [pc, #328]	; (801e038 <tcp_split_unsent_seg+0x1b8>)
    pbuf_free(p);
 801deee:	4638      	mov	r0, r7
  TCP_STATS_INC(tcp.memerr);
 801def0:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801def4:	3301      	adds	r3, #1
 801def6:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pbuf_free(p);
 801defa:	f7fc f869 	bl	8019fd0 <pbuf_free>
  return ERR_MEM;
 801defe:	f04f 30ff 	mov.w	r0, #4294967295
}
 801df02:	b003      	add	sp, #12
 801df04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801df08:	4b4c      	ldr	r3, [pc, #304]	; (801e03c <tcp_split_unsent_seg+0x1bc>)
 801df0a:	f240 325b 	movw	r2, #859	; 0x35b
 801df0e:	494c      	ldr	r1, [pc, #304]	; (801e040 <tcp_split_unsent_seg+0x1c0>)
 801df10:	484c      	ldr	r0, [pc, #304]	; (801e044 <tcp_split_unsent_seg+0x1c4>)
 801df12:	f006 fad3 	bl	80244bc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801df16:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801df1a:	f1b9 0f00 	cmp.w	r9, #0
 801df1e:	d1c4      	bne.n	801deaa <tcp_split_unsent_seg+0x2a>
 801df20:	4b46      	ldr	r3, [pc, #280]	; (801e03c <tcp_split_unsent_seg+0x1bc>)
 801df22:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801df26:	4948      	ldr	r1, [pc, #288]	; (801e048 <tcp_split_unsent_seg+0x1c8>)
 801df28:	4846      	ldr	r0, [pc, #280]	; (801e044 <tcp_split_unsent_seg+0x1c4>)
 801df2a:	f006 fac7 	bl	80244bc <iprintf>
  remainder = useg->len - split;
 801df2e:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801df32:	e7ba      	b.n	801deaa <tcp_split_unsent_seg+0x2a>
  TCP_STATS_INC(tcp.memerr);
 801df34:	4a40      	ldr	r2, [pc, #256]	; (801e038 <tcp_split_unsent_seg+0x1b8>)
  return ERR_MEM;
 801df36:	f04f 30ff 	mov.w	r0, #4294967295
  TCP_STATS_INC(tcp.memerr);
 801df3a:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801df3e:	3301      	adds	r3, #1
 801df40:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
}
 801df44:	b003      	add	sp, #12
 801df46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801df4a:	68f3      	ldr	r3, [r6, #12]
 801df4c:	8998      	ldrh	r0, [r3, #12]
 801df4e:	f7f9 ffbb 	bl	8017ec8 <lwip_htons>
  if (split_flags & TCP_PSH) {
 801df52:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801df56:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 801df5a:	d159      	bne.n	801e010 <tcp_split_unsent_seg+0x190>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801df5c:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801df60:	f018 0f01 	tst.w	r8, #1
 801df64:	d003      	beq.n	801df6e <tcp_split_unsent_seg+0xee>
    split_flags &= ~TCP_FIN;
 801df66:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801df6a:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801df6e:	68f3      	ldr	r3, [r6, #12]
 801df70:	6858      	ldr	r0, [r3, #4]
 801df72:	f7f9 ffad 	bl	8017ed0 <lwip_htonl>
 801df76:	f8cd a000 	str.w	sl, [sp]
 801df7a:	1823      	adds	r3, r4, r0
 801df7c:	465a      	mov	r2, fp
 801df7e:	4639      	mov	r1, r7
 801df80:	4628      	mov	r0, r5
 801df82:	f7ff fad9 	bl	801d538 <tcp_create_segment>
  if (seg == NULL) {
 801df86:	4682      	mov	sl, r0
 801df88:	2800      	cmp	r0, #0
 801df8a:	d0af      	beq.n	801deec <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801df8c:	6870      	ldr	r0, [r6, #4]
 801df8e:	eba4 0409 	sub.w	r4, r4, r9
 801df92:	f7fc f831 	bl	8019ff8 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801df96:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801df98:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801df9c:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801df9e:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801dfa0:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801dfa2:	4610      	mov	r0, r2
 801dfa4:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801dfa6:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801dfaa:	b289      	uxth	r1, r1
 801dfac:	f7fb ff14 	bl	8019dd8 <pbuf_realloc>
  useg->len -= remainder;
 801dfb0:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801dfb2:	4640      	mov	r0, r8
  useg->len -= remainder;
 801dfb4:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801dfb6:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 801dfb8:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801dfba:	899c      	ldrh	r4, [r3, #12]
 801dfbc:	f7f9 ff84 	bl	8017ec8 <lwip_htons>
 801dfc0:	68f3      	ldr	r3, [r6, #12]
 801dfc2:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801dfc4:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801dfc6:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801dfc8:	f7fc f816 	bl	8019ff8 <pbuf_clen>
 801dfcc:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801dfd0:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801dfd2:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801dfd6:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801dfda:	f7fc f80d 	bl	8019ff8 <pbuf_clen>
 801dfde:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801dfe2:	4418      	add	r0, r3
  seg->next = useg->next;
 801dfe4:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801dfe6:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 801dfea:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 801dfee:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801dff2:	f8da 3000 	ldr.w	r3, [sl]
 801dff6:	b183      	cbz	r3, 801e01a <tcp_split_unsent_seg+0x19a>
    return ERR_OK;
 801dff8:	2000      	movs	r0, #0
}
 801dffa:	b003      	add	sp, #12
 801dffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e000:	4b0e      	ldr	r3, [pc, #56]	; (801e03c <tcp_split_unsent_seg+0x1bc>)
 801e002:	f240 324b 	movw	r2, #843	; 0x34b
 801e006:	4911      	ldr	r1, [pc, #68]	; (801e04c <tcp_split_unsent_seg+0x1cc>)
 801e008:	480e      	ldr	r0, [pc, #56]	; (801e044 <tcp_split_unsent_seg+0x1c4>)
 801e00a:	f006 fa57 	bl	80244bc <iprintf>
 801e00e:	e73f      	b.n	801de90 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801e010:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801e014:	f04f 0b08 	mov.w	fp, #8
 801e018:	e7a2      	b.n	801df60 <tcp_split_unsent_seg+0xe0>
  return ERR_OK;
 801e01a:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 801e01c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801e020:	e76f      	b.n	801df02 <tcp_split_unsent_seg+0x82>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801e022:	4b06      	ldr	r3, [pc, #24]	; (801e03c <tcp_split_unsent_seg+0x1bc>)
 801e024:	f240 3253 	movw	r2, #851	; 0x353
 801e028:	4909      	ldr	r1, [pc, #36]	; (801e050 <tcp_split_unsent_seg+0x1d0>)
 801e02a:	4806      	ldr	r0, [pc, #24]	; (801e044 <tcp_split_unsent_seg+0x1c4>)
 801e02c:	f006 fa46 	bl	80244bc <iprintf>
    return ERR_VAL;
 801e030:	f06f 0005 	mvn.w	r0, #5
 801e034:	e765      	b.n	801df02 <tcp_split_unsent_seg+0x82>
 801e036:	bf00      	nop
 801e038:	2002db54 	.word	0x2002db54
 801e03c:	080e0ea4 	.word	0x080e0ea4
 801e040:	080e1298 	.word	0x080e1298
 801e044:	0802ac68 	.word	0x0802ac68
 801e048:	080e12a8 	.word	0x080e12a8
 801e04c:	080e1250 	.word	0x080e1250
 801e050:	080e1274 	.word	0x080e1274

0801e054 <tcp_enqueue_flags>:
{
 801e054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e058:	f011 0703 	ands.w	r7, r1, #3
{
 801e05c:	b082      	sub	sp, #8
 801e05e:	460d      	mov	r5, r1
 801e060:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e062:	d064      	beq.n	801e12e <tcp_enqueue_flags+0xda>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e064:	2c00      	cmp	r4, #0
 801e066:	d06b      	beq.n	801e140 <tcp_enqueue_flags+0xec>
  if (flags & TCP_SYN) {
 801e068:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e06c:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 801e070:	d049      	beq.n	801e106 <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e072:	2104      	movs	r1, #4
 801e074:	2036      	movs	r0, #54	; 0x36
 801e076:	f7fb fdf5 	bl	8019c64 <pbuf_alloc>
 801e07a:	4606      	mov	r6, r0
 801e07c:	2800      	cmp	r0, #0
 801e07e:	d049      	beq.n	801e114 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e080:	8943      	ldrh	r3, [r0, #10]
 801e082:	2b03      	cmp	r3, #3
 801e084:	d878      	bhi.n	801e178 <tcp_enqueue_flags+0x124>
    optflags = TF_SEG_OPTS_MSS;
 801e086:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e08a:	4b43      	ldr	r3, [pc, #268]	; (801e198 <tcp_enqueue_flags+0x144>)
 801e08c:	f240 4239 	movw	r2, #1081	; 0x439
 801e090:	4942      	ldr	r1, [pc, #264]	; (801e19c <tcp_enqueue_flags+0x148>)
 801e092:	4843      	ldr	r0, [pc, #268]	; (801e1a0 <tcp_enqueue_flags+0x14c>)
 801e094:	f006 fa12 	bl	80244bc <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e098:	4631      	mov	r1, r6
 801e09a:	f8cd 8000 	str.w	r8, [sp]
 801e09e:	462a      	mov	r2, r5
 801e0a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801e0a2:	4620      	mov	r0, r4
 801e0a4:	f7ff fa48 	bl	801d538 <tcp_create_segment>
 801e0a8:	4606      	mov	r6, r0
 801e0aa:	2800      	cmp	r0, #0
 801e0ac:	d032      	beq.n	801e114 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e0ae:	68c3      	ldr	r3, [r0, #12]
 801e0b0:	079a      	lsls	r2, r3, #30
 801e0b2:	d159      	bne.n	801e168 <tcp_enqueue_flags+0x114>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e0b4:	8933      	ldrh	r3, [r6, #8]
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d14a      	bne.n	801e150 <tcp_enqueue_flags+0xfc>
  if (pcb->unsent == NULL) {
 801e0ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	d051      	beq.n	801e164 <tcp_enqueue_flags+0x110>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e0c0:	461a      	mov	r2, r3
 801e0c2:	681b      	ldr	r3, [r3, #0]
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d1fb      	bne.n	801e0c0 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 801e0c8:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801e0ca:	2300      	movs	r3, #0
 801e0cc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e0d0:	b117      	cbz	r7, 801e0d8 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 801e0d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801e0d4:	3301      	adds	r3, #1
 801e0d6:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801e0d8:	07eb      	lsls	r3, r5, #31
 801e0da:	d503      	bpl.n	801e0e4 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 801e0dc:	8b63      	ldrh	r3, [r4, #26]
 801e0de:	f043 0320 	orr.w	r3, r3, #32
 801e0e2:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e0e4:	6870      	ldr	r0, [r6, #4]
 801e0e6:	f7fb ff87 	bl	8019ff8 <pbuf_clen>
 801e0ea:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801e0ee:	4418      	add	r0, r3
 801e0f0:	b280      	uxth	r0, r0
 801e0f2:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801e0f6:	b118      	cbz	r0, 801e100 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e0f8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801e0fa:	2800      	cmp	r0, #0
 801e0fc:	d03f      	beq.n	801e17e <tcp_enqueue_flags+0x12a>
  return ERR_OK;
 801e0fe:	2000      	movs	r0, #0
}
 801e100:	b002      	add	sp, #8
 801e102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e106:	4641      	mov	r1, r8
 801e108:	2036      	movs	r0, #54	; 0x36
 801e10a:	f7fb fdab 	bl	8019c64 <pbuf_alloc>
 801e10e:	4606      	mov	r6, r0
 801e110:	2800      	cmp	r0, #0
 801e112:	d1c1      	bne.n	801e098 <tcp_enqueue_flags+0x44>
    TCP_STATS_INC(tcp.memerr);
 801e114:	4923      	ldr	r1, [pc, #140]	; (801e1a4 <tcp_enqueue_flags+0x150>)
    return ERR_MEM;
 801e116:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e11a:	8b62      	ldrh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801e11c:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e120:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801e124:	3301      	adds	r3, #1
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e126:	8362      	strh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801e128:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
    return ERR_MEM;
 801e12c:	e7e8      	b.n	801e100 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e12e:	4b1a      	ldr	r3, [pc, #104]	; (801e198 <tcp_enqueue_flags+0x144>)
 801e130:	f240 4211 	movw	r2, #1041	; 0x411
 801e134:	491c      	ldr	r1, [pc, #112]	; (801e1a8 <tcp_enqueue_flags+0x154>)
 801e136:	481a      	ldr	r0, [pc, #104]	; (801e1a0 <tcp_enqueue_flags+0x14c>)
 801e138:	f006 f9c0 	bl	80244bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e13c:	2c00      	cmp	r4, #0
 801e13e:	d193      	bne.n	801e068 <tcp_enqueue_flags+0x14>
 801e140:	4b15      	ldr	r3, [pc, #84]	; (801e198 <tcp_enqueue_flags+0x144>)
 801e142:	f240 4213 	movw	r2, #1043	; 0x413
 801e146:	4919      	ldr	r1, [pc, #100]	; (801e1ac <tcp_enqueue_flags+0x158>)
 801e148:	4815      	ldr	r0, [pc, #84]	; (801e1a0 <tcp_enqueue_flags+0x14c>)
 801e14a:	f006 f9b7 	bl	80244bc <iprintf>
 801e14e:	e78b      	b.n	801e068 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e150:	4b11      	ldr	r3, [pc, #68]	; (801e198 <tcp_enqueue_flags+0x144>)
 801e152:	f240 4243 	movw	r2, #1091	; 0x443
 801e156:	4916      	ldr	r1, [pc, #88]	; (801e1b0 <tcp_enqueue_flags+0x15c>)
 801e158:	4811      	ldr	r0, [pc, #68]	; (801e1a0 <tcp_enqueue_flags+0x14c>)
 801e15a:	f006 f9af 	bl	80244bc <iprintf>
  if (pcb->unsent == NULL) {
 801e15e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801e160:	2b00      	cmp	r3, #0
 801e162:	d1ad      	bne.n	801e0c0 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801e164:	66e6      	str	r6, [r4, #108]	; 0x6c
 801e166:	e7b0      	b.n	801e0ca <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e168:	4b0b      	ldr	r3, [pc, #44]	; (801e198 <tcp_enqueue_flags+0x144>)
 801e16a:	f240 4242 	movw	r2, #1090	; 0x442
 801e16e:	4911      	ldr	r1, [pc, #68]	; (801e1b4 <tcp_enqueue_flags+0x160>)
 801e170:	480b      	ldr	r0, [pc, #44]	; (801e1a0 <tcp_enqueue_flags+0x14c>)
 801e172:	f006 f9a3 	bl	80244bc <iprintf>
 801e176:	e79d      	b.n	801e0b4 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 801e178:	f04f 0801 	mov.w	r8, #1
 801e17c:	e78c      	b.n	801e098 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e17e:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801e180:	2c00      	cmp	r4, #0
 801e182:	d1bd      	bne.n	801e100 <tcp_enqueue_flags+0xac>
 801e184:	4b04      	ldr	r3, [pc, #16]	; (801e198 <tcp_enqueue_flags+0x144>)
 801e186:	f240 4265 	movw	r2, #1125	; 0x465
 801e18a:	490b      	ldr	r1, [pc, #44]	; (801e1b8 <tcp_enqueue_flags+0x164>)
 801e18c:	4804      	ldr	r0, [pc, #16]	; (801e1a0 <tcp_enqueue_flags+0x14c>)
 801e18e:	f006 f995 	bl	80244bc <iprintf>
  return ERR_OK;
 801e192:	4620      	mov	r0, r4
 801e194:	e7b4      	b.n	801e100 <tcp_enqueue_flags+0xac>
 801e196:	bf00      	nop
 801e198:	080e0ea4 	.word	0x080e0ea4
 801e19c:	080e1330 	.word	0x080e1330
 801e1a0:	0802ac68 	.word	0x0802ac68
 801e1a4:	2002db54 	.word	0x2002db54
 801e1a8:	080e12b8 	.word	0x080e12b8
 801e1ac:	080e1310 	.word	0x080e1310
 801e1b0:	080e1384 	.word	0x080e1384
 801e1b4:	080e136c 	.word	0x080e136c
 801e1b8:	080e13b0 	.word	0x080e13b0

0801e1bc <tcp_send_fin>:
{
 801e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e1be:	4606      	mov	r6, r0
 801e1c0:	b188      	cbz	r0, 801e1e6 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801e1c2:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 801e1c4:	b14c      	cbz	r4, 801e1da <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e1c6:	4625      	mov	r5, r4
 801e1c8:	6824      	ldr	r4, [r4, #0]
 801e1ca:	2c00      	cmp	r4, #0
 801e1cc:	d1fb      	bne.n	801e1c6 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e1ce:	68eb      	ldr	r3, [r5, #12]
 801e1d0:	8998      	ldrh	r0, [r3, #12]
 801e1d2:	f7f9 fe79 	bl	8017ec8 <lwip_htons>
 801e1d6:	0743      	lsls	r3, r0, #29
 801e1d8:	d00d      	beq.n	801e1f6 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e1da:	4630      	mov	r0, r6
 801e1dc:	2101      	movs	r1, #1
}
 801e1de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e1e2:	f7ff bf37 	b.w	801e054 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e1e6:	4b0b      	ldr	r3, [pc, #44]	; (801e214 <tcp_send_fin+0x58>)
 801e1e8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801e1ec:	490a      	ldr	r1, [pc, #40]	; (801e218 <tcp_send_fin+0x5c>)
 801e1ee:	480b      	ldr	r0, [pc, #44]	; (801e21c <tcp_send_fin+0x60>)
 801e1f0:	f006 f964 	bl	80244bc <iprintf>
 801e1f4:	e7e5      	b.n	801e1c2 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e1f6:	68eb      	ldr	r3, [r5, #12]
 801e1f8:	2001      	movs	r0, #1
 801e1fa:	899f      	ldrh	r7, [r3, #12]
 801e1fc:	f7f9 fe64 	bl	8017ec8 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801e200:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e202:	4338      	orrs	r0, r7
 801e204:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 801e206:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e20a:	8190      	strh	r0, [r2, #12]
}
 801e20c:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 801e20e:	8373      	strh	r3, [r6, #26]
}
 801e210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e212:	bf00      	nop
 801e214:	080e0ea4 	.word	0x080e0ea4
 801e218:	080e13d8 	.word	0x080e13d8
 801e21c:	0802ac68 	.word	0x0802ac68

0801e220 <tcp_rexmit_rto_prepare>:
{
 801e220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e222:	4605      	mov	r5, r0
 801e224:	2800      	cmp	r0, #0
 801e226:	d032      	beq.n	801e28e <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 801e228:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 801e22a:	b132      	cbz	r2, 801e23a <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e22c:	6813      	ldr	r3, [r2, #0]
 801e22e:	4614      	mov	r4, r2
 801e230:	b15b      	cbz	r3, 801e24a <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 801e232:	6863      	ldr	r3, [r4, #4]
 801e234:	7b9b      	ldrb	r3, [r3, #14]
 801e236:	2b01      	cmp	r3, #1
 801e238:	d003      	beq.n	801e242 <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 801e23a:	f06f 0305 	mvn.w	r3, #5
}
 801e23e:	4618      	mov	r0, r3
 801e240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e242:	6824      	ldr	r4, [r4, #0]
 801e244:	6823      	ldr	r3, [r4, #0]
 801e246:	2b00      	cmp	r3, #0
 801e248:	d1f3      	bne.n	801e232 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 801e24a:	6863      	ldr	r3, [r4, #4]
 801e24c:	7b9b      	ldrb	r3, [r3, #14]
 801e24e:	2b01      	cmp	r3, #1
 801e250:	d1f3      	bne.n	801e23a <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 801e252:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 801e254:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 801e256:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 801e258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801e25c:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 801e25e:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e260:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 801e262:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e266:	6858      	ldr	r0, [r3, #4]
 801e268:	f7f9 fe32 	bl	8017ed0 <lwip_htonl>
 801e26c:	68e3      	ldr	r3, [r4, #12]
 801e26e:	4606      	mov	r6, r0
 801e270:	8924      	ldrh	r4, [r4, #8]
 801e272:	8998      	ldrh	r0, [r3, #12]
 801e274:	f7f9 fe28 	bl	8017ec8 <lwip_htons>
 801e278:	f010 0003 	ands.w	r0, r0, #3
 801e27c:	4426      	add	r6, r4
  return ERR_OK;
 801e27e:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e280:	bf18      	it	ne
 801e282:	2001      	movne	r0, #1
  pcb->rttest = 0;
 801e284:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e286:	4430      	add	r0, r6
 801e288:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 801e28a:	4618      	mov	r0, r3
 801e28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e28e:	4b04      	ldr	r3, [pc, #16]	; (801e2a0 <tcp_rexmit_rto_prepare+0x80>)
 801e290:	f240 6263 	movw	r2, #1635	; 0x663
 801e294:	4903      	ldr	r1, [pc, #12]	; (801e2a4 <tcp_rexmit_rto_prepare+0x84>)
 801e296:	4804      	ldr	r0, [pc, #16]	; (801e2a8 <tcp_rexmit_rto_prepare+0x88>)
 801e298:	f006 f910 	bl	80244bc <iprintf>
 801e29c:	e7c4      	b.n	801e228 <tcp_rexmit_rto_prepare+0x8>
 801e29e:	bf00      	nop
 801e2a0:	080e0ea4 	.word	0x080e0ea4
 801e2a4:	080e13f4 	.word	0x080e13f4
 801e2a8:	0802ac68 	.word	0x0802ac68

0801e2ac <tcp_rexmit>:
{
 801e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801e2ae:	4607      	mov	r7, r0
 801e2b0:	2800      	cmp	r0, #0
 801e2b2:	d031      	beq.n	801e318 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 801e2b4:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801e2b6:	b34e      	cbz	r6, 801e30c <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 801e2b8:	6873      	ldr	r3, [r6, #4]
 801e2ba:	7b9b      	ldrb	r3, [r3, #14]
 801e2bc:	2b01      	cmp	r3, #1
 801e2be:	d125      	bne.n	801e30c <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 801e2c0:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801e2c2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801e2c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801e2c8:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801e2ca:	b91b      	cbnz	r3, 801e2d4 <tcp_rexmit+0x28>
 801e2cc:	e00f      	b.n	801e2ee <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801e2ce:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801e2d0:	682b      	ldr	r3, [r5, #0]
 801e2d2:	b163      	cbz	r3, 801e2ee <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e2d4:	68db      	ldr	r3, [r3, #12]
 801e2d6:	6858      	ldr	r0, [r3, #4]
 801e2d8:	f7f9 fdfa 	bl	8017ed0 <lwip_htonl>
 801e2dc:	68f3      	ldr	r3, [r6, #12]
 801e2de:	4604      	mov	r4, r0
 801e2e0:	6858      	ldr	r0, [r3, #4]
 801e2e2:	f7f9 fdf5 	bl	8017ed0 <lwip_htonl>
 801e2e6:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 801e2e8:	2c00      	cmp	r4, #0
 801e2ea:	dbf0      	blt.n	801e2ce <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 801e2ec:	682b      	ldr	r3, [r5, #0]
 801e2ee:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801e2f0:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801e2f2:	6833      	ldr	r3, [r6, #0]
 801e2f4:	b16b      	cbz	r3, 801e312 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 801e2f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801e2fa:	2bff      	cmp	r3, #255	; 0xff
 801e2fc:	d002      	beq.n	801e304 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801e2fe:	3301      	adds	r3, #1
 801e300:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801e304:	2300      	movs	r3, #0
  return ERR_OK;
 801e306:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801e308:	637b      	str	r3, [r7, #52]	; 0x34
}
 801e30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801e30c:	f06f 0005 	mvn.w	r0, #5
}
 801e310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801e312:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801e316:	e7ee      	b.n	801e2f6 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801e318:	4b03      	ldr	r3, [pc, #12]	; (801e328 <tcp_rexmit+0x7c>)
 801e31a:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801e31e:	4903      	ldr	r1, [pc, #12]	; (801e32c <tcp_rexmit+0x80>)
 801e320:	4803      	ldr	r0, [pc, #12]	; (801e330 <tcp_rexmit+0x84>)
 801e322:	f006 f8cb 	bl	80244bc <iprintf>
 801e326:	e7c5      	b.n	801e2b4 <tcp_rexmit+0x8>
 801e328:	080e0ea4 	.word	0x080e0ea4
 801e32c:	080e1418 	.word	0x080e1418
 801e330:	0802ac68 	.word	0x0802ac68

0801e334 <tcp_rexmit_fast>:
{
 801e334:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801e336:	4604      	mov	r4, r0
 801e338:	b340      	cbz	r0, 801e38c <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801e33a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e33c:	b113      	cbz	r3, 801e344 <tcp_rexmit_fast+0x10>
 801e33e:	8b63      	ldrh	r3, [r4, #26]
 801e340:	075b      	lsls	r3, r3, #29
 801e342:	d500      	bpl.n	801e346 <tcp_rexmit_fast+0x12>
}
 801e344:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801e346:	4620      	mov	r0, r4
 801e348:	f7ff ffb0 	bl	801e2ac <tcp_rexmit>
 801e34c:	2800      	cmp	r0, #0
 801e34e:	d1f9      	bne.n	801e344 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e350:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801e354:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e358:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e35a:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e35c:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e360:	bf28      	it	cs
 801e362:	4619      	movcs	r1, r3
 801e364:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e366:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e36a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e36e:	d902      	bls.n	801e376 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 801e370:	b283      	uxth	r3, r0
 801e372:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 801e376:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801e378:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801e37a:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801e37e:	4413      	add	r3, r2
      pcb->rtime = 0;
 801e380:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801e382:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801e386:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 801e388:	8622      	strh	r2, [r4, #48]	; 0x30
}
 801e38a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801e38c:	4b03      	ldr	r3, [pc, #12]	; (801e39c <tcp_rexmit_fast+0x68>)
 801e38e:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801e392:	4903      	ldr	r1, [pc, #12]	; (801e3a0 <tcp_rexmit_fast+0x6c>)
 801e394:	4803      	ldr	r0, [pc, #12]	; (801e3a4 <tcp_rexmit_fast+0x70>)
 801e396:	f006 f891 	bl	80244bc <iprintf>
 801e39a:	e7ce      	b.n	801e33a <tcp_rexmit_fast+0x6>
 801e39c:	080e0ea4 	.word	0x080e0ea4
 801e3a0:	080e1430 	.word	0x080e1430
 801e3a4:	0802ac68 	.word	0x0802ac68

0801e3a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801e3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3ac:	b084      	sub	sp, #16
 801e3ae:	4607      	mov	r7, r0
 801e3b0:	460e      	mov	r6, r1
 801e3b2:	4615      	mov	r5, r2
 801e3b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801e3b8:	461c      	mov	r4, r3
{
 801e3ba:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801e3be:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801e3c2:	b1fb      	cbz	r3, 801e404 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801e3c4:	f1b8 0f00 	cmp.w	r8, #0
 801e3c8:	d026      	beq.n	801e418 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801e3ca:	4630      	mov	r0, r6
 801e3cc:	f7f9 fd80 	bl	8017ed0 <lwip_htonl>
 801e3d0:	2114      	movs	r1, #20
 801e3d2:	4602      	mov	r2, r0
 801e3d4:	4628      	mov	r0, r5
 801e3d6:	f246 0508 	movw	r5, #24584	; 0x6008
 801e3da:	464b      	mov	r3, r9
 801e3dc:	f8cd a000 	str.w	sl, [sp]
 801e3e0:	e9cd 1501 	strd	r1, r5, [sp, #4]
 801e3e4:	2100      	movs	r1, #0
 801e3e6:	f7ff f92b 	bl	801d640 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801e3ea:	4601      	mov	r1, r0
 801e3ec:	b138      	cbz	r0, 801e3fe <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801e3ee:	4643      	mov	r3, r8
 801e3f0:	4622      	mov	r2, r4
 801e3f2:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801e3f4:	b004      	add	sp, #16
 801e3f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801e3fa:	f7ff b98f 	b.w	801d71c <tcp_output_control_segment>
}
 801e3fe:	b004      	add	sp, #16
 801e400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801e404:	4b08      	ldr	r3, [pc, #32]	; (801e428 <tcp_rst+0x80>)
 801e406:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801e40a:	4908      	ldr	r1, [pc, #32]	; (801e42c <tcp_rst+0x84>)
 801e40c:	4808      	ldr	r0, [pc, #32]	; (801e430 <tcp_rst+0x88>)
 801e40e:	f006 f855 	bl	80244bc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801e412:	f1b8 0f00 	cmp.w	r8, #0
 801e416:	d1d8      	bne.n	801e3ca <tcp_rst+0x22>
 801e418:	4b03      	ldr	r3, [pc, #12]	; (801e428 <tcp_rst+0x80>)
 801e41a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801e41e:	4905      	ldr	r1, [pc, #20]	; (801e434 <tcp_rst+0x8c>)
 801e420:	4803      	ldr	r0, [pc, #12]	; (801e430 <tcp_rst+0x88>)
 801e422:	f006 f84b 	bl	80244bc <iprintf>
 801e426:	e7d0      	b.n	801e3ca <tcp_rst+0x22>
 801e428:	080e0ea4 	.word	0x080e0ea4
 801e42c:	080e1450 	.word	0x080e1450
 801e430:	0802ac68 	.word	0x0802ac68
 801e434:	080e146c 	.word	0x080e146c

0801e438 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801e438:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801e43a:	4604      	mov	r4, r0
 801e43c:	b1c0      	cbz	r0, 801e470 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801e43e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801e440:	f7f9 fd46 	bl	8017ed0 <lwip_htonl>
 801e444:	2100      	movs	r1, #0
 801e446:	4602      	mov	r2, r0
 801e448:	4620      	mov	r0, r4
 801e44a:	f7ff f93f 	bl	801d6cc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801e44e:	4601      	mov	r1, r0
 801e450:	b1b0      	cbz	r0, 801e480 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e452:	1d23      	adds	r3, r4, #4
 801e454:	4622      	mov	r2, r4
 801e456:	4620      	mov	r0, r4
 801e458:	f7ff f960 	bl	801d71c <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e45c:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801e45e:	b118      	cbz	r0, 801e468 <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e460:	f043 0303 	orr.w	r3, r3, #3
 801e464:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 801e466:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e468:	f023 0303 	bic.w	r3, r3, #3
 801e46c:	8363      	strh	r3, [r4, #26]
}
 801e46e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801e470:	4b07      	ldr	r3, [pc, #28]	; (801e490 <tcp_send_empty_ack+0x58>)
 801e472:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801e476:	4907      	ldr	r1, [pc, #28]	; (801e494 <tcp_send_empty_ack+0x5c>)
 801e478:	4807      	ldr	r0, [pc, #28]	; (801e498 <tcp_send_empty_ack+0x60>)
 801e47a:	f006 f81f 	bl	80244bc <iprintf>
 801e47e:	e7de      	b.n	801e43e <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e480:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801e482:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e486:	f043 0303 	orr.w	r3, r3, #3
 801e48a:	8363      	strh	r3, [r4, #26]
}
 801e48c:	bd10      	pop	{r4, pc}
 801e48e:	bf00      	nop
 801e490:	080e0ea4 	.word	0x080e0ea4
 801e494:	080e1488 	.word	0x080e1488
 801e498:	0802ac68 	.word	0x0802ac68

0801e49c <tcp_output>:
{
 801e49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e4a0:	4604      	mov	r4, r0
{
 801e4a2:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e4a4:	2800      	cmp	r0, #0
 801e4a6:	f000 81c6 	beq.w	801e836 <tcp_output+0x39a>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e4aa:	7d23      	ldrb	r3, [r4, #20]
 801e4ac:	2b01      	cmp	r3, #1
 801e4ae:	f000 817d 	beq.w	801e7ac <tcp_output+0x310>
  if (tcp_input_pcb == pcb) {
 801e4b2:	4bab      	ldr	r3, [pc, #684]	; (801e760 <tcp_output+0x2c4>)
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	42a3      	cmp	r3, r4
 801e4b8:	f000 8184 	beq.w	801e7c4 <tcp_output+0x328>
  seg = pcb->unsent;
 801e4bc:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801e4be:	b345      	cbz	r5, 801e512 <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801e4c0:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e4c2:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e4c6:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 801e4ca:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801e4ce:	2800      	cmp	r0, #0
 801e4d0:	f040 81b9 	bne.w	801e846 <tcp_output+0x3aa>
    return ip_route(src, dst);
 801e4d4:	4648      	mov	r0, r9
 801e4d6:	f003 faf5 	bl	8021ac4 <ip4_route>
 801e4da:	4682      	mov	sl, r0
  if (netif == NULL) {
 801e4dc:	f1ba 0f00 	cmp.w	sl, #0
 801e4e0:	f000 81c3 	beq.w	801e86a <tcp_output+0x3ce>
  if (ip_addr_isany(&pcb->local_ip)) {
 801e4e4:	6823      	ldr	r3, [r4, #0]
 801e4e6:	b913      	cbnz	r3, 801e4ee <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e4e8:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e4ec:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e4ee:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e4f0:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e4f2:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e4f4:	bf28      	it	cs
 801e4f6:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e4f8:	f7f9 fcea 	bl	8017ed0 <lwip_htonl>
 801e4fc:	892b      	ldrh	r3, [r5, #8]
 801e4fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801e500:	1a9b      	subs	r3, r3, r2
 801e502:	4418      	add	r0, r3
 801e504:	42b8      	cmp	r0, r7
 801e506:	d90f      	bls.n	801e528 <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e508:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801e50c:	42bb      	cmp	r3, r7
 801e50e:	f000 8163 	beq.w	801e7d8 <tcp_output+0x33c>
    if (pcb->flags & TF_ACK_NOW) {
 801e512:	8b62      	ldrh	r2, [r4, #26]
 801e514:	0791      	lsls	r1, r2, #30
 801e516:	f100 8159 	bmi.w	801e7cc <tcp_output+0x330>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e51a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 801e51e:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e520:	8362      	strh	r2, [r4, #26]
}
 801e522:	b005      	add	sp, #20
 801e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 801e528:	2300      	movs	r3, #0
 801e52a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 801e52e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 801e530:	2b00      	cmp	r3, #0
 801e532:	f000 8161 	beq.w	801e7f8 <tcp_output+0x35c>
    for (; useg->next != NULL; useg = useg->next);
 801e536:	4698      	mov	r8, r3
 801e538:	681b      	ldr	r3, [r3, #0]
 801e53a:	2b00      	cmp	r3, #0
 801e53c:	d1fb      	bne.n	801e536 <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 801e53e:	464e      	mov	r6, r9
 801e540:	e0bd      	b.n	801e6be <tcp_output+0x222>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e542:	68eb      	ldr	r3, [r5, #12]
 801e544:	2010      	movs	r0, #16
 801e546:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801e54a:	f7f9 fcbd 	bl	8017ec8 <lwip_htons>
 801e54e:	ea49 0000 	orr.w	r0, r9, r0
 801e552:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801e556:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 801e55a:	686b      	ldr	r3, [r5, #4]
 801e55c:	7b9b      	ldrb	r3, [r3, #14]
 801e55e:	2b01      	cmp	r3, #1
 801e560:	d166      	bne.n	801e630 <tcp_output+0x194>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e562:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e564:	f7f9 fcb4 	bl	8017ed0 <lwip_htonl>
 801e568:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e56c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801e56e:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801e572:	f7f9 fca9 	bl	8017ec8 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e576:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801e578:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e57a:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e57e:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e580:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e584:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e586:	7aab      	ldrb	r3, [r5, #10]
 801e588:	07db      	lsls	r3, r3, #31
 801e58a:	f100 80d7 	bmi.w	801e73c <tcp_output+0x2a0>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e58e:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 801e592:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801e596:	2b00      	cmp	r3, #0
 801e598:	da01      	bge.n	801e59e <tcp_output+0x102>
    pcb->rtime = 0;
 801e59a:	2300      	movs	r3, #0
 801e59c:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801e59e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	f000 80c0 	beq.w	801e726 <tcp_output+0x28a>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e5a6:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801e5a8:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e5ac:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 801e5ae:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e5b0:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 801e5b4:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801e5b6:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e5ba:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 801e5bc:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 801e5be:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 801e5c0:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801e5c2:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 801e5c4:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801e5c6:	f889 c010 	strb.w	ip, [r9, #16]
 801e5ca:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801e5ce:	7aab      	ldrb	r3, [r5, #10]
 801e5d0:	009b      	lsls	r3, r3, #2
 801e5d2:	f003 0304 	and.w	r3, r3, #4
 801e5d6:	3314      	adds	r3, #20
 801e5d8:	444b      	add	r3, r9
 801e5da:	459b      	cmp	fp, r3
 801e5dc:	d00a      	beq.n	801e5f4 <tcp_output+0x158>
 801e5de:	f240 621c 	movw	r2, #1564	; 0x61c
 801e5e2:	4b60      	ldr	r3, [pc, #384]	; (801e764 <tcp_output+0x2c8>)
 801e5e4:	4960      	ldr	r1, [pc, #384]	; (801e768 <tcp_output+0x2cc>)
 801e5e6:	4861      	ldr	r0, [pc, #388]	; (801e76c <tcp_output+0x2d0>)
 801e5e8:	f005 ff68 	bl	80244bc <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801e5ec:	6868      	ldr	r0, [r5, #4]
 801e5ee:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801e5f2:	8902      	ldrh	r2, [r0, #8]
 801e5f4:	4623      	mov	r3, r4
 801e5f6:	2106      	movs	r1, #6
 801e5f8:	9600      	str	r6, [sp, #0]
 801e5fa:	f7fa f9f9 	bl	80189f0 <ip_chksum_pseudo>
  TCP_STATS_INC(tcp.xmit);
 801e5fe:	4a5c      	ldr	r2, [pc, #368]	; (801e770 <tcp_output+0x2d4>)
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801e600:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e604:	4621      	mov	r1, r4
 801e606:	6868      	ldr	r0, [r5, #4]
 801e608:	f8cd a008 	str.w	sl, [sp, #8]
  TCP_STATS_INC(tcp.xmit);
 801e60c:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
 801e610:	3301      	adds	r3, #1
 801e612:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e616:	2306      	movs	r3, #6
 801e618:	4632      	mov	r2, r6
 801e61a:	9301      	str	r3, [sp, #4]
 801e61c:	7aa3      	ldrb	r3, [r4, #10]
 801e61e:	9300      	str	r3, [sp, #0]
 801e620:	7ae3      	ldrb	r3, [r4, #11]
 801e622:	f003 fc6f 	bl	8021f04 <ip4_output_if>
    if (err != ERR_OK) {
 801e626:	2800      	cmp	r0, #0
 801e628:	f040 811a 	bne.w	801e860 <tcp_output+0x3c4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e62c:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 801e630:	682b      	ldr	r3, [r5, #0]
 801e632:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801e634:	7d23      	ldrb	r3, [r4, #20]
 801e636:	2b02      	cmp	r3, #2
 801e638:	d003      	beq.n	801e642 <tcp_output+0x1a6>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e63a:	8b63      	ldrh	r3, [r4, #26]
 801e63c:	f023 0303 	bic.w	r3, r3, #3
 801e640:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e642:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801e646:	f7f9 fc43 	bl	8017ed0 <lwip_htonl>
 801e64a:	68eb      	ldr	r3, [r5, #12]
 801e64c:	4681      	mov	r9, r0
 801e64e:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801e652:	8998      	ldrh	r0, [r3, #12]
 801e654:	f7f9 fc38 	bl	8017ec8 <lwip_htons>
 801e658:	f010 0003 	ands.w	r0, r0, #3
 801e65c:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e65e:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e660:	bf18      	it	ne
 801e662:	2001      	movne	r0, #1
 801e664:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801e666:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e66a:	1a1b      	subs	r3, r3, r0
 801e66c:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 801e66e:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 801e670:	bfb8      	it	lt
 801e672:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801e674:	8998      	ldrh	r0, [r3, #12]
 801e676:	f7f9 fc27 	bl	8017ec8 <lwip_htons>
 801e67a:	f010 0003 	ands.w	r0, r0, #3
 801e67e:	bf18      	it	ne
 801e680:	2001      	movne	r0, #1
 801e682:	eb10 0f09 	cmn.w	r0, r9
 801e686:	d047      	beq.n	801e718 <tcp_output+0x27c>
      seg->next = NULL;
 801e688:	2300      	movs	r3, #0
 801e68a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 801e68c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d046      	beq.n	801e720 <tcp_output+0x284>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801e692:	68eb      	ldr	r3, [r5, #12]
 801e694:	6858      	ldr	r0, [r3, #4]
 801e696:	f7f9 fc1b 	bl	8017ed0 <lwip_htonl>
 801e69a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e69e:	4681      	mov	r9, r0
 801e6a0:	6858      	ldr	r0, [r3, #4]
 801e6a2:	f7f9 fc15 	bl	8017ed0 <lwip_htonl>
 801e6a6:	eba9 0000 	sub.w	r0, r9, r0
 801e6aa:	2800      	cmp	r0, #0
 801e6ac:	f2c0 80a6 	blt.w	801e7fc <tcp_output+0x360>
          useg->next = seg;
 801e6b0:	f8c8 5000 	str.w	r5, [r8]
 801e6b4:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801e6b6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801e6b8:	2d00      	cmp	r5, #0
 801e6ba:	f000 80c8 	beq.w	801e84e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801e6be:	68eb      	ldr	r3, [r5, #12]
 801e6c0:	6858      	ldr	r0, [r3, #4]
 801e6c2:	f7f9 fc05 	bl	8017ed0 <lwip_htonl>
 801e6c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801e6c8:	1ac0      	subs	r0, r0, r3
 801e6ca:	892b      	ldrh	r3, [r5, #8]
 801e6cc:	4418      	add	r0, r3
  while (seg != NULL &&
 801e6ce:	42b8      	cmp	r0, r7
 801e6d0:	f200 80bf 	bhi.w	801e852 <tcp_output+0x3b6>
    LWIP_ASSERT("RST not expected here!",
 801e6d4:	68eb      	ldr	r3, [r5, #12]
 801e6d6:	8998      	ldrh	r0, [r3, #12]
 801e6d8:	f7f9 fbf6 	bl	8017ec8 <lwip_htons>
 801e6dc:	0742      	lsls	r2, r0, #29
 801e6de:	d413      	bmi.n	801e708 <tcp_output+0x26c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e6e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e6e2:	b153      	cbz	r3, 801e6fa <tcp_output+0x25e>
 801e6e4:	8b63      	ldrh	r3, [r4, #26]
 801e6e6:	f013 0f44 	tst.w	r3, #68	; 0x44
 801e6ea:	461a      	mov	r2, r3
 801e6ec:	d105      	bne.n	801e6fa <tcp_output+0x25e>
 801e6ee:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801e6f0:	2900      	cmp	r1, #0
 801e6f2:	d048      	beq.n	801e786 <tcp_output+0x2ea>
 801e6f4:	6808      	ldr	r0, [r1, #0]
 801e6f6:	2800      	cmp	r0, #0
 801e6f8:	d040      	beq.n	801e77c <tcp_output+0x2e0>
    if (pcb->state != SYN_SENT) {
 801e6fa:	7d23      	ldrb	r3, [r4, #20]
 801e6fc:	2b02      	cmp	r3, #2
 801e6fe:	f47f af20 	bne.w	801e542 <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e702:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801e706:	e728      	b.n	801e55a <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 801e708:	4b16      	ldr	r3, [pc, #88]	; (801e764 <tcp_output+0x2c8>)
 801e70a:	f240 5236 	movw	r2, #1334	; 0x536
 801e70e:	4919      	ldr	r1, [pc, #100]	; (801e774 <tcp_output+0x2d8>)
 801e710:	4816      	ldr	r0, [pc, #88]	; (801e76c <tcp_output+0x2d0>)
 801e712:	f005 fed3 	bl	80244bc <iprintf>
 801e716:	e7e3      	b.n	801e6e0 <tcp_output+0x244>
      tcp_seg_free(seg);
 801e718:	4628      	mov	r0, r5
 801e71a:	f7fc f9c9 	bl	801aab0 <tcp_seg_free>
 801e71e:	e7ca      	b.n	801e6b6 <tcp_output+0x21a>
        pcb->unacked = seg;
 801e720:	46a8      	mov	r8, r5
 801e722:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801e724:	e7c7      	b.n	801e6b6 <tcp_output+0x21a>
    pcb->rttest = tcp_ticks;
 801e726:	4b14      	ldr	r3, [pc, #80]	; (801e778 <tcp_output+0x2dc>)
 801e728:	681b      	ldr	r3, [r3, #0]
 801e72a:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e72c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801e730:	f7f9 fbce 	bl	8017ed0 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e734:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e738:	63a0      	str	r0, [r4, #56]	; 0x38
 801e73a:	e734      	b.n	801e5a6 <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e73c:	4632      	mov	r2, r6
 801e73e:	4651      	mov	r1, sl
 801e740:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801e744:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e748:	f7fd f9ca 	bl	801bae0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801e74c:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801e750:	f7f9 fbbe 	bl	8017ed0 <lwip_htonl>
 801e754:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e758:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801e75c:	e719      	b.n	801e592 <tcp_output+0xf6>
 801e75e:	bf00      	nop
 801e760:	2002dca0 	.word	0x2002dca0
 801e764:	080e0ea4 	.word	0x080e0ea4
 801e768:	080e1500 	.word	0x080e1500
 801e76c:	0802ac68 	.word	0x0802ac68
 801e770:	2002db54 	.word	0x2002db54
 801e774:	080e14e8 	.word	0x080e14e8
 801e778:	2002dc6c 	.word	0x2002dc6c
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e77c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801e780:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801e782:	4584      	cmp	ip, r0
 801e784:	d2b9      	bcs.n	801e6fa <tcp_output+0x25e>
 801e786:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801e78a:	2800      	cmp	r0, #0
 801e78c:	d0b5      	beq.n	801e6fa <tcp_output+0x25e>
 801e78e:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801e792:	2808      	cmp	r0, #8
 801e794:	d8b1      	bhi.n	801e6fa <tcp_output+0x25e>
 801e796:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801e79a:	d1ae      	bne.n	801e6fa <tcp_output+0x25e>
  if (pcb->unsent == NULL) {
 801e79c:	2900      	cmp	r1, #0
 801e79e:	f47f aebc 	bne.w	801e51a <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 801e7a2:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e7a4:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 801e7a6:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801e7aa:	e6b6      	b.n	801e51a <tcp_output+0x7e>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e7ac:	4b30      	ldr	r3, [pc, #192]	; (801e870 <tcp_output+0x3d4>)
 801e7ae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801e7b2:	4930      	ldr	r1, [pc, #192]	; (801e874 <tcp_output+0x3d8>)
 801e7b4:	4830      	ldr	r0, [pc, #192]	; (801e878 <tcp_output+0x3dc>)
 801e7b6:	f005 fe81 	bl	80244bc <iprintf>
  if (tcp_input_pcb == pcb) {
 801e7ba:	4b30      	ldr	r3, [pc, #192]	; (801e87c <tcp_output+0x3e0>)
 801e7bc:	681b      	ldr	r3, [r3, #0]
 801e7be:	42a3      	cmp	r3, r4
 801e7c0:	f47f ae7c 	bne.w	801e4bc <tcp_output+0x20>
    return ERR_OK;
 801e7c4:	2000      	movs	r0, #0
}
 801e7c6:	b005      	add	sp, #20
 801e7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 801e7cc:	4620      	mov	r0, r4
}
 801e7ce:	b005      	add	sp, #20
 801e7d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801e7d4:	f7ff be30 	b.w	801e438 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e7d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	f47f ae99 	bne.w	801e512 <tcp_output+0x76>
 801e7e0:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	f47f ae94 	bne.w	801e512 <tcp_output+0x76>
      pcb->persist_cnt = 0;
 801e7ea:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 801e7ee:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801e7f2:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801e7f6:	e68c      	b.n	801e512 <tcp_output+0x76>
 801e7f8:	4698      	mov	r8, r3
 801e7fa:	e6a0      	b.n	801e53e <tcp_output+0xa2>
          while (*cur_seg &&
 801e7fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801e7fe:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 801e802:	b92b      	cbnz	r3, 801e810 <tcp_output+0x374>
 801e804:	e013      	b.n	801e82e <tcp_output+0x392>
            cur_seg = &((*cur_seg)->next );
 801e806:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 801e80a:	f8db 3000 	ldr.w	r3, [fp]
 801e80e:	b173      	cbz	r3, 801e82e <tcp_output+0x392>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e810:	68db      	ldr	r3, [r3, #12]
 801e812:	6858      	ldr	r0, [r3, #4]
 801e814:	f7f9 fb5c 	bl	8017ed0 <lwip_htonl>
 801e818:	68eb      	ldr	r3, [r5, #12]
 801e81a:	4681      	mov	r9, r0
 801e81c:	6858      	ldr	r0, [r3, #4]
 801e81e:	f7f9 fb57 	bl	8017ed0 <lwip_htonl>
 801e822:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801e826:	2800      	cmp	r0, #0
 801e828:	dbed      	blt.n	801e806 <tcp_output+0x36a>
          seg->next = (*cur_seg);
 801e82a:	f8db 3000 	ldr.w	r3, [fp]
 801e82e:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801e830:	f8cb 5000 	str.w	r5, [fp]
 801e834:	e73f      	b.n	801e6b6 <tcp_output+0x21a>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e836:	4b0e      	ldr	r3, [pc, #56]	; (801e870 <tcp_output+0x3d4>)
 801e838:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e83c:	4910      	ldr	r1, [pc, #64]	; (801e880 <tcp_output+0x3e4>)
 801e83e:	480e      	ldr	r0, [pc, #56]	; (801e878 <tcp_output+0x3dc>)
 801e840:	f005 fe3c 	bl	80244bc <iprintf>
 801e844:	e631      	b.n	801e4aa <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 801e846:	f7fb f8b9 	bl	80199bc <netif_get_by_index>
 801e84a:	4682      	mov	sl, r0
 801e84c:	e646      	b.n	801e4dc <tcp_output+0x40>
 801e84e:	8b63      	ldrh	r3, [r4, #26]
 801e850:	e7a7      	b.n	801e7a2 <tcp_output+0x306>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e852:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 801e854:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e856:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 801e858:	2900      	cmp	r1, #0
 801e85a:	f47f ae5e 	bne.w	801e51a <tcp_output+0x7e>
 801e85e:	e7a0      	b.n	801e7a2 <tcp_output+0x306>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e860:	8b63      	ldrh	r3, [r4, #26]
 801e862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e866:	8363      	strh	r3, [r4, #26]
      return err;
 801e868:	e65b      	b.n	801e522 <tcp_output+0x86>
    return ERR_RTE;
 801e86a:	f06f 0003 	mvn.w	r0, #3
 801e86e:	e658      	b.n	801e522 <tcp_output+0x86>
 801e870:	080e0ea4 	.word	0x080e0ea4
 801e874:	080e14c0 	.word	0x080e14c0
 801e878:	0802ac68 	.word	0x0802ac68
 801e87c:	2002dca0 	.word	0x2002dca0
 801e880:	080e14a8 	.word	0x080e14a8

0801e884 <tcp_rexmit_rto_commit>:
{
 801e884:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e886:	4604      	mov	r4, r0
 801e888:	b158      	cbz	r0, 801e8a2 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801e88a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801e88e:	2bff      	cmp	r3, #255	; 0xff
 801e890:	d002      	beq.n	801e898 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801e892:	3301      	adds	r3, #1
 801e894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801e898:	4620      	mov	r0, r4
}
 801e89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801e89e:	f7ff bdfd 	b.w	801e49c <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e8a2:	4b04      	ldr	r3, [pc, #16]	; (801e8b4 <tcp_rexmit_rto_commit+0x30>)
 801e8a4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e8a8:	4903      	ldr	r1, [pc, #12]	; (801e8b8 <tcp_rexmit_rto_commit+0x34>)
 801e8aa:	4804      	ldr	r0, [pc, #16]	; (801e8bc <tcp_rexmit_rto_commit+0x38>)
 801e8ac:	f005 fe06 	bl	80244bc <iprintf>
 801e8b0:	e7eb      	b.n	801e88a <tcp_rexmit_rto_commit+0x6>
 801e8b2:	bf00      	nop
 801e8b4:	080e0ea4 	.word	0x080e0ea4
 801e8b8:	080e1514 	.word	0x080e1514
 801e8bc:	0802ac68 	.word	0x0802ac68

0801e8c0 <tcp_rexmit_rto>:
{
 801e8c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e8c2:	4604      	mov	r4, r0
 801e8c4:	b118      	cbz	r0, 801e8ce <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e8c6:	f7ff fcab 	bl	801e220 <tcp_rexmit_rto_prepare>
 801e8ca:	b198      	cbz	r0, 801e8f4 <tcp_rexmit_rto+0x34>
}
 801e8cc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e8ce:	4b0f      	ldr	r3, [pc, #60]	; (801e90c <tcp_rexmit_rto+0x4c>)
 801e8d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801e8d4:	490e      	ldr	r1, [pc, #56]	; (801e910 <tcp_rexmit_rto+0x50>)
 801e8d6:	480f      	ldr	r0, [pc, #60]	; (801e914 <tcp_rexmit_rto+0x54>)
 801e8d8:	f005 fdf0 	bl	80244bc <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e8dc:	4620      	mov	r0, r4
 801e8de:	f7ff fc9f 	bl	801e220 <tcp_rexmit_rto_prepare>
 801e8e2:	2800      	cmp	r0, #0
 801e8e4:	d1f2      	bne.n	801e8cc <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e8e6:	4b09      	ldr	r3, [pc, #36]	; (801e90c <tcp_rexmit_rto+0x4c>)
 801e8e8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e8ec:	490a      	ldr	r1, [pc, #40]	; (801e918 <tcp_rexmit_rto+0x58>)
 801e8ee:	4809      	ldr	r0, [pc, #36]	; (801e914 <tcp_rexmit_rto+0x54>)
 801e8f0:	f005 fde4 	bl	80244bc <iprintf>
  if (pcb->nrtx < 0xFF) {
 801e8f4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801e8f8:	2bff      	cmp	r3, #255	; 0xff
 801e8fa:	d002      	beq.n	801e902 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 801e8fc:	3301      	adds	r3, #1
 801e8fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801e902:	4620      	mov	r0, r4
}
 801e904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801e908:	f7ff bdc8 	b.w	801e49c <tcp_output>
 801e90c:	080e0ea4 	.word	0x080e0ea4
 801e910:	080e1538 	.word	0x080e1538
 801e914:	0802ac68 	.word	0x0802ac68
 801e918:	080e1514 	.word	0x080e1514

0801e91c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801e91c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801e91e:	4604      	mov	r4, r0
 801e920:	b188      	cbz	r0, 801e946 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801e922:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801e924:	3801      	subs	r0, #1
 801e926:	f7f9 fad3 	bl	8017ed0 <lwip_htonl>
 801e92a:	2100      	movs	r1, #0
 801e92c:	4602      	mov	r2, r0
 801e92e:	4620      	mov	r0, r4
 801e930:	f7fe fecc 	bl	801d6cc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801e934:	4601      	mov	r1, r0
 801e936:	b170      	cbz	r0, 801e956 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e938:	1d23      	adds	r3, r4, #4
 801e93a:	4622      	mov	r2, r4
 801e93c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801e93e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e942:	f7fe beeb 	b.w	801d71c <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801e946:	4b05      	ldr	r3, [pc, #20]	; (801e95c <tcp_keepalive+0x40>)
 801e948:	f640 0224 	movw	r2, #2084	; 0x824
 801e94c:	4904      	ldr	r1, [pc, #16]	; (801e960 <tcp_keepalive+0x44>)
 801e94e:	4805      	ldr	r0, [pc, #20]	; (801e964 <tcp_keepalive+0x48>)
 801e950:	f005 fdb4 	bl	80244bc <iprintf>
 801e954:	e7e5      	b.n	801e922 <tcp_keepalive+0x6>
}
 801e956:	f04f 30ff 	mov.w	r0, #4294967295
 801e95a:	bd10      	pop	{r4, pc}
 801e95c:	080e0ea4 	.word	0x080e0ea4
 801e960:	080e1554 	.word	0x080e1554
 801e964:	0802ac68 	.word	0x0802ac68

0801e968 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801e968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801e96c:	4604      	mov	r4, r0
 801e96e:	2800      	cmp	r0, #0
 801e970:	d051      	beq.n	801ea16 <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801e972:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801e974:	2d00      	cmp	r5, #0
 801e976:	d04b      	beq.n	801ea10 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801e978:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801e97c:	2bff      	cmp	r3, #255	; 0xff
 801e97e:	d002      	beq.n	801e986 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801e980:	3301      	adds	r3, #1
 801e982:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801e986:	68eb      	ldr	r3, [r5, #12]
 801e988:	8998      	ldrh	r0, [r3, #12]
 801e98a:	f7f9 fa9d 	bl	8017ec8 <lwip_htons>
 801e98e:	07c3      	lsls	r3, r0, #31
 801e990:	d527      	bpl.n	801e9e2 <tcp_zero_window_probe+0x7a>
 801e992:	8929      	ldrh	r1, [r5, #8]
 801e994:	bb29      	cbnz	r1, 801e9e2 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801e996:	68eb      	ldr	r3, [r5, #12]
 801e998:	4620      	mov	r0, r4
 801e99a:	685a      	ldr	r2, [r3, #4]
 801e99c:	f7fe fe96 	bl	801d6cc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801e9a0:	4606      	mov	r6, r0
 801e9a2:	b388      	cbz	r0, 801ea08 <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801e9a4:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801e9a8:	2011      	movs	r0, #17
 801e9aa:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801e9ae:	f7f9 fa8b 	bl	8017ec8 <lwip_htons>
 801e9b2:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801e9b6:	4338      	orrs	r0, r7
 801e9b8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801e9bc:	68eb      	ldr	r3, [r5, #12]
 801e9be:	6858      	ldr	r0, [r3, #4]
 801e9c0:	f7f9 fa86 	bl	8017ed0 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e9c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801e9c6:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e9c8:	4622      	mov	r2, r4
 801e9ca:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e9cc:	1a1b      	subs	r3, r3, r0
 801e9ce:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e9d0:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 801e9d4:	bfb8      	it	lt
 801e9d6:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e9d8:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801e9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e9de:	f7fe be9d 	b.w	801d71c <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801e9e2:	68eb      	ldr	r3, [r5, #12]
 801e9e4:	2101      	movs	r1, #1
 801e9e6:	4620      	mov	r0, r4
 801e9e8:	685a      	ldr	r2, [r3, #4]
 801e9ea:	f7fe fe6f 	bl	801d6cc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801e9ee:	4606      	mov	r6, r0
 801e9f0:	b150      	cbz	r0, 801ea08 <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801e9f2:	6868      	ldr	r0, [r5, #4]
 801e9f4:	892a      	ldrh	r2, [r5, #8]
 801e9f6:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801e9f8:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801e9fa:	1a9b      	subs	r3, r3, r2
 801e9fc:	2201      	movs	r2, #1
 801e9fe:	3114      	adds	r1, #20
 801ea00:	b29b      	uxth	r3, r3
 801ea02:	f7fb fb89 	bl	801a118 <pbuf_copy_partial>
 801ea06:	e7d9      	b.n	801e9bc <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 801ea08:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ea0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 801ea10:	4628      	mov	r0, r5
}
 801ea12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801ea16:	4b04      	ldr	r3, [pc, #16]	; (801ea28 <tcp_zero_window_probe+0xc0>)
 801ea18:	f640 024f 	movw	r2, #2127	; 0x84f
 801ea1c:	4903      	ldr	r1, [pc, #12]	; (801ea2c <tcp_zero_window_probe+0xc4>)
 801ea1e:	4804      	ldr	r0, [pc, #16]	; (801ea30 <tcp_zero_window_probe+0xc8>)
 801ea20:	f005 fd4c 	bl	80244bc <iprintf>
 801ea24:	e7a5      	b.n	801e972 <tcp_zero_window_probe+0xa>
 801ea26:	bf00      	nop
 801ea28:	080e0ea4 	.word	0x080e0ea4
 801ea2c:	080e1570 	.word	0x080e1570
 801ea30:	0802ac68 	.word	0x0802ac68

0801ea34 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ea34:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ea36:	22bc      	movs	r2, #188	; 0xbc
{
 801ea38:	b570      	push	{r4, r5, r6, lr}
 801ea3a:	460e      	mov	r6, r1
 801ea3c:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ea3e:	4910      	ldr	r1, [pc, #64]	; (801ea80 <sys_timeout_abs+0x4c>)
 801ea40:	200c      	movs	r0, #12
{
 801ea42:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ea44:	f7fa fd84 	bl	8019550 <memp_malloc_fn>
  if (timeout == NULL) {
 801ea48:	b190      	cbz	r0, 801ea70 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 801ea4a:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ea4c:	490d      	ldr	r1, [pc, #52]	; (801ea84 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 801ea4e:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 801ea50:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 801ea52:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 801ea56:	680b      	ldr	r3, [r1, #0]
 801ea58:	b91b      	cbnz	r3, 801ea62 <sys_timeout_abs+0x2e>
 801ea5a:	e007      	b.n	801ea6c <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801ea5c:	4619      	mov	r1, r3
 801ea5e:	681b      	ldr	r3, [r3, #0]
 801ea60:	b11b      	cbz	r3, 801ea6a <sys_timeout_abs+0x36>
 801ea62:	685a      	ldr	r2, [r3, #4]
 801ea64:	1aa2      	subs	r2, r4, r2
 801ea66:	2a00      	cmp	r2, #0
 801ea68:	daf8      	bge.n	801ea5c <sys_timeout_abs+0x28>
        timeout->next = t->next;
 801ea6a:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801ea6c:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801ea6e:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ea70:	4b03      	ldr	r3, [pc, #12]	; (801ea80 <sys_timeout_abs+0x4c>)
 801ea72:	22be      	movs	r2, #190	; 0xbe
 801ea74:	4904      	ldr	r1, [pc, #16]	; (801ea88 <sys_timeout_abs+0x54>)
 801ea76:	4805      	ldr	r0, [pc, #20]	; (801ea8c <sys_timeout_abs+0x58>)
}
 801ea78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ea7c:	f005 bd1e 	b.w	80244bc <iprintf>
 801ea80:	080e1594 	.word	0x080e1594
 801ea84:	2002dcbc 	.word	0x2002dcbc
 801ea88:	080e15c8 	.word	0x080e15c8
 801ea8c:	0802ac68 	.word	0x0802ac68

0801ea90 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801ea90:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ea92:	6843      	ldr	r3, [r0, #4]
{
 801ea94:	4604      	mov	r4, r0
  cyclic->handler();
 801ea96:	4798      	blx	r3

  now = sys_now();
 801ea98:	f7f4 fca0 	bl	80133dc <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801ea9c:	4b09      	ldr	r3, [pc, #36]	; (801eac4 <lwip_cyclic_timer+0x34>)
 801ea9e:	6825      	ldr	r5, [r4, #0]
 801eaa0:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801eaa2:	4909      	ldr	r1, [pc, #36]	; (801eac8 <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801eaa4:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801eaa6:	1a1a      	subs	r2, r3, r0
 801eaa8:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801eaaa:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801eaac:	da04      	bge.n	801eab8 <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801eaae:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801eab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801eab4:	f7ff bfbe 	b.w	801ea34 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801eab8:	4618      	mov	r0, r3
}
 801eaba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801eabe:	f7ff bfb9 	b.w	801ea34 <sys_timeout_abs>
 801eac2:	bf00      	nop
 801eac4:	2002dcb8 	.word	0x2002dcb8
 801eac8:	0801ea91 	.word	0x0801ea91

0801eacc <tcpip_tcp_timer>:
{
 801eacc:	b508      	push	{r3, lr}
  tcp_tmr();
 801eace:	f7fc ffd9 	bl	801ba84 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801ead2:	4b09      	ldr	r3, [pc, #36]	; (801eaf8 <tcpip_tcp_timer+0x2c>)
 801ead4:	681b      	ldr	r3, [r3, #0]
 801ead6:	b143      	cbz	r3, 801eaea <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ead8:	f7f4 fc80 	bl	80133dc <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eadc:	2200      	movs	r2, #0
 801eade:	4907      	ldr	r1, [pc, #28]	; (801eafc <tcpip_tcp_timer+0x30>)
 801eae0:	30fa      	adds	r0, #250	; 0xfa
}
 801eae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eae6:	f7ff bfa5 	b.w	801ea34 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801eaea:	4b05      	ldr	r3, [pc, #20]	; (801eb00 <tcpip_tcp_timer+0x34>)
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d1f2      	bne.n	801ead8 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801eaf2:	4a04      	ldr	r2, [pc, #16]	; (801eb04 <tcpip_tcp_timer+0x38>)
 801eaf4:	6013      	str	r3, [r2, #0]
}
 801eaf6:	bd08      	pop	{r3, pc}
 801eaf8:	2002dc5c 	.word	0x2002dc5c
 801eafc:	0801eacd 	.word	0x0801eacd
 801eb00:	2002dc74 	.word	0x2002dc74
 801eb04:	2002dcc0 	.word	0x2002dcc0

0801eb08 <tcp_timer_needed>:
{
 801eb08:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801eb0a:	4b0b      	ldr	r3, [pc, #44]	; (801eb38 <tcp_timer_needed+0x30>)
 801eb0c:	681a      	ldr	r2, [r3, #0]
 801eb0e:	b98a      	cbnz	r2, 801eb34 <tcp_timer_needed+0x2c>
 801eb10:	4a0a      	ldr	r2, [pc, #40]	; (801eb3c <tcp_timer_needed+0x34>)
 801eb12:	6812      	ldr	r2, [r2, #0]
 801eb14:	b152      	cbz	r2, 801eb2c <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801eb16:	2201      	movs	r2, #1
 801eb18:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801eb1a:	f7f4 fc5f 	bl	80133dc <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eb1e:	2200      	movs	r2, #0
 801eb20:	4907      	ldr	r1, [pc, #28]	; (801eb40 <tcp_timer_needed+0x38>)
 801eb22:	30fa      	adds	r0, #250	; 0xfa
}
 801eb24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eb28:	f7ff bf84 	b.w	801ea34 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801eb2c:	4a05      	ldr	r2, [pc, #20]	; (801eb44 <tcp_timer_needed+0x3c>)
 801eb2e:	6812      	ldr	r2, [r2, #0]
 801eb30:	2a00      	cmp	r2, #0
 801eb32:	d1f0      	bne.n	801eb16 <tcp_timer_needed+0xe>
}
 801eb34:	bd08      	pop	{r3, pc}
 801eb36:	bf00      	nop
 801eb38:	2002dcc0 	.word	0x2002dcc0
 801eb3c:	2002dc5c 	.word	0x2002dc5c
 801eb40:	0801eacd 	.word	0x0801eacd
 801eb44:	2002dc74 	.word	0x2002dc74

0801eb48 <sys_timeouts_init>:
{
 801eb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb4c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801eb50:	4c11      	ldr	r4, [pc, #68]	; (801eb98 <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801eb52:	f8df 9050 	ldr.w	r9, [pc, #80]	; 801eba4 <sys_timeouts_init+0x5c>
 801eb56:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801eb5a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801eba8 <sys_timeouts_init+0x60>
 801eb5e:	f104 0620 	add.w	r6, r4, #32
 801eb62:	4f0e      	ldr	r7, [pc, #56]	; (801eb9c <sys_timeouts_init+0x54>)
 801eb64:	d20d      	bcs.n	801eb82 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801eb66:	f7f4 fc39 	bl	80133dc <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eb6a:	4622      	mov	r2, r4
 801eb6c:	490c      	ldr	r1, [pc, #48]	; (801eba0 <sys_timeouts_init+0x58>)
 801eb6e:	4428      	add	r0, r5
 801eb70:	f7ff ff60 	bl	801ea34 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801eb74:	42b4      	cmp	r4, r6
 801eb76:	d00c      	beq.n	801eb92 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801eb78:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801eb7c:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801eb80:	d3f1      	bcc.n	801eb66 <sys_timeouts_init+0x1e>
 801eb82:	464b      	mov	r3, r9
 801eb84:	4641      	mov	r1, r8
 801eb86:	f240 1229 	movw	r2, #297	; 0x129
 801eb8a:	4638      	mov	r0, r7
 801eb8c:	f005 fc96 	bl	80244bc <iprintf>
 801eb90:	e7e9      	b.n	801eb66 <sys_timeouts_init+0x1e>
}
 801eb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb96:	bf00      	nop
 801eb98:	080e1648 	.word	0x080e1648
 801eb9c:	0802ac68 	.word	0x0802ac68
 801eba0:	0801ea91 	.word	0x0801ea91
 801eba4:	080e1594 	.word	0x080e1594
 801eba8:	080e1608 	.word	0x080e1608

0801ebac <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ebac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801ebb0:	b570      	push	{r4, r5, r6, lr}
 801ebb2:	4604      	mov	r4, r0
 801ebb4:	460d      	mov	r5, r1
 801ebb6:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ebb8:	d208      	bcs.n	801ebcc <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ebba:	f7f4 fc0f 	bl	80133dc <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ebbe:	4632      	mov	r2, r6
 801ebc0:	4629      	mov	r1, r5
 801ebc2:	4420      	add	r0, r4
#endif
}
 801ebc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ebc8:	f7ff bf34 	b.w	801ea34 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ebcc:	4b03      	ldr	r3, [pc, #12]	; (801ebdc <sys_timeout+0x30>)
 801ebce:	f240 1229 	movw	r2, #297	; 0x129
 801ebd2:	4903      	ldr	r1, [pc, #12]	; (801ebe0 <sys_timeout+0x34>)
 801ebd4:	4803      	ldr	r0, [pc, #12]	; (801ebe4 <sys_timeout+0x38>)
 801ebd6:	f005 fc71 	bl	80244bc <iprintf>
 801ebda:	e7ee      	b.n	801ebba <sys_timeout+0xe>
 801ebdc:	080e1594 	.word	0x080e1594
 801ebe0:	080e1608 	.word	0x080e1608
 801ebe4:	0802ac68 	.word	0x0802ac68

0801ebe8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801ebe8:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ebea:	4d0d      	ldr	r5, [pc, #52]	; (801ec20 <sys_untimeout+0x38>)
 801ebec:	682b      	ldr	r3, [r5, #0]
 801ebee:	b19b      	cbz	r3, 801ec18 <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801ebf0:	2400      	movs	r4, #0
 801ebf2:	e003      	b.n	801ebfc <sys_untimeout+0x14>
 801ebf4:	681a      	ldr	r2, [r3, #0]
 801ebf6:	461c      	mov	r4, r3
 801ebf8:	4613      	mov	r3, r2
 801ebfa:	b16a      	cbz	r2, 801ec18 <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801ebfc:	689a      	ldr	r2, [r3, #8]
 801ebfe:	4282      	cmp	r2, r0
 801ec00:	d1f8      	bne.n	801ebf4 <sys_untimeout+0xc>
 801ec02:	68da      	ldr	r2, [r3, #12]
 801ec04:	428a      	cmp	r2, r1
 801ec06:	d1f5      	bne.n	801ebf4 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 801ec08:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 801ec0a:	b13c      	cbz	r4, 801ec1c <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 801ec0c:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801ec0e:	4619      	mov	r1, r3
 801ec10:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801ec12:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801ec14:	f7fa bce0 	b.w	80195d8 <memp_free>
}
 801ec18:	bc30      	pop	{r4, r5}
 801ec1a:	4770      	bx	lr
        next_timeout = t->next;
 801ec1c:	602a      	str	r2, [r5, #0]
 801ec1e:	e7f6      	b.n	801ec0e <sys_untimeout+0x26>
 801ec20:	2002dcbc 	.word	0x2002dcbc

0801ec24 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ec24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ec28:	f7f4 fbd8 	bl	80133dc <sys_now>
 801ec2c:	4c0f      	ldr	r4, [pc, #60]	; (801ec6c <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801ec2e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 801ec70 <sys_check_timeouts+0x4c>
  now = sys_now();
 801ec32:	4607      	mov	r7, r0
 801ec34:	e00f      	b.n	801ec56 <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ec36:	685a      	ldr	r2, [r3, #4]
 801ec38:	eba7 0c02 	sub.w	ip, r7, r2
 801ec3c:	f1bc 0f00 	cmp.w	ip, #0
 801ec40:	db0e      	blt.n	801ec60 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 801ec42:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801ec44:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 801ec46:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 801ec4a:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 801ec4e:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ec50:	f7fa fcc2 	bl	80195d8 <memp_free>
    if (handler != NULL) {
 801ec54:	b935      	cbnz	r5, 801ec64 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 801ec56:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ec58:	200c      	movs	r0, #12
 801ec5a:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d1ea      	bne.n	801ec36 <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ec60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 801ec64:	4648      	mov	r0, r9
 801ec66:	47a8      	blx	r5
 801ec68:	e7f5      	b.n	801ec56 <sys_check_timeouts+0x32>
 801ec6a:	bf00      	nop
 801ec6c:	2002dcbc 	.word	0x2002dcbc
 801ec70:	2002dcb8 	.word	0x2002dcb8

0801ec74 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ec74:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ec76:	4c07      	ldr	r4, [pc, #28]	; (801ec94 <sys_timeouts_sleeptime+0x20>)
 801ec78:	6823      	ldr	r3, [r4, #0]
 801ec7a:	b13b      	cbz	r3, 801ec8c <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801ec7c:	f7f4 fbae 	bl	80133dc <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801ec80:	6823      	ldr	r3, [r4, #0]
 801ec82:	685b      	ldr	r3, [r3, #4]
    return 0;
 801ec84:	1a18      	subs	r0, r3, r0
 801ec86:	bf48      	it	mi
 801ec88:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801ec8a:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801ec8c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ec90:	bd10      	pop	{r4, pc}
 801ec92:	bf00      	nop
 801ec94:	2002dcbc 	.word	0x2002dcbc

0801ec98 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ec98:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ec9a:	f005 fcb3 	bl	8024604 <rand>
 801ec9e:	4b02      	ldr	r3, [pc, #8]	; (801eca8 <udp_init+0x10>)
 801eca0:	4a02      	ldr	r2, [pc, #8]	; (801ecac <udp_init+0x14>)
 801eca2:	4303      	orrs	r3, r0
 801eca4:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801eca6:	bd08      	pop	{r3, pc}
 801eca8:	ffffc000 	.word	0xffffc000
 801ecac:	20000412 	.word	0x20000412

0801ecb0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ecb4:	4680      	mov	r8, r0
{
 801ecb6:	b085      	sub	sp, #20
 801ecb8:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ecba:	2800      	cmp	r0, #0
 801ecbc:	f000 80cf 	beq.w	801ee5e <udp_input+0x1ae>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ecc0:	2f00      	cmp	r7, #0
 801ecc2:	f000 80d5 	beq.w	801ee70 <udp_input+0x1c0>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801ecc6:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801ef04 <udp_input+0x254>

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801ecca:	f8b8 200a 	ldrh.w	r2, [r8, #10]
  UDP_STATS_INC(udp.recv);
 801ecce:	f8bb 307a 	ldrh.w	r3, [fp, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801ecd2:	2a07      	cmp	r2, #7
  UDP_STATS_INC(udp.recv);
 801ecd4:	f103 0301 	add.w	r3, r3, #1
 801ecd8:	f8ab 307a 	strh.w	r3, [fp, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801ecdc:	f240 80a8 	bls.w	801ee30 <udp_input+0x180>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ece0:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801ef08 <udp_input+0x258>
  udphdr = (struct udp_hdr *)p->payload;
 801ece4:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ece8:	f8d9 1000 	ldr.w	r1, [r9]
 801ecec:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801ecf0:	f003 f91a 	bl	8021f28 <ip4_addr_isbroadcast_u32>
 801ecf4:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801ecf6:	8820      	ldrh	r0, [r4, #0]
 801ecf8:	f7f9 f8e6 	bl	8017ec8 <lwip_htons>
 801ecfc:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 801ecfe:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 801ed00:	9302      	str	r3, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 801ed02:	f7f9 f8e1 	bl	8017ec8 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed06:	4b77      	ldr	r3, [pc, #476]	; (801eee4 <udp_input+0x234>)
  dest = lwip_ntohs(udphdr->dest);
 801ed08:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed0a:	681c      	ldr	r4, [r3, #0]
 801ed0c:	2c00      	cmp	r4, #0
 801ed0e:	d068      	beq.n	801ede2 <udp_input+0x132>
  uncon_pcb = NULL;
 801ed10:	2300      	movs	r3, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ed12:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 801eef4 <udp_input+0x244>
 801ed16:	4974      	ldr	r1, [pc, #464]	; (801eee8 <udp_input+0x238>)
  uncon_pcb = NULL;
 801ed18:	461e      	mov	r6, r3
 801ed1a:	9303      	str	r3, [sp, #12]
 801ed1c:	e004      	b.n	801ed28 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed1e:	68e2      	ldr	r2, [r4, #12]
 801ed20:	4626      	mov	r6, r4
 801ed22:	2a00      	cmp	r2, #0
 801ed24:	d05a      	beq.n	801eddc <udp_input+0x12c>
 801ed26:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ed28:	8a62      	ldrh	r2, [r4, #18]
 801ed2a:	42aa      	cmp	r2, r5
 801ed2c:	d1f7      	bne.n	801ed1e <udp_input+0x6e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ed2e:	2f00      	cmp	r7, #0
 801ed30:	d075      	beq.n	801ee1e <udp_input+0x16e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ed32:	7a20      	ldrb	r0, [r4, #8]
 801ed34:	b138      	cbz	r0, 801ed46 <udp_input+0x96>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ed36:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801ed3a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801ed3e:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ed40:	b2d2      	uxtb	r2, r2
 801ed42:	4290      	cmp	r0, r2
 801ed44:	d1eb      	bne.n	801ed1e <udp_input+0x6e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ed46:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 801ed48:	f1ba 0f00 	cmp.w	sl, #0
 801ed4c:	d03c      	beq.n	801edc8 <udp_input+0x118>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ed4e:	b13a      	cbz	r2, 801ed60 <udp_input+0xb0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ed50:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ed54:	1c43      	adds	r3, r0, #1
 801ed56:	d003      	beq.n	801ed60 <udp_input+0xb0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ed58:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ed5a:	68bb      	ldr	r3, [r7, #8]
 801ed5c:	4218      	tst	r0, r3
 801ed5e:	d1de      	bne.n	801ed1e <udp_input+0x6e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801ed60:	7c20      	ldrb	r0, [r4, #16]
 801ed62:	0743      	lsls	r3, r0, #29
 801ed64:	d40a      	bmi.n	801ed7c <udp_input+0xcc>
        if (uncon_pcb == NULL) {
 801ed66:	9803      	ldr	r0, [sp, #12]
 801ed68:	2800      	cmp	r0, #0
 801ed6a:	d071      	beq.n	801ee50 <udp_input+0x1a0>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801ed6c:	f1ba 0f00 	cmp.w	sl, #0
 801ed70:	d004      	beq.n	801ed7c <udp_input+0xcc>
 801ed72:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801ed76:	3001      	adds	r0, #1
 801ed78:	f000 8081 	beq.w	801ee7e <udp_input+0x1ce>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801ed7c:	8aa2      	ldrh	r2, [r4, #20]
 801ed7e:	9802      	ldr	r0, [sp, #8]
 801ed80:	4282      	cmp	r2, r0
 801ed82:	d1cc      	bne.n	801ed1e <udp_input+0x6e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ed84:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801ed86:	b11a      	cbz	r2, 801ed90 <udp_input+0xe0>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ed88:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801ed8c:	4282      	cmp	r2, r0
 801ed8e:	d1c6      	bne.n	801ed1e <udp_input+0x6e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801ed90:	2e00      	cmp	r6, #0
 801ed92:	f000 809e 	beq.w	801eed2 <udp_input+0x222>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801ed96:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 801ed98:	4a52      	ldr	r2, [pc, #328]	; (801eee4 <udp_input+0x234>)
          prev->next = pcb->next;
 801ed9a:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 801ed9c:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 801ed9e:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 801eda0:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801eda2:	2108      	movs	r1, #8
 801eda4:	4640      	mov	r0, r8
 801eda6:	f7fb f8a3 	bl	8019ef0 <pbuf_remove_header>
 801edaa:	2800      	cmp	r0, #0
 801edac:	d173      	bne.n	801ee96 <udp_input+0x1e6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801edae:	69a5      	ldr	r5, [r4, #24]
 801edb0:	2d00      	cmp	r5, #0
 801edb2:	d07c      	beq.n	801eeae <udp_input+0x1fe>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801edb4:	9b02      	ldr	r3, [sp, #8]
 801edb6:	4642      	mov	r2, r8
 801edb8:	69e0      	ldr	r0, [r4, #28]
 801edba:	4621      	mov	r1, r4
 801edbc:	9300      	str	r3, [sp, #0]
 801edbe:	4b4b      	ldr	r3, [pc, #300]	; (801eeec <udp_input+0x23c>)
 801edc0:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801edc2:	b005      	add	sp, #20
 801edc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801edc8:	2a00      	cmp	r2, #0
 801edca:	d0c9      	beq.n	801ed60 <udp_input+0xb0>
 801edcc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801edd0:	4282      	cmp	r2, r0
 801edd2:	d0c5      	beq.n	801ed60 <udp_input+0xb0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801edd4:	68e2      	ldr	r2, [r4, #12]
 801edd6:	4626      	mov	r6, r4
 801edd8:	2a00      	cmp	r2, #0
 801edda:	d1a4      	bne.n	801ed26 <udp_input+0x76>
  if (pcb != NULL) {
 801eddc:	9b03      	ldr	r3, [sp, #12]
 801edde:	2b00      	cmp	r3, #0
 801ede0:	d17d      	bne.n	801eede <udp_input+0x22e>
  if (for_us) {
 801ede2:	687a      	ldr	r2, [r7, #4]
 801ede4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801ede8:	429a      	cmp	r2, r3
 801edea:	d160      	bne.n	801eeae <udp_input+0x1fe>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801edec:	2108      	movs	r1, #8
 801edee:	4640      	mov	r0, r8
 801edf0:	f7fb f87e 	bl	8019ef0 <pbuf_remove_header>
 801edf4:	2800      	cmp	r0, #0
 801edf6:	d14e      	bne.n	801ee96 <udp_input+0x1e6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801edf8:	f1ba 0f00 	cmp.w	sl, #0
 801edfc:	d105      	bne.n	801ee0a <udp_input+0x15a>
 801edfe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801ee02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ee06:	2be0      	cmp	r3, #224	; 0xe0
 801ee08:	d157      	bne.n	801eeba <udp_input+0x20a>
      UDP_STATS_INC(udp.proterr);
 801ee0a:	f8bb 2088 	ldrh.w	r2, [fp, #136]	; 0x88
      pbuf_free(p);
 801ee0e:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801ee10:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
      UDP_STATS_INC(udp.proterr);
 801ee14:	3201      	adds	r2, #1
      UDP_STATS_INC(udp.drop);
 801ee16:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.proterr);
 801ee18:	f8ab 2088 	strh.w	r2, [fp, #136]	; 0x88
 801ee1c:	e011      	b.n	801ee42 <udp_input+0x192>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ee1e:	4663      	mov	r3, ip
 801ee20:	2288      	movs	r2, #136	; 0x88
 801ee22:	4833      	ldr	r0, [pc, #204]	; (801eef0 <udp_input+0x240>)
 801ee24:	f005 fb4a 	bl	80244bc <iprintf>
 801ee28:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 801eef4 <udp_input+0x244>
 801ee2c:	492e      	ldr	r1, [pc, #184]	; (801eee8 <udp_input+0x238>)
 801ee2e:	e780      	b.n	801ed32 <udp_input+0x82>
    UDP_STATS_INC(udp.lenerr);
 801ee30:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
    pbuf_free(p);
 801ee34:	4640      	mov	r0, r8
    UDP_STATS_INC(udp.drop);
 801ee36:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
    UDP_STATS_INC(udp.lenerr);
 801ee3a:	3201      	adds	r2, #1
    UDP_STATS_INC(udp.drop);
 801ee3c:	3301      	adds	r3, #1
    UDP_STATS_INC(udp.lenerr);
 801ee3e:	f8ab 2082 	strh.w	r2, [fp, #130]	; 0x82
      UDP_STATS_INC(udp.drop);
 801ee42:	f8ab 307e 	strh.w	r3, [fp, #126]	; 0x7e
}
 801ee46:	b005      	add	sp, #20
 801ee48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801ee4c:	f7fb b8c0 	b.w	8019fd0 <pbuf_free>
      if ((pcb->remote_port == src) &&
 801ee50:	8aa2      	ldrh	r2, [r4, #20]
 801ee52:	9802      	ldr	r0, [sp, #8]
 801ee54:	9403      	str	r4, [sp, #12]
 801ee56:	4282      	cmp	r2, r0
 801ee58:	f47f af61 	bne.w	801ed1e <udp_input+0x6e>
 801ee5c:	e792      	b.n	801ed84 <udp_input+0xd4>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ee5e:	4b25      	ldr	r3, [pc, #148]	; (801eef4 <udp_input+0x244>)
 801ee60:	22cf      	movs	r2, #207	; 0xcf
 801ee62:	4925      	ldr	r1, [pc, #148]	; (801eef8 <udp_input+0x248>)
 801ee64:	4822      	ldr	r0, [pc, #136]	; (801eef0 <udp_input+0x240>)
 801ee66:	f005 fb29 	bl	80244bc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ee6a:	2f00      	cmp	r7, #0
 801ee6c:	f47f af2b 	bne.w	801ecc6 <udp_input+0x16>
 801ee70:	4b20      	ldr	r3, [pc, #128]	; (801eef4 <udp_input+0x244>)
 801ee72:	22d0      	movs	r2, #208	; 0xd0
 801ee74:	4921      	ldr	r1, [pc, #132]	; (801eefc <udp_input+0x24c>)
 801ee76:	481e      	ldr	r0, [pc, #120]	; (801eef0 <udp_input+0x240>)
 801ee78:	f005 fb20 	bl	80244bc <iprintf>
 801ee7c:	e723      	b.n	801ecc6 <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ee7e:	9b03      	ldr	r3, [sp, #12]
 801ee80:	6878      	ldr	r0, [r7, #4]
 801ee82:	681b      	ldr	r3, [r3, #0]
 801ee84:	4283      	cmp	r3, r0
 801ee86:	f43f af79 	beq.w	801ed7c <udp_input+0xcc>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ee8a:	9b03      	ldr	r3, [sp, #12]
 801ee8c:	4290      	cmp	r0, r2
 801ee8e:	bf08      	it	eq
 801ee90:	4623      	moveq	r3, r4
 801ee92:	9303      	str	r3, [sp, #12]
 801ee94:	e772      	b.n	801ed7c <udp_input+0xcc>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ee96:	4b17      	ldr	r3, [pc, #92]	; (801eef4 <udp_input+0x244>)
 801ee98:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ee9c:	4918      	ldr	r1, [pc, #96]	; (801ef00 <udp_input+0x250>)
 801ee9e:	4814      	ldr	r0, [pc, #80]	; (801eef0 <udp_input+0x240>)
 801eea0:	f005 fb0c 	bl	80244bc <iprintf>
      UDP_STATS_INC(udp.drop);
 801eea4:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
      pbuf_free(p);
 801eea8:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801eeaa:	3301      	adds	r3, #1
 801eeac:	e7c9      	b.n	801ee42 <udp_input+0x192>
        pbuf_free(p);
 801eeae:	4640      	mov	r0, r8
}
 801eeb0:	b005      	add	sp, #20
 801eeb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801eeb6:	f7fb b88b 	b.w	8019fd0 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801eeba:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 801eebe:	4640      	mov	r0, r8
 801eec0:	3108      	adds	r1, #8
 801eec2:	b209      	sxth	r1, r1
 801eec4:	f7fb f84c 	bl	8019f60 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801eec8:	2103      	movs	r1, #3
 801eeca:	4640      	mov	r0, r8
 801eecc:	f002 fdf2 	bl	8021ab4 <icmp_dest_unreach>
 801eed0:	e79b      	b.n	801ee0a <udp_input+0x15a>
          UDP_STATS_INC(udp.cachehit);
 801eed2:	f8bb 308e 	ldrh.w	r3, [fp, #142]	; 0x8e
 801eed6:	3301      	adds	r3, #1
 801eed8:	f8ab 308e 	strh.w	r3, [fp, #142]	; 0x8e
 801eedc:	e761      	b.n	801eda2 <udp_input+0xf2>
 801eede:	9c03      	ldr	r4, [sp, #12]
 801eee0:	e75f      	b.n	801eda2 <udp_input+0xf2>
 801eee2:	bf00      	nop
 801eee4:	2002dcc4 	.word	0x2002dcc4
 801eee8:	080e16d4 	.word	0x080e16d4
 801eeec:	2001eb24 	.word	0x2001eb24
 801eef0:	0802ac68 	.word	0x0802ac68
 801eef4:	080e1670 	.word	0x080e1670
 801eef8:	080e16a0 	.word	0x080e16a0
 801eefc:	080e16b8 	.word	0x080e16b8
 801ef00:	080e16fc 	.word	0x080e16fc
 801ef04:	2002db54 	.word	0x2002db54
 801ef08:	2001eb14 	.word	0x2001eb14

0801ef0c <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801ef0c:	4b38      	ldr	r3, [pc, #224]	; (801eff0 <udp_bind+0xe4>)
 801ef0e:	2900      	cmp	r1, #0
{
 801ef10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801ef14:	bf08      	it	eq
 801ef16:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801ef18:	2800      	cmp	r0, #0
 801ef1a:	d05e      	beq.n	801efda <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ef1c:	4f35      	ldr	r7, [pc, #212]	; (801eff4 <udp_bind+0xe8>)
 801ef1e:	683e      	ldr	r6, [r7, #0]
 801ef20:	b34e      	cbz	r6, 801ef76 <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ef22:	42b0      	cmp	r0, r6
 801ef24:	d031      	beq.n	801ef8a <udp_bind+0x7e>
 801ef26:	4634      	mov	r4, r6
 801ef28:	e001      	b.n	801ef2e <udp_bind+0x22>
 801ef2a:	42a0      	cmp	r0, r4
 801ef2c:	d02d      	beq.n	801ef8a <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ef2e:	68e4      	ldr	r4, [r4, #12]
 801ef30:	2c00      	cmp	r4, #0
 801ef32:	d1fa      	bne.n	801ef2a <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ef34:	b362      	cbz	r2, 801ef90 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ef36:	680d      	ldr	r5, [r1, #0]
 801ef38:	4633      	mov	r3, r6
 801ef3a:	e001      	b.n	801ef40 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ef3c:	68db      	ldr	r3, [r3, #12]
 801ef3e:	b19b      	cbz	r3, 801ef68 <udp_bind+0x5c>
      if (pcb != ipcb) {
 801ef40:	4298      	cmp	r0, r3
 801ef42:	d0fb      	beq.n	801ef3c <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 801ef44:	8a59      	ldrh	r1, [r3, #18]
 801ef46:	4291      	cmp	r1, r2
 801ef48:	d1f8      	bne.n	801ef3c <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ef4a:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801ef4c:	2900      	cmp	r1, #0
 801ef4e:	bf18      	it	ne
 801ef50:	42a9      	cmpne	r1, r5
 801ef52:	d001      	beq.n	801ef58 <udp_bind+0x4c>
 801ef54:	2d00      	cmp	r5, #0
 801ef56:	d1f1      	bne.n	801ef3c <udp_bind+0x30>
      return ERR_USE;
 801ef58:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801ef5c:	4618      	mov	r0, r3
 801ef5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ef62:	680d      	ldr	r5, [r1, #0]
 801ef64:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ef68:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801ef6a:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801ef6c:	b13c      	cbz	r4, 801ef7e <udp_bind+0x72>
  return ERR_OK;
 801ef6e:	2300      	movs	r3, #0
}
 801ef70:	4618      	mov	r0, r3
 801ef72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801ef76:	b372      	cbz	r2, 801efd6 <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ef78:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801ef7a:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ef7c:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 801ef7e:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801ef80:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801ef82:	6038      	str	r0, [r7, #0]
}
 801ef84:	4618      	mov	r0, r3
 801ef86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801ef8a:	2401      	movs	r4, #1
  if (port == 0) {
 801ef8c:	2a00      	cmp	r2, #0
 801ef8e:	d1d2      	bne.n	801ef36 <udp_bind+0x2a>
 801ef90:	f8df e070 	ldr.w	lr, [pc, #112]	; 801f004 <udp_bind+0xf8>
  rebind = 0;
 801ef94:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ef98:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801ef9c:	f8be 2000 	ldrh.w	r2, [lr]
 801efa0:	4542      	cmp	r2, r8
 801efa2:	d015      	beq.n	801efd0 <udp_bind+0xc4>
 801efa4:	3201      	adds	r2, #1
 801efa6:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801efa8:	2e00      	cmp	r6, #0
 801efaa:	d0da      	beq.n	801ef62 <udp_bind+0x56>
 801efac:	4633      	mov	r3, r6
 801efae:	e002      	b.n	801efb6 <udp_bind+0xaa>
 801efb0:	68db      	ldr	r3, [r3, #12]
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d0d5      	beq.n	801ef62 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 801efb6:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801efba:	4594      	cmp	ip, r2
 801efbc:	d1f8      	bne.n	801efb0 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801efbe:	3d01      	subs	r5, #1
 801efc0:	b2ad      	uxth	r5, r5
 801efc2:	2d00      	cmp	r5, #0
 801efc4:	d1ec      	bne.n	801efa0 <udp_bind+0x94>
      return ERR_USE;
 801efc6:	f06f 0307 	mvn.w	r3, #7
 801efca:	f8ae 2000 	strh.w	r2, [lr]
 801efce:	e7cf      	b.n	801ef70 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801efd0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801efd4:	e7e8      	b.n	801efa8 <udp_bind+0x9c>
  rebind = 0;
 801efd6:	4634      	mov	r4, r6
 801efd8:	e7da      	b.n	801ef90 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801efda:	4b07      	ldr	r3, [pc, #28]	; (801eff8 <udp_bind+0xec>)
 801efdc:	f240 32b7 	movw	r2, #951	; 0x3b7
 801efe0:	4906      	ldr	r1, [pc, #24]	; (801effc <udp_bind+0xf0>)
 801efe2:	4807      	ldr	r0, [pc, #28]	; (801f000 <udp_bind+0xf4>)
 801efe4:	f005 fa6a 	bl	80244bc <iprintf>
 801efe8:	f06f 030f 	mvn.w	r3, #15
 801efec:	e7c0      	b.n	801ef70 <udp_bind+0x64>
 801efee:	bf00      	nop
 801eff0:	080e1ff0 	.word	0x080e1ff0
 801eff4:	2002dcc4 	.word	0x2002dcc4
 801eff8:	080e1670 	.word	0x080e1670
 801effc:	080e1718 	.word	0x080e1718
 801f000:	0802ac68 	.word	0x0802ac68
 801f004:	20000412 	.word	0x20000412

0801f008 <udp_sendto_if_src>:
{
 801f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f00c:	b085      	sub	sp, #20
 801f00e:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f012:	2800      	cmp	r0, #0
 801f014:	f000 8090 	beq.w	801f138 <udp_sendto_if_src+0x130>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f018:	460d      	mov	r5, r1
 801f01a:	2900      	cmp	r1, #0
 801f01c:	f000 8082 	beq.w	801f124 <udp_sendto_if_src+0x11c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f020:	4690      	mov	r8, r2
 801f022:	2a00      	cmp	r2, #0
 801f024:	d074      	beq.n	801f110 <udp_sendto_if_src+0x108>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f026:	f1ba 0f00 	cmp.w	sl, #0
 801f02a:	d067      	beq.n	801f0fc <udp_sendto_if_src+0xf4>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f02c:	f1bb 0f00 	cmp.w	fp, #0
 801f030:	f000 808c 	beq.w	801f14c <udp_sendto_if_src+0x144>
  if (pcb->local_port == 0) {
 801f034:	8a42      	ldrh	r2, [r0, #18]
 801f036:	4699      	mov	r9, r3
 801f038:	4604      	mov	r4, r0
 801f03a:	2a00      	cmp	r2, #0
 801f03c:	d03a      	beq.n	801f0b4 <udp_sendto_if_src+0xac>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801f03e:	892a      	ldrh	r2, [r5, #8]
 801f040:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801f044:	429a      	cmp	r2, r3
 801f046:	d856      	bhi.n	801f0f6 <udp_sendto_if_src+0xee>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801f048:	2108      	movs	r1, #8
 801f04a:	4628      	mov	r0, r5
 801f04c:	f7fa ff1c 	bl	8019e88 <pbuf_add_header>
 801f050:	2800      	cmp	r0, #0
 801f052:	d139      	bne.n	801f0c8 <udp_sendto_if_src+0xc0>
 801f054:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f056:	8973      	ldrh	r3, [r6, #10]
 801f058:	2b07      	cmp	r3, #7
 801f05a:	d944      	bls.n	801f0e6 <udp_sendto_if_src+0xde>
  udphdr = (struct udp_hdr *)q->payload;
 801f05c:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801f05e:	8a60      	ldrh	r0, [r4, #18]
 801f060:	f7f8 ff32 	bl	8017ec8 <lwip_htons>
 801f064:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 801f066:	4648      	mov	r0, r9
 801f068:	f7f8 ff2e 	bl	8017ec8 <lwip_htons>
  udphdr->chksum = 0x0000;
 801f06c:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801f06e:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 801f070:	71bb      	strb	r3, [r7, #6]
 801f072:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801f074:	8930      	ldrh	r0, [r6, #8]
 801f076:	f7f8 ff27 	bl	8017ec8 <lwip_htons>
 801f07a:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f07c:	f8cd b008 	str.w	fp, [sp, #8]
 801f080:	2011      	movs	r0, #17
 801f082:	7aa3      	ldrb	r3, [r4, #10]
 801f084:	4642      	mov	r2, r8
 801f086:	4651      	mov	r1, sl
 801f088:	9300      	str	r3, [sp, #0]
 801f08a:	7ae3      	ldrb	r3, [r4, #11]
 801f08c:	9001      	str	r0, [sp, #4]
 801f08e:	4630      	mov	r0, r6
 801f090:	f002 fe8e 	bl	8021db0 <ip4_output_if_src>
  if (q != p) {
 801f094:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f096:	4607      	mov	r7, r0
  if (q != p) {
 801f098:	d002      	beq.n	801f0a0 <udp_sendto_if_src+0x98>
    pbuf_free(q);
 801f09a:	4630      	mov	r0, r6
 801f09c:	f7fa ff98 	bl	8019fd0 <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 801f0a0:	4a2f      	ldr	r2, [pc, #188]	; (801f160 <udp_sendto_if_src+0x158>)
 801f0a2:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
 801f0a6:	3301      	adds	r3, #1
 801f0a8:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
}
 801f0ac:	4638      	mov	r0, r7
 801f0ae:	b005      	add	sp, #20
 801f0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f0b4:	4601      	mov	r1, r0
 801f0b6:	f7ff ff29 	bl	801ef0c <udp_bind>
    if (err != ERR_OK) {
 801f0ba:	4607      	mov	r7, r0
 801f0bc:	2800      	cmp	r0, #0
 801f0be:	d0be      	beq.n	801f03e <udp_sendto_if_src+0x36>
}
 801f0c0:	4638      	mov	r0, r7
 801f0c2:	b005      	add	sp, #20
 801f0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801f0c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f0cc:	2108      	movs	r1, #8
 801f0ce:	2022      	movs	r0, #34	; 0x22
 801f0d0:	f7fa fdc8 	bl	8019c64 <pbuf_alloc>
    if (q == NULL) {
 801f0d4:	4606      	mov	r6, r0
 801f0d6:	b170      	cbz	r0, 801f0f6 <udp_sendto_if_src+0xee>
    if (p->tot_len != 0) {
 801f0d8:	892b      	ldrh	r3, [r5, #8]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d0bb      	beq.n	801f056 <udp_sendto_if_src+0x4e>
      pbuf_chain(q, p);
 801f0de:	4629      	mov	r1, r5
 801f0e0:	f7fa ffe4 	bl	801a0ac <pbuf_chain>
 801f0e4:	e7b7      	b.n	801f056 <udp_sendto_if_src+0x4e>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f0e6:	4b1f      	ldr	r3, [pc, #124]	; (801f164 <udp_sendto_if_src+0x15c>)
 801f0e8:	f240 320d 	movw	r2, #781	; 0x30d
 801f0ec:	491e      	ldr	r1, [pc, #120]	; (801f168 <udp_sendto_if_src+0x160>)
 801f0ee:	481f      	ldr	r0, [pc, #124]	; (801f16c <udp_sendto_if_src+0x164>)
 801f0f0:	f005 f9e4 	bl	80244bc <iprintf>
 801f0f4:	e7b2      	b.n	801f05c <udp_sendto_if_src+0x54>
    return ERR_MEM;
 801f0f6:	f04f 37ff 	mov.w	r7, #4294967295
 801f0fa:	e7d7      	b.n	801f0ac <udp_sendto_if_src+0xa4>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f0fc:	4b19      	ldr	r3, [pc, #100]	; (801f164 <udp_sendto_if_src+0x15c>)
 801f0fe:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801f102:	491b      	ldr	r1, [pc, #108]	; (801f170 <udp_sendto_if_src+0x168>)
 801f104:	f06f 070f 	mvn.w	r7, #15
 801f108:	4818      	ldr	r0, [pc, #96]	; (801f16c <udp_sendto_if_src+0x164>)
 801f10a:	f005 f9d7 	bl	80244bc <iprintf>
 801f10e:	e7cd      	b.n	801f0ac <udp_sendto_if_src+0xa4>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f110:	4b14      	ldr	r3, [pc, #80]	; (801f164 <udp_sendto_if_src+0x15c>)
 801f112:	f240 22d3 	movw	r2, #723	; 0x2d3
 801f116:	4917      	ldr	r1, [pc, #92]	; (801f174 <udp_sendto_if_src+0x16c>)
 801f118:	f06f 070f 	mvn.w	r7, #15
 801f11c:	4813      	ldr	r0, [pc, #76]	; (801f16c <udp_sendto_if_src+0x164>)
 801f11e:	f005 f9cd 	bl	80244bc <iprintf>
 801f122:	e7c3      	b.n	801f0ac <udp_sendto_if_src+0xa4>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f124:	4b0f      	ldr	r3, [pc, #60]	; (801f164 <udp_sendto_if_src+0x15c>)
 801f126:	f240 22d2 	movw	r2, #722	; 0x2d2
 801f12a:	4913      	ldr	r1, [pc, #76]	; (801f178 <udp_sendto_if_src+0x170>)
 801f12c:	f06f 070f 	mvn.w	r7, #15
 801f130:	480e      	ldr	r0, [pc, #56]	; (801f16c <udp_sendto_if_src+0x164>)
 801f132:	f005 f9c3 	bl	80244bc <iprintf>
 801f136:	e7b9      	b.n	801f0ac <udp_sendto_if_src+0xa4>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f138:	4b0a      	ldr	r3, [pc, #40]	; (801f164 <udp_sendto_if_src+0x15c>)
 801f13a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801f13e:	490f      	ldr	r1, [pc, #60]	; (801f17c <udp_sendto_if_src+0x174>)
 801f140:	f06f 070f 	mvn.w	r7, #15
 801f144:	4809      	ldr	r0, [pc, #36]	; (801f16c <udp_sendto_if_src+0x164>)
 801f146:	f005 f9b9 	bl	80244bc <iprintf>
 801f14a:	e7af      	b.n	801f0ac <udp_sendto_if_src+0xa4>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f14c:	4b05      	ldr	r3, [pc, #20]	; (801f164 <udp_sendto_if_src+0x15c>)
 801f14e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801f152:	490b      	ldr	r1, [pc, #44]	; (801f180 <udp_sendto_if_src+0x178>)
 801f154:	f06f 070f 	mvn.w	r7, #15
 801f158:	4804      	ldr	r0, [pc, #16]	; (801f16c <udp_sendto_if_src+0x164>)
 801f15a:	f005 f9af 	bl	80244bc <iprintf>
 801f15e:	e7a5      	b.n	801f0ac <udp_sendto_if_src+0xa4>
 801f160:	2002db54 	.word	0x2002db54
 801f164:	080e1670 	.word	0x080e1670
 801f168:	080e17dc 	.word	0x080e17dc
 801f16c:	0802ac68 	.word	0x0802ac68
 801f170:	080e1794 	.word	0x080e1794
 801f174:	080e1770 	.word	0x080e1770
 801f178:	080e1750 	.word	0x080e1750
 801f17c:	080e1730 	.word	0x080e1730
 801f180:	080e17b8 	.word	0x080e17b8

0801f184 <udp_sendto_if>:
{
 801f184:	b570      	push	{r4, r5, r6, lr}
 801f186:	b082      	sub	sp, #8
 801f188:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f18a:	2800      	cmp	r0, #0
 801f18c:	d036      	beq.n	801f1fc <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f18e:	b359      	cbz	r1, 801f1e8 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f190:	b302      	cbz	r2, 801f1d4 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f192:	b1ac      	cbz	r4, 801f1c0 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f194:	6805      	ldr	r5, [r0, #0]
 801f196:	b935      	cbnz	r5, 801f1a6 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 801f198:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801f19a:	e9cd 4500 	strd	r4, r5, [sp]
 801f19e:	f7ff ff33 	bl	801f008 <udp_sendto_if_src>
}
 801f1a2:	b002      	add	sp, #8
 801f1a4:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801f1a6:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f1aa:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 801f1ae:	d0f3      	beq.n	801f198 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801f1b0:	6866      	ldr	r6, [r4, #4]
 801f1b2:	42b5      	cmp	r5, r6
 801f1b4:	d101      	bne.n	801f1ba <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f1b6:	4605      	mov	r5, r0
 801f1b8:	e7ef      	b.n	801f19a <udp_sendto_if+0x16>
        return ERR_RTE;
 801f1ba:	f06f 0003 	mvn.w	r0, #3
 801f1be:	e7f0      	b.n	801f1a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f1c0:	4b13      	ldr	r3, [pc, #76]	; (801f210 <udp_sendto_if+0x8c>)
 801f1c2:	f240 2283 	movw	r2, #643	; 0x283
 801f1c6:	4913      	ldr	r1, [pc, #76]	; (801f214 <udp_sendto_if+0x90>)
 801f1c8:	4813      	ldr	r0, [pc, #76]	; (801f218 <udp_sendto_if+0x94>)
 801f1ca:	f005 f977 	bl	80244bc <iprintf>
 801f1ce:	f06f 000f 	mvn.w	r0, #15
 801f1d2:	e7e6      	b.n	801f1a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f1d4:	4b0e      	ldr	r3, [pc, #56]	; (801f210 <udp_sendto_if+0x8c>)
 801f1d6:	f240 2282 	movw	r2, #642	; 0x282
 801f1da:	4910      	ldr	r1, [pc, #64]	; (801f21c <udp_sendto_if+0x98>)
 801f1dc:	480e      	ldr	r0, [pc, #56]	; (801f218 <udp_sendto_if+0x94>)
 801f1de:	f005 f96d 	bl	80244bc <iprintf>
 801f1e2:	f06f 000f 	mvn.w	r0, #15
 801f1e6:	e7dc      	b.n	801f1a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f1e8:	4b09      	ldr	r3, [pc, #36]	; (801f210 <udp_sendto_if+0x8c>)
 801f1ea:	f240 2281 	movw	r2, #641	; 0x281
 801f1ee:	490c      	ldr	r1, [pc, #48]	; (801f220 <udp_sendto_if+0x9c>)
 801f1f0:	4809      	ldr	r0, [pc, #36]	; (801f218 <udp_sendto_if+0x94>)
 801f1f2:	f005 f963 	bl	80244bc <iprintf>
 801f1f6:	f06f 000f 	mvn.w	r0, #15
 801f1fa:	e7d2      	b.n	801f1a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f1fc:	4b04      	ldr	r3, [pc, #16]	; (801f210 <udp_sendto_if+0x8c>)
 801f1fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f202:	4908      	ldr	r1, [pc, #32]	; (801f224 <udp_sendto_if+0xa0>)
 801f204:	4804      	ldr	r0, [pc, #16]	; (801f218 <udp_sendto_if+0x94>)
 801f206:	f005 f959 	bl	80244bc <iprintf>
 801f20a:	f06f 000f 	mvn.w	r0, #15
 801f20e:	e7c8      	b.n	801f1a2 <udp_sendto_if+0x1e>
 801f210:	080e1670 	.word	0x080e1670
 801f214:	080e1864 	.word	0x080e1864
 801f218:	0802ac68 	.word	0x0802ac68
 801f21c:	080e1844 	.word	0x080e1844
 801f220:	080e1828 	.word	0x080e1828
 801f224:	080e180c 	.word	0x080e180c

0801f228 <udp_sendto>:
{
 801f228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f22c:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f22e:	2800      	cmp	r0, #0
 801f230:	d037      	beq.n	801f2a2 <udp_sendto+0x7a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f232:	460e      	mov	r6, r1
 801f234:	b359      	cbz	r1, 801f28e <udp_sendto+0x66>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f236:	4615      	mov	r5, r2
 801f238:	b1fa      	cbz	r2, 801f27a <udp_sendto+0x52>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f23a:	4604      	mov	r4, r0
 801f23c:	7a00      	ldrb	r0, [r0, #8]
 801f23e:	4698      	mov	r8, r3
 801f240:	b168      	cbz	r0, 801f25e <udp_sendto+0x36>
    netif = netif_get_by_index(pcb->netif_idx);
 801f242:	f7fa fbbb 	bl	80199bc <netif_get_by_index>
 801f246:	4607      	mov	r7, r0
  if (netif == NULL) {
 801f248:	b177      	cbz	r7, 801f268 <udp_sendto+0x40>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f24a:	4643      	mov	r3, r8
 801f24c:	462a      	mov	r2, r5
 801f24e:	4631      	mov	r1, r6
 801f250:	4620      	mov	r0, r4
 801f252:	9700      	str	r7, [sp, #0]
 801f254:	f7ff ff96 	bl	801f184 <udp_sendto_if>
}
 801f258:	b002      	add	sp, #8
 801f25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f25e:	4610      	mov	r0, r2
 801f260:	f002 fc30 	bl	8021ac4 <ip4_route>
 801f264:	4607      	mov	r7, r0
 801f266:	e7ef      	b.n	801f248 <udp_sendto+0x20>
    UDP_STATS_INC(udp.rterr);
 801f268:	4a13      	ldr	r2, [pc, #76]	; (801f2b8 <udp_sendto+0x90>)
    return ERR_RTE;
 801f26a:	f06f 0003 	mvn.w	r0, #3
    UDP_STATS_INC(udp.rterr);
 801f26e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 801f272:	3301      	adds	r3, #1
 801f274:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
    return ERR_RTE;
 801f278:	e7ee      	b.n	801f258 <udp_sendto+0x30>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f27a:	4b10      	ldr	r3, [pc, #64]	; (801f2bc <udp_sendto+0x94>)
 801f27c:	f240 221a 	movw	r2, #538	; 0x21a
 801f280:	490f      	ldr	r1, [pc, #60]	; (801f2c0 <udp_sendto+0x98>)
 801f282:	4810      	ldr	r0, [pc, #64]	; (801f2c4 <udp_sendto+0x9c>)
 801f284:	f005 f91a 	bl	80244bc <iprintf>
 801f288:	f06f 000f 	mvn.w	r0, #15
 801f28c:	e7e4      	b.n	801f258 <udp_sendto+0x30>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f28e:	4b0b      	ldr	r3, [pc, #44]	; (801f2bc <udp_sendto+0x94>)
 801f290:	f240 2219 	movw	r2, #537	; 0x219
 801f294:	490c      	ldr	r1, [pc, #48]	; (801f2c8 <udp_sendto+0xa0>)
 801f296:	480b      	ldr	r0, [pc, #44]	; (801f2c4 <udp_sendto+0x9c>)
 801f298:	f005 f910 	bl	80244bc <iprintf>
 801f29c:	f06f 000f 	mvn.w	r0, #15
 801f2a0:	e7da      	b.n	801f258 <udp_sendto+0x30>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f2a2:	4b06      	ldr	r3, [pc, #24]	; (801f2bc <udp_sendto+0x94>)
 801f2a4:	f44f 7206 	mov.w	r2, #536	; 0x218
 801f2a8:	4908      	ldr	r1, [pc, #32]	; (801f2cc <udp_sendto+0xa4>)
 801f2aa:	4806      	ldr	r0, [pc, #24]	; (801f2c4 <udp_sendto+0x9c>)
 801f2ac:	f005 f906 	bl	80244bc <iprintf>
 801f2b0:	f06f 000f 	mvn.w	r0, #15
 801f2b4:	e7d0      	b.n	801f258 <udp_sendto+0x30>
 801f2b6:	bf00      	nop
 801f2b8:	2002db54 	.word	0x2002db54
 801f2bc:	080e1670 	.word	0x080e1670
 801f2c0:	080e18b8 	.word	0x080e18b8
 801f2c4:	0802ac68 	.word	0x0802ac68
 801f2c8:	080e189c 	.word	0x080e189c
 801f2cc:	080e1884 	.word	0x080e1884

0801f2d0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801f2d0:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801f2d2:	b320      	cbz	r0, 801f31e <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801f2d4:	460d      	mov	r5, r1
 801f2d6:	b361      	cbz	r1, 801f332 <udp_connect+0x62>

  if (pcb->local_port == 0) {
 801f2d8:	4616      	mov	r6, r2
 801f2da:	8a42      	ldrh	r2, [r0, #18]
 801f2dc:	4604      	mov	r4, r0
 801f2de:	b1c2      	cbz	r2, 801f312 <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801f2e0:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801f2e2:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f2e4:	4918      	ldr	r1, [pc, #96]	; (801f348 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801f2e6:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801f2ea:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f2ec:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 801f2ee:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801f2f0:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f2f2:	b142      	cbz	r2, 801f306 <udp_connect+0x36>
    if (pcb == ipcb) {
 801f2f4:	4294      	cmp	r4, r2
 801f2f6:	d00a      	beq.n	801f30e <udp_connect+0x3e>
 801f2f8:	4613      	mov	r3, r2
 801f2fa:	e001      	b.n	801f300 <udp_connect+0x30>
 801f2fc:	429c      	cmp	r4, r3
 801f2fe:	d006      	beq.n	801f30e <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f300:	68db      	ldr	r3, [r3, #12]
 801f302:	2b00      	cmp	r3, #0
 801f304:	d1fa      	bne.n	801f2fc <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 801f306:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 801f308:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 801f30a:	600c      	str	r4, [r1, #0]
}
 801f30c:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801f30e:	2000      	movs	r0, #0
}
 801f310:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f312:	4601      	mov	r1, r0
 801f314:	f7ff fdfa 	bl	801ef0c <udp_bind>
    if (err != ERR_OK) {
 801f318:	2800      	cmp	r0, #0
 801f31a:	d0e1      	beq.n	801f2e0 <udp_connect+0x10>
}
 801f31c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801f31e:	4b0b      	ldr	r3, [pc, #44]	; (801f34c <udp_connect+0x7c>)
 801f320:	f240 4235 	movw	r2, #1077	; 0x435
 801f324:	490a      	ldr	r1, [pc, #40]	; (801f350 <udp_connect+0x80>)
 801f326:	480b      	ldr	r0, [pc, #44]	; (801f354 <udp_connect+0x84>)
 801f328:	f005 f8c8 	bl	80244bc <iprintf>
 801f32c:	f06f 000f 	mvn.w	r0, #15
}
 801f330:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801f332:	4b06      	ldr	r3, [pc, #24]	; (801f34c <udp_connect+0x7c>)
 801f334:	f240 4236 	movw	r2, #1078	; 0x436
 801f338:	4907      	ldr	r1, [pc, #28]	; (801f358 <udp_connect+0x88>)
 801f33a:	4806      	ldr	r0, [pc, #24]	; (801f354 <udp_connect+0x84>)
 801f33c:	f005 f8be 	bl	80244bc <iprintf>
 801f340:	f06f 000f 	mvn.w	r0, #15
}
 801f344:	bd70      	pop	{r4, r5, r6, pc}
 801f346:	bf00      	nop
 801f348:	2002dcc4 	.word	0x2002dcc4
 801f34c:	080e1670 	.word	0x080e1670
 801f350:	080e18d4 	.word	0x080e18d4
 801f354:	0802ac68 	.word	0x0802ac68
 801f358:	080e18f0 	.word	0x080e18f0

0801f35c <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801f35c:	b110      	cbz	r0, 801f364 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801f35e:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801f362:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801f364:	4b03      	ldr	r3, [pc, #12]	; (801f374 <udp_recv+0x18>)
 801f366:	f240 428a 	movw	r2, #1162	; 0x48a
 801f36a:	4903      	ldr	r1, [pc, #12]	; (801f378 <udp_recv+0x1c>)
 801f36c:	4803      	ldr	r0, [pc, #12]	; (801f37c <udp_recv+0x20>)
 801f36e:	f005 b8a5 	b.w	80244bc <iprintf>
 801f372:	bf00      	nop
 801f374:	080e1670 	.word	0x080e1670
 801f378:	080e190c 	.word	0x080e190c
 801f37c:	0802ac68 	.word	0x0802ac68

0801f380 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801f380:	4601      	mov	r1, r0
 801f382:	b1c0      	cbz	r0, 801f3b6 <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801f384:	4b0f      	ldr	r3, [pc, #60]	; (801f3c4 <udp_remove+0x44>)
 801f386:	681a      	ldr	r2, [r3, #0]
 801f388:	4282      	cmp	r2, r0
 801f38a:	d00a      	beq.n	801f3a2 <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f38c:	b132      	cbz	r2, 801f39c <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801f38e:	68d3      	ldr	r3, [r2, #12]
 801f390:	428b      	cmp	r3, r1
 801f392:	d100      	bne.n	801f396 <udp_remove+0x16>
 801f394:	b953      	cbnz	r3, 801f3ac <udp_remove+0x2c>
 801f396:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f398:	2a00      	cmp	r2, #0
 801f39a:	d1f8      	bne.n	801f38e <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801f39c:	2001      	movs	r0, #1
 801f39e:	f7fa b91b 	b.w	80195d8 <memp_free>
    udp_pcbs = udp_pcbs->next;
 801f3a2:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801f3a4:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 801f3a6:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 801f3a8:	f7fa b916 	b.w	80195d8 <memp_free>
        pcb2->next = pcb->next;
 801f3ac:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801f3ae:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801f3b0:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801f3b2:	f7fa b911 	b.w	80195d8 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801f3b6:	4b04      	ldr	r3, [pc, #16]	; (801f3c8 <udp_remove+0x48>)
 801f3b8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801f3bc:	4903      	ldr	r1, [pc, #12]	; (801f3cc <udp_remove+0x4c>)
 801f3be:	4804      	ldr	r0, [pc, #16]	; (801f3d0 <udp_remove+0x50>)
 801f3c0:	f005 b87c 	b.w	80244bc <iprintf>
 801f3c4:	2002dcc4 	.word	0x2002dcc4
 801f3c8:	080e1670 	.word	0x080e1670
 801f3cc:	080e1924 	.word	0x080e1924
 801f3d0:	0802ac68 	.word	0x0802ac68

0801f3d4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801f3d4:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801f3d6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801f3da:	4907      	ldr	r1, [pc, #28]	; (801f3f8 <udp_new+0x24>)
 801f3dc:	2001      	movs	r0, #1
 801f3de:	f7fa f8b7 	bl	8019550 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801f3e2:	4604      	mov	r4, r0
 801f3e4:	b128      	cbz	r0, 801f3f2 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801f3e6:	2220      	movs	r2, #32
 801f3e8:	2100      	movs	r1, #0
 801f3ea:	f004 f8cb 	bl	8023584 <memset>
    pcb->ttl = UDP_TTL;
 801f3ee:	23ff      	movs	r3, #255	; 0xff
 801f3f0:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801f3f2:	4620      	mov	r0, r4
 801f3f4:	bd10      	pop	{r4, pc}
 801f3f6:	bf00      	nop
 801f3f8:	080e1670 	.word	0x080e1670

0801f3fc <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801f3fc:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801f3fe:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801f402:	4907      	ldr	r1, [pc, #28]	; (801f420 <udp_new_ip_type+0x24>)
 801f404:	2001      	movs	r0, #1
 801f406:	f7fa f8a3 	bl	8019550 <memp_malloc_fn>
  if (pcb != NULL) {
 801f40a:	4604      	mov	r4, r0
 801f40c:	b128      	cbz	r0, 801f41a <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 801f40e:	2220      	movs	r2, #32
 801f410:	2100      	movs	r1, #0
 801f412:	f004 f8b7 	bl	8023584 <memset>
    pcb->ttl = UDP_TTL;
 801f416:	23ff      	movs	r3, #255	; 0xff
 801f418:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 801f41a:	4620      	mov	r0, r4
 801f41c:	bd10      	pop	{r4, pc}
 801f41e:	bf00      	nop
 801f420:	080e1670 	.word	0x080e1670

0801f424 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801f424:	b110      	cbz	r0, 801f42c <udp_netif_ip_addr_changed+0x8>
 801f426:	6802      	ldr	r2, [r0, #0]
 801f428:	b101      	cbz	r1, 801f42c <udp_netif_ip_addr_changed+0x8>
 801f42a:	b902      	cbnz	r2, 801f42e <udp_netif_ip_addr_changed+0xa>
 801f42c:	4770      	bx	lr
 801f42e:	680b      	ldr	r3, [r1, #0]
 801f430:	2b00      	cmp	r3, #0
 801f432:	d0fb      	beq.n	801f42c <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f434:	4b08      	ldr	r3, [pc, #32]	; (801f458 <udp_netif_ip_addr_changed+0x34>)
 801f436:	681b      	ldr	r3, [r3, #0]
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d0f7      	beq.n	801f42c <udp_netif_ip_addr_changed+0x8>
{
 801f43c:	b410      	push	{r4}
 801f43e:	e000      	b.n	801f442 <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801f440:	6802      	ldr	r2, [r0, #0]
 801f442:	681c      	ldr	r4, [r3, #0]
 801f444:	4294      	cmp	r4, r2
 801f446:	d101      	bne.n	801f44c <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801f448:	680a      	ldr	r2, [r1, #0]
 801f44a:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f44c:	68db      	ldr	r3, [r3, #12]
 801f44e:	2b00      	cmp	r3, #0
 801f450:	d1f6      	bne.n	801f440 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801f452:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f456:	4770      	bx	lr
 801f458:	2002dcc4 	.word	0x2002dcc4

0801f45c <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801f45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801f45e:	1d07      	adds	r7, r0, #4
{
 801f460:	4604      	mov	r4, r0
 801f462:	460d      	mov	r5, r1
 801f464:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801f466:	2f44      	cmp	r7, #68	; 0x44
 801f468:	d80e      	bhi.n	801f488 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801f46a:	0e33      	lsrs	r3, r6, #24
 801f46c:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801f46e:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801f470:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801f472:	b292      	uxth	r2, r2
 801f474:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801f476:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801f478:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801f47a:	0a32      	lsrs	r2, r6, #8
 801f47c:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801f47e:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801f480:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 801f482:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801f484:	552e      	strb	r6, [r5, r4]
}
 801f486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801f488:	4b03      	ldr	r3, [pc, #12]	; (801f498 <dhcp_option_long+0x3c>)
 801f48a:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801f48e:	4903      	ldr	r1, [pc, #12]	; (801f49c <dhcp_option_long+0x40>)
 801f490:	4803      	ldr	r0, [pc, #12]	; (801f4a0 <dhcp_option_long+0x44>)
 801f492:	f005 f813 	bl	80244bc <iprintf>
 801f496:	e7e8      	b.n	801f46a <dhcp_option_long+0xe>
 801f498:	080e193c 	.word	0x080e193c
 801f49c:	080e1974 	.word	0x080e1974
 801f4a0:	0802ac68 	.word	0x0802ac68

0801f4a4 <dhcp_check>:
{
 801f4a4:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f4a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 801f4a8:	7963      	ldrb	r3, [r4, #5]
 801f4aa:	2b08      	cmp	r3, #8
 801f4ac:	d004      	beq.n	801f4b8 <dhcp_check+0x14>
    dhcp->tries = 0;
 801f4ae:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801f4b0:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801f4b2:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 801f4b4:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801f4b6:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801f4b8:	2200      	movs	r2, #0
 801f4ba:	f104 011c 	add.w	r1, r4, #28
 801f4be:	f001 ffcf 	bl	8021460 <etharp_query>
  if (dhcp->tries < 255) {
 801f4c2:	79a3      	ldrb	r3, [r4, #6]
 801f4c4:	2bff      	cmp	r3, #255	; 0xff
 801f4c6:	d001      	beq.n	801f4cc <dhcp_check+0x28>
    dhcp->tries++;
 801f4c8:	3301      	adds	r3, #1
 801f4ca:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801f4cc:	2301      	movs	r3, #1
 801f4ce:	8123      	strh	r3, [r4, #8]
}
 801f4d0:	bd10      	pop	{r4, pc}
 801f4d2:	bf00      	nop

0801f4d4 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801f4d4:	2800      	cmp	r0, #0
 801f4d6:	f000 808e 	beq.w	801f5f6 <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 801f4da:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801f4dc:	2900      	cmp	r1, #0
 801f4de:	f000 8091 	beq.w	801f604 <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801f4e2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 801f4e4:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801f4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 801f4ea:	b500      	push	{lr}
  dhcp->lease_used = 0;
 801f4ec:	824a      	strh	r2, [r1, #18]
{
 801f4ee:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801f4f0:	d00e      	beq.n	801f510 <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f4f2:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801f4f4:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801f4f8:	d258      	bcs.n	801f5ac <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f4fa:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 801f4fe:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f500:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 801f504:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 801f508:	f200 8083 	bhi.w	801f612 <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 801f50c:	2301      	movs	r3, #1
 801f50e:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801f510:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801f512:	1c5a      	adds	r2, r3, #1
 801f514:	d050      	beq.n	801f5b8 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f516:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801f518:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801f51c:	d241      	bcs.n	801f5a2 <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f51e:	4a40      	ldr	r2, [pc, #256]	; (801f620 <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 801f520:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f522:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 801f526:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 801f52a:	d874      	bhi.n	801f616 <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 801f52c:	2301      	movs	r3, #1
 801f52e:	469c      	mov	ip, r3
 801f530:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801f532:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801f534:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801f538:	1c53      	adds	r3, r2, #1
 801f53a:	d042      	beq.n	801f5c2 <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f53c:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 801f53e:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 801f542:	d24b      	bcs.n	801f5dc <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f544:	4b36      	ldr	r3, [pc, #216]	; (801f620 <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 801f546:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f548:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 801f54c:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 801f550:	d864      	bhi.n	801f61c <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 801f552:	2201      	movs	r2, #1
 801f554:	4613      	mov	r3, r2
 801f556:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801f558:	2201      	movs	r2, #1
 801f55a:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801f55c:	459c      	cmp	ip, r3
 801f55e:	d302      	bcc.n	801f566 <dhcp_bind+0x92>
 801f560:	b10a      	cbz	r2, 801f566 <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 801f562:	2300      	movs	r3, #0
 801f564:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 801f566:	79cb      	ldrb	r3, [r1, #7]
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d02f      	beq.n	801f5cc <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801f56c:	6a0b      	ldr	r3, [r1, #32]
 801f56e:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801f570:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801f572:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 801f574:	b92b      	cbnz	r3, 801f582 <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801f576:	69cb      	ldr	r3, [r1, #28]
 801f578:	9a00      	ldr	r2, [sp, #0]
 801f57a:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801f57c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801f580:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 801f582:	794b      	ldrb	r3, [r1, #5]
 801f584:	2b0a      	cmp	r3, #10
 801f586:	d004      	beq.n	801f592 <dhcp_bind+0xbe>
    dhcp->tries = 0;
 801f588:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801f58a:	220a      	movs	r2, #10
    dhcp->tries = 0;
 801f58c:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 801f58e:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 801f590:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801f592:	ab01      	add	r3, sp, #4
 801f594:	466a      	mov	r2, sp
 801f596:	311c      	adds	r1, #28
 801f598:	f7fa f89c 	bl	80196d4 <netif_set_addr>
}
 801f59c:	b003      	add	sp, #12
 801f59e:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 801f5a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f5a6:	469c      	mov	ip, r3
 801f5a8:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 801f5aa:	e7c2      	b.n	801f532 <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 801f5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f5b0:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801f5b2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801f5b4:	1c5a      	adds	r2, r3, #1
 801f5b6:	d1ae      	bne.n	801f516 <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801f5b8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801f5ba:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801f5be:	1c53      	adds	r3, r2, #1
 801f5c0:	d1bc      	bne.n	801f53c <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801f5c2:	898b      	ldrh	r3, [r1, #12]
 801f5c4:	1e1a      	subs	r2, r3, #0
 801f5c6:	bf18      	it	ne
 801f5c8:	2201      	movne	r2, #1
 801f5ca:	e7c7      	b.n	801f55c <dhcp_bind+0x88>
    if (first_octet <= 127) {
 801f5cc:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801f5d0:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	db07      	blt.n	801f5e6 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801f5d6:	23ff      	movs	r3, #255	; 0xff
 801f5d8:	9300      	str	r3, [sp, #0]
 801f5da:	e7c9      	b.n	801f570 <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 801f5dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f5e0:	4613      	mov	r3, r2
 801f5e2:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 801f5e4:	e7b8      	b.n	801f558 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 801f5e6:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801f5e8:	bf8c      	ite	hi
 801f5ea:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801f5ee:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 801f5f2:	9300      	str	r3, [sp, #0]
 801f5f4:	e7bc      	b.n	801f570 <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801f5f6:	4b0b      	ldr	r3, [pc, #44]	; (801f624 <dhcp_bind+0x150>)
 801f5f8:	f240 4215 	movw	r2, #1045	; 0x415
 801f5fc:	490a      	ldr	r1, [pc, #40]	; (801f628 <dhcp_bind+0x154>)
 801f5fe:	480b      	ldr	r0, [pc, #44]	; (801f62c <dhcp_bind+0x158>)
 801f600:	f004 bf5c 	b.w	80244bc <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801f604:	4b07      	ldr	r3, [pc, #28]	; (801f624 <dhcp_bind+0x150>)
 801f606:	f240 4217 	movw	r2, #1047	; 0x417
 801f60a:	4909      	ldr	r1, [pc, #36]	; (801f630 <dhcp_bind+0x15c>)
 801f60c:	4807      	ldr	r0, [pc, #28]	; (801f62c <dhcp_bind+0x158>)
 801f60e:	f004 bf55 	b.w	80244bc <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 801f612:	828a      	strh	r2, [r1, #20]
 801f614:	e77c      	b.n	801f510 <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 801f616:	f8a1 c00a 	strh.w	ip, [r1, #10]
 801f61a:	e78a      	b.n	801f532 <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 801f61c:	818b      	strh	r3, [r1, #12]
 801f61e:	e79b      	b.n	801f558 <dhcp_bind+0x84>
 801f620:	88888889 	.word	0x88888889
 801f624:	080e193c 	.word	0x080e193c
 801f628:	080e19b0 	.word	0x080e19b0
 801f62c:	0802ac68 	.word	0x0802ac68
 801f630:	080e19cc 	.word	0x080e19cc

0801f634 <dhcp_inc_pcb_refcount>:
{
 801f634:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 801f636:	4c15      	ldr	r4, [pc, #84]	; (801f68c <dhcp_inc_pcb_refcount+0x58>)
 801f638:	7823      	ldrb	r3, [r4, #0]
 801f63a:	b9fb      	cbnz	r3, 801f67c <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801f63c:	4d14      	ldr	r5, [pc, #80]	; (801f690 <dhcp_inc_pcb_refcount+0x5c>)
 801f63e:	682b      	ldr	r3, [r5, #0]
 801f640:	b12b      	cbz	r3, 801f64e <dhcp_inc_pcb_refcount+0x1a>
 801f642:	4b14      	ldr	r3, [pc, #80]	; (801f694 <dhcp_inc_pcb_refcount+0x60>)
 801f644:	22e5      	movs	r2, #229	; 0xe5
 801f646:	4914      	ldr	r1, [pc, #80]	; (801f698 <dhcp_inc_pcb_refcount+0x64>)
 801f648:	4814      	ldr	r0, [pc, #80]	; (801f69c <dhcp_inc_pcb_refcount+0x68>)
 801f64a:	f004 ff37 	bl	80244bc <iprintf>
    dhcp_pcb = udp_new();
 801f64e:	f7ff fec1 	bl	801f3d4 <udp_new>
 801f652:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 801f654:	b1b0      	cbz	r0, 801f684 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801f656:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801f658:	4911      	ldr	r1, [pc, #68]	; (801f6a0 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801f65a:	f042 0220 	orr.w	r2, r2, #32
 801f65e:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801f660:	2244      	movs	r2, #68	; 0x44
 801f662:	f7ff fc53 	bl	801ef0c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801f666:	2243      	movs	r2, #67	; 0x43
 801f668:	490d      	ldr	r1, [pc, #52]	; (801f6a0 <dhcp_inc_pcb_refcount+0x6c>)
 801f66a:	6828      	ldr	r0, [r5, #0]
 801f66c:	f7ff fe30 	bl	801f2d0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801f670:	2200      	movs	r2, #0
 801f672:	490c      	ldr	r1, [pc, #48]	; (801f6a4 <dhcp_inc_pcb_refcount+0x70>)
 801f674:	6828      	ldr	r0, [r5, #0]
 801f676:	f7ff fe71 	bl	801f35c <udp_recv>
  dhcp_pcb_refcount++;
 801f67a:	7823      	ldrb	r3, [r4, #0]
 801f67c:	3301      	adds	r3, #1
  return ERR_OK;
 801f67e:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 801f680:	7023      	strb	r3, [r4, #0]
}
 801f682:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 801f684:	f04f 30ff 	mov.w	r0, #4294967295
}
 801f688:	bd38      	pop	{r3, r4, r5, pc}
 801f68a:	bf00      	nop
 801f68c:	2002dccc 	.word	0x2002dccc
 801f690:	2002dcc8 	.word	0x2002dcc8
 801f694:	080e193c 	.word	0x080e193c
 801f698:	080e19e4 	.word	0x080e19e4
 801f69c:	0802ac68 	.word	0x0802ac68
 801f6a0:	080e1ff0 	.word	0x080e1ff0
 801f6a4:	0801ff4d 	.word	0x0801ff4d

0801f6a8 <dhcp_dec_pcb_refcount>:
{
 801f6a8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801f6aa:	4d0b      	ldr	r5, [pc, #44]	; (801f6d8 <dhcp_dec_pcb_refcount+0x30>)
 801f6ac:	782c      	ldrb	r4, [r5, #0]
 801f6ae:	b154      	cbz	r4, 801f6c6 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801f6b0:	3c01      	subs	r4, #1
 801f6b2:	b2e4      	uxtb	r4, r4
 801f6b4:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 801f6b6:	b104      	cbz	r4, 801f6ba <dhcp_dec_pcb_refcount+0x12>
}
 801f6b8:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 801f6ba:	4d08      	ldr	r5, [pc, #32]	; (801f6dc <dhcp_dec_pcb_refcount+0x34>)
 801f6bc:	6828      	ldr	r0, [r5, #0]
 801f6be:	f7ff fe5f 	bl	801f380 <udp_remove>
    dhcp_pcb = NULL;
 801f6c2:	602c      	str	r4, [r5, #0]
}
 801f6c4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801f6c6:	4b06      	ldr	r3, [pc, #24]	; (801f6e0 <dhcp_dec_pcb_refcount+0x38>)
 801f6c8:	22ff      	movs	r2, #255	; 0xff
 801f6ca:	4906      	ldr	r1, [pc, #24]	; (801f6e4 <dhcp_dec_pcb_refcount+0x3c>)
 801f6cc:	4806      	ldr	r0, [pc, #24]	; (801f6e8 <dhcp_dec_pcb_refcount+0x40>)
 801f6ce:	f004 fef5 	bl	80244bc <iprintf>
  dhcp_pcb_refcount--;
 801f6d2:	782c      	ldrb	r4, [r5, #0]
 801f6d4:	e7ec      	b.n	801f6b0 <dhcp_dec_pcb_refcount+0x8>
 801f6d6:	bf00      	nop
 801f6d8:	2002dccc 	.word	0x2002dccc
 801f6dc:	2002dcc8 	.word	0x2002dcc8
 801f6e0:	080e193c 	.word	0x080e193c
 801f6e4:	080e1a0c 	.word	0x080e1a0c
 801f6e8:	0802ac68 	.word	0x0802ac68

0801f6ec <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801f6ec:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801f6ee:	4d29      	ldr	r5, [pc, #164]	; (801f794 <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801f6f0:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801f6f2:	b083      	sub	sp, #12
 801f6f4:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801f6f6:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801f6f8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801f6fc:	b112      	cbz	r2, 801f704 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801f6fe:	4b26      	ldr	r3, [pc, #152]	; (801f798 <dhcp_handle_ack.isra.0+0xac>)
 801f700:	68db      	ldr	r3, [r3, #12]
 801f702:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801f704:	792b      	ldrb	r3, [r5, #4]
 801f706:	2b00      	cmp	r3, #0
 801f708:	d041      	beq.n	801f78e <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801f70a:	4b23      	ldr	r3, [pc, #140]	; (801f798 <dhcp_handle_ack.isra.0+0xac>)
 801f70c:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801f70e:	796a      	ldrb	r2, [r5, #5]
 801f710:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f712:	b312      	cbz	r2, 801f75a <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801f714:	4b20      	ldr	r3, [pc, #128]	; (801f798 <dhcp_handle_ack.isra.0+0xac>)
 801f716:	695b      	ldr	r3, [r3, #20]
 801f718:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801f71a:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801f71c:	690a      	ldr	r2, [r1, #16]
 801f71e:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801f720:	bb2b      	cbnz	r3, 801f76e <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 801f722:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801f724:	79eb      	ldrb	r3, [r5, #7]
 801f726:	2b00      	cmp	r3, #0
 801f728:	d12b      	bne.n	801f782 <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801f72a:	7a2b      	ldrb	r3, [r5, #8]
 801f72c:	b19b      	cbz	r3, 801f756 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801f72e:	4c1a      	ldr	r4, [pc, #104]	; (801f798 <dhcp_handle_ack.isra.0+0xac>)
 801f730:	6a20      	ldr	r0, [r4, #32]
 801f732:	f7f8 fbcd 	bl	8017ed0 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 801f736:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801f738:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 801f73a:	2000      	movs	r0, #0
 801f73c:	f7f8 ff6e 	bl	801861c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801f740:	7a6b      	ldrb	r3, [r5, #9]
 801f742:	b143      	cbz	r3, 801f756 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801f744:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f746:	f7f8 fbc3 	bl	8017ed0 <lwip_htonl>
 801f74a:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 801f74c:	a901      	add	r1, sp, #4
 801f74e:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801f750:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 801f752:	f7f8 ff63 	bl	801861c <dns_setserver>
}
 801f756:	b003      	add	sp, #12
 801f758:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801f75a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f75c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801f760:	08db      	lsrs	r3, r3, #3
 801f762:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801f764:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801f766:	690a      	ldr	r2, [r1, #16]
 801f768:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801f76a:	2b00      	cmp	r3, #0
 801f76c:	d0d9      	beq.n	801f722 <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801f76e:	4b0a      	ldr	r3, [pc, #40]	; (801f798 <dhcp_handle_ack.isra.0+0xac>)
 801f770:	6998      	ldr	r0, [r3, #24]
 801f772:	f7f8 fbad 	bl	8017ed0 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 801f776:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801f778:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 801f77a:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801f77c:	79eb      	ldrb	r3, [r5, #7]
 801f77e:	2b00      	cmp	r3, #0
 801f780:	d0d3      	beq.n	801f72a <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801f782:	4b05      	ldr	r3, [pc, #20]	; (801f798 <dhcp_handle_ack.isra.0+0xac>)
 801f784:	69d8      	ldr	r0, [r3, #28]
 801f786:	f7f8 fba3 	bl	8017ed0 <lwip_htonl>
 801f78a:	6260      	str	r0, [r4, #36]	; 0x24
 801f78c:	e7cd      	b.n	801f72a <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801f78e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f790:	085b      	lsrs	r3, r3, #1
 801f792:	e7bc      	b.n	801f70e <dhcp_handle_ack.isra.0+0x22>
 801f794:	2002dcd0 	.word	0x2002dcd0
 801f798:	2002dcdc 	.word	0x2002dcdc

0801f79c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801f79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801f7a0:	4681      	mov	r9, r0
 801f7a2:	2800      	cmp	r0, #0
 801f7a4:	f000 8097 	beq.w	801f8d6 <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801f7a8:	460c      	mov	r4, r1
 801f7aa:	2900      	cmp	r1, #0
 801f7ac:	f000 808a 	beq.w	801f8c4 <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801f7b0:	4616      	mov	r6, r2
 801f7b2:	f44f 719a 	mov.w	r1, #308	; 0x134
 801f7b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f7ba:	2036      	movs	r0, #54	; 0x36
 801f7bc:	461f      	mov	r7, r3
 801f7be:	f7fa fa51 	bl	8019c64 <pbuf_alloc>
  if (p_out == NULL) {
 801f7c2:	4605      	mov	r5, r0
 801f7c4:	2800      	cmp	r0, #0
 801f7c6:	d049      	beq.n	801f85c <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801f7c8:	8943      	ldrh	r3, [r0, #10]
 801f7ca:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801f7ce:	d371      	bcc.n	801f8b4 <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801f7d0:	2e03      	cmp	r6, #3
 801f7d2:	d051      	beq.n	801f878 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801f7d4:	79a3      	ldrb	r3, [r4, #6]
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d043      	beq.n	801f862 <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801f7da:	4b43      	ldr	r3, [pc, #268]	; (801f8e8 <dhcp_create_msg+0x14c>)
 801f7dc:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801f7de:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801f7e2:	f44f 729a 	mov.w	r2, #308	; 0x134
 801f7e6:	2100      	movs	r1, #0
    dhcp->xid = xid;
 801f7e8:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801f7ea:	4640      	mov	r0, r8
 801f7ec:	f003 feca 	bl	8023584 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801f7f0:	2301      	movs	r3, #1
 801f7f2:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801f7f6:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 801f7fa:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 801f7fe:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801f802:	6820      	ldr	r0, [r4, #0]
 801f804:	f7f8 fb64 	bl	8017ed0 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801f808:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 801f80a:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801f80e:	d12d      	bne.n	801f86c <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801f810:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f814:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f818:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 801f81c:	f109 0434 	add.w	r4, r9, #52	; 0x34
 801f820:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801f824:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f828:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 801f82a:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f82e:	d1f9      	bne.n	801f824 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801f830:	2363      	movs	r3, #99	; 0x63
 801f832:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 801f836:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801f83a:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 801f83e:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 801f842:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801f844:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 801f848:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 801f84a:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 801f84e:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801f850:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 801f854:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 801f858:	2303      	movs	r3, #3
 801f85a:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 801f85c:	4628      	mov	r0, r5
 801f85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 801f862:	f004 fecf 	bl	8024604 <rand>
 801f866:	4b20      	ldr	r3, [pc, #128]	; (801f8e8 <dhcp_create_msg+0x14c>)
 801f868:	6018      	str	r0, [r3, #0]
 801f86a:	e7b8      	b.n	801f7de <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801f86c:	1ff3      	subs	r3, r6, #7
 801f86e:	2b01      	cmp	r3, #1
 801f870:	d9ce      	bls.n	801f810 <dhcp_create_msg+0x74>
 801f872:	2e03      	cmp	r6, #3
 801f874:	d1d0      	bne.n	801f818 <dhcp_create_msg+0x7c>
 801f876:	e018      	b.n	801f8aa <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801f878:	7963      	ldrb	r3, [r4, #5]
 801f87a:	2b03      	cmp	r3, #3
 801f87c:	d0aa      	beq.n	801f7d4 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 801f87e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801f882:	f44f 729a 	mov.w	r2, #308	; 0x134
 801f886:	2100      	movs	r1, #0
 801f888:	4640      	mov	r0, r8
 801f88a:	f003 fe7b 	bl	8023584 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 801f88e:	2301      	movs	r3, #1
 801f890:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801f894:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 801f898:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 801f89c:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801f8a0:	6820      	ldr	r0, [r4, #0]
 801f8a2:	f7f8 fb15 	bl	8017ed0 <lwip_htonl>
 801f8a6:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801f8aa:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801f8ac:	3b04      	subs	r3, #4
 801f8ae:	2b01      	cmp	r3, #1
 801f8b0:	d8b2      	bhi.n	801f818 <dhcp_create_msg+0x7c>
 801f8b2:	e7ad      	b.n	801f810 <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801f8b4:	4b0d      	ldr	r3, [pc, #52]	; (801f8ec <dhcp_create_msg+0x150>)
 801f8b6:	f240 7271 	movw	r2, #1905	; 0x771
 801f8ba:	490d      	ldr	r1, [pc, #52]	; (801f8f0 <dhcp_create_msg+0x154>)
 801f8bc:	480d      	ldr	r0, [pc, #52]	; (801f8f4 <dhcp_create_msg+0x158>)
 801f8be:	f004 fdfd 	bl	80244bc <iprintf>
 801f8c2:	e785      	b.n	801f7d0 <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801f8c4:	4b09      	ldr	r3, [pc, #36]	; (801f8ec <dhcp_create_msg+0x150>)
 801f8c6:	f240 726a 	movw	r2, #1898	; 0x76a
 801f8ca:	490b      	ldr	r1, [pc, #44]	; (801f8f8 <dhcp_create_msg+0x15c>)
 801f8cc:	4625      	mov	r5, r4
 801f8ce:	4809      	ldr	r0, [pc, #36]	; (801f8f4 <dhcp_create_msg+0x158>)
 801f8d0:	f004 fdf4 	bl	80244bc <iprintf>
 801f8d4:	e7c2      	b.n	801f85c <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801f8d6:	4b05      	ldr	r3, [pc, #20]	; (801f8ec <dhcp_create_msg+0x150>)
 801f8d8:	f240 7269 	movw	r2, #1897	; 0x769
 801f8dc:	4907      	ldr	r1, [pc, #28]	; (801f8fc <dhcp_create_msg+0x160>)
 801f8de:	464d      	mov	r5, r9
 801f8e0:	4804      	ldr	r0, [pc, #16]	; (801f8f4 <dhcp_create_msg+0x158>)
 801f8e2:	f004 fdeb 	bl	80244bc <iprintf>
 801f8e6:	e7b9      	b.n	801f85c <dhcp_create_msg+0xc0>
 801f8e8:	2002dd04 	.word	0x2002dd04
 801f8ec:	080e193c 	.word	0x080e193c
 801f8f0:	080e1a70 	.word	0x080e1a70
 801f8f4:	0802ac68 	.word	0x0802ac68
 801f8f8:	080e1a50 	.word	0x080e1a50
 801f8fc:	080e1a30 	.word	0x080e1a30

0801f900 <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 801f900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f904:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 801f908:	b087      	sub	sp, #28
 801f90a:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 801f90c:	f89a 3005 	ldrb.w	r3, [sl, #5]
 801f910:	2b03      	cmp	r3, #3
 801f912:	d007      	beq.n	801f924 <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 801f914:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801f916:	2203      	movs	r2, #3
    dhcp->tries = 0;
 801f918:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 801f91c:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 801f920:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801f924:	f10d 0316 	add.w	r3, sp, #22
 801f928:	2203      	movs	r2, #3
 801f92a:	4651      	mov	r1, sl
 801f92c:	4648      	mov	r0, r9
 801f92e:	f7ff ff35 	bl	801f79c <dhcp_create_msg>
  if (p_out != NULL) {
 801f932:	4607      	mov	r7, r0
 801f934:	2800      	cmp	r0, #0
 801f936:	f000 808d 	beq.w	801fa54 <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f93a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f93e:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f940:	f104 0804 	add.w	r8, r4, #4
 801f944:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f946:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f948:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 801f94c:	f200 80a3 	bhi.w	801fa96 <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 801f950:	2239      	movs	r2, #57	; 0x39
 801f952:	1c63      	adds	r3, r4, #1
 801f954:	fa1f fb85 	uxth.w	fp, r5
 801f958:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 801f95a:	b29b      	uxth	r3, r3
 801f95c:	2202      	movs	r2, #2
 801f95e:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801f960:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f964:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801f968:	2b44      	cmp	r3, #68	; 0x44
 801f96a:	f200 80ac 	bhi.w	801fac6 <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801f96e:	2202      	movs	r2, #2
 801f970:	1ce3      	adds	r3, r4, #3
 801f972:	fa1f f588 	uxth.w	r5, r8
 801f976:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801f97a:	b29b      	uxth	r3, r3
 801f97c:	2240      	movs	r2, #64	; 0x40
 801f97e:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f980:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801f982:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f986:	2b44      	cmp	r3, #68	; 0x44
 801f988:	f200 8095 	bhi.w	801fab6 <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 801f98c:	1d63      	adds	r3, r4, #5
 801f98e:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 801f990:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 801f992:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 801f994:	b29b      	uxth	r3, r3
 801f996:	2204      	movs	r2, #4
 801f998:	b2a4      	uxth	r4, r4
 801f99a:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801f99c:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801f9a0:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801f9a4:	f7f8 fa94 	bl	8017ed0 <lwip_htonl>
 801f9a8:	4631      	mov	r1, r6
 801f9aa:	4602      	mov	r2, r0
 801f9ac:	4620      	mov	r0, r4
 801f9ae:	f7ff fd55 	bl	801f45c <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f9b2:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801f9b4:	4605      	mov	r5, r0
 801f9b6:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f9ba:	2b44      	cmp	r3, #68	; 0x44
 801f9bc:	9303      	str	r3, [sp, #12]
 801f9be:	d872      	bhi.n	801faa6 <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 801f9c0:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 801f9c2:	2237      	movs	r2, #55	; 0x37
 801f9c4:	1c6b      	adds	r3, r5, #1
 801f9c6:	f8df 8134 	ldr.w	r8, [pc, #308]	; 801fafc <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 801f9ca:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 801f9cc:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 801f9ce:	b29b      	uxth	r3, r3
 801f9d0:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f9d2:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f9d4:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 801f9d8:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f9da:	493f      	ldr	r1, [pc, #252]	; (801fad8 <dhcp_reboot.isra.0+0x1d8>)
 801f9dc:	4b3f      	ldr	r3, [pc, #252]	; (801fadc <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f9de:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f9e2:	d80c      	bhi.n	801f9fe <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 801f9e4:	1c62      	adds	r2, r4, #1
 801f9e6:	f806 b004 	strb.w	fp, [r6, r4]
 801f9ea:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801f9ec:	4a3c      	ldr	r2, [pc, #240]	; (801fae0 <dhcp_reboot.isra.0+0x1e0>)
 801f9ee:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801f9f0:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801f9f4:	d00b      	beq.n	801fa0e <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f9f6:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801f9f8:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f9fc:	d9f2      	bls.n	801f9e4 <dhcp_reboot.isra.0+0xe4>
 801f9fe:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801fa02:	4838      	ldr	r0, [pc, #224]	; (801fae4 <dhcp_reboot.isra.0+0x1e4>)
 801fa04:	f004 fd5a 	bl	80244bc <iprintf>
 801fa08:	4b34      	ldr	r3, [pc, #208]	; (801fadc <dhcp_reboot.isra.0+0x1dc>)
 801fa0a:	4933      	ldr	r1, [pc, #204]	; (801fad8 <dhcp_reboot.isra.0+0x1d8>)
 801fa0c:	e7ea      	b.n	801f9e4 <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 801fa0e:	1de8      	adds	r0, r5, #7
 801fa10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801fa14:	22ff      	movs	r2, #255	; 0xff
 801fa16:	b280      	uxth	r0, r0
 801fa18:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801fa1a:	2843      	cmp	r0, #67	; 0x43
 801fa1c:	d808      	bhi.n	801fa30 <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801fa1e:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 801fa22:	4430      	add	r0, r6
 801fa24:	2100      	movs	r1, #0
 801fa26:	b2ad      	uxth	r5, r5
 801fa28:	1c6a      	adds	r2, r5, #1
 801fa2a:	f003 fdab 	bl	8023584 <memset>
 801fa2e:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801fa30:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 801fa34:	4638      	mov	r0, r7
 801fa36:	b289      	uxth	r1, r1
 801fa38:	f7fa f9ce 	bl	8019dd8 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801fa3c:	482a      	ldr	r0, [pc, #168]	; (801fae8 <dhcp_reboot.isra.0+0x1e8>)
 801fa3e:	2343      	movs	r3, #67	; 0x43
 801fa40:	4a2a      	ldr	r2, [pc, #168]	; (801faec <dhcp_reboot.isra.0+0x1ec>)
 801fa42:	6800      	ldr	r0, [r0, #0]
 801fa44:	4639      	mov	r1, r7
 801fa46:	f8cd 9000 	str.w	r9, [sp]
 801fa4a:	f7ff fb9b 	bl	801f184 <udp_sendto_if>
    pbuf_free(p_out);
 801fa4e:	4638      	mov	r0, r7
 801fa50:	f7fa fabe 	bl	8019fd0 <pbuf_free>
  if (dhcp->tries < 255) {
 801fa54:	f89a 3006 	ldrb.w	r3, [sl, #6]
 801fa58:	2bff      	cmp	r3, #255	; 0xff
 801fa5a:	d016      	beq.n	801fa8a <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 801fa5c:	3301      	adds	r3, #1
 801fa5e:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801fa60:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801fa62:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801fa66:	d810      	bhi.n	801fa8a <dhcp_reboot.isra.0+0x18a>
 801fa68:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fa6c:	4a20      	ldr	r2, [pc, #128]	; (801faf0 <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801fa6e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801fa72:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fa74:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801fa78:	b29b      	uxth	r3, r3
 801fa7a:	fba2 2303 	umull	r2, r3, r2, r3
 801fa7e:	095b      	lsrs	r3, r3, #5
 801fa80:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 801fa84:	b007      	add	sp, #28
 801fa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 801fa8a:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fa8c:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 801fa90:	b007      	add	sp, #28
 801fa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fa96:	4b11      	ldr	r3, [pc, #68]	; (801fadc <dhcp_reboot.isra.0+0x1dc>)
 801fa98:	f240 529a 	movw	r2, #1434	; 0x59a
 801fa9c:	4915      	ldr	r1, [pc, #84]	; (801faf4 <dhcp_reboot.isra.0+0x1f4>)
 801fa9e:	4811      	ldr	r0, [pc, #68]	; (801fae4 <dhcp_reboot.isra.0+0x1e4>)
 801faa0:	f004 fd0c 	bl	80244bc <iprintf>
 801faa4:	e754      	b.n	801f950 <dhcp_reboot.isra.0+0x50>
 801faa6:	4b0d      	ldr	r3, [pc, #52]	; (801fadc <dhcp_reboot.isra.0+0x1dc>)
 801faa8:	f240 529a 	movw	r2, #1434	; 0x59a
 801faac:	4911      	ldr	r1, [pc, #68]	; (801faf4 <dhcp_reboot.isra.0+0x1f4>)
 801faae:	480d      	ldr	r0, [pc, #52]	; (801fae4 <dhcp_reboot.isra.0+0x1e4>)
 801fab0:	f004 fd04 	bl	80244bc <iprintf>
 801fab4:	e784      	b.n	801f9c0 <dhcp_reboot.isra.0+0xc0>
 801fab6:	4b09      	ldr	r3, [pc, #36]	; (801fadc <dhcp_reboot.isra.0+0x1dc>)
 801fab8:	f240 529a 	movw	r2, #1434	; 0x59a
 801fabc:	490d      	ldr	r1, [pc, #52]	; (801faf4 <dhcp_reboot.isra.0+0x1f4>)
 801fabe:	4809      	ldr	r0, [pc, #36]	; (801fae4 <dhcp_reboot.isra.0+0x1e4>)
 801fac0:	f004 fcfc 	bl	80244bc <iprintf>
 801fac4:	e762      	b.n	801f98c <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fac6:	4b05      	ldr	r3, [pc, #20]	; (801fadc <dhcp_reboot.isra.0+0x1dc>)
 801fac8:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801facc:	490a      	ldr	r1, [pc, #40]	; (801faf8 <dhcp_reboot.isra.0+0x1f8>)
 801face:	4805      	ldr	r0, [pc, #20]	; (801fae4 <dhcp_reboot.isra.0+0x1e4>)
 801fad0:	f004 fcf4 	bl	80244bc <iprintf>
 801fad4:	e74b      	b.n	801f96e <dhcp_reboot.isra.0+0x6e>
 801fad6:	bf00      	nop
 801fad8:	080e1b30 	.word	0x080e1b30
 801fadc:	080e193c 	.word	0x080e193c
 801fae0:	080e1cb8 	.word	0x080e1cb8
 801fae4:	0802ac68 	.word	0x0802ac68
 801fae8:	2002dcc8 	.word	0x2002dcc8
 801faec:	080e1ff4 	.word	0x080e1ff4
 801faf0:	10624dd3 	.word	0x10624dd3
 801faf4:	080e1ab0 	.word	0x080e1ab0
 801faf8:	080e1af4 	.word	0x080e1af4
 801fafc:	080e1cb5 	.word	0x080e1cb5

0801fb00 <dhcp_discover>:
{
 801fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801fb04:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801fb06:	2300      	movs	r3, #0
{
 801fb08:	b087      	sub	sp, #28
 801fb0a:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 801fb0c:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801fb0e:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 801fb10:	2a06      	cmp	r2, #6
 801fb12:	d003      	beq.n	801fb1c <dhcp_discover+0x1c>
    dhcp->state = new_state;
 801fb14:	2206      	movs	r2, #6
    dhcp->tries = 0;
 801fb16:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 801fb18:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 801fb1a:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801fb1c:	f10d 0316 	add.w	r3, sp, #22
 801fb20:	2201      	movs	r2, #1
 801fb22:	4639      	mov	r1, r7
 801fb24:	4658      	mov	r0, fp
 801fb26:	f7ff fe39 	bl	801f79c <dhcp_create_msg>
  if (p_out != NULL) {
 801fb2a:	4605      	mov	r5, r0
 801fb2c:	2800      	cmp	r0, #0
 801fb2e:	f000 8081 	beq.w	801fc34 <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fb32:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801fb36:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fb38:	f104 0804 	add.w	r8, r4, #4
 801fb3c:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fb40:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fb42:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 801fb46:	f200 809a 	bhi.w	801fc7e <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 801fb4a:	2239      	movs	r2, #57	; 0x39
 801fb4c:	1c63      	adds	r3, r4, #1
 801fb4e:	fa1f f189 	uxth.w	r1, r9
 801fb52:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 801fb54:	b29b      	uxth	r3, r3
 801fb56:	2202      	movs	r2, #2
 801fb58:	9103      	str	r1, [sp, #12]
 801fb5a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fb5c:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801fb5e:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fb62:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fb64:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fb68:	f200 8091 	bhi.w	801fc8e <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801fb6c:	1ce3      	adds	r3, r4, #3
 801fb6e:	fa1f f988 	uxth.w	r9, r8
 801fb72:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fb76:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801fb78:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801fb7a:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801fb7c:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fb80:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801fb84:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fb88:	2b44      	cmp	r3, #68	; 0x44
 801fb8a:	d870      	bhi.n	801fc6e <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 801fb8c:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 801fb90:	2237      	movs	r2, #55	; 0x37
 801fb92:	1d63      	adds	r3, r4, #5
 801fb94:	f8df a130 	ldr.w	sl, [pc, #304]	; 801fcc8 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 801fb98:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 801fb9c:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 801fba0:	b29b      	uxth	r3, r3
 801fba2:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fba4:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801fba8:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 801fbac:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fbae:	493c      	ldr	r1, [pc, #240]	; (801fca0 <dhcp_discover+0x1a0>)
 801fbb0:	4b3c      	ldr	r3, [pc, #240]	; (801fca4 <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801fbb2:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fbb6:	d80f      	bhi.n	801fbd8 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 801fbb8:	f108 0201 	add.w	r2, r8, #1
 801fbbc:	f806 9008 	strb.w	r9, [r6, r8]
 801fbc0:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801fbc4:	4a38      	ldr	r2, [pc, #224]	; (801fca8 <dhcp_discover+0x1a8>)
 801fbc6:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801fbc8:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801fbcc:	d00c      	beq.n	801fbe8 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fbce:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801fbd2:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fbd6:	d9ef      	bls.n	801fbb8 <dhcp_discover+0xb8>
 801fbd8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801fbdc:	4833      	ldr	r0, [pc, #204]	; (801fcac <dhcp_discover+0x1ac>)
 801fbde:	f004 fc6d 	bl	80244bc <iprintf>
 801fbe2:	4b30      	ldr	r3, [pc, #192]	; (801fca4 <dhcp_discover+0x1a4>)
 801fbe4:	492e      	ldr	r1, [pc, #184]	; (801fca0 <dhcp_discover+0x1a0>)
 801fbe6:	e7e7      	b.n	801fbb8 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 801fbe8:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 801fbec:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 801fbf0:	22ff      	movs	r2, #255	; 0xff
 801fbf2:	b280      	uxth	r0, r0
 801fbf4:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801fbf6:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 801fbf8:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801fbfa:	d808      	bhi.n	801fc0e <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 801fbfc:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 801fc00:	4430      	add	r0, r6
 801fc02:	2100      	movs	r1, #0
 801fc04:	b2a4      	uxth	r4, r4
 801fc06:	1c62      	adds	r2, r4, #1
 801fc08:	f003 fcbc 	bl	8023584 <memset>
 801fc0c:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801fc0e:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 801fc12:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801fc14:	4c26      	ldr	r4, [pc, #152]	; (801fcb0 <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801fc16:	b289      	uxth	r1, r1
 801fc18:	f7fa f8de 	bl	8019dd8 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801fc1c:	4825      	ldr	r0, [pc, #148]	; (801fcb4 <dhcp_discover+0x1b4>)
 801fc1e:	2343      	movs	r3, #67	; 0x43
 801fc20:	4a25      	ldr	r2, [pc, #148]	; (801fcb8 <dhcp_discover+0x1b8>)
 801fc22:	6800      	ldr	r0, [r0, #0]
 801fc24:	4629      	mov	r1, r5
 801fc26:	e9cd b400 	strd	fp, r4, [sp]
 801fc2a:	f7ff f9ed 	bl	801f008 <udp_sendto_if_src>
    pbuf_free(p_out);
 801fc2e:	4628      	mov	r0, r5
 801fc30:	f7fa f9ce 	bl	8019fd0 <pbuf_free>
  if (dhcp->tries < 255) {
 801fc34:	79bb      	ldrb	r3, [r7, #6]
 801fc36:	2bff      	cmp	r3, #255	; 0xff
 801fc38:	d013      	beq.n	801fc62 <dhcp_discover+0x162>
    dhcp->tries++;
 801fc3a:	3301      	adds	r3, #1
 801fc3c:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fc3e:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801fc40:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fc42:	d80e      	bhi.n	801fc62 <dhcp_discover+0x162>
 801fc44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fc48:	491c      	ldr	r1, [pc, #112]	; (801fcbc <dhcp_discover+0x1bc>)
}
 801fc4a:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fc4c:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fc4e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801fc52:	b29b      	uxth	r3, r3
 801fc54:	fba1 2303 	umull	r2, r3, r1, r3
 801fc58:	095b      	lsrs	r3, r3, #5
 801fc5a:	813b      	strh	r3, [r7, #8]
}
 801fc5c:	b007      	add	sp, #28
 801fc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 801fc62:	2378      	movs	r3, #120	; 0x78
}
 801fc64:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fc66:	813b      	strh	r3, [r7, #8]
}
 801fc68:	b007      	add	sp, #28
 801fc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fc6e:	4b0d      	ldr	r3, [pc, #52]	; (801fca4 <dhcp_discover+0x1a4>)
 801fc70:	f240 529a 	movw	r2, #1434	; 0x59a
 801fc74:	4912      	ldr	r1, [pc, #72]	; (801fcc0 <dhcp_discover+0x1c0>)
 801fc76:	480d      	ldr	r0, [pc, #52]	; (801fcac <dhcp_discover+0x1ac>)
 801fc78:	f004 fc20 	bl	80244bc <iprintf>
 801fc7c:	e786      	b.n	801fb8c <dhcp_discover+0x8c>
 801fc7e:	4b09      	ldr	r3, [pc, #36]	; (801fca4 <dhcp_discover+0x1a4>)
 801fc80:	f240 529a 	movw	r2, #1434	; 0x59a
 801fc84:	490e      	ldr	r1, [pc, #56]	; (801fcc0 <dhcp_discover+0x1c0>)
 801fc86:	4809      	ldr	r0, [pc, #36]	; (801fcac <dhcp_discover+0x1ac>)
 801fc88:	f004 fc18 	bl	80244bc <iprintf>
 801fc8c:	e75d      	b.n	801fb4a <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fc8e:	4b05      	ldr	r3, [pc, #20]	; (801fca4 <dhcp_discover+0x1a4>)
 801fc90:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801fc94:	490b      	ldr	r1, [pc, #44]	; (801fcc4 <dhcp_discover+0x1c4>)
 801fc96:	4805      	ldr	r0, [pc, #20]	; (801fcac <dhcp_discover+0x1ac>)
 801fc98:	f004 fc10 	bl	80244bc <iprintf>
 801fc9c:	e766      	b.n	801fb6c <dhcp_discover+0x6c>
 801fc9e:	bf00      	nop
 801fca0:	080e1b30 	.word	0x080e1b30
 801fca4:	080e193c 	.word	0x080e193c
 801fca8:	080e1cb8 	.word	0x080e1cb8
 801fcac:	0802ac68 	.word	0x0802ac68
 801fcb0:	080e1ff0 	.word	0x080e1ff0
 801fcb4:	2002dcc8 	.word	0x2002dcc8
 801fcb8:	080e1ff4 	.word	0x080e1ff4
 801fcbc:	10624dd3 	.word	0x10624dd3
 801fcc0:	080e1ab0 	.word	0x080e1ab0
 801fcc4:	080e1af4 	.word	0x080e1af4
 801fcc8:	080e1cb5 	.word	0x080e1cb5

0801fccc <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801fccc:	2800      	cmp	r0, #0
 801fcce:	f000 8112 	beq.w	801fef6 <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 801fcd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 801fcd6:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 801fcd8:	b087      	sub	sp, #28
 801fcda:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801fcdc:	2e00      	cmp	r6, #0
 801fcde:	f000 8111 	beq.w	801ff04 <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 801fce2:	7973      	ldrb	r3, [r6, #5]
 801fce4:	2b01      	cmp	r3, #1
 801fce6:	d004      	beq.n	801fcf2 <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 801fce8:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801fcea:	2201      	movs	r2, #1
    dhcp->tries = 0;
 801fcec:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 801fcee:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 801fcf0:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801fcf2:	f10d 0316 	add.w	r3, sp, #22
 801fcf6:	2203      	movs	r2, #3
 801fcf8:	4631      	mov	r1, r6
 801fcfa:	4658      	mov	r0, fp
 801fcfc:	f7ff fd4e 	bl	801f79c <dhcp_create_msg>
  if (p_out != NULL) {
 801fd00:	4605      	mov	r5, r0
 801fd02:	2800      	cmp	r0, #0
 801fd04:	f000 80b4 	beq.w	801fe70 <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fd08:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801fd0c:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fd0e:	f107 0804 	add.w	r8, r7, #4
 801fd12:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fd16:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fd18:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 801fd1c:	f200 80cb 	bhi.w	801feb6 <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 801fd20:	2239      	movs	r2, #57	; 0x39
 801fd22:	1c7b      	adds	r3, r7, #1
 801fd24:	fa1f f189 	uxth.w	r1, r9
 801fd28:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 801fd2a:	b29b      	uxth	r3, r3
 801fd2c:	2202      	movs	r2, #2
 801fd2e:	9103      	str	r1, [sp, #12]
 801fd30:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fd32:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801fd34:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fd38:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fd3a:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fd3e:	f200 80c2 	bhi.w	801fec6 <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801fd42:	1cfb      	adds	r3, r7, #3
 801fd44:	fa1f f988 	uxth.w	r9, r8
 801fd48:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fd4c:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801fd4e:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801fd50:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801fd52:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fd56:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801fd5a:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fd5e:	2b44      	cmp	r3, #68	; 0x44
 801fd60:	f200 80b9 	bhi.w	801fed6 <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 801fd64:	1d7b      	adds	r3, r7, #5
 801fd66:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 801fd68:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 801fd6a:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 801fd6e:	b29b      	uxth	r3, r3
 801fd70:	2204      	movs	r2, #4
 801fd72:	b2bf      	uxth	r7, r7
 801fd74:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801fd76:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801fd78:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801fd7c:	f7f8 f8a8 	bl	8017ed0 <lwip_htonl>
 801fd80:	4621      	mov	r1, r4
 801fd82:	4602      	mov	r2, r0
 801fd84:	4638      	mov	r0, r7
 801fd86:	f7ff fb69 	bl	801f45c <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fd8a:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801fd8c:	4607      	mov	r7, r0
 801fd8e:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fd92:	2b44      	cmp	r3, #68	; 0x44
 801fd94:	f200 80a7 	bhi.w	801fee6 <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 801fd98:	2236      	movs	r2, #54	; 0x36
 801fd9a:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 801fd9c:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 801fda0:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 801fda2:	b29b      	uxth	r3, r3
 801fda4:	2204      	movs	r2, #4
 801fda6:	fa1f f888 	uxth.w	r8, r8
 801fdaa:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801fdac:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801fdae:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801fdb2:	f7f8 f88d 	bl	8017ed0 <lwip_htonl>
 801fdb6:	4621      	mov	r1, r4
 801fdb8:	4602      	mov	r2, r0
 801fdba:	4640      	mov	r0, r8
 801fdbc:	f7ff fb4e 	bl	801f45c <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fdc0:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801fdc2:	4680      	mov	r8, r0
 801fdc4:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fdc8:	2b44      	cmp	r3, #68	; 0x44
 801fdca:	9303      	str	r3, [sp, #12]
 801fdcc:	d86b      	bhi.n	801fea6 <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 801fdce:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 801fdd2:	2237      	movs	r2, #55	; 0x37
 801fdd4:	f108 0301 	add.w	r3, r8, #1
 801fdd8:	f8df 916c 	ldr.w	r9, [pc, #364]	; 801ff48 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 801fddc:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 801fdde:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 801fde2:	b29b      	uxth	r3, r3
 801fde4:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fde6:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801fde8:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 801fdec:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fdee:	494a      	ldr	r1, [pc, #296]	; (801ff18 <dhcp_select.isra.0+0x24c>)
 801fdf0:	4b4a      	ldr	r3, [pc, #296]	; (801ff1c <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801fdf2:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fdf6:	d80c      	bhi.n	801fe12 <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 801fdf8:	1c7a      	adds	r2, r7, #1
 801fdfa:	f804 a007 	strb.w	sl, [r4, r7]
 801fdfe:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801fe00:	4a47      	ldr	r2, [pc, #284]	; (801ff20 <dhcp_select.isra.0+0x254>)
 801fe02:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801fe04:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801fe08:	d00b      	beq.n	801fe22 <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fe0a:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801fe0c:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fe10:	d9f2      	bls.n	801fdf8 <dhcp_select.isra.0+0x12c>
 801fe12:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801fe16:	4843      	ldr	r0, [pc, #268]	; (801ff24 <dhcp_select.isra.0+0x258>)
 801fe18:	f004 fb50 	bl	80244bc <iprintf>
 801fe1c:	4b3f      	ldr	r3, [pc, #252]	; (801ff1c <dhcp_select.isra.0+0x250>)
 801fe1e:	493e      	ldr	r1, [pc, #248]	; (801ff18 <dhcp_select.isra.0+0x24c>)
 801fe20:	e7ea      	b.n	801fdf8 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 801fe22:	f108 0007 	add.w	r0, r8, #7
 801fe26:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801fe2a:	22ff      	movs	r2, #255	; 0xff
 801fe2c:	b280      	uxth	r0, r0
 801fe2e:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801fe30:	2843      	cmp	r0, #67	; 0x43
 801fe32:	d80a      	bhi.n	801fe4a <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 801fe34:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 801fe38:	4420      	add	r0, r4
 801fe3a:	2100      	movs	r1, #0
 801fe3c:	fa1f f888 	uxth.w	r8, r8
 801fe40:	f108 0201 	add.w	r2, r8, #1
 801fe44:	f003 fb9e 	bl	8023584 <memset>
 801fe48:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801fe4a:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 801fe4e:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801fe50:	4c35      	ldr	r4, [pc, #212]	; (801ff28 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801fe52:	b289      	uxth	r1, r1
 801fe54:	f7f9 ffc0 	bl	8019dd8 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801fe58:	4834      	ldr	r0, [pc, #208]	; (801ff2c <dhcp_select.isra.0+0x260>)
 801fe5a:	2343      	movs	r3, #67	; 0x43
 801fe5c:	4a34      	ldr	r2, [pc, #208]	; (801ff30 <dhcp_select.isra.0+0x264>)
 801fe5e:	6800      	ldr	r0, [r0, #0]
 801fe60:	4629      	mov	r1, r5
 801fe62:	e9cd b400 	strd	fp, r4, [sp]
 801fe66:	f7ff f8cf 	bl	801f008 <udp_sendto_if_src>
    pbuf_free(p_out);
 801fe6a:	4628      	mov	r0, r5
 801fe6c:	f7fa f8b0 	bl	8019fd0 <pbuf_free>
  if (dhcp->tries < 255) {
 801fe70:	79b3      	ldrb	r3, [r6, #6]
 801fe72:	2bff      	cmp	r3, #255	; 0xff
 801fe74:	d012      	beq.n	801fe9c <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 801fe76:	3301      	adds	r3, #1
 801fe78:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fe7a:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801fe7c:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fe7e:	d80d      	bhi.n	801fe9c <dhcp_select.isra.0+0x1d0>
 801fe80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fe84:	492b      	ldr	r1, [pc, #172]	; (801ff34 <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fe86:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fe88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801fe8c:	b29b      	uxth	r3, r3
 801fe8e:	fba1 2303 	umull	r2, r3, r1, r3
 801fe92:	095b      	lsrs	r3, r3, #5
 801fe94:	8133      	strh	r3, [r6, #8]
}
 801fe96:	b007      	add	sp, #28
 801fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 801fe9c:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fe9e:	8133      	strh	r3, [r6, #8]
}
 801fea0:	b007      	add	sp, #28
 801fea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fea6:	4b1d      	ldr	r3, [pc, #116]	; (801ff1c <dhcp_select.isra.0+0x250>)
 801fea8:	f240 529a 	movw	r2, #1434	; 0x59a
 801feac:	4922      	ldr	r1, [pc, #136]	; (801ff38 <dhcp_select.isra.0+0x26c>)
 801feae:	481d      	ldr	r0, [pc, #116]	; (801ff24 <dhcp_select.isra.0+0x258>)
 801feb0:	f004 fb04 	bl	80244bc <iprintf>
 801feb4:	e78b      	b.n	801fdce <dhcp_select.isra.0+0x102>
 801feb6:	4b19      	ldr	r3, [pc, #100]	; (801ff1c <dhcp_select.isra.0+0x250>)
 801feb8:	f240 529a 	movw	r2, #1434	; 0x59a
 801febc:	491e      	ldr	r1, [pc, #120]	; (801ff38 <dhcp_select.isra.0+0x26c>)
 801febe:	4819      	ldr	r0, [pc, #100]	; (801ff24 <dhcp_select.isra.0+0x258>)
 801fec0:	f004 fafc 	bl	80244bc <iprintf>
 801fec4:	e72c      	b.n	801fd20 <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fec6:	4b15      	ldr	r3, [pc, #84]	; (801ff1c <dhcp_select.isra.0+0x250>)
 801fec8:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801fecc:	491b      	ldr	r1, [pc, #108]	; (801ff3c <dhcp_select.isra.0+0x270>)
 801fece:	4815      	ldr	r0, [pc, #84]	; (801ff24 <dhcp_select.isra.0+0x258>)
 801fed0:	f004 faf4 	bl	80244bc <iprintf>
 801fed4:	e735      	b.n	801fd42 <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fed6:	4b11      	ldr	r3, [pc, #68]	; (801ff1c <dhcp_select.isra.0+0x250>)
 801fed8:	f240 529a 	movw	r2, #1434	; 0x59a
 801fedc:	4916      	ldr	r1, [pc, #88]	; (801ff38 <dhcp_select.isra.0+0x26c>)
 801fede:	4811      	ldr	r0, [pc, #68]	; (801ff24 <dhcp_select.isra.0+0x258>)
 801fee0:	f004 faec 	bl	80244bc <iprintf>
 801fee4:	e73e      	b.n	801fd64 <dhcp_select.isra.0+0x98>
 801fee6:	4b0d      	ldr	r3, [pc, #52]	; (801ff1c <dhcp_select.isra.0+0x250>)
 801fee8:	f240 529a 	movw	r2, #1434	; 0x59a
 801feec:	4912      	ldr	r1, [pc, #72]	; (801ff38 <dhcp_select.isra.0+0x26c>)
 801feee:	480d      	ldr	r0, [pc, #52]	; (801ff24 <dhcp_select.isra.0+0x258>)
 801fef0:	f004 fae4 	bl	80244bc <iprintf>
 801fef4:	e750      	b.n	801fd98 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801fef6:	4b09      	ldr	r3, [pc, #36]	; (801ff1c <dhcp_select.isra.0+0x250>)
 801fef8:	f240 1277 	movw	r2, #375	; 0x177
 801fefc:	4910      	ldr	r1, [pc, #64]	; (801ff40 <dhcp_select.isra.0+0x274>)
 801fefe:	4809      	ldr	r0, [pc, #36]	; (801ff24 <dhcp_select.isra.0+0x258>)
 801ff00:	f004 badc 	b.w	80244bc <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801ff04:	4b05      	ldr	r3, [pc, #20]	; (801ff1c <dhcp_select.isra.0+0x250>)
 801ff06:	f240 1279 	movw	r2, #377	; 0x179
 801ff0a:	490e      	ldr	r1, [pc, #56]	; (801ff44 <dhcp_select.isra.0+0x278>)
 801ff0c:	4805      	ldr	r0, [pc, #20]	; (801ff24 <dhcp_select.isra.0+0x258>)
}
 801ff0e:	b007      	add	sp, #28
 801ff10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801ff14:	f004 bad2 	b.w	80244bc <iprintf>
 801ff18:	080e1b30 	.word	0x080e1b30
 801ff1c:	080e193c 	.word	0x080e193c
 801ff20:	080e1cb8 	.word	0x080e1cb8
 801ff24:	0802ac68 	.word	0x0802ac68
 801ff28:	080e1ff0 	.word	0x080e1ff0
 801ff2c:	2002dcc8 	.word	0x2002dcc8
 801ff30:	080e1ff4 	.word	0x080e1ff4
 801ff34:	10624dd3 	.word	0x10624dd3
 801ff38:	080e1ab0 	.word	0x080e1ab0
 801ff3c:	080e1af4 	.word	0x080e1af4
 801ff40:	080e1b68 	.word	0x080e1b68
 801ff44:	080e1b84 	.word	0x080e1b84
 801ff48:	080e1cb5 	.word	0x080e1cb5

0801ff4c <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 801ff4c:	4ba5      	ldr	r3, [pc, #660]	; (80201e4 <dhcp_recv+0x298>)
{
 801ff4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 801ff52:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 801ff56:	b08b      	sub	sp, #44	; 0x2c
 801ff58:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ff5a:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801ff5e:	f1b9 0f00 	cmp.w	r9, #0
 801ff62:	d04b      	beq.n	801fffc <dhcp_recv+0xb0>
 801ff64:	f899 3004 	ldrb.w	r3, [r9, #4]
 801ff68:	2b00      	cmp	r3, #0
 801ff6a:	d047      	beq.n	801fffc <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 801ff6c:	8953      	ldrh	r3, [r2, #10]
 801ff6e:	2b2b      	cmp	r3, #43	; 0x2b
 801ff70:	d944      	bls.n	801fffc <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801ff72:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 801ff74:	782b      	ldrb	r3, [r5, #0]
 801ff76:	2b02      	cmp	r3, #2
 801ff78:	d140      	bne.n	801fffc <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ff7a:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 801ff7e:	b186      	cbz	r6, 801ffa2 <dhcp_recv+0x56>
 801ff80:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 801ff84:	f105 021c 	add.w	r2, r5, #28
 801ff88:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801ff8a:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ff8e:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801ff90:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ff94:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801ff96:	4284      	cmp	r4, r0
 801ff98:	d130      	bne.n	801fffc <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ff9a:	2b06      	cmp	r3, #6
 801ff9c:	d001      	beq.n	801ffa2 <dhcp_recv+0x56>
 801ff9e:	42b3      	cmp	r3, r6
 801ffa0:	d3f3      	bcc.n	801ff8a <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801ffa2:	6868      	ldr	r0, [r5, #4]
 801ffa4:	f7f7 ff94 	bl	8017ed0 <lwip_htonl>
 801ffa8:	f8d9 3000 	ldr.w	r3, [r9]
 801ffac:	4298      	cmp	r0, r3
 801ffae:	d125      	bne.n	801fffc <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 801ffb0:	4b8d      	ldr	r3, [pc, #564]	; (80201e8 <dhcp_recv+0x29c>)
 801ffb2:	2200      	movs	r2, #0
 801ffb4:	605a      	str	r2, [r3, #4]
 801ffb6:	811a      	strh	r2, [r3, #8]
 801ffb8:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 801ffba:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801ffbe:	2b2b      	cmp	r3, #43	; 0x2b
 801ffc0:	d91c      	bls.n	801fffc <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 801ffc2:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 801ffc6:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 801ffc8:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 801ffcc:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 801ffd0:	4693      	mov	fp, r2
 801ffd2:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 801ffd6:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 801ffda:	e000      	b.n	801ffde <dhcp_recv+0x92>
 801ffdc:	896b      	ldrh	r3, [r5, #10]
 801ffde:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 801ffe0:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801ffe4:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801ffe8:	d80e      	bhi.n	8020008 <dhcp_recv+0xbc>
    q = q->next;
 801ffea:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 801ffec:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801fff0:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801fff4:	2d00      	cmp	r5, #0
 801fff6:	d1f1      	bne.n	801ffdc <dhcp_recv+0x90>
 801fff8:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 801fffc:	4658      	mov	r0, fp
}
 801fffe:	b00b      	add	sp, #44	; 0x2c
 8020000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8020004:	f7f9 bfe4 	b.w	8019fd0 <pbuf_free>
  options = (u8_t *)q->payload;
 8020008:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802000a:	45d8      	cmp	r8, fp
 802000c:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 8020010:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020012:	f080 8140 	bcs.w	8020296 <dhcp_recv+0x34a>
 8020016:	9c02      	ldr	r4, [sp, #8]
 8020018:	9b01      	ldr	r3, [sp, #4]
 802001a:	5d1a      	ldrb	r2, [r3, r4]
 802001c:	2aff      	cmp	r2, #255	; 0xff
 802001e:	f000 813a 	beq.w	8020296 <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 8020022:	1ca7      	adds	r7, r4, #2
 8020024:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 8020026:	42bc      	cmp	r4, r7
 8020028:	d8e6      	bhi.n	801fff8 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 802002a:	1c61      	adds	r1, r4, #1
 802002c:	896b      	ldrh	r3, [r5, #10]
 802002e:	4299      	cmp	r1, r3
 8020030:	f280 8129 	bge.w	8020286 <dhcp_recv+0x33a>
      len = options[offset + 1];
 8020034:	9801      	ldr	r0, [sp, #4]
 8020036:	4420      	add	r0, r4
 8020038:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 802003a:	2a3b      	cmp	r2, #59	; 0x3b
 802003c:	d83e      	bhi.n	80200bc <dhcp_recv+0x170>
 802003e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8020042:	0040      	.short	0x0040
 8020044:	003d0053 	.word	0x003d0053
 8020048:	003d00b4 	.word	0x003d00b4
 802004c:	009f003d 	.word	0x009f003d
 8020050:	003d003d 	.word	0x003d003d
 8020054:	003d003d 	.word	0x003d003d
 8020058:	003d003d 	.word	0x003d003d
 802005c:	003d003d 	.word	0x003d003d
 8020060:	003d003d 	.word	0x003d003d
 8020064:	003d003d 	.word	0x003d003d
 8020068:	003d003d 	.word	0x003d003d
 802006c:	003d003d 	.word	0x003d003d
 8020070:	003d003d 	.word	0x003d003d
 8020074:	003d003d 	.word	0x003d003d
 8020078:	003d003d 	.word	0x003d003d
 802007c:	003d003d 	.word	0x003d003d
 8020080:	003d003d 	.word	0x003d003d
 8020084:	003d003d 	.word	0x003d003d
 8020088:	003d003d 	.word	0x003d003d
 802008c:	003d003d 	.word	0x003d003d
 8020090:	003d003d 	.word	0x003d003d
 8020094:	003d003d 	.word	0x003d003d
 8020098:	003d003d 	.word	0x003d003d
 802009c:	003d003d 	.word	0x003d003d
 80200a0:	003d003d 	.word	0x003d003d
 80200a4:	003d003d 	.word	0x003d003d
 80200a8:	00f80115 	.word	0x00f80115
 80200ac:	00df0109 	.word	0x00df0109
 80200b0:	003d003d 	.word	0x003d003d
 80200b4:	00ec003d 	.word	0x00ec003d
 80200b8:	00c3      	.short	0x00c3
 80200ba:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 80200bc:	2a00      	cmp	r2, #0
 80200be:	f040 82a2 	bne.w	8020606 <dhcp_recv+0x6ba>
      offset++;
 80200c2:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 80200c4:	429c      	cmp	r4, r3
 80200c6:	f0c0 80e3 	bcc.w	8020290 <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 80200ca:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 80200cc:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 80200d0:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 80200d2:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 80200d6:	455c      	cmp	r4, fp
 80200d8:	d28e      	bcs.n	801fff8 <dhcp_recv+0xac>
        q = q->next;
 80200da:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80200dc:	2d00      	cmp	r5, #0
 80200de:	f000 81e1 	beq.w	80204a4 <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 80200e2:	686b      	ldr	r3, [r5, #4]
 80200e4:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80200e6:	e797      	b.n	8020018 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80200e8:	2e04      	cmp	r6, #4
 80200ea:	f040 81b5 	bne.w	8020458 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 80200ee:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80200f2:	429c      	cmp	r4, r3
 80200f4:	dc80      	bgt.n	801fff8 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80200f6:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80200f8:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 80200fc:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 80200fe:	2300      	movs	r3, #0
 8020100:	9405      	str	r4, [sp, #20]
 8020102:	9309      	str	r3, [sp, #36]	; 0x24
 8020104:	4b38      	ldr	r3, [pc, #224]	; (80201e8 <dhcp_recv+0x29c>)
 8020106:	eb03 0908 	add.w	r9, r3, r8
 802010a:	4b38      	ldr	r3, [pc, #224]	; (80201ec <dhcp_recv+0x2a0>)
 802010c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8020110:	e02b      	b.n	802016a <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8020112:	f899 3000 	ldrb.w	r3, [r9]
 8020116:	2b00      	cmp	r3, #0
 8020118:	f040 81a8 	bne.w	802046c <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 802011c:	2e04      	cmp	r6, #4
 802011e:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8020120:	463b      	mov	r3, r7
 8020122:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 8020124:	bf28      	it	cs
 8020126:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8020128:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 802012a:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 802012c:	4622      	mov	r2, r4
 802012e:	f7f9 fff3 	bl	801a118 <pbuf_copy_partial>
 8020132:	4284      	cmp	r4, r0
 8020134:	f47f af60 	bne.w	801fff8 <dhcp_recv+0xac>
          if (decode_len > 4) {
 8020138:	2e04      	cmp	r6, #4
 802013a:	f240 819a 	bls.w	8020472 <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802013e:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 8020142:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8020146:	f040 81a3 	bne.w	8020490 <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 802014a:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 802014c:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 802014e:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 8020150:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8020154:	f7f7 febc 	bl	8017ed0 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 8020158:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 802015a:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 802015c:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 8020160:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 8020162:	429f      	cmp	r7, r3
            goto decode_next;
 8020164:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 8020166:	f63f af47 	bhi.w	801fff8 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 802016a:	f1b8 0f09 	cmp.w	r8, #9
 802016e:	d9d0      	bls.n	8020112 <dhcp_recv+0x1c6>
 8020170:	4b1f      	ldr	r3, [pc, #124]	; (80201f0 <dhcp_recv+0x2a4>)
 8020172:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8020176:	491f      	ldr	r1, [pc, #124]	; (80201f4 <dhcp_recv+0x2a8>)
 8020178:	481f      	ldr	r0, [pc, #124]	; (80201f8 <dhcp_recv+0x2ac>)
 802017a:	f004 f99f 	bl	80244bc <iprintf>
 802017e:	e7c8      	b.n	8020112 <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8020180:	07b2      	lsls	r2, r6, #30
 8020182:	f040 81ae 	bne.w	80204e2 <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8020186:	2e08      	cmp	r6, #8
 8020188:	4632      	mov	r2, r6
 802018a:	bf28      	it	cs
 802018c:	2208      	movcs	r2, #8
 802018e:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020190:	42b2      	cmp	r2, r6
 8020192:	f240 8241 	bls.w	8020618 <dhcp_recv+0x6cc>
 8020196:	4b16      	ldr	r3, [pc, #88]	; (80201f0 <dhcp_recv+0x2a4>)
 8020198:	f240 623c 	movw	r2, #1596	; 0x63c
 802019c:	4917      	ldr	r1, [pc, #92]	; (80201fc <dhcp_recv+0x2b0>)
 802019e:	4816      	ldr	r0, [pc, #88]	; (80201f8 <dhcp_recv+0x2ac>)
 80201a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80201a4:	f004 f98a 	bl	80244bc <iprintf>
 80201a8:	e728      	b.n	801fffc <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80201aa:	2e03      	cmp	r6, #3
 80201ac:	f240 814a 	bls.w	8020444 <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 80201b0:	4434      	add	r4, r6
 80201b2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80201b6:	429c      	cmp	r4, r3
 80201b8:	f73f af1e 	bgt.w	801fff8 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80201bc:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80201be:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 80201c2:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 80201c4:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80201c6:	e79a      	b.n	80200fe <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80201c8:	2e04      	cmp	r6, #4
 80201ca:	f040 8131 	bne.w	8020430 <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 80201ce:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80201d2:	429c      	cmp	r4, r3
 80201d4:	f73f af10 	bgt.w	801fff8 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80201d8:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 80201da:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 80201de:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80201e0:	e78d      	b.n	80200fe <dhcp_recv+0x1b2>
 80201e2:	bf00      	nop
 80201e4:	2001eb14 	.word	0x2001eb14
 80201e8:	2002dcd0 	.word	0x2002dcd0
 80201ec:	2002dcdc 	.word	0x2002dcdc
 80201f0:	080e193c 	.word	0x080e193c
 80201f4:	080e1bf4 	.word	0x080e1bf4
 80201f8:	0802ac68 	.word	0x0802ac68
 80201fc:	080e1bac 	.word	0x080e1bac
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020200:	2e04      	cmp	r6, #4
 8020202:	f040 80ed 	bne.w	80203e0 <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 8020206:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 802020a:	429c      	cmp	r4, r3
 802020c:	f73f aef4 	bgt.w	801fff8 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020210:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8020212:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 8020216:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020218:	e771      	b.n	80200fe <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802021a:	2e04      	cmp	r6, #4
 802021c:	f040 80d6 	bne.w	80203cc <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 8020220:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020224:	429c      	cmp	r4, r3
 8020226:	f73f aee7 	bgt.w	801fff8 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802022a:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 802022c:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 802022e:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020230:	e765      	b.n	80200fe <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020232:	2e01      	cmp	r6, #1
 8020234:	f040 80e8 	bne.w	8020408 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8020238:	9b02      	ldr	r3, [sp, #8]
 802023a:	2bf0      	cmp	r3, #240	; 0xf0
 802023c:	f040 8147 	bne.w	80204ce <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 8020240:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8020244:	4299      	cmp	r1, r3
 8020246:	f43f aed7 	beq.w	801fff8 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802024a:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 802024c:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 8020250:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020252:	e754      	b.n	80200fe <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020254:	2e01      	cmp	r6, #1
 8020256:	f040 80cd 	bne.w	80203f4 <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 802025a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 802025e:	4299      	cmp	r1, r3
 8020260:	f43f aeca 	beq.w	801fff8 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020264:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8020266:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 8020268:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802026a:	e748      	b.n	80200fe <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802026c:	2e04      	cmp	r6, #4
 802026e:	f040 80d5 	bne.w	802041c <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 8020272:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020276:	429c      	cmp	r4, r3
 8020278:	f73f aebe 	bgt.w	801fff8 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802027c:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 802027e:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 8020282:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020284:	e73b      	b.n	80200fe <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8020286:	6828      	ldr	r0, [r5, #0]
 8020288:	b310      	cbz	r0, 80202d0 <dhcp_recv+0x384>
 802028a:	6840      	ldr	r0, [r0, #4]
 802028c:	7806      	ldrb	r6, [r0, #0]
 802028e:	e6d4      	b.n	802003a <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020290:	455c      	cmp	r4, fp
 8020292:	f4ff aec1 	bcc.w	8020018 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8020296:	4bb7      	ldr	r3, [pc, #732]	; (8020574 <dhcp_recv+0x628>)
 8020298:	781b      	ldrb	r3, [r3, #0]
 802029a:	b163      	cbz	r3, 80202b6 <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 802029c:	2300      	movs	r3, #0
 802029e:	4ab5      	ldr	r2, [pc, #724]	; (8020574 <dhcp_recv+0x628>)
 80202a0:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80202a2:	4bb5      	ldr	r3, [pc, #724]	; (8020578 <dhcp_recv+0x62c>)
 80202a4:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80202a6:	2b01      	cmp	r3, #1
 80202a8:	f000 8108 	beq.w	80204bc <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80202ac:	2b02      	cmp	r3, #2
 80202ae:	d006      	beq.n	80202be <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80202b0:	2b03      	cmp	r3, #3
 80202b2:	f000 8101 	beq.w	80204b8 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 80202b6:	9b04      	ldr	r3, [sp, #16]
 80202b8:	2b00      	cmp	r3, #0
 80202ba:	f000 811c 	beq.w	80204f6 <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 80202be:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80202c0:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 80202c4:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 80202c6:	232c      	movs	r3, #44	; 0x2c
 80202c8:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 80202ca:	9b03      	ldr	r3, [sp, #12]
 80202cc:	895b      	ldrh	r3, [r3, #10]
 80202ce:	e682      	b.n	801ffd6 <dhcp_recv+0x8a>
    switch (op) {
 80202d0:	1e50      	subs	r0, r2, #1
 80202d2:	283a      	cmp	r0, #58	; 0x3a
 80202d4:	f63f aef1 	bhi.w	80200ba <dhcp_recv+0x16e>
 80202d8:	a601      	add	r6, pc, #4	; (adr r6, 80202e0 <dhcp_recv+0x394>)
 80202da:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 80202de:	bf00      	nop
 80202e0:	08020459 	.word	0x08020459
 80202e4:	080200bb 	.word	0x080200bb
 80202e8:	08020445 	.word	0x08020445
 80202ec:	080200bb 	.word	0x080200bb
 80202f0:	080200bb 	.word	0x080200bb
 80202f4:	080200bb 	.word	0x080200bb
 80202f8:	080200bb 	.word	0x080200bb
 80202fc:	080200bb 	.word	0x080200bb
 8020300:	080200bb 	.word	0x080200bb
 8020304:	080200bb 	.word	0x080200bb
 8020308:	080200bb 	.word	0x080200bb
 802030c:	080200bb 	.word	0x080200bb
 8020310:	080200bb 	.word	0x080200bb
 8020314:	080200bb 	.word	0x080200bb
 8020318:	080200bb 	.word	0x080200bb
 802031c:	080200bb 	.word	0x080200bb
 8020320:	080200bb 	.word	0x080200bb
 8020324:	080200bb 	.word	0x080200bb
 8020328:	080200bb 	.word	0x080200bb
 802032c:	080200bb 	.word	0x080200bb
 8020330:	080200bb 	.word	0x080200bb
 8020334:	080200bb 	.word	0x080200bb
 8020338:	080200bb 	.word	0x080200bb
 802033c:	080200bb 	.word	0x080200bb
 8020340:	080200bb 	.word	0x080200bb
 8020344:	080200bb 	.word	0x080200bb
 8020348:	080200bb 	.word	0x080200bb
 802034c:	080200bb 	.word	0x080200bb
 8020350:	080200bb 	.word	0x080200bb
 8020354:	080200bb 	.word	0x080200bb
 8020358:	080200bb 	.word	0x080200bb
 802035c:	080200bb 	.word	0x080200bb
 8020360:	080200bb 	.word	0x080200bb
 8020364:	080200bb 	.word	0x080200bb
 8020368:	080200bb 	.word	0x080200bb
 802036c:	080200bb 	.word	0x080200bb
 8020370:	080200bb 	.word	0x080200bb
 8020374:	080200bb 	.word	0x080200bb
 8020378:	080200bb 	.word	0x080200bb
 802037c:	080200bb 	.word	0x080200bb
 8020380:	080200bb 	.word	0x080200bb
 8020384:	080200bb 	.word	0x080200bb
 8020388:	080200bb 	.word	0x080200bb
 802038c:	080200bb 	.word	0x080200bb
 8020390:	080200bb 	.word	0x080200bb
 8020394:	080200bb 	.word	0x080200bb
 8020398:	080200bb 	.word	0x080200bb
 802039c:	080200bb 	.word	0x080200bb
 80203a0:	080200bb 	.word	0x080200bb
 80203a4:	080200bb 	.word	0x080200bb
 80203a8:	0802041d 	.word	0x0802041d
 80203ac:	08020409 	.word	0x08020409
 80203b0:	080203f5 	.word	0x080203f5
 80203b4:	080203e1 	.word	0x080203e1
 80203b8:	080200bb 	.word	0x080200bb
 80203bc:	080200bb 	.word	0x080200bb
 80203c0:	080200bb 	.word	0x080200bb
 80203c4:	080203cd 	.word	0x080203cd
 80203c8:	08020431 	.word	0x08020431
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80203cc:	4b6b      	ldr	r3, [pc, #428]	; (802057c <dhcp_recv+0x630>)
 80203ce:	f240 625d 	movw	r2, #1629	; 0x65d
 80203d2:	496b      	ldr	r1, [pc, #428]	; (8020580 <dhcp_recv+0x634>)
 80203d4:	486b      	ldr	r0, [pc, #428]	; (8020584 <dhcp_recv+0x638>)
 80203d6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80203da:	f004 f86f 	bl	80244bc <iprintf>
 80203de:	e60d      	b.n	801fffc <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80203e0:	4b66      	ldr	r3, [pc, #408]	; (802057c <dhcp_recv+0x630>)
 80203e2:	f240 6259 	movw	r2, #1625	; 0x659
 80203e6:	4966      	ldr	r1, [pc, #408]	; (8020580 <dhcp_recv+0x634>)
 80203e8:	4866      	ldr	r0, [pc, #408]	; (8020584 <dhcp_recv+0x638>)
 80203ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80203ee:	f004 f865 	bl	80244bc <iprintf>
 80203f2:	e603      	b.n	801fffc <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80203f4:	4b61      	ldr	r3, [pc, #388]	; (802057c <dhcp_recv+0x630>)
 80203f6:	f240 6255 	movw	r2, #1621	; 0x655
 80203fa:	4963      	ldr	r1, [pc, #396]	; (8020588 <dhcp_recv+0x63c>)
 80203fc:	4861      	ldr	r0, [pc, #388]	; (8020584 <dhcp_recv+0x638>)
 80203fe:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020402:	f004 f85b 	bl	80244bc <iprintf>
 8020406:	e5f9      	b.n	801fffc <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020408:	4b5c      	ldr	r3, [pc, #368]	; (802057c <dhcp_recv+0x630>)
 802040a:	f240 624f 	movw	r2, #1615	; 0x64f
 802040e:	495e      	ldr	r1, [pc, #376]	; (8020588 <dhcp_recv+0x63c>)
 8020410:	485c      	ldr	r0, [pc, #368]	; (8020584 <dhcp_recv+0x638>)
 8020412:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020416:	f004 f851 	bl	80244bc <iprintf>
 802041a:	e5ef      	b.n	801fffc <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802041c:	4b57      	ldr	r3, [pc, #348]	; (802057c <dhcp_recv+0x630>)
 802041e:	f240 6241 	movw	r2, #1601	; 0x641
 8020422:	4957      	ldr	r1, [pc, #348]	; (8020580 <dhcp_recv+0x634>)
 8020424:	4857      	ldr	r0, [pc, #348]	; (8020584 <dhcp_recv+0x638>)
 8020426:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802042a:	f004 f847 	bl	80244bc <iprintf>
 802042e:	e5e5      	b.n	801fffc <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020430:	4b52      	ldr	r3, [pc, #328]	; (802057c <dhcp_recv+0x630>)
 8020432:	f240 6261 	movw	r2, #1633	; 0x661
 8020436:	4952      	ldr	r1, [pc, #328]	; (8020580 <dhcp_recv+0x634>)
 8020438:	4852      	ldr	r0, [pc, #328]	; (8020584 <dhcp_recv+0x638>)
 802043a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802043e:	f004 f83d 	bl	80244bc <iprintf>
 8020442:	e5db      	b.n	801fffc <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020444:	4b4d      	ldr	r3, [pc, #308]	; (802057c <dhcp_recv+0x630>)
 8020446:	f240 6233 	movw	r2, #1587	; 0x633
 802044a:	4950      	ldr	r1, [pc, #320]	; (802058c <dhcp_recv+0x640>)
 802044c:	484d      	ldr	r0, [pc, #308]	; (8020584 <dhcp_recv+0x638>)
 802044e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020452:	f004 f833 	bl	80244bc <iprintf>
 8020456:	e5d1      	b.n	801fffc <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020458:	4b48      	ldr	r3, [pc, #288]	; (802057c <dhcp_recv+0x630>)
 802045a:	f240 622e 	movw	r2, #1582	; 0x62e
 802045e:	4948      	ldr	r1, [pc, #288]	; (8020580 <dhcp_recv+0x634>)
 8020460:	4848      	ldr	r0, [pc, #288]	; (8020584 <dhcp_recv+0x638>)
 8020462:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020466:	f004 f829 	bl	80244bc <iprintf>
 802046a:	e5c7      	b.n	801fffc <dhcp_recv+0xb0>
 802046c:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 802046e:	896b      	ldrh	r3, [r5, #10]
 8020470:	e628      	b.n	80200c4 <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 8020472:	9c05      	ldr	r4, [sp, #20]
 8020474:	d027      	beq.n	80204c6 <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8020476:	2e01      	cmp	r6, #1
 8020478:	f040 80bb 	bne.w	80205f2 <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 802047c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 8020480:	4b3d      	ldr	r3, [pc, #244]	; (8020578 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 8020482:	4a3c      	ldr	r2, [pc, #240]	; (8020574 <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 8020484:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 8020488:	2301      	movs	r3, #1
 802048a:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 802048e:	e7ee      	b.n	802046e <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8020490:	4b3a      	ldr	r3, [pc, #232]	; (802057c <dhcp_recv+0x630>)
 8020492:	f240 6281 	movw	r2, #1665	; 0x681
 8020496:	493e      	ldr	r1, [pc, #248]	; (8020590 <dhcp_recv+0x644>)
 8020498:	483a      	ldr	r0, [pc, #232]	; (8020584 <dhcp_recv+0x638>)
 802049a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802049e:	f004 f80d 	bl	80244bc <iprintf>
 80204a2:	e5ab      	b.n	801fffc <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80204a4:	4b35      	ldr	r3, [pc, #212]	; (802057c <dhcp_recv+0x630>)
 80204a6:	f240 629d 	movw	r2, #1693	; 0x69d
 80204aa:	493a      	ldr	r1, [pc, #232]	; (8020594 <dhcp_recv+0x648>)
 80204ac:	4835      	ldr	r0, [pc, #212]	; (8020584 <dhcp_recv+0x638>)
 80204ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80204b2:	f004 f803 	bl	80244bc <iprintf>
 80204b6:	e5a1      	b.n	801fffc <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 80204b8:	2301      	movs	r3, #1
 80204ba:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 80204bc:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80204be:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 80204c2:	9302      	str	r3, [sp, #8]
 80204c4:	e701      	b.n	80202ca <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 80204c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80204c8:	f7f7 fd02 	bl	8017ed0 <lwip_htonl>
 80204cc:	e7d8      	b.n	8020480 <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80204ce:	4b2b      	ldr	r3, [pc, #172]	; (802057c <dhcp_recv+0x630>)
 80204d0:	f240 6251 	movw	r2, #1617	; 0x651
 80204d4:	4930      	ldr	r1, [pc, #192]	; (8020598 <dhcp_recv+0x64c>)
 80204d6:	482b      	ldr	r0, [pc, #172]	; (8020584 <dhcp_recv+0x638>)
 80204d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80204dc:	f003 ffee 	bl	80244bc <iprintf>
 80204e0:	e58c      	b.n	801fffc <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80204e2:	4b26      	ldr	r3, [pc, #152]	; (802057c <dhcp_recv+0x630>)
 80204e4:	f240 6239 	movw	r2, #1593	; 0x639
 80204e8:	492c      	ldr	r1, [pc, #176]	; (802059c <dhcp_recv+0x650>)
 80204ea:	4826      	ldr	r0, [pc, #152]	; (8020584 <dhcp_recv+0x638>)
 80204ec:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80204f0:	f003 ffe4 	bl	80244bc <iprintf>
 80204f4:	e582      	b.n	801fffc <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80204f6:	4b1f      	ldr	r3, [pc, #124]	; (8020574 <dhcp_recv+0x628>)
 80204f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80204fc:	785b      	ldrb	r3, [r3, #1]
 80204fe:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 8020502:	2b00      	cmp	r3, #0
 8020504:	f43f ad7a 	beq.w	801fffc <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8020508:	4a1b      	ldr	r2, [pc, #108]	; (8020578 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 802050a:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 802050e:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8020510:	2b05      	cmp	r3, #5
 8020512:	d01d      	beq.n	8020550 <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 8020514:	2b06      	cmp	r3, #6
 8020516:	d043      	beq.n	80205a0 <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8020518:	2b02      	cmp	r3, #2
 802051a:	f47f ad6f 	bne.w	801fffc <dhcp_recv+0xb0>
 802051e:	f899 3005 	ldrb.w	r3, [r9, #5]
 8020522:	2b06      	cmp	r3, #6
 8020524:	f47f ad6a 	bne.w	801fffc <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8020528:	4b12      	ldr	r3, [pc, #72]	; (8020574 <dhcp_recv+0x628>)
 802052a:	789b      	ldrb	r3, [r3, #2]
 802052c:	2b00      	cmp	r3, #0
 802052e:	f43f ad65 	beq.w	801fffc <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020532:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 8020536:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8020538:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 802053a:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 802053c:	f7f7 fcc8 	bl	8017ed0 <lwip_htonl>
 8020540:	4603      	mov	r3, r0
    dhcp_select(netif);
 8020542:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8020544:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8020546:	6923      	ldr	r3, [r4, #16]
 8020548:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 802054a:	f7ff fbbf 	bl	801fccc <dhcp_select.isra.0>
 802054e:	e555      	b.n	801fffc <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8020550:	f899 3005 	ldrb.w	r3, [r9, #5]
 8020554:	2b01      	cmp	r3, #1
 8020556:	d03f      	beq.n	80205d8 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8020558:	3b03      	subs	r3, #3
 802055a:	2b02      	cmp	r3, #2
 802055c:	f63f ad4e 	bhi.w	801fffc <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 8020560:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8020564:	4621      	mov	r1, r4
 8020566:	f7ff f8c1 	bl	801f6ec <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 802056a:	4650      	mov	r0, sl
 802056c:	f7fe ffb2 	bl	801f4d4 <dhcp_bind>
 8020570:	e544      	b.n	801fffc <dhcp_recv+0xb0>
 8020572:	bf00      	nop
 8020574:	2002dcd0 	.word	0x2002dcd0
 8020578:	2002dcdc 	.word	0x2002dcdc
 802057c:	080e193c 	.word	0x080e193c
 8020580:	080e1ba0 	.word	0x080e1ba0
 8020584:	0802ac68 	.word	0x0802ac68
 8020588:	080e1bd0 	.word	0x080e1bd0
 802058c:	080e1bac 	.word	0x080e1bac
 8020590:	080e1c08 	.word	0x080e1c08
 8020594:	080e1c34 	.word	0x080e1c34
 8020598:	080e1bdc 	.word	0x080e1bdc
 802059c:	080e1bc0 	.word	0x080e1bc0
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80205a0:	f899 3005 	ldrb.w	r3, [r9, #5]
 80205a4:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80205a6:	2a02      	cmp	r2, #2
 80205a8:	d902      	bls.n	80205b0 <dhcp_recv+0x664>
 80205aa:	2b01      	cmp	r3, #1
 80205ac:	f47f ad26 	bne.w	801fffc <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80205b0:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 80205b4:	795a      	ldrb	r2, [r3, #5]
 80205b6:	2a0c      	cmp	r2, #12
 80205b8:	d004      	beq.n	80205c4 <dhcp_recv+0x678>
    dhcp->tries = 0;
 80205ba:	2200      	movs	r2, #0
    dhcp->state = new_state;
 80205bc:	210c      	movs	r1, #12
    dhcp->tries = 0;
 80205be:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 80205c0:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 80205c2:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80205c4:	4b1c      	ldr	r3, [pc, #112]	; (8020638 <dhcp_recv+0x6ec>)
 80205c6:	4650      	mov	r0, sl
 80205c8:	461a      	mov	r2, r3
 80205ca:	4619      	mov	r1, r3
 80205cc:	f7f9 f882 	bl	80196d4 <netif_set_addr>
  dhcp_discover(netif);
 80205d0:	4650      	mov	r0, sl
 80205d2:	f7ff fa95 	bl	801fb00 <dhcp_discover>
}
 80205d6:	e511      	b.n	801fffc <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 80205d8:	4621      	mov	r1, r4
 80205da:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 80205de:	f7ff f885 	bl	801f6ec <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80205e2:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 80205e6:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80205e8:	0719      	lsls	r1, r3, #28
 80205ea:	d5bf      	bpl.n	802056c <dhcp_recv+0x620>
        dhcp_check(netif);
 80205ec:	f7fe ff5a 	bl	801f4a4 <dhcp_check>
 80205f0:	e504      	b.n	801fffc <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80205f2:	4b12      	ldr	r3, [pc, #72]	; (802063c <dhcp_recv+0x6f0>)
 80205f4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80205f8:	4911      	ldr	r1, [pc, #68]	; (8020640 <dhcp_recv+0x6f4>)
 80205fa:	4812      	ldr	r0, [pc, #72]	; (8020644 <dhcp_recv+0x6f8>)
 80205fc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020600:	f003 ff5c 	bl	80244bc <iprintf>
 8020604:	e4fa      	b.n	801fffc <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 8020606:	4434      	add	r4, r6
 8020608:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 802060c:	4294      	cmp	r4, r2
 802060e:	f73f acf3 	bgt.w	801fff8 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020612:	19bc      	adds	r4, r7, r6
 8020614:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020616:	e555      	b.n	80200c4 <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 8020618:	4434      	add	r4, r6
 802061a:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 802061e:	428c      	cmp	r4, r1
 8020620:	f73f acea 	bgt.w	801fff8 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020624:	19bc      	adds	r4, r7, r6
 8020626:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020628:	2e00      	cmp	r6, #0
 802062a:	f43f ad4b 	beq.w	80200c4 <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 802062e:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8020630:	f04f 0808 	mov.w	r8, #8
 8020634:	e563      	b.n	80200fe <dhcp_recv+0x1b2>
 8020636:	bf00      	nop
 8020638:	080e1ff0 	.word	0x080e1ff0
 802063c:	080e193c 	.word	0x080e193c
 8020640:	080e1c20 	.word	0x080e1c20
 8020644:	0802ac68 	.word	0x0802ac68

08020648 <dhcp_network_changed>:
{
 8020648:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802064a:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 802064c:	b135      	cbz	r5, 802065c <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 802064e:	796b      	ldrb	r3, [r5, #5]
 8020650:	4604      	mov	r4, r0
 8020652:	2b05      	cmp	r3, #5
 8020654:	d803      	bhi.n	802065e <dhcp_network_changed+0x16>
 8020656:	2b02      	cmp	r3, #2
 8020658:	d813      	bhi.n	8020682 <dhcp_network_changed+0x3a>
 802065a:	b95b      	cbnz	r3, 8020674 <dhcp_network_changed+0x2c>
}
 802065c:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 802065e:	2b0a      	cmp	r3, #10
 8020660:	d00f      	beq.n	8020682 <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8020662:	2b0c      	cmp	r3, #12
 8020664:	d906      	bls.n	8020674 <dhcp_network_changed+0x2c>
 8020666:	4b0a      	ldr	r3, [pc, #40]	; (8020690 <dhcp_network_changed+0x48>)
 8020668:	f240 326d 	movw	r2, #877	; 0x36d
 802066c:	4909      	ldr	r1, [pc, #36]	; (8020694 <dhcp_network_changed+0x4c>)
 802066e:	480a      	ldr	r0, [pc, #40]	; (8020698 <dhcp_network_changed+0x50>)
 8020670:	f003 ff24 	bl	80244bc <iprintf>
      dhcp->tries = 0;
 8020674:	2300      	movs	r3, #0
      dhcp_discover(netif);
 8020676:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8020678:	71ab      	strb	r3, [r5, #6]
}
 802067a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 802067e:	f7ff ba3f 	b.w	801fb00 <dhcp_discover>
      dhcp->tries = 0;
 8020682:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 8020684:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8020686:	71ab      	strb	r3, [r5, #6]
}
 8020688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 802068c:	f7ff b938 	b.w	801f900 <dhcp_reboot.isra.0>
 8020690:	080e193c 	.word	0x080e193c
 8020694:	080e1c7c 	.word	0x080e1c7c
 8020698:	0802ac68 	.word	0x0802ac68

0802069c <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802069c:	2800      	cmp	r0, #0
 802069e:	d066      	beq.n	802076e <dhcp_arp_reply+0xd2>
{
 80206a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 80206a4:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 80206a6:	b085      	sub	sp, #20
 80206a8:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80206aa:	b115      	cbz	r5, 80206b2 <dhcp_arp_reply+0x16>
 80206ac:	796b      	ldrb	r3, [r5, #5]
 80206ae:	2b08      	cmp	r3, #8
 80206b0:	d002      	beq.n	80206b8 <dhcp_arp_reply+0x1c>
}
 80206b2:	b005      	add	sp, #20
 80206b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80206b8:	680a      	ldr	r2, [r1, #0]
 80206ba:	69eb      	ldr	r3, [r5, #28]
 80206bc:	429a      	cmp	r2, r3
 80206be:	d1f8      	bne.n	80206b2 <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 80206c0:	2200      	movs	r2, #0
    dhcp->state = new_state;
 80206c2:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80206c4:	4629      	mov	r1, r5
    dhcp->tries = 0;
 80206c6:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 80206c8:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80206ca:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 80206ce:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80206d0:	2204      	movs	r2, #4
 80206d2:	f7ff f863 	bl	801f79c <dhcp_create_msg>
  if (p_out != NULL) {
 80206d6:	4606      	mov	r6, r0
 80206d8:	2800      	cmp	r0, #0
 80206da:	d040      	beq.n	802075e <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80206dc:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 80206e0:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80206e2:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80206e6:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80206e8:	2b44      	cmp	r3, #68	; 0x44
 80206ea:	d847      	bhi.n	802077c <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 80206ec:	2232      	movs	r2, #50	; 0x32
 80206ee:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 80206f2:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 80206f6:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 80206fa:	b29b      	uxth	r3, r3
 80206fc:	2204      	movs	r2, #4
 80206fe:	fa1f f888 	uxth.w	r8, r8
 8020702:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020704:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020706:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802070a:	f7f7 fbe1 	bl	8017ed0 <lwip_htonl>
 802070e:	4639      	mov	r1, r7
 8020710:	4602      	mov	r2, r0
 8020712:	4640      	mov	r0, r8
 8020714:	f7fe fea2 	bl	801f45c <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8020718:	1c41      	adds	r1, r0, #1
 802071a:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802071c:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8020720:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020722:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8020724:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020726:	2943      	cmp	r1, #67	; 0x43
 8020728:	d807      	bhi.n	802073a <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 802072a:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 802072e:	1878      	adds	r0, r7, r1
 8020730:	2100      	movs	r1, #0
 8020732:	b292      	uxth	r2, r2
 8020734:	f002 ff26 	bl	8023584 <memset>
 8020738:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802073a:	31f0      	adds	r1, #240	; 0xf0
 802073c:	4630      	mov	r0, r6
 802073e:	b289      	uxth	r1, r1
 8020740:	f7f9 fb4a 	bl	8019dd8 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020744:	4911      	ldr	r1, [pc, #68]	; (802078c <dhcp_arp_reply+0xf0>)
 8020746:	4a12      	ldr	r2, [pc, #72]	; (8020790 <dhcp_arp_reply+0xf4>)
 8020748:	2343      	movs	r3, #67	; 0x43
 802074a:	9400      	str	r4, [sp, #0]
 802074c:	6808      	ldr	r0, [r1, #0]
 802074e:	4631      	mov	r1, r6
 8020750:	9201      	str	r2, [sp, #4]
 8020752:	4a10      	ldr	r2, [pc, #64]	; (8020794 <dhcp_arp_reply+0xf8>)
 8020754:	f7fe fc58 	bl	801f008 <udp_sendto_if_src>
    pbuf_free(p_out);
 8020758:	4630      	mov	r0, r6
 802075a:	f7f9 fc39 	bl	8019fd0 <pbuf_free>
  if (dhcp->tries < 255) {
 802075e:	79ab      	ldrb	r3, [r5, #6]
 8020760:	2bff      	cmp	r3, #255	; 0xff
 8020762:	d001      	beq.n	8020768 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 8020764:	3301      	adds	r3, #1
 8020766:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020768:	2314      	movs	r3, #20
 802076a:	812b      	strh	r3, [r5, #8]
  return result;
 802076c:	e7a1      	b.n	80206b2 <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802076e:	4b0a      	ldr	r3, [pc, #40]	; (8020798 <dhcp_arp_reply+0xfc>)
 8020770:	f240 328b 	movw	r2, #907	; 0x38b
 8020774:	4909      	ldr	r1, [pc, #36]	; (802079c <dhcp_arp_reply+0x100>)
 8020776:	480a      	ldr	r0, [pc, #40]	; (80207a0 <dhcp_arp_reply+0x104>)
 8020778:	f003 bea0 	b.w	80244bc <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802077c:	4b06      	ldr	r3, [pc, #24]	; (8020798 <dhcp_arp_reply+0xfc>)
 802077e:	f240 529a 	movw	r2, #1434	; 0x59a
 8020782:	4908      	ldr	r1, [pc, #32]	; (80207a4 <dhcp_arp_reply+0x108>)
 8020784:	4806      	ldr	r0, [pc, #24]	; (80207a0 <dhcp_arp_reply+0x104>)
 8020786:	f003 fe99 	bl	80244bc <iprintf>
 802078a:	e7af      	b.n	80206ec <dhcp_arp_reply+0x50>
 802078c:	2002dcc8 	.word	0x2002dcc8
 8020790:	080e1ff0 	.word	0x080e1ff0
 8020794:	080e1ff4 	.word	0x080e1ff4
 8020798:	080e193c 	.word	0x080e193c
 802079c:	0802b2e8 	.word	0x0802b2e8
 80207a0:	0802ac68 	.word	0x0802ac68
 80207a4:	080e1ab0 	.word	0x080e1ab0

080207a8 <dhcp_renew>:
{
 80207a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80207ac:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 80207ae:	b087      	sub	sp, #28
 80207b0:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 80207b2:	797b      	ldrb	r3, [r7, #5]
 80207b4:	2b05      	cmp	r3, #5
 80207b6:	d004      	beq.n	80207c2 <dhcp_renew+0x1a>
    dhcp->tries = 0;
 80207b8:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80207ba:	2205      	movs	r2, #5
    dhcp->tries = 0;
 80207bc:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 80207be:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 80207c0:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80207c2:	f10d 0316 	add.w	r3, sp, #22
 80207c6:	2203      	movs	r2, #3
 80207c8:	4639      	mov	r1, r7
 80207ca:	4658      	mov	r0, fp
 80207cc:	f7fe ffe6 	bl	801f79c <dhcp_create_msg>
  if (p_out != NULL) {
 80207d0:	4605      	mov	r5, r0
 80207d2:	2800      	cmp	r0, #0
 80207d4:	f000 80b9 	beq.w	802094a <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80207d8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80207dc:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80207de:	f104 0804 	add.w	r8, r4, #4
 80207e2:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80207e6:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80207e8:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 80207ec:	f200 8095 	bhi.w	802091a <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 80207f0:	2239      	movs	r2, #57	; 0x39
 80207f2:	1c63      	adds	r3, r4, #1
 80207f4:	fa1f f189 	uxth.w	r1, r9
 80207f8:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 80207fa:	b29b      	uxth	r3, r3
 80207fc:	2202      	movs	r2, #2
 80207fe:	9103      	str	r1, [sp, #12]
 8020800:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020802:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020804:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020808:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802080a:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802080e:	f200 8094 	bhi.w	802093a <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020812:	1ce3      	adds	r3, r4, #3
 8020814:	fa1f f988 	uxth.w	r9, r8
 8020818:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802081c:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802081e:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020820:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020822:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020826:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802082a:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802082e:	2b44      	cmp	r3, #68	; 0x44
 8020830:	d87b      	bhi.n	802092a <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 8020832:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8020836:	2237      	movs	r2, #55	; 0x37
 8020838:	1d63      	adds	r3, r4, #5
 802083a:	f8df a134 	ldr.w	sl, [pc, #308]	; 8020970 <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 802083e:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8020842:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8020846:	b29b      	uxth	r3, r3
 8020848:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802084a:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802084e:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8020852:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020854:	493e      	ldr	r1, [pc, #248]	; (8020950 <dhcp_renew+0x1a8>)
 8020856:	4b3f      	ldr	r3, [pc, #252]	; (8020954 <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020858:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802085c:	d80f      	bhi.n	802087e <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 802085e:	f108 0201 	add.w	r2, r8, #1
 8020862:	f806 9008 	strb.w	r9, [r6, r8]
 8020866:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802086a:	4a3b      	ldr	r2, [pc, #236]	; (8020958 <dhcp_renew+0x1b0>)
 802086c:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802086e:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020872:	d00c      	beq.n	802088e <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020874:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020878:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802087c:	d9ef      	bls.n	802085e <dhcp_renew+0xb6>
 802087e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020882:	4836      	ldr	r0, [pc, #216]	; (802095c <dhcp_renew+0x1b4>)
 8020884:	f003 fe1a 	bl	80244bc <iprintf>
 8020888:	4b32      	ldr	r3, [pc, #200]	; (8020954 <dhcp_renew+0x1ac>)
 802088a:	4931      	ldr	r1, [pc, #196]	; (8020950 <dhcp_renew+0x1a8>)
 802088c:	e7e7      	b.n	802085e <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 802088e:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8020892:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8020896:	22ff      	movs	r2, #255	; 0xff
 8020898:	b280      	uxth	r0, r0
 802089a:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802089c:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 802089e:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80208a0:	d808      	bhi.n	80208b4 <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 80208a2:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 80208a6:	4430      	add	r0, r6
 80208a8:	2100      	movs	r1, #0
 80208aa:	b2a4      	uxth	r4, r4
 80208ac:	1c62      	adds	r2, r4, #1
 80208ae:	f002 fe69 	bl	8023584 <memset>
 80208b2:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80208b4:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 80208b8:	4628      	mov	r0, r5
 80208ba:	b289      	uxth	r1, r1
 80208bc:	f7f9 fa8c 	bl	8019dd8 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80208c0:	4827      	ldr	r0, [pc, #156]	; (8020960 <dhcp_renew+0x1b8>)
 80208c2:	2343      	movs	r3, #67	; 0x43
 80208c4:	f107 0218 	add.w	r2, r7, #24
 80208c8:	6800      	ldr	r0, [r0, #0]
 80208ca:	4629      	mov	r1, r5
 80208cc:	f8cd b000 	str.w	fp, [sp]
 80208d0:	f7fe fc58 	bl	801f184 <udp_sendto_if>
 80208d4:	4604      	mov	r4, r0
    pbuf_free(p_out);
 80208d6:	4628      	mov	r0, r5
 80208d8:	f7f9 fb7a 	bl	8019fd0 <pbuf_free>
  if (dhcp->tries < 255) {
 80208dc:	79bb      	ldrb	r3, [r7, #6]
 80208de:	2bff      	cmp	r3, #255	; 0xff
 80208e0:	d015      	beq.n	802090e <dhcp_renew+0x166>
    dhcp->tries++;
 80208e2:	3301      	adds	r3, #1
 80208e4:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80208e6:	2b09      	cmp	r3, #9
    dhcp->tries++;
 80208e8:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80208ea:	d810      	bhi.n	802090e <dhcp_renew+0x166>
 80208ec:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80208f0:	4a1c      	ldr	r2, [pc, #112]	; (8020964 <dhcp_renew+0x1bc>)
}
 80208f2:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80208f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80208f8:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80208fa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80208fe:	b29b      	uxth	r3, r3
 8020900:	fba2 2303 	umull	r2, r3, r2, r3
 8020904:	095b      	lsrs	r3, r3, #5
 8020906:	813b      	strh	r3, [r7, #8]
}
 8020908:	b007      	add	sp, #28
 802090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 802090e:	2328      	movs	r3, #40	; 0x28
}
 8020910:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020912:	813b      	strh	r3, [r7, #8]
}
 8020914:	b007      	add	sp, #28
 8020916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802091a:	4b0e      	ldr	r3, [pc, #56]	; (8020954 <dhcp_renew+0x1ac>)
 802091c:	f240 529a 	movw	r2, #1434	; 0x59a
 8020920:	4911      	ldr	r1, [pc, #68]	; (8020968 <dhcp_renew+0x1c0>)
 8020922:	480e      	ldr	r0, [pc, #56]	; (802095c <dhcp_renew+0x1b4>)
 8020924:	f003 fdca 	bl	80244bc <iprintf>
 8020928:	e762      	b.n	80207f0 <dhcp_renew+0x48>
 802092a:	4b0a      	ldr	r3, [pc, #40]	; (8020954 <dhcp_renew+0x1ac>)
 802092c:	f240 529a 	movw	r2, #1434	; 0x59a
 8020930:	490d      	ldr	r1, [pc, #52]	; (8020968 <dhcp_renew+0x1c0>)
 8020932:	480a      	ldr	r0, [pc, #40]	; (802095c <dhcp_renew+0x1b4>)
 8020934:	f003 fdc2 	bl	80244bc <iprintf>
 8020938:	e77b      	b.n	8020832 <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802093a:	4b06      	ldr	r3, [pc, #24]	; (8020954 <dhcp_renew+0x1ac>)
 802093c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020940:	490a      	ldr	r1, [pc, #40]	; (802096c <dhcp_renew+0x1c4>)
 8020942:	4806      	ldr	r0, [pc, #24]	; (802095c <dhcp_renew+0x1b4>)
 8020944:	f003 fdba 	bl	80244bc <iprintf>
 8020948:	e763      	b.n	8020812 <dhcp_renew+0x6a>
    result = ERR_MEM;
 802094a:	f04f 34ff 	mov.w	r4, #4294967295
 802094e:	e7c5      	b.n	80208dc <dhcp_renew+0x134>
 8020950:	080e1b30 	.word	0x080e1b30
 8020954:	080e193c 	.word	0x080e193c
 8020958:	080e1cb8 	.word	0x080e1cb8
 802095c:	0802ac68 	.word	0x0802ac68
 8020960:	2002dcc8 	.word	0x2002dcc8
 8020964:	10624dd3 	.word	0x10624dd3
 8020968:	080e1ab0 	.word	0x080e1ab0
 802096c:	080e1af4 	.word	0x080e1af4
 8020970:	080e1cb5 	.word	0x080e1cb5

08020974 <dhcp_release_and_stop>:
{
 8020974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020978:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 802097a:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 802097c:	2c00      	cmp	r4, #0
 802097e:	d06c      	beq.n	8020a5a <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 8020980:	7962      	ldrb	r2, [r4, #5]
 8020982:	2a00      	cmp	r2, #0
 8020984:	d069      	beq.n	8020a5a <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8020986:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8020988:	2300      	movs	r3, #0
 802098a:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 802098c:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802098e:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8020990:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8020992:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8020994:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8020996:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8020998:	81e3      	strh	r3, [r4, #14]
 802099a:	6123      	str	r3, [r4, #16]
 802099c:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 802099e:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80209a2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80209a6:	d901      	bls.n	80209ac <dhcp_release_and_stop+0x38>
 80209a8:	2a0a      	cmp	r2, #10
 80209aa:	d148      	bne.n	8020a3e <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80209ac:	f10d 030a 	add.w	r3, sp, #10
 80209b0:	2207      	movs	r2, #7
 80209b2:	4621      	mov	r1, r4
 80209b4:	4628      	mov	r0, r5
 80209b6:	f7fe fef1 	bl	801f79c <dhcp_create_msg>
    if (p_out != NULL) {
 80209ba:	4606      	mov	r6, r0
 80209bc:	2800      	cmp	r0, #0
 80209be:	d03e      	beq.n	8020a3e <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80209c0:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 80209c4:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209c6:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80209ca:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209cc:	2b44      	cmp	r3, #68	; 0x44
 80209ce:	d84e      	bhi.n	8020a6e <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 80209d0:	f108 0301 	add.w	r3, r8, #1
 80209d4:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 80209d6:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 80209d8:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 80209dc:	2204      	movs	r2, #4
 80209de:	f108 0802 	add.w	r8, r8, #2
 80209e2:	54fa      	strb	r2, [r7, r3]
 80209e4:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80209e8:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80209ea:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80209ee:	f7f7 fa6f 	bl	8017ed0 <lwip_htonl>
 80209f2:	4639      	mov	r1, r7
 80209f4:	4602      	mov	r2, r0
 80209f6:	4640      	mov	r0, r8
 80209f8:	f7fe fd30 	bl	801f45c <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 80209fc:	1c43      	adds	r3, r0, #1
 80209fe:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8020a00:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 8020a04:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8020a06:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8020a08:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020a0a:	2b43      	cmp	r3, #67	; 0x43
 8020a0c:	d807      	bhi.n	8020a1e <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 8020a0e:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8020a12:	18f8      	adds	r0, r7, r3
 8020a14:	2100      	movs	r1, #0
 8020a16:	b292      	uxth	r2, r2
 8020a18:	f002 fdb4 	bl	8023584 <memset>
 8020a1c:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020a1e:	33f0      	adds	r3, #240	; 0xf0
 8020a20:	4630      	mov	r0, r6
 8020a22:	b299      	uxth	r1, r3
 8020a24:	f7f9 f9d8 	bl	8019dd8 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020a28:	4a15      	ldr	r2, [pc, #84]	; (8020a80 <dhcp_release_and_stop+0x10c>)
 8020a2a:	9500      	str	r5, [sp, #0]
 8020a2c:	2343      	movs	r3, #67	; 0x43
 8020a2e:	6810      	ldr	r0, [r2, #0]
 8020a30:	4631      	mov	r1, r6
 8020a32:	aa03      	add	r2, sp, #12
 8020a34:	f7fe fba6 	bl	801f184 <udp_sendto_if>
      pbuf_free(p_out);
 8020a38:	4630      	mov	r0, r6
 8020a3a:	f7f9 fac9 	bl	8019fd0 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8020a3e:	4b11      	ldr	r3, [pc, #68]	; (8020a84 <dhcp_release_and_stop+0x110>)
 8020a40:	4628      	mov	r0, r5
 8020a42:	461a      	mov	r2, r3
 8020a44:	4619      	mov	r1, r3
 8020a46:	f7f8 fe45 	bl	80196d4 <netif_set_addr>
  if (new_state != dhcp->state) {
 8020a4a:	7963      	ldrb	r3, [r4, #5]
 8020a4c:	b11b      	cbz	r3, 8020a56 <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 8020a4e:	2300      	movs	r3, #0
 8020a50:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 8020a52:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 8020a54:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 8020a56:	7923      	ldrb	r3, [r4, #4]
 8020a58:	b913      	cbnz	r3, 8020a60 <dhcp_release_and_stop+0xec>
}
 8020a5a:	b004      	add	sp, #16
 8020a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8020a60:	f7fe fe22 	bl	801f6a8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8020a64:	2300      	movs	r3, #0
 8020a66:	7123      	strb	r3, [r4, #4]
}
 8020a68:	b004      	add	sp, #16
 8020a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020a6e:	4b06      	ldr	r3, [pc, #24]	; (8020a88 <dhcp_release_and_stop+0x114>)
 8020a70:	f240 529a 	movw	r2, #1434	; 0x59a
 8020a74:	4905      	ldr	r1, [pc, #20]	; (8020a8c <dhcp_release_and_stop+0x118>)
 8020a76:	4806      	ldr	r0, [pc, #24]	; (8020a90 <dhcp_release_and_stop+0x11c>)
 8020a78:	f003 fd20 	bl	80244bc <iprintf>
 8020a7c:	e7a8      	b.n	80209d0 <dhcp_release_and_stop+0x5c>
 8020a7e:	bf00      	nop
 8020a80:	2002dcc8 	.word	0x2002dcc8
 8020a84:	080e1ff0 	.word	0x080e1ff0
 8020a88:	080e193c 	.word	0x080e193c
 8020a8c:	080e1ab0 	.word	0x080e1ab0
 8020a90:	0802ac68 	.word	0x0802ac68

08020a94 <dhcp_start>:
{
 8020a94:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8020a96:	2800      	cmp	r0, #0
 8020a98:	d046      	beq.n	8020b28 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8020a9a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8020a9e:	4604      	mov	r4, r0
 8020aa0:	07da      	lsls	r2, r3, #31
 8020aa2:	d537      	bpl.n	8020b14 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8020aa4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 8020aa6:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8020aa8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8020aac:	d32f      	bcc.n	8020b0e <dhcp_start+0x7a>
  if (dhcp == NULL) {
 8020aae:	b33d      	cbz	r5, 8020b00 <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 8020ab0:	792b      	ldrb	r3, [r5, #4]
 8020ab2:	bb13      	cbnz	r3, 8020afa <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 8020ab4:	2234      	movs	r2, #52	; 0x34
 8020ab6:	2100      	movs	r1, #0
 8020ab8:	4628      	mov	r0, r5
 8020aba:	f002 fd63 	bl	8023584 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8020abe:	f7fe fdb9 	bl	801f634 <dhcp_inc_pcb_refcount>
 8020ac2:	4606      	mov	r6, r0
 8020ac4:	bb18      	cbnz	r0, 8020b0e <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 8020ac6:	2301      	movs	r3, #1
 8020ac8:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8020aca:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8020ace:	075b      	lsls	r3, r3, #29
 8020ad0:	d408      	bmi.n	8020ae4 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 8020ad2:	796b      	ldrb	r3, [r5, #5]
 8020ad4:	2b02      	cmp	r3, #2
 8020ad6:	d003      	beq.n	8020ae0 <dhcp_start+0x4c>
    dhcp->state = new_state;
 8020ad8:	2302      	movs	r3, #2
    dhcp->tries = 0;
 8020ada:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 8020adc:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8020ade:	716b      	strb	r3, [r5, #5]
}
 8020ae0:	4630      	mov	r0, r6
 8020ae2:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 8020ae4:	4620      	mov	r0, r4
 8020ae6:	f7ff f80b 	bl	801fb00 <dhcp_discover>
  if (result != ERR_OK) {
 8020aea:	2800      	cmp	r0, #0
 8020aec:	d0f8      	beq.n	8020ae0 <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 8020aee:	4620      	mov	r0, r4
    return ERR_MEM;
 8020af0:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 8020af4:	f7ff ff3e 	bl	8020974 <dhcp_release_and_stop>
    return ERR_MEM;
 8020af8:	e7f2      	b.n	8020ae0 <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8020afa:	f7fe fdd5 	bl	801f6a8 <dhcp_dec_pcb_refcount>
 8020afe:	e7d9      	b.n	8020ab4 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8020b00:	2034      	movs	r0, #52	; 0x34
 8020b02:	f7f8 fb57 	bl	80191b4 <mem_malloc>
    if (dhcp == NULL) {
 8020b06:	4605      	mov	r5, r0
 8020b08:	b108      	cbz	r0, 8020b0e <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8020b0a:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8020b0c:	e7d2      	b.n	8020ab4 <dhcp_start+0x20>
    return ERR_MEM;
 8020b0e:	f04f 36ff 	mov.w	r6, #4294967295
 8020b12:	e7e5      	b.n	8020ae0 <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8020b14:	4b09      	ldr	r3, [pc, #36]	; (8020b3c <dhcp_start+0xa8>)
 8020b16:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8020b1a:	4909      	ldr	r1, [pc, #36]	; (8020b40 <dhcp_start+0xac>)
 8020b1c:	f06f 060f 	mvn.w	r6, #15
 8020b20:	4808      	ldr	r0, [pc, #32]	; (8020b44 <dhcp_start+0xb0>)
 8020b22:	f003 fccb 	bl	80244bc <iprintf>
 8020b26:	e7db      	b.n	8020ae0 <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8020b28:	4b04      	ldr	r3, [pc, #16]	; (8020b3c <dhcp_start+0xa8>)
 8020b2a:	f240 22e7 	movw	r2, #743	; 0x2e7
 8020b2e:	4906      	ldr	r1, [pc, #24]	; (8020b48 <dhcp_start+0xb4>)
 8020b30:	f06f 060f 	mvn.w	r6, #15
 8020b34:	4803      	ldr	r0, [pc, #12]	; (8020b44 <dhcp_start+0xb0>)
 8020b36:	f003 fcc1 	bl	80244bc <iprintf>
 8020b3a:	e7d1      	b.n	8020ae0 <dhcp_start+0x4c>
 8020b3c:	080e193c 	.word	0x080e193c
 8020b40:	080e1c90 	.word	0x080e1c90
 8020b44:	0802ac68 	.word	0x0802ac68
 8020b48:	0802b2e8 	.word	0x0802b2e8

08020b4c <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8020b4c:	4b8a      	ldr	r3, [pc, #552]	; (8020d78 <dhcp_coarse_tmr+0x22c>)
{
 8020b4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8020b52:	681d      	ldr	r5, [r3, #0]
{
 8020b54:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 8020b56:	b1dd      	cbz	r5, 8020b90 <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8020b58:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8020b5a:	b1b4      	cbz	r4, 8020b8a <dhcp_coarse_tmr+0x3e>
 8020b5c:	7963      	ldrb	r3, [r4, #5]
 8020b5e:	b1a3      	cbz	r3, 8020b8a <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8020b60:	8aa1      	ldrh	r1, [r4, #20]
 8020b62:	b129      	cbz	r1, 8020b70 <dhcp_coarse_tmr+0x24>
 8020b64:	8a62      	ldrh	r2, [r4, #18]
 8020b66:	3201      	adds	r2, #1
 8020b68:	b292      	uxth	r2, r2
 8020b6a:	4291      	cmp	r1, r2
 8020b6c:	8262      	strh	r2, [r4, #18]
 8020b6e:	d012      	beq.n	8020b96 <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8020b70:	8a22      	ldrh	r2, [r4, #16]
 8020b72:	b11a      	cbz	r2, 8020b7c <dhcp_coarse_tmr+0x30>
 8020b74:	1e51      	subs	r1, r2, #1
 8020b76:	2a01      	cmp	r2, #1
 8020b78:	8221      	strh	r1, [r4, #16]
 8020b7a:	d013      	beq.n	8020ba4 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8020b7c:	89e2      	ldrh	r2, [r4, #14]
 8020b7e:	b122      	cbz	r2, 8020b8a <dhcp_coarse_tmr+0x3e>
 8020b80:	1e51      	subs	r1, r2, #1
 8020b82:	2a01      	cmp	r2, #1
 8020b84:	81e1      	strh	r1, [r4, #14]
 8020b86:	f000 8087 	beq.w	8020c98 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 8020b8a:	682d      	ldr	r5, [r5, #0]
 8020b8c:	2d00      	cmp	r5, #0
 8020b8e:	d1e3      	bne.n	8020b58 <dhcp_coarse_tmr+0xc>
}
 8020b90:	b007      	add	sp, #28
 8020b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 8020b96:	4628      	mov	r0, r5
 8020b98:	f7ff feec 	bl	8020974 <dhcp_release_and_stop>
        dhcp_start(netif);
 8020b9c:	4628      	mov	r0, r5
 8020b9e:	f7ff ff79 	bl	8020a94 <dhcp_start>
 8020ba2:	e7f2      	b.n	8020b8a <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020ba4:	1e5a      	subs	r2, r3, #1
 8020ba6:	b2d1      	uxtb	r1, r2
 8020ba8:	2909      	cmp	r1, #9
 8020baa:	d8ee      	bhi.n	8020b8a <dhcp_coarse_tmr+0x3e>
 8020bac:	f240 2219 	movw	r2, #537	; 0x219
 8020bb0:	40ca      	lsrs	r2, r1
 8020bb2:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8020bb4:	f012 0201 	ands.w	r2, r2, #1
 8020bb8:	d1e7      	bne.n	8020b8a <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 8020bba:	2b04      	cmp	r3, #4
 8020bbc:	d003      	beq.n	8020bc6 <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 8020bbe:	2304      	movs	r3, #4
    dhcp->tries = 0;
 8020bc0:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 8020bc2:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 8020bc4:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020bc6:	f10d 0316 	add.w	r3, sp, #22
 8020bca:	2203      	movs	r2, #3
 8020bcc:	4621      	mov	r1, r4
 8020bce:	4628      	mov	r0, r5
 8020bd0:	f7fe fde4 	bl	801f79c <dhcp_create_msg>
  if (p_out != NULL) {
 8020bd4:	4607      	mov	r7, r0
 8020bd6:	2800      	cmp	r0, #0
 8020bd8:	f000 8096 	beq.w	8020d08 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020bdc:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 8020be0:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020be2:	f106 0904 	add.w	r9, r6, #4
 8020be6:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020bea:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020bee:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 8020bf2:	f200 80b9 	bhi.w	8020d68 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 8020bf6:	2239      	movs	r2, #57	; 0x39
 8020bf8:	1c73      	adds	r3, r6, #1
 8020bfa:	fa1f fb8a 	uxth.w	fp, sl
 8020bfe:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 8020c02:	b29b      	uxth	r3, r3
 8020c04:	2202      	movs	r2, #2
 8020c06:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020c0a:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020c0e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020c10:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020c12:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020c16:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020c18:	f200 809e 	bhi.w	8020d58 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020c1c:	9903      	ldr	r1, [sp, #12]
 8020c1e:	1cf3      	adds	r3, r6, #3
 8020c20:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020c24:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020c26:	0a0a      	lsrs	r2, r1, #8
 8020c28:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020c2c:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020c30:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020c34:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020c38:	2b44      	cmp	r3, #68	; 0x44
 8020c3a:	f200 8085 	bhi.w	8020d48 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 8020c3e:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 8020c42:	2237      	movs	r2, #55	; 0x37
 8020c44:	1d73      	adds	r3, r6, #5
 8020c46:	f8df b158 	ldr.w	fp, [pc, #344]	; 8020da0 <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 8020c4a:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 8020c4e:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 8020c52:	b29b      	uxth	r3, r3
 8020c54:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c56:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020c5a:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8020c5e:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020c62:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c66:	d80f      	bhi.n	8020c88 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 8020c68:	f808 a009 	strb.w	sl, [r8, r9]
 8020c6c:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020c70:	4b42      	ldr	r3, [pc, #264]	; (8020d7c <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 8020c72:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020c76:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020c78:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020c7c:	d01f      	beq.n	8020cbe <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c7e:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020c82:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c86:	d9ef      	bls.n	8020c68 <dhcp_coarse_tmr+0x11c>
 8020c88:	4b3d      	ldr	r3, [pc, #244]	; (8020d80 <dhcp_coarse_tmr+0x234>)
 8020c8a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020c8e:	493d      	ldr	r1, [pc, #244]	; (8020d84 <dhcp_coarse_tmr+0x238>)
 8020c90:	483d      	ldr	r0, [pc, #244]	; (8020d88 <dhcp_coarse_tmr+0x23c>)
 8020c92:	f003 fc13 	bl	80244bc <iprintf>
 8020c96:	e7e7      	b.n	8020c68 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020c98:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8020c9c:	2a01      	cmp	r2, #1
 8020c9e:	d002      	beq.n	8020ca6 <dhcp_coarse_tmr+0x15a>
 8020ca0:	2b0a      	cmp	r3, #10
 8020ca2:	f47f af72 	bne.w	8020b8a <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8020ca6:	4628      	mov	r0, r5
 8020ca8:	f7ff fd7e 	bl	80207a8 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8020cac:	89a3      	ldrh	r3, [r4, #12]
 8020cae:	8a62      	ldrh	r2, [r4, #18]
 8020cb0:	1a9b      	subs	r3, r3, r2
 8020cb2:	2b01      	cmp	r3, #1
 8020cb4:	f77f af69 	ble.w	8020b8a <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8020cb8:	105b      	asrs	r3, r3, #1
 8020cba:	81e3      	strh	r3, [r4, #14]
 8020cbc:	e765      	b.n	8020b8a <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 8020cbe:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 8020cc2:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8020cc6:	22ff      	movs	r2, #255	; 0xff
 8020cc8:	b280      	uxth	r0, r0
 8020cca:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020ccc:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8020cce:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020cd2:	d808      	bhi.n	8020ce6 <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 8020cd4:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 8020cd8:	4440      	add	r0, r8
 8020cda:	2100      	movs	r1, #0
 8020cdc:	b292      	uxth	r2, r2
 8020cde:	3201      	adds	r2, #1
 8020ce0:	f002 fc50 	bl	8023584 <memset>
 8020ce4:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020ce6:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020cea:	4638      	mov	r0, r7
 8020cec:	b289      	uxth	r1, r1
 8020cee:	f7f9 f873 	bl	8019dd8 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020cf2:	4b26      	ldr	r3, [pc, #152]	; (8020d8c <dhcp_coarse_tmr+0x240>)
 8020cf4:	9500      	str	r5, [sp, #0]
 8020cf6:	4639      	mov	r1, r7
 8020cf8:	6818      	ldr	r0, [r3, #0]
 8020cfa:	2343      	movs	r3, #67	; 0x43
 8020cfc:	4a24      	ldr	r2, [pc, #144]	; (8020d90 <dhcp_coarse_tmr+0x244>)
 8020cfe:	f7fe fa41 	bl	801f184 <udp_sendto_if>
    pbuf_free(p_out);
 8020d02:	4638      	mov	r0, r7
 8020d04:	f7f9 f964 	bl	8019fd0 <pbuf_free>
  if (dhcp->tries < 255) {
 8020d08:	79a3      	ldrb	r3, [r4, #6]
 8020d0a:	2bff      	cmp	r3, #255	; 0xff
 8020d0c:	d01a      	beq.n	8020d44 <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 8020d0e:	3301      	adds	r3, #1
 8020d10:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020d12:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8020d14:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020d16:	d815      	bhi.n	8020d44 <dhcp_coarse_tmr+0x1f8>
 8020d18:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8020d1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020d20:	4a1c      	ldr	r2, [pc, #112]	; (8020d94 <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020d22:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020d24:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020d28:	b29b      	uxth	r3, r3
 8020d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8020d2e:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8020d30:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020d32:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8020d34:	8aa3      	ldrh	r3, [r4, #20]
 8020d36:	1a9b      	subs	r3, r3, r2
 8020d38:	2b01      	cmp	r3, #1
 8020d3a:	f77f af26 	ble.w	8020b8a <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8020d3e:	105b      	asrs	r3, r3, #1
 8020d40:	8223      	strh	r3, [r4, #16]
 8020d42:	e722      	b.n	8020b8a <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 8020d44:	2314      	movs	r3, #20
 8020d46:	e7f3      	b.n	8020d30 <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020d48:	4b0d      	ldr	r3, [pc, #52]	; (8020d80 <dhcp_coarse_tmr+0x234>)
 8020d4a:	f240 529a 	movw	r2, #1434	; 0x59a
 8020d4e:	4912      	ldr	r1, [pc, #72]	; (8020d98 <dhcp_coarse_tmr+0x24c>)
 8020d50:	480d      	ldr	r0, [pc, #52]	; (8020d88 <dhcp_coarse_tmr+0x23c>)
 8020d52:	f003 fbb3 	bl	80244bc <iprintf>
 8020d56:	e772      	b.n	8020c3e <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020d58:	4b09      	ldr	r3, [pc, #36]	; (8020d80 <dhcp_coarse_tmr+0x234>)
 8020d5a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020d5e:	490f      	ldr	r1, [pc, #60]	; (8020d9c <dhcp_coarse_tmr+0x250>)
 8020d60:	4809      	ldr	r0, [pc, #36]	; (8020d88 <dhcp_coarse_tmr+0x23c>)
 8020d62:	f003 fbab 	bl	80244bc <iprintf>
 8020d66:	e759      	b.n	8020c1c <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020d68:	4b05      	ldr	r3, [pc, #20]	; (8020d80 <dhcp_coarse_tmr+0x234>)
 8020d6a:	f240 529a 	movw	r2, #1434	; 0x59a
 8020d6e:	490a      	ldr	r1, [pc, #40]	; (8020d98 <dhcp_coarse_tmr+0x24c>)
 8020d70:	4805      	ldr	r0, [pc, #20]	; (8020d88 <dhcp_coarse_tmr+0x23c>)
 8020d72:	f003 fba3 	bl	80244bc <iprintf>
 8020d76:	e73e      	b.n	8020bf6 <dhcp_coarse_tmr+0xaa>
 8020d78:	2002db48 	.word	0x2002db48
 8020d7c:	080e1cb8 	.word	0x080e1cb8
 8020d80:	080e193c 	.word	0x080e193c
 8020d84:	080e1b30 	.word	0x080e1b30
 8020d88:	0802ac68 	.word	0x0802ac68
 8020d8c:	2002dcc8 	.word	0x2002dcc8
 8020d90:	080e1ff4 	.word	0x080e1ff4
 8020d94:	10624dd3 	.word	0x10624dd3
 8020d98:	080e1ab0 	.word	0x080e1ab0
 8020d9c:	080e1af4 	.word	0x080e1af4
 8020da0:	080e1cb5 	.word	0x080e1cb5

08020da4 <dhcp_fine_tmr>:
{
 8020da4:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8020da6:	4b21      	ldr	r3, [pc, #132]	; (8020e2c <dhcp_fine_tmr+0x88>)
 8020da8:	681c      	ldr	r4, [r3, #0]
 8020daa:	b1fc      	cbz	r4, 8020dec <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8020dac:	2500      	movs	r5, #0
 8020dae:	e003      	b.n	8020db8 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 8020db0:	3a01      	subs	r2, #1
 8020db2:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8020db4:	6824      	ldr	r4, [r4, #0]
 8020db6:	b1cc      	cbz	r4, 8020dec <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8020db8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 8020dba:	2b00      	cmp	r3, #0
 8020dbc:	d0fa      	beq.n	8020db4 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 8020dbe:	891a      	ldrh	r2, [r3, #8]
 8020dc0:	2a01      	cmp	r2, #1
 8020dc2:	d8f5      	bhi.n	8020db0 <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 8020dc4:	d1f6      	bne.n	8020db4 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8020dc6:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8020dc8:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8020dca:	2a0c      	cmp	r2, #12
 8020dcc:	d016      	beq.n	8020dfc <dhcp_fine_tmr+0x58>
 8020dce:	2a06      	cmp	r2, #6
 8020dd0:	d014      	beq.n	8020dfc <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8020dd2:	2a01      	cmp	r2, #1
 8020dd4:	d016      	beq.n	8020e04 <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8020dd6:	2a08      	cmp	r2, #8
 8020dd8:	d009      	beq.n	8020dee <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8020dda:	2a03      	cmp	r2, #3
 8020ddc:	d1ea      	bne.n	8020db4 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 8020dde:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8020de0:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8020de2:	2b01      	cmp	r3, #1
 8020de4:	d91e      	bls.n	8020e24 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 8020de6:	f7fe fe8b 	bl	801fb00 <dhcp_discover>
 8020dea:	e7e3      	b.n	8020db4 <dhcp_fine_tmr+0x10>
}
 8020dec:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 8020dee:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8020df0:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8020df2:	2b01      	cmp	r3, #1
 8020df4:	d913      	bls.n	8020e1e <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 8020df6:	f7fe fb6d 	bl	801f4d4 <dhcp_bind>
 8020dfa:	e7db      	b.n	8020db4 <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 8020dfc:	4620      	mov	r0, r4
 8020dfe:	f7fe fe7f 	bl	801fb00 <dhcp_discover>
 8020e02:	e7d7      	b.n	8020db4 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 8020e04:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8020e06:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8020e08:	2b05      	cmp	r3, #5
 8020e0a:	d802      	bhi.n	8020e12 <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 8020e0c:	f7fe ff5e 	bl	801fccc <dhcp_select.isra.0>
 8020e10:	e7d0      	b.n	8020db4 <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 8020e12:	f7ff fdaf 	bl	8020974 <dhcp_release_and_stop>
      dhcp_start(netif);
 8020e16:	4620      	mov	r0, r4
 8020e18:	f7ff fe3c 	bl	8020a94 <dhcp_start>
 8020e1c:	e7ca      	b.n	8020db4 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 8020e1e:	f7fe fb41 	bl	801f4a4 <dhcp_check>
 8020e22:	e7c7      	b.n	8020db4 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 8020e24:	f7fe fd6c 	bl	801f900 <dhcp_reboot.isra.0>
 8020e28:	e7c4      	b.n	8020db4 <dhcp_fine_tmr+0x10>
 8020e2a:	bf00      	nop
 8020e2c:	2002db48 	.word	0x2002db48

08020e30 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8020e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8020e34:	4f1a      	ldr	r7, [pc, #104]	; (8020ea0 <etharp_free_entry+0x70>)
 8020e36:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 8020e3a:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 8020e3c:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8020e40:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8020e44:	b32c      	cbz	r4, 8020e92 <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8020e46:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8020ea4 <etharp_free_entry+0x74>
 8020e4a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8020ea8 <etharp_free_entry+0x78>
 8020e4e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8020eac <etharp_free_entry+0x7c>
 8020e52:	e006      	b.n	8020e62 <etharp_free_entry+0x32>
    pbuf_free(r->p);
 8020e54:	f7f9 f8bc 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8020e58:	4629      	mov	r1, r5
 8020e5a:	200b      	movs	r0, #11
 8020e5c:	f7f8 fbbc 	bl	80195d8 <memp_free>
  while (q) {
 8020e60:	b19c      	cbz	r4, 8020e8a <etharp_free_entry+0x5a>
    q = q->next;
 8020e62:	4625      	mov	r5, r4
 8020e64:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8020e66:	6868      	ldr	r0, [r5, #4]
 8020e68:	2800      	cmp	r0, #0
 8020e6a:	d1f3      	bne.n	8020e54 <etharp_free_entry+0x24>
 8020e6c:	4651      	mov	r1, sl
 8020e6e:	465b      	mov	r3, fp
 8020e70:	229a      	movs	r2, #154	; 0x9a
 8020e72:	4648      	mov	r0, r9
 8020e74:	f003 fb22 	bl	80244bc <iprintf>
    pbuf_free(r->p);
 8020e78:	6868      	ldr	r0, [r5, #4]
 8020e7a:	f7f9 f8a9 	bl	8019fd0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8020e7e:	4629      	mov	r1, r5
 8020e80:	200b      	movs	r0, #11
 8020e82:	f7f8 fba9 	bl	80195d8 <memp_free>
  while (q) {
 8020e86:	2c00      	cmp	r4, #0
 8020e88:	d1eb      	bne.n	8020e62 <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 8020e8a:	eb08 0306 	add.w	r3, r8, r6
 8020e8e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8020e92:	4446      	add	r6, r8
 8020e94:	2300      	movs	r3, #0
 8020e96:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8020e9a:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8020e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ea0:	2002dd08 	.word	0x2002dd08
 8020ea4:	080e1cb8 	.word	0x080e1cb8
 8020ea8:	080e1cf0 	.word	0x080e1cf0
 8020eac:	0802ac68 	.word	0x0802ac68

08020eb0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8020eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eb4:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8020eb6:	f04f 0820 	mov.w	r8, #32
{
 8020eba:	b083      	sub	sp, #12
 8020ebc:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8020ebe:	469e      	mov	lr, r3
 8020ec0:	469b      	mov	fp, r3
{
 8020ec2:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8020ec4:	469a      	mov	sl, r3
 8020ec6:	4948      	ldr	r1, [pc, #288]	; (8020fe8 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 8020ec8:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8020eca:	46c4      	mov	ip, r8
 8020ecc:	4691      	mov	r9, r2
 8020ece:	f8cd 8004 	str.w	r8, [sp, #4]
 8020ed2:	e004      	b.n	8020ede <etharp_find_entry+0x2e>
 8020ed4:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020ed6:	3301      	adds	r3, #1
 8020ed8:	3118      	adds	r1, #24
 8020eda:	2b20      	cmp	r3, #32
 8020edc:	d015      	beq.n	8020f0a <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8020ede:	2c20      	cmp	r4, #32
 8020ee0:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 8020ee2:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8020ee4:	d134      	bne.n	8020f50 <etharp_find_entry+0xa0>
 8020ee6:	2800      	cmp	r0, #0
 8020ee8:	d0f4      	beq.n	8020ed4 <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8020eea:	b11d      	cbz	r5, 8020ef4 <etharp_find_entry+0x44>
 8020eec:	682f      	ldr	r7, [r5, #0]
 8020eee:	684e      	ldr	r6, [r1, #4]
 8020ef0:	42b7      	cmp	r7, r6
 8020ef2:	d038      	beq.n	8020f66 <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8020ef4:	2801      	cmp	r0, #1
 8020ef6:	d02e      	beq.n	8020f56 <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8020ef8:	8a48      	ldrh	r0, [r1, #18]
 8020efa:	4570      	cmp	r0, lr
 8020efc:	d3eb      	bcc.n	8020ed6 <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020efe:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 8020f00:	4686      	mov	lr, r0
 8020f02:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020f04:	3118      	adds	r1, #24
 8020f06:	2b20      	cmp	r3, #32
 8020f08:	d1e9      	bne.n	8020ede <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8020f0a:	9b00      	ldr	r3, [sp, #0]
 8020f0c:	464e      	mov	r6, r9
 8020f0e:	2b01      	cmp	r3, #1
 8020f10:	d166      	bne.n	8020fe0 <etharp_find_entry+0x130>
 8020f12:	2c20      	cmp	r4, #32
 8020f14:	d040      	beq.n	8020f98 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8020f16:	46a1      	mov	r9, r4
 8020f18:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8020f1c:	4a32      	ldr	r2, [pc, #200]	; (8020fe8 <etharp_find_entry+0x138>)
 8020f1e:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8020f22:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020f26:	7d1b      	ldrb	r3, [r3, #20]
 8020f28:	bb73      	cbnz	r3, 8020f88 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8020f2a:	b135      	cbz	r5, 8020f3a <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8020f2c:	eb08 0309 	add.w	r3, r8, r9
 8020f30:	492d      	ldr	r1, [pc, #180]	; (8020fe8 <etharp_find_entry+0x138>)
 8020f32:	682a      	ldr	r2, [r5, #0]
 8020f34:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8020f38:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8020f3a:	44c8      	add	r8, r9
 8020f3c:	4a2a      	ldr	r2, [pc, #168]	; (8020fe8 <etharp_find_entry+0x138>)
 8020f3e:	2300      	movs	r3, #0
 8020f40:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 8020f44:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8020f46:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8020f48:	4620      	mov	r0, r4
 8020f4a:	b003      	add	sp, #12
 8020f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 8020f50:	2800      	cmp	r0, #0
 8020f52:	d0c0      	beq.n	8020ed6 <etharp_find_entry+0x26>
 8020f54:	e7c9      	b.n	8020eea <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 8020f56:	6808      	ldr	r0, [r1, #0]
 8020f58:	b180      	cbz	r0, 8020f7c <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 8020f5a:	8a48      	ldrh	r0, [r1, #18]
 8020f5c:	4550      	cmp	r0, sl
 8020f5e:	d3ba      	bcc.n	8020ed6 <etharp_find_entry+0x26>
 8020f60:	4682      	mov	sl, r0
 8020f62:	4690      	mov	r8, r2
 8020f64:	e7b7      	b.n	8020ed6 <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8020f66:	f1b9 0f00 	cmp.w	r9, #0
 8020f6a:	d002      	beq.n	8020f72 <etharp_find_entry+0xc2>
 8020f6c:	688e      	ldr	r6, [r1, #8]
 8020f6e:	454e      	cmp	r6, r9
 8020f70:	d1c0      	bne.n	8020ef4 <etharp_find_entry+0x44>
 8020f72:	4614      	mov	r4, r2
}
 8020f74:	4620      	mov	r0, r4
 8020f76:	b003      	add	sp, #12
 8020f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8020f7c:	8a48      	ldrh	r0, [r1, #18]
 8020f7e:	4558      	cmp	r0, fp
 8020f80:	d3a9      	bcc.n	8020ed6 <etharp_find_entry+0x26>
 8020f82:	4683      	mov	fp, r0
 8020f84:	9201      	str	r2, [sp, #4]
 8020f86:	e7a6      	b.n	8020ed6 <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8020f88:	4b18      	ldr	r3, [pc, #96]	; (8020fec <etharp_find_entry+0x13c>)
 8020f8a:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8020f8e:	4918      	ldr	r1, [pc, #96]	; (8020ff0 <etharp_find_entry+0x140>)
 8020f90:	4818      	ldr	r0, [pc, #96]	; (8020ff4 <etharp_find_entry+0x144>)
 8020f92:	f003 fa93 	bl	80244bc <iprintf>
 8020f96:	e7c8      	b.n	8020f2a <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8020f98:	f1bc 0f20 	cmp.w	ip, #32
 8020f9c:	d012      	beq.n	8020fc4 <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8020f9e:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8020fa2:	4a11      	ldr	r2, [pc, #68]	; (8020fe8 <etharp_find_entry+0x138>)
 8020fa4:	46e1      	mov	r9, ip
 8020fa6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020faa:	b1bb      	cbz	r3, 8020fdc <etharp_find_entry+0x12c>
 8020fac:	464c      	mov	r4, r9
 8020fae:	4b0f      	ldr	r3, [pc, #60]	; (8020fec <etharp_find_entry+0x13c>)
 8020fb0:	f240 126d 	movw	r2, #365	; 0x16d
 8020fb4:	4910      	ldr	r1, [pc, #64]	; (8020ff8 <etharp_find_entry+0x148>)
 8020fb6:	480f      	ldr	r0, [pc, #60]	; (8020ff4 <etharp_find_entry+0x144>)
 8020fb8:	f003 fa80 	bl	80244bc <iprintf>
    etharp_free_entry(i);
 8020fbc:	4648      	mov	r0, r9
 8020fbe:	f7ff ff37 	bl	8020e30 <etharp_free_entry>
 8020fc2:	e7a9      	b.n	8020f18 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8020fc4:	9b01      	ldr	r3, [sp, #4]
 8020fc6:	2b20      	cmp	r3, #32
 8020fc8:	d105      	bne.n	8020fd6 <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8020fca:	f1b8 0f20 	cmp.w	r8, #32
 8020fce:	d007      	beq.n	8020fe0 <etharp_find_entry+0x130>
    etharp_free_entry(i);
 8020fd0:	4644      	mov	r4, r8
 8020fd2:	46c1      	mov	r9, r8
 8020fd4:	e7f2      	b.n	8020fbc <etharp_find_entry+0x10c>
 8020fd6:	461c      	mov	r4, r3
 8020fd8:	4699      	mov	r9, r3
 8020fda:	e7ef      	b.n	8020fbc <etharp_find_entry+0x10c>
 8020fdc:	4664      	mov	r4, ip
 8020fde:	e7ed      	b.n	8020fbc <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 8020fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8020fe4:	e7b0      	b.n	8020f48 <etharp_find_entry+0x98>
 8020fe6:	bf00      	nop
 8020fe8:	2002dd08 	.word	0x2002dd08
 8020fec:	080e1cb8 	.word	0x080e1cb8
 8020ff0:	080e1d18 	.word	0x080e1d18
 8020ff4:	0802ac68 	.word	0x0802ac68
 8020ff8:	080e1d00 	.word	0x080e1d00

08020ffc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021000:	b082      	sub	sp, #8
 8021002:	4688      	mov	r8, r1
 8021004:	4691      	mov	r9, r2
 8021006:	461f      	mov	r7, r3
 8021008:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802100c:	4606      	mov	r6, r0
{
 802100e:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021012:	2800      	cmp	r0, #0
 8021014:	d054      	beq.n	80210c0 <etharp_raw+0xc4>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8021016:	f44f 7220 	mov.w	r2, #640	; 0x280
 802101a:	211c      	movs	r1, #28
 802101c:	200e      	movs	r0, #14
 802101e:	f7f8 fe21 	bl	8019c64 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8021022:	4605      	mov	r5, r0
 8021024:	2800      	cmp	r0, #0
 8021026:	d053      	beq.n	80210d0 <etharp_raw+0xd4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8021028:	8943      	ldrh	r3, [r0, #10]
 802102a:	2b1b      	cmp	r3, #27
 802102c:	d940      	bls.n	80210b0 <etharp_raw+0xb4>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802102e:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 8021030:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 8021032:	f7f6 ff49 	bl	8017ec8 <lwip_htons>
 8021036:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8021038:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 802103c:	2b06      	cmp	r3, #6
 802103e:	d006      	beq.n	802104e <etharp_raw+0x52>
 8021040:	4b27      	ldr	r3, [pc, #156]	; (80210e0 <etharp_raw+0xe4>)
 8021042:	f240 4269 	movw	r2, #1129	; 0x469
 8021046:	4927      	ldr	r1, [pc, #156]	; (80210e4 <etharp_raw+0xe8>)
 8021048:	4827      	ldr	r0, [pc, #156]	; (80210e8 <etharp_raw+0xec>)
 802104a:	f003 fa37 	bl	80244bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 802104e:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021050:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021052:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021054:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8021056:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021058:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 802105a:	88b9      	ldrh	r1, [r7, #4]
 802105c:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802105e:	f8da 1000 	ldr.w	r1, [sl]
 8021062:	f8c4 1012 	str.w	r1, [r4, #18]
 8021066:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 802106a:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 802106c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802106e:	6809      	ldr	r1, [r1, #0]
 8021070:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8021074:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021076:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021078:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 802107a:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802107c:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802107e:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021080:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8021082:	2108      	movs	r1, #8
 8021084:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8021086:	2106      	movs	r1, #6
 8021088:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 802108a:	2104      	movs	r1, #4
 802108c:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802108e:	f640 0106 	movw	r1, #2054	; 0x806
 8021092:	9100      	str	r1, [sp, #0]
 8021094:	4629      	mov	r1, r5
 8021096:	f001 fcf5 	bl	8022a84 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 802109a:	4a14      	ldr	r2, [pc, #80]	; (80210ec <etharp_raw+0xf0>)
  /* free ARP query packet */
  pbuf_free(p);
 802109c:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 802109e:	8b13      	ldrh	r3, [r2, #24]
 80210a0:	3301      	adds	r3, #1
 80210a2:	8313      	strh	r3, [r2, #24]
  pbuf_free(p);
 80210a4:	f7f8 ff94 	bl	8019fd0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80210a8:	4630      	mov	r0, r6
}
 80210aa:	b002      	add	sp, #8
 80210ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80210b0:	4b0b      	ldr	r3, [pc, #44]	; (80210e0 <etharp_raw+0xe4>)
 80210b2:	f240 4262 	movw	r2, #1122	; 0x462
 80210b6:	490e      	ldr	r1, [pc, #56]	; (80210f0 <etharp_raw+0xf4>)
 80210b8:	480b      	ldr	r0, [pc, #44]	; (80210e8 <etharp_raw+0xec>)
 80210ba:	f003 f9ff 	bl	80244bc <iprintf>
 80210be:	e7b6      	b.n	802102e <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80210c0:	4b07      	ldr	r3, [pc, #28]	; (80210e0 <etharp_raw+0xe4>)
 80210c2:	f240 4257 	movw	r2, #1111	; 0x457
 80210c6:	490b      	ldr	r1, [pc, #44]	; (80210f4 <etharp_raw+0xf8>)
 80210c8:	4807      	ldr	r0, [pc, #28]	; (80210e8 <etharp_raw+0xec>)
 80210ca:	f003 f9f7 	bl	80244bc <iprintf>
 80210ce:	e7a2      	b.n	8021016 <etharp_raw+0x1a>
    ETHARP_STATS_INC(etharp.memerr);
 80210d0:	4a06      	ldr	r2, [pc, #24]	; (80210ec <etharp_raw+0xf0>)
    return ERR_MEM;
 80210d2:	f04f 30ff 	mov.w	r0, #4294967295
    ETHARP_STATS_INC(etharp.memerr);
 80210d6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 80210d8:	3301      	adds	r3, #1
 80210da:	8493      	strh	r3, [r2, #36]	; 0x24
    return ERR_MEM;
 80210dc:	e7e5      	b.n	80210aa <etharp_raw+0xae>
 80210de:	bf00      	nop
 80210e0:	080e1cb8 	.word	0x080e1cb8
 80210e4:	080e1d78 	.word	0x080e1d78
 80210e8:	0802ac68 	.word	0x0802ac68
 80210ec:	2002db54 	.word	0x2002db54
 80210f0:	080e1d44 	.word	0x080e1d44
 80210f4:	0802b2e8 	.word	0x0802b2e8

080210f8 <etharp_output_to_arp_index>:
{
 80210f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80210fc:	4f37      	ldr	r7, [pc, #220]	; (80211dc <etharp_output_to_arp_index+0xe4>)
 80210fe:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 8021102:	b085      	sub	sp, #20
 8021104:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021106:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 802110a:	4605      	mov	r5, r0
 802110c:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802110e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021112:	f899 3014 	ldrb.w	r3, [r9, #20]
 8021116:	2b01      	cmp	r3, #1
 8021118:	d93c      	bls.n	8021194 <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802111a:	2b02      	cmp	r3, #2
 802111c:	d011      	beq.n	8021142 <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802111e:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021120:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021124:	fb02 7404 	mla	r4, r2, r4, r7
 8021128:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 802112a:	f44f 6700 	mov.w	r7, #2048	; 0x800
 802112e:	4623      	mov	r3, r4
 8021130:	464a      	mov	r2, r9
 8021132:	4631      	mov	r1, r6
 8021134:	4628      	mov	r0, r5
 8021136:	9700      	str	r7, [sp, #0]
 8021138:	f001 fca4 	bl	8022a84 <ethernet_output>
}
 802113c:	b005      	add	sp, #20
 802113e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8021142:	44a0      	add	r8, r4
 8021144:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 8021148:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 802114c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8021150:	d82a      	bhi.n	80211a8 <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8021152:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8021156:	d3e2      	bcc.n	802111e <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021158:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802115c:	2301      	movs	r3, #1
 802115e:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 8021162:	4628      	mov	r0, r5
 8021164:	00e4      	lsls	r4, r4, #3
 8021166:	9303      	str	r3, [sp, #12]
 8021168:	4b1d      	ldr	r3, [pc, #116]	; (80211e0 <etharp_output_to_arp_index+0xe8>)
 802116a:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802116c:	f104 020c 	add.w	r2, r4, #12
 8021170:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021174:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021176:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021178:	18bc      	adds	r4, r7, r2
 802117a:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802117c:	9300      	str	r3, [sp, #0]
 802117e:	464b      	mov	r3, r9
 8021180:	4622      	mov	r2, r4
 8021182:	9702      	str	r7, [sp, #8]
 8021184:	f7ff ff3a 	bl	8020ffc <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021188:	2800      	cmp	r0, #0
 802118a:	d1ce      	bne.n	802112a <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802118c:	2303      	movs	r3, #3
 802118e:	f888 3014 	strb.w	r3, [r8, #20]
 8021192:	e7ca      	b.n	802112a <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021194:	4b13      	ldr	r3, [pc, #76]	; (80211e4 <etharp_output_to_arp_index+0xec>)
 8021196:	f240 22ee 	movw	r2, #750	; 0x2ee
 802119a:	4913      	ldr	r1, [pc, #76]	; (80211e8 <etharp_output_to_arp_index+0xf0>)
 802119c:	4813      	ldr	r0, [pc, #76]	; (80211ec <etharp_output_to_arp_index+0xf4>)
 802119e:	f003 f98d 	bl	80244bc <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80211a2:	f899 3014 	ldrb.w	r3, [r9, #20]
 80211a6:	e7b8      	b.n	802111a <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80211a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80211ac:	2301      	movs	r3, #1
 80211ae:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 80211b2:	4a0f      	ldr	r2, [pc, #60]	; (80211f0 <etharp_output_to_arp_index+0xf8>)
 80211b4:	00e4      	lsls	r4, r4, #3
 80211b6:	9303      	str	r3, [sp, #12]
 80211b8:	4649      	mov	r1, r9
 80211ba:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80211bc:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80211be:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80211c0:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80211c2:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80211c4:	9302      	str	r3, [sp, #8]
 80211c6:	4b06      	ldr	r3, [pc, #24]	; (80211e0 <etharp_output_to_arp_index+0xe8>)
 80211c8:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80211ca:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80211cc:	9300      	str	r3, [sp, #0]
 80211ce:	464b      	mov	r3, r9
 80211d0:	f7ff ff14 	bl	8020ffc <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80211d4:	2800      	cmp	r0, #0
 80211d6:	d0d9      	beq.n	802118c <etharp_output_to_arp_index+0x94>
 80211d8:	e7a7      	b.n	802112a <etharp_output_to_arp_index+0x32>
 80211da:	bf00      	nop
 80211dc:	2002dd08 	.word	0x2002dd08
 80211e0:	080e21f0 	.word	0x080e21f0
 80211e4:	080e1cb8 	.word	0x080e1cb8
 80211e8:	080e1dbc 	.word	0x080e1dbc
 80211ec:	0802ac68 	.word	0x0802ac68
 80211f0:	080e21e8 	.word	0x080e21e8

080211f4 <etharp_tmr>:
{
 80211f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80211f8:	4c1e      	ldr	r4, [pc, #120]	; (8021274 <etharp_tmr+0x80>)
 80211fa:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80211fc:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80211fe:	f8df 807c 	ldr.w	r8, [pc, #124]	; 802127c <etharp_tmr+0x88>
 8021202:	4f1d      	ldr	r7, [pc, #116]	; (8021278 <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021204:	2602      	movs	r6, #2
 8021206:	e00d      	b.n	8021224 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8021208:	2a01      	cmp	r2, #1
 802120a:	d101      	bne.n	8021210 <etharp_tmr+0x1c>
 802120c:	2b04      	cmp	r3, #4
 802120e:	d813      	bhi.n	8021238 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8021210:	2a03      	cmp	r2, #3
 8021212:	d01b      	beq.n	802124c <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8021214:	2a04      	cmp	r2, #4
 8021216:	d01c      	beq.n	8021252 <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8021218:	2a01      	cmp	r2, #1
 802121a:	d01c      	beq.n	8021256 <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802121c:	3501      	adds	r5, #1
 802121e:	3418      	adds	r4, #24
 8021220:	2d20      	cmp	r5, #32
 8021222:	d010      	beq.n	8021246 <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 8021224:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8021226:	2a00      	cmp	r2, #0
 8021228:	d0f8      	beq.n	802121c <etharp_tmr+0x28>
      arp_table[i].ctime++;
 802122a:	89e3      	ldrh	r3, [r4, #14]
 802122c:	3301      	adds	r3, #1
 802122e:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8021230:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8021234:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8021236:	d3e7      	bcc.n	8021208 <etharp_tmr+0x14>
        etharp_free_entry(i);
 8021238:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802123a:	3501      	adds	r5, #1
        etharp_free_entry(i);
 802123c:	f7ff fdf8 	bl	8020e30 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021240:	3418      	adds	r4, #24
 8021242:	2d20      	cmp	r5, #32
 8021244:	d1ee      	bne.n	8021224 <etharp_tmr+0x30>
}
 8021246:	b004      	add	sp, #16
 8021248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 802124c:	2304      	movs	r3, #4
 802124e:	7423      	strb	r3, [r4, #16]
 8021250:	e7e4      	b.n	802121c <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021252:	7426      	strb	r6, [r4, #16]
 8021254:	e7e2      	b.n	802121c <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8021256:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021258:	f8cd 8004 	str.w	r8, [sp, #4]
 802125c:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021260:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021262:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8021266:	9100      	str	r1, [sp, #0]
 8021268:	463a      	mov	r2, r7
 802126a:	4619      	mov	r1, r3
 802126c:	f7ff fec6 	bl	8020ffc <etharp_raw>
 8021270:	e7d4      	b.n	802121c <etharp_tmr+0x28>
 8021272:	bf00      	nop
 8021274:	2002dd0c 	.word	0x2002dd0c
 8021278:	080e21e8 	.word	0x080e21e8
 802127c:	080e21f0 	.word	0x080e21f0

08021280 <etharp_cleanup_netif>:
{
 8021280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021282:	4c0c      	ldr	r4, [pc, #48]	; (80212b4 <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021284:	2500      	movs	r5, #0
{
 8021286:	4607      	mov	r7, r0
 8021288:	f504 7640 	add.w	r6, r4, #768	; 0x300
 802128c:	e003      	b.n	8021296 <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802128e:	3418      	adds	r4, #24
 8021290:	3501      	adds	r5, #1
 8021292:	42b4      	cmp	r4, r6
 8021294:	d00c      	beq.n	80212b0 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8021296:	7d23      	ldrb	r3, [r4, #20]
 8021298:	2b00      	cmp	r3, #0
 802129a:	d0f8      	beq.n	802128e <etharp_cleanup_netif+0xe>
 802129c:	68a3      	ldr	r3, [r4, #8]
 802129e:	42bb      	cmp	r3, r7
 80212a0:	d1f5      	bne.n	802128e <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80212a2:	3418      	adds	r4, #24
      etharp_free_entry(i);
 80212a4:	4628      	mov	r0, r5
 80212a6:	f7ff fdc3 	bl	8020e30 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80212aa:	3501      	adds	r5, #1
 80212ac:	42b4      	cmp	r4, r6
 80212ae:	d1f2      	bne.n	8021296 <etharp_cleanup_netif+0x16>
}
 80212b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80212b2:	bf00      	nop
 80212b4:	2002dd08 	.word	0x2002dd08

080212b8 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80212b8:	2900      	cmp	r1, #0
 80212ba:	f000 809f 	beq.w	80213fc <etharp_input+0x144>
{
 80212be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 80212c2:	6846      	ldr	r6, [r0, #4]
{
 80212c4:	b089      	sub	sp, #36	; 0x24
 80212c6:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80212c8:	8833      	ldrh	r3, [r6, #0]
 80212ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80212ce:	d102      	bne.n	80212d6 <etharp_input+0x1e>
 80212d0:	7933      	ldrb	r3, [r6, #4]
 80212d2:	2b06      	cmp	r3, #6
 80212d4:	d00c      	beq.n	80212f0 <etharp_input+0x38>
    ETHARP_STATS_INC(etharp.proterr);
 80212d6:	4b5c      	ldr	r3, [pc, #368]	; (8021448 <etharp_input+0x190>)
    pbuf_free(p);
 80212d8:	4620      	mov	r0, r4
    ETHARP_STATS_INC(etharp.proterr);
 80212da:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80212dc:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 80212de:	3101      	adds	r1, #1
    ETHARP_STATS_INC(etharp.drop);
 80212e0:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 80212e2:	8519      	strh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80212e4:	83da      	strh	r2, [r3, #30]
}
 80212e6:	b009      	add	sp, #36	; 0x24
 80212e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 80212ec:	f7f8 be70 	b.w	8019fd0 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80212f0:	7973      	ldrb	r3, [r6, #5]
 80212f2:	2b04      	cmp	r3, #4
 80212f4:	d1ef      	bne.n	80212d6 <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80212f6:	8873      	ldrh	r3, [r6, #2]
 80212f8:	2b08      	cmp	r3, #8
 80212fa:	d1ec      	bne.n	80212d6 <etharp_input+0x1e>
  ETHARP_STATS_INC(etharp.recv);
 80212fc:	f8df b148 	ldr.w	fp, [pc, #328]	; 8021448 <etharp_input+0x190>
 8021300:	460d      	mov	r5, r1
 8021302:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 8021306:	3301      	adds	r3, #1
 8021308:	f8ab 301a 	strh.w	r3, [fp, #26]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802130c:	684b      	ldr	r3, [r1, #4]
 802130e:	f8d6 000e 	ldr.w	r0, [r6, #14]
 8021312:	69b2      	ldr	r2, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021314:	9007      	str	r0, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021316:	2b00      	cmp	r3, #0
 8021318:	d077      	beq.n	802140a <etharp_input+0x152>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 802131a:	1a9b      	subs	r3, r3, r2
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802131c:	f106 0908 	add.w	r9, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021320:	fab3 f383 	clz	r3, r3
 8021324:	095b      	lsrs	r3, r3, #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021326:	f1c3 0802 	rsb	r8, r3, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 802132a:	9305      	str	r3, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802132c:	fa5f f888 	uxtb.w	r8, r8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8021330:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8021334:	2b06      	cmp	r3, #6
 8021336:	d007      	beq.n	8021348 <etharp_input+0x90>
 8021338:	4b44      	ldr	r3, [pc, #272]	; (802144c <etharp_input+0x194>)
 802133a:	f240 12a9 	movw	r2, #425	; 0x1a9
 802133e:	4944      	ldr	r1, [pc, #272]	; (8021450 <etharp_input+0x198>)
 8021340:	4844      	ldr	r0, [pc, #272]	; (8021454 <etharp_input+0x19c>)
 8021342:	f003 f8bb 	bl	80244bc <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8021346:	9807      	ldr	r0, [sp, #28]
 8021348:	2800      	cmp	r0, #0
 802134a:	d045      	beq.n	80213d8 <etharp_input+0x120>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802134c:	4629      	mov	r1, r5
 802134e:	f000 fdeb 	bl	8021f28 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8021352:	4607      	mov	r7, r0
 8021354:	2800      	cmp	r0, #0
 8021356:	d13f      	bne.n	80213d8 <etharp_input+0x120>
      ip4_addr_ismulticast(ipaddr)) {
 8021358:	9b07      	ldr	r3, [sp, #28]
 802135a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802135e:	2be0      	cmp	r3, #224	; 0xe0
 8021360:	d03a      	beq.n	80213d8 <etharp_input+0x120>
  i = etharp_find_entry(ipaddr, flags, netif);
 8021362:	4641      	mov	r1, r8
 8021364:	462a      	mov	r2, r5
 8021366:	a807      	add	r0, sp, #28
 8021368:	f7ff fda2 	bl	8020eb0 <etharp_find_entry>
  if (i < 0) {
 802136c:	2800      	cmp	r0, #0
 802136e:	db33      	blt.n	80213d8 <etharp_input+0x120>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021370:	4a39      	ldr	r2, [pc, #228]	; (8021458 <etharp_input+0x1a0>)
 8021372:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8021376:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021378:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 802137c:	eb02 08c1 	add.w	r8, r2, r1, lsl #3
 8021380:	f888 3014 	strb.w	r3, [r8, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021384:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 8021386:	f8c8 5008 	str.w	r5, [r8, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802138a:	fb10 330c 	smlabb	r3, r0, ip, r3
 802138e:	f8d9 0000 	ldr.w	r0, [r9]
 8021392:	50d0      	str	r0, [r2, r3]
 8021394:	18d0      	adds	r0, r2, r3
 8021396:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 802139a:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 802139c:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 80213a0:	f8a8 7012 	strh.w	r7, [r8, #18]
  while (arp_table[i].q != NULL) {
 80213a4:	b1c1      	cbz	r1, 80213d8 <etharp_input+0x120>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80213a6:	f105 0a2e 	add.w	sl, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 80213aa:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 80213ac:	200b      	movs	r0, #11
    p = q->p;
 80213ae:	684f      	ldr	r7, [r1, #4]
    arp_table[i].q = q->next;
 80213b0:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_ARP_QUEUE, q);
 80213b4:	f7f8 f910 	bl	80195d8 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80213b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80213bc:	4639      	mov	r1, r7
 80213be:	4652      	mov	r2, sl
 80213c0:	9300      	str	r3, [sp, #0]
 80213c2:	4628      	mov	r0, r5
 80213c4:	464b      	mov	r3, r9
 80213c6:	f001 fb5d 	bl	8022a84 <ethernet_output>
    pbuf_free(p);
 80213ca:	4638      	mov	r0, r7
 80213cc:	f7f8 fe00 	bl	8019fd0 <pbuf_free>
  while (arp_table[i].q != NULL) {
 80213d0:	f8d8 1000 	ldr.w	r1, [r8]
 80213d4:	2900      	cmp	r1, #0
 80213d6:	d1e8      	bne.n	80213aa <etharp_input+0xf2>
  switch (hdr->opcode) {
 80213d8:	88f3      	ldrh	r3, [r6, #6]
 80213da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80213de:	d01a      	beq.n	8021416 <etharp_input+0x15e>
 80213e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80213e4:	d02a      	beq.n	802143c <etharp_input+0x184>
      ETHARP_STATS_INC(etharp.err);
 80213e6:	f8bb 302c 	ldrh.w	r3, [fp, #44]	; 0x2c
 80213ea:	3301      	adds	r3, #1
 80213ec:	f8ab 302c 	strh.w	r3, [fp, #44]	; 0x2c
  pbuf_free(p);
 80213f0:	4620      	mov	r0, r4
 80213f2:	f7f8 fded 	bl	8019fd0 <pbuf_free>
}
 80213f6:	b009      	add	sp, #36	; 0x24
 80213f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80213fc:	4b13      	ldr	r3, [pc, #76]	; (802144c <etharp_input+0x194>)
 80213fe:	f240 228a 	movw	r2, #650	; 0x28a
 8021402:	4916      	ldr	r1, [pc, #88]	; (802145c <etharp_input+0x1a4>)
 8021404:	4813      	ldr	r0, [pc, #76]	; (8021454 <etharp_input+0x19c>)
 8021406:	f003 b859 	b.w	80244bc <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802140a:	f106 0908 	add.w	r9, r6, #8
 802140e:	f04f 0802 	mov.w	r8, #2
    for_us = 0;
 8021412:	9305      	str	r3, [sp, #20]
 8021414:	e78c      	b.n	8021330 <etharp_input+0x78>
      if (for_us) {
 8021416:	9b05      	ldr	r3, [sp, #20]
 8021418:	2b00      	cmp	r3, #0
 802141a:	d0e9      	beq.n	80213f0 <etharp_input+0x138>
        etharp_raw(netif,
 802141c:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802141e:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 8021422:	464a      	mov	r2, r9
 8021424:	4628      	mov	r0, r5
 8021426:	9103      	str	r1, [sp, #12]
 8021428:	a907      	add	r1, sp, #28
 802142a:	f8cd 9004 	str.w	r9, [sp, #4]
 802142e:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8021430:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 8021432:	9100      	str	r1, [sp, #0]
 8021434:	4619      	mov	r1, r3
 8021436:	f7ff fde1 	bl	8020ffc <etharp_raw>
 802143a:	e7d9      	b.n	80213f0 <etharp_input+0x138>
      dhcp_arp_reply(netif, &sipaddr);
 802143c:	a907      	add	r1, sp, #28
 802143e:	4628      	mov	r0, r5
 8021440:	f7ff f92c 	bl	802069c <dhcp_arp_reply>
      break;
 8021444:	e7d4      	b.n	80213f0 <etharp_input+0x138>
 8021446:	bf00      	nop
 8021448:	2002db54 	.word	0x2002db54
 802144c:	080e1cb8 	.word	0x080e1cb8
 8021450:	080e1e0c 	.word	0x080e1e0c
 8021454:	0802ac68 	.word	0x0802ac68
 8021458:	2002dd08 	.word	0x2002dd08
 802145c:	0802b2e8 	.word	0x0802b2e8

08021460 <etharp_query>:
{
 8021460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021464:	460e      	mov	r6, r1
 8021466:	b085      	sub	sp, #20
 8021468:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802146a:	4601      	mov	r1, r0
 802146c:	6830      	ldr	r0, [r6, #0]
{
 802146e:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8021470:	f000 fd5a 	bl	8021f28 <ip4_addr_isbroadcast_u32>
 8021474:	2800      	cmp	r0, #0
 8021476:	f040 80d8 	bne.w	802162a <etharp_query+0x1ca>
      ip4_addr_ismulticast(ipaddr) ||
 802147a:	6833      	ldr	r3, [r6, #0]
 802147c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8021480:	2ae0      	cmp	r2, #224	; 0xe0
 8021482:	f000 80d2 	beq.w	802162a <etharp_query+0x1ca>
 8021486:	2b00      	cmp	r3, #0
 8021488:	f000 80cf 	beq.w	802162a <etharp_query+0x1ca>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802148c:	462a      	mov	r2, r5
 802148e:	2101      	movs	r1, #1
 8021490:	4630      	mov	r0, r6
 8021492:	f7ff fd0d 	bl	8020eb0 <etharp_find_entry>
  if (i_err < 0) {
 8021496:	f1b0 0800 	subs.w	r8, r0, #0
 802149a:	db54      	blt.n	8021546 <etharp_query+0xe6>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802149c:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 80214a0:	dc49      	bgt.n	8021536 <etharp_query+0xd6>
  i = (netif_addr_idx_t)i_err;
 80214a2:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80214a6:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 802166c <etharp_query+0x20c>
 80214aa:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80214ae:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80214b2:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 80214b6:	7d1a      	ldrb	r2, [r3, #20]
 80214b8:	b18a      	cbz	r2, 80214de <etharp_query+0x7e>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80214ba:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 80214be:	2f00      	cmp	r7, #0
 80214c0:	f000 80a5 	beq.w	802160e <etharp_query+0x1ae>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80214c4:	eb0a 0208 	add.w	r2, sl, r8
  err_t result = ERR_MEM;
 80214c8:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80214cc:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 80214d0:	7d13      	ldrb	r3, [r2, #20]
 80214d2:	2b01      	cmp	r3, #1
 80214d4:	d81d      	bhi.n	8021512 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80214d6:	d040      	beq.n	802155a <etharp_query+0xfa>
}
 80214d8:	b005      	add	sp, #20
 80214da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 80214de:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80214e0:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 80214e2:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80214e4:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 80214e8:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80214ea:	4628      	mov	r0, r5
 80214ec:	4b58      	ldr	r3, [pc, #352]	; (8021650 <etharp_query+0x1f0>)
 80214ee:	4659      	mov	r1, fp
 80214f0:	9203      	str	r2, [sp, #12]
 80214f2:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80214f4:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80214f6:	4a57      	ldr	r2, [pc, #348]	; (8021654 <etharp_query+0x1f4>)
 80214f8:	9300      	str	r3, [sp, #0]
 80214fa:	465b      	mov	r3, fp
 80214fc:	f7ff fd7e 	bl	8020ffc <etharp_raw>
    if (q == NULL) {
 8021500:	2f00      	cmp	r7, #0
 8021502:	d0e9      	beq.n	80214d8 <etharp_query+0x78>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021504:	eb0a 0208 	add.w	r2, sl, r8
 8021508:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 802150c:	7d13      	ldrb	r3, [r2, #20]
 802150e:	2b01      	cmp	r3, #1
 8021510:	d9e1      	bls.n	80214d6 <etharp_query+0x76>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021512:	2318      	movs	r3, #24
 8021514:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8021518:	465a      	mov	r2, fp
 802151a:	4639      	mov	r1, r7
 802151c:	fb03 9308 	mla	r3, r3, r8, r9
 8021520:	4628      	mov	r0, r5
 8021522:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 8021524:	4c4c      	ldr	r4, [pc, #304]	; (8021658 <etharp_query+0x1f8>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021526:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 8021528:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802152c:	f001 faaa 	bl	8022a84 <ethernet_output>
}
 8021530:	b005      	add	sp, #20
 8021532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8021536:	4b49      	ldr	r3, [pc, #292]	; (802165c <etharp_query+0x1fc>)
 8021538:	f240 32c1 	movw	r2, #961	; 0x3c1
 802153c:	4948      	ldr	r1, [pc, #288]	; (8021660 <etharp_query+0x200>)
 802153e:	4849      	ldr	r0, [pc, #292]	; (8021664 <etharp_query+0x204>)
 8021540:	f002 ffbc 	bl	80244bc <iprintf>
 8021544:	e7ad      	b.n	80214a2 <etharp_query+0x42>
    if (q) {
 8021546:	b11f      	cbz	r7, 8021550 <etharp_query+0xf0>
      ETHARP_STATS_INC(etharp.memerr);
 8021548:	4a47      	ldr	r2, [pc, #284]	; (8021668 <etharp_query+0x208>)
 802154a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 802154c:	3301      	adds	r3, #1
 802154e:	8493      	strh	r3, [r2, #36]	; 0x24
    return (err_t)i_err;
 8021550:	fa4f f088 	sxtb.w	r0, r8
}
 8021554:	b005      	add	sp, #20
 8021556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802155a:	463c      	mov	r4, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802155c:	4d3f      	ldr	r5, [pc, #252]	; (802165c <etharp_query+0x1fc>)
 802155e:	f8df b110 	ldr.w	fp, [pc, #272]	; 8021670 <etharp_query+0x210>
 8021562:	4e40      	ldr	r6, [pc, #256]	; (8021664 <etharp_query+0x204>)
 8021564:	e005      	b.n	8021572 <etharp_query+0x112>
      if (PBUF_NEEDS_COPY(p)) {
 8021566:	7b23      	ldrb	r3, [r4, #12]
 8021568:	065a      	lsls	r2, r3, #25
 802156a:	d413      	bmi.n	8021594 <etharp_query+0x134>
      p = p->next;
 802156c:	6824      	ldr	r4, [r4, #0]
    while (p) {
 802156e:	2c00      	cmp	r4, #0
 8021570:	d038      	beq.n	80215e4 <etharp_query+0x184>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8021572:	8962      	ldrh	r2, [r4, #10]
 8021574:	8923      	ldrh	r3, [r4, #8]
 8021576:	429a      	cmp	r2, r3
 8021578:	d1f5      	bne.n	8021566 <etharp_query+0x106>
 802157a:	6822      	ldr	r2, [r4, #0]
 802157c:	462b      	mov	r3, r5
 802157e:	b132      	cbz	r2, 802158e <etharp_query+0x12e>
 8021580:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8021584:	4659      	mov	r1, fp
 8021586:	4630      	mov	r0, r6
 8021588:	f002 ff98 	bl	80244bc <iprintf>
 802158c:	e7eb      	b.n	8021566 <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 802158e:	7b23      	ldrb	r3, [r4, #12]
 8021590:	065b      	lsls	r3, r3, #25
 8021592:	d527      	bpl.n	80215e4 <etharp_query+0x184>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8021594:	463a      	mov	r2, r7
 8021596:	f44f 7120 	mov.w	r1, #640	; 0x280
 802159a:	200e      	movs	r0, #14
 802159c:	f7f8 feaa 	bl	801a2f4 <pbuf_clone>
    if (p != NULL) {
 80215a0:	4607      	mov	r7, r0
 80215a2:	2800      	cmp	r0, #0
 80215a4:	d047      	beq.n	8021636 <etharp_query+0x1d6>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 80215a6:	f240 4206 	movw	r2, #1030	; 0x406
 80215aa:	492c      	ldr	r1, [pc, #176]	; (802165c <etharp_query+0x1fc>)
 80215ac:	200b      	movs	r0, #11
 80215ae:	f7f7 ffcf 	bl	8019550 <memp_malloc_fn>
      if (new_entry != NULL) {
 80215b2:	4602      	mov	r2, r0
 80215b4:	2800      	cmp	r0, #0
 80215b6:	d045      	beq.n	8021644 <etharp_query+0x1e4>
        if (arp_table[i].q != NULL) {
 80215b8:	eb0a 0308 	add.w	r3, sl, r8
        new_entry->next = 0;
 80215bc:	2100      	movs	r1, #0
        new_entry->p = p;
 80215be:	6047      	str	r7, [r0, #4]
        if (arp_table[i].q != NULL) {
 80215c0:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 80215c2:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 80215c4:	f859 5003 	ldr.w	r5, [r9, r3]
 80215c8:	b1ed      	cbz	r5, 8021606 <etharp_query+0x1a6>
          while (r->next != NULL) {
 80215ca:	682c      	ldr	r4, [r5, #0]
 80215cc:	b384      	cbz	r4, 8021630 <etharp_query+0x1d0>
          qlen++;
 80215ce:	2301      	movs	r3, #1
            qlen++;
 80215d0:	4620      	mov	r0, r4
          while (r->next != NULL) {
 80215d2:	6824      	ldr	r4, [r4, #0]
            qlen++;
 80215d4:	3301      	adds	r3, #1
          while (r->next != NULL) {
 80215d6:	2c00      	cmp	r4, #0
 80215d8:	d1fa      	bne.n	80215d0 <etharp_query+0x170>
        if (qlen >= ARP_QUEUE_LEN) {
 80215da:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 80215dc:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 80215de:	d805      	bhi.n	80215ec <etharp_query+0x18c>
        result = ERR_OK;
 80215e0:	4620      	mov	r0, r4
 80215e2:	e779      	b.n	80214d8 <etharp_query+0x78>
      pbuf_ref(p);
 80215e4:	4638      	mov	r0, r7
 80215e6:	f7f8 fd11 	bl	801a00c <pbuf_ref>
    if (p != NULL) {
 80215ea:	e7dc      	b.n	80215a6 <etharp_query+0x146>
          arp_table[i].q = arp_table[i].q->next;
 80215ec:	682b      	ldr	r3, [r5, #0]
 80215ee:	44d0      	add	r8, sl
          pbuf_free(old->p);
 80215f0:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 80215f2:	f849 3038 	str.w	r3, [r9, r8, lsl #3]
          pbuf_free(old->p);
 80215f6:	f7f8 fceb 	bl	8019fd0 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 80215fa:	200b      	movs	r0, #11
 80215fc:	4629      	mov	r1, r5
 80215fe:	f7f7 ffeb 	bl	80195d8 <memp_free>
        result = ERR_OK;
 8021602:	4620      	mov	r0, r4
 8021604:	e768      	b.n	80214d8 <etharp_query+0x78>
 8021606:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 8021608:	f849 2003 	str.w	r2, [r9, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 802160c:	e764      	b.n	80214d8 <etharp_query+0x78>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802160e:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021610:	2301      	movs	r3, #1
 8021612:	4c0f      	ldr	r4, [pc, #60]	; (8021650 <etharp_query+0x1f0>)
 8021614:	4659      	mov	r1, fp
 8021616:	4628      	mov	r0, r5
 8021618:	e9cd 6302 	strd	r6, r3, [sp, #8]
 802161c:	e9cd 2400 	strd	r2, r4, [sp]
 8021620:	465b      	mov	r3, fp
 8021622:	4a0c      	ldr	r2, [pc, #48]	; (8021654 <etharp_query+0x1f4>)
 8021624:	f7ff fcea 	bl	8020ffc <etharp_raw>
    if (q == NULL) {
 8021628:	e756      	b.n	80214d8 <etharp_query+0x78>
    return ERR_ARG;
 802162a:	f06f 000f 	mvn.w	r0, #15
 802162e:	e753      	b.n	80214d8 <etharp_query+0x78>
        result = ERR_OK;
 8021630:	4620      	mov	r0, r4
          r->next = new_entry;
 8021632:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 8021634:	e750      	b.n	80214d8 <etharp_query+0x78>
      ETHARP_STATS_INC(etharp.memerr);
 8021636:	4a0c      	ldr	r2, [pc, #48]	; (8021668 <etharp_query+0x208>)
      result = ERR_MEM;
 8021638:	f04f 30ff 	mov.w	r0, #4294967295
      ETHARP_STATS_INC(etharp.memerr);
 802163c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 802163e:	3301      	adds	r3, #1
 8021640:	8493      	strh	r3, [r2, #36]	; 0x24
      result = ERR_MEM;
 8021642:	e749      	b.n	80214d8 <etharp_query+0x78>
        pbuf_free(p);
 8021644:	4638      	mov	r0, r7
 8021646:	f7f8 fcc3 	bl	8019fd0 <pbuf_free>
        result = ERR_MEM;
 802164a:	f04f 30ff 	mov.w	r0, #4294967295
 802164e:	e743      	b.n	80214d8 <etharp_query+0x78>
 8021650:	080e21f0 	.word	0x080e21f0
 8021654:	080e21e8 	.word	0x080e21e8
 8021658:	2002e008 	.word	0x2002e008
 802165c:	080e1cb8 	.word	0x080e1cb8
 8021660:	080e1e30 	.word	0x080e1e30
 8021664:	0802ac68 	.word	0x0802ac68
 8021668:	2002db54 	.word	0x2002db54
 802166c:	2002dd08 	.word	0x2002dd08
 8021670:	080e1e40 	.word	0x080e1e40

08021674 <etharp_output>:
{
 8021674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021678:	460f      	mov	r7, r1
 802167a:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802167c:	4605      	mov	r5, r0
{
 802167e:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021680:	2800      	cmp	r0, #0
 8021682:	f000 8086 	beq.w	8021792 <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8021686:	2f00      	cmp	r7, #0
 8021688:	d072      	beq.n	8021770 <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 802168a:	2e00      	cmp	r6, #0
 802168c:	d079      	beq.n	8021782 <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 802168e:	4629      	mov	r1, r5
 8021690:	6830      	ldr	r0, [r6, #0]
 8021692:	f000 fc49 	bl	8021f28 <ip4_addr_isbroadcast_u32>
 8021696:	2800      	cmp	r0, #0
 8021698:	d160      	bne.n	802175c <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 802169a:	6833      	ldr	r3, [r6, #0]
 802169c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80216a0:	2ae0      	cmp	r2, #224	; 0xe0
 80216a2:	d03b      	beq.n	802171c <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80216a4:	686a      	ldr	r2, [r5, #4]
 80216a6:	68a9      	ldr	r1, [r5, #8]
 80216a8:	405a      	eors	r2, r3
 80216aa:	420a      	tst	r2, r1
 80216ac:	d009      	beq.n	80216c2 <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 80216ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80216b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80216b4:	4293      	cmp	r3, r2
 80216b6:	d004      	beq.n	80216c2 <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80216b8:	68eb      	ldr	r3, [r5, #12]
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	d07f      	beq.n	80217be <etharp_output+0x14a>
            dst_addr = netif_ip4_gw(netif);
 80216be:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80216c2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80217e4 <etharp_output+0x170>
 80216c6:	4b3f      	ldr	r3, [pc, #252]	; (80217c4 <etharp_output+0x150>)
 80216c8:	f898 2000 	ldrb.w	r2, [r8]
 80216cc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80216d0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80216d4:	7d19      	ldrb	r1, [r3, #20]
 80216d6:	2901      	cmp	r1, #1
 80216d8:	d902      	bls.n	80216e0 <etharp_output+0x6c>
 80216da:	6899      	ldr	r1, [r3, #8]
 80216dc:	42a9      	cmp	r1, r5
 80216de:	d063      	beq.n	80217a8 <etharp_output+0x134>
 80216e0:	4c38      	ldr	r4, [pc, #224]	; (80217c4 <etharp_output+0x150>)
{
 80216e2:	2300      	movs	r3, #0
 80216e4:	e003      	b.n	80216ee <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80216e6:	2b20      	cmp	r3, #32
 80216e8:	f104 0418 	add.w	r4, r4, #24
 80216ec:	d038      	beq.n	8021760 <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80216ee:	f894 c014 	ldrb.w	ip, [r4, #20]
 80216f2:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80216f4:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80216f6:	f1bc 0f01 	cmp.w	ip, #1
 80216fa:	d9f4      	bls.n	80216e6 <etharp_output+0x72>
 80216fc:	68a0      	ldr	r0, [r4, #8]
 80216fe:	42a8      	cmp	r0, r5
 8021700:	d1f1      	bne.n	80216e6 <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 8021702:	6860      	ldr	r0, [r4, #4]
 8021704:	6831      	ldr	r1, [r6, #0]
 8021706:	4281      	cmp	r1, r0
 8021708:	d1ed      	bne.n	80216e6 <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 802170a:	4639      	mov	r1, r7
 802170c:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 802170e:	f888 2000 	strb.w	r2, [r8]
}
 8021712:	b004      	add	sp, #16
 8021714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8021718:	f7ff bcee 	b.w	80210f8 <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802171c:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 802171e:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8021720:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8021722:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8021726:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802172a:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802172c:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802172e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8021732:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8021736:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 802173a:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802173c:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8021740:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8021744:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8021748:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 802174c:	4639      	mov	r1, r7
 802174e:	4628      	mov	r0, r5
 8021750:	9400      	str	r4, [sp, #0]
 8021752:	f001 f997 	bl	8022a84 <ethernet_output>
}
 8021756:	b004      	add	sp, #16
 8021758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 802175c:	4b1a      	ldr	r3, [pc, #104]	; (80217c8 <etharp_output+0x154>)
 802175e:	e7f1      	b.n	8021744 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 8021760:	463a      	mov	r2, r7
 8021762:	4631      	mov	r1, r6
 8021764:	4628      	mov	r0, r5
}
 8021766:	b004      	add	sp, #16
 8021768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 802176c:	f7ff be78 	b.w	8021460 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 8021770:	4b16      	ldr	r3, [pc, #88]	; (80217cc <etharp_output+0x158>)
 8021772:	f240 321f 	movw	r2, #799	; 0x31f
 8021776:	4916      	ldr	r1, [pc, #88]	; (80217d0 <etharp_output+0x15c>)
 8021778:	4816      	ldr	r0, [pc, #88]	; (80217d4 <etharp_output+0x160>)
 802177a:	f002 fe9f 	bl	80244bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 802177e:	2e00      	cmp	r6, #0
 8021780:	d185      	bne.n	802168e <etharp_output+0x1a>
 8021782:	4b12      	ldr	r3, [pc, #72]	; (80217cc <etharp_output+0x158>)
 8021784:	f44f 7248 	mov.w	r2, #800	; 0x320
 8021788:	4913      	ldr	r1, [pc, #76]	; (80217d8 <etharp_output+0x164>)
 802178a:	4812      	ldr	r0, [pc, #72]	; (80217d4 <etharp_output+0x160>)
 802178c:	f002 fe96 	bl	80244bc <iprintf>
 8021790:	e77d      	b.n	802168e <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021792:	4b0e      	ldr	r3, [pc, #56]	; (80217cc <etharp_output+0x158>)
 8021794:	f240 321e 	movw	r2, #798	; 0x31e
 8021798:	4910      	ldr	r1, [pc, #64]	; (80217dc <etharp_output+0x168>)
 802179a:	480e      	ldr	r0, [pc, #56]	; (80217d4 <etharp_output+0x160>)
 802179c:	f002 fe8e 	bl	80244bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80217a0:	2f00      	cmp	r7, #0
 80217a2:	f47f af72 	bne.w	802168a <etharp_output+0x16>
 80217a6:	e7e3      	b.n	8021770 <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 80217a8:	685b      	ldr	r3, [r3, #4]
 80217aa:	6831      	ldr	r1, [r6, #0]
 80217ac:	4299      	cmp	r1, r3
 80217ae:	d197      	bne.n	80216e0 <etharp_output+0x6c>
          ETHARP_STATS_INC(etharp.cachehit);
 80217b0:	4c0b      	ldr	r4, [pc, #44]	; (80217e0 <etharp_output+0x16c>)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80217b2:	4639      	mov	r1, r7
 80217b4:	4628      	mov	r0, r5
          ETHARP_STATS_INC(etharp.cachehit);
 80217b6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80217b8:	3301      	adds	r3, #1
 80217ba:	85e3      	strh	r3, [r4, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80217bc:	e7a9      	b.n	8021712 <etharp_output+0x9e>
            return ERR_RTE;
 80217be:	f06f 0003 	mvn.w	r0, #3
 80217c2:	e7c8      	b.n	8021756 <etharp_output+0xe2>
 80217c4:	2002dd08 	.word	0x2002dd08
 80217c8:	080e21e8 	.word	0x080e21e8
 80217cc:	080e1cb8 	.word	0x080e1cb8
 80217d0:	080e1e5c 	.word	0x080e1e5c
 80217d4:	0802ac68 	.word	0x0802ac68
 80217d8:	080e1dec 	.word	0x080e1dec
 80217dc:	0802b2e8 	.word	0x0802b2e8
 80217e0:	2002db54 	.word	0x2002db54
 80217e4:	2002e008 	.word	0x2002e008

080217e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80217e8:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80217ea:	2301      	movs	r3, #1
{
 80217ec:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80217ee:	4c07      	ldr	r4, [pc, #28]	; (802180c <etharp_request+0x24>)
 80217f0:	4a07      	ldr	r2, [pc, #28]	; (8021810 <etharp_request+0x28>)
 80217f2:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80217f4:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80217f6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80217fa:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 80217fe:	9400      	str	r4, [sp, #0]
 8021800:	4619      	mov	r1, r3
 8021802:	f7ff fbfb 	bl	8020ffc <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8021806:	b004      	add	sp, #16
 8021808:	bd10      	pop	{r4, pc}
 802180a:	bf00      	nop
 802180c:	080e21f0 	.word	0x080e21f0
 8021810:	080e21e8 	.word	0x080e21e8

08021814 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8021814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021816:	460e      	mov	r6, r1
 8021818:	b087      	sub	sp, #28
 802181a:	4617      	mov	r7, r2
 802181c:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 802181e:	2124      	movs	r1, #36	; 0x24
 8021820:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021824:	2022      	movs	r0, #34	; 0x22
 8021826:	f7f8 fa1d 	bl	8019c64 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 802182a:	2800      	cmp	r0, #0
 802182c:	d03b      	beq.n	80218a6 <icmp_send_response+0x92>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 802182e:	8943      	ldrh	r3, [r0, #10]
 8021830:	4605      	mov	r5, r0
 8021832:	2b23      	cmp	r3, #35	; 0x23
 8021834:	d939      	bls.n	80218aa <icmp_send_response+0x96>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8021836:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8021838:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 802183a:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 802183c:	2600      	movs	r6, #0
  icmphdr->code = code;
 802183e:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8021840:	7126      	strb	r6, [r4, #4]
 8021842:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 8021844:	71a6      	strb	r6, [r4, #6]
 8021846:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8021848:	6818      	ldr	r0, [r3, #0]
 802184a:	6859      	ldr	r1, [r3, #4]
 802184c:	689a      	ldr	r2, [r3, #8]
 802184e:	68df      	ldr	r7, [r3, #12]
 8021850:	60a0      	str	r0, [r4, #8]
 8021852:	6167      	str	r7, [r4, #20]
 8021854:	60e1      	str	r1, [r4, #12]
 8021856:	6122      	str	r2, [r4, #16]
 8021858:	6918      	ldr	r0, [r3, #16]
 802185a:	6959      	ldr	r1, [r3, #20]
 802185c:	699a      	ldr	r2, [r3, #24]
 802185e:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8021860:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8021862:	61e1      	str	r1, [r4, #28]
 8021864:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8021866:	68db      	ldr	r3, [r3, #12]
 8021868:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 802186a:	f000 f92b 	bl	8021ac4 <ip4_route>
#endif
  if (netif != NULL) {
 802186e:	4607      	mov	r7, r0
 8021870:	b1b0      	cbz	r0, 80218a0 <icmp_send_response+0x8c>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8021872:	8969      	ldrh	r1, [r5, #10]
 8021874:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8021876:	70a6      	strb	r6, [r4, #2]
 8021878:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 802187a:	f7f7 f8cd 	bl	8018a18 <inet_chksum>
 802187e:	8060      	strh	r0, [r4, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8021880:	480e      	ldr	r0, [pc, #56]	; (80218bc <icmp_send_response+0xa8>)
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8021882:	aa05      	add	r2, sp, #20
 8021884:	9702      	str	r7, [sp, #8]
 8021886:	4631      	mov	r1, r6
 8021888:	9600      	str	r6, [sp, #0]
    ICMP_STATS_INC(icmp.xmit);
 802188a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 802188e:	3301      	adds	r3, #1
 8021890:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8021894:	2001      	movs	r0, #1
 8021896:	23ff      	movs	r3, #255	; 0xff
 8021898:	9001      	str	r0, [sp, #4]
 802189a:	4628      	mov	r0, r5
 802189c:	f000 fb32 	bl	8021f04 <ip4_output_if>
  }
  pbuf_free(q);
 80218a0:	4628      	mov	r0, r5
 80218a2:	f7f8 fb95 	bl	8019fd0 <pbuf_free>
}
 80218a6:	b007      	add	sp, #28
 80218a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80218aa:	4b05      	ldr	r3, [pc, #20]	; (80218c0 <icmp_send_response+0xac>)
 80218ac:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80218b0:	4904      	ldr	r1, [pc, #16]	; (80218c4 <icmp_send_response+0xb0>)
 80218b2:	4805      	ldr	r0, [pc, #20]	; (80218c8 <icmp_send_response+0xb4>)
 80218b4:	f002 fe02 	bl	80244bc <iprintf>
 80218b8:	e7bd      	b.n	8021836 <icmp_send_response+0x22>
 80218ba:	bf00      	nop
 80218bc:	2002db54 	.word	0x2002db54
 80218c0:	080e1e68 	.word	0x080e1e68
 80218c4:	080e1ea0 	.word	0x080e1ea0
 80218c8:	0802ac68 	.word	0x0802ac68

080218cc <icmp_input>:
{
 80218cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ICMP_STATS_INC(icmp.recv);
 80218d0:	4e71      	ldr	r6, [pc, #452]	; (8021a98 <icmp_input+0x1cc>)
{
 80218d2:	b087      	sub	sp, #28
  iphdr_in = ip4_current_header();
 80218d4:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8021ab0 <icmp_input+0x1e4>
{
 80218d8:	4605      	mov	r5, r0
  ICMP_STATS_INC(icmp.recv);
 80218da:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
  iphdr_in = ip4_current_header();
 80218de:	f8d8 9008 	ldr.w	r9, [r8, #8]
  ICMP_STATS_INC(icmp.recv);
 80218e2:	3301      	adds	r3, #1
 80218e4:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
  hlen = IPH_HL_BYTES(iphdr_in);
 80218e8:	f899 4000 	ldrb.w	r4, [r9]
 80218ec:	f004 040f 	and.w	r4, r4, #15
 80218f0:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 80218f2:	2c13      	cmp	r4, #19
 80218f4:	d916      	bls.n	8021924 <icmp_input+0x58>
  if (p->len < sizeof(u16_t) * 2) {
 80218f6:	8943      	ldrh	r3, [r0, #10]
 80218f8:	2b03      	cmp	r3, #3
 80218fa:	d913      	bls.n	8021924 <icmp_input+0x58>
  type = *((u8_t *)p->payload);
 80218fc:	6843      	ldr	r3, [r0, #4]
 80218fe:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8021900:	b32b      	cbz	r3, 802194e <icmp_input+0x82>
 8021902:	2b08      	cmp	r3, #8
 8021904:	d119      	bne.n	802193a <icmp_input+0x6e>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021906:	f8d8 0014 	ldr.w	r0, [r8, #20]
 802190a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 802190e:	2be0      	cmp	r3, #224	; 0xe0
 8021910:	d026      	beq.n	8021960 <icmp_input+0x94>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8021912:	460f      	mov	r7, r1
 8021914:	f8d8 1000 	ldr.w	r1, [r8]
 8021918:	f000 fb06 	bl	8021f28 <ip4_addr_isbroadcast_u32>
 802191c:	bb00      	cbnz	r0, 8021960 <icmp_input+0x94>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 802191e:	892b      	ldrh	r3, [r5, #8]
 8021920:	2b07      	cmp	r3, #7
 8021922:	d826      	bhi.n	8021972 <icmp_input+0xa6>
  pbuf_free(p);
 8021924:	4628      	mov	r0, r5
 8021926:	f7f8 fb53 	bl	8019fd0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 802192a:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
 802192e:	3301      	adds	r3, #1
 8021930:	f8a6 306a 	strh.w	r3, [r6, #106]	; 0x6a
}
 8021934:	b007      	add	sp, #28
 8021936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ICMP_STATS_INC(icmp.proterr);
 802193a:	f8b6 2070 	ldrh.w	r2, [r6, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 802193e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
      ICMP_STATS_INC(icmp.proterr);
 8021942:	3201      	adds	r2, #1
      ICMP_STATS_INC(icmp.drop);
 8021944:	3301      	adds	r3, #1
      ICMP_STATS_INC(icmp.proterr);
 8021946:	f8a6 2070 	strh.w	r2, [r6, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 802194a:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
  pbuf_free(p);
 802194e:	4628      	mov	r0, r5
}
 8021950:	b007      	add	sp, #28
 8021952:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8021956:	f7f8 bb3b 	b.w	8019fd0 <pbuf_free>
          pbuf_free(r);
 802195a:	4658      	mov	r0, fp
 802195c:	f7f8 fb38 	bl	8019fd0 <pbuf_free>
  pbuf_free(p);
 8021960:	4628      	mov	r0, r5
 8021962:	f7f8 fb35 	bl	8019fd0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8021966:	f8b6 3074 	ldrh.w	r3, [r6, #116]	; 0x74
 802196a:	3301      	adds	r3, #1
 802196c:	f8a6 3074 	strh.w	r3, [r6, #116]	; 0x74
  return;
 8021970:	e7e0      	b.n	8021934 <icmp_input+0x68>
        if (inet_chksum_pbuf(p) != 0) {
 8021972:	4628      	mov	r0, r5
 8021974:	f7f7 f856 	bl	8018a24 <inet_chksum_pbuf>
 8021978:	2800      	cmp	r0, #0
 802197a:	d16e      	bne.n	8021a5a <icmp_input+0x18e>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802197c:	f104 010e 	add.w	r1, r4, #14
 8021980:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 8021982:	fa1f fa84 	uxth.w	sl, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8021986:	9105      	str	r1, [sp, #20]
 8021988:	f7f8 fa7e 	bl	8019e88 <pbuf_add_header>
 802198c:	9905      	ldr	r1, [sp, #20]
 802198e:	2800      	cmp	r0, #0
 8021990:	d06c      	beq.n	8021a6c <icmp_input+0x1a0>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8021992:	892b      	ldrh	r3, [r5, #8]
 8021994:	eb03 010a 	add.w	r1, r3, sl
 8021998:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 802199a:	428b      	cmp	r3, r1
 802199c:	d8e0      	bhi.n	8021960 <icmp_input+0x94>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 802199e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80219a2:	200e      	movs	r0, #14
 80219a4:	f7f8 f95e 	bl	8019c64 <pbuf_alloc>
        if (r == NULL) {
 80219a8:	4683      	mov	fp, r0
 80219aa:	2800      	cmp	r0, #0
 80219ac:	d0d8      	beq.n	8021960 <icmp_input+0x94>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80219ae:	8942      	ldrh	r2, [r0, #10]
 80219b0:	f104 0308 	add.w	r3, r4, #8
 80219b4:	429a      	cmp	r2, r3
 80219b6:	d3d1      	bcc.n	802195c <icmp_input+0x90>
        MEMCPY(r->payload, iphdr_in, hlen);
 80219b8:	4649      	mov	r1, r9
 80219ba:	4622      	mov	r2, r4
 80219bc:	6840      	ldr	r0, [r0, #4]
 80219be:	f001 fdb9 	bl	8023534 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80219c2:	4621      	mov	r1, r4
 80219c4:	4658      	mov	r0, fp
 80219c6:	f7f8 fa93 	bl	8019ef0 <pbuf_remove_header>
 80219ca:	2800      	cmp	r0, #0
 80219cc:	d15a      	bne.n	8021a84 <icmp_input+0x1b8>
        if (pbuf_copy(r, p) != ERR_OK) {
 80219ce:	4629      	mov	r1, r5
 80219d0:	4658      	mov	r0, fp
 80219d2:	f7f8 fb85 	bl	801a0e0 <pbuf_copy>
 80219d6:	2800      	cmp	r0, #0
 80219d8:	d1bf      	bne.n	802195a <icmp_input+0x8e>
        pbuf_free(p);
 80219da:	4628      	mov	r0, r5
 80219dc:	465d      	mov	r5, fp
 80219de:	f7f8 faf7 	bl	8019fd0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 80219e2:	4621      	mov	r1, r4
 80219e4:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 80219e6:	f8d5 9004 	ldr.w	r9, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 80219ea:	f7f8 fa4d 	bl	8019e88 <pbuf_add_header>
 80219ee:	2800      	cmp	r0, #0
 80219f0:	d1ad      	bne.n	802194e <icmp_input+0x82>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80219f2:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80219f4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 80219f8:	f8d8 3014 	ldr.w	r3, [r8, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80219fc:	4651      	mov	r1, sl
        ip4_addr_copy(iphdr->src, *src);
 80219fe:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8021a00:	f8d8 3010 	ldr.w	r3, [r8, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 8021a04:	f04f 0800 	mov.w	r8, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8021a08:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8021a0a:	f8b9 3002 	ldrh.w	r3, [r9, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8021a0e:	f889 0000 	strb.w	r0, [r9]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8021a12:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8021a14:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8021a16:	bf8c      	ite	hi
 8021a18:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8021a1a:	3308      	addls	r3, #8
 8021a1c:	b29b      	uxth	r3, r3
 8021a1e:	f8a9 3002 	strh.w	r3, [r9, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8021a22:	f04f 09ff 	mov.w	r9, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8021a26:	f884 800a 	strb.w	r8, [r4, #10]
 8021a2a:	f884 800b 	strb.w	r8, [r4, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8021a2e:	f884 9008 	strb.w	r9, [r4, #8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8021a32:	f7f6 fff1 	bl	8018a18 <inet_chksum>
 8021a36:	8160      	strh	r0, [r4, #10]
        ICMP_STATS_INC(icmp.xmit);
 8021a38:	f8b6 0060 	ldrh.w	r0, [r6, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8021a3c:	2101      	movs	r1, #1
 8021a3e:	464b      	mov	r3, r9
 8021a40:	4642      	mov	r2, r8
        ICMP_STATS_INC(icmp.xmit);
 8021a42:	3001      	adds	r0, #1
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8021a44:	9101      	str	r1, [sp, #4]
 8021a46:	9702      	str	r7, [sp, #8]
        ICMP_STATS_INC(icmp.xmit);
 8021a48:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8021a4c:	4628      	mov	r0, r5
 8021a4e:	4913      	ldr	r1, [pc, #76]	; (8021a9c <icmp_input+0x1d0>)
 8021a50:	f8cd 8000 	str.w	r8, [sp]
 8021a54:	f000 fa56 	bl	8021f04 <ip4_output_if>
        if (ret != ERR_OK) {
 8021a58:	e779      	b.n	802194e <icmp_input+0x82>
          pbuf_free(p);
 8021a5a:	4628      	mov	r0, r5
 8021a5c:	f7f8 fab8 	bl	8019fd0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 8021a60:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
 8021a64:	3301      	adds	r3, #1
 8021a66:	f8a6 3068 	strh.w	r3, [r6, #104]	; 0x68
          return;
 8021a6a:	e763      	b.n	8021934 <icmp_input+0x68>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8021a6c:	4628      	mov	r0, r5
 8021a6e:	f7f8 fa3f 	bl	8019ef0 <pbuf_remove_header>
 8021a72:	2800      	cmp	r0, #0
 8021a74:	d0b5      	beq.n	80219e2 <icmp_input+0x116>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8021a76:	4b0a      	ldr	r3, [pc, #40]	; (8021aa0 <icmp_input+0x1d4>)
 8021a78:	22c7      	movs	r2, #199	; 0xc7
 8021a7a:	490a      	ldr	r1, [pc, #40]	; (8021aa4 <icmp_input+0x1d8>)
 8021a7c:	480a      	ldr	r0, [pc, #40]	; (8021aa8 <icmp_input+0x1dc>)
 8021a7e:	f002 fd1d 	bl	80244bc <iprintf>
          goto icmperr;
 8021a82:	e76d      	b.n	8021960 <icmp_input+0x94>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8021a84:	4b06      	ldr	r3, [pc, #24]	; (8021aa0 <icmp_input+0x1d4>)
 8021a86:	22b6      	movs	r2, #182	; 0xb6
 8021a88:	4908      	ldr	r1, [pc, #32]	; (8021aac <icmp_input+0x1e0>)
 8021a8a:	4807      	ldr	r0, [pc, #28]	; (8021aa8 <icmp_input+0x1dc>)
 8021a8c:	f002 fd16 	bl	80244bc <iprintf>
          pbuf_free(r);
 8021a90:	4658      	mov	r0, fp
 8021a92:	f7f8 fa9d 	bl	8019fd0 <pbuf_free>
          goto icmperr;
 8021a96:	e763      	b.n	8021960 <icmp_input+0x94>
 8021a98:	2002db54 	.word	0x2002db54
 8021a9c:	2001eb28 	.word	0x2001eb28
 8021aa0:	080e1e68 	.word	0x080e1e68
 8021aa4:	080e1f04 	.word	0x080e1f04
 8021aa8:	0802ac68 	.word	0x0802ac68
 8021aac:	080e1ecc 	.word	0x080e1ecc
 8021ab0:	2001eb14 	.word	0x2001eb14

08021ab4 <icmp_dest_unreach>:
{
 8021ab4:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8021ab6:	2103      	movs	r1, #3
 8021ab8:	f7ff beac 	b.w	8021814 <icmp_send_response>

08021abc <icmp_time_exceeded>:
{
 8021abc:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8021abe:	210b      	movs	r1, #11
 8021ac0:	f7ff bea8 	b.w	8021814 <icmp_send_response>

08021ac4 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8021ac4:	4b18      	ldr	r3, [pc, #96]	; (8021b28 <ip4_route+0x64>)
{
 8021ac6:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 8021ac8:	681b      	ldr	r3, [r3, #0]
 8021aca:	b1ab      	cbz	r3, 8021af8 <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021acc:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8021ad0:	07d4      	lsls	r4, r2, #31
 8021ad2:	d5f9      	bpl.n	8021ac8 <ip4_route+0x4>
 8021ad4:	0751      	lsls	r1, r2, #29
 8021ad6:	d5f7      	bpl.n	8021ac8 <ip4_route+0x4>
 8021ad8:	6859      	ldr	r1, [r3, #4]
 8021ada:	2900      	cmp	r1, #0
 8021adc:	d0f4      	beq.n	8021ac8 <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8021ade:	6804      	ldr	r4, [r0, #0]
 8021ae0:	689d      	ldr	r5, [r3, #8]
 8021ae2:	4061      	eors	r1, r4
 8021ae4:	4229      	tst	r1, r5
 8021ae6:	d004      	beq.n	8021af2 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8021ae8:	0792      	lsls	r2, r2, #30
 8021aea:	d4ed      	bmi.n	8021ac8 <ip4_route+0x4>
 8021aec:	68da      	ldr	r2, [r3, #12]
 8021aee:	4294      	cmp	r4, r2
 8021af0:	d1ea      	bne.n	8021ac8 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8021af2:	4618      	mov	r0, r3
 8021af4:	bc30      	pop	{r4, r5}
 8021af6:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8021af8:	4b0c      	ldr	r3, [pc, #48]	; (8021b2c <ip4_route+0x68>)
 8021afa:	681b      	ldr	r3, [r3, #0]
 8021afc:	b153      	cbz	r3, 8021b14 <ip4_route+0x50>
 8021afe:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8021b02:	f002 0205 	and.w	r2, r2, #5
 8021b06:	2a05      	cmp	r2, #5
 8021b08:	d104      	bne.n	8021b14 <ip4_route+0x50>
 8021b0a:	685a      	ldr	r2, [r3, #4]
 8021b0c:	b112      	cbz	r2, 8021b14 <ip4_route+0x50>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021b0e:	7802      	ldrb	r2, [r0, #0]
 8021b10:	2a7f      	cmp	r2, #127	; 0x7f
 8021b12:	d1ee      	bne.n	8021af2 <ip4_route+0x2e>
    IP_STATS_INC(ip.rterr);
 8021b14:	4906      	ldr	r1, [pc, #24]	; (8021b30 <ip4_route+0x6c>)
    return NULL;
 8021b16:	2300      	movs	r3, #0
    IP_STATS_INC(ip.rterr);
 8021b18:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
}
 8021b1c:	4618      	mov	r0, r3
    IP_STATS_INC(ip.rterr);
 8021b1e:	3201      	adds	r2, #1
}
 8021b20:	bc30      	pop	{r4, r5}
    IP_STATS_INC(ip.rterr);
 8021b22:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
}
 8021b26:	4770      	bx	lr
 8021b28:	2002db48 	.word	0x2002db48
 8021b2c:	2002db44 	.word	0x2002db44
 8021b30:	2002db54 	.word	0x2002db54

08021b34 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8021b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8021b38:	4d9a      	ldr	r5, [pc, #616]	; (8021da4 <ip4_input+0x270>)
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8021b3a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  IP_STATS_INC(ip.recv);
 8021b3e:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
 8021b42:	3301      	adds	r3, #1
 8021b44:	f8a5 304a 	strh.w	r3, [r5, #74]	; 0x4a
  if (IPH_V(iphdr) != 4) {
 8021b48:	f898 3000 	ldrb.w	r3, [r8]
 8021b4c:	091a      	lsrs	r2, r3, #4
 8021b4e:	2a04      	cmp	r2, #4
 8021b50:	d00e      	beq.n	8021b70 <ip4_input+0x3c>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8021b52:	f7f8 fa3d 	bl	8019fd0 <pbuf_free>
    IP_STATS_INC(ip.err);
 8021b56:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 8021b5a:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
    IP_STATS_INC(ip.err);
 8021b5e:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 8021b60:	3301      	adds	r3, #1
    IP_STATS_INC(ip.err);
 8021b62:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 8021b66:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8021b6a:	2000      	movs	r0, #0
 8021b6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8021b70:	f003 030f 	and.w	r3, r3, #15
 8021b74:	4604      	mov	r4, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8021b76:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8021b7a:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8021b7c:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8021b80:	f7f6 f9a2 	bl	8017ec8 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8021b84:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8021b86:	464e      	mov	r6, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8021b88:	4682      	mov	sl, r0
  if (iphdr_len < p->tot_len) {
 8021b8a:	4283      	cmp	r3, r0
 8021b8c:	f200 80af 	bhi.w	8021cee <ip4_input+0x1ba>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8021b90:	8963      	ldrh	r3, [r4, #10]
 8021b92:	42b3      	cmp	r3, r6
 8021b94:	f0c0 809b 	bcc.w	8021cce <ip4_input+0x19a>
 8021b98:	8923      	ldrh	r3, [r4, #8]
 8021b9a:	4553      	cmp	r3, sl
 8021b9c:	f0c0 8097 	bcc.w	8021cce <ip4_input+0x19a>
 8021ba0:	2e13      	cmp	r6, #19
 8021ba2:	f240 8094 	bls.w	8021cce <ip4_input+0x19a>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8021ba6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8021baa:	f8df a200 	ldr.w	sl, [pc, #512]	; 8021dac <ip4_input+0x278>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021bae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8021bb2:	f8ca 3014 	str.w	r3, [sl, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021bb6:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8021bb8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8021bbc:	f8ca 0010 	str.w	r0, [sl, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021bc0:	f000 809a 	beq.w	8021cf8 <ip4_input+0x1c4>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8021bc4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8021bc8:	07d2      	lsls	r2, r2, #31
 8021bca:	d503      	bpl.n	8021bd4 <ip4_input+0xa0>
 8021bcc:	687a      	ldr	r2, [r7, #4]
 8021bce:	2a00      	cmp	r2, #0
 8021bd0:	f040 80b9 	bne.w	8021d46 <ip4_input+0x212>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8021bd4:	b2db      	uxtb	r3, r3
 8021bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8021bd8:	f000 8092 	beq.w	8021d00 <ip4_input+0x1cc>
        NETIF_FOREACH(netif) {
 8021bdc:	4b72      	ldr	r3, [pc, #456]	; (8021da8 <ip4_input+0x274>)
 8021bde:	681e      	ldr	r6, [r3, #0]
 8021be0:	b93e      	cbnz	r6, 8021bf2 <ip4_input+0xbe>
 8021be2:	e08d      	b.n	8021d00 <ip4_input+0x1cc>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021be4:	f000 f9a0 	bl	8021f28 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021be8:	b988      	cbnz	r0, 8021c0e <ip4_input+0xda>
        NETIF_FOREACH(netif) {
 8021bea:	6836      	ldr	r6, [r6, #0]
 8021bec:	2e00      	cmp	r6, #0
 8021bee:	f000 8087 	beq.w	8021d00 <ip4_input+0x1cc>
          if (netif == inp) {
 8021bf2:	42b7      	cmp	r7, r6
 8021bf4:	d0f9      	beq.n	8021bea <ip4_input+0xb6>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8021bf6:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8021bfa:	07db      	lsls	r3, r3, #31
 8021bfc:	d5f5      	bpl.n	8021bea <ip4_input+0xb6>
 8021bfe:	6873      	ldr	r3, [r6, #4]
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	d0f2      	beq.n	8021bea <ip4_input+0xb6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021c04:	f8da 0014 	ldr.w	r0, [sl, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021c08:	4631      	mov	r1, r6
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021c0a:	4283      	cmp	r3, r0
 8021c0c:	d1ea      	bne.n	8021be4 <ip4_input+0xb0>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8021c0e:	f8da 0010 	ldr.w	r0, [sl, #16]
 8021c12:	2800      	cmp	r0, #0
 8021c14:	d17c      	bne.n	8021d10 <ip4_input+0x1dc>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8021c16:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8021c1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8021c1e:	b13b      	cbz	r3, 8021c30 <ip4_input+0xfc>
    p = ip4_reass(p);
 8021c20:	4620      	mov	r0, r4
 8021c22:	f000 fb55 	bl	80222d0 <ip4_reass>
    if (p == NULL) {
 8021c26:	4604      	mov	r4, r0
 8021c28:	2800      	cmp	r0, #0
 8021c2a:	d09e      	beq.n	8021b6a <ip4_input+0x36>
    iphdr = (const struct ip_hdr *)p->payload;
 8021c2c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8021c30:	f8ca 8008 	str.w	r8, [sl, #8]
  raw_status = raw_input(p, inp);
 8021c34:	4639      	mov	r1, r7
 8021c36:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8021c38:	e9ca 6700 	strd	r6, r7, [sl]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8021c3c:	f898 3000 	ldrb.w	r3, [r8]
 8021c40:	f003 030f 	and.w	r3, r3, #15
 8021c44:	009b      	lsls	r3, r3, #2
 8021c46:	f8aa 300c 	strh.w	r3, [sl, #12]
  raw_status = raw_input(p, inp);
 8021c4a:	f7f8 fbf3 	bl	801a434 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8021c4e:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8021c50:	4683      	mov	fp, r0
  if (raw_status != RAW_INPUT_EATEN)
 8021c52:	d030      	beq.n	8021cb6 <ip4_input+0x182>
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8021c54:	4649      	mov	r1, r9
 8021c56:	4620      	mov	r0, r4
 8021c58:	f7f8 f94a 	bl	8019ef0 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8021c5c:	f898 3009 	ldrb.w	r3, [r8, #9]
 8021c60:	2b06      	cmp	r3, #6
 8021c62:	f000 8084 	beq.w	8021d6e <ip4_input+0x23a>
 8021c66:	2b11      	cmp	r3, #17
 8021c68:	d077      	beq.n	8021d5a <ip4_input+0x226>
 8021c6a:	2b01      	cmp	r3, #1
 8021c6c:	d07a      	beq.n	8021d64 <ip4_input+0x230>
        if (raw_status == RAW_INPUT_DELIVERED) {
 8021c6e:	f1bb 0f02 	cmp.w	fp, #2
 8021c72:	d01d      	beq.n	8021cb0 <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021c74:	4631      	mov	r1, r6
 8021c76:	f8da 0014 	ldr.w	r0, [sl, #20]
 8021c7a:	f000 f955 	bl	8021f28 <ip4_addr_isbroadcast_u32>
 8021c7e:	b968      	cbnz	r0, 8021c9c <ip4_input+0x168>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021c80:	f8da 3014 	ldr.w	r3, [sl, #20]
 8021c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021c88:	2be0      	cmp	r3, #224	; 0xe0
 8021c8a:	d007      	beq.n	8021c9c <ip4_input+0x168>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8021c8c:	4649      	mov	r1, r9
 8021c8e:	4620      	mov	r0, r4
 8021c90:	f7f8 f966 	bl	8019f60 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8021c94:	2102      	movs	r1, #2
 8021c96:	4620      	mov	r0, r4
 8021c98:	f7ff ff0c 	bl	8021ab4 <icmp_dest_unreach>
          IP_STATS_INC(ip.proterr);
 8021c9c:	f8b5 2058 	ldrh.w	r2, [r5, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 8021ca0:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
          IP_STATS_INC(ip.proterr);
 8021ca4:	3201      	adds	r2, #1
          IP_STATS_INC(ip.drop);
 8021ca6:	3301      	adds	r3, #1
          IP_STATS_INC(ip.proterr);
 8021ca8:	f8a5 2058 	strh.w	r2, [r5, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 8021cac:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
        pbuf_free(p);
 8021cb0:	4620      	mov	r0, r4
 8021cb2:	f7f8 f98d 	bl	8019fd0 <pbuf_free>
  ip_data.current_netif = NULL;
 8021cb6:	2300      	movs	r3, #0
}
 8021cb8:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 8021cba:	e9ca 3300 	strd	r3, r3, [sl]
  ip_data.current_ip4_header = NULL;
 8021cbe:	f8ca 3008 	str.w	r3, [sl, #8]
  ip_data.current_ip_header_tot_len = 0;
 8021cc2:	f8aa 300c 	strh.w	r3, [sl, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8021cc6:	e9ca 3304 	strd	r3, r3, [sl, #16]
}
 8021cca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_free(p);
 8021cce:	4620      	mov	r0, r4
 8021cd0:	f7f8 f97e 	bl	8019fd0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8021cd4:	f8b5 2052 	ldrh.w	r2, [r5, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 8021cd8:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
}
 8021cdc:	2000      	movs	r0, #0
    IP_STATS_INC(ip.lenerr);
 8021cde:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 8021ce0:	3301      	adds	r3, #1
    IP_STATS_INC(ip.lenerr);
 8021ce2:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 8021ce6:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
}
 8021cea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_realloc(p, iphdr_len);
 8021cee:	4601      	mov	r1, r0
 8021cf0:	4620      	mov	r0, r4
 8021cf2:	f7f8 f871 	bl	8019dd8 <pbuf_realloc>
 8021cf6:	e74b      	b.n	8021b90 <ip4_input+0x5c>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8021cf8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8021cfc:	07d9      	lsls	r1, r3, #31
 8021cfe:	d41d      	bmi.n	8021d3c <ip4_input+0x208>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8021d00:	f898 3009 	ldrb.w	r3, [r8, #9]
 8021d04:	2b11      	cmp	r3, #17
 8021d06:	d040      	beq.n	8021d8a <ip4_input+0x256>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8021d08:	f8da 0010 	ldr.w	r0, [sl, #16]
 8021d0c:	b168      	cbz	r0, 8021d2a <ip4_input+0x1f6>
 8021d0e:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021d10:	4639      	mov	r1, r7
 8021d12:	f000 f909 	bl	8021f28 <ip4_addr_isbroadcast_u32>
 8021d16:	bb78      	cbnz	r0, 8021d78 <ip4_input+0x244>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8021d18:	f8da 3010 	ldr.w	r3, [sl, #16]
 8021d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021d20:	2be0      	cmp	r3, #224	; 0xe0
 8021d22:	d029      	beq.n	8021d78 <ip4_input+0x244>
  if (netif == NULL) {
 8021d24:	2e00      	cmp	r6, #0
 8021d26:	f47f af76 	bne.w	8021c16 <ip4_input+0xe2>
      IP_STATS_INC(ip.drop);
 8021d2a:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
    pbuf_free(p);
 8021d2e:	4620      	mov	r0, r4
      IP_STATS_INC(ip.drop);
 8021d30:	3301      	adds	r3, #1
 8021d32:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
    pbuf_free(p);
 8021d36:	f7f8 f94b 	bl	8019fd0 <pbuf_free>
    return ERR_OK;
 8021d3a:	e716      	b.n	8021b6a <ip4_input+0x36>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	2b00      	cmp	r3, #0
 8021d40:	d0de      	beq.n	8021d00 <ip4_input+0x1cc>
 8021d42:	463e      	mov	r6, r7
 8021d44:	e765      	b.n	8021c12 <ip4_input+0xde>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021d46:	4293      	cmp	r3, r2
 8021d48:	d0fb      	beq.n	8021d42 <ip4_input+0x20e>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021d4a:	4618      	mov	r0, r3
 8021d4c:	4639      	mov	r1, r7
 8021d4e:	f000 f8eb 	bl	8021f28 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021d52:	bb10      	cbnz	r0, 8021d9a <ip4_input+0x266>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8021d54:	f8da 3014 	ldr.w	r3, [sl, #20]
 8021d58:	e73c      	b.n	8021bd4 <ip4_input+0xa0>
        udp_input(p, inp);
 8021d5a:	4639      	mov	r1, r7
 8021d5c:	4620      	mov	r0, r4
 8021d5e:	f7fc ffa7 	bl	801ecb0 <udp_input>
        break;
 8021d62:	e7a8      	b.n	8021cb6 <ip4_input+0x182>
        icmp_input(p, inp);
 8021d64:	4639      	mov	r1, r7
 8021d66:	4620      	mov	r0, r4
 8021d68:	f7ff fdb0 	bl	80218cc <icmp_input>
        break;
 8021d6c:	e7a3      	b.n	8021cb6 <ip4_input+0x182>
        tcp_input(p, inp);
 8021d6e:	4639      	mov	r1, r7
 8021d70:	4620      	mov	r0, r4
 8021d72:	f7fa fd4f 	bl	801c814 <tcp_input>
        break;
 8021d76:	e79e      	b.n	8021cb6 <ip4_input+0x182>
      pbuf_free(p);
 8021d78:	4620      	mov	r0, r4
 8021d7a:	f7f8 f929 	bl	8019fd0 <pbuf_free>
      IP_STATS_INC(ip.drop);
 8021d7e:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
 8021d82:	3301      	adds	r3, #1
 8021d84:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
      return ERR_OK;
 8021d88:	e6ef      	b.n	8021b6a <ip4_input+0x36>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8021d8a:	eb08 0309 	add.w	r3, r8, r9
 8021d8e:	885b      	ldrh	r3, [r3, #2]
 8021d90:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8021d94:	d1b8      	bne.n	8021d08 <ip4_input+0x1d4>
 8021d96:	463e      	mov	r6, r7
 8021d98:	e7c4      	b.n	8021d24 <ip4_input+0x1f0>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8021d9a:	f8da 0010 	ldr.w	r0, [sl, #16]
 8021d9e:	463e      	mov	r6, r7
 8021da0:	e737      	b.n	8021c12 <ip4_input+0xde>
 8021da2:	bf00      	nop
 8021da4:	2002db54 	.word	0x2002db54
 8021da8:	2002db48 	.word	0x2002db48
 8021dac:	2001eb14 	.word	0x2001eb14

08021db0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8021db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021db4:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021db6:	7b83      	ldrb	r3, [r0, #14]
{
 8021db8:	b083      	sub	sp, #12
 8021dba:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021dbc:	2b01      	cmp	r3, #1
{
 8021dbe:	4689      	mov	r9, r1
 8021dc0:	4617      	mov	r7, r2
 8021dc2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8021dc6:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8021dca:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021dce:	d15e      	bne.n	8021e8e <ip4_output_if_src+0xde>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8021dd0:	2f00      	cmp	r7, #0
 8021dd2:	d065      	beq.n	8021ea0 <ip4_output_if_src+0xf0>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8021dd4:	2114      	movs	r1, #20
 8021dd6:	4620      	mov	r0, r4
 8021dd8:	f7f8 f856 	bl	8019e88 <pbuf_add_header>
 8021ddc:	2800      	cmp	r0, #0
 8021dde:	d17a      	bne.n	8021ed6 <ip4_output_if_src+0x126>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021de0:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8021de2:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021de4:	2b13      	cmp	r3, #19
 8021de6:	d963      	bls.n	8021eb0 <ip4_output_if_src+0x100>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8021de8:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8021dec:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 8021df0:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8021df4:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 8021df6:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8021df8:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8021dfa:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 8021dfc:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8021dfe:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 8021e02:	fa10 f383 	uxtah	r3, r0, r3
 8021e06:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8021e08:	ea4f 252a 	mov.w	r5, sl, asr #8
 8021e0c:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8021e10:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8021e14:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021e16:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8021f00 <ip4_output_if_src+0x150>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8021e1a:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021e1c:	8920      	ldrh	r0, [r4, #8]
 8021e1e:	f7f6 f853 	bl	8017ec8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8021e22:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8021e24:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021e26:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8021e28:	71b3      	strb	r3, [r6, #6]
 8021e2a:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021e2c:	f8ba 0000 	ldrh.w	r0, [sl]
 8021e30:	f7f6 f84a 	bl	8017ec8 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021e34:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 8021e38:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021e3a:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 8021e3c:	3201      	adds	r2, #1
 8021e3e:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 8021e42:	f1b9 0f00 	cmp.w	r9, #0
 8021e46:	d03b      	beq.n	8021ec0 <ip4_output_if_src+0x110>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8021e48:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8021e4c:	fa13 f382 	uxtah	r3, r3, r2
 8021e50:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8021e52:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8021e56:	b29a      	uxth	r2, r3
 8021e58:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 8021e5c:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 8021e60:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8021e62:	8173      	strh	r3, [r6, #10]
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
 8021e64:	4a20      	ldr	r2, [pc, #128]	; (8021ee8 <ip4_output_if_src+0x138>)
 8021e66:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 8021e6a:	3301      	adds	r3, #1
 8021e6c:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8021e70:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 8021e74:	b113      	cbz	r3, 8021e7c <ip4_output_if_src+0xcc>
 8021e76:	8922      	ldrh	r2, [r4, #8]
 8021e78:	429a      	cmp	r2, r3
 8021e7a:	d824      	bhi.n	8021ec6 <ip4_output_if_src+0x116>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8021e7c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8021e80:	463a      	mov	r2, r7
 8021e82:	4621      	mov	r1, r4
 8021e84:	4640      	mov	r0, r8
 8021e86:	4798      	blx	r3
}
 8021e88:	b003      	add	sp, #12
 8021e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021e8e:	4b17      	ldr	r3, [pc, #92]	; (8021eec <ip4_output_if_src+0x13c>)
 8021e90:	f44f 7255 	mov.w	r2, #852	; 0x354
 8021e94:	4916      	ldr	r1, [pc, #88]	; (8021ef0 <ip4_output_if_src+0x140>)
 8021e96:	4817      	ldr	r0, [pc, #92]	; (8021ef4 <ip4_output_if_src+0x144>)
 8021e98:	f002 fb10 	bl	80244bc <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8021e9c:	2f00      	cmp	r7, #0
 8021e9e:	d199      	bne.n	8021dd4 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 8021ea0:	8963      	ldrh	r3, [r4, #10]
 8021ea2:	2b13      	cmp	r3, #19
 8021ea4:	d917      	bls.n	8021ed6 <ip4_output_if_src+0x126>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021ea6:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8021ea8:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021eaa:	691b      	ldr	r3, [r3, #16]
 8021eac:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8021eae:	e7d9      	b.n	8021e64 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021eb0:	4b0e      	ldr	r3, [pc, #56]	; (8021eec <ip4_output_if_src+0x13c>)
 8021eb2:	f44f 7262 	mov.w	r2, #904	; 0x388
 8021eb6:	4910      	ldr	r1, [pc, #64]	; (8021ef8 <ip4_output_if_src+0x148>)
 8021eb8:	480e      	ldr	r0, [pc, #56]	; (8021ef4 <ip4_output_if_src+0x144>)
 8021eba:	f002 faff 	bl	80244bc <iprintf>
 8021ebe:	e793      	b.n	8021de8 <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8021ec0:	4a0e      	ldr	r2, [pc, #56]	; (8021efc <ip4_output_if_src+0x14c>)
 8021ec2:	6812      	ldr	r2, [r2, #0]
 8021ec4:	e7c2      	b.n	8021e4c <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 8021ec6:	463a      	mov	r2, r7
 8021ec8:	4641      	mov	r1, r8
 8021eca:	4620      	mov	r0, r4
 8021ecc:	f000 fc56 	bl	802277c <ip4_frag>
}
 8021ed0:	b003      	add	sp, #12
 8021ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      IP_STATS_INC(ip.err);
 8021ed6:	4a04      	ldr	r2, [pc, #16]	; (8021ee8 <ip4_output_if_src+0x138>)
      return ERR_BUF;
 8021ed8:	f06f 0001 	mvn.w	r0, #1
      IP_STATS_INC(ip.err);
 8021edc:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 8021ee0:	3301      	adds	r3, #1
 8021ee2:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
      return ERR_BUF;
 8021ee6:	e7cf      	b.n	8021e88 <ip4_output_if_src+0xd8>
 8021ee8:	2002db54 	.word	0x2002db54
 8021eec:	080e1f38 	.word	0x080e1f38
 8021ef0:	080e1f6c 	.word	0x080e1f6c
 8021ef4:	0802ac68 	.word	0x0802ac68
 8021ef8:	080e1f78 	.word	0x080e1f78
 8021efc:	080e1ff0 	.word	0x080e1ff0
 8021f00:	2002e00a 	.word	0x2002e00a

08021f04 <ip4_output_if>:
{
 8021f04:	b4f0      	push	{r4, r5, r6, r7}
 8021f06:	9c06      	ldr	r4, [sp, #24]
 8021f08:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8021f0c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8021f10:	b11a      	cbz	r2, 8021f1a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8021f12:	b109      	cbz	r1, 8021f18 <ip4_output_if+0x14>
 8021f14:	680f      	ldr	r7, [r1, #0]
 8021f16:	b907      	cbnz	r7, 8021f1a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8021f18:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8021f1a:	9504      	str	r5, [sp, #16]
 8021f1c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8021f20:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8021f22:	f7ff bf45 	b.w	8021db0 <ip4_output_if_src>
 8021f26:	bf00      	nop

08021f28 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8021f28:	1e43      	subs	r3, r0, #1
 8021f2a:	3303      	adds	r3, #3
 8021f2c:	d814      	bhi.n	8021f58 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8021f2e:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8021f32:	f013 0302 	ands.w	r3, r3, #2
 8021f36:	d00d      	beq.n	8021f54 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8021f38:	684b      	ldr	r3, [r1, #4]
 8021f3a:	4283      	cmp	r3, r0
 8021f3c:	d00f      	beq.n	8021f5e <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8021f3e:	688a      	ldr	r2, [r1, #8]
 8021f40:	4043      	eors	r3, r0
 8021f42:	4213      	tst	r3, r2
 8021f44:	d10b      	bne.n	8021f5e <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021f46:	43d3      	mvns	r3, r2
 8021f48:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8021f4c:	1ac3      	subs	r3, r0, r3
 8021f4e:	fab3 f383 	clz	r3, r3
 8021f52:	095b      	lsrs	r3, r3, #5
  }
}
 8021f54:	4618      	mov	r0, r3
 8021f56:	4770      	bx	lr
    return 1;
 8021f58:	2301      	movs	r3, #1
}
 8021f5a:	4618      	mov	r0, r3
 8021f5c:	4770      	bx	lr
    return 0;
 8021f5e:	2300      	movs	r3, #0
}
 8021f60:	4618      	mov	r0, r3
 8021f62:	4770      	bx	lr

08021f64 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8021f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8021f68:	4e4f      	ldr	r6, [pc, #316]	; (80220a8 <ip4addr_aton+0x144>)
{
 8021f6a:	b085      	sub	sp, #20
  c = *cp;
 8021f6c:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 8021f6e:	5cf2      	ldrb	r2, [r6, r3]
 8021f70:	0754      	lsls	r4, r2, #29
 8021f72:	d538      	bpl.n	8021fe6 <ip4addr_aton+0x82>
  u32_t *pp = parts;
 8021f74:	46e9      	mov	r9, sp
 8021f76:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8021f78:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 8021f7c:	464f      	mov	r7, r9
    if (c == '0') {
 8021f7e:	2b30      	cmp	r3, #48	; 0x30
 8021f80:	d035      	beq.n	8021fee <ip4addr_aton+0x8a>
    base = 10;
 8021f82:	210a      	movs	r1, #10
 8021f84:	1c42      	adds	r2, r0, #1
 8021f86:	2400      	movs	r4, #0
 8021f88:	e003      	b.n	8021f92 <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 8021f8a:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 8021f8e:	7813      	ldrb	r3, [r2, #0]
 8021f90:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 8021f92:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8021f96:	f103 0e0a 	add.w	lr, r3, #10
 8021f9a:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 8021f9e:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 8021fa2:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8021fa6:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 8021faa:	d1ee      	bne.n	8021f8a <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8021fac:	2910      	cmp	r1, #16
 8021fae:	d10d      	bne.n	8021fcc <ip4addr_aton+0x68>
 8021fb0:	f01c 0f44 	tst.w	ip, #68	; 0x44
 8021fb4:	d00a      	beq.n	8021fcc <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8021fb6:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8021fba:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8021fbc:	bf0c      	ite	eq
 8021fbe:	2061      	moveq	r0, #97	; 0x61
 8021fc0:	2041      	movne	r0, #65	; 0x41
 8021fc2:	ebae 0e00 	sub.w	lr, lr, r0
 8021fc6:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 8021fca:	e7e1      	b.n	8021f90 <ip4addr_aton+0x2c>
    if (c == '.') {
 8021fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8021fce:	d11a      	bne.n	8022006 <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 8021fd0:	4547      	cmp	r7, r8
 8021fd2:	d008      	beq.n	8021fe6 <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 8021fd4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8021fd8:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 8021fdc:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 8021fe0:	5cf2      	ldrb	r2, [r6, r3]
 8021fe2:	0752      	lsls	r2, r2, #29
 8021fe4:	d4cb      	bmi.n	8021f7e <ip4addr_aton+0x1a>
      return 0;
 8021fe6:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8021fe8:	b005      	add	sp, #20
 8021fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 8021fee:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8021ff0:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8021ff4:	2a58      	cmp	r2, #88	; 0x58
 8021ff6:	d002      	beq.n	8021ffe <ip4addr_aton+0x9a>
      c = *++cp;
 8021ff8:	3001      	adds	r0, #1
        base = 8;
 8021ffa:	2108      	movs	r1, #8
 8021ffc:	e7c2      	b.n	8021f84 <ip4addr_aton+0x20>
        c = *++cp;
 8021ffe:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8022000:	2110      	movs	r1, #16
        c = *++cp;
 8022002:	3002      	adds	r0, #2
 8022004:	e7be      	b.n	8021f84 <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 8022006:	b113      	cbz	r3, 802200e <ip4addr_aton+0xaa>
 8022008:	f01c 0f08 	tst.w	ip, #8
 802200c:	d0eb      	beq.n	8021fe6 <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 802200e:	eba7 0009 	sub.w	r0, r7, r9
 8022012:	1080      	asrs	r0, r0, #2
 8022014:	3001      	adds	r0, #1
 8022016:	2804      	cmp	r0, #4
 8022018:	d83e      	bhi.n	8022098 <ip4addr_aton+0x134>
 802201a:	a301      	add	r3, pc, #4	; (adr r3, 8022020 <ip4addr_aton+0xbc>)
 802201c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8022020:	08021fe9 	.word	0x08021fe9
 8022024:	08022045 	.word	0x08022045
 8022028:	08022035 	.word	0x08022035
 802202c:	08022079 	.word	0x08022079
 8022030:	08022055 	.word	0x08022055
      if (val > 0xffffffUL) {
 8022034:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8022038:	d2d5      	bcs.n	8021fe6 <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 802203a:	9b00      	ldr	r3, [sp, #0]
 802203c:	2bff      	cmp	r3, #255	; 0xff
 802203e:	d8d2      	bhi.n	8021fe6 <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8022040:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 8022044:	b335      	cbz	r5, 8022094 <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8022046:	4620      	mov	r0, r4
 8022048:	f7f5 ff42 	bl	8017ed0 <lwip_htonl>
 802204c:	4603      	mov	r3, r0
  return 1;
 802204e:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8022050:	602b      	str	r3, [r5, #0]
 8022052:	e7c9      	b.n	8021fe8 <ip4addr_aton+0x84>
      if (val > 0xff) {
 8022054:	2cff      	cmp	r4, #255	; 0xff
 8022056:	d8c6      	bhi.n	8021fe6 <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8022058:	9900      	ldr	r1, [sp, #0]
 802205a:	29ff      	cmp	r1, #255	; 0xff
 802205c:	d8c3      	bhi.n	8021fe6 <ip4addr_aton+0x82>
 802205e:	9b01      	ldr	r3, [sp, #4]
 8022060:	2bff      	cmp	r3, #255	; 0xff
 8022062:	d8c0      	bhi.n	8021fe6 <ip4addr_aton+0x82>
 8022064:	9a02      	ldr	r2, [sp, #8]
 8022066:	2aff      	cmp	r2, #255	; 0xff
 8022068:	d8bd      	bhi.n	8021fe6 <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 802206a:	041b      	lsls	r3, r3, #16
 802206c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8022070:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022074:	431c      	orrs	r4, r3
      break;
 8022076:	e7e5      	b.n	8022044 <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 8022078:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 802207c:	d2b3      	bcs.n	8021fe6 <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 802207e:	9a00      	ldr	r2, [sp, #0]
 8022080:	2aff      	cmp	r2, #255	; 0xff
 8022082:	d8b0      	bhi.n	8021fe6 <ip4addr_aton+0x82>
 8022084:	9b01      	ldr	r3, [sp, #4]
 8022086:	2bff      	cmp	r3, #255	; 0xff
 8022088:	d8ad      	bhi.n	8021fe6 <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 802208a:	041b      	lsls	r3, r3, #16
 802208c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8022090:	431c      	orrs	r4, r3
      break;
 8022092:	e7d7      	b.n	8022044 <ip4addr_aton+0xe0>
  return 1;
 8022094:	2001      	movs	r0, #1
 8022096:	e7a7      	b.n	8021fe8 <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 8022098:	4b04      	ldr	r3, [pc, #16]	; (80220ac <ip4addr_aton+0x148>)
 802209a:	22f9      	movs	r2, #249	; 0xf9
 802209c:	4904      	ldr	r1, [pc, #16]	; (80220b0 <ip4addr_aton+0x14c>)
 802209e:	4805      	ldr	r0, [pc, #20]	; (80220b4 <ip4addr_aton+0x150>)
 80220a0:	f002 fa0c 	bl	80244bc <iprintf>
      break;
 80220a4:	e7ce      	b.n	8022044 <ip4addr_aton+0xe0>
 80220a6:	bf00      	nop
 80220a8:	080e224d 	.word	0x080e224d
 80220ac:	080e1fa8 	.word	0x080e1fa8
 80220b0:	080e1fe4 	.word	0x080e1fe4
 80220b4:	0802ac68 	.word	0x0802ac68

080220b8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80220b8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80220ba:	4604      	mov	r4, r0
 80220bc:	b148      	cbz	r0, 80220d2 <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80220be:	6960      	ldr	r0, [r4, #20]
 80220c0:	b108      	cbz	r0, 80220c6 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80220c2:	f7f7 ff85 	bl	8019fd0 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 80220c6:	4621      	mov	r1, r4
 80220c8:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 80220ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80220ce:	f7f7 ba83 	b.w	80195d8 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80220d2:	4b04      	ldr	r3, [pc, #16]	; (80220e4 <ipfrag_free_pbuf_custom+0x2c>)
 80220d4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80220d8:	4903      	ldr	r1, [pc, #12]	; (80220e8 <ipfrag_free_pbuf_custom+0x30>)
 80220da:	4804      	ldr	r0, [pc, #16]	; (80220ec <ipfrag_free_pbuf_custom+0x34>)
 80220dc:	f002 f9ee 	bl	80244bc <iprintf>
 80220e0:	e7ed      	b.n	80220be <ipfrag_free_pbuf_custom+0x6>
 80220e2:	bf00      	nop
 80220e4:	080e1ff8 	.word	0x080e1ff8
 80220e8:	080e2034 	.word	0x080e2034
 80220ec:	0802ac68 	.word	0x0802ac68

080220f0 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80220f0:	4281      	cmp	r1, r0
{
 80220f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220f6:	4606      	mov	r6, r0
 80220f8:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80220fa:	d075      	beq.n	80221e8 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 80220fc:	b147      	cbz	r7, 8022110 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80220fe:	683b      	ldr	r3, [r7, #0]
 8022100:	42b3      	cmp	r3, r6
 8022102:	d005      	beq.n	8022110 <ip_reass_free_complete_datagram+0x20>
 8022104:	4b40      	ldr	r3, [pc, #256]	; (8022208 <ip_reass_free_complete_datagram+0x118>)
 8022106:	22ad      	movs	r2, #173	; 0xad
 8022108:	4940      	ldr	r1, [pc, #256]	; (802220c <ip_reass_free_complete_datagram+0x11c>)
 802210a:	4841      	ldr	r0, [pc, #260]	; (8022210 <ip_reass_free_complete_datagram+0x120>)
 802210c:	f002 f9d6 	bl	80244bc <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8022110:	6875      	ldr	r5, [r6, #4]
 8022112:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8022114:	889a      	ldrh	r2, [r3, #4]
 8022116:	2a00      	cmp	r2, #0
 8022118:	d047      	beq.n	80221aa <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 802211a:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 802211e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8022208 <ip_reass_free_complete_datagram+0x118>
 8022122:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8022228 <ip_reass_free_complete_datagram+0x138>
 8022126:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8022210 <ip_reass_free_complete_datagram+0x120>
 802212a:	e005      	b.n	8022138 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 802212c:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 802212e:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8022130:	f7f7 ff4e 	bl	8019fd0 <pbuf_free>
  while (p != NULL) {
 8022134:	b1b4      	cbz	r4, 8022164 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8022136:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8022138:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 802213a:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 802213c:	f7f7 ff5c 	bl	8019ff8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022140:	4458      	add	r0, fp
 8022142:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8022146:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 802214a:	dbef      	blt.n	802212c <ip_reass_free_complete_datagram+0x3c>
 802214c:	4653      	mov	r3, sl
 802214e:	22cc      	movs	r2, #204	; 0xcc
 8022150:	4649      	mov	r1, r9
 8022152:	4640      	mov	r0, r8
 8022154:	f002 f9b2 	bl	80244bc <iprintf>
    pbuf_free(pcur);
 8022158:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 802215a:	4625      	mov	r5, r4
    pbuf_free(pcur);
 802215c:	f7f7 ff38 	bl	8019fd0 <pbuf_free>
  while (p != NULL) {
 8022160:	2c00      	cmp	r4, #0
 8022162:	d1e8      	bne.n	8022136 <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 8022164:	4b2b      	ldr	r3, [pc, #172]	; (8022214 <ip_reass_free_complete_datagram+0x124>)
 8022166:	681a      	ldr	r2, [r3, #0]
 8022168:	4296      	cmp	r6, r2
 802216a:	d03a      	beq.n	80221e2 <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802216c:	2f00      	cmp	r7, #0
 802216e:	d042      	beq.n	80221f6 <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8022170:	6833      	ldr	r3, [r6, #0]
 8022172:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022174:	4c28      	ldr	r4, [pc, #160]	; (8022218 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 8022176:	4631      	mov	r1, r6
 8022178:	2005      	movs	r0, #5
 802217a:	f7f7 fa2d 	bl	80195d8 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 802217e:	8823      	ldrh	r3, [r4, #0]
 8022180:	455b      	cmp	r3, fp
 8022182:	d305      	bcc.n	8022190 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022184:	eba3 030b 	sub.w	r3, r3, fp
}
 8022188:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802218a:	8023      	strh	r3, [r4, #0]
}
 802218c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022190:	4b1d      	ldr	r3, [pc, #116]	; (8022208 <ip_reass_free_complete_datagram+0x118>)
 8022192:	22d2      	movs	r2, #210	; 0xd2
 8022194:	4921      	ldr	r1, [pc, #132]	; (802221c <ip_reass_free_complete_datagram+0x12c>)
 8022196:	481e      	ldr	r0, [pc, #120]	; (8022210 <ip_reass_free_complete_datagram+0x120>)
 8022198:	f002 f990 	bl	80244bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802219c:	8823      	ldrh	r3, [r4, #0]
}
 802219e:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80221a0:	eba3 030b 	sub.w	r3, r3, fp
 80221a4:	8023      	strh	r3, [r4, #0]
}
 80221a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 80221aa:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80221ac:	6930      	ldr	r0, [r6, #16]
 80221ae:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 80221b0:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80221b2:	68f4      	ldr	r4, [r6, #12]
 80221b4:	68b2      	ldr	r2, [r6, #8]
 80221b6:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80221b8:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80221ba:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80221bc:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80221be:	601a      	str	r2, [r3, #0]
 80221c0:	605c      	str	r4, [r3, #4]
 80221c2:	69b2      	ldr	r2, [r6, #24]
 80221c4:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80221c6:	f7ff fc79 	bl	8021abc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80221ca:	4628      	mov	r0, r5
 80221cc:	f7f7 ff14 	bl	8019ff8 <pbuf_clen>
 80221d0:	4683      	mov	fp, r0
    pbuf_free(p);
 80221d2:	4628      	mov	r0, r5
 80221d4:	f7f7 fefc 	bl	8019fd0 <pbuf_free>
  p = ipr->p;
 80221d8:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 80221da:	2d00      	cmp	r5, #0
 80221dc:	d0c2      	beq.n	8022164 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 80221de:	686b      	ldr	r3, [r5, #4]
 80221e0:	e79d      	b.n	802211e <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 80221e2:	6832      	ldr	r2, [r6, #0]
 80221e4:	601a      	str	r2, [r3, #0]
 80221e6:	e7c5      	b.n	8022174 <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80221e8:	4b07      	ldr	r3, [pc, #28]	; (8022208 <ip_reass_free_complete_datagram+0x118>)
 80221ea:	22ab      	movs	r2, #171	; 0xab
 80221ec:	490c      	ldr	r1, [pc, #48]	; (8022220 <ip_reass_free_complete_datagram+0x130>)
 80221ee:	4808      	ldr	r0, [pc, #32]	; (8022210 <ip_reass_free_complete_datagram+0x120>)
 80221f0:	f002 f964 	bl	80244bc <iprintf>
 80221f4:	e782      	b.n	80220fc <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80221f6:	4b04      	ldr	r3, [pc, #16]	; (8022208 <ip_reass_free_complete_datagram+0x118>)
 80221f8:	f240 1245 	movw	r2, #325	; 0x145
 80221fc:	4909      	ldr	r1, [pc, #36]	; (8022224 <ip_reass_free_complete_datagram+0x134>)
 80221fe:	4804      	ldr	r0, [pc, #16]	; (8022210 <ip_reass_free_complete_datagram+0x120>)
 8022200:	f002 f95c 	bl	80244bc <iprintf>
 8022204:	e7b4      	b.n	8022170 <ip_reass_free_complete_datagram+0x80>
 8022206:	bf00      	nop
 8022208:	080e1ff8 	.word	0x080e1ff8
 802220c:	080e204c 	.word	0x080e204c
 8022210:	0802ac68 	.word	0x0802ac68
 8022214:	2002e010 	.word	0x2002e010
 8022218:	2002e00c 	.word	0x2002e00c
 802221c:	080e209c 	.word	0x080e209c
 8022220:	080e2040 	.word	0x080e2040
 8022224:	080e2080 	.word	0x080e2080
 8022228:	080e2060 	.word	0x080e2060

0802222c <ip_reass_remove_oldest_datagram>:
{
 802222c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8022230:	2700      	movs	r7, #0
 8022232:	f8df 8068 	ldr.w	r8, [pc, #104]	; 802229c <ip_reass_remove_oldest_datagram+0x70>
{
 8022236:	4605      	mov	r5, r0
 8022238:	460e      	mov	r6, r1
    r = reassdatagrams;
 802223a:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 802223e:	b1f3      	cbz	r3, 802227e <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8022240:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022242:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 8022246:	4621      	mov	r1, r4
    prev = NULL;
 8022248:	46a4      	mov	ip, r4
    oldest = NULL;
 802224a:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802224c:	695a      	ldr	r2, [r3, #20]
 802224e:	4572      	cmp	r2, lr
 8022250:	d018      	beq.n	8022284 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 8022252:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8022254:	b120      	cbz	r0, 8022260 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 8022256:	f893 901f 	ldrb.w	r9, [r3, #31]
 802225a:	7fc2      	ldrb	r2, [r0, #31]
 802225c:	4591      	cmp	r9, r2
 802225e:	d801      	bhi.n	8022264 <ip_reass_remove_oldest_datagram+0x38>
 8022260:	4661      	mov	r1, ip
 8022262:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8022264:	681a      	ldr	r2, [r3, #0]
 8022266:	469c      	mov	ip, r3
 8022268:	4613      	mov	r3, r2
 802226a:	2a00      	cmp	r2, #0
 802226c:	d1ee      	bne.n	802224c <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 802226e:	b110      	cbz	r0, 8022276 <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8022270:	f7ff ff3e 	bl	80220f0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8022274:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8022276:	42b7      	cmp	r7, r6
 8022278:	da01      	bge.n	802227e <ip_reass_remove_oldest_datagram+0x52>
 802227a:	2c01      	cmp	r4, #1
 802227c:	dcdd      	bgt.n	802223a <ip_reass_remove_oldest_datagram+0xe>
}
 802227e:	4638      	mov	r0, r7
 8022280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022284:	699a      	ldr	r2, [r3, #24]
 8022286:	f8d5 9010 	ldr.w	r9, [r5, #16]
 802228a:	454a      	cmp	r2, r9
 802228c:	d1e1      	bne.n	8022252 <ip_reass_remove_oldest_datagram+0x26>
 802228e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8022292:	88aa      	ldrh	r2, [r5, #4]
 8022294:	4591      	cmp	r9, r2
 8022296:	d1dc      	bne.n	8022252 <ip_reass_remove_oldest_datagram+0x26>
 8022298:	e7e4      	b.n	8022264 <ip_reass_remove_oldest_datagram+0x38>
 802229a:	bf00      	nop
 802229c:	2002e010 	.word	0x2002e010

080222a0 <ip_reass_tmr>:
{
 80222a0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80222a2:	4b0a      	ldr	r3, [pc, #40]	; (80222cc <ip_reass_tmr+0x2c>)
 80222a4:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80222a6:	b140      	cbz	r0, 80222ba <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 80222a8:	2400      	movs	r4, #0
    if (r->timer > 0) {
 80222aa:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 80222ac:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 80222ae:	b12b      	cbz	r3, 80222bc <ip_reass_tmr+0x1c>
 80222b0:	4604      	mov	r4, r0
      r->timer--;
 80222b2:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 80222b4:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 80222b6:	2800      	cmp	r0, #0
 80222b8:	d1f7      	bne.n	80222aa <ip_reass_tmr+0xa>
}
 80222ba:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 80222bc:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 80222be:	4621      	mov	r1, r4
 80222c0:	f7ff ff16 	bl	80220f0 <ip_reass_free_complete_datagram>
      r = r->next;
 80222c4:	4628      	mov	r0, r5
  while (r != NULL) {
 80222c6:	2800      	cmp	r0, #0
 80222c8:	d1ef      	bne.n	80222aa <ip_reass_tmr+0xa>
 80222ca:	e7f6      	b.n	80222ba <ip_reass_tmr+0x1a>
 80222cc:	2002e010 	.word	0x2002e010

080222d0 <ip4_reass>:
{
 80222d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 80222d4:	4dbb      	ldr	r5, [pc, #748]	; (80225c4 <ip4_reass+0x2f4>)
{
 80222d6:	b087      	sub	sp, #28
  fraghdr = (struct ip_hdr *)p->payload;
 80222d8:	f8d0 b004 	ldr.w	fp, [r0, #4]
{
 80222dc:	4606      	mov	r6, r0
  IPFRAG_STATS_INC(ip_frag.recv);
 80222de:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80222e0:	3301      	adds	r3, #1
 80222e2:	866b      	strh	r3, [r5, #50]	; 0x32
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80222e4:	f89b 3000 	ldrb.w	r3, [fp]
 80222e8:	f003 030f 	and.w	r3, r3, #15
 80222ec:	2b05      	cmp	r3, #5
 80222ee:	f040 808a 	bne.w	8022406 <ip4_reass+0x136>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80222f2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80222f6:	f7f5 fde7 	bl	8017ec8 <lwip_htons>
 80222fa:	4682      	mov	sl, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80222fc:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 8022300:	f7f5 fde2 	bl	8017ec8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8022304:	f89b 3000 	ldrb.w	r3, [fp]
 8022308:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 802230c:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8022310:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8022314:	d37c      	bcc.n	8022410 <ip4_reass+0x140>
  len = (u16_t)(len - hlen);
 8022316:	1a80      	subs	r0, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022318:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 80225d8 <ip4_reass+0x308>
  len = (u16_t)(len - hlen);
 802231c:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 802231e:	4630      	mov	r0, r6
  len = (u16_t)(len - hlen);
 8022320:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8022322:	f7f7 fe69 	bl	8019ff8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022326:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 802232a:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802232c:	4403      	add	r3, r0
 802232e:	2b0a      	cmp	r3, #10
 8022330:	f300 80ed 	bgt.w	802250e <ip4_reass+0x23e>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022334:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 80225dc <ip4_reass+0x30c>
 8022338:	f8d9 4000 	ldr.w	r4, [r9]
 802233c:	2c00      	cmp	r4, #0
 802233e:	f000 80f5 	beq.w	802252c <ip4_reass+0x25c>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8022342:	f8db 200c 	ldr.w	r2, [fp, #12]
 8022346:	e003      	b.n	8022350 <ip4_reass+0x80>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022348:	6824      	ldr	r4, [r4, #0]
 802234a:	2c00      	cmp	r4, #0
 802234c:	f000 80ee 	beq.w	802252c <ip4_reass+0x25c>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8022350:	6963      	ldr	r3, [r4, #20]
 8022352:	4293      	cmp	r3, r2
 8022354:	d1f8      	bne.n	8022348 <ip4_reass+0x78>
 8022356:	f8db 3010 	ldr.w	r3, [fp, #16]
 802235a:	69a1      	ldr	r1, [r4, #24]
 802235c:	4299      	cmp	r1, r3
 802235e:	d1f3      	bne.n	8022348 <ip4_reass+0x78>
 8022360:	89a1      	ldrh	r1, [r4, #12]
 8022362:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8022366:	4299      	cmp	r1, r3
 8022368:	d1ee      	bne.n	8022348 <ip4_reass+0x78>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 802236a:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
 802236e:	3301      	adds	r3, #1
 8022370:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022374:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8022378:	f7f5 fda6 	bl	8017ec8 <lwip_htons>
 802237c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8022380:	2800      	cmp	r0, #0
 8022382:	f000 80ac 	beq.w	80224de <ip4_reass+0x20e>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8022386:	f8bb 3006 	ldrh.w	r3, [fp, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802238a:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
  if (is_last) {
 802238e:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022392:	ea4f 02ca 	mov.w	r2, sl, lsl #3
  if (is_last) {
 8022396:	9302      	str	r3, [sp, #8]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022398:	9203      	str	r2, [sp, #12]
  if (is_last) {
 802239a:	d108      	bne.n	80223ae <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 802239c:	9b01      	ldr	r3, [sp, #4]
 802239e:	18d3      	adds	r3, r2, r3
 80223a0:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80223a2:	429a      	cmp	r2, r3
 80223a4:	d812      	bhi.n	80223cc <ip4_reass+0xfc>
 80223a6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80223aa:	4293      	cmp	r3, r2
 80223ac:	d80e      	bhi.n	80223cc <ip4_reass+0xfc>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80223ae:	f8d6 a004 	ldr.w	sl, [r6, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80223b2:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80223b6:	f7f5 fd87 	bl	8017ec8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80223ba:	f89a 2000 	ldrb.w	r2, [sl]
 80223be:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80223c2:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80223c6:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80223ca:	d22c      	bcs.n	8022426 <ip4_reass+0x156>
  if (ipr->p == NULL) {
 80223cc:	6867      	ldr	r7, [r4, #4]
 80223ce:	b9ff      	cbnz	r7, 8022410 <ip4_reass+0x140>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80223d0:	f8d9 3000 	ldr.w	r3, [r9]
 80223d4:	42a3      	cmp	r3, r4
 80223d6:	f000 80c1 	beq.w	802255c <ip4_reass+0x28c>
 80223da:	4b7b      	ldr	r3, [pc, #492]	; (80225c8 <ip4_reass+0x2f8>)
 80223dc:	f240 22ab 	movw	r2, #683	; 0x2ab
 80223e0:	497a      	ldr	r1, [pc, #488]	; (80225cc <ip4_reass+0x2fc>)
 80223e2:	487b      	ldr	r0, [pc, #492]	; (80225d0 <ip4_reass+0x300>)
 80223e4:	f002 f86a 	bl	80244bc <iprintf>
  if (reassdatagrams == ipr) {
 80223e8:	f8d9 3000 	ldr.w	r3, [r9]
 80223ec:	429c      	cmp	r4, r3
 80223ee:	f000 80b5 	beq.w	802255c <ip4_reass+0x28c>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80223f2:	4b75      	ldr	r3, [pc, #468]	; (80225c8 <ip4_reass+0x2f8>)
 80223f4:	f240 1245 	movw	r2, #325	; 0x145
 80223f8:	4976      	ldr	r1, [pc, #472]	; (80225d4 <ip4_reass+0x304>)
 80223fa:	4875      	ldr	r0, [pc, #468]	; (80225d0 <ip4_reass+0x300>)
 80223fc:	f002 f85e 	bl	80244bc <iprintf>
    prev->next = ipr->next;
 8022400:	6823      	ldr	r3, [r4, #0]
 8022402:	603b      	str	r3, [r7, #0]
 8022404:	deff      	udf	#255	; 0xff
    IPFRAG_STATS_INC(ip_frag.err);
 8022406:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
 802240a:	3301      	adds	r3, #1
 802240c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
  IPFRAG_STATS_INC(ip_frag.drop);
 8022410:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
  pbuf_free(p);
 8022412:	4630      	mov	r0, r6
  return NULL;
 8022414:	2600      	movs	r6, #0
  IPFRAG_STATS_INC(ip_frag.drop);
 8022416:	3301      	adds	r3, #1
 8022418:	86eb      	strh	r3, [r5, #54]	; 0x36
  pbuf_free(p);
 802241a:	f7f7 fdd9 	bl	8019fd0 <pbuf_free>
}
 802241e:	4630      	mov	r0, r6
 8022420:	b007      	add	sp, #28
 8022422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8022426:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022428:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 802242c:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022430:	f7f5 fd4a 	bl	8017ec8 <lwip_htons>
 8022434:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8022438:	f8d6 b004 	ldr.w	fp, [r6, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802243c:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 802243e:	f8cd b014 	str.w	fp, [sp, #20]
  iprh->end = (u16_t)(offset + len);
 8022442:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8022446:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 802244a:	f8ab 3006 	strh.w	r3, [fp, #6]
 802244e:	b29b      	uxth	r3, r3
 8022450:	4619      	mov	r1, r3
 8022452:	9304      	str	r3, [sp, #16]
  iprh->next_pbuf = NULL;
 8022454:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8022456:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8022458:	f88b 3000 	strb.w	r3, [fp]
 802245c:	f88b 3001 	strb.w	r3, [fp, #1]
 8022460:	f88b 3002 	strb.w	r3, [fp, #2]
 8022464:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 8022468:	d8b0      	bhi.n	80223cc <ip4_reass+0xfc>
  for (q = ipr->p; q != NULL;) {
 802246a:	6861      	ldr	r1, [r4, #4]
 802246c:	2900      	cmp	r1, #0
 802246e:	f000 80da 	beq.w	8022626 <ip4_reass+0x356>
  int valid = 1;
 8022472:	f04f 0a01 	mov.w	sl, #1
 8022476:	4694      	mov	ip, r2
 8022478:	e00e      	b.n	8022498 <ip4_reass+0x1c8>
    } else if (iprh->start == iprh_tmp->start) {
 802247a:	d0c9      	beq.n	8022410 <ip4_reass+0x140>
    } else if (iprh->start < iprh_tmp->end) {
 802247c:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8022480:	45f4      	cmp	ip, lr
 8022482:	d3c5      	bcc.n	8022410 <ip4_reass+0x140>
      if (iprh_prev != NULL) {
 8022484:	b122      	cbz	r2, 8022490 <ip4_reass+0x1c0>
        if (iprh_prev->end != iprh_tmp->start) {
 8022486:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8022488:	4282      	cmp	r2, r0
 802248a:	bf18      	it	ne
 802248c:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8022490:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8022492:	2900      	cmp	r1, #0
 8022494:	f000 8091 	beq.w	80225ba <ip4_reass+0x2ea>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8022498:	461a      	mov	r2, r3
 802249a:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 802249c:	8898      	ldrh	r0, [r3, #4]
 802249e:	4584      	cmp	ip, r0
 80224a0:	d2eb      	bcs.n	802247a <ip4_reass+0x1aa>
      iprh->next_pbuf = q;
 80224a2:	4613      	mov	r3, r2
 80224a4:	f8cb 1000 	str.w	r1, [fp]
 80224a8:	4662      	mov	r2, ip
 80224aa:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	d06d      	beq.n	802258c <ip4_reass+0x2bc>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80224b0:	9904      	ldr	r1, [sp, #16]
 80224b2:	88db      	ldrh	r3, [r3, #6]
 80224b4:	4281      	cmp	r1, r0
 80224b6:	d8ab      	bhi.n	8022410 <ip4_reass+0x140>
 80224b8:	429a      	cmp	r2, r3
 80224ba:	d3a9      	bcc.n	8022410 <ip4_reass+0x140>
        iprh_prev->next_pbuf = new_p;
 80224bc:	f8cc 6000 	str.w	r6, [ip]
        if (iprh_prev->end != iprh->start) {
 80224c0:	d069      	beq.n	8022596 <ip4_reass+0x2c6>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80224c2:	9b02      	ldr	r3, [sp, #8]
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	f000 80a0 	beq.w	802260a <ip4_reass+0x33a>
 80224ca:	7fa3      	ldrb	r3, [r4, #30]
 80224cc:	07db      	lsls	r3, r3, #31
 80224ce:	d46a      	bmi.n	80225a6 <ip4_reass+0x2d6>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80224d0:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 80224d4:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80224d6:	441f      	add	r7, r3
 80224d8:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80224dc:	e79f      	b.n	802241e <ip4_reass+0x14e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80224de:	89e0      	ldrh	r0, [r4, #14]
 80224e0:	f7f5 fcf2 	bl	8017ec8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80224e4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80224e8:	2800      	cmp	r0, #0
 80224ea:	f43f af4c 	beq.w	8022386 <ip4_reass+0xb6>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80224ee:	f8db 3000 	ldr.w	r3, [fp]
 80224f2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80224f6:	f8db 1008 	ldr.w	r1, [fp, #8]
 80224fa:	f8db 200c 	ldr.w	r2, [fp, #12]
 80224fe:	60a3      	str	r3, [r4, #8]
 8022500:	60e0      	str	r0, [r4, #12]
 8022502:	6121      	str	r1, [r4, #16]
 8022504:	6162      	str	r2, [r4, #20]
 8022506:	f8db 3010 	ldr.w	r3, [fp, #16]
 802250a:	61a3      	str	r3, [r4, #24]
 802250c:	e73b      	b.n	8022386 <ip4_reass+0xb6>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802250e:	4601      	mov	r1, r0
 8022510:	4658      	mov	r0, fp
 8022512:	f7ff fe8b 	bl	802222c <ip_reass_remove_oldest_datagram>
 8022516:	b128      	cbz	r0, 8022524 <ip4_reass+0x254>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8022518:	f8b8 3000 	ldrh.w	r3, [r8]
 802251c:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802251e:	2b0a      	cmp	r3, #10
 8022520:	f77f af08 	ble.w	8022334 <ip4_reass+0x64>
      IPFRAG_STATS_INC(ip_frag.memerr);
 8022524:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8022526:	3301      	adds	r3, #1
 8022528:	87ab      	strh	r3, [r5, #60]	; 0x3c
    if (ipr == NULL) {
 802252a:	e771      	b.n	8022410 <ip4_reass+0x140>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802252c:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8022530:	4925      	ldr	r1, [pc, #148]	; (80225c8 <ip4_reass+0x2f8>)
 8022532:	2005      	movs	r0, #5
 8022534:	f7f7 f80c 	bl	8019550 <memp_malloc_fn>
  if (ipr == NULL) {
 8022538:	4604      	mov	r4, r0
 802253a:	b1b8      	cbz	r0, 802256c <ip4_reass+0x29c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802253c:	2300      	movs	r3, #0
 802253e:	61e3      	str	r3, [r4, #28]
 8022540:	60a3      	str	r3, [r4, #8]
 8022542:	60e3      	str	r3, [r4, #12]
 8022544:	6123      	str	r3, [r4, #16]
 8022546:	6163      	str	r3, [r4, #20]
 8022548:	61a3      	str	r3, [r4, #24]
 802254a:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 802254c:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 8022550:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8022554:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8022556:	230f      	movs	r3, #15
 8022558:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 802255a:	e7c8      	b.n	80224ee <ip4_reass+0x21e>
    reassdatagrams = ipr->next;
 802255c:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 802255e:	4621      	mov	r1, r4
 8022560:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 8022562:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8022566:	f7f7 f837 	bl	80195d8 <memp_free>
}
 802256a:	e751      	b.n	8022410 <ip4_reass+0x140>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802256c:	4639      	mov	r1, r7
 802256e:	4658      	mov	r0, fp
 8022570:	f7ff fe5c 	bl	802222c <ip_reass_remove_oldest_datagram>
 8022574:	4287      	cmp	r7, r0
 8022576:	dcd5      	bgt.n	8022524 <ip4_reass+0x254>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022578:	f44f 7291 	mov.w	r2, #290	; 0x122
 802257c:	4912      	ldr	r1, [pc, #72]	; (80225c8 <ip4_reass+0x2f8>)
 802257e:	2005      	movs	r0, #5
 8022580:	f7f6 ffe6 	bl	8019550 <memp_malloc_fn>
    if (ipr == NULL)
 8022584:	4604      	mov	r4, r0
 8022586:	2800      	cmp	r0, #0
 8022588:	d1d8      	bne.n	802253c <ip4_reass+0x26c>
 802258a:	e7cb      	b.n	8022524 <ip4_reass+0x254>
        if (iprh->end > iprh_tmp->start) {
 802258c:	9b04      	ldr	r3, [sp, #16]
 802258e:	4283      	cmp	r3, r0
 8022590:	f63f af3e 	bhi.w	8022410 <ip4_reass+0x140>
        ipr->p = new_p;
 8022594:	6066      	str	r6, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022596:	9b02      	ldr	r3, [sp, #8]
 8022598:	b313      	cbz	r3, 80225e0 <ip4_reass+0x310>
 802259a:	7fa3      	ldrb	r3, [r4, #30]
 802259c:	07d9      	lsls	r1, r3, #31
 802259e:	d597      	bpl.n	80224d0 <ip4_reass+0x200>
    if (valid) {
 80225a0:	f1ba 0f00 	cmp.w	sl, #0
 80225a4:	d147      	bne.n	8022636 <ip4_reass+0x366>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80225a6:	f8b8 3000 	ldrh.w	r3, [r8]
 80225aa:	441f      	add	r7, r3
 80225ac:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 80225b0:	2600      	movs	r6, #0
}
 80225b2:	4630      	mov	r0, r6
 80225b4:	b007      	add	sp, #28
 80225b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 80225ba:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 80225bc:	601e      	str	r6, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80225be:	d180      	bne.n	80224c2 <ip4_reass+0x1f2>
 80225c0:	e7e9      	b.n	8022596 <ip4_reass+0x2c6>
 80225c2:	bf00      	nop
 80225c4:	2002db54 	.word	0x2002db54
 80225c8:	080e1ff8 	.word	0x080e1ff8
 80225cc:	080e2110 	.word	0x080e2110
 80225d0:	0802ac68 	.word	0x0802ac68
 80225d4:	080e2080 	.word	0x080e2080
 80225d8:	2002e00c 	.word	0x2002e00c
 80225dc:	2002e010 	.word	0x2002e010
    if (valid) {
 80225e0:	f1ba 0f00 	cmp.w	sl, #0
 80225e4:	d011      	beq.n	802260a <ip4_reass+0x33a>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80225e6:	6863      	ldr	r3, [r4, #4]
 80225e8:	b17b      	cbz	r3, 802260a <ip4_reass+0x33a>
 80225ea:	6859      	ldr	r1, [r3, #4]
 80225ec:	888b      	ldrh	r3, [r1, #4]
 80225ee:	b333      	cbz	r3, 802263e <ip4_reass+0x36e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80225f0:	f8b8 3000 	ldrh.w	r3, [r8]
 80225f4:	441f      	add	r7, r3
  if (is_last) {
 80225f6:	9b02      	ldr	r3, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80225f8:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	d1d7      	bne.n	80225b0 <ip4_reass+0x2e0>
 8022600:	e008      	b.n	8022614 <ip4_reass+0x344>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022602:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8022606:	4659      	mov	r1, fp
 8022608:	b1cb      	cbz	r3, 802263e <ip4_reass+0x36e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802260a:	f8b8 3000 	ldrh.w	r3, [r8]
 802260e:	441f      	add	r7, r3
 8022610:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022614:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8022616:	9a03      	ldr	r2, [sp, #12]
 8022618:	9901      	ldr	r1, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802261a:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 802261e:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022620:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8022622:	83a2      	strh	r2, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8022624:	e7c4      	b.n	80225b0 <ip4_reass+0x2e0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022626:	9b02      	ldr	r3, [sp, #8]
      ipr->p = new_p;
 8022628:	6066      	str	r6, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 802262a:	2b00      	cmp	r3, #0
 802262c:	d0e9      	beq.n	8022602 <ip4_reass+0x332>
 802262e:	7fa3      	ldrb	r3, [r4, #30]
 8022630:	07da      	lsls	r2, r3, #31
 8022632:	f57f af4d 	bpl.w	80224d0 <ip4_reass+0x200>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022636:	6863      	ldr	r3, [r4, #4]
 8022638:	2b00      	cmp	r3, #0
 802263a:	d0b4      	beq.n	80225a6 <ip4_reass+0x2d6>
 802263c:	e7d5      	b.n	80225ea <ip4_reass+0x31a>
        q = iprh->next_pbuf;
 802263e:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 8022642:	b153      	cbz	r3, 802265a <ip4_reass+0x38a>
 8022644:	9a05      	ldr	r2, [sp, #20]
          iprh = (struct ip_reass_helper *)q->payload;
 8022646:	4610      	mov	r0, r2
 8022648:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 802264a:	88c0      	ldrh	r0, [r0, #6]
 802264c:	8893      	ldrh	r3, [r2, #4]
 802264e:	4298      	cmp	r0, r3
 8022650:	d1ce      	bne.n	80225f0 <ip4_reass+0x320>
          q = iprh->next_pbuf;
 8022652:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 8022654:	2b00      	cmp	r3, #0
 8022656:	d1f6      	bne.n	8022646 <ip4_reass+0x376>
 8022658:	9205      	str	r2, [sp, #20]
          LWIP_ASSERT("sanity check",
 802265a:	9b05      	ldr	r3, [sp, #20]
 802265c:	428b      	cmp	r3, r1
 802265e:	d110      	bne.n	8022682 <ip4_reass+0x3b2>
 8022660:	4b40      	ldr	r3, [pc, #256]	; (8022764 <ip4_reass+0x494>)
 8022662:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8022666:	4940      	ldr	r1, [pc, #256]	; (8022768 <ip4_reass+0x498>)
 8022668:	4840      	ldr	r0, [pc, #256]	; (802276c <ip4_reass+0x49c>)
 802266a:	f001 ff27 	bl	80244bc <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 802266e:	9b05      	ldr	r3, [sp, #20]
 8022670:	681b      	ldr	r3, [r3, #0]
 8022672:	b133      	cbz	r3, 8022682 <ip4_reass+0x3b2>
 8022674:	4b3b      	ldr	r3, [pc, #236]	; (8022764 <ip4_reass+0x494>)
 8022676:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 802267a:	493d      	ldr	r1, [pc, #244]	; (8022770 <ip4_reass+0x4a0>)
 802267c:	483b      	ldr	r0, [pc, #236]	; (802276c <ip4_reass+0x49c>)
 802267e:	f001 ff1d 	bl	80244bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022682:	f8b8 3000 	ldrh.w	r3, [r8]
 8022686:	441f      	add	r7, r3
  if (is_last) {
 8022688:	9b02      	ldr	r3, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802268a:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 802268e:	2b00      	cmp	r3, #0
 8022690:	d15c      	bne.n	802274c <ip4_reass+0x47c>
    u16_t datagram_len = (u16_t)(offset + len);
 8022692:	9b01      	ldr	r3, [sp, #4]
 8022694:	9803      	ldr	r0, [sp, #12]
 8022696:	4418      	add	r0, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022698:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 802269a:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802269c:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 80226a0:	83a0      	strh	r0, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80226a2:	77a3      	strb	r3, [r4, #30]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80226a4:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80226a6:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80226a8:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80226aa:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80226ac:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80226ae:	68a3      	ldr	r3, [r4, #8]
 80226b0:	6921      	ldr	r1, [r4, #16]
 80226b2:	6962      	ldr	r2, [r4, #20]
 80226b4:	6075      	str	r5, [r6, #4]
 80226b6:	60b1      	str	r1, [r6, #8]
 80226b8:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80226ba:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80226bc:	6033      	str	r3, [r6, #0]
 80226be:	69a3      	ldr	r3, [r4, #24]
 80226c0:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80226c2:	f7f5 fc01 	bl	8017ec8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80226c6:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80226c8:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80226ca:	2114      	movs	r1, #20
 80226cc:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 80226ce:	71b3      	strb	r3, [r6, #6]
 80226d0:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80226d2:	72b3      	strb	r3, [r6, #10]
 80226d4:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80226d6:	f7f6 f99f 	bl	8018a18 <inet_chksum>
 80226da:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 80226dc:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80226de:	b15d      	cbz	r5, 80226f8 <ip4_reass+0x428>
      iprh = (struct ip_reass_helper *)r->payload;
 80226e0:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80226e2:	4628      	mov	r0, r5
 80226e4:	2114      	movs	r1, #20
 80226e6:	f7f7 fc03 	bl	8019ef0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80226ea:	4629      	mov	r1, r5
 80226ec:	4630      	mov	r0, r6
 80226ee:	f7f7 fca1 	bl	801a034 <pbuf_cat>
      r = iprh->next_pbuf;
 80226f2:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 80226f4:	2d00      	cmp	r5, #0
 80226f6:	d1f3      	bne.n	80226e0 <ip4_reass+0x410>
    if (ipr == reassdatagrams) {
 80226f8:	f8d9 5000 	ldr.w	r5, [r9]
 80226fc:	42a5      	cmp	r5, r4
 80226fe:	d005      	beq.n	802270c <ip4_reass+0x43c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8022700:	b335      	cbz	r5, 8022750 <ip4_reass+0x480>
        if (ipr_prev->next == ipr) {
 8022702:	682b      	ldr	r3, [r5, #0]
 8022704:	42a3      	cmp	r3, r4
 8022706:	d014      	beq.n	8022732 <ip4_reass+0x462>
 8022708:	461d      	mov	r5, r3
 802270a:	e7f9      	b.n	8022700 <ip4_reass+0x430>
    reassdatagrams = ipr->next;
 802270c:	6823      	ldr	r3, [r4, #0]
 802270e:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8022712:	4621      	mov	r1, r4
 8022714:	2005      	movs	r0, #5
 8022716:	f7f6 ff5f 	bl	80195d8 <memp_free>
    clen = pbuf_clen(p);
 802271a:	4630      	mov	r0, r6
 802271c:	f7f7 fc6c 	bl	8019ff8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8022720:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 8022724:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8022726:	4283      	cmp	r3, r0
 8022728:	d306      	bcc.n	8022738 <ip4_reass+0x468>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802272a:	1b1b      	subs	r3, r3, r4
 802272c:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8022730:	e675      	b.n	802241e <ip4_reass+0x14e>
    prev->next = ipr->next;
 8022732:	6823      	ldr	r3, [r4, #0]
 8022734:	602b      	str	r3, [r5, #0]
 8022736:	e7ec      	b.n	8022712 <ip4_reass+0x442>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8022738:	4b0a      	ldr	r3, [pc, #40]	; (8022764 <ip4_reass+0x494>)
 802273a:	f240 229b 	movw	r2, #667	; 0x29b
 802273e:	490d      	ldr	r1, [pc, #52]	; (8022774 <ip4_reass+0x4a4>)
 8022740:	480a      	ldr	r0, [pc, #40]	; (802276c <ip4_reass+0x49c>)
 8022742:	f001 febb 	bl	80244bc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8022746:	f8b8 3000 	ldrh.w	r3, [r8]
 802274a:	e7ee      	b.n	802272a <ip4_reass+0x45a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 802274c:	8ba0      	ldrh	r0, [r4, #28]
 802274e:	e7a9      	b.n	80226a4 <ip4_reass+0x3d4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022750:	4b04      	ldr	r3, [pc, #16]	; (8022764 <ip4_reass+0x494>)
 8022752:	f240 1245 	movw	r2, #325	; 0x145
 8022756:	4908      	ldr	r1, [pc, #32]	; (8022778 <ip4_reass+0x4a8>)
 8022758:	4804      	ldr	r0, [pc, #16]	; (802276c <ip4_reass+0x49c>)
 802275a:	f001 feaf 	bl	80244bc <iprintf>
    prev->next = ipr->next;
 802275e:	6823      	ldr	r3, [r4, #0]
 8022760:	602b      	str	r3, [r5, #0]
 8022762:	deff      	udf	#255	; 0xff
 8022764:	080e1ff8 	.word	0x080e1ff8
 8022768:	080e20c0 	.word	0x080e20c0
 802276c:	0802ac68 	.word	0x0802ac68
 8022770:	080e20d0 	.word	0x080e20d0
 8022774:	080e20f4 	.word	0x080e20f4
 8022778:	080e2080 	.word	0x080e2080

0802277c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 802277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022780:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 8022782:	b08f      	sub	sp, #60	; 0x3c
 8022784:	4605      	mov	r5, r0
 8022786:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022788:	f1b3 0214 	subs.w	r2, r3, #20
{
 802278c:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802278e:	bf48      	it	mi
 8022790:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8022794:	6843      	ldr	r3, [r0, #4]
 8022796:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022798:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 802279c:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802279e:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80227a0:	f003 030f 	and.w	r3, r3, #15
 80227a4:	2b05      	cmp	r3, #5
 80227a6:	ea4f 0683 	mov.w	r6, r3, lsl #2
 80227aa:	f040 80ee 	bne.w	802298a <ip4_frag+0x20e>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80227ae:	8943      	ldrh	r3, [r0, #10]
 80227b0:	2b13      	cmp	r3, #19
 80227b2:	f240 80ed 	bls.w	8022990 <ip4_frag+0x214>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80227b6:	9b04      	ldr	r3, [sp, #16]
 80227b8:	88d8      	ldrh	r0, [r3, #6]
 80227ba:	f7f5 fb85 	bl	8017ec8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80227be:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 80227c0:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 80227c4:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 80227c6:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 80227c8:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80227cc:	b29b      	uxth	r3, r3
 80227ce:	920d      	str	r2, [sp, #52]	; 0x34
 80227d0:	9305      	str	r3, [sp, #20]

  while (left) {
 80227d2:	2b00      	cmp	r3, #0
 80227d4:	f000 80a1 	beq.w	802291a <ip4_frag+0x19e>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80227d8:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 80227da:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80227dc:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80229b4 <ip4_frag+0x238>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80227e0:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80227e2:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80229bc <ip4_frag+0x240>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80227e6:	b29b      	uxth	r3, r3
 80227e8:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80227ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80227ee:	2114      	movs	r1, #20
 80227f0:	200e      	movs	r0, #14
 80227f2:	f7f7 fa37 	bl	8019c64 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80227f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227f8:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 80227fa:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80227fc:	4293      	cmp	r3, r2
 80227fe:	bf28      	it	cs
 8022800:	4613      	movcs	r3, r2
 8022802:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 8022804:	2800      	cmp	r0, #0
 8022806:	f000 80bd 	beq.w	8022984 <ip4_frag+0x208>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802280a:	8943      	ldrh	r3, [r0, #10]
 802280c:	2b13      	cmp	r3, #19
 802280e:	f240 8095 	bls.w	802293c <ip4_frag+0x1c0>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8022812:	9904      	ldr	r1, [sp, #16]
 8022814:	9b03      	ldr	r3, [sp, #12]
 8022816:	680a      	ldr	r2, [r1, #0]
 8022818:	685b      	ldr	r3, [r3, #4]
 802281a:	684f      	ldr	r7, [r1, #4]
 802281c:	6888      	ldr	r0, [r1, #8]
 802281e:	68c9      	ldr	r1, [r1, #12]
 8022820:	605f      	str	r7, [r3, #4]
 8022822:	60d9      	str	r1, [r3, #12]
 8022824:	9904      	ldr	r1, [sp, #16]
 8022826:	601a      	str	r2, [r3, #0]
 8022828:	6098      	str	r0, [r3, #8]
 802282a:	690a      	ldr	r2, [r1, #16]
 802282c:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 802282e:	9b03      	ldr	r3, [sp, #12]
 8022830:	685b      	ldr	r3, [r3, #4]
 8022832:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 8022834:	9b06      	ldr	r3, [sp, #24]
 8022836:	2b00      	cmp	r3, #0
 8022838:	d034      	beq.n	80228a4 <ip4_frag+0x128>
 802283a:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 802283c:	896b      	ldrh	r3, [r5, #10]
 802283e:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022840:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8022842:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022844:	d372      	bcc.n	802292c <ip4_frag+0x1b0>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8022846:	454c      	cmp	r4, r9
 8022848:	bf28      	it	cs
 802284a:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 802284c:	2c00      	cmp	r4, #0
 802284e:	d066      	beq.n	802291e <ip4_frag+0x1a2>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8022850:	4641      	mov	r1, r8
 8022852:	f240 22bd 	movw	r2, #701	; 0x2bd
 8022856:	2006      	movs	r0, #6
 8022858:	f7f6 fe7a 	bl	8019550 <memp_malloc_fn>
 802285c:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802285e:	2241      	movs	r2, #65	; 0x41
 8022860:	4621      	mov	r1, r4
 8022862:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8022864:	f1bb 0f00 	cmp.w	fp, #0
 8022868:	d073      	beq.n	8022952 <ip4_frag+0x1d6>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802286a:	9401      	str	r4, [sp, #4]
 802286c:	465b      	mov	r3, fp
 802286e:	686f      	ldr	r7, [r5, #4]
 8022870:	4437      	add	r7, r6
 8022872:	9700      	str	r7, [sp, #0]
 8022874:	f7f7 fa94 	bl	8019da0 <pbuf_alloced_custom>
 8022878:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 802287a:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 802287c:	2f00      	cmp	r7, #0
 802287e:	d072      	beq.n	8022966 <ip4_frag+0x1ea>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8022880:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 8022884:	f7f7 fbc2 	bl	801a00c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022888:	4a46      	ldr	r2, [pc, #280]	; (80229a4 <ip4_frag+0x228>)
      pbuf_cat(rambuf, newpbuf);
 802288a:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802288c:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8022890:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 8022892:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022896:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 802289a:	f7f7 fbcb 	bl	801a034 <pbuf_cat>
      if (left_to_copy) {
 802289e:	f1b9 0f00 	cmp.w	r9, #0
 80228a2:	d13c      	bne.n	802291e <ip4_frag+0x1a2>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80228a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 80228a6:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80228a8:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 80228aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 80228ac:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 80228ae:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 80228b2:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 80228b4:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 80228b6:	4293      	cmp	r3, r2
 80228b8:	dd48      	ble.n	802294c <ip4_frag+0x1d0>
 80228ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80228bc:	2b00      	cmp	r3, #0
 80228be:	d145      	bne.n	802294c <ip4_frag+0x1d0>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80228c0:	f7f5 fb02 	bl	8017ec8 <lwip_htons>
 80228c4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80228c6:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80228c8:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80228ca:	f103 0014 	add.w	r0, r3, #20
 80228ce:	b280      	uxth	r0, r0
 80228d0:	f7f5 fafa 	bl	8017ec8 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 80228d4:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80228d6:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80228d8:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 80228da:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80228dc:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 80228de:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80228e0:	f7f6 f89a 	bl	8018a18 <inet_chksum>
 80228e4:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80228e6:	9f03      	ldr	r7, [sp, #12]
 80228e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80228ea:	4639      	mov	r1, r7
 80228ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80228ee:	6943      	ldr	r3, [r0, #20]
 80228f0:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 80228f2:	4a2d      	ldr	r2, [pc, #180]	; (80229a8 <ip4_frag+0x22c>)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80228f4:	4638      	mov	r0, r7
    IPFRAG_STATS_INC(ip_frag.xmit);
 80228f6:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 80228f8:	3301      	adds	r3, #1
 80228fa:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 80228fc:	f7f7 fb68 	bl	8019fd0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8022900:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8022904:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8022906:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 802290a:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 802290c:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 802290e:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8022910:	b292      	uxth	r2, r2
 8022912:	9207      	str	r2, [sp, #28]
  while (left) {
 8022914:	2b00      	cmp	r3, #0
 8022916:	f47f af68 	bne.w	80227ea <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802291a:	2000      	movs	r0, #0
 802291c:	e020      	b.n	8022960 <ip4_frag+0x1e4>
        p = p->next;
 802291e:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 8022920:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 8022922:	896b      	ldrh	r3, [r5, #10]
 8022924:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022926:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8022928:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802292a:	d28c      	bcs.n	8022846 <ip4_frag+0xca>
 802292c:	4643      	mov	r3, r8
 802292e:	f240 322d 	movw	r2, #813	; 0x32d
 8022932:	491e      	ldr	r1, [pc, #120]	; (80229ac <ip4_frag+0x230>)
 8022934:	4650      	mov	r0, sl
 8022936:	f001 fdc1 	bl	80244bc <iprintf>
 802293a:	e784      	b.n	8022846 <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802293c:	4643      	mov	r3, r8
 802293e:	f44f 7249 	mov.w	r2, #804	; 0x324
 8022942:	491b      	ldr	r1, [pc, #108]	; (80229b0 <ip4_frag+0x234>)
 8022944:	4650      	mov	r0, sl
 8022946:	f001 fdb9 	bl	80244bc <iprintf>
 802294a:	e762      	b.n	8022812 <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 802294c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8022950:	e7b6      	b.n	80228c0 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8022952:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022956:	4658      	mov	r0, fp
 8022958:	f7f7 fb3a 	bl	8019fd0 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802295c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8022960:	b00f      	add	sp, #60	; 0x3c
 8022962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 8022966:	46d9      	mov	r9, fp
 8022968:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802296c:	2006      	movs	r0, #6
 802296e:	4649      	mov	r1, r9
 8022970:	f7f6 fe32 	bl	80195d8 <memp_free>
        pbuf_free(rambuf);
 8022974:	4658      	mov	r0, fp
 8022976:	f7f7 fb2b 	bl	8019fd0 <pbuf_free>
  return ERR_MEM;
 802297a:	f04f 30ff 	mov.w	r0, #4294967295
}
 802297e:	b00f      	add	sp, #60	; 0x3c
 8022980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8022984:	f04f 30ff 	mov.w	r0, #4294967295
 8022988:	e7ea      	b.n	8022960 <ip4_frag+0x1e4>
    return ERR_VAL;
 802298a:	f06f 0005 	mvn.w	r0, #5
 802298e:	e7e7      	b.n	8022960 <ip4_frag+0x1e4>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8022990:	4b08      	ldr	r3, [pc, #32]	; (80229b4 <ip4_frag+0x238>)
 8022992:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8022996:	4908      	ldr	r1, [pc, #32]	; (80229b8 <ip4_frag+0x23c>)
 8022998:	4808      	ldr	r0, [pc, #32]	; (80229bc <ip4_frag+0x240>)
 802299a:	f001 fd8f 	bl	80244bc <iprintf>
 802299e:	f06f 0005 	mvn.w	r0, #5
 80229a2:	e7dd      	b.n	8022960 <ip4_frag+0x1e4>
 80229a4:	080220b9 	.word	0x080220b9
 80229a8:	2002db54 	.word	0x2002db54
 80229ac:	080e216c 	.word	0x080e216c
 80229b0:	080e214c 	.word	0x080e214c
 80229b4:	080e1ff8 	.word	0x080e1ff8
 80229b8:	080e2130 	.word	0x080e2130
 80229bc:	0802ac68 	.word	0x0802ac68

080229c0 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80229c0:	8943      	ldrh	r3, [r0, #10]
 80229c2:	2b0e      	cmp	r3, #14
{
 80229c4:	b570      	push	{r4, r5, r6, lr}
 80229c6:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 80229c8:	d91b      	bls.n	8022a02 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80229ca:	7bc3      	ldrb	r3, [r0, #15]
 80229cc:	460d      	mov	r5, r1
 80229ce:	b91b      	cbnz	r3, 80229d8 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 80229d0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 80229d4:	3301      	adds	r3, #1
 80229d6:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80229d8:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80229da:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 80229dc:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 80229de:	07d9      	lsls	r1, r3, #31
 80229e0:	d50a      	bpl.n	80229f8 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80229e2:	2b01      	cmp	r3, #1
 80229e4:	d039      	beq.n	8022a5a <ethernet_input+0x9a>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80229e6:	2206      	movs	r2, #6
 80229e8:	4924      	ldr	r1, [pc, #144]	; (8022a7c <ethernet_input+0xbc>)
 80229ea:	f000 fd93 	bl	8023514 <memcmp>
 80229ee:	b918      	cbnz	r0, 80229f8 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80229f0:	7b63      	ldrb	r3, [r4, #13]
 80229f2:	f043 0308 	orr.w	r3, r3, #8
 80229f6:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 80229f8:	2e08      	cmp	r6, #8
 80229fa:	d01f      	beq.n	8022a3c <ethernet_input+0x7c>
 80229fc:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8022a00:	d00b      	beq.n	8022a1a <ethernet_input+0x5a>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8022a02:	4b1f      	ldr	r3, [pc, #124]	; (8022a80 <ethernet_input+0xc0>)
 8022a04:	8d19      	ldrh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8022a06:	8bda      	ldrh	r2, [r3, #30]
      ETHARP_STATS_INC(etharp.proterr);
 8022a08:	3101      	adds	r1, #1
      ETHARP_STATS_INC(etharp.drop);
 8022a0a:	3201      	adds	r2, #1
      ETHARP_STATS_INC(etharp.proterr);
 8022a0c:	8519      	strh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8022a0e:	83da      	strh	r2, [r3, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8022a10:	4620      	mov	r0, r4
 8022a12:	f7f7 fadd 	bl	8019fd0 <pbuf_free>
  return ERR_OK;
}
 8022a16:	2000      	movs	r0, #0
 8022a18:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022a1a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8022a1e:	071b      	lsls	r3, r3, #28
 8022a20:	d5f6      	bpl.n	8022a10 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022a22:	210e      	movs	r1, #14
 8022a24:	4620      	mov	r0, r4
 8022a26:	f7f7 fa63 	bl	8019ef0 <pbuf_remove_header>
 8022a2a:	b308      	cbz	r0, 8022a70 <ethernet_input+0xb0>
        ETHARP_STATS_INC(etharp.lenerr);
 8022a2c:	4b14      	ldr	r3, [pc, #80]	; (8022a80 <ethernet_input+0xc0>)
 8022a2e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8022a30:	8bda      	ldrh	r2, [r3, #30]
        ETHARP_STATS_INC(etharp.lenerr);
 8022a32:	3101      	adds	r1, #1
        ETHARP_STATS_INC(etharp.drop);
 8022a34:	3201      	adds	r2, #1
        ETHARP_STATS_INC(etharp.lenerr);
 8022a36:	8459      	strh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8022a38:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8022a3a:	e7e9      	b.n	8022a10 <ethernet_input+0x50>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022a3c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8022a40:	071a      	lsls	r2, r3, #28
 8022a42:	d5e5      	bpl.n	8022a10 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022a44:	210e      	movs	r1, #14
 8022a46:	4620      	mov	r0, r4
 8022a48:	f7f7 fa52 	bl	8019ef0 <pbuf_remove_header>
 8022a4c:	2800      	cmp	r0, #0
 8022a4e:	d1df      	bne.n	8022a10 <ethernet_input+0x50>
        ip4_input(p, netif);
 8022a50:	4629      	mov	r1, r5
 8022a52:	4620      	mov	r0, r4
 8022a54:	f7ff f86e 	bl	8021b34 <ip4_input>
      break;
 8022a58:	e7dd      	b.n	8022a16 <ethernet_input+0x56>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022a5a:	7843      	ldrb	r3, [r0, #1]
 8022a5c:	2b00      	cmp	r3, #0
 8022a5e:	d1cb      	bne.n	80229f8 <ethernet_input+0x38>
 8022a60:	7883      	ldrb	r3, [r0, #2]
 8022a62:	2b5e      	cmp	r3, #94	; 0x5e
 8022a64:	d1c8      	bne.n	80229f8 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8022a66:	7b63      	ldrb	r3, [r4, #13]
 8022a68:	f043 0310 	orr.w	r3, r3, #16
 8022a6c:	7363      	strb	r3, [r4, #13]
 8022a6e:	e7c3      	b.n	80229f8 <ethernet_input+0x38>
        etharp_input(p, netif);
 8022a70:	4629      	mov	r1, r5
 8022a72:	4620      	mov	r0, r4
 8022a74:	f7fe fc20 	bl	80212b8 <etharp_input>
      break;
 8022a78:	e7cd      	b.n	8022a16 <ethernet_input+0x56>
 8022a7a:	bf00      	nop
 8022a7c:	080e21e8 	.word	0x080e21e8
 8022a80:	2002db54 	.word	0x2002db54

08022a84 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8022a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a88:	460c      	mov	r4, r1
 8022a8a:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8022a8c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8022a90:	4616      	mov	r6, r2
 8022a92:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8022a94:	f7f5 fa18 	bl	8017ec8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8022a98:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8022a9a:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8022a9c:	4620      	mov	r0, r4
 8022a9e:	f7f7 f9f3 	bl	8019e88 <pbuf_add_header>
 8022aa2:	b9e0      	cbnz	r0, 8022ade <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8022aa4:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8022aa6:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8022aaa:	683b      	ldr	r3, [r7, #0]
 8022aac:	600b      	str	r3, [r1, #0]
 8022aae:	88bb      	ldrh	r3, [r7, #4]
 8022ab0:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8022ab2:	6833      	ldr	r3, [r6, #0]
 8022ab4:	f8c1 3006 	str.w	r3, [r1, #6]
 8022ab8:	88b3      	ldrh	r3, [r6, #4]
 8022aba:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8022abc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8022ac0:	2b06      	cmp	r3, #6
 8022ac2:	d006      	beq.n	8022ad2 <ethernet_output+0x4e>
 8022ac4:	4b0a      	ldr	r3, [pc, #40]	; (8022af0 <ethernet_output+0x6c>)
 8022ac6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8022aca:	490a      	ldr	r1, [pc, #40]	; (8022af4 <ethernet_output+0x70>)
 8022acc:	480a      	ldr	r0, [pc, #40]	; (8022af8 <ethernet_output+0x74>)
 8022ace:	f001 fcf5 	bl	80244bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022ad2:	69ab      	ldr	r3, [r5, #24]
 8022ad4:	4621      	mov	r1, r4
 8022ad6:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8022ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8022adc:	4718      	bx	r3
  LINK_STATS_INC(link.lenerr);
 8022ade:	4a07      	ldr	r2, [pc, #28]	; (8022afc <ethernet_output+0x78>)
}
 8022ae0:	f06f 0001 	mvn.w	r0, #1
  LINK_STATS_INC(link.lenerr);
 8022ae4:	8953      	ldrh	r3, [r2, #10]
 8022ae6:	3301      	adds	r3, #1
 8022ae8:	8153      	strh	r3, [r2, #10]
}
 8022aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022aee:	bf00      	nop
 8022af0:	080e217c 	.word	0x080e217c
 8022af4:	080e21b4 	.word	0x080e21b4
 8022af8:	0802ac68 	.word	0x0802ac68
 8022afc:	2002db54 	.word	0x2002db54

08022b00 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8022b00:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8022b02:	2300      	movs	r3, #0
{
 8022b04:	b085      	sub	sp, #20
 8022b06:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8022b08:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8022b0a:	4619      	mov	r1, r3
{
 8022b0c:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8022b0e:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8022b10:	e9cd 5200 	strd	r5, r2, [sp]
 8022b14:	e9cd 3302 	strd	r3, r3, [sp, #8]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8022b18:	f7f1 fc74 	bl	8014404 <osMessageCreate>
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 8022b1c:	4a0a      	ldr	r2, [pc, #40]	; (8022b48 <sys_mbox_new+0x48>)
 8022b1e:	f8b2 3100 	ldrh.w	r3, [r2, #256]	; 0x100
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 8022b22:	f8b2 1102 	ldrh.w	r1, [r2, #258]	; 0x102
  ++lwip_stats.sys.mbox.used;
 8022b26:	3301      	adds	r3, #1
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8022b28:	6020      	str	r0, [r4, #0]
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8022b2a:	fab0 f080 	clz	r0, r0
  ++lwip_stats.sys.mbox.used;
 8022b2e:	b29b      	uxth	r3, r3
  if(*mbox == NULL)
 8022b30:	0940      	lsrs	r0, r0, #5
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 8022b32:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mbox.used;
 8022b34:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
    return ERR_MEM;

  return ERR_OK;
}
 8022b38:	f1c0 0000 	rsb	r0, r0, #0
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 8022b3c:	bf38      	it	cc
 8022b3e:	f8a2 3102 	strhcc.w	r3, [r2, #258]	; 0x102
}
 8022b42:	b005      	add	sp, #20
 8022b44:	bd30      	pop	{r4, r5, pc}
 8022b46:	bf00      	nop
 8022b48:	2002db54 	.word	0x2002db54

08022b4c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022b4c:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8022b4e:	2200      	movs	r2, #0
 8022b50:	6800      	ldr	r0, [r0, #0]
 8022b52:	f7f1 fc6b 	bl	801442c <osMessagePut>
 8022b56:	b900      	cbnz	r0, 8022b5a <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8022b58:	bd08      	pop	{r3, pc}
    lwip_stats.sys.mbox.err++;
 8022b5a:	4a04      	ldr	r2, [pc, #16]	; (8022b6c <sys_mbox_trypost+0x20>)
 8022b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8022b60:	f8b2 3104 	ldrh.w	r3, [r2, #260]	; 0x104
 8022b64:	3301      	adds	r3, #1
 8022b66:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
}
 8022b6a:	bd08      	pop	{r3, pc}
 8022b6c:	2002db54 	.word	0x2002db54

08022b70 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8022b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b72:	4614      	mov	r4, r2
 8022b74:	b085      	sub	sp, #20
 8022b76:	4605      	mov	r5, r0
 8022b78:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8022b7a:	f7f1 fb09 	bl	8014190 <osKernelSysTick>
 8022b7e:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8022b80:	b15c      	cbz	r4, 8022b9a <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8022b82:	4622      	mov	r2, r4
 8022b84:	6829      	ldr	r1, [r5, #0]
 8022b86:	a801      	add	r0, sp, #4
 8022b88:	f7f1 fc7c 	bl	8014484 <osMessageGet>

    if(event.status == osEventMessage)
 8022b8c:	9b01      	ldr	r3, [sp, #4]
 8022b8e:	2b10      	cmp	r3, #16
 8022b90:	d009      	beq.n	8022ba6 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022b92:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022b96:	b005      	add	sp, #20
 8022b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8022b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8022b9e:	6829      	ldr	r1, [r5, #0]
 8022ba0:	a801      	add	r0, sp, #4
 8022ba2:	f7f1 fc6f 	bl	8014484 <osMessageGet>
    *msg = (void *)event.value.v;
 8022ba6:	9b02      	ldr	r3, [sp, #8]
 8022ba8:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 8022baa:	f7f1 faf1 	bl	8014190 <osKernelSysTick>
 8022bae:	1b80      	subs	r0, r0, r6
}
 8022bb0:	b005      	add	sp, #20
 8022bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022bb4 <sys_mbox_valid>:
 8022bb4:	6800      	ldr	r0, [r0, #0]
 8022bb6:	3800      	subs	r0, #0
 8022bb8:	bf18      	it	ne
 8022bba:	2001      	movne	r0, #1
 8022bbc:	4770      	bx	lr
 8022bbe:	bf00      	nop

08022bc0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8022bc0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8022bc2:	4803      	ldr	r0, [pc, #12]	; (8022bd0 <sys_init+0x10>)
 8022bc4:	f7f1 fb48 	bl	8014258 <osMutexCreate>
 8022bc8:	4b02      	ldr	r3, [pc, #8]	; (8022bd4 <sys_init+0x14>)
 8022bca:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8022bcc:	bd08      	pop	{r3, pc}
 8022bce:	bf00      	nop
 8022bd0:	080e21f8 	.word	0x080e21f8
 8022bd4:	2002e018 	.word	0x2002e018

08022bd8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8022bd8:	b530      	push	{r4, r5, lr}
 8022bda:	b083      	sub	sp, #12
 8022bdc:	4605      	mov	r5, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8022bde:	2400      	movs	r4, #0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022be0:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8022be2:	e9cd 4400 	strd	r4, r4, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022be6:	f7f1 fb37 	bl	8014258 <osMutexCreate>
#endif

  if(*mutex == NULL)
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 8022bea:	4a0d      	ldr	r2, [pc, #52]	; (8022c20 <sys_mutex_new+0x48>)
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022bec:	6028      	str	r0, [r5, #0]
  if(*mutex == NULL)
 8022bee:	b170      	cbz	r0, 8022c0e <sys_mutex_new+0x36>
#endif /* SYS_STATS */
    return ERR_MEM;
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 8022bf0:	f8b2 30fa 	ldrh.w	r3, [r2, #250]	; 0xfa
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8022bf4:	4620      	mov	r0, r4
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8022bf6:	f8b2 10fc 	ldrh.w	r1, [r2, #252]	; 0xfc
  ++lwip_stats.sys.mutex.used;
 8022bfa:	3301      	adds	r3, #1
 8022bfc:	b29b      	uxth	r3, r3
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8022bfe:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mutex.used;
 8022c00:	f8a2 30fa 	strh.w	r3, [r2, #250]	; 0xfa
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 8022c04:	bf38      	it	cc
 8022c06:	f8a2 30fc 	strhcc.w	r3, [r2, #252]	; 0xfc
}
 8022c0a:	b003      	add	sp, #12
 8022c0c:	bd30      	pop	{r4, r5, pc}
    ++lwip_stats.sys.mutex.err;
 8022c0e:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 8022c12:	f04f 30ff 	mov.w	r0, #4294967295
    ++lwip_stats.sys.mutex.err;
 8022c16:	3301      	adds	r3, #1
 8022c18:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 8022c1c:	e7f5      	b.n	8022c0a <sys_mutex_new+0x32>
 8022c1e:	bf00      	nop
 8022c20:	2002db54 	.word	0x2002db54

08022c24 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8022c24:	f04f 31ff 	mov.w	r1, #4294967295
 8022c28:	6800      	ldr	r0, [r0, #0]
 8022c2a:	f7f1 bb1d 	b.w	8014268 <osMutexWait>
 8022c2e:	bf00      	nop

08022c30 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8022c30:	6800      	ldr	r0, [r0, #0]
 8022c32:	f7f1 bb45 	b.w	80142c0 <osMutexRelease>
 8022c36:	bf00      	nop

08022c38 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8022c38:	b510      	push	{r4, lr}
 8022c3a:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8022c3c:	2400      	movs	r4, #0
 8022c3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8022c42:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8022c44:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8022c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 8022c48:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8022c4a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8022c4e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8022c52:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 8022c56:	f7f1 faa3 	bl	80141a0 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8022c5a:	b008      	add	sp, #32
 8022c5c:	bd10      	pop	{r4, pc}
 8022c5e:	bf00      	nop

08022c60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022c60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022c62:	2200      	movs	r2, #0
 8022c64:	4917      	ldr	r1, [pc, #92]	; (8022cc4 <MX_USB_DEVICE_Init+0x64>)
 8022c66:	4818      	ldr	r0, [pc, #96]	; (8022cc8 <MX_USB_DEVICE_Init+0x68>)
 8022c68:	f7f0 fe04 	bl	8013874 <USBD_Init>
 8022c6c:	b970      	cbnz	r0, 8022c8c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022c6e:	4917      	ldr	r1, [pc, #92]	; (8022ccc <MX_USB_DEVICE_Init+0x6c>)
 8022c70:	4815      	ldr	r0, [pc, #84]	; (8022cc8 <MX_USB_DEVICE_Init+0x68>)
 8022c72:	f7f0 fe17 	bl	80138a4 <USBD_RegisterClass>
 8022c76:	b988      	cbnz	r0, 8022c9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8022c78:	4915      	ldr	r1, [pc, #84]	; (8022cd0 <MX_USB_DEVICE_Init+0x70>)
 8022c7a:	4813      	ldr	r0, [pc, #76]	; (8022cc8 <MX_USB_DEVICE_Init+0x68>)
 8022c7c:	f7f0 fdc4 	bl	8013808 <USBD_CDC_RegisterInterface>
 8022c80:	b9a0      	cbnz	r0, 8022cac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022c82:	4811      	ldr	r0, [pc, #68]	; (8022cc8 <MX_USB_DEVICE_Init+0x68>)
 8022c84:	f7f0 fe24 	bl	80138d0 <USBD_Start>
 8022c88:	b9b8      	cbnz	r0, 8022cba <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022c8a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8022c8c:	f7e0 f936 	bl	8002efc <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022c90:	490e      	ldr	r1, [pc, #56]	; (8022ccc <MX_USB_DEVICE_Init+0x6c>)
 8022c92:	480d      	ldr	r0, [pc, #52]	; (8022cc8 <MX_USB_DEVICE_Init+0x68>)
 8022c94:	f7f0 fe06 	bl	80138a4 <USBD_RegisterClass>
 8022c98:	2800      	cmp	r0, #0
 8022c9a:	d0ed      	beq.n	8022c78 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8022c9c:	f7e0 f92e 	bl	8002efc <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8022ca0:	490b      	ldr	r1, [pc, #44]	; (8022cd0 <MX_USB_DEVICE_Init+0x70>)
 8022ca2:	4809      	ldr	r0, [pc, #36]	; (8022cc8 <MX_USB_DEVICE_Init+0x68>)
 8022ca4:	f7f0 fdb0 	bl	8013808 <USBD_CDC_RegisterInterface>
 8022ca8:	2800      	cmp	r0, #0
 8022caa:	d0ea      	beq.n	8022c82 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8022cac:	f7e0 f926 	bl	8002efc <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022cb0:	4805      	ldr	r0, [pc, #20]	; (8022cc8 <MX_USB_DEVICE_Init+0x68>)
 8022cb2:	f7f0 fe0d 	bl	80138d0 <USBD_Start>
 8022cb6:	2800      	cmp	r0, #0
 8022cb8:	d0e7      	beq.n	8022c8a <MX_USB_DEVICE_Init+0x2a>
}
 8022cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8022cbe:	f7e0 b91d 	b.w	8002efc <Error_Handler>
 8022cc2:	bf00      	nop
 8022cc4:	20000428 	.word	0x20000428
 8022cc8:	2002e01c 	.word	0x2002e01c
 8022ccc:	200002f8 	.word	0x200002f8
 8022cd0:	20000414 	.word	0x20000414

08022cd4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8022cd4:	2000      	movs	r0, #0
 8022cd6:	4770      	bx	lr

08022cd8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8022cd8:	2000      	movs	r0, #0
 8022cda:	4770      	bx	lr

08022cdc <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8022cdc:	2000      	movs	r0, #0
 8022cde:	4770      	bx	lr

08022ce0 <CDC_Receive_FS>:
{
 8022ce0:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022ce2:	4c05      	ldr	r4, [pc, #20]	; (8022cf8 <CDC_Receive_FS+0x18>)
{
 8022ce4:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022ce6:	4620      	mov	r0, r4
 8022ce8:	f7f0 fda0 	bl	801382c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022cec:	4620      	mov	r0, r4
 8022cee:	f7f0 fda5 	bl	801383c <USBD_CDC_ReceivePacket>
}
 8022cf2:	2000      	movs	r0, #0
 8022cf4:	bd10      	pop	{r4, pc}
 8022cf6:	bf00      	nop
 8022cf8:	2002e01c 	.word	0x2002e01c

08022cfc <CDC_Init_FS>:
{
 8022cfc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8022cfe:	4c06      	ldr	r4, [pc, #24]	; (8022d18 <CDC_Init_FS+0x1c>)
 8022d00:	2200      	movs	r2, #0
 8022d02:	4906      	ldr	r1, [pc, #24]	; (8022d1c <CDC_Init_FS+0x20>)
 8022d04:	4620      	mov	r0, r4
 8022d06:	f7f0 fd87 	bl	8013818 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022d0a:	4905      	ldr	r1, [pc, #20]	; (8022d20 <CDC_Init_FS+0x24>)
 8022d0c:	4620      	mov	r0, r4
 8022d0e:	f7f0 fd8d 	bl	801382c <USBD_CDC_SetRxBuffer>
}
 8022d12:	2000      	movs	r0, #0
 8022d14:	bd10      	pop	{r4, pc}
 8022d16:	bf00      	nop
 8022d18:	2002e01c 	.word	0x2002e01c
 8022d1c:	2002eaec 	.word	0x2002eaec
 8022d20:	2002e2ec 	.word	0x2002e2ec

08022d24 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8022d24:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8022d26:	4801      	ldr	r0, [pc, #4]	; (8022d2c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8022d28:	800b      	strh	r3, [r1, #0]
}
 8022d2a:	4770      	bx	lr
 8022d2c:	20000454 	.word	0x20000454

08022d30 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8022d30:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8022d32:	4801      	ldr	r0, [pc, #4]	; (8022d38 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8022d34:	800b      	strh	r3, [r1, #0]
}
 8022d36:	4770      	bx	lr
 8022d38:	20000468 	.word	0x20000468

08022d3c <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8022d3c:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8022d3e:	4801      	ldr	r0, [pc, #4]	; (8022d44 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8022d40:	800b      	strh	r3, [r1, #0]
}
 8022d42:	4770      	bx	lr
 8022d44:	20000448 	.word	0x20000448

08022d48 <USBD_FS_ManufacturerStrDescriptor>:
{
 8022d48:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022d4a:	4c04      	ldr	r4, [pc, #16]	; (8022d5c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8022d4c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022d4e:	4804      	ldr	r0, [pc, #16]	; (8022d60 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8022d50:	4621      	mov	r1, r4
 8022d52:	f7f1 f981 	bl	8014058 <USBD_GetString>
}
 8022d56:	4620      	mov	r0, r4
 8022d58:	bd10      	pop	{r4, pc}
 8022d5a:	bf00      	nop
 8022d5c:	2002f2ec 	.word	0x2002f2ec
 8022d60:	080e2200 	.word	0x080e2200

08022d64 <USBD_FS_ProductStrDescriptor>:
{
 8022d64:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022d66:	4c04      	ldr	r4, [pc, #16]	; (8022d78 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8022d68:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022d6a:	4804      	ldr	r0, [pc, #16]	; (8022d7c <USBD_FS_ProductStrDescriptor+0x18>)
 8022d6c:	4621      	mov	r1, r4
 8022d6e:	f7f1 f973 	bl	8014058 <USBD_GetString>
}
 8022d72:	4620      	mov	r0, r4
 8022d74:	bd10      	pop	{r4, pc}
 8022d76:	bf00      	nop
 8022d78:	2002f2ec 	.word	0x2002f2ec
 8022d7c:	080e2214 	.word	0x080e2214

08022d80 <USBD_FS_ConfigStrDescriptor>:
{
 8022d80:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022d82:	4c04      	ldr	r4, [pc, #16]	; (8022d94 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8022d84:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022d86:	4804      	ldr	r0, [pc, #16]	; (8022d98 <USBD_FS_ConfigStrDescriptor+0x18>)
 8022d88:	4621      	mov	r1, r4
 8022d8a:	f7f1 f965 	bl	8014058 <USBD_GetString>
}
 8022d8e:	4620      	mov	r0, r4
 8022d90:	bd10      	pop	{r4, pc}
 8022d92:	bf00      	nop
 8022d94:	2002f2ec 	.word	0x2002f2ec
 8022d98:	080e222c 	.word	0x080e222c

08022d9c <USBD_FS_InterfaceStrDescriptor>:
{
 8022d9c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022d9e:	4c04      	ldr	r4, [pc, #16]	; (8022db0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8022da0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022da2:	4804      	ldr	r0, [pc, #16]	; (8022db4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8022da4:	4621      	mov	r1, r4
 8022da6:	f7f1 f957 	bl	8014058 <USBD_GetString>
}
 8022daa:	4620      	mov	r0, r4
 8022dac:	bd10      	pop	{r4, pc}
 8022dae:	bf00      	nop
 8022db0:	2002f2ec 	.word	0x2002f2ec
 8022db4:	080e2238 	.word	0x080e2238

08022db8 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8022db8:	4b21      	ldr	r3, [pc, #132]	; (8022e40 <USBD_FS_SerialStrDescriptor+0x88>)
 8022dba:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8022dbe:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 8022dc2:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 8022dc4:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 8022dc6:	f04f 041a 	mov.w	r4, #26
 8022dca:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8022dcc:	d101      	bne.n	8022dd2 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8022dce:	481d      	ldr	r0, [pc, #116]	; (8022e44 <USBD_FS_SerialStrDescriptor+0x8c>)
 8022dd0:	bd30      	pop	{r4, r5, pc}
 8022dd2:	491c      	ldr	r1, [pc, #112]	; (8022e44 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022dd4:	f04f 0e00 	mov.w	lr, #0
 8022dd8:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8022ddc:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8022dde:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8022de0:	0f13      	lsrs	r3, r2, #28
 8022de2:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8022de6:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 8022dea:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8022dee:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022df2:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8022df6:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 8022dfa:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8022dfe:	bf34      	ite	cc
 8022e00:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022e04:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 8022e08:	f1be 0f10 	cmp.w	lr, #16
 8022e0c:	d1e8      	bne.n	8022de0 <USBD_FS_SerialStrDescriptor+0x28>
 8022e0e:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 8022e10:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 8022e12:	0f03      	lsrs	r3, r0, #28
 8022e14:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8022e18:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 8022e1c:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 8022e1e:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022e22:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8022e26:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8022e2a:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8022e2e:	bf34      	ite	cc
 8022e30:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022e34:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 8022e36:	2a08      	cmp	r2, #8
 8022e38:	d1eb      	bne.n	8022e12 <USBD_FS_SerialStrDescriptor+0x5a>
}
 8022e3a:	4802      	ldr	r0, [pc, #8]	; (8022e44 <USBD_FS_SerialStrDescriptor+0x8c>)
 8022e3c:	bd30      	pop	{r4, r5, pc}
 8022e3e:	bf00      	nop
 8022e40:	1ff0f000 	.word	0x1ff0f000
 8022e44:	2000046c 	.word	0x2000046c

08022e48 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8022e48:	6803      	ldr	r3, [r0, #0]
{
 8022e4a:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8022e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8022e50:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022e52:	f04f 0400 	mov.w	r4, #0
 8022e56:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8022e5a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8022e5e:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8022e60:	d001      	beq.n	8022e66 <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8022e62:	b009      	add	sp, #36	; 0x24
 8022e64:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022e66:	4d1e      	ldr	r5, [pc, #120]	; (8022ee0 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8022e68:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022e6c:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022e6e:	481d      	ldr	r0, [pc, #116]	; (8022ee4 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022e70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8022e72:	f043 0301 	orr.w	r3, r3, #1
 8022e76:	632b      	str	r3, [r5, #48]	; 0x30
 8022e78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8022e7a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022e7e:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022e82:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022e84:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8022e86:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022e88:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022e8a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8022e8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022e90:	f7e7 fb26 	bl	800a4e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8022e94:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8022e98:	a903      	add	r1, sp, #12
 8022e9a:	4812      	ldr	r0, [pc, #72]	; (8022ee4 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022e9c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022e9e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8022ea2:	f7e7 fb1d 	bl	800a4e0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022ea6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8022ea8:	4622      	mov	r2, r4
 8022eaa:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8022eb0:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022eb2:	636b      	str	r3, [r5, #52]	; 0x34
 8022eb4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8022eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022eba:	9301      	str	r3, [sp, #4]
 8022ebc:	9b01      	ldr	r3, [sp, #4]
 8022ebe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8022ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022ec4:	646b      	str	r3, [r5, #68]	; 0x44
 8022ec6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8022ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022ecc:	9302      	str	r3, [sp, #8]
 8022ece:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8022ed0:	f7e5 f840 	bl	8007f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8022ed4:	2043      	movs	r0, #67	; 0x43
 8022ed6:	f7e5 f887 	bl	8007fe8 <HAL_NVIC_EnableIRQ>
}
 8022eda:	b009      	add	sp, #36	; 0x24
 8022edc:	bd30      	pop	{r4, r5, pc}
 8022ede:	bf00      	nop
 8022ee0:	40023800 	.word	0x40023800
 8022ee4:	40020000 	.word	0x40020000

08022ee8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022ee8:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8022eec:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022ef0:	f7f0 bd00 	b.w	80138f4 <USBD_LL_SetupStage>

08022ef4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022ef4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8022ef8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022efc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022f00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8022f04:	f7f0 bd24 	b.w	8013950 <USBD_LL_DataOutStage>

08022f08 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8022f08:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8022f0c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022f10:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8022f16:	f7f0 bd51 	b.w	80139bc <USBD_LL_DataInStage>
 8022f1a:	bf00      	nop

08022f1c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022f1c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022f20:	f7f0 bde8 	b.w	8013af4 <USBD_LL_SOF>

08022f24 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8022f24:	68c1      	ldr	r1, [r0, #12]
{
 8022f26:	b510      	push	{r4, lr}
 8022f28:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8022f2a:	b111      	cbz	r1, 8022f32 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8022f2c:	2902      	cmp	r1, #2
 8022f2e:	d10a      	bne.n	8022f46 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8022f30:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8022f32:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8022f36:	f7f0 fdc5 	bl	8013ac4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022f3a:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 8022f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022f42:	f7f0 bd97 	b.w	8013a74 <USBD_LL_Reset>
    Error_Handler();
 8022f46:	f7df ffd9 	bl	8002efc <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022f4a:	2101      	movs	r1, #1
 8022f4c:	e7f1      	b.n	8022f32 <HAL_PCD_ResetCallback+0xe>
 8022f4e:	bf00      	nop

08022f50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022f50:	b510      	push	{r4, lr}
 8022f52:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022f54:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022f58:	f7f0 fdb8 	bl	8013acc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022f5c:	6822      	ldr	r2, [r4, #0]
 8022f5e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8022f62:	f043 0301 	orr.w	r3, r3, #1
 8022f66:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022f6a:	6a23      	ldr	r3, [r4, #32]
 8022f6c:	b123      	cbz	r3, 8022f78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022f6e:	4a03      	ldr	r2, [pc, #12]	; (8022f7c <HAL_PCD_SuspendCallback+0x2c>)
 8022f70:	6913      	ldr	r3, [r2, #16]
 8022f72:	f043 0306 	orr.w	r3, r3, #6
 8022f76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8022f78:	bd10      	pop	{r4, pc}
 8022f7a:	bf00      	nop
 8022f7c:	e000ed00 	.word	0xe000ed00

08022f80 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022f80:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022f84:	f7f0 bdac 	b.w	8013ae0 <USBD_LL_Resume>

08022f88 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022f88:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022f8c:	f7f0 bdc2 	b.w	8013b14 <USBD_LL_IsoOUTIncomplete>

08022f90 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022f90:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022f94:	f7f0 bdbc 	b.w	8013b10 <USBD_LL_IsoINIncomplete>

08022f98 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022f98:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022f9c:	f7f0 bdbc 	b.w	8013b18 <USBD_LL_DevConnected>

08022fa0 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8022fa0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022fa4:	f7f0 bdba 	b.w	8013b1c <USBD_LL_DevDisconnected>

08022fa8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8022fa8:	7802      	ldrb	r2, [r0, #0]
 8022faa:	b10a      	cbz	r2, 8022fb0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8022fac:	2000      	movs	r0, #0
 8022fae:	4770      	bx	lr
{
 8022fb0:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8022fb2:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 8022fb4:	4b14      	ldr	r3, [pc, #80]	; (8023008 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8022fb6:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022fb8:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8022fbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8022fbe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 8022fc0:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8022fc4:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022fc8:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022fca:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8022fcc:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022fce:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8022fd0:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8022fd4:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8022fd8:	2206      	movs	r2, #6
 8022fda:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022fdc:	f7e8 fbb8 	bl	800b750 <HAL_PCD_Init>
 8022fe0:	b978      	cbnz	r0, 8023002 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8022fe2:	2180      	movs	r1, #128	; 0x80
 8022fe4:	4808      	ldr	r0, [pc, #32]	; (8023008 <USBD_LL_Init+0x60>)
 8022fe6:	f7e9 f91d 	bl	800c224 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8022fea:	2240      	movs	r2, #64	; 0x40
 8022fec:	2100      	movs	r1, #0
 8022fee:	4806      	ldr	r0, [pc, #24]	; (8023008 <USBD_LL_Init+0x60>)
 8022ff0:	f7e9 f8ee 	bl	800c1d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8022ff4:	2280      	movs	r2, #128	; 0x80
 8022ff6:	2101      	movs	r1, #1
 8022ff8:	4803      	ldr	r0, [pc, #12]	; (8023008 <USBD_LL_Init+0x60>)
 8022ffa:	f7e9 f8e9 	bl	800c1d0 <HAL_PCDEx_SetTxFiFo>
}
 8022ffe:	2000      	movs	r0, #0
 8023000:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8023002:	f7df ff7b 	bl	8002efc <Error_Handler>
 8023006:	e7ec      	b.n	8022fe2 <USBD_LL_Init+0x3a>
 8023008:	2002f4ec 	.word	0x2002f4ec

0802300c <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 802300c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023010:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8023012:	f7e8 fc4b 	bl	800b8ac <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8023016:	2803      	cmp	r0, #3
 8023018:	d802      	bhi.n	8023020 <USBD_LL_Start+0x14>
 802301a:	4b02      	ldr	r3, [pc, #8]	; (8023024 <USBD_LL_Start+0x18>)
 802301c:	5c18      	ldrb	r0, [r3, r0]
}
 802301e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8023020:	2003      	movs	r0, #3
}
 8023022:	bd08      	pop	{r3, pc}
 8023024:	080e2248 	.word	0x080e2248

08023028 <USBD_LL_OpenEP>:
{
 8023028:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802302a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802302e:	461a      	mov	r2, r3
 8023030:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023032:	4663      	mov	r3, ip
 8023034:	f7e8 ff7e 	bl	800bf34 <HAL_PCD_EP_Open>
  switch (hal_status)
 8023038:	2803      	cmp	r0, #3
 802303a:	d802      	bhi.n	8023042 <USBD_LL_OpenEP+0x1a>
 802303c:	4b02      	ldr	r3, [pc, #8]	; (8023048 <USBD_LL_OpenEP+0x20>)
 802303e:	5c18      	ldrb	r0, [r3, r0]
}
 8023040:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023042:	2003      	movs	r0, #3
}
 8023044:	bd08      	pop	{r3, pc}
 8023046:	bf00      	nop
 8023048:	080e2248 	.word	0x080e2248

0802304c <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802304c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023050:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023052:	f7e8 ffad 	bl	800bfb0 <HAL_PCD_EP_Close>
  switch (hal_status)
 8023056:	2803      	cmp	r0, #3
 8023058:	d802      	bhi.n	8023060 <USBD_LL_CloseEP+0x14>
 802305a:	4b02      	ldr	r3, [pc, #8]	; (8023064 <USBD_LL_CloseEP+0x18>)
 802305c:	5c18      	ldrb	r0, [r3, r0]
}
 802305e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023060:	2003      	movs	r0, #3
}
 8023062:	bd08      	pop	{r3, pc}
 8023064:	080e2248 	.word	0x080e2248

08023068 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023068:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802306c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802306e:	f7e9 f82f 	bl	800c0d0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8023072:	2803      	cmp	r0, #3
 8023074:	d802      	bhi.n	802307c <USBD_LL_StallEP+0x14>
 8023076:	4b02      	ldr	r3, [pc, #8]	; (8023080 <USBD_LL_StallEP+0x18>)
 8023078:	5c18      	ldrb	r0, [r3, r0]
}
 802307a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802307c:	2003      	movs	r0, #3
}
 802307e:	bd08      	pop	{r3, pc}
 8023080:	080e2248 	.word	0x080e2248

08023084 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023084:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023088:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802308a:	f7e9 f865 	bl	800c158 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 802308e:	2803      	cmp	r0, #3
 8023090:	d802      	bhi.n	8023098 <USBD_LL_ClearStallEP+0x14>
 8023092:	4b02      	ldr	r3, [pc, #8]	; (802309c <USBD_LL_ClearStallEP+0x18>)
 8023094:	5c18      	ldrb	r0, [r3, r0]
}
 8023096:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023098:	2003      	movs	r0, #3
}
 802309a:	bd08      	pop	{r3, pc}
 802309c:	080e2248 	.word	0x080e2248

080230a0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80230a0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80230a2:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80230a6:	d406      	bmi.n	80230b6 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80230a8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80230ac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80230b0:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 80230b4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80230b6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80230ba:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80230be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80230c2:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 80230c6:	4770      	bx	lr

080230c8 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80230c8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80230cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80230ce:	f7e8 ff1b 	bl	800bf08 <HAL_PCD_SetAddress>
  switch (hal_status)
 80230d2:	2803      	cmp	r0, #3
 80230d4:	d802      	bhi.n	80230dc <USBD_LL_SetUSBAddress+0x14>
 80230d6:	4b02      	ldr	r3, [pc, #8]	; (80230e0 <USBD_LL_SetUSBAddress+0x18>)
 80230d8:	5c18      	ldrb	r0, [r3, r0]
}
 80230da:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80230dc:	2003      	movs	r0, #3
}
 80230de:	bd08      	pop	{r3, pc}
 80230e0:	080e2248 	.word	0x080e2248

080230e4 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80230e4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80230e8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80230ea:	f7e8 ffc9 	bl	800c080 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80230ee:	2803      	cmp	r0, #3
 80230f0:	d802      	bhi.n	80230f8 <USBD_LL_Transmit+0x14>
 80230f2:	4b02      	ldr	r3, [pc, #8]	; (80230fc <USBD_LL_Transmit+0x18>)
 80230f4:	5c18      	ldrb	r0, [r3, r0]
}
 80230f6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80230f8:	2003      	movs	r0, #3
}
 80230fa:	bd08      	pop	{r3, pc}
 80230fc:	080e2248 	.word	0x080e2248

08023100 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023100:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023104:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023106:	f7e8 ff89 	bl	800c01c <HAL_PCD_EP_Receive>
  switch (hal_status)
 802310a:	2803      	cmp	r0, #3
 802310c:	d802      	bhi.n	8023114 <USBD_LL_PrepareReceive+0x14>
 802310e:	4b02      	ldr	r3, [pc, #8]	; (8023118 <USBD_LL_PrepareReceive+0x18>)
 8023110:	5c18      	ldrb	r0, [r3, r0]
}
 8023112:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023114:	2003      	movs	r0, #3
}
 8023116:	bd08      	pop	{r3, pc}
 8023118:	080e2248 	.word	0x080e2248

0802311c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802311c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8023120:	f7e8 bfa4 	b.w	800c06c <HAL_PCD_EP_GetRxCount>

08023124 <HAL_PCDEx_LPM_Callback>:
{
 8023124:	b510      	push	{r4, lr}
 8023126:	4604      	mov	r4, r0
  switch (msg)
 8023128:	b1a1      	cbz	r1, 8023154 <HAL_PCDEx_LPM_Callback+0x30>
 802312a:	2901      	cmp	r1, #1
 802312c:	d111      	bne.n	8023152 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802312e:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8023130:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023134:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023138:	f043 0301 	orr.w	r3, r3, #1
 802313c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8023140:	f7f0 fcc4 	bl	8013acc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8023144:	6a23      	ldr	r3, [r4, #32]
 8023146:	b123      	cbz	r3, 8023152 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023148:	4a0e      	ldr	r2, [pc, #56]	; (8023184 <HAL_PCDEx_LPM_Callback+0x60>)
 802314a:	6913      	ldr	r3, [r2, #16]
 802314c:	f043 0306 	orr.w	r3, r3, #6
 8023150:	6113      	str	r3, [r2, #16]
}
 8023152:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8023154:	6a03      	ldr	r3, [r0, #32]
 8023156:	b963      	cbnz	r3, 8023172 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023158:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 802315a:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802315e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023162:	f023 0301 	bic.w	r3, r3, #1
}
 8023166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802316a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 802316e:	f7f0 bcb7 	b.w	8013ae0 <USBD_LL_Resume>
  SystemClock_Config();
 8023172:	f7df fecb 	bl	8002f0c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023176:	4a03      	ldr	r2, [pc, #12]	; (8023184 <HAL_PCDEx_LPM_Callback+0x60>)
 8023178:	6913      	ldr	r3, [r2, #16]
 802317a:	f023 0306 	bic.w	r3, r3, #6
 802317e:	6113      	str	r3, [r2, #16]
 8023180:	e7ea      	b.n	8023158 <HAL_PCDEx_LPM_Callback+0x34>
 8023182:	bf00      	nop
 8023184:	e000ed00 	.word	0xe000ed00

08023188 <atoi>:
 8023188:	220a      	movs	r2, #10
 802318a:	2100      	movs	r1, #0
 802318c:	f002 b9b4 	b.w	80254f8 <strtol>

08023190 <ctime>:
 8023190:	b508      	push	{r3, lr}
 8023192:	f000 f897 	bl	80232c4 <localtime>
 8023196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802319a:	f002 bd47 	b.w	8025c2c <asctime>
	...

080231a0 <_fwrite_r>:
 80231a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80231a4:	9c08      	ldr	r4, [sp, #32]
 80231a6:	468a      	mov	sl, r1
 80231a8:	4690      	mov	r8, r2
 80231aa:	fb02 f903 	mul.w	r9, r2, r3
 80231ae:	4605      	mov	r5, r0
 80231b0:	b118      	cbz	r0, 80231ba <_fwrite_r+0x1a>
 80231b2:	6983      	ldr	r3, [r0, #24]
 80231b4:	b90b      	cbnz	r3, 80231ba <_fwrite_r+0x1a>
 80231b6:	f003 fcdd 	bl	8026b74 <__sinit>
 80231ba:	4b26      	ldr	r3, [pc, #152]	; (8023254 <_fwrite_r+0xb4>)
 80231bc:	429c      	cmp	r4, r3
 80231be:	d123      	bne.n	8023208 <_fwrite_r+0x68>
 80231c0:	686c      	ldr	r4, [r5, #4]
 80231c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80231c4:	07de      	lsls	r6, r3, #31
 80231c6:	d405      	bmi.n	80231d4 <_fwrite_r+0x34>
 80231c8:	89a3      	ldrh	r3, [r4, #12]
 80231ca:	0598      	lsls	r0, r3, #22
 80231cc:	d402      	bmi.n	80231d4 <_fwrite_r+0x34>
 80231ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80231d0:	f000 f98c 	bl	80234ec <__retarget_lock_acquire_recursive>
 80231d4:	89a3      	ldrh	r3, [r4, #12]
 80231d6:	0719      	lsls	r1, r3, #28
 80231d8:	d520      	bpl.n	802321c <_fwrite_r+0x7c>
 80231da:	6923      	ldr	r3, [r4, #16]
 80231dc:	b1f3      	cbz	r3, 802321c <_fwrite_r+0x7c>
 80231de:	2600      	movs	r6, #0
 80231e0:	454e      	cmp	r6, r9
 80231e2:	d029      	beq.n	8023238 <_fwrite_r+0x98>
 80231e4:	68a7      	ldr	r7, [r4, #8]
 80231e6:	f81a 1006 	ldrb.w	r1, [sl, r6]
 80231ea:	3f01      	subs	r7, #1
 80231ec:	2f00      	cmp	r7, #0
 80231ee:	60a7      	str	r7, [r4, #8]
 80231f0:	da04      	bge.n	80231fc <_fwrite_r+0x5c>
 80231f2:	69a3      	ldr	r3, [r4, #24]
 80231f4:	429f      	cmp	r7, r3
 80231f6:	db19      	blt.n	802322c <_fwrite_r+0x8c>
 80231f8:	290a      	cmp	r1, #10
 80231fa:	d017      	beq.n	802322c <_fwrite_r+0x8c>
 80231fc:	6823      	ldr	r3, [r4, #0]
 80231fe:	1c5a      	adds	r2, r3, #1
 8023200:	6022      	str	r2, [r4, #0]
 8023202:	7019      	strb	r1, [r3, #0]
 8023204:	3601      	adds	r6, #1
 8023206:	e7eb      	b.n	80231e0 <_fwrite_r+0x40>
 8023208:	4b13      	ldr	r3, [pc, #76]	; (8023258 <_fwrite_r+0xb8>)
 802320a:	429c      	cmp	r4, r3
 802320c:	d101      	bne.n	8023212 <_fwrite_r+0x72>
 802320e:	68ac      	ldr	r4, [r5, #8]
 8023210:	e7d7      	b.n	80231c2 <_fwrite_r+0x22>
 8023212:	4b12      	ldr	r3, [pc, #72]	; (802325c <_fwrite_r+0xbc>)
 8023214:	429c      	cmp	r4, r3
 8023216:	bf08      	it	eq
 8023218:	68ec      	ldreq	r4, [r5, #12]
 802321a:	e7d2      	b.n	80231c2 <_fwrite_r+0x22>
 802321c:	4621      	mov	r1, r4
 802321e:	4628      	mov	r0, r5
 8023220:	f002 fc92 	bl	8025b48 <__swsetup_r>
 8023224:	2800      	cmp	r0, #0
 8023226:	d0da      	beq.n	80231de <_fwrite_r+0x3e>
 8023228:	2600      	movs	r6, #0
 802322a:	e005      	b.n	8023238 <_fwrite_r+0x98>
 802322c:	4622      	mov	r2, r4
 802322e:	4628      	mov	r0, r5
 8023230:	f002 fc26 	bl	8025a80 <__swbuf_r>
 8023234:	3001      	adds	r0, #1
 8023236:	d1e5      	bne.n	8023204 <_fwrite_r+0x64>
 8023238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802323a:	07da      	lsls	r2, r3, #31
 802323c:	d405      	bmi.n	802324a <_fwrite_r+0xaa>
 802323e:	89a3      	ldrh	r3, [r4, #12]
 8023240:	059b      	lsls	r3, r3, #22
 8023242:	d402      	bmi.n	802324a <_fwrite_r+0xaa>
 8023244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023246:	f000 f953 	bl	80234f0 <__retarget_lock_release_recursive>
 802324a:	fbb6 f0f8 	udiv	r0, r6, r8
 802324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023252:	bf00      	nop
 8023254:	080e2960 	.word	0x080e2960
 8023258:	080e2980 	.word	0x080e2980
 802325c:	080e2940 	.word	0x080e2940

08023260 <fwrite>:
 8023260:	b507      	push	{r0, r1, r2, lr}
 8023262:	9300      	str	r3, [sp, #0]
 8023264:	4613      	mov	r3, r2
 8023266:	460a      	mov	r2, r1
 8023268:	4601      	mov	r1, r0
 802326a:	4803      	ldr	r0, [pc, #12]	; (8023278 <fwrite+0x18>)
 802326c:	6800      	ldr	r0, [r0, #0]
 802326e:	f7ff ff97 	bl	80231a0 <_fwrite_r>
 8023272:	b003      	add	sp, #12
 8023274:	f85d fb04 	ldr.w	pc, [sp], #4
 8023278:	20000488 	.word	0x20000488

0802327c <__libc_init_array>:
 802327c:	b570      	push	{r4, r5, r6, lr}
 802327e:	4d0d      	ldr	r5, [pc, #52]	; (80232b4 <__libc_init_array+0x38>)
 8023280:	4c0d      	ldr	r4, [pc, #52]	; (80232b8 <__libc_init_array+0x3c>)
 8023282:	1b64      	subs	r4, r4, r5
 8023284:	10a4      	asrs	r4, r4, #2
 8023286:	2600      	movs	r6, #0
 8023288:	42a6      	cmp	r6, r4
 802328a:	d109      	bne.n	80232a0 <__libc_init_array+0x24>
 802328c:	4d0b      	ldr	r5, [pc, #44]	; (80232bc <__libc_init_array+0x40>)
 802328e:	4c0c      	ldr	r4, [pc, #48]	; (80232c0 <__libc_init_array+0x44>)
 8023290:	f005 f9da 	bl	8028648 <_init>
 8023294:	1b64      	subs	r4, r4, r5
 8023296:	10a4      	asrs	r4, r4, #2
 8023298:	2600      	movs	r6, #0
 802329a:	42a6      	cmp	r6, r4
 802329c:	d105      	bne.n	80232aa <__libc_init_array+0x2e>
 802329e:	bd70      	pop	{r4, r5, r6, pc}
 80232a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80232a4:	4798      	blx	r3
 80232a6:	3601      	adds	r6, #1
 80232a8:	e7ee      	b.n	8023288 <__libc_init_array+0xc>
 80232aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80232ae:	4798      	blx	r3
 80232b0:	3601      	adds	r6, #1
 80232b2:	e7f2      	b.n	802329a <__libc_init_array+0x1e>
 80232b4:	080e2b3c 	.word	0x080e2b3c
 80232b8:	080e2b3c 	.word	0x080e2b3c
 80232bc:	080e2b3c 	.word	0x080e2b3c
 80232c0:	080e2b40 	.word	0x080e2b40

080232c4 <localtime>:
 80232c4:	b538      	push	{r3, r4, r5, lr}
 80232c6:	4b0b      	ldr	r3, [pc, #44]	; (80232f4 <localtime+0x30>)
 80232c8:	681d      	ldr	r5, [r3, #0]
 80232ca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80232cc:	4604      	mov	r4, r0
 80232ce:	b953      	cbnz	r3, 80232e6 <localtime+0x22>
 80232d0:	2024      	movs	r0, #36	; 0x24
 80232d2:	f000 f90f 	bl	80234f4 <malloc>
 80232d6:	4602      	mov	r2, r0
 80232d8:	63e8      	str	r0, [r5, #60]	; 0x3c
 80232da:	b920      	cbnz	r0, 80232e6 <localtime+0x22>
 80232dc:	4b06      	ldr	r3, [pc, #24]	; (80232f8 <localtime+0x34>)
 80232de:	4807      	ldr	r0, [pc, #28]	; (80232fc <localtime+0x38>)
 80232e0:	2132      	movs	r1, #50	; 0x32
 80232e2:	f002 fceb 	bl	8025cbc <__assert_func>
 80232e6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80232e8:	4620      	mov	r0, r4
 80232ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80232ee:	f000 b807 	b.w	8023300 <localtime_r>
 80232f2:	bf00      	nop
 80232f4:	20000488 	.word	0x20000488
 80232f8:	080e2354 	.word	0x080e2354
 80232fc:	080e236b 	.word	0x080e236b

08023300 <localtime_r>:
 8023300:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8023304:	4680      	mov	r8, r0
 8023306:	9101      	str	r1, [sp, #4]
 8023308:	f003 fd28 	bl	8026d5c <__gettzinfo>
 802330c:	9901      	ldr	r1, [sp, #4]
 802330e:	4605      	mov	r5, r0
 8023310:	4640      	mov	r0, r8
 8023312:	f003 fd27 	bl	8026d64 <gmtime_r>
 8023316:	6943      	ldr	r3, [r0, #20]
 8023318:	0799      	lsls	r1, r3, #30
 802331a:	4604      	mov	r4, r0
 802331c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8023320:	d105      	bne.n	802332e <localtime_r+0x2e>
 8023322:	2264      	movs	r2, #100	; 0x64
 8023324:	fb97 f3f2 	sdiv	r3, r7, r2
 8023328:	fb02 7313 	mls	r3, r2, r3, r7
 802332c:	bb73      	cbnz	r3, 802338c <localtime_r+0x8c>
 802332e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023332:	fb97 f6f3 	sdiv	r6, r7, r3
 8023336:	fb03 7616 	mls	r6, r3, r6, r7
 802333a:	fab6 f386 	clz	r3, r6
 802333e:	095b      	lsrs	r3, r3, #5
 8023340:	4e67      	ldr	r6, [pc, #412]	; (80234e0 <localtime_r+0x1e0>)
 8023342:	2230      	movs	r2, #48	; 0x30
 8023344:	fb02 6603 	mla	r6, r2, r3, r6
 8023348:	f002 fa08 	bl	802575c <__tz_lock>
 802334c:	f002 fa12 	bl	8025774 <_tzset_unlocked>
 8023350:	4b64      	ldr	r3, [pc, #400]	; (80234e4 <localtime_r+0x1e4>)
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	b34b      	cbz	r3, 80233aa <localtime_r+0xaa>
 8023356:	686b      	ldr	r3, [r5, #4]
 8023358:	42bb      	cmp	r3, r7
 802335a:	d119      	bne.n	8023390 <localtime_r+0x90>
 802335c:	682f      	ldr	r7, [r5, #0]
 802335e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8023362:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8023366:	b9df      	cbnz	r7, 80233a0 <localtime_r+0xa0>
 8023368:	4282      	cmp	r2, r0
 802336a:	eb73 0101 	sbcs.w	r1, r3, r1
 802336e:	da23      	bge.n	80233b8 <localtime_r+0xb8>
 8023370:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8023374:	4282      	cmp	r2, r0
 8023376:	eb73 0701 	sbcs.w	r7, r3, r1
 802337a:	bfb4      	ite	lt
 802337c:	2701      	movlt	r7, #1
 802337e:	2700      	movge	r7, #0
 8023380:	4282      	cmp	r2, r0
 8023382:	418b      	sbcs	r3, r1
 8023384:	6227      	str	r7, [r4, #32]
 8023386:	db19      	blt.n	80233bc <localtime_r+0xbc>
 8023388:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802338a:	e018      	b.n	80233be <localtime_r+0xbe>
 802338c:	2301      	movs	r3, #1
 802338e:	e7d7      	b.n	8023340 <localtime_r+0x40>
 8023390:	4638      	mov	r0, r7
 8023392:	f002 f939 	bl	8025608 <__tzcalc_limits>
 8023396:	2800      	cmp	r0, #0
 8023398:	d1e0      	bne.n	802335c <localtime_r+0x5c>
 802339a:	f04f 33ff 	mov.w	r3, #4294967295
 802339e:	e004      	b.n	80233aa <localtime_r+0xaa>
 80233a0:	4282      	cmp	r2, r0
 80233a2:	eb73 0101 	sbcs.w	r1, r3, r1
 80233a6:	da02      	bge.n	80233ae <localtime_r+0xae>
 80233a8:	2300      	movs	r3, #0
 80233aa:	6223      	str	r3, [r4, #32]
 80233ac:	e7ec      	b.n	8023388 <localtime_r+0x88>
 80233ae:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80233b2:	4282      	cmp	r2, r0
 80233b4:	418b      	sbcs	r3, r1
 80233b6:	daf7      	bge.n	80233a8 <localtime_r+0xa8>
 80233b8:	2301      	movs	r3, #1
 80233ba:	6223      	str	r3, [r4, #32]
 80233bc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80233be:	6861      	ldr	r1, [r4, #4]
 80233c0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80233c4:	203c      	movs	r0, #60	; 0x3c
 80233c6:	fb93 f5f2 	sdiv	r5, r3, r2
 80233ca:	fb02 3315 	mls	r3, r2, r5, r3
 80233ce:	fb93 f2f0 	sdiv	r2, r3, r0
 80233d2:	fb00 3012 	mls	r0, r0, r2, r3
 80233d6:	6823      	ldr	r3, [r4, #0]
 80233d8:	1a89      	subs	r1, r1, r2
 80233da:	68a2      	ldr	r2, [r4, #8]
 80233dc:	6061      	str	r1, [r4, #4]
 80233de:	1a1b      	subs	r3, r3, r0
 80233e0:	1b52      	subs	r2, r2, r5
 80233e2:	2b3b      	cmp	r3, #59	; 0x3b
 80233e4:	6023      	str	r3, [r4, #0]
 80233e6:	60a2      	str	r2, [r4, #8]
 80233e8:	dd35      	ble.n	8023456 <localtime_r+0x156>
 80233ea:	3101      	adds	r1, #1
 80233ec:	6061      	str	r1, [r4, #4]
 80233ee:	3b3c      	subs	r3, #60	; 0x3c
 80233f0:	6023      	str	r3, [r4, #0]
 80233f2:	6863      	ldr	r3, [r4, #4]
 80233f4:	2b3b      	cmp	r3, #59	; 0x3b
 80233f6:	dd34      	ble.n	8023462 <localtime_r+0x162>
 80233f8:	3201      	adds	r2, #1
 80233fa:	60a2      	str	r2, [r4, #8]
 80233fc:	3b3c      	subs	r3, #60	; 0x3c
 80233fe:	6063      	str	r3, [r4, #4]
 8023400:	68a3      	ldr	r3, [r4, #8]
 8023402:	2b17      	cmp	r3, #23
 8023404:	dd33      	ble.n	802346e <localtime_r+0x16e>
 8023406:	69e2      	ldr	r2, [r4, #28]
 8023408:	3201      	adds	r2, #1
 802340a:	61e2      	str	r2, [r4, #28]
 802340c:	69a2      	ldr	r2, [r4, #24]
 802340e:	3201      	adds	r2, #1
 8023410:	2a06      	cmp	r2, #6
 8023412:	bfc8      	it	gt
 8023414:	2200      	movgt	r2, #0
 8023416:	61a2      	str	r2, [r4, #24]
 8023418:	68e2      	ldr	r2, [r4, #12]
 802341a:	3b18      	subs	r3, #24
 802341c:	3201      	adds	r2, #1
 802341e:	60a3      	str	r3, [r4, #8]
 8023420:	6923      	ldr	r3, [r4, #16]
 8023422:	60e2      	str	r2, [r4, #12]
 8023424:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8023428:	428a      	cmp	r2, r1
 802342a:	dd0e      	ble.n	802344a <localtime_r+0x14a>
 802342c:	2b0b      	cmp	r3, #11
 802342e:	eba2 0201 	sub.w	r2, r2, r1
 8023432:	60e2      	str	r2, [r4, #12]
 8023434:	f103 0201 	add.w	r2, r3, #1
 8023438:	bf09      	itett	eq
 802343a:	6963      	ldreq	r3, [r4, #20]
 802343c:	6122      	strne	r2, [r4, #16]
 802343e:	2200      	moveq	r2, #0
 8023440:	3301      	addeq	r3, #1
 8023442:	bf02      	ittt	eq
 8023444:	6122      	streq	r2, [r4, #16]
 8023446:	6163      	streq	r3, [r4, #20]
 8023448:	61e2      	streq	r2, [r4, #28]
 802344a:	f002 f98d 	bl	8025768 <__tz_unlock>
 802344e:	4620      	mov	r0, r4
 8023450:	b002      	add	sp, #8
 8023452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023456:	2b00      	cmp	r3, #0
 8023458:	dacb      	bge.n	80233f2 <localtime_r+0xf2>
 802345a:	3901      	subs	r1, #1
 802345c:	6061      	str	r1, [r4, #4]
 802345e:	333c      	adds	r3, #60	; 0x3c
 8023460:	e7c6      	b.n	80233f0 <localtime_r+0xf0>
 8023462:	2b00      	cmp	r3, #0
 8023464:	dacc      	bge.n	8023400 <localtime_r+0x100>
 8023466:	3a01      	subs	r2, #1
 8023468:	60a2      	str	r2, [r4, #8]
 802346a:	333c      	adds	r3, #60	; 0x3c
 802346c:	e7c7      	b.n	80233fe <localtime_r+0xfe>
 802346e:	2b00      	cmp	r3, #0
 8023470:	daeb      	bge.n	802344a <localtime_r+0x14a>
 8023472:	69e2      	ldr	r2, [r4, #28]
 8023474:	3a01      	subs	r2, #1
 8023476:	61e2      	str	r2, [r4, #28]
 8023478:	69a2      	ldr	r2, [r4, #24]
 802347a:	3a01      	subs	r2, #1
 802347c:	bf48      	it	mi
 802347e:	2206      	movmi	r2, #6
 8023480:	61a2      	str	r2, [r4, #24]
 8023482:	68e2      	ldr	r2, [r4, #12]
 8023484:	3318      	adds	r3, #24
 8023486:	3a01      	subs	r2, #1
 8023488:	60e2      	str	r2, [r4, #12]
 802348a:	60a3      	str	r3, [r4, #8]
 802348c:	2a00      	cmp	r2, #0
 802348e:	d1dc      	bne.n	802344a <localtime_r+0x14a>
 8023490:	6923      	ldr	r3, [r4, #16]
 8023492:	3b01      	subs	r3, #1
 8023494:	d405      	bmi.n	80234a2 <localtime_r+0x1a2>
 8023496:	6123      	str	r3, [r4, #16]
 8023498:	6923      	ldr	r3, [r4, #16]
 802349a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802349e:	60e3      	str	r3, [r4, #12]
 80234a0:	e7d3      	b.n	802344a <localtime_r+0x14a>
 80234a2:	230b      	movs	r3, #11
 80234a4:	6123      	str	r3, [r4, #16]
 80234a6:	6963      	ldr	r3, [r4, #20]
 80234a8:	1e5a      	subs	r2, r3, #1
 80234aa:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80234ae:	6162      	str	r2, [r4, #20]
 80234b0:	079a      	lsls	r2, r3, #30
 80234b2:	d105      	bne.n	80234c0 <localtime_r+0x1c0>
 80234b4:	2164      	movs	r1, #100	; 0x64
 80234b6:	fb93 f2f1 	sdiv	r2, r3, r1
 80234ba:	fb01 3212 	mls	r2, r1, r2, r3
 80234be:	b962      	cbnz	r2, 80234da <localtime_r+0x1da>
 80234c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80234c4:	fb93 f1f2 	sdiv	r1, r3, r2
 80234c8:	fb02 3311 	mls	r3, r2, r1, r3
 80234cc:	fab3 f383 	clz	r3, r3
 80234d0:	095b      	lsrs	r3, r3, #5
 80234d2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80234d6:	61e3      	str	r3, [r4, #28]
 80234d8:	e7de      	b.n	8023498 <localtime_r+0x198>
 80234da:	2301      	movs	r3, #1
 80234dc:	e7f9      	b.n	80234d2 <localtime_r+0x1d2>
 80234de:	bf00      	nop
 80234e0:	080e2428 	.word	0x080e2428
 80234e4:	2002f91c 	.word	0x2002f91c

080234e8 <__retarget_lock_init_recursive>:
 80234e8:	4770      	bx	lr

080234ea <__retarget_lock_acquire>:
 80234ea:	4770      	bx	lr

080234ec <__retarget_lock_acquire_recursive>:
 80234ec:	4770      	bx	lr

080234ee <__retarget_lock_release>:
 80234ee:	4770      	bx	lr

080234f0 <__retarget_lock_release_recursive>:
 80234f0:	4770      	bx	lr
	...

080234f4 <malloc>:
 80234f4:	4b02      	ldr	r3, [pc, #8]	; (8023500 <malloc+0xc>)
 80234f6:	4601      	mov	r1, r0
 80234f8:	6818      	ldr	r0, [r3, #0]
 80234fa:	f000 bb29 	b.w	8023b50 <_malloc_r>
 80234fe:	bf00      	nop
 8023500:	20000488 	.word	0x20000488

08023504 <free>:
 8023504:	4b02      	ldr	r3, [pc, #8]	; (8023510 <free+0xc>)
 8023506:	4601      	mov	r1, r0
 8023508:	6818      	ldr	r0, [r3, #0]
 802350a:	f000 bab5 	b.w	8023a78 <_free_r>
 802350e:	bf00      	nop
 8023510:	20000488 	.word	0x20000488

08023514 <memcmp>:
 8023514:	b510      	push	{r4, lr}
 8023516:	3901      	subs	r1, #1
 8023518:	4402      	add	r2, r0
 802351a:	4290      	cmp	r0, r2
 802351c:	d101      	bne.n	8023522 <memcmp+0xe>
 802351e:	2000      	movs	r0, #0
 8023520:	e005      	b.n	802352e <memcmp+0x1a>
 8023522:	7803      	ldrb	r3, [r0, #0]
 8023524:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023528:	42a3      	cmp	r3, r4
 802352a:	d001      	beq.n	8023530 <memcmp+0x1c>
 802352c:	1b18      	subs	r0, r3, r4
 802352e:	bd10      	pop	{r4, pc}
 8023530:	3001      	adds	r0, #1
 8023532:	e7f2      	b.n	802351a <memcmp+0x6>

08023534 <memcpy>:
 8023534:	440a      	add	r2, r1
 8023536:	4291      	cmp	r1, r2
 8023538:	f100 33ff 	add.w	r3, r0, #4294967295
 802353c:	d100      	bne.n	8023540 <memcpy+0xc>
 802353e:	4770      	bx	lr
 8023540:	b510      	push	{r4, lr}
 8023542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023546:	f803 4f01 	strb.w	r4, [r3, #1]!
 802354a:	4291      	cmp	r1, r2
 802354c:	d1f9      	bne.n	8023542 <memcpy+0xe>
 802354e:	bd10      	pop	{r4, pc}

08023550 <memmove>:
 8023550:	4288      	cmp	r0, r1
 8023552:	b510      	push	{r4, lr}
 8023554:	eb01 0402 	add.w	r4, r1, r2
 8023558:	d902      	bls.n	8023560 <memmove+0x10>
 802355a:	4284      	cmp	r4, r0
 802355c:	4623      	mov	r3, r4
 802355e:	d807      	bhi.n	8023570 <memmove+0x20>
 8023560:	1e43      	subs	r3, r0, #1
 8023562:	42a1      	cmp	r1, r4
 8023564:	d008      	beq.n	8023578 <memmove+0x28>
 8023566:	f811 2b01 	ldrb.w	r2, [r1], #1
 802356a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802356e:	e7f8      	b.n	8023562 <memmove+0x12>
 8023570:	4402      	add	r2, r0
 8023572:	4601      	mov	r1, r0
 8023574:	428a      	cmp	r2, r1
 8023576:	d100      	bne.n	802357a <memmove+0x2a>
 8023578:	bd10      	pop	{r4, pc}
 802357a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802357e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023582:	e7f7      	b.n	8023574 <memmove+0x24>

08023584 <memset>:
 8023584:	4402      	add	r2, r0
 8023586:	4603      	mov	r3, r0
 8023588:	4293      	cmp	r3, r2
 802358a:	d100      	bne.n	802358e <memset+0xa>
 802358c:	4770      	bx	lr
 802358e:	f803 1b01 	strb.w	r1, [r3], #1
 8023592:	e7f9      	b.n	8023588 <memset+0x4>

08023594 <validate_structure>:
 8023594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023596:	6801      	ldr	r1, [r0, #0]
 8023598:	293b      	cmp	r1, #59	; 0x3b
 802359a:	4604      	mov	r4, r0
 802359c:	d911      	bls.n	80235c2 <validate_structure+0x2e>
 802359e:	223c      	movs	r2, #60	; 0x3c
 80235a0:	4668      	mov	r0, sp
 80235a2:	f002 fbb9 	bl	8025d18 <div>
 80235a6:	9a01      	ldr	r2, [sp, #4]
 80235a8:	6863      	ldr	r3, [r4, #4]
 80235aa:	9900      	ldr	r1, [sp, #0]
 80235ac:	2a00      	cmp	r2, #0
 80235ae:	440b      	add	r3, r1
 80235b0:	6063      	str	r3, [r4, #4]
 80235b2:	bfbb      	ittet	lt
 80235b4:	323c      	addlt	r2, #60	; 0x3c
 80235b6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80235ba:	6022      	strge	r2, [r4, #0]
 80235bc:	6022      	strlt	r2, [r4, #0]
 80235be:	bfb8      	it	lt
 80235c0:	6063      	strlt	r3, [r4, #4]
 80235c2:	6861      	ldr	r1, [r4, #4]
 80235c4:	293b      	cmp	r1, #59	; 0x3b
 80235c6:	d911      	bls.n	80235ec <validate_structure+0x58>
 80235c8:	223c      	movs	r2, #60	; 0x3c
 80235ca:	4668      	mov	r0, sp
 80235cc:	f002 fba4 	bl	8025d18 <div>
 80235d0:	9a01      	ldr	r2, [sp, #4]
 80235d2:	68a3      	ldr	r3, [r4, #8]
 80235d4:	9900      	ldr	r1, [sp, #0]
 80235d6:	2a00      	cmp	r2, #0
 80235d8:	440b      	add	r3, r1
 80235da:	60a3      	str	r3, [r4, #8]
 80235dc:	bfbb      	ittet	lt
 80235de:	323c      	addlt	r2, #60	; 0x3c
 80235e0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80235e4:	6062      	strge	r2, [r4, #4]
 80235e6:	6062      	strlt	r2, [r4, #4]
 80235e8:	bfb8      	it	lt
 80235ea:	60a3      	strlt	r3, [r4, #8]
 80235ec:	68a1      	ldr	r1, [r4, #8]
 80235ee:	2917      	cmp	r1, #23
 80235f0:	d911      	bls.n	8023616 <validate_structure+0x82>
 80235f2:	2218      	movs	r2, #24
 80235f4:	4668      	mov	r0, sp
 80235f6:	f002 fb8f 	bl	8025d18 <div>
 80235fa:	9a01      	ldr	r2, [sp, #4]
 80235fc:	68e3      	ldr	r3, [r4, #12]
 80235fe:	9900      	ldr	r1, [sp, #0]
 8023600:	2a00      	cmp	r2, #0
 8023602:	440b      	add	r3, r1
 8023604:	60e3      	str	r3, [r4, #12]
 8023606:	bfbb      	ittet	lt
 8023608:	3218      	addlt	r2, #24
 802360a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802360e:	60a2      	strge	r2, [r4, #8]
 8023610:	60a2      	strlt	r2, [r4, #8]
 8023612:	bfb8      	it	lt
 8023614:	60e3      	strlt	r3, [r4, #12]
 8023616:	6921      	ldr	r1, [r4, #16]
 8023618:	290b      	cmp	r1, #11
 802361a:	d911      	bls.n	8023640 <validate_structure+0xac>
 802361c:	220c      	movs	r2, #12
 802361e:	4668      	mov	r0, sp
 8023620:	f002 fb7a 	bl	8025d18 <div>
 8023624:	9a01      	ldr	r2, [sp, #4]
 8023626:	6963      	ldr	r3, [r4, #20]
 8023628:	9900      	ldr	r1, [sp, #0]
 802362a:	2a00      	cmp	r2, #0
 802362c:	440b      	add	r3, r1
 802362e:	6163      	str	r3, [r4, #20]
 8023630:	bfbb      	ittet	lt
 8023632:	320c      	addlt	r2, #12
 8023634:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023638:	6122      	strge	r2, [r4, #16]
 802363a:	6122      	strlt	r2, [r4, #16]
 802363c:	bfb8      	it	lt
 802363e:	6163      	strlt	r3, [r4, #20]
 8023640:	6963      	ldr	r3, [r4, #20]
 8023642:	0798      	lsls	r0, r3, #30
 8023644:	d120      	bne.n	8023688 <validate_structure+0xf4>
 8023646:	2164      	movs	r1, #100	; 0x64
 8023648:	fb93 f2f1 	sdiv	r2, r3, r1
 802364c:	fb01 3212 	mls	r2, r1, r2, r3
 8023650:	b9e2      	cbnz	r2, 802368c <validate_structure+0xf8>
 8023652:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8023656:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802365a:	fb93 f1f2 	sdiv	r1, r3, r2
 802365e:	fb02 3311 	mls	r3, r2, r1, r3
 8023662:	2b00      	cmp	r3, #0
 8023664:	bf14      	ite	ne
 8023666:	231c      	movne	r3, #28
 8023668:	231d      	moveq	r3, #29
 802366a:	68e2      	ldr	r2, [r4, #12]
 802366c:	2a00      	cmp	r2, #0
 802366e:	dc0f      	bgt.n	8023690 <validate_structure+0xfc>
 8023670:	4f33      	ldr	r7, [pc, #204]	; (8023740 <validate_structure+0x1ac>)
 8023672:	260b      	movs	r6, #11
 8023674:	2064      	movs	r0, #100	; 0x64
 8023676:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802367a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802367e:	f1bc 0f00 	cmp.w	ip, #0
 8023682:	dd31      	ble.n	80236e8 <validate_structure+0x154>
 8023684:	b003      	add	sp, #12
 8023686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023688:	231c      	movs	r3, #28
 802368a:	e7ee      	b.n	802366a <validate_structure+0xd6>
 802368c:	231d      	movs	r3, #29
 802368e:	e7ec      	b.n	802366a <validate_structure+0xd6>
 8023690:	4e2b      	ldr	r6, [pc, #172]	; (8023740 <validate_structure+0x1ac>)
 8023692:	2700      	movs	r7, #0
 8023694:	2064      	movs	r0, #100	; 0x64
 8023696:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802369a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 802369e:	2a01      	cmp	r2, #1
 80236a0:	bf14      	ite	ne
 80236a2:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 80236a6:	469c      	moveq	ip, r3
 80236a8:	4561      	cmp	r1, ip
 80236aa:	ddeb      	ble.n	8023684 <validate_structure+0xf0>
 80236ac:	3201      	adds	r2, #1
 80236ae:	eba1 010c 	sub.w	r1, r1, ip
 80236b2:	2a0c      	cmp	r2, #12
 80236b4:	60e1      	str	r1, [r4, #12]
 80236b6:	6122      	str	r2, [r4, #16]
 80236b8:	d1ef      	bne.n	802369a <validate_structure+0x106>
 80236ba:	6963      	ldr	r3, [r4, #20]
 80236bc:	1c5a      	adds	r2, r3, #1
 80236be:	0791      	lsls	r1, r2, #30
 80236c0:	e9c4 7204 	strd	r7, r2, [r4, #16]
 80236c4:	d137      	bne.n	8023736 <validate_structure+0x1a2>
 80236c6:	fb92 f1f0 	sdiv	r1, r2, r0
 80236ca:	fb00 2211 	mls	r2, r0, r1, r2
 80236ce:	2a00      	cmp	r2, #0
 80236d0:	d133      	bne.n	802373a <validate_structure+0x1a6>
 80236d2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80236d6:	fb93 f2f5 	sdiv	r2, r3, r5
 80236da:	fb05 3312 	mls	r3, r5, r2, r3
 80236de:	2b00      	cmp	r3, #0
 80236e0:	bf14      	ite	ne
 80236e2:	231c      	movne	r3, #28
 80236e4:	231d      	moveq	r3, #29
 80236e6:	e7d8      	b.n	802369a <validate_structure+0x106>
 80236e8:	6921      	ldr	r1, [r4, #16]
 80236ea:	3901      	subs	r1, #1
 80236ec:	6121      	str	r1, [r4, #16]
 80236ee:	3101      	adds	r1, #1
 80236f0:	d114      	bne.n	802371c <validate_structure+0x188>
 80236f2:	6963      	ldr	r3, [r4, #20]
 80236f4:	1e5a      	subs	r2, r3, #1
 80236f6:	0791      	lsls	r1, r2, #30
 80236f8:	e9c4 6204 	strd	r6, r2, [r4, #16]
 80236fc:	d117      	bne.n	802372e <validate_structure+0x19a>
 80236fe:	fb92 f1f0 	sdiv	r1, r2, r0
 8023702:	fb00 2211 	mls	r2, r0, r1, r2
 8023706:	b9a2      	cbnz	r2, 8023732 <validate_structure+0x19e>
 8023708:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 802370c:	fb93 f2f5 	sdiv	r2, r3, r5
 8023710:	fb05 3312 	mls	r3, r5, r2, r3
 8023714:	2b00      	cmp	r3, #0
 8023716:	bf14      	ite	ne
 8023718:	231c      	movne	r3, #28
 802371a:	231d      	moveq	r3, #29
 802371c:	6922      	ldr	r2, [r4, #16]
 802371e:	2a01      	cmp	r2, #1
 8023720:	bf14      	ite	ne
 8023722:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8023726:	461a      	moveq	r2, r3
 8023728:	4462      	add	r2, ip
 802372a:	60e2      	str	r2, [r4, #12]
 802372c:	e7a5      	b.n	802367a <validate_structure+0xe6>
 802372e:	231c      	movs	r3, #28
 8023730:	e7f4      	b.n	802371c <validate_structure+0x188>
 8023732:	231d      	movs	r3, #29
 8023734:	e7f2      	b.n	802371c <validate_structure+0x188>
 8023736:	231c      	movs	r3, #28
 8023738:	e7af      	b.n	802369a <validate_structure+0x106>
 802373a:	231d      	movs	r3, #29
 802373c:	e7ad      	b.n	802369a <validate_structure+0x106>
 802373e:	bf00      	nop
 8023740:	080e23c8 	.word	0x080e23c8

08023744 <mktime>:
 8023744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023748:	b085      	sub	sp, #20
 802374a:	4607      	mov	r7, r0
 802374c:	f003 fb06 	bl	8026d5c <__gettzinfo>
 8023750:	4681      	mov	r9, r0
 8023752:	4638      	mov	r0, r7
 8023754:	f7ff ff1e 	bl	8023594 <validate_structure>
 8023758:	e9d7 4000 	ldrd	r4, r0, [r7]
 802375c:	233c      	movs	r3, #60	; 0x3c
 802375e:	fb03 4400 	mla	r4, r3, r0, r4
 8023762:	68b8      	ldr	r0, [r7, #8]
 8023764:	4abc      	ldr	r2, [pc, #752]	; (8023a58 <mktime+0x314>)
 8023766:	697e      	ldr	r6, [r7, #20]
 8023768:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802376c:	fb03 4400 	mla	r4, r3, r0, r4
 8023770:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8023774:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8023778:	3d01      	subs	r5, #1
 802377a:	2b01      	cmp	r3, #1
 802377c:	4415      	add	r5, r2
 802377e:	dd11      	ble.n	80237a4 <mktime+0x60>
 8023780:	07b1      	lsls	r1, r6, #30
 8023782:	d10f      	bne.n	80237a4 <mktime+0x60>
 8023784:	2264      	movs	r2, #100	; 0x64
 8023786:	fb96 f3f2 	sdiv	r3, r6, r2
 802378a:	fb02 6313 	mls	r3, r2, r3, r6
 802378e:	b943      	cbnz	r3, 80237a2 <mktime+0x5e>
 8023790:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8023794:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023798:	fb93 f1f2 	sdiv	r1, r3, r2
 802379c:	fb02 3311 	mls	r3, r2, r1, r3
 80237a0:	b903      	cbnz	r3, 80237a4 <mktime+0x60>
 80237a2:	3501      	adds	r5, #1
 80237a4:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80237a8:	3310      	adds	r3, #16
 80237aa:	f644 6220 	movw	r2, #20000	; 0x4e20
 80237ae:	4293      	cmp	r3, r2
 80237b0:	61fd      	str	r5, [r7, #28]
 80237b2:	f200 815d 	bhi.w	8023a70 <mktime+0x32c>
 80237b6:	2e46      	cmp	r6, #70	; 0x46
 80237b8:	dd71      	ble.n	802389e <mktime+0x15a>
 80237ba:	2346      	movs	r3, #70	; 0x46
 80237bc:	f240 1c6d 	movw	ip, #365	; 0x16d
 80237c0:	2164      	movs	r1, #100	; 0x64
 80237c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80237c6:	079a      	lsls	r2, r3, #30
 80237c8:	d163      	bne.n	8023892 <mktime+0x14e>
 80237ca:	fb93 f2f1 	sdiv	r2, r3, r1
 80237ce:	fb01 3212 	mls	r2, r1, r2, r3
 80237d2:	2a00      	cmp	r2, #0
 80237d4:	d160      	bne.n	8023898 <mktime+0x154>
 80237d6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80237da:	fb92 fef0 	sdiv	lr, r2, r0
 80237de:	fb00 221e 	mls	r2, r0, lr, r2
 80237e2:	2a00      	cmp	r2, #0
 80237e4:	bf14      	ite	ne
 80237e6:	4662      	movne	r2, ip
 80237e8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80237ec:	3301      	adds	r3, #1
 80237ee:	429e      	cmp	r6, r3
 80237f0:	4415      	add	r5, r2
 80237f2:	d1e8      	bne.n	80237c6 <mktime+0x82>
 80237f4:	4b99      	ldr	r3, [pc, #612]	; (8023a5c <mktime+0x318>)
 80237f6:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80237fa:	fbc5 4803 	smlal	r4, r8, r5, r3
 80237fe:	f001 ffad 	bl	802575c <__tz_lock>
 8023802:	f001 ffb7 	bl	8025774 <_tzset_unlocked>
 8023806:	4b96      	ldr	r3, [pc, #600]	; (8023a60 <mktime+0x31c>)
 8023808:	f8d3 b000 	ldr.w	fp, [r3]
 802380c:	f1bb 0f00 	cmp.w	fp, #0
 8023810:	d039      	beq.n	8023886 <mktime+0x142>
 8023812:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8023816:	6978      	ldr	r0, [r7, #20]
 8023818:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802381c:	f1bb 0f01 	cmp.w	fp, #1
 8023820:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8023824:	46da      	mov	sl, fp
 8023826:	bfa8      	it	ge
 8023828:	f04f 0a01 	movge.w	sl, #1
 802382c:	4283      	cmp	r3, r0
 802382e:	d178      	bne.n	8023922 <mktime+0x1de>
 8023830:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8023834:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8023838:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 802383c:	1a5b      	subs	r3, r3, r1
 802383e:	9302      	str	r3, [sp, #8]
 8023840:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8023844:	9303      	str	r3, [sp, #12]
 8023846:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 802384a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 802384e:	9301      	str	r3, [sp, #4]
 8023850:	ebb3 0c02 	subs.w	ip, r3, r2
 8023854:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8023858:	4564      	cmp	r4, ip
 802385a:	eb78 0300 	sbcs.w	r3, r8, r0
 802385e:	da66      	bge.n	802392e <mktime+0x1ea>
 8023860:	f8d9 3000 	ldr.w	r3, [r9]
 8023864:	2b00      	cmp	r3, #0
 8023866:	d06f      	beq.n	8023948 <mktime+0x204>
 8023868:	9b02      	ldr	r3, [sp, #8]
 802386a:	429c      	cmp	r4, r3
 802386c:	9b03      	ldr	r3, [sp, #12]
 802386e:	eb78 0303 	sbcs.w	r3, r8, r3
 8023872:	db03      	blt.n	802387c <mktime+0x138>
 8023874:	4564      	cmp	r4, ip
 8023876:	eb78 0300 	sbcs.w	r3, r8, r0
 802387a:	db6b      	blt.n	8023954 <mktime+0x210>
 802387c:	f1bb 0f00 	cmp.w	fp, #0
 8023880:	f04f 0b00 	mov.w	fp, #0
 8023884:	da6b      	bge.n	802395e <mktime+0x21a>
 8023886:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 802388a:	190c      	adds	r4, r1, r4
 802388c:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8023890:	e0a9      	b.n	80239e6 <mktime+0x2a2>
 8023892:	f240 126d 	movw	r2, #365	; 0x16d
 8023896:	e7a9      	b.n	80237ec <mktime+0xa8>
 8023898:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802389c:	e7a6      	b.n	80237ec <mktime+0xa8>
 802389e:	d0a9      	beq.n	80237f4 <mktime+0xb0>
 80238a0:	2345      	movs	r3, #69	; 0x45
 80238a2:	f240 1c6d 	movw	ip, #365	; 0x16d
 80238a6:	2164      	movs	r1, #100	; 0x64
 80238a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80238ac:	e012      	b.n	80238d4 <mktime+0x190>
 80238ae:	bb62      	cbnz	r2, 802390a <mktime+0x1c6>
 80238b0:	fb93 f2f1 	sdiv	r2, r3, r1
 80238b4:	fb01 3212 	mls	r2, r1, r2, r3
 80238b8:	bb52      	cbnz	r2, 8023910 <mktime+0x1cc>
 80238ba:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80238be:	fb92 fef0 	sdiv	lr, r2, r0
 80238c2:	fb00 221e 	mls	r2, r0, lr, r2
 80238c6:	2a00      	cmp	r2, #0
 80238c8:	bf14      	ite	ne
 80238ca:	4662      	movne	r2, ip
 80238cc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80238d0:	1aad      	subs	r5, r5, r2
 80238d2:	3b01      	subs	r3, #1
 80238d4:	429e      	cmp	r6, r3
 80238d6:	f003 0203 	and.w	r2, r3, #3
 80238da:	dbe8      	blt.n	80238ae <mktime+0x16a>
 80238dc:	b9da      	cbnz	r2, 8023916 <mktime+0x1d2>
 80238de:	2264      	movs	r2, #100	; 0x64
 80238e0:	fb96 f3f2 	sdiv	r3, r6, r2
 80238e4:	fb02 6313 	mls	r3, r2, r3, r6
 80238e8:	b9c3      	cbnz	r3, 802391c <mktime+0x1d8>
 80238ea:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80238ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80238f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80238f6:	fb02 3311 	mls	r3, r2, r1, r3
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	f240 136d 	movw	r3, #365	; 0x16d
 8023900:	bf08      	it	eq
 8023902:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8023906:	1aed      	subs	r5, r5, r3
 8023908:	e774      	b.n	80237f4 <mktime+0xb0>
 802390a:	f240 126d 	movw	r2, #365	; 0x16d
 802390e:	e7df      	b.n	80238d0 <mktime+0x18c>
 8023910:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8023914:	e7dc      	b.n	80238d0 <mktime+0x18c>
 8023916:	f240 136d 	movw	r3, #365	; 0x16d
 802391a:	e7f4      	b.n	8023906 <mktime+0x1c2>
 802391c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8023920:	e7f1      	b.n	8023906 <mktime+0x1c2>
 8023922:	f001 fe71 	bl	8025608 <__tzcalc_limits>
 8023926:	2800      	cmp	r0, #0
 8023928:	d182      	bne.n	8023830 <mktime+0xec>
 802392a:	46d3      	mov	fp, sl
 802392c:	e050      	b.n	80239d0 <mktime+0x28c>
 802392e:	9b01      	ldr	r3, [sp, #4]
 8023930:	1a5b      	subs	r3, r3, r1
 8023932:	9301      	str	r3, [sp, #4]
 8023934:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8023938:	eb6e 0e03 	sbc.w	lr, lr, r3
 802393c:	9b01      	ldr	r3, [sp, #4]
 802393e:	429c      	cmp	r4, r3
 8023940:	eb78 030e 	sbcs.w	r3, r8, lr
 8023944:	dbf1      	blt.n	802392a <mktime+0x1e6>
 8023946:	e78b      	b.n	8023860 <mktime+0x11c>
 8023948:	9b02      	ldr	r3, [sp, #8]
 802394a:	429c      	cmp	r4, r3
 802394c:	9b03      	ldr	r3, [sp, #12]
 802394e:	eb78 0303 	sbcs.w	r3, r8, r3
 8023952:	db8f      	blt.n	8023874 <mktime+0x130>
 8023954:	f1bb 0f00 	cmp.w	fp, #0
 8023958:	db3e      	blt.n	80239d8 <mktime+0x294>
 802395a:	f04f 0b01 	mov.w	fp, #1
 802395e:	ea8a 0a0b 	eor.w	sl, sl, fp
 8023962:	f1ba 0f01 	cmp.w	sl, #1
 8023966:	d133      	bne.n	80239d0 <mktime+0x28c>
 8023968:	f1bb 0f00 	cmp.w	fp, #0
 802396c:	d04e      	beq.n	8023a0c <mktime+0x2c8>
 802396e:	1a52      	subs	r2, r2, r1
 8023970:	683b      	ldr	r3, [r7, #0]
 8023972:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8023976:	4413      	add	r3, r2
 8023978:	1914      	adds	r4, r2, r4
 802397a:	603b      	str	r3, [r7, #0]
 802397c:	4638      	mov	r0, r7
 802397e:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8023982:	f7ff fe07 	bl	8023594 <validate_structure>
 8023986:	68fa      	ldr	r2, [r7, #12]
 8023988:	ebb2 020a 	subs.w	r2, r2, sl
 802398c:	d020      	beq.n	80239d0 <mktime+0x28c>
 802398e:	2a01      	cmp	r2, #1
 8023990:	dc3e      	bgt.n	8023a10 <mktime+0x2cc>
 8023992:	1c90      	adds	r0, r2, #2
 8023994:	bfd8      	it	le
 8023996:	2201      	movle	r2, #1
 8023998:	69fb      	ldr	r3, [r7, #28]
 802399a:	18d3      	adds	r3, r2, r3
 802399c:	4415      	add	r5, r2
 802399e:	d540      	bpl.n	8023a22 <mktime+0x2de>
 80239a0:	1e73      	subs	r3, r6, #1
 80239a2:	0799      	lsls	r1, r3, #30
 80239a4:	d137      	bne.n	8023a16 <mktime+0x2d2>
 80239a6:	2264      	movs	r2, #100	; 0x64
 80239a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80239ac:	fb02 3311 	mls	r3, r2, r1, r3
 80239b0:	bba3      	cbnz	r3, 8023a1c <mktime+0x2d8>
 80239b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80239b6:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80239ba:	fb96 f2f3 	sdiv	r2, r6, r3
 80239be:	fb03 6612 	mls	r6, r3, r2, r6
 80239c2:	2e00      	cmp	r6, #0
 80239c4:	f240 136d 	movw	r3, #365	; 0x16d
 80239c8:	bf18      	it	ne
 80239ca:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80239ce:	61fb      	str	r3, [r7, #28]
 80239d0:	f1bb 0f01 	cmp.w	fp, #1
 80239d4:	f47f af57 	bne.w	8023886 <mktime+0x142>
 80239d8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80239dc:	190c      	adds	r4, r1, r4
 80239de:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80239e2:	f04f 0b01 	mov.w	fp, #1
 80239e6:	f001 febf 	bl	8025768 <__tz_unlock>
 80239ea:	3504      	adds	r5, #4
 80239ec:	2307      	movs	r3, #7
 80239ee:	fb95 f3f3 	sdiv	r3, r5, r3
 80239f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80239f6:	1aed      	subs	r5, r5, r3
 80239f8:	bf48      	it	mi
 80239fa:	3507      	addmi	r5, #7
 80239fc:	f8c7 b020 	str.w	fp, [r7, #32]
 8023a00:	61bd      	str	r5, [r7, #24]
 8023a02:	4620      	mov	r0, r4
 8023a04:	4641      	mov	r1, r8
 8023a06:	b005      	add	sp, #20
 8023a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a0c:	1a8a      	subs	r2, r1, r2
 8023a0e:	e7af      	b.n	8023970 <mktime+0x22c>
 8023a10:	f04f 32ff 	mov.w	r2, #4294967295
 8023a14:	e7c0      	b.n	8023998 <mktime+0x254>
 8023a16:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8023a1a:	e7d8      	b.n	80239ce <mktime+0x28a>
 8023a1c:	f240 136d 	movw	r3, #365	; 0x16d
 8023a20:	e7d5      	b.n	80239ce <mktime+0x28a>
 8023a22:	07b2      	lsls	r2, r6, #30
 8023a24:	d11e      	bne.n	8023a64 <mktime+0x320>
 8023a26:	2164      	movs	r1, #100	; 0x64
 8023a28:	fb96 f2f1 	sdiv	r2, r6, r1
 8023a2c:	fb01 6212 	mls	r2, r1, r2, r6
 8023a30:	b9da      	cbnz	r2, 8023a6a <mktime+0x326>
 8023a32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023a36:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8023a3a:	fb96 f1f2 	sdiv	r1, r6, r2
 8023a3e:	fb02 6611 	mls	r6, r2, r1, r6
 8023a42:	2e00      	cmp	r6, #0
 8023a44:	f240 126d 	movw	r2, #365	; 0x16d
 8023a48:	bf08      	it	eq
 8023a4a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8023a4e:	4293      	cmp	r3, r2
 8023a50:	bfa8      	it	ge
 8023a52:	1a9b      	subge	r3, r3, r2
 8023a54:	e7bb      	b.n	80239ce <mktime+0x28a>
 8023a56:	bf00      	nop
 8023a58:	080e23f8 	.word	0x080e23f8
 8023a5c:	00015180 	.word	0x00015180
 8023a60:	2002f91c 	.word	0x2002f91c
 8023a64:	f240 126d 	movw	r2, #365	; 0x16d
 8023a68:	e7f1      	b.n	8023a4e <mktime+0x30a>
 8023a6a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8023a6e:	e7ee      	b.n	8023a4e <mktime+0x30a>
 8023a70:	f04f 34ff 	mov.w	r4, #4294967295
 8023a74:	46a0      	mov	r8, r4
 8023a76:	e7c4      	b.n	8023a02 <mktime+0x2be>

08023a78 <_free_r>:
 8023a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023a7a:	2900      	cmp	r1, #0
 8023a7c:	d044      	beq.n	8023b08 <_free_r+0x90>
 8023a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023a82:	9001      	str	r0, [sp, #4]
 8023a84:	2b00      	cmp	r3, #0
 8023a86:	f1a1 0404 	sub.w	r4, r1, #4
 8023a8a:	bfb8      	it	lt
 8023a8c:	18e4      	addlt	r4, r4, r3
 8023a8e:	f003 fa95 	bl	8026fbc <__malloc_lock>
 8023a92:	4a1e      	ldr	r2, [pc, #120]	; (8023b0c <_free_r+0x94>)
 8023a94:	9801      	ldr	r0, [sp, #4]
 8023a96:	6813      	ldr	r3, [r2, #0]
 8023a98:	b933      	cbnz	r3, 8023aa8 <_free_r+0x30>
 8023a9a:	6063      	str	r3, [r4, #4]
 8023a9c:	6014      	str	r4, [r2, #0]
 8023a9e:	b003      	add	sp, #12
 8023aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023aa4:	f003 ba90 	b.w	8026fc8 <__malloc_unlock>
 8023aa8:	42a3      	cmp	r3, r4
 8023aaa:	d908      	bls.n	8023abe <_free_r+0x46>
 8023aac:	6825      	ldr	r5, [r4, #0]
 8023aae:	1961      	adds	r1, r4, r5
 8023ab0:	428b      	cmp	r3, r1
 8023ab2:	bf01      	itttt	eq
 8023ab4:	6819      	ldreq	r1, [r3, #0]
 8023ab6:	685b      	ldreq	r3, [r3, #4]
 8023ab8:	1949      	addeq	r1, r1, r5
 8023aba:	6021      	streq	r1, [r4, #0]
 8023abc:	e7ed      	b.n	8023a9a <_free_r+0x22>
 8023abe:	461a      	mov	r2, r3
 8023ac0:	685b      	ldr	r3, [r3, #4]
 8023ac2:	b10b      	cbz	r3, 8023ac8 <_free_r+0x50>
 8023ac4:	42a3      	cmp	r3, r4
 8023ac6:	d9fa      	bls.n	8023abe <_free_r+0x46>
 8023ac8:	6811      	ldr	r1, [r2, #0]
 8023aca:	1855      	adds	r5, r2, r1
 8023acc:	42a5      	cmp	r5, r4
 8023ace:	d10b      	bne.n	8023ae8 <_free_r+0x70>
 8023ad0:	6824      	ldr	r4, [r4, #0]
 8023ad2:	4421      	add	r1, r4
 8023ad4:	1854      	adds	r4, r2, r1
 8023ad6:	42a3      	cmp	r3, r4
 8023ad8:	6011      	str	r1, [r2, #0]
 8023ada:	d1e0      	bne.n	8023a9e <_free_r+0x26>
 8023adc:	681c      	ldr	r4, [r3, #0]
 8023ade:	685b      	ldr	r3, [r3, #4]
 8023ae0:	6053      	str	r3, [r2, #4]
 8023ae2:	4421      	add	r1, r4
 8023ae4:	6011      	str	r1, [r2, #0]
 8023ae6:	e7da      	b.n	8023a9e <_free_r+0x26>
 8023ae8:	d902      	bls.n	8023af0 <_free_r+0x78>
 8023aea:	230c      	movs	r3, #12
 8023aec:	6003      	str	r3, [r0, #0]
 8023aee:	e7d6      	b.n	8023a9e <_free_r+0x26>
 8023af0:	6825      	ldr	r5, [r4, #0]
 8023af2:	1961      	adds	r1, r4, r5
 8023af4:	428b      	cmp	r3, r1
 8023af6:	bf04      	itt	eq
 8023af8:	6819      	ldreq	r1, [r3, #0]
 8023afa:	685b      	ldreq	r3, [r3, #4]
 8023afc:	6063      	str	r3, [r4, #4]
 8023afe:	bf04      	itt	eq
 8023b00:	1949      	addeq	r1, r1, r5
 8023b02:	6021      	streq	r1, [r4, #0]
 8023b04:	6054      	str	r4, [r2, #4]
 8023b06:	e7ca      	b.n	8023a9e <_free_r+0x26>
 8023b08:	b003      	add	sp, #12
 8023b0a:	bd30      	pop	{r4, r5, pc}
 8023b0c:	2002f8f8 	.word	0x2002f8f8

08023b10 <sbrk_aligned>:
 8023b10:	b570      	push	{r4, r5, r6, lr}
 8023b12:	4e0e      	ldr	r6, [pc, #56]	; (8023b4c <sbrk_aligned+0x3c>)
 8023b14:	460c      	mov	r4, r1
 8023b16:	6831      	ldr	r1, [r6, #0]
 8023b18:	4605      	mov	r5, r0
 8023b1a:	b911      	cbnz	r1, 8023b22 <sbrk_aligned+0x12>
 8023b1c:	f000 fe12 	bl	8024744 <_sbrk_r>
 8023b20:	6030      	str	r0, [r6, #0]
 8023b22:	4621      	mov	r1, r4
 8023b24:	4628      	mov	r0, r5
 8023b26:	f000 fe0d 	bl	8024744 <_sbrk_r>
 8023b2a:	1c43      	adds	r3, r0, #1
 8023b2c:	d00a      	beq.n	8023b44 <sbrk_aligned+0x34>
 8023b2e:	1cc4      	adds	r4, r0, #3
 8023b30:	f024 0403 	bic.w	r4, r4, #3
 8023b34:	42a0      	cmp	r0, r4
 8023b36:	d007      	beq.n	8023b48 <sbrk_aligned+0x38>
 8023b38:	1a21      	subs	r1, r4, r0
 8023b3a:	4628      	mov	r0, r5
 8023b3c:	f000 fe02 	bl	8024744 <_sbrk_r>
 8023b40:	3001      	adds	r0, #1
 8023b42:	d101      	bne.n	8023b48 <sbrk_aligned+0x38>
 8023b44:	f04f 34ff 	mov.w	r4, #4294967295
 8023b48:	4620      	mov	r0, r4
 8023b4a:	bd70      	pop	{r4, r5, r6, pc}
 8023b4c:	2002f8fc 	.word	0x2002f8fc

08023b50 <_malloc_r>:
 8023b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b54:	1ccd      	adds	r5, r1, #3
 8023b56:	f025 0503 	bic.w	r5, r5, #3
 8023b5a:	3508      	adds	r5, #8
 8023b5c:	2d0c      	cmp	r5, #12
 8023b5e:	bf38      	it	cc
 8023b60:	250c      	movcc	r5, #12
 8023b62:	2d00      	cmp	r5, #0
 8023b64:	4607      	mov	r7, r0
 8023b66:	db01      	blt.n	8023b6c <_malloc_r+0x1c>
 8023b68:	42a9      	cmp	r1, r5
 8023b6a:	d905      	bls.n	8023b78 <_malloc_r+0x28>
 8023b6c:	230c      	movs	r3, #12
 8023b6e:	603b      	str	r3, [r7, #0]
 8023b70:	2600      	movs	r6, #0
 8023b72:	4630      	mov	r0, r6
 8023b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b78:	4e2e      	ldr	r6, [pc, #184]	; (8023c34 <_malloc_r+0xe4>)
 8023b7a:	f003 fa1f 	bl	8026fbc <__malloc_lock>
 8023b7e:	6833      	ldr	r3, [r6, #0]
 8023b80:	461c      	mov	r4, r3
 8023b82:	bb34      	cbnz	r4, 8023bd2 <_malloc_r+0x82>
 8023b84:	4629      	mov	r1, r5
 8023b86:	4638      	mov	r0, r7
 8023b88:	f7ff ffc2 	bl	8023b10 <sbrk_aligned>
 8023b8c:	1c43      	adds	r3, r0, #1
 8023b8e:	4604      	mov	r4, r0
 8023b90:	d14d      	bne.n	8023c2e <_malloc_r+0xde>
 8023b92:	6834      	ldr	r4, [r6, #0]
 8023b94:	4626      	mov	r6, r4
 8023b96:	2e00      	cmp	r6, #0
 8023b98:	d140      	bne.n	8023c1c <_malloc_r+0xcc>
 8023b9a:	6823      	ldr	r3, [r4, #0]
 8023b9c:	4631      	mov	r1, r6
 8023b9e:	4638      	mov	r0, r7
 8023ba0:	eb04 0803 	add.w	r8, r4, r3
 8023ba4:	f000 fdce 	bl	8024744 <_sbrk_r>
 8023ba8:	4580      	cmp	r8, r0
 8023baa:	d13a      	bne.n	8023c22 <_malloc_r+0xd2>
 8023bac:	6821      	ldr	r1, [r4, #0]
 8023bae:	3503      	adds	r5, #3
 8023bb0:	1a6d      	subs	r5, r5, r1
 8023bb2:	f025 0503 	bic.w	r5, r5, #3
 8023bb6:	3508      	adds	r5, #8
 8023bb8:	2d0c      	cmp	r5, #12
 8023bba:	bf38      	it	cc
 8023bbc:	250c      	movcc	r5, #12
 8023bbe:	4629      	mov	r1, r5
 8023bc0:	4638      	mov	r0, r7
 8023bc2:	f7ff ffa5 	bl	8023b10 <sbrk_aligned>
 8023bc6:	3001      	adds	r0, #1
 8023bc8:	d02b      	beq.n	8023c22 <_malloc_r+0xd2>
 8023bca:	6823      	ldr	r3, [r4, #0]
 8023bcc:	442b      	add	r3, r5
 8023bce:	6023      	str	r3, [r4, #0]
 8023bd0:	e00e      	b.n	8023bf0 <_malloc_r+0xa0>
 8023bd2:	6822      	ldr	r2, [r4, #0]
 8023bd4:	1b52      	subs	r2, r2, r5
 8023bd6:	d41e      	bmi.n	8023c16 <_malloc_r+0xc6>
 8023bd8:	2a0b      	cmp	r2, #11
 8023bda:	d916      	bls.n	8023c0a <_malloc_r+0xba>
 8023bdc:	1961      	adds	r1, r4, r5
 8023bde:	42a3      	cmp	r3, r4
 8023be0:	6025      	str	r5, [r4, #0]
 8023be2:	bf18      	it	ne
 8023be4:	6059      	strne	r1, [r3, #4]
 8023be6:	6863      	ldr	r3, [r4, #4]
 8023be8:	bf08      	it	eq
 8023bea:	6031      	streq	r1, [r6, #0]
 8023bec:	5162      	str	r2, [r4, r5]
 8023bee:	604b      	str	r3, [r1, #4]
 8023bf0:	4638      	mov	r0, r7
 8023bf2:	f104 060b 	add.w	r6, r4, #11
 8023bf6:	f003 f9e7 	bl	8026fc8 <__malloc_unlock>
 8023bfa:	f026 0607 	bic.w	r6, r6, #7
 8023bfe:	1d23      	adds	r3, r4, #4
 8023c00:	1af2      	subs	r2, r6, r3
 8023c02:	d0b6      	beq.n	8023b72 <_malloc_r+0x22>
 8023c04:	1b9b      	subs	r3, r3, r6
 8023c06:	50a3      	str	r3, [r4, r2]
 8023c08:	e7b3      	b.n	8023b72 <_malloc_r+0x22>
 8023c0a:	6862      	ldr	r2, [r4, #4]
 8023c0c:	42a3      	cmp	r3, r4
 8023c0e:	bf0c      	ite	eq
 8023c10:	6032      	streq	r2, [r6, #0]
 8023c12:	605a      	strne	r2, [r3, #4]
 8023c14:	e7ec      	b.n	8023bf0 <_malloc_r+0xa0>
 8023c16:	4623      	mov	r3, r4
 8023c18:	6864      	ldr	r4, [r4, #4]
 8023c1a:	e7b2      	b.n	8023b82 <_malloc_r+0x32>
 8023c1c:	4634      	mov	r4, r6
 8023c1e:	6876      	ldr	r6, [r6, #4]
 8023c20:	e7b9      	b.n	8023b96 <_malloc_r+0x46>
 8023c22:	230c      	movs	r3, #12
 8023c24:	603b      	str	r3, [r7, #0]
 8023c26:	4638      	mov	r0, r7
 8023c28:	f003 f9ce 	bl	8026fc8 <__malloc_unlock>
 8023c2c:	e7a1      	b.n	8023b72 <_malloc_r+0x22>
 8023c2e:	6025      	str	r5, [r4, #0]
 8023c30:	e7de      	b.n	8023bf0 <_malloc_r+0xa0>
 8023c32:	bf00      	nop
 8023c34:	2002f8f8 	.word	0x2002f8f8

08023c38 <__cvt>:
 8023c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c3a:	ed2d 8b02 	vpush	{d8}
 8023c3e:	eeb0 8b40 	vmov.f64	d8, d0
 8023c42:	b085      	sub	sp, #20
 8023c44:	4617      	mov	r7, r2
 8023c46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023c48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023c4a:	ee18 2a90 	vmov	r2, s17
 8023c4e:	f025 0520 	bic.w	r5, r5, #32
 8023c52:	2a00      	cmp	r2, #0
 8023c54:	bfb6      	itet	lt
 8023c56:	222d      	movlt	r2, #45	; 0x2d
 8023c58:	2200      	movge	r2, #0
 8023c5a:	eeb1 8b40 	vneglt.f64	d8, d0
 8023c5e:	2d46      	cmp	r5, #70	; 0x46
 8023c60:	460c      	mov	r4, r1
 8023c62:	701a      	strb	r2, [r3, #0]
 8023c64:	d004      	beq.n	8023c70 <__cvt+0x38>
 8023c66:	2d45      	cmp	r5, #69	; 0x45
 8023c68:	d100      	bne.n	8023c6c <__cvt+0x34>
 8023c6a:	3401      	adds	r4, #1
 8023c6c:	2102      	movs	r1, #2
 8023c6e:	e000      	b.n	8023c72 <__cvt+0x3a>
 8023c70:	2103      	movs	r1, #3
 8023c72:	ab03      	add	r3, sp, #12
 8023c74:	9301      	str	r3, [sp, #4]
 8023c76:	ab02      	add	r3, sp, #8
 8023c78:	9300      	str	r3, [sp, #0]
 8023c7a:	4622      	mov	r2, r4
 8023c7c:	4633      	mov	r3, r6
 8023c7e:	eeb0 0b48 	vmov.f64	d0, d8
 8023c82:	f002 f8e9 	bl	8025e58 <_dtoa_r>
 8023c86:	2d47      	cmp	r5, #71	; 0x47
 8023c88:	d101      	bne.n	8023c8e <__cvt+0x56>
 8023c8a:	07fb      	lsls	r3, r7, #31
 8023c8c:	d51a      	bpl.n	8023cc4 <__cvt+0x8c>
 8023c8e:	2d46      	cmp	r5, #70	; 0x46
 8023c90:	eb00 0204 	add.w	r2, r0, r4
 8023c94:	d10c      	bne.n	8023cb0 <__cvt+0x78>
 8023c96:	7803      	ldrb	r3, [r0, #0]
 8023c98:	2b30      	cmp	r3, #48	; 0x30
 8023c9a:	d107      	bne.n	8023cac <__cvt+0x74>
 8023c9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8023ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ca4:	bf1c      	itt	ne
 8023ca6:	f1c4 0401 	rsbne	r4, r4, #1
 8023caa:	6034      	strne	r4, [r6, #0]
 8023cac:	6833      	ldr	r3, [r6, #0]
 8023cae:	441a      	add	r2, r3
 8023cb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8023cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cb8:	bf08      	it	eq
 8023cba:	9203      	streq	r2, [sp, #12]
 8023cbc:	2130      	movs	r1, #48	; 0x30
 8023cbe:	9b03      	ldr	r3, [sp, #12]
 8023cc0:	4293      	cmp	r3, r2
 8023cc2:	d307      	bcc.n	8023cd4 <__cvt+0x9c>
 8023cc4:	9b03      	ldr	r3, [sp, #12]
 8023cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023cc8:	1a1b      	subs	r3, r3, r0
 8023cca:	6013      	str	r3, [r2, #0]
 8023ccc:	b005      	add	sp, #20
 8023cce:	ecbd 8b02 	vpop	{d8}
 8023cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023cd4:	1c5c      	adds	r4, r3, #1
 8023cd6:	9403      	str	r4, [sp, #12]
 8023cd8:	7019      	strb	r1, [r3, #0]
 8023cda:	e7f0      	b.n	8023cbe <__cvt+0x86>

08023cdc <__exponent>:
 8023cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023cde:	4603      	mov	r3, r0
 8023ce0:	2900      	cmp	r1, #0
 8023ce2:	bfb8      	it	lt
 8023ce4:	4249      	neglt	r1, r1
 8023ce6:	f803 2b02 	strb.w	r2, [r3], #2
 8023cea:	bfb4      	ite	lt
 8023cec:	222d      	movlt	r2, #45	; 0x2d
 8023cee:	222b      	movge	r2, #43	; 0x2b
 8023cf0:	2909      	cmp	r1, #9
 8023cf2:	7042      	strb	r2, [r0, #1]
 8023cf4:	dd2a      	ble.n	8023d4c <__exponent+0x70>
 8023cf6:	f10d 0407 	add.w	r4, sp, #7
 8023cfa:	46a4      	mov	ip, r4
 8023cfc:	270a      	movs	r7, #10
 8023cfe:	46a6      	mov	lr, r4
 8023d00:	460a      	mov	r2, r1
 8023d02:	fb91 f6f7 	sdiv	r6, r1, r7
 8023d06:	fb07 1516 	mls	r5, r7, r6, r1
 8023d0a:	3530      	adds	r5, #48	; 0x30
 8023d0c:	2a63      	cmp	r2, #99	; 0x63
 8023d0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8023d12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8023d16:	4631      	mov	r1, r6
 8023d18:	dcf1      	bgt.n	8023cfe <__exponent+0x22>
 8023d1a:	3130      	adds	r1, #48	; 0x30
 8023d1c:	f1ae 0502 	sub.w	r5, lr, #2
 8023d20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8023d24:	1c44      	adds	r4, r0, #1
 8023d26:	4629      	mov	r1, r5
 8023d28:	4561      	cmp	r1, ip
 8023d2a:	d30a      	bcc.n	8023d42 <__exponent+0x66>
 8023d2c:	f10d 0209 	add.w	r2, sp, #9
 8023d30:	eba2 020e 	sub.w	r2, r2, lr
 8023d34:	4565      	cmp	r5, ip
 8023d36:	bf88      	it	hi
 8023d38:	2200      	movhi	r2, #0
 8023d3a:	4413      	add	r3, r2
 8023d3c:	1a18      	subs	r0, r3, r0
 8023d3e:	b003      	add	sp, #12
 8023d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023d46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8023d4a:	e7ed      	b.n	8023d28 <__exponent+0x4c>
 8023d4c:	2330      	movs	r3, #48	; 0x30
 8023d4e:	3130      	adds	r1, #48	; 0x30
 8023d50:	7083      	strb	r3, [r0, #2]
 8023d52:	70c1      	strb	r1, [r0, #3]
 8023d54:	1d03      	adds	r3, r0, #4
 8023d56:	e7f1      	b.n	8023d3c <__exponent+0x60>

08023d58 <_printf_float>:
 8023d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d5c:	b08b      	sub	sp, #44	; 0x2c
 8023d5e:	460c      	mov	r4, r1
 8023d60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8023d64:	4616      	mov	r6, r2
 8023d66:	461f      	mov	r7, r3
 8023d68:	4605      	mov	r5, r0
 8023d6a:	f003 f8ab 	bl	8026ec4 <_localeconv_r>
 8023d6e:	f8d0 b000 	ldr.w	fp, [r0]
 8023d72:	4658      	mov	r0, fp
 8023d74:	f7dc fa6e 	bl	8000254 <strlen>
 8023d78:	2300      	movs	r3, #0
 8023d7a:	9308      	str	r3, [sp, #32]
 8023d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8023d80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8023d84:	6822      	ldr	r2, [r4, #0]
 8023d86:	3307      	adds	r3, #7
 8023d88:	f023 0307 	bic.w	r3, r3, #7
 8023d8c:	f103 0108 	add.w	r1, r3, #8
 8023d90:	f8c8 1000 	str.w	r1, [r8]
 8023d94:	4682      	mov	sl, r0
 8023d96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023d9a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8023d9e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8024000 <_printf_float+0x2a8>
 8023da2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8023da6:	eeb0 6bc0 	vabs.f64	d6, d0
 8023daa:	eeb4 6b47 	vcmp.f64	d6, d7
 8023dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023db2:	dd24      	ble.n	8023dfe <_printf_float+0xa6>
 8023db4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8023db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023dbc:	d502      	bpl.n	8023dc4 <_printf_float+0x6c>
 8023dbe:	232d      	movs	r3, #45	; 0x2d
 8023dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023dc4:	4b90      	ldr	r3, [pc, #576]	; (8024008 <_printf_float+0x2b0>)
 8023dc6:	4891      	ldr	r0, [pc, #580]	; (802400c <_printf_float+0x2b4>)
 8023dc8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8023dcc:	bf94      	ite	ls
 8023dce:	4698      	movls	r8, r3
 8023dd0:	4680      	movhi	r8, r0
 8023dd2:	2303      	movs	r3, #3
 8023dd4:	6123      	str	r3, [r4, #16]
 8023dd6:	f022 0204 	bic.w	r2, r2, #4
 8023dda:	2300      	movs	r3, #0
 8023ddc:	6022      	str	r2, [r4, #0]
 8023dde:	9304      	str	r3, [sp, #16]
 8023de0:	9700      	str	r7, [sp, #0]
 8023de2:	4633      	mov	r3, r6
 8023de4:	aa09      	add	r2, sp, #36	; 0x24
 8023de6:	4621      	mov	r1, r4
 8023de8:	4628      	mov	r0, r5
 8023dea:	f000 f9d3 	bl	8024194 <_printf_common>
 8023dee:	3001      	adds	r0, #1
 8023df0:	f040 808a 	bne.w	8023f08 <_printf_float+0x1b0>
 8023df4:	f04f 30ff 	mov.w	r0, #4294967295
 8023df8:	b00b      	add	sp, #44	; 0x2c
 8023dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023dfe:	eeb4 0b40 	vcmp.f64	d0, d0
 8023e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e06:	d709      	bvc.n	8023e1c <_printf_float+0xc4>
 8023e08:	ee10 3a90 	vmov	r3, s1
 8023e0c:	2b00      	cmp	r3, #0
 8023e0e:	bfbc      	itt	lt
 8023e10:	232d      	movlt	r3, #45	; 0x2d
 8023e12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8023e16:	487e      	ldr	r0, [pc, #504]	; (8024010 <_printf_float+0x2b8>)
 8023e18:	4b7e      	ldr	r3, [pc, #504]	; (8024014 <_printf_float+0x2bc>)
 8023e1a:	e7d5      	b.n	8023dc8 <_printf_float+0x70>
 8023e1c:	6863      	ldr	r3, [r4, #4]
 8023e1e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8023e22:	9104      	str	r1, [sp, #16]
 8023e24:	1c59      	adds	r1, r3, #1
 8023e26:	d13c      	bne.n	8023ea2 <_printf_float+0x14a>
 8023e28:	2306      	movs	r3, #6
 8023e2a:	6063      	str	r3, [r4, #4]
 8023e2c:	2300      	movs	r3, #0
 8023e2e:	9303      	str	r3, [sp, #12]
 8023e30:	ab08      	add	r3, sp, #32
 8023e32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8023e36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8023e3a:	ab07      	add	r3, sp, #28
 8023e3c:	6861      	ldr	r1, [r4, #4]
 8023e3e:	9300      	str	r3, [sp, #0]
 8023e40:	6022      	str	r2, [r4, #0]
 8023e42:	f10d 031b 	add.w	r3, sp, #27
 8023e46:	4628      	mov	r0, r5
 8023e48:	f7ff fef6 	bl	8023c38 <__cvt>
 8023e4c:	9b04      	ldr	r3, [sp, #16]
 8023e4e:	9907      	ldr	r1, [sp, #28]
 8023e50:	2b47      	cmp	r3, #71	; 0x47
 8023e52:	4680      	mov	r8, r0
 8023e54:	d108      	bne.n	8023e68 <_printf_float+0x110>
 8023e56:	1cc8      	adds	r0, r1, #3
 8023e58:	db02      	blt.n	8023e60 <_printf_float+0x108>
 8023e5a:	6863      	ldr	r3, [r4, #4]
 8023e5c:	4299      	cmp	r1, r3
 8023e5e:	dd41      	ble.n	8023ee4 <_printf_float+0x18c>
 8023e60:	f1a9 0902 	sub.w	r9, r9, #2
 8023e64:	fa5f f989 	uxtb.w	r9, r9
 8023e68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8023e6c:	d820      	bhi.n	8023eb0 <_printf_float+0x158>
 8023e6e:	3901      	subs	r1, #1
 8023e70:	464a      	mov	r2, r9
 8023e72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8023e76:	9107      	str	r1, [sp, #28]
 8023e78:	f7ff ff30 	bl	8023cdc <__exponent>
 8023e7c:	9a08      	ldr	r2, [sp, #32]
 8023e7e:	9004      	str	r0, [sp, #16]
 8023e80:	1813      	adds	r3, r2, r0
 8023e82:	2a01      	cmp	r2, #1
 8023e84:	6123      	str	r3, [r4, #16]
 8023e86:	dc02      	bgt.n	8023e8e <_printf_float+0x136>
 8023e88:	6822      	ldr	r2, [r4, #0]
 8023e8a:	07d2      	lsls	r2, r2, #31
 8023e8c:	d501      	bpl.n	8023e92 <_printf_float+0x13a>
 8023e8e:	3301      	adds	r3, #1
 8023e90:	6123      	str	r3, [r4, #16]
 8023e92:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	d0a2      	beq.n	8023de0 <_printf_float+0x88>
 8023e9a:	232d      	movs	r3, #45	; 0x2d
 8023e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023ea0:	e79e      	b.n	8023de0 <_printf_float+0x88>
 8023ea2:	9904      	ldr	r1, [sp, #16]
 8023ea4:	2947      	cmp	r1, #71	; 0x47
 8023ea6:	d1c1      	bne.n	8023e2c <_printf_float+0xd4>
 8023ea8:	2b00      	cmp	r3, #0
 8023eaa:	d1bf      	bne.n	8023e2c <_printf_float+0xd4>
 8023eac:	2301      	movs	r3, #1
 8023eae:	e7bc      	b.n	8023e2a <_printf_float+0xd2>
 8023eb0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8023eb4:	d118      	bne.n	8023ee8 <_printf_float+0x190>
 8023eb6:	2900      	cmp	r1, #0
 8023eb8:	6863      	ldr	r3, [r4, #4]
 8023eba:	dd0b      	ble.n	8023ed4 <_printf_float+0x17c>
 8023ebc:	6121      	str	r1, [r4, #16]
 8023ebe:	b913      	cbnz	r3, 8023ec6 <_printf_float+0x16e>
 8023ec0:	6822      	ldr	r2, [r4, #0]
 8023ec2:	07d0      	lsls	r0, r2, #31
 8023ec4:	d502      	bpl.n	8023ecc <_printf_float+0x174>
 8023ec6:	3301      	adds	r3, #1
 8023ec8:	440b      	add	r3, r1
 8023eca:	6123      	str	r3, [r4, #16]
 8023ecc:	2300      	movs	r3, #0
 8023ece:	65a1      	str	r1, [r4, #88]	; 0x58
 8023ed0:	9304      	str	r3, [sp, #16]
 8023ed2:	e7de      	b.n	8023e92 <_printf_float+0x13a>
 8023ed4:	b913      	cbnz	r3, 8023edc <_printf_float+0x184>
 8023ed6:	6822      	ldr	r2, [r4, #0]
 8023ed8:	07d2      	lsls	r2, r2, #31
 8023eda:	d501      	bpl.n	8023ee0 <_printf_float+0x188>
 8023edc:	3302      	adds	r3, #2
 8023ede:	e7f4      	b.n	8023eca <_printf_float+0x172>
 8023ee0:	2301      	movs	r3, #1
 8023ee2:	e7f2      	b.n	8023eca <_printf_float+0x172>
 8023ee4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8023ee8:	9b08      	ldr	r3, [sp, #32]
 8023eea:	4299      	cmp	r1, r3
 8023eec:	db05      	blt.n	8023efa <_printf_float+0x1a2>
 8023eee:	6823      	ldr	r3, [r4, #0]
 8023ef0:	6121      	str	r1, [r4, #16]
 8023ef2:	07d8      	lsls	r0, r3, #31
 8023ef4:	d5ea      	bpl.n	8023ecc <_printf_float+0x174>
 8023ef6:	1c4b      	adds	r3, r1, #1
 8023ef8:	e7e7      	b.n	8023eca <_printf_float+0x172>
 8023efa:	2900      	cmp	r1, #0
 8023efc:	bfd4      	ite	le
 8023efe:	f1c1 0202 	rsble	r2, r1, #2
 8023f02:	2201      	movgt	r2, #1
 8023f04:	4413      	add	r3, r2
 8023f06:	e7e0      	b.n	8023eca <_printf_float+0x172>
 8023f08:	6823      	ldr	r3, [r4, #0]
 8023f0a:	055a      	lsls	r2, r3, #21
 8023f0c:	d407      	bmi.n	8023f1e <_printf_float+0x1c6>
 8023f0e:	6923      	ldr	r3, [r4, #16]
 8023f10:	4642      	mov	r2, r8
 8023f12:	4631      	mov	r1, r6
 8023f14:	4628      	mov	r0, r5
 8023f16:	47b8      	blx	r7
 8023f18:	3001      	adds	r0, #1
 8023f1a:	d12a      	bne.n	8023f72 <_printf_float+0x21a>
 8023f1c:	e76a      	b.n	8023df4 <_printf_float+0x9c>
 8023f1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8023f22:	f240 80e2 	bls.w	80240ea <_printf_float+0x392>
 8023f26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8023f2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f32:	d133      	bne.n	8023f9c <_printf_float+0x244>
 8023f34:	4a38      	ldr	r2, [pc, #224]	; (8024018 <_printf_float+0x2c0>)
 8023f36:	2301      	movs	r3, #1
 8023f38:	4631      	mov	r1, r6
 8023f3a:	4628      	mov	r0, r5
 8023f3c:	47b8      	blx	r7
 8023f3e:	3001      	adds	r0, #1
 8023f40:	f43f af58 	beq.w	8023df4 <_printf_float+0x9c>
 8023f44:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8023f48:	429a      	cmp	r2, r3
 8023f4a:	db02      	blt.n	8023f52 <_printf_float+0x1fa>
 8023f4c:	6823      	ldr	r3, [r4, #0]
 8023f4e:	07d8      	lsls	r0, r3, #31
 8023f50:	d50f      	bpl.n	8023f72 <_printf_float+0x21a>
 8023f52:	4653      	mov	r3, sl
 8023f54:	465a      	mov	r2, fp
 8023f56:	4631      	mov	r1, r6
 8023f58:	4628      	mov	r0, r5
 8023f5a:	47b8      	blx	r7
 8023f5c:	3001      	adds	r0, #1
 8023f5e:	f43f af49 	beq.w	8023df4 <_printf_float+0x9c>
 8023f62:	f04f 0800 	mov.w	r8, #0
 8023f66:	f104 091a 	add.w	r9, r4, #26
 8023f6a:	9b08      	ldr	r3, [sp, #32]
 8023f6c:	3b01      	subs	r3, #1
 8023f6e:	4543      	cmp	r3, r8
 8023f70:	dc09      	bgt.n	8023f86 <_printf_float+0x22e>
 8023f72:	6823      	ldr	r3, [r4, #0]
 8023f74:	079b      	lsls	r3, r3, #30
 8023f76:	f100 8108 	bmi.w	802418a <_printf_float+0x432>
 8023f7a:	68e0      	ldr	r0, [r4, #12]
 8023f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f7e:	4298      	cmp	r0, r3
 8023f80:	bfb8      	it	lt
 8023f82:	4618      	movlt	r0, r3
 8023f84:	e738      	b.n	8023df8 <_printf_float+0xa0>
 8023f86:	2301      	movs	r3, #1
 8023f88:	464a      	mov	r2, r9
 8023f8a:	4631      	mov	r1, r6
 8023f8c:	4628      	mov	r0, r5
 8023f8e:	47b8      	blx	r7
 8023f90:	3001      	adds	r0, #1
 8023f92:	f43f af2f 	beq.w	8023df4 <_printf_float+0x9c>
 8023f96:	f108 0801 	add.w	r8, r8, #1
 8023f9a:	e7e6      	b.n	8023f6a <_printf_float+0x212>
 8023f9c:	9b07      	ldr	r3, [sp, #28]
 8023f9e:	2b00      	cmp	r3, #0
 8023fa0:	dc3c      	bgt.n	802401c <_printf_float+0x2c4>
 8023fa2:	4a1d      	ldr	r2, [pc, #116]	; (8024018 <_printf_float+0x2c0>)
 8023fa4:	2301      	movs	r3, #1
 8023fa6:	4631      	mov	r1, r6
 8023fa8:	4628      	mov	r0, r5
 8023faa:	47b8      	blx	r7
 8023fac:	3001      	adds	r0, #1
 8023fae:	f43f af21 	beq.w	8023df4 <_printf_float+0x9c>
 8023fb2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8023fb6:	4313      	orrs	r3, r2
 8023fb8:	d102      	bne.n	8023fc0 <_printf_float+0x268>
 8023fba:	6823      	ldr	r3, [r4, #0]
 8023fbc:	07d9      	lsls	r1, r3, #31
 8023fbe:	d5d8      	bpl.n	8023f72 <_printf_float+0x21a>
 8023fc0:	4653      	mov	r3, sl
 8023fc2:	465a      	mov	r2, fp
 8023fc4:	4631      	mov	r1, r6
 8023fc6:	4628      	mov	r0, r5
 8023fc8:	47b8      	blx	r7
 8023fca:	3001      	adds	r0, #1
 8023fcc:	f43f af12 	beq.w	8023df4 <_printf_float+0x9c>
 8023fd0:	f04f 0900 	mov.w	r9, #0
 8023fd4:	f104 0a1a 	add.w	sl, r4, #26
 8023fd8:	9b07      	ldr	r3, [sp, #28]
 8023fda:	425b      	negs	r3, r3
 8023fdc:	454b      	cmp	r3, r9
 8023fde:	dc01      	bgt.n	8023fe4 <_printf_float+0x28c>
 8023fe0:	9b08      	ldr	r3, [sp, #32]
 8023fe2:	e795      	b.n	8023f10 <_printf_float+0x1b8>
 8023fe4:	2301      	movs	r3, #1
 8023fe6:	4652      	mov	r2, sl
 8023fe8:	4631      	mov	r1, r6
 8023fea:	4628      	mov	r0, r5
 8023fec:	47b8      	blx	r7
 8023fee:	3001      	adds	r0, #1
 8023ff0:	f43f af00 	beq.w	8023df4 <_printf_float+0x9c>
 8023ff4:	f109 0901 	add.w	r9, r9, #1
 8023ff8:	e7ee      	b.n	8023fd8 <_printf_float+0x280>
 8023ffa:	bf00      	nop
 8023ffc:	f3af 8000 	nop.w
 8024000:	ffffffff 	.word	0xffffffff
 8024004:	7fefffff 	.word	0x7fefffff
 8024008:	080e2488 	.word	0x080e2488
 802400c:	080e248c 	.word	0x080e248c
 8024010:	080e2494 	.word	0x080e2494
 8024014:	080e2490 	.word	0x080e2490
 8024018:	080e2b11 	.word	0x080e2b11
 802401c:	9a08      	ldr	r2, [sp, #32]
 802401e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024020:	429a      	cmp	r2, r3
 8024022:	bfa8      	it	ge
 8024024:	461a      	movge	r2, r3
 8024026:	2a00      	cmp	r2, #0
 8024028:	4691      	mov	r9, r2
 802402a:	dc38      	bgt.n	802409e <_printf_float+0x346>
 802402c:	2300      	movs	r3, #0
 802402e:	9305      	str	r3, [sp, #20]
 8024030:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024034:	f104 021a 	add.w	r2, r4, #26
 8024038:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802403a:	9905      	ldr	r1, [sp, #20]
 802403c:	9304      	str	r3, [sp, #16]
 802403e:	eba3 0309 	sub.w	r3, r3, r9
 8024042:	428b      	cmp	r3, r1
 8024044:	dc33      	bgt.n	80240ae <_printf_float+0x356>
 8024046:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802404a:	429a      	cmp	r2, r3
 802404c:	db3c      	blt.n	80240c8 <_printf_float+0x370>
 802404e:	6823      	ldr	r3, [r4, #0]
 8024050:	07da      	lsls	r2, r3, #31
 8024052:	d439      	bmi.n	80240c8 <_printf_float+0x370>
 8024054:	9b08      	ldr	r3, [sp, #32]
 8024056:	9a04      	ldr	r2, [sp, #16]
 8024058:	9907      	ldr	r1, [sp, #28]
 802405a:	1a9a      	subs	r2, r3, r2
 802405c:	eba3 0901 	sub.w	r9, r3, r1
 8024060:	4591      	cmp	r9, r2
 8024062:	bfa8      	it	ge
 8024064:	4691      	movge	r9, r2
 8024066:	f1b9 0f00 	cmp.w	r9, #0
 802406a:	dc35      	bgt.n	80240d8 <_printf_float+0x380>
 802406c:	f04f 0800 	mov.w	r8, #0
 8024070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024074:	f104 0a1a 	add.w	sl, r4, #26
 8024078:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802407c:	1a9b      	subs	r3, r3, r2
 802407e:	eba3 0309 	sub.w	r3, r3, r9
 8024082:	4543      	cmp	r3, r8
 8024084:	f77f af75 	ble.w	8023f72 <_printf_float+0x21a>
 8024088:	2301      	movs	r3, #1
 802408a:	4652      	mov	r2, sl
 802408c:	4631      	mov	r1, r6
 802408e:	4628      	mov	r0, r5
 8024090:	47b8      	blx	r7
 8024092:	3001      	adds	r0, #1
 8024094:	f43f aeae 	beq.w	8023df4 <_printf_float+0x9c>
 8024098:	f108 0801 	add.w	r8, r8, #1
 802409c:	e7ec      	b.n	8024078 <_printf_float+0x320>
 802409e:	4613      	mov	r3, r2
 80240a0:	4631      	mov	r1, r6
 80240a2:	4642      	mov	r2, r8
 80240a4:	4628      	mov	r0, r5
 80240a6:	47b8      	blx	r7
 80240a8:	3001      	adds	r0, #1
 80240aa:	d1bf      	bne.n	802402c <_printf_float+0x2d4>
 80240ac:	e6a2      	b.n	8023df4 <_printf_float+0x9c>
 80240ae:	2301      	movs	r3, #1
 80240b0:	4631      	mov	r1, r6
 80240b2:	4628      	mov	r0, r5
 80240b4:	9204      	str	r2, [sp, #16]
 80240b6:	47b8      	blx	r7
 80240b8:	3001      	adds	r0, #1
 80240ba:	f43f ae9b 	beq.w	8023df4 <_printf_float+0x9c>
 80240be:	9b05      	ldr	r3, [sp, #20]
 80240c0:	9a04      	ldr	r2, [sp, #16]
 80240c2:	3301      	adds	r3, #1
 80240c4:	9305      	str	r3, [sp, #20]
 80240c6:	e7b7      	b.n	8024038 <_printf_float+0x2e0>
 80240c8:	4653      	mov	r3, sl
 80240ca:	465a      	mov	r2, fp
 80240cc:	4631      	mov	r1, r6
 80240ce:	4628      	mov	r0, r5
 80240d0:	47b8      	blx	r7
 80240d2:	3001      	adds	r0, #1
 80240d4:	d1be      	bne.n	8024054 <_printf_float+0x2fc>
 80240d6:	e68d      	b.n	8023df4 <_printf_float+0x9c>
 80240d8:	9a04      	ldr	r2, [sp, #16]
 80240da:	464b      	mov	r3, r9
 80240dc:	4442      	add	r2, r8
 80240de:	4631      	mov	r1, r6
 80240e0:	4628      	mov	r0, r5
 80240e2:	47b8      	blx	r7
 80240e4:	3001      	adds	r0, #1
 80240e6:	d1c1      	bne.n	802406c <_printf_float+0x314>
 80240e8:	e684      	b.n	8023df4 <_printf_float+0x9c>
 80240ea:	9a08      	ldr	r2, [sp, #32]
 80240ec:	2a01      	cmp	r2, #1
 80240ee:	dc01      	bgt.n	80240f4 <_printf_float+0x39c>
 80240f0:	07db      	lsls	r3, r3, #31
 80240f2:	d537      	bpl.n	8024164 <_printf_float+0x40c>
 80240f4:	2301      	movs	r3, #1
 80240f6:	4642      	mov	r2, r8
 80240f8:	4631      	mov	r1, r6
 80240fa:	4628      	mov	r0, r5
 80240fc:	47b8      	blx	r7
 80240fe:	3001      	adds	r0, #1
 8024100:	f43f ae78 	beq.w	8023df4 <_printf_float+0x9c>
 8024104:	4653      	mov	r3, sl
 8024106:	465a      	mov	r2, fp
 8024108:	4631      	mov	r1, r6
 802410a:	4628      	mov	r0, r5
 802410c:	47b8      	blx	r7
 802410e:	3001      	adds	r0, #1
 8024110:	f43f ae70 	beq.w	8023df4 <_printf_float+0x9c>
 8024114:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8024118:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802411c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024120:	d01b      	beq.n	802415a <_printf_float+0x402>
 8024122:	9b08      	ldr	r3, [sp, #32]
 8024124:	f108 0201 	add.w	r2, r8, #1
 8024128:	3b01      	subs	r3, #1
 802412a:	4631      	mov	r1, r6
 802412c:	4628      	mov	r0, r5
 802412e:	47b8      	blx	r7
 8024130:	3001      	adds	r0, #1
 8024132:	d10e      	bne.n	8024152 <_printf_float+0x3fa>
 8024134:	e65e      	b.n	8023df4 <_printf_float+0x9c>
 8024136:	2301      	movs	r3, #1
 8024138:	464a      	mov	r2, r9
 802413a:	4631      	mov	r1, r6
 802413c:	4628      	mov	r0, r5
 802413e:	47b8      	blx	r7
 8024140:	3001      	adds	r0, #1
 8024142:	f43f ae57 	beq.w	8023df4 <_printf_float+0x9c>
 8024146:	f108 0801 	add.w	r8, r8, #1
 802414a:	9b08      	ldr	r3, [sp, #32]
 802414c:	3b01      	subs	r3, #1
 802414e:	4543      	cmp	r3, r8
 8024150:	dcf1      	bgt.n	8024136 <_printf_float+0x3de>
 8024152:	9b04      	ldr	r3, [sp, #16]
 8024154:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8024158:	e6db      	b.n	8023f12 <_printf_float+0x1ba>
 802415a:	f04f 0800 	mov.w	r8, #0
 802415e:	f104 091a 	add.w	r9, r4, #26
 8024162:	e7f2      	b.n	802414a <_printf_float+0x3f2>
 8024164:	2301      	movs	r3, #1
 8024166:	4642      	mov	r2, r8
 8024168:	e7df      	b.n	802412a <_printf_float+0x3d2>
 802416a:	2301      	movs	r3, #1
 802416c:	464a      	mov	r2, r9
 802416e:	4631      	mov	r1, r6
 8024170:	4628      	mov	r0, r5
 8024172:	47b8      	blx	r7
 8024174:	3001      	adds	r0, #1
 8024176:	f43f ae3d 	beq.w	8023df4 <_printf_float+0x9c>
 802417a:	f108 0801 	add.w	r8, r8, #1
 802417e:	68e3      	ldr	r3, [r4, #12]
 8024180:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024182:	1a5b      	subs	r3, r3, r1
 8024184:	4543      	cmp	r3, r8
 8024186:	dcf0      	bgt.n	802416a <_printf_float+0x412>
 8024188:	e6f7      	b.n	8023f7a <_printf_float+0x222>
 802418a:	f04f 0800 	mov.w	r8, #0
 802418e:	f104 0919 	add.w	r9, r4, #25
 8024192:	e7f4      	b.n	802417e <_printf_float+0x426>

08024194 <_printf_common>:
 8024194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024198:	4616      	mov	r6, r2
 802419a:	4699      	mov	r9, r3
 802419c:	688a      	ldr	r2, [r1, #8]
 802419e:	690b      	ldr	r3, [r1, #16]
 80241a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80241a4:	4293      	cmp	r3, r2
 80241a6:	bfb8      	it	lt
 80241a8:	4613      	movlt	r3, r2
 80241aa:	6033      	str	r3, [r6, #0]
 80241ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80241b0:	4607      	mov	r7, r0
 80241b2:	460c      	mov	r4, r1
 80241b4:	b10a      	cbz	r2, 80241ba <_printf_common+0x26>
 80241b6:	3301      	adds	r3, #1
 80241b8:	6033      	str	r3, [r6, #0]
 80241ba:	6823      	ldr	r3, [r4, #0]
 80241bc:	0699      	lsls	r1, r3, #26
 80241be:	bf42      	ittt	mi
 80241c0:	6833      	ldrmi	r3, [r6, #0]
 80241c2:	3302      	addmi	r3, #2
 80241c4:	6033      	strmi	r3, [r6, #0]
 80241c6:	6825      	ldr	r5, [r4, #0]
 80241c8:	f015 0506 	ands.w	r5, r5, #6
 80241cc:	d106      	bne.n	80241dc <_printf_common+0x48>
 80241ce:	f104 0a19 	add.w	sl, r4, #25
 80241d2:	68e3      	ldr	r3, [r4, #12]
 80241d4:	6832      	ldr	r2, [r6, #0]
 80241d6:	1a9b      	subs	r3, r3, r2
 80241d8:	42ab      	cmp	r3, r5
 80241da:	dc26      	bgt.n	802422a <_printf_common+0x96>
 80241dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80241e0:	1e13      	subs	r3, r2, #0
 80241e2:	6822      	ldr	r2, [r4, #0]
 80241e4:	bf18      	it	ne
 80241e6:	2301      	movne	r3, #1
 80241e8:	0692      	lsls	r2, r2, #26
 80241ea:	d42b      	bmi.n	8024244 <_printf_common+0xb0>
 80241ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80241f0:	4649      	mov	r1, r9
 80241f2:	4638      	mov	r0, r7
 80241f4:	47c0      	blx	r8
 80241f6:	3001      	adds	r0, #1
 80241f8:	d01e      	beq.n	8024238 <_printf_common+0xa4>
 80241fa:	6823      	ldr	r3, [r4, #0]
 80241fc:	68e5      	ldr	r5, [r4, #12]
 80241fe:	6832      	ldr	r2, [r6, #0]
 8024200:	f003 0306 	and.w	r3, r3, #6
 8024204:	2b04      	cmp	r3, #4
 8024206:	bf08      	it	eq
 8024208:	1aad      	subeq	r5, r5, r2
 802420a:	68a3      	ldr	r3, [r4, #8]
 802420c:	6922      	ldr	r2, [r4, #16]
 802420e:	bf0c      	ite	eq
 8024210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024214:	2500      	movne	r5, #0
 8024216:	4293      	cmp	r3, r2
 8024218:	bfc4      	itt	gt
 802421a:	1a9b      	subgt	r3, r3, r2
 802421c:	18ed      	addgt	r5, r5, r3
 802421e:	2600      	movs	r6, #0
 8024220:	341a      	adds	r4, #26
 8024222:	42b5      	cmp	r5, r6
 8024224:	d11a      	bne.n	802425c <_printf_common+0xc8>
 8024226:	2000      	movs	r0, #0
 8024228:	e008      	b.n	802423c <_printf_common+0xa8>
 802422a:	2301      	movs	r3, #1
 802422c:	4652      	mov	r2, sl
 802422e:	4649      	mov	r1, r9
 8024230:	4638      	mov	r0, r7
 8024232:	47c0      	blx	r8
 8024234:	3001      	adds	r0, #1
 8024236:	d103      	bne.n	8024240 <_printf_common+0xac>
 8024238:	f04f 30ff 	mov.w	r0, #4294967295
 802423c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024240:	3501      	adds	r5, #1
 8024242:	e7c6      	b.n	80241d2 <_printf_common+0x3e>
 8024244:	18e1      	adds	r1, r4, r3
 8024246:	1c5a      	adds	r2, r3, #1
 8024248:	2030      	movs	r0, #48	; 0x30
 802424a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802424e:	4422      	add	r2, r4
 8024250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024258:	3302      	adds	r3, #2
 802425a:	e7c7      	b.n	80241ec <_printf_common+0x58>
 802425c:	2301      	movs	r3, #1
 802425e:	4622      	mov	r2, r4
 8024260:	4649      	mov	r1, r9
 8024262:	4638      	mov	r0, r7
 8024264:	47c0      	blx	r8
 8024266:	3001      	adds	r0, #1
 8024268:	d0e6      	beq.n	8024238 <_printf_common+0xa4>
 802426a:	3601      	adds	r6, #1
 802426c:	e7d9      	b.n	8024222 <_printf_common+0x8e>
	...

08024270 <_printf_i>:
 8024270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024274:	7e0f      	ldrb	r7, [r1, #24]
 8024276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024278:	2f78      	cmp	r7, #120	; 0x78
 802427a:	4691      	mov	r9, r2
 802427c:	4680      	mov	r8, r0
 802427e:	460c      	mov	r4, r1
 8024280:	469a      	mov	sl, r3
 8024282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024286:	d807      	bhi.n	8024298 <_printf_i+0x28>
 8024288:	2f62      	cmp	r7, #98	; 0x62
 802428a:	d80a      	bhi.n	80242a2 <_printf_i+0x32>
 802428c:	2f00      	cmp	r7, #0
 802428e:	f000 80d8 	beq.w	8024442 <_printf_i+0x1d2>
 8024292:	2f58      	cmp	r7, #88	; 0x58
 8024294:	f000 80a3 	beq.w	80243de <_printf_i+0x16e>
 8024298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802429c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80242a0:	e03a      	b.n	8024318 <_printf_i+0xa8>
 80242a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80242a6:	2b15      	cmp	r3, #21
 80242a8:	d8f6      	bhi.n	8024298 <_printf_i+0x28>
 80242aa:	a101      	add	r1, pc, #4	; (adr r1, 80242b0 <_printf_i+0x40>)
 80242ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80242b0:	08024309 	.word	0x08024309
 80242b4:	0802431d 	.word	0x0802431d
 80242b8:	08024299 	.word	0x08024299
 80242bc:	08024299 	.word	0x08024299
 80242c0:	08024299 	.word	0x08024299
 80242c4:	08024299 	.word	0x08024299
 80242c8:	0802431d 	.word	0x0802431d
 80242cc:	08024299 	.word	0x08024299
 80242d0:	08024299 	.word	0x08024299
 80242d4:	08024299 	.word	0x08024299
 80242d8:	08024299 	.word	0x08024299
 80242dc:	08024429 	.word	0x08024429
 80242e0:	0802434d 	.word	0x0802434d
 80242e4:	0802440b 	.word	0x0802440b
 80242e8:	08024299 	.word	0x08024299
 80242ec:	08024299 	.word	0x08024299
 80242f0:	0802444b 	.word	0x0802444b
 80242f4:	08024299 	.word	0x08024299
 80242f8:	0802434d 	.word	0x0802434d
 80242fc:	08024299 	.word	0x08024299
 8024300:	08024299 	.word	0x08024299
 8024304:	08024413 	.word	0x08024413
 8024308:	682b      	ldr	r3, [r5, #0]
 802430a:	1d1a      	adds	r2, r3, #4
 802430c:	681b      	ldr	r3, [r3, #0]
 802430e:	602a      	str	r2, [r5, #0]
 8024310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024318:	2301      	movs	r3, #1
 802431a:	e0a3      	b.n	8024464 <_printf_i+0x1f4>
 802431c:	6820      	ldr	r0, [r4, #0]
 802431e:	6829      	ldr	r1, [r5, #0]
 8024320:	0606      	lsls	r6, r0, #24
 8024322:	f101 0304 	add.w	r3, r1, #4
 8024326:	d50a      	bpl.n	802433e <_printf_i+0xce>
 8024328:	680e      	ldr	r6, [r1, #0]
 802432a:	602b      	str	r3, [r5, #0]
 802432c:	2e00      	cmp	r6, #0
 802432e:	da03      	bge.n	8024338 <_printf_i+0xc8>
 8024330:	232d      	movs	r3, #45	; 0x2d
 8024332:	4276      	negs	r6, r6
 8024334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024338:	485e      	ldr	r0, [pc, #376]	; (80244b4 <_printf_i+0x244>)
 802433a:	230a      	movs	r3, #10
 802433c:	e019      	b.n	8024372 <_printf_i+0x102>
 802433e:	680e      	ldr	r6, [r1, #0]
 8024340:	602b      	str	r3, [r5, #0]
 8024342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024346:	bf18      	it	ne
 8024348:	b236      	sxthne	r6, r6
 802434a:	e7ef      	b.n	802432c <_printf_i+0xbc>
 802434c:	682b      	ldr	r3, [r5, #0]
 802434e:	6820      	ldr	r0, [r4, #0]
 8024350:	1d19      	adds	r1, r3, #4
 8024352:	6029      	str	r1, [r5, #0]
 8024354:	0601      	lsls	r1, r0, #24
 8024356:	d501      	bpl.n	802435c <_printf_i+0xec>
 8024358:	681e      	ldr	r6, [r3, #0]
 802435a:	e002      	b.n	8024362 <_printf_i+0xf2>
 802435c:	0646      	lsls	r6, r0, #25
 802435e:	d5fb      	bpl.n	8024358 <_printf_i+0xe8>
 8024360:	881e      	ldrh	r6, [r3, #0]
 8024362:	4854      	ldr	r0, [pc, #336]	; (80244b4 <_printf_i+0x244>)
 8024364:	2f6f      	cmp	r7, #111	; 0x6f
 8024366:	bf0c      	ite	eq
 8024368:	2308      	moveq	r3, #8
 802436a:	230a      	movne	r3, #10
 802436c:	2100      	movs	r1, #0
 802436e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024372:	6865      	ldr	r5, [r4, #4]
 8024374:	60a5      	str	r5, [r4, #8]
 8024376:	2d00      	cmp	r5, #0
 8024378:	bfa2      	ittt	ge
 802437a:	6821      	ldrge	r1, [r4, #0]
 802437c:	f021 0104 	bicge.w	r1, r1, #4
 8024380:	6021      	strge	r1, [r4, #0]
 8024382:	b90e      	cbnz	r6, 8024388 <_printf_i+0x118>
 8024384:	2d00      	cmp	r5, #0
 8024386:	d04d      	beq.n	8024424 <_printf_i+0x1b4>
 8024388:	4615      	mov	r5, r2
 802438a:	fbb6 f1f3 	udiv	r1, r6, r3
 802438e:	fb03 6711 	mls	r7, r3, r1, r6
 8024392:	5dc7      	ldrb	r7, [r0, r7]
 8024394:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024398:	4637      	mov	r7, r6
 802439a:	42bb      	cmp	r3, r7
 802439c:	460e      	mov	r6, r1
 802439e:	d9f4      	bls.n	802438a <_printf_i+0x11a>
 80243a0:	2b08      	cmp	r3, #8
 80243a2:	d10b      	bne.n	80243bc <_printf_i+0x14c>
 80243a4:	6823      	ldr	r3, [r4, #0]
 80243a6:	07de      	lsls	r6, r3, #31
 80243a8:	d508      	bpl.n	80243bc <_printf_i+0x14c>
 80243aa:	6923      	ldr	r3, [r4, #16]
 80243ac:	6861      	ldr	r1, [r4, #4]
 80243ae:	4299      	cmp	r1, r3
 80243b0:	bfde      	ittt	le
 80243b2:	2330      	movle	r3, #48	; 0x30
 80243b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80243b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80243bc:	1b52      	subs	r2, r2, r5
 80243be:	6122      	str	r2, [r4, #16]
 80243c0:	f8cd a000 	str.w	sl, [sp]
 80243c4:	464b      	mov	r3, r9
 80243c6:	aa03      	add	r2, sp, #12
 80243c8:	4621      	mov	r1, r4
 80243ca:	4640      	mov	r0, r8
 80243cc:	f7ff fee2 	bl	8024194 <_printf_common>
 80243d0:	3001      	adds	r0, #1
 80243d2:	d14c      	bne.n	802446e <_printf_i+0x1fe>
 80243d4:	f04f 30ff 	mov.w	r0, #4294967295
 80243d8:	b004      	add	sp, #16
 80243da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243de:	4835      	ldr	r0, [pc, #212]	; (80244b4 <_printf_i+0x244>)
 80243e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80243e4:	6829      	ldr	r1, [r5, #0]
 80243e6:	6823      	ldr	r3, [r4, #0]
 80243e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80243ec:	6029      	str	r1, [r5, #0]
 80243ee:	061d      	lsls	r5, r3, #24
 80243f0:	d514      	bpl.n	802441c <_printf_i+0x1ac>
 80243f2:	07df      	lsls	r7, r3, #31
 80243f4:	bf44      	itt	mi
 80243f6:	f043 0320 	orrmi.w	r3, r3, #32
 80243fa:	6023      	strmi	r3, [r4, #0]
 80243fc:	b91e      	cbnz	r6, 8024406 <_printf_i+0x196>
 80243fe:	6823      	ldr	r3, [r4, #0]
 8024400:	f023 0320 	bic.w	r3, r3, #32
 8024404:	6023      	str	r3, [r4, #0]
 8024406:	2310      	movs	r3, #16
 8024408:	e7b0      	b.n	802436c <_printf_i+0xfc>
 802440a:	6823      	ldr	r3, [r4, #0]
 802440c:	f043 0320 	orr.w	r3, r3, #32
 8024410:	6023      	str	r3, [r4, #0]
 8024412:	2378      	movs	r3, #120	; 0x78
 8024414:	4828      	ldr	r0, [pc, #160]	; (80244b8 <_printf_i+0x248>)
 8024416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802441a:	e7e3      	b.n	80243e4 <_printf_i+0x174>
 802441c:	0659      	lsls	r1, r3, #25
 802441e:	bf48      	it	mi
 8024420:	b2b6      	uxthmi	r6, r6
 8024422:	e7e6      	b.n	80243f2 <_printf_i+0x182>
 8024424:	4615      	mov	r5, r2
 8024426:	e7bb      	b.n	80243a0 <_printf_i+0x130>
 8024428:	682b      	ldr	r3, [r5, #0]
 802442a:	6826      	ldr	r6, [r4, #0]
 802442c:	6961      	ldr	r1, [r4, #20]
 802442e:	1d18      	adds	r0, r3, #4
 8024430:	6028      	str	r0, [r5, #0]
 8024432:	0635      	lsls	r5, r6, #24
 8024434:	681b      	ldr	r3, [r3, #0]
 8024436:	d501      	bpl.n	802443c <_printf_i+0x1cc>
 8024438:	6019      	str	r1, [r3, #0]
 802443a:	e002      	b.n	8024442 <_printf_i+0x1d2>
 802443c:	0670      	lsls	r0, r6, #25
 802443e:	d5fb      	bpl.n	8024438 <_printf_i+0x1c8>
 8024440:	8019      	strh	r1, [r3, #0]
 8024442:	2300      	movs	r3, #0
 8024444:	6123      	str	r3, [r4, #16]
 8024446:	4615      	mov	r5, r2
 8024448:	e7ba      	b.n	80243c0 <_printf_i+0x150>
 802444a:	682b      	ldr	r3, [r5, #0]
 802444c:	1d1a      	adds	r2, r3, #4
 802444e:	602a      	str	r2, [r5, #0]
 8024450:	681d      	ldr	r5, [r3, #0]
 8024452:	6862      	ldr	r2, [r4, #4]
 8024454:	2100      	movs	r1, #0
 8024456:	4628      	mov	r0, r5
 8024458:	f7db ff0a 	bl	8000270 <memchr>
 802445c:	b108      	cbz	r0, 8024462 <_printf_i+0x1f2>
 802445e:	1b40      	subs	r0, r0, r5
 8024460:	6060      	str	r0, [r4, #4]
 8024462:	6863      	ldr	r3, [r4, #4]
 8024464:	6123      	str	r3, [r4, #16]
 8024466:	2300      	movs	r3, #0
 8024468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802446c:	e7a8      	b.n	80243c0 <_printf_i+0x150>
 802446e:	6923      	ldr	r3, [r4, #16]
 8024470:	462a      	mov	r2, r5
 8024472:	4649      	mov	r1, r9
 8024474:	4640      	mov	r0, r8
 8024476:	47d0      	blx	sl
 8024478:	3001      	adds	r0, #1
 802447a:	d0ab      	beq.n	80243d4 <_printf_i+0x164>
 802447c:	6823      	ldr	r3, [r4, #0]
 802447e:	079b      	lsls	r3, r3, #30
 8024480:	d413      	bmi.n	80244aa <_printf_i+0x23a>
 8024482:	68e0      	ldr	r0, [r4, #12]
 8024484:	9b03      	ldr	r3, [sp, #12]
 8024486:	4298      	cmp	r0, r3
 8024488:	bfb8      	it	lt
 802448a:	4618      	movlt	r0, r3
 802448c:	e7a4      	b.n	80243d8 <_printf_i+0x168>
 802448e:	2301      	movs	r3, #1
 8024490:	4632      	mov	r2, r6
 8024492:	4649      	mov	r1, r9
 8024494:	4640      	mov	r0, r8
 8024496:	47d0      	blx	sl
 8024498:	3001      	adds	r0, #1
 802449a:	d09b      	beq.n	80243d4 <_printf_i+0x164>
 802449c:	3501      	adds	r5, #1
 802449e:	68e3      	ldr	r3, [r4, #12]
 80244a0:	9903      	ldr	r1, [sp, #12]
 80244a2:	1a5b      	subs	r3, r3, r1
 80244a4:	42ab      	cmp	r3, r5
 80244a6:	dcf2      	bgt.n	802448e <_printf_i+0x21e>
 80244a8:	e7eb      	b.n	8024482 <_printf_i+0x212>
 80244aa:	2500      	movs	r5, #0
 80244ac:	f104 0619 	add.w	r6, r4, #25
 80244b0:	e7f5      	b.n	802449e <_printf_i+0x22e>
 80244b2:	bf00      	nop
 80244b4:	080e2498 	.word	0x080e2498
 80244b8:	080e24a9 	.word	0x080e24a9

080244bc <iprintf>:
 80244bc:	b40f      	push	{r0, r1, r2, r3}
 80244be:	4b0a      	ldr	r3, [pc, #40]	; (80244e8 <iprintf+0x2c>)
 80244c0:	b513      	push	{r0, r1, r4, lr}
 80244c2:	681c      	ldr	r4, [r3, #0]
 80244c4:	b124      	cbz	r4, 80244d0 <iprintf+0x14>
 80244c6:	69a3      	ldr	r3, [r4, #24]
 80244c8:	b913      	cbnz	r3, 80244d0 <iprintf+0x14>
 80244ca:	4620      	mov	r0, r4
 80244cc:	f002 fb52 	bl	8026b74 <__sinit>
 80244d0:	ab05      	add	r3, sp, #20
 80244d2:	9a04      	ldr	r2, [sp, #16]
 80244d4:	68a1      	ldr	r1, [r4, #8]
 80244d6:	9301      	str	r3, [sp, #4]
 80244d8:	4620      	mov	r0, r4
 80244da:	f003 fc9b 	bl	8027e14 <_vfiprintf_r>
 80244de:	b002      	add	sp, #8
 80244e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80244e4:	b004      	add	sp, #16
 80244e6:	4770      	bx	lr
 80244e8:	20000488 	.word	0x20000488

080244ec <putchar>:
 80244ec:	4b09      	ldr	r3, [pc, #36]	; (8024514 <putchar+0x28>)
 80244ee:	b513      	push	{r0, r1, r4, lr}
 80244f0:	681c      	ldr	r4, [r3, #0]
 80244f2:	4601      	mov	r1, r0
 80244f4:	b134      	cbz	r4, 8024504 <putchar+0x18>
 80244f6:	69a3      	ldr	r3, [r4, #24]
 80244f8:	b923      	cbnz	r3, 8024504 <putchar+0x18>
 80244fa:	9001      	str	r0, [sp, #4]
 80244fc:	4620      	mov	r0, r4
 80244fe:	f002 fb39 	bl	8026b74 <__sinit>
 8024502:	9901      	ldr	r1, [sp, #4]
 8024504:	68a2      	ldr	r2, [r4, #8]
 8024506:	4620      	mov	r0, r4
 8024508:	b002      	add	sp, #8
 802450a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802450e:	f003 bf03 	b.w	8028318 <_putc_r>
 8024512:	bf00      	nop
 8024514:	20000488 	.word	0x20000488

08024518 <_puts_r>:
 8024518:	b570      	push	{r4, r5, r6, lr}
 802451a:	460e      	mov	r6, r1
 802451c:	4605      	mov	r5, r0
 802451e:	b118      	cbz	r0, 8024528 <_puts_r+0x10>
 8024520:	6983      	ldr	r3, [r0, #24]
 8024522:	b90b      	cbnz	r3, 8024528 <_puts_r+0x10>
 8024524:	f002 fb26 	bl	8026b74 <__sinit>
 8024528:	69ab      	ldr	r3, [r5, #24]
 802452a:	68ac      	ldr	r4, [r5, #8]
 802452c:	b913      	cbnz	r3, 8024534 <_puts_r+0x1c>
 802452e:	4628      	mov	r0, r5
 8024530:	f002 fb20 	bl	8026b74 <__sinit>
 8024534:	4b2c      	ldr	r3, [pc, #176]	; (80245e8 <_puts_r+0xd0>)
 8024536:	429c      	cmp	r4, r3
 8024538:	d120      	bne.n	802457c <_puts_r+0x64>
 802453a:	686c      	ldr	r4, [r5, #4]
 802453c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802453e:	07db      	lsls	r3, r3, #31
 8024540:	d405      	bmi.n	802454e <_puts_r+0x36>
 8024542:	89a3      	ldrh	r3, [r4, #12]
 8024544:	0598      	lsls	r0, r3, #22
 8024546:	d402      	bmi.n	802454e <_puts_r+0x36>
 8024548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802454a:	f7fe ffcf 	bl	80234ec <__retarget_lock_acquire_recursive>
 802454e:	89a3      	ldrh	r3, [r4, #12]
 8024550:	0719      	lsls	r1, r3, #28
 8024552:	d51d      	bpl.n	8024590 <_puts_r+0x78>
 8024554:	6923      	ldr	r3, [r4, #16]
 8024556:	b1db      	cbz	r3, 8024590 <_puts_r+0x78>
 8024558:	3e01      	subs	r6, #1
 802455a:	68a3      	ldr	r3, [r4, #8]
 802455c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8024560:	3b01      	subs	r3, #1
 8024562:	60a3      	str	r3, [r4, #8]
 8024564:	bb39      	cbnz	r1, 80245b6 <_puts_r+0x9e>
 8024566:	2b00      	cmp	r3, #0
 8024568:	da38      	bge.n	80245dc <_puts_r+0xc4>
 802456a:	4622      	mov	r2, r4
 802456c:	210a      	movs	r1, #10
 802456e:	4628      	mov	r0, r5
 8024570:	f001 fa86 	bl	8025a80 <__swbuf_r>
 8024574:	3001      	adds	r0, #1
 8024576:	d011      	beq.n	802459c <_puts_r+0x84>
 8024578:	250a      	movs	r5, #10
 802457a:	e011      	b.n	80245a0 <_puts_r+0x88>
 802457c:	4b1b      	ldr	r3, [pc, #108]	; (80245ec <_puts_r+0xd4>)
 802457e:	429c      	cmp	r4, r3
 8024580:	d101      	bne.n	8024586 <_puts_r+0x6e>
 8024582:	68ac      	ldr	r4, [r5, #8]
 8024584:	e7da      	b.n	802453c <_puts_r+0x24>
 8024586:	4b1a      	ldr	r3, [pc, #104]	; (80245f0 <_puts_r+0xd8>)
 8024588:	429c      	cmp	r4, r3
 802458a:	bf08      	it	eq
 802458c:	68ec      	ldreq	r4, [r5, #12]
 802458e:	e7d5      	b.n	802453c <_puts_r+0x24>
 8024590:	4621      	mov	r1, r4
 8024592:	4628      	mov	r0, r5
 8024594:	f001 fad8 	bl	8025b48 <__swsetup_r>
 8024598:	2800      	cmp	r0, #0
 802459a:	d0dd      	beq.n	8024558 <_puts_r+0x40>
 802459c:	f04f 35ff 	mov.w	r5, #4294967295
 80245a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80245a2:	07da      	lsls	r2, r3, #31
 80245a4:	d405      	bmi.n	80245b2 <_puts_r+0x9a>
 80245a6:	89a3      	ldrh	r3, [r4, #12]
 80245a8:	059b      	lsls	r3, r3, #22
 80245aa:	d402      	bmi.n	80245b2 <_puts_r+0x9a>
 80245ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80245ae:	f7fe ff9f 	bl	80234f0 <__retarget_lock_release_recursive>
 80245b2:	4628      	mov	r0, r5
 80245b4:	bd70      	pop	{r4, r5, r6, pc}
 80245b6:	2b00      	cmp	r3, #0
 80245b8:	da04      	bge.n	80245c4 <_puts_r+0xac>
 80245ba:	69a2      	ldr	r2, [r4, #24]
 80245bc:	429a      	cmp	r2, r3
 80245be:	dc06      	bgt.n	80245ce <_puts_r+0xb6>
 80245c0:	290a      	cmp	r1, #10
 80245c2:	d004      	beq.n	80245ce <_puts_r+0xb6>
 80245c4:	6823      	ldr	r3, [r4, #0]
 80245c6:	1c5a      	adds	r2, r3, #1
 80245c8:	6022      	str	r2, [r4, #0]
 80245ca:	7019      	strb	r1, [r3, #0]
 80245cc:	e7c5      	b.n	802455a <_puts_r+0x42>
 80245ce:	4622      	mov	r2, r4
 80245d0:	4628      	mov	r0, r5
 80245d2:	f001 fa55 	bl	8025a80 <__swbuf_r>
 80245d6:	3001      	adds	r0, #1
 80245d8:	d1bf      	bne.n	802455a <_puts_r+0x42>
 80245da:	e7df      	b.n	802459c <_puts_r+0x84>
 80245dc:	6823      	ldr	r3, [r4, #0]
 80245de:	250a      	movs	r5, #10
 80245e0:	1c5a      	adds	r2, r3, #1
 80245e2:	6022      	str	r2, [r4, #0]
 80245e4:	701d      	strb	r5, [r3, #0]
 80245e6:	e7db      	b.n	80245a0 <_puts_r+0x88>
 80245e8:	080e2960 	.word	0x080e2960
 80245ec:	080e2980 	.word	0x080e2980
 80245f0:	080e2940 	.word	0x080e2940

080245f4 <puts>:
 80245f4:	4b02      	ldr	r3, [pc, #8]	; (8024600 <puts+0xc>)
 80245f6:	4601      	mov	r1, r0
 80245f8:	6818      	ldr	r0, [r3, #0]
 80245fa:	f7ff bf8d 	b.w	8024518 <_puts_r>
 80245fe:	bf00      	nop
 8024600:	20000488 	.word	0x20000488

08024604 <rand>:
 8024604:	4b16      	ldr	r3, [pc, #88]	; (8024660 <rand+0x5c>)
 8024606:	b510      	push	{r4, lr}
 8024608:	681c      	ldr	r4, [r3, #0]
 802460a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802460c:	b9b3      	cbnz	r3, 802463c <rand+0x38>
 802460e:	2018      	movs	r0, #24
 8024610:	f7fe ff70 	bl	80234f4 <malloc>
 8024614:	63a0      	str	r0, [r4, #56]	; 0x38
 8024616:	b928      	cbnz	r0, 8024624 <rand+0x20>
 8024618:	4602      	mov	r2, r0
 802461a:	4b12      	ldr	r3, [pc, #72]	; (8024664 <rand+0x60>)
 802461c:	4812      	ldr	r0, [pc, #72]	; (8024668 <rand+0x64>)
 802461e:	214e      	movs	r1, #78	; 0x4e
 8024620:	f001 fb4c 	bl	8025cbc <__assert_func>
 8024624:	4a11      	ldr	r2, [pc, #68]	; (802466c <rand+0x68>)
 8024626:	4b12      	ldr	r3, [pc, #72]	; (8024670 <rand+0x6c>)
 8024628:	e9c0 2300 	strd	r2, r3, [r0]
 802462c:	4b11      	ldr	r3, [pc, #68]	; (8024674 <rand+0x70>)
 802462e:	6083      	str	r3, [r0, #8]
 8024630:	230b      	movs	r3, #11
 8024632:	8183      	strh	r3, [r0, #12]
 8024634:	2201      	movs	r2, #1
 8024636:	2300      	movs	r3, #0
 8024638:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802463c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802463e:	4a0e      	ldr	r2, [pc, #56]	; (8024678 <rand+0x74>)
 8024640:	6920      	ldr	r0, [r4, #16]
 8024642:	6963      	ldr	r3, [r4, #20]
 8024644:	490d      	ldr	r1, [pc, #52]	; (802467c <rand+0x78>)
 8024646:	4342      	muls	r2, r0
 8024648:	fb01 2203 	mla	r2, r1, r3, r2
 802464c:	fba0 0101 	umull	r0, r1, r0, r1
 8024650:	1c43      	adds	r3, r0, #1
 8024652:	eb42 0001 	adc.w	r0, r2, r1
 8024656:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802465a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802465e:	bd10      	pop	{r4, pc}
 8024660:	20000488 	.word	0x20000488
 8024664:	080e2354 	.word	0x080e2354
 8024668:	080e24ba 	.word	0x080e24ba
 802466c:	abcd330e 	.word	0xabcd330e
 8024670:	e66d1234 	.word	0xe66d1234
 8024674:	0005deec 	.word	0x0005deec
 8024678:	5851f42d 	.word	0x5851f42d
 802467c:	4c957f2d 	.word	0x4c957f2d

08024680 <realloc>:
 8024680:	4b02      	ldr	r3, [pc, #8]	; (802468c <realloc+0xc>)
 8024682:	460a      	mov	r2, r1
 8024684:	4601      	mov	r1, r0
 8024686:	6818      	ldr	r0, [r3, #0]
 8024688:	f003 b83e 	b.w	8027708 <_realloc_r>
 802468c:	20000488 	.word	0x20000488

08024690 <modf>:
 8024690:	b570      	push	{r4, r5, r6, lr}
 8024692:	ed2d 8b02 	vpush	{d8}
 8024696:	eeb0 8b40 	vmov.f64	d8, d0
 802469a:	ee18 5a90 	vmov	r5, s17
 802469e:	4604      	mov	r4, r0
 80246a0:	f3c5 500a 	ubfx	r0, r5, #20, #11
 80246a4:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 80246a8:	2b13      	cmp	r3, #19
 80246aa:	ee10 1a10 	vmov	r1, s0
 80246ae:	dc23      	bgt.n	80246f8 <modf+0x68>
 80246b0:	2b00      	cmp	r3, #0
 80246b2:	da09      	bge.n	80246c8 <modf+0x38>
 80246b4:	2200      	movs	r2, #0
 80246b6:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80246ba:	e9c4 2300 	strd	r2, r3, [r4]
 80246be:	eeb0 0b48 	vmov.f64	d0, d8
 80246c2:	ecbd 8b02 	vpop	{d8}
 80246c6:	bd70      	pop	{r4, r5, r6, pc}
 80246c8:	481d      	ldr	r0, [pc, #116]	; (8024740 <modf+0xb0>)
 80246ca:	4118      	asrs	r0, r3
 80246cc:	ea05 0300 	and.w	r3, r5, r0
 80246d0:	4319      	orrs	r1, r3
 80246d2:	d107      	bne.n	80246e4 <modf+0x54>
 80246d4:	ed84 0b00 	vstr	d0, [r4]
 80246d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80246dc:	460a      	mov	r2, r1
 80246de:	ec43 2b18 	vmov	d8, r2, r3
 80246e2:	e7ec      	b.n	80246be <modf+0x2e>
 80246e4:	2200      	movs	r2, #0
 80246e6:	ea25 0300 	bic.w	r3, r5, r0
 80246ea:	ec43 2b17 	vmov	d7, r2, r3
 80246ee:	e9c4 2300 	strd	r2, r3, [r4]
 80246f2:	ee38 8b47 	vsub.f64	d8, d8, d7
 80246f6:	e7e2      	b.n	80246be <modf+0x2e>
 80246f8:	2b33      	cmp	r3, #51	; 0x33
 80246fa:	dd0d      	ble.n	8024718 <modf+0x88>
 80246fc:	ed84 0b00 	vstr	d0, [r4]
 8024700:	f003 fe64 	bl	80283cc <__fpclassifyd>
 8024704:	b920      	cbnz	r0, 8024710 <modf+0x80>
 8024706:	ee38 8b08 	vadd.f64	d8, d8, d8
 802470a:	ed84 8b00 	vstr	d8, [r4]
 802470e:	e7d6      	b.n	80246be <modf+0x2e>
 8024710:	2200      	movs	r2, #0
 8024712:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024716:	e7e2      	b.n	80246de <modf+0x4e>
 8024718:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 802471c:	f04f 30ff 	mov.w	r0, #4294967295
 8024720:	40d8      	lsrs	r0, r3
 8024722:	ea11 0600 	ands.w	r6, r1, r0
 8024726:	d105      	bne.n	8024734 <modf+0xa4>
 8024728:	ed84 0b00 	vstr	d0, [r4]
 802472c:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024730:	4632      	mov	r2, r6
 8024732:	e7d4      	b.n	80246de <modf+0x4e>
 8024734:	ee18 3a90 	vmov	r3, s17
 8024738:	ea21 0200 	bic.w	r2, r1, r0
 802473c:	e7d5      	b.n	80246ea <modf+0x5a>
 802473e:	bf00      	nop
 8024740:	000fffff 	.word	0x000fffff

08024744 <_sbrk_r>:
 8024744:	b538      	push	{r3, r4, r5, lr}
 8024746:	4d06      	ldr	r5, [pc, #24]	; (8024760 <_sbrk_r+0x1c>)
 8024748:	2300      	movs	r3, #0
 802474a:	4604      	mov	r4, r0
 802474c:	4608      	mov	r0, r1
 802474e:	602b      	str	r3, [r5, #0]
 8024750:	f7e1 fddc 	bl	800630c <_sbrk>
 8024754:	1c43      	adds	r3, r0, #1
 8024756:	d102      	bne.n	802475e <_sbrk_r+0x1a>
 8024758:	682b      	ldr	r3, [r5, #0]
 802475a:	b103      	cbz	r3, 802475e <_sbrk_r+0x1a>
 802475c:	6023      	str	r3, [r4, #0]
 802475e:	bd38      	pop	{r3, r4, r5, pc}
 8024760:	2002e014 	.word	0x2002e014

08024764 <sniprintf>:
 8024764:	b40c      	push	{r2, r3}
 8024766:	b530      	push	{r4, r5, lr}
 8024768:	4b17      	ldr	r3, [pc, #92]	; (80247c8 <sniprintf+0x64>)
 802476a:	1e0c      	subs	r4, r1, #0
 802476c:	681d      	ldr	r5, [r3, #0]
 802476e:	b09d      	sub	sp, #116	; 0x74
 8024770:	da08      	bge.n	8024784 <sniprintf+0x20>
 8024772:	238b      	movs	r3, #139	; 0x8b
 8024774:	602b      	str	r3, [r5, #0]
 8024776:	f04f 30ff 	mov.w	r0, #4294967295
 802477a:	b01d      	add	sp, #116	; 0x74
 802477c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024780:	b002      	add	sp, #8
 8024782:	4770      	bx	lr
 8024784:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024788:	f8ad 3014 	strh.w	r3, [sp, #20]
 802478c:	bf14      	ite	ne
 802478e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8024792:	4623      	moveq	r3, r4
 8024794:	9304      	str	r3, [sp, #16]
 8024796:	9307      	str	r3, [sp, #28]
 8024798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802479c:	9002      	str	r0, [sp, #8]
 802479e:	9006      	str	r0, [sp, #24]
 80247a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80247a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80247a6:	ab21      	add	r3, sp, #132	; 0x84
 80247a8:	a902      	add	r1, sp, #8
 80247aa:	4628      	mov	r0, r5
 80247ac:	9301      	str	r3, [sp, #4]
 80247ae:	f003 f835 	bl	802781c <_svfiprintf_r>
 80247b2:	1c43      	adds	r3, r0, #1
 80247b4:	bfbc      	itt	lt
 80247b6:	238b      	movlt	r3, #139	; 0x8b
 80247b8:	602b      	strlt	r3, [r5, #0]
 80247ba:	2c00      	cmp	r4, #0
 80247bc:	d0dd      	beq.n	802477a <sniprintf+0x16>
 80247be:	9b02      	ldr	r3, [sp, #8]
 80247c0:	2200      	movs	r2, #0
 80247c2:	701a      	strb	r2, [r3, #0]
 80247c4:	e7d9      	b.n	802477a <sniprintf+0x16>
 80247c6:	bf00      	nop
 80247c8:	20000488 	.word	0x20000488

080247cc <siprintf>:
 80247cc:	b40e      	push	{r1, r2, r3}
 80247ce:	b500      	push	{lr}
 80247d0:	b09c      	sub	sp, #112	; 0x70
 80247d2:	ab1d      	add	r3, sp, #116	; 0x74
 80247d4:	9002      	str	r0, [sp, #8]
 80247d6:	9006      	str	r0, [sp, #24]
 80247d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80247dc:	4809      	ldr	r0, [pc, #36]	; (8024804 <siprintf+0x38>)
 80247de:	9107      	str	r1, [sp, #28]
 80247e0:	9104      	str	r1, [sp, #16]
 80247e2:	4909      	ldr	r1, [pc, #36]	; (8024808 <siprintf+0x3c>)
 80247e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80247e8:	9105      	str	r1, [sp, #20]
 80247ea:	6800      	ldr	r0, [r0, #0]
 80247ec:	9301      	str	r3, [sp, #4]
 80247ee:	a902      	add	r1, sp, #8
 80247f0:	f003 f814 	bl	802781c <_svfiprintf_r>
 80247f4:	9b02      	ldr	r3, [sp, #8]
 80247f6:	2200      	movs	r2, #0
 80247f8:	701a      	strb	r2, [r3, #0]
 80247fa:	b01c      	add	sp, #112	; 0x70
 80247fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8024800:	b003      	add	sp, #12
 8024802:	4770      	bx	lr
 8024804:	20000488 	.word	0x20000488
 8024808:	ffff0208 	.word	0xffff0208

0802480c <siscanf>:
 802480c:	b40e      	push	{r1, r2, r3}
 802480e:	b510      	push	{r4, lr}
 8024810:	b09f      	sub	sp, #124	; 0x7c
 8024812:	ac21      	add	r4, sp, #132	; 0x84
 8024814:	f44f 7101 	mov.w	r1, #516	; 0x204
 8024818:	f854 2b04 	ldr.w	r2, [r4], #4
 802481c:	9201      	str	r2, [sp, #4]
 802481e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8024822:	9004      	str	r0, [sp, #16]
 8024824:	9008      	str	r0, [sp, #32]
 8024826:	f7db fd15 	bl	8000254 <strlen>
 802482a:	4b0c      	ldr	r3, [pc, #48]	; (802485c <siscanf+0x50>)
 802482c:	9005      	str	r0, [sp, #20]
 802482e:	9009      	str	r0, [sp, #36]	; 0x24
 8024830:	930d      	str	r3, [sp, #52]	; 0x34
 8024832:	480b      	ldr	r0, [pc, #44]	; (8024860 <siscanf+0x54>)
 8024834:	9a01      	ldr	r2, [sp, #4]
 8024836:	6800      	ldr	r0, [r0, #0]
 8024838:	9403      	str	r4, [sp, #12]
 802483a:	2300      	movs	r3, #0
 802483c:	9311      	str	r3, [sp, #68]	; 0x44
 802483e:	9316      	str	r3, [sp, #88]	; 0x58
 8024840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024844:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024848:	a904      	add	r1, sp, #16
 802484a:	4623      	mov	r3, r4
 802484c:	f003 f940 	bl	8027ad0 <__ssvfiscanf_r>
 8024850:	b01f      	add	sp, #124	; 0x7c
 8024852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024856:	b003      	add	sp, #12
 8024858:	4770      	bx	lr
 802485a:	bf00      	nop
 802485c:	08024887 	.word	0x08024887
 8024860:	20000488 	.word	0x20000488

08024864 <__sread>:
 8024864:	b510      	push	{r4, lr}
 8024866:	460c      	mov	r4, r1
 8024868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802486c:	f003 fd9c 	bl	80283a8 <_read_r>
 8024870:	2800      	cmp	r0, #0
 8024872:	bfab      	itete	ge
 8024874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024876:	89a3      	ldrhlt	r3, [r4, #12]
 8024878:	181b      	addge	r3, r3, r0
 802487a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802487e:	bfac      	ite	ge
 8024880:	6563      	strge	r3, [r4, #84]	; 0x54
 8024882:	81a3      	strhlt	r3, [r4, #12]
 8024884:	bd10      	pop	{r4, pc}

08024886 <__seofread>:
 8024886:	2000      	movs	r0, #0
 8024888:	4770      	bx	lr

0802488a <__swrite>:
 802488a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802488e:	461f      	mov	r7, r3
 8024890:	898b      	ldrh	r3, [r1, #12]
 8024892:	05db      	lsls	r3, r3, #23
 8024894:	4605      	mov	r5, r0
 8024896:	460c      	mov	r4, r1
 8024898:	4616      	mov	r6, r2
 802489a:	d505      	bpl.n	80248a8 <__swrite+0x1e>
 802489c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80248a0:	2302      	movs	r3, #2
 80248a2:	2200      	movs	r2, #0
 80248a4:	f002 fb12 	bl	8026ecc <_lseek_r>
 80248a8:	89a3      	ldrh	r3, [r4, #12]
 80248aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80248ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80248b2:	81a3      	strh	r3, [r4, #12]
 80248b4:	4632      	mov	r2, r6
 80248b6:	463b      	mov	r3, r7
 80248b8:	4628      	mov	r0, r5
 80248ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80248be:	f001 b931 	b.w	8025b24 <_write_r>

080248c2 <__sseek>:
 80248c2:	b510      	push	{r4, lr}
 80248c4:	460c      	mov	r4, r1
 80248c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80248ca:	f002 faff 	bl	8026ecc <_lseek_r>
 80248ce:	1c43      	adds	r3, r0, #1
 80248d0:	89a3      	ldrh	r3, [r4, #12]
 80248d2:	bf15      	itete	ne
 80248d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80248d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80248da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80248de:	81a3      	strheq	r3, [r4, #12]
 80248e0:	bf18      	it	ne
 80248e2:	81a3      	strhne	r3, [r4, #12]
 80248e4:	bd10      	pop	{r4, pc}

080248e6 <__sclose>:
 80248e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80248ea:	f001 ba05 	b.w	8025cf8 <_close_r>

080248ee <stpcpy>:
 80248ee:	4603      	mov	r3, r0
 80248f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80248f4:	4618      	mov	r0, r3
 80248f6:	f803 2b01 	strb.w	r2, [r3], #1
 80248fa:	2a00      	cmp	r2, #0
 80248fc:	d1f8      	bne.n	80248f0 <stpcpy+0x2>
 80248fe:	4770      	bx	lr

08024900 <strchr>:
 8024900:	b2c9      	uxtb	r1, r1
 8024902:	4603      	mov	r3, r0
 8024904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024908:	b11a      	cbz	r2, 8024912 <strchr+0x12>
 802490a:	428a      	cmp	r2, r1
 802490c:	d1f9      	bne.n	8024902 <strchr+0x2>
 802490e:	4618      	mov	r0, r3
 8024910:	4770      	bx	lr
 8024912:	2900      	cmp	r1, #0
 8024914:	bf18      	it	ne
 8024916:	2300      	movne	r3, #0
 8024918:	e7f9      	b.n	802490e <strchr+0xe>

0802491a <strcpy>:
 802491a:	4603      	mov	r3, r0
 802491c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024920:	f803 2b01 	strb.w	r2, [r3], #1
 8024924:	2a00      	cmp	r2, #0
 8024926:	d1f9      	bne.n	802491c <strcpy+0x2>
 8024928:	4770      	bx	lr
	...

0802492c <iso_year_adjust>:
 802492c:	6942      	ldr	r2, [r0, #20]
 802492e:	2a00      	cmp	r2, #0
 8024930:	f240 736c 	movw	r3, #1900	; 0x76c
 8024934:	bfa8      	it	ge
 8024936:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 802493a:	4413      	add	r3, r2
 802493c:	0792      	lsls	r2, r2, #30
 802493e:	d105      	bne.n	802494c <iso_year_adjust+0x20>
 8024940:	2164      	movs	r1, #100	; 0x64
 8024942:	fb93 f2f1 	sdiv	r2, r3, r1
 8024946:	fb01 3212 	mls	r2, r1, r2, r3
 802494a:	b9da      	cbnz	r2, 8024984 <iso_year_adjust+0x58>
 802494c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8024950:	fb93 f1f2 	sdiv	r1, r3, r2
 8024954:	fb02 3311 	mls	r3, r2, r1, r3
 8024958:	fab3 f383 	clz	r3, r3
 802495c:	095b      	lsrs	r3, r3, #5
 802495e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8024962:	0040      	lsls	r0, r0, #1
 8024964:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8024968:	4418      	add	r0, r3
 802496a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 802496e:	4298      	cmp	r0, r3
 8024970:	d03a      	beq.n	80249e8 <iso_year_adjust+0xbc>
 8024972:	dc21      	bgt.n	80249b8 <iso_year_adjust+0x8c>
 8024974:	2801      	cmp	r0, #1
 8024976:	dc1a      	bgt.n	80249ae <iso_year_adjust+0x82>
 8024978:	2800      	cmp	r0, #0
 802497a:	bfb4      	ite	lt
 802497c:	2000      	movlt	r0, #0
 802497e:	f04f 30ff 	movge.w	r0, #4294967295
 8024982:	4770      	bx	lr
 8024984:	2301      	movs	r3, #1
 8024986:	e7ea      	b.n	802495e <iso_year_adjust+0x32>
 8024988:	2817      	cmp	r0, #23
 802498a:	d813      	bhi.n	80249b4 <iso_year_adjust+0x88>
 802498c:	e8df f000 	tbb	[pc, r0]
 8024990:	0c0c0c0c 	.word	0x0c0c0c0c
 8024994:	0c0c1212 	.word	0x0c0c1212
 8024998:	12121212 	.word	0x12121212
 802499c:	12121212 	.word	0x12121212
 80249a0:	0c0c1212 	.word	0x0c0c1212
 80249a4:	0c0c1212 	.word	0x0c0c1212
 80249a8:	f04f 30ff 	mov.w	r0, #4294967295
 80249ac:	4770      	bx	lr
 80249ae:	380a      	subs	r0, #10
 80249b0:	2817      	cmp	r0, #23
 80249b2:	d9e9      	bls.n	8024988 <iso_year_adjust+0x5c>
 80249b4:	2000      	movs	r0, #0
 80249b6:	4770      	bx	lr
 80249b8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80249bc:	4298      	cmp	r0, r3
 80249be:	dc06      	bgt.n	80249ce <iso_year_adjust+0xa2>
 80249c0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80249c4:	4298      	cmp	r0, r3
 80249c6:	bfd4      	ite	le
 80249c8:	2000      	movle	r0, #0
 80249ca:	2001      	movgt	r0, #1
 80249cc:	4770      	bx	lr
 80249ce:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80249d2:	3802      	subs	r0, #2
 80249d4:	2815      	cmp	r0, #21
 80249d6:	d8ed      	bhi.n	80249b4 <iso_year_adjust+0x88>
 80249d8:	2301      	movs	r3, #1
 80249da:	4083      	lsls	r3, r0
 80249dc:	4803      	ldr	r0, [pc, #12]	; (80249ec <iso_year_adjust+0xc0>)
 80249de:	4018      	ands	r0, r3
 80249e0:	3800      	subs	r0, #0
 80249e2:	bf18      	it	ne
 80249e4:	2001      	movne	r0, #1
 80249e6:	4770      	bx	lr
 80249e8:	2001      	movs	r0, #1
 80249ea:	4770      	bx	lr
 80249ec:	002a001f 	.word	0x002a001f

080249f0 <__strftime.isra.0>:
 80249f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249f4:	b08f      	sub	sp, #60	; 0x3c
 80249f6:	461e      	mov	r6, r3
 80249f8:	2300      	movs	r3, #0
 80249fa:	4607      	mov	r7, r0
 80249fc:	460d      	mov	r5, r1
 80249fe:	9302      	str	r3, [sp, #8]
 8024a00:	461c      	mov	r4, r3
 8024a02:	7813      	ldrb	r3, [r2, #0]
 8024a04:	2b00      	cmp	r3, #0
 8024a06:	f000 84ba 	beq.w	802537e <__strftime.isra.0+0x98e>
 8024a0a:	2b25      	cmp	r3, #37	; 0x25
 8024a0c:	d11f      	bne.n	8024a4e <__strftime.isra.0+0x5e>
 8024a0e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024a12:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8024a16:	d024      	beq.n	8024a62 <__strftime.isra.0+0x72>
 8024a18:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8024a1c:	d021      	beq.n	8024a62 <__strftime.isra.0+0x72>
 8024a1e:	f102 0801 	add.w	r8, r2, #1
 8024a22:	f04f 0b00 	mov.w	fp, #0
 8024a26:	f898 2000 	ldrb.w	r2, [r8]
 8024a2a:	3a31      	subs	r2, #49	; 0x31
 8024a2c:	2a08      	cmp	r2, #8
 8024a2e:	d81b      	bhi.n	8024a68 <__strftime.isra.0+0x78>
 8024a30:	4640      	mov	r0, r8
 8024a32:	220a      	movs	r2, #10
 8024a34:	a906      	add	r1, sp, #24
 8024a36:	f000 fddd 	bl	80255f4 <strtoul>
 8024a3a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024a3e:	4681      	mov	r9, r0
 8024a40:	f898 2000 	ldrb.w	r2, [r8]
 8024a44:	2a45      	cmp	r2, #69	; 0x45
 8024a46:	d112      	bne.n	8024a6e <__strftime.isra.0+0x7e>
 8024a48:	f108 0801 	add.w	r8, r8, #1
 8024a4c:	e011      	b.n	8024a72 <__strftime.isra.0+0x82>
 8024a4e:	1e69      	subs	r1, r5, #1
 8024a50:	42a1      	cmp	r1, r4
 8024a52:	d802      	bhi.n	8024a5a <__strftime.isra.0+0x6a>
 8024a54:	2400      	movs	r4, #0
 8024a56:	f000 bc95 	b.w	8025384 <__strftime.isra.0+0x994>
 8024a5a:	553b      	strb	r3, [r7, r4]
 8024a5c:	3201      	adds	r2, #1
 8024a5e:	3401      	adds	r4, #1
 8024a60:	e7cf      	b.n	8024a02 <__strftime.isra.0+0x12>
 8024a62:	f102 0802 	add.w	r8, r2, #2
 8024a66:	e7de      	b.n	8024a26 <__strftime.isra.0+0x36>
 8024a68:	f04f 0900 	mov.w	r9, #0
 8024a6c:	e7e8      	b.n	8024a40 <__strftime.isra.0+0x50>
 8024a6e:	2a4f      	cmp	r2, #79	; 0x4f
 8024a70:	d0ea      	beq.n	8024a48 <__strftime.isra.0+0x58>
 8024a72:	f898 0000 	ldrb.w	r0, [r8]
 8024a76:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8024a7a:	2a55      	cmp	r2, #85	; 0x55
 8024a7c:	d8ea      	bhi.n	8024a54 <__strftime.isra.0+0x64>
 8024a7e:	a301      	add	r3, pc, #4	; (adr r3, 8024a84 <__strftime.isra.0+0x94>)
 8024a80:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8024a84:	08025373 	.word	0x08025373
 8024a88:	08024a55 	.word	0x08024a55
 8024a8c:	08024a55 	.word	0x08024a55
 8024a90:	08024a55 	.word	0x08024a55
 8024a94:	08024a55 	.word	0x08024a55
 8024a98:	08024a55 	.word	0x08024a55
 8024a9c:	08024a55 	.word	0x08024a55
 8024aa0:	08024a55 	.word	0x08024a55
 8024aa4:	08024a55 	.word	0x08024a55
 8024aa8:	08024a55 	.word	0x08024a55
 8024aac:	08024a55 	.word	0x08024a55
 8024ab0:	08024a55 	.word	0x08024a55
 8024ab4:	08024a55 	.word	0x08024a55
 8024ab8:	08024a55 	.word	0x08024a55
 8024abc:	08024a55 	.word	0x08024a55
 8024ac0:	08024a55 	.word	0x08024a55
 8024ac4:	08024a55 	.word	0x08024a55
 8024ac8:	08024a55 	.word	0x08024a55
 8024acc:	08024a55 	.word	0x08024a55
 8024ad0:	08024a55 	.word	0x08024a55
 8024ad4:	08024a55 	.word	0x08024a55
 8024ad8:	08024a55 	.word	0x08024a55
 8024adc:	08024a55 	.word	0x08024a55
 8024ae0:	08024a55 	.word	0x08024a55
 8024ae4:	08024a55 	.word	0x08024a55
 8024ae8:	08024a55 	.word	0x08024a55
 8024aec:	08024a55 	.word	0x08024a55
 8024af0:	08024a55 	.word	0x08024a55
 8024af4:	08024c19 	.word	0x08024c19
 8024af8:	08024c71 	.word	0x08024c71
 8024afc:	08024cdf 	.word	0x08024cdf
 8024b00:	08024d7d 	.word	0x08024d7d
 8024b04:	08024a55 	.word	0x08024a55
 8024b08:	08024dc9 	.word	0x08024dc9
 8024b0c:	08024eb5 	.word	0x08024eb5
 8024b10:	08024f8f 	.word	0x08024f8f
 8024b14:	08024f9d 	.word	0x08024f9d
 8024b18:	08024a55 	.word	0x08024a55
 8024b1c:	08024a55 	.word	0x08024a55
 8024b20:	08024a55 	.word	0x08024a55
 8024b24:	08024fcd 	.word	0x08024fcd
 8024b28:	08024a55 	.word	0x08024a55
 8024b2c:	08024a55 	.word	0x08024a55
 8024b30:	08024fe1 	.word	0x08024fe1
 8024b34:	08024a55 	.word	0x08024a55
 8024b38:	08025033 	.word	0x08025033
 8024b3c:	08025147 	.word	0x08025147
 8024b40:	08025157 	.word	0x08025157
 8024b44:	0802517f 	.word	0x0802517f
 8024b48:	080251b9 	.word	0x080251b9
 8024b4c:	0802522d 	.word	0x0802522d
 8024b50:	08024cd7 	.word	0x08024cd7
 8024b54:	08025259 	.word	0x08025259
 8024b58:	08025321 	.word	0x08025321
 8024b5c:	08024a55 	.word	0x08024a55
 8024b60:	08024a55 	.word	0x08024a55
 8024b64:	08024a55 	.word	0x08024a55
 8024b68:	08024a55 	.word	0x08024a55
 8024b6c:	08024a55 	.word	0x08024a55
 8024b70:	08024a55 	.word	0x08024a55
 8024b74:	08024bdd 	.word	0x08024bdd
 8024b78:	08024c47 	.word	0x08024c47
 8024b7c:	08024c9d 	.word	0x08024c9d
 8024b80:	08024d59 	.word	0x08024d59
 8024b84:	08024d59 	.word	0x08024d59
 8024b88:	08024a55 	.word	0x08024a55
 8024b8c:	08024e1b 	.word	0x08024e1b
 8024b90:	08024c47 	.word	0x08024c47
 8024b94:	08024a55 	.word	0x08024a55
 8024b98:	08024fbf 	.word	0x08024fbf
 8024b9c:	08024f8f 	.word	0x08024f8f
 8024ba0:	08024f9d 	.word	0x08024f9d
 8024ba4:	08024fc7 	.word	0x08024fc7
 8024ba8:	08024fd1 	.word	0x08024fd1
 8024bac:	08024a55 	.word	0x08024a55
 8024bb0:	08024fe1 	.word	0x08024fe1
 8024bb4:	08024a55 	.word	0x08024a55
 8024bb8:	08024cc7 	.word	0x08024cc7
 8024bbc:	08025045 	.word	0x08025045
 8024bc0:	0802514b 	.word	0x0802514b
 8024bc4:	08025165 	.word	0x08025165
 8024bc8:	08024a55 	.word	0x08024a55
 8024bcc:	0802521f 	.word	0x0802521f
 8024bd0:	08024ccf 	.word	0x08024ccf
 8024bd4:	0802523d 	.word	0x0802523d
 8024bd8:	080252ab 	.word	0x080252ab
 8024bdc:	69b3      	ldr	r3, [r6, #24]
 8024bde:	4aa9      	ldr	r2, [pc, #676]	; (8024e84 <__strftime.isra.0+0x494>)
 8024be0:	3318      	adds	r3, #24
 8024be2:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8024be6:	4648      	mov	r0, r9
 8024be8:	f7db fb34 	bl	8000254 <strlen>
 8024bec:	f109 39ff 	add.w	r9, r9, #4294967295
 8024bf0:	4420      	add	r0, r4
 8024bf2:	1e6b      	subs	r3, r5, #1
 8024bf4:	42a0      	cmp	r0, r4
 8024bf6:	d107      	bne.n	8024c08 <__strftime.isra.0+0x218>
 8024bf8:	f898 3000 	ldrb.w	r3, [r8]
 8024bfc:	2b00      	cmp	r3, #0
 8024bfe:	f000 83be 	beq.w	802537e <__strftime.isra.0+0x98e>
 8024c02:	f108 0201 	add.w	r2, r8, #1
 8024c06:	e6fc      	b.n	8024a02 <__strftime.isra.0+0x12>
 8024c08:	42a3      	cmp	r3, r4
 8024c0a:	f67f af23 	bls.w	8024a54 <__strftime.isra.0+0x64>
 8024c0e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8024c12:	553a      	strb	r2, [r7, r4]
 8024c14:	3401      	adds	r4, #1
 8024c16:	e7ed      	b.n	8024bf4 <__strftime.isra.0+0x204>
 8024c18:	69b2      	ldr	r2, [r6, #24]
 8024c1a:	4b9a      	ldr	r3, [pc, #616]	; (8024e84 <__strftime.isra.0+0x494>)
 8024c1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024c20:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8024c24:	4648      	mov	r0, r9
 8024c26:	f7db fb15 	bl	8000254 <strlen>
 8024c2a:	f109 39ff 	add.w	r9, r9, #4294967295
 8024c2e:	4420      	add	r0, r4
 8024c30:	1e6b      	subs	r3, r5, #1
 8024c32:	42a0      	cmp	r0, r4
 8024c34:	d0e0      	beq.n	8024bf8 <__strftime.isra.0+0x208>
 8024c36:	42a3      	cmp	r3, r4
 8024c38:	f67f af0c 	bls.w	8024a54 <__strftime.isra.0+0x64>
 8024c3c:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8024c40:	553a      	strb	r2, [r7, r4]
 8024c42:	3401      	adds	r4, #1
 8024c44:	e7f5      	b.n	8024c32 <__strftime.isra.0+0x242>
 8024c46:	4b8f      	ldr	r3, [pc, #572]	; (8024e84 <__strftime.isra.0+0x494>)
 8024c48:	6932      	ldr	r2, [r6, #16]
 8024c4a:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8024c4e:	4648      	mov	r0, r9
 8024c50:	f7db fb00 	bl	8000254 <strlen>
 8024c54:	f109 39ff 	add.w	r9, r9, #4294967295
 8024c58:	4420      	add	r0, r4
 8024c5a:	1e6b      	subs	r3, r5, #1
 8024c5c:	42a0      	cmp	r0, r4
 8024c5e:	d0cb      	beq.n	8024bf8 <__strftime.isra.0+0x208>
 8024c60:	42a3      	cmp	r3, r4
 8024c62:	f67f aef7 	bls.w	8024a54 <__strftime.isra.0+0x64>
 8024c66:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8024c6a:	553a      	strb	r2, [r7, r4]
 8024c6c:	3401      	adds	r4, #1
 8024c6e:	e7f5      	b.n	8024c5c <__strftime.isra.0+0x26c>
 8024c70:	6933      	ldr	r3, [r6, #16]
 8024c72:	4a84      	ldr	r2, [pc, #528]	; (8024e84 <__strftime.isra.0+0x494>)
 8024c74:	330c      	adds	r3, #12
 8024c76:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8024c7a:	4648      	mov	r0, r9
 8024c7c:	f7db faea 	bl	8000254 <strlen>
 8024c80:	f109 39ff 	add.w	r9, r9, #4294967295
 8024c84:	4420      	add	r0, r4
 8024c86:	1e6b      	subs	r3, r5, #1
 8024c88:	42a0      	cmp	r0, r4
 8024c8a:	d0b5      	beq.n	8024bf8 <__strftime.isra.0+0x208>
 8024c8c:	42a3      	cmp	r3, r4
 8024c8e:	f67f aee1 	bls.w	8024a54 <__strftime.isra.0+0x64>
 8024c92:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8024c96:	553a      	strb	r2, [r7, r4]
 8024c98:	3401      	adds	r4, #1
 8024c9a:	e7f5      	b.n	8024c88 <__strftime.isra.0+0x298>
 8024c9c:	4b79      	ldr	r3, [pc, #484]	; (8024e84 <__strftime.isra.0+0x494>)
 8024c9e:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8024ca2:	4648      	mov	r0, r9
 8024ca4:	f7db fad6 	bl	8000254 <strlen>
 8024ca8:	f899 3000 	ldrb.w	r3, [r9]
 8024cac:	2b00      	cmp	r3, #0
 8024cae:	d0a3      	beq.n	8024bf8 <__strftime.isra.0+0x208>
 8024cb0:	4633      	mov	r3, r6
 8024cb2:	464a      	mov	r2, r9
 8024cb4:	1b29      	subs	r1, r5, r4
 8024cb6:	1938      	adds	r0, r7, r4
 8024cb8:	f7ff fe9a 	bl	80249f0 <__strftime.isra.0>
 8024cbc:	2800      	cmp	r0, #0
 8024cbe:	f77f aec9 	ble.w	8024a54 <__strftime.isra.0+0x64>
 8024cc2:	4404      	add	r4, r0
 8024cc4:	e798      	b.n	8024bf8 <__strftime.isra.0+0x208>
 8024cc6:	4b6f      	ldr	r3, [pc, #444]	; (8024e84 <__strftime.isra.0+0x494>)
 8024cc8:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8024ccc:	e7e9      	b.n	8024ca2 <__strftime.isra.0+0x2b2>
 8024cce:	4b6d      	ldr	r3, [pc, #436]	; (8024e84 <__strftime.isra.0+0x494>)
 8024cd0:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8024cd4:	e7e5      	b.n	8024ca2 <__strftime.isra.0+0x2b2>
 8024cd6:	4b6b      	ldr	r3, [pc, #428]	; (8024e84 <__strftime.isra.0+0x494>)
 8024cd8:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8024cdc:	e7e1      	b.n	8024ca2 <__strftime.isra.0+0x2b2>
 8024cde:	496a      	ldr	r1, [pc, #424]	; (8024e88 <__strftime.isra.0+0x498>)
 8024ce0:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8024ce4:	458a      	cmp	sl, r1
 8024ce6:	bfac      	ite	ge
 8024ce8:	2100      	movge	r1, #0
 8024cea:	2101      	movlt	r1, #1
 8024cec:	f1ba 0f00 	cmp.w	sl, #0
 8024cf0:	db11      	blt.n	8024d16 <__strftime.isra.0+0x326>
 8024cf2:	2064      	movs	r0, #100	; 0x64
 8024cf4:	fb9a f0f0 	sdiv	r0, sl, r0
 8024cf8:	3013      	adds	r0, #19
 8024cfa:	f1bb 0f00 	cmp.w	fp, #0
 8024cfe:	d014      	beq.n	8024d2a <__strftime.isra.0+0x33a>
 8024d00:	2863      	cmp	r0, #99	; 0x63
 8024d02:	dd27      	ble.n	8024d54 <__strftime.isra.0+0x364>
 8024d04:	4b61      	ldr	r3, [pc, #388]	; (8024e8c <__strftime.isra.0+0x49c>)
 8024d06:	4a62      	ldr	r2, [pc, #392]	; (8024e90 <__strftime.isra.0+0x4a0>)
 8024d08:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8024d0c:	bf18      	it	ne
 8024d0e:	461a      	movne	r2, r3
 8024d10:	f8df c198 	ldr.w	ip, [pc, #408]	; 8024eac <__strftime.isra.0+0x4bc>
 8024d14:	e00c      	b.n	8024d30 <__strftime.isra.0+0x340>
 8024d16:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8024d1a:	9103      	str	r1, [sp, #12]
 8024d1c:	f000 ff82 	bl	8025c24 <abs>
 8024d20:	2264      	movs	r2, #100	; 0x64
 8024d22:	9903      	ldr	r1, [sp, #12]
 8024d24:	fb90 f0f2 	sdiv	r0, r0, r2
 8024d28:	e7e7      	b.n	8024cfa <__strftime.isra.0+0x30a>
 8024d2a:	4a58      	ldr	r2, [pc, #352]	; (8024e8c <__strftime.isra.0+0x49c>)
 8024d2c:	f8df c180 	ldr.w	ip, [pc, #384]	; 8024eb0 <__strftime.isra.0+0x4c0>
 8024d30:	4b58      	ldr	r3, [pc, #352]	; (8024e94 <__strftime.isra.0+0x4a4>)
 8024d32:	9001      	str	r0, [sp, #4]
 8024d34:	f1b9 0f02 	cmp.w	r9, #2
 8024d38:	bf2c      	ite	cs
 8024d3a:	ebc1 0109 	rsbcs	r1, r1, r9
 8024d3e:	f1c1 0102 	rsbcc	r1, r1, #2
 8024d42:	9100      	str	r1, [sp, #0]
 8024d44:	4950      	ldr	r1, [pc, #320]	; (8024e88 <__strftime.isra.0+0x498>)
 8024d46:	458a      	cmp	sl, r1
 8024d48:	bfa8      	it	ge
 8024d4a:	4613      	movge	r3, r2
 8024d4c:	4662      	mov	r2, ip
 8024d4e:	1b29      	subs	r1, r5, r4
 8024d50:	1938      	adds	r0, r7, r4
 8024d52:	e028      	b.n	8024da6 <__strftime.isra.0+0x3b6>
 8024d54:	4a4d      	ldr	r2, [pc, #308]	; (8024e8c <__strftime.isra.0+0x49c>)
 8024d56:	e7db      	b.n	8024d10 <__strftime.isra.0+0x320>
 8024d58:	494f      	ldr	r1, [pc, #316]	; (8024e98 <__strftime.isra.0+0x4a8>)
 8024d5a:	4a50      	ldr	r2, [pc, #320]	; (8024e9c <__strftime.isra.0+0x4ac>)
 8024d5c:	68f3      	ldr	r3, [r6, #12]
 8024d5e:	2864      	cmp	r0, #100	; 0x64
 8024d60:	bf08      	it	eq
 8024d62:	460a      	moveq	r2, r1
 8024d64:	1b29      	subs	r1, r5, r4
 8024d66:	1938      	adds	r0, r7, r4
 8024d68:	f7ff fcfc 	bl	8024764 <sniprintf>
 8024d6c:	2800      	cmp	r0, #0
 8024d6e:	f6ff ae71 	blt.w	8024a54 <__strftime.isra.0+0x64>
 8024d72:	4404      	add	r4, r0
 8024d74:	42a5      	cmp	r5, r4
 8024d76:	f63f af3f 	bhi.w	8024bf8 <__strftime.isra.0+0x208>
 8024d7a:	e66b      	b.n	8024a54 <__strftime.isra.0+0x64>
 8024d7c:	6970      	ldr	r0, [r6, #20]
 8024d7e:	6933      	ldr	r3, [r6, #16]
 8024d80:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8024d84:	2800      	cmp	r0, #0
 8024d86:	eb07 0904 	add.w	r9, r7, r4
 8024d8a:	eba5 0104 	sub.w	r1, r5, r4
 8024d8e:	f103 0301 	add.w	r3, r3, #1
 8024d92:	db0b      	blt.n	8024dac <__strftime.isra.0+0x3bc>
 8024d94:	2264      	movs	r2, #100	; 0x64
 8024d96:	fb90 fcf2 	sdiv	ip, r0, r2
 8024d9a:	fb02 001c 	mls	r0, r2, ip, r0
 8024d9e:	4a40      	ldr	r2, [pc, #256]	; (8024ea0 <__strftime.isra.0+0x4b0>)
 8024da0:	e9cd a000 	strd	sl, r0, [sp]
 8024da4:	4648      	mov	r0, r9
 8024da6:	f7ff fcdd 	bl	8024764 <sniprintf>
 8024daa:	e7df      	b.n	8024d6c <__strftime.isra.0+0x37c>
 8024dac:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8024db0:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8024db4:	f000 ff36 	bl	8025c24 <abs>
 8024db8:	2264      	movs	r2, #100	; 0x64
 8024dba:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8024dbe:	fb90 fcf2 	sdiv	ip, r0, r2
 8024dc2:	fb0c 0012 	mls	r0, ip, r2, r0
 8024dc6:	e7ea      	b.n	8024d9e <__strftime.isra.0+0x3ae>
 8024dc8:	2225      	movs	r2, #37	; 0x25
 8024dca:	f88d 2018 	strb.w	r2, [sp, #24]
 8024dce:	f1bb 0f00 	cmp.w	fp, #0
 8024dd2:	d011      	beq.n	8024df8 <__strftime.isra.0+0x408>
 8024dd4:	f1b9 0f06 	cmp.w	r9, #6
 8024dd8:	bf38      	it	cc
 8024dda:	f04f 0906 	movcc.w	r9, #6
 8024dde:	f1b9 0306 	subs.w	r3, r9, #6
 8024de2:	f88d b019 	strb.w	fp, [sp, #25]
 8024de6:	d10c      	bne.n	8024e02 <__strftime.isra.0+0x412>
 8024de8:	f10d 001a 	add.w	r0, sp, #26
 8024dec:	492d      	ldr	r1, [pc, #180]	; (8024ea4 <__strftime.isra.0+0x4b4>)
 8024dee:	f7ff fd94 	bl	802491a <strcpy>
 8024df2:	4633      	mov	r3, r6
 8024df4:	aa06      	add	r2, sp, #24
 8024df6:	e75d      	b.n	8024cb4 <__strftime.isra.0+0x2c4>
 8024df8:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8024dfc:	f04f 090a 	mov.w	r9, #10
 8024e00:	e7ed      	b.n	8024dde <__strftime.isra.0+0x3ee>
 8024e02:	4a29      	ldr	r2, [pc, #164]	; (8024ea8 <__strftime.isra.0+0x4b8>)
 8024e04:	211e      	movs	r1, #30
 8024e06:	f10d 001a 	add.w	r0, sp, #26
 8024e0a:	f7ff fcab 	bl	8024764 <sniprintf>
 8024e0e:	2800      	cmp	r0, #0
 8024e10:	ddea      	ble.n	8024de8 <__strftime.isra.0+0x3f8>
 8024e12:	f10d 031a 	add.w	r3, sp, #26
 8024e16:	4418      	add	r0, r3
 8024e18:	e7e8      	b.n	8024dec <__strftime.isra.0+0x3fc>
 8024e1a:	4630      	mov	r0, r6
 8024e1c:	f7ff fd86 	bl	802492c <iso_year_adjust>
 8024e20:	4681      	mov	r9, r0
 8024e22:	6970      	ldr	r0, [r6, #20]
 8024e24:	2800      	cmp	r0, #0
 8024e26:	db11      	blt.n	8024e4c <__strftime.isra.0+0x45c>
 8024e28:	2364      	movs	r3, #100	; 0x64
 8024e2a:	fb90 f2f3 	sdiv	r2, r0, r3
 8024e2e:	fb03 0012 	mls	r0, r3, r2, r0
 8024e32:	2264      	movs	r2, #100	; 0x64
 8024e34:	4481      	add	r9, r0
 8024e36:	fb99 f3f2 	sdiv	r3, r9, r2
 8024e3a:	fb02 9913 	mls	r9, r2, r3, r9
 8024e3e:	4491      	add	r9, r2
 8024e40:	fbb9 f3f2 	udiv	r3, r9, r2
 8024e44:	fb02 9313 	mls	r3, r2, r3, r9
 8024e48:	4a13      	ldr	r2, [pc, #76]	; (8024e98 <__strftime.isra.0+0x4a8>)
 8024e4a:	e78b      	b.n	8024d64 <__strftime.isra.0+0x374>
 8024e4c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8024e50:	f000 fee8 	bl	8025c24 <abs>
 8024e54:	2364      	movs	r3, #100	; 0x64
 8024e56:	f1b9 0f00 	cmp.w	r9, #0
 8024e5a:	fb90 f2f3 	sdiv	r2, r0, r3
 8024e5e:	fb02 0013 	mls	r0, r2, r3, r0
 8024e62:	da07      	bge.n	8024e74 <__strftime.isra.0+0x484>
 8024e64:	6972      	ldr	r2, [r6, #20]
 8024e66:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8024e6a:	429a      	cmp	r2, r3
 8024e6c:	bfb8      	it	lt
 8024e6e:	f04f 0901 	movlt.w	r9, #1
 8024e72:	e7de      	b.n	8024e32 <__strftime.isra.0+0x442>
 8024e74:	d0dd      	beq.n	8024e32 <__strftime.isra.0+0x442>
 8024e76:	6972      	ldr	r2, [r6, #20]
 8024e78:	4b03      	ldr	r3, [pc, #12]	; (8024e88 <__strftime.isra.0+0x498>)
 8024e7a:	429a      	cmp	r2, r3
 8024e7c:	bfb8      	it	lt
 8024e7e:	f04f 39ff 	movlt.w	r9, #4294967295
 8024e82:	e7d6      	b.n	8024e32 <__strftime.isra.0+0x442>
 8024e84:	080e269c 	.word	0x080e269c
 8024e88:	fffff894 	.word	0xfffff894
 8024e8c:	080e284f 	.word	0x080e284f
 8024e90:	080e2524 	.word	0x080e2524
 8024e94:	080e2b0e 	.word	0x080e2b0e
 8024e98:	080e2534 	.word	0x080e2534
 8024e9c:	080e2526 	.word	0x080e2526
 8024ea0:	080e252a 	.word	0x080e252a
 8024ea4:	080e253d 	.word	0x080e253d
 8024ea8:	080e2539 	.word	0x080e2539
 8024eac:	080e251c 	.word	0x080e251c
 8024eb0:	080e2515 	.word	0x080e2515
 8024eb4:	6971      	ldr	r1, [r6, #20]
 8024eb6:	4ab6      	ldr	r2, [pc, #728]	; (8025190 <__strftime.isra.0+0x7a0>)
 8024eb8:	4291      	cmp	r1, r2
 8024eba:	bfac      	ite	ge
 8024ebc:	2300      	movge	r3, #0
 8024ebe:	2301      	movlt	r3, #1
 8024ec0:	4630      	mov	r0, r6
 8024ec2:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8024ec6:	f7ff fd31 	bl	802492c <iso_year_adjust>
 8024eca:	9904      	ldr	r1, [sp, #16]
 8024ecc:	2900      	cmp	r1, #0
 8024ece:	4682      	mov	sl, r0
 8024ed0:	db2c      	blt.n	8024f2c <__strftime.isra.0+0x53c>
 8024ed2:	2264      	movs	r2, #100	; 0x64
 8024ed4:	fb91 f2f2 	sdiv	r2, r1, r2
 8024ed8:	3213      	adds	r2, #19
 8024eda:	6970      	ldr	r0, [r6, #20]
 8024edc:	2800      	cmp	r0, #0
 8024ede:	db30      	blt.n	8024f42 <__strftime.isra.0+0x552>
 8024ee0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8024ee4:	fb90 fefc 	sdiv	lr, r0, ip
 8024ee8:	fb0c 001e 	mls	r0, ip, lr, r0
 8024eec:	f1ba 0f00 	cmp.w	sl, #0
 8024ef0:	da36      	bge.n	8024f60 <__strftime.isra.0+0x570>
 8024ef2:	6971      	ldr	r1, [r6, #20]
 8024ef4:	4ba7      	ldr	r3, [pc, #668]	; (8025194 <__strftime.isra.0+0x7a4>)
 8024ef6:	4299      	cmp	r1, r3
 8024ef8:	db3d      	blt.n	8024f76 <__strftime.isra.0+0x586>
 8024efa:	4482      	add	sl, r0
 8024efc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8024f00:	d13e      	bne.n	8024f80 <__strftime.isra.0+0x590>
 8024f02:	3a01      	subs	r2, #1
 8024f04:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8024f08:	9b03      	ldr	r3, [sp, #12]
 8024f0a:	2064      	movs	r0, #100	; 0x64
 8024f0c:	fb00 aa02 	mla	sl, r0, r2, sl
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	f000 81ad 	beq.w	8025270 <__strftime.isra.0+0x880>
 8024f16:	222d      	movs	r2, #45	; 0x2d
 8024f18:	f88d 2018 	strb.w	r2, [sp, #24]
 8024f1c:	f1b9 0f00 	cmp.w	r9, #0
 8024f20:	d001      	beq.n	8024f26 <__strftime.isra.0+0x536>
 8024f22:	f109 39ff 	add.w	r9, r9, #4294967295
 8024f26:	f10d 0219 	add.w	r2, sp, #25
 8024f2a:	e1ac      	b.n	8025286 <__strftime.isra.0+0x896>
 8024f2c:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8024f30:	9104      	str	r1, [sp, #16]
 8024f32:	f000 fe77 	bl	8025c24 <abs>
 8024f36:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8024f3a:	9904      	ldr	r1, [sp, #16]
 8024f3c:	fb90 f2fc 	sdiv	r2, r0, ip
 8024f40:	e7cb      	b.n	8024eda <__strftime.isra.0+0x4ea>
 8024f42:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8024f46:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8024f4a:	f000 fe6b 	bl	8025c24 <abs>
 8024f4e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8024f52:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8024f56:	fb90 fefc 	sdiv	lr, r0, ip
 8024f5a:	fb0e 001c 	mls	r0, lr, ip, r0
 8024f5e:	e7c5      	b.n	8024eec <__strftime.isra.0+0x4fc>
 8024f60:	d0cb      	beq.n	8024efa <__strftime.isra.0+0x50a>
 8024f62:	4b8b      	ldr	r3, [pc, #556]	; (8025190 <__strftime.isra.0+0x7a0>)
 8024f64:	4299      	cmp	r1, r3
 8024f66:	bfb4      	ite	lt
 8024f68:	2301      	movlt	r3, #1
 8024f6a:	2300      	movge	r3, #0
 8024f6c:	9303      	str	r3, [sp, #12]
 8024f6e:	bfb8      	it	lt
 8024f70:	f04f 3aff 	movlt.w	sl, #4294967295
 8024f74:	e7c1      	b.n	8024efa <__strftime.isra.0+0x50a>
 8024f76:	f04f 0a01 	mov.w	sl, #1
 8024f7a:	f8cd a00c 	str.w	sl, [sp, #12]
 8024f7e:	e7bc      	b.n	8024efa <__strftime.isra.0+0x50a>
 8024f80:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8024f84:	bf04      	itt	eq
 8024f86:	3201      	addeq	r2, #1
 8024f88:	f04f 0a00 	moveq.w	sl, #0
 8024f8c:	e7bc      	b.n	8024f08 <__strftime.isra.0+0x518>
 8024f8e:	4982      	ldr	r1, [pc, #520]	; (8025198 <__strftime.isra.0+0x7a8>)
 8024f90:	4a82      	ldr	r2, [pc, #520]	; (802519c <__strftime.isra.0+0x7ac>)
 8024f92:	68b3      	ldr	r3, [r6, #8]
 8024f94:	286b      	cmp	r0, #107	; 0x6b
 8024f96:	bf08      	it	eq
 8024f98:	460a      	moveq	r2, r1
 8024f9a:	e6e3      	b.n	8024d64 <__strftime.isra.0+0x374>
 8024f9c:	68b3      	ldr	r3, [r6, #8]
 8024f9e:	b163      	cbz	r3, 8024fba <__strftime.isra.0+0x5ca>
 8024fa0:	2b0c      	cmp	r3, #12
 8024fa2:	d004      	beq.n	8024fae <__strftime.isra.0+0x5be>
 8024fa4:	210c      	movs	r1, #12
 8024fa6:	fb93 f2f1 	sdiv	r2, r3, r1
 8024faa:	fb01 3312 	mls	r3, r1, r2, r3
 8024fae:	497b      	ldr	r1, [pc, #492]	; (802519c <__strftime.isra.0+0x7ac>)
 8024fb0:	4a79      	ldr	r2, [pc, #484]	; (8025198 <__strftime.isra.0+0x7a8>)
 8024fb2:	2849      	cmp	r0, #73	; 0x49
 8024fb4:	bf08      	it	eq
 8024fb6:	460a      	moveq	r2, r1
 8024fb8:	e6d4      	b.n	8024d64 <__strftime.isra.0+0x374>
 8024fba:	230c      	movs	r3, #12
 8024fbc:	e7f7      	b.n	8024fae <__strftime.isra.0+0x5be>
 8024fbe:	69f3      	ldr	r3, [r6, #28]
 8024fc0:	4a77      	ldr	r2, [pc, #476]	; (80251a0 <__strftime.isra.0+0x7b0>)
 8024fc2:	3301      	adds	r3, #1
 8024fc4:	e6ce      	b.n	8024d64 <__strftime.isra.0+0x374>
 8024fc6:	6933      	ldr	r3, [r6, #16]
 8024fc8:	3301      	adds	r3, #1
 8024fca:	e73d      	b.n	8024e48 <__strftime.isra.0+0x458>
 8024fcc:	6873      	ldr	r3, [r6, #4]
 8024fce:	e73b      	b.n	8024e48 <__strftime.isra.0+0x458>
 8024fd0:	1e6b      	subs	r3, r5, #1
 8024fd2:	429c      	cmp	r4, r3
 8024fd4:	f4bf ad3e 	bcs.w	8024a54 <__strftime.isra.0+0x64>
 8024fd8:	230a      	movs	r3, #10
 8024fda:	553b      	strb	r3, [r7, r4]
 8024fdc:	3401      	adds	r4, #1
 8024fde:	e60b      	b.n	8024bf8 <__strftime.isra.0+0x208>
 8024fe0:	68b3      	ldr	r3, [r6, #8]
 8024fe2:	2b0b      	cmp	r3, #11
 8024fe4:	4b6f      	ldr	r3, [pc, #444]	; (80251a4 <__strftime.isra.0+0x7b4>)
 8024fe6:	bfd4      	ite	le
 8024fe8:	2200      	movle	r2, #0
 8024fea:	2201      	movgt	r2, #1
 8024fec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024ff0:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8024ff4:	4648      	mov	r0, r9
 8024ff6:	f7db f92d 	bl	8000254 <strlen>
 8024ffa:	f109 32ff 	add.w	r2, r9, #4294967295
 8024ffe:	4420      	add	r0, r4
 8025000:	f105 3cff 	add.w	ip, r5, #4294967295
 8025004:	42a0      	cmp	r0, r4
 8025006:	f43f adf7 	beq.w	8024bf8 <__strftime.isra.0+0x208>
 802500a:	45a4      	cmp	ip, r4
 802500c:	f67f ad22 	bls.w	8024a54 <__strftime.isra.0+0x64>
 8025010:	f898 1000 	ldrb.w	r1, [r8]
 8025014:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8025018:	2950      	cmp	r1, #80	; 0x50
 802501a:	d107      	bne.n	802502c <__strftime.isra.0+0x63c>
 802501c:	4962      	ldr	r1, [pc, #392]	; (80251a8 <__strftime.isra.0+0x7b8>)
 802501e:	5cc9      	ldrb	r1, [r1, r3]
 8025020:	f001 0103 	and.w	r1, r1, #3
 8025024:	2901      	cmp	r1, #1
 8025026:	bf08      	it	eq
 8025028:	3320      	addeq	r3, #32
 802502a:	b2db      	uxtb	r3, r3
 802502c:	553b      	strb	r3, [r7, r4]
 802502e:	3401      	adds	r4, #1
 8025030:	e7e8      	b.n	8025004 <__strftime.isra.0+0x614>
 8025032:	6873      	ldr	r3, [r6, #4]
 8025034:	9300      	str	r3, [sp, #0]
 8025036:	4a5d      	ldr	r2, [pc, #372]	; (80251ac <__strftime.isra.0+0x7bc>)
 8025038:	68b3      	ldr	r3, [r6, #8]
 802503a:	1b29      	subs	r1, r5, r4
 802503c:	1938      	adds	r0, r7, r4
 802503e:	f7ff fb91 	bl	8024764 <sniprintf>
 8025042:	e693      	b.n	8024d6c <__strftime.isra.0+0x37c>
 8025044:	6a33      	ldr	r3, [r6, #32]
 8025046:	2b00      	cmp	r3, #0
 8025048:	db7a      	blt.n	8025140 <__strftime.isra.0+0x750>
 802504a:	f000 fb87 	bl	802575c <__tz_lock>
 802504e:	9b02      	ldr	r3, [sp, #8]
 8025050:	b90b      	cbnz	r3, 8025056 <__strftime.isra.0+0x666>
 8025052:	f000 fb8f 	bl	8025774 <_tzset_unlocked>
 8025056:	f001 fe81 	bl	8026d5c <__gettzinfo>
 802505a:	6a33      	ldr	r3, [r6, #32]
 802505c:	2b00      	cmp	r3, #0
 802505e:	bfd4      	ite	le
 8025060:	2200      	movle	r2, #0
 8025062:	2201      	movgt	r2, #1
 8025064:	2328      	movs	r3, #40	; 0x28
 8025066:	fb02 3303 	mla	r3, r2, r3, r3
 802506a:	58c3      	ldr	r3, [r0, r3]
 802506c:	f1c3 0900 	rsb	r9, r3, #0
 8025070:	f000 fb7a 	bl	8025768 <__tz_unlock>
 8025074:	2301      	movs	r3, #1
 8025076:	9302      	str	r3, [sp, #8]
 8025078:	6972      	ldr	r2, [r6, #20]
 802507a:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 802507e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8025082:	f16c 0c00 	sbc.w	ip, ip, #0
 8025086:	f1bc 0f00 	cmp.w	ip, #0
 802508a:	eba5 0104 	sub.w	r1, r5, r4
 802508e:	eb07 0004 	add.w	r0, r7, r4
 8025092:	da02      	bge.n	802509a <__strftime.isra.0+0x6aa>
 8025094:	3303      	adds	r3, #3
 8025096:	f14c 0c00 	adc.w	ip, ip, #0
 802509a:	089b      	lsrs	r3, r3, #2
 802509c:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 80250a0:	f102 3aff 	add.w	sl, r2, #4294967295
 80250a4:	ea4f 0cac 	mov.w	ip, ip, asr #2
 80250a8:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80250ac:	fb9a fefe 	sdiv	lr, sl, lr
 80250b0:	ebb3 030e 	subs.w	r3, r3, lr
 80250b4:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 80250b8:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 80250bc:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 80250c0:	fb9a fefe 	sdiv	lr, sl, lr
 80250c4:	eb13 030e 	adds.w	r3, r3, lr
 80250c8:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 80250cc:	3a46      	subs	r2, #70	; 0x46
 80250ce:	f240 1c6d 	movw	ip, #365	; 0x16d
 80250d2:	fb0c f202 	mul.w	r2, ip, r2
 80250d6:	189b      	adds	r3, r3, r2
 80250d8:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 80250dc:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 80250e0:	f04f 0c18 	mov.w	ip, #24
 80250e4:	eb13 030e 	adds.w	r3, r3, lr
 80250e8:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80250ec:	fba3 3e0c 	umull	r3, lr, r3, ip
 80250f0:	fb0c e202 	mla	r2, ip, r2, lr
 80250f4:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80250f8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80250fc:	eb13 030e 	adds.w	r3, r3, lr
 8025100:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8025104:	fba3 320c 	umull	r3, r2, r3, ip
 8025108:	fb0c 220e 	mla	r2, ip, lr, r2
 802510c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8025110:	eb13 030e 	adds.w	r3, r3, lr
 8025114:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025118:	fba3 3e0c 	umull	r3, lr, r3, ip
 802511c:	fb0c e202 	mla	r2, ip, r2, lr
 8025120:	f8d6 e000 	ldr.w	lr, [r6]
 8025124:	eb13 030e 	adds.w	r3, r3, lr
 8025128:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 802512c:	ebb3 0309 	subs.w	r3, r3, r9
 8025130:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8025134:	e9cd 3200 	strd	r3, r2, [sp]
 8025138:	4a1d      	ldr	r2, [pc, #116]	; (80251b0 <__strftime.isra.0+0x7c0>)
 802513a:	f7ff fb13 	bl	8024764 <sniprintf>
 802513e:	e615      	b.n	8024d6c <__strftime.isra.0+0x37c>
 8025140:	f04f 0900 	mov.w	r9, #0
 8025144:	e798      	b.n	8025078 <__strftime.isra.0+0x688>
 8025146:	6833      	ldr	r3, [r6, #0]
 8025148:	e67e      	b.n	8024e48 <__strftime.isra.0+0x458>
 802514a:	1e6b      	subs	r3, r5, #1
 802514c:	429c      	cmp	r4, r3
 802514e:	f4bf ac81 	bcs.w	8024a54 <__strftime.isra.0+0x64>
 8025152:	2309      	movs	r3, #9
 8025154:	e741      	b.n	8024fda <__strftime.isra.0+0x5ea>
 8025156:	6833      	ldr	r3, [r6, #0]
 8025158:	9301      	str	r3, [sp, #4]
 802515a:	6873      	ldr	r3, [r6, #4]
 802515c:	9300      	str	r3, [sp, #0]
 802515e:	4a15      	ldr	r2, [pc, #84]	; (80251b4 <__strftime.isra.0+0x7c4>)
 8025160:	68b3      	ldr	r3, [r6, #8]
 8025162:	e5f4      	b.n	8024d4e <__strftime.isra.0+0x35e>
 8025164:	1e6b      	subs	r3, r5, #1
 8025166:	429c      	cmp	r4, r3
 8025168:	f4bf ac74 	bcs.w	8024a54 <__strftime.isra.0+0x64>
 802516c:	69b3      	ldr	r3, [r6, #24]
 802516e:	1c62      	adds	r2, r4, #1
 8025170:	b91b      	cbnz	r3, 802517a <__strftime.isra.0+0x78a>
 8025172:	2337      	movs	r3, #55	; 0x37
 8025174:	553b      	strb	r3, [r7, r4]
 8025176:	4614      	mov	r4, r2
 8025178:	e53e      	b.n	8024bf8 <__strftime.isra.0+0x208>
 802517a:	3330      	adds	r3, #48	; 0x30
 802517c:	e7fa      	b.n	8025174 <__strftime.isra.0+0x784>
 802517e:	69f3      	ldr	r3, [r6, #28]
 8025180:	69b2      	ldr	r2, [r6, #24]
 8025182:	3307      	adds	r3, #7
 8025184:	1a9b      	subs	r3, r3, r2
 8025186:	2207      	movs	r2, #7
 8025188:	fb93 f3f2 	sdiv	r3, r3, r2
 802518c:	e65c      	b.n	8024e48 <__strftime.isra.0+0x458>
 802518e:	bf00      	nop
 8025190:	fffff894 	.word	0xfffff894
 8025194:	fffff895 	.word	0xfffff895
 8025198:	080e2526 	.word	0x080e2526
 802519c:	080e2534 	.word	0x080e2534
 80251a0:	080e2549 	.word	0x080e2549
 80251a4:	080e269c 	.word	0x080e269c
 80251a8:	080e224d 	.word	0x080e224d
 80251ac:	080e2558 	.word	0x080e2558
 80251b0:	080e254e 	.word	0x080e254e
 80251b4:	080e2553 	.word	0x080e2553
 80251b8:	4630      	mov	r0, r6
 80251ba:	f7ff fbb7 	bl	802492c <iso_year_adjust>
 80251be:	69b2      	ldr	r2, [r6, #24]
 80251c0:	b132      	cbz	r2, 80251d0 <__strftime.isra.0+0x7e0>
 80251c2:	3a01      	subs	r2, #1
 80251c4:	2800      	cmp	r0, #0
 80251c6:	dc28      	bgt.n	802521a <__strftime.isra.0+0x82a>
 80251c8:	69f3      	ldr	r3, [r6, #28]
 80251ca:	d103      	bne.n	80251d4 <__strftime.isra.0+0x7e4>
 80251cc:	330a      	adds	r3, #10
 80251ce:	e7d9      	b.n	8025184 <__strftime.isra.0+0x794>
 80251d0:	2206      	movs	r2, #6
 80251d2:	e7f7      	b.n	80251c4 <__strftime.isra.0+0x7d4>
 80251d4:	6971      	ldr	r1, [r6, #20]
 80251d6:	2900      	cmp	r1, #0
 80251d8:	eba2 0203 	sub.w	r2, r2, r3
 80251dc:	f240 736b 	movw	r3, #1899	; 0x76b
 80251e0:	bfa8      	it	ge
 80251e2:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 80251e6:	440b      	add	r3, r1
 80251e8:	0799      	lsls	r1, r3, #30
 80251ea:	d105      	bne.n	80251f8 <__strftime.isra.0+0x808>
 80251ec:	2064      	movs	r0, #100	; 0x64
 80251ee:	fb93 f1f0 	sdiv	r1, r3, r0
 80251f2:	fb00 3111 	mls	r1, r0, r1, r3
 80251f6:	b971      	cbnz	r1, 8025216 <__strftime.isra.0+0x826>
 80251f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80251fc:	fb93 f0f1 	sdiv	r0, r3, r1
 8025200:	fb01 3310 	mls	r3, r1, r0, r3
 8025204:	fab3 f383 	clz	r3, r3
 8025208:	095b      	lsrs	r3, r3, #5
 802520a:	1ad3      	subs	r3, r2, r3
 802520c:	2b05      	cmp	r3, #5
 802520e:	bfb4      	ite	lt
 8025210:	2335      	movlt	r3, #53	; 0x35
 8025212:	2334      	movge	r3, #52	; 0x34
 8025214:	e618      	b.n	8024e48 <__strftime.isra.0+0x458>
 8025216:	2301      	movs	r3, #1
 8025218:	e7f7      	b.n	802520a <__strftime.isra.0+0x81a>
 802521a:	2301      	movs	r3, #1
 802521c:	e614      	b.n	8024e48 <__strftime.isra.0+0x458>
 802521e:	1e6b      	subs	r3, r5, #1
 8025220:	429c      	cmp	r4, r3
 8025222:	f4bf ac17 	bcs.w	8024a54 <__strftime.isra.0+0x64>
 8025226:	69b3      	ldr	r3, [r6, #24]
 8025228:	3330      	adds	r3, #48	; 0x30
 802522a:	e6d6      	b.n	8024fda <__strftime.isra.0+0x5ea>
 802522c:	69b2      	ldr	r2, [r6, #24]
 802522e:	b11a      	cbz	r2, 8025238 <__strftime.isra.0+0x848>
 8025230:	3a01      	subs	r2, #1
 8025232:	69f3      	ldr	r3, [r6, #28]
 8025234:	3307      	adds	r3, #7
 8025236:	e7a5      	b.n	8025184 <__strftime.isra.0+0x794>
 8025238:	2206      	movs	r2, #6
 802523a:	e7fa      	b.n	8025232 <__strftime.isra.0+0x842>
 802523c:	6970      	ldr	r0, [r6, #20]
 802523e:	2800      	cmp	r0, #0
 8025240:	db05      	blt.n	802524e <__strftime.isra.0+0x85e>
 8025242:	2364      	movs	r3, #100	; 0x64
 8025244:	fb90 f2f3 	sdiv	r2, r0, r3
 8025248:	fb02 0313 	mls	r3, r2, r3, r0
 802524c:	e5fc      	b.n	8024e48 <__strftime.isra.0+0x458>
 802524e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025252:	f000 fce7 	bl	8025c24 <abs>
 8025256:	e7f4      	b.n	8025242 <__strftime.isra.0+0x852>
 8025258:	6972      	ldr	r2, [r6, #20]
 802525a:	494c      	ldr	r1, [pc, #304]	; (802538c <__strftime.isra.0+0x99c>)
 802525c:	428a      	cmp	r2, r1
 802525e:	da05      	bge.n	802526c <__strftime.isra.0+0x87c>
 8025260:	202d      	movs	r0, #45	; 0x2d
 8025262:	f88d 0018 	strb.w	r0, [sp, #24]
 8025266:	eba1 0a02 	sub.w	sl, r1, r2
 802526a:	e657      	b.n	8024f1c <__strftime.isra.0+0x52c>
 802526c:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8025270:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025274:	d106      	bne.n	8025284 <__strftime.isra.0+0x894>
 8025276:	f242 720f 	movw	r2, #9999	; 0x270f
 802527a:	4592      	cmp	sl, r2
 802527c:	d902      	bls.n	8025284 <__strftime.isra.0+0x894>
 802527e:	f88d b018 	strb.w	fp, [sp, #24]
 8025282:	e64b      	b.n	8024f1c <__strftime.isra.0+0x52c>
 8025284:	aa06      	add	r2, sp, #24
 8025286:	2125      	movs	r1, #37	; 0x25
 8025288:	7011      	strb	r1, [r2, #0]
 802528a:	f1bb 0f00 	cmp.w	fp, #0
 802528e:	d108      	bne.n	80252a2 <__strftime.isra.0+0x8b2>
 8025290:	1c50      	adds	r0, r2, #1
 8025292:	493f      	ldr	r1, [pc, #252]	; (8025390 <__strftime.isra.0+0x9a0>)
 8025294:	f7ff fb41 	bl	802491a <strcpy>
 8025298:	f8cd a000 	str.w	sl, [sp]
 802529c:	464b      	mov	r3, r9
 802529e:	aa06      	add	r2, sp, #24
 80252a0:	e6cb      	b.n	802503a <__strftime.isra.0+0x64a>
 80252a2:	2330      	movs	r3, #48	; 0x30
 80252a4:	1c90      	adds	r0, r2, #2
 80252a6:	7053      	strb	r3, [r2, #1]
 80252a8:	e7f3      	b.n	8025292 <__strftime.isra.0+0x8a2>
 80252aa:	6a33      	ldr	r3, [r6, #32]
 80252ac:	2b00      	cmp	r3, #0
 80252ae:	f6ff aca3 	blt.w	8024bf8 <__strftime.isra.0+0x208>
 80252b2:	f000 fa53 	bl	802575c <__tz_lock>
 80252b6:	9b02      	ldr	r3, [sp, #8]
 80252b8:	b90b      	cbnz	r3, 80252be <__strftime.isra.0+0x8ce>
 80252ba:	f000 fa5b 	bl	8025774 <_tzset_unlocked>
 80252be:	f001 fd4d 	bl	8026d5c <__gettzinfo>
 80252c2:	6a33      	ldr	r3, [r6, #32]
 80252c4:	2b00      	cmp	r3, #0
 80252c6:	bfd4      	ite	le
 80252c8:	2200      	movle	r2, #0
 80252ca:	2201      	movgt	r2, #1
 80252cc:	2328      	movs	r3, #40	; 0x28
 80252ce:	fb02 3303 	mla	r3, r2, r3, r3
 80252d2:	eb07 0a04 	add.w	sl, r7, r4
 80252d6:	58c3      	ldr	r3, [r0, r3]
 80252d8:	f1c3 0900 	rsb	r9, r3, #0
 80252dc:	f000 fa44 	bl	8025768 <__tz_unlock>
 80252e0:	233c      	movs	r3, #60	; 0x3c
 80252e2:	fb99 f0f3 	sdiv	r0, r9, r3
 80252e6:	f001 fde9 	bl	8026ebc <labs>
 80252ea:	233c      	movs	r3, #60	; 0x3c
 80252ec:	eba5 0b04 	sub.w	fp, r5, r4
 80252f0:	fb90 f2f3 	sdiv	r2, r0, r3
 80252f4:	fb02 0013 	mls	r0, r2, r3, r0
 80252f8:	9000      	str	r0, [sp, #0]
 80252fa:	4a26      	ldr	r2, [pc, #152]	; (8025394 <__strftime.isra.0+0x9a4>)
 80252fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8025300:	4659      	mov	r1, fp
 8025302:	4650      	mov	r0, sl
 8025304:	fb99 f3f3 	sdiv	r3, r9, r3
 8025308:	f7ff fa2c 	bl	8024764 <sniprintf>
 802530c:	2800      	cmp	r0, #0
 802530e:	f6ff aba1 	blt.w	8024a54 <__strftime.isra.0+0x64>
 8025312:	4404      	add	r4, r0
 8025314:	42a5      	cmp	r5, r4
 8025316:	f67f ab9d 	bls.w	8024a54 <__strftime.isra.0+0x64>
 802531a:	2301      	movs	r3, #1
 802531c:	9302      	str	r3, [sp, #8]
 802531e:	e46b      	b.n	8024bf8 <__strftime.isra.0+0x208>
 8025320:	6a33      	ldr	r3, [r6, #32]
 8025322:	2b00      	cmp	r3, #0
 8025324:	f6ff ac68 	blt.w	8024bf8 <__strftime.isra.0+0x208>
 8025328:	f000 fa18 	bl	802575c <__tz_lock>
 802532c:	9b02      	ldr	r3, [sp, #8]
 802532e:	b90b      	cbnz	r3, 8025334 <__strftime.isra.0+0x944>
 8025330:	f000 fa20 	bl	8025774 <_tzset_unlocked>
 8025334:	6a33      	ldr	r3, [r6, #32]
 8025336:	4a18      	ldr	r2, [pc, #96]	; (8025398 <__strftime.isra.0+0x9a8>)
 8025338:	2b00      	cmp	r3, #0
 802533a:	bfd4      	ite	le
 802533c:	2300      	movle	r3, #0
 802533e:	2301      	movgt	r3, #1
 8025340:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025344:	4648      	mov	r0, r9
 8025346:	f7da ff85 	bl	8000254 <strlen>
 802534a:	f109 39ff 	add.w	r9, r9, #4294967295
 802534e:	4420      	add	r0, r4
 8025350:	1e6b      	subs	r3, r5, #1
 8025352:	42a0      	cmp	r0, r4
 8025354:	d102      	bne.n	802535c <__strftime.isra.0+0x96c>
 8025356:	f000 fa07 	bl	8025768 <__tz_unlock>
 802535a:	e7de      	b.n	802531a <__strftime.isra.0+0x92a>
 802535c:	42a3      	cmp	r3, r4
 802535e:	d904      	bls.n	802536a <__strftime.isra.0+0x97a>
 8025360:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025364:	553a      	strb	r2, [r7, r4]
 8025366:	3401      	adds	r4, #1
 8025368:	e7f3      	b.n	8025352 <__strftime.isra.0+0x962>
 802536a:	f000 f9fd 	bl	8025768 <__tz_unlock>
 802536e:	f7ff bb71 	b.w	8024a54 <__strftime.isra.0+0x64>
 8025372:	1e6b      	subs	r3, r5, #1
 8025374:	429c      	cmp	r4, r3
 8025376:	f4bf ab6d 	bcs.w	8024a54 <__strftime.isra.0+0x64>
 802537a:	2325      	movs	r3, #37	; 0x25
 802537c:	e62d      	b.n	8024fda <__strftime.isra.0+0x5ea>
 802537e:	b10d      	cbz	r5, 8025384 <__strftime.isra.0+0x994>
 8025380:	2300      	movs	r3, #0
 8025382:	553b      	strb	r3, [r7, r4]
 8025384:	4620      	mov	r0, r4
 8025386:	b00f      	add	sp, #60	; 0x3c
 8025388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802538c:	fffff894 	.word	0xfffff894
 8025390:	080e2545 	.word	0x080e2545
 8025394:	080e2562 	.word	0x080e2562
 8025398:	200004ec 	.word	0x200004ec

0802539c <strftime>:
 802539c:	f7ff bb28 	b.w	80249f0 <__strftime.isra.0>

080253a0 <strncmp>:
 80253a0:	b510      	push	{r4, lr}
 80253a2:	b17a      	cbz	r2, 80253c4 <strncmp+0x24>
 80253a4:	4603      	mov	r3, r0
 80253a6:	3901      	subs	r1, #1
 80253a8:	1884      	adds	r4, r0, r2
 80253aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80253ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80253b2:	4290      	cmp	r0, r2
 80253b4:	d101      	bne.n	80253ba <strncmp+0x1a>
 80253b6:	42a3      	cmp	r3, r4
 80253b8:	d101      	bne.n	80253be <strncmp+0x1e>
 80253ba:	1a80      	subs	r0, r0, r2
 80253bc:	bd10      	pop	{r4, pc}
 80253be:	2800      	cmp	r0, #0
 80253c0:	d1f3      	bne.n	80253aa <strncmp+0xa>
 80253c2:	e7fa      	b.n	80253ba <strncmp+0x1a>
 80253c4:	4610      	mov	r0, r2
 80253c6:	e7f9      	b.n	80253bc <strncmp+0x1c>

080253c8 <strncpy>:
 80253c8:	b510      	push	{r4, lr}
 80253ca:	3901      	subs	r1, #1
 80253cc:	4603      	mov	r3, r0
 80253ce:	b132      	cbz	r2, 80253de <strncpy+0x16>
 80253d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80253d4:	f803 4b01 	strb.w	r4, [r3], #1
 80253d8:	3a01      	subs	r2, #1
 80253da:	2c00      	cmp	r4, #0
 80253dc:	d1f7      	bne.n	80253ce <strncpy+0x6>
 80253de:	441a      	add	r2, r3
 80253e0:	2100      	movs	r1, #0
 80253e2:	4293      	cmp	r3, r2
 80253e4:	d100      	bne.n	80253e8 <strncpy+0x20>
 80253e6:	bd10      	pop	{r4, pc}
 80253e8:	f803 1b01 	strb.w	r1, [r3], #1
 80253ec:	e7f9      	b.n	80253e2 <strncpy+0x1a>
	...

080253f0 <_strtol_l.constprop.0>:
 80253f0:	2b01      	cmp	r3, #1
 80253f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80253f6:	d001      	beq.n	80253fc <_strtol_l.constprop.0+0xc>
 80253f8:	2b24      	cmp	r3, #36	; 0x24
 80253fa:	d906      	bls.n	802540a <_strtol_l.constprop.0+0x1a>
 80253fc:	f001 fa9a 	bl	8026934 <__errno>
 8025400:	2316      	movs	r3, #22
 8025402:	6003      	str	r3, [r0, #0]
 8025404:	2000      	movs	r0, #0
 8025406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802540a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80254f0 <_strtol_l.constprop.0+0x100>
 802540e:	460d      	mov	r5, r1
 8025410:	462e      	mov	r6, r5
 8025412:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025416:	f814 700c 	ldrb.w	r7, [r4, ip]
 802541a:	f017 0708 	ands.w	r7, r7, #8
 802541e:	d1f7      	bne.n	8025410 <_strtol_l.constprop.0+0x20>
 8025420:	2c2d      	cmp	r4, #45	; 0x2d
 8025422:	d132      	bne.n	802548a <_strtol_l.constprop.0+0x9a>
 8025424:	782c      	ldrb	r4, [r5, #0]
 8025426:	2701      	movs	r7, #1
 8025428:	1cb5      	adds	r5, r6, #2
 802542a:	2b00      	cmp	r3, #0
 802542c:	d05b      	beq.n	80254e6 <_strtol_l.constprop.0+0xf6>
 802542e:	2b10      	cmp	r3, #16
 8025430:	d109      	bne.n	8025446 <_strtol_l.constprop.0+0x56>
 8025432:	2c30      	cmp	r4, #48	; 0x30
 8025434:	d107      	bne.n	8025446 <_strtol_l.constprop.0+0x56>
 8025436:	782c      	ldrb	r4, [r5, #0]
 8025438:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802543c:	2c58      	cmp	r4, #88	; 0x58
 802543e:	d14d      	bne.n	80254dc <_strtol_l.constprop.0+0xec>
 8025440:	786c      	ldrb	r4, [r5, #1]
 8025442:	2310      	movs	r3, #16
 8025444:	3502      	adds	r5, #2
 8025446:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802544a:	f108 38ff 	add.w	r8, r8, #4294967295
 802544e:	f04f 0c00 	mov.w	ip, #0
 8025452:	fbb8 f9f3 	udiv	r9, r8, r3
 8025456:	4666      	mov	r6, ip
 8025458:	fb03 8a19 	mls	sl, r3, r9, r8
 802545c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8025460:	f1be 0f09 	cmp.w	lr, #9
 8025464:	d816      	bhi.n	8025494 <_strtol_l.constprop.0+0xa4>
 8025466:	4674      	mov	r4, lr
 8025468:	42a3      	cmp	r3, r4
 802546a:	dd24      	ble.n	80254b6 <_strtol_l.constprop.0+0xc6>
 802546c:	f1bc 0f00 	cmp.w	ip, #0
 8025470:	db1e      	blt.n	80254b0 <_strtol_l.constprop.0+0xc0>
 8025472:	45b1      	cmp	r9, r6
 8025474:	d31c      	bcc.n	80254b0 <_strtol_l.constprop.0+0xc0>
 8025476:	d101      	bne.n	802547c <_strtol_l.constprop.0+0x8c>
 8025478:	45a2      	cmp	sl, r4
 802547a:	db19      	blt.n	80254b0 <_strtol_l.constprop.0+0xc0>
 802547c:	fb06 4603 	mla	r6, r6, r3, r4
 8025480:	f04f 0c01 	mov.w	ip, #1
 8025484:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025488:	e7e8      	b.n	802545c <_strtol_l.constprop.0+0x6c>
 802548a:	2c2b      	cmp	r4, #43	; 0x2b
 802548c:	bf04      	itt	eq
 802548e:	782c      	ldrbeq	r4, [r5, #0]
 8025490:	1cb5      	addeq	r5, r6, #2
 8025492:	e7ca      	b.n	802542a <_strtol_l.constprop.0+0x3a>
 8025494:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8025498:	f1be 0f19 	cmp.w	lr, #25
 802549c:	d801      	bhi.n	80254a2 <_strtol_l.constprop.0+0xb2>
 802549e:	3c37      	subs	r4, #55	; 0x37
 80254a0:	e7e2      	b.n	8025468 <_strtol_l.constprop.0+0x78>
 80254a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80254a6:	f1be 0f19 	cmp.w	lr, #25
 80254aa:	d804      	bhi.n	80254b6 <_strtol_l.constprop.0+0xc6>
 80254ac:	3c57      	subs	r4, #87	; 0x57
 80254ae:	e7db      	b.n	8025468 <_strtol_l.constprop.0+0x78>
 80254b0:	f04f 3cff 	mov.w	ip, #4294967295
 80254b4:	e7e6      	b.n	8025484 <_strtol_l.constprop.0+0x94>
 80254b6:	f1bc 0f00 	cmp.w	ip, #0
 80254ba:	da05      	bge.n	80254c8 <_strtol_l.constprop.0+0xd8>
 80254bc:	2322      	movs	r3, #34	; 0x22
 80254be:	6003      	str	r3, [r0, #0]
 80254c0:	4646      	mov	r6, r8
 80254c2:	b942      	cbnz	r2, 80254d6 <_strtol_l.constprop.0+0xe6>
 80254c4:	4630      	mov	r0, r6
 80254c6:	e79e      	b.n	8025406 <_strtol_l.constprop.0+0x16>
 80254c8:	b107      	cbz	r7, 80254cc <_strtol_l.constprop.0+0xdc>
 80254ca:	4276      	negs	r6, r6
 80254cc:	2a00      	cmp	r2, #0
 80254ce:	d0f9      	beq.n	80254c4 <_strtol_l.constprop.0+0xd4>
 80254d0:	f1bc 0f00 	cmp.w	ip, #0
 80254d4:	d000      	beq.n	80254d8 <_strtol_l.constprop.0+0xe8>
 80254d6:	1e69      	subs	r1, r5, #1
 80254d8:	6011      	str	r1, [r2, #0]
 80254da:	e7f3      	b.n	80254c4 <_strtol_l.constprop.0+0xd4>
 80254dc:	2430      	movs	r4, #48	; 0x30
 80254de:	2b00      	cmp	r3, #0
 80254e0:	d1b1      	bne.n	8025446 <_strtol_l.constprop.0+0x56>
 80254e2:	2308      	movs	r3, #8
 80254e4:	e7af      	b.n	8025446 <_strtol_l.constprop.0+0x56>
 80254e6:	2c30      	cmp	r4, #48	; 0x30
 80254e8:	d0a5      	beq.n	8025436 <_strtol_l.constprop.0+0x46>
 80254ea:	230a      	movs	r3, #10
 80254ec:	e7ab      	b.n	8025446 <_strtol_l.constprop.0+0x56>
 80254ee:	bf00      	nop
 80254f0:	080e224d 	.word	0x080e224d

080254f4 <_strtol_r>:
 80254f4:	f7ff bf7c 	b.w	80253f0 <_strtol_l.constprop.0>

080254f8 <strtol>:
 80254f8:	4613      	mov	r3, r2
 80254fa:	460a      	mov	r2, r1
 80254fc:	4601      	mov	r1, r0
 80254fe:	4802      	ldr	r0, [pc, #8]	; (8025508 <strtol+0x10>)
 8025500:	6800      	ldr	r0, [r0, #0]
 8025502:	f7ff bf75 	b.w	80253f0 <_strtol_l.constprop.0>
 8025506:	bf00      	nop
 8025508:	20000488 	.word	0x20000488

0802550c <_strtoul_l.constprop.0>:
 802550c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025510:	4f36      	ldr	r7, [pc, #216]	; (80255ec <_strtoul_l.constprop.0+0xe0>)
 8025512:	4686      	mov	lr, r0
 8025514:	460d      	mov	r5, r1
 8025516:	4628      	mov	r0, r5
 8025518:	f815 4b01 	ldrb.w	r4, [r5], #1
 802551c:	5de6      	ldrb	r6, [r4, r7]
 802551e:	f016 0608 	ands.w	r6, r6, #8
 8025522:	d1f8      	bne.n	8025516 <_strtoul_l.constprop.0+0xa>
 8025524:	2c2d      	cmp	r4, #45	; 0x2d
 8025526:	d12f      	bne.n	8025588 <_strtoul_l.constprop.0+0x7c>
 8025528:	782c      	ldrb	r4, [r5, #0]
 802552a:	2601      	movs	r6, #1
 802552c:	1c85      	adds	r5, r0, #2
 802552e:	2b00      	cmp	r3, #0
 8025530:	d057      	beq.n	80255e2 <_strtoul_l.constprop.0+0xd6>
 8025532:	2b10      	cmp	r3, #16
 8025534:	d109      	bne.n	802554a <_strtoul_l.constprop.0+0x3e>
 8025536:	2c30      	cmp	r4, #48	; 0x30
 8025538:	d107      	bne.n	802554a <_strtoul_l.constprop.0+0x3e>
 802553a:	7828      	ldrb	r0, [r5, #0]
 802553c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8025540:	2858      	cmp	r0, #88	; 0x58
 8025542:	d149      	bne.n	80255d8 <_strtoul_l.constprop.0+0xcc>
 8025544:	786c      	ldrb	r4, [r5, #1]
 8025546:	2310      	movs	r3, #16
 8025548:	3502      	adds	r5, #2
 802554a:	f04f 38ff 	mov.w	r8, #4294967295
 802554e:	2700      	movs	r7, #0
 8025550:	fbb8 f8f3 	udiv	r8, r8, r3
 8025554:	fb03 f908 	mul.w	r9, r3, r8
 8025558:	ea6f 0909 	mvn.w	r9, r9
 802555c:	4638      	mov	r0, r7
 802555e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8025562:	f1bc 0f09 	cmp.w	ip, #9
 8025566:	d814      	bhi.n	8025592 <_strtoul_l.constprop.0+0x86>
 8025568:	4664      	mov	r4, ip
 802556a:	42a3      	cmp	r3, r4
 802556c:	dd22      	ble.n	80255b4 <_strtoul_l.constprop.0+0xa8>
 802556e:	2f00      	cmp	r7, #0
 8025570:	db1d      	blt.n	80255ae <_strtoul_l.constprop.0+0xa2>
 8025572:	4580      	cmp	r8, r0
 8025574:	d31b      	bcc.n	80255ae <_strtoul_l.constprop.0+0xa2>
 8025576:	d101      	bne.n	802557c <_strtoul_l.constprop.0+0x70>
 8025578:	45a1      	cmp	r9, r4
 802557a:	db18      	blt.n	80255ae <_strtoul_l.constprop.0+0xa2>
 802557c:	fb00 4003 	mla	r0, r0, r3, r4
 8025580:	2701      	movs	r7, #1
 8025582:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025586:	e7ea      	b.n	802555e <_strtoul_l.constprop.0+0x52>
 8025588:	2c2b      	cmp	r4, #43	; 0x2b
 802558a:	bf04      	itt	eq
 802558c:	782c      	ldrbeq	r4, [r5, #0]
 802558e:	1c85      	addeq	r5, r0, #2
 8025590:	e7cd      	b.n	802552e <_strtoul_l.constprop.0+0x22>
 8025592:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8025596:	f1bc 0f19 	cmp.w	ip, #25
 802559a:	d801      	bhi.n	80255a0 <_strtoul_l.constprop.0+0x94>
 802559c:	3c37      	subs	r4, #55	; 0x37
 802559e:	e7e4      	b.n	802556a <_strtoul_l.constprop.0+0x5e>
 80255a0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80255a4:	f1bc 0f19 	cmp.w	ip, #25
 80255a8:	d804      	bhi.n	80255b4 <_strtoul_l.constprop.0+0xa8>
 80255aa:	3c57      	subs	r4, #87	; 0x57
 80255ac:	e7dd      	b.n	802556a <_strtoul_l.constprop.0+0x5e>
 80255ae:	f04f 37ff 	mov.w	r7, #4294967295
 80255b2:	e7e6      	b.n	8025582 <_strtoul_l.constprop.0+0x76>
 80255b4:	2f00      	cmp	r7, #0
 80255b6:	da07      	bge.n	80255c8 <_strtoul_l.constprop.0+0xbc>
 80255b8:	2322      	movs	r3, #34	; 0x22
 80255ba:	f8ce 3000 	str.w	r3, [lr]
 80255be:	f04f 30ff 	mov.w	r0, #4294967295
 80255c2:	b932      	cbnz	r2, 80255d2 <_strtoul_l.constprop.0+0xc6>
 80255c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80255c8:	b106      	cbz	r6, 80255cc <_strtoul_l.constprop.0+0xc0>
 80255ca:	4240      	negs	r0, r0
 80255cc:	2a00      	cmp	r2, #0
 80255ce:	d0f9      	beq.n	80255c4 <_strtoul_l.constprop.0+0xb8>
 80255d0:	b107      	cbz	r7, 80255d4 <_strtoul_l.constprop.0+0xc8>
 80255d2:	1e69      	subs	r1, r5, #1
 80255d4:	6011      	str	r1, [r2, #0]
 80255d6:	e7f5      	b.n	80255c4 <_strtoul_l.constprop.0+0xb8>
 80255d8:	2430      	movs	r4, #48	; 0x30
 80255da:	2b00      	cmp	r3, #0
 80255dc:	d1b5      	bne.n	802554a <_strtoul_l.constprop.0+0x3e>
 80255de:	2308      	movs	r3, #8
 80255e0:	e7b3      	b.n	802554a <_strtoul_l.constprop.0+0x3e>
 80255e2:	2c30      	cmp	r4, #48	; 0x30
 80255e4:	d0a9      	beq.n	802553a <_strtoul_l.constprop.0+0x2e>
 80255e6:	230a      	movs	r3, #10
 80255e8:	e7af      	b.n	802554a <_strtoul_l.constprop.0+0x3e>
 80255ea:	bf00      	nop
 80255ec:	080e224d 	.word	0x080e224d

080255f0 <_strtoul_r>:
 80255f0:	f7ff bf8c 	b.w	802550c <_strtoul_l.constprop.0>

080255f4 <strtoul>:
 80255f4:	4613      	mov	r3, r2
 80255f6:	460a      	mov	r2, r1
 80255f8:	4601      	mov	r1, r0
 80255fa:	4802      	ldr	r0, [pc, #8]	; (8025604 <strtoul+0x10>)
 80255fc:	6800      	ldr	r0, [r0, #0]
 80255fe:	f7ff bf85 	b.w	802550c <_strtoul_l.constprop.0>
 8025602:	bf00      	nop
 8025604:	20000488 	.word	0x20000488

08025608 <__tzcalc_limits>:
 8025608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802560c:	4605      	mov	r5, r0
 802560e:	f001 fba5 	bl	8026d5c <__gettzinfo>
 8025612:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8025616:	429d      	cmp	r5, r3
 8025618:	f340 8099 	ble.w	802574e <__tzcalc_limits+0x146>
 802561c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8025620:	18ac      	adds	r4, r5, r2
 8025622:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8025626:	f240 126d 	movw	r2, #365	; 0x16d
 802562a:	10a4      	asrs	r4, r4, #2
 802562c:	fb02 4403 	mla	r4, r2, r3, r4
 8025630:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8025634:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8025638:	fb93 f3f2 	sdiv	r3, r3, r2
 802563c:	441c      	add	r4, r3
 802563e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8025642:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8025646:	fb95 fcf3 	sdiv	ip, r5, r3
 802564a:	fb03 5c1c 	mls	ip, r3, ip, r5
 802564e:	186a      	adds	r2, r5, r1
 8025650:	fabc f68c 	clz	r6, ip
 8025654:	fbb2 f2f3 	udiv	r2, r2, r3
 8025658:	f005 0303 	and.w	r3, r5, #3
 802565c:	4414      	add	r4, r2
 802565e:	2264      	movs	r2, #100	; 0x64
 8025660:	6045      	str	r5, [r0, #4]
 8025662:	fb95 f7f2 	sdiv	r7, r5, r2
 8025666:	0976      	lsrs	r6, r6, #5
 8025668:	fb02 5717 	mls	r7, r2, r7, r5
 802566c:	4601      	mov	r1, r0
 802566e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8025672:	9300      	str	r3, [sp, #0]
 8025674:	f04f 0a07 	mov.w	sl, #7
 8025678:	7a0d      	ldrb	r5, [r1, #8]
 802567a:	694b      	ldr	r3, [r1, #20]
 802567c:	2d4a      	cmp	r5, #74	; 0x4a
 802567e:	d12d      	bne.n	80256dc <__tzcalc_limits+0xd4>
 8025680:	9a00      	ldr	r2, [sp, #0]
 8025682:	eb04 0e03 	add.w	lr, r4, r3
 8025686:	b902      	cbnz	r2, 802568a <__tzcalc_limits+0x82>
 8025688:	b917      	cbnz	r7, 8025690 <__tzcalc_limits+0x88>
 802568a:	f1bc 0f00 	cmp.w	ip, #0
 802568e:	d123      	bne.n	80256d8 <__tzcalc_limits+0xd0>
 8025690:	2b3b      	cmp	r3, #59	; 0x3b
 8025692:	bfd4      	ite	le
 8025694:	2300      	movle	r3, #0
 8025696:	2301      	movgt	r3, #1
 8025698:	4473      	add	r3, lr
 802569a:	3b01      	subs	r3, #1
 802569c:	698d      	ldr	r5, [r1, #24]
 802569e:	4a2d      	ldr	r2, [pc, #180]	; (8025754 <__tzcalc_limits+0x14c>)
 80256a0:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80256a4:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80256a8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80256aa:	18ed      	adds	r5, r5, r3
 80256ac:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80256b0:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80256b4:	3128      	adds	r1, #40	; 0x28
 80256b6:	458b      	cmp	fp, r1
 80256b8:	d1de      	bne.n	8025678 <__tzcalc_limits+0x70>
 80256ba:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80256be:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80256c2:	428c      	cmp	r4, r1
 80256c4:	eb72 0303 	sbcs.w	r3, r2, r3
 80256c8:	bfb4      	ite	lt
 80256ca:	2301      	movlt	r3, #1
 80256cc:	2300      	movge	r3, #0
 80256ce:	6003      	str	r3, [r0, #0]
 80256d0:	2001      	movs	r0, #1
 80256d2:	b003      	add	sp, #12
 80256d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256d8:	2300      	movs	r3, #0
 80256da:	e7dd      	b.n	8025698 <__tzcalc_limits+0x90>
 80256dc:	2d44      	cmp	r5, #68	; 0x44
 80256de:	d101      	bne.n	80256e4 <__tzcalc_limits+0xdc>
 80256e0:	4423      	add	r3, r4
 80256e2:	e7db      	b.n	802569c <__tzcalc_limits+0x94>
 80256e4:	9a00      	ldr	r2, [sp, #0]
 80256e6:	bb62      	cbnz	r2, 8025742 <__tzcalc_limits+0x13a>
 80256e8:	2f00      	cmp	r7, #0
 80256ea:	bf0c      	ite	eq
 80256ec:	4635      	moveq	r5, r6
 80256ee:	2501      	movne	r5, #1
 80256f0:	68ca      	ldr	r2, [r1, #12]
 80256f2:	9201      	str	r2, [sp, #4]
 80256f4:	4a18      	ldr	r2, [pc, #96]	; (8025758 <__tzcalc_limits+0x150>)
 80256f6:	f04f 0930 	mov.w	r9, #48	; 0x30
 80256fa:	fb09 2505 	mla	r5, r9, r5, r2
 80256fe:	46a6      	mov	lr, r4
 8025700:	f04f 0800 	mov.w	r8, #0
 8025704:	3d04      	subs	r5, #4
 8025706:	9a01      	ldr	r2, [sp, #4]
 8025708:	f108 0801 	add.w	r8, r8, #1
 802570c:	4542      	cmp	r2, r8
 802570e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8025712:	dc18      	bgt.n	8025746 <__tzcalc_limits+0x13e>
 8025714:	f10e 0504 	add.w	r5, lr, #4
 8025718:	fb95 f8fa 	sdiv	r8, r5, sl
 802571c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8025720:	eba5 0808 	sub.w	r8, r5, r8
 8025724:	ebb3 0808 	subs.w	r8, r3, r8
 8025728:	690b      	ldr	r3, [r1, #16]
 802572a:	f103 33ff 	add.w	r3, r3, #4294967295
 802572e:	bf48      	it	mi
 8025730:	f108 0807 	addmi.w	r8, r8, #7
 8025734:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8025738:	4443      	add	r3, r8
 802573a:	454b      	cmp	r3, r9
 802573c:	da05      	bge.n	802574a <__tzcalc_limits+0x142>
 802573e:	4473      	add	r3, lr
 8025740:	e7ac      	b.n	802569c <__tzcalc_limits+0x94>
 8025742:	4635      	mov	r5, r6
 8025744:	e7d4      	b.n	80256f0 <__tzcalc_limits+0xe8>
 8025746:	44ce      	add	lr, r9
 8025748:	e7dd      	b.n	8025706 <__tzcalc_limits+0xfe>
 802574a:	3b07      	subs	r3, #7
 802574c:	e7f5      	b.n	802573a <__tzcalc_limits+0x132>
 802574e:	2000      	movs	r0, #0
 8025750:	e7bf      	b.n	80256d2 <__tzcalc_limits+0xca>
 8025752:	bf00      	nop
 8025754:	00015180 	.word	0x00015180
 8025758:	080e2428 	.word	0x080e2428

0802575c <__tz_lock>:
 802575c:	4801      	ldr	r0, [pc, #4]	; (8025764 <__tz_lock+0x8>)
 802575e:	f7fd bec4 	b.w	80234ea <__retarget_lock_acquire>
 8025762:	bf00      	nop
 8025764:	2002f8f4 	.word	0x2002f8f4

08025768 <__tz_unlock>:
 8025768:	4801      	ldr	r0, [pc, #4]	; (8025770 <__tz_unlock+0x8>)
 802576a:	f7fd bec0 	b.w	80234ee <__retarget_lock_release>
 802576e:	bf00      	nop
 8025770:	2002f8f4 	.word	0x2002f8f4

08025774 <_tzset_unlocked>:
 8025774:	4b01      	ldr	r3, [pc, #4]	; (802577c <_tzset_unlocked+0x8>)
 8025776:	6818      	ldr	r0, [r3, #0]
 8025778:	f000 b802 	b.w	8025780 <_tzset_unlocked_r>
 802577c:	20000488 	.word	0x20000488

08025780 <_tzset_unlocked_r>:
 8025780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025784:	b08d      	sub	sp, #52	; 0x34
 8025786:	4607      	mov	r7, r0
 8025788:	f001 fae8 	bl	8026d5c <__gettzinfo>
 802578c:	49b0      	ldr	r1, [pc, #704]	; (8025a50 <_tzset_unlocked_r+0x2d0>)
 802578e:	4eb1      	ldr	r6, [pc, #708]	; (8025a54 <_tzset_unlocked_r+0x2d4>)
 8025790:	4605      	mov	r5, r0
 8025792:	4638      	mov	r0, r7
 8025794:	f001 fada 	bl	8026d4c <_getenv_r>
 8025798:	4604      	mov	r4, r0
 802579a:	b970      	cbnz	r0, 80257ba <_tzset_unlocked_r+0x3a>
 802579c:	4bae      	ldr	r3, [pc, #696]	; (8025a58 <_tzset_unlocked_r+0x2d8>)
 802579e:	4aaf      	ldr	r2, [pc, #700]	; (8025a5c <_tzset_unlocked_r+0x2dc>)
 80257a0:	6018      	str	r0, [r3, #0]
 80257a2:	4baf      	ldr	r3, [pc, #700]	; (8025a60 <_tzset_unlocked_r+0x2e0>)
 80257a4:	6018      	str	r0, [r3, #0]
 80257a6:	4baf      	ldr	r3, [pc, #700]	; (8025a64 <_tzset_unlocked_r+0x2e4>)
 80257a8:	6830      	ldr	r0, [r6, #0]
 80257aa:	e9c3 2200 	strd	r2, r2, [r3]
 80257ae:	f7fd fea9 	bl	8023504 <free>
 80257b2:	6034      	str	r4, [r6, #0]
 80257b4:	b00d      	add	sp, #52	; 0x34
 80257b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257ba:	6831      	ldr	r1, [r6, #0]
 80257bc:	2900      	cmp	r1, #0
 80257be:	d162      	bne.n	8025886 <_tzset_unlocked_r+0x106>
 80257c0:	6830      	ldr	r0, [r6, #0]
 80257c2:	f7fd fe9f 	bl	8023504 <free>
 80257c6:	4620      	mov	r0, r4
 80257c8:	f7da fd44 	bl	8000254 <strlen>
 80257cc:	1c41      	adds	r1, r0, #1
 80257ce:	4638      	mov	r0, r7
 80257d0:	f7fe f9be 	bl	8023b50 <_malloc_r>
 80257d4:	6030      	str	r0, [r6, #0]
 80257d6:	2800      	cmp	r0, #0
 80257d8:	d15a      	bne.n	8025890 <_tzset_unlocked_r+0x110>
 80257da:	7823      	ldrb	r3, [r4, #0]
 80257dc:	4aa2      	ldr	r2, [pc, #648]	; (8025a68 <_tzset_unlocked_r+0x2e8>)
 80257de:	49a3      	ldr	r1, [pc, #652]	; (8025a6c <_tzset_unlocked_r+0x2ec>)
 80257e0:	2b3a      	cmp	r3, #58	; 0x3a
 80257e2:	bf08      	it	eq
 80257e4:	3401      	addeq	r4, #1
 80257e6:	ae0a      	add	r6, sp, #40	; 0x28
 80257e8:	4633      	mov	r3, r6
 80257ea:	4620      	mov	r0, r4
 80257ec:	f7ff f80e 	bl	802480c <siscanf>
 80257f0:	2800      	cmp	r0, #0
 80257f2:	dddf      	ble.n	80257b4 <_tzset_unlocked_r+0x34>
 80257f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80257f6:	18e7      	adds	r7, r4, r3
 80257f8:	5ce3      	ldrb	r3, [r4, r3]
 80257fa:	2b2d      	cmp	r3, #45	; 0x2d
 80257fc:	d14c      	bne.n	8025898 <_tzset_unlocked_r+0x118>
 80257fe:	3701      	adds	r7, #1
 8025800:	f04f 38ff 	mov.w	r8, #4294967295
 8025804:	f10d 0a20 	add.w	sl, sp, #32
 8025808:	f10d 0b1e 	add.w	fp, sp, #30
 802580c:	2400      	movs	r4, #0
 802580e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8025812:	4997      	ldr	r1, [pc, #604]	; (8025a70 <_tzset_unlocked_r+0x2f0>)
 8025814:	9603      	str	r6, [sp, #12]
 8025816:	f8cd b000 	str.w	fp, [sp]
 802581a:	4633      	mov	r3, r6
 802581c:	aa07      	add	r2, sp, #28
 802581e:	4638      	mov	r0, r7
 8025820:	f8ad 401e 	strh.w	r4, [sp, #30]
 8025824:	f8ad 4020 	strh.w	r4, [sp, #32]
 8025828:	f7fe fff0 	bl	802480c <siscanf>
 802582c:	42a0      	cmp	r0, r4
 802582e:	ddc1      	ble.n	80257b4 <_tzset_unlocked_r+0x34>
 8025830:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8025834:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8025838:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8025a7c <_tzset_unlocked_r+0x2fc>
 802583c:	213c      	movs	r1, #60	; 0x3c
 802583e:	fb01 3302 	mla	r3, r1, r2, r3
 8025842:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8025846:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802584a:	fb01 3302 	mla	r3, r1, r2, r3
 802584e:	fb08 f303 	mul.w	r3, r8, r3
 8025852:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8025a64 <_tzset_unlocked_r+0x2e4>
 8025856:	62ab      	str	r3, [r5, #40]	; 0x28
 8025858:	4b83      	ldr	r3, [pc, #524]	; (8025a68 <_tzset_unlocked_r+0x2e8>)
 802585a:	f8c8 3000 	str.w	r3, [r8]
 802585e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025860:	4982      	ldr	r1, [pc, #520]	; (8025a6c <_tzset_unlocked_r+0x2ec>)
 8025862:	441f      	add	r7, r3
 8025864:	464a      	mov	r2, r9
 8025866:	4633      	mov	r3, r6
 8025868:	4638      	mov	r0, r7
 802586a:	f7fe ffcf 	bl	802480c <siscanf>
 802586e:	42a0      	cmp	r0, r4
 8025870:	dc18      	bgt.n	80258a4 <_tzset_unlocked_r+0x124>
 8025872:	f8d8 3000 	ldr.w	r3, [r8]
 8025876:	f8c8 3004 	str.w	r3, [r8, #4]
 802587a:	4b77      	ldr	r3, [pc, #476]	; (8025a58 <_tzset_unlocked_r+0x2d8>)
 802587c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802587e:	601a      	str	r2, [r3, #0]
 8025880:	4b77      	ldr	r3, [pc, #476]	; (8025a60 <_tzset_unlocked_r+0x2e0>)
 8025882:	601c      	str	r4, [r3, #0]
 8025884:	e796      	b.n	80257b4 <_tzset_unlocked_r+0x34>
 8025886:	f7da fcdb 	bl	8000240 <strcmp>
 802588a:	2800      	cmp	r0, #0
 802588c:	d198      	bne.n	80257c0 <_tzset_unlocked_r+0x40>
 802588e:	e791      	b.n	80257b4 <_tzset_unlocked_r+0x34>
 8025890:	4621      	mov	r1, r4
 8025892:	f7ff f842 	bl	802491a <strcpy>
 8025896:	e7a0      	b.n	80257da <_tzset_unlocked_r+0x5a>
 8025898:	2b2b      	cmp	r3, #43	; 0x2b
 802589a:	bf08      	it	eq
 802589c:	3701      	addeq	r7, #1
 802589e:	f04f 0801 	mov.w	r8, #1
 80258a2:	e7af      	b.n	8025804 <_tzset_unlocked_r+0x84>
 80258a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80258a6:	f8c8 9004 	str.w	r9, [r8, #4]
 80258aa:	18fc      	adds	r4, r7, r3
 80258ac:	5cfb      	ldrb	r3, [r7, r3]
 80258ae:	2b2d      	cmp	r3, #45	; 0x2d
 80258b0:	f040 808b 	bne.w	80259ca <_tzset_unlocked_r+0x24a>
 80258b4:	3401      	adds	r4, #1
 80258b6:	f04f 37ff 	mov.w	r7, #4294967295
 80258ba:	2300      	movs	r3, #0
 80258bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80258c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80258c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80258c8:	930a      	str	r3, [sp, #40]	; 0x28
 80258ca:	e9cd a602 	strd	sl, r6, [sp, #8]
 80258ce:	e9cd b600 	strd	fp, r6, [sp]
 80258d2:	4967      	ldr	r1, [pc, #412]	; (8025a70 <_tzset_unlocked_r+0x2f0>)
 80258d4:	4633      	mov	r3, r6
 80258d6:	aa07      	add	r2, sp, #28
 80258d8:	4620      	mov	r0, r4
 80258da:	f7fe ff97 	bl	802480c <siscanf>
 80258de:	2800      	cmp	r0, #0
 80258e0:	dc78      	bgt.n	80259d4 <_tzset_unlocked_r+0x254>
 80258e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80258e4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80258e8:	652b      	str	r3, [r5, #80]	; 0x50
 80258ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80258ec:	462f      	mov	r7, r5
 80258ee:	441c      	add	r4, r3
 80258f0:	f04f 0900 	mov.w	r9, #0
 80258f4:	7823      	ldrb	r3, [r4, #0]
 80258f6:	2b2c      	cmp	r3, #44	; 0x2c
 80258f8:	bf08      	it	eq
 80258fa:	3401      	addeq	r4, #1
 80258fc:	f894 8000 	ldrb.w	r8, [r4]
 8025900:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8025904:	d178      	bne.n	80259f8 <_tzset_unlocked_r+0x278>
 8025906:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802590a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802590e:	ab09      	add	r3, sp, #36	; 0x24
 8025910:	9300      	str	r3, [sp, #0]
 8025912:	4958      	ldr	r1, [pc, #352]	; (8025a74 <_tzset_unlocked_r+0x2f4>)
 8025914:	9603      	str	r6, [sp, #12]
 8025916:	4633      	mov	r3, r6
 8025918:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802591c:	4620      	mov	r0, r4
 802591e:	f7fe ff75 	bl	802480c <siscanf>
 8025922:	2803      	cmp	r0, #3
 8025924:	f47f af46 	bne.w	80257b4 <_tzset_unlocked_r+0x34>
 8025928:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 802592c:	1e4b      	subs	r3, r1, #1
 802592e:	2b0b      	cmp	r3, #11
 8025930:	f63f af40 	bhi.w	80257b4 <_tzset_unlocked_r+0x34>
 8025934:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8025938:	1e53      	subs	r3, r2, #1
 802593a:	2b04      	cmp	r3, #4
 802593c:	f63f af3a 	bhi.w	80257b4 <_tzset_unlocked_r+0x34>
 8025940:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8025944:	2b06      	cmp	r3, #6
 8025946:	f63f af35 	bhi.w	80257b4 <_tzset_unlocked_r+0x34>
 802594a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802594e:	f887 8008 	strb.w	r8, [r7, #8]
 8025952:	617b      	str	r3, [r7, #20]
 8025954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025956:	eb04 0803 	add.w	r8, r4, r3
 802595a:	2302      	movs	r3, #2
 802595c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8025960:	2300      	movs	r3, #0
 8025962:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025966:	f8ad 3020 	strh.w	r3, [sp, #32]
 802596a:	930a      	str	r3, [sp, #40]	; 0x28
 802596c:	f898 3000 	ldrb.w	r3, [r8]
 8025970:	2b2f      	cmp	r3, #47	; 0x2f
 8025972:	d109      	bne.n	8025988 <_tzset_unlocked_r+0x208>
 8025974:	e9cd a602 	strd	sl, r6, [sp, #8]
 8025978:	e9cd b600 	strd	fp, r6, [sp]
 802597c:	493e      	ldr	r1, [pc, #248]	; (8025a78 <_tzset_unlocked_r+0x2f8>)
 802597e:	4633      	mov	r3, r6
 8025980:	aa07      	add	r2, sp, #28
 8025982:	4640      	mov	r0, r8
 8025984:	f7fe ff42 	bl	802480c <siscanf>
 8025988:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802598c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8025990:	213c      	movs	r1, #60	; 0x3c
 8025992:	fb01 3302 	mla	r3, r1, r2, r3
 8025996:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802599a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802599e:	fb01 3302 	mla	r3, r1, r2, r3
 80259a2:	61bb      	str	r3, [r7, #24]
 80259a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80259a6:	3728      	adds	r7, #40	; 0x28
 80259a8:	4444      	add	r4, r8
 80259aa:	f1b9 0f00 	cmp.w	r9, #0
 80259ae:	d020      	beq.n	80259f2 <_tzset_unlocked_r+0x272>
 80259b0:	6868      	ldr	r0, [r5, #4]
 80259b2:	f7ff fe29 	bl	8025608 <__tzcalc_limits>
 80259b6:	4b28      	ldr	r3, [pc, #160]	; (8025a58 <_tzset_unlocked_r+0x2d8>)
 80259b8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80259ba:	601a      	str	r2, [r3, #0]
 80259bc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80259be:	1a9b      	subs	r3, r3, r2
 80259c0:	4a27      	ldr	r2, [pc, #156]	; (8025a60 <_tzset_unlocked_r+0x2e0>)
 80259c2:	bf18      	it	ne
 80259c4:	2301      	movne	r3, #1
 80259c6:	6013      	str	r3, [r2, #0]
 80259c8:	e6f4      	b.n	80257b4 <_tzset_unlocked_r+0x34>
 80259ca:	2b2b      	cmp	r3, #43	; 0x2b
 80259cc:	bf08      	it	eq
 80259ce:	3401      	addeq	r4, #1
 80259d0:	2701      	movs	r7, #1
 80259d2:	e772      	b.n	80258ba <_tzset_unlocked_r+0x13a>
 80259d4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80259d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80259dc:	213c      	movs	r1, #60	; 0x3c
 80259de:	fb01 3302 	mla	r3, r1, r2, r3
 80259e2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80259e6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80259ea:	fb01 3302 	mla	r3, r1, r2, r3
 80259ee:	437b      	muls	r3, r7
 80259f0:	e77a      	b.n	80258e8 <_tzset_unlocked_r+0x168>
 80259f2:	f04f 0901 	mov.w	r9, #1
 80259f6:	e77d      	b.n	80258f4 <_tzset_unlocked_r+0x174>
 80259f8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80259fc:	bf06      	itte	eq
 80259fe:	3401      	addeq	r4, #1
 8025a00:	4643      	moveq	r3, r8
 8025a02:	2344      	movne	r3, #68	; 0x44
 8025a04:	220a      	movs	r2, #10
 8025a06:	a90b      	add	r1, sp, #44	; 0x2c
 8025a08:	4620      	mov	r0, r4
 8025a0a:	9305      	str	r3, [sp, #20]
 8025a0c:	f7ff fdf2 	bl	80255f4 <strtoul>
 8025a10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8025a14:	9b05      	ldr	r3, [sp, #20]
 8025a16:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8025a1a:	45a0      	cmp	r8, r4
 8025a1c:	d114      	bne.n	8025a48 <_tzset_unlocked_r+0x2c8>
 8025a1e:	234d      	movs	r3, #77	; 0x4d
 8025a20:	f1b9 0f00 	cmp.w	r9, #0
 8025a24:	d107      	bne.n	8025a36 <_tzset_unlocked_r+0x2b6>
 8025a26:	722b      	strb	r3, [r5, #8]
 8025a28:	2103      	movs	r1, #3
 8025a2a:	2302      	movs	r3, #2
 8025a2c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8025a30:	f8c5 9014 	str.w	r9, [r5, #20]
 8025a34:	e791      	b.n	802595a <_tzset_unlocked_r+0x1da>
 8025a36:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8025a3a:	220b      	movs	r2, #11
 8025a3c:	2301      	movs	r3, #1
 8025a3e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8025a42:	2300      	movs	r3, #0
 8025a44:	63eb      	str	r3, [r5, #60]	; 0x3c
 8025a46:	e788      	b.n	802595a <_tzset_unlocked_r+0x1da>
 8025a48:	b280      	uxth	r0, r0
 8025a4a:	723b      	strb	r3, [r7, #8]
 8025a4c:	6178      	str	r0, [r7, #20]
 8025a4e:	e784      	b.n	802595a <_tzset_unlocked_r+0x1da>
 8025a50:	080e2798 	.word	0x080e2798
 8025a54:	2002f918 	.word	0x2002f918
 8025a58:	2002f920 	.word	0x2002f920
 8025a5c:	080e279b 	.word	0x080e279b
 8025a60:	2002f91c 	.word	0x2002f91c
 8025a64:	200004ec 	.word	0x200004ec
 8025a68:	2002f90b 	.word	0x2002f90b
 8025a6c:	080e279f 	.word	0x080e279f
 8025a70:	080e27c2 	.word	0x080e27c2
 8025a74:	080e27ae 	.word	0x080e27ae
 8025a78:	080e27c1 	.word	0x080e27c1
 8025a7c:	2002f900 	.word	0x2002f900

08025a80 <__swbuf_r>:
 8025a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a82:	460e      	mov	r6, r1
 8025a84:	4614      	mov	r4, r2
 8025a86:	4605      	mov	r5, r0
 8025a88:	b118      	cbz	r0, 8025a92 <__swbuf_r+0x12>
 8025a8a:	6983      	ldr	r3, [r0, #24]
 8025a8c:	b90b      	cbnz	r3, 8025a92 <__swbuf_r+0x12>
 8025a8e:	f001 f871 	bl	8026b74 <__sinit>
 8025a92:	4b21      	ldr	r3, [pc, #132]	; (8025b18 <__swbuf_r+0x98>)
 8025a94:	429c      	cmp	r4, r3
 8025a96:	d12b      	bne.n	8025af0 <__swbuf_r+0x70>
 8025a98:	686c      	ldr	r4, [r5, #4]
 8025a9a:	69a3      	ldr	r3, [r4, #24]
 8025a9c:	60a3      	str	r3, [r4, #8]
 8025a9e:	89a3      	ldrh	r3, [r4, #12]
 8025aa0:	071a      	lsls	r2, r3, #28
 8025aa2:	d52f      	bpl.n	8025b04 <__swbuf_r+0x84>
 8025aa4:	6923      	ldr	r3, [r4, #16]
 8025aa6:	b36b      	cbz	r3, 8025b04 <__swbuf_r+0x84>
 8025aa8:	6923      	ldr	r3, [r4, #16]
 8025aaa:	6820      	ldr	r0, [r4, #0]
 8025aac:	1ac0      	subs	r0, r0, r3
 8025aae:	6963      	ldr	r3, [r4, #20]
 8025ab0:	b2f6      	uxtb	r6, r6
 8025ab2:	4283      	cmp	r3, r0
 8025ab4:	4637      	mov	r7, r6
 8025ab6:	dc04      	bgt.n	8025ac2 <__swbuf_r+0x42>
 8025ab8:	4621      	mov	r1, r4
 8025aba:	4628      	mov	r0, r5
 8025abc:	f000 ffc6 	bl	8026a4c <_fflush_r>
 8025ac0:	bb30      	cbnz	r0, 8025b10 <__swbuf_r+0x90>
 8025ac2:	68a3      	ldr	r3, [r4, #8]
 8025ac4:	3b01      	subs	r3, #1
 8025ac6:	60a3      	str	r3, [r4, #8]
 8025ac8:	6823      	ldr	r3, [r4, #0]
 8025aca:	1c5a      	adds	r2, r3, #1
 8025acc:	6022      	str	r2, [r4, #0]
 8025ace:	701e      	strb	r6, [r3, #0]
 8025ad0:	6963      	ldr	r3, [r4, #20]
 8025ad2:	3001      	adds	r0, #1
 8025ad4:	4283      	cmp	r3, r0
 8025ad6:	d004      	beq.n	8025ae2 <__swbuf_r+0x62>
 8025ad8:	89a3      	ldrh	r3, [r4, #12]
 8025ada:	07db      	lsls	r3, r3, #31
 8025adc:	d506      	bpl.n	8025aec <__swbuf_r+0x6c>
 8025ade:	2e0a      	cmp	r6, #10
 8025ae0:	d104      	bne.n	8025aec <__swbuf_r+0x6c>
 8025ae2:	4621      	mov	r1, r4
 8025ae4:	4628      	mov	r0, r5
 8025ae6:	f000 ffb1 	bl	8026a4c <_fflush_r>
 8025aea:	b988      	cbnz	r0, 8025b10 <__swbuf_r+0x90>
 8025aec:	4638      	mov	r0, r7
 8025aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025af0:	4b0a      	ldr	r3, [pc, #40]	; (8025b1c <__swbuf_r+0x9c>)
 8025af2:	429c      	cmp	r4, r3
 8025af4:	d101      	bne.n	8025afa <__swbuf_r+0x7a>
 8025af6:	68ac      	ldr	r4, [r5, #8]
 8025af8:	e7cf      	b.n	8025a9a <__swbuf_r+0x1a>
 8025afa:	4b09      	ldr	r3, [pc, #36]	; (8025b20 <__swbuf_r+0xa0>)
 8025afc:	429c      	cmp	r4, r3
 8025afe:	bf08      	it	eq
 8025b00:	68ec      	ldreq	r4, [r5, #12]
 8025b02:	e7ca      	b.n	8025a9a <__swbuf_r+0x1a>
 8025b04:	4621      	mov	r1, r4
 8025b06:	4628      	mov	r0, r5
 8025b08:	f000 f81e 	bl	8025b48 <__swsetup_r>
 8025b0c:	2800      	cmp	r0, #0
 8025b0e:	d0cb      	beq.n	8025aa8 <__swbuf_r+0x28>
 8025b10:	f04f 37ff 	mov.w	r7, #4294967295
 8025b14:	e7ea      	b.n	8025aec <__swbuf_r+0x6c>
 8025b16:	bf00      	nop
 8025b18:	080e2960 	.word	0x080e2960
 8025b1c:	080e2980 	.word	0x080e2980
 8025b20:	080e2940 	.word	0x080e2940

08025b24 <_write_r>:
 8025b24:	b538      	push	{r3, r4, r5, lr}
 8025b26:	4d07      	ldr	r5, [pc, #28]	; (8025b44 <_write_r+0x20>)
 8025b28:	4604      	mov	r4, r0
 8025b2a:	4608      	mov	r0, r1
 8025b2c:	4611      	mov	r1, r2
 8025b2e:	2200      	movs	r2, #0
 8025b30:	602a      	str	r2, [r5, #0]
 8025b32:	461a      	mov	r2, r3
 8025b34:	f7dc fb82 	bl	800223c <_write>
 8025b38:	1c43      	adds	r3, r0, #1
 8025b3a:	d102      	bne.n	8025b42 <_write_r+0x1e>
 8025b3c:	682b      	ldr	r3, [r5, #0]
 8025b3e:	b103      	cbz	r3, 8025b42 <_write_r+0x1e>
 8025b40:	6023      	str	r3, [r4, #0]
 8025b42:	bd38      	pop	{r3, r4, r5, pc}
 8025b44:	2002e014 	.word	0x2002e014

08025b48 <__swsetup_r>:
 8025b48:	4b32      	ldr	r3, [pc, #200]	; (8025c14 <__swsetup_r+0xcc>)
 8025b4a:	b570      	push	{r4, r5, r6, lr}
 8025b4c:	681d      	ldr	r5, [r3, #0]
 8025b4e:	4606      	mov	r6, r0
 8025b50:	460c      	mov	r4, r1
 8025b52:	b125      	cbz	r5, 8025b5e <__swsetup_r+0x16>
 8025b54:	69ab      	ldr	r3, [r5, #24]
 8025b56:	b913      	cbnz	r3, 8025b5e <__swsetup_r+0x16>
 8025b58:	4628      	mov	r0, r5
 8025b5a:	f001 f80b 	bl	8026b74 <__sinit>
 8025b5e:	4b2e      	ldr	r3, [pc, #184]	; (8025c18 <__swsetup_r+0xd0>)
 8025b60:	429c      	cmp	r4, r3
 8025b62:	d10f      	bne.n	8025b84 <__swsetup_r+0x3c>
 8025b64:	686c      	ldr	r4, [r5, #4]
 8025b66:	89a3      	ldrh	r3, [r4, #12]
 8025b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025b6c:	0719      	lsls	r1, r3, #28
 8025b6e:	d42c      	bmi.n	8025bca <__swsetup_r+0x82>
 8025b70:	06dd      	lsls	r5, r3, #27
 8025b72:	d411      	bmi.n	8025b98 <__swsetup_r+0x50>
 8025b74:	2309      	movs	r3, #9
 8025b76:	6033      	str	r3, [r6, #0]
 8025b78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025b7c:	81a3      	strh	r3, [r4, #12]
 8025b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8025b82:	e03e      	b.n	8025c02 <__swsetup_r+0xba>
 8025b84:	4b25      	ldr	r3, [pc, #148]	; (8025c1c <__swsetup_r+0xd4>)
 8025b86:	429c      	cmp	r4, r3
 8025b88:	d101      	bne.n	8025b8e <__swsetup_r+0x46>
 8025b8a:	68ac      	ldr	r4, [r5, #8]
 8025b8c:	e7eb      	b.n	8025b66 <__swsetup_r+0x1e>
 8025b8e:	4b24      	ldr	r3, [pc, #144]	; (8025c20 <__swsetup_r+0xd8>)
 8025b90:	429c      	cmp	r4, r3
 8025b92:	bf08      	it	eq
 8025b94:	68ec      	ldreq	r4, [r5, #12]
 8025b96:	e7e6      	b.n	8025b66 <__swsetup_r+0x1e>
 8025b98:	0758      	lsls	r0, r3, #29
 8025b9a:	d512      	bpl.n	8025bc2 <__swsetup_r+0x7a>
 8025b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025b9e:	b141      	cbz	r1, 8025bb2 <__swsetup_r+0x6a>
 8025ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025ba4:	4299      	cmp	r1, r3
 8025ba6:	d002      	beq.n	8025bae <__swsetup_r+0x66>
 8025ba8:	4630      	mov	r0, r6
 8025baa:	f7fd ff65 	bl	8023a78 <_free_r>
 8025bae:	2300      	movs	r3, #0
 8025bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8025bb2:	89a3      	ldrh	r3, [r4, #12]
 8025bb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025bb8:	81a3      	strh	r3, [r4, #12]
 8025bba:	2300      	movs	r3, #0
 8025bbc:	6063      	str	r3, [r4, #4]
 8025bbe:	6923      	ldr	r3, [r4, #16]
 8025bc0:	6023      	str	r3, [r4, #0]
 8025bc2:	89a3      	ldrh	r3, [r4, #12]
 8025bc4:	f043 0308 	orr.w	r3, r3, #8
 8025bc8:	81a3      	strh	r3, [r4, #12]
 8025bca:	6923      	ldr	r3, [r4, #16]
 8025bcc:	b94b      	cbnz	r3, 8025be2 <__swsetup_r+0x9a>
 8025bce:	89a3      	ldrh	r3, [r4, #12]
 8025bd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025bd8:	d003      	beq.n	8025be2 <__swsetup_r+0x9a>
 8025bda:	4621      	mov	r1, r4
 8025bdc:	4630      	mov	r0, r6
 8025bde:	f001 f9ad 	bl	8026f3c <__smakebuf_r>
 8025be2:	89a0      	ldrh	r0, [r4, #12]
 8025be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025be8:	f010 0301 	ands.w	r3, r0, #1
 8025bec:	d00a      	beq.n	8025c04 <__swsetup_r+0xbc>
 8025bee:	2300      	movs	r3, #0
 8025bf0:	60a3      	str	r3, [r4, #8]
 8025bf2:	6963      	ldr	r3, [r4, #20]
 8025bf4:	425b      	negs	r3, r3
 8025bf6:	61a3      	str	r3, [r4, #24]
 8025bf8:	6923      	ldr	r3, [r4, #16]
 8025bfa:	b943      	cbnz	r3, 8025c0e <__swsetup_r+0xc6>
 8025bfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025c00:	d1ba      	bne.n	8025b78 <__swsetup_r+0x30>
 8025c02:	bd70      	pop	{r4, r5, r6, pc}
 8025c04:	0781      	lsls	r1, r0, #30
 8025c06:	bf58      	it	pl
 8025c08:	6963      	ldrpl	r3, [r4, #20]
 8025c0a:	60a3      	str	r3, [r4, #8]
 8025c0c:	e7f4      	b.n	8025bf8 <__swsetup_r+0xb0>
 8025c0e:	2000      	movs	r0, #0
 8025c10:	e7f7      	b.n	8025c02 <__swsetup_r+0xba>
 8025c12:	bf00      	nop
 8025c14:	20000488 	.word	0x20000488
 8025c18:	080e2960 	.word	0x080e2960
 8025c1c:	080e2980 	.word	0x080e2980
 8025c20:	080e2940 	.word	0x080e2940

08025c24 <abs>:
 8025c24:	2800      	cmp	r0, #0
 8025c26:	bfb8      	it	lt
 8025c28:	4240      	neglt	r0, r0
 8025c2a:	4770      	bx	lr

08025c2c <asctime>:
 8025c2c:	4b0d      	ldr	r3, [pc, #52]	; (8025c64 <asctime+0x38>)
 8025c2e:	b570      	push	{r4, r5, r6, lr}
 8025c30:	681d      	ldr	r5, [r3, #0]
 8025c32:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8025c34:	4604      	mov	r4, r0
 8025c36:	b976      	cbnz	r6, 8025c56 <asctime+0x2a>
 8025c38:	201a      	movs	r0, #26
 8025c3a:	f7fd fc5b 	bl	80234f4 <malloc>
 8025c3e:	4602      	mov	r2, r0
 8025c40:	6428      	str	r0, [r5, #64]	; 0x40
 8025c42:	b920      	cbnz	r0, 8025c4e <asctime+0x22>
 8025c44:	4b08      	ldr	r3, [pc, #32]	; (8025c68 <asctime+0x3c>)
 8025c46:	4809      	ldr	r0, [pc, #36]	; (8025c6c <asctime+0x40>)
 8025c48:	2137      	movs	r1, #55	; 0x37
 8025c4a:	f000 f837 	bl	8025cbc <__assert_func>
 8025c4e:	221a      	movs	r2, #26
 8025c50:	4631      	mov	r1, r6
 8025c52:	f7fd fc97 	bl	8023584 <memset>
 8025c56:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8025c58:	4620      	mov	r0, r4
 8025c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025c5e:	f000 b807 	b.w	8025c70 <asctime_r>
 8025c62:	bf00      	nop
 8025c64:	20000488 	.word	0x20000488
 8025c68:	080e2354 	.word	0x080e2354
 8025c6c:	080e27d4 	.word	0x080e27d4

08025c70 <asctime_r>:
 8025c70:	b510      	push	{r4, lr}
 8025c72:	460c      	mov	r4, r1
 8025c74:	6941      	ldr	r1, [r0, #20]
 8025c76:	6903      	ldr	r3, [r0, #16]
 8025c78:	6982      	ldr	r2, [r0, #24]
 8025c7a:	b086      	sub	sp, #24
 8025c7c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8025c80:	9104      	str	r1, [sp, #16]
 8025c82:	6801      	ldr	r1, [r0, #0]
 8025c84:	9103      	str	r1, [sp, #12]
 8025c86:	6841      	ldr	r1, [r0, #4]
 8025c88:	9102      	str	r1, [sp, #8]
 8025c8a:	6881      	ldr	r1, [r0, #8]
 8025c8c:	9101      	str	r1, [sp, #4]
 8025c8e:	68c1      	ldr	r1, [r0, #12]
 8025c90:	9100      	str	r1, [sp, #0]
 8025c92:	4907      	ldr	r1, [pc, #28]	; (8025cb0 <asctime_r+0x40>)
 8025c94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025c98:	440b      	add	r3, r1
 8025c9a:	4906      	ldr	r1, [pc, #24]	; (8025cb4 <asctime_r+0x44>)
 8025c9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025ca0:	440a      	add	r2, r1
 8025ca2:	4620      	mov	r0, r4
 8025ca4:	4904      	ldr	r1, [pc, #16]	; (8025cb8 <asctime_r+0x48>)
 8025ca6:	f7fe fd91 	bl	80247cc <siprintf>
 8025caa:	4620      	mov	r0, r4
 8025cac:	b006      	add	sp, #24
 8025cae:	bd10      	pop	{r4, pc}
 8025cb0:	080e2865 	.word	0x080e2865
 8025cb4:	080e2850 	.word	0x080e2850
 8025cb8:	080e2830 	.word	0x080e2830

08025cbc <__assert_func>:
 8025cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025cbe:	4614      	mov	r4, r2
 8025cc0:	461a      	mov	r2, r3
 8025cc2:	4b09      	ldr	r3, [pc, #36]	; (8025ce8 <__assert_func+0x2c>)
 8025cc4:	681b      	ldr	r3, [r3, #0]
 8025cc6:	4605      	mov	r5, r0
 8025cc8:	68d8      	ldr	r0, [r3, #12]
 8025cca:	b14c      	cbz	r4, 8025ce0 <__assert_func+0x24>
 8025ccc:	4b07      	ldr	r3, [pc, #28]	; (8025cec <__assert_func+0x30>)
 8025cce:	9100      	str	r1, [sp, #0]
 8025cd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025cd4:	4906      	ldr	r1, [pc, #24]	; (8025cf0 <__assert_func+0x34>)
 8025cd6:	462b      	mov	r3, r5
 8025cd8:	f000 ffca 	bl	8026c70 <fiprintf>
 8025cdc:	f002 fc12 	bl	8028504 <abort>
 8025ce0:	4b04      	ldr	r3, [pc, #16]	; (8025cf4 <__assert_func+0x38>)
 8025ce2:	461c      	mov	r4, r3
 8025ce4:	e7f3      	b.n	8025cce <__assert_func+0x12>
 8025ce6:	bf00      	nop
 8025ce8:	20000488 	.word	0x20000488
 8025cec:	080e2889 	.word	0x080e2889
 8025cf0:	080e2896 	.word	0x080e2896
 8025cf4:	080e284f 	.word	0x080e284f

08025cf8 <_close_r>:
 8025cf8:	b538      	push	{r3, r4, r5, lr}
 8025cfa:	4d06      	ldr	r5, [pc, #24]	; (8025d14 <_close_r+0x1c>)
 8025cfc:	2300      	movs	r3, #0
 8025cfe:	4604      	mov	r4, r0
 8025d00:	4608      	mov	r0, r1
 8025d02:	602b      	str	r3, [r5, #0]
 8025d04:	f7e0 faf4 	bl	80062f0 <_close>
 8025d08:	1c43      	adds	r3, r0, #1
 8025d0a:	d102      	bne.n	8025d12 <_close_r+0x1a>
 8025d0c:	682b      	ldr	r3, [r5, #0]
 8025d0e:	b103      	cbz	r3, 8025d12 <_close_r+0x1a>
 8025d10:	6023      	str	r3, [r4, #0]
 8025d12:	bd38      	pop	{r3, r4, r5, pc}
 8025d14:	2002e014 	.word	0x2002e014

08025d18 <div>:
 8025d18:	2900      	cmp	r1, #0
 8025d1a:	b510      	push	{r4, lr}
 8025d1c:	fb91 f4f2 	sdiv	r4, r1, r2
 8025d20:	fb02 1314 	mls	r3, r2, r4, r1
 8025d24:	db06      	blt.n	8025d34 <div+0x1c>
 8025d26:	2b00      	cmp	r3, #0
 8025d28:	da01      	bge.n	8025d2e <div+0x16>
 8025d2a:	3401      	adds	r4, #1
 8025d2c:	1a9b      	subs	r3, r3, r2
 8025d2e:	e9c0 4300 	strd	r4, r3, [r0]
 8025d32:	bd10      	pop	{r4, pc}
 8025d34:	2b00      	cmp	r3, #0
 8025d36:	bfc4      	itt	gt
 8025d38:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8025d3c:	189b      	addgt	r3, r3, r2
 8025d3e:	e7f6      	b.n	8025d2e <div+0x16>

08025d40 <quorem>:
 8025d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d44:	6903      	ldr	r3, [r0, #16]
 8025d46:	690c      	ldr	r4, [r1, #16]
 8025d48:	42a3      	cmp	r3, r4
 8025d4a:	4607      	mov	r7, r0
 8025d4c:	f2c0 8081 	blt.w	8025e52 <quorem+0x112>
 8025d50:	3c01      	subs	r4, #1
 8025d52:	f101 0814 	add.w	r8, r1, #20
 8025d56:	f100 0514 	add.w	r5, r0, #20
 8025d5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025d5e:	9301      	str	r3, [sp, #4]
 8025d60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025d64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025d68:	3301      	adds	r3, #1
 8025d6a:	429a      	cmp	r2, r3
 8025d6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8025d70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025d74:	fbb2 f6f3 	udiv	r6, r2, r3
 8025d78:	d331      	bcc.n	8025dde <quorem+0x9e>
 8025d7a:	f04f 0e00 	mov.w	lr, #0
 8025d7e:	4640      	mov	r0, r8
 8025d80:	46ac      	mov	ip, r5
 8025d82:	46f2      	mov	sl, lr
 8025d84:	f850 2b04 	ldr.w	r2, [r0], #4
 8025d88:	b293      	uxth	r3, r2
 8025d8a:	fb06 e303 	mla	r3, r6, r3, lr
 8025d8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8025d92:	b29b      	uxth	r3, r3
 8025d94:	ebaa 0303 	sub.w	r3, sl, r3
 8025d98:	f8dc a000 	ldr.w	sl, [ip]
 8025d9c:	0c12      	lsrs	r2, r2, #16
 8025d9e:	fa13 f38a 	uxtah	r3, r3, sl
 8025da2:	fb06 e202 	mla	r2, r6, r2, lr
 8025da6:	9300      	str	r3, [sp, #0]
 8025da8:	9b00      	ldr	r3, [sp, #0]
 8025daa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8025dae:	b292      	uxth	r2, r2
 8025db0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8025db4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025db8:	f8bd 3000 	ldrh.w	r3, [sp]
 8025dbc:	4581      	cmp	r9, r0
 8025dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025dc2:	f84c 3b04 	str.w	r3, [ip], #4
 8025dc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8025dca:	d2db      	bcs.n	8025d84 <quorem+0x44>
 8025dcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8025dd0:	b92b      	cbnz	r3, 8025dde <quorem+0x9e>
 8025dd2:	9b01      	ldr	r3, [sp, #4]
 8025dd4:	3b04      	subs	r3, #4
 8025dd6:	429d      	cmp	r5, r3
 8025dd8:	461a      	mov	r2, r3
 8025dda:	d32e      	bcc.n	8025e3a <quorem+0xfa>
 8025ddc:	613c      	str	r4, [r7, #16]
 8025dde:	4638      	mov	r0, r7
 8025de0:	f001 fb7a 	bl	80274d8 <__mcmp>
 8025de4:	2800      	cmp	r0, #0
 8025de6:	db24      	blt.n	8025e32 <quorem+0xf2>
 8025de8:	3601      	adds	r6, #1
 8025dea:	4628      	mov	r0, r5
 8025dec:	f04f 0c00 	mov.w	ip, #0
 8025df0:	f858 2b04 	ldr.w	r2, [r8], #4
 8025df4:	f8d0 e000 	ldr.w	lr, [r0]
 8025df8:	b293      	uxth	r3, r2
 8025dfa:	ebac 0303 	sub.w	r3, ip, r3
 8025dfe:	0c12      	lsrs	r2, r2, #16
 8025e00:	fa13 f38e 	uxtah	r3, r3, lr
 8025e04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8025e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025e0c:	b29b      	uxth	r3, r3
 8025e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025e12:	45c1      	cmp	r9, r8
 8025e14:	f840 3b04 	str.w	r3, [r0], #4
 8025e18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8025e1c:	d2e8      	bcs.n	8025df0 <quorem+0xb0>
 8025e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025e26:	b922      	cbnz	r2, 8025e32 <quorem+0xf2>
 8025e28:	3b04      	subs	r3, #4
 8025e2a:	429d      	cmp	r5, r3
 8025e2c:	461a      	mov	r2, r3
 8025e2e:	d30a      	bcc.n	8025e46 <quorem+0x106>
 8025e30:	613c      	str	r4, [r7, #16]
 8025e32:	4630      	mov	r0, r6
 8025e34:	b003      	add	sp, #12
 8025e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e3a:	6812      	ldr	r2, [r2, #0]
 8025e3c:	3b04      	subs	r3, #4
 8025e3e:	2a00      	cmp	r2, #0
 8025e40:	d1cc      	bne.n	8025ddc <quorem+0x9c>
 8025e42:	3c01      	subs	r4, #1
 8025e44:	e7c7      	b.n	8025dd6 <quorem+0x96>
 8025e46:	6812      	ldr	r2, [r2, #0]
 8025e48:	3b04      	subs	r3, #4
 8025e4a:	2a00      	cmp	r2, #0
 8025e4c:	d1f0      	bne.n	8025e30 <quorem+0xf0>
 8025e4e:	3c01      	subs	r4, #1
 8025e50:	e7eb      	b.n	8025e2a <quorem+0xea>
 8025e52:	2000      	movs	r0, #0
 8025e54:	e7ee      	b.n	8025e34 <quorem+0xf4>
	...

08025e58 <_dtoa_r>:
 8025e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e5c:	ed2d 8b02 	vpush	{d8}
 8025e60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8025e62:	b091      	sub	sp, #68	; 0x44
 8025e64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025e68:	ec59 8b10 	vmov	r8, r9, d0
 8025e6c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8025e6e:	9106      	str	r1, [sp, #24]
 8025e70:	4606      	mov	r6, r0
 8025e72:	9208      	str	r2, [sp, #32]
 8025e74:	930c      	str	r3, [sp, #48]	; 0x30
 8025e76:	b975      	cbnz	r5, 8025e96 <_dtoa_r+0x3e>
 8025e78:	2010      	movs	r0, #16
 8025e7a:	f7fd fb3b 	bl	80234f4 <malloc>
 8025e7e:	4602      	mov	r2, r0
 8025e80:	6270      	str	r0, [r6, #36]	; 0x24
 8025e82:	b920      	cbnz	r0, 8025e8e <_dtoa_r+0x36>
 8025e84:	4baa      	ldr	r3, [pc, #680]	; (8026130 <_dtoa_r+0x2d8>)
 8025e86:	21ea      	movs	r1, #234	; 0xea
 8025e88:	48aa      	ldr	r0, [pc, #680]	; (8026134 <_dtoa_r+0x2dc>)
 8025e8a:	f7ff ff17 	bl	8025cbc <__assert_func>
 8025e8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8025e92:	6005      	str	r5, [r0, #0]
 8025e94:	60c5      	str	r5, [r0, #12]
 8025e96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8025e98:	6819      	ldr	r1, [r3, #0]
 8025e9a:	b151      	cbz	r1, 8025eb2 <_dtoa_r+0x5a>
 8025e9c:	685a      	ldr	r2, [r3, #4]
 8025e9e:	604a      	str	r2, [r1, #4]
 8025ea0:	2301      	movs	r3, #1
 8025ea2:	4093      	lsls	r3, r2
 8025ea4:	608b      	str	r3, [r1, #8]
 8025ea6:	4630      	mov	r0, r6
 8025ea8:	f001 f8d4 	bl	8027054 <_Bfree>
 8025eac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8025eae:	2200      	movs	r2, #0
 8025eb0:	601a      	str	r2, [r3, #0]
 8025eb2:	f1b9 0300 	subs.w	r3, r9, #0
 8025eb6:	bfbb      	ittet	lt
 8025eb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8025ebc:	9303      	strlt	r3, [sp, #12]
 8025ebe:	2300      	movge	r3, #0
 8025ec0:	2201      	movlt	r2, #1
 8025ec2:	bfac      	ite	ge
 8025ec4:	6023      	strge	r3, [r4, #0]
 8025ec6:	6022      	strlt	r2, [r4, #0]
 8025ec8:	4b9b      	ldr	r3, [pc, #620]	; (8026138 <_dtoa_r+0x2e0>)
 8025eca:	9c03      	ldr	r4, [sp, #12]
 8025ecc:	43a3      	bics	r3, r4
 8025ece:	d11c      	bne.n	8025f0a <_dtoa_r+0xb2>
 8025ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025ed2:	f242 730f 	movw	r3, #9999	; 0x270f
 8025ed6:	6013      	str	r3, [r2, #0]
 8025ed8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8025edc:	ea53 0308 	orrs.w	r3, r3, r8
 8025ee0:	f000 84fd 	beq.w	80268de <_dtoa_r+0xa86>
 8025ee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025ee6:	b963      	cbnz	r3, 8025f02 <_dtoa_r+0xaa>
 8025ee8:	4b94      	ldr	r3, [pc, #592]	; (802613c <_dtoa_r+0x2e4>)
 8025eea:	e01f      	b.n	8025f2c <_dtoa_r+0xd4>
 8025eec:	4b94      	ldr	r3, [pc, #592]	; (8026140 <_dtoa_r+0x2e8>)
 8025eee:	9301      	str	r3, [sp, #4]
 8025ef0:	3308      	adds	r3, #8
 8025ef2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8025ef4:	6013      	str	r3, [r2, #0]
 8025ef6:	9801      	ldr	r0, [sp, #4]
 8025ef8:	b011      	add	sp, #68	; 0x44
 8025efa:	ecbd 8b02 	vpop	{d8}
 8025efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f02:	4b8e      	ldr	r3, [pc, #568]	; (802613c <_dtoa_r+0x2e4>)
 8025f04:	9301      	str	r3, [sp, #4]
 8025f06:	3303      	adds	r3, #3
 8025f08:	e7f3      	b.n	8025ef2 <_dtoa_r+0x9a>
 8025f0a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8025f0e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f16:	d10b      	bne.n	8025f30 <_dtoa_r+0xd8>
 8025f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025f1a:	2301      	movs	r3, #1
 8025f1c:	6013      	str	r3, [r2, #0]
 8025f1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025f20:	2b00      	cmp	r3, #0
 8025f22:	f000 84d9 	beq.w	80268d8 <_dtoa_r+0xa80>
 8025f26:	4887      	ldr	r0, [pc, #540]	; (8026144 <_dtoa_r+0x2ec>)
 8025f28:	6018      	str	r0, [r3, #0]
 8025f2a:	1e43      	subs	r3, r0, #1
 8025f2c:	9301      	str	r3, [sp, #4]
 8025f2e:	e7e2      	b.n	8025ef6 <_dtoa_r+0x9e>
 8025f30:	a90f      	add	r1, sp, #60	; 0x3c
 8025f32:	aa0e      	add	r2, sp, #56	; 0x38
 8025f34:	4630      	mov	r0, r6
 8025f36:	eeb0 0b48 	vmov.f64	d0, d8
 8025f3a:	f001 fb73 	bl	8027624 <__d2b>
 8025f3e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8025f42:	4605      	mov	r5, r0
 8025f44:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025f46:	2900      	cmp	r1, #0
 8025f48:	d046      	beq.n	8025fd8 <_dtoa_r+0x180>
 8025f4a:	ee18 4a90 	vmov	r4, s17
 8025f4e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8025f52:	ec53 2b18 	vmov	r2, r3, d8
 8025f56:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8025f5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8025f5e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8025f62:	2400      	movs	r4, #0
 8025f64:	ec43 2b16 	vmov	d6, r2, r3
 8025f68:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8025f6c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026118 <_dtoa_r+0x2c0>
 8025f70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8025f74:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8026120 <_dtoa_r+0x2c8>
 8025f78:	eea7 6b05 	vfma.f64	d6, d7, d5
 8025f7c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026128 <_dtoa_r+0x2d0>
 8025f80:	ee07 1a90 	vmov	s15, r1
 8025f84:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8025f88:	eeb0 7b46 	vmov.f64	d7, d6
 8025f8c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8025f90:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8025f94:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8025f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f9c:	ee16 ba90 	vmov	fp, s13
 8025fa0:	940a      	str	r4, [sp, #40]	; 0x28
 8025fa2:	d508      	bpl.n	8025fb6 <_dtoa_r+0x15e>
 8025fa4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8025fa8:	eeb4 6b47 	vcmp.f64	d6, d7
 8025fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025fb0:	bf18      	it	ne
 8025fb2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8025fb6:	f1bb 0f16 	cmp.w	fp, #22
 8025fba:	d82f      	bhi.n	802601c <_dtoa_r+0x1c4>
 8025fbc:	4b62      	ldr	r3, [pc, #392]	; (8026148 <_dtoa_r+0x2f0>)
 8025fbe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8025fc2:	ed93 7b00 	vldr	d7, [r3]
 8025fc6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8025fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025fce:	d501      	bpl.n	8025fd4 <_dtoa_r+0x17c>
 8025fd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025fd4:	2300      	movs	r3, #0
 8025fd6:	e022      	b.n	802601e <_dtoa_r+0x1c6>
 8025fd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025fda:	4401      	add	r1, r0
 8025fdc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8025fe0:	2b20      	cmp	r3, #32
 8025fe2:	bfc1      	itttt	gt
 8025fe4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8025fe8:	fa04 f303 	lslgt.w	r3, r4, r3
 8025fec:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8025ff0:	fa28 f804 	lsrgt.w	r8, r8, r4
 8025ff4:	bfd6      	itet	le
 8025ff6:	f1c3 0320 	rsble	r3, r3, #32
 8025ffa:	ea43 0808 	orrgt.w	r8, r3, r8
 8025ffe:	fa08 f803 	lslle.w	r8, r8, r3
 8026002:	ee07 8a90 	vmov	s15, r8
 8026006:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802600a:	3901      	subs	r1, #1
 802600c:	ee17 4a90 	vmov	r4, s15
 8026010:	ec53 2b17 	vmov	r2, r3, d7
 8026014:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8026018:	2401      	movs	r4, #1
 802601a:	e7a3      	b.n	8025f64 <_dtoa_r+0x10c>
 802601c:	2301      	movs	r3, #1
 802601e:	930b      	str	r3, [sp, #44]	; 0x2c
 8026020:	1a43      	subs	r3, r0, r1
 8026022:	1e5a      	subs	r2, r3, #1
 8026024:	bf45      	ittet	mi
 8026026:	f1c3 0301 	rsbmi	r3, r3, #1
 802602a:	9304      	strmi	r3, [sp, #16]
 802602c:	2300      	movpl	r3, #0
 802602e:	2300      	movmi	r3, #0
 8026030:	9205      	str	r2, [sp, #20]
 8026032:	bf54      	ite	pl
 8026034:	9304      	strpl	r3, [sp, #16]
 8026036:	9305      	strmi	r3, [sp, #20]
 8026038:	f1bb 0f00 	cmp.w	fp, #0
 802603c:	db18      	blt.n	8026070 <_dtoa_r+0x218>
 802603e:	9b05      	ldr	r3, [sp, #20]
 8026040:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8026044:	445b      	add	r3, fp
 8026046:	9305      	str	r3, [sp, #20]
 8026048:	2300      	movs	r3, #0
 802604a:	9a06      	ldr	r2, [sp, #24]
 802604c:	2a09      	cmp	r2, #9
 802604e:	d849      	bhi.n	80260e4 <_dtoa_r+0x28c>
 8026050:	2a05      	cmp	r2, #5
 8026052:	bfc4      	itt	gt
 8026054:	3a04      	subgt	r2, #4
 8026056:	9206      	strgt	r2, [sp, #24]
 8026058:	9a06      	ldr	r2, [sp, #24]
 802605a:	f1a2 0202 	sub.w	r2, r2, #2
 802605e:	bfcc      	ite	gt
 8026060:	2400      	movgt	r4, #0
 8026062:	2401      	movle	r4, #1
 8026064:	2a03      	cmp	r2, #3
 8026066:	d848      	bhi.n	80260fa <_dtoa_r+0x2a2>
 8026068:	e8df f002 	tbb	[pc, r2]
 802606c:	3a2c2e0b 	.word	0x3a2c2e0b
 8026070:	9b04      	ldr	r3, [sp, #16]
 8026072:	2200      	movs	r2, #0
 8026074:	eba3 030b 	sub.w	r3, r3, fp
 8026078:	9304      	str	r3, [sp, #16]
 802607a:	9209      	str	r2, [sp, #36]	; 0x24
 802607c:	f1cb 0300 	rsb	r3, fp, #0
 8026080:	e7e3      	b.n	802604a <_dtoa_r+0x1f2>
 8026082:	2200      	movs	r2, #0
 8026084:	9207      	str	r2, [sp, #28]
 8026086:	9a08      	ldr	r2, [sp, #32]
 8026088:	2a00      	cmp	r2, #0
 802608a:	dc39      	bgt.n	8026100 <_dtoa_r+0x2a8>
 802608c:	f04f 0a01 	mov.w	sl, #1
 8026090:	46d1      	mov	r9, sl
 8026092:	4652      	mov	r2, sl
 8026094:	f8cd a020 	str.w	sl, [sp, #32]
 8026098:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802609a:	2100      	movs	r1, #0
 802609c:	6079      	str	r1, [r7, #4]
 802609e:	2004      	movs	r0, #4
 80260a0:	f100 0c14 	add.w	ip, r0, #20
 80260a4:	4594      	cmp	ip, r2
 80260a6:	6879      	ldr	r1, [r7, #4]
 80260a8:	d92f      	bls.n	802610a <_dtoa_r+0x2b2>
 80260aa:	4630      	mov	r0, r6
 80260ac:	930d      	str	r3, [sp, #52]	; 0x34
 80260ae:	f000 ff91 	bl	8026fd4 <_Balloc>
 80260b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80260b4:	9001      	str	r0, [sp, #4]
 80260b6:	4602      	mov	r2, r0
 80260b8:	2800      	cmp	r0, #0
 80260ba:	d149      	bne.n	8026150 <_dtoa_r+0x2f8>
 80260bc:	4b23      	ldr	r3, [pc, #140]	; (802614c <_dtoa_r+0x2f4>)
 80260be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80260c2:	e6e1      	b.n	8025e88 <_dtoa_r+0x30>
 80260c4:	2201      	movs	r2, #1
 80260c6:	e7dd      	b.n	8026084 <_dtoa_r+0x22c>
 80260c8:	2200      	movs	r2, #0
 80260ca:	9207      	str	r2, [sp, #28]
 80260cc:	9a08      	ldr	r2, [sp, #32]
 80260ce:	eb0b 0a02 	add.w	sl, fp, r2
 80260d2:	f10a 0901 	add.w	r9, sl, #1
 80260d6:	464a      	mov	r2, r9
 80260d8:	2a01      	cmp	r2, #1
 80260da:	bfb8      	it	lt
 80260dc:	2201      	movlt	r2, #1
 80260de:	e7db      	b.n	8026098 <_dtoa_r+0x240>
 80260e0:	2201      	movs	r2, #1
 80260e2:	e7f2      	b.n	80260ca <_dtoa_r+0x272>
 80260e4:	2401      	movs	r4, #1
 80260e6:	2200      	movs	r2, #0
 80260e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80260ec:	f04f 3aff 	mov.w	sl, #4294967295
 80260f0:	2100      	movs	r1, #0
 80260f2:	46d1      	mov	r9, sl
 80260f4:	2212      	movs	r2, #18
 80260f6:	9108      	str	r1, [sp, #32]
 80260f8:	e7ce      	b.n	8026098 <_dtoa_r+0x240>
 80260fa:	2201      	movs	r2, #1
 80260fc:	9207      	str	r2, [sp, #28]
 80260fe:	e7f5      	b.n	80260ec <_dtoa_r+0x294>
 8026100:	f8dd a020 	ldr.w	sl, [sp, #32]
 8026104:	46d1      	mov	r9, sl
 8026106:	4652      	mov	r2, sl
 8026108:	e7c6      	b.n	8026098 <_dtoa_r+0x240>
 802610a:	3101      	adds	r1, #1
 802610c:	6079      	str	r1, [r7, #4]
 802610e:	0040      	lsls	r0, r0, #1
 8026110:	e7c6      	b.n	80260a0 <_dtoa_r+0x248>
 8026112:	bf00      	nop
 8026114:	f3af 8000 	nop.w
 8026118:	636f4361 	.word	0x636f4361
 802611c:	3fd287a7 	.word	0x3fd287a7
 8026120:	8b60c8b3 	.word	0x8b60c8b3
 8026124:	3fc68a28 	.word	0x3fc68a28
 8026128:	509f79fb 	.word	0x509f79fb
 802612c:	3fd34413 	.word	0x3fd34413
 8026130:	080e2354 	.word	0x080e2354
 8026134:	080e28d2 	.word	0x080e28d2
 8026138:	7ff00000 	.word	0x7ff00000
 802613c:	080e28ce 	.word	0x080e28ce
 8026140:	080e28c5 	.word	0x080e28c5
 8026144:	080e2b12 	.word	0x080e2b12
 8026148:	080e2a28 	.word	0x080e2a28
 802614c:	080e292d 	.word	0x080e292d
 8026150:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8026152:	9901      	ldr	r1, [sp, #4]
 8026154:	6011      	str	r1, [r2, #0]
 8026156:	f1b9 0f0e 	cmp.w	r9, #14
 802615a:	d86c      	bhi.n	8026236 <_dtoa_r+0x3de>
 802615c:	2c00      	cmp	r4, #0
 802615e:	d06a      	beq.n	8026236 <_dtoa_r+0x3de>
 8026160:	f1bb 0f00 	cmp.w	fp, #0
 8026164:	f340 80a0 	ble.w	80262a8 <_dtoa_r+0x450>
 8026168:	49c1      	ldr	r1, [pc, #772]	; (8026470 <_dtoa_r+0x618>)
 802616a:	f00b 020f 	and.w	r2, fp, #15
 802616e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8026172:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8026176:	ed92 7b00 	vldr	d7, [r2]
 802617a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802617e:	f000 8087 	beq.w	8026290 <_dtoa_r+0x438>
 8026182:	4abc      	ldr	r2, [pc, #752]	; (8026474 <_dtoa_r+0x61c>)
 8026184:	ed92 6b08 	vldr	d6, [r2, #32]
 8026188:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802618c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8026190:	f001 010f 	and.w	r1, r1, #15
 8026194:	2203      	movs	r2, #3
 8026196:	48b7      	ldr	r0, [pc, #732]	; (8026474 <_dtoa_r+0x61c>)
 8026198:	2900      	cmp	r1, #0
 802619a:	d17b      	bne.n	8026294 <_dtoa_r+0x43c>
 802619c:	ed9d 6b02 	vldr	d6, [sp, #8]
 80261a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80261a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80261a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80261aa:	2900      	cmp	r1, #0
 80261ac:	f000 80a2 	beq.w	80262f4 <_dtoa_r+0x49c>
 80261b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80261b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80261b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80261bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80261c0:	f140 8098 	bpl.w	80262f4 <_dtoa_r+0x49c>
 80261c4:	f1b9 0f00 	cmp.w	r9, #0
 80261c8:	f000 8094 	beq.w	80262f4 <_dtoa_r+0x49c>
 80261cc:	f1ba 0f00 	cmp.w	sl, #0
 80261d0:	dd2f      	ble.n	8026232 <_dtoa_r+0x3da>
 80261d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80261d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80261da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80261de:	f10b 37ff 	add.w	r7, fp, #4294967295
 80261e2:	3201      	adds	r2, #1
 80261e4:	4650      	mov	r0, sl
 80261e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80261ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80261ee:	ee07 2a90 	vmov	s15, r2
 80261f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80261f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80261fa:	ee15 4a90 	vmov	r4, s11
 80261fe:	ec52 1b15 	vmov	r1, r2, d5
 8026202:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8026206:	2800      	cmp	r0, #0
 8026208:	d177      	bne.n	80262fa <_dtoa_r+0x4a2>
 802620a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802620e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8026212:	ec42 1b17 	vmov	d7, r1, r2
 8026216:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802621a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802621e:	f300 8263 	bgt.w	80266e8 <_dtoa_r+0x890>
 8026222:	eeb1 7b47 	vneg.f64	d7, d7
 8026226:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802622a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802622e:	f100 8258 	bmi.w	80266e2 <_dtoa_r+0x88a>
 8026232:	ed8d 8b02 	vstr	d8, [sp, #8]
 8026236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026238:	2a00      	cmp	r2, #0
 802623a:	f2c0 811d 	blt.w	8026478 <_dtoa_r+0x620>
 802623e:	f1bb 0f0e 	cmp.w	fp, #14
 8026242:	f300 8119 	bgt.w	8026478 <_dtoa_r+0x620>
 8026246:	4b8a      	ldr	r3, [pc, #552]	; (8026470 <_dtoa_r+0x618>)
 8026248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802624c:	ed93 6b00 	vldr	d6, [r3]
 8026250:	9b08      	ldr	r3, [sp, #32]
 8026252:	2b00      	cmp	r3, #0
 8026254:	f280 80b7 	bge.w	80263c6 <_dtoa_r+0x56e>
 8026258:	f1b9 0f00 	cmp.w	r9, #0
 802625c:	f300 80b3 	bgt.w	80263c6 <_dtoa_r+0x56e>
 8026260:	f040 823f 	bne.w	80266e2 <_dtoa_r+0x88a>
 8026264:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026268:	ee26 6b07 	vmul.f64	d6, d6, d7
 802626c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026270:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026278:	464c      	mov	r4, r9
 802627a:	464f      	mov	r7, r9
 802627c:	f280 8215 	bge.w	80266aa <_dtoa_r+0x852>
 8026280:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026284:	2331      	movs	r3, #49	; 0x31
 8026286:	f808 3b01 	strb.w	r3, [r8], #1
 802628a:	f10b 0b01 	add.w	fp, fp, #1
 802628e:	e211      	b.n	80266b4 <_dtoa_r+0x85c>
 8026290:	2202      	movs	r2, #2
 8026292:	e780      	b.n	8026196 <_dtoa_r+0x33e>
 8026294:	07cc      	lsls	r4, r1, #31
 8026296:	d504      	bpl.n	80262a2 <_dtoa_r+0x44a>
 8026298:	ed90 6b00 	vldr	d6, [r0]
 802629c:	3201      	adds	r2, #1
 802629e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80262a2:	1049      	asrs	r1, r1, #1
 80262a4:	3008      	adds	r0, #8
 80262a6:	e777      	b.n	8026198 <_dtoa_r+0x340>
 80262a8:	d022      	beq.n	80262f0 <_dtoa_r+0x498>
 80262aa:	f1cb 0100 	rsb	r1, fp, #0
 80262ae:	4a70      	ldr	r2, [pc, #448]	; (8026470 <_dtoa_r+0x618>)
 80262b0:	f001 000f 	and.w	r0, r1, #15
 80262b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80262b8:	ed92 7b00 	vldr	d7, [r2]
 80262bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80262c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80262c4:	486b      	ldr	r0, [pc, #428]	; (8026474 <_dtoa_r+0x61c>)
 80262c6:	1109      	asrs	r1, r1, #4
 80262c8:	2400      	movs	r4, #0
 80262ca:	2202      	movs	r2, #2
 80262cc:	b929      	cbnz	r1, 80262da <_dtoa_r+0x482>
 80262ce:	2c00      	cmp	r4, #0
 80262d0:	f43f af6a 	beq.w	80261a8 <_dtoa_r+0x350>
 80262d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80262d8:	e766      	b.n	80261a8 <_dtoa_r+0x350>
 80262da:	07cf      	lsls	r7, r1, #31
 80262dc:	d505      	bpl.n	80262ea <_dtoa_r+0x492>
 80262de:	ed90 6b00 	vldr	d6, [r0]
 80262e2:	3201      	adds	r2, #1
 80262e4:	2401      	movs	r4, #1
 80262e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80262ea:	1049      	asrs	r1, r1, #1
 80262ec:	3008      	adds	r0, #8
 80262ee:	e7ed      	b.n	80262cc <_dtoa_r+0x474>
 80262f0:	2202      	movs	r2, #2
 80262f2:	e759      	b.n	80261a8 <_dtoa_r+0x350>
 80262f4:	465f      	mov	r7, fp
 80262f6:	4648      	mov	r0, r9
 80262f8:	e775      	b.n	80261e6 <_dtoa_r+0x38e>
 80262fa:	ec42 1b17 	vmov	d7, r1, r2
 80262fe:	4a5c      	ldr	r2, [pc, #368]	; (8026470 <_dtoa_r+0x618>)
 8026300:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8026304:	ed12 4b02 	vldr	d4, [r2, #-8]
 8026308:	9a01      	ldr	r2, [sp, #4]
 802630a:	1814      	adds	r4, r2, r0
 802630c:	9a07      	ldr	r2, [sp, #28]
 802630e:	b352      	cbz	r2, 8026366 <_dtoa_r+0x50e>
 8026310:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8026314:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8026318:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802631c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8026320:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8026324:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026328:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802632c:	ee14 2a90 	vmov	r2, s9
 8026330:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026334:	3230      	adds	r2, #48	; 0x30
 8026336:	ee36 6b45 	vsub.f64	d6, d6, d5
 802633a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802633e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026342:	f808 2b01 	strb.w	r2, [r8], #1
 8026346:	d439      	bmi.n	80263bc <_dtoa_r+0x564>
 8026348:	ee32 5b46 	vsub.f64	d5, d2, d6
 802634c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8026350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026354:	d472      	bmi.n	802643c <_dtoa_r+0x5e4>
 8026356:	45a0      	cmp	r8, r4
 8026358:	f43f af6b 	beq.w	8026232 <_dtoa_r+0x3da>
 802635c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8026360:	ee26 6b03 	vmul.f64	d6, d6, d3
 8026364:	e7e0      	b.n	8026328 <_dtoa_r+0x4d0>
 8026366:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802636a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802636e:	4621      	mov	r1, r4
 8026370:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8026374:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026378:	ee14 2a90 	vmov	r2, s9
 802637c:	3230      	adds	r2, #48	; 0x30
 802637e:	f808 2b01 	strb.w	r2, [r8], #1
 8026382:	45a0      	cmp	r8, r4
 8026384:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026388:	ee36 6b45 	vsub.f64	d6, d6, d5
 802638c:	d118      	bne.n	80263c0 <_dtoa_r+0x568>
 802638e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8026392:	ee37 4b05 	vadd.f64	d4, d7, d5
 8026396:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802639a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802639e:	dc4d      	bgt.n	802643c <_dtoa_r+0x5e4>
 80263a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80263a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80263a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263ac:	f57f af41 	bpl.w	8026232 <_dtoa_r+0x3da>
 80263b0:	4688      	mov	r8, r1
 80263b2:	3901      	subs	r1, #1
 80263b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80263b8:	2b30      	cmp	r3, #48	; 0x30
 80263ba:	d0f9      	beq.n	80263b0 <_dtoa_r+0x558>
 80263bc:	46bb      	mov	fp, r7
 80263be:	e02a      	b.n	8026416 <_dtoa_r+0x5be>
 80263c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80263c4:	e7d6      	b.n	8026374 <_dtoa_r+0x51c>
 80263c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80263ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80263ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80263d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80263d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80263da:	ee15 3a10 	vmov	r3, s10
 80263de:	3330      	adds	r3, #48	; 0x30
 80263e0:	f808 3b01 	strb.w	r3, [r8], #1
 80263e4:	9b01      	ldr	r3, [sp, #4]
 80263e6:	eba8 0303 	sub.w	r3, r8, r3
 80263ea:	4599      	cmp	r9, r3
 80263ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80263f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80263f4:	d133      	bne.n	802645e <_dtoa_r+0x606>
 80263f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80263fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80263fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026402:	dc1a      	bgt.n	802643a <_dtoa_r+0x5e2>
 8026404:	eeb4 7b46 	vcmp.f64	d7, d6
 8026408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802640c:	d103      	bne.n	8026416 <_dtoa_r+0x5be>
 802640e:	ee15 3a10 	vmov	r3, s10
 8026412:	07d9      	lsls	r1, r3, #31
 8026414:	d411      	bmi.n	802643a <_dtoa_r+0x5e2>
 8026416:	4629      	mov	r1, r5
 8026418:	4630      	mov	r0, r6
 802641a:	f000 fe1b 	bl	8027054 <_Bfree>
 802641e:	2300      	movs	r3, #0
 8026420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026422:	f888 3000 	strb.w	r3, [r8]
 8026426:	f10b 0301 	add.w	r3, fp, #1
 802642a:	6013      	str	r3, [r2, #0]
 802642c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802642e:	2b00      	cmp	r3, #0
 8026430:	f43f ad61 	beq.w	8025ef6 <_dtoa_r+0x9e>
 8026434:	f8c3 8000 	str.w	r8, [r3]
 8026438:	e55d      	b.n	8025ef6 <_dtoa_r+0x9e>
 802643a:	465f      	mov	r7, fp
 802643c:	4643      	mov	r3, r8
 802643e:	4698      	mov	r8, r3
 8026440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026444:	2a39      	cmp	r2, #57	; 0x39
 8026446:	d106      	bne.n	8026456 <_dtoa_r+0x5fe>
 8026448:	9a01      	ldr	r2, [sp, #4]
 802644a:	429a      	cmp	r2, r3
 802644c:	d1f7      	bne.n	802643e <_dtoa_r+0x5e6>
 802644e:	9901      	ldr	r1, [sp, #4]
 8026450:	2230      	movs	r2, #48	; 0x30
 8026452:	3701      	adds	r7, #1
 8026454:	700a      	strb	r2, [r1, #0]
 8026456:	781a      	ldrb	r2, [r3, #0]
 8026458:	3201      	adds	r2, #1
 802645a:	701a      	strb	r2, [r3, #0]
 802645c:	e7ae      	b.n	80263bc <_dtoa_r+0x564>
 802645e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026462:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802646a:	d1b2      	bne.n	80263d2 <_dtoa_r+0x57a>
 802646c:	e7d3      	b.n	8026416 <_dtoa_r+0x5be>
 802646e:	bf00      	nop
 8026470:	080e2a28 	.word	0x080e2a28
 8026474:	080e2a00 	.word	0x080e2a00
 8026478:	9907      	ldr	r1, [sp, #28]
 802647a:	2900      	cmp	r1, #0
 802647c:	f000 80d0 	beq.w	8026620 <_dtoa_r+0x7c8>
 8026480:	9906      	ldr	r1, [sp, #24]
 8026482:	2901      	cmp	r1, #1
 8026484:	f300 80b4 	bgt.w	80265f0 <_dtoa_r+0x798>
 8026488:	990a      	ldr	r1, [sp, #40]	; 0x28
 802648a:	2900      	cmp	r1, #0
 802648c:	f000 80ac 	beq.w	80265e8 <_dtoa_r+0x790>
 8026490:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8026494:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026498:	461c      	mov	r4, r3
 802649a:	930a      	str	r3, [sp, #40]	; 0x28
 802649c:	9b04      	ldr	r3, [sp, #16]
 802649e:	4413      	add	r3, r2
 80264a0:	9304      	str	r3, [sp, #16]
 80264a2:	9b05      	ldr	r3, [sp, #20]
 80264a4:	2101      	movs	r1, #1
 80264a6:	4413      	add	r3, r2
 80264a8:	4630      	mov	r0, r6
 80264aa:	9305      	str	r3, [sp, #20]
 80264ac:	f000 fe8a 	bl	80271c4 <__i2b>
 80264b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80264b2:	4607      	mov	r7, r0
 80264b4:	f1b8 0f00 	cmp.w	r8, #0
 80264b8:	dd0d      	ble.n	80264d6 <_dtoa_r+0x67e>
 80264ba:	9a05      	ldr	r2, [sp, #20]
 80264bc:	2a00      	cmp	r2, #0
 80264be:	dd0a      	ble.n	80264d6 <_dtoa_r+0x67e>
 80264c0:	4542      	cmp	r2, r8
 80264c2:	9904      	ldr	r1, [sp, #16]
 80264c4:	bfa8      	it	ge
 80264c6:	4642      	movge	r2, r8
 80264c8:	1a89      	subs	r1, r1, r2
 80264ca:	9104      	str	r1, [sp, #16]
 80264cc:	9905      	ldr	r1, [sp, #20]
 80264ce:	eba8 0802 	sub.w	r8, r8, r2
 80264d2:	1a8a      	subs	r2, r1, r2
 80264d4:	9205      	str	r2, [sp, #20]
 80264d6:	b303      	cbz	r3, 802651a <_dtoa_r+0x6c2>
 80264d8:	9a07      	ldr	r2, [sp, #28]
 80264da:	2a00      	cmp	r2, #0
 80264dc:	f000 80a5 	beq.w	802662a <_dtoa_r+0x7d2>
 80264e0:	2c00      	cmp	r4, #0
 80264e2:	dd13      	ble.n	802650c <_dtoa_r+0x6b4>
 80264e4:	4639      	mov	r1, r7
 80264e6:	4622      	mov	r2, r4
 80264e8:	4630      	mov	r0, r6
 80264ea:	930d      	str	r3, [sp, #52]	; 0x34
 80264ec:	f000 ff2a 	bl	8027344 <__pow5mult>
 80264f0:	462a      	mov	r2, r5
 80264f2:	4601      	mov	r1, r0
 80264f4:	4607      	mov	r7, r0
 80264f6:	4630      	mov	r0, r6
 80264f8:	f000 fe7a 	bl	80271f0 <__multiply>
 80264fc:	4629      	mov	r1, r5
 80264fe:	900a      	str	r0, [sp, #40]	; 0x28
 8026500:	4630      	mov	r0, r6
 8026502:	f000 fda7 	bl	8027054 <_Bfree>
 8026506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802650a:	4615      	mov	r5, r2
 802650c:	1b1a      	subs	r2, r3, r4
 802650e:	d004      	beq.n	802651a <_dtoa_r+0x6c2>
 8026510:	4629      	mov	r1, r5
 8026512:	4630      	mov	r0, r6
 8026514:	f000 ff16 	bl	8027344 <__pow5mult>
 8026518:	4605      	mov	r5, r0
 802651a:	2101      	movs	r1, #1
 802651c:	4630      	mov	r0, r6
 802651e:	f000 fe51 	bl	80271c4 <__i2b>
 8026522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026524:	2b00      	cmp	r3, #0
 8026526:	4604      	mov	r4, r0
 8026528:	f340 8081 	ble.w	802662e <_dtoa_r+0x7d6>
 802652c:	461a      	mov	r2, r3
 802652e:	4601      	mov	r1, r0
 8026530:	4630      	mov	r0, r6
 8026532:	f000 ff07 	bl	8027344 <__pow5mult>
 8026536:	9b06      	ldr	r3, [sp, #24]
 8026538:	2b01      	cmp	r3, #1
 802653a:	4604      	mov	r4, r0
 802653c:	dd7a      	ble.n	8026634 <_dtoa_r+0x7dc>
 802653e:	2300      	movs	r3, #0
 8026540:	930a      	str	r3, [sp, #40]	; 0x28
 8026542:	6922      	ldr	r2, [r4, #16]
 8026544:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8026548:	6910      	ldr	r0, [r2, #16]
 802654a:	f000 fdeb 	bl	8027124 <__hi0bits>
 802654e:	f1c0 0020 	rsb	r0, r0, #32
 8026552:	9b05      	ldr	r3, [sp, #20]
 8026554:	4418      	add	r0, r3
 8026556:	f010 001f 	ands.w	r0, r0, #31
 802655a:	f000 808c 	beq.w	8026676 <_dtoa_r+0x81e>
 802655e:	f1c0 0220 	rsb	r2, r0, #32
 8026562:	2a04      	cmp	r2, #4
 8026564:	f340 8085 	ble.w	8026672 <_dtoa_r+0x81a>
 8026568:	f1c0 001c 	rsb	r0, r0, #28
 802656c:	9b04      	ldr	r3, [sp, #16]
 802656e:	4403      	add	r3, r0
 8026570:	9304      	str	r3, [sp, #16]
 8026572:	9b05      	ldr	r3, [sp, #20]
 8026574:	4403      	add	r3, r0
 8026576:	4480      	add	r8, r0
 8026578:	9305      	str	r3, [sp, #20]
 802657a:	9b04      	ldr	r3, [sp, #16]
 802657c:	2b00      	cmp	r3, #0
 802657e:	dd05      	ble.n	802658c <_dtoa_r+0x734>
 8026580:	4629      	mov	r1, r5
 8026582:	461a      	mov	r2, r3
 8026584:	4630      	mov	r0, r6
 8026586:	f000 ff37 	bl	80273f8 <__lshift>
 802658a:	4605      	mov	r5, r0
 802658c:	9b05      	ldr	r3, [sp, #20]
 802658e:	2b00      	cmp	r3, #0
 8026590:	dd05      	ble.n	802659e <_dtoa_r+0x746>
 8026592:	4621      	mov	r1, r4
 8026594:	461a      	mov	r2, r3
 8026596:	4630      	mov	r0, r6
 8026598:	f000 ff2e 	bl	80273f8 <__lshift>
 802659c:	4604      	mov	r4, r0
 802659e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80265a0:	2b00      	cmp	r3, #0
 80265a2:	d06a      	beq.n	802667a <_dtoa_r+0x822>
 80265a4:	4621      	mov	r1, r4
 80265a6:	4628      	mov	r0, r5
 80265a8:	f000 ff96 	bl	80274d8 <__mcmp>
 80265ac:	2800      	cmp	r0, #0
 80265ae:	da64      	bge.n	802667a <_dtoa_r+0x822>
 80265b0:	2300      	movs	r3, #0
 80265b2:	4629      	mov	r1, r5
 80265b4:	220a      	movs	r2, #10
 80265b6:	4630      	mov	r0, r6
 80265b8:	f000 fd6e 	bl	8027098 <__multadd>
 80265bc:	9b07      	ldr	r3, [sp, #28]
 80265be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80265c2:	4605      	mov	r5, r0
 80265c4:	2b00      	cmp	r3, #0
 80265c6:	f000 8191 	beq.w	80268ec <_dtoa_r+0xa94>
 80265ca:	4639      	mov	r1, r7
 80265cc:	2300      	movs	r3, #0
 80265ce:	220a      	movs	r2, #10
 80265d0:	4630      	mov	r0, r6
 80265d2:	f000 fd61 	bl	8027098 <__multadd>
 80265d6:	f1ba 0f00 	cmp.w	sl, #0
 80265da:	4607      	mov	r7, r0
 80265dc:	f300 808d 	bgt.w	80266fa <_dtoa_r+0x8a2>
 80265e0:	9b06      	ldr	r3, [sp, #24]
 80265e2:	2b02      	cmp	r3, #2
 80265e4:	dc50      	bgt.n	8026688 <_dtoa_r+0x830>
 80265e6:	e088      	b.n	80266fa <_dtoa_r+0x8a2>
 80265e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80265ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80265ee:	e751      	b.n	8026494 <_dtoa_r+0x63c>
 80265f0:	f109 34ff 	add.w	r4, r9, #4294967295
 80265f4:	42a3      	cmp	r3, r4
 80265f6:	bfbf      	itttt	lt
 80265f8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80265fa:	1ae3      	sublt	r3, r4, r3
 80265fc:	18d2      	addlt	r2, r2, r3
 80265fe:	9209      	strlt	r2, [sp, #36]	; 0x24
 8026600:	bfb6      	itet	lt
 8026602:	4623      	movlt	r3, r4
 8026604:	1b1c      	subge	r4, r3, r4
 8026606:	2400      	movlt	r4, #0
 8026608:	f1b9 0f00 	cmp.w	r9, #0
 802660c:	bfb5      	itete	lt
 802660e:	9a04      	ldrlt	r2, [sp, #16]
 8026610:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8026614:	eba2 0809 	sublt.w	r8, r2, r9
 8026618:	464a      	movge	r2, r9
 802661a:	bfb8      	it	lt
 802661c:	2200      	movlt	r2, #0
 802661e:	e73c      	b.n	802649a <_dtoa_r+0x642>
 8026620:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026624:	9f07      	ldr	r7, [sp, #28]
 8026626:	461c      	mov	r4, r3
 8026628:	e744      	b.n	80264b4 <_dtoa_r+0x65c>
 802662a:	461a      	mov	r2, r3
 802662c:	e770      	b.n	8026510 <_dtoa_r+0x6b8>
 802662e:	9b06      	ldr	r3, [sp, #24]
 8026630:	2b01      	cmp	r3, #1
 8026632:	dc18      	bgt.n	8026666 <_dtoa_r+0x80e>
 8026634:	9b02      	ldr	r3, [sp, #8]
 8026636:	b9b3      	cbnz	r3, 8026666 <_dtoa_r+0x80e>
 8026638:	9b03      	ldr	r3, [sp, #12]
 802663a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802663e:	b9a2      	cbnz	r2, 802666a <_dtoa_r+0x812>
 8026640:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8026644:	0d12      	lsrs	r2, r2, #20
 8026646:	0512      	lsls	r2, r2, #20
 8026648:	b18a      	cbz	r2, 802666e <_dtoa_r+0x816>
 802664a:	9b04      	ldr	r3, [sp, #16]
 802664c:	3301      	adds	r3, #1
 802664e:	9304      	str	r3, [sp, #16]
 8026650:	9b05      	ldr	r3, [sp, #20]
 8026652:	3301      	adds	r3, #1
 8026654:	9305      	str	r3, [sp, #20]
 8026656:	2301      	movs	r3, #1
 8026658:	930a      	str	r3, [sp, #40]	; 0x28
 802665a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802665c:	2b00      	cmp	r3, #0
 802665e:	f47f af70 	bne.w	8026542 <_dtoa_r+0x6ea>
 8026662:	2001      	movs	r0, #1
 8026664:	e775      	b.n	8026552 <_dtoa_r+0x6fa>
 8026666:	2300      	movs	r3, #0
 8026668:	e7f6      	b.n	8026658 <_dtoa_r+0x800>
 802666a:	9b02      	ldr	r3, [sp, #8]
 802666c:	e7f4      	b.n	8026658 <_dtoa_r+0x800>
 802666e:	920a      	str	r2, [sp, #40]	; 0x28
 8026670:	e7f3      	b.n	802665a <_dtoa_r+0x802>
 8026672:	d082      	beq.n	802657a <_dtoa_r+0x722>
 8026674:	4610      	mov	r0, r2
 8026676:	301c      	adds	r0, #28
 8026678:	e778      	b.n	802656c <_dtoa_r+0x714>
 802667a:	f1b9 0f00 	cmp.w	r9, #0
 802667e:	dc37      	bgt.n	80266f0 <_dtoa_r+0x898>
 8026680:	9b06      	ldr	r3, [sp, #24]
 8026682:	2b02      	cmp	r3, #2
 8026684:	dd34      	ble.n	80266f0 <_dtoa_r+0x898>
 8026686:	46ca      	mov	sl, r9
 8026688:	f1ba 0f00 	cmp.w	sl, #0
 802668c:	d10d      	bne.n	80266aa <_dtoa_r+0x852>
 802668e:	4621      	mov	r1, r4
 8026690:	4653      	mov	r3, sl
 8026692:	2205      	movs	r2, #5
 8026694:	4630      	mov	r0, r6
 8026696:	f000 fcff 	bl	8027098 <__multadd>
 802669a:	4601      	mov	r1, r0
 802669c:	4604      	mov	r4, r0
 802669e:	4628      	mov	r0, r5
 80266a0:	f000 ff1a 	bl	80274d8 <__mcmp>
 80266a4:	2800      	cmp	r0, #0
 80266a6:	f73f adeb 	bgt.w	8026280 <_dtoa_r+0x428>
 80266aa:	9b08      	ldr	r3, [sp, #32]
 80266ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80266b0:	ea6f 0b03 	mvn.w	fp, r3
 80266b4:	f04f 0900 	mov.w	r9, #0
 80266b8:	4621      	mov	r1, r4
 80266ba:	4630      	mov	r0, r6
 80266bc:	f000 fcca 	bl	8027054 <_Bfree>
 80266c0:	2f00      	cmp	r7, #0
 80266c2:	f43f aea8 	beq.w	8026416 <_dtoa_r+0x5be>
 80266c6:	f1b9 0f00 	cmp.w	r9, #0
 80266ca:	d005      	beq.n	80266d8 <_dtoa_r+0x880>
 80266cc:	45b9      	cmp	r9, r7
 80266ce:	d003      	beq.n	80266d8 <_dtoa_r+0x880>
 80266d0:	4649      	mov	r1, r9
 80266d2:	4630      	mov	r0, r6
 80266d4:	f000 fcbe 	bl	8027054 <_Bfree>
 80266d8:	4639      	mov	r1, r7
 80266da:	4630      	mov	r0, r6
 80266dc:	f000 fcba 	bl	8027054 <_Bfree>
 80266e0:	e699      	b.n	8026416 <_dtoa_r+0x5be>
 80266e2:	2400      	movs	r4, #0
 80266e4:	4627      	mov	r7, r4
 80266e6:	e7e0      	b.n	80266aa <_dtoa_r+0x852>
 80266e8:	46bb      	mov	fp, r7
 80266ea:	4604      	mov	r4, r0
 80266ec:	4607      	mov	r7, r0
 80266ee:	e5c7      	b.n	8026280 <_dtoa_r+0x428>
 80266f0:	9b07      	ldr	r3, [sp, #28]
 80266f2:	46ca      	mov	sl, r9
 80266f4:	2b00      	cmp	r3, #0
 80266f6:	f000 8100 	beq.w	80268fa <_dtoa_r+0xaa2>
 80266fa:	f1b8 0f00 	cmp.w	r8, #0
 80266fe:	dd05      	ble.n	802670c <_dtoa_r+0x8b4>
 8026700:	4639      	mov	r1, r7
 8026702:	4642      	mov	r2, r8
 8026704:	4630      	mov	r0, r6
 8026706:	f000 fe77 	bl	80273f8 <__lshift>
 802670a:	4607      	mov	r7, r0
 802670c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802670e:	2b00      	cmp	r3, #0
 8026710:	d05d      	beq.n	80267ce <_dtoa_r+0x976>
 8026712:	6879      	ldr	r1, [r7, #4]
 8026714:	4630      	mov	r0, r6
 8026716:	f000 fc5d 	bl	8026fd4 <_Balloc>
 802671a:	4680      	mov	r8, r0
 802671c:	b928      	cbnz	r0, 802672a <_dtoa_r+0x8d2>
 802671e:	4b82      	ldr	r3, [pc, #520]	; (8026928 <_dtoa_r+0xad0>)
 8026720:	4602      	mov	r2, r0
 8026722:	f240 21ea 	movw	r1, #746	; 0x2ea
 8026726:	f7ff bbaf 	b.w	8025e88 <_dtoa_r+0x30>
 802672a:	693a      	ldr	r2, [r7, #16]
 802672c:	3202      	adds	r2, #2
 802672e:	0092      	lsls	r2, r2, #2
 8026730:	f107 010c 	add.w	r1, r7, #12
 8026734:	300c      	adds	r0, #12
 8026736:	f7fc fefd 	bl	8023534 <memcpy>
 802673a:	2201      	movs	r2, #1
 802673c:	4641      	mov	r1, r8
 802673e:	4630      	mov	r0, r6
 8026740:	f000 fe5a 	bl	80273f8 <__lshift>
 8026744:	9b01      	ldr	r3, [sp, #4]
 8026746:	3301      	adds	r3, #1
 8026748:	9304      	str	r3, [sp, #16]
 802674a:	9b01      	ldr	r3, [sp, #4]
 802674c:	4453      	add	r3, sl
 802674e:	9308      	str	r3, [sp, #32]
 8026750:	9b02      	ldr	r3, [sp, #8]
 8026752:	f003 0301 	and.w	r3, r3, #1
 8026756:	46b9      	mov	r9, r7
 8026758:	9307      	str	r3, [sp, #28]
 802675a:	4607      	mov	r7, r0
 802675c:	9b04      	ldr	r3, [sp, #16]
 802675e:	4621      	mov	r1, r4
 8026760:	3b01      	subs	r3, #1
 8026762:	4628      	mov	r0, r5
 8026764:	9302      	str	r3, [sp, #8]
 8026766:	f7ff faeb 	bl	8025d40 <quorem>
 802676a:	4603      	mov	r3, r0
 802676c:	3330      	adds	r3, #48	; 0x30
 802676e:	9005      	str	r0, [sp, #20]
 8026770:	4649      	mov	r1, r9
 8026772:	4628      	mov	r0, r5
 8026774:	9309      	str	r3, [sp, #36]	; 0x24
 8026776:	f000 feaf 	bl	80274d8 <__mcmp>
 802677a:	463a      	mov	r2, r7
 802677c:	4682      	mov	sl, r0
 802677e:	4621      	mov	r1, r4
 8026780:	4630      	mov	r0, r6
 8026782:	f000 fec5 	bl	8027510 <__mdiff>
 8026786:	68c2      	ldr	r2, [r0, #12]
 8026788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802678a:	4680      	mov	r8, r0
 802678c:	bb0a      	cbnz	r2, 80267d2 <_dtoa_r+0x97a>
 802678e:	4601      	mov	r1, r0
 8026790:	4628      	mov	r0, r5
 8026792:	f000 fea1 	bl	80274d8 <__mcmp>
 8026796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026798:	4602      	mov	r2, r0
 802679a:	4641      	mov	r1, r8
 802679c:	4630      	mov	r0, r6
 802679e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80267a2:	f000 fc57 	bl	8027054 <_Bfree>
 80267a6:	9b06      	ldr	r3, [sp, #24]
 80267a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80267aa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80267ae:	ea43 0102 	orr.w	r1, r3, r2
 80267b2:	9b07      	ldr	r3, [sp, #28]
 80267b4:	430b      	orrs	r3, r1
 80267b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267b8:	d10d      	bne.n	80267d6 <_dtoa_r+0x97e>
 80267ba:	2b39      	cmp	r3, #57	; 0x39
 80267bc:	d029      	beq.n	8026812 <_dtoa_r+0x9ba>
 80267be:	f1ba 0f00 	cmp.w	sl, #0
 80267c2:	dd01      	ble.n	80267c8 <_dtoa_r+0x970>
 80267c4:	9b05      	ldr	r3, [sp, #20]
 80267c6:	3331      	adds	r3, #49	; 0x31
 80267c8:	9a02      	ldr	r2, [sp, #8]
 80267ca:	7013      	strb	r3, [r2, #0]
 80267cc:	e774      	b.n	80266b8 <_dtoa_r+0x860>
 80267ce:	4638      	mov	r0, r7
 80267d0:	e7b8      	b.n	8026744 <_dtoa_r+0x8ec>
 80267d2:	2201      	movs	r2, #1
 80267d4:	e7e1      	b.n	802679a <_dtoa_r+0x942>
 80267d6:	f1ba 0f00 	cmp.w	sl, #0
 80267da:	db06      	blt.n	80267ea <_dtoa_r+0x992>
 80267dc:	9906      	ldr	r1, [sp, #24]
 80267de:	ea41 0a0a 	orr.w	sl, r1, sl
 80267e2:	9907      	ldr	r1, [sp, #28]
 80267e4:	ea5a 0101 	orrs.w	r1, sl, r1
 80267e8:	d120      	bne.n	802682c <_dtoa_r+0x9d4>
 80267ea:	2a00      	cmp	r2, #0
 80267ec:	ddec      	ble.n	80267c8 <_dtoa_r+0x970>
 80267ee:	4629      	mov	r1, r5
 80267f0:	2201      	movs	r2, #1
 80267f2:	4630      	mov	r0, r6
 80267f4:	9304      	str	r3, [sp, #16]
 80267f6:	f000 fdff 	bl	80273f8 <__lshift>
 80267fa:	4621      	mov	r1, r4
 80267fc:	4605      	mov	r5, r0
 80267fe:	f000 fe6b 	bl	80274d8 <__mcmp>
 8026802:	2800      	cmp	r0, #0
 8026804:	9b04      	ldr	r3, [sp, #16]
 8026806:	dc02      	bgt.n	802680e <_dtoa_r+0x9b6>
 8026808:	d1de      	bne.n	80267c8 <_dtoa_r+0x970>
 802680a:	07da      	lsls	r2, r3, #31
 802680c:	d5dc      	bpl.n	80267c8 <_dtoa_r+0x970>
 802680e:	2b39      	cmp	r3, #57	; 0x39
 8026810:	d1d8      	bne.n	80267c4 <_dtoa_r+0x96c>
 8026812:	9a02      	ldr	r2, [sp, #8]
 8026814:	2339      	movs	r3, #57	; 0x39
 8026816:	7013      	strb	r3, [r2, #0]
 8026818:	4643      	mov	r3, r8
 802681a:	4698      	mov	r8, r3
 802681c:	3b01      	subs	r3, #1
 802681e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8026822:	2a39      	cmp	r2, #57	; 0x39
 8026824:	d051      	beq.n	80268ca <_dtoa_r+0xa72>
 8026826:	3201      	adds	r2, #1
 8026828:	701a      	strb	r2, [r3, #0]
 802682a:	e745      	b.n	80266b8 <_dtoa_r+0x860>
 802682c:	2a00      	cmp	r2, #0
 802682e:	dd03      	ble.n	8026838 <_dtoa_r+0x9e0>
 8026830:	2b39      	cmp	r3, #57	; 0x39
 8026832:	d0ee      	beq.n	8026812 <_dtoa_r+0x9ba>
 8026834:	3301      	adds	r3, #1
 8026836:	e7c7      	b.n	80267c8 <_dtoa_r+0x970>
 8026838:	9a04      	ldr	r2, [sp, #16]
 802683a:	9908      	ldr	r1, [sp, #32]
 802683c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8026840:	428a      	cmp	r2, r1
 8026842:	d02b      	beq.n	802689c <_dtoa_r+0xa44>
 8026844:	4629      	mov	r1, r5
 8026846:	2300      	movs	r3, #0
 8026848:	220a      	movs	r2, #10
 802684a:	4630      	mov	r0, r6
 802684c:	f000 fc24 	bl	8027098 <__multadd>
 8026850:	45b9      	cmp	r9, r7
 8026852:	4605      	mov	r5, r0
 8026854:	f04f 0300 	mov.w	r3, #0
 8026858:	f04f 020a 	mov.w	r2, #10
 802685c:	4649      	mov	r1, r9
 802685e:	4630      	mov	r0, r6
 8026860:	d107      	bne.n	8026872 <_dtoa_r+0xa1a>
 8026862:	f000 fc19 	bl	8027098 <__multadd>
 8026866:	4681      	mov	r9, r0
 8026868:	4607      	mov	r7, r0
 802686a:	9b04      	ldr	r3, [sp, #16]
 802686c:	3301      	adds	r3, #1
 802686e:	9304      	str	r3, [sp, #16]
 8026870:	e774      	b.n	802675c <_dtoa_r+0x904>
 8026872:	f000 fc11 	bl	8027098 <__multadd>
 8026876:	4639      	mov	r1, r7
 8026878:	4681      	mov	r9, r0
 802687a:	2300      	movs	r3, #0
 802687c:	220a      	movs	r2, #10
 802687e:	4630      	mov	r0, r6
 8026880:	f000 fc0a 	bl	8027098 <__multadd>
 8026884:	4607      	mov	r7, r0
 8026886:	e7f0      	b.n	802686a <_dtoa_r+0xa12>
 8026888:	f1ba 0f00 	cmp.w	sl, #0
 802688c:	9a01      	ldr	r2, [sp, #4]
 802688e:	bfcc      	ite	gt
 8026890:	46d0      	movgt	r8, sl
 8026892:	f04f 0801 	movle.w	r8, #1
 8026896:	4490      	add	r8, r2
 8026898:	f04f 0900 	mov.w	r9, #0
 802689c:	4629      	mov	r1, r5
 802689e:	2201      	movs	r2, #1
 80268a0:	4630      	mov	r0, r6
 80268a2:	9302      	str	r3, [sp, #8]
 80268a4:	f000 fda8 	bl	80273f8 <__lshift>
 80268a8:	4621      	mov	r1, r4
 80268aa:	4605      	mov	r5, r0
 80268ac:	f000 fe14 	bl	80274d8 <__mcmp>
 80268b0:	2800      	cmp	r0, #0
 80268b2:	dcb1      	bgt.n	8026818 <_dtoa_r+0x9c0>
 80268b4:	d102      	bne.n	80268bc <_dtoa_r+0xa64>
 80268b6:	9b02      	ldr	r3, [sp, #8]
 80268b8:	07db      	lsls	r3, r3, #31
 80268ba:	d4ad      	bmi.n	8026818 <_dtoa_r+0x9c0>
 80268bc:	4643      	mov	r3, r8
 80268be:	4698      	mov	r8, r3
 80268c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80268c4:	2a30      	cmp	r2, #48	; 0x30
 80268c6:	d0fa      	beq.n	80268be <_dtoa_r+0xa66>
 80268c8:	e6f6      	b.n	80266b8 <_dtoa_r+0x860>
 80268ca:	9a01      	ldr	r2, [sp, #4]
 80268cc:	429a      	cmp	r2, r3
 80268ce:	d1a4      	bne.n	802681a <_dtoa_r+0x9c2>
 80268d0:	f10b 0b01 	add.w	fp, fp, #1
 80268d4:	2331      	movs	r3, #49	; 0x31
 80268d6:	e778      	b.n	80267ca <_dtoa_r+0x972>
 80268d8:	4b14      	ldr	r3, [pc, #80]	; (802692c <_dtoa_r+0xad4>)
 80268da:	f7ff bb27 	b.w	8025f2c <_dtoa_r+0xd4>
 80268de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80268e0:	2b00      	cmp	r3, #0
 80268e2:	f47f ab03 	bne.w	8025eec <_dtoa_r+0x94>
 80268e6:	4b12      	ldr	r3, [pc, #72]	; (8026930 <_dtoa_r+0xad8>)
 80268e8:	f7ff bb20 	b.w	8025f2c <_dtoa_r+0xd4>
 80268ec:	f1ba 0f00 	cmp.w	sl, #0
 80268f0:	dc03      	bgt.n	80268fa <_dtoa_r+0xaa2>
 80268f2:	9b06      	ldr	r3, [sp, #24]
 80268f4:	2b02      	cmp	r3, #2
 80268f6:	f73f aec7 	bgt.w	8026688 <_dtoa_r+0x830>
 80268fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80268fe:	4621      	mov	r1, r4
 8026900:	4628      	mov	r0, r5
 8026902:	f7ff fa1d 	bl	8025d40 <quorem>
 8026906:	f100 0330 	add.w	r3, r0, #48	; 0x30
 802690a:	f808 3b01 	strb.w	r3, [r8], #1
 802690e:	9a01      	ldr	r2, [sp, #4]
 8026910:	eba8 0202 	sub.w	r2, r8, r2
 8026914:	4592      	cmp	sl, r2
 8026916:	ddb7      	ble.n	8026888 <_dtoa_r+0xa30>
 8026918:	4629      	mov	r1, r5
 802691a:	2300      	movs	r3, #0
 802691c:	220a      	movs	r2, #10
 802691e:	4630      	mov	r0, r6
 8026920:	f000 fbba 	bl	8027098 <__multadd>
 8026924:	4605      	mov	r5, r0
 8026926:	e7ea      	b.n	80268fe <_dtoa_r+0xaa6>
 8026928:	080e292d 	.word	0x080e292d
 802692c:	080e2b11 	.word	0x080e2b11
 8026930:	080e28c5 	.word	0x080e28c5

08026934 <__errno>:
 8026934:	4b01      	ldr	r3, [pc, #4]	; (802693c <__errno+0x8>)
 8026936:	6818      	ldr	r0, [r3, #0]
 8026938:	4770      	bx	lr
 802693a:	bf00      	nop
 802693c:	20000488 	.word	0x20000488

08026940 <__sflush_r>:
 8026940:	898a      	ldrh	r2, [r1, #12]
 8026942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026946:	4605      	mov	r5, r0
 8026948:	0710      	lsls	r0, r2, #28
 802694a:	460c      	mov	r4, r1
 802694c:	d458      	bmi.n	8026a00 <__sflush_r+0xc0>
 802694e:	684b      	ldr	r3, [r1, #4]
 8026950:	2b00      	cmp	r3, #0
 8026952:	dc05      	bgt.n	8026960 <__sflush_r+0x20>
 8026954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026956:	2b00      	cmp	r3, #0
 8026958:	dc02      	bgt.n	8026960 <__sflush_r+0x20>
 802695a:	2000      	movs	r0, #0
 802695c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026962:	2e00      	cmp	r6, #0
 8026964:	d0f9      	beq.n	802695a <__sflush_r+0x1a>
 8026966:	2300      	movs	r3, #0
 8026968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802696c:	682f      	ldr	r7, [r5, #0]
 802696e:	602b      	str	r3, [r5, #0]
 8026970:	d032      	beq.n	80269d8 <__sflush_r+0x98>
 8026972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026974:	89a3      	ldrh	r3, [r4, #12]
 8026976:	075a      	lsls	r2, r3, #29
 8026978:	d505      	bpl.n	8026986 <__sflush_r+0x46>
 802697a:	6863      	ldr	r3, [r4, #4]
 802697c:	1ac0      	subs	r0, r0, r3
 802697e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026980:	b10b      	cbz	r3, 8026986 <__sflush_r+0x46>
 8026982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026984:	1ac0      	subs	r0, r0, r3
 8026986:	2300      	movs	r3, #0
 8026988:	4602      	mov	r2, r0
 802698a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802698c:	6a21      	ldr	r1, [r4, #32]
 802698e:	4628      	mov	r0, r5
 8026990:	47b0      	blx	r6
 8026992:	1c43      	adds	r3, r0, #1
 8026994:	89a3      	ldrh	r3, [r4, #12]
 8026996:	d106      	bne.n	80269a6 <__sflush_r+0x66>
 8026998:	6829      	ldr	r1, [r5, #0]
 802699a:	291d      	cmp	r1, #29
 802699c:	d82c      	bhi.n	80269f8 <__sflush_r+0xb8>
 802699e:	4a2a      	ldr	r2, [pc, #168]	; (8026a48 <__sflush_r+0x108>)
 80269a0:	40ca      	lsrs	r2, r1
 80269a2:	07d6      	lsls	r6, r2, #31
 80269a4:	d528      	bpl.n	80269f8 <__sflush_r+0xb8>
 80269a6:	2200      	movs	r2, #0
 80269a8:	6062      	str	r2, [r4, #4]
 80269aa:	04d9      	lsls	r1, r3, #19
 80269ac:	6922      	ldr	r2, [r4, #16]
 80269ae:	6022      	str	r2, [r4, #0]
 80269b0:	d504      	bpl.n	80269bc <__sflush_r+0x7c>
 80269b2:	1c42      	adds	r2, r0, #1
 80269b4:	d101      	bne.n	80269ba <__sflush_r+0x7a>
 80269b6:	682b      	ldr	r3, [r5, #0]
 80269b8:	b903      	cbnz	r3, 80269bc <__sflush_r+0x7c>
 80269ba:	6560      	str	r0, [r4, #84]	; 0x54
 80269bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80269be:	602f      	str	r7, [r5, #0]
 80269c0:	2900      	cmp	r1, #0
 80269c2:	d0ca      	beq.n	802695a <__sflush_r+0x1a>
 80269c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80269c8:	4299      	cmp	r1, r3
 80269ca:	d002      	beq.n	80269d2 <__sflush_r+0x92>
 80269cc:	4628      	mov	r0, r5
 80269ce:	f7fd f853 	bl	8023a78 <_free_r>
 80269d2:	2000      	movs	r0, #0
 80269d4:	6360      	str	r0, [r4, #52]	; 0x34
 80269d6:	e7c1      	b.n	802695c <__sflush_r+0x1c>
 80269d8:	6a21      	ldr	r1, [r4, #32]
 80269da:	2301      	movs	r3, #1
 80269dc:	4628      	mov	r0, r5
 80269de:	47b0      	blx	r6
 80269e0:	1c41      	adds	r1, r0, #1
 80269e2:	d1c7      	bne.n	8026974 <__sflush_r+0x34>
 80269e4:	682b      	ldr	r3, [r5, #0]
 80269e6:	2b00      	cmp	r3, #0
 80269e8:	d0c4      	beq.n	8026974 <__sflush_r+0x34>
 80269ea:	2b1d      	cmp	r3, #29
 80269ec:	d001      	beq.n	80269f2 <__sflush_r+0xb2>
 80269ee:	2b16      	cmp	r3, #22
 80269f0:	d101      	bne.n	80269f6 <__sflush_r+0xb6>
 80269f2:	602f      	str	r7, [r5, #0]
 80269f4:	e7b1      	b.n	802695a <__sflush_r+0x1a>
 80269f6:	89a3      	ldrh	r3, [r4, #12]
 80269f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80269fc:	81a3      	strh	r3, [r4, #12]
 80269fe:	e7ad      	b.n	802695c <__sflush_r+0x1c>
 8026a00:	690f      	ldr	r7, [r1, #16]
 8026a02:	2f00      	cmp	r7, #0
 8026a04:	d0a9      	beq.n	802695a <__sflush_r+0x1a>
 8026a06:	0793      	lsls	r3, r2, #30
 8026a08:	680e      	ldr	r6, [r1, #0]
 8026a0a:	bf08      	it	eq
 8026a0c:	694b      	ldreq	r3, [r1, #20]
 8026a0e:	600f      	str	r7, [r1, #0]
 8026a10:	bf18      	it	ne
 8026a12:	2300      	movne	r3, #0
 8026a14:	eba6 0807 	sub.w	r8, r6, r7
 8026a18:	608b      	str	r3, [r1, #8]
 8026a1a:	f1b8 0f00 	cmp.w	r8, #0
 8026a1e:	dd9c      	ble.n	802695a <__sflush_r+0x1a>
 8026a20:	6a21      	ldr	r1, [r4, #32]
 8026a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026a24:	4643      	mov	r3, r8
 8026a26:	463a      	mov	r2, r7
 8026a28:	4628      	mov	r0, r5
 8026a2a:	47b0      	blx	r6
 8026a2c:	2800      	cmp	r0, #0
 8026a2e:	dc06      	bgt.n	8026a3e <__sflush_r+0xfe>
 8026a30:	89a3      	ldrh	r3, [r4, #12]
 8026a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026a36:	81a3      	strh	r3, [r4, #12]
 8026a38:	f04f 30ff 	mov.w	r0, #4294967295
 8026a3c:	e78e      	b.n	802695c <__sflush_r+0x1c>
 8026a3e:	4407      	add	r7, r0
 8026a40:	eba8 0800 	sub.w	r8, r8, r0
 8026a44:	e7e9      	b.n	8026a1a <__sflush_r+0xda>
 8026a46:	bf00      	nop
 8026a48:	20400001 	.word	0x20400001

08026a4c <_fflush_r>:
 8026a4c:	b538      	push	{r3, r4, r5, lr}
 8026a4e:	690b      	ldr	r3, [r1, #16]
 8026a50:	4605      	mov	r5, r0
 8026a52:	460c      	mov	r4, r1
 8026a54:	b913      	cbnz	r3, 8026a5c <_fflush_r+0x10>
 8026a56:	2500      	movs	r5, #0
 8026a58:	4628      	mov	r0, r5
 8026a5a:	bd38      	pop	{r3, r4, r5, pc}
 8026a5c:	b118      	cbz	r0, 8026a66 <_fflush_r+0x1a>
 8026a5e:	6983      	ldr	r3, [r0, #24]
 8026a60:	b90b      	cbnz	r3, 8026a66 <_fflush_r+0x1a>
 8026a62:	f000 f887 	bl	8026b74 <__sinit>
 8026a66:	4b14      	ldr	r3, [pc, #80]	; (8026ab8 <_fflush_r+0x6c>)
 8026a68:	429c      	cmp	r4, r3
 8026a6a:	d11b      	bne.n	8026aa4 <_fflush_r+0x58>
 8026a6c:	686c      	ldr	r4, [r5, #4]
 8026a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026a72:	2b00      	cmp	r3, #0
 8026a74:	d0ef      	beq.n	8026a56 <_fflush_r+0xa>
 8026a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026a78:	07d0      	lsls	r0, r2, #31
 8026a7a:	d404      	bmi.n	8026a86 <_fflush_r+0x3a>
 8026a7c:	0599      	lsls	r1, r3, #22
 8026a7e:	d402      	bmi.n	8026a86 <_fflush_r+0x3a>
 8026a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026a82:	f7fc fd33 	bl	80234ec <__retarget_lock_acquire_recursive>
 8026a86:	4628      	mov	r0, r5
 8026a88:	4621      	mov	r1, r4
 8026a8a:	f7ff ff59 	bl	8026940 <__sflush_r>
 8026a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026a90:	07da      	lsls	r2, r3, #31
 8026a92:	4605      	mov	r5, r0
 8026a94:	d4e0      	bmi.n	8026a58 <_fflush_r+0xc>
 8026a96:	89a3      	ldrh	r3, [r4, #12]
 8026a98:	059b      	lsls	r3, r3, #22
 8026a9a:	d4dd      	bmi.n	8026a58 <_fflush_r+0xc>
 8026a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026a9e:	f7fc fd27 	bl	80234f0 <__retarget_lock_release_recursive>
 8026aa2:	e7d9      	b.n	8026a58 <_fflush_r+0xc>
 8026aa4:	4b05      	ldr	r3, [pc, #20]	; (8026abc <_fflush_r+0x70>)
 8026aa6:	429c      	cmp	r4, r3
 8026aa8:	d101      	bne.n	8026aae <_fflush_r+0x62>
 8026aaa:	68ac      	ldr	r4, [r5, #8]
 8026aac:	e7df      	b.n	8026a6e <_fflush_r+0x22>
 8026aae:	4b04      	ldr	r3, [pc, #16]	; (8026ac0 <_fflush_r+0x74>)
 8026ab0:	429c      	cmp	r4, r3
 8026ab2:	bf08      	it	eq
 8026ab4:	68ec      	ldreq	r4, [r5, #12]
 8026ab6:	e7da      	b.n	8026a6e <_fflush_r+0x22>
 8026ab8:	080e2960 	.word	0x080e2960
 8026abc:	080e2980 	.word	0x080e2980
 8026ac0:	080e2940 	.word	0x080e2940

08026ac4 <std>:
 8026ac4:	2300      	movs	r3, #0
 8026ac6:	b510      	push	{r4, lr}
 8026ac8:	4604      	mov	r4, r0
 8026aca:	e9c0 3300 	strd	r3, r3, [r0]
 8026ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026ad2:	6083      	str	r3, [r0, #8]
 8026ad4:	8181      	strh	r1, [r0, #12]
 8026ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8026ad8:	81c2      	strh	r2, [r0, #14]
 8026ada:	6183      	str	r3, [r0, #24]
 8026adc:	4619      	mov	r1, r3
 8026ade:	2208      	movs	r2, #8
 8026ae0:	305c      	adds	r0, #92	; 0x5c
 8026ae2:	f7fc fd4f 	bl	8023584 <memset>
 8026ae6:	4b05      	ldr	r3, [pc, #20]	; (8026afc <std+0x38>)
 8026ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8026aea:	4b05      	ldr	r3, [pc, #20]	; (8026b00 <std+0x3c>)
 8026aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8026aee:	4b05      	ldr	r3, [pc, #20]	; (8026b04 <std+0x40>)
 8026af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026af2:	4b05      	ldr	r3, [pc, #20]	; (8026b08 <std+0x44>)
 8026af4:	6224      	str	r4, [r4, #32]
 8026af6:	6323      	str	r3, [r4, #48]	; 0x30
 8026af8:	bd10      	pop	{r4, pc}
 8026afa:	bf00      	nop
 8026afc:	08024865 	.word	0x08024865
 8026b00:	0802488b 	.word	0x0802488b
 8026b04:	080248c3 	.word	0x080248c3
 8026b08:	080248e7 	.word	0x080248e7

08026b0c <_cleanup_r>:
 8026b0c:	4901      	ldr	r1, [pc, #4]	; (8026b14 <_cleanup_r+0x8>)
 8026b0e:	f000 b8c1 	b.w	8026c94 <_fwalk_reent>
 8026b12:	bf00      	nop
 8026b14:	08026a4d 	.word	0x08026a4d

08026b18 <__sfmoreglue>:
 8026b18:	b570      	push	{r4, r5, r6, lr}
 8026b1a:	2268      	movs	r2, #104	; 0x68
 8026b1c:	1e4d      	subs	r5, r1, #1
 8026b1e:	4355      	muls	r5, r2
 8026b20:	460e      	mov	r6, r1
 8026b22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026b26:	f7fd f813 	bl	8023b50 <_malloc_r>
 8026b2a:	4604      	mov	r4, r0
 8026b2c:	b140      	cbz	r0, 8026b40 <__sfmoreglue+0x28>
 8026b2e:	2100      	movs	r1, #0
 8026b30:	e9c0 1600 	strd	r1, r6, [r0]
 8026b34:	300c      	adds	r0, #12
 8026b36:	60a0      	str	r0, [r4, #8]
 8026b38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026b3c:	f7fc fd22 	bl	8023584 <memset>
 8026b40:	4620      	mov	r0, r4
 8026b42:	bd70      	pop	{r4, r5, r6, pc}

08026b44 <__sfp_lock_acquire>:
 8026b44:	4801      	ldr	r0, [pc, #4]	; (8026b4c <__sfp_lock_acquire+0x8>)
 8026b46:	f7fc bcd1 	b.w	80234ec <__retarget_lock_acquire_recursive>
 8026b4a:	bf00      	nop
 8026b4c:	2002f8f2 	.word	0x2002f8f2

08026b50 <__sfp_lock_release>:
 8026b50:	4801      	ldr	r0, [pc, #4]	; (8026b58 <__sfp_lock_release+0x8>)
 8026b52:	f7fc bccd 	b.w	80234f0 <__retarget_lock_release_recursive>
 8026b56:	bf00      	nop
 8026b58:	2002f8f2 	.word	0x2002f8f2

08026b5c <__sinit_lock_acquire>:
 8026b5c:	4801      	ldr	r0, [pc, #4]	; (8026b64 <__sinit_lock_acquire+0x8>)
 8026b5e:	f7fc bcc5 	b.w	80234ec <__retarget_lock_acquire_recursive>
 8026b62:	bf00      	nop
 8026b64:	2002f8f3 	.word	0x2002f8f3

08026b68 <__sinit_lock_release>:
 8026b68:	4801      	ldr	r0, [pc, #4]	; (8026b70 <__sinit_lock_release+0x8>)
 8026b6a:	f7fc bcc1 	b.w	80234f0 <__retarget_lock_release_recursive>
 8026b6e:	bf00      	nop
 8026b70:	2002f8f3 	.word	0x2002f8f3

08026b74 <__sinit>:
 8026b74:	b510      	push	{r4, lr}
 8026b76:	4604      	mov	r4, r0
 8026b78:	f7ff fff0 	bl	8026b5c <__sinit_lock_acquire>
 8026b7c:	69a3      	ldr	r3, [r4, #24]
 8026b7e:	b11b      	cbz	r3, 8026b88 <__sinit+0x14>
 8026b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026b84:	f7ff bff0 	b.w	8026b68 <__sinit_lock_release>
 8026b88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026b8c:	6523      	str	r3, [r4, #80]	; 0x50
 8026b8e:	4b13      	ldr	r3, [pc, #76]	; (8026bdc <__sinit+0x68>)
 8026b90:	4a13      	ldr	r2, [pc, #76]	; (8026be0 <__sinit+0x6c>)
 8026b92:	681b      	ldr	r3, [r3, #0]
 8026b94:	62a2      	str	r2, [r4, #40]	; 0x28
 8026b96:	42a3      	cmp	r3, r4
 8026b98:	bf04      	itt	eq
 8026b9a:	2301      	moveq	r3, #1
 8026b9c:	61a3      	streq	r3, [r4, #24]
 8026b9e:	4620      	mov	r0, r4
 8026ba0:	f000 f820 	bl	8026be4 <__sfp>
 8026ba4:	6060      	str	r0, [r4, #4]
 8026ba6:	4620      	mov	r0, r4
 8026ba8:	f000 f81c 	bl	8026be4 <__sfp>
 8026bac:	60a0      	str	r0, [r4, #8]
 8026bae:	4620      	mov	r0, r4
 8026bb0:	f000 f818 	bl	8026be4 <__sfp>
 8026bb4:	2200      	movs	r2, #0
 8026bb6:	60e0      	str	r0, [r4, #12]
 8026bb8:	2104      	movs	r1, #4
 8026bba:	6860      	ldr	r0, [r4, #4]
 8026bbc:	f7ff ff82 	bl	8026ac4 <std>
 8026bc0:	68a0      	ldr	r0, [r4, #8]
 8026bc2:	2201      	movs	r2, #1
 8026bc4:	2109      	movs	r1, #9
 8026bc6:	f7ff ff7d 	bl	8026ac4 <std>
 8026bca:	68e0      	ldr	r0, [r4, #12]
 8026bcc:	2202      	movs	r2, #2
 8026bce:	2112      	movs	r1, #18
 8026bd0:	f7ff ff78 	bl	8026ac4 <std>
 8026bd4:	2301      	movs	r3, #1
 8026bd6:	61a3      	str	r3, [r4, #24]
 8026bd8:	e7d2      	b.n	8026b80 <__sinit+0xc>
 8026bda:	bf00      	nop
 8026bdc:	080e2350 	.word	0x080e2350
 8026be0:	08026b0d 	.word	0x08026b0d

08026be4 <__sfp>:
 8026be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026be6:	4607      	mov	r7, r0
 8026be8:	f7ff ffac 	bl	8026b44 <__sfp_lock_acquire>
 8026bec:	4b1e      	ldr	r3, [pc, #120]	; (8026c68 <__sfp+0x84>)
 8026bee:	681e      	ldr	r6, [r3, #0]
 8026bf0:	69b3      	ldr	r3, [r6, #24]
 8026bf2:	b913      	cbnz	r3, 8026bfa <__sfp+0x16>
 8026bf4:	4630      	mov	r0, r6
 8026bf6:	f7ff ffbd 	bl	8026b74 <__sinit>
 8026bfa:	3648      	adds	r6, #72	; 0x48
 8026bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026c00:	3b01      	subs	r3, #1
 8026c02:	d503      	bpl.n	8026c0c <__sfp+0x28>
 8026c04:	6833      	ldr	r3, [r6, #0]
 8026c06:	b30b      	cbz	r3, 8026c4c <__sfp+0x68>
 8026c08:	6836      	ldr	r6, [r6, #0]
 8026c0a:	e7f7      	b.n	8026bfc <__sfp+0x18>
 8026c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026c10:	b9d5      	cbnz	r5, 8026c48 <__sfp+0x64>
 8026c12:	4b16      	ldr	r3, [pc, #88]	; (8026c6c <__sfp+0x88>)
 8026c14:	60e3      	str	r3, [r4, #12]
 8026c16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026c1a:	6665      	str	r5, [r4, #100]	; 0x64
 8026c1c:	f7fc fc64 	bl	80234e8 <__retarget_lock_init_recursive>
 8026c20:	f7ff ff96 	bl	8026b50 <__sfp_lock_release>
 8026c24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026c28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026c2c:	6025      	str	r5, [r4, #0]
 8026c2e:	61a5      	str	r5, [r4, #24]
 8026c30:	2208      	movs	r2, #8
 8026c32:	4629      	mov	r1, r5
 8026c34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026c38:	f7fc fca4 	bl	8023584 <memset>
 8026c3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026c40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026c44:	4620      	mov	r0, r4
 8026c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026c48:	3468      	adds	r4, #104	; 0x68
 8026c4a:	e7d9      	b.n	8026c00 <__sfp+0x1c>
 8026c4c:	2104      	movs	r1, #4
 8026c4e:	4638      	mov	r0, r7
 8026c50:	f7ff ff62 	bl	8026b18 <__sfmoreglue>
 8026c54:	4604      	mov	r4, r0
 8026c56:	6030      	str	r0, [r6, #0]
 8026c58:	2800      	cmp	r0, #0
 8026c5a:	d1d5      	bne.n	8026c08 <__sfp+0x24>
 8026c5c:	f7ff ff78 	bl	8026b50 <__sfp_lock_release>
 8026c60:	230c      	movs	r3, #12
 8026c62:	603b      	str	r3, [r7, #0]
 8026c64:	e7ee      	b.n	8026c44 <__sfp+0x60>
 8026c66:	bf00      	nop
 8026c68:	080e2350 	.word	0x080e2350
 8026c6c:	ffff0001 	.word	0xffff0001

08026c70 <fiprintf>:
 8026c70:	b40e      	push	{r1, r2, r3}
 8026c72:	b503      	push	{r0, r1, lr}
 8026c74:	4601      	mov	r1, r0
 8026c76:	ab03      	add	r3, sp, #12
 8026c78:	4805      	ldr	r0, [pc, #20]	; (8026c90 <fiprintf+0x20>)
 8026c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8026c7e:	6800      	ldr	r0, [r0, #0]
 8026c80:	9301      	str	r3, [sp, #4]
 8026c82:	f001 f8c7 	bl	8027e14 <_vfiprintf_r>
 8026c86:	b002      	add	sp, #8
 8026c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8026c8c:	b003      	add	sp, #12
 8026c8e:	4770      	bx	lr
 8026c90:	20000488 	.word	0x20000488

08026c94 <_fwalk_reent>:
 8026c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026c98:	4606      	mov	r6, r0
 8026c9a:	4688      	mov	r8, r1
 8026c9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026ca0:	2700      	movs	r7, #0
 8026ca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026ca6:	f1b9 0901 	subs.w	r9, r9, #1
 8026caa:	d505      	bpl.n	8026cb8 <_fwalk_reent+0x24>
 8026cac:	6824      	ldr	r4, [r4, #0]
 8026cae:	2c00      	cmp	r4, #0
 8026cb0:	d1f7      	bne.n	8026ca2 <_fwalk_reent+0xe>
 8026cb2:	4638      	mov	r0, r7
 8026cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026cb8:	89ab      	ldrh	r3, [r5, #12]
 8026cba:	2b01      	cmp	r3, #1
 8026cbc:	d907      	bls.n	8026cce <_fwalk_reent+0x3a>
 8026cbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026cc2:	3301      	adds	r3, #1
 8026cc4:	d003      	beq.n	8026cce <_fwalk_reent+0x3a>
 8026cc6:	4629      	mov	r1, r5
 8026cc8:	4630      	mov	r0, r6
 8026cca:	47c0      	blx	r8
 8026ccc:	4307      	orrs	r7, r0
 8026cce:	3568      	adds	r5, #104	; 0x68
 8026cd0:	e7e9      	b.n	8026ca6 <_fwalk_reent+0x12>
	...

08026cd4 <_findenv_r>:
 8026cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cd8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8026d48 <_findenv_r+0x74>
 8026cdc:	4607      	mov	r7, r0
 8026cde:	4689      	mov	r9, r1
 8026ce0:	4616      	mov	r6, r2
 8026ce2:	f001 fc17 	bl	8028514 <__env_lock>
 8026ce6:	f8da 4000 	ldr.w	r4, [sl]
 8026cea:	b134      	cbz	r4, 8026cfa <_findenv_r+0x26>
 8026cec:	464b      	mov	r3, r9
 8026cee:	4698      	mov	r8, r3
 8026cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026cf4:	b13a      	cbz	r2, 8026d06 <_findenv_r+0x32>
 8026cf6:	2a3d      	cmp	r2, #61	; 0x3d
 8026cf8:	d1f9      	bne.n	8026cee <_findenv_r+0x1a>
 8026cfa:	4638      	mov	r0, r7
 8026cfc:	f001 fc10 	bl	8028520 <__env_unlock>
 8026d00:	2000      	movs	r0, #0
 8026d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d06:	eba8 0809 	sub.w	r8, r8, r9
 8026d0a:	46a3      	mov	fp, r4
 8026d0c:	f854 0b04 	ldr.w	r0, [r4], #4
 8026d10:	2800      	cmp	r0, #0
 8026d12:	d0f2      	beq.n	8026cfa <_findenv_r+0x26>
 8026d14:	4642      	mov	r2, r8
 8026d16:	4649      	mov	r1, r9
 8026d18:	f7fe fb42 	bl	80253a0 <strncmp>
 8026d1c:	2800      	cmp	r0, #0
 8026d1e:	d1f4      	bne.n	8026d0a <_findenv_r+0x36>
 8026d20:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8026d24:	eb03 0508 	add.w	r5, r3, r8
 8026d28:	f813 3008 	ldrb.w	r3, [r3, r8]
 8026d2c:	2b3d      	cmp	r3, #61	; 0x3d
 8026d2e:	d1ec      	bne.n	8026d0a <_findenv_r+0x36>
 8026d30:	f8da 3000 	ldr.w	r3, [sl]
 8026d34:	ebab 0303 	sub.w	r3, fp, r3
 8026d38:	109b      	asrs	r3, r3, #2
 8026d3a:	4638      	mov	r0, r7
 8026d3c:	6033      	str	r3, [r6, #0]
 8026d3e:	f001 fbef 	bl	8028520 <__env_unlock>
 8026d42:	1c68      	adds	r0, r5, #1
 8026d44:	e7dd      	b.n	8026d02 <_findenv_r+0x2e>
 8026d46:	bf00      	nop
 8026d48:	20000278 	.word	0x20000278

08026d4c <_getenv_r>:
 8026d4c:	b507      	push	{r0, r1, r2, lr}
 8026d4e:	aa01      	add	r2, sp, #4
 8026d50:	f7ff ffc0 	bl	8026cd4 <_findenv_r>
 8026d54:	b003      	add	sp, #12
 8026d56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08026d5c <__gettzinfo>:
 8026d5c:	4800      	ldr	r0, [pc, #0]	; (8026d60 <__gettzinfo+0x4>)
 8026d5e:	4770      	bx	lr
 8026d60:	200004f8 	.word	0x200004f8

08026d64 <gmtime_r>:
 8026d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d68:	e9d0 6700 	ldrd	r6, r7, [r0]
 8026d6c:	460c      	mov	r4, r1
 8026d6e:	4a4f      	ldr	r2, [pc, #316]	; (8026eac <gmtime_r+0x148>)
 8026d70:	2300      	movs	r3, #0
 8026d72:	4630      	mov	r0, r6
 8026d74:	4639      	mov	r1, r7
 8026d76:	f7d9 facb 	bl	8000310 <__aeabi_ldivmod>
 8026d7a:	4639      	mov	r1, r7
 8026d7c:	4605      	mov	r5, r0
 8026d7e:	4a4b      	ldr	r2, [pc, #300]	; (8026eac <gmtime_r+0x148>)
 8026d80:	4630      	mov	r0, r6
 8026d82:	2300      	movs	r3, #0
 8026d84:	f7d9 fac4 	bl	8000310 <__aeabi_ldivmod>
 8026d88:	2a00      	cmp	r2, #0
 8026d8a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8026d8e:	bfb7      	itett	lt
 8026d90:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8026d94:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8026d98:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8026d9c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8026da0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8026da4:	fbb2 f1f0 	udiv	r1, r2, r0
 8026da8:	fb00 2211 	mls	r2, r0, r1, r2
 8026dac:	203c      	movs	r0, #60	; 0x3c
 8026dae:	60a1      	str	r1, [r4, #8]
 8026db0:	fbb2 f1f0 	udiv	r1, r2, r0
 8026db4:	fb00 2211 	mls	r2, r0, r1, r2
 8026db8:	6061      	str	r1, [r4, #4]
 8026dba:	6022      	str	r2, [r4, #0]
 8026dbc:	2107      	movs	r1, #7
 8026dbe:	1cda      	adds	r2, r3, #3
 8026dc0:	fb92 f1f1 	sdiv	r1, r2, r1
 8026dc4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8026dc8:	1a52      	subs	r2, r2, r1
 8026dca:	bf48      	it	mi
 8026dcc:	3207      	addmi	r2, #7
 8026dce:	4d38      	ldr	r5, [pc, #224]	; (8026eb0 <gmtime_r+0x14c>)
 8026dd0:	4838      	ldr	r0, [pc, #224]	; (8026eb4 <gmtime_r+0x150>)
 8026dd2:	61a2      	str	r2, [r4, #24]
 8026dd4:	2b00      	cmp	r3, #0
 8026dd6:	bfb7      	itett	lt
 8026dd8:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8026ddc:	fb93 f5f5 	sdivge	r5, r3, r5
 8026de0:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8026de4:	fb92 f5f5 	sdivlt	r5, r2, r5
 8026de8:	fb00 3005 	mla	r0, r0, r5, r3
 8026dec:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8026df0:	fbb0 f2f2 	udiv	r2, r0, r2
 8026df4:	4402      	add	r2, r0
 8026df6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8026dfa:	fbb0 f1f3 	udiv	r1, r0, r3
 8026dfe:	1a52      	subs	r2, r2, r1
 8026e00:	f240 1c6d 	movw	ip, #365	; 0x16d
 8026e04:	492c      	ldr	r1, [pc, #176]	; (8026eb8 <gmtime_r+0x154>)
 8026e06:	fbb0 f1f1 	udiv	r1, r0, r1
 8026e0a:	2764      	movs	r7, #100	; 0x64
 8026e0c:	1a52      	subs	r2, r2, r1
 8026e0e:	fbb2 f1fc 	udiv	r1, r2, ip
 8026e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8026e16:	fbb1 f6f7 	udiv	r6, r1, r7
 8026e1a:	1af3      	subs	r3, r6, r3
 8026e1c:	4403      	add	r3, r0
 8026e1e:	fb0c 3311 	mls	r3, ip, r1, r3
 8026e22:	2299      	movs	r2, #153	; 0x99
 8026e24:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8026e28:	f10e 0e02 	add.w	lr, lr, #2
 8026e2c:	f103 0c01 	add.w	ip, r3, #1
 8026e30:	fbbe f0f2 	udiv	r0, lr, r2
 8026e34:	4342      	muls	r2, r0
 8026e36:	3202      	adds	r2, #2
 8026e38:	f04f 0805 	mov.w	r8, #5
 8026e3c:	fbb2 f2f8 	udiv	r2, r2, r8
 8026e40:	ebac 0c02 	sub.w	ip, ip, r2
 8026e44:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8026e48:	4596      	cmp	lr, r2
 8026e4a:	bf94      	ite	ls
 8026e4c:	2202      	movls	r2, #2
 8026e4e:	f06f 0209 	mvnhi.w	r2, #9
 8026e52:	4410      	add	r0, r2
 8026e54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8026e58:	fb02 1505 	mla	r5, r2, r5, r1
 8026e5c:	2801      	cmp	r0, #1
 8026e5e:	bf98      	it	ls
 8026e60:	3501      	addls	r5, #1
 8026e62:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8026e66:	d30d      	bcc.n	8026e84 <gmtime_r+0x120>
 8026e68:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8026e6c:	61e3      	str	r3, [r4, #28]
 8026e6e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8026e72:	2300      	movs	r3, #0
 8026e74:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8026e78:	f8c4 c00c 	str.w	ip, [r4, #12]
 8026e7c:	6223      	str	r3, [r4, #32]
 8026e7e:	4620      	mov	r0, r4
 8026e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026e84:	078a      	lsls	r2, r1, #30
 8026e86:	d102      	bne.n	8026e8e <gmtime_r+0x12a>
 8026e88:	fb07 1616 	mls	r6, r7, r6, r1
 8026e8c:	b95e      	cbnz	r6, 8026ea6 <gmtime_r+0x142>
 8026e8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8026e92:	fbb1 f6f2 	udiv	r6, r1, r2
 8026e96:	fb02 1216 	mls	r2, r2, r6, r1
 8026e9a:	fab2 f282 	clz	r2, r2
 8026e9e:	0952      	lsrs	r2, r2, #5
 8026ea0:	333b      	adds	r3, #59	; 0x3b
 8026ea2:	4413      	add	r3, r2
 8026ea4:	e7e2      	b.n	8026e6c <gmtime_r+0x108>
 8026ea6:	2201      	movs	r2, #1
 8026ea8:	e7fa      	b.n	8026ea0 <gmtime_r+0x13c>
 8026eaa:	bf00      	nop
 8026eac:	00015180 	.word	0x00015180
 8026eb0:	00023ab1 	.word	0x00023ab1
 8026eb4:	fffdc54f 	.word	0xfffdc54f
 8026eb8:	00023ab0 	.word	0x00023ab0

08026ebc <labs>:
 8026ebc:	2800      	cmp	r0, #0
 8026ebe:	bfb8      	it	lt
 8026ec0:	4240      	neglt	r0, r0
 8026ec2:	4770      	bx	lr

08026ec4 <_localeconv_r>:
 8026ec4:	4800      	ldr	r0, [pc, #0]	; (8026ec8 <_localeconv_r+0x4>)
 8026ec6:	4770      	bx	lr
 8026ec8:	20000640 	.word	0x20000640

08026ecc <_lseek_r>:
 8026ecc:	b538      	push	{r3, r4, r5, lr}
 8026ece:	4d07      	ldr	r5, [pc, #28]	; (8026eec <_lseek_r+0x20>)
 8026ed0:	4604      	mov	r4, r0
 8026ed2:	4608      	mov	r0, r1
 8026ed4:	4611      	mov	r1, r2
 8026ed6:	2200      	movs	r2, #0
 8026ed8:	602a      	str	r2, [r5, #0]
 8026eda:	461a      	mov	r2, r3
 8026edc:	f7df fa14 	bl	8006308 <_lseek>
 8026ee0:	1c43      	adds	r3, r0, #1
 8026ee2:	d102      	bne.n	8026eea <_lseek_r+0x1e>
 8026ee4:	682b      	ldr	r3, [r5, #0]
 8026ee6:	b103      	cbz	r3, 8026eea <_lseek_r+0x1e>
 8026ee8:	6023      	str	r3, [r4, #0]
 8026eea:	bd38      	pop	{r3, r4, r5, pc}
 8026eec:	2002e014 	.word	0x2002e014

08026ef0 <__swhatbuf_r>:
 8026ef0:	b570      	push	{r4, r5, r6, lr}
 8026ef2:	460e      	mov	r6, r1
 8026ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026ef8:	2900      	cmp	r1, #0
 8026efa:	b096      	sub	sp, #88	; 0x58
 8026efc:	4614      	mov	r4, r2
 8026efe:	461d      	mov	r5, r3
 8026f00:	da08      	bge.n	8026f14 <__swhatbuf_r+0x24>
 8026f02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026f06:	2200      	movs	r2, #0
 8026f08:	602a      	str	r2, [r5, #0]
 8026f0a:	061a      	lsls	r2, r3, #24
 8026f0c:	d410      	bmi.n	8026f30 <__swhatbuf_r+0x40>
 8026f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026f12:	e00e      	b.n	8026f32 <__swhatbuf_r+0x42>
 8026f14:	466a      	mov	r2, sp
 8026f16:	f001 fb09 	bl	802852c <_fstat_r>
 8026f1a:	2800      	cmp	r0, #0
 8026f1c:	dbf1      	blt.n	8026f02 <__swhatbuf_r+0x12>
 8026f1e:	9a01      	ldr	r2, [sp, #4]
 8026f20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026f24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026f28:	425a      	negs	r2, r3
 8026f2a:	415a      	adcs	r2, r3
 8026f2c:	602a      	str	r2, [r5, #0]
 8026f2e:	e7ee      	b.n	8026f0e <__swhatbuf_r+0x1e>
 8026f30:	2340      	movs	r3, #64	; 0x40
 8026f32:	2000      	movs	r0, #0
 8026f34:	6023      	str	r3, [r4, #0]
 8026f36:	b016      	add	sp, #88	; 0x58
 8026f38:	bd70      	pop	{r4, r5, r6, pc}
	...

08026f3c <__smakebuf_r>:
 8026f3c:	898b      	ldrh	r3, [r1, #12]
 8026f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026f40:	079d      	lsls	r5, r3, #30
 8026f42:	4606      	mov	r6, r0
 8026f44:	460c      	mov	r4, r1
 8026f46:	d507      	bpl.n	8026f58 <__smakebuf_r+0x1c>
 8026f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026f4c:	6023      	str	r3, [r4, #0]
 8026f4e:	6123      	str	r3, [r4, #16]
 8026f50:	2301      	movs	r3, #1
 8026f52:	6163      	str	r3, [r4, #20]
 8026f54:	b002      	add	sp, #8
 8026f56:	bd70      	pop	{r4, r5, r6, pc}
 8026f58:	ab01      	add	r3, sp, #4
 8026f5a:	466a      	mov	r2, sp
 8026f5c:	f7ff ffc8 	bl	8026ef0 <__swhatbuf_r>
 8026f60:	9900      	ldr	r1, [sp, #0]
 8026f62:	4605      	mov	r5, r0
 8026f64:	4630      	mov	r0, r6
 8026f66:	f7fc fdf3 	bl	8023b50 <_malloc_r>
 8026f6a:	b948      	cbnz	r0, 8026f80 <__smakebuf_r+0x44>
 8026f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026f70:	059a      	lsls	r2, r3, #22
 8026f72:	d4ef      	bmi.n	8026f54 <__smakebuf_r+0x18>
 8026f74:	f023 0303 	bic.w	r3, r3, #3
 8026f78:	f043 0302 	orr.w	r3, r3, #2
 8026f7c:	81a3      	strh	r3, [r4, #12]
 8026f7e:	e7e3      	b.n	8026f48 <__smakebuf_r+0xc>
 8026f80:	4b0d      	ldr	r3, [pc, #52]	; (8026fb8 <__smakebuf_r+0x7c>)
 8026f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8026f84:	89a3      	ldrh	r3, [r4, #12]
 8026f86:	6020      	str	r0, [r4, #0]
 8026f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026f8c:	81a3      	strh	r3, [r4, #12]
 8026f8e:	9b00      	ldr	r3, [sp, #0]
 8026f90:	6163      	str	r3, [r4, #20]
 8026f92:	9b01      	ldr	r3, [sp, #4]
 8026f94:	6120      	str	r0, [r4, #16]
 8026f96:	b15b      	cbz	r3, 8026fb0 <__smakebuf_r+0x74>
 8026f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026f9c:	4630      	mov	r0, r6
 8026f9e:	f001 fad7 	bl	8028550 <_isatty_r>
 8026fa2:	b128      	cbz	r0, 8026fb0 <__smakebuf_r+0x74>
 8026fa4:	89a3      	ldrh	r3, [r4, #12]
 8026fa6:	f023 0303 	bic.w	r3, r3, #3
 8026faa:	f043 0301 	orr.w	r3, r3, #1
 8026fae:	81a3      	strh	r3, [r4, #12]
 8026fb0:	89a0      	ldrh	r0, [r4, #12]
 8026fb2:	4305      	orrs	r5, r0
 8026fb4:	81a5      	strh	r5, [r4, #12]
 8026fb6:	e7cd      	b.n	8026f54 <__smakebuf_r+0x18>
 8026fb8:	08026b0d 	.word	0x08026b0d

08026fbc <__malloc_lock>:
 8026fbc:	4801      	ldr	r0, [pc, #4]	; (8026fc4 <__malloc_lock+0x8>)
 8026fbe:	f7fc ba95 	b.w	80234ec <__retarget_lock_acquire_recursive>
 8026fc2:	bf00      	nop
 8026fc4:	2002f8f1 	.word	0x2002f8f1

08026fc8 <__malloc_unlock>:
 8026fc8:	4801      	ldr	r0, [pc, #4]	; (8026fd0 <__malloc_unlock+0x8>)
 8026fca:	f7fc ba91 	b.w	80234f0 <__retarget_lock_release_recursive>
 8026fce:	bf00      	nop
 8026fd0:	2002f8f1 	.word	0x2002f8f1

08026fd4 <_Balloc>:
 8026fd4:	b570      	push	{r4, r5, r6, lr}
 8026fd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026fd8:	4604      	mov	r4, r0
 8026fda:	460d      	mov	r5, r1
 8026fdc:	b976      	cbnz	r6, 8026ffc <_Balloc+0x28>
 8026fde:	2010      	movs	r0, #16
 8026fe0:	f7fc fa88 	bl	80234f4 <malloc>
 8026fe4:	4602      	mov	r2, r0
 8026fe6:	6260      	str	r0, [r4, #36]	; 0x24
 8026fe8:	b920      	cbnz	r0, 8026ff4 <_Balloc+0x20>
 8026fea:	4b18      	ldr	r3, [pc, #96]	; (802704c <_Balloc+0x78>)
 8026fec:	4818      	ldr	r0, [pc, #96]	; (8027050 <_Balloc+0x7c>)
 8026fee:	2166      	movs	r1, #102	; 0x66
 8026ff0:	f7fe fe64 	bl	8025cbc <__assert_func>
 8026ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026ff8:	6006      	str	r6, [r0, #0]
 8026ffa:	60c6      	str	r6, [r0, #12]
 8026ffc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026ffe:	68f3      	ldr	r3, [r6, #12]
 8027000:	b183      	cbz	r3, 8027024 <_Balloc+0x50>
 8027002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027004:	68db      	ldr	r3, [r3, #12]
 8027006:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802700a:	b9b8      	cbnz	r0, 802703c <_Balloc+0x68>
 802700c:	2101      	movs	r1, #1
 802700e:	fa01 f605 	lsl.w	r6, r1, r5
 8027012:	1d72      	adds	r2, r6, #5
 8027014:	0092      	lsls	r2, r2, #2
 8027016:	4620      	mov	r0, r4
 8027018:	f000 fb60 	bl	80276dc <_calloc_r>
 802701c:	b160      	cbz	r0, 8027038 <_Balloc+0x64>
 802701e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8027022:	e00e      	b.n	8027042 <_Balloc+0x6e>
 8027024:	2221      	movs	r2, #33	; 0x21
 8027026:	2104      	movs	r1, #4
 8027028:	4620      	mov	r0, r4
 802702a:	f000 fb57 	bl	80276dc <_calloc_r>
 802702e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027030:	60f0      	str	r0, [r6, #12]
 8027032:	68db      	ldr	r3, [r3, #12]
 8027034:	2b00      	cmp	r3, #0
 8027036:	d1e4      	bne.n	8027002 <_Balloc+0x2e>
 8027038:	2000      	movs	r0, #0
 802703a:	bd70      	pop	{r4, r5, r6, pc}
 802703c:	6802      	ldr	r2, [r0, #0]
 802703e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8027042:	2300      	movs	r3, #0
 8027044:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027048:	e7f7      	b.n	802703a <_Balloc+0x66>
 802704a:	bf00      	nop
 802704c:	080e2354 	.word	0x080e2354
 8027050:	080e29a0 	.word	0x080e29a0

08027054 <_Bfree>:
 8027054:	b570      	push	{r4, r5, r6, lr}
 8027056:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027058:	4605      	mov	r5, r0
 802705a:	460c      	mov	r4, r1
 802705c:	b976      	cbnz	r6, 802707c <_Bfree+0x28>
 802705e:	2010      	movs	r0, #16
 8027060:	f7fc fa48 	bl	80234f4 <malloc>
 8027064:	4602      	mov	r2, r0
 8027066:	6268      	str	r0, [r5, #36]	; 0x24
 8027068:	b920      	cbnz	r0, 8027074 <_Bfree+0x20>
 802706a:	4b09      	ldr	r3, [pc, #36]	; (8027090 <_Bfree+0x3c>)
 802706c:	4809      	ldr	r0, [pc, #36]	; (8027094 <_Bfree+0x40>)
 802706e:	218a      	movs	r1, #138	; 0x8a
 8027070:	f7fe fe24 	bl	8025cbc <__assert_func>
 8027074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027078:	6006      	str	r6, [r0, #0]
 802707a:	60c6      	str	r6, [r0, #12]
 802707c:	b13c      	cbz	r4, 802708e <_Bfree+0x3a>
 802707e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8027080:	6862      	ldr	r2, [r4, #4]
 8027082:	68db      	ldr	r3, [r3, #12]
 8027084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8027088:	6021      	str	r1, [r4, #0]
 802708a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802708e:	bd70      	pop	{r4, r5, r6, pc}
 8027090:	080e2354 	.word	0x080e2354
 8027094:	080e29a0 	.word	0x080e29a0

08027098 <__multadd>:
 8027098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802709c:	690d      	ldr	r5, [r1, #16]
 802709e:	4607      	mov	r7, r0
 80270a0:	460c      	mov	r4, r1
 80270a2:	461e      	mov	r6, r3
 80270a4:	f101 0c14 	add.w	ip, r1, #20
 80270a8:	2000      	movs	r0, #0
 80270aa:	f8dc 3000 	ldr.w	r3, [ip]
 80270ae:	b299      	uxth	r1, r3
 80270b0:	fb02 6101 	mla	r1, r2, r1, r6
 80270b4:	0c1e      	lsrs	r6, r3, #16
 80270b6:	0c0b      	lsrs	r3, r1, #16
 80270b8:	fb02 3306 	mla	r3, r2, r6, r3
 80270bc:	b289      	uxth	r1, r1
 80270be:	3001      	adds	r0, #1
 80270c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80270c4:	4285      	cmp	r5, r0
 80270c6:	f84c 1b04 	str.w	r1, [ip], #4
 80270ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80270ce:	dcec      	bgt.n	80270aa <__multadd+0x12>
 80270d0:	b30e      	cbz	r6, 8027116 <__multadd+0x7e>
 80270d2:	68a3      	ldr	r3, [r4, #8]
 80270d4:	42ab      	cmp	r3, r5
 80270d6:	dc19      	bgt.n	802710c <__multadd+0x74>
 80270d8:	6861      	ldr	r1, [r4, #4]
 80270da:	4638      	mov	r0, r7
 80270dc:	3101      	adds	r1, #1
 80270de:	f7ff ff79 	bl	8026fd4 <_Balloc>
 80270e2:	4680      	mov	r8, r0
 80270e4:	b928      	cbnz	r0, 80270f2 <__multadd+0x5a>
 80270e6:	4602      	mov	r2, r0
 80270e8:	4b0c      	ldr	r3, [pc, #48]	; (802711c <__multadd+0x84>)
 80270ea:	480d      	ldr	r0, [pc, #52]	; (8027120 <__multadd+0x88>)
 80270ec:	21b5      	movs	r1, #181	; 0xb5
 80270ee:	f7fe fde5 	bl	8025cbc <__assert_func>
 80270f2:	6922      	ldr	r2, [r4, #16]
 80270f4:	3202      	adds	r2, #2
 80270f6:	f104 010c 	add.w	r1, r4, #12
 80270fa:	0092      	lsls	r2, r2, #2
 80270fc:	300c      	adds	r0, #12
 80270fe:	f7fc fa19 	bl	8023534 <memcpy>
 8027102:	4621      	mov	r1, r4
 8027104:	4638      	mov	r0, r7
 8027106:	f7ff ffa5 	bl	8027054 <_Bfree>
 802710a:	4644      	mov	r4, r8
 802710c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027110:	3501      	adds	r5, #1
 8027112:	615e      	str	r6, [r3, #20]
 8027114:	6125      	str	r5, [r4, #16]
 8027116:	4620      	mov	r0, r4
 8027118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802711c:	080e292d 	.word	0x080e292d
 8027120:	080e29a0 	.word	0x080e29a0

08027124 <__hi0bits>:
 8027124:	0c03      	lsrs	r3, r0, #16
 8027126:	041b      	lsls	r3, r3, #16
 8027128:	b9d3      	cbnz	r3, 8027160 <__hi0bits+0x3c>
 802712a:	0400      	lsls	r0, r0, #16
 802712c:	2310      	movs	r3, #16
 802712e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8027132:	bf04      	itt	eq
 8027134:	0200      	lsleq	r0, r0, #8
 8027136:	3308      	addeq	r3, #8
 8027138:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802713c:	bf04      	itt	eq
 802713e:	0100      	lsleq	r0, r0, #4
 8027140:	3304      	addeq	r3, #4
 8027142:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8027146:	bf04      	itt	eq
 8027148:	0080      	lsleq	r0, r0, #2
 802714a:	3302      	addeq	r3, #2
 802714c:	2800      	cmp	r0, #0
 802714e:	db05      	blt.n	802715c <__hi0bits+0x38>
 8027150:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8027154:	f103 0301 	add.w	r3, r3, #1
 8027158:	bf08      	it	eq
 802715a:	2320      	moveq	r3, #32
 802715c:	4618      	mov	r0, r3
 802715e:	4770      	bx	lr
 8027160:	2300      	movs	r3, #0
 8027162:	e7e4      	b.n	802712e <__hi0bits+0xa>

08027164 <__lo0bits>:
 8027164:	6803      	ldr	r3, [r0, #0]
 8027166:	f013 0207 	ands.w	r2, r3, #7
 802716a:	4601      	mov	r1, r0
 802716c:	d00b      	beq.n	8027186 <__lo0bits+0x22>
 802716e:	07da      	lsls	r2, r3, #31
 8027170:	d423      	bmi.n	80271ba <__lo0bits+0x56>
 8027172:	0798      	lsls	r0, r3, #30
 8027174:	bf49      	itett	mi
 8027176:	085b      	lsrmi	r3, r3, #1
 8027178:	089b      	lsrpl	r3, r3, #2
 802717a:	2001      	movmi	r0, #1
 802717c:	600b      	strmi	r3, [r1, #0]
 802717e:	bf5c      	itt	pl
 8027180:	600b      	strpl	r3, [r1, #0]
 8027182:	2002      	movpl	r0, #2
 8027184:	4770      	bx	lr
 8027186:	b298      	uxth	r0, r3
 8027188:	b9a8      	cbnz	r0, 80271b6 <__lo0bits+0x52>
 802718a:	0c1b      	lsrs	r3, r3, #16
 802718c:	2010      	movs	r0, #16
 802718e:	b2da      	uxtb	r2, r3
 8027190:	b90a      	cbnz	r2, 8027196 <__lo0bits+0x32>
 8027192:	3008      	adds	r0, #8
 8027194:	0a1b      	lsrs	r3, r3, #8
 8027196:	071a      	lsls	r2, r3, #28
 8027198:	bf04      	itt	eq
 802719a:	091b      	lsreq	r3, r3, #4
 802719c:	3004      	addeq	r0, #4
 802719e:	079a      	lsls	r2, r3, #30
 80271a0:	bf04      	itt	eq
 80271a2:	089b      	lsreq	r3, r3, #2
 80271a4:	3002      	addeq	r0, #2
 80271a6:	07da      	lsls	r2, r3, #31
 80271a8:	d403      	bmi.n	80271b2 <__lo0bits+0x4e>
 80271aa:	085b      	lsrs	r3, r3, #1
 80271ac:	f100 0001 	add.w	r0, r0, #1
 80271b0:	d005      	beq.n	80271be <__lo0bits+0x5a>
 80271b2:	600b      	str	r3, [r1, #0]
 80271b4:	4770      	bx	lr
 80271b6:	4610      	mov	r0, r2
 80271b8:	e7e9      	b.n	802718e <__lo0bits+0x2a>
 80271ba:	2000      	movs	r0, #0
 80271bc:	4770      	bx	lr
 80271be:	2020      	movs	r0, #32
 80271c0:	4770      	bx	lr
	...

080271c4 <__i2b>:
 80271c4:	b510      	push	{r4, lr}
 80271c6:	460c      	mov	r4, r1
 80271c8:	2101      	movs	r1, #1
 80271ca:	f7ff ff03 	bl	8026fd4 <_Balloc>
 80271ce:	4602      	mov	r2, r0
 80271d0:	b928      	cbnz	r0, 80271de <__i2b+0x1a>
 80271d2:	4b05      	ldr	r3, [pc, #20]	; (80271e8 <__i2b+0x24>)
 80271d4:	4805      	ldr	r0, [pc, #20]	; (80271ec <__i2b+0x28>)
 80271d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80271da:	f7fe fd6f 	bl	8025cbc <__assert_func>
 80271de:	2301      	movs	r3, #1
 80271e0:	6144      	str	r4, [r0, #20]
 80271e2:	6103      	str	r3, [r0, #16]
 80271e4:	bd10      	pop	{r4, pc}
 80271e6:	bf00      	nop
 80271e8:	080e292d 	.word	0x080e292d
 80271ec:	080e29a0 	.word	0x080e29a0

080271f0 <__multiply>:
 80271f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271f4:	4691      	mov	r9, r2
 80271f6:	690a      	ldr	r2, [r1, #16]
 80271f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80271fc:	429a      	cmp	r2, r3
 80271fe:	bfb8      	it	lt
 8027200:	460b      	movlt	r3, r1
 8027202:	460c      	mov	r4, r1
 8027204:	bfbc      	itt	lt
 8027206:	464c      	movlt	r4, r9
 8027208:	4699      	movlt	r9, r3
 802720a:	6927      	ldr	r7, [r4, #16]
 802720c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8027210:	68a3      	ldr	r3, [r4, #8]
 8027212:	6861      	ldr	r1, [r4, #4]
 8027214:	eb07 060a 	add.w	r6, r7, sl
 8027218:	42b3      	cmp	r3, r6
 802721a:	b085      	sub	sp, #20
 802721c:	bfb8      	it	lt
 802721e:	3101      	addlt	r1, #1
 8027220:	f7ff fed8 	bl	8026fd4 <_Balloc>
 8027224:	b930      	cbnz	r0, 8027234 <__multiply+0x44>
 8027226:	4602      	mov	r2, r0
 8027228:	4b44      	ldr	r3, [pc, #272]	; (802733c <__multiply+0x14c>)
 802722a:	4845      	ldr	r0, [pc, #276]	; (8027340 <__multiply+0x150>)
 802722c:	f240 115d 	movw	r1, #349	; 0x15d
 8027230:	f7fe fd44 	bl	8025cbc <__assert_func>
 8027234:	f100 0514 	add.w	r5, r0, #20
 8027238:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802723c:	462b      	mov	r3, r5
 802723e:	2200      	movs	r2, #0
 8027240:	4543      	cmp	r3, r8
 8027242:	d321      	bcc.n	8027288 <__multiply+0x98>
 8027244:	f104 0314 	add.w	r3, r4, #20
 8027248:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802724c:	f109 0314 	add.w	r3, r9, #20
 8027250:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8027254:	9202      	str	r2, [sp, #8]
 8027256:	1b3a      	subs	r2, r7, r4
 8027258:	3a15      	subs	r2, #21
 802725a:	f022 0203 	bic.w	r2, r2, #3
 802725e:	3204      	adds	r2, #4
 8027260:	f104 0115 	add.w	r1, r4, #21
 8027264:	428f      	cmp	r7, r1
 8027266:	bf38      	it	cc
 8027268:	2204      	movcc	r2, #4
 802726a:	9201      	str	r2, [sp, #4]
 802726c:	9a02      	ldr	r2, [sp, #8]
 802726e:	9303      	str	r3, [sp, #12]
 8027270:	429a      	cmp	r2, r3
 8027272:	d80c      	bhi.n	802728e <__multiply+0x9e>
 8027274:	2e00      	cmp	r6, #0
 8027276:	dd03      	ble.n	8027280 <__multiply+0x90>
 8027278:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802727c:	2b00      	cmp	r3, #0
 802727e:	d05a      	beq.n	8027336 <__multiply+0x146>
 8027280:	6106      	str	r6, [r0, #16]
 8027282:	b005      	add	sp, #20
 8027284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027288:	f843 2b04 	str.w	r2, [r3], #4
 802728c:	e7d8      	b.n	8027240 <__multiply+0x50>
 802728e:	f8b3 a000 	ldrh.w	sl, [r3]
 8027292:	f1ba 0f00 	cmp.w	sl, #0
 8027296:	d024      	beq.n	80272e2 <__multiply+0xf2>
 8027298:	f104 0e14 	add.w	lr, r4, #20
 802729c:	46a9      	mov	r9, r5
 802729e:	f04f 0c00 	mov.w	ip, #0
 80272a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80272a6:	f8d9 1000 	ldr.w	r1, [r9]
 80272aa:	fa1f fb82 	uxth.w	fp, r2
 80272ae:	b289      	uxth	r1, r1
 80272b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80272b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80272b8:	f8d9 2000 	ldr.w	r2, [r9]
 80272bc:	4461      	add	r1, ip
 80272be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80272c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80272c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80272ca:	b289      	uxth	r1, r1
 80272cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80272d0:	4577      	cmp	r7, lr
 80272d2:	f849 1b04 	str.w	r1, [r9], #4
 80272d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80272da:	d8e2      	bhi.n	80272a2 <__multiply+0xb2>
 80272dc:	9a01      	ldr	r2, [sp, #4]
 80272de:	f845 c002 	str.w	ip, [r5, r2]
 80272e2:	9a03      	ldr	r2, [sp, #12]
 80272e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80272e8:	3304      	adds	r3, #4
 80272ea:	f1b9 0f00 	cmp.w	r9, #0
 80272ee:	d020      	beq.n	8027332 <__multiply+0x142>
 80272f0:	6829      	ldr	r1, [r5, #0]
 80272f2:	f104 0c14 	add.w	ip, r4, #20
 80272f6:	46ae      	mov	lr, r5
 80272f8:	f04f 0a00 	mov.w	sl, #0
 80272fc:	f8bc b000 	ldrh.w	fp, [ip]
 8027300:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027304:	fb09 220b 	mla	r2, r9, fp, r2
 8027308:	4492      	add	sl, r2
 802730a:	b289      	uxth	r1, r1
 802730c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8027310:	f84e 1b04 	str.w	r1, [lr], #4
 8027314:	f85c 2b04 	ldr.w	r2, [ip], #4
 8027318:	f8be 1000 	ldrh.w	r1, [lr]
 802731c:	0c12      	lsrs	r2, r2, #16
 802731e:	fb09 1102 	mla	r1, r9, r2, r1
 8027322:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8027326:	4567      	cmp	r7, ip
 8027328:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802732c:	d8e6      	bhi.n	80272fc <__multiply+0x10c>
 802732e:	9a01      	ldr	r2, [sp, #4]
 8027330:	50a9      	str	r1, [r5, r2]
 8027332:	3504      	adds	r5, #4
 8027334:	e79a      	b.n	802726c <__multiply+0x7c>
 8027336:	3e01      	subs	r6, #1
 8027338:	e79c      	b.n	8027274 <__multiply+0x84>
 802733a:	bf00      	nop
 802733c:	080e292d 	.word	0x080e292d
 8027340:	080e29a0 	.word	0x080e29a0

08027344 <__pow5mult>:
 8027344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027348:	4615      	mov	r5, r2
 802734a:	f012 0203 	ands.w	r2, r2, #3
 802734e:	4606      	mov	r6, r0
 8027350:	460f      	mov	r7, r1
 8027352:	d007      	beq.n	8027364 <__pow5mult+0x20>
 8027354:	4c25      	ldr	r4, [pc, #148]	; (80273ec <__pow5mult+0xa8>)
 8027356:	3a01      	subs	r2, #1
 8027358:	2300      	movs	r3, #0
 802735a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802735e:	f7ff fe9b 	bl	8027098 <__multadd>
 8027362:	4607      	mov	r7, r0
 8027364:	10ad      	asrs	r5, r5, #2
 8027366:	d03d      	beq.n	80273e4 <__pow5mult+0xa0>
 8027368:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802736a:	b97c      	cbnz	r4, 802738c <__pow5mult+0x48>
 802736c:	2010      	movs	r0, #16
 802736e:	f7fc f8c1 	bl	80234f4 <malloc>
 8027372:	4602      	mov	r2, r0
 8027374:	6270      	str	r0, [r6, #36]	; 0x24
 8027376:	b928      	cbnz	r0, 8027384 <__pow5mult+0x40>
 8027378:	4b1d      	ldr	r3, [pc, #116]	; (80273f0 <__pow5mult+0xac>)
 802737a:	481e      	ldr	r0, [pc, #120]	; (80273f4 <__pow5mult+0xb0>)
 802737c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8027380:	f7fe fc9c 	bl	8025cbc <__assert_func>
 8027384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027388:	6004      	str	r4, [r0, #0]
 802738a:	60c4      	str	r4, [r0, #12]
 802738c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8027390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027394:	b94c      	cbnz	r4, 80273aa <__pow5mult+0x66>
 8027396:	f240 2171 	movw	r1, #625	; 0x271
 802739a:	4630      	mov	r0, r6
 802739c:	f7ff ff12 	bl	80271c4 <__i2b>
 80273a0:	2300      	movs	r3, #0
 80273a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80273a6:	4604      	mov	r4, r0
 80273a8:	6003      	str	r3, [r0, #0]
 80273aa:	f04f 0900 	mov.w	r9, #0
 80273ae:	07eb      	lsls	r3, r5, #31
 80273b0:	d50a      	bpl.n	80273c8 <__pow5mult+0x84>
 80273b2:	4639      	mov	r1, r7
 80273b4:	4622      	mov	r2, r4
 80273b6:	4630      	mov	r0, r6
 80273b8:	f7ff ff1a 	bl	80271f0 <__multiply>
 80273bc:	4639      	mov	r1, r7
 80273be:	4680      	mov	r8, r0
 80273c0:	4630      	mov	r0, r6
 80273c2:	f7ff fe47 	bl	8027054 <_Bfree>
 80273c6:	4647      	mov	r7, r8
 80273c8:	106d      	asrs	r5, r5, #1
 80273ca:	d00b      	beq.n	80273e4 <__pow5mult+0xa0>
 80273cc:	6820      	ldr	r0, [r4, #0]
 80273ce:	b938      	cbnz	r0, 80273e0 <__pow5mult+0x9c>
 80273d0:	4622      	mov	r2, r4
 80273d2:	4621      	mov	r1, r4
 80273d4:	4630      	mov	r0, r6
 80273d6:	f7ff ff0b 	bl	80271f0 <__multiply>
 80273da:	6020      	str	r0, [r4, #0]
 80273dc:	f8c0 9000 	str.w	r9, [r0]
 80273e0:	4604      	mov	r4, r0
 80273e2:	e7e4      	b.n	80273ae <__pow5mult+0x6a>
 80273e4:	4638      	mov	r0, r7
 80273e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80273ea:	bf00      	nop
 80273ec:	080e2af0 	.word	0x080e2af0
 80273f0:	080e2354 	.word	0x080e2354
 80273f4:	080e29a0 	.word	0x080e29a0

080273f8 <__lshift>:
 80273f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80273fc:	460c      	mov	r4, r1
 80273fe:	6849      	ldr	r1, [r1, #4]
 8027400:	6923      	ldr	r3, [r4, #16]
 8027402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8027406:	68a3      	ldr	r3, [r4, #8]
 8027408:	4607      	mov	r7, r0
 802740a:	4691      	mov	r9, r2
 802740c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027410:	f108 0601 	add.w	r6, r8, #1
 8027414:	42b3      	cmp	r3, r6
 8027416:	db0b      	blt.n	8027430 <__lshift+0x38>
 8027418:	4638      	mov	r0, r7
 802741a:	f7ff fddb 	bl	8026fd4 <_Balloc>
 802741e:	4605      	mov	r5, r0
 8027420:	b948      	cbnz	r0, 8027436 <__lshift+0x3e>
 8027422:	4602      	mov	r2, r0
 8027424:	4b2a      	ldr	r3, [pc, #168]	; (80274d0 <__lshift+0xd8>)
 8027426:	482b      	ldr	r0, [pc, #172]	; (80274d4 <__lshift+0xdc>)
 8027428:	f240 11d9 	movw	r1, #473	; 0x1d9
 802742c:	f7fe fc46 	bl	8025cbc <__assert_func>
 8027430:	3101      	adds	r1, #1
 8027432:	005b      	lsls	r3, r3, #1
 8027434:	e7ee      	b.n	8027414 <__lshift+0x1c>
 8027436:	2300      	movs	r3, #0
 8027438:	f100 0114 	add.w	r1, r0, #20
 802743c:	f100 0210 	add.w	r2, r0, #16
 8027440:	4618      	mov	r0, r3
 8027442:	4553      	cmp	r3, sl
 8027444:	db37      	blt.n	80274b6 <__lshift+0xbe>
 8027446:	6920      	ldr	r0, [r4, #16]
 8027448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802744c:	f104 0314 	add.w	r3, r4, #20
 8027450:	f019 091f 	ands.w	r9, r9, #31
 8027454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027458:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802745c:	d02f      	beq.n	80274be <__lshift+0xc6>
 802745e:	f1c9 0e20 	rsb	lr, r9, #32
 8027462:	468a      	mov	sl, r1
 8027464:	f04f 0c00 	mov.w	ip, #0
 8027468:	681a      	ldr	r2, [r3, #0]
 802746a:	fa02 f209 	lsl.w	r2, r2, r9
 802746e:	ea42 020c 	orr.w	r2, r2, ip
 8027472:	f84a 2b04 	str.w	r2, [sl], #4
 8027476:	f853 2b04 	ldr.w	r2, [r3], #4
 802747a:	4298      	cmp	r0, r3
 802747c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8027480:	d8f2      	bhi.n	8027468 <__lshift+0x70>
 8027482:	1b03      	subs	r3, r0, r4
 8027484:	3b15      	subs	r3, #21
 8027486:	f023 0303 	bic.w	r3, r3, #3
 802748a:	3304      	adds	r3, #4
 802748c:	f104 0215 	add.w	r2, r4, #21
 8027490:	4290      	cmp	r0, r2
 8027492:	bf38      	it	cc
 8027494:	2304      	movcc	r3, #4
 8027496:	f841 c003 	str.w	ip, [r1, r3]
 802749a:	f1bc 0f00 	cmp.w	ip, #0
 802749e:	d001      	beq.n	80274a4 <__lshift+0xac>
 80274a0:	f108 0602 	add.w	r6, r8, #2
 80274a4:	3e01      	subs	r6, #1
 80274a6:	4638      	mov	r0, r7
 80274a8:	612e      	str	r6, [r5, #16]
 80274aa:	4621      	mov	r1, r4
 80274ac:	f7ff fdd2 	bl	8027054 <_Bfree>
 80274b0:	4628      	mov	r0, r5
 80274b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80274b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80274ba:	3301      	adds	r3, #1
 80274bc:	e7c1      	b.n	8027442 <__lshift+0x4a>
 80274be:	3904      	subs	r1, #4
 80274c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80274c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80274c8:	4298      	cmp	r0, r3
 80274ca:	d8f9      	bhi.n	80274c0 <__lshift+0xc8>
 80274cc:	e7ea      	b.n	80274a4 <__lshift+0xac>
 80274ce:	bf00      	nop
 80274d0:	080e292d 	.word	0x080e292d
 80274d4:	080e29a0 	.word	0x080e29a0

080274d8 <__mcmp>:
 80274d8:	b530      	push	{r4, r5, lr}
 80274da:	6902      	ldr	r2, [r0, #16]
 80274dc:	690c      	ldr	r4, [r1, #16]
 80274de:	1b12      	subs	r2, r2, r4
 80274e0:	d10e      	bne.n	8027500 <__mcmp+0x28>
 80274e2:	f100 0314 	add.w	r3, r0, #20
 80274e6:	3114      	adds	r1, #20
 80274e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80274ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80274f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80274f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80274f8:	42a5      	cmp	r5, r4
 80274fa:	d003      	beq.n	8027504 <__mcmp+0x2c>
 80274fc:	d305      	bcc.n	802750a <__mcmp+0x32>
 80274fe:	2201      	movs	r2, #1
 8027500:	4610      	mov	r0, r2
 8027502:	bd30      	pop	{r4, r5, pc}
 8027504:	4283      	cmp	r3, r0
 8027506:	d3f3      	bcc.n	80274f0 <__mcmp+0x18>
 8027508:	e7fa      	b.n	8027500 <__mcmp+0x28>
 802750a:	f04f 32ff 	mov.w	r2, #4294967295
 802750e:	e7f7      	b.n	8027500 <__mcmp+0x28>

08027510 <__mdiff>:
 8027510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027514:	460c      	mov	r4, r1
 8027516:	4606      	mov	r6, r0
 8027518:	4611      	mov	r1, r2
 802751a:	4620      	mov	r0, r4
 802751c:	4690      	mov	r8, r2
 802751e:	f7ff ffdb 	bl	80274d8 <__mcmp>
 8027522:	1e05      	subs	r5, r0, #0
 8027524:	d110      	bne.n	8027548 <__mdiff+0x38>
 8027526:	4629      	mov	r1, r5
 8027528:	4630      	mov	r0, r6
 802752a:	f7ff fd53 	bl	8026fd4 <_Balloc>
 802752e:	b930      	cbnz	r0, 802753e <__mdiff+0x2e>
 8027530:	4b3a      	ldr	r3, [pc, #232]	; (802761c <__mdiff+0x10c>)
 8027532:	4602      	mov	r2, r0
 8027534:	f240 2132 	movw	r1, #562	; 0x232
 8027538:	4839      	ldr	r0, [pc, #228]	; (8027620 <__mdiff+0x110>)
 802753a:	f7fe fbbf 	bl	8025cbc <__assert_func>
 802753e:	2301      	movs	r3, #1
 8027540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027548:	bfa4      	itt	ge
 802754a:	4643      	movge	r3, r8
 802754c:	46a0      	movge	r8, r4
 802754e:	4630      	mov	r0, r6
 8027550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8027554:	bfa6      	itte	ge
 8027556:	461c      	movge	r4, r3
 8027558:	2500      	movge	r5, #0
 802755a:	2501      	movlt	r5, #1
 802755c:	f7ff fd3a 	bl	8026fd4 <_Balloc>
 8027560:	b920      	cbnz	r0, 802756c <__mdiff+0x5c>
 8027562:	4b2e      	ldr	r3, [pc, #184]	; (802761c <__mdiff+0x10c>)
 8027564:	4602      	mov	r2, r0
 8027566:	f44f 7110 	mov.w	r1, #576	; 0x240
 802756a:	e7e5      	b.n	8027538 <__mdiff+0x28>
 802756c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027570:	6926      	ldr	r6, [r4, #16]
 8027572:	60c5      	str	r5, [r0, #12]
 8027574:	f104 0914 	add.w	r9, r4, #20
 8027578:	f108 0514 	add.w	r5, r8, #20
 802757c:	f100 0e14 	add.w	lr, r0, #20
 8027580:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8027584:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8027588:	f108 0210 	add.w	r2, r8, #16
 802758c:	46f2      	mov	sl, lr
 802758e:	2100      	movs	r1, #0
 8027590:	f859 3b04 	ldr.w	r3, [r9], #4
 8027594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8027598:	fa1f f883 	uxth.w	r8, r3
 802759c:	fa11 f18b 	uxtah	r1, r1, fp
 80275a0:	0c1b      	lsrs	r3, r3, #16
 80275a2:	eba1 0808 	sub.w	r8, r1, r8
 80275a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80275aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80275ae:	fa1f f888 	uxth.w	r8, r8
 80275b2:	1419      	asrs	r1, r3, #16
 80275b4:	454e      	cmp	r6, r9
 80275b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80275ba:	f84a 3b04 	str.w	r3, [sl], #4
 80275be:	d8e7      	bhi.n	8027590 <__mdiff+0x80>
 80275c0:	1b33      	subs	r3, r6, r4
 80275c2:	3b15      	subs	r3, #21
 80275c4:	f023 0303 	bic.w	r3, r3, #3
 80275c8:	3304      	adds	r3, #4
 80275ca:	3415      	adds	r4, #21
 80275cc:	42a6      	cmp	r6, r4
 80275ce:	bf38      	it	cc
 80275d0:	2304      	movcc	r3, #4
 80275d2:	441d      	add	r5, r3
 80275d4:	4473      	add	r3, lr
 80275d6:	469e      	mov	lr, r3
 80275d8:	462e      	mov	r6, r5
 80275da:	4566      	cmp	r6, ip
 80275dc:	d30e      	bcc.n	80275fc <__mdiff+0xec>
 80275de:	f10c 0203 	add.w	r2, ip, #3
 80275e2:	1b52      	subs	r2, r2, r5
 80275e4:	f022 0203 	bic.w	r2, r2, #3
 80275e8:	3d03      	subs	r5, #3
 80275ea:	45ac      	cmp	ip, r5
 80275ec:	bf38      	it	cc
 80275ee:	2200      	movcc	r2, #0
 80275f0:	441a      	add	r2, r3
 80275f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80275f6:	b17b      	cbz	r3, 8027618 <__mdiff+0x108>
 80275f8:	6107      	str	r7, [r0, #16]
 80275fa:	e7a3      	b.n	8027544 <__mdiff+0x34>
 80275fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8027600:	fa11 f288 	uxtah	r2, r1, r8
 8027604:	1414      	asrs	r4, r2, #16
 8027606:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802760a:	b292      	uxth	r2, r2
 802760c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027610:	f84e 2b04 	str.w	r2, [lr], #4
 8027614:	1421      	asrs	r1, r4, #16
 8027616:	e7e0      	b.n	80275da <__mdiff+0xca>
 8027618:	3f01      	subs	r7, #1
 802761a:	e7ea      	b.n	80275f2 <__mdiff+0xe2>
 802761c:	080e292d 	.word	0x080e292d
 8027620:	080e29a0 	.word	0x080e29a0

08027624 <__d2b>:
 8027624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027628:	4689      	mov	r9, r1
 802762a:	2101      	movs	r1, #1
 802762c:	ec57 6b10 	vmov	r6, r7, d0
 8027630:	4690      	mov	r8, r2
 8027632:	f7ff fccf 	bl	8026fd4 <_Balloc>
 8027636:	4604      	mov	r4, r0
 8027638:	b930      	cbnz	r0, 8027648 <__d2b+0x24>
 802763a:	4602      	mov	r2, r0
 802763c:	4b25      	ldr	r3, [pc, #148]	; (80276d4 <__d2b+0xb0>)
 802763e:	4826      	ldr	r0, [pc, #152]	; (80276d8 <__d2b+0xb4>)
 8027640:	f240 310a 	movw	r1, #778	; 0x30a
 8027644:	f7fe fb3a 	bl	8025cbc <__assert_func>
 8027648:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802764c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027650:	bb35      	cbnz	r5, 80276a0 <__d2b+0x7c>
 8027652:	2e00      	cmp	r6, #0
 8027654:	9301      	str	r3, [sp, #4]
 8027656:	d028      	beq.n	80276aa <__d2b+0x86>
 8027658:	4668      	mov	r0, sp
 802765a:	9600      	str	r6, [sp, #0]
 802765c:	f7ff fd82 	bl	8027164 <__lo0bits>
 8027660:	9900      	ldr	r1, [sp, #0]
 8027662:	b300      	cbz	r0, 80276a6 <__d2b+0x82>
 8027664:	9a01      	ldr	r2, [sp, #4]
 8027666:	f1c0 0320 	rsb	r3, r0, #32
 802766a:	fa02 f303 	lsl.w	r3, r2, r3
 802766e:	430b      	orrs	r3, r1
 8027670:	40c2      	lsrs	r2, r0
 8027672:	6163      	str	r3, [r4, #20]
 8027674:	9201      	str	r2, [sp, #4]
 8027676:	9b01      	ldr	r3, [sp, #4]
 8027678:	61a3      	str	r3, [r4, #24]
 802767a:	2b00      	cmp	r3, #0
 802767c:	bf14      	ite	ne
 802767e:	2202      	movne	r2, #2
 8027680:	2201      	moveq	r2, #1
 8027682:	6122      	str	r2, [r4, #16]
 8027684:	b1d5      	cbz	r5, 80276bc <__d2b+0x98>
 8027686:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802768a:	4405      	add	r5, r0
 802768c:	f8c9 5000 	str.w	r5, [r9]
 8027690:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027694:	f8c8 0000 	str.w	r0, [r8]
 8027698:	4620      	mov	r0, r4
 802769a:	b003      	add	sp, #12
 802769c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80276a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80276a4:	e7d5      	b.n	8027652 <__d2b+0x2e>
 80276a6:	6161      	str	r1, [r4, #20]
 80276a8:	e7e5      	b.n	8027676 <__d2b+0x52>
 80276aa:	a801      	add	r0, sp, #4
 80276ac:	f7ff fd5a 	bl	8027164 <__lo0bits>
 80276b0:	9b01      	ldr	r3, [sp, #4]
 80276b2:	6163      	str	r3, [r4, #20]
 80276b4:	2201      	movs	r2, #1
 80276b6:	6122      	str	r2, [r4, #16]
 80276b8:	3020      	adds	r0, #32
 80276ba:	e7e3      	b.n	8027684 <__d2b+0x60>
 80276bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80276c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80276c4:	f8c9 0000 	str.w	r0, [r9]
 80276c8:	6918      	ldr	r0, [r3, #16]
 80276ca:	f7ff fd2b 	bl	8027124 <__hi0bits>
 80276ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80276d2:	e7df      	b.n	8027694 <__d2b+0x70>
 80276d4:	080e292d 	.word	0x080e292d
 80276d8:	080e29a0 	.word	0x080e29a0

080276dc <_calloc_r>:
 80276dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80276de:	fba1 2402 	umull	r2, r4, r1, r2
 80276e2:	b94c      	cbnz	r4, 80276f8 <_calloc_r+0x1c>
 80276e4:	4611      	mov	r1, r2
 80276e6:	9201      	str	r2, [sp, #4]
 80276e8:	f7fc fa32 	bl	8023b50 <_malloc_r>
 80276ec:	9a01      	ldr	r2, [sp, #4]
 80276ee:	4605      	mov	r5, r0
 80276f0:	b930      	cbnz	r0, 8027700 <_calloc_r+0x24>
 80276f2:	4628      	mov	r0, r5
 80276f4:	b003      	add	sp, #12
 80276f6:	bd30      	pop	{r4, r5, pc}
 80276f8:	220c      	movs	r2, #12
 80276fa:	6002      	str	r2, [r0, #0]
 80276fc:	2500      	movs	r5, #0
 80276fe:	e7f8      	b.n	80276f2 <_calloc_r+0x16>
 8027700:	4621      	mov	r1, r4
 8027702:	f7fb ff3f 	bl	8023584 <memset>
 8027706:	e7f4      	b.n	80276f2 <_calloc_r+0x16>

08027708 <_realloc_r>:
 8027708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802770c:	4680      	mov	r8, r0
 802770e:	4614      	mov	r4, r2
 8027710:	460e      	mov	r6, r1
 8027712:	b921      	cbnz	r1, 802771e <_realloc_r+0x16>
 8027714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027718:	4611      	mov	r1, r2
 802771a:	f7fc ba19 	b.w	8023b50 <_malloc_r>
 802771e:	b92a      	cbnz	r2, 802772c <_realloc_r+0x24>
 8027720:	f7fc f9aa 	bl	8023a78 <_free_r>
 8027724:	4625      	mov	r5, r4
 8027726:	4628      	mov	r0, r5
 8027728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802772c:	f000 ff32 	bl	8028594 <_malloc_usable_size_r>
 8027730:	4284      	cmp	r4, r0
 8027732:	4607      	mov	r7, r0
 8027734:	d802      	bhi.n	802773c <_realloc_r+0x34>
 8027736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802773a:	d812      	bhi.n	8027762 <_realloc_r+0x5a>
 802773c:	4621      	mov	r1, r4
 802773e:	4640      	mov	r0, r8
 8027740:	f7fc fa06 	bl	8023b50 <_malloc_r>
 8027744:	4605      	mov	r5, r0
 8027746:	2800      	cmp	r0, #0
 8027748:	d0ed      	beq.n	8027726 <_realloc_r+0x1e>
 802774a:	42bc      	cmp	r4, r7
 802774c:	4622      	mov	r2, r4
 802774e:	4631      	mov	r1, r6
 8027750:	bf28      	it	cs
 8027752:	463a      	movcs	r2, r7
 8027754:	f7fb feee 	bl	8023534 <memcpy>
 8027758:	4631      	mov	r1, r6
 802775a:	4640      	mov	r0, r8
 802775c:	f7fc f98c 	bl	8023a78 <_free_r>
 8027760:	e7e1      	b.n	8027726 <_realloc_r+0x1e>
 8027762:	4635      	mov	r5, r6
 8027764:	e7df      	b.n	8027726 <_realloc_r+0x1e>

08027766 <__ssputs_r>:
 8027766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802776a:	688e      	ldr	r6, [r1, #8]
 802776c:	429e      	cmp	r6, r3
 802776e:	4682      	mov	sl, r0
 8027770:	460c      	mov	r4, r1
 8027772:	4690      	mov	r8, r2
 8027774:	461f      	mov	r7, r3
 8027776:	d838      	bhi.n	80277ea <__ssputs_r+0x84>
 8027778:	898a      	ldrh	r2, [r1, #12]
 802777a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802777e:	d032      	beq.n	80277e6 <__ssputs_r+0x80>
 8027780:	6825      	ldr	r5, [r4, #0]
 8027782:	6909      	ldr	r1, [r1, #16]
 8027784:	eba5 0901 	sub.w	r9, r5, r1
 8027788:	6965      	ldr	r5, [r4, #20]
 802778a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802778e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027792:	3301      	adds	r3, #1
 8027794:	444b      	add	r3, r9
 8027796:	106d      	asrs	r5, r5, #1
 8027798:	429d      	cmp	r5, r3
 802779a:	bf38      	it	cc
 802779c:	461d      	movcc	r5, r3
 802779e:	0553      	lsls	r3, r2, #21
 80277a0:	d531      	bpl.n	8027806 <__ssputs_r+0xa0>
 80277a2:	4629      	mov	r1, r5
 80277a4:	f7fc f9d4 	bl	8023b50 <_malloc_r>
 80277a8:	4606      	mov	r6, r0
 80277aa:	b950      	cbnz	r0, 80277c2 <__ssputs_r+0x5c>
 80277ac:	230c      	movs	r3, #12
 80277ae:	f8ca 3000 	str.w	r3, [sl]
 80277b2:	89a3      	ldrh	r3, [r4, #12]
 80277b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80277b8:	81a3      	strh	r3, [r4, #12]
 80277ba:	f04f 30ff 	mov.w	r0, #4294967295
 80277be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80277c2:	6921      	ldr	r1, [r4, #16]
 80277c4:	464a      	mov	r2, r9
 80277c6:	f7fb feb5 	bl	8023534 <memcpy>
 80277ca:	89a3      	ldrh	r3, [r4, #12]
 80277cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80277d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80277d4:	81a3      	strh	r3, [r4, #12]
 80277d6:	6126      	str	r6, [r4, #16]
 80277d8:	6165      	str	r5, [r4, #20]
 80277da:	444e      	add	r6, r9
 80277dc:	eba5 0509 	sub.w	r5, r5, r9
 80277e0:	6026      	str	r6, [r4, #0]
 80277e2:	60a5      	str	r5, [r4, #8]
 80277e4:	463e      	mov	r6, r7
 80277e6:	42be      	cmp	r6, r7
 80277e8:	d900      	bls.n	80277ec <__ssputs_r+0x86>
 80277ea:	463e      	mov	r6, r7
 80277ec:	6820      	ldr	r0, [r4, #0]
 80277ee:	4632      	mov	r2, r6
 80277f0:	4641      	mov	r1, r8
 80277f2:	f7fb fead 	bl	8023550 <memmove>
 80277f6:	68a3      	ldr	r3, [r4, #8]
 80277f8:	1b9b      	subs	r3, r3, r6
 80277fa:	60a3      	str	r3, [r4, #8]
 80277fc:	6823      	ldr	r3, [r4, #0]
 80277fe:	4433      	add	r3, r6
 8027800:	6023      	str	r3, [r4, #0]
 8027802:	2000      	movs	r0, #0
 8027804:	e7db      	b.n	80277be <__ssputs_r+0x58>
 8027806:	462a      	mov	r2, r5
 8027808:	f7ff ff7e 	bl	8027708 <_realloc_r>
 802780c:	4606      	mov	r6, r0
 802780e:	2800      	cmp	r0, #0
 8027810:	d1e1      	bne.n	80277d6 <__ssputs_r+0x70>
 8027812:	6921      	ldr	r1, [r4, #16]
 8027814:	4650      	mov	r0, sl
 8027816:	f7fc f92f 	bl	8023a78 <_free_r>
 802781a:	e7c7      	b.n	80277ac <__ssputs_r+0x46>

0802781c <_svfiprintf_r>:
 802781c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027820:	4698      	mov	r8, r3
 8027822:	898b      	ldrh	r3, [r1, #12]
 8027824:	061b      	lsls	r3, r3, #24
 8027826:	b09d      	sub	sp, #116	; 0x74
 8027828:	4607      	mov	r7, r0
 802782a:	460d      	mov	r5, r1
 802782c:	4614      	mov	r4, r2
 802782e:	d50e      	bpl.n	802784e <_svfiprintf_r+0x32>
 8027830:	690b      	ldr	r3, [r1, #16]
 8027832:	b963      	cbnz	r3, 802784e <_svfiprintf_r+0x32>
 8027834:	2140      	movs	r1, #64	; 0x40
 8027836:	f7fc f98b 	bl	8023b50 <_malloc_r>
 802783a:	6028      	str	r0, [r5, #0]
 802783c:	6128      	str	r0, [r5, #16]
 802783e:	b920      	cbnz	r0, 802784a <_svfiprintf_r+0x2e>
 8027840:	230c      	movs	r3, #12
 8027842:	603b      	str	r3, [r7, #0]
 8027844:	f04f 30ff 	mov.w	r0, #4294967295
 8027848:	e0d1      	b.n	80279ee <_svfiprintf_r+0x1d2>
 802784a:	2340      	movs	r3, #64	; 0x40
 802784c:	616b      	str	r3, [r5, #20]
 802784e:	2300      	movs	r3, #0
 8027850:	9309      	str	r3, [sp, #36]	; 0x24
 8027852:	2320      	movs	r3, #32
 8027854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027858:	f8cd 800c 	str.w	r8, [sp, #12]
 802785c:	2330      	movs	r3, #48	; 0x30
 802785e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8027a08 <_svfiprintf_r+0x1ec>
 8027862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027866:	f04f 0901 	mov.w	r9, #1
 802786a:	4623      	mov	r3, r4
 802786c:	469a      	mov	sl, r3
 802786e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027872:	b10a      	cbz	r2, 8027878 <_svfiprintf_r+0x5c>
 8027874:	2a25      	cmp	r2, #37	; 0x25
 8027876:	d1f9      	bne.n	802786c <_svfiprintf_r+0x50>
 8027878:	ebba 0b04 	subs.w	fp, sl, r4
 802787c:	d00b      	beq.n	8027896 <_svfiprintf_r+0x7a>
 802787e:	465b      	mov	r3, fp
 8027880:	4622      	mov	r2, r4
 8027882:	4629      	mov	r1, r5
 8027884:	4638      	mov	r0, r7
 8027886:	f7ff ff6e 	bl	8027766 <__ssputs_r>
 802788a:	3001      	adds	r0, #1
 802788c:	f000 80aa 	beq.w	80279e4 <_svfiprintf_r+0x1c8>
 8027890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027892:	445a      	add	r2, fp
 8027894:	9209      	str	r2, [sp, #36]	; 0x24
 8027896:	f89a 3000 	ldrb.w	r3, [sl]
 802789a:	2b00      	cmp	r3, #0
 802789c:	f000 80a2 	beq.w	80279e4 <_svfiprintf_r+0x1c8>
 80278a0:	2300      	movs	r3, #0
 80278a2:	f04f 32ff 	mov.w	r2, #4294967295
 80278a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80278aa:	f10a 0a01 	add.w	sl, sl, #1
 80278ae:	9304      	str	r3, [sp, #16]
 80278b0:	9307      	str	r3, [sp, #28]
 80278b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80278b6:	931a      	str	r3, [sp, #104]	; 0x68
 80278b8:	4654      	mov	r4, sl
 80278ba:	2205      	movs	r2, #5
 80278bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80278c0:	4851      	ldr	r0, [pc, #324]	; (8027a08 <_svfiprintf_r+0x1ec>)
 80278c2:	f7d8 fcd5 	bl	8000270 <memchr>
 80278c6:	9a04      	ldr	r2, [sp, #16]
 80278c8:	b9d8      	cbnz	r0, 8027902 <_svfiprintf_r+0xe6>
 80278ca:	06d0      	lsls	r0, r2, #27
 80278cc:	bf44      	itt	mi
 80278ce:	2320      	movmi	r3, #32
 80278d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80278d4:	0711      	lsls	r1, r2, #28
 80278d6:	bf44      	itt	mi
 80278d8:	232b      	movmi	r3, #43	; 0x2b
 80278da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80278de:	f89a 3000 	ldrb.w	r3, [sl]
 80278e2:	2b2a      	cmp	r3, #42	; 0x2a
 80278e4:	d015      	beq.n	8027912 <_svfiprintf_r+0xf6>
 80278e6:	9a07      	ldr	r2, [sp, #28]
 80278e8:	4654      	mov	r4, sl
 80278ea:	2000      	movs	r0, #0
 80278ec:	f04f 0c0a 	mov.w	ip, #10
 80278f0:	4621      	mov	r1, r4
 80278f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80278f6:	3b30      	subs	r3, #48	; 0x30
 80278f8:	2b09      	cmp	r3, #9
 80278fa:	d94e      	bls.n	802799a <_svfiprintf_r+0x17e>
 80278fc:	b1b0      	cbz	r0, 802792c <_svfiprintf_r+0x110>
 80278fe:	9207      	str	r2, [sp, #28]
 8027900:	e014      	b.n	802792c <_svfiprintf_r+0x110>
 8027902:	eba0 0308 	sub.w	r3, r0, r8
 8027906:	fa09 f303 	lsl.w	r3, r9, r3
 802790a:	4313      	orrs	r3, r2
 802790c:	9304      	str	r3, [sp, #16]
 802790e:	46a2      	mov	sl, r4
 8027910:	e7d2      	b.n	80278b8 <_svfiprintf_r+0x9c>
 8027912:	9b03      	ldr	r3, [sp, #12]
 8027914:	1d19      	adds	r1, r3, #4
 8027916:	681b      	ldr	r3, [r3, #0]
 8027918:	9103      	str	r1, [sp, #12]
 802791a:	2b00      	cmp	r3, #0
 802791c:	bfbb      	ittet	lt
 802791e:	425b      	neglt	r3, r3
 8027920:	f042 0202 	orrlt.w	r2, r2, #2
 8027924:	9307      	strge	r3, [sp, #28]
 8027926:	9307      	strlt	r3, [sp, #28]
 8027928:	bfb8      	it	lt
 802792a:	9204      	strlt	r2, [sp, #16]
 802792c:	7823      	ldrb	r3, [r4, #0]
 802792e:	2b2e      	cmp	r3, #46	; 0x2e
 8027930:	d10c      	bne.n	802794c <_svfiprintf_r+0x130>
 8027932:	7863      	ldrb	r3, [r4, #1]
 8027934:	2b2a      	cmp	r3, #42	; 0x2a
 8027936:	d135      	bne.n	80279a4 <_svfiprintf_r+0x188>
 8027938:	9b03      	ldr	r3, [sp, #12]
 802793a:	1d1a      	adds	r2, r3, #4
 802793c:	681b      	ldr	r3, [r3, #0]
 802793e:	9203      	str	r2, [sp, #12]
 8027940:	2b00      	cmp	r3, #0
 8027942:	bfb8      	it	lt
 8027944:	f04f 33ff 	movlt.w	r3, #4294967295
 8027948:	3402      	adds	r4, #2
 802794a:	9305      	str	r3, [sp, #20]
 802794c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8027a18 <_svfiprintf_r+0x1fc>
 8027950:	7821      	ldrb	r1, [r4, #0]
 8027952:	2203      	movs	r2, #3
 8027954:	4650      	mov	r0, sl
 8027956:	f7d8 fc8b 	bl	8000270 <memchr>
 802795a:	b140      	cbz	r0, 802796e <_svfiprintf_r+0x152>
 802795c:	2340      	movs	r3, #64	; 0x40
 802795e:	eba0 000a 	sub.w	r0, r0, sl
 8027962:	fa03 f000 	lsl.w	r0, r3, r0
 8027966:	9b04      	ldr	r3, [sp, #16]
 8027968:	4303      	orrs	r3, r0
 802796a:	3401      	adds	r4, #1
 802796c:	9304      	str	r3, [sp, #16]
 802796e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027972:	4826      	ldr	r0, [pc, #152]	; (8027a0c <_svfiprintf_r+0x1f0>)
 8027974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027978:	2206      	movs	r2, #6
 802797a:	f7d8 fc79 	bl	8000270 <memchr>
 802797e:	2800      	cmp	r0, #0
 8027980:	d038      	beq.n	80279f4 <_svfiprintf_r+0x1d8>
 8027982:	4b23      	ldr	r3, [pc, #140]	; (8027a10 <_svfiprintf_r+0x1f4>)
 8027984:	bb1b      	cbnz	r3, 80279ce <_svfiprintf_r+0x1b2>
 8027986:	9b03      	ldr	r3, [sp, #12]
 8027988:	3307      	adds	r3, #7
 802798a:	f023 0307 	bic.w	r3, r3, #7
 802798e:	3308      	adds	r3, #8
 8027990:	9303      	str	r3, [sp, #12]
 8027992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027994:	4433      	add	r3, r6
 8027996:	9309      	str	r3, [sp, #36]	; 0x24
 8027998:	e767      	b.n	802786a <_svfiprintf_r+0x4e>
 802799a:	fb0c 3202 	mla	r2, ip, r2, r3
 802799e:	460c      	mov	r4, r1
 80279a0:	2001      	movs	r0, #1
 80279a2:	e7a5      	b.n	80278f0 <_svfiprintf_r+0xd4>
 80279a4:	2300      	movs	r3, #0
 80279a6:	3401      	adds	r4, #1
 80279a8:	9305      	str	r3, [sp, #20]
 80279aa:	4619      	mov	r1, r3
 80279ac:	f04f 0c0a 	mov.w	ip, #10
 80279b0:	4620      	mov	r0, r4
 80279b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80279b6:	3a30      	subs	r2, #48	; 0x30
 80279b8:	2a09      	cmp	r2, #9
 80279ba:	d903      	bls.n	80279c4 <_svfiprintf_r+0x1a8>
 80279bc:	2b00      	cmp	r3, #0
 80279be:	d0c5      	beq.n	802794c <_svfiprintf_r+0x130>
 80279c0:	9105      	str	r1, [sp, #20]
 80279c2:	e7c3      	b.n	802794c <_svfiprintf_r+0x130>
 80279c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80279c8:	4604      	mov	r4, r0
 80279ca:	2301      	movs	r3, #1
 80279cc:	e7f0      	b.n	80279b0 <_svfiprintf_r+0x194>
 80279ce:	ab03      	add	r3, sp, #12
 80279d0:	9300      	str	r3, [sp, #0]
 80279d2:	462a      	mov	r2, r5
 80279d4:	4b0f      	ldr	r3, [pc, #60]	; (8027a14 <_svfiprintf_r+0x1f8>)
 80279d6:	a904      	add	r1, sp, #16
 80279d8:	4638      	mov	r0, r7
 80279da:	f7fc f9bd 	bl	8023d58 <_printf_float>
 80279de:	1c42      	adds	r2, r0, #1
 80279e0:	4606      	mov	r6, r0
 80279e2:	d1d6      	bne.n	8027992 <_svfiprintf_r+0x176>
 80279e4:	89ab      	ldrh	r3, [r5, #12]
 80279e6:	065b      	lsls	r3, r3, #25
 80279e8:	f53f af2c 	bmi.w	8027844 <_svfiprintf_r+0x28>
 80279ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80279ee:	b01d      	add	sp, #116	; 0x74
 80279f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279f4:	ab03      	add	r3, sp, #12
 80279f6:	9300      	str	r3, [sp, #0]
 80279f8:	462a      	mov	r2, r5
 80279fa:	4b06      	ldr	r3, [pc, #24]	; (8027a14 <_svfiprintf_r+0x1f8>)
 80279fc:	a904      	add	r1, sp, #16
 80279fe:	4638      	mov	r0, r7
 8027a00:	f7fc fc36 	bl	8024270 <_printf_i>
 8027a04:	e7eb      	b.n	80279de <_svfiprintf_r+0x1c2>
 8027a06:	bf00      	nop
 8027a08:	080e2afc 	.word	0x080e2afc
 8027a0c:	080e2b06 	.word	0x080e2b06
 8027a10:	08023d59 	.word	0x08023d59
 8027a14:	08027767 	.word	0x08027767
 8027a18:	080e2b02 	.word	0x080e2b02

08027a1c <_sungetc_r>:
 8027a1c:	b538      	push	{r3, r4, r5, lr}
 8027a1e:	1c4b      	adds	r3, r1, #1
 8027a20:	4614      	mov	r4, r2
 8027a22:	d103      	bne.n	8027a2c <_sungetc_r+0x10>
 8027a24:	f04f 35ff 	mov.w	r5, #4294967295
 8027a28:	4628      	mov	r0, r5
 8027a2a:	bd38      	pop	{r3, r4, r5, pc}
 8027a2c:	8993      	ldrh	r3, [r2, #12]
 8027a2e:	f023 0320 	bic.w	r3, r3, #32
 8027a32:	8193      	strh	r3, [r2, #12]
 8027a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027a36:	6852      	ldr	r2, [r2, #4]
 8027a38:	b2cd      	uxtb	r5, r1
 8027a3a:	b18b      	cbz	r3, 8027a60 <_sungetc_r+0x44>
 8027a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8027a3e:	4293      	cmp	r3, r2
 8027a40:	dd08      	ble.n	8027a54 <_sungetc_r+0x38>
 8027a42:	6823      	ldr	r3, [r4, #0]
 8027a44:	1e5a      	subs	r2, r3, #1
 8027a46:	6022      	str	r2, [r4, #0]
 8027a48:	f803 5c01 	strb.w	r5, [r3, #-1]
 8027a4c:	6863      	ldr	r3, [r4, #4]
 8027a4e:	3301      	adds	r3, #1
 8027a50:	6063      	str	r3, [r4, #4]
 8027a52:	e7e9      	b.n	8027a28 <_sungetc_r+0xc>
 8027a54:	4621      	mov	r1, r4
 8027a56:	f000 fd1b 	bl	8028490 <__submore>
 8027a5a:	2800      	cmp	r0, #0
 8027a5c:	d0f1      	beq.n	8027a42 <_sungetc_r+0x26>
 8027a5e:	e7e1      	b.n	8027a24 <_sungetc_r+0x8>
 8027a60:	6921      	ldr	r1, [r4, #16]
 8027a62:	6823      	ldr	r3, [r4, #0]
 8027a64:	b151      	cbz	r1, 8027a7c <_sungetc_r+0x60>
 8027a66:	4299      	cmp	r1, r3
 8027a68:	d208      	bcs.n	8027a7c <_sungetc_r+0x60>
 8027a6a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8027a6e:	42a9      	cmp	r1, r5
 8027a70:	d104      	bne.n	8027a7c <_sungetc_r+0x60>
 8027a72:	3b01      	subs	r3, #1
 8027a74:	3201      	adds	r2, #1
 8027a76:	6023      	str	r3, [r4, #0]
 8027a78:	6062      	str	r2, [r4, #4]
 8027a7a:	e7d5      	b.n	8027a28 <_sungetc_r+0xc>
 8027a7c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8027a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027a84:	6363      	str	r3, [r4, #52]	; 0x34
 8027a86:	2303      	movs	r3, #3
 8027a88:	63a3      	str	r3, [r4, #56]	; 0x38
 8027a8a:	4623      	mov	r3, r4
 8027a8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027a90:	6023      	str	r3, [r4, #0]
 8027a92:	2301      	movs	r3, #1
 8027a94:	e7dc      	b.n	8027a50 <_sungetc_r+0x34>

08027a96 <__ssrefill_r>:
 8027a96:	b510      	push	{r4, lr}
 8027a98:	460c      	mov	r4, r1
 8027a9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8027a9c:	b169      	cbz	r1, 8027aba <__ssrefill_r+0x24>
 8027a9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027aa2:	4299      	cmp	r1, r3
 8027aa4:	d001      	beq.n	8027aaa <__ssrefill_r+0x14>
 8027aa6:	f7fb ffe7 	bl	8023a78 <_free_r>
 8027aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027aac:	6063      	str	r3, [r4, #4]
 8027aae:	2000      	movs	r0, #0
 8027ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8027ab2:	b113      	cbz	r3, 8027aba <__ssrefill_r+0x24>
 8027ab4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027ab6:	6023      	str	r3, [r4, #0]
 8027ab8:	bd10      	pop	{r4, pc}
 8027aba:	6923      	ldr	r3, [r4, #16]
 8027abc:	6023      	str	r3, [r4, #0]
 8027abe:	2300      	movs	r3, #0
 8027ac0:	6063      	str	r3, [r4, #4]
 8027ac2:	89a3      	ldrh	r3, [r4, #12]
 8027ac4:	f043 0320 	orr.w	r3, r3, #32
 8027ac8:	81a3      	strh	r3, [r4, #12]
 8027aca:	f04f 30ff 	mov.w	r0, #4294967295
 8027ace:	e7f3      	b.n	8027ab8 <__ssrefill_r+0x22>

08027ad0 <__ssvfiscanf_r>:
 8027ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027ad4:	460c      	mov	r4, r1
 8027ad6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8027ada:	2100      	movs	r1, #0
 8027adc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8027ae0:	49a6      	ldr	r1, [pc, #664]	; (8027d7c <__ssvfiscanf_r+0x2ac>)
 8027ae2:	91a0      	str	r1, [sp, #640]	; 0x280
 8027ae4:	f10d 0804 	add.w	r8, sp, #4
 8027ae8:	49a5      	ldr	r1, [pc, #660]	; (8027d80 <__ssvfiscanf_r+0x2b0>)
 8027aea:	4fa6      	ldr	r7, [pc, #664]	; (8027d84 <__ssvfiscanf_r+0x2b4>)
 8027aec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8027d88 <__ssvfiscanf_r+0x2b8>
 8027af0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8027af4:	4606      	mov	r6, r0
 8027af6:	91a1      	str	r1, [sp, #644]	; 0x284
 8027af8:	9300      	str	r3, [sp, #0]
 8027afa:	7813      	ldrb	r3, [r2, #0]
 8027afc:	2b00      	cmp	r3, #0
 8027afe:	f000 815a 	beq.w	8027db6 <__ssvfiscanf_r+0x2e6>
 8027b02:	5dd9      	ldrb	r1, [r3, r7]
 8027b04:	f011 0108 	ands.w	r1, r1, #8
 8027b08:	f102 0501 	add.w	r5, r2, #1
 8027b0c:	d019      	beq.n	8027b42 <__ssvfiscanf_r+0x72>
 8027b0e:	6863      	ldr	r3, [r4, #4]
 8027b10:	2b00      	cmp	r3, #0
 8027b12:	dd0f      	ble.n	8027b34 <__ssvfiscanf_r+0x64>
 8027b14:	6823      	ldr	r3, [r4, #0]
 8027b16:	781a      	ldrb	r2, [r3, #0]
 8027b18:	5cba      	ldrb	r2, [r7, r2]
 8027b1a:	0712      	lsls	r2, r2, #28
 8027b1c:	d401      	bmi.n	8027b22 <__ssvfiscanf_r+0x52>
 8027b1e:	462a      	mov	r2, r5
 8027b20:	e7eb      	b.n	8027afa <__ssvfiscanf_r+0x2a>
 8027b22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8027b24:	3201      	adds	r2, #1
 8027b26:	9245      	str	r2, [sp, #276]	; 0x114
 8027b28:	6862      	ldr	r2, [r4, #4]
 8027b2a:	3301      	adds	r3, #1
 8027b2c:	3a01      	subs	r2, #1
 8027b2e:	6062      	str	r2, [r4, #4]
 8027b30:	6023      	str	r3, [r4, #0]
 8027b32:	e7ec      	b.n	8027b0e <__ssvfiscanf_r+0x3e>
 8027b34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027b36:	4621      	mov	r1, r4
 8027b38:	4630      	mov	r0, r6
 8027b3a:	4798      	blx	r3
 8027b3c:	2800      	cmp	r0, #0
 8027b3e:	d0e9      	beq.n	8027b14 <__ssvfiscanf_r+0x44>
 8027b40:	e7ed      	b.n	8027b1e <__ssvfiscanf_r+0x4e>
 8027b42:	2b25      	cmp	r3, #37	; 0x25
 8027b44:	d012      	beq.n	8027b6c <__ssvfiscanf_r+0x9c>
 8027b46:	469a      	mov	sl, r3
 8027b48:	6863      	ldr	r3, [r4, #4]
 8027b4a:	2b00      	cmp	r3, #0
 8027b4c:	f340 8091 	ble.w	8027c72 <__ssvfiscanf_r+0x1a2>
 8027b50:	6822      	ldr	r2, [r4, #0]
 8027b52:	7813      	ldrb	r3, [r2, #0]
 8027b54:	4553      	cmp	r3, sl
 8027b56:	f040 812e 	bne.w	8027db6 <__ssvfiscanf_r+0x2e6>
 8027b5a:	6863      	ldr	r3, [r4, #4]
 8027b5c:	3b01      	subs	r3, #1
 8027b5e:	6063      	str	r3, [r4, #4]
 8027b60:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8027b62:	3201      	adds	r2, #1
 8027b64:	3301      	adds	r3, #1
 8027b66:	6022      	str	r2, [r4, #0]
 8027b68:	9345      	str	r3, [sp, #276]	; 0x114
 8027b6a:	e7d8      	b.n	8027b1e <__ssvfiscanf_r+0x4e>
 8027b6c:	9141      	str	r1, [sp, #260]	; 0x104
 8027b6e:	9143      	str	r1, [sp, #268]	; 0x10c
 8027b70:	7853      	ldrb	r3, [r2, #1]
 8027b72:	2b2a      	cmp	r3, #42	; 0x2a
 8027b74:	bf02      	ittt	eq
 8027b76:	2310      	moveq	r3, #16
 8027b78:	1c95      	addeq	r5, r2, #2
 8027b7a:	9341      	streq	r3, [sp, #260]	; 0x104
 8027b7c:	220a      	movs	r2, #10
 8027b7e:	46aa      	mov	sl, r5
 8027b80:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8027b84:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8027b88:	2b09      	cmp	r3, #9
 8027b8a:	d91d      	bls.n	8027bc8 <__ssvfiscanf_r+0xf8>
 8027b8c:	487e      	ldr	r0, [pc, #504]	; (8027d88 <__ssvfiscanf_r+0x2b8>)
 8027b8e:	2203      	movs	r2, #3
 8027b90:	f7d8 fb6e 	bl	8000270 <memchr>
 8027b94:	b140      	cbz	r0, 8027ba8 <__ssvfiscanf_r+0xd8>
 8027b96:	2301      	movs	r3, #1
 8027b98:	eba0 0009 	sub.w	r0, r0, r9
 8027b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8027ba0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027ba2:	4318      	orrs	r0, r3
 8027ba4:	9041      	str	r0, [sp, #260]	; 0x104
 8027ba6:	4655      	mov	r5, sl
 8027ba8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8027bac:	2b78      	cmp	r3, #120	; 0x78
 8027bae:	d806      	bhi.n	8027bbe <__ssvfiscanf_r+0xee>
 8027bb0:	2b57      	cmp	r3, #87	; 0x57
 8027bb2:	d810      	bhi.n	8027bd6 <__ssvfiscanf_r+0x106>
 8027bb4:	2b25      	cmp	r3, #37	; 0x25
 8027bb6:	d0c6      	beq.n	8027b46 <__ssvfiscanf_r+0x76>
 8027bb8:	d856      	bhi.n	8027c68 <__ssvfiscanf_r+0x198>
 8027bba:	2b00      	cmp	r3, #0
 8027bbc:	d064      	beq.n	8027c88 <__ssvfiscanf_r+0x1b8>
 8027bbe:	2303      	movs	r3, #3
 8027bc0:	9347      	str	r3, [sp, #284]	; 0x11c
 8027bc2:	230a      	movs	r3, #10
 8027bc4:	9342      	str	r3, [sp, #264]	; 0x108
 8027bc6:	e071      	b.n	8027cac <__ssvfiscanf_r+0x1dc>
 8027bc8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8027bca:	fb02 1103 	mla	r1, r2, r3, r1
 8027bce:	3930      	subs	r1, #48	; 0x30
 8027bd0:	9143      	str	r1, [sp, #268]	; 0x10c
 8027bd2:	4655      	mov	r5, sl
 8027bd4:	e7d3      	b.n	8027b7e <__ssvfiscanf_r+0xae>
 8027bd6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8027bda:	2a20      	cmp	r2, #32
 8027bdc:	d8ef      	bhi.n	8027bbe <__ssvfiscanf_r+0xee>
 8027bde:	a101      	add	r1, pc, #4	; (adr r1, 8027be4 <__ssvfiscanf_r+0x114>)
 8027be0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8027be4:	08027c97 	.word	0x08027c97
 8027be8:	08027bbf 	.word	0x08027bbf
 8027bec:	08027bbf 	.word	0x08027bbf
 8027bf0:	08027cf5 	.word	0x08027cf5
 8027bf4:	08027bbf 	.word	0x08027bbf
 8027bf8:	08027bbf 	.word	0x08027bbf
 8027bfc:	08027bbf 	.word	0x08027bbf
 8027c00:	08027bbf 	.word	0x08027bbf
 8027c04:	08027bbf 	.word	0x08027bbf
 8027c08:	08027bbf 	.word	0x08027bbf
 8027c0c:	08027bbf 	.word	0x08027bbf
 8027c10:	08027d0b 	.word	0x08027d0b
 8027c14:	08027ce1 	.word	0x08027ce1
 8027c18:	08027c6f 	.word	0x08027c6f
 8027c1c:	08027c6f 	.word	0x08027c6f
 8027c20:	08027c6f 	.word	0x08027c6f
 8027c24:	08027bbf 	.word	0x08027bbf
 8027c28:	08027ce5 	.word	0x08027ce5
 8027c2c:	08027bbf 	.word	0x08027bbf
 8027c30:	08027bbf 	.word	0x08027bbf
 8027c34:	08027bbf 	.word	0x08027bbf
 8027c38:	08027bbf 	.word	0x08027bbf
 8027c3c:	08027d1b 	.word	0x08027d1b
 8027c40:	08027ced 	.word	0x08027ced
 8027c44:	08027c8f 	.word	0x08027c8f
 8027c48:	08027bbf 	.word	0x08027bbf
 8027c4c:	08027bbf 	.word	0x08027bbf
 8027c50:	08027d17 	.word	0x08027d17
 8027c54:	08027bbf 	.word	0x08027bbf
 8027c58:	08027ce1 	.word	0x08027ce1
 8027c5c:	08027bbf 	.word	0x08027bbf
 8027c60:	08027bbf 	.word	0x08027bbf
 8027c64:	08027c97 	.word	0x08027c97
 8027c68:	3b45      	subs	r3, #69	; 0x45
 8027c6a:	2b02      	cmp	r3, #2
 8027c6c:	d8a7      	bhi.n	8027bbe <__ssvfiscanf_r+0xee>
 8027c6e:	2305      	movs	r3, #5
 8027c70:	e01b      	b.n	8027caa <__ssvfiscanf_r+0x1da>
 8027c72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027c74:	4621      	mov	r1, r4
 8027c76:	4630      	mov	r0, r6
 8027c78:	4798      	blx	r3
 8027c7a:	2800      	cmp	r0, #0
 8027c7c:	f43f af68 	beq.w	8027b50 <__ssvfiscanf_r+0x80>
 8027c80:	9844      	ldr	r0, [sp, #272]	; 0x110
 8027c82:	2800      	cmp	r0, #0
 8027c84:	f040 808d 	bne.w	8027da2 <__ssvfiscanf_r+0x2d2>
 8027c88:	f04f 30ff 	mov.w	r0, #4294967295
 8027c8c:	e08f      	b.n	8027dae <__ssvfiscanf_r+0x2de>
 8027c8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8027c90:	f042 0220 	orr.w	r2, r2, #32
 8027c94:	9241      	str	r2, [sp, #260]	; 0x104
 8027c96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8027c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8027c9c:	9241      	str	r2, [sp, #260]	; 0x104
 8027c9e:	2210      	movs	r2, #16
 8027ca0:	2b6f      	cmp	r3, #111	; 0x6f
 8027ca2:	9242      	str	r2, [sp, #264]	; 0x108
 8027ca4:	bf34      	ite	cc
 8027ca6:	2303      	movcc	r3, #3
 8027ca8:	2304      	movcs	r3, #4
 8027caa:	9347      	str	r3, [sp, #284]	; 0x11c
 8027cac:	6863      	ldr	r3, [r4, #4]
 8027cae:	2b00      	cmp	r3, #0
 8027cb0:	dd42      	ble.n	8027d38 <__ssvfiscanf_r+0x268>
 8027cb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027cb4:	0659      	lsls	r1, r3, #25
 8027cb6:	d404      	bmi.n	8027cc2 <__ssvfiscanf_r+0x1f2>
 8027cb8:	6823      	ldr	r3, [r4, #0]
 8027cba:	781a      	ldrb	r2, [r3, #0]
 8027cbc:	5cba      	ldrb	r2, [r7, r2]
 8027cbe:	0712      	lsls	r2, r2, #28
 8027cc0:	d441      	bmi.n	8027d46 <__ssvfiscanf_r+0x276>
 8027cc2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8027cc4:	2b02      	cmp	r3, #2
 8027cc6:	dc50      	bgt.n	8027d6a <__ssvfiscanf_r+0x29a>
 8027cc8:	466b      	mov	r3, sp
 8027cca:	4622      	mov	r2, r4
 8027ccc:	a941      	add	r1, sp, #260	; 0x104
 8027cce:	4630      	mov	r0, r6
 8027cd0:	f000 f9d0 	bl	8028074 <_scanf_chars>
 8027cd4:	2801      	cmp	r0, #1
 8027cd6:	d06e      	beq.n	8027db6 <__ssvfiscanf_r+0x2e6>
 8027cd8:	2802      	cmp	r0, #2
 8027cda:	f47f af20 	bne.w	8027b1e <__ssvfiscanf_r+0x4e>
 8027cde:	e7cf      	b.n	8027c80 <__ssvfiscanf_r+0x1b0>
 8027ce0:	220a      	movs	r2, #10
 8027ce2:	e7dd      	b.n	8027ca0 <__ssvfiscanf_r+0x1d0>
 8027ce4:	2300      	movs	r3, #0
 8027ce6:	9342      	str	r3, [sp, #264]	; 0x108
 8027ce8:	2303      	movs	r3, #3
 8027cea:	e7de      	b.n	8027caa <__ssvfiscanf_r+0x1da>
 8027cec:	2308      	movs	r3, #8
 8027cee:	9342      	str	r3, [sp, #264]	; 0x108
 8027cf0:	2304      	movs	r3, #4
 8027cf2:	e7da      	b.n	8027caa <__ssvfiscanf_r+0x1da>
 8027cf4:	4629      	mov	r1, r5
 8027cf6:	4640      	mov	r0, r8
 8027cf8:	f000 fb92 	bl	8028420 <__sccl>
 8027cfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027d02:	9341      	str	r3, [sp, #260]	; 0x104
 8027d04:	4605      	mov	r5, r0
 8027d06:	2301      	movs	r3, #1
 8027d08:	e7cf      	b.n	8027caa <__ssvfiscanf_r+0x1da>
 8027d0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027d10:	9341      	str	r3, [sp, #260]	; 0x104
 8027d12:	2300      	movs	r3, #0
 8027d14:	e7c9      	b.n	8027caa <__ssvfiscanf_r+0x1da>
 8027d16:	2302      	movs	r3, #2
 8027d18:	e7c7      	b.n	8027caa <__ssvfiscanf_r+0x1da>
 8027d1a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8027d1c:	06c3      	lsls	r3, r0, #27
 8027d1e:	f53f aefe 	bmi.w	8027b1e <__ssvfiscanf_r+0x4e>
 8027d22:	9b00      	ldr	r3, [sp, #0]
 8027d24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8027d26:	1d19      	adds	r1, r3, #4
 8027d28:	9100      	str	r1, [sp, #0]
 8027d2a:	681b      	ldr	r3, [r3, #0]
 8027d2c:	f010 0f01 	tst.w	r0, #1
 8027d30:	bf14      	ite	ne
 8027d32:	801a      	strhne	r2, [r3, #0]
 8027d34:	601a      	streq	r2, [r3, #0]
 8027d36:	e6f2      	b.n	8027b1e <__ssvfiscanf_r+0x4e>
 8027d38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027d3a:	4621      	mov	r1, r4
 8027d3c:	4630      	mov	r0, r6
 8027d3e:	4798      	blx	r3
 8027d40:	2800      	cmp	r0, #0
 8027d42:	d0b6      	beq.n	8027cb2 <__ssvfiscanf_r+0x1e2>
 8027d44:	e79c      	b.n	8027c80 <__ssvfiscanf_r+0x1b0>
 8027d46:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8027d48:	3201      	adds	r2, #1
 8027d4a:	9245      	str	r2, [sp, #276]	; 0x114
 8027d4c:	6862      	ldr	r2, [r4, #4]
 8027d4e:	3a01      	subs	r2, #1
 8027d50:	2a00      	cmp	r2, #0
 8027d52:	6062      	str	r2, [r4, #4]
 8027d54:	dd02      	ble.n	8027d5c <__ssvfiscanf_r+0x28c>
 8027d56:	3301      	adds	r3, #1
 8027d58:	6023      	str	r3, [r4, #0]
 8027d5a:	e7ad      	b.n	8027cb8 <__ssvfiscanf_r+0x1e8>
 8027d5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027d5e:	4621      	mov	r1, r4
 8027d60:	4630      	mov	r0, r6
 8027d62:	4798      	blx	r3
 8027d64:	2800      	cmp	r0, #0
 8027d66:	d0a7      	beq.n	8027cb8 <__ssvfiscanf_r+0x1e8>
 8027d68:	e78a      	b.n	8027c80 <__ssvfiscanf_r+0x1b0>
 8027d6a:	2b04      	cmp	r3, #4
 8027d6c:	dc0e      	bgt.n	8027d8c <__ssvfiscanf_r+0x2bc>
 8027d6e:	466b      	mov	r3, sp
 8027d70:	4622      	mov	r2, r4
 8027d72:	a941      	add	r1, sp, #260	; 0x104
 8027d74:	4630      	mov	r0, r6
 8027d76:	f000 f9d7 	bl	8028128 <_scanf_i>
 8027d7a:	e7ab      	b.n	8027cd4 <__ssvfiscanf_r+0x204>
 8027d7c:	08027a1d 	.word	0x08027a1d
 8027d80:	08027a97 	.word	0x08027a97
 8027d84:	080e224d 	.word	0x080e224d
 8027d88:	080e2b02 	.word	0x080e2b02
 8027d8c:	4b0b      	ldr	r3, [pc, #44]	; (8027dbc <__ssvfiscanf_r+0x2ec>)
 8027d8e:	2b00      	cmp	r3, #0
 8027d90:	f43f aec5 	beq.w	8027b1e <__ssvfiscanf_r+0x4e>
 8027d94:	466b      	mov	r3, sp
 8027d96:	4622      	mov	r2, r4
 8027d98:	a941      	add	r1, sp, #260	; 0x104
 8027d9a:	4630      	mov	r0, r6
 8027d9c:	f3af 8000 	nop.w
 8027da0:	e798      	b.n	8027cd4 <__ssvfiscanf_r+0x204>
 8027da2:	89a3      	ldrh	r3, [r4, #12]
 8027da4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8027da8:	bf18      	it	ne
 8027daa:	f04f 30ff 	movne.w	r0, #4294967295
 8027dae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8027db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027db6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8027db8:	e7f9      	b.n	8027dae <__ssvfiscanf_r+0x2de>
 8027dba:	bf00      	nop
 8027dbc:	00000000 	.word	0x00000000

08027dc0 <__sfputc_r>:
 8027dc0:	6893      	ldr	r3, [r2, #8]
 8027dc2:	3b01      	subs	r3, #1
 8027dc4:	2b00      	cmp	r3, #0
 8027dc6:	b410      	push	{r4}
 8027dc8:	6093      	str	r3, [r2, #8]
 8027dca:	da08      	bge.n	8027dde <__sfputc_r+0x1e>
 8027dcc:	6994      	ldr	r4, [r2, #24]
 8027dce:	42a3      	cmp	r3, r4
 8027dd0:	db01      	blt.n	8027dd6 <__sfputc_r+0x16>
 8027dd2:	290a      	cmp	r1, #10
 8027dd4:	d103      	bne.n	8027dde <__sfputc_r+0x1e>
 8027dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027dda:	f7fd be51 	b.w	8025a80 <__swbuf_r>
 8027dde:	6813      	ldr	r3, [r2, #0]
 8027de0:	1c58      	adds	r0, r3, #1
 8027de2:	6010      	str	r0, [r2, #0]
 8027de4:	7019      	strb	r1, [r3, #0]
 8027de6:	4608      	mov	r0, r1
 8027de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027dec:	4770      	bx	lr

08027dee <__sfputs_r>:
 8027dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027df0:	4606      	mov	r6, r0
 8027df2:	460f      	mov	r7, r1
 8027df4:	4614      	mov	r4, r2
 8027df6:	18d5      	adds	r5, r2, r3
 8027df8:	42ac      	cmp	r4, r5
 8027dfa:	d101      	bne.n	8027e00 <__sfputs_r+0x12>
 8027dfc:	2000      	movs	r0, #0
 8027dfe:	e007      	b.n	8027e10 <__sfputs_r+0x22>
 8027e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027e04:	463a      	mov	r2, r7
 8027e06:	4630      	mov	r0, r6
 8027e08:	f7ff ffda 	bl	8027dc0 <__sfputc_r>
 8027e0c:	1c43      	adds	r3, r0, #1
 8027e0e:	d1f3      	bne.n	8027df8 <__sfputs_r+0xa>
 8027e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027e14 <_vfiprintf_r>:
 8027e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e18:	460d      	mov	r5, r1
 8027e1a:	b09d      	sub	sp, #116	; 0x74
 8027e1c:	4614      	mov	r4, r2
 8027e1e:	4698      	mov	r8, r3
 8027e20:	4606      	mov	r6, r0
 8027e22:	b118      	cbz	r0, 8027e2c <_vfiprintf_r+0x18>
 8027e24:	6983      	ldr	r3, [r0, #24]
 8027e26:	b90b      	cbnz	r3, 8027e2c <_vfiprintf_r+0x18>
 8027e28:	f7fe fea4 	bl	8026b74 <__sinit>
 8027e2c:	4b89      	ldr	r3, [pc, #548]	; (8028054 <_vfiprintf_r+0x240>)
 8027e2e:	429d      	cmp	r5, r3
 8027e30:	d11b      	bne.n	8027e6a <_vfiprintf_r+0x56>
 8027e32:	6875      	ldr	r5, [r6, #4]
 8027e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027e36:	07d9      	lsls	r1, r3, #31
 8027e38:	d405      	bmi.n	8027e46 <_vfiprintf_r+0x32>
 8027e3a:	89ab      	ldrh	r3, [r5, #12]
 8027e3c:	059a      	lsls	r2, r3, #22
 8027e3e:	d402      	bmi.n	8027e46 <_vfiprintf_r+0x32>
 8027e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027e42:	f7fb fb53 	bl	80234ec <__retarget_lock_acquire_recursive>
 8027e46:	89ab      	ldrh	r3, [r5, #12]
 8027e48:	071b      	lsls	r3, r3, #28
 8027e4a:	d501      	bpl.n	8027e50 <_vfiprintf_r+0x3c>
 8027e4c:	692b      	ldr	r3, [r5, #16]
 8027e4e:	b9eb      	cbnz	r3, 8027e8c <_vfiprintf_r+0x78>
 8027e50:	4629      	mov	r1, r5
 8027e52:	4630      	mov	r0, r6
 8027e54:	f7fd fe78 	bl	8025b48 <__swsetup_r>
 8027e58:	b1c0      	cbz	r0, 8027e8c <_vfiprintf_r+0x78>
 8027e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027e5c:	07dc      	lsls	r4, r3, #31
 8027e5e:	d50e      	bpl.n	8027e7e <_vfiprintf_r+0x6a>
 8027e60:	f04f 30ff 	mov.w	r0, #4294967295
 8027e64:	b01d      	add	sp, #116	; 0x74
 8027e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e6a:	4b7b      	ldr	r3, [pc, #492]	; (8028058 <_vfiprintf_r+0x244>)
 8027e6c:	429d      	cmp	r5, r3
 8027e6e:	d101      	bne.n	8027e74 <_vfiprintf_r+0x60>
 8027e70:	68b5      	ldr	r5, [r6, #8]
 8027e72:	e7df      	b.n	8027e34 <_vfiprintf_r+0x20>
 8027e74:	4b79      	ldr	r3, [pc, #484]	; (802805c <_vfiprintf_r+0x248>)
 8027e76:	429d      	cmp	r5, r3
 8027e78:	bf08      	it	eq
 8027e7a:	68f5      	ldreq	r5, [r6, #12]
 8027e7c:	e7da      	b.n	8027e34 <_vfiprintf_r+0x20>
 8027e7e:	89ab      	ldrh	r3, [r5, #12]
 8027e80:	0598      	lsls	r0, r3, #22
 8027e82:	d4ed      	bmi.n	8027e60 <_vfiprintf_r+0x4c>
 8027e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027e86:	f7fb fb33 	bl	80234f0 <__retarget_lock_release_recursive>
 8027e8a:	e7e9      	b.n	8027e60 <_vfiprintf_r+0x4c>
 8027e8c:	2300      	movs	r3, #0
 8027e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8027e90:	2320      	movs	r3, #32
 8027e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8027e9a:	2330      	movs	r3, #48	; 0x30
 8027e9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028060 <_vfiprintf_r+0x24c>
 8027ea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027ea4:	f04f 0901 	mov.w	r9, #1
 8027ea8:	4623      	mov	r3, r4
 8027eaa:	469a      	mov	sl, r3
 8027eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027eb0:	b10a      	cbz	r2, 8027eb6 <_vfiprintf_r+0xa2>
 8027eb2:	2a25      	cmp	r2, #37	; 0x25
 8027eb4:	d1f9      	bne.n	8027eaa <_vfiprintf_r+0x96>
 8027eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8027eba:	d00b      	beq.n	8027ed4 <_vfiprintf_r+0xc0>
 8027ebc:	465b      	mov	r3, fp
 8027ebe:	4622      	mov	r2, r4
 8027ec0:	4629      	mov	r1, r5
 8027ec2:	4630      	mov	r0, r6
 8027ec4:	f7ff ff93 	bl	8027dee <__sfputs_r>
 8027ec8:	3001      	adds	r0, #1
 8027eca:	f000 80aa 	beq.w	8028022 <_vfiprintf_r+0x20e>
 8027ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027ed0:	445a      	add	r2, fp
 8027ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8027ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8027ed8:	2b00      	cmp	r3, #0
 8027eda:	f000 80a2 	beq.w	8028022 <_vfiprintf_r+0x20e>
 8027ede:	2300      	movs	r3, #0
 8027ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8027ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027ee8:	f10a 0a01 	add.w	sl, sl, #1
 8027eec:	9304      	str	r3, [sp, #16]
 8027eee:	9307      	str	r3, [sp, #28]
 8027ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8027ef6:	4654      	mov	r4, sl
 8027ef8:	2205      	movs	r2, #5
 8027efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027efe:	4858      	ldr	r0, [pc, #352]	; (8028060 <_vfiprintf_r+0x24c>)
 8027f00:	f7d8 f9b6 	bl	8000270 <memchr>
 8027f04:	9a04      	ldr	r2, [sp, #16]
 8027f06:	b9d8      	cbnz	r0, 8027f40 <_vfiprintf_r+0x12c>
 8027f08:	06d1      	lsls	r1, r2, #27
 8027f0a:	bf44      	itt	mi
 8027f0c:	2320      	movmi	r3, #32
 8027f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027f12:	0713      	lsls	r3, r2, #28
 8027f14:	bf44      	itt	mi
 8027f16:	232b      	movmi	r3, #43	; 0x2b
 8027f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8027f20:	2b2a      	cmp	r3, #42	; 0x2a
 8027f22:	d015      	beq.n	8027f50 <_vfiprintf_r+0x13c>
 8027f24:	9a07      	ldr	r2, [sp, #28]
 8027f26:	4654      	mov	r4, sl
 8027f28:	2000      	movs	r0, #0
 8027f2a:	f04f 0c0a 	mov.w	ip, #10
 8027f2e:	4621      	mov	r1, r4
 8027f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027f34:	3b30      	subs	r3, #48	; 0x30
 8027f36:	2b09      	cmp	r3, #9
 8027f38:	d94e      	bls.n	8027fd8 <_vfiprintf_r+0x1c4>
 8027f3a:	b1b0      	cbz	r0, 8027f6a <_vfiprintf_r+0x156>
 8027f3c:	9207      	str	r2, [sp, #28]
 8027f3e:	e014      	b.n	8027f6a <_vfiprintf_r+0x156>
 8027f40:	eba0 0308 	sub.w	r3, r0, r8
 8027f44:	fa09 f303 	lsl.w	r3, r9, r3
 8027f48:	4313      	orrs	r3, r2
 8027f4a:	9304      	str	r3, [sp, #16]
 8027f4c:	46a2      	mov	sl, r4
 8027f4e:	e7d2      	b.n	8027ef6 <_vfiprintf_r+0xe2>
 8027f50:	9b03      	ldr	r3, [sp, #12]
 8027f52:	1d19      	adds	r1, r3, #4
 8027f54:	681b      	ldr	r3, [r3, #0]
 8027f56:	9103      	str	r1, [sp, #12]
 8027f58:	2b00      	cmp	r3, #0
 8027f5a:	bfbb      	ittet	lt
 8027f5c:	425b      	neglt	r3, r3
 8027f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8027f62:	9307      	strge	r3, [sp, #28]
 8027f64:	9307      	strlt	r3, [sp, #28]
 8027f66:	bfb8      	it	lt
 8027f68:	9204      	strlt	r2, [sp, #16]
 8027f6a:	7823      	ldrb	r3, [r4, #0]
 8027f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8027f6e:	d10c      	bne.n	8027f8a <_vfiprintf_r+0x176>
 8027f70:	7863      	ldrb	r3, [r4, #1]
 8027f72:	2b2a      	cmp	r3, #42	; 0x2a
 8027f74:	d135      	bne.n	8027fe2 <_vfiprintf_r+0x1ce>
 8027f76:	9b03      	ldr	r3, [sp, #12]
 8027f78:	1d1a      	adds	r2, r3, #4
 8027f7a:	681b      	ldr	r3, [r3, #0]
 8027f7c:	9203      	str	r2, [sp, #12]
 8027f7e:	2b00      	cmp	r3, #0
 8027f80:	bfb8      	it	lt
 8027f82:	f04f 33ff 	movlt.w	r3, #4294967295
 8027f86:	3402      	adds	r4, #2
 8027f88:	9305      	str	r3, [sp, #20]
 8027f8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028070 <_vfiprintf_r+0x25c>
 8027f8e:	7821      	ldrb	r1, [r4, #0]
 8027f90:	2203      	movs	r2, #3
 8027f92:	4650      	mov	r0, sl
 8027f94:	f7d8 f96c 	bl	8000270 <memchr>
 8027f98:	b140      	cbz	r0, 8027fac <_vfiprintf_r+0x198>
 8027f9a:	2340      	movs	r3, #64	; 0x40
 8027f9c:	eba0 000a 	sub.w	r0, r0, sl
 8027fa0:	fa03 f000 	lsl.w	r0, r3, r0
 8027fa4:	9b04      	ldr	r3, [sp, #16]
 8027fa6:	4303      	orrs	r3, r0
 8027fa8:	3401      	adds	r4, #1
 8027faa:	9304      	str	r3, [sp, #16]
 8027fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027fb0:	482c      	ldr	r0, [pc, #176]	; (8028064 <_vfiprintf_r+0x250>)
 8027fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027fb6:	2206      	movs	r2, #6
 8027fb8:	f7d8 f95a 	bl	8000270 <memchr>
 8027fbc:	2800      	cmp	r0, #0
 8027fbe:	d03f      	beq.n	8028040 <_vfiprintf_r+0x22c>
 8027fc0:	4b29      	ldr	r3, [pc, #164]	; (8028068 <_vfiprintf_r+0x254>)
 8027fc2:	bb1b      	cbnz	r3, 802800c <_vfiprintf_r+0x1f8>
 8027fc4:	9b03      	ldr	r3, [sp, #12]
 8027fc6:	3307      	adds	r3, #7
 8027fc8:	f023 0307 	bic.w	r3, r3, #7
 8027fcc:	3308      	adds	r3, #8
 8027fce:	9303      	str	r3, [sp, #12]
 8027fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027fd2:	443b      	add	r3, r7
 8027fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8027fd6:	e767      	b.n	8027ea8 <_vfiprintf_r+0x94>
 8027fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8027fdc:	460c      	mov	r4, r1
 8027fde:	2001      	movs	r0, #1
 8027fe0:	e7a5      	b.n	8027f2e <_vfiprintf_r+0x11a>
 8027fe2:	2300      	movs	r3, #0
 8027fe4:	3401      	adds	r4, #1
 8027fe6:	9305      	str	r3, [sp, #20]
 8027fe8:	4619      	mov	r1, r3
 8027fea:	f04f 0c0a 	mov.w	ip, #10
 8027fee:	4620      	mov	r0, r4
 8027ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027ff4:	3a30      	subs	r2, #48	; 0x30
 8027ff6:	2a09      	cmp	r2, #9
 8027ff8:	d903      	bls.n	8028002 <_vfiprintf_r+0x1ee>
 8027ffa:	2b00      	cmp	r3, #0
 8027ffc:	d0c5      	beq.n	8027f8a <_vfiprintf_r+0x176>
 8027ffe:	9105      	str	r1, [sp, #20]
 8028000:	e7c3      	b.n	8027f8a <_vfiprintf_r+0x176>
 8028002:	fb0c 2101 	mla	r1, ip, r1, r2
 8028006:	4604      	mov	r4, r0
 8028008:	2301      	movs	r3, #1
 802800a:	e7f0      	b.n	8027fee <_vfiprintf_r+0x1da>
 802800c:	ab03      	add	r3, sp, #12
 802800e:	9300      	str	r3, [sp, #0]
 8028010:	462a      	mov	r2, r5
 8028012:	4b16      	ldr	r3, [pc, #88]	; (802806c <_vfiprintf_r+0x258>)
 8028014:	a904      	add	r1, sp, #16
 8028016:	4630      	mov	r0, r6
 8028018:	f7fb fe9e 	bl	8023d58 <_printf_float>
 802801c:	4607      	mov	r7, r0
 802801e:	1c78      	adds	r0, r7, #1
 8028020:	d1d6      	bne.n	8027fd0 <_vfiprintf_r+0x1bc>
 8028022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028024:	07d9      	lsls	r1, r3, #31
 8028026:	d405      	bmi.n	8028034 <_vfiprintf_r+0x220>
 8028028:	89ab      	ldrh	r3, [r5, #12]
 802802a:	059a      	lsls	r2, r3, #22
 802802c:	d402      	bmi.n	8028034 <_vfiprintf_r+0x220>
 802802e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028030:	f7fb fa5e 	bl	80234f0 <__retarget_lock_release_recursive>
 8028034:	89ab      	ldrh	r3, [r5, #12]
 8028036:	065b      	lsls	r3, r3, #25
 8028038:	f53f af12 	bmi.w	8027e60 <_vfiprintf_r+0x4c>
 802803c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802803e:	e711      	b.n	8027e64 <_vfiprintf_r+0x50>
 8028040:	ab03      	add	r3, sp, #12
 8028042:	9300      	str	r3, [sp, #0]
 8028044:	462a      	mov	r2, r5
 8028046:	4b09      	ldr	r3, [pc, #36]	; (802806c <_vfiprintf_r+0x258>)
 8028048:	a904      	add	r1, sp, #16
 802804a:	4630      	mov	r0, r6
 802804c:	f7fc f910 	bl	8024270 <_printf_i>
 8028050:	e7e4      	b.n	802801c <_vfiprintf_r+0x208>
 8028052:	bf00      	nop
 8028054:	080e2960 	.word	0x080e2960
 8028058:	080e2980 	.word	0x080e2980
 802805c:	080e2940 	.word	0x080e2940
 8028060:	080e2afc 	.word	0x080e2afc
 8028064:	080e2b06 	.word	0x080e2b06
 8028068:	08023d59 	.word	0x08023d59
 802806c:	08027def 	.word	0x08027def
 8028070:	080e2b02 	.word	0x080e2b02

08028074 <_scanf_chars>:
 8028074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028078:	4615      	mov	r5, r2
 802807a:	688a      	ldr	r2, [r1, #8]
 802807c:	4680      	mov	r8, r0
 802807e:	460c      	mov	r4, r1
 8028080:	b932      	cbnz	r2, 8028090 <_scanf_chars+0x1c>
 8028082:	698a      	ldr	r2, [r1, #24]
 8028084:	2a00      	cmp	r2, #0
 8028086:	bf0c      	ite	eq
 8028088:	2201      	moveq	r2, #1
 802808a:	f04f 32ff 	movne.w	r2, #4294967295
 802808e:	608a      	str	r2, [r1, #8]
 8028090:	6822      	ldr	r2, [r4, #0]
 8028092:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8028124 <_scanf_chars+0xb0>
 8028096:	06d1      	lsls	r1, r2, #27
 8028098:	bf5f      	itttt	pl
 802809a:	681a      	ldrpl	r2, [r3, #0]
 802809c:	1d11      	addpl	r1, r2, #4
 802809e:	6019      	strpl	r1, [r3, #0]
 80280a0:	6816      	ldrpl	r6, [r2, #0]
 80280a2:	2700      	movs	r7, #0
 80280a4:	69a0      	ldr	r0, [r4, #24]
 80280a6:	b188      	cbz	r0, 80280cc <_scanf_chars+0x58>
 80280a8:	2801      	cmp	r0, #1
 80280aa:	d107      	bne.n	80280bc <_scanf_chars+0x48>
 80280ac:	682a      	ldr	r2, [r5, #0]
 80280ae:	7811      	ldrb	r1, [r2, #0]
 80280b0:	6962      	ldr	r2, [r4, #20]
 80280b2:	5c52      	ldrb	r2, [r2, r1]
 80280b4:	b952      	cbnz	r2, 80280cc <_scanf_chars+0x58>
 80280b6:	2f00      	cmp	r7, #0
 80280b8:	d031      	beq.n	802811e <_scanf_chars+0xaa>
 80280ba:	e022      	b.n	8028102 <_scanf_chars+0x8e>
 80280bc:	2802      	cmp	r0, #2
 80280be:	d120      	bne.n	8028102 <_scanf_chars+0x8e>
 80280c0:	682b      	ldr	r3, [r5, #0]
 80280c2:	781b      	ldrb	r3, [r3, #0]
 80280c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80280c8:	071b      	lsls	r3, r3, #28
 80280ca:	d41a      	bmi.n	8028102 <_scanf_chars+0x8e>
 80280cc:	6823      	ldr	r3, [r4, #0]
 80280ce:	06da      	lsls	r2, r3, #27
 80280d0:	bf5e      	ittt	pl
 80280d2:	682b      	ldrpl	r3, [r5, #0]
 80280d4:	781b      	ldrbpl	r3, [r3, #0]
 80280d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80280da:	682a      	ldr	r2, [r5, #0]
 80280dc:	686b      	ldr	r3, [r5, #4]
 80280de:	3201      	adds	r2, #1
 80280e0:	602a      	str	r2, [r5, #0]
 80280e2:	68a2      	ldr	r2, [r4, #8]
 80280e4:	3b01      	subs	r3, #1
 80280e6:	3a01      	subs	r2, #1
 80280e8:	606b      	str	r3, [r5, #4]
 80280ea:	3701      	adds	r7, #1
 80280ec:	60a2      	str	r2, [r4, #8]
 80280ee:	b142      	cbz	r2, 8028102 <_scanf_chars+0x8e>
 80280f0:	2b00      	cmp	r3, #0
 80280f2:	dcd7      	bgt.n	80280a4 <_scanf_chars+0x30>
 80280f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80280f8:	4629      	mov	r1, r5
 80280fa:	4640      	mov	r0, r8
 80280fc:	4798      	blx	r3
 80280fe:	2800      	cmp	r0, #0
 8028100:	d0d0      	beq.n	80280a4 <_scanf_chars+0x30>
 8028102:	6823      	ldr	r3, [r4, #0]
 8028104:	f013 0310 	ands.w	r3, r3, #16
 8028108:	d105      	bne.n	8028116 <_scanf_chars+0xa2>
 802810a:	68e2      	ldr	r2, [r4, #12]
 802810c:	3201      	adds	r2, #1
 802810e:	60e2      	str	r2, [r4, #12]
 8028110:	69a2      	ldr	r2, [r4, #24]
 8028112:	b102      	cbz	r2, 8028116 <_scanf_chars+0xa2>
 8028114:	7033      	strb	r3, [r6, #0]
 8028116:	6923      	ldr	r3, [r4, #16]
 8028118:	443b      	add	r3, r7
 802811a:	6123      	str	r3, [r4, #16]
 802811c:	2000      	movs	r0, #0
 802811e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028122:	bf00      	nop
 8028124:	080e224d 	.word	0x080e224d

08028128 <_scanf_i>:
 8028128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802812c:	4698      	mov	r8, r3
 802812e:	4b76      	ldr	r3, [pc, #472]	; (8028308 <_scanf_i+0x1e0>)
 8028130:	460c      	mov	r4, r1
 8028132:	4682      	mov	sl, r0
 8028134:	4616      	mov	r6, r2
 8028136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802813a:	b087      	sub	sp, #28
 802813c:	ab03      	add	r3, sp, #12
 802813e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8028142:	4b72      	ldr	r3, [pc, #456]	; (802830c <_scanf_i+0x1e4>)
 8028144:	69a1      	ldr	r1, [r4, #24]
 8028146:	4a72      	ldr	r2, [pc, #456]	; (8028310 <_scanf_i+0x1e8>)
 8028148:	2903      	cmp	r1, #3
 802814a:	bf18      	it	ne
 802814c:	461a      	movne	r2, r3
 802814e:	68a3      	ldr	r3, [r4, #8]
 8028150:	9201      	str	r2, [sp, #4]
 8028152:	1e5a      	subs	r2, r3, #1
 8028154:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8028158:	bf88      	it	hi
 802815a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802815e:	4627      	mov	r7, r4
 8028160:	bf82      	ittt	hi
 8028162:	eb03 0905 	addhi.w	r9, r3, r5
 8028166:	f240 135d 	movwhi	r3, #349	; 0x15d
 802816a:	60a3      	strhi	r3, [r4, #8]
 802816c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8028170:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8028174:	bf98      	it	ls
 8028176:	f04f 0900 	movls.w	r9, #0
 802817a:	6023      	str	r3, [r4, #0]
 802817c:	463d      	mov	r5, r7
 802817e:	f04f 0b00 	mov.w	fp, #0
 8028182:	6831      	ldr	r1, [r6, #0]
 8028184:	ab03      	add	r3, sp, #12
 8028186:	7809      	ldrb	r1, [r1, #0]
 8028188:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802818c:	2202      	movs	r2, #2
 802818e:	f7d8 f86f 	bl	8000270 <memchr>
 8028192:	b328      	cbz	r0, 80281e0 <_scanf_i+0xb8>
 8028194:	f1bb 0f01 	cmp.w	fp, #1
 8028198:	d159      	bne.n	802824e <_scanf_i+0x126>
 802819a:	6862      	ldr	r2, [r4, #4]
 802819c:	b92a      	cbnz	r2, 80281aa <_scanf_i+0x82>
 802819e:	6822      	ldr	r2, [r4, #0]
 80281a0:	2308      	movs	r3, #8
 80281a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80281a6:	6063      	str	r3, [r4, #4]
 80281a8:	6022      	str	r2, [r4, #0]
 80281aa:	6822      	ldr	r2, [r4, #0]
 80281ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80281b0:	6022      	str	r2, [r4, #0]
 80281b2:	68a2      	ldr	r2, [r4, #8]
 80281b4:	1e51      	subs	r1, r2, #1
 80281b6:	60a1      	str	r1, [r4, #8]
 80281b8:	b192      	cbz	r2, 80281e0 <_scanf_i+0xb8>
 80281ba:	6832      	ldr	r2, [r6, #0]
 80281bc:	1c51      	adds	r1, r2, #1
 80281be:	6031      	str	r1, [r6, #0]
 80281c0:	7812      	ldrb	r2, [r2, #0]
 80281c2:	f805 2b01 	strb.w	r2, [r5], #1
 80281c6:	6872      	ldr	r2, [r6, #4]
 80281c8:	3a01      	subs	r2, #1
 80281ca:	2a00      	cmp	r2, #0
 80281cc:	6072      	str	r2, [r6, #4]
 80281ce:	dc07      	bgt.n	80281e0 <_scanf_i+0xb8>
 80281d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80281d4:	4631      	mov	r1, r6
 80281d6:	4650      	mov	r0, sl
 80281d8:	4790      	blx	r2
 80281da:	2800      	cmp	r0, #0
 80281dc:	f040 8085 	bne.w	80282ea <_scanf_i+0x1c2>
 80281e0:	f10b 0b01 	add.w	fp, fp, #1
 80281e4:	f1bb 0f03 	cmp.w	fp, #3
 80281e8:	d1cb      	bne.n	8028182 <_scanf_i+0x5a>
 80281ea:	6863      	ldr	r3, [r4, #4]
 80281ec:	b90b      	cbnz	r3, 80281f2 <_scanf_i+0xca>
 80281ee:	230a      	movs	r3, #10
 80281f0:	6063      	str	r3, [r4, #4]
 80281f2:	6863      	ldr	r3, [r4, #4]
 80281f4:	4947      	ldr	r1, [pc, #284]	; (8028314 <_scanf_i+0x1ec>)
 80281f6:	6960      	ldr	r0, [r4, #20]
 80281f8:	1ac9      	subs	r1, r1, r3
 80281fa:	f000 f911 	bl	8028420 <__sccl>
 80281fe:	f04f 0b00 	mov.w	fp, #0
 8028202:	68a3      	ldr	r3, [r4, #8]
 8028204:	6822      	ldr	r2, [r4, #0]
 8028206:	2b00      	cmp	r3, #0
 8028208:	d03d      	beq.n	8028286 <_scanf_i+0x15e>
 802820a:	6831      	ldr	r1, [r6, #0]
 802820c:	6960      	ldr	r0, [r4, #20]
 802820e:	f891 c000 	ldrb.w	ip, [r1]
 8028212:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028216:	2800      	cmp	r0, #0
 8028218:	d035      	beq.n	8028286 <_scanf_i+0x15e>
 802821a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802821e:	d124      	bne.n	802826a <_scanf_i+0x142>
 8028220:	0510      	lsls	r0, r2, #20
 8028222:	d522      	bpl.n	802826a <_scanf_i+0x142>
 8028224:	f10b 0b01 	add.w	fp, fp, #1
 8028228:	f1b9 0f00 	cmp.w	r9, #0
 802822c:	d003      	beq.n	8028236 <_scanf_i+0x10e>
 802822e:	3301      	adds	r3, #1
 8028230:	f109 39ff 	add.w	r9, r9, #4294967295
 8028234:	60a3      	str	r3, [r4, #8]
 8028236:	6873      	ldr	r3, [r6, #4]
 8028238:	3b01      	subs	r3, #1
 802823a:	2b00      	cmp	r3, #0
 802823c:	6073      	str	r3, [r6, #4]
 802823e:	dd1b      	ble.n	8028278 <_scanf_i+0x150>
 8028240:	6833      	ldr	r3, [r6, #0]
 8028242:	3301      	adds	r3, #1
 8028244:	6033      	str	r3, [r6, #0]
 8028246:	68a3      	ldr	r3, [r4, #8]
 8028248:	3b01      	subs	r3, #1
 802824a:	60a3      	str	r3, [r4, #8]
 802824c:	e7d9      	b.n	8028202 <_scanf_i+0xda>
 802824e:	f1bb 0f02 	cmp.w	fp, #2
 8028252:	d1ae      	bne.n	80281b2 <_scanf_i+0x8a>
 8028254:	6822      	ldr	r2, [r4, #0]
 8028256:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802825a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802825e:	d1bf      	bne.n	80281e0 <_scanf_i+0xb8>
 8028260:	2310      	movs	r3, #16
 8028262:	6063      	str	r3, [r4, #4]
 8028264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028268:	e7a2      	b.n	80281b0 <_scanf_i+0x88>
 802826a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802826e:	6022      	str	r2, [r4, #0]
 8028270:	780b      	ldrb	r3, [r1, #0]
 8028272:	f805 3b01 	strb.w	r3, [r5], #1
 8028276:	e7de      	b.n	8028236 <_scanf_i+0x10e>
 8028278:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802827c:	4631      	mov	r1, r6
 802827e:	4650      	mov	r0, sl
 8028280:	4798      	blx	r3
 8028282:	2800      	cmp	r0, #0
 8028284:	d0df      	beq.n	8028246 <_scanf_i+0x11e>
 8028286:	6823      	ldr	r3, [r4, #0]
 8028288:	05db      	lsls	r3, r3, #23
 802828a:	d50d      	bpl.n	80282a8 <_scanf_i+0x180>
 802828c:	42bd      	cmp	r5, r7
 802828e:	d909      	bls.n	80282a4 <_scanf_i+0x17c>
 8028290:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8028294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8028298:	4632      	mov	r2, r6
 802829a:	4650      	mov	r0, sl
 802829c:	4798      	blx	r3
 802829e:	f105 39ff 	add.w	r9, r5, #4294967295
 80282a2:	464d      	mov	r5, r9
 80282a4:	42bd      	cmp	r5, r7
 80282a6:	d02d      	beq.n	8028304 <_scanf_i+0x1dc>
 80282a8:	6822      	ldr	r2, [r4, #0]
 80282aa:	f012 0210 	ands.w	r2, r2, #16
 80282ae:	d113      	bne.n	80282d8 <_scanf_i+0x1b0>
 80282b0:	702a      	strb	r2, [r5, #0]
 80282b2:	6863      	ldr	r3, [r4, #4]
 80282b4:	9e01      	ldr	r6, [sp, #4]
 80282b6:	4639      	mov	r1, r7
 80282b8:	4650      	mov	r0, sl
 80282ba:	47b0      	blx	r6
 80282bc:	6821      	ldr	r1, [r4, #0]
 80282be:	f8d8 3000 	ldr.w	r3, [r8]
 80282c2:	f011 0f20 	tst.w	r1, #32
 80282c6:	d013      	beq.n	80282f0 <_scanf_i+0x1c8>
 80282c8:	1d1a      	adds	r2, r3, #4
 80282ca:	f8c8 2000 	str.w	r2, [r8]
 80282ce:	681b      	ldr	r3, [r3, #0]
 80282d0:	6018      	str	r0, [r3, #0]
 80282d2:	68e3      	ldr	r3, [r4, #12]
 80282d4:	3301      	adds	r3, #1
 80282d6:	60e3      	str	r3, [r4, #12]
 80282d8:	1bed      	subs	r5, r5, r7
 80282da:	44ab      	add	fp, r5
 80282dc:	6925      	ldr	r5, [r4, #16]
 80282de:	445d      	add	r5, fp
 80282e0:	6125      	str	r5, [r4, #16]
 80282e2:	2000      	movs	r0, #0
 80282e4:	b007      	add	sp, #28
 80282e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80282ea:	f04f 0b00 	mov.w	fp, #0
 80282ee:	e7ca      	b.n	8028286 <_scanf_i+0x15e>
 80282f0:	1d1a      	adds	r2, r3, #4
 80282f2:	f8c8 2000 	str.w	r2, [r8]
 80282f6:	681b      	ldr	r3, [r3, #0]
 80282f8:	f011 0f01 	tst.w	r1, #1
 80282fc:	bf14      	ite	ne
 80282fe:	8018      	strhne	r0, [r3, #0]
 8028300:	6018      	streq	r0, [r3, #0]
 8028302:	e7e6      	b.n	80282d2 <_scanf_i+0x1aa>
 8028304:	2001      	movs	r0, #1
 8028306:	e7ed      	b.n	80282e4 <_scanf_i+0x1bc>
 8028308:	08028840 	.word	0x08028840
 802830c:	080255f1 	.word	0x080255f1
 8028310:	080254f5 	.word	0x080254f5
 8028314:	080e2b26 	.word	0x080e2b26

08028318 <_putc_r>:
 8028318:	b570      	push	{r4, r5, r6, lr}
 802831a:	460d      	mov	r5, r1
 802831c:	4614      	mov	r4, r2
 802831e:	4606      	mov	r6, r0
 8028320:	b118      	cbz	r0, 802832a <_putc_r+0x12>
 8028322:	6983      	ldr	r3, [r0, #24]
 8028324:	b90b      	cbnz	r3, 802832a <_putc_r+0x12>
 8028326:	f7fe fc25 	bl	8026b74 <__sinit>
 802832a:	4b1c      	ldr	r3, [pc, #112]	; (802839c <_putc_r+0x84>)
 802832c:	429c      	cmp	r4, r3
 802832e:	d124      	bne.n	802837a <_putc_r+0x62>
 8028330:	6874      	ldr	r4, [r6, #4]
 8028332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028334:	07d8      	lsls	r0, r3, #31
 8028336:	d405      	bmi.n	8028344 <_putc_r+0x2c>
 8028338:	89a3      	ldrh	r3, [r4, #12]
 802833a:	0599      	lsls	r1, r3, #22
 802833c:	d402      	bmi.n	8028344 <_putc_r+0x2c>
 802833e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028340:	f7fb f8d4 	bl	80234ec <__retarget_lock_acquire_recursive>
 8028344:	68a3      	ldr	r3, [r4, #8]
 8028346:	3b01      	subs	r3, #1
 8028348:	2b00      	cmp	r3, #0
 802834a:	60a3      	str	r3, [r4, #8]
 802834c:	da05      	bge.n	802835a <_putc_r+0x42>
 802834e:	69a2      	ldr	r2, [r4, #24]
 8028350:	4293      	cmp	r3, r2
 8028352:	db1c      	blt.n	802838e <_putc_r+0x76>
 8028354:	b2eb      	uxtb	r3, r5
 8028356:	2b0a      	cmp	r3, #10
 8028358:	d019      	beq.n	802838e <_putc_r+0x76>
 802835a:	6823      	ldr	r3, [r4, #0]
 802835c:	1c5a      	adds	r2, r3, #1
 802835e:	6022      	str	r2, [r4, #0]
 8028360:	701d      	strb	r5, [r3, #0]
 8028362:	b2ed      	uxtb	r5, r5
 8028364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028366:	07da      	lsls	r2, r3, #31
 8028368:	d405      	bmi.n	8028376 <_putc_r+0x5e>
 802836a:	89a3      	ldrh	r3, [r4, #12]
 802836c:	059b      	lsls	r3, r3, #22
 802836e:	d402      	bmi.n	8028376 <_putc_r+0x5e>
 8028370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028372:	f7fb f8bd 	bl	80234f0 <__retarget_lock_release_recursive>
 8028376:	4628      	mov	r0, r5
 8028378:	bd70      	pop	{r4, r5, r6, pc}
 802837a:	4b09      	ldr	r3, [pc, #36]	; (80283a0 <_putc_r+0x88>)
 802837c:	429c      	cmp	r4, r3
 802837e:	d101      	bne.n	8028384 <_putc_r+0x6c>
 8028380:	68b4      	ldr	r4, [r6, #8]
 8028382:	e7d6      	b.n	8028332 <_putc_r+0x1a>
 8028384:	4b07      	ldr	r3, [pc, #28]	; (80283a4 <_putc_r+0x8c>)
 8028386:	429c      	cmp	r4, r3
 8028388:	bf08      	it	eq
 802838a:	68f4      	ldreq	r4, [r6, #12]
 802838c:	e7d1      	b.n	8028332 <_putc_r+0x1a>
 802838e:	4629      	mov	r1, r5
 8028390:	4622      	mov	r2, r4
 8028392:	4630      	mov	r0, r6
 8028394:	f7fd fb74 	bl	8025a80 <__swbuf_r>
 8028398:	4605      	mov	r5, r0
 802839a:	e7e3      	b.n	8028364 <_putc_r+0x4c>
 802839c:	080e2960 	.word	0x080e2960
 80283a0:	080e2980 	.word	0x080e2980
 80283a4:	080e2940 	.word	0x080e2940

080283a8 <_read_r>:
 80283a8:	b538      	push	{r3, r4, r5, lr}
 80283aa:	4d07      	ldr	r5, [pc, #28]	; (80283c8 <_read_r+0x20>)
 80283ac:	4604      	mov	r4, r0
 80283ae:	4608      	mov	r0, r1
 80283b0:	4611      	mov	r1, r2
 80283b2:	2200      	movs	r2, #0
 80283b4:	602a      	str	r2, [r5, #0]
 80283b6:	461a      	mov	r2, r3
 80283b8:	f7dd ff8c 	bl	80062d4 <_read>
 80283bc:	1c43      	adds	r3, r0, #1
 80283be:	d102      	bne.n	80283c6 <_read_r+0x1e>
 80283c0:	682b      	ldr	r3, [r5, #0]
 80283c2:	b103      	cbz	r3, 80283c6 <_read_r+0x1e>
 80283c4:	6023      	str	r3, [r4, #0]
 80283c6:	bd38      	pop	{r3, r4, r5, pc}
 80283c8:	2002e014 	.word	0x2002e014

080283cc <__fpclassifyd>:
 80283cc:	ec51 0b10 	vmov	r0, r1, d0
 80283d0:	b510      	push	{r4, lr}
 80283d2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80283d6:	460b      	mov	r3, r1
 80283d8:	d019      	beq.n	802840e <__fpclassifyd+0x42>
 80283da:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80283de:	490e      	ldr	r1, [pc, #56]	; (8028418 <__fpclassifyd+0x4c>)
 80283e0:	428a      	cmp	r2, r1
 80283e2:	d90e      	bls.n	8028402 <__fpclassifyd+0x36>
 80283e4:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 80283e8:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80283ec:	428a      	cmp	r2, r1
 80283ee:	d908      	bls.n	8028402 <__fpclassifyd+0x36>
 80283f0:	4a0a      	ldr	r2, [pc, #40]	; (802841c <__fpclassifyd+0x50>)
 80283f2:	4213      	tst	r3, r2
 80283f4:	d007      	beq.n	8028406 <__fpclassifyd+0x3a>
 80283f6:	4294      	cmp	r4, r2
 80283f8:	d107      	bne.n	802840a <__fpclassifyd+0x3e>
 80283fa:	fab0 f080 	clz	r0, r0
 80283fe:	0940      	lsrs	r0, r0, #5
 8028400:	bd10      	pop	{r4, pc}
 8028402:	2004      	movs	r0, #4
 8028404:	e7fc      	b.n	8028400 <__fpclassifyd+0x34>
 8028406:	2003      	movs	r0, #3
 8028408:	e7fa      	b.n	8028400 <__fpclassifyd+0x34>
 802840a:	2000      	movs	r0, #0
 802840c:	e7f8      	b.n	8028400 <__fpclassifyd+0x34>
 802840e:	2800      	cmp	r0, #0
 8028410:	d1ee      	bne.n	80283f0 <__fpclassifyd+0x24>
 8028412:	2002      	movs	r0, #2
 8028414:	e7f4      	b.n	8028400 <__fpclassifyd+0x34>
 8028416:	bf00      	nop
 8028418:	7fdfffff 	.word	0x7fdfffff
 802841c:	7ff00000 	.word	0x7ff00000

08028420 <__sccl>:
 8028420:	b570      	push	{r4, r5, r6, lr}
 8028422:	780b      	ldrb	r3, [r1, #0]
 8028424:	4604      	mov	r4, r0
 8028426:	2b5e      	cmp	r3, #94	; 0x5e
 8028428:	bf0b      	itete	eq
 802842a:	784b      	ldrbeq	r3, [r1, #1]
 802842c:	1c48      	addne	r0, r1, #1
 802842e:	1c88      	addeq	r0, r1, #2
 8028430:	2200      	movne	r2, #0
 8028432:	bf08      	it	eq
 8028434:	2201      	moveq	r2, #1
 8028436:	1e61      	subs	r1, r4, #1
 8028438:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802843c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8028440:	42a9      	cmp	r1, r5
 8028442:	d1fb      	bne.n	802843c <__sccl+0x1c>
 8028444:	b90b      	cbnz	r3, 802844a <__sccl+0x2a>
 8028446:	3801      	subs	r0, #1
 8028448:	bd70      	pop	{r4, r5, r6, pc}
 802844a:	f082 0201 	eor.w	r2, r2, #1
 802844e:	54e2      	strb	r2, [r4, r3]
 8028450:	4605      	mov	r5, r0
 8028452:	4628      	mov	r0, r5
 8028454:	f810 1b01 	ldrb.w	r1, [r0], #1
 8028458:	292d      	cmp	r1, #45	; 0x2d
 802845a:	d006      	beq.n	802846a <__sccl+0x4a>
 802845c:	295d      	cmp	r1, #93	; 0x5d
 802845e:	d0f3      	beq.n	8028448 <__sccl+0x28>
 8028460:	b909      	cbnz	r1, 8028466 <__sccl+0x46>
 8028462:	4628      	mov	r0, r5
 8028464:	e7f0      	b.n	8028448 <__sccl+0x28>
 8028466:	460b      	mov	r3, r1
 8028468:	e7f1      	b.n	802844e <__sccl+0x2e>
 802846a:	786e      	ldrb	r6, [r5, #1]
 802846c:	2e5d      	cmp	r6, #93	; 0x5d
 802846e:	d0fa      	beq.n	8028466 <__sccl+0x46>
 8028470:	42b3      	cmp	r3, r6
 8028472:	dcf8      	bgt.n	8028466 <__sccl+0x46>
 8028474:	3502      	adds	r5, #2
 8028476:	4619      	mov	r1, r3
 8028478:	3101      	adds	r1, #1
 802847a:	428e      	cmp	r6, r1
 802847c:	5462      	strb	r2, [r4, r1]
 802847e:	dcfb      	bgt.n	8028478 <__sccl+0x58>
 8028480:	1af1      	subs	r1, r6, r3
 8028482:	3901      	subs	r1, #1
 8028484:	1c58      	adds	r0, r3, #1
 8028486:	42b3      	cmp	r3, r6
 8028488:	bfa8      	it	ge
 802848a:	2100      	movge	r1, #0
 802848c:	1843      	adds	r3, r0, r1
 802848e:	e7e0      	b.n	8028452 <__sccl+0x32>

08028490 <__submore>:
 8028490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028494:	460c      	mov	r4, r1
 8028496:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802849c:	4299      	cmp	r1, r3
 802849e:	d11d      	bne.n	80284dc <__submore+0x4c>
 80284a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80284a4:	f7fb fb54 	bl	8023b50 <_malloc_r>
 80284a8:	b918      	cbnz	r0, 80284b2 <__submore+0x22>
 80284aa:	f04f 30ff 	mov.w	r0, #4294967295
 80284ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80284b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80284b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80284b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80284bc:	6360      	str	r0, [r4, #52]	; 0x34
 80284be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80284c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80284c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80284ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80284ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80284d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80284d6:	6020      	str	r0, [r4, #0]
 80284d8:	2000      	movs	r0, #0
 80284da:	e7e8      	b.n	80284ae <__submore+0x1e>
 80284dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80284de:	0077      	lsls	r7, r6, #1
 80284e0:	463a      	mov	r2, r7
 80284e2:	f7ff f911 	bl	8027708 <_realloc_r>
 80284e6:	4605      	mov	r5, r0
 80284e8:	2800      	cmp	r0, #0
 80284ea:	d0de      	beq.n	80284aa <__submore+0x1a>
 80284ec:	eb00 0806 	add.w	r8, r0, r6
 80284f0:	4601      	mov	r1, r0
 80284f2:	4632      	mov	r2, r6
 80284f4:	4640      	mov	r0, r8
 80284f6:	f7fb f81d 	bl	8023534 <memcpy>
 80284fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80284fe:	f8c4 8000 	str.w	r8, [r4]
 8028502:	e7e9      	b.n	80284d8 <__submore+0x48>

08028504 <abort>:
 8028504:	b508      	push	{r3, lr}
 8028506:	2006      	movs	r0, #6
 8028508:	f000 f874 	bl	80285f4 <raise>
 802850c:	2001      	movs	r0, #1
 802850e:	f7dd fedb 	bl	80062c8 <_exit>
	...

08028514 <__env_lock>:
 8028514:	4801      	ldr	r0, [pc, #4]	; (802851c <__env_lock+0x8>)
 8028516:	f7fa bfe9 	b.w	80234ec <__retarget_lock_acquire_recursive>
 802851a:	bf00      	nop
 802851c:	2002f8f0 	.word	0x2002f8f0

08028520 <__env_unlock>:
 8028520:	4801      	ldr	r0, [pc, #4]	; (8028528 <__env_unlock+0x8>)
 8028522:	f7fa bfe5 	b.w	80234f0 <__retarget_lock_release_recursive>
 8028526:	bf00      	nop
 8028528:	2002f8f0 	.word	0x2002f8f0

0802852c <_fstat_r>:
 802852c:	b538      	push	{r3, r4, r5, lr}
 802852e:	4d07      	ldr	r5, [pc, #28]	; (802854c <_fstat_r+0x20>)
 8028530:	2300      	movs	r3, #0
 8028532:	4604      	mov	r4, r0
 8028534:	4608      	mov	r0, r1
 8028536:	4611      	mov	r1, r2
 8028538:	602b      	str	r3, [r5, #0]
 802853a:	f7dd fedd 	bl	80062f8 <_fstat>
 802853e:	1c43      	adds	r3, r0, #1
 8028540:	d102      	bne.n	8028548 <_fstat_r+0x1c>
 8028542:	682b      	ldr	r3, [r5, #0]
 8028544:	b103      	cbz	r3, 8028548 <_fstat_r+0x1c>
 8028546:	6023      	str	r3, [r4, #0]
 8028548:	bd38      	pop	{r3, r4, r5, pc}
 802854a:	bf00      	nop
 802854c:	2002e014 	.word	0x2002e014

08028550 <_isatty_r>:
 8028550:	b538      	push	{r3, r4, r5, lr}
 8028552:	4d06      	ldr	r5, [pc, #24]	; (802856c <_isatty_r+0x1c>)
 8028554:	2300      	movs	r3, #0
 8028556:	4604      	mov	r4, r0
 8028558:	4608      	mov	r0, r1
 802855a:	602b      	str	r3, [r5, #0]
 802855c:	f7dd fed2 	bl	8006304 <_isatty>
 8028560:	1c43      	adds	r3, r0, #1
 8028562:	d102      	bne.n	802856a <_isatty_r+0x1a>
 8028564:	682b      	ldr	r3, [r5, #0]
 8028566:	b103      	cbz	r3, 802856a <_isatty_r+0x1a>
 8028568:	6023      	str	r3, [r4, #0]
 802856a:	bd38      	pop	{r3, r4, r5, pc}
 802856c:	2002e014 	.word	0x2002e014

08028570 <__ascii_mbtowc>:
 8028570:	b082      	sub	sp, #8
 8028572:	b901      	cbnz	r1, 8028576 <__ascii_mbtowc+0x6>
 8028574:	a901      	add	r1, sp, #4
 8028576:	b142      	cbz	r2, 802858a <__ascii_mbtowc+0x1a>
 8028578:	b14b      	cbz	r3, 802858e <__ascii_mbtowc+0x1e>
 802857a:	7813      	ldrb	r3, [r2, #0]
 802857c:	600b      	str	r3, [r1, #0]
 802857e:	7812      	ldrb	r2, [r2, #0]
 8028580:	1e10      	subs	r0, r2, #0
 8028582:	bf18      	it	ne
 8028584:	2001      	movne	r0, #1
 8028586:	b002      	add	sp, #8
 8028588:	4770      	bx	lr
 802858a:	4610      	mov	r0, r2
 802858c:	e7fb      	b.n	8028586 <__ascii_mbtowc+0x16>
 802858e:	f06f 0001 	mvn.w	r0, #1
 8028592:	e7f8      	b.n	8028586 <__ascii_mbtowc+0x16>

08028594 <_malloc_usable_size_r>:
 8028594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028598:	1f18      	subs	r0, r3, #4
 802859a:	2b00      	cmp	r3, #0
 802859c:	bfbc      	itt	lt
 802859e:	580b      	ldrlt	r3, [r1, r0]
 80285a0:	18c0      	addlt	r0, r0, r3
 80285a2:	4770      	bx	lr

080285a4 <_raise_r>:
 80285a4:	291f      	cmp	r1, #31
 80285a6:	b538      	push	{r3, r4, r5, lr}
 80285a8:	4604      	mov	r4, r0
 80285aa:	460d      	mov	r5, r1
 80285ac:	d904      	bls.n	80285b8 <_raise_r+0x14>
 80285ae:	2316      	movs	r3, #22
 80285b0:	6003      	str	r3, [r0, #0]
 80285b2:	f04f 30ff 	mov.w	r0, #4294967295
 80285b6:	bd38      	pop	{r3, r4, r5, pc}
 80285b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80285ba:	b112      	cbz	r2, 80285c2 <_raise_r+0x1e>
 80285bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80285c0:	b94b      	cbnz	r3, 80285d6 <_raise_r+0x32>
 80285c2:	4620      	mov	r0, r4
 80285c4:	f000 f830 	bl	8028628 <_getpid_r>
 80285c8:	462a      	mov	r2, r5
 80285ca:	4601      	mov	r1, r0
 80285cc:	4620      	mov	r0, r4
 80285ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80285d2:	f000 b817 	b.w	8028604 <_kill_r>
 80285d6:	2b01      	cmp	r3, #1
 80285d8:	d00a      	beq.n	80285f0 <_raise_r+0x4c>
 80285da:	1c59      	adds	r1, r3, #1
 80285dc:	d103      	bne.n	80285e6 <_raise_r+0x42>
 80285de:	2316      	movs	r3, #22
 80285e0:	6003      	str	r3, [r0, #0]
 80285e2:	2001      	movs	r0, #1
 80285e4:	e7e7      	b.n	80285b6 <_raise_r+0x12>
 80285e6:	2400      	movs	r4, #0
 80285e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80285ec:	4628      	mov	r0, r5
 80285ee:	4798      	blx	r3
 80285f0:	2000      	movs	r0, #0
 80285f2:	e7e0      	b.n	80285b6 <_raise_r+0x12>

080285f4 <raise>:
 80285f4:	4b02      	ldr	r3, [pc, #8]	; (8028600 <raise+0xc>)
 80285f6:	4601      	mov	r1, r0
 80285f8:	6818      	ldr	r0, [r3, #0]
 80285fa:	f7ff bfd3 	b.w	80285a4 <_raise_r>
 80285fe:	bf00      	nop
 8028600:	20000488 	.word	0x20000488

08028604 <_kill_r>:
 8028604:	b538      	push	{r3, r4, r5, lr}
 8028606:	4d07      	ldr	r5, [pc, #28]	; (8028624 <_kill_r+0x20>)
 8028608:	2300      	movs	r3, #0
 802860a:	4604      	mov	r4, r0
 802860c:	4608      	mov	r0, r1
 802860e:	4611      	mov	r1, r2
 8028610:	602b      	str	r3, [r5, #0]
 8028612:	f7dd fe51 	bl	80062b8 <_kill>
 8028616:	1c43      	adds	r3, r0, #1
 8028618:	d102      	bne.n	8028620 <_kill_r+0x1c>
 802861a:	682b      	ldr	r3, [r5, #0]
 802861c:	b103      	cbz	r3, 8028620 <_kill_r+0x1c>
 802861e:	6023      	str	r3, [r4, #0]
 8028620:	bd38      	pop	{r3, r4, r5, pc}
 8028622:	bf00      	nop
 8028624:	2002e014 	.word	0x2002e014

08028628 <_getpid_r>:
 8028628:	f7dd be44 	b.w	80062b4 <_getpid>

0802862c <__ascii_wctomb>:
 802862c:	b149      	cbz	r1, 8028642 <__ascii_wctomb+0x16>
 802862e:	2aff      	cmp	r2, #255	; 0xff
 8028630:	bf85      	ittet	hi
 8028632:	238a      	movhi	r3, #138	; 0x8a
 8028634:	6003      	strhi	r3, [r0, #0]
 8028636:	700a      	strbls	r2, [r1, #0]
 8028638:	f04f 30ff 	movhi.w	r0, #4294967295
 802863c:	bf98      	it	ls
 802863e:	2001      	movls	r0, #1
 8028640:	4770      	bx	lr
 8028642:	4608      	mov	r0, r1
 8028644:	4770      	bx	lr
	...

08028648 <_init>:
 8028648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802864a:	bf00      	nop
 802864c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802864e:	bc08      	pop	{r3}
 8028650:	469e      	mov	lr, r3
 8028652:	4770      	bx	lr

08028654 <_fini>:
 8028654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028656:	bf00      	nop
 8028658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802865a:	bc08      	pop	{r3}
 802865c:	469e      	mov	lr, r3
 802865e:	4770      	bx	lr

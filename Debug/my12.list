
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002897c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001cc7c  08028b80  08028b80  00038b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080457fc  080457fc  000606bc  2**0
                  CONTENTS
  4 .ARM          00000008  080457fc  080457fc  000557fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08045804  08045804  000606bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08045804  08045804  00055804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08045808  08045808  00055808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006bc  20000000  0804580c  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f1b4  200006c0  08045ec8  000606c0  2**3
                  ALLOC
 10 ._user_heap_stack 0001c804  2002f874  08045ec8  0006f874  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008d0b1  00000000  00000000  000606ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001346c  00000000  00000000  000ed79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0005189d  00000000  00000000  00100c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003720  00000000  00000000  001524a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000092e0  00000000  00000000  00155bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00048a4c  00000000  00000000  0015eea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0008f74a  00000000  00000000  001a78f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00139ccd  00000000  00000000  0023703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00370d0b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d4d0  00000000  00000000  00370d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006c0 	.word	0x200006c0
 800021c:	00000000 	.word	0x00000000
 8000220:	08028b64 	.word	0x08028b64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006c4 	.word	0x200006c4
 800023c:	08028b64 	.word	0x08028b64

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200006f0 	.word	0x200006f0
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	2000076c 	.word	0x2000076c

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	200006f0 	.word	0x200006f0
 8000708:	40000c00 	.word	0x40000c00
 800070c:	2000076c 	.word	0x2000076c

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f024 fa7e 	bl	8024c24 <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f007 bc7f 	b.w	8008030 <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	08028d6c 	.word	0x08028d6c

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219a      	movs	r1, #154	; 0x9a
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f003 fd12 	bl	800417c <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219c      	movs	r1, #156	; 0x9c
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f003 fd06 	bl	800417c <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f008 fd47 	bl	80092b4 <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219b      	movs	r1, #155	; 0x9b
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f003 fc90 	bl	800417c <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	08028d84 	.word	0x08028d84
 800086c:	2000027c 	.word	0x2000027c
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <ADC_Conv_complete+0x1dc>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a77      	ldr	r2, [pc, #476]	; (8000a6c <ADC_Conv_complete+0x1e0>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4977      	ldr	r1, [pc, #476]	; (8000a70 <ADC_Conv_complete+0x1e4>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b77      	ldr	r3, [pc, #476]	; (8000a74 <ADC_Conv_complete+0x1e8>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4877      	ldr	r0, [pc, #476]	; (8000a78 <ADC_Conv_complete+0x1ec>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681d      	ldr	r5, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b76      	ldr	r3, [pc, #472]	; (8000a7c <ADC_Conv_complete+0x1f0>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7814      	ldrb	r4, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f505 65b8 	addeq.w	r5, r5, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60eb      	str	r3, [r5, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	0223      	lsls	r3, r4, #8
 80008b6:	9405      	str	r4, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460c      	mov	r4, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a70      	ldr	r2, [pc, #448]	; (8000a80 <ADC_Conv_complete+0x1f4>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a9      	str	r1, [r5, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8000ac8 <ADC_Conv_complete+0x23c>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	606b      	str	r3, [r5, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8da 3000 	ldr.w	r3, [sl]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67a3      	str	r3, [r4, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8ca 3000 	str.w	r3, [sl]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008f0:	4b64      	ldr	r3, [pc, #400]	; (8000a84 <ADC_Conv_complete+0x1f8>)
 80008f2:	f04f 0e00 	mov.w	lr, #0
 80008f6:	350e      	adds	r5, #14
 80008f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000acc <ADC_Conv_complete+0x240>
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000ad0 <ADC_Conv_complete+0x244>
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <ADC_Conv_complete+0x1fc>)
 8000906:	f8cd e010 	str.w	lr, [sp, #16]
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	9303      	str	r3, [sp, #12]
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <ADC_Conv_complete+0x200>)
 8000910:	681e      	ldr	r6, [r3, #0]
 8000912:	4b5f      	ldr	r3, [pc, #380]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <ADC_Conv_complete+0x208>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b5f      	ldr	r3, [pc, #380]	; (8000a98 <ADC_Conv_complete+0x20c>)
 800091c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000920:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <ADC_Conv_complete+0x210>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	9301      	str	r3, [sp, #4]
		lastmeanwindiff = abs(meanwindiff);
 8000926:	2900      	cmp	r1, #0
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000928:	f00e 041f 	and.w	r4, lr, #31
		thissamp = (*adcbuf16)[i];
 800092c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000930:	f10e 0e01 	add.w	lr, lr, #1
		lastmeanwindiff = abs(meanwindiff);
 8000934:	bfb8      	it	lt
 8000936:	4249      	neglt	r1, r1
		if (sigsend)
 8000938:	f8da b000 	ldr.w	fp, [sl]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 800093c:	4418      	add	r0, r3
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 800093e:	441e      	add	r6, r3
		lastmeanwindiff = abs(meanwindiff);
 8000940:	b28f      	uxth	r7, r1
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000942:	9903      	ldr	r1, [sp, #12]
 8000944:	eb07 0c01 	add.w	ip, r7, r1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000948:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
		lastsamp[j] = thissamp;			// save last samples
 800094c:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000950:	1a40      	subs	r0, r0, r1
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000952:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8000956:	1a52      	subs	r2, r2, r1
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000958:	f340 114f 	sbfx	r1, r0, #5, #16
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	2b00      	cmp	r3, #0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000964:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000966:	f342 114f 	sbfx	r1, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800096a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800096e:	f848 1024 	str.w	r1, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	9c02      	ldr	r4, [sp, #8]
 8000974:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8000978:	b29b      	uxth	r3, r3
 800097a:	191c      	adds	r4, r3, r4
 800097c:	4564      	cmp	r4, ip
 800097e:	dd04      	ble.n	800098a <ADC_Conv_complete+0xfe>
			pretrigcnt++;
 8000980:	9c01      	ldr	r4, [sp, #4]
 8000982:	3401      	adds	r4, #1
 8000984:	9401      	str	r4, [sp, #4]
 8000986:	2401      	movs	r4, #1
 8000988:	9404      	str	r4, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 800098a:	f1bb 0f00 	cmp.w	fp, #0
 800098e:	d104      	bne.n	800099a <ADC_Conv_complete+0x10e>
 8000990:	4563      	cmp	r3, ip
 8000992:	dd02      	ble.n	800099a <ADC_Conv_complete+0x10e>
			sigsend = 1; // the real trigger
 8000994:	2301      	movs	r3, #1
 8000996:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 800099a:	f5be 7f36 	cmp.w	lr, #728	; 0x2d8
 800099e:	d1c2      	bne.n	8000926 <ADC_Conv_complete+0x9a>
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <ADC_Conv_complete+0x204>)
 80009a2:	6018      	str	r0, [r3, #0]
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <ADC_Conv_complete+0x208>)
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <ADC_Conv_complete+0x20c>)
 80009aa:	8019      	strh	r1, [r3, #0]
 80009ac:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <ADC_Conv_complete+0x200>)
 80009ae:	601e      	str	r6, [r3, #0]
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <ADC_Conv_complete+0x214>)
 80009b2:	801f      	strh	r7, [r3, #0]
 80009b4:	9b04      	ldr	r3, [sp, #16]
 80009b6:	b113      	cbz	r3, 80009be <ADC_Conv_complete+0x132>
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <ADC_Conv_complete+0x210>)
 80009ba:	9a01      	ldr	r2, [sp, #4]
 80009bc:	601a      	str	r2, [r3, #0]
	if (sigsend) {
 80009be:	f8da 3000 	ldr.w	r3, [sl]
 80009c2:	b33b      	cbz	r3, 8000a14 <ADC_Conv_complete+0x188>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <ADC_Conv_complete+0x218>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d02c      	beq.n	8000a26 <ADC_Conv_complete+0x19a>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009cc:	4928      	ldr	r1, [pc, #160]	; (8000a70 <ADC_Conv_complete+0x1e4>)
 80009ce:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80009d0:	3201      	adds	r2, #1
 80009d2:	67ca      	str	r2, [r1, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009d8:	220f      	movs	r2, #15
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80009dc:	601a      	str	r2, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009de:	4a33      	ldr	r2, [pc, #204]	; (8000aac <ADC_Conv_complete+0x220>)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	d10a      	bne.n	8000a02 <ADC_Conv_complete+0x176>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009ec:	08f3      	lsrs	r3, r6, #3
 80009ee:	4830      	ldr	r0, [pc, #192]	; (8000ab0 <ADC_Conv_complete+0x224>)
 80009f0:	4930      	ldr	r1, [pc, #192]	; (8000ab4 <ADC_Conv_complete+0x228>)
 80009f2:	fba0 0303 	umull	r0, r3, r0, r3
 80009f6:	0b9b      	lsrs	r3, r3, #14
 80009f8:	600b      	str	r3, [r1, #0]
		adcbgbaseacc = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	4923      	ldr	r1, [pc, #140]	; (8000a8c <ADC_Conv_complete+0x200>)
		samplecnt = 0;
 80009fe:	6013      	str	r3, [r2, #0]
		adcbgbaseacc = 0;
 8000a00:	600b      	str	r3, [r1, #0]
	if (xTaskToNotify == NULL) {
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	b342      	cbz	r2, 8000a5a <ADC_Conv_complete+0x1ce>
	} else if (sigsend) {
 8000a08:	f8da 2000 	ldr.w	r2, [sl]
 8000a0c:	b982      	cbnz	r2, 8000a30 <ADC_Conv_complete+0x1a4>
}
 8000a0e:	b007      	add	sp, #28
 8000a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <ADC_Conv_complete+0x218>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	b112      	cbz	r2, 8000a20 <ADC_Conv_complete+0x194>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <ADC_Conv_complete+0x230>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e7db      	b.n	80009de <ADC_Conv_complete+0x152>
			++adcbatchid; // start a new adc batch number
 8000a26:	9a05      	ldr	r2, [sp, #20]
 8000a28:	4910      	ldr	r1, [pc, #64]	; (8000a6c <ADC_Conv_complete+0x1e0>)
 8000a2a:	3201      	adds	r2, #1
 8000a2c:	700a      	strb	r2, [r1, #0]
 8000a2e:	e7cd      	b.n	80009cc <ADC_Conv_complete+0x140>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a30:	4c23      	ldr	r4, [pc, #140]	; (8000ac0 <ADC_Conv_complete+0x234>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4621      	mov	r1, r4
 8000a36:	f015 fedb 	bl	80167f0 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0e6      	beq.n	8000a0e <ADC_Conv_complete+0x182>
 8000a40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	f3bf 8f6f 	isb	sy
}
 8000a54:	b007      	add	sp, #28
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <ADC_Conv_complete+0x238>)
}
 8000a5c:	b007      	add	sp, #28
 8000a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a62:	f024 b8df 	b.w	8024c24 <puts>
 8000a66:	bf00      	nop
 8000a68:	200006f0 	.word	0x200006f0
 8000a6c:	200006dc 	.word	0x200006dc
 8000a70:	20002bfc 	.word	0x20002bfc
 8000a74:	2000074c 	.word	0x2000074c
 8000a78:	200006ec 	.word	0x200006ec
 8000a7c:	2000076c 	.word	0x2000076c
 8000a80:	20000754 	.word	0x20000754
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000002 	.word	0x20000002
 8000a8c:	200006e0 	.word	0x200006e0
 8000a90:	200007f4 	.word	0x200007f4
 8000a94:	20000770 	.word	0x20000770
 8000a98:	20000748 	.word	0x20000748
 8000a9c:	20000750 	.word	0x20000750
 8000aa0:	20000700 	.word	0x20000700
 8000aa4:	20000760 	.word	0x20000760
 8000aa8:	20000744 	.word	0x20000744
 8000aac:	20000758 	.word	0x20000758
 8000ab0:	16816817 	.word	0x16816817
 8000ab4:	200006f4 	.word	0x200006f4
 8000ab8:	200007fc 	.word	0x200007fc
 8000abc:	2000075c 	.word	0x2000075c
 8000ac0:	200007f8 	.word	0x200007f8
 8000ac4:	08028d9c 	.word	0x08028d9c
 8000ac8:	20000764 	.word	0x20000764
 8000acc:	20000704 	.word	0x20000704
 8000ad0:	20000774 	.word	0x20000774

08000ad4 <startadc>:

void startadc() {
 8000ad4:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000ad6:	492b      	ldr	r1, [pc, #172]	; (8000b84 <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000ad8:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000adc:	482b      	ldr	r0, [pc, #172]	; (8000b8c <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000ade:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ae0:	4d2b      	ldr	r5, [pc, #172]	; (8000b90 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ae6:	f024 f89d 	bl	8024c24 <puts>
	osDelay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f014 f88a 	bl	8014c04 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000af0:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000af4:	f016 fb70 	bl	80171d8 <pvPortMalloc>
 8000af8:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d03d      	beq.n	8000b7a <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000afe:	0783      	lsls	r3, r0, #30
 8000b00:	4604      	mov	r4, r0
 8000b02:	d128      	bne.n	8000b56 <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b04:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b08:	2155      	movs	r1, #85	; 0x55
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f023 f852 	bl	8023bb4 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b10:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b14:	21aa      	movs	r1, #170	; 0xaa
 8000b16:	18a0      	adds	r0, r4, r2
 8000b18:	f023 f84c 	bl	8023bb4 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b1c:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b22:	f104 0110 	add.w	r1, r4, #16
 8000b26:	4c1c      	ldr	r4, [pc, #112]	; (8000b98 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b28:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b2c:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b30:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b32:	f7ff fe01 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <startadc+0xcc>)
 8000b38:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3a:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b3c:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3e:	f007 f9c9 	bl	8007ed4 <HAL_ADC_Start>
 8000b42:	b9b0      	cbnz	r0, 8000b72 <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <startadc+0xd4>)
 8000b46:	f007 f9c5 	bl	8007ed4 <HAL_ADC_Start>
 8000b4a:	b970      	cbnz	r0, 8000b6a <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b4c:	4813      	ldr	r0, [pc, #76]	; (8000b9c <startadc+0xc8>)
 8000b4e:	f007 f9c1 	bl	8007ed4 <HAL_ADC_Start>
 8000b52:	b928      	cbnz	r0, 8000b60 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b54:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <startadc+0xd8>)
 8000b58:	f024 f864 	bl	8024c24 <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b5c:	682c      	ldr	r4, [r5, #0]
 8000b5e:	e7d1      	b.n	8000b04 <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <startadc+0xdc>)
}
 8000b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b66:	f024 b85d 	b.w	8024c24 <puts>
		printf("ADC2 failed start\r\n");
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <startadc+0xe0>)
 8000b6c:	f024 f85a 	bl	8024c24 <puts>
 8000b70:	e7ec      	b.n	8000b4c <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <startadc+0xe4>)
 8000b74:	f024 f856 	bl	8024c24 <puts>
 8000b78:	e7e4      	b.n	8000b44 <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <startadc+0xe8>)
 8000b7c:	f024 f852 	bl	8024c24 <puts>
		for (;;)
 8000b80:	e7fe      	b.n	8000b80 <startadc+0xac>
 8000b82:	bf00      	nop
 8000b84:	066ff300 	.word	0x066ff300
 8000b88:	20002bfc 	.word	0x20002bfc
 8000b8c:	08028db0 	.word	0x08028db0
 8000b90:	2000074c 	.word	0x2000074c
 8000b94:	200006e8 	.word	0x200006e8
 8000b98:	200006e4 	.word	0x200006e4
 8000b9c:	20001da0 	.word	0x20001da0
 8000ba0:	200006ed 	.word	0x200006ed
 8000ba4:	20001e30 	.word	0x20001e30
 8000ba8:	20001de8 	.word	0x20001de8
 8000bac:	08028dec 	.word	0x08028dec
 8000bb0:	08028e4c 	.word	0x08028e4c
 8000bb4:	08028e38 	.word	0x08028e38
 8000bb8:	08028e24 	.word	0x08028e24
 8000bbc:	08028dc4 	.word	0x08028dc4

08000bc0 <xcrc32>:
@end deftypefn
*/

unsigned int
xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 8000bc0:	4684      	mov	ip, r0
  unsigned int crc = init;
  while (len--)
 8000bc2:	b169      	cbz	r1, 8000be0 <xcrc32+0x20>
 8000bc4:	4401      	add	r1, r0
  unsigned int crc = init;
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <xcrc32+0x24>)
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bca:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000bce:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
  while (len--)
 8000bd2:	458c      	cmp	ip, r1
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  while (len--)
 8000bdc:	d1f5      	bne.n	8000bca <xcrc32+0xa>
 8000bde:	4770      	bx	lr
  unsigned int crc = init;
 8000be0:	4610      	mov	r0, r2
      buf++;
    }
  return crc;
}
 8000be2:	4770      	bx	lr
 8000be4:	08028e60 	.word	0x08028e60

08000be8 <printflasherr>:

static FLASH_EraseInitTypeDef EraseInitStruct;
static FLASH_OBProgramInitTypeDef OBInitStruct;

// display the error
void printflasherr() {
 8000be8:	b510      	push	{r4, lr}
	char *msg;
	uint32_t err;

	err = HAL_FLASH_GetError();
 8000bea:	f00a f80b 	bl	800ac04 <HAL_FLASH_GetError>

	switch (err) {
 8000bee:	1e83      	subs	r3, r0, #2
 8000bf0:	2b1e      	cmp	r3, #30
 8000bf2:	d811      	bhi.n	8000c18 <printflasherr+0x30>
 8000bf4:	e8df f003 	tbb	[pc, r3]
 8000bf8:	1030101c 	.word	0x1030101c
 8000bfc:	102e1010 	.word	0x102e1010
 8000c00:	10101010 	.word	0x10101010
 8000c04:	10221010 	.word	0x10221010
 8000c08:	10101010 	.word	0x10101010
 8000c0c:	10101010 	.word	0x10101010
 8000c10:	10101010 	.word	0x10101010
 8000c14:	1010      	.short	0x1010
 8000c16:	28          	.byte	0x28
 8000c17:	00          	.byte	0x00
 8000c18:	4604      	mov	r4, r0
	case FLASH_ERROR_OPERATION:
		msg = "Operation";
		break;
	default:
		msg = NULL;
		sprintf(msg, "Unknown err 0x%0x", err);
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	490f      	ldr	r1, [pc, #60]	; (8000c5c <printflasherr+0x74>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f024 f956 	bl	8024ed0 <siprintf>
		break;
	}
	if (msg == NULL) {
		printf("Flash failed Unknown err 0x%0x\n", err);
 8000c24:	4621      	mov	r1, r4
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <printflasherr+0x78>)
	} else {
		printf("Flash operation failed: %s error\n", msg);
	}
}
 8000c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Flash failed Unknown err 0x%0x\n", err);
 8000c2c:	f023 bf5e 	b.w	8024aec <iprintf>
		msg = "Erasing Sequence";
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <printflasherr+0x7c>)
		printf("Flash operation failed: %s error\n", msg);
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <printflasherr+0x80>)
}
 8000c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Flash operation failed: %s error\n", msg);
 8000c38:	f023 bf58 	b.w	8024aec <iprintf>
		msg = "Write Protected";
 8000c3c:	490b      	ldr	r1, [pc, #44]	; (8000c6c <printflasherr+0x84>)
		printf("Flash operation failed: %s error\n", msg);
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <printflasherr+0x80>)
}
 8000c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Flash operation failed: %s error\n", msg);
 8000c44:	f023 bf52 	b.w	8024aec <iprintf>
		msg = "Operation";
 8000c48:	4909      	ldr	r1, [pc, #36]	; (8000c70 <printflasherr+0x88>)
		printf("Flash operation failed: %s error\n", msg);
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <printflasherr+0x80>)
}
 8000c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Flash operation failed: %s error\n", msg);
 8000c50:	f023 bf4c 	b.w	8024aec <iprintf>
		msg = "Programming alignment";
 8000c54:	4907      	ldr	r1, [pc, #28]	; (8000c74 <printflasherr+0x8c>)
 8000c56:	e7ec      	b.n	8000c32 <printflasherr+0x4a>
	switch (err) {
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <printflasherr+0x90>)
 8000c5a:	e7ea      	b.n	8000c32 <printflasherr+0x4a>
 8000c5c:	080292c0 	.word	0x080292c0
 8000c60:	080292d4 	.word	0x080292d4
 8000c64:	0802926c 	.word	0x0802926c
 8000c68:	080292f4 	.word	0x080292f4
 8000c6c:	08029298 	.word	0x08029298
 8000c70:	08029260 	.word	0x08029260
 8000c74:	08029280 	.word	0x08029280
 8000c78:	080292a8 	.word	0x080292a8

08000c7c <LockFlash>:
		return (res);
	}
	return(res);
}

HAL_StatusTypeDef LockFlash() {
 8000c7c:	b510      	push	{r4, lr}
	HAL_StatusTypeDef res;

	printf("lockFlash:\n");
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <LockFlash+0x24>)
 8000c80:	f023 ffd0 	bl	8024c24 <puts>
	res = HAL_FLASH_Lock();
 8000c84:	f009 ffb4 	bl	800abf0 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000c88:	4604      	mov	r4, r0
 8000c8a:	b908      	cbnz	r0, 8000c90 <LockFlash+0x14>
		printf("LockFlash: failed to lock\n");
		printflasherr();
		return (res);
	}
	return(res);
}
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	bd10      	pop	{r4, pc}
		printf("LockFlash: failed to lock\n");
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <LockFlash+0x28>)
 8000c92:	f023 ffc7 	bl	8024c24 <puts>
		printflasherr();
 8000c96:	f7ff ffa7 	bl	8000be8 <printflasherr>
}
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	bd10      	pop	{r4, pc}
 8000c9e:	bf00      	nop
 8000ca0:	0802934c 	.word	0x0802934c
 8000ca4:	08029358 	.word	0x08029358

08000ca8 <EraseFlash>:
// (start at sector corresponding to memptr, fixed erase of 512K)
HAL_StatusTypeDef EraseFlash(void* memptr) {
	HAL_StatusTypeDef res;
	uint32_t SectorError;

	if (((uint32_t)memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000ca8:	f000 6001 	and.w	r0, r0, #135266304	; 0x8100000
 8000cac:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
HAL_StatusTypeDef EraseFlash(void* memptr) {
 8000cb0:	b510      	push	{r4, lr}
 8000cb2:	b082      	sub	sp, #8
	if (((uint32_t)memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000cb4:	d026      	beq.n	8000d04 <EraseFlash+0x5c>
	{
		EraseInitStruct.Sector = FLASH_SECTOR_0;
		EraseInitStruct.NbSectors = 5;
	} else	// the upper 512M starting at 1M
	{
		EraseInitStruct.Sector = FLASH_SECTOR_8;
 8000cb6:	2008      	movs	r0, #8
		EraseInitStruct.NbSectors = 2;
 8000cb8:	2302      	movs	r3, #2
		EraseInitStruct.Sector = FLASH_SECTOR_8;
 8000cba:	4c1c      	ldr	r4, [pc, #112]	; (8000d2c <EraseFlash+0x84>)
		EraseInitStruct.NbSectors = 2;
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	e9c4 0302 	strd	r0, r3, [r4, #8]
	}

	printf("Erasing Flash for %d sector(d) from %d\n",EraseInitStruct.NbSectors,EraseInitStruct.Sector);
 8000cc4:	481a      	ldr	r0, [pc, #104]	; (8000d30 <EraseFlash+0x88>)
 8000cc6:	f023 ff11 	bl	8024aec <iprintf>

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000cca:	2100      	movs	r1, #0
	EraseInitStruct.Banks = FLASH_BANK_1;
 8000ccc:	2201      	movs	r2, #1
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000cce:	2302      	movs	r3, #2
	printf("UnlockFlash:\n");
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <EraseFlash+0x8c>)
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000cd2:	6123      	str	r3, [r4, #16]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8000cd4:	e9c4 1200 	strd	r1, r2, [r4]
	printf("UnlockFlash:\n");
 8000cd8:	f023 ffa4 	bl	8024c24 <puts>
	res = HAL_FLASH_Unlock();
 8000cdc:	f009 ff74 	bl	800abc8 <HAL_FLASH_Unlock>
	if (res != HAL_OK) {
 8000ce0:	b9c0      	cbnz	r0, 8000d14 <EraseFlash+0x6c>
		printf("EraseFlash: unlock failed\n");
		printflasherr();
	}

#if 1
	res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000ce2:	a901      	add	r1, sp, #4
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <EraseFlash+0x84>)
 8000ce6:	f00a f891 	bl	800ae0c <HAL_FLASHEx_Erase>
	if (res != HAL_OK) {
 8000cea:	b130      	cbz	r0, 8000cfa <EraseFlash+0x52>
		printf("EraseFlash: failed\n");
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <EraseFlash+0x90>)
 8000cee:	f023 ff99 	bl	8024c24 <puts>
		printflasherr();
 8000cf2:	f7ff ff79 	bl	8000be8 <printflasherr>
	{
		printf("Flash probably erased\n");
	}
#endif

}
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd10      	pop	{r4, pc}
		printf("Flash probably erased\n");
 8000cfa:	4810      	ldr	r0, [pc, #64]	; (8000d3c <EraseFlash+0x94>)
 8000cfc:	f023 ff92 	bl	8024c24 <puts>
}
 8000d00:	b002      	add	sp, #8
 8000d02:	bd10      	pop	{r4, pc}
		EraseInitStruct.Sector = FLASH_SECTOR_0;
 8000d04:	2100      	movs	r1, #0
 8000d06:	4c09      	ldr	r4, [pc, #36]	; (8000d2c <EraseFlash+0x84>)
		EraseInitStruct.NbSectors = 5;
 8000d08:	2305      	movs	r3, #5
 8000d0a:	460a      	mov	r2, r1
		EraseInitStruct.Sector = FLASH_SECTOR_0;
 8000d0c:	60a1      	str	r1, [r4, #8]
		EraseInitStruct.NbSectors = 5;
 8000d0e:	60e3      	str	r3, [r4, #12]
 8000d10:	4619      	mov	r1, r3
 8000d12:	e7d7      	b.n	8000cc4 <EraseFlash+0x1c>
		printf("UnlockFlash: failed to unlock 0x%x\n",res);
 8000d14:	4601      	mov	r1, r0
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <EraseFlash+0x98>)
 8000d18:	f023 fee8 	bl	8024aec <iprintf>
		printflasherr();
 8000d1c:	f7ff ff64 	bl	8000be8 <printflasherr>
		printf("EraseFlash: unlock failed\n");
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <EraseFlash+0x9c>)
 8000d22:	f023 ff7f 	bl	8024c24 <puts>
		printflasherr();
 8000d26:	f7ff ff5f 	bl	8000be8 <printflasherr>
 8000d2a:	e7da      	b.n	8000ce2 <EraseFlash+0x3a>
 8000d2c:	20000800 	.word	0x20000800
 8000d30:	08029374 	.word	0x08029374
 8000d34:	08029318 	.word	0x08029318
 8000d38:	080293b8 	.word	0x080293b8
 8000d3c:	080293cc 	.word	0x080293cc
 8000d40:	08029328 	.word	0x08029328
 8000d44:	0802939c 	.word	0x0802939c

08000d48 <WriteFlashWord>:
// write 32 bits
int WriteFlashWord(uint32_t address, uint32_t data) {
	HAL_StatusTypeDef res;
	int trys;

	if ((address < FLASH_START_ADDRESS) || (address > (FLASH_END_ADDRESS))) {
 8000d48:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8000d4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
int WriteFlashWord(uint32_t address, uint32_t data) {
 8000d50:	b510      	push	{r4, lr}
	if ((address < FLASH_START_ADDRESS) || (address > (FLASH_END_ADDRESS))) {
 8000d52:	d208      	bcs.n	8000d66 <WriteFlashWord+0x1e>
 8000d54:	4604      	mov	r4, r0
 8000d56:	460a      	mov	r2, r1
		printf("WriteFlash: failed address check\n");
		return -1;
	}

	trys = 0;
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f009 ff83 	bl	800ac68 <HAL_FLASH_Program>
 8000d62:	b930      	cbnz	r0, 8000d72 <WriteFlashWord+0x2a>

			return (res);
		}
	}
	return (0);
}
 8000d64:	bd10      	pop	{r4, pc}
		printf("WriteFlash: failed address check\n");
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <WriteFlashWord+0x40>)
 8000d68:	f023 ff5c 	bl	8024c24 <puts>
		return -1;
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000d70:	bd10      	pop	{r4, pc}
		printflasherr();		// deleteme
 8000d72:	f7ff ff39 	bl	8000be8 <printflasherr>
			printflasherr();
 8000d76:	f7ff ff37 	bl	8000be8 <printflasherr>
			printf("WriteFlashWord: failed write at 0x%0x err=0x%x\n", address, res);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <WriteFlashWord+0x44>)
 8000d80:	f023 feb4 	bl	8024aec <iprintf>
			return (res);
 8000d84:	2001      	movs	r0, #1
}
 8000d86:	bd10      	pop	{r4, pc}
 8000d88:	080293e4 	.word	0x080293e4
 8000d8c:	08029408 	.word	0x08029408

08000d90 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <vApplicationMallocFailedHook>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <vApplicationGetIdleTaskMemory+0x18>)
{
 8000d9e:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000da0:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000da2:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000da6:	4c04      	ldr	r4, [pc, #16]	; (8000db8 <vApplicationGetIdleTaskMemory+0x1c>)
 8000da8:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000daa:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000c14 	.word	0x20000c14
 8000db8:	20000814 	.word	0x20000814

08000dbc <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <vApplicationGetTimerTaskMemory+0x18>)
{
 8000dbe:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000dc0:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000dc6:	4c04      	ldr	r4, [pc, #16]	; (8000dd8 <vApplicationGetTimerTaskMemory+0x1c>)
 8000dc8:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000dca:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200014c8 	.word	0x200014c8
 8000dd8:	20000cc8 	.word	0x20000cc8

08000ddc <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000ddc:	2200      	movs	r2, #0
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
 8000dde:	4603      	mov	r3, r0

	return (ERR_OK);
}
 8000de0:	4610      	mov	r0, r2
	state->ConnectionTimeout = 0;
 8000de2:	749a      	strb	r2, [r3, #18]
}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000de8:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000df0:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000df2:	b082      	sub	sp, #8
 8000df4:	4605      	mov	r5, r0
 8000df6:	460f      	mov	r7, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000df8:	4616      	mov	r6, r2
 8000dfa:	b10a      	cbz	r2, 8000e00 <hc_recv+0x18>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d15d      	bne.n	8000ebc <hc_recv+0xd4>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000e00:	bb6e      	cbnz	r6, 8000e5e <hc_recv+0x76>
 8000e02:	b363      	cbz	r3, 8000e5e <hc_recv+0x76>
		for (i = 0; i < state->Len; i++) {
 8000e04:	8a2b      	ldrh	r3, [r5, #16]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 809f 	beq.w	8000f4a <hc_recv+0x162>
 8000e0c:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000e0e:	f04f 0804 	mov.w	r8, #4
 8000e12:	68ec      	ldr	r4, [r5, #12]
 8000e14:	e002      	b.n	8000e1c <hc_recv+0x34>
		for (i = 0; i < state->Len; i++) {
 8000e16:	3201      	adds	r2, #1
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	dd0d      	ble.n	8000e38 <hc_recv+0x50>
			if (errormsg == GEN_ERROR) {
 8000e1c:	f1b8 0f04 	cmp.w	r8, #4
 8000e20:	d021      	beq.n	8000e66 <hc_recv+0x7e>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000e22:	5ca6      	ldrb	r6, [r4, r2]
 8000e24:	2e0d      	cmp	r6, #13
 8000e26:	d1f6      	bne.n	8000e16 <hc_recv+0x2e>
 8000e28:	1c51      	adds	r1, r2, #1
 8000e2a:	5c60      	ldrb	r0, [r4, r1]
 8000e2c:	280a      	cmp	r0, #10
 8000e2e:	d029      	beq.n	8000e84 <hc_recv+0x9c>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000e30:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000e32:	3201      	adds	r2, #1
 8000e34:	4293      	cmp	r3, r2
 8000e36:	dcf1      	bgt.n	8000e1c <hc_recv+0x34>
	char *page = NULL;
 8000e38:	2600      	movs	r6, #0
		if (errormsg == OK) {
 8000e3a:	f1b8 0f00 	cmp.w	r8, #0
 8000e3e:	d11a      	bne.n	8000e76 <hc_recv+0x8e>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000e40:	696c      	ldr	r4, [r5, #20]
 8000e42:	4632      	mov	r2, r6
 8000e44:	2100      	movs	r1, #0
 8000e46:	7828      	ldrb	r0, [r5, #0]
 8000e48:	47a0      	blx	r4
	if (pcb != NULL) {
 8000e4a:	b117      	cbz	r7, 8000e52 <hc_recv+0x6a>
		tcp_close(pcb);
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	f01b fa01 	bl	801c254 <tcp_close>
		free(state->RecvData);
 8000e52:	68e8      	ldr	r0, [r5, #12]
 8000e54:	f022 fe6e 	bl	8023b34 <free>
		free(state);
 8000e58:	4628      	mov	r0, r5
 8000e5a:	f022 fe6b 	bl	8023b34 <free>
}
 8000e5e:	2000      	movs	r0, #0
 8000e60:	b002      	add	sp, #8
 8000e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000e66:	5ca1      	ldrb	r1, [r4, r2]
 8000e68:	2932      	cmp	r1, #50	; 0x32
 8000e6a:	d05e      	beq.n	8000f2a <hc_recv+0x142>
				if (*(state->RecvData + i) == '\n')
 8000e6c:	290a      	cmp	r1, #10
 8000e6e:	d055      	beq.n	8000f1c <hc_recv+0x134>
		for (i = 0; i < state->Len; i++) {
 8000e70:	3201      	adds	r2, #1
 8000e72:	4293      	cmp	r3, r2
 8000e74:	dcf7      	bgt.n	8000e66 <hc_recv+0x7e>
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000e76:	2300      	movs	r3, #0
 8000e78:	696c      	ldr	r4, [r5, #20]
 8000e7a:	4641      	mov	r1, r8
 8000e7c:	7828      	ldrb	r0, [r5, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	47a0      	blx	r4
 8000e82:	e7e2      	b.n	8000e4a <hc_recv+0x62>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000e84:	1c91      	adds	r1, r2, #2
 8000e86:	5c60      	ldrb	r0, [r4, r1]
 8000e88:	280d      	cmp	r0, #13
 8000e8a:	d1d1      	bne.n	8000e30 <hc_recv+0x48>
 8000e8c:	1cd1      	adds	r1, r2, #3
 8000e8e:	5c60      	ldrb	r0, [r4, r1]
 8000e90:	280a      	cmp	r0, #10
 8000e92:	d1cd      	bne.n	8000e30 <hc_recv+0x48>
					i++;
 8000e94:	3204      	adds	r2, #4
 8000e96:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000e98:	18a1      	adds	r1, r4, r2
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	9100      	str	r1, [sp, #0]
 8000e9e:	f7ff f9d9 	bl	8000254 <strlen>
 8000ea2:	4606      	mov	r6, r0
 8000ea4:	f022 fe3e 	bl	8023b24 <malloc>
					strcpy(page, state->RecvData + i);
 8000ea8:	9900      	ldr	r1, [sp, #0]
 8000eaa:	1c72      	adds	r2, r6, #1
					page = malloc(strlen(state->RecvData + i));
 8000eac:	4606      	mov	r6, r0
					strcpy(page, state->RecvData + i);
 8000eae:	f022 fe59 	bl	8023b64 <memcpy>
					break;
 8000eb2:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000eb4:	f1b8 0f00 	cmp.w	r8, #0
 8000eb8:	d0c2      	beq.n	8000e40 <hc_recv+0x58>
 8000eba:	e7dc      	b.n	8000e76 <hc_recv+0x8e>
		tcp_recved(pcb, p->tot_len);
 8000ebc:	8911      	ldrh	r1, [r2, #8]
 8000ebe:	4638      	mov	r0, r7
 8000ec0:	f01a f9cc 	bl	801b25c <tcp_recved>
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000ec4:	4634      	mov	r4, r6
 8000ec6:	8a29      	ldrh	r1, [r5, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000ec8:	2700      	movs	r7, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000eca:	8963      	ldrh	r3, [r4, #10]
 8000ecc:	68e8      	ldr	r0, [r5, #12]
 8000ece:	4419      	add	r1, r3
 8000ed0:	3101      	adds	r1, #1
 8000ed2:	f023 feed 	bl	8024cb0 <realloc>
 8000ed6:	60e8      	str	r0, [r5, #12]
			if (state->RecvData == NULL) {
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d03b      	beq.n	8000f54 <hc_recv+0x16c>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000edc:	8a2b      	ldrh	r3, [r5, #16]
 8000ede:	8962      	ldrh	r2, [r4, #10]
 8000ee0:	6861      	ldr	r1, [r4, #4]
 8000ee2:	4418      	add	r0, r3
 8000ee4:	f024 fdf2 	bl	8025acc <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000ee8:	8961      	ldrh	r1, [r4, #10]
 8000eea:	68eb      	ldr	r3, [r5, #12]
 8000eec:	8a2a      	ldrh	r2, [r5, #16]
 8000eee:	440b      	add	r3, r1
 8000ef0:	549f      	strb	r7, [r3, r2]
			state->Len += temp_p->len;
 8000ef2:	8963      	ldrh	r3, [r4, #10]
 8000ef4:	8a29      	ldrh	r1, [r5, #16]
			temp_p = temp_p->next;
 8000ef6:	6824      	ldr	r4, [r4, #0]
			state->Len += temp_p->len;
 8000ef8:	4419      	add	r1, r3
 8000efa:	b289      	uxth	r1, r1
 8000efc:	8229      	strh	r1, [r5, #16]
		while (temp_p != NULL) {
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	d1e3      	bne.n	8000eca <hc_recv+0xe2>
			temp_p = p->next;
 8000f02:	4630      	mov	r0, r6
 8000f04:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000f06:	f016 fb83 	bl	8017610 <pbuf_free_callback>
		while (p != NULL) {
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d0a7      	beq.n	8000e5e <hc_recv+0x76>
			temp_p = p->next;
 8000f0e:	4630      	mov	r0, r6
 8000f10:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000f12:	f016 fb7d 	bl	8017610 <pbuf_free_callback>
		while (p != NULL) {
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d1f3      	bne.n	8000f02 <hc_recv+0x11a>
 8000f1a:	e7a0      	b.n	8000e5e <hc_recv+0x76>
		for (i = 0; i < state->Len; i++) {
 8000f1c:	3201      	adds	r2, #1
					errormsg = NOT_FOUND;
 8000f1e:	f04f 0803 	mov.w	r8, #3
		for (i = 0; i < state->Len; i++) {
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f73f af7d 	bgt.w	8000e22 <hc_recv+0x3a>
 8000f28:	e7a5      	b.n	8000e76 <hc_recv+0x8e>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000f2a:	1c50      	adds	r0, r2, #1
 8000f2c:	5c21      	ldrb	r1, [r4, r0]
 8000f2e:	2930      	cmp	r1, #48	; 0x30
 8000f30:	d001      	beq.n	8000f36 <hc_recv+0x14e>
 8000f32:	4602      	mov	r2, r0
 8000f34:	e79a      	b.n	8000e6c <hc_recv+0x84>
						&& (*(state->RecvData + ++i) == '0'))
 8000f36:	1c90      	adds	r0, r2, #2
 8000f38:	5c21      	ldrb	r1, [r4, r0]
 8000f3a:	2930      	cmp	r1, #48	; 0x30
 8000f3c:	d1f9      	bne.n	8000f32 <hc_recv+0x14a>
		for (i = 0; i < state->Len; i++) {
 8000f3e:	3203      	adds	r2, #3
 8000f40:	4293      	cmp	r3, r2
 8000f42:	dd05      	ble.n	8000f50 <hc_recv+0x168>
					errormsg = OK;
 8000f44:	f04f 0800 	mov.w	r8, #0
 8000f48:	e76b      	b.n	8000e22 <hc_recv+0x3a>
	hc_errormsg errormsg = GEN_ERROR;
 8000f4a:	f04f 0804 	mov.w	r8, #4
 8000f4e:	e792      	b.n	8000e76 <hc_recv+0x8e>
	char *page = NULL;
 8000f50:	2600      	movs	r6, #0
 8000f52:	e775      	b.n	8000e40 <hc_recv+0x58>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8000f54:	4603      	mov	r3, r0
 8000f56:	4602      	mov	r2, r0
 8000f58:	696c      	ldr	r4, [r5, #20]
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	7828      	ldrb	r0, [r5, #0]
 8000f5e:	47a0      	blx	r4
				return (ERR_OK);
 8000f60:	e77d      	b.n	8000e5e <hc_recv+0x76>
 8000f62:	bf00      	nop

08000f64 <hc_error>:
static void hc_error(void *arg, err_t err) {
 8000f64:	b570      	push	{r4, r5, r6, lr}
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000f66:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8000f68:	4604      	mov	r4, r0
 8000f6a:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000f6c:	7800      	ldrb	r0, [r0, #0]
 8000f6e:	2104      	movs	r1, #4
 8000f70:	461a      	mov	r2, r3
 8000f72:	6966      	ldr	r6, [r4, #20]
 8000f74:	47b0      	blx	r6
	free(state->RecvData);
 8000f76:	68e0      	ldr	r0, [r4, #12]
 8000f78:	f022 fddc 	bl	8023b34 <free>
	free(state->PostVars);
 8000f7c:	68a0      	ldr	r0, [r4, #8]
 8000f7e:	f022 fdd9 	bl	8023b34 <free>
	free(state->Page);
 8000f82:	6860      	ldr	r0, [r4, #4]
 8000f84:	f022 fdd6 	bl	8023b34 <free>
	free(state);
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f022 fdd3 	bl	8023b34 <free>
	printf("hc_error: err=%d\n", err);
 8000f8e:	4629      	mov	r1, r5
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <hc_error+0x38>)
}
 8000f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8000f96:	f023 bda9 	b.w	8024aec <iprintf>
 8000f9a:	bf00      	nop
 8000f9c:	08029438 	.word	0x08029438

08000fa0 <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	4605      	mov	r5, r0
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	460c      	mov	r4, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d13f      	bne.n	800102c <hc_connected+0x8c>

		return (ERR_OK);
	}

	// Define Headers
	if (state->PostVars == NULL) {
 8000fac:	6887      	ldr	r7, [r0, #8]
 8000fae:	2f00      	cmp	r7, #0
 8000fb0:	d04f      	beq.n	8001052 <hc_connected+0xb2>
		headers = malloc(19 + strlen(state->Page));
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
	} else {
		// POST headers (without PostVars or Page)(+ \0) = 91
		// Content-length: %d <== 						   ??? (max 10)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000fb2:	4638      	mov	r0, r7
 8000fb4:	f7ff f94e 	bl	8000254 <strlen>
 8000fb8:	686a      	ldr	r2, [r5, #4]
 8000fba:	4606      	mov	r6, r0
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	9203      	str	r2, [sp, #12]
 8000fc0:	f7ff f948 	bl	8000254 <strlen>
 8000fc4:	4430      	add	r0, r6
 8000fc6:	3065      	adds	r0, #101	; 0x65
 8000fc8:	f022 fdac 	bl	8023b24 <malloc>
		sprintf(headers,
 8000fcc:	4633      	mov	r3, r6
 8000fce:	9a03      	ldr	r2, [sp, #12]
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000fd0:	4606      	mov	r6, r0
		sprintf(headers,
 8000fd2:	4927      	ldr	r1, [pc, #156]	; (8001070 <hc_connected+0xd0>)
 8000fd4:	9700      	str	r7, [sp, #0]
 8000fd6:	f023 ff7b 	bl	8024ed0 <siprintf>

		return (ERR_OK);
	}

	// Setup the TCP receive function
	tcp_recv(pcb, hc_recv);
 8000fda:	4926      	ldr	r1, [pc, #152]	; (8001074 <hc_connected+0xd4>)
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f01a fa81 	bl	801b4e4 <tcp_recv>

	// Setup the TCP error function
	tcp_err(pcb, hc_error);
 8000fe2:	4925      	ldr	r1, [pc, #148]	; (8001078 <hc_connected+0xd8>)
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f01a fab5 	bl	801b554 <tcp_err>

	// Setup the TCP polling function/interval	 //TCP_POLL IS NOT CORRECT DEFINED @ DOC!!!
	tcp_poll(pcb, hc_poll, 10);
 8000fea:	220a      	movs	r2, #10
 8000fec:	4923      	ldr	r1, [pc, #140]	; (800107c <hc_connected+0xdc>)
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f01a fad2 	bl	801b598 <tcp_poll>

	// Setup the TCP sent callback function
	tcp_sent(pcb, hc_sent);
 8000ff4:	4922      	ldr	r1, [pc, #136]	; (8001080 <hc_connected+0xe0>)
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f01a fa90 	bl	801b51c <tcp_sent>

	// Send data
	tcp_write(pcb, headers, strlen(headers), 1);
 8000ffc:	4630      	mov	r0, r6
 8000ffe:	f7ff f929 	bl	8000254 <strlen>
 8001002:	2301      	movs	r3, #1
 8001004:	4602      	mov	r2, r0
 8001006:	4631      	mov	r1, r6
 8001008:	4620      	mov	r0, r4
 800100a:	f01d f83f 	bl	801e08c <tcp_write>
	tcp_output(pcb);
 800100e:	4620      	mov	r0, r4
 8001010:	f01d fe56 	bl	801ecc0 <tcp_output>

	// remove headers
	free(headers);
 8001014:	4630      	mov	r0, r6
 8001016:	f022 fd8d 	bl	8023b34 <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 800101a:	68a8      	ldr	r0, [r5, #8]
 800101c:	f022 fd8a 	bl	8023b34 <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 8001020:	6868      	ldr	r0, [r5, #4]
 8001022:	f022 fd87 	bl	8023b34 <free>

	return (ERR_OK);
}
 8001026:	2000      	movs	r0, #0
 8001028:	b005      	add	sp, #20
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (pcb != NULL) {
 800102c:	b111      	cbz	r1, 8001034 <hc_connected+0x94>
		tcp_close(pcb);
 800102e:	4608      	mov	r0, r1
 8001030:	f01b f910 	bl	801c254 <tcp_close>
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8001034:	2300      	movs	r3, #0
 8001036:	2104      	movs	r1, #4
 8001038:	7828      	ldrb	r0, [r5, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	696c      	ldr	r4, [r5, #20]
 800103e:	47a0      	blx	r4
		free(state->RecvData);
 8001040:	68e8      	ldr	r0, [r5, #12]
 8001042:	f022 fd77 	bl	8023b34 <free>
		free(state);
 8001046:	4628      	mov	r0, r5
 8001048:	f022 fd74 	bl	8023b34 <free>
}
 800104c:	2000      	movs	r0, #0
 800104e:	b005      	add	sp, #20
 8001050:	bdf0      	pop	{r4, r5, r6, r7, pc}
		headers = malloc(19 + strlen(state->Page));
 8001052:	6842      	ldr	r2, [r0, #4]
 8001054:	4610      	mov	r0, r2
 8001056:	9203      	str	r2, [sp, #12]
 8001058:	f7ff f8fc 	bl	8000254 <strlen>
 800105c:	3013      	adds	r0, #19
 800105e:	f022 fd61 	bl	8023b24 <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8001062:	9a03      	ldr	r2, [sp, #12]
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <hc_connected+0xe4>)
		headers = malloc(19 + strlen(state->Page));
 8001066:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8001068:	f023 ff32 	bl	8024ed0 <siprintf>
 800106c:	e7b5      	b.n	8000fda <hc_connected+0x3a>
 800106e:	bf00      	nop
 8001070:	08029464 	.word	0x08029464
 8001074:	08000de9 	.word	0x08000de9
 8001078:	08000f65 	.word	0x08000f65
 800107c:	08001089 	.word	0x08001089
 8001080:	08000ddd 	.word	0x08000ddd
 8001084:	0802944c 	.word	0x0802944c

08001088 <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8001088:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 800108a:	7c83      	ldrb	r3, [r0, #18]
 800108c:	3301      	adds	r3, #1
 800108e:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 8001090:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 8001092:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8001094:	d801      	bhi.n	800109a <hc_poll+0x12>
}
 8001096:	2000      	movs	r0, #0
 8001098:	bd38      	pop	{r3, r4, r5, pc}
 800109a:	4604      	mov	r4, r0
		tcp_abort(pcb);
 800109c:	4608      	mov	r0, r1
 800109e:	f01a fee1 	bl	801be64 <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 80010a2:	2300      	movs	r3, #0
 80010a4:	7820      	ldrb	r0, [r4, #0]
 80010a6:	2102      	movs	r1, #2
 80010a8:	6965      	ldr	r5, [r4, #20]
 80010aa:	461a      	mov	r2, r3
 80010ac:	47a8      	blx	r5
}
 80010ae:	2000      	movs	r0, #0
 80010b0:	bd38      	pop	{r3, r4, r5, pc}
 80010b2:	bf00      	nop

080010b4 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 80010b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010b8:	b085      	sub	sp, #20
 80010ba:	460f      	mov	r7, r1
 80010bc:	4614      	mov	r4, r2
 80010be:	4698      	mov	r8, r3
 80010c0:	9001      	str	r0, [sp, #4]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 80010c2:	2018      	movs	r0, #24
 80010c4:	f022 fd2e 	bl	8023b24 <malloc>
 80010c8:	4605      	mov	r5, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 80010ca:	f01a ffeb 	bl	801c0a4 <tcp_new>
	if (pcb == NULL || state == NULL) {
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d069      	beq.n	80011a6 <hc_open+0xf2>
 80010d2:	fab5 f285 	clz	r2, r5
 80010d6:	0952      	lsrs	r2, r2, #5
 80010d8:	2d00      	cmp	r5, #0
 80010da:	d064      	beq.n	80011a6 <hc_open+0xf2>
	num++;
	state->Num = num;
	state->RecvData = NULL;
	state->ConnectionTimeout = 0;
	state->Len = 0;
	state->ReturnPage = returnpage;
 80010dc:	f8c5 8014 	str.w	r8, [r5, #20]
 80010e0:	4606      	mov	r6, r0
	num++;
 80010e2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80011d8 <hc_open+0x124>
	state->RecvData = NULL;
 80010e6:	60ea      	str	r2, [r5, #12]
	num++;
 80010e8:	f898 3000 	ldrb.w	r3, [r8]
	state->ConnectionTimeout = 0;
 80010ec:	74aa      	strb	r2, [r5, #18]
	num++;
 80010ee:	3301      	adds	r3, #1
	state->Len = 0;
 80010f0:	822a      	strh	r2, [r5, #16]
	num++;
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f888 3000 	strb.w	r3, [r8]
	state->Num = num;
 80010f8:	702b      	strb	r3, [r5, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 80010fa:	b134      	cbz	r4, 800110a <hc_open+0x56>
		state->PostVars = malloc(strlen(PostVars) + 1);
 80010fc:	4620      	mov	r0, r4
 80010fe:	f7ff f8a9 	bl	8000254 <strlen>
 8001102:	3001      	adds	r0, #1
 8001104:	f022 fd0e 	bl	8023b24 <malloc>
 8001108:	60a8      	str	r0, [r5, #8]
	state->Page = malloc(strlen(Page) + 1);
 800110a:	4638      	mov	r0, r7
 800110c:	f7ff f8a2 	bl	8000254 <strlen>
 8001110:	1c42      	adds	r2, r0, #1
 8001112:	4610      	mov	r0, r2
 8001114:	9200      	str	r2, [sp, #0]
 8001116:	f022 fd05 	bl	8023b24 <malloc>
 800111a:	4603      	mov	r3, r0
 800111c:	6068      	str	r0, [r5, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 800111e:	b390      	cbz	r0, 8001186 <hc_open+0xd2>
 8001120:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8001124:	9a00      	ldr	r2, [sp, #0]
 8001126:	f1b9 0f00 	cmp.w	r9, #0
 800112a:	d02b      	beq.n	8001184 <hc_open+0xd0>
		printf("httpclient: no pcb memory\n");
#endif
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 800112c:	4639      	mov	r1, r7
 800112e:	f022 fd19 	bl	8023b64 <memcpy>
	if (PostVars != NULL)
 8001132:	2c00      	cmp	r4, #0
 8001134:	d03e      	beq.n	80011b4 <hc_open+0x100>
		strcpy(state->PostVars, PostVars);
 8001136:	4621      	mov	r1, r4
 8001138:	4648      	mov	r0, r9
 800113a:	f023 ff70 	bl	802501e <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 800113e:	f641 7490 	movw	r4, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8001142:	4f21      	ldr	r7, [pc, #132]	; (80011c8 <hc_open+0x114>)
 8001144:	e000      	b.n	8001148 <hc_open+0x94>
		// Local port in use, use port+1
		port++;
 8001146:	b2a4      	uxth	r4, r4
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8001148:	4622      	mov	r2, r4
 800114a:	4639      	mov	r1, r7
 800114c:	4630      	mov	r0, r6
		port++;
 800114e:	3401      	adds	r4, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8001150:	f019 ff62 	bl	801b018 <tcp_bind>
 8001154:	2800      	cmp	r0, #0
 8001156:	d1f6      	bne.n	8001146 <hc_open+0x92>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8001158:	4629      	mov	r1, r5
 800115a:	4630      	mov	r0, r6
 800115c:	f01a f9be 	bl	801b4dc <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <hc_open+0x118>)
 8001162:	f641 7290 	movw	r2, #8080	; 0x1f90
 8001166:	a901      	add	r1, sp, #4
 8001168:	4630      	mov	r0, r6
 800116a:	f01a f8b1 	bl	801b2d0 <tcp_connect>
 800116e:	b243      	sxtb	r3, r0
 8001170:	f88d 300f 	strb.w	r3, [sp, #15]

	if (err != ERR_OK) {
 8001174:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001178:	b9fb      	cbnz	r3, 80011ba <hc_open+0x106>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 800117a:	f898 0000 	ldrb.w	r0, [r8]
}
 800117e:	b005      	add	sp, #20
 8001180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8001184:	b19c      	cbz	r4, 80011ae <hc_open+0xfa>
		free(state->Page);
 8001186:	4618      	mov	r0, r3
 8001188:	f022 fcd4 	bl	8023b34 <free>
		free(state->PostVars);
 800118c:	68a8      	ldr	r0, [r5, #8]
 800118e:	f022 fcd1 	bl	8023b34 <free>
		free(state);
 8001192:	4628      	mov	r0, r5
 8001194:	f022 fcce 	bl	8023b34 <free>
		tcp_close(pcb);
 8001198:	4630      	mov	r0, r6
 800119a:	f01b f85b 	bl	801c254 <tcp_close>
		return 0;
 800119e:	2000      	movs	r0, #0
}
 80011a0:	b005      	add	sp, #20
 80011a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("hc_open: Not enough memory for pcb or state\n");
 80011a6:	480a      	ldr	r0, [pc, #40]	; (80011d0 <hc_open+0x11c>)
 80011a8:	f023 fd3c 	bl	8024c24 <puts>
		for (;;)
 80011ac:	e7fe      	b.n	80011ac <hc_open+0xf8>
	strcpy(state->Page, Page);
 80011ae:	4639      	mov	r1, r7
 80011b0:	f022 fcd8 	bl	8023b64 <memcpy>
		state->PostVars = NULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60ab      	str	r3, [r5, #8]
 80011b8:	e7c1      	b.n	800113e <hc_open+0x8a>
		printf("hc_open failed with %d\n", err);
 80011ba:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <hc_open+0x120>)
 80011c0:	b249      	sxtb	r1, r1
 80011c2:	f023 fc93 	bl	8024aec <iprintf>
 80011c6:	e7d8      	b.n	800117a <hc_open+0xc6>
 80011c8:	08044cb8 	.word	0x08044cb8
 80011cc:	08000fa1 	.word	0x08000fa1
 80011d0:	080294c8 	.word	0x080294c8
 80011d4:	080294f4 	.word	0x080294f4
 80011d8:	2000157c 	.word	0x2000157c

080011dc <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 80011dc:	2300      	movs	r3, #0
int wait_armtx(void) {
 80011de:	b510      	push	{r4, lr}
 80011e0:	b082      	sub	sp, #8
	timeoutcnt = 0;
 80011e2:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 80011e4:	9b01      	ldr	r3, [sp, #4]
 80011e6:	2b95      	cmp	r3, #149	; 0x95
 80011e8:	dc0d      	bgt.n	8001206 <wait_armtx+0x2a>
 80011ea:	4c0e      	ldr	r4, [pc, #56]	; (8001224 <wait_armtx+0x48>)
 80011ec:	e007      	b.n	80011fe <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 80011ee:	9b01      	ldr	r3, [sp, #4]
 80011f0:	4403      	add	r3, r0
 80011f2:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 80011f4:	f013 fd06 	bl	8014c04 <osDelay>
	while (timeoutcnt < 150) {
 80011f8:	9b01      	ldr	r3, [sp, #4]
 80011fa:	2b95      	cmp	r3, #149	; 0x95
 80011fc:	dc03      	bgt.n	8001206 <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 80011fe:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	4283      	cmp	r3, r0
 8001204:	d1f3      	bne.n	80011ee <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001206:	9b01      	ldr	r3, [sp, #4]
 8001208:	2bf9      	cmp	r3, #249	; 0xf9
 800120a:	dc02      	bgt.n	8001212 <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 800120c:	2000      	movs	r0, #0
}
 800120e:	b002      	add	sp, #8
 8001210:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <wait_armtx+0x4c>)
 8001214:	f023 fd06 	bl	8024c24 <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <wait_armtx+0x48>)
 800121a:	2201      	movs	r2, #1
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	601a      	str	r2, [r3, #0]
		return (-1);
 8001222:	e7f4      	b.n	800120e <wait_armtx+0x32>
 8001224:	20001d44 	.word	0x20001d44
 8001228:	0802950c 	.word	0x0802950c

0800122c <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <HAL_UART_TxCpltCallback+0x14>)
 8001232:	6802      	ldr	r2, [r0, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d000      	beq.n	800123a <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8001238:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 800123a:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_UART_TxCpltCallback+0x18>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40005000 	.word	0x40005000
 8001248:	20001d44 	.word	0x20001d44

0800124c <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	4606      	mov	r6, r0
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8001250:	4c1b      	ldr	r4, [pc, #108]	; (80012c0 <lcd_uart_init+0x74>)
void lcd_uart_init(int baud) {
 8001252:	b082      	sub	sp, #8
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001254:	481b      	ldr	r0, [pc, #108]	; (80012c4 <lcd_uart_init+0x78>)
 8001256:	4631      	mov	r1, r6
	lcdrxoutidx = 0;		// buffer consumer index
 8001258:	2500      	movs	r5, #0
	printf("lcd_uart_init: LCD %d ***\n", baud);
 800125a:	f023 fc47 	bl	8024aec <iprintf>
	lcdrxoutidx = 0;		// buffer consumer index
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <lcd_uart_init+0x7c>)
	HAL_UART_Abort(&huart5);
 8001260:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8001262:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001264:	f010 fa88 	bl	8011778 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8001268:	4620      	mov	r0, r4
 800126a:	f010 f9d3 	bl	8011614 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 800126e:	4a17      	ldr	r2, [pc, #92]	; (80012cc <lcd_uart_init+0x80>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001270:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001272:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8001274:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001278:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800127c:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001284:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001288:	f011 fa70 	bl	801276c <HAL_UART_Init>
 800128c:	b958      	cbnz	r0, 80012a6 <lcd_uart_init+0x5a>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	490f      	ldr	r1, [pc, #60]	; (80012d0 <lcd_uart_init+0x84>)
 8001292:	480b      	ldr	r0, [pc, #44]	; (80012c0 <lcd_uart_init+0x74>)
 8001294:	f011 fc5a 	bl	8012b4c <HAL_UART_Receive_DMA>
 8001298:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 800129c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012a0:	b933      	cbnz	r3, 80012b0 <lcd_uart_init+0x64>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 80012a2:	b002      	add	sp, #8
 80012a4:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 80012a6:	4631      	mov	r1, r6
 80012a8:	480a      	ldr	r0, [pc, #40]	; (80012d4 <lcd_uart_init+0x88>)
 80012aa:	f023 fc1f 	bl	8024aec <iprintf>
 80012ae:	e7ee      	b.n	800128e <lcd_uart_init+0x42>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80012b0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <lcd_uart_init+0x8c>)
}
 80012b6:	b002      	add	sp, #8
 80012b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80012bc:	f023 bc16 	b.w	8024aec <iprintf>
 80012c0:	200027cc 	.word	0x200027cc
 80012c4:	08029520 	.word	0x08029520
 80012c8:	20001748 	.word	0x20001748
 80012cc:	40005000 	.word	0x40005000
 80012d0:	20001608 	.word	0x20001608
 80012d4:	0802953c 	.word	0x0802953c
 80012d8:	0802956c 	.word	0x0802956c

080012dc <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80012de:	4a3a      	ldr	r2, [pc, #232]	; (80013c8 <lcd_init+0xec>)
void lcd_init(int baud) {
 80012e0:	b08d      	sub	sp, #52	; 0x34
 80012e2:	4605      	mov	r5, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80012e4:	4b39      	ldr	r3, [pc, #228]	; (80013cc <lcd_init+0xf0>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80012e6:	af02      	add	r7, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80012e8:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 80012ea:	4e39      	ldr	r6, [pc, #228]	; (80013d0 <lcd_init+0xf4>)
 80012ec:	f10d 0c10 	add.w	ip, sp, #16
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80012f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f4:	e887 0003 	stmia.w	r7, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80012f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fa:	c407      	stmia	r4!, {r0, r1, r2}
 80012fc:	f824 3b02 	strh.w	r3, [r4], #2
 8001300:	0c1b      	lsrs	r3, r3, #16
 8001302:	7023      	strb	r3, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001304:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001308:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	int siz, page;
	volatile char *cmd;

	printf("lcd_init: baud=%d\n", baud);
 800130c:	4629      	mov	r1, r5
 800130e:	4831      	ldr	r0, [pc, #196]	; (80013d4 <lcd_init+0xf8>)
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001310:	f88c 3000 	strb.w	r3, [ip]
	printf("lcd_init: baud=%d\n", baud);
 8001314:	f023 fbea 	bl	8024aec <iprintf>
	if (!((baud == 9600) || (baud == 230400))) {
 8001318:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 800131c:	d008      	beq.n	8001330 <lcd_init+0x54>
 800131e:	f5b5 3f61 	cmp.w	r5, #230400	; 0x38400
 8001322:	d005      	beq.n	8001330 <lcd_init+0x54>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 8001324:	4629      	mov	r1, r5
 8001326:	482c      	ldr	r0, [pc, #176]	; (80013d8 <lcd_init+0xfc>)
 8001328:	f023 fbe0 	bl	8024aec <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 800132c:	b00d      	add	sp, #52	; 0x34
 800132e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	txdmadone = 0;	// TX is NOT free
 8001330:	2300      	movs	r3, #0
 8001332:	4c2a      	ldr	r4, [pc, #168]	; (80013dc <lcd_init+0x100>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8001334:	4639      	mov	r1, r7
 8001336:	2207      	movs	r2, #7
 8001338:	4829      	ldr	r0, [pc, #164]	; (80013e0 <lcd_init+0x104>)
	txdmadone = 0;	// TX is NOT free
 800133a:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 800133c:	f010 f9c6 	bl	80116cc <HAL_UART_Transmit_DMA>
 8001340:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8001344:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001348:	b14b      	cbz	r3, 800135e <lcd_init+0x82>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800134a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800134e:	4825      	ldr	r0, [pc, #148]	; (80013e4 <lcd_init+0x108>)
 8001350:	f023 fbcc 	bl	8024aec <iprintf>
	while (!(txdmadone)) {
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	b92b      	cbnz	r3, 8001364 <lcd_init+0x88>
		osDelay(1);		// wait for comms to complete
 8001358:	2001      	movs	r0, #1
 800135a:	f013 fc53 	bl	8014c04 <osDelay>
	while (!(txdmadone)) {
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f9      	beq.n	8001358 <lcd_init+0x7c>
	txdmadone = 0;	// TX is NOT free
 8001364:	2300      	movs	r3, #0
	osDelay(800);
 8001366:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 800136a:	6023      	str	r3, [r4, #0]
	osDelay(800);
 800136c:	f013 fc4a 	bl	8014c04 <osDelay>
	if (baud == 9600)
 8001370:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 8001374:	d017      	beq.n	80013a6 <lcd_init+0xca>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 8001376:	220e      	movs	r2, #14
 8001378:	a908      	add	r1, sp, #32
 800137a:	4819      	ldr	r0, [pc, #100]	; (80013e0 <lcd_init+0x104>)
 800137c:	f010 f9a6 	bl	80116cc <HAL_UART_Transmit_DMA>
 8001380:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 8001384:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001388:	b11b      	cbz	r3, 8001392 <lcd_init+0xb6>
 800138a:	e017      	b.n	80013bc <lcd_init+0xe0>
		osDelay(1);		// wait for comms to complete
 800138c:	2001      	movs	r0, #1
 800138e:	f013 fc39 	bl	8014c04 <osDelay>
	while (!(txdmadone)) {
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f9      	beq.n	800138c <lcd_init+0xb0>
	txdmadone = 0;	// TX is NOT free
 8001398:	2300      	movs	r3, #0
	osDelay(120);
 800139a:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 800139c:	6023      	str	r3, [r4, #0]
	osDelay(120);
 800139e:	f013 fc31 	bl	8014c04 <osDelay>
}
 80013a2:	b00d      	add	sp, #52	; 0x34
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 80013a6:	220c      	movs	r2, #12
 80013a8:	a904      	add	r1, sp, #16
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <lcd_init+0x104>)
 80013ac:	f010 f98e 	bl	80116cc <HAL_UART_Transmit_DMA>
 80013b0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80013b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0ea      	beq.n	8001392 <lcd_init+0xb6>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80013bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <lcd_init+0x108>)
 80013c2:	f023 fb93 	bl	8024aec <iprintf>
 80013c6:	e7e4      	b.n	8001392 <lcd_init+0xb6>
 80013c8:	08029614 	.word	0x08029614
 80013cc:	0802961c 	.word	0x0802961c
 80013d0:	0802962c 	.word	0x0802962c
 80013d4:	0802959c 	.word	0x0802959c
 80013d8:	080295b0 	.word	0x080295b0
 80013dc:	20001d44 	.word	0x20001d44
 80013e0:	200027cc 	.word	0x200027cc
 80013e4:	080295e4 	.word	0x080295e4

080013e8 <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 80013e8:	b530      	push	{r4, r5, lr}
 80013ea:	b083      	sub	sp, #12
 80013ec:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 80013ee:	f7ff fef5 	bl	80011dc <wait_armtx>
 80013f2:	4605      	mov	r5, r0
 80013f4:	3001      	adds	r0, #1
 80013f6:	d01d      	beq.n	8001434 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	4813      	ldr	r0, [pc, #76]	; (8001448 <lcd_puts+0x60>)
 80013fc:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80013fe:	9b01      	ldr	r3, [sp, #4]
 8001400:	5ce3      	ldrb	r3, [r4, r3]
 8001402:	b153      	cbz	r3, 800141a <lcd_puts+0x32>
		buffer[i] = str[i];
 8001404:	9901      	ldr	r1, [sp, #4]
 8001406:	9a01      	ldr	r2, [sp, #4]
		i++;
 8001408:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 800140a:	5c61      	ldrb	r1, [r4, r1]
		i++;
 800140c:	3301      	adds	r3, #1
		buffer[i] = str[i];
 800140e:	5481      	strb	r1, [r0, r2]
		i++;
 8001410:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 8001412:	9b01      	ldr	r3, [sp, #4]
 8001414:	5ce3      	ldrb	r3, [r4, r3]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f4      	bne.n	8001404 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 800141a:	9901      	ldr	r1, [sp, #4]
 800141c:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 800141e:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <lcd_puts+0x64>)
	buffer[i] = '\0';
 8001422:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001424:	b292      	uxth	r2, r2
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <lcd_puts+0x60>)
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 800142a:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 800142c:	f010 f94e 	bl	80116cc <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8001430:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 8001432:	b910      	cbnz	r0, 800143a <lcd_puts+0x52>
	}
	return (stat);
}
 8001434:	4628      	mov	r0, r5
 8001436:	b003      	add	sp, #12
 8001438:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800143a:	4629      	mov	r1, r5
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <lcd_puts+0x6c>)
 800143e:	f023 fb55 	bl	8024aec <iprintf>
}
 8001442:	4628      	mov	r0, r5
 8001444:	b003      	add	sp, #12
 8001446:	bd30      	pop	{r4, r5, pc}
 8001448:	200015a8 	.word	0x200015a8
 800144c:	20001d44 	.word	0x20001d44
 8001450:	200027cc 	.word	0x200027cc
 8001454:	0802963c 	.word	0x0802963c

08001458 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 8001458:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 800145a:	2300      	movs	r3, #0
int lcd_rxdma() {
 800145c:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <lcd_rxdma+0x64>)
	volatile int count = 0;
 8001460:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 8001462:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001464:	6953      	ldr	r3, [r2, #20]
 8001466:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800146a:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 800146c:	9a01      	ldr	r2, [sp, #4]
 800146e:	2a80      	cmp	r2, #128	; 0x80
 8001470:	d016      	beq.n	80014a0 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8001472:	4d13      	ldr	r5, [pc, #76]	; (80014c0 <lcd_rxdma+0x68>)
 8001474:	9a01      	ldr	r2, [sp, #4]
 8001476:	682b      	ldr	r3, [r5, #0]
 8001478:	4293      	cmp	r3, r2
 800147a:	d00e      	beq.n	800149a <lcd_rxdma+0x42>
 800147c:	4c11      	ldr	r4, [pc, #68]	; (80014c4 <lcd_rxdma+0x6c>)
 800147e:	4812      	ldr	r0, [pc, #72]	; (80014c8 <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001480:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 8001482:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001484:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 8001486:	3301      	adds	r3, #1
		count++;
 8001488:	3201      	adds	r2, #1
		return (0);
 800148a:	2b80      	cmp	r3, #128	; 0x80
		count++;
 800148c:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800148e:	9a01      	ldr	r2, [sp, #4]
		return (0);
 8001490:	bfa8      	it	ge
 8001492:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8001494:	429a      	cmp	r2, r3
 8001496:	d1f3      	bne.n	8001480 <lcd_rxdma+0x28>
 8001498:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 800149a:	9800      	ldr	r0, [sp, #0]
}
 800149c:	b003      	add	sp, #12
 800149e:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 80014a0:	4909      	ldr	r1, [pc, #36]	; (80014c8 <lcd_rxdma+0x70>)
 80014a2:	480a      	ldr	r0, [pc, #40]	; (80014cc <lcd_rxdma+0x74>)
 80014a4:	f011 fb52 	bl	8012b4c <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 80014a8:	b910      	cbnz	r0, 80014b0 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 80014aa:	2300      	movs	r3, #0
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	e7e0      	b.n	8001472 <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80014b0:	4601      	mov	r1, r0
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <lcd_rxdma+0x78>)
 80014b4:	f023 fb1a 	bl	8024aec <iprintf>
 80014b8:	e7f7      	b.n	80014aa <lcd_rxdma+0x52>
 80014ba:	bf00      	nop
 80014bc:	40026000 	.word	0x40026000
 80014c0:	20001748 	.word	0x20001748
 80014c4:	200016c8 	.word	0x200016c8
 80014c8:	20001608 	.word	0x20001608
 80014cc:	200027cc 	.word	0x200027cc
 80014d0:	0802966c 	.word	0x0802966c

080014d4 <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 80014d4:	b500      	push	{lr}
 80014d6:	b099      	sub	sp, #100	; 0x64
 80014d8:	4601      	mov	r1, r0
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 80014da:	4668      	mov	r0, sp
 80014dc:	f023 fd89 	bl	8024ff2 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <writelcdcmd+0x2c>)
	if (!(lcd_txblocked))
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <writelcdcmd+0x30>)
	strcpy(pkt, str);
 80014e4:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 80014e6:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 80014e8:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 80014ea:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80014ec:	b92b      	cbnz	r3, 80014fa <writelcdcmd+0x26>
		return (lcd_puts(pkt));
 80014ee:	4668      	mov	r0, sp
 80014f0:	f7ff ff7a 	bl	80013e8 <lcd_puts>
	else
		return (-1);
}
 80014f4:	b019      	add	sp, #100	; 0x64
 80014f6:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 80014fa:	f04f 30ff 	mov.w	r0, #4294967295
 80014fe:	e7f9      	b.n	80014f4 <writelcdcmd+0x20>
 8001500:	08029618 	.word	0x08029618
 8001504:	200016c4 	.word	0x200016c4

08001508 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 8001508:	b510      	push	{r4, lr}
 800150a:	b0b2      	sub	sp, #200	; 0xc8
	int i;
	char str[96];
	volatile int result = 0;
 800150c:	2400      	movs	r4, #0
int setlcdtext(char id[], char string[]) {
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1

	sprintf(str, "%s=\"%s\"", id, string);
 8001512:	a802      	add	r0, sp, #8
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <setlcdtext+0x40>)
	volatile int result = 0;
 8001516:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8001518:	f023 fcda 	bl	8024ed0 <siprintf>
	strcpy(pkt, str);
 800151c:	a902      	add	r1, sp, #8
 800151e:	a81a      	add	r0, sp, #104	; 0x68
 8001520:	f023 fd67 	bl	8024ff2 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001524:	4909      	ldr	r1, [pc, #36]	; (800154c <setlcdtext+0x44>)
	if (!(lcd_txblocked))
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <setlcdtext+0x48>)
	strcpy(pkt, str);
 8001528:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 800152a:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 800152c:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 800152e:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8001530:	b933      	cbnz	r3, 8001540 <setlcdtext+0x38>
		return (lcd_puts(pkt));
 8001532:	a81a      	add	r0, sp, #104	; 0x68
 8001534:	f7ff ff58 	bl	80013e8 <lcd_puts>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 8001538:	9001      	str	r0, [sp, #4]
	return (result);
 800153a:	9801      	ldr	r0, [sp, #4]
}
 800153c:	b032      	add	sp, #200	; 0xc8
 800153e:	bd10      	pop	{r4, pc}
		return (-1);
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	e7f8      	b.n	8001538 <setlcdtext+0x30>
 8001546:	bf00      	nop
 8001548:	0802969c 	.word	0x0802969c
 800154c:	08029618 	.word	0x08029618
 8001550:	200016c4 	.word	0x200016c4

08001554 <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 8001554:	b500      	push	{lr}
 8001556:	b0a1      	sub	sp, #132	; 0x84
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 800155c:	4911      	ldr	r1, [pc, #68]	; (80015a4 <setlcdbin+0x50>)
 800155e:	4668      	mov	r0, sp
 8001560:	f023 fcb6 	bl	8024ed0 <siprintf>
	strcpy(pkt, str);
 8001564:	4669      	mov	r1, sp
 8001566:	a808      	add	r0, sp, #32
 8001568:	f023 fd43 	bl	8024ff2 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 800156c:	490e      	ldr	r1, [pc, #56]	; (80015a8 <setlcdbin+0x54>)
	if (!(lcd_txblocked))
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <setlcdbin+0x58>)
	strcpy(pkt, str);
 8001570:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8001572:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8001574:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8001576:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8001578:	b98b      	cbnz	r3, 800159e <setlcdbin+0x4a>
		return (lcd_puts(pkt));
 800157a:	a808      	add	r0, sp, #32
 800157c:	f7ff ff34 	bl	80013e8 <lcd_puts>
	result = writelcdcmd(buffer);
 8001580:	9008      	str	r0, [sp, #32]
	if (result == -1) {		// wait for response
 8001582:	9b08      	ldr	r3, [sp, #32]
 8001584:	3301      	adds	r3, #1
 8001586:	d003      	beq.n	8001590 <setlcdbin+0x3c>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
	}
	return (result);
 8001588:	9808      	ldr	r0, [sp, #32]
}
 800158a:	b021      	add	sp, #132	; 0x84
 800158c:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <setlcdbin+0x5c>)
 8001592:	f023 faab 	bl	8024aec <iprintf>
	return (result);
 8001596:	9808      	ldr	r0, [sp, #32]
}
 8001598:	b021      	add	sp, #132	; 0x84
 800159a:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 800159e:	f04f 30ff 	mov.w	r0, #4294967295
 80015a2:	e7ed      	b.n	8001580 <setlcdbin+0x2c>
 80015a4:	080296a4 	.word	0x080296a4
 80015a8:	08029618 	.word	0x08029618
 80015ac:	200016c4 	.word	0x200016c4
 80015b0:	080296ac 	.word	0x080296ac

080015b4 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80015b4:	b570      	push	{r4, r5, r6, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <isnexpkt+0xb4>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80015b8:	b082      	sub	sp, #8
	if (lastidx != lcdrxoutidx) {		// something there
 80015ba:	4c2c      	ldr	r4, [pc, #176]	; (800166c <isnexpkt+0xb8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6822      	ldr	r2, [r4, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d04f      	beq.n	8001664 <isnexpkt+0xb0>
	if (++index >= limit)
 80015c4:	1c53      	adds	r3, r2, #1
		rxtimeout = 100;
 80015c6:	4d2a      	ldr	r5, [pc, #168]	; (8001670 <isnexpkt+0xbc>)
		return (0);
 80015c8:	2b80      	cmp	r3, #128	; 0x80
 80015ca:	bfa8      	it	ge
 80015cc:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80015ce:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 80015d0:	2364      	movs	r3, #100	; 0x64
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 80015d2:	4c28      	ldr	r4, [pc, #160]	; (8001674 <isnexpkt+0xc0>)
		rxtimeout = 100;
 80015d4:	602b      	str	r3, [r5, #0]
		ch = lcdrxbuffer[lastidx];
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <isnexpkt+0xc4>)
 80015d8:	5c9b      	ldrb	r3, [r3, r2]
		ch = rawchar & 0xff;
 80015da:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 80015de:	7823      	ldrb	r3, [r4, #0]
 80015e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80015e4:	54c2      	strb	r2, [r0, r3]
 80015e6:	3301      	adds	r3, #1
		if (ch == 0xff) {
 80015e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
		buffer[i++] = ch;
 80015ec:	b2db      	uxtb	r3, r3
		if (ch == 0xff) {
 80015ee:	2aff      	cmp	r2, #255	; 0xff
		buffer[i++] = ch;
 80015f0:	7023      	strb	r3, [r4, #0]
		if (ch == 0xff) {
 80015f2:	d021      	beq.n	8001638 <isnexpkt+0x84>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80015f4:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80015f8:	4a20      	ldr	r2, [pc, #128]	; (800167c <isnexpkt+0xc8>)
 80015fa:	7016      	strb	r6, [r2, #0]
			termcnt = 0;
 80015fc:	2200      	movs	r2, #0
 80015fe:	4e20      	ldr	r6, [pc, #128]	; (8001680 <isnexpkt+0xcc>)
 8001600:	7032      	strb	r2, [r6, #0]
		}

		if (i == size) { // overrun
 8001602:	428b      	cmp	r3, r1
 8001604:	d027      	beq.n	8001656 <isnexpkt+0xa2>
			i = 0;
			termcnt = 0;
		}
	}
	if (rxtimeout > 0)
 8001606:	682b      	ldr	r3, [r5, #0]
 8001608:	b133      	cbz	r3, 8001618 <isnexpkt+0x64>
		rxtimeout--;
 800160a:	3b01      	subs	r3, #1
 800160c:	602b      	str	r3, [r5, #0]
	if (rxtimeout == 0) {
 800160e:	b11b      	cbz	r3, 8001618 <isnexpkt+0x64>
		for (i = 0; i < size; buffer[i++] = 0)
			;
		i = 0;
		return (-1);
	}
	return (-2);  // no char available
 8001610:	f06f 0001 	mvn.w	r0, #1
}
 8001614:	b002      	add	sp, #8
 8001616:	bd70      	pop	{r4, r5, r6, pc}
		termcnt = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	4a19      	ldr	r2, [pc, #100]	; (8001680 <isnexpkt+0xcc>)
		for (i = 0; i < size; buffer[i++] = 0)
 800161c:	4c15      	ldr	r4, [pc, #84]	; (8001674 <isnexpkt+0xc0>)
		termcnt = 0;
 800161e:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 8001620:	7023      	strb	r3, [r4, #0]
 8001622:	b119      	cbz	r1, 800162c <isnexpkt+0x78>
 8001624:	460a      	mov	r2, r1
 8001626:	4619      	mov	r1, r3
 8001628:	f022 fac4 	bl	8023bb4 <memset>
		i = 0;
 800162c:	2300      	movs	r3, #0
		return (-1);
 800162e:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 8001632:	7023      	strb	r3, [r4, #0]
}
 8001634:	b002      	add	sp, #8
 8001636:	bd70      	pop	{r4, r5, r6, pc}
			termcnt++;
 8001638:	4e11      	ldr	r6, [pc, #68]	; (8001680 <isnexpkt+0xcc>)
 800163a:	7832      	ldrb	r2, [r6, #0]
 800163c:	3201      	adds	r2, #1
 800163e:	b2d2      	uxtb	r2, r2
			if (termcnt == 3) {
 8001640:	2a03      	cmp	r2, #3
			termcnt++;
 8001642:	7032      	strb	r2, [r6, #0]
			if (termcnt == 3) {
 8001644:	d1dd      	bne.n	8001602 <isnexpkt+0x4e>
				printf(" # ");		// found terminator
 8001646:	480f      	ldr	r0, [pc, #60]	; (8001684 <isnexpkt+0xd0>)
 8001648:	f023 fa50 	bl	8024aec <iprintf>
				i = 0;
 800164c:	2300      	movs	r3, #0
				index = i;
 800164e:	7820      	ldrb	r0, [r4, #0]
				termcnt = 0;
 8001650:	7033      	strb	r3, [r6, #0]
				i = 0;
 8001652:	7023      	strb	r3, [r4, #0]
				return (index);
 8001654:	e7de      	b.n	8001614 <isnexpkt+0x60>
			i = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 800165a:	7033      	strb	r3, [r6, #0]
	if (rxtimeout > 0)
 800165c:	682b      	ldr	r3, [r5, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1d3      	bne.n	800160a <isnexpkt+0x56>
 8001662:	e7d9      	b.n	8001618 <isnexpkt+0x64>
 8001664:	4d02      	ldr	r5, [pc, #8]	; (8001670 <isnexpkt+0xbc>)
 8001666:	e7ce      	b.n	8001606 <isnexpkt+0x52>
 8001668:	20001748 	.word	0x20001748
 800166c:	200016b4 	.word	0x200016b4
 8001670:	20001b2c 	.word	0x20001b2c
 8001674:	200016ac 	.word	0x200016ac
 8001678:	200016c8 	.word	0x200016c8
 800167c:	20001b28 	.word	0x20001b28
 8001680:	20001b30 	.word	0x20001b30
 8001684:	080296c8 	.word	0x080296c8

08001688 <lcd_time>:

// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001688:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <lcd_time+0x7c>)
 800168a:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 800168e:	481e      	ldr	r0, [pc, #120]	; (8001708 <lcd_time+0x80>)
 8001690:	e9d2 3200 	ldrd	r3, r2, [r2]
void lcd_time() {
 8001694:	b510      	push	{r4, lr}
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001696:	185b      	adds	r3, r3, r1
void lcd_time() {
 8001698:	b084      	sub	sp, #16
	timeinfo = *localtime(&localepochtime);
 800169a:	4c1c      	ldr	r4, [pc, #112]	; (800170c <lcd_time+0x84>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 800169c:	f142 0200 	adc.w	r2, r2, #0
 80016a0:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 80016a4:	f022 f926 	bl	80238f4 <localtime>
 80016a8:	4684      	mov	ip, r0
 80016aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80016ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80016b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b6:	4623      	mov	r3, r4
 80016b8:	f8dc 4000 	ldr.w	r4, [ip]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <lcd_time+0x88>)
 80016be:	2128      	movs	r1, #40	; 0x28
	timeinfo = *localtime(&localepochtime);
 80016c0:	f843 4920 	str.w	r4, [r3], #-32
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80016c4:	4813      	ldr	r0, [pc, #76]	; (8001714 <lcd_time+0x8c>)
 80016c6:	f024 f9eb 	bl	8025aa0 <strftime>
	setlcdtext("t0.txt", buffer);
 80016ca:	4912      	ldr	r1, [pc, #72]	; (8001714 <lcd_time+0x8c>)
 80016cc:	4812      	ldr	r0, [pc, #72]	; (8001718 <lcd_time+0x90>)
 80016ce:	f7ff ff1b 	bl	8001508 <setlcdtext>

	if (gpslocked) {
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <lcd_time+0x94>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b12b      	cbz	r3, 80016e4 <lcd_time+0x5c>
		writelcdcmd("vis t3,0");	// hide warning
 80016d8:	4811      	ldr	r0, [pc, #68]	; (8001720 <lcd_time+0x98>)
	} else {
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,1");
	}
}
 80016da:	b004      	add	sp, #16
 80016dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		writelcdcmd("vis t3,0");	// hide warning
 80016e0:	f7ff bef8 	b.w	80014d4 <writelcdcmd>
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <lcd_time+0x9c>)
 80016e6:	4668      	mov	r0, sp
 80016e8:	490f      	ldr	r1, [pc, #60]	; (8001728 <lcd_time+0xa0>)
 80016ea:	7eda      	ldrb	r2, [r3, #27]
 80016ec:	f023 fbf0 	bl	8024ed0 <siprintf>
		setlcdtext("t3.txt", str);
 80016f0:	4669      	mov	r1, sp
 80016f2:	480e      	ldr	r0, [pc, #56]	; (800172c <lcd_time+0xa4>)
 80016f4:	f7ff ff08 	bl	8001508 <setlcdtext>
		writelcdcmd("vis t3,1");
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <lcd_time+0xa8>)
 80016fa:	f7ff feeb 	bl	80014d4 <writelcdcmd>
}
 80016fe:	b004      	add	sp, #16
 8001700:	bd10      	pop	{r4, pc}
 8001702:	bf00      	nop
 8001704:	20002ab0 	.word	0x20002ab0
 8001708:	20001758 	.word	0x20001758
 800170c:	20001b34 	.word	0x20001b34
 8001710:	080296cc 	.word	0x080296cc
 8001714:	20001580 	.word	0x20001580
 8001718:	080296d8 	.word	0x080296d8
 800171c:	20002da8 	.word	0x20002da8
 8001720:	080296e0 	.word	0x080296e0
 8001724:	20002bfc 	.word	0x20002bfc
 8001728:	080296ec 	.word	0x080296ec
 800172c:	080296fc 	.word	0x080296fc
 8001730:	08029704 	.word	0x08029704

08001734 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <lcd_date+0x50>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001736:	2128      	movs	r1, #40	; 0x28
	lastday = timeinfo.tm_yday;
 8001738:	4813      	ldr	r0, [pc, #76]	; (8001788 <lcd_date+0x54>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 800173a:	4a14      	ldr	r2, [pc, #80]	; (800178c <lcd_date+0x58>)
void lcd_date() {
 800173c:	b510      	push	{r4, lr}
	lastday = timeinfo.tm_yday;
 800173e:	69dc      	ldr	r4, [r3, #28]
void lcd_date() {
 8001740:	b0b2      	sub	sp, #200	; 0xc8
	lastday = timeinfo.tm_yday;
 8001742:	6004      	str	r4, [r0, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001744:	4812      	ldr	r0, [pc, #72]	; (8001790 <lcd_date+0x5c>)
 8001746:	f024 f9ab 	bl	8025aa0 <strftime>
	volatile int result = 0;
 800174a:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <lcd_date+0x5c>)
 800174e:	4a11      	ldr	r2, [pc, #68]	; (8001794 <lcd_date+0x60>)
 8001750:	4911      	ldr	r1, [pc, #68]	; (8001798 <lcd_date+0x64>)
	volatile int result = 0;
 8001752:	9001      	str	r0, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8001754:	a802      	add	r0, sp, #8
 8001756:	f023 fbbb 	bl	8024ed0 <siprintf>
	strcpy(pkt, str);
 800175a:	a902      	add	r1, sp, #8
 800175c:	a81a      	add	r0, sp, #104	; 0x68
 800175e:	f023 fc48 	bl	8024ff2 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001762:	490e      	ldr	r1, [pc, #56]	; (800179c <lcd_date+0x68>)
	if (!(lcd_txblocked))
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <lcd_date+0x6c>)
	strcpy(pkt, str);
 8001766:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8001768:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 800176a:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 800176c:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 800176e:	b933      	cbnz	r3, 800177e <lcd_date+0x4a>
		return (lcd_puts(pkt));
 8001770:	a81a      	add	r0, sp, #104	; 0x68
 8001772:	f7ff fe39 	bl	80013e8 <lcd_puts>
	result = writelcdcmd(str);
 8001776:	9001      	str	r0, [sp, #4]
	return (result);
 8001778:	9b01      	ldr	r3, [sp, #4]
	setlcdtext("t1.txt", buffer);
}
 800177a:	b032      	add	sp, #200	; 0xc8
 800177c:	bd10      	pop	{r4, pc}
		return (-1);
 800177e:	f04f 30ff 	mov.w	r0, #4294967295
 8001782:	e7f8      	b.n	8001776 <lcd_date+0x42>
 8001784:	20001b34 	.word	0x20001b34
 8001788:	200016b0 	.word	0x200016b0
 800178c:	08029710 	.word	0x08029710
 8001790:	20001580 	.word	0x20001580
 8001794:	08029720 	.word	0x08029720
 8001798:	0802969c 	.word	0x0802969c
 800179c:	08029618 	.word	0x08029618
 80017a0:	200016c4 	.word	0x200016c4

080017a4 <lcd_showvars>:

// populate the page2 vars
void lcd_showvars() {
 80017a4:	b530      	push	{r4, r5, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 80017a6:	4c62      	ldr	r4, [pc, #392]	; (8001930 <lcd_showvars+0x18c>)
void lcd_showvars() {
 80017a8:	b09f      	sub	sp, #124	; 0x7c
	switch (toggle) {
 80017aa:	8823      	ldrh	r3, [r4, #0]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d81f      	bhi.n	80017f0 <lcd_showvars+0x4c>
 80017b0:	e8df f003 	tbb	[pc, r3]
 80017b4:	02203760 	.word	0x02203760
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 80017b8:	4b5e      	ldr	r3, [pc, #376]	; (8001934 <lcd_showvars+0x190>)
 80017ba:	495f      	ldr	r1, [pc, #380]	; (8001938 <lcd_showvars+0x194>)
 80017bc:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 80017c0:	6808      	ldr	r0, [r1, #0]
 80017c2:	9204      	str	r2, [sp, #16]
 80017c4:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 80017c8:	9203      	str	r2, [sp, #12]
 80017ca:	f242 722b 	movw	r2, #10027	; 0x272b
 80017ce:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 80017d2:	230f      	movs	r3, #15
 80017d4:	e9cd 2000 	strd	r2, r0, [sp]
 80017d8:	9102      	str	r1, [sp, #8]
 80017da:	2200      	movs	r2, #0
 80017dc:	4957      	ldr	r1, [pc, #348]	; (800193c <lcd_showvars+0x198>)
 80017de:	a806      	add	r0, sp, #24
 80017e0:	f023 fb76 	bl	8024ed0 <siprintf>
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
 80017e4:	a906      	add	r1, sp, #24
 80017e6:	4856      	ldr	r0, [pc, #344]	; (8001940 <lcd_showvars+0x19c>)
 80017e8:	f7ff fe8e 	bl	8001508 <setlcdtext>
		toggle = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	8023      	strh	r3, [r4, #0]
		break;
	}
}
 80017f0:	b01f      	add	sp, #124	; 0x7c
 80017f2:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80017f4:	4d53      	ldr	r5, [pc, #332]	; (8001944 <lcd_showvars+0x1a0>)
 80017f6:	a806      	add	r0, sp, #24
 80017f8:	4953      	ldr	r1, [pc, #332]	; (8001948 <lcd_showvars+0x1a4>)
 80017fa:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80017fc:	f023 fb68 	bl	8024ed0 <siprintf>
		setlcdtext("t4.txt", str);
 8001800:	a906      	add	r1, sp, #24
 8001802:	4852      	ldr	r0, [pc, #328]	; (800194c <lcd_showvars+0x1a8>)
 8001804:	f7ff fe80 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 8001808:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800180a:	494f      	ldr	r1, [pc, #316]	; (8001948 <lcd_showvars+0x1a4>)
 800180c:	a806      	add	r0, sp, #24
 800180e:	f023 fb5f 	bl	8024ed0 <siprintf>
		setlcdtext("t5.txt", str);
 8001812:	a906      	add	r1, sp, #24
 8001814:	484e      	ldr	r0, [pc, #312]	; (8001950 <lcd_showvars+0x1ac>)
 8001816:	f7ff fe77 	bl	8001508 <setlcdtext>
		toggle = 3;
 800181a:	2303      	movs	r3, #3
 800181c:	8023      	strh	r3, [r4, #0]
}
 800181e:	b01f      	add	sp, #124	; 0x7c
 8001820:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 8001822:	4d48      	ldr	r5, [pc, #288]	; (8001944 <lcd_showvars+0x1a0>)
 8001824:	a806      	add	r0, sp, #24
 8001826:	4948      	ldr	r1, [pc, #288]	; (8001948 <lcd_showvars+0x1a4>)
 8001828:	7eea      	ldrb	r2, [r5, #27]
 800182a:	f023 fb51 	bl	8024ed0 <siprintf>
		setlcdtext("t0.txt", str);
 800182e:	a906      	add	r1, sp, #24
 8001830:	4848      	ldr	r0, [pc, #288]	; (8001954 <lcd_showvars+0x1b0>)
 8001832:	f7ff fe69 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 8001836:	6a2a      	ldr	r2, [r5, #32]
 8001838:	4943      	ldr	r1, [pc, #268]	; (8001948 <lcd_showvars+0x1a4>)
 800183a:	a806      	add	r0, sp, #24
 800183c:	f023 fb48 	bl	8024ed0 <siprintf>
		setlcdtext("t1.txt", str);
 8001840:	a906      	add	r1, sp, #24
 8001842:	4845      	ldr	r0, [pc, #276]	; (8001958 <lcd_showvars+0x1b4>)
 8001844:	f7ff fe60 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 8001848:	69ea      	ldr	r2, [r5, #28]
 800184a:	493f      	ldr	r1, [pc, #252]	; (8001948 <lcd_showvars+0x1a4>)
 800184c:	a806      	add	r0, sp, #24
 800184e:	f023 fb3f 	bl	8024ed0 <siprintf>
		setlcdtext("t2.txt", str);
 8001852:	a906      	add	r1, sp, #24
 8001854:	4841      	ldr	r0, [pc, #260]	; (800195c <lcd_showvars+0x1b8>)
 8001856:	f7ff fe57 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 800185a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800185c:	493a      	ldr	r1, [pc, #232]	; (8001948 <lcd_showvars+0x1a4>)
 800185e:	a806      	add	r0, sp, #24
 8001860:	f023 fb36 	bl	8024ed0 <siprintf>
		setlcdtext("t3.txt", str);
 8001864:	a906      	add	r1, sp, #24
 8001866:	483e      	ldr	r0, [pc, #248]	; (8001960 <lcd_showvars+0x1bc>)
 8001868:	f7ff fe4e 	bl	8001508 <setlcdtext>
		toggle = 2;
 800186c:	2302      	movs	r3, #2
 800186e:	8023      	strh	r3, [r4, #0]
}
 8001870:	b01f      	add	sp, #124	; 0x7c
 8001872:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8001874:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <lcd_showvars+0x1c0>)
 8001876:	a806      	add	r0, sp, #24
		sprintf(str, "%d", statuspkt.uid);
 8001878:	4d32      	ldr	r5, [pc, #200]	; (8001944 <lcd_showvars+0x1a0>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	0e11      	lsrs	r1, r2, #24
 800187e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8001882:	e9cd 3100 	strd	r3, r1, [sp]
 8001886:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800188a:	4937      	ldr	r1, [pc, #220]	; (8001968 <lcd_showvars+0x1c4>)
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	f023 fb1f 	bl	8024ed0 <siprintf>
		setlcdtext("t11.txt", str);
 8001892:	a906      	add	r1, sp, #24
 8001894:	4835      	ldr	r0, [pc, #212]	; (800196c <lcd_showvars+0x1c8>)
 8001896:	f7ff fe37 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", statuspkt.uid);
 800189a:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
 800189e:	492a      	ldr	r1, [pc, #168]	; (8001948 <lcd_showvars+0x1a4>)
 80018a0:	a806      	add	r0, sp, #24
 80018a2:	b292      	uxth	r2, r2
 80018a4:	f023 fb14 	bl	8024ed0 <siprintf>
		setlcdtext("t10.txt", str);
 80018a8:	a906      	add	r1, sp, #24
 80018aa:	4831      	ldr	r0, [pc, #196]	; (8001970 <lcd_showvars+0x1cc>)
 80018ac:	f7ff fe2c 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcpktssent);
 80018b0:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 80018b4:	4924      	ldr	r1, [pc, #144]	; (8001948 <lcd_showvars+0x1a4>)
 80018b6:	a806      	add	r0, sp, #24
 80018b8:	b292      	uxth	r2, r2
 80018ba:	f023 fb09 	bl	8024ed0 <siprintf>
		setlcdtext("t9.txt", str);
 80018be:	a906      	add	r1, sp, #24
 80018c0:	482c      	ldr	r0, [pc, #176]	; (8001974 <lcd_showvars+0x1d0>)
 80018c2:	f7ff fe21 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <lcd_showvars+0x1d4>)
 80018c8:	491f      	ldr	r1, [pc, #124]	; (8001948 <lcd_showvars+0x1a4>)
 80018ca:	a806      	add	r0, sp, #24
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80018d2:	f023 fafd 	bl	8024ed0 <siprintf>
		setlcdtext("t8.txt", str);
 80018d6:	a906      	add	r1, sp, #24
 80018d8:	4828      	ldr	r0, [pc, #160]	; (800197c <lcd_showvars+0x1d8>)
 80018da:	f7ff fe15 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80018de:	4b28      	ldr	r3, [pc, #160]	; (8001980 <lcd_showvars+0x1dc>)
 80018e0:	4919      	ldr	r1, [pc, #100]	; (8001948 <lcd_showvars+0x1a4>)
 80018e2:	a806      	add	r0, sp, #24
 80018e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	bfb8      	it	lt
 80018ec:	4252      	neglt	r2, r2
 80018ee:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80018f2:	f023 faed 	bl	8024ed0 <siprintf>
		setlcdtext("t7.txt", str);
 80018f6:	a906      	add	r1, sp, #24
 80018f8:	4822      	ldr	r0, [pc, #136]	; (8001984 <lcd_showvars+0x1e0>)
 80018fa:	f7ff fe05 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", pgagain);	// gain
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <lcd_showvars+0x1e4>)
 8001900:	4911      	ldr	r1, [pc, #68]	; (8001948 <lcd_showvars+0x1a4>)
 8001902:	a806      	add	r0, sp, #24
 8001904:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001908:	f023 fae2 	bl	8024ed0 <siprintf>
		setlcdtext("t6.txt", str);
 800190c:	a906      	add	r1, sp, #24
 800190e:	481f      	ldr	r0, [pc, #124]	; (800198c <lcd_showvars+0x1e8>)
 8001910:	f7ff fdfa 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 8001914:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8001916:	490c      	ldr	r1, [pc, #48]	; (8001948 <lcd_showvars+0x1a4>)
 8001918:	a806      	add	r0, sp, #24
 800191a:	f023 fad9 	bl	8024ed0 <siprintf>
		setlcdtext("t24.txt", str);
 800191e:	a906      	add	r1, sp, #24
 8001920:	481b      	ldr	r0, [pc, #108]	; (8001990 <lcd_showvars+0x1ec>)
 8001922:	f7ff fdf1 	bl	8001508 <setlcdtext>
		toggle = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	8023      	strh	r3, [r4, #0]
}
 800192a:	b01f      	add	sp, #124	; 0x7c
 800192c:	bd30      	pop	{r4, r5, pc}
 800192e:	bf00      	nop
 8001930:	20001b58 	.word	0x20001b58
 8001934:	1ff0f000 	.word	0x1ff0f000
 8001938:	20001d4c 	.word	0x20001d4c
 800193c:	08029788 	.word	0x08029788
 8001940:	080297b4 	.word	0x080297b4
 8001944:	20002bfc 	.word	0x20002bfc
 8001948:	080297ec 	.word	0x080297ec
 800194c:	08029778 	.word	0x08029778
 8001950:	08029780 	.word	0x08029780
 8001954:	080296d8 	.word	0x080296d8
 8001958:	08029720 	.word	0x08029720
 800195c:	08029770 	.word	0x08029770
 8001960:	080296fc 	.word	0x080296fc
 8001964:	200029fc 	.word	0x200029fc
 8001968:	08029728 	.word	0x08029728
 800196c:	08029738 	.word	0x08029738
 8001970:	08029740 	.word	0x08029740
 8001974:	08029748 	.word	0x08029748
 8001978:	200006f4 	.word	0x200006f4
 800197c:	08029750 	.word	0x08029750
 8001980:	20000748 	.word	0x20000748
 8001984:	08029758 	.word	0x08029758
 8001988:	20002d30 	.word	0x20002d30
 800198c:	08029760 	.word	0x08029760
 8001990:	08029768 	.word	0x08029768

08001994 <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 8001994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	trigvec[i] = i % 120;
}
#endif

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Triggers");
 8001998:	4931      	ldr	r1, [pc, #196]	; (8001a60 <lcd_trigcharts+0xcc>)
void lcd_trigcharts() {
 800199a:	b089      	sub	sp, #36	; 0x24
	setlcdtext("t3.txt", "Triggers");
 800199c:	4831      	ldr	r0, [pc, #196]	; (8001a64 <lcd_trigcharts+0xd0>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 800199e:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Triggers");
 80019a2:	f7ff fdb1 	bl	8001508 <setlcdtext>
	setlcdtext("t18.txt", "Triggers");
 80019a6:	492e      	ldr	r1, [pc, #184]	; (8001a60 <lcd_trigcharts+0xcc>)
 80019a8:	482f      	ldr	r0, [pc, #188]	; (8001a68 <lcd_trigcharts+0xd4>)
 80019aa:	f7ff fdad 	bl	8001508 <setlcdtext>
	setlcdtext("t4.txt", "Noise");
 80019ae:	492f      	ldr	r1, [pc, #188]	; (8001a6c <lcd_trigcharts+0xd8>)
 80019b0:	482f      	ldr	r0, [pc, #188]	; (8001a70 <lcd_trigcharts+0xdc>)
 80019b2:	f7ff fda9 	bl	8001508 <setlcdtext>
	setlcdtext("t1.txt", "Noise");
 80019b6:	492d      	ldr	r1, [pc, #180]	; (8001a6c <lcd_trigcharts+0xd8>)
 80019b8:	482e      	ldr	r0, [pc, #184]	; (8001a74 <lcd_trigcharts+0xe0>)
 80019ba:	f7ff fda5 	bl	8001508 <setlcdtext>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <lcd_trigcharts+0xe4>)
 80019c0:	492e      	ldr	r1, [pc, #184]	; (8001a7c <lcd_trigcharts+0xe8>)
 80019c2:	4668      	mov	r0, sp
 80019c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019c6:	f023 fa83 	bl	8024ed0 <siprintf>
	setlcdtext("t0.txt", str);
 80019ca:	4669      	mov	r1, sp
 80019cc:	482c      	ldr	r0, [pc, #176]	; (8001a80 <lcd_trigcharts+0xec>)
 80019ce:	f7ff fd9b 	bl	8001508 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80019d2:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <lcd_trigcharts+0xf0>)
 80019d4:	4929      	ldr	r1, [pc, #164]	; (8001a7c <lcd_trigcharts+0xe8>)
 80019d6:	4668      	mov	r0, sp
 80019d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019dc:	4f2a      	ldr	r7, [pc, #168]	; (8001a88 <lcd_trigcharts+0xf4>)
 80019de:	2a00      	cmp	r2, #0
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 80019e0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001aa4 <lcd_trigcharts+0x110>
 80019e4:	4e29      	ldr	r6, [pc, #164]	; (8001a8c <lcd_trigcharts+0xf8>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80019e6:	bfb8      	it	lt
 80019e8:	4252      	neglt	r2, r2
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 80019ea:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001aa8 <lcd_trigcharts+0x114>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80019ee:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80019f2:	f023 fa6d 	bl	8024ed0 <siprintf>
	setlcdtext("t2.txt", str);
 80019f6:	4669      	mov	r1, sp
 80019f8:	4825      	ldr	r0, [pc, #148]	; (8001a90 <lcd_trigcharts+0xfc>)
 80019fa:	f7ff fd85 	bl	8001508 <setlcdtext>
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 80019fe:	4825      	ldr	r0, [pc, #148]	; (8001a94 <lcd_trigcharts+0x100>)
 8001a00:	f7ff fd68 	bl	80014d4 <writelcdcmd>
	buffi = trigindex;
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <lcd_trigcharts+0x104>)
 8001a06:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8001a08:	e01c      	b.n	8001a44 <lcd_trigcharts+0xb0>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001a0a:	f819 2004 	ldrb.w	r2, [r9, r4]
 8001a0e:	f023 fa5f 	bl	8024ed0 <siprintf>
		writelcdcmd(str);
 8001a12:	4668      	mov	r0, sp
 8001a14:	f7ff fd5e 	bl	80014d4 <writelcdcmd>
		osDelay(15);
 8001a18:	200f      	movs	r0, #15
 8001a1a:	f013 f8f3 	bl	8014c04 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8001a1e:	f818 2004 	ldrb.w	r2, [r8, r4]
 8001a22:	491e      	ldr	r1, [pc, #120]	; (8001a9c <lcd_trigcharts+0x108>)
 8001a24:	4668      	mov	r0, sp
 8001a26:	f023 fa53 	bl	8024ed0 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8001a2a:	3401      	adds	r4, #1
		writelcdcmd(str);
 8001a2c:	4668      	mov	r0, sp
 8001a2e:	f7ff fd51 	bl	80014d4 <writelcdcmd>
		osDelay(15);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f013 f8e6 	bl	8014c04 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8001a38:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8001a3c:	bfc8      	it	gt
 8001a3e:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8001a40:	3d01      	subs	r5, #1
 8001a42:	d007      	beq.n	8001a54 <lcd_trigcharts+0xc0>
		if (our_currentpage != 2)		// impatient user
 8001a44:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001a46:	4631      	mov	r1, r6
 8001a48:	4668      	mov	r0, sp
		if (our_currentpage != 2)		// impatient user
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d0dd      	beq.n	8001a0a <lcd_trigcharts+0x76>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8001a4e:	b009      	add	sp, #36	; 0x24
 8001a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8001a54:	4812      	ldr	r0, [pc, #72]	; (8001aa0 <lcd_trigcharts+0x10c>)
 8001a56:	f7ff fd3d 	bl	80014d4 <writelcdcmd>
}
 8001a5a:	b009      	add	sp, #36	; 0x24
 8001a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a60:	080297bc 	.word	0x080297bc
 8001a64:	080296fc 	.word	0x080296fc
 8001a68:	080297c8 	.word	0x080297c8
 8001a6c:	080297d0 	.word	0x080297d0
 8001a70:	08029778 	.word	0x08029778
 8001a74:	08029720 	.word	0x08029720
 8001a78:	20002bfc 	.word	0x20002bfc
 8001a7c:	080297ec 	.word	0x080297ec
 8001a80:	080296d8 	.word	0x080296d8
 8001a84:	20000748 	.word	0x20000748
 8001a88:	20001940 	.word	0x20001940
 8001a8c:	080297e4 	.word	0x080297e4
 8001a90:	08029770 	.word	0x08029770
 8001a94:	080297d8 	.word	0x080297d8
 8001a98:	20001b5c 	.word	0x20001b5c
 8001a9c:	080297f0 	.word	0x080297f0
 8001aa0:	080297fc 	.word	0x080297fc
 8001aa4:	20001b60 	.word	0x20001b60
 8001aa8:	20001760 	.word	0x20001760

08001aac <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
void lcd_trigplot() {
 8001aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001ab0:	493a      	ldr	r1, [pc, #232]	; (8001b9c <lcd_trigplot+0xf0>)
void lcd_trigplot() {
 8001ab2:	b088      	sub	sp, #32
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001ab4:	4d3a      	ldr	r5, [pc, #232]	; (8001ba0 <lcd_trigplot+0xf4>)
 8001ab6:	680b      	ldr	r3, [r1, #0]
 8001ab8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 8001aba:	4e3a      	ldr	r6, [pc, #232]	; (8001ba4 <lcd_trigplot+0xf8>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001abc:	1ad2      	subs	r2, r2, r3

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001abe:	483a      	ldr	r0, [pc, #232]	; (8001ba8 <lcd_trigplot+0xfc>)
	val = abs(meanwindiff) & 0xfff;
 8001ac0:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = val * 32;		// scale up: n pixels per trigger
 8001ac4:	0152      	lsls	r2, r2, #5
	lasttrig = statuspkt.trigcount;
 8001ac6:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
	trigvec[trigindex] = val;
 8001aca:	4c38      	ldr	r4, [pc, #224]	; (8001bac <lcd_trigplot+0x100>)
 8001acc:	2a77      	cmp	r2, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001ace:	7800      	ldrb	r0, [r0, #0]
	trigvec[trigindex] = val;
 8001ad0:	4f37      	ldr	r7, [pc, #220]	; (8001bb0 <lcd_trigplot+0x104>)
 8001ad2:	bfa8      	it	ge
 8001ad4:	2277      	movge	r2, #119	; 0x77
	val = abs(meanwindiff) & 0xfff;
 8001ad6:	2b00      	cmp	r3, #0
	noisevec[trigindex] = val;
 8001ad8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001be8 <lcd_trigplot+0x13c>
	val = abs(meanwindiff) & 0xfff;
 8001adc:	bfb8      	it	lt
 8001ade:	425b      	neglt	r3, r3
	lasttrig = statuspkt.trigcount;
 8001ae0:	f8c1 c000 	str.w	ip, [r1]
	trigvec[trigindex] = val;
 8001ae4:	6821      	ldr	r1, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8001ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8001aea:	547a      	strb	r2, [r7, r1]
	noisevec[trigindex] = val;
 8001aec:	2b77      	cmp	r3, #119	; 0x77
 8001aee:	bfa8      	it	ge
 8001af0:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001af2:	2802      	cmp	r0, #2
	noisevec[trigindex] = val;
 8001af4:	f808 3001 	strb.w	r3, [r8, r1]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001af8:	d00c      	beq.n	8001b14 <lcd_trigplot+0x68>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8001afa:	3101      	adds	r1, #1
	if (trigindex >= LCDXPIXELS)
 8001afc:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8001b00:	da03      	bge.n	8001b0a <lcd_trigplot+0x5e>
	trigindex++;
 8001b02:	6021      	str	r1, [r4, #0]
		trigindex = 0;
}
 8001b04:	b008      	add	sp, #32
 8001b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		trigindex = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	6023      	str	r3, [r4, #0]
}
 8001b0e:	b008      	add	sp, #32
 8001b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		setlcdtext("t3.txt", "Triggers");
 8001b14:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <lcd_trigplot+0x108>)
 8001b16:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <lcd_trigplot+0x10c>)
 8001b18:	f7ff fcf6 	bl	8001508 <setlcdtext>
		setlcdtext("t18.txt", "Triggers");
 8001b1c:	4925      	ldr	r1, [pc, #148]	; (8001bb4 <lcd_trigplot+0x108>)
 8001b1e:	4827      	ldr	r0, [pc, #156]	; (8001bbc <lcd_trigplot+0x110>)
 8001b20:	f7ff fcf2 	bl	8001508 <setlcdtext>
		setlcdtext("t4.txt", "Noise");
 8001b24:	4926      	ldr	r1, [pc, #152]	; (8001bc0 <lcd_trigplot+0x114>)
 8001b26:	4827      	ldr	r0, [pc, #156]	; (8001bc4 <lcd_trigplot+0x118>)
 8001b28:	f7ff fcee 	bl	8001508 <setlcdtext>
		setlcdtext("t1.txt", "Noise");
 8001b2c:	4924      	ldr	r1, [pc, #144]	; (8001bc0 <lcd_trigplot+0x114>)
 8001b2e:	4826      	ldr	r0, [pc, #152]	; (8001bc8 <lcd_trigplot+0x11c>)
 8001b30:	f7ff fcea 	bl	8001508 <setlcdtext>
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	4925      	ldr	r1, [pc, #148]	; (8001bcc <lcd_trigplot+0x120>)
 8001b38:	4668      	mov	r0, sp
 8001b3a:	5cfa      	ldrb	r2, [r7, r3]
 8001b3c:	f023 f9c8 	bl	8024ed0 <siprintf>
		writelcdcmd(str);
 8001b40:	4668      	mov	r0, sp
 8001b42:	f7ff fcc7 	bl	80014d4 <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	4921      	ldr	r1, [pc, #132]	; (8001bd0 <lcd_trigplot+0x124>)
 8001b4a:	4668      	mov	r0, sp
 8001b4c:	f818 2003 	ldrb.w	r2, [r8, r3]
 8001b50:	f023 f9be 	bl	8024ed0 <siprintf>
		writelcdcmd(str);
 8001b54:	4668      	mov	r0, sp
 8001b56:	f7ff fcbd 	bl	80014d4 <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8001b5a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001b5c:	491d      	ldr	r1, [pc, #116]	; (8001bd4 <lcd_trigplot+0x128>)
 8001b5e:	4668      	mov	r0, sp
 8001b60:	f023 f9b6 	bl	8024ed0 <siprintf>
		setlcdtext("t0.txt", str);
 8001b64:	4669      	mov	r1, sp
 8001b66:	481c      	ldr	r0, [pc, #112]	; (8001bd8 <lcd_trigplot+0x12c>)
 8001b68:	f7ff fcce 	bl	8001508 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001b6c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8001b70:	4918      	ldr	r1, [pc, #96]	; (8001bd4 <lcd_trigplot+0x128>)
 8001b72:	4668      	mov	r0, sp
 8001b74:	2a00      	cmp	r2, #0
 8001b76:	bfb8      	it	lt
 8001b78:	4252      	neglt	r2, r2
 8001b7a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b7e:	f023 f9a7 	bl	8024ed0 <siprintf>
		setlcdtext("t2.txt", str);
 8001b82:	4669      	mov	r1, sp
 8001b84:	4815      	ldr	r0, [pc, #84]	; (8001bdc <lcd_trigplot+0x130>)
 8001b86:	f7ff fcbf 	bl	8001508 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001b8a:	4815      	ldr	r0, [pc, #84]	; (8001be0 <lcd_trigplot+0x134>)
 8001b8c:	f7ff fca2 	bl	80014d4 <writelcdcmd>
		writelcdcmd("vis t4,1");
 8001b90:	4814      	ldr	r0, [pc, #80]	; (8001be4 <lcd_trigplot+0x138>)
 8001b92:	f7ff fc9f 	bl	80014d4 <writelcdcmd>
	trigindex++;
 8001b96:	6821      	ldr	r1, [r4, #0]
 8001b98:	e7af      	b.n	8001afa <lcd_trigplot+0x4e>
 8001b9a:	bf00      	nop
 8001b9c:	200016b8 	.word	0x200016b8
 8001ba0:	20002bfc 	.word	0x20002bfc
 8001ba4:	20000748 	.word	0x20000748
 8001ba8:	20001940 	.word	0x20001940
 8001bac:	20001b5c 	.word	0x20001b5c
 8001bb0:	20001b60 	.word	0x20001b60
 8001bb4:	080297bc 	.word	0x080297bc
 8001bb8:	080296fc 	.word	0x080296fc
 8001bbc:	080297c8 	.word	0x080297c8
 8001bc0:	080297d0 	.word	0x080297d0
 8001bc4:	08029778 	.word	0x08029778
 8001bc8:	08029720 	.word	0x08029720
 8001bcc:	080297e4 	.word	0x080297e4
 8001bd0:	080297f0 	.word	0x080297f0
 8001bd4:	080297ec 	.word	0x080297ec
 8001bd8:	080296d8 	.word	0x080296d8
 8001bdc:	08029770 	.word	0x08029770
 8001be0:	08029704 	.word	0x08029704
 8001be4:	0802980c 	.word	0x0802980c
 8001be8:	20001760 	.word	0x20001760

08001bec <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8001bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, buffi;
	unsigned char str[32];

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Pressure");
 8001bf0:	4920      	ldr	r1, [pc, #128]	; (8001c74 <lcd_presscharts+0x88>)
void lcd_presscharts() {
 8001bf2:	b088      	sub	sp, #32
	setlcdtext("t3.txt", "Pressure");
 8001bf4:	4820      	ldr	r0, [pc, #128]	; (8001c78 <lcd_presscharts+0x8c>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8001bf6:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Pressure");
 8001bfa:	f7ff fc85 	bl	8001508 <setlcdtext>
	setlcdtext("t18.txt", "Pressure");
 8001bfe:	491d      	ldr	r1, [pc, #116]	; (8001c74 <lcd_presscharts+0x88>)
 8001c00:	481e      	ldr	r0, [pc, #120]	; (8001c7c <lcd_presscharts+0x90>)
 8001c02:	f7ff fc81 	bl	8001508 <setlcdtext>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <lcd_presscharts+0x94>)
 8001c08:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <lcd_presscharts+0x98>)
 8001c0a:	4668      	mov	r0, sp
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	491d      	ldr	r1, [pc, #116]	; (8001c88 <lcd_presscharts+0x9c>)
 8001c14:	f023 f95c 	bl	8024ed0 <siprintf>
	setlcdtext("t0.txt", str);
 8001c18:	4669      	mov	r1, sp
 8001c1a:	481c      	ldr	r0, [pc, #112]	; (8001c8c <lcd_presscharts+0xa0>)
 8001c1c:	f7ff fc74 	bl	8001508 <setlcdtext>
	writelcdcmd("b2.bco=123");		// normal grey
 8001c20:	481b      	ldr	r0, [pc, #108]	; (8001c90 <lcd_presscharts+0xa4>)
 8001c22:	f7ff fc57 	bl	80014d4 <writelcdcmd>
	buffi = pressindex;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <lcd_presscharts+0xa8>)
 8001c28:	4f1b      	ldr	r7, [pc, #108]	; (8001c98 <lcd_presscharts+0xac>)
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001c2a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001ca4 <lcd_presscharts+0xb8>
	buffi = pressindex;
 8001c2e:	681c      	ldr	r4, [r3, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001c30:	4e1a      	ldr	r6, [pc, #104]	; (8001c9c <lcd_presscharts+0xb0>)
 8001c32:	e010      	b.n	8001c56 <lcd_presscharts+0x6a>
 8001c34:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8001c38:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001c3a:	f023 f949 	bl	8024ed0 <siprintf>
		writelcdcmd(str);
 8001c3e:	4668      	mov	r0, sp
 8001c40:	f7ff fc48 	bl	80014d4 <writelcdcmd>
		osDelay(15);
 8001c44:	200f      	movs	r0, #15
 8001c46:	f012 ffdd 	bl	8014c04 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8001c4a:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8001c4e:	bfc8      	it	gt
 8001c50:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8001c52:	3d01      	subs	r5, #1
 8001c54:	d007      	beq.n	8001c66 <lcd_presscharts+0x7a>
		if (our_currentpage != 3)		// impatient user
 8001c56:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001c58:	4631      	mov	r1, r6
 8001c5a:	4668      	mov	r0, sp
		if (our_currentpage != 3)		// impatient user
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d0e9      	beq.n	8001c34 <lcd_presscharts+0x48>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8001c60:	b008      	add	sp, #32
 8001c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8001c66:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <lcd_presscharts+0xb4>)
 8001c68:	f7ff fc34 	bl	80014d4 <writelcdcmd>
}
 8001c6c:	b008      	add	sp, #32
 8001c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c72:	bf00      	nop
 8001c74:	08029818 	.word	0x08029818
 8001c78:	080296fc 	.word	0x080296fc
 8001c7c:	080297c8 	.word	0x080297c8
 8001c80:	20002d34 	.word	0x20002d34
 8001c84:	20002d38 	.word	0x20002d38
 8001c88:	08029824 	.word	0x08029824
 8001c8c:	080296d8 	.word	0x080296d8
 8001c90:	080297d8 	.word	0x080297d8
 8001c94:	20001944 	.word	0x20001944
 8001c98:	20001940 	.word	0x20001940
 8001c9c:	080297e4 	.word	0x080297e4
 8001ca0:	080297fc 	.word	0x080297fc
 8001ca4:	20001948 	.word	0x20001948

08001ca8 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
void lcd_pressplot() {
 8001ca8:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8001caa:	4d2c      	ldr	r5, [pc, #176]	; (8001d5c <lcd_pressplot+0xb4>)
void lcd_pressplot() {
 8001cac:	b08c      	sub	sp, #48	; 0x30
	p = pressure;
 8001cae:	4c2c      	ldr	r4, [pc, #176]	; (8001d60 <lcd_pressplot+0xb8>)

	p = pressure * 1000 + pf;
 8001cb0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 8001cb4:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 8001cb6:	6821      	ldr	r1, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001cb8:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 8001cba:	482a      	ldr	r0, [pc, #168]	; (8001d64 <lcd_pressplot+0xbc>)
	p = pressure;
 8001cbc:	9101      	str	r1, [sp, #4]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001cbe:	9202      	str	r2, [sp, #8]
	p = pressure * 1000 + pf;
 8001cc0:	9b02      	ldr	r3, [sp, #8]
 8001cc2:	fb06 3301 	mla	r3, r6, r1, r3
 8001cc6:	9301      	str	r3, [sp, #4]
	if (p < 93000)
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	4283      	cmp	r3, r0
 8001ccc:	dc01      	bgt.n	8001cd2 <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <lcd_pressplot+0xc0>)
 8001cd0:	9301      	str	r3, [sp, #4]
	if (p > 103000)
 8001cd2:	9a01      	ldr	r2, [sp, #4]
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <lcd_pressplot+0xc4>)
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dd00      	ble.n	8001cdc <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8001cda:	9b01      	ldr	r3, [sp, #4]

	p = p - 93000;
 8001cdc:	9901      	ldr	r1, [sp, #4]
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <lcd_pressplot+0xc8>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8001ce0:	4a24      	ldr	r2, [pc, #144]	; (8001d74 <lcd_pressplot+0xcc>)
	p = p - 93000;
 8001ce2:	440b      	add	r3, r1
 8001ce4:	9301      	str	r3, [sp, #4]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8001ce6:	9b01      	ldr	r3, [sp, #4]
 8001ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cec:	17db      	asrs	r3, r3, #31
 8001cee:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8001cf2:	9303      	str	r3, [sp, #12]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8001cf4:	9b03      	ldr	r3, [sp, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	da01      	bge.n	8001cfe <lcd_pressplot+0x56>
		val = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9303      	str	r3, [sp, #12]
	if (val >= 240)
 8001cfe:	9b03      	ldr	r3, [sp, #12]
 8001d00:	2bef      	cmp	r3, #239	; 0xef
 8001d02:	dd01      	ble.n	8001d08 <lcd_pressplot+0x60>
		val = 239;		// max Y
 8001d04:	23ef      	movs	r3, #239	; 0xef
 8001d06:	9303      	str	r3, [sp, #12]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001d08:	491b      	ldr	r1, [pc, #108]	; (8001d78 <lcd_pressplot+0xd0>)
	pressvec[pressindex] = val;
 8001d0a:	9a03      	ldr	r2, [sp, #12]
 8001d0c:	4e1b      	ldr	r6, [pc, #108]	; (8001d7c <lcd_pressplot+0xd4>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001d0e:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8001d10:	6833      	ldr	r3, [r6, #0]
 8001d12:	481b      	ldr	r0, [pc, #108]	; (8001d80 <lcd_pressplot+0xd8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001d14:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8001d16:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001d18:	d007      	beq.n	8001d2a <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8001d1a:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8001d1c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8001d20:	bfa8      	it	ge
 8001d22:	2300      	movge	r3, #0
 8001d24:	6033      	str	r3, [r6, #0]
}
 8001d26:	b00c      	add	sp, #48	; 0x30
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	4915      	ldr	r1, [pc, #84]	; (8001d84 <lcd_pressplot+0xdc>)
 8001d2e:	a804      	add	r0, sp, #16
 8001d30:	f023 f8ce 	bl	8024ed0 <siprintf>
		writelcdcmd(str);
 8001d34:	a804      	add	r0, sp, #16
 8001d36:	f7ff fbcd 	bl	80014d4 <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8001d3a:	682b      	ldr	r3, [r5, #0]
 8001d3c:	6822      	ldr	r2, [r4, #0]
 8001d3e:	a804      	add	r0, sp, #16
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	4911      	ldr	r1, [pc, #68]	; (8001d88 <lcd_pressplot+0xe0>)
 8001d44:	f023 f8c4 	bl	8024ed0 <siprintf>
		setlcdtext("t0.txt", str);
 8001d48:	a904      	add	r1, sp, #16
 8001d4a:	4810      	ldr	r0, [pc, #64]	; (8001d8c <lcd_pressplot+0xe4>)
 8001d4c:	f7ff fbdc 	bl	8001508 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001d50:	480f      	ldr	r0, [pc, #60]	; (8001d90 <lcd_pressplot+0xe8>)
 8001d52:	f7ff fbbf 	bl	80014d4 <writelcdcmd>
	pressindex++;
 8001d56:	6833      	ldr	r3, [r6, #0]
 8001d58:	e7df      	b.n	8001d1a <lcd_pressplot+0x72>
 8001d5a:	bf00      	nop
 8001d5c:	20002d34 	.word	0x20002d34
 8001d60:	20002d38 	.word	0x20002d38
 8001d64:	00016b47 	.word	0x00016b47
 8001d68:	00016b48 	.word	0x00016b48
 8001d6c:	00019258 	.word	0x00019258
 8001d70:	fffe94b8 	.word	0xfffe94b8
 8001d74:	63e7063f 	.word	0x63e7063f
 8001d78:	20001940 	.word	0x20001940
 8001d7c:	20001944 	.word	0x20001944
 8001d80:	20001948 	.word	0x20001948
 8001d84:	080297e4 	.word	0x080297e4
 8001d88:	08029824 	.word	0x08029824
 8001d8c:	080296d8 	.word	0x080296d8
 8001d90:	08029704 	.word	0x08029704

08001d94 <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 8001d94:	b500      	push	{lr}
	unsigned char str[48];

	osDelay(100);
 8001d96:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 8001d98:	b08d      	sub	sp, #52	; 0x34
	osDelay(100);
 8001d9a:	f012 ff33 	bl	8014c04 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <lcd_controls+0x48>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d002      	beq.n	8001dac <lcd_controls+0x18>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 8001da6:	b00d      	add	sp, #52	; 0x34
 8001da8:	f85d fb04 	ldr.w	pc, [sp], #4
		setlcdtext("t0.txt", "Sound");
 8001dac:	490c      	ldr	r1, [pc, #48]	; (8001de0 <lcd_controls+0x4c>)
 8001dae:	480d      	ldr	r0, [pc, #52]	; (8001de4 <lcd_controls+0x50>)
 8001db0:	f7ff fbaa 	bl	8001508 <setlcdtext>
		setlcdtext("t1.txt", "LEDS");
 8001db4:	490c      	ldr	r1, [pc, #48]	; (8001de8 <lcd_controls+0x54>)
 8001db6:	480d      	ldr	r0, [pc, #52]	; (8001dec <lcd_controls+0x58>)
 8001db8:	f7ff fba6 	bl	8001508 <setlcdtext>
		setlcdtext("t2.txt", "LCD Brightness");
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <lcd_controls+0x5c>)
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <lcd_controls+0x60>)
 8001dc0:	f7ff fba2 	bl	8001508 <setlcdtext>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <lcd_controls+0x64>)
 8001dc6:	490d      	ldr	r1, [pc, #52]	; (8001dfc <lcd_controls+0x68>)
 8001dc8:	4668      	mov	r0, sp
 8001dca:	f023 f881 	bl	8024ed0 <siprintf>
		setlcdtext("t3.txt", str);
 8001dce:	4669      	mov	r1, sp
 8001dd0:	480b      	ldr	r0, [pc, #44]	; (8001e00 <lcd_controls+0x6c>)
 8001dd2:	f7ff fb99 	bl	8001508 <setlcdtext>
}
 8001dd6:	b00d      	add	sp, #52	; 0x34
 8001dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ddc:	20001940 	.word	0x20001940
 8001de0:	08029830 	.word	0x08029830
 8001de4:	080296d8 	.word	0x080296d8
 8001de8:	08029838 	.word	0x08029838
 8001dec:	08029720 	.word	0x08029720
 8001df0:	08029840 	.word	0x08029840
 8001df4:	08029770 	.word	0x08029770
 8001df8:	20002e10 	.word	0x20002e10
 8001dfc:	08029850 	.word	0x08029850
 8001e00:	080296fc 	.word	0x080296fc

08001e04 <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 8001e04:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 8001e06:	4c1b      	ldr	r4, [pc, #108]	; (8001e74 <lcd_pagechange+0x70>)
 8001e08:	7823      	ldrb	r3, [r4, #0]
 8001e0a:	4283      	cmp	r3, r0
 8001e0c:	d016      	beq.n	8001e3c <lcd_pagechange+0x38>
	our_currentpage = newpage;
 8001e0e:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8001e10:	2805      	cmp	r0, #5
 8001e12:	d82a      	bhi.n	8001e6a <lcd_pagechange+0x66>
 8001e14:	e8df f000 	tbb	[pc, r0]
 8001e18:	241f1a03 	.word	0x241f1a03
 8001e1c:	1215      	.short	0x1215
		lcd_time();
 8001e1e:	f7ff fc33 	bl	8001688 <lcd_time>
	lastday = timeinfo.tm_yday;
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <lcd_pagechange+0x74>)
 8001e24:	4915      	ldr	r1, [pc, #84]	; (8001e7c <lcd_pagechange+0x78>)
 8001e26:	69d8      	ldr	r0, [r3, #28]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001e28:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <lcd_pagechange+0x7c>)
	lastday = timeinfo.tm_yday;
 8001e2a:	6008      	str	r0, [r1, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001e2c:	2128      	movs	r1, #40	; 0x28
 8001e2e:	4815      	ldr	r0, [pc, #84]	; (8001e84 <lcd_pagechange+0x80>)
 8001e30:	f023 fe36 	bl	8025aa0 <strftime>
	setlcdtext("t1.txt", buffer);
 8001e34:	4913      	ldr	r1, [pc, #76]	; (8001e84 <lcd_pagechange+0x80>)
 8001e36:	4814      	ldr	r0, [pc, #80]	; (8001e88 <lcd_pagechange+0x84>)
 8001e38:	f7ff fb66 	bl	8001508 <setlcdtext>
	return (our_currentpage);
 8001e3c:	7820      	ldrb	r0, [r4, #0]
 8001e3e:	b2c0      	uxtb	r0, r0
}
 8001e40:	bd10      	pop	{r4, pc}
		lcd_controls();
 8001e42:	f7ff ffa7 	bl	8001d94 <lcd_controls>
	return (our_currentpage);
 8001e46:	7820      	ldrb	r0, [r4, #0]
 8001e48:	b2c0      	uxtb	r0, r0
}
 8001e4a:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 8001e4c:	f7ff fcaa 	bl	80017a4 <lcd_showvars>
	return (our_currentpage);
 8001e50:	7820      	ldrb	r0, [r4, #0]
 8001e52:	b2c0      	uxtb	r0, r0
}
 8001e54:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 8001e56:	f7ff fd9d 	bl	8001994 <lcd_trigcharts>
	return (our_currentpage);
 8001e5a:	7820      	ldrb	r0, [r4, #0]
 8001e5c:	b2c0      	uxtb	r0, r0
}
 8001e5e:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8001e60:	f7ff fec4 	bl	8001bec <lcd_presscharts>
	return (our_currentpage);
 8001e64:	7820      	ldrb	r0, [r4, #0]
 8001e66:	b2c0      	uxtb	r0, r0
}
 8001e68:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8001e6a:	4808      	ldr	r0, [pc, #32]	; (8001e8c <lcd_pagechange+0x88>)
 8001e6c:	f022 feda 	bl	8024c24 <puts>
		break;
 8001e70:	e7e4      	b.n	8001e3c <lcd_pagechange+0x38>
 8001e72:	bf00      	nop
 8001e74:	20001940 	.word	0x20001940
 8001e78:	20001b34 	.word	0x20001b34
 8001e7c:	200016b0 	.word	0x200016b0
 8001e80:	08029710 	.word	0x08029710
 8001e84:	20001580 	.word	0x20001580
 8001e88:	08029720 	.word	0x08029720
 8001e8c:	08029868 	.word	0x08029868

08001e90 <lcd_event_process>:
int lcd_event_process(void) {
 8001e90:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001e92:	4c8f      	ldr	r4, [pc, #572]	; (80020d0 <lcd_event_process+0x240>)
int lcd_event_process(void) {
 8001e94:	b083      	sub	sp, #12
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001e96:	2120      	movs	r1, #32
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff fb8b 	bl	80015b4 <isnexpkt>
 8001e9e:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8001ea0:	9b01      	ldr	r3, [sp, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dd47      	ble.n	8001f36 <lcd_event_process+0xa6>
		lcdstatus = eventbuffer[0];
 8001ea6:	7821      	ldrb	r1, [r4, #0]
 8001ea8:	4b8a      	ldr	r3, [pc, #552]	; (80020d4 <lcd_event_process+0x244>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001eaa:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8001eac:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001eae:	d925      	bls.n	8001efc <lcd_event_process+0x6c>
			switch (eventbuffer[0]) {
 8001eb0:	2965      	cmp	r1, #101	; 0x65
 8001eb2:	d067      	beq.n	8001f84 <lcd_event_process+0xf4>
 8001eb4:	2966      	cmp	r1, #102	; 0x66
 8001eb6:	d046      	beq.n	8001f46 <lcd_event_process+0xb6>
 8001eb8:	2924      	cmp	r1, #36	; 0x24
 8001eba:	d03f      	beq.n	8001f3c <lcd_event_process+0xac>
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8001ebc:	4886      	ldr	r0, [pc, #536]	; (80020d8 <lcd_event_process+0x248>)
 8001ebe:	f022 fe15 	bl	8024aec <iprintf>
				i = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9300      	str	r3, [sp, #0]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001ec6:	9b00      	ldr	r3, [sp, #0]
 8001ec8:	5ce3      	ldrb	r3, [r4, r3]
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d00f      	beq.n	8001eee <lcd_event_process+0x5e>
					printf(" 0x%02x", eventbuffer[i++]);
 8001ece:	4d83      	ldr	r5, [pc, #524]	; (80020dc <lcd_event_process+0x24c>)
 8001ed0:	e009      	b.n	8001ee6 <lcd_event_process+0x56>
 8001ed2:	9b00      	ldr	r3, [sp, #0]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	5ce1      	ldrb	r1, [r4, r3]
 8001ed8:	9200      	str	r2, [sp, #0]
 8001eda:	f022 fe07 	bl	8024aec <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001ede:	9b00      	ldr	r3, [sp, #0]
 8001ee0:	5ce3      	ldrb	r3, [r4, r3]
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d003      	beq.n	8001eee <lcd_event_process+0x5e>
 8001ee6:	9b00      	ldr	r3, [sp, #0]
					printf(" 0x%02x", eventbuffer[i++]);
 8001ee8:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001eea:	2b1f      	cmp	r3, #31
 8001eec:	d9f1      	bls.n	8001ed2 <lcd_event_process+0x42>
				printf("\n");
 8001eee:	200a      	movs	r0, #10
 8001ef0:	f022 fe14 	bl	8024b1c <putchar>
				return (-1);
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001ef8:	b003      	add	sp, #12
 8001efa:	bd30      	pop	{r4, r5, pc}
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8001efc:	2901      	cmp	r1, #1
 8001efe:	d0fb      	beq.n	8001ef8 <lcd_event_process+0x68>
				printf("Nextion reported: ");
 8001f00:	4877      	ldr	r0, [pc, #476]	; (80020e0 <lcd_event_process+0x250>)
 8001f02:	f022 fdf3 	bl	8024aec <iprintf>
				switch (eventbuffer[0]) {
 8001f06:	7821      	ldrb	r1, [r4, #0]
 8001f08:	2924      	cmp	r1, #36	; 0x24
 8001f0a:	d846      	bhi.n	8001f9a <lcd_event_process+0x10a>
 8001f0c:	e8df f001 	tbb	[pc, r1]
 8001f10:	4582878c 	.word	0x4582878c
 8001f14:	45454545 	.word	0x45454545
 8001f18:	45454545 	.word	0x45454545
 8001f1c:	45454545 	.word	0x45454545
 8001f20:	457a4545 	.word	0x457a4545
 8001f24:	45454545 	.word	0x45454545
 8001f28:	45724545 	.word	0x45724545
 8001f2c:	4566456c 	.word	0x4566456c
 8001f30:	5a454560 	.word	0x5a454560
 8001f34:	54          	.byte	0x54
 8001f35:	00          	.byte	0x00
		return (result);		// 0 = nothing found, -1 = timeout
 8001f36:	9801      	ldr	r0, [sp, #4]
}
 8001f38:	b003      	add	sp, #12
 8001f3a:	bd30      	pop	{r4, r5, pc}
				printf("Serial Buffer Overflow!\n");
 8001f3c:	4869      	ldr	r0, [pc, #420]	; (80020e4 <lcd_event_process+0x254>)
 8001f3e:	f022 fe71 	bl	8024c24 <puts>
				return (1);
 8001f42:	2001      	movs	r0, #1
 8001f44:	e7d8      	b.n	8001ef8 <lcd_event_process+0x68>
				setlcddim(lcdbright);
 8001f46:	4968      	ldr	r1, [pc, #416]	; (80020e8 <lcd_event_process+0x258>)
	dimtimer = DIMTIME;
 8001f48:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001f4c:	4b67      	ldr	r3, [pc, #412]	; (80020ec <lcd_event_process+0x25c>)
				setlcddim(lcdbright);
 8001f4e:	6809      	ldr	r1, [r1, #0]
	setlcdbin("dim", level);
 8001f50:	4867      	ldr	r0, [pc, #412]	; (80020f0 <lcd_event_process+0x260>)
 8001f52:	2963      	cmp	r1, #99	; 0x63
	dimtimer = DIMTIME;
 8001f54:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8001f56:	bf28      	it	cs
 8001f58:	2163      	movcs	r1, #99	; 0x63
 8001f5a:	f7ff fafb 	bl	8001554 <setlcdbin>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8001f5e:	7860      	ldrb	r0, [r4, #1]
 8001f60:	f7ff ff50 	bl	8001e04 <lcd_pagechange>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	db04      	blt.n	8001f72 <lcd_event_process+0xe2>
 8001f68:	7860      	ldrb	r0, [r4, #1]
 8001f6a:	f7ff ff4b 	bl	8001e04 <lcd_pagechange>
 8001f6e:	2805      	cmp	r0, #5
 8001f70:	dd19      	ble.n	8001fa6 <lcd_event_process+0x116>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8001f72:	7860      	ldrb	r0, [r4, #1]
 8001f74:	f7ff ff46 	bl	8001e04 <lcd_pagechange>
 8001f78:	4601      	mov	r1, r0
 8001f7a:	485e      	ldr	r0, [pc, #376]	; (80020f4 <lcd_event_process+0x264>)
 8001f7c:	f022 fdb6 	bl	8024aec <iprintf>
			return (0);
 8001f80:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8001f82:	e7b9      	b.n	8001ef8 <lcd_event_process+0x68>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 8001f84:	78e3      	ldrb	r3, [r4, #3]
 8001f86:	78a2      	ldrb	r2, [r4, #2]
 8001f88:	7861      	ldrb	r1, [r4, #1]
 8001f8a:	485b      	ldr	r0, [pc, #364]	; (80020f8 <lcd_event_process+0x268>)
 8001f8c:	f022 fdae 	bl	8024aec <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8001f90:	7863      	ldrb	r3, [r4, #1]
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d04e      	beq.n	8002034 <lcd_event_process+0x1a4>
			return (0);
 8001f96:	2000      	movs	r0, #0
 8001f98:	e7ae      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 8001f9a:	4858      	ldr	r0, [pc, #352]	; (80020fc <lcd_event_process+0x26c>)
 8001f9c:	f022 fda6 	bl	8024aec <iprintf>
				return (-1);		// some kindof error
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001fa4:	e7a8      	b.n	8001ef8 <lcd_event_process+0x68>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001fa6:	7860      	ldrb	r0, [r4, #1]
 8001fa8:	f7ff ff2c 	bl	8001e04 <lcd_pagechange>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a54      	ldr	r2, [pc, #336]	; (8002100 <lcd_event_process+0x270>)
			return (0);
 8001fb0:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	7013      	strb	r3, [r2, #0]
 8001fb6:	e79f      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Ser Buffer overflow\n");
 8001fb8:	4852      	ldr	r0, [pc, #328]	; (8002104 <lcd_event_process+0x274>)
 8001fba:	f022 fe33 	bl	8024c24 <puts>
				return (-1);		// some kindof error
 8001fbe:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001fc2:	e799      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Variable name too long\n");
 8001fc4:	4850      	ldr	r0, [pc, #320]	; (8002108 <lcd_event_process+0x278>)
 8001fc6:	f022 fe2d 	bl	8024c24 <puts>
				return (-1);		// some kindof error
 8001fca:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001fce:	e793      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Invalid escape char\n");
 8001fd0:	484e      	ldr	r0, [pc, #312]	; (800210c <lcd_event_process+0x27c>)
 8001fd2:	f022 fe27 	bl	8024c24 <puts>
				return (-1);		// some kindof error
 8001fd6:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001fda:	e78d      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Invalid number of parameters\n");
 8001fdc:	484c      	ldr	r0, [pc, #304]	; (8002110 <lcd_event_process+0x280>)
 8001fde:	f022 fe21 	bl	8024c24 <puts>
				return (-1);		// some kindof error
 8001fe2:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001fe6:	e787      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Attribute assignment failed\n");
 8001fe8:	484a      	ldr	r0, [pc, #296]	; (8002114 <lcd_event_process+0x284>)
 8001fea:	f022 fe1b 	bl	8024c24 <puts>
				return (-1);		// some kindof error
 8001fee:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001ff2:	e781      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 8001ff4:	4848      	ldr	r0, [pc, #288]	; (8002118 <lcd_event_process+0x288>)
 8001ff6:	f022 fe15 	bl	8024c24 <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8001ffa:	f000 f961 	bl	80022c0 <getlcdpage>
				return (-1);		// some kindof error
 8001ffe:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002002:	e779      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Invalid waveform ID\n");
 8002004:	4845      	ldr	r0, [pc, #276]	; (800211c <lcd_event_process+0x28c>)
 8002006:	f022 fe0d 	bl	8024c24 <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 800200a:	f000 f959 	bl	80022c0 <getlcdpage>
				return (-1);		// some kindof error
 800200e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002012:	e771      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Invalid Component ID\n");
 8002014:	4842      	ldr	r0, [pc, #264]	; (8002120 <lcd_event_process+0x290>)
 8002016:	f022 fe05 	bl	8024c24 <puts>
					return (0);
 800201a:	2000      	movs	r0, #0
 800201c:	e76c      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Successful execution\n");
 800201e:	4841      	ldr	r0, [pc, #260]	; (8002124 <lcd_event_process+0x294>)
 8002020:	f022 fe00 	bl	8024c24 <puts>
					return (0);
 8002024:	2000      	movs	r0, #0
 8002026:	e767      	b.n	8001ef8 <lcd_event_process+0x68>
					printf("Invalid command\n");
 8002028:	483f      	ldr	r0, [pc, #252]	; (8002128 <lcd_event_process+0x298>)
 800202a:	f022 fdfb 	bl	8024c24 <puts>
				return (-1);		// some kindof error
 800202e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002032:	e761      	b.n	8001ef8 <lcd_event_process+0x68>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8002034:	78a3      	ldrb	r3, [r4, #2]
 8002036:	2b06      	cmp	r3, #6
 8002038:	d012      	beq.n	8002060 <lcd_event_process+0x1d0>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 800203a:	2b08      	cmp	r3, #8
 800203c:	d039      	beq.n	80020b2 <lcd_event_process+0x222>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 800203e:	2b02      	cmp	r3, #2
 8002040:	d026      	beq.n	8002090 <lcd_event_process+0x200>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8002042:	2b03      	cmp	r3, #3
 8002044:	d1a7      	bne.n	8001f96 <lcd_event_process+0x106>
					if (eventbuffer[3] == 1) 		// sound on
 8002046:	78e3      	ldrb	r3, [r4, #3]
 8002048:	4a38      	ldr	r2, [pc, #224]	; (800212c <lcd_event_process+0x29c>)
 800204a:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 800204e:	4838      	ldr	r0, [pc, #224]	; (8002130 <lcd_event_process+0x2a0>)
					if (eventbuffer[3] == 1) 		// sound on
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8002058:	f022 fde4 	bl	8024c24 <puts>
			return (0);
 800205c:	2000      	movs	r0, #0
 800205e:	e74b      	b.n	8001ef8 <lcd_event_process+0x68>
					lcdbright = eventbuffer[3];
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <lcd_event_process+0x258>)
 8002062:	78e2      	ldrb	r2, [r4, #3]
 8002064:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2a0d      	cmp	r2, #13
 800206a:	dc01      	bgt.n	8002070 <lcd_event_process+0x1e0>
						lcdbright = 14;		// prevent black
 800206c:	220e      	movs	r2, #14
 800206e:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 8002070:	6819      	ldr	r1, [r3, #0]
	dimtimer = DIMTIME;
 8002072:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <lcd_event_process+0x25c>)
	setlcdbin("dim", level);
 8002078:	2963      	cmp	r1, #99	; 0x63
 800207a:	481d      	ldr	r0, [pc, #116]	; (80020f0 <lcd_event_process+0x260>)
	dimtimer = DIMTIME;
 800207c:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 800207e:	bf28      	it	cs
 8002080:	2163      	movcs	r1, #99	; 0x63
 8002082:	f7ff fa67 	bl	8001554 <setlcdbin>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8002086:	7863      	ldrb	r3, [r4, #1]
 8002088:	2b04      	cmp	r3, #4
 800208a:	d184      	bne.n	8001f96 <lcd_event_process+0x106>
 800208c:	78a3      	ldrb	r3, [r4, #2]
 800208e:	e7d4      	b.n	800203a <lcd_event_process+0x1aa>
					if (eventbuffer[3] == 1) 		// sound on
 8002090:	78e3      	ldrb	r3, [r4, #3]
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <lcd_event_process+0x2a4>)
 8002094:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8002098:	4827      	ldr	r0, [pc, #156]	; (8002138 <lcd_event_process+0x2a8>)
					if (eventbuffer[3] == 1) 		// sound on
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 80020a2:	f022 fdbf 	bl	8024c24 <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 80020a6:	7863      	ldrb	r3, [r4, #1]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	f47f af74 	bne.w	8001f96 <lcd_event_process+0x106>
 80020ae:	78a3      	ldrb	r3, [r4, #2]
 80020b0:	e7c7      	b.n	8002042 <lcd_event_process+0x1b2>
					printf("Reboot touch\n");
 80020b2:	4822      	ldr	r0, [pc, #136]	; (800213c <lcd_event_process+0x2ac>)
 80020b4:	f022 fdb6 	bl	8024c24 <puts>
					osDelay(100);
 80020b8:	2064      	movs	r0, #100	; 0x64
 80020ba:	f012 fda3 	bl	8014c04 <osDelay>
					rebootme();
 80020be:	f000 fa93 	bl	80025e8 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 80020c2:	7863      	ldrb	r3, [r4, #1]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	f47f af66 	bne.w	8001f96 <lcd_event_process+0x106>
 80020ca:	78a3      	ldrb	r3, [r4, #2]
 80020cc:	e7b7      	b.n	800203e <lcd_event_process+0x1ae>
 80020ce:	bf00      	nop
 80020d0:	20001688 	.word	0x20001688
 80020d4:	2000174c 	.word	0x2000174c
 80020d8:	08029a2c 	.word	0x08029a2c
 80020dc:	08029a60 	.word	0x08029a60
 80020e0:	0802987c 	.word	0x0802987c
 80020e4:	0802998c 	.word	0x0802998c
 80020e8:	2000000c 	.word	0x2000000c
 80020ec:	20000004 	.word	0x20000004
 80020f0:	080296c4 	.word	0x080296c4
 80020f4:	080299fc 	.word	0x080299fc
 80020f8:	080299a4 	.word	0x080299a4
 80020fc:	08029974 	.word	0x08029974
 8002100:	200016bc 	.word	0x200016bc
 8002104:	080298cc 	.word	0x080298cc
 8002108:	080298b4 	.word	0x080298b4
 800210c:	08029900 	.word	0x08029900
 8002110:	080298e0 	.word	0x080298e0
 8002114:	08029914 	.word	0x08029914
 8002118:	080298a0 	.word	0x080298a0
 800211c:	08029930 	.word	0x08029930
 8002120:	0802995c 	.word	0x0802995c
 8002124:	08029944 	.word	0x08029944
 8002128:	08029890 	.word	0x08029890
 800212c:	20000270 	.word	0x20000270
 8002130:	080299f0 	.word	0x080299f0
 8002134:	20000276 	.word	0x20000276
 8002138:	080299e4 	.word	0x080299e4
 800213c:	080299d4 	.word	0x080299d4

08002140 <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 8002140:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 8002142:	4d50      	ldr	r5, [pc, #320]	; (8002284 <processnex+0x144>)
void processnex() {		// process Nextion - called at regular intervals
 8002144:	b0a2      	sub	sp, #136	; 0x88
	switch (lcduart_error) {
 8002146:	682b      	ldr	r3, [r5, #0]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d06d      	beq.n	8002228 <processnex+0xe8>
 800214c:	2b08      	cmp	r3, #8
 800214e:	d066      	beq.n	800221e <processnex+0xde>
 8002150:	2b02      	cmp	r3, #2
 8002152:	d04b      	beq.n	80021ec <processnex+0xac>
 8002154:	4c4c      	ldr	r4, [pc, #304]	; (8002288 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002156:	2600      	movs	r6, #0
 8002158:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d04e      	beq.n	80021fe <processnex+0xbe>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d07f      	beq.n	8002266 <processnex+0x126>
	if (lcd_initflag == 3) {	// uart only
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d069      	beq.n	8002240 <processnex+0x100>
	lcd_rxdma();		// get any new characters received
 800216c:	f7ff f974 	bl	8001458 <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8002170:	f7ff fe8e 	bl	8001e90 <lcd_event_process>
	if (dimtimer > 50000) {
 8002174:	4a45      	ldr	r2, [pc, #276]	; (800228c <processnex+0x14c>)
 8002176:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 800217a:	9001      	str	r0, [sp, #4]
	if (dimtimer > 50000) {
 800217c:	6813      	ldr	r3, [r2, #0]
 800217e:	428b      	cmp	r3, r1
 8002180:	d903      	bls.n	800218a <processnex+0x4a>
		dimtimer--;
 8002182:	3b01      	subs	r3, #1
 8002184:	6013      	str	r3, [r2, #0]
}
 8002186:	b022      	add	sp, #136	; 0x88
 8002188:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 800218a:	4841      	ldr	r0, [pc, #260]	; (8002290 <processnex+0x150>)
		dimtimer = 60000;
 800218c:	f64e 2360 	movw	r3, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002190:	6801      	ldr	r1, [r0, #0]
		dimtimer = 60000;
 8002192:	6013      	str	r3, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002194:	6804      	ldr	r4, [r0, #0]
 8002196:	6803      	ldr	r3, [r0, #0]
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	109b      	asrs	r3, r3, #2
 800219c:	eb03 0364 	add.w	r3, r3, r4, asr #1
 80021a0:	eb03 1322 	add.w	r3, r3, r2, asr #4
 80021a4:	1aca      	subs	r2, r1, r3
		if (i < 2)
 80021a6:	2a01      	cmp	r2, #1
 80021a8:	dd45      	ble.n	8002236 <processnex+0xf6>
 80021aa:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 80021ac:	4939      	ldr	r1, [pc, #228]	; (8002294 <processnex+0x154>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	bf28      	it	cs
 80021b2:	2363      	movcs	r3, #99	; 0x63
 80021b4:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 80021b6:	4a38      	ldr	r2, [pc, #224]	; (8002298 <processnex+0x158>)
 80021b8:	a802      	add	r0, sp, #8
 80021ba:	4938      	ldr	r1, [pc, #224]	; (800229c <processnex+0x15c>)
 80021bc:	f022 fe88 	bl	8024ed0 <siprintf>
	strcpy(pkt, str);
 80021c0:	a902      	add	r1, sp, #8
 80021c2:	a80a      	add	r0, sp, #40	; 0x28
 80021c4:	f022 ff15 	bl	8024ff2 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80021c8:	4935      	ldr	r1, [pc, #212]	; (80022a0 <processnex+0x160>)
	if (!(lcd_txblocked))
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <processnex+0x164>)
	strcpy(pkt, str);
 80021cc:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 80021ce:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 80021d0:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 80021d2:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d152      	bne.n	800227e <processnex+0x13e>
		return (lcd_puts(pkt));
 80021d8:	a80a      	add	r0, sp, #40	; 0x28
 80021da:	f7ff f905 	bl	80013e8 <lcd_puts>
	result = writelcdcmd(buffer);
 80021de:	900a      	str	r0, [sp, #40]	; 0x28
	if (result == -1) {		// wait for response
 80021e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021e2:	3301      	adds	r3, #1
 80021e4:	d047      	beq.n	8002276 <processnex+0x136>
	return (result);
 80021e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 80021e8:	b022      	add	sp, #136	; 0x88
 80021ea:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 80021ec:	4c26      	ldr	r4, [pc, #152]	; (8002288 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80021ee:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 80021f0:	482d      	ldr	r0, [pc, #180]	; (80022a8 <processnex+0x168>)
 80021f2:	f022 fd17 	bl	8024c24 <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 80021f6:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d1b0      	bne.n	8002160 <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 80021fe:	482b      	ldr	r0, [pc, #172]	; (80022ac <processnex+0x16c>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002200:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 8002202:	f022 fd0f 	bl	8024c24 <puts>
		lcd_uart_init(9600);	// switch us to 9600
 8002206:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800220a:	f7ff f81f 	bl	800124c <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 800220e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002212:	f7ff f863 	bl	80012dc <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8002216:	2302      	movs	r3, #2
 8002218:	6023      	str	r3, [r4, #0]
}
 800221a:	b022      	add	sp, #136	; 0x88
 800221c:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 800221e:	4824      	ldr	r0, [pc, #144]	; (80022b0 <processnex+0x170>)
 8002220:	4c19      	ldr	r4, [pc, #100]	; (8002288 <processnex+0x148>)
 8002222:	f022 fcff 	bl	8024c24 <puts>
 8002226:	e796      	b.n	8002156 <processnex+0x16>
		printf("LCD UART FRAMING\n");
 8002228:	4822      	ldr	r0, [pc, #136]	; (80022b4 <processnex+0x174>)
 800222a:	f022 fcfb 	bl	8024c24 <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 800222e:	4c16      	ldr	r4, [pc, #88]	; (8002288 <processnex+0x148>)
 8002230:	2301      	movs	r3, #1
 8002232:	6023      	str	r3, [r4, #0]
		break;
 8002234:	e78f      	b.n	8002156 <processnex+0x16>
			i = 2;	// prevent black
 8002236:	2202      	movs	r2, #2
 8002238:	4916      	ldr	r1, [pc, #88]	; (8002294 <processnex+0x154>)
 800223a:	4613      	mov	r3, r2
 800223c:	600a      	str	r2, [r1, #0]
 800223e:	e7ba      	b.n	80021b6 <processnex+0x76>
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002240:	481d      	ldr	r0, [pc, #116]	; (80022b8 <processnex+0x178>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002242:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002244:	f022 fcee 	bl	8024c24 <puts>
		lcd_uart_init(230400);
 8002248:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 800224c:	f7fe fffe 	bl	800124c <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 8002250:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002254:	f7ff f842 	bl	80012dc <lcd_init>
		osDelay(100);
 8002258:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 800225a:	6026      	str	r6, [r4, #0]
}
 800225c:	b022      	add	sp, #136	; 0x88
 800225e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 8002262:	f012 bccf 	b.w	8014c04 <osDelay>
		osDelay(500);
 8002266:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800226a:	f012 fccb 	bl	8014c04 <osDelay>
		lcd_initflag = 3;
 800226e:	2303      	movs	r3, #3
 8002270:	6023      	str	r3, [r4, #0]
}
 8002272:	b022      	add	sp, #136	; 0x88
 8002274:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8002276:	4811      	ldr	r0, [pc, #68]	; (80022bc <processnex+0x17c>)
 8002278:	f022 fc38 	bl	8024aec <iprintf>
 800227c:	e7b3      	b.n	80021e6 <processnex+0xa6>
		return (-1);
 800227e:	f04f 30ff 	mov.w	r0, #4294967295
 8002282:	e7ac      	b.n	80021de <processnex+0x9e>
 8002284:	20001750 	.word	0x20001750
 8002288:	200016c0 	.word	0x200016c0
 800228c:	20000004 	.word	0x20000004
 8002290:	2000000c 	.word	0x2000000c
 8002294:	200016a8 	.word	0x200016a8
 8002298:	080296c4 	.word	0x080296c4
 800229c:	080296a4 	.word	0x080296a4
 80022a0:	08029618 	.word	0x08029618
 80022a4:	200016c4 	.word	0x200016c4
 80022a8:	08029a68 	.word	0x08029a68
 80022ac:	08029aa0 	.word	0x08029aa0
 80022b0:	08029a8c 	.word	0x08029a8c
 80022b4:	08029a78 	.word	0x08029a78
 80022b8:	08029ac8 	.word	0x08029ac8
 80022bc:	080296ac 	.word	0x080296ac

080022c0 <getlcdpage>:
int getlcdpage(void) {
 80022c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("getlcdpage:\n");
 80022c4:	4842      	ldr	r0, [pc, #264]	; (80023d0 <getlcdpage+0x110>)
int getlcdpage(void) {
 80022c6:	b09b      	sub	sp, #108	; 0x6c
	printf("getlcdpage:\n");
 80022c8:	f022 fcac 	bl	8024c24 <puts>
	lcd_txblocked = 1;		// stop others sending to the LCD
 80022cc:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80023ec <getlcdpage+0x12c>
 80022d0:	2301      	movs	r3, #1
	strcpy(pkt, str);
 80022d2:	4e40      	ldr	r6, [pc, #256]	; (80023d4 <getlcdpage+0x114>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 80022d4:	2096      	movs	r0, #150	; 0x96
	strcat(pkt, "\xff\xff\xff");
 80022d6:	4f40      	ldr	r7, [pc, #256]	; (80023d8 <getlcdpage+0x118>)
	lcd_txblocked = 1;		// stop others sending to the LCD
 80022d8:	f8c8 3000 	str.w	r3, [r8]
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 80022dc:	f012 fc92 	bl	8014c04 <osDelay>
	lcdstatus = 0xff;
 80022e0:	4d3e      	ldr	r5, [pc, #248]	; (80023dc <getlcdpage+0x11c>)
 80022e2:	23ff      	movs	r3, #255	; 0xff
	strcpy(pkt, str);
 80022e4:	e896 0003 	ldmia.w	r6, {r0, r1}
	lcdstatus = 0xff;
 80022e8:	702b      	strb	r3, [r5, #0]
	strcpy(pkt, str);
 80022ea:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 80022ec:	6838      	ldr	r0, [r7, #0]
	strcpy(pkt, str);
 80022ee:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 80022f2:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 80022f6:	a802      	add	r0, sp, #8
 80022f8:	f7ff f876 	bl	80013e8 <lcd_puts>
	result = intwritelcdcmd("sendme");
 80022fc:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 80022fe:	9b01      	ldr	r3, [sp, #4]
 8002300:	3301      	adds	r3, #1
 8002302:	d060      	beq.n	80023c6 <getlcdpage+0x106>
	processnex();
 8002304:	f7ff ff1c 	bl	8002140 <processnex>
	while (lcdstatus == 0xff) {
 8002308:	782b      	ldrb	r3, [r5, #0]
 800230a:	2bff      	cmp	r3, #255	; 0xff
 800230c:	d121      	bne.n	8002352 <getlcdpage+0x92>
 800230e:	4c34      	ldr	r4, [pc, #208]	; (80023e0 <getlcdpage+0x120>)
 8002310:	e007      	b.n	8002322 <getlcdpage+0x62>
		trys++;
 8002312:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8002314:	f012 fc76 	bl	8014c04 <osDelay>
		processnex();
 8002318:	f7ff ff12 	bl	8002140 <processnex>
	while (lcdstatus == 0xff) {
 800231c:	782b      	ldrb	r3, [r5, #0]
 800231e:	2bff      	cmp	r3, #255	; 0xff
 8002320:	d117      	bne.n	8002352 <getlcdpage+0x92>
		if (trys > 1000) {
 8002322:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8002324:	2001      	movs	r0, #1
		if (trys > 1000) {
 8002326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 800232a:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 800232e:	d9f0      	bls.n	8002312 <getlcdpage+0x52>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8002330:	482c      	ldr	r0, [pc, #176]	; (80023e4 <getlcdpage+0x124>)
 8002332:	f022 fbdb 	bl	8024aec <iprintf>
			trys = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	6023      	str	r3, [r4, #0]
 800233a:	23ff      	movs	r3, #255	; 0xff
	result = lcd_getlack();		// wait for a response
 800233c:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 800233e:	9b01      	ldr	r3, [sp, #4]
 8002340:	2bff      	cmp	r3, #255	; 0xff
 8002342:	d00c      	beq.n	800235e <getlcdpage+0x9e>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8002344:	2300      	movs	r3, #0
 8002346:	f8c8 3000 	str.w	r3, [r8]
	return (result);
 800234a:	9801      	ldr	r0, [sp, #4]
}
 800234c:	b01b      	add	sp, #108	; 0x6c
 800234e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (lcdstatus);
 8002352:	782b      	ldrb	r3, [r5, #0]
 8002354:	b2db      	uxtb	r3, r3
	result = lcd_getlack();		// wait for a response
 8002356:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 8002358:	9b01      	ldr	r3, [sp, #4]
 800235a:	2bff      	cmp	r3, #255	; 0xff
 800235c:	d1f2      	bne.n	8002344 <getlcdpage+0x84>
	strcat(pkt, "\xff\xff\xff");
 800235e:	683f      	ldr	r7, [r7, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 8002360:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80023f0 <getlcdpage+0x130>
 8002364:	4c1e      	ldr	r4, [pc, #120]	; (80023e0 <getlcdpage+0x120>)
	strcat(pkt, "\xff\xff\xff");
 8002366:	f8cd 700e 	str.w	r7, [sp, #14]
	strcpy(pkt, str);
 800236a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800236e:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 8002370:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 8002372:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 8002376:	f7ff f837 	bl	80013e8 <lcd_puts>
		result = intwritelcdcmd("sendme");
 800237a:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 800237c:	9b01      	ldr	r3, [sp, #4]
 800237e:	3301      	adds	r3, #1
 8002380:	d10a      	bne.n	8002398 <getlcdpage+0xd8>
 8002382:	e01c      	b.n	80023be <getlcdpage+0xfe>
		if (trys > 1000) {
 8002384:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8002386:	2001      	movs	r0, #1
		if (trys > 1000) {
 8002388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 800238c:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8002390:	d80e      	bhi.n	80023b0 <getlcdpage+0xf0>
		trys++;
 8002392:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8002394:	f012 fc36 	bl	8014c04 <osDelay>
		processnex();
 8002398:	f7ff fed2 	bl	8002140 <processnex>
	while (lcdstatus == 0xff) {
 800239c:	782b      	ldrb	r3, [r5, #0]
 800239e:	2bff      	cmp	r3, #255	; 0xff
 80023a0:	d0f0      	beq.n	8002384 <getlcdpage+0xc4>
	return (lcdstatus);
 80023a2:	782b      	ldrb	r3, [r5, #0]
 80023a4:	b2db      	uxtb	r3, r3
		result = lcd_getlack();		// wait for a response
 80023a6:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 80023a8:	9b01      	ldr	r3, [sp, #4]
 80023aa:	2bff      	cmp	r3, #255	; 0xff
 80023ac:	d0db      	beq.n	8002366 <getlcdpage+0xa6>
 80023ae:	e7c9      	b.n	8002344 <getlcdpage+0x84>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <getlcdpage+0x124>)
 80023b2:	f022 fb9b 	bl	8024aec <iprintf>
			trys = 0;
 80023b6:	2200      	movs	r2, #0
 80023b8:	23ff      	movs	r3, #255	; 0xff
 80023ba:	6022      	str	r2, [r4, #0]
			return (-1);
 80023bc:	e7f3      	b.n	80023a6 <getlcdpage+0xe6>
			printf("getlcdpage2: Cmd failed\n\r");
 80023be:	4648      	mov	r0, r9
 80023c0:	f022 fb94 	bl	8024aec <iprintf>
 80023c4:	e7e8      	b.n	8002398 <getlcdpage+0xd8>
		printf("getlcdpage: Cmd failed\n\r");
 80023c6:	4808      	ldr	r0, [pc, #32]	; (80023e8 <getlcdpage+0x128>)
 80023c8:	f022 fb90 	bl	8024aec <iprintf>
 80023cc:	e79a      	b.n	8002304 <getlcdpage+0x44>
 80023ce:	bf00      	nop
 80023d0:	08029b24 	.word	0x08029b24
 80023d4:	08029b30 	.word	0x08029b30
 80023d8:	08029618 	.word	0x08029618
 80023dc:	2000174c 	.word	0x2000174c
 80023e0:	20001d40 	.word	0x20001d40
 80023e4:	08029af4 	.word	0x08029af4
 80023e8:	08029b38 	.word	0x08029b38
 80023ec:	200016c4 	.word	0x200016c4
 80023f0:	08029b54 	.word	0x08029b54

080023f4 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80023f4:	b508      	push	{r3, lr}
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2107      	movs	r1, #7
 80023fa:	2026      	movs	r0, #38	; 0x26
 80023fc:	f006 f83e 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002400:	2026      	movs	r0, #38	; 0x26
 8002402:	f006 f885 	bl	8008510 <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2106      	movs	r1, #6
 800240a:	2047      	movs	r0, #71	; 0x47
 800240c:	f006 f836 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002410:	2047      	movs	r0, #71	; 0x47
 8002412:	f006 f87d 	bl	8008510 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2106      	movs	r1, #6
 800241a:	2012      	movs	r0, #18
 800241c:	f006 f82e 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002420:	2012      	movs	r0, #18
 8002422:	f006 f875 	bl	8008510 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2106      	movs	r1, #6
 800242a:	2028      	movs	r0, #40	; 0x28
 800242c:	f006 f826 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002430:	2028      	movs	r0, #40	; 0x28
 8002432:	f006 f86d 	bl	8008510 <HAL_NVIC_EnableIRQ>
	/* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8002436:	202d      	movs	r0, #45	; 0x2d
 8002438:	2200      	movs	r2, #0
 800243a:	2101      	movs	r1, #1
 800243c:	f006 f81e 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002440:	202d      	movs	r0, #45	; 0x2d
}
 8002442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002446:	f006 b863 	b.w	8008510 <HAL_NVIC_EnableIRQ>
 800244a:	bf00      	nop

0800244c <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 800244c:	4801      	ldr	r0, [pc, #4]	; (8002454 <netif_status_callbk_fn+0x8>)
 800244e:	f022 bbe9 	b.w	8024c24 <puts>
 8002452:	bf00      	nop
 8002454:	08029b84 	.word	0x08029b84

08002458 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8002458:	4801      	ldr	r0, [pc, #4]	; (8002460 <Callback01+0x8>)
 800245a:	f022 bbe3 	b.w	8024c24 <puts>
 800245e:	bf00      	nop
 8002460:	08029b9c 	.word	0x08029b9c

08002464 <_write>:
	if (file == 1) {
 8002464:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8002466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002468:	460c      	mov	r4, r1
 800246a:	4617      	mov	r7, r2
	if (file == 1) {
 800246c:	d00e      	beq.n	800248c <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800246e:	2a00      	cmp	r2, #0
 8002470:	dd0a      	ble.n	8002488 <_write+0x24>
 8002472:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8002474:	4d0b      	ldr	r5, [pc, #44]	; (80024a4 <_write+0x40>)
 8002476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800247a:	230a      	movs	r3, #10
 800247c:	2201      	movs	r2, #1
 800247e:	4628      	mov	r0, r5
 8002480:	f010 f8cc 	bl	801261c <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002484:	42a6      	cmp	r6, r4
 8002486:	d1f6      	bne.n	8002476 <_write+0x12>
}
 8002488:	4638      	mov	r0, r7
 800248a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800248c:	2a00      	cmp	r2, #0
 800248e:	ddfb      	ble.n	8002488 <_write+0x24>
 8002490:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 8002492:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002496:	f001 fe73 	bl	8004180 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800249a:	42ac      	cmp	r4, r5
 800249c:	d1f9      	bne.n	8002492 <_write+0x2e>
}
 800249e:	4638      	mov	r0, r7
 80024a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200027cc 	.word	0x200027cc

080024a8 <crc_rom>:
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <crc_rom+0x44>)
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80024aa:	4811      	ldr	r0, [pc, #68]	; (80024f0 <crc_rom+0x48>)
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 80024ac:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <crc_rom+0x4c>)
 80024b2:	4a11      	ldr	r2, [pc, #68]	; (80024f8 <crc_rom+0x50>)
 80024b4:	4403      	add	r3, r0
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 80024b6:	bf2c      	ite	cs
 80024b8:	f04f 6101 	movcs.w	r1, #135266304	; 0x8100000
 80024bc:	f04f 6100 	movcc.w	r1, #134217728	; 0x8000000
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80024c0:	1a9b      	subs	r3, r3, r2
	xcrc = xcrc32(base, length, xinit);
 80024c2:	f04f 32ff 	mov.w	r2, #4294967295
{
 80024c6:	b510      	push	{r4, lr}
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80024c8:	1a5b      	subs	r3, r3, r1
		base = 0x8000000;
 80024ca:	460c      	mov	r4, r1
{
 80024cc:	b082      	sub	sp, #8
	xcrc = xcrc32(base, length, xinit);
 80024ce:	4619      	mov	r1, r3
 80024d0:	4620      	mov	r0, r4
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	f7fe fb74 	bl	8000bc0 <xcrc32>
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", xcrc,base,length);
 80024d8:	9b01      	ldr	r3, [sp, #4]
	xcrc = xcrc32(base, length, xinit);
 80024da:	4601      	mov	r1, r0
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", xcrc,base,length);
 80024dc:	4622      	mov	r2, r4
 80024de:	4807      	ldr	r0, [pc, #28]	; (80024fc <crc_rom+0x54>)
}
 80024e0:	b002      	add	sp, #8
 80024e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", xcrc,base,length);
 80024e6:	f022 bb01 	b.w	8024aec <iprintf>
 80024ea:	bf00      	nop
 80024ec:	080023f5 	.word	0x080023f5
 80024f0:	200006bc 	.word	0x200006bc
 80024f4:	0804580c 	.word	0x0804580c
 80024f8:	20000000 	.word	0x20000000
 80024fc:	08029ba8 	.word	0x08029ba8

08002500 <err_leds>:
err_leds(int why) {
 8002500:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8002502:	4e37      	ldr	r6, [pc, #220]	; (80025e0 <err_leds+0xe0>)
err_leds(int why) {
 8002504:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 8002506:	4d37      	ldr	r5, [pc, #220]	; (80025e4 <err_leds+0xe4>)
 8002508:	1e44      	subs	r4, r0, #1
		switch (why) {
 800250a:	2c07      	cmp	r4, #7
 800250c:	d80f      	bhi.n	800252e <err_leds+0x2e>
 800250e:	e8df f004 	tbb	[pc, r4]
 8002512:	5c51      	.short	0x5c51
 8002514:	25303b46 	.word	0x25303b46
 8002518:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 800251a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800251e:	4630      	mov	r0, r6
 8002520:	f008 ffa4 	bl	800b46c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002524:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002528:	4630      	mov	r0, r6
 800252a:	f008 ff9f 	bl	800b46c <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 800252e:	2300      	movs	r3, #0
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	9b01      	ldr	r3, [sp, #4]
 8002534:	42ab      	cmp	r3, r5
 8002536:	dae8      	bge.n	800250a <err_leds+0xa>
 8002538:	9b01      	ldr	r3, [sp, #4]
 800253a:	3301      	adds	r3, #1
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	9b01      	ldr	r3, [sp, #4]
 8002540:	42ab      	cmp	r3, r5
 8002542:	dbf9      	blt.n	8002538 <err_leds+0x38>
 8002544:	e7e1      	b.n	800250a <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8002546:	4630      	mov	r0, r6
 8002548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800254c:	f008 ff8e 	bl	800b46c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8002550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002554:	4630      	mov	r0, r6
 8002556:	f008 ff89 	bl	800b46c <HAL_GPIO_TogglePin>
			break;
 800255a:	e7e8      	b.n	800252e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 800255c:	4630      	mov	r0, r6
 800255e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002562:	f008 ff83 	bl	800b46c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8002566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800256a:	4630      	mov	r0, r6
 800256c:	f008 ff7e 	bl	800b46c <HAL_GPIO_TogglePin>
			break;
 8002570:	e7dd      	b.n	800252e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002572:	4630      	mov	r0, r6
 8002574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002578:	f008 ff78 	bl	800b46c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 800257c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002580:	4630      	mov	r0, r6
 8002582:	f008 ff73 	bl	800b46c <HAL_GPIO_TogglePin>
			break;
 8002586:	e7d2      	b.n	800252e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002588:	4630      	mov	r0, r6
 800258a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800258e:	f008 ff6d 	bl	800b46c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8002592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002596:	4630      	mov	r0, r6
 8002598:	f008 ff68 	bl	800b46c <HAL_GPIO_TogglePin>
			break;
 800259c:	e7c7      	b.n	800252e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 800259e:	4630      	mov	r0, r6
 80025a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025a4:	f008 ff62 	bl	800b46c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80025a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025ac:	4630      	mov	r0, r6
 80025ae:	f008 ff5d 	bl	800b46c <HAL_GPIO_TogglePin>
			break;
 80025b2:	e7bc      	b.n	800252e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80025b4:	4630      	mov	r0, r6
 80025b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ba:	f008 ff57 	bl	800b46c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80025be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025c2:	4630      	mov	r0, r6
 80025c4:	f008 ff52 	bl	800b46c <HAL_GPIO_TogglePin>
			break;
 80025c8:	e7b1      	b.n	800252e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80025ca:	4630      	mov	r0, r6
 80025cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025d0:	f008 ff4c 	bl	800b46c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80025d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d8:	4630      	mov	r0, r6
 80025da:	f008 ff47 	bl	800b46c <HAL_GPIO_TogglePin>
			break;
 80025de:	e7a6      	b.n	800252e <err_leds+0x2e>
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	003567e0 	.word	0x003567e0

080025e8 <rebootme>:
void rebootme(int why) {
 80025e8:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ea:	b672      	cpsid	i
		err_leds(why);
 80025ec:	f7ff ff88 	bl	8002500 <err_leds>

080025f0 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 80025f0:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 80025f4:	074a      	lsls	r2, r1, #29
 80025f6:	d502      	bpl.n	80025fe <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 80025f8:	4809      	ldr	r0, [pc, #36]	; (8002620 <netif_link_callbk_fn+0x30>)
 80025fa:	f022 ba77 	b.w	8024aec <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 80025fe:	b510      	push	{r4, lr}
 8002600:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8002602:	4808      	ldr	r0, [pc, #32]	; (8002624 <netif_link_callbk_fn+0x34>)
 8002604:	f022 fa72 	bl	8024aec <iprintf>
		if (!(netif_is_link_up(netif))) {
 8002608:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800260c:	075b      	lsls	r3, r3, #29
 800260e:	d500      	bpl.n	8002612 <netif_link_callbk_fn+0x22>
}
 8002610:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 8002612:	4805      	ldr	r0, [pc, #20]	; (8002628 <netif_link_callbk_fn+0x38>)
 8002614:	f022 fb06 	bl	8024c24 <puts>
			rebootme(1);
 8002618:	2001      	movs	r0, #1
 800261a:	f7ff ffe5 	bl	80025e8 <rebootme>
 800261e:	bf00      	nop
 8002620:	08029bcc 	.word	0x08029bcc
 8002624:	08029bec 	.word	0x08029bec
 8002628:	08029c0c 	.word	0x08029c0c

0800262c <StarLPTask>:
	char str[82] = { "empty" };
 800262c:	4ba1      	ldr	r3, [pc, #644]	; (80028b4 <StarLPTask+0x288>)
 800262e:	224c      	movs	r2, #76	; 0x4c
void StarLPTask(void const *argument) {
 8002630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8002634:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 8002638:	b09f      	sub	sp, #124	; 0x7c
	statuspkt.adcudpover = 0;		// debug use count overruns
 800263a:	2400      	movs	r4, #0
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 800263c:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8002934 <StarLPTask+0x308>
	char str[82] = { "empty" };
 8002640:	9009      	str	r0, [sp, #36]	; 0x24
 8002642:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8002646:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 800264a:	4621      	mov	r1, r4
 800264c:	f021 fab2 	bl	8023bb4 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 8002650:	4b99      	ldr	r3, [pc, #612]	; (80028b8 <StarLPTask+0x28c>)
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8002652:	4622      	mov	r2, r4
 8002654:	2101      	movs	r1, #1
 8002656:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 8002658:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 800265a:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 800265c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8002660:	f012 fdc8 	bl	80151f4 <xQueueGenericCreate>
 8002664:	f8cb 0000 	str.w	r0, [fp]
	if (consolerxq == NULL) {
 8002668:	2800      	cmp	r0, #0
 800266a:	f000 8446 	beq.w	8002efa <StarLPTask+0x8ce>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 800266e:	2201      	movs	r2, #1
 8002670:	4992      	ldr	r1, [pc, #584]	; (80028bc <StarLPTask+0x290>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002672:	4f93      	ldr	r7, [pc, #588]	; (80028c0 <StarLPTask+0x294>)
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 8002674:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8002678:	4892      	ldr	r0, [pc, #584]	; (80028c4 <StarLPTask+0x298>)
 800267a:	f010 f9ed 	bl	8012a58 <HAL_UART_Receive_IT>
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 800267e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	lcduart_error = HAL_UART_ERROR_NONE;
 8002682:	603c      	str	r4, [r7, #0]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 8002684:	f7fe fe2a 	bl	80012dc <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 8002688:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	while (main_init_done == 0) { // wait from main to complete the init {
 800268c:	4d8e      	ldr	r5, [pc, #568]	; (80028c8 <StarLPTask+0x29c>)
	lcd_uart_init(9600); // then change our baud to match
 800268e:	f7fe fddd 	bl	800124c <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 8002692:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002696:	f7fe fe21 	bl	80012dc <lcd_init>
	osDelay(600);
 800269a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800269e:	f012 fab1 	bl	8014c04 <osDelay>
	lcd_init(230400);  //  LCD *should* return in 230400 baud
 80026a2:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80026a6:	f7fe fe19 	bl	80012dc <lcd_init>
	osDelay(600);
 80026aa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80026ae:	f012 faa9 	bl	8014c04 <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 80026b2:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80026b6:	f7fe fdc9 	bl	800124c <lcd_uart_init>
	osDelay(600);
 80026ba:	f44f 7016 	mov.w	r0, #600	; 0x258
 80026be:	f012 faa1 	bl	8014c04 <osDelay>
	writelcdcmd("page 0");
 80026c2:	4882      	ldr	r0, [pc, #520]	; (80028cc <StarLPTask+0x2a0>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80026c4:	603c      	str	r4, [r7, #0]
	writelcdcmd("page 0");
 80026c6:	f7fe ff05 	bl	80014d4 <writelcdcmd>
	printf("LCD page 0\n");
 80026ca:	4881      	ldr	r0, [pc, #516]	; (80028d0 <StarLPTask+0x2a4>)
 80026cc:	f022 faaa 	bl	8024c24 <puts>
	osDelay(600);
 80026d0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80026d4:	f012 fa96 	bl	8014c04 <osDelay>
	writelcdcmd("cls BLACK");
 80026d8:	487e      	ldr	r0, [pc, #504]	; (80028d4 <StarLPTask+0x2a8>)
 80026da:	f7fe fefb 	bl	80014d4 <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 80026de:	f242 732b 	movw	r3, #10027	; 0x272b
 80026e2:	4622      	mov	r2, r4
 80026e4:	497c      	ldr	r1, [pc, #496]	; (80028d8 <StarLPTask+0x2ac>)
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4650      	mov	r0, sl
 80026ea:	230f      	movs	r3, #15
 80026ec:	f022 fbf0 	bl	8024ed0 <siprintf>
	writelcdcmd(str);
 80026f0:	4650      	mov	r0, sl
	lcduart_error = HAL_UART_ERROR_NONE;
 80026f2:	603c      	str	r4, [r7, #0]
	writelcdcmd(str);
 80026f4:	f7fe feee 	bl	80014d4 <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;
 80026f8:	603c      	str	r4, [r7, #0]
	while (main_init_done == 0) { // wait from main to complete the init {
 80026fa:	682c      	ldr	r4, [r5, #0]
 80026fc:	2c00      	cmp	r4, #0
 80026fe:	d149      	bne.n	8002794 <StarLPTask+0x168>
 8002700:	4e76      	ldr	r6, [pc, #472]	; (80028dc <StarLPTask+0x2b0>)
			writelcdcmd(strcat(str, "...\""));
 8002702:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8002938 <StarLPTask+0x30c>
 8002706:	e017      	b.n	8002738 <StarLPTask+0x10c>
		switch (i & 3) {
 8002708:	f1b8 0f01 	cmp.w	r8, #1
 800270c:	f000 80a2 	beq.w	8002854 <StarLPTask+0x228>
			writelcdcmd(strcat(str, ".\""));
 8002710:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <StarLPTask+0x2b4>)
 8002712:	4650      	mov	r0, sl
 8002714:	881a      	ldrh	r2, [r3, #0]
 8002716:	789b      	ldrb	r3, [r3, #2]
 8002718:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
 800271c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8002720:	f7fe fed8 	bl	80014d4 <writelcdcmd>
		osDelay(250);
 8002724:	20fa      	movs	r0, #250	; 0xfa
		i++;
 8002726:	3401      	adds	r4, #1
		osDelay(250);
 8002728:	f012 fa6c 	bl	8014c04 <osDelay>
		if (!(netif_is_link_up(&gnetif))) {
 800272c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8002730:	075a      	lsls	r2, r3, #29
 8002732:	d529      	bpl.n	8002788 <StarLPTask+0x15c>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002734:	682b      	ldr	r3, [r5, #0]
 8002736:	bb6b      	cbnz	r3, 8002794 <StarLPTask+0x168>
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8002738:	f8df e200 	ldr.w	lr, [pc, #512]	; 800293c <StarLPTask+0x310>
 800273c:	46d4      	mov	ip, sl
		switch (i & 3) {
 800273e:	f004 0803 	and.w	r8, r4, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8002742:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800274a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800274e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002752:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		switch (i & 3) {
 8002756:	f1b8 0f02 	cmp.w	r8, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 800275a:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800275e:	f82c 3b02 	strh.w	r3, [ip], #2
 8002762:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8002766:	f88c 3000 	strb.w	r3, [ip]
		switch (i & 3) {
 800276a:	d07b      	beq.n	8002864 <StarLPTask+0x238>
 800276c:	f1b8 0f03 	cmp.w	r8, #3
 8002770:	d1ca      	bne.n	8002708 <StarLPTask+0xdc>
			writelcdcmd(strcat(str, "....\""));
 8002772:	4b5c      	ldr	r3, [pc, #368]	; (80028e4 <StarLPTask+0x2b8>)
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	889b      	ldrh	r3, [r3, #4]
 8002778:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 800277c:	4650      	mov	r0, sl
 800277e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 8002782:	f7fe fea7 	bl	80014d4 <writelcdcmd>
			break;
 8002786:	e7cd      	b.n	8002724 <StarLPTask+0xf8>
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 8002788:	4857      	ldr	r0, [pc, #348]	; (80028e8 <StarLPTask+0x2bc>)
 800278a:	f7fe fea3 	bl	80014d4 <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 800278e:	682b      	ldr	r3, [r5, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0d1      	beq.n	8002738 <StarLPTask+0x10c>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002794:	2400      	movs	r4, #0
	writelcdcmd("ref 0");		// refresh screen
 8002796:	4855      	ldr	r0, [pc, #340]	; (80028ec <StarLPTask+0x2c0>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002798:	4e55      	ldr	r6, [pc, #340]	; (80028f0 <StarLPTask+0x2c4>)
	lcduart_error = HAL_UART_ERROR_NONE;
 800279a:	603c      	str	r4, [r7, #0]
	writelcdcmd("ref 0");		// refresh screen
 800279c:	f7fe fe9a 	bl	80014d4 <writelcdcmd>
	writelcdcmd("page 0");
 80027a0:	484a      	ldr	r0, [pc, #296]	; (80028cc <StarLPTask+0x2a0>)
	int last3min = 0;
 80027a2:	46a0      	mov	r8, r4
	lcduart_error = HAL_UART_ERROR_NONE;
 80027a4:	603c      	str	r4, [r7, #0]
	int last3min = 0;
 80027a6:	9407      	str	r4, [sp, #28]
	writelcdcmd("page 0");
 80027a8:	f7fe fe94 	bl	80014d4 <writelcdcmd>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80027ac:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <StarLPTask+0x28c>)
	uint16_t onesectimer = 0;
 80027ae:	46c1      	mov	r9, r8
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80027b0:	4950      	ldr	r1, [pc, #320]	; (80028f4 <StarLPTask+0x2c8>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80027b2:	f8b3 005c 	ldrh.w	r0, [r3, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80027b6:	4f50      	ldr	r7, [pc, #320]	; (80028f8 <StarLPTask+0x2cc>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80027b8:	f893 4070 	ldrb.w	r4, [r3, #112]	; 0x70
 80027bc:	b280      	uxth	r0, r0
 80027be:	f893 5071 	ldrb.w	r5, [r3, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80027c2:	f8d1 2420 	ldr.w	r2, [r1, #1056]	; 0x420
 80027c6:	f8d1 3424 	ldr.w	r3, [r1, #1060]	; 0x424
 80027ca:	9001      	str	r0, [sp, #4]
 80027cc:	484b      	ldr	r0, [pc, #300]	; (80028fc <StarLPTask+0x2d0>)
 80027ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80027d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80027d6:	f8d1 1428 	ldr.w	r1, [r1, #1064]	; 0x428
	gainchanged = 0;
 80027da:	4647      	mov	r7, r8
				agc = (agc) ? 0 : 1;
 80027dc:	4d48      	ldr	r5, [pc, #288]	; (8002900 <StarLPTask+0x2d4>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80027de:	9100      	str	r1, [sp, #0]
 80027e0:	4948      	ldr	r1, [pc, #288]	; (8002904 <StarLPTask+0x2d8>)
 80027e2:	f022 fb75 	bl	8024ed0 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 80027e6:	4848      	ldr	r0, [pc, #288]	; (8002908 <StarLPTask+0x2dc>)
 80027e8:	f00c faa4 	bl	800ed34 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 80027ec:	4b47      	ldr	r3, [pc, #284]	; (800290c <StarLPTask+0x2e0>)
 80027ee:	2201      	movs	r2, #1
	gainchanged = 0;
 80027f0:	f8cd 8018 	str.w	r8, [sp, #24]
	lptask_init_done = 1;		// this lp task has done its initialisation
 80027f4:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80027f6:	4846      	ldr	r0, [pc, #280]	; (8002910 <StarLPTask+0x2e4>)
		tenmstimer++;
 80027f8:	3701      	adds	r7, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80027fa:	f009 fca1 	bl	800c140 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 80027fe:	200a      	movs	r0, #10
 8002800:	f012 fa00 	bl	8014c04 <osDelay>
		globaladcnoise = abs(meanwindiff);
 8002804:	4b43      	ldr	r3, [pc, #268]	; (8002914 <StarLPTask+0x2e8>)
 8002806:	4a44      	ldr	r2, [pc, #272]	; (8002918 <StarLPTask+0x2ec>)
		tenmstimer++;
 8002808:	b2bf      	uxth	r7, r7
		globaladcnoise = abs(meanwindiff);
 800280a:	f9b3 3000 	ldrsh.w	r3, [r3]
				printf("AGC is ");
 800280e:	4e43      	ldr	r6, [pc, #268]	; (800291c <StarLPTask+0x2f0>)
		globaladcnoise = abs(meanwindiff);
 8002810:	2b00      	cmp	r3, #0
					printf("OFF\n");
 8002812:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002940 <StarLPTask+0x314>
		globaladcnoise = abs(meanwindiff);
 8002816:	bfb8      	it	lt
 8002818:	425b      	neglt	r3, r3
 800281a:	b29b      	uxth	r3, r3
 800281c:	6013      	str	r3, [r2, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 800281e:	09db      	lsrs	r3, r3, #7
 8002820:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <StarLPTask+0x2f4>)
 8002822:	3304      	adds	r3, #4
 8002824:	8013      	strh	r3, [r2, #0]
		while (xQueueReceive(consolerxq, &inch, 0)) {
 8002826:	2200      	movs	r2, #0
 8002828:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 800282c:	f8db 0000 	ldr.w	r0, [fp]
 8002830:	f012 fee4 	bl	80155fc <xQueueReceive>
 8002834:	2800      	cmp	r0, #0
 8002836:	f000 8085 	beq.w	8002944 <StarLPTask+0x318>
			if (inch == 0x03) {		// control C
 800283a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 800283e:	2803      	cmp	r0, #3
 8002840:	d025      	beq.n	800288e <StarLPTask+0x262>
			if ((isdigit(inch)) && (agc == 0)) {
 8002842:	4b38      	ldr	r3, [pc, #224]	; (8002924 <StarLPTask+0x2f8>)
 8002844:	5cc3      	ldrb	r3, [r0, r3]
 8002846:	075b      	lsls	r3, r3, #29
 8002848:	d501      	bpl.n	800284e <StarLPTask+0x222>
 800284a:	882b      	ldrh	r3, [r5, #0]
 800284c:	b1b3      	cbz	r3, 800287c <StarLPTask+0x250>
				__io_putchar(inch); // putchar(inch);	// echo console rx to tx
 800284e:	f001 fc97 	bl	8004180 <__io_putchar>
 8002852:	e7e8      	b.n	8002826 <StarLPTask+0x1fa>
			writelcdcmd(strcat(str, "..\""));
 8002854:	4b34      	ldr	r3, [pc, #208]	; (8002928 <StarLPTask+0x2fc>)
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 800285c:	4650      	mov	r0, sl
 800285e:	f7fe fe39 	bl	80014d4 <writelcdcmd>
			break;
 8002862:	e75f      	b.n	8002724 <StarLPTask+0xf8>
			writelcdcmd(strcat(str, "...\""));
 8002864:	f8d9 0000 	ldr.w	r0, [r9]
 8002868:	f899 3004 	ldrb.w	r3, [r9, #4]
 800286c:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8002870:	4650      	mov	r0, sl
 8002872:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 8002876:	f7fe fe2d 	bl	80014d4 <writelcdcmd>
			break;
 800287a:	e753      	b.n	8002724 <StarLPTask+0xf8>
				setpgagain(inch - '0');
 800287c:	3830      	subs	r0, #48	; 0x30
 800287e:	f002 f8fb 	bl	8004a78 <setpgagain>
				printf("Manually setting PGA gain to %c\n", inch);
 8002882:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8002886:	4829      	ldr	r0, [pc, #164]	; (800292c <StarLPTask+0x300>)
 8002888:	f022 f930 	bl	8024aec <iprintf>
 800288c:	e7cb      	b.n	8002826 <StarLPTask+0x1fa>
				agc = (agc) ? 0 : 1;
 800288e:	882b      	ldrh	r3, [r5, #0]
				printf("AGC is ");
 8002890:	4630      	mov	r0, r6
				agc = (agc) ? 0 : 1;
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	802b      	strh	r3, [r5, #0]
				printf("AGC is ");
 800289a:	f022 f927 	bl	8024aec <iprintf>
				if (agc)
 800289e:	882b      	ldrh	r3, [r5, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8135 	beq.w	8002b10 <StarLPTask+0x4e4>
					printf("ON\n");
 80028a6:	4822      	ldr	r0, [pc, #136]	; (8002930 <StarLPTask+0x304>)
 80028a8:	f022 f9bc 	bl	8024c24 <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 80028ac:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 80028b0:	e7c7      	b.n	8002842 <StarLPTask+0x216>
 80028b2:	bf00      	nop
 80028b4:	08028b80 	.word	0x08028b80
 80028b8:	20002bfc 	.word	0x20002bfc
 80028bc:	20001d50 	.word	0x20001d50
 80028c0:	20001750 	.word	0x20001750
 80028c4:	20002640 	.word	0x20002640
 80028c8:	200029ec 	.word	0x200029ec
 80028cc:	08029c74 	.word	0x08029c74
 80028d0:	08029c70 	.word	0x08029c70
 80028d4:	08029c7c 	.word	0x08029c7c
 80028d8:	08029c88 	.word	0x08029c88
 80028dc:	20002ec8 	.word	0x20002ec8
 80028e0:	08029d44 	.word	0x08029d44
 80028e4:	08029d54 	.word	0x08029d54
 80028e8:	08029d5c 	.word	0x08029d5c
 80028ec:	08029cc4 	.word	0x08029cc4
 80028f0:	20002e10 	.word	0x20002e10
 80028f4:	1ff0f000 	.word	0x1ff0f000
 80028f8:	20002db4 	.word	0x20002db4
 80028fc:	20000084 	.word	0x20000084
 8002900:	20000010 	.word	0x20000010
 8002904:	08029ccc 	.word	0x08029ccc
 8002908:	200025f4 	.word	0x200025f4
 800290c:	200029e8 	.word	0x200029e8
 8002910:	20002294 	.word	0x20002294
 8002914:	20000748 	.word	0x20000748
 8002918:	200006f8 	.word	0x200006f8
 800291c:	08029d98 	.word	0x08029d98
 8002920:	20000000 	.word	0x20000000
 8002924:	08044f15 	.word	0x08044f15
 8002928:	08029d48 	.word	0x08029d48
 800292c:	08029da8 	.word	0x08029da8
 8002930:	08029da0 	.word	0x08029da0
 8002934:	20001d54 	.word	0x20001d54
 8002938:	08029d4c 	.word	0x08029d4c
 800293c:	08029d14 	.word	0x08029d14
 8002940:	08029da4 	.word	0x08029da4
		if (!(ledsenabled)) {
 8002944:	4b9c      	ldr	r3, [pc, #624]	; (8002bb8 <StarLPTask+0x58c>)
 8002946:	4604      	mov	r4, r0
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80e6 	beq.w	8002b1c <StarLPTask+0x4f0>
		} else if (ledhang) {	// trigger led
 8002950:	4a9a      	ldr	r2, [pc, #616]	; (8002bbc <StarLPTask+0x590>)
 8002952:	6813      	ldr	r3, [r2, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80e1 	beq.w	8002b1c <StarLPTask+0x4f0>
			ledhang--;
 800295a:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 800295c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002960:	4897      	ldr	r0, [pc, #604]	; (8002bc0 <StarLPTask+0x594>)
			ledhang--;
 8002962:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002964:	2201      	movs	r2, #1
 8002966:	f008 fd67 	bl	800b438 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 800296a:	4996      	ldr	r1, [pc, #600]	; (8002bc4 <StarLPTask+0x598>)
 800296c:	4896      	ldr	r0, [pc, #600]	; (8002bc8 <StarLPTask+0x59c>)
 800296e:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 8002970:	6803      	ldr	r3, [r0, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	f040 80d9 	bne.w	8002b2a <StarLPTask+0x4fe>
		processnex();		// process Nextion
 8002978:	f7ff fbe2 	bl	8002140 <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 800297c:	4a93      	ldr	r2, [pc, #588]	; (8002bcc <StarLPTask+0x5a0>)
 800297e:	1cfb      	adds	r3, r7, #3
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	4a92      	ldr	r2, [pc, #584]	; (8002bd0 <StarLPTask+0x5a4>)
 8002986:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 800298a:	d31e      	bcc.n	80029ca <StarLPTask+0x39e>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 800298c:	4b8d      	ldr	r3, [pc, #564]	; (8002bc4 <StarLPTask+0x598>)
 800298e:	4c91      	ldr	r4, [pc, #580]	; (8002bd4 <StarLPTask+0x5a8>)
 8002990:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	f103 0219 	add.w	r2, r3, #25
 8002998:	4291      	cmp	r1, r2
 800299a:	f200 820c 	bhi.w	8002db6 <StarLPTask+0x78a>
				if (jabbertimeout) {
 800299e:	4a8e      	ldr	r2, [pc, #568]	; (8002bd8 <StarLPTask+0x5ac>)
 80029a0:	6813      	ldr	r3, [r2, #0]
 80029a2:	b10b      	cbz	r3, 80029a8 <StarLPTask+0x37c>
					jabbertimeout--;		// de-arm count
 80029a4:	3b01      	subs	r3, #1
 80029a6:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 80029a8:	4b86      	ldr	r3, [pc, #536]	; (8002bc4 <StarLPTask+0x598>)
 80029aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ac:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 80029ae:	9b06      	ldr	r3, [sp, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8221 	beq.w	8002df8 <StarLPTask+0x7cc>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 80029b6:	4b89      	ldr	r3, [pc, #548]	; (8002bdc <StarLPTask+0x5b0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 81d2 	beq.w	8002d64 <StarLPTask+0x738>
 80029c0:	4b87      	ldr	r3, [pc, #540]	; (8002be0 <StarLPTask+0x5b4>)
			} else if (lcd_currentpage == 1) {
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	f000 8258 	beq.w	8002e7a <StarLPTask+0x84e>
				lcd_showvars();
 80029ca:	4a86      	ldr	r2, [pc, #536]	; (8002be4 <StarLPTask+0x5b8>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 80029cc:	f107 030b 	add.w	r3, r7, #11
				lcd_showvars();
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 80029d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80029d8:	3a01      	subs	r2, #1
 80029da:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 80029de:	f080 80dd 	bcs.w	8002b9c <StarLPTask+0x570>
			lcd_trigplot();		// update lcd trigger and noise plots
 80029e2:	4a81      	ldr	r2, [pc, #516]	; (8002be8 <StarLPTask+0x5bc>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 80029e4:	f107 031b 	add.w	r3, r7, #27
			lcd_trigplot();		// update lcd trigger and noise plots
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 80029ec:	4a7f      	ldr	r2, [pc, #508]	; (8002bec <StarLPTask+0x5c0>)
 80029ee:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 80029f2:	d31a      	bcc.n	8002a2a <StarLPTask+0x3fe>
			if (agc) {
 80029f4:	882b      	ldrh	r3, [r5, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 81b2 	beq.w	8002d60 <StarLPTask+0x734>
				trigsin10sec = trigs - prevtrigs;
 80029fc:	4b72      	ldr	r3, [pc, #456]	; (8002bc8 <StarLPTask+0x59c>)
 80029fe:	4c7c      	ldr	r4, [pc, #496]	; (8002bf0 <StarLPTask+0x5c4>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002a00:	4e7c      	ldr	r6, [pc, #496]	; (8002bf4 <StarLPTask+0x5c8>)
				trigsin10sec = trigs - prevtrigs;
 8002a02:	681a      	ldr	r2, [r3, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002a04:	8831      	ldrh	r1, [r6, #0]
				trigsin10sec = trigs - prevtrigs;
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8002c58 <StarLPTask+0x62c>
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002a0c:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 8002a0e:	eba2 0303 	sub.w	r3, r2, r3
 8002a12:	f8c8 3000 	str.w	r3, [r8]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002a16:	d802      	bhi.n	8002a1e <StarLPTask+0x3f2>
					if (trigsin10sec < MINTRIGS10S)
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	f240 825a 	bls.w	8002ed2 <StarLPTask+0x8a6>
				if (trigsin10sec > MAXTRIGS10S)
 8002a1e:	2b0a      	cmp	r3, #10
 8002a20:	f200 822e 	bhi.w	8002e80 <StarLPTask+0x854>
			gainchanged = 0;
 8002a24:	2300      	movs	r3, #0
				prevtrigs = trigs;
 8002a26:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 8002a28:	9306      	str	r3, [sp, #24]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 8002a2a:	f640 338c 	movw	r3, #2956	; 0xb8c
 8002a2e:	429f      	cmp	r7, r3
 8002a30:	d94e      	bls.n	8002ad0 <StarLPTask+0x4a4>
			if (gpsgood == 0) {	// gps is not talking to us
 8002a32:	4b71      	ldr	r3, [pc, #452]	; (8002bf8 <StarLPTask+0x5cc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 818e 	bne.w	8002d58 <StarLPTask+0x72c>
				printf("GPS serial comms problem?\n");
 8002a3c:	486f      	ldr	r0, [pc, #444]	; (8002bfc <StarLPTask+0x5d0>)
 8002a3e:	f022 f8f1 	bl	8024c24 <puts>
				if (gpsbadcount++ > 9) {
 8002a42:	496f      	ldr	r1, [pc, #444]	; (8002c00 <StarLPTask+0x5d4>)
 8002a44:	680b      	ldr	r3, [r1, #0]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	600a      	str	r2, [r1, #0]
 8002a4c:	f300 824b 	bgt.w	8002ee6 <StarLPTask+0x8ba>
			if (psensor == MPL115A2) {
 8002a50:	4b6c      	ldr	r3, [pc, #432]	; (8002c04 <StarLPTask+0x5d8>)
			gpsgood = 0;			// reset the good flag
 8002a52:	2200      	movs	r2, #0
 8002a54:	4968      	ldr	r1, [pc, #416]	; (8002bf8 <StarLPTask+0x5cc>)
			if (psensor == MPL115A2) {
 8002a56:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 8002a58:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	f000 8204 	beq.w	8002e68 <StarLPTask+0x83c>
			} else if (psensor == MPL3115A2) {
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	f000 8223 	beq.w	8002eac <StarLPTask+0x880>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8002a66:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <StarLPTask+0x5dc>)
			tenmstimer = 0;
 8002a68:	2700      	movs	r7, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8002a6a:	4a56      	ldr	r2, [pc, #344]	; (8002bc4 <StarLPTask+0x598>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8002a72:	0e1a      	lsrs	r2, r3, #24
 8002a74:	4865      	ldr	r0, [pc, #404]	; (8002c0c <StarLPTask+0x5e0>)
 8002a76:	b289      	uxth	r1, r1
 8002a78:	9202      	str	r2, [sp, #8]
 8002a7a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002a7e:	9201      	str	r2, [sp, #4]
 8002a80:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	9200      	str	r2, [sp, #0]
 8002a88:	f242 722b 	movw	r2, #10027	; 0x272b
 8002a8c:	f022 f82e 	bl	8024aec <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 8002a90:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <StarLPTask+0x5e4>)
 8002a92:	4a60      	ldr	r2, [pc, #384]	; (8002c14 <StarLPTask+0x5e8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	494c      	ldr	r1, [pc, #304]	; (8002bc8 <StarLPTask+0x59c>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	485e      	ldr	r0, [pc, #376]	; (8002c18 <StarLPTask+0x5ec>)
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	9304      	str	r3, [sp, #16]
 8002aa2:	4b5e      	ldr	r3, [pc, #376]	; (8002c1c <StarLPTask+0x5f0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	9302      	str	r3, [sp, #8]
 8002aaa:	4b5d      	ldr	r3, [pc, #372]	; (8002c20 <StarLPTask+0x5f4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	9303      	str	r3, [sp, #12]
 8002ab0:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <StarLPTask+0x5f8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	4b4f      	ldr	r3, [pc, #316]	; (8002bf4 <StarLPTask+0x5c8>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	4b5a      	ldr	r3, [pc, #360]	; (8002c28 <StarLPTask+0x5fc>)
 8002abe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ac2:	4b5a      	ldr	r3, [pc, #360]	; (8002c2c <StarLPTask+0x600>)
 8002ac4:	9305      	str	r3, [sp, #20]
 8002ac6:	4b5a      	ldr	r3, [pc, #360]	; (8002c30 <StarLPTask+0x604>)
 8002ac8:	6809      	ldr	r1, [r1, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 f80e 	bl	8024aec <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 8002ad0:	f109 0315 	add.w	r3, r9, #21
 8002ad4:	4a57      	ldr	r2, [pc, #348]	; (8002c34 <StarLPTask+0x608>)
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	4a56      	ldr	r2, [pc, #344]	; (8002c38 <StarLPTask+0x60c>)
 8002ade:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002ae2:	d30b      	bcc.n	8002afc <StarLPTask+0x4d0>
 8002ae4:	9b07      	ldr	r3, [sp, #28]
 8002ae6:	4599      	cmp	r9, r3
 8002ae8:	d008      	beq.n	8002afc <StarLPTask+0x4d0>
			if (boosttrys > 0)		// timer for boost gain oscillating
 8002aea:	4a54      	ldr	r2, [pc, #336]	; (8002c3c <StarLPTask+0x610>)
 8002aec:	8813      	ldrh	r3, [r2, #0]
 8002aee:	b10b      	cbz	r3, 8002af4 <StarLPTask+0x4c8>
				boosttrys--;
 8002af0:	3b01      	subs	r3, #1
 8002af2:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();		// add a point to the pressure plot
 8002af4:	f7ff f8d8 	bl	8001ca8 <lcd_pressplot>
 8002af8:	f8cd 901c 	str.w	r9, [sp, #28]
		if (onesectimer > 900) {			// 15 mins
 8002afc:	f240 3385 	movw	r3, #901	; 0x385
 8002b00:	4599      	cmp	r9, r3
 8002b02:	f47f ae78 	bne.w	80027f6 <StarLPTask+0x1ca>
			onesectimer = 0;
 8002b06:	f04f 0900 	mov.w	r9, #0
			requestapisn();	//update s/n and udp target (reboot on fail)
 8002b0a:	f004 fb87 	bl	800721c <requestapisn>
 8002b0e:	e672      	b.n	80027f6 <StarLPTask+0x1ca>
					printf("OFF\n");
 8002b10:	4640      	mov	r0, r8
 8002b12:	f022 f887 	bl	8024c24 <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8002b16:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8002b1a:	e692      	b.n	8002842 <StarLPTask+0x216>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b22:	4827      	ldr	r0, [pc, #156]	; (8002bc0 <StarLPTask+0x594>)
 8002b24:	f008 fc88 	bl	800b438 <HAL_GPIO_WritePin>
 8002b28:	e71f      	b.n	800296a <StarLPTask+0x33e>
			if (soundenabled) {
 8002b2a:	4b45      	ldr	r3, [pc, #276]	; (8002c40 <StarLPTask+0x614>)
			trigs = statuspkt.trigcount;
 8002b2c:	6fca      	ldr	r2, [r1, #124]	; 0x7c
			if (soundenabled) {
 8002b2e:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 8002b30:	6002      	str	r2, [r0, #0]
			if (soundenabled) {
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 8173 	bne.w	8002e1e <StarLPTask+0x7f2>
 8002b38:	4e42      	ldr	r6, [pc, #264]	; (8002c44 <StarLPTask+0x618>)
				printf("sem wait 1a\n");
 8002b3a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8002c5c <StarLPTask+0x630>
 8002b3e:	e002      	b.n	8002b46 <StarLPTask+0x51a>
 8002b40:	4640      	mov	r0, r8
 8002b42:	f022 f86f 	bl	8024c24 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8002b46:	2101      	movs	r1, #1
 8002b48:	6830      	ldr	r0, [r6, #0]
 8002b4a:	f012 fe1f 	bl	801578c <xQueueSemaphoreTake>
 8002b4e:	2801      	cmp	r0, #1
 8002b50:	d1f6      	bne.n	8002b40 <StarLPTask+0x514>
			strcpy(str, ctime(&epochtime));		// ctime
 8002b52:	483d      	ldr	r0, [pc, #244]	; (8002c48 <StarLPTask+0x61c>)
 8002b54:	f020 fdac 	bl	80236b0 <ctime>
 8002b58:	4601      	mov	r1, r0
 8002b5a:	4650      	mov	r0, sl
 8002b5c:	f022 fa49 	bl	8024ff2 <stpcpy>
			i = 0;
 8002b60:	2300      	movs	r3, #0
			while (i < strlen(str)) {
 8002b62:	eba0 000a 	sub.w	r0, r0, sl
 8002b66:	4939      	ldr	r1, [pc, #228]	; (8002c4c <StarLPTask+0x620>)
 8002b68:	e008      	b.n	8002b7c <StarLPTask+0x550>
				if ((str[i] != '\n') && (str[i] != '\r'))
 8002b6a:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8002b6e:	2a0a      	cmp	r2, #10
 8002b70:	d003      	beq.n	8002b7a <StarLPTask+0x54e>
 8002b72:	2a0d      	cmp	r2, #13
 8002b74:	d001      	beq.n	8002b7a <StarLPTask+0x54e>
					trigtimestr[n++] = str[i];
 8002b76:	550a      	strb	r2, [r1, r4]
 8002b78:	3401      	adds	r4, #1
				i++;
 8002b7a:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 8002b7c:	4283      	cmp	r3, r0
 8002b7e:	d3f4      	bcc.n	8002b6a <StarLPTask+0x53e>
			trigtimestr[n] = '\0';
 8002b80:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8002b82:	6830      	ldr	r0, [r6, #0]
			trigtimestr[n] = '\0';
 8002b84:	550b      	strb	r3, [r1, r4]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8002b86:	461a      	mov	r2, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f012 fb65 	bl	8015258 <xQueueGenericSend>
 8002b8e:	2801      	cmp	r0, #1
 8002b90:	f43f aef2 	beq.w	8002978 <StarLPTask+0x34c>
				printf("semaphore 1a release failed\n");
 8002b94:	482e      	ldr	r0, [pc, #184]	; (8002c50 <StarLPTask+0x624>)
 8002b96:	f022 f845 	bl	8024c24 <puts>
 8002b9a:	e6ed      	b.n	8002978 <StarLPTask+0x34c>
			if (ledsenabled)
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <StarLPTask+0x58c>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ba2:	4807      	ldr	r0, [pc, #28]	; (8002bc0 <StarLPTask+0x594>)
			if (ledsenabled)
 8002ba4:	881a      	ldrh	r2, [r3, #0]
 8002ba6:	2a00      	cmp	r2, #0
 8002ba8:	f000 8152 	beq.w	8002e50 <StarLPTask+0x824>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002bac:	f008 fc5e 	bl	800b46c <HAL_GPIO_TogglePin>
 8002bb0:	4e24      	ldr	r6, [pc, #144]	; (8002c44 <StarLPTask+0x618>)
				printf("sem wait 1b\n");
 8002bb2:	4c28      	ldr	r4, [pc, #160]	; (8002c54 <StarLPTask+0x628>)
 8002bb4:	e057      	b.n	8002c66 <StarLPTask+0x63a>
 8002bb6:	bf00      	nop
 8002bb8:	20000270 	.word	0x20000270
 8002bbc:	20000744 	.word	0x20000744
 8002bc0:	40020c00 	.word	0x40020c00
 8002bc4:	20002bfc 	.word	0x20002bfc
 8002bc8:	20002a18 	.word	0x20002a18
 8002bcc:	cccccccd 	.word	0xcccccccd
 8002bd0:	19999999 	.word	0x19999999
 8002bd4:	200029dc 	.word	0x200029dc
 8002bd8:	200006fc 	.word	0x200006fc
 8002bdc:	200016c0 	.word	0x200016c0
 8002be0:	200016bc 	.word	0x200016bc
 8002be4:	c28f5c29 	.word	0xc28f5c29
 8002be8:	26e978d5 	.word	0x26e978d5
 8002bec:	00418937 	.word	0x00418937
 8002bf0:	20002a08 	.word	0x20002a08
 8002bf4:	20000002 	.word	0x20000002
 8002bf8:	20002abc 	.word	0x20002abc
 8002bfc:	08029f5c 	.word	0x08029f5c
 8002c00:	20001d9c 	.word	0x20001d9c
 8002c04:	20002d3c 	.word	0x20002d3c
 8002c08:	200029fc 	.word	0x200029fc
 8002c0c:	08029fb8 	.word	0x08029fb8
 8002c10:	20002d44 	.word	0x20002d44
 8002c14:	10624dd3 	.word	0x10624dd3
 8002c18:	08029fd4 	.word	0x08029fd4
 8002c1c:	20002d34 	.word	0x20002d34
 8002c20:	20002d40 	.word	0x20002d40
 8002c24:	20002d38 	.word	0x20002d38
 8002c28:	20002d30 	.word	0x20002d30
 8002c2c:	20000054 	.word	0x20000054
 8002c30:	200006f8 	.word	0x200006f8
 8002c34:	a4fa4fa5 	.word	0xa4fa4fa5
 8002c38:	016c16c1 	.word	0x016c16c1
 8002c3c:	20002cb0 	.word	0x20002cb0
 8002c40:	20000276 	.word	0x20000276
 8002c44:	20002a10 	.word	0x20002a10
 8002c48:	20002ab0 	.word	0x20002ab0
 8002c4c:	2000023c 	.word	0x2000023c
 8002c50:	08029dd8 	.word	0x08029dd8
 8002c54:	08029e04 	.word	0x08029e04
 8002c58:	20002a1c 	.word	0x20002a1c
 8002c5c:	08029dcc 	.word	0x08029dcc
 8002c60:	4620      	mov	r0, r4
 8002c62:	f021 ffdf 	bl	8024c24 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8002c66:	2101      	movs	r1, #1
 8002c68:	6830      	ldr	r0, [r6, #0]
 8002c6a:	f012 fd8f 	bl	801578c <xQueueSemaphoreTake>
 8002c6e:	2801      	cmp	r0, #1
 8002c70:	d1f6      	bne.n	8002c60 <StarLPTask+0x634>
			strcpy(str, ctime(&epochtime));
 8002c72:	48a5      	ldr	r0, [pc, #660]	; (8002f08 <StarLPTask+0x8dc>)
 8002c74:	f020 fd1c 	bl	80236b0 <ctime>
 8002c78:	4601      	mov	r1, r0
 8002c7a:	4650      	mov	r0, sl
			sprintf(statstr,
 8002c7c:	4ca3      	ldr	r4, [pc, #652]	; (8002f0c <StarLPTask+0x8e0>)
			strcpy(str, ctime(&epochtime));
 8002c7e:	f022 f9b8 	bl	8024ff2 <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002c82:	eba0 000a 	sub.w	r0, r0, sl
 8002c86:	2200      	movs	r2, #0
			sprintf(nowtimestr, "\"%s\"", str);
 8002c88:	49a1      	ldr	r1, [pc, #644]	; (8002f10 <StarLPTask+0x8e4>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002c8a:	f100 0378 	add.w	r3, r0, #120	; 0x78
			sprintf(nowtimestr, "\"%s\"", str);
 8002c8e:	48a1      	ldr	r0, [pc, #644]	; (8002f14 <StarLPTask+0x8e8>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002c90:	446b      	add	r3, sp
 8002c92:	f803 2c55 	strb.w	r2, [r3, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 8002c96:	4652      	mov	r2, sl
 8002c98:	f022 f91a 	bl	8024ed0 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8002c9c:	4b9e      	ldr	r3, [pc, #632]	; (8002f18 <StarLPTask+0x8ec>)
 8002c9e:	4a9f      	ldr	r2, [pc, #636]	; (8002f1c <StarLPTask+0x8f0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	499e      	ldr	r1, [pc, #632]	; (8002f20 <StarLPTask+0x8f4>)
 8002ca6:	489f      	ldr	r0, [pc, #636]	; (8002f24 <StarLPTask+0x8f8>)
 8002ca8:	f022 f912 	bl	8024ed0 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8002cac:	4b9e      	ldr	r3, [pc, #632]	; (8002f28 <StarLPTask+0x8fc>)
 8002cae:	4a9f      	ldr	r2, [pc, #636]	; (8002f2c <StarLPTask+0x900>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	499a      	ldr	r1, [pc, #616]	; (8002f20 <StarLPTask+0x8f4>)
 8002cb6:	489e      	ldr	r0, [pc, #632]	; (8002f30 <StarLPTask+0x904>)
 8002cb8:	f022 f90a 	bl	8024ed0 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002cbc:	4b9d      	ldr	r3, [pc, #628]	; (8002f34 <StarLPTask+0x908>)
			sprintf(statstr,
 8002cbe:	499e      	ldr	r1, [pc, #632]	; (8002f38 <StarLPTask+0x90c>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8002cc4:	489d      	ldr	r0, [pc, #628]	; (8002f3c <StarLPTask+0x910>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bfb8      	it	lt
 8002cca:	425b      	neglt	r3, r3
			sprintf(statstr,
 8002ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	4b9b      	ldr	r3, [pc, #620]	; (8002f40 <StarLPTask+0x914>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cda:	9302      	str	r3, [sp, #8]
 8002cdc:	4b99      	ldr	r3, [pc, #612]	; (8002f44 <StarLPTask+0x918>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	9303      	str	r3, [sp, #12]
 8002ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ce4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	4b97      	ldr	r3, [pc, #604]	; (8002f48 <StarLPTask+0x91c>)
 8002cea:	f022 f8f1 	bl	8024ed0 <siprintf>
			if (gpslocked) {
 8002cee:	4b97      	ldr	r3, [pc, #604]	; (8002f4c <StarLPTask+0x920>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 809d 	beq.w	8002e32 <StarLPTask+0x806>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 8002cf8:	7ee2      	ldrb	r2, [r4, #27]
 8002cfa:	69e3      	ldr	r3, [r4, #28]
 8002cfc:	6a21      	ldr	r1, [r4, #32]
 8002cfe:	4894      	ldr	r0, [pc, #592]	; (8002f50 <StarLPTask+0x924>)
 8002d00:	9100      	str	r1, [sp, #0]
 8002d02:	4994      	ldr	r1, [pc, #592]	; (8002f54 <StarLPTask+0x928>)
 8002d04:	f022 f8e4 	bl	8024ed0 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6830      	ldr	r0, [r6, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f012 faa2 	bl	8015258 <xQueueGenericSend>
 8002d14:	2801      	cmp	r0, #1
 8002d16:	d002      	beq.n	8002d1e <StarLPTask+0x6f2>
				printf("semaphore 1b release failed\n");
 8002d18:	488f      	ldr	r0, [pc, #572]	; (8002f58 <StarLPTask+0x92c>)
 8002d1a:	f021 ff83 	bl	8024c24 <puts>
			onesectimer++;
 8002d1e:	f109 0901 	add.w	r9, r9, #1
				printf("sem wait 1c\n");
 8002d22:	4c8e      	ldr	r4, [pc, #568]	; (8002f5c <StarLPTask+0x930>)
			onesectimer++;
 8002d24:	fa1f f989 	uxth.w	r9, r9
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8002d28:	e002      	b.n	8002d30 <StarLPTask+0x704>
				printf("sem wait 1c\n");
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f021 ff7a 	bl	8024c24 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8002d30:	2119      	movs	r1, #25
 8002d32:	6830      	ldr	r0, [r6, #0]
 8002d34:	f012 fd2a 	bl	801578c <xQueueSemaphoreTake>
 8002d38:	2801      	cmp	r0, #1
 8002d3a:	d1f6      	bne.n	8002d2a <StarLPTask+0x6fe>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	6830      	ldr	r0, [r6, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4619      	mov	r1, r3
 8002d44:	f012 fa88 	bl	8015258 <xQueueGenericSend>
 8002d48:	2801      	cmp	r0, #1
 8002d4a:	d002      	beq.n	8002d52 <StarLPTask+0x726>
				printf("semaphore 1c release failed\n");
 8002d4c:	4884      	ldr	r0, [pc, #528]	; (8002f60 <StarLPTask+0x934>)
 8002d4e:	f021 ff69 	bl	8024c24 <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 8002d52:	f7fe feab 	bl	8001aac <lcd_trigplot>
 8002d56:	e644      	b.n	80029e2 <StarLPTask+0x3b6>
				gpsbadcount = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	4a82      	ldr	r2, [pc, #520]	; (8002f64 <StarLPTask+0x938>)
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e677      	b.n	8002a50 <StarLPTask+0x424>
			gainchanged = 0;
 8002d60:	9306      	str	r3, [sp, #24]
 8002d62:	e662      	b.n	8002a2a <StarLPTask+0x3fe>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8002d64:	4c80      	ldr	r4, [pc, #512]	; (8002f68 <StarLPTask+0x93c>)
 8002d66:	8823      	ldrh	r3, [r4, #0]
 8002d68:	454b      	cmp	r3, r9
 8002d6a:	4b80      	ldr	r3, [pc, #512]	; (8002f6c <StarLPTask+0x940>)
 8002d6c:	f43f ae29 	beq.w	80029c2 <StarLPTask+0x396>
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	2a00      	cmp	r2, #0
 8002d74:	f47f ae25 	bne.w	80029c2 <StarLPTask+0x396>
				timeinfo = *localtime(&localepochtime);
 8002d78:	487d      	ldr	r0, [pc, #500]	; (8002f70 <StarLPTask+0x944>)
 8002d7a:	f020 fdbb 	bl	80238f4 <localtime>
 8002d7e:	4e7d      	ldr	r6, [pc, #500]	; (8002f74 <StarLPTask+0x948>)
 8002d80:	4684      	mov	ip, r0
 8002d82:	46b6      	mov	lr, r6
 8002d84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002d88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002d8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002d90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002d94:	f8dc 3000 	ldr.w	r3, [ip]
				lastsec = onesectimer;
 8002d98:	f8a4 9000 	strh.w	r9, [r4]
				timeinfo = *localtime(&localepochtime);
 8002d9c:	f8ce 3000 	str.w	r3, [lr]
				lcd_time();
 8002da0:	f7fe fc72 	bl	8001688 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 8002da4:	4b74      	ldr	r3, [pc, #464]	; (8002f78 <StarLPTask+0x94c>)
 8002da6:	69f2      	ldr	r2, [r6, #28]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	f43f ae0d 	beq.w	80029ca <StarLPTask+0x39e>
					lcd_date();
 8002db0:	f7fe fcc0 	bl	8001734 <lcd_date>
 8002db4:	e609      	b.n	80029ca <StarLPTask+0x39e>
				statuspkt.jabcnt++;
 8002db6:	4955      	ldr	r1, [pc, #340]	; (8002f0c <StarLPTask+0x8e0>)
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002db8:	4870      	ldr	r0, [pc, #448]	; (8002f7c <StarLPTask+0x950>)
				statuspkt.jabcnt++;
 8002dba:	f8b1 2086 	ldrh.w	r2, [r1, #134]	; 0x86
 8002dbe:	3201      	adds	r2, #1
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	f8a1 2086 	strh.w	r2, [r1, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8002dc6:	2201      	movs	r2, #1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002dc8:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8002dca:	1ac9      	subs	r1, r1, r3
				jabbertimeout = 1;		// 100mS seconds pause
 8002dcc:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <StarLPTask+0x954>)
 8002dce:	601a      	str	r2, [r3, #0]
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002dd0:	f021 fe8c 	bl	8024aec <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 8002dd4:	4b6b      	ldr	r3, [pc, #428]	; (8002f84 <StarLPTask+0x958>)
 8002dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dda:	b93b      	cbnz	r3, 8002dec <StarLPTask+0x7c0>
					if (trigthresh < 4095)
 8002ddc:	4a59      	ldr	r2, [pc, #356]	; (8002f44 <StarLPTask+0x918>)
 8002dde:	f640 71fe 	movw	r1, #4094	; 0xffe
 8002de2:	8813      	ldrh	r3, [r2, #0]
 8002de4:	428b      	cmp	r3, r1
 8002de6:	d801      	bhi.n	8002dec <StarLPTask+0x7c0>
						trigthresh++;
 8002de8:	3301      	adds	r3, #1
 8002dea:	8013      	strh	r3, [r2, #0]
				if (agc) {
 8002dec:	882b      	ldrh	r3, [r5, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d165      	bne.n	8002ebe <StarLPTask+0x892>
				jabtrigcnt = statuspkt.trigcount;
 8002df2:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <StarLPTask+0x8e0>)
 8002df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df6:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 8002df8:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <StarLPTask+0x95c>)
 8002dfa:	4a64      	ldr	r2, [pc, #400]	; (8002f8c <StarLPTask+0x960>)
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	dd27      	ble.n	8002e56 <StarLPTask+0x82a>
					if (trigthresh < 4095)
 8002e06:	484f      	ldr	r0, [pc, #316]	; (8002f44 <StarLPTask+0x918>)
 8002e08:	f640 74fe 	movw	r4, #4094	; 0xffe
 8002e0c:	8803      	ldrh	r3, [r0, #0]
 8002e0e:	42a3      	cmp	r3, r4
 8002e10:	d801      	bhi.n	8002e16 <StarLPTask+0x7ea>
						trigthresh++;
 8002e12:	3301      	adds	r3, #1
 8002e14:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 8002e16:	2300      	movs	r3, #0
 8002e18:	6011      	str	r1, [r2, #0]
 8002e1a:	9306      	str	r3, [sp, #24]
 8002e1c:	e5cb      	b.n	80029b6 <StarLPTask+0x38a>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8002e1e:	2308      	movs	r3, #8
 8002e20:	4a5b      	ldr	r2, [pc, #364]	; (8002f90 <StarLPTask+0x964>)
 8002e22:	2100      	movs	r1, #0
 8002e24:	485b      	ldr	r0, [pc, #364]	; (8002f94 <StarLPTask+0x968>)
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002e2c:	f005 fc7e 	bl	800872c <HAL_DAC_Start_DMA>
 8002e30:	e682      	b.n	8002b38 <StarLPTask+0x50c>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 8002e32:	f8df c178 	ldr.w	ip, [pc, #376]	; 8002fac <StarLPTask+0x980>
 8002e36:	4c46      	ldr	r4, [pc, #280]	; (8002f50 <StarLPTask+0x924>)
 8002e38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e44:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002e48:	f844 0b04 	str.w	r0, [r4], #4
 8002e4c:	8021      	strh	r1, [r4, #0]
 8002e4e:	e75b      	b.n	8002d08 <StarLPTask+0x6dc>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 8002e50:	f008 faf2 	bl	800b438 <HAL_GPIO_WritePin>
 8002e54:	e6ac      	b.n	8002bb0 <StarLPTask+0x584>
				if (n == 0) {		// no triggers in last 100mS
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1dd      	bne.n	8002e16 <StarLPTask+0x7ea>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 8002e5a:	483a      	ldr	r0, [pc, #232]	; (8002f44 <StarLPTask+0x918>)
 8002e5c:	8803      	ldrh	r3, [r0, #0]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d9d9      	bls.n	8002e16 <StarLPTask+0x7ea>
						trigthresh--;
 8002e62:	3b01      	subs	r3, #1
 8002e64:	8003      	strh	r3, [r0, #0]
 8002e66:	e7d6      	b.n	8002e16 <StarLPTask+0x7ea>
				if (getpressure115() != HAL_OK) {
 8002e68:	f001 ff10 	bl	8004c8c <getpressure115>
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	f43f adfa 	beq.w	8002a66 <StarLPTask+0x43a>
					printf("MPL115A2 error\n\r");
 8002e72:	4849      	ldr	r0, [pc, #292]	; (8002f98 <StarLPTask+0x96c>)
 8002e74:	f021 fe3a 	bl	8024aec <iprintf>
 8002e78:	e5f5      	b.n	8002a66 <StarLPTask+0x43a>
				lcd_showvars();
 8002e7a:	f7fe fc93 	bl	80017a4 <lcd_showvars>
 8002e7e:	e5a4      	b.n	80029ca <StarLPTask+0x39e>
					gainchanged = bumppga(-1);
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f001 febc 	bl	8004c00 <bumppga>
 8002e88:	b203      	sxth	r3, r0
 8002e8a:	9306      	str	r3, [sp, #24]
				prevtrigs = trigs;
 8002e8c:	4b43      	ldr	r3, [pc, #268]	; (8002f9c <StarLPTask+0x970>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 8002e92:	9b06      	ldr	r3, [sp, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f77f adc8 	ble.w	8002a2a <StarLPTask+0x3fe>
					if (trigthresh < (4095 - 10))
 8002e9a:	8833      	ldrh	r3, [r6, #0]
 8002e9c:	f640 72f4 	movw	r2, #4084	; 0xff4
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	f63f adc2 	bhi.w	8002a2a <StarLPTask+0x3fe>
						trigthresh += 5;
 8002ea6:	3305      	adds	r3, #5
 8002ea8:	8033      	strh	r3, [r6, #0]
 8002eaa:	e5be      	b.n	8002a2a <StarLPTask+0x3fe>
				if (getpressure3115() != HAL_OK) {
 8002eac:	f001 ff9c 	bl	8004de8 <getpressure3115>
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	f43f add8 	beq.w	8002a66 <StarLPTask+0x43a>
					printf("MPL3115A2 error\n\r");
 8002eb6:	483a      	ldr	r0, [pc, #232]	; (8002fa0 <StarLPTask+0x974>)
 8002eb8:	f021 fe18 	bl	8024aec <iprintf>
 8002ebc:	e5d3      	b.n	8002a66 <StarLPTask+0x43a>
					gainchanged = bumppga(-1);	// decrease gain
 8002ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec2:	f001 fe9d 	bl	8004c00 <bumppga>
 8002ec6:	b203      	sxth	r3, r0
 8002ec8:	9306      	str	r3, [sp, #24]
				jabtrigcnt = statuspkt.trigcount;
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <StarLPTask+0x8e0>)
 8002ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ece:	6023      	str	r3, [r4, #0]
 8002ed0:	e56d      	b.n	80029ae <StarLPTask+0x382>
						gainchanged = bumppga(1);
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f001 fe94 	bl	8004c00 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 8002ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8002edc:	2b0a      	cmp	r3, #10
 8002ede:	d8cf      	bhi.n	8002e80 <StarLPTask+0x854>
						gainchanged = bumppga(1);
 8002ee0:	b203      	sxth	r3, r0
 8002ee2:	9306      	str	r3, [sp, #24]
 8002ee4:	e7d2      	b.n	8002e8c <StarLPTask+0x860>
					printf("GPS bad - rebooting...\n");
 8002ee6:	482f      	ldr	r0, [pc, #188]	; (8002fa4 <StarLPTask+0x978>)
 8002ee8:	f021 fe9c 	bl	8024c24 <puts>
					osDelay(3000);
 8002eec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ef0:	f011 fe88 	bl	8014c04 <osDelay>
					rebootme(5);
 8002ef4:	2005      	movs	r0, #5
 8002ef6:	f7ff fb77 	bl	80025e8 <rebootme>
 8002efa:	4605      	mov	r5, r0
		printf("Console Rx Queue not created... rebooting...\n");
 8002efc:	482a      	ldr	r0, [pc, #168]	; (8002fa8 <StarLPTask+0x97c>)
 8002efe:	f021 fe91 	bl	8024c24 <puts>
		rebootme(0);
 8002f02:	4628      	mov	r0, r5
 8002f04:	f7ff fb70 	bl	80025e8 <rebootme>
 8002f08:	20002ab0 	.word	0x20002ab0
 8002f0c:	20002bfc 	.word	0x20002bfc
 8002f10:	08029e10 	.word	0x08029e10
 8002f14:	20000054 	.word	0x20000054
 8002f18:	20002d44 	.word	0x20002d44
 8002f1c:	20002d40 	.word	0x20002d40
 8002f20:	08029e18 	.word	0x08029e18
 8002f24:	20000230 	.word	0x20000230
 8002f28:	20002d34 	.word	0x20002d34
 8002f2c:	20002d38 	.word	0x20002d38
 8002f30:	20000074 	.word	0x20000074
 8002f34:	20000748 	.word	0x20000748
 8002f38:	08029e20 	.word	0x08029e20
 8002f3c:	20000128 	.word	0x20000128
 8002f40:	200006f4 	.word	0x200006f4
 8002f44:	20000002 	.word	0x20000002
 8002f48:	2000023c 	.word	0x2000023c
 8002f4c:	20002da8 	.word	0x20002da8
 8002f50:	20000014 	.word	0x20000014
 8002f54:	08029ec8 	.word	0x08029ec8
 8002f58:	08029f18 	.word	0x08029f18
 8002f5c:	08029f34 	.word	0x08029f34
 8002f60:	08029f40 	.word	0x08029f40
 8002f64:	20001d9c 	.word	0x20001d9c
 8002f68:	20000008 	.word	0x20000008
 8002f6c:	200016bc 	.word	0x200016bc
 8002f70:	20001758 	.word	0x20001758
 8002f74:	20001b34 	.word	0x20001b34
 8002f78:	200016b0 	.word	0x200016b0
 8002f7c:	08029df4 	.word	0x08029df4
 8002f80:	200006fc 	.word	0x200006fc
 8002f84:	20002d30 	.word	0x20002d30
 8002f88:	20000750 	.word	0x20000750
 8002f8c:	200029e4 	.word	0x200029e4
 8002f90:	0802a2d0 	.word	0x0802a2d0
 8002f94:	20001e9c 	.word	0x20001e9c
 8002f98:	08029f90 	.word	0x08029f90
 8002f9c:	20002a18 	.word	0x20002a18
 8002fa0:	08029fa4 	.word	0x08029fa4
 8002fa4:	08029f78 	.word	0x08029f78
 8002fa8:	08029c40 	.word	0x08029c40
 8002fac:	08029ef0 	.word	0x08029ef0

08002fb0 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	f005 bc57 	b.w	8008864 <HAL_DAC_Stop_DMA>
 8002fb6:	bf00      	nop

08002fb8 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8002fba:	6803      	ldr	r3, [r0, #0]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d02d      	beq.n	8003024 <HAL_TIM_IC_CaptureCallback+0x6c>
}
 8002fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002fca:	4c1a      	ldr	r4, [pc, #104]	; (8003034 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002fce:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 8002fd0:	4a1a      	ldr	r2, [pc, #104]	; (800303c <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002fd2:	3101      	adds	r1, #1
 8002fd4:	481a      	ldr	r0, [pc, #104]	; (8003040 <HAL_TIM_IC_CaptureCallback+0x88>)
		if (!(ledsenabled)) {
 8002fd6:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002fd8:	fba3 5301 	umull	r5, r3, r3, r1
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002fe2:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002fea:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002fec:	4815      	ldr	r0, [pc, #84]	; (8003044 <HAL_TIM_IC_CaptureCallback+0x8c>)
		if (!(ledsenabled)) {
 8002fee:	b1b2      	cbz	r2, 800301e <HAL_TIM_IC_CaptureCallback+0x66>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002ff0:	f008 fa3c 	bl	800b46c <HAL_GPIO_TogglePin>
		diff = lastcap;
 8002ff4:	4d14      	ldr	r5, [pc, #80]	; (8003048 <HAL_TIM_IC_CaptureCallback+0x90>)
	uint32_t sum = 0;
 8002ff6:	2100      	movs	r1, #0
		diff = lastcap;
 8002ff8:	4e14      	ldr	r6, [pc, #80]	; (800304c <HAL_TIM_IC_CaptureCallback+0x94>)
 8002ffa:	462b      	mov	r3, r5
 8002ffc:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8003000:	6837      	ldr	r7, [r6, #0]
		data[i] = data[i + 1];		// old data is low index
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8003008:	4298      	cmp	r0, r3
		sum += data[i];
 800300a:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 800300c:	d1f9      	bne.n	8003002 <HAL_TIM_IC_CaptureCallback+0x4a>
	sum += new;
 800300e:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_TIM_IC_CaptureCallback+0x98>)
	data[15] = new;		// new data at the end
 8003012:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8003014:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8003016:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8003018:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 800301a:	6033      	str	r3, [r6, #0]
}
 800301c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 800301e:	f008 fa0b 	bl	800b438 <HAL_GPIO_WritePin>
 8003022:	e7e7      	b.n	8002ff4 <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 8003024:	480b      	ldr	r0, [pc, #44]	; (8003054 <HAL_TIM_IC_CaptureCallback+0x9c>)
}
 8003026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 800302a:	f021 bdfb 	b.w	8024c24 <puts>
 800302e:	bf00      	nop
 8003030:	40000800 	.word	0x40000800
 8003034:	20002bfc 	.word	0x20002bfc
 8003038:	88888889 	.word	0x88888889
 800303c:	20000270 	.word	0x20000270
 8003040:	20000754 	.word	0x20000754
 8003044:	40020c00 	.word	0x40020c00
 8003048:	20001d58 	.word	0x20001d58
 800304c:	200029e0 	.word	0x200029e0
 8003050:	20000768 	.word	0x20000768
 8003054:	0802a034 	.word	0x0802a034

08003058 <getboardpcb>:
void getboardpcb() {
 8003058:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 800305a:	2101      	movs	r1, #1
 800305c:	4804      	ldr	r0, [pc, #16]	; (8003070 <getboardpcb+0x18>)
 800305e:	f008 f9d9 	bl	800b414 <HAL_GPIO_ReadPin>
		circuitboardpcb = SPLATBOARD1;		// assumed
 8003062:	2800      	cmp	r0, #0
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <getboardpcb+0x1c>)
 8003066:	bf0c      	ite	eq
 8003068:	2216      	moveq	r2, #22
 800306a:	220b      	movne	r2, #11
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	bd08      	pop	{r3, pc}
 8003070:	40020800 	.word	0x40020800
 8003074:	20001d4c 	.word	0x20001d4c

08003078 <uart2_rxdone>:
void uart2_rxdone() {
 8003078:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 800307a:	4807      	ldr	r0, [pc, #28]	; (8003098 <uart2_rxdone+0x20>)
 800307c:	2300      	movs	r3, #0
 800307e:	4907      	ldr	r1, [pc, #28]	; (800309c <uart2_rxdone+0x24>)
 8003080:	461a      	mov	r2, r3
 8003082:	6800      	ldr	r0, [r0, #0]
 8003084:	f012 f9e8 	bl	8015458 <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003088:	2201      	movs	r2, #1
 800308a:	4904      	ldr	r1, [pc, #16]	; (800309c <uart2_rxdone+0x24>)
 800308c:	4804      	ldr	r0, [pc, #16]	; (80030a0 <uart2_rxdone+0x28>)
}
 800308e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003092:	f00f bce1 	b.w	8012a58 <HAL_UART_Receive_IT>
 8003096:	bf00      	nop
 8003098:	20001d54 	.word	0x20001d54
 800309c:	20001d50 	.word	0x20001d50
 80030a0:	20002640 	.word	0x20002640

080030a4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 80030a4:	4a25      	ldr	r2, [pc, #148]	; (800313c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80030a6:	6803      	ldr	r3, [r0, #0]
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d029      	beq.n	8003100 <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 80030ac:	4a24      	ldr	r2, [pc, #144]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d02d      	beq.n	800310e <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d02c      	beq.n	8003112 <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 80030b8:	4a22      	ldr	r2, [pc, #136]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d030      	beq.n	8003120 <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 80030be:	4a22      	ldr	r2, [pc, #136]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d005      	beq.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 80030c4:	4a21      	ldr	r2, [pc, #132]	; (800314c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01f      	beq.n	800310a <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 80030ca:	4821      	ldr	r0, [pc, #132]	; (8003150 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80030cc:	f021 bdaa 	b.w	8024c24 <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80030d0:	b510      	push	{r4, lr}
		t1sec++;
 80030d2:	4920      	ldr	r1, [pc, #128]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 80030d4:	4c20      	ldr	r4, [pc, #128]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 80030d6:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 80030d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 80030da:	4820      	ldr	r0, [pc, #128]	; (800315c <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 80030dc:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 80030de:	3301      	adds	r3, #1
		if (netup)
 80030e0:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 80030e2:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 80030e4:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 80030e6:	b110      	cbz	r0, 80030ee <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 80030e8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80030ea:	3301      	adds	r3, #1
 80030ec:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b9c3      	cbnz	r3, 8003126 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 80030f4:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 80030f6:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 80030f8:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 80030fa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 80030fe:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 8003100:	4a19      	ldr	r2, [pc, #100]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	3301      	adds	r3, #1
 8003106:	6013      	str	r3, [r2, #0]
		return;
 8003108:	4770      	bx	lr
		HAL_IncTick();
 800310a:	f004 bd53 	b.w	8007bb4 <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 800310e:	f7fd bbbd 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003114:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003116:	4816      	ldr	r0, [pc, #88]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003118:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	f021 bce6 	b.w	8024aec <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 8003120:	4814      	ldr	r0, [pc, #80]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003122:	f021 bd7f 	b.w	8024c24 <puts>
			statuspkt.gpsuptime++;
 8003126:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003128:	3301      	adds	r3, #1
 800312a:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 800312c:	f001 f846 	bl	80041bc <calcepoch32>
				epochvalid = 1;
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003132:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8003134:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8003138:	701a      	strb	r2, [r3, #0]
}
 800313a:	bd10      	pop	{r4, pc}
 800313c:	40002000 	.word	0x40002000
 8003140:	40000c00 	.word	0x40000c00
 8003144:	40000400 	.word	0x40000400
 8003148:	40001000 	.word	0x40001000
 800314c:	40001800 	.word	0x40001800
 8003150:	0802a084 	.word	0x0802a084
 8003154:	20002a14 	.word	0x20002a14
 8003158:	20002bfc 	.word	0x20002bfc
 800315c:	2000074a 	.word	0x2000074a
 8003160:	20002da8 	.word	0x20002da8
 8003164:	20002da0 	.word	0x20002da0
 8003168:	20002a0c 	.word	0x20002a0c
 800316c:	20000768 	.word	0x20000768
 8003170:	0802a044 	.word	0x0802a044
 8003174:	0802a068 	.word	0x0802a068

08003178 <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8003178:	4c02      	ldr	r4, [pc, #8]	; (8003184 <Error_Handler+0xc>)
void Error_Handler(void) {
 800317a:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 800317c:	4620      	mov	r0, r4
 800317e:	f021 fd51 	bl	8024c24 <puts>
	while (1) {
 8003182:	e7fb      	b.n	800317c <Error_Handler+0x4>
 8003184:	0802a0ac 	.word	0x0802a0ac

08003188 <SystemClock_Config>:
void SystemClock_Config(void) {
 8003188:	b530      	push	{r4, r5, lr}
 800318a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800318c:	2234      	movs	r2, #52	; 0x34
 800318e:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003190:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003192:	a807      	add	r0, sp, #28
 8003194:	f020 fd0e 	bl	8023bb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003198:	2300      	movs	r3, #0
 800319a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800319e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80031a2:	9306      	str	r3, [sp, #24]
	HAL_PWR_EnableBkUpAccess();
 80031a4:	f009 fd5c 	bl	800cc60 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	4a20      	ldr	r2, [pc, #128]	; (800322c <SystemClock_Config+0xa4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80031aa:	a807      	add	r0, sp, #28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ac:	4b20      	ldr	r3, [pc, #128]	; (8003230 <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80031b0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80031b4:	6411      	str	r1, [r2, #64]	; 0x40
 80031b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031b8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80031bc:	9200      	str	r2, [sp, #0]
 80031be:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80031c6:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80031c8:	2209      	movs	r2, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ca:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031cc:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031d2:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 80031d4:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d6:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031dc:	9901      	ldr	r1, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031de:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80031e2:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80031e8:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 216;
 80031ea:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031ec:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 216;
 80031ee:	23d8      	movs	r3, #216	; 0xd8
 80031f0:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 6;
 80031f4:	2306      	movs	r3, #6
 80031f6:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80031f8:	f009 fd74 	bl	800cce4 <HAL_RCC_OscConfig>
 80031fc:	b9a0      	cbnz	r0, 8003228 <SystemClock_Config+0xa0>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80031fe:	f009 fd37 	bl	800cc70 <HAL_PWREx_EnableOverDrive>
 8003202:	4603      	mov	r3, r0
 8003204:	b980      	cbnz	r0, 8003228 <SystemClock_Config+0xa0>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003206:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003208:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800320c:	a802      	add	r0, sp, #8
 800320e:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003210:	e9cd 2402 	strd	r2, r4, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003218:	e9cd 3504 	strd	r3, r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800321c:	9206      	str	r2, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800321e:	f00a f837 	bl	800d290 <HAL_RCC_ClockConfig>
 8003222:	b908      	cbnz	r0, 8003228 <SystemClock_Config+0xa0>
}
 8003224:	b015      	add	sp, #84	; 0x54
 8003226:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8003228:	f7ff ffa6 	bl	8003178 <Error_Handler>
 800322c:	40023800 	.word	0x40023800
 8003230:	40007000 	.word	0x40007000

08003234 <PeriphCommonClock_Config>:
void PeriphCommonClock_Config(void) {
 8003234:	b510      	push	{r4, lr}
 8003236:	b0a4      	sub	sp, #144	; 0x90
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003238:	228c      	movs	r2, #140	; 0x8c
 800323a:	2100      	movs	r1, #0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800323c:	2403      	movs	r4, #3
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800323e:	a801      	add	r0, sp, #4
 8003240:	f020 fcb8 	bl	8023bb4 <memset>
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003244:	22c0      	movs	r2, #192	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003246:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800324a:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800324c:	2101      	movs	r1, #1
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800324e:	9205      	str	r2, [sp, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8003250:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003254:	9000      	str	r0, [sp, #0]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003256:	4668      	mov	r0, sp
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003258:	9408      	str	r4, [sp, #32]
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800325a:	910a      	str	r1, [sp, #40]	; 0x28
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800325c:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800325e:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003262:	f00a f97b 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 8003266:	b908      	cbnz	r0, 800326c <PeriphCommonClock_Config+0x38>
}
 8003268:	b024      	add	sp, #144	; 0x90
 800326a:	bd10      	pop	{r4, pc}
		Error_Handler();
 800326c:	f7ff ff84 	bl	8003178 <Error_Handler>

08003270 <main>:
int main(void) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b0dc      	sub	sp, #368	; 0x170
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003274:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003278:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800327c:	4bc2      	ldr	r3, [pc, #776]	; (8003588 <main+0x318>)
 800327e:	2400      	movs	r4, #0
 8003280:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003284:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003288:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003292:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003294:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003298:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800329c:	4dbb      	ldr	r5, [pc, #748]	; (800358c <main+0x31c>)
	HAL_Init();
 800329e:	f004 fc77 	bl	8007b90 <HAL_Init>
	SystemClock_Config();
 80032a2:	f7ff ff71 	bl	8003188 <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a6:	2703      	movs	r7, #3
	PeriphCommonClock_Config();
 80032a8:	f7ff ffc4 	bl	8003234 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80032ac:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 80032ae:	4622      	mov	r2, r4
 80032b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032b4:	48b6      	ldr	r0, [pc, #728]	; (8003590 <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032b6:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ba:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032bc:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Pin = probe1_Pin;
 80032c0:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80032c4:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 80032c8:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80032cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032ce:	f043 0310 	orr.w	r3, r3, #16
 80032d2:	632b      	str	r3, [r5, #48]	; 0x30
 80032d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	9303      	str	r3, [sp, #12]
 80032dc:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80032de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	632b      	str	r3, [r5, #48]	; 0x30
 80032e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	9304      	str	r3, [sp, #16]
 80032ee:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80032f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032f2:	f043 0320 	orr.w	r3, r3, #32
 80032f6:	632b      	str	r3, [r5, #48]	; 0x30
 80032f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	9305      	str	r3, [sp, #20]
 8003300:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003302:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003308:	632b      	str	r3, [r5, #48]	; 0x30
 800330a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800330c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003310:	9306      	str	r3, [sp, #24]
 8003312:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003314:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	632b      	str	r3, [r5, #48]	; 0x30
 800331c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	9307      	str	r3, [sp, #28]
 8003324:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	632b      	str	r3, [r5, #48]	; 0x30
 800332e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	9308      	str	r3, [sp, #32]
 8003336:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003338:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800333a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800333e:	632b      	str	r3, [r5, #48]	; 0x30
 8003340:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	9309      	str	r3, [sp, #36]	; 0x24
 8003348:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800334a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800334c:	f043 0308 	orr.w	r3, r3, #8
 8003350:	632b      	str	r3, [r5, #48]	; 0x30
 8003352:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	930a      	str	r3, [sp, #40]	; 0x28
 800335a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800335c:	f008 f86c 	bl	800b438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8003360:	4622      	mov	r2, r4
 8003362:	f644 0181 	movw	r1, #18561	; 0x4881
 8003366:	488b      	ldr	r0, [pc, #556]	; (8003594 <main+0x324>)
 8003368:	f008 f866 	bl	800b438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 800336c:	4622      	mov	r2, r4
 800336e:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 8003372:	4889      	ldr	r0, [pc, #548]	; (8003598 <main+0x328>)
 8003374:	f008 f860 	bl	800b438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 8003378:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800337c:	4887      	ldr	r0, [pc, #540]	; (800359c <main+0x32c>)
 800337e:	2201      	movs	r2, #1
 8003380:	f008 f85a 	bl	800b438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003384:	4622      	mov	r2, r4
 8003386:	2144      	movs	r1, #68	; 0x44
 8003388:	4885      	ldr	r0, [pc, #532]	; (80035a0 <main+0x330>)
 800338a:	f008 f855 	bl	800b438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 800338e:	4622      	mov	r2, r4
 8003390:	2102      	movs	r1, #2
 8003392:	4882      	ldr	r0, [pc, #520]	; (800359c <main+0x32c>)
 8003394:	f008 f850 	bl	800b438 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8003398:	f642 1388 	movw	r3, #10632	; 0x2988
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800339c:	a955      	add	r1, sp, #340	; 0x154
 800339e:	487e      	ldr	r0, [pc, #504]	; (8003598 <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 80033a0:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a2:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033a6:	f007 fd9b 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80033aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80033ae:	a955      	add	r1, sp, #340	; 0x154
 80033b0:	487c      	ldr	r0, [pc, #496]	; (80035a4 <main+0x334>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80033b2:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033b4:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80033ba:	f007 fd91 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 80033be:	f643 533c 	movw	r3, #15676	; 0x3d3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033c2:	a955      	add	r1, sp, #340	; 0x154
 80033c4:	4872      	ldr	r0, [pc, #456]	; (8003590 <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 80033c6:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033cc:	f007 fd88 	bl	800aee0 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 80033d0:	a955      	add	r1, sp, #340	; 0x154
 80033d2:	486f      	ldr	r0, [pc, #444]	; (8003590 <main+0x320>)
	GPIO_InitStruct.Pin = probe1_Pin;
 80033d4:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033d8:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033dc:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 80033e0:	f007 fd7e 	bl	800aee0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e4:	a955      	add	r1, sp, #340	; 0x154
 80033e6:	486f      	ldr	r0, [pc, #444]	; (80035a4 <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033e8:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ea:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ee:	f007 fd77 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033f2:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f4:	a955      	add	r1, sp, #340	; 0x154
 80033f6:	486c      	ldr	r0, [pc, #432]	; (80035a8 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033f8:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fe:	f007 fd6f 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8003402:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003406:	a955      	add	r1, sp, #340	; 0x154
 8003408:	4862      	ldr	r0, [pc, #392]	; (8003594 <main+0x324>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 800340a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003412:	f007 fd65 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8003416:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003418:	a955      	add	r1, sp, #340	; 0x154
 800341a:	485e      	ldr	r0, [pc, #376]	; (8003594 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 800341c:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003422:	f007 fd5d 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 8003426:	f24d 533b 	movw	r3, #54587	; 0xd53b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800342a:	a955      	add	r1, sp, #340	; 0x154
 800342c:	485c      	ldr	r0, [pc, #368]	; (80035a0 <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 800342e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003434:	f007 fd54 	bl	800aee0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003438:	a955      	add	r1, sp, #340	; 0x154
 800343a:	4857      	ldr	r0, [pc, #348]	; (8003598 <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800343e:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003442:	f007 fd4d 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8003446:	f44f 4354 	mov.w	r3, #54272	; 0xd400
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800344a:	a955      	add	r1, sp, #340	; 0x154
 800344c:	4852      	ldr	r0, [pc, #328]	; (8003598 <main+0x328>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 800344e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003450:	f04f 0880 	mov.w	r8, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003456:	f04f 0a0c 	mov.w	sl, #12
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800345e:	f007 fd3f 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8003462:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003466:	a955      	add	r1, sp, #340	; 0x154
 8003468:	484c      	ldr	r0, [pc, #304]	; (800359c <main+0x32c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 800346a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003470:	f007 fd36 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8003474:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003478:	a955      	add	r1, sp, #340	; 0x154
 800347a:	4848      	ldr	r0, [pc, #288]	; (800359c <main+0x32c>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 800347c:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003484:	f007 fd2c 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8003488:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800348a:	a955      	add	r1, sp, #340	; 0x154
 800348c:	4844      	ldr	r0, [pc, #272]	; (80035a0 <main+0x330>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 800348e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003496:	f007 fd23 	bl	800aee0 <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800349a:	a955      	add	r1, sp, #340	; 0x154
 800349c:	4840      	ldr	r0, [pc, #256]	; (80035a0 <main+0x330>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800349e:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80034a6:	f007 fd1b 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80034aa:	f44f 7340 	mov.w	r3, #768	; 0x300
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ae:	a955      	add	r1, sp, #340	; 0x154
 80034b0:	483c      	ldr	r0, [pc, #240]	; (80035a4 <main+0x334>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80034b2:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b8:	f007 fd12 	bl	800aee0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c0:	a955      	add	r1, sp, #340	; 0x154
 80034c2:	4839      	ldr	r0, [pc, #228]	; (80035a8 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034c4:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c6:	9758      	str	r7, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 80034c8:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d0:	f007 fd06 	bl	800aee0 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 80034d4:	a955      	add	r1, sp, #340	; 0x154
 80034d6:	4831      	ldr	r0, [pc, #196]	; (800359c <main+0x32c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d8:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034dc:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 80034e0:	f007 fcfe 	bl	800aee0 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80034e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80034e6:	4639      	mov	r1, r7
 80034e8:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 80034ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80034ee:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 80034f0:	632b      	str	r3, [r5, #48]	; 0x30
 80034f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80034f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80034fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80034fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003502:	632b      	str	r3, [r5, #48]	; 0x30
 8003504:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Init.BaudRate = 115200;
 8003506:	4d29      	ldr	r5, [pc, #164]	; (80035ac <main+0x33c>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350c:	9302      	str	r3, [sp, #8]
 800350e:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8003510:	f004 ffb4 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003514:	200b      	movs	r0, #11
 8003516:	f004 fffb 	bl	8008510 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 800351a:	4622      	mov	r2, r4
 800351c:	2106      	movs	r1, #6
 800351e:	4650      	mov	r0, sl
 8003520:	f004 ffac 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003524:	4650      	mov	r0, sl
 8003526:	f004 fff3 	bl	8008510 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 800352a:	4622      	mov	r2, r4
 800352c:	2106      	movs	r1, #6
 800352e:	2010      	movs	r0, #16
 8003530:	f004 ffa4 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003534:	2010      	movs	r0, #16
 8003536:	f004 ffeb 	bl	8008510 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 800353a:	4622      	mov	r2, r4
 800353c:	4639      	mov	r1, r7
 800353e:	2011      	movs	r0, #17
 8003540:	f004 ff9c 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003544:	2011      	movs	r0, #17
 8003546:	f004 ffe3 	bl	8008510 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 800354a:	4622      	mov	r2, r4
 800354c:	4639      	mov	r1, r7
 800354e:	202f      	movs	r0, #47	; 0x2f
 8003550:	f004 ff94 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003554:	202f      	movs	r0, #47	; 0x2f
 8003556:	f004 ffdb 	bl	8008510 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 800355a:	4622      	mov	r2, r4
 800355c:	2106      	movs	r1, #6
 800355e:	2039      	movs	r0, #57	; 0x39
 8003560:	f004 ff8c 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003564:	2039      	movs	r0, #57	; 0x39
 8003566:	f004 ffd3 	bl	8008510 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 800356a:	4622      	mov	r2, r4
 800356c:	4649      	mov	r1, r9
 800356e:	203c      	movs	r0, #60	; 0x3c
 8003570:	f004 ff84 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003574:	203c      	movs	r0, #60	; 0x3c
 8003576:	f004 ffcb 	bl	8008510 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 800357a:	4622      	mov	r2, r4
 800357c:	4639      	mov	r1, r7
 800357e:	2045      	movs	r0, #69	; 0x45
 8003580:	f004 ff7c 	bl	800847c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003584:	2045      	movs	r0, #69	; 0x45
 8003586:	e013      	b.n	80035b0 <main+0x340>
 8003588:	e000ed00 	.word	0xe000ed00
 800358c:	40023800 	.word	0x40023800
 8003590:	40021400 	.word	0x40021400
 8003594:	40020400 	.word	0x40020400
 8003598:	40021000 	.word	0x40021000
 800359c:	40020c00 	.word	0x40020c00
 80035a0:	40021800 	.word	0x40021800
 80035a4:	40020800 	.word	0x40020800
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40004400 	.word	0x40004400
 80035b0:	f004 ffae 	bl	8008510 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 80035b4:	48bd      	ldr	r0, [pc, #756]	; (80038ac <main+0x63c>)
	huart2.Init.BaudRate = 115200;
 80035b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 80035ba:	4622      	mov	r2, r4
 80035bc:	4621      	mov	r1, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 80035be:	f8c0 a014 	str.w	sl, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 80035c2:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 80035c4:	e9c0 5300 	strd	r5, r3, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 80035c8:	4623      	mov	r3, r4
	huart2.Init.StopBits = UART_STOPBITS_1;
 80035ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035ce:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035d2:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 80035d6:	f00f fae1 	bl	8012b9c <HAL_RS485Ex_Init>
 80035da:	2800      	cmp	r0, #0
 80035dc:	f040 8446 	bne.w	8003e6c <main+0xbfc>
	hadc1.Instance = ADC1;
 80035e0:	4cb3      	ldr	r4, [pc, #716]	; (80038b0 <main+0x640>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80035e2:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80035e6:	4bb3      	ldr	r3, [pc, #716]	; (80038b4 <main+0x644>)
	ADC_MultiModeTypeDef multimode = { 0 };
 80035e8:	9022      	str	r0, [sp, #136]	; 0x88
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80035ea:	9045      	str	r0, [sp, #276]	; 0x114
 80035ec:	9048      	str	r0, [sp, #288]	; 0x120
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80035ee:	60a0      	str	r0, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035f0:	6120      	str	r0, [r4, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80035f2:	f884 0020 	strb.w	r0, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035f6:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035f8:	60e0      	str	r0, [r4, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80035fa:	6160      	str	r0, [r4, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80035fc:	61a6      	str	r6, [r4, #24]
	hadc1.Init.NbrOfConversion = 1;
 80035fe:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8003600:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003604:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003608:	4bab      	ldr	r3, [pc, #684]	; (80038b8 <main+0x648>)
	ADC_MultiModeTypeDef multimode = { 0 };
 800360a:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800360e:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003612:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003614:	62a3      	str	r3, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003616:	f004 faf1 	bl	8007bfc <HAL_ADC_Init>
 800361a:	2800      	cmp	r0, #0
 800361c:	f040 8426 	bne.w	8003e6c <main+0xbfc>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8003624:	9024      	str	r0, [sp, #144]	; 0x90
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003626:	2017      	movs	r0, #23
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8003628:	a922      	add	r1, sp, #136	; 0x88
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 800362a:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800362e:	4620      	mov	r0, r4
 8003630:	f004 fea4 	bl	800837c <HAL_ADCEx_MultiModeConfigChannel>
 8003634:	2800      	cmp	r0, #0
 8003636:	f040 8419 	bne.w	8003e6c <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800363a:	9047      	str	r0, [sp, #284]	; 0x11c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800363c:	a945      	add	r1, sp, #276	; 0x114
 800363e:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003640:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003644:	f004 fda6 	bl	8008194 <HAL_ADC_ConfigChannel>
 8003648:	2800      	cmp	r0, #0
 800364a:	f040 840f 	bne.w	8003e6c <main+0xbfc>
	hadc2.Instance = ADC2;
 800364e:	4c9b      	ldr	r4, [pc, #620]	; (80038bc <main+0x64c>)
 8003650:	4b9b      	ldr	r3, [pc, #620]	; (80038c0 <main+0x650>)
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003652:	6120      	str	r0, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003654:	f884 0020 	strb.w	r0, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003658:	60e0      	str	r0, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800365a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800365e:	6160      	str	r0, [r4, #20]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8003660:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8003662:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8003664:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003666:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 800366a:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800366e:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8003672:	4620      	mov	r0, r4
 8003674:	f004 fac2 	bl	8007bfc <HAL_ADC_Init>
 8003678:	2800      	cmp	r0, #0
 800367a:	f040 83f7 	bne.w	8003e6c <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800367e:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8003680:	a941      	add	r1, sp, #260	; 0x104
 8003682:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003684:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8003688:	f004 fd84 	bl	8008194 <HAL_ADC_ConfigChannel>
 800368c:	2800      	cmp	r0, #0
 800368e:	f040 83ed 	bne.w	8003e6c <main+0xbfc>
	hadc3.Instance = ADC3;
 8003692:	4c8c      	ldr	r4, [pc, #560]	; (80038c4 <main+0x654>)
 8003694:	4b8c      	ldr	r3, [pc, #560]	; (80038c8 <main+0x658>)
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003696:	6120      	str	r0, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003698:	f884 0020 	strb.w	r0, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800369c:	60e0      	str	r0, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800369e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80036a2:	6160      	str	r0, [r4, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80036a4:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 80036a6:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 80036a8:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80036aa:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 80036ae:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80036b2:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80036b6:	4620      	mov	r0, r4
 80036b8:	f004 faa0 	bl	8007bfc <HAL_ADC_Init>
 80036bc:	2800      	cmp	r0, #0
 80036be:	f040 83d5 	bne.w	8003e6c <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80036c2:	903f      	str	r0, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80036c4:	a93d      	add	r1, sp, #244	; 0xf4
 80036c6:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80036c8:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80036cc:	f004 fd62 	bl	8008194 <HAL_ADC_ConfigChannel>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	f040 83cb 	bne.w	8003e6c <main+0xbfc>
	hrng.Instance = RNG;
 80036d6:	487d      	ldr	r0, [pc, #500]	; (80038cc <main+0x65c>)
 80036d8:	4b7d      	ldr	r3, [pc, #500]	; (80038d0 <main+0x660>)
 80036da:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 80036dc:	f00a fc1e 	bl	800df1c <HAL_RNG_Init>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	f040 83c3 	bne.w	8003e6c <main+0xbfc>
	htim6.Instance = TIM6;
 80036e6:	4b7b      	ldr	r3, [pc, #492]	; (80038d4 <main+0x664>)
	htim6.Init.Prescaler = 10800;
 80036e8:	f642 2230 	movw	r2, #10800	; 0x2a30
 80036ec:	497a      	ldr	r1, [pc, #488]	; (80038d8 <main+0x668>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80036ee:	9021      	str	r0, [sp, #132]	; 0x84
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f0:	6098      	str	r0, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036f2:	f8c3 8018 	str.w	r8, [r3, #24]
	htim6.Init.Prescaler = 10800;
 80036f6:	e9c3 1200 	strd	r1, r2, [r3]
	htim6.Init.Period = 10000;
 80036fa:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80036fe:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8003702:	4618      	mov	r0, r3
	htim6.Init.Period = 10000;
 8003704:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8003706:	f00c f9f9 	bl	800fafc <HAL_TIM_Base_Init>
 800370a:	2800      	cmp	r0, #0
 800370c:	f040 83ae 	bne.w	8003e6c <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003710:	2310      	movs	r3, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8003712:	a91f      	add	r1, sp, #124	; 0x7c
 8003714:	486f      	ldr	r0, [pc, #444]	; (80038d4 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003716:	931f      	str	r3, [sp, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003718:	2300      	movs	r3, #0
 800371a:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 800371c:	f00d fe58 	bl	80113d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003720:	2800      	cmp	r0, #0
 8003722:	f040 83a3 	bne.w	8003e6c <main+0xbfc>
	htim3.Instance = TIM3;
 8003726:	4c6d      	ldr	r4, [pc, #436]	; (80038dc <main+0x66c>)
	htim3.Init.Prescaler = 10800;
 8003728:	f642 2330 	movw	r3, #10800	; 0x2a30
 800372c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8003900 <main+0x690>
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003730:	2780      	movs	r7, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003732:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003734:	905b      	str	r0, [sp, #364]	; 0x16c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003736:	903c      	str	r0, [sp, #240]	; 0xf0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003738:	60a0      	str	r0, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800373a:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800373c:	901c      	str	r0, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800373e:	61a7      	str	r7, [r4, #24]
	htim3.Init.Prescaler = 10800;
 8003740:	e9c4 a300 	strd	sl, r3, [r4]
	htim3.Init.Period = 10000;
 8003744:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003748:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 800374c:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 8003750:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003754:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003758:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800375c:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 800375e:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003760:	f00c f9cc 	bl	800fafc <HAL_TIM_Base_Init>
 8003764:	2800      	cmp	r0, #0
 8003766:	f040 8381 	bne.w	8003e6c <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800376a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800376e:	a939      	add	r1, sp, #228	; 0xe4
 8003770:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003772:	9639      	str	r6, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003774:	f00b fc58 	bl	800f028 <HAL_TIM_ConfigClockSource>
 8003778:	2800      	cmp	r0, #0
 800377a:	f040 8377 	bne.w	8003e6c <main+0xbfc>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800377e:	4620      	mov	r0, r4
 8003780:	f00c fb58 	bl	800fe34 <HAL_TIM_PWM_Init>
 8003784:	2800      	cmp	r0, #0
 8003786:	f040 8371 	bne.w	8003e6c <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800378a:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800378c:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800378e:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003790:	4620      	mov	r0, r4
 8003792:	f00d fe1d 	bl	80113d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003796:	2800      	cmp	r0, #0
 8003798:	f040 8368 	bne.w	8003e6c <main+0xbfc>
	sConfigOC.Pulse = 10;
 800379c:	230a      	movs	r3, #10
 800379e:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037a2:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80037a4:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037a6:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80037a8:	a955      	add	r1, sp, #340	; 0x154
 80037aa:	4620      	mov	r0, r4
	sConfigOC.Pulse = 10;
 80037ac:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80037b0:	f00c febe 	bl	8010530 <HAL_TIM_PWM_ConfigChannel>
 80037b4:	4605      	mov	r5, r0
 80037b6:	2800      	cmp	r0, #0
 80037b8:	f040 8358 	bne.w	8003e6c <main+0xbfc>
	HAL_TIM_MspPostInit(&htim3);
 80037bc:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 80037be:	4c48      	ldr	r4, [pc, #288]	; (80038e0 <main+0x670>)
	HAL_TIM_MspPostInit(&htim3);
 80037c0:	f002 fa02 	bl	8005bc8 <HAL_TIM_MspPostInit>
	htim7.Instance = TIM7;
 80037c4:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <main+0x674>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80037c6:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037c8:	61a7      	str	r7, [r4, #24]
	htim7.Instance = TIM7;
 80037ca:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 9600;
 80037cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80037d0:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.Period = 9600;
 80037d2:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80037d8:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80037dc:	f00c f98e 	bl	800fafc <HAL_TIM_Base_Init>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	f040 8343 	bne.w	8003e6c <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037e6:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e8:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 80037ea:	a919      	add	r1, sp, #100	; 0x64
 80037ec:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037ee:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 80037f0:	f00d fdee 	bl	80113d0 <HAL_TIMEx_MasterConfigSynchronization>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	f040 8339 	bne.w	8003e6c <main+0xbfc>
	htim1.Instance = TIM1;
 80037fa:	4c3b      	ldr	r4, [pc, #236]	; (80038e8 <main+0x678>)
 80037fc:	4b3b      	ldr	r3, [pc, #236]	; (80038ec <main+0x67c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037fe:	61a0      	str	r0, [r4, #24]
	htim1.Instance = TIM1;
 8003800:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 65535;
 8003802:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003806:	9018      	str	r0, [sp, #96]	; 0x60
	htim1.Init.Period = 65535;
 8003808:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800380a:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 800380e:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003812:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim1.Init.RepetitionCounter = 0;
 8003816:	e9c4 0004 	strd	r0, r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800381a:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800381e:	4620      	mov	r0, r4
 8003820:	f00c f96c 	bl	800fafc <HAL_TIM_Base_Init>
 8003824:	2800      	cmp	r0, #0
 8003826:	f040 8321 	bne.w	8003e6c <main+0xbfc>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800382a:	a935      	add	r1, sp, #212	; 0xd4
 800382c:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800382e:	9635      	str	r6, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003830:	f00b fbfa 	bl	800f028 <HAL_TIM_ConfigClockSource>
 8003834:	2800      	cmp	r0, #0
 8003836:	f040 8319 	bne.w	8003e6c <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800383a:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800383c:	a916      	add	r1, sp, #88	; 0x58
 800383e:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003840:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003842:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8003846:	f00d fdc3 	bl	80113d0 <HAL_TIMEx_MasterConfigSynchronization>
 800384a:	4603      	mov	r3, r0
 800384c:	2800      	cmp	r0, #0
 800384e:	f040 830d 	bne.w	8003e6c <main+0xbfc>
	hcrc.Instance = CRC;
 8003852:	4827      	ldr	r0, [pc, #156]	; (80038f0 <main+0x680>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003854:	2601      	movs	r6, #1
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003856:	8083      	strh	r3, [r0, #4]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003858:	6206      	str	r6, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800385a:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hcrc.Instance = CRC;
 800385e:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <main+0x684>)
 8003860:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8003862:	f004 fe83 	bl	800856c <HAL_CRC_Init>
 8003866:	2800      	cmp	r0, #0
 8003868:	f040 8300 	bne.w	8003e6c <main+0xbfc>
	htim2.Instance = TIM2;
 800386c:	4c22      	ldr	r4, [pc, #136]	; (80038f8 <main+0x688>)
 800386e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003872:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003874:	ad49      	add	r5, sp, #292	; 0x124
	htim2.Instance = TIM2;
 8003876:	6023      	str	r3, [r4, #0]
	htim2.Init.Period = 4000000000;
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <main+0x68c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 800387a:	9049      	str	r0, [sp, #292]	; 0x124
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800387c:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800387e:	9030      	str	r0, [sp, #192]	; 0xc0
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003880:	9034      	str	r0, [sp, #208]	; 0xd0
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003882:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003884:	61a0      	str	r0, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003886:	9015      	str	r0, [sp, #84]	; 0x54
	htim2.Init.Period = 4000000000;
 8003888:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800388a:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 800388e:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 8003892:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003896:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800389a:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800389e:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80038a2:	4620      	mov	r0, r4
 80038a4:	f00c f92a 	bl	800fafc <HAL_TIM_Base_Init>
 80038a8:	e02c      	b.n	8003904 <main+0x694>
 80038aa:	bf00      	nop
 80038ac:	20002640 	.word	0x20002640
 80038b0:	20001da0 	.word	0x20001da0
 80038b4:	40012000 	.word	0x40012000
 80038b8:	0f000001 	.word	0x0f000001
 80038bc:	20001de8 	.word	0x20001de8
 80038c0:	40012100 	.word	0x40012100
 80038c4:	20001e30 	.word	0x20001e30
 80038c8:	40012200 	.word	0x40012200
 80038cc:	200022a4 	.word	0x200022a4
 80038d0:	50060800 	.word	0x50060800
 80038d4:	200025a8 	.word	0x200025a8
 80038d8:	40001000 	.word	0x40001000
 80038dc:	200024c4 	.word	0x200024c4
 80038e0:	200025f4 	.word	0x200025f4
 80038e4:	40001400 	.word	0x40001400
 80038e8:	200023e0 	.word	0x200023e0
 80038ec:	40010000 	.word	0x40010000
 80038f0:	20001e78 	.word	0x20001e78
 80038f4:	40023000 	.word	0x40023000
 80038f8:	20002478 	.word	0x20002478
 80038fc:	ee6b2800 	.word	0xee6b2800
 8003900:	40000400 	.word	0x40000400
 8003904:	2800      	cmp	r0, #0
 8003906:	f040 82b1 	bne.w	8003e6c <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800390a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800390e:	a92d      	add	r1, sp, #180	; 0xb4
 8003910:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003912:	932d      	str	r3, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003914:	f00b fb88 	bl	800f028 <HAL_TIM_ConfigClockSource>
 8003918:	2800      	cmp	r0, #0
 800391a:	f040 82a7 	bne.w	8003e6c <main+0xbfc>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800391e:	4620      	mov	r0, r4
 8003920:	f00c fb56 	bl	800ffd0 <HAL_TIM_IC_Init>
 8003924:	2800      	cmp	r0, #0
 8003926:	f040 82a1 	bne.w	8003e6c <main+0xbfc>
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800392a:	2704      	movs	r7, #4
 800392c:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800392e:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003930:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 8003932:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003934:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003936:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 800393a:	f00b fe4f 	bl	800f5dc <HAL_TIM_SlaveConfigSynchro>
 800393e:	2800      	cmp	r0, #0
 8003940:	f040 8294 	bne.w	8003e6c <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003944:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003946:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003948:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800394a:	4620      	mov	r0, r4
 800394c:	f00d fd40 	bl	80113d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003950:	4602      	mov	r2, r0
 8003952:	2800      	cmp	r0, #0
 8003954:	f040 828a 	bne.w	8003e6c <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003958:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800395a:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
	sConfigIC.ICFilter = 0;
 800395e:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003962:	4620      	mov	r0, r4
 8003964:	f00d f804 	bl	8010970 <HAL_TIM_IC_ConfigChannel>
 8003968:	2800      	cmp	r0, #0
 800396a:	f040 827f 	bne.w	8003e6c <main+0xbfc>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800396e:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003970:	463a      	mov	r2, r7
 8003972:	a931      	add	r1, sp, #196	; 0xc4
 8003974:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003976:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003978:	f00c fffa 	bl	8010970 <HAL_TIM_IC_ConfigChannel>
 800397c:	2800      	cmp	r0, #0
 800397e:	f040 8275 	bne.w	8003e6c <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8003982:	a931      	add	r1, sp, #196	; 0xc4
 8003984:	4620      	mov	r0, r4
 8003986:	2208      	movs	r2, #8
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003988:	9632      	str	r6, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 800398a:	f00c fff1 	bl	8010970 <HAL_TIM_IC_ConfigChannel>
 800398e:	2800      	cmp	r0, #0
 8003990:	f040 826c 	bne.w	8003e6c <main+0xbfc>
	huart6.Instance = USART6;
 8003994:	48c1      	ldr	r0, [pc, #772]	; (8003c9c <main+0xa2c>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003996:	2300      	movs	r3, #0
	huart6.Init.BaudRate = 9600;
 8003998:	f44f 5816 	mov.w	r8, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 800399c:	260c      	movs	r6, #12
	huart6.Init.Parity = UART_PARITY_NONE;
 800399e:	6103      	str	r3, [r0, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039a0:	6203      	str	r3, [r0, #32]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80039a2:	6146      	str	r6, [r0, #20]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80039a4:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80039a8:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart6.Init.BaudRate = 9600;
 80039ac:	4bbc      	ldr	r3, [pc, #752]	; (8003ca0 <main+0xa30>)
 80039ae:	e9c0 3800 	strd	r3, r8, [r0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80039b2:	2310      	movs	r3, #16
 80039b4:	6243      	str	r3, [r0, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80039b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ba:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80039bc:	f00e fed6 	bl	801276c <HAL_UART_Init>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	f040 8253 	bne.w	8003e6c <main+0xbfc>
	hdac.Instance = DAC;
 80039c6:	4cb7      	ldr	r4, [pc, #732]	; (8003ca4 <main+0xa34>)
 80039c8:	4bb7      	ldr	r3, [pc, #732]	; (8003ca8 <main+0xa38>)
	DAC_ChannelConfTypeDef sConfig = { 0 };
 80039ca:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 80039ce:	4620      	mov	r0, r4
	hdac.Instance = DAC;
 80039d0:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 80039d2:	f004 fe87 	bl	80086e4 <HAL_DAC_Init>
 80039d6:	4602      	mov	r2, r0
 80039d8:	2800      	cmp	r0, #0
 80039da:	f040 8247 	bne.w	8003e6c <main+0xbfc>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80039de:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80039e0:	4620      	mov	r0, r4
 80039e2:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80039e4:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80039e6:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80039e8:	f004 ffd8 	bl	800899c <HAL_DAC_ConfigChannel>
 80039ec:	4607      	mov	r7, r0
 80039ee:	2800      	cmp	r0, #0
 80039f0:	f040 823c 	bne.w	8003e6c <main+0xbfc>
	MX_FATFS_Init();
 80039f4:	f00f ff2e 	bl	8013854 <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 80039f8:	4cac      	ldr	r4, [pc, #688]	; (8003cac <main+0xa3c>)
 80039fa:	4bad      	ldr	r3, [pc, #692]	; (8003cb0 <main+0xa40>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80039fc:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 80039fe:	60a7      	str	r7, [r4, #8]
	hi2c1.Instance = I2C1;
 8003a00:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20404768;
 8003a02:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a06:	6227      	str	r7, [r4, #32]
	hi2c1.Init.Timing = 0x20404768;
 8003a08:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 8003a0c:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a0e:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 8003a10:	e9c4 7704 	strd	r7, r7, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a14:	e9c4 7706 	strd	r7, r7, [r4, #24]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a18:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003a1a:	f007 ff41 	bl	800b8a0 <HAL_I2C_Init>
 8003a1e:	4601      	mov	r1, r0
 8003a20:	2800      	cmp	r0, #0
 8003a22:	f040 8223 	bne.w	8003e6c <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8003a26:	4620      	mov	r0, r4
 8003a28:	f008 fa92 	bl	800bf50 <HAL_I2CEx_ConfigAnalogFilter>
 8003a2c:	4601      	mov	r1, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	f040 821c 	bne.w	8003e6c <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8003a34:	4620      	mov	r0, r4
 8003a36:	f008 fadd 	bl	800bff4 <HAL_I2CEx_ConfigDigitalFilter>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	f040 8215 	bne.w	8003e6c <main+0xbfc>
	huart4.Instance = UART4;
 8003a42:	489c      	ldr	r0, [pc, #624]	; (8003cb4 <main+0xa44>)
	huart4.Init.BaudRate = 115200;
 8003a44:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003a48:	f44f 7440 	mov.w	r4, #768	; 0x300
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a4c:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003a4e:	6184      	str	r4, [r0, #24]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8003a50:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8003a54:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a58:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart4.Init.BaudRate = 115200;
 8003a5c:	4b96      	ldr	r3, [pc, #600]	; (8003cb8 <main+0xa48>)
 8003a5e:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8003a62:	f00e fe83 	bl	801276c <HAL_UART_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	f040 81ff 	bne.w	8003e6c <main+0xbfc>
	huart5.Instance = UART5;
 8003a6e:	4893      	ldr	r0, [pc, #588]	; (8003cbc <main+0xa4c>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003a70:	e9c0 8301 	strd	r8, r3, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 8003a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a78:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a7c:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a80:	6243      	str	r3, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 8003a82:	4b8f      	ldr	r3, [pc, #572]	; (8003cc0 <main+0xa50>)
 8003a84:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8003a86:	f00e fe71 	bl	801276c <HAL_UART_Init>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	f040 81ed 	bne.w	8003e6c <main+0xbfc>
	huart3.Instance = USART3;
 8003a92:	488c      	ldr	r0, [pc, #560]	; (8003cc4 <main+0xa54>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8003a94:	4611      	mov	r1, r2
	huart3.Instance = USART3;
 8003a96:	4b8c      	ldr	r3, [pc, #560]	; (8003cc8 <main+0xa58>)
	huart3.Init.BaudRate = 115200;
 8003a98:	6047      	str	r7, [r0, #4]
	huart3.Instance = USART3;
 8003a9a:	6003      	str	r3, [r0, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003a9c:	6146      	str	r6, [r0, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 8003a9e:	6102      	str	r2, [r0, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8003aa0:	e9c0 2202 	strd	r2, r2, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003aa8:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8003aac:	f00e ff0c 	bl	80128c8 <HAL_MultiProcessor_Init>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	f040 81da 	bne.w	8003e6c <main+0xbfc>
	hspi4.Instance = SPI4;
 8003ab8:	4884      	ldr	r0, [pc, #528]	; (8003ccc <main+0xa5c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8003aba:	4a85      	ldr	r2, [pc, #532]	; (8003cd0 <main+0xa60>)
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003abc:	6303      	str	r3, [r0, #48]	; 0x30
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003abe:	e9c0 3402 	strd	r3, r4, [r0, #8]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ac6:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aca:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8003ace:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003ad2:	e9c0 2300 	strd	r2, r3, [r0]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003ad6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ada:	6183      	str	r3, [r0, #24]
	hspi4.Init.CRCPolynomial = 7;
 8003adc:	2307      	movs	r3, #7
 8003ade:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8003ae4:	f00a fb50 	bl	800e188 <HAL_SPI_Init>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	f040 81bf 	bne.w	8003e6c <main+0xbfc>
	hspi3.Instance = SPI3;
 8003aee:	4879      	ldr	r0, [pc, #484]	; (8003cd4 <main+0xa64>)
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 8003af0:	2300      	movs	r3, #0
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8003af2:	f44f 7600 	mov.w	r6, #512	; 0x200
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af6:	6283      	str	r3, [r0, #40]	; 0x28
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003af8:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CRCPolynomial = 7;
 8003afa:	2407      	movs	r4, #7
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8003afc:	6186      	str	r6, [r0, #24]
	hspi3.Init.CRCPolynomial = 7;
 8003afe:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003b00:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b04:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b08:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b0c:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
	hspi3.Instance = SPI3;
 8003b10:	4b71      	ldr	r3, [pc, #452]	; (8003cd8 <main+0xa68>)
 8003b12:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8003b14:	f00a fb38 	bl	800e188 <HAL_SPI_Init>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	f040 81a6 	bne.w	8003e6c <main+0xbfc>
	hspi2.Instance = SPI2;
 8003b20:	486e      	ldr	r0, [pc, #440]	; (8003cdc <main+0xa6c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b22:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8003d0c <main+0xa9c>
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b26:	6083      	str	r3, [r0, #8]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b28:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b2a:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b2c:	6186      	str	r6, [r0, #24]
	hspi2.Init.CRCPolynomial = 7;
 8003b2e:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b30:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b34:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b38:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b3c:	e9c0 8300 	strd	r8, r3, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003b40:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003b44:	60c3      	str	r3, [r0, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003b46:	2338      	movs	r3, #56	; 0x38
 8003b48:	61c3      	str	r3, [r0, #28]
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003b4e:	f00a fb1b 	bl	800e188 <HAL_SPI_Init>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	f040 818a 	bne.w	8003e6c <main+0xbfc>
	hi2c4.Instance = I2C4;
 8003b58:	4c61      	ldr	r4, [pc, #388]	; (8003ce0 <main+0xa70>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b5a:	2601      	movs	r6, #1
	hi2c4.Init.Timing = 0x20404768;
 8003b5c:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <main+0xa74>)
 8003b5e:	4f62      	ldr	r7, [pc, #392]	; (8003ce8 <main+0xa78>)
	hi2c4.Init.OwnAddress1 = 0;
 8003b60:	60a0      	str	r0, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b62:	6220      	str	r0, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b64:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 8003b66:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b6a:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8003b6e:	4620      	mov	r0, r4
	hi2c4.Init.Timing = 0x20404768;
 8003b70:	e9c4 3700 	strd	r3, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8003b74:	f007 fe94 	bl	800b8a0 <HAL_I2C_Init>
 8003b78:	4601      	mov	r1, r0
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	f040 8176 	bne.w	8003e6c <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8003b80:	4620      	mov	r0, r4
 8003b82:	f008 f9e5 	bl	800bf50 <HAL_I2CEx_ConfigAnalogFilter>
 8003b86:	4601      	mov	r1, r0
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	f040 816f 	bne.w	8003e6c <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f008 fa30 	bl	800bff4 <HAL_I2CEx_ConfigDigitalFilter>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	f040 8169 	bne.w	8003e6c <main+0xbfc>
	hi2c2.Instance = I2C2;
 8003b9a:	4c54      	ldr	r4, [pc, #336]	; (8003cec <main+0xa7c>)
 8003b9c:	4b54      	ldr	r3, [pc, #336]	; (8003cf0 <main+0xa80>)
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b9e:	6220      	str	r0, [r4, #32]
	hi2c2.Init.Timing = 0x20404768;
 8003ba0:	6067      	str	r7, [r4, #4]
	hi2c2.Instance = I2C2;
 8003ba2:	6023      	str	r3, [r4, #0]
	hi2c2.Init.OwnAddress1 = 0;
 8003ba4:	e9c4 0602 	strd	r0, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 8003ba8:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bac:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f007 fe75 	bl	800b8a0 <HAL_I2C_Init>
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	f040 8157 	bne.w	8003e6c <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f008 f9c6 	bl	800bf50 <HAL_I2CEx_ConfigAnalogFilter>
 8003bc4:	4601      	mov	r1, r0
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	f040 8150 	bne.w	8003e6c <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f008 fa11 	bl	800bff4 <HAL_I2CEx_ConfigDigitalFilter>
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	f040 814a 	bne.w	8003e6c <main+0xbfc>
	htim4.Instance = TIM4;
 8003bd8:	4c46      	ldr	r4, [pc, #280]	; (8003cf4 <main+0xa84>)
 8003bda:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <main+0xa88>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003bdc:	9029      	str	r0, [sp, #164]	; 0xa4
	htim4.Instance = TIM4;
 8003bde:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1100;
 8003be0:	f240 434c 	movw	r3, #1100	; 0x44c
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003be4:	904e      	str	r0, [sp, #312]	; 0x138
	htim4.Init.Period = 1100;
 8003be6:	60e3      	str	r3, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003be8:	2380      	movs	r3, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003bea:	902c      	str	r0, [sp, #176]	; 0xb0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bec:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003bee:	9012      	str	r0, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bf0:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003bf2:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003bf6:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 8003bfa:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 8003bfe:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c02:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c06:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f00b ff76 	bl	800fafc <HAL_TIM_Base_Init>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	f040 812b 	bne.w	8003e6c <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8003c1a:	a929      	add	r1, sp, #164	; 0xa4
 8003c1c:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c1e:	9329      	str	r3, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8003c20:	f00b fa02 	bl	800f028 <HAL_TIM_ConfigClockSource>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	f040 8121 	bne.w	8003e6c <main+0xbfc>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f00c f834 	bl	800fc98 <HAL_TIM_OC_Init>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	f040 811b 	bne.w	8003e6c <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003c36:	2430      	movs	r4, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c38:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003c3a:	a910      	add	r1, sp, #64	; 0x40
 8003c3c:	482d      	ldr	r0, [pc, #180]	; (8003cf4 <main+0xa84>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003c3e:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003c40:	f00d fbc6 	bl	80113d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	f040 8111 	bne.w	8003e6c <main+0xbfc>
	sConfigOC.Pulse = 550;
 8003c4a:	f240 2326 	movw	r3, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c4e:	9050      	str	r0, [sp, #320]	; 0x140
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c50:	9052      	str	r0, [sp, #328]	; 0x148
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8003c52:	2208      	movs	r2, #8
 8003c54:	a94e      	add	r1, sp, #312	; 0x138
 8003c56:	4827      	ldr	r0, [pc, #156]	; (8003cf4 <main+0xa84>)
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003c58:	944e      	str	r4, [sp, #312]	; 0x138
	sConfigOC.Pulse = 550;
 8003c5a:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8003c5c:	f00c faea 	bl	8010234 <HAL_TIM_OC_ConfigChannel>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	f040 8103 	bne.w	8003e6c <main+0xbfc>
	HAL_TIM_MspPostInit(&htim4);
 8003c66:	4823      	ldr	r0, [pc, #140]	; (8003cf4 <main+0xa84>)
 8003c68:	f001 ffae 	bl	8005bc8 <HAL_TIM_MspPostInit>
	hiwdg.Instance = IWDG;
 8003c6c:	4823      	ldr	r0, [pc, #140]	; (8003cfc <main+0xa8c>)
	hiwdg.Init.Window = 4095;
 8003c6e:	f640 73ff 	movw	r3, #4095	; 0xfff
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003c72:	4f23      	ldr	r7, [pc, #140]	; (8003d00 <main+0xa90>)
	hiwdg.Init.Reload = 4095;
 8003c74:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003c78:	2306      	movs	r3, #6
 8003c7a:	e9c0 7300 	strd	r7, r3, [r0]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8003c7e:	f008 fa09 	bl	800c094 <HAL_IWDG_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2800      	cmp	r0, #0
 8003c86:	f040 80f1 	bne.w	8003e6c <main+0xbfc>
	htim14.Instance = TIM14;
 8003c8a:	481e      	ldr	r0, [pc, #120]	; (8003d04 <main+0xa94>)
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c8c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c90:	6103      	str	r3, [r0, #16]
	htim14.Instance = TIM14;
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <main+0xa98>)
 8003c94:	6003      	str	r3, [r0, #0]
	htim14.Init.Period = 10800;
 8003c96:	f642 2330 	movw	r3, #10800	; 0x2a30
 8003c9a:	e039      	b.n	8003d10 <main+0xaa0>
 8003c9c:	20002850 	.word	0x20002850
 8003ca0:	40011400 	.word	0x40011400
 8003ca4:	20001e9c 	.word	0x20001e9c
 8003ca8:	40007400 	.word	0x40007400
 8003cac:	200021b0 	.word	0x200021b0
 8003cb0:	40005400 	.word	0x40005400
 8003cb4:	20002748 	.word	0x20002748
 8003cb8:	40004c00 	.word	0x40004c00
 8003cbc:	200027cc 	.word	0x200027cc
 8003cc0:	40005000 	.word	0x40005000
 8003cc4:	200026c4 	.word	0x200026c4
 8003cc8:	40004800 	.word	0x40004800
 8003ccc:	2000237c 	.word	0x2000237c
 8003cd0:	40013400 	.word	0x40013400
 8003cd4:	20002318 	.word	0x20002318
 8003cd8:	40003c00 	.word	0x40003c00
 8003cdc:	200022b4 	.word	0x200022b4
 8003ce0:	20002248 	.word	0x20002248
 8003ce4:	40006000 	.word	0x40006000
 8003ce8:	20404768 	.word	0x20404768
 8003cec:	200021fc 	.word	0x200021fc
 8003cf0:	40005800 	.word	0x40005800
 8003cf4:	20002510 	.word	0x20002510
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	20002294 	.word	0x20002294
 8003d00:	40003000 	.word	0x40003000
 8003d04:	2000242c 	.word	0x2000242c
 8003d08:	40002000 	.word	0x40002000
 8003d0c:	40003800 	.word	0x40003800
 8003d10:	60c3      	str	r3, [r0, #12]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8003d16:	f00b fef1 	bl	800fafc <HAL_TIM_Base_Init>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	f040 80a6 	bne.w	8003e6c <main+0xbfc>
	htim5.Instance = TIM5;
 8003d20:	4f53      	ldr	r7, [pc, #332]	; (8003e70 <main+0xc00>)
	htim5.Init.Period = 4;
 8003d22:	2610      	movs	r6, #16
	htim5.Instance = TIM5;
 8003d24:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8003ea4 <main+0xc34>
	htim5.Init.Period = 4;
 8003d28:	f04f 0804 	mov.w	r8, #4
	htim5.Init.Prescaler = 0;
 8003d2c:	6078      	str	r0, [r7, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d2e:	6138      	str	r0, [r7, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d30:	61b8      	str	r0, [r7, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d32:	900f      	str	r0, [sp, #60]	; 0x3c
	htim5.Instance = TIM5;
 8003d34:	f8c7 9000 	str.w	r9, [r7]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003d38:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 8003d3c:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d40:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003d44:	4638      	mov	r0, r7
	htim5.Init.Period = 4;
 8003d46:	e9c7 6802 	strd	r6, r8, [r7, #8]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003d4a:	f00b fed7 	bl	800fafc <HAL_TIM_Base_Init>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	f040 808c 	bne.w	8003e6c <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d54:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003d58:	a925      	add	r1, sp, #148	; 0x94
 8003d5a:	4638      	mov	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d5c:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003d5e:	f00b f963 	bl	800f028 <HAL_TIM_ConfigClockSource>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2800      	cmp	r0, #0
 8003d66:	f040 8081 	bne.w	8003e6c <main+0xbfc>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d6e:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d70:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003d72:	f00d fb2d 	bl	80113d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d177      	bne.n	8003e6c <main+0xbfc>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003d7c:	f8d9 2000 	ldr.w	r2, [r9]
	huart8.Instance = UART8;
 8003d80:	483c      	ldr	r0, [pc, #240]	; (8003e74 <main+0xc04>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003d82:	f042 0208 	orr.w	r2, r2, #8
	huart8.Init.BaudRate = 9600;
 8003d86:	493c      	ldr	r1, [pc, #240]	; (8003e78 <main+0xc08>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003d88:	f8c9 2000 	str.w	r2, [r9]
	huart8.Init.Parity = UART_PARITY_NONE;
 8003d8c:	6103      	str	r3, [r0, #16]
	huart8.Init.Mode = UART_MODE_RX;
 8003d8e:	f8c0 8014 	str.w	r8, [r0, #20]
	huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003d92:	6384      	str	r4, [r0, #56]	; 0x38
	huart8.Init.StopBits = UART_STOPBITS_1;
 8003d94:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d98:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003d9c:	e9c0 3608 	strd	r3, r6, [r0, #32]
	huart8.Init.BaudRate = 9600;
 8003da0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003da4:	e9c0 1300 	strd	r1, r3, [r0]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 8003da8:	f00e fce0 	bl	801276c <HAL_UART_Init>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d15c      	bne.n	8003e6c <main+0xbfc>
	huart7.Instance = UART7;
 8003db2:	4832      	ldr	r0, [pc, #200]	; (8003e7c <main+0xc0c>)
	huart7.Init.BaudRate = 115200;
 8003db4:	4a32      	ldr	r2, [pc, #200]	; (8003e80 <main+0xc10>)
	huart7.Init.Parity = UART_PARITY_NONE;
 8003db6:	6103      	str	r3, [r0, #16]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003db8:	6203      	str	r3, [r0, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003dba:	6246      	str	r6, [r0, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003dbc:	6384      	str	r4, [r0, #56]	; 0x38
	huart7.Init.StopBits = UART_STOPBITS_1;
 8003dbe:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dc2:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.Init.BaudRate = 115200;
 8003dc6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003dca:	e9c0 2300 	strd	r2, r3, [r0]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8003dce:	230c      	movs	r3, #12
 8003dd0:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8003dd2:	f00e fccb 	bl	801276c <HAL_UART_Init>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d148      	bne.n	8003e6c <main+0xbfc>
	osMutexDef(myMutex01);
 8003dda:	2600      	movs	r6, #0
	MX_NVIC_Init();
 8003ddc:	f7fe fb0a 	bl	80023f4 <MX_NVIC_Init>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003de0:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 8003de2:	4c28      	ldr	r4, [pc, #160]	; (8003e84 <main+0xc14>)
	osMutexDef(myMutex01);
 8003de4:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003de8:	f010 ff36 	bl	8014c58 <osMutexCreate>
 8003dec:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <main+0xc18>)
 8003dee:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8003df0:	2101      	movs	r1, #1
 8003df2:	a841      	add	r0, sp, #260	; 0x104
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003df4:	f104 0710 	add.w	r7, r4, #16
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003df8:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 8003dfa:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8003dfe:	f010 ff87 	bl	8014d10 <osSemaphoreCreate>
 8003e02:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <main+0xc1c>)
 8003e04:	4602      	mov	r2, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003e06:	2101      	movs	r1, #1
 8003e08:	a845      	add	r0, sp, #276	; 0x114
	osTimerDef(myTimer01, Callback01);
 8003e0a:	9646      	str	r6, [sp, #280]	; 0x118
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8003e0c:	601a      	str	r2, [r3, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003e0e:	4632      	mov	r2, r6
	osTimerDef(myTimer01, Callback01);
 8003e10:	4b1f      	ldr	r3, [pc, #124]	; (8003e90 <main+0xc20>)
 8003e12:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003e14:	f010 fefe 	bl	8014c14 <osTimerCreate>
 8003e18:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <main+0xc24>)
 8003e1a:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 8003e1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e20:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003e24:	4628      	mov	r0, r5
 8003e26:	4631      	mov	r1, r6
 8003e28:	f010 ffec 	bl	8014e04 <osMessageCreate>
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <main+0xc28>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003e2e:	ad4e      	add	r5, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003e30:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003e32:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003e34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e38:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003e3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003e40:	4631      	mov	r1, r6
 8003e42:	a84e      	add	r0, sp, #312	; 0x138
 8003e44:	f010 feac 	bl	8014ba0 <osThreadCreate>
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <main+0xc2c>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003e4a:	ad55      	add	r5, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003e4c:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e52:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003e56:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	a855      	add	r0, sp, #340	; 0x154
 8003e5e:	f010 fe9f 	bl	8014ba0 <osThreadCreate>
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <main+0xc30>)
 8003e64:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8003e66:	f010 fe8d 	bl	8014b84 <osKernelStart>
	while (1) {
 8003e6a:	e7fe      	b.n	8003e6a <main+0xbfa>
		Error_Handler();
 8003e6c:	f7ff f984 	bl	8003178 <Error_Handler>
 8003e70:	2000255c 	.word	0x2000255c
 8003e74:	20002958 	.word	0x20002958
 8003e78:	40007c00 	.word	0x40007c00
 8003e7c:	200028d4 	.word	0x200028d4
 8003e80:	40007800 	.word	0x40007800
 8003e84:	08028bd4 	.word	0x08028bd4
 8003e88:	200029f0 	.word	0x200029f0
 8003e8c:	20002a10 	.word	0x20002a10
 8003e90:	08002459 	.word	0x08002459
 8003e94:	200029f8 	.word	0x200029f8
 8003e98:	200029f4 	.word	0x200029f4
 8003e9c:	20001d98 	.word	0x20001d98
 8003ea0:	20001d48 	.word	0x20001d48
 8003ea4:	40000c00 	.word	0x40000c00

08003ea8 <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 8003ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eac:	b084      	sub	sp, #16
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003eae:	4f8e      	ldr	r7, [pc, #568]	; (80040e8 <StartDefaultTask+0x240>)
	MX_USB_DEVICE_Init();
 8003eb0:	f01f f966 	bl	8023180 <MX_USB_DEVICE_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003eb4:	250f      	movs	r5, #15
	MX_LWIP_Init();
 8003eb6:	f00f fcf1 	bl	801389c <MX_LWIP_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003eba:	f242 762b 	movw	r6, #10027	; 0x272b
	getboardpcb();		// find our daughterboard
 8003ebe:	f7ff f8cb 	bl	8003058 <getboardpcb>
	printf("\n\n----------------------------------------------------------------------------\n");
 8003ec2:	488a      	ldr	r0, [pc, #552]	; (80040ec <StartDefaultTask+0x244>)
 8003ec4:	f020 feae 	bl	8024c24 <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003ec8:	4989      	ldr	r1, [pc, #548]	; (80040f0 <StartDefaultTask+0x248>)
 8003eca:	6838      	ldr	r0, [r7, #0]
 8003ecc:	2400      	movs	r4, #0
 8003ece:	f501 6184 	add.w	r1, r1, #1056	; 0x420
 8003ed2:	c90e      	ldmia	r1, {r1, r2, r3}
 8003ed4:	9003      	str	r0, [sp, #12]
 8003ed6:	9400      	str	r4, [sp, #0]
 8003ed8:	4886      	ldr	r0, [pc, #536]	; (80040f4 <StartDefaultTask+0x24c>)
 8003eda:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8003ede:	f020 fe05 	bl	8024aec <iprintf>
	crc_rom();
 8003ee2:	f7fe fae1 	bl	80024a8 <crc_rom>
	if (!(netif_is_link_up(&gnetif))) {
 8003ee6:	4b84      	ldr	r3, [pc, #528]	; (80040f8 <StartDefaultTask+0x250>)
 8003ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eec:	075b      	lsls	r3, r3, #29
 8003eee:	d41e      	bmi.n	8003f2e <StartDefaultTask+0x86>
		printf("LAN interface appears disconnected\n\r");
 8003ef0:	4882      	ldr	r0, [pc, #520]	; (80040fc <StartDefaultTask+0x254>)
 8003ef2:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003ef4:	4d82      	ldr	r5, [pc, #520]	; (8004100 <StartDefaultTask+0x258>)
		printf("LAN interface appears disconnected\n\r");
 8003ef6:	f020 fdf9 	bl	8024aec <iprintf>
			osDelay(50);
 8003efa:	2032      	movs	r0, #50	; 0x32
 8003efc:	f010 fe82 	bl	8014c04 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003f00:	2201      	movs	r2, #1
 8003f02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f06:	4628      	mov	r0, r5
 8003f08:	f007 fa96 	bl	800b438 <HAL_GPIO_WritePin>
			osDelay(50);
 8003f0c:	2032      	movs	r0, #50	; 0x32
 8003f0e:	f010 fe79 	bl	8014c04 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8003f12:	2200      	movs	r2, #0
 8003f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f007 fa8d 	bl	800b438 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8003f1e:	3c01      	subs	r4, #1
 8003f20:	d1eb      	bne.n	8003efa <StartDefaultTask+0x52>
		printf("************* REBOOTING **************\n");
 8003f22:	4878      	ldr	r0, [pc, #480]	; (8004104 <StartDefaultTask+0x25c>)
 8003f24:	f020 fe7e 	bl	8024c24 <puts>
		rebootme(0);
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7fe fb5d 	bl	80025e8 <rebootme>
	globalfreeze = 0;		// Allow UDP streaming
 8003f2e:	4b76      	ldr	r3, [pc, #472]	; (8004108 <StartDefaultTask+0x260>)
	netif = netif_default;
 8003f30:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8004178 <StartDefaultTask+0x2d0>
	globalfreeze = 0;		// Allow UDP streaming
 8003f34:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 8003f36:	4b75      	ldr	r3, [pc, #468]	; (800410c <StartDefaultTask+0x264>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8003f38:	4975      	ldr	r1, [pc, #468]	; (8004110 <StartDefaultTask+0x268>)
	netif = netif_default;
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	f8c8 0000 	str.w	r0, [r8]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8003f40:	f016 fa0c 	bl	801a35c <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8003f44:	4973      	ldr	r1, [pc, #460]	; (8004114 <StartDefaultTask+0x26c>)
 8003f46:	f8d8 0000 	ldr.w	r0, [r8]
 8003f4a:	f016 f9c3 	bl	801a2d4 <netif_set_status_callback>
	statuspkt.uid = BUILDNO;		// 16 bits
 8003f4e:	4b72      	ldr	r3, [pc, #456]	; (8004118 <StartDefaultTask+0x270>)
	statuspkt.adctrigoff = TRIG_THRES;
 8003f50:	2264      	movs	r2, #100	; 0x64
	statuspkt.bconf |= (circuitboardpcb << 8);
 8003f52:	6838      	ldr	r0, [r7, #0]
	statuspkt.uid = BUILDNO;		// 16 bits
 8003f54:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
	statuspkt.majorversion = MAJORVERSION;
 8003f58:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8003f5c:	f883 5071 	strb.w	r5, [r3, #113]	; 0x71
	statuspkt.udppknum = 0;
 8003f60:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8003f62:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8003f64:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8003f66:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8003f68:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8003f6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003f70:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003f72:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 8003f74:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8003f78:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8003f7c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8003f80:	f041 0101 	orr.w	r1, r1, #1
 8003f84:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (circuitboardpcb << 8);
 8003f88:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003f8c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003f90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8003f94:	4b61      	ldr	r3, [pc, #388]	; (800411c <StartDefaultTask+0x274>)
 8003f96:	4a62      	ldr	r2, [pc, #392]	; (8004120 <StartDefaultTask+0x278>)
 8003f98:	601a      	str	r2, [r3, #0]
	initsplat();
 8003f9a:	f001 f9a5 	bl	80052e8 <initsplat>
	stat = setupneo();
 8003f9e:	f000 fa41 	bl	8004424 <setupneo>
	if (stat != HAL_OK) {
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	f040 8093 	bne.w	80040ce <StartDefaultTask+0x226>
	printf("Setting up timers\n");
 8003fa8:	485e      	ldr	r0, [pc, #376]	; (8004124 <StartDefaultTask+0x27c>)
 8003faa:	f020 fe3b 	bl	8024c24 <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8003fae:	2300      	movs	r3, #0
 8003fb0:	485d      	ldr	r0, [pc, #372]	; (8004128 <StartDefaultTask+0x280>)
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6800      	ldr	r0, [r0, #0]
 8003fb8:	f011 f94e 	bl	8015258 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8003fbc:	485b      	ldr	r0, [pc, #364]	; (800412c <StartDefaultTask+0x284>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8003fbe:	4c5c      	ldr	r4, [pc, #368]	; (8004130 <StartDefaultTask+0x288>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8003fc0:	f00a ff70 	bl	800eea4 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	6820      	ldr	r0, [r4, #0]
 8003fc8:	4611      	mov	r1, r2
 8003fca:	f00c fe95 	bl	8010cf8 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2104      	movs	r1, #4
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	f00c fe90 	bl	8010cf8 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8003fd8:	2200      	movs	r2, #0
 8003fda:	210c      	movs	r1, #12
 8003fdc:	6820      	ldr	r0, [r4, #0]
 8003fde:	f00c fe8b 	bl	8010cf8 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f00d f8d5 	bl	8011194 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 8003fea:	2104      	movs	r1, #4
 8003fec:	4620      	mov	r0, r4
 8003fee:	f00d f8d1 	bl	8011194 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8003ff2:	210c      	movs	r1, #12
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f00d f8cd 	bl	8011194 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4a47      	ldr	r2, [pc, #284]	; (800411c <StartDefaultTask+0x274>)
 8003ffe:	2108      	movs	r1, #8
 8004000:	4620      	mov	r0, r4
 8004002:	f00c fed7 	bl	8010db4 <HAL_TIM_IC_Start_DMA>
 8004006:	4605      	mov	r5, r0
 8004008:	b128      	cbz	r0, 8004016 <StartDefaultTask+0x16e>
		printf("TIM_Base_Start_DMA err %i", err);
 800400a:	4601      	mov	r1, r0
 800400c:	4849      	ldr	r0, [pc, #292]	; (8004134 <StartDefaultTask+0x28c>)
 800400e:	f020 fd6d 	bl	8024aec <iprintf>
		Error_Handler();
 8004012:	f7ff f8b1 	bl	8003178 <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8004016:	6820      	ldr	r0, [r4, #0]
 8004018:	2201      	movs	r2, #1
 800401a:	2108      	movs	r1, #8
	myip = ip.addr;
 800401c:	4c46      	ldr	r4, [pc, #280]	; (8004138 <StartDefaultTask+0x290>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 800401e:	f00c fe6b 	bl	8010cf8 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 8004022:	f8d8 3000 	ldr.w	r3, [r8]
	ip = dhcp->offered_ip_addr;
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 800402a:	6023      	str	r3, [r4, #0]
	if (myip == 0) {
 800402c:	2b00      	cmp	r3, #0
 800402e:	d052      	beq.n	80040d6 <StartDefaultTask+0x22e>
	printf("*****************************************\n");
 8004030:	4842      	ldr	r0, [pc, #264]	; (800413c <StartDefaultTask+0x294>)
 8004032:	f020 fdf7 	bl	8024c24 <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8004036:	6821      	ldr	r1, [r4, #0]
	uip = locateudp();
 8004038:	4e41      	ldr	r6, [pc, #260]	; (8004140 <StartDefaultTask+0x298>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800403a:	0e08      	lsrs	r0, r1, #24
 800403c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004040:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8004044:	b2c9      	uxtb	r1, r1
 8004046:	9000      	str	r0, [sp, #0]
 8004048:	483e      	ldr	r0, [pc, #248]	; (8004144 <StartDefaultTask+0x29c>)
 800404a:	f020 fd4f 	bl	8024aec <iprintf>
	printf("*****************************************\n");
 800404e:	483b      	ldr	r0, [pc, #236]	; (800413c <StartDefaultTask+0x294>)
 8004050:	f020 fde8 	bl	8024c24 <puts>
	while (lptask_init_done == 0)
 8004054:	4c3c      	ldr	r4, [pc, #240]	; (8004148 <StartDefaultTask+0x2a0>)
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8004056:	f003 f883 	bl	8007160 <initialapisn>
	osDelay(1000);
 800405a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800405e:	f010 fdd1 	bl	8014c04 <osDelay>
	printf("Starting httpd web server\n");
 8004062:	483a      	ldr	r0, [pc, #232]	; (800414c <StartDefaultTask+0x2a4>)
 8004064:	f020 fdde 	bl	8024c24 <puts>
	httpd_init();		// start the www server
 8004068:	f014 fbe6 	bl	8018838 <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 800406c:	f002 ff0a 	bl	8006e84 <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8004070:	4837      	ldr	r0, [pc, #220]	; (8004150 <StartDefaultTask+0x2a8>)
 8004072:	f020 fdd7 	bl	8024c24 <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8004076:	2008      	movs	r0, #8
 8004078:	4a36      	ldr	r2, [pc, #216]	; (8004154 <StartDefaultTask+0x2ac>)
 800407a:	4629      	mov	r1, r5
 800407c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004080:	9000      	str	r0, [sp, #0]
 8004082:	4835      	ldr	r0, [pc, #212]	; (8004158 <StartDefaultTask+0x2b0>)
 8004084:	f004 fb52 	bl	800872c <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 8004088:	4834      	ldr	r0, [pc, #208]	; (800415c <StartDefaultTask+0x2b4>)
 800408a:	f00a fe53 	bl	800ed34 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800408e:	f012 fa2f 	bl	80164f0 <xTaskGetCurrentTaskHandle>
 8004092:	4b33      	ldr	r3, [pc, #204]	; (8004160 <StartDefaultTask+0x2b8>)
 8004094:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8004096:	f002 fba9 	bl	80067ec <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 800409a:	4b32      	ldr	r3, [pc, #200]	; (8004164 <StartDefaultTask+0x2bc>)
 800409c:	2201      	movs	r2, #1
	uip = locateudp();
 800409e:	6030      	str	r0, [r6, #0]
	printf("Waiting for lptask to start\n");
 80040a0:	4831      	ldr	r0, [pc, #196]	; (8004168 <StartDefaultTask+0x2c0>)
	main_init_done = 1; // let lptask now main has initialised
 80040a2:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 80040a4:	f020 fdbe 	bl	8024c24 <puts>
	while (lptask_init_done == 0)
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	b92b      	cbnz	r3, 80040b8 <StartDefaultTask+0x210>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 80040ac:	2064      	movs	r0, #100	; 0x64
 80040ae:	f010 fda9 	bl	8014c04 <osDelay>
	while (lptask_init_done == 0)
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f9      	beq.n	80040ac <StartDefaultTask+0x204>
	startadc();		// start the ADC DMA loop
 80040b8:	f7fc fd0c 	bl	8000ad4 <startadc>
		startudp(uip);	// should never return
 80040bc:	6830      	ldr	r0, [r6, #0]
 80040be:	f002 fbcb 	bl	8006858 <startudp>
		printf("UDP stream exited!!!\n\r");
 80040c2:	482a      	ldr	r0, [pc, #168]	; (800416c <StartDefaultTask+0x2c4>)
 80040c4:	f020 fd12 	bl	8024aec <iprintf>
		rebootme(4);
 80040c8:	2004      	movs	r0, #4
 80040ca:	f7fe fa8d 	bl	80025e8 <rebootme>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 80040ce:	4828      	ldr	r0, [pc, #160]	; (8004170 <StartDefaultTask+0x2c8>)
 80040d0:	f020 fd0c 	bl	8024aec <iprintf>
 80040d4:	e768      	b.n	8003fa8 <StartDefaultTask+0x100>
		printf("***** DHCP Failed ******\n");
 80040d6:	4827      	ldr	r0, [pc, #156]	; (8004174 <StartDefaultTask+0x2cc>)
 80040d8:	f020 fda4 	bl	8024c24 <puts>
		osDelay(200);
 80040dc:	20c8      	movs	r0, #200	; 0xc8
 80040de:	f010 fd91 	bl	8014c04 <osDelay>
		rebootme(1);
 80040e2:	2001      	movs	r0, #1
 80040e4:	f7fe fa80 	bl	80025e8 <rebootme>
 80040e8:	20001d4c 	.word	0x20001d4c
 80040ec:	0802a0c4 	.word	0x0802a0c4
 80040f0:	1ff0f000 	.word	0x1ff0f000
 80040f4:	0802a114 	.word	0x0802a114
 80040f8:	20002ec8 	.word	0x20002ec8
 80040fc:	0802a154 	.word	0x0802a154
 8004100:	40020c00 	.word	0x40020c00
 8004104:	0802a17c 	.word	0x0802a17c
 8004108:	20002da4 	.word	0x20002da4
 800410c:	2002db9c 	.word	0x2002db9c
 8004110:	080025f1 	.word	0x080025f1
 8004114:	0800244d 	.word	0x0800244d
 8004118:	20002bfc 	.word	0x20002bfc
 800411c:	20000768 	.word	0x20000768
 8004120:	02a62b1c 	.word	0x02a62b1c
 8004124:	0802a1c4 	.word	0x0802a1c4
 8004128:	20002a10 	.word	0x20002a10
 800412c:	200025a8 	.word	0x200025a8
 8004130:	20002478 	.word	0x20002478
 8004134:	0802a1d8 	.word	0x0802a1d8
 8004138:	200029fc 	.word	0x200029fc
 800413c:	0802a210 	.word	0x0802a210
 8004140:	20002a20 	.word	0x20002a20
 8004144:	0802a23c 	.word	0x0802a23c
 8004148:	200029e8 	.word	0x200029e8
 800414c:	0802a264 	.word	0x0802a264
 8004150:	0802a280 	.word	0x0802a280
 8004154:	0802a2d0 	.word	0x0802a2d0
 8004158:	20001e9c 	.word	0x20001e9c
 800415c:	200025f4 	.word	0x200025f4
 8004160:	200007fc 	.word	0x200007fc
 8004164:	200029ec 	.word	0x200029ec
 8004168:	0802a29c 	.word	0x0802a29c
 800416c:	0802a2b8 	.word	0x0802a2b8
 8004170:	0802a1a4 	.word	0x0802a1a4
 8004174:	0802a1f4 	.word	0x0802a1f4
 8004178:	20002a00 	.word	0x20002a00

0800417c <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop

08004180 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8004180:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8004182:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8004184:	b083      	sub	sp, #12
 8004186:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8004188:	d009      	beq.n	800419e <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 800418a:	230a      	movs	r3, #10
 800418c:	2201      	movs	r2, #1
 800418e:	a901      	add	r1, sp, #4
 8004190:	4808      	ldr	r0, [pc, #32]	; (80041b4 <__io_putchar+0x34>)
 8004192:	f00e fa43 	bl	801261c <HAL_UART_Transmit>

	return ch;
	}
}
 8004196:	9801      	ldr	r0, [sp, #4]
 8004198:	b003      	add	sp, #12
 800419a:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 800419e:	4603      	mov	r3, r0
 80041a0:	2202      	movs	r2, #2
 80041a2:	4905      	ldr	r1, [pc, #20]	; (80041b8 <__io_putchar+0x38>)
 80041a4:	4803      	ldr	r0, [pc, #12]	; (80041b4 <__io_putchar+0x34>)
 80041a6:	f00e fa39 	bl	801261c <HAL_UART_Transmit>
}
 80041aa:	9801      	ldr	r0, [sp, #4]
 80041ac:	b003      	add	sp, #12
 80041ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80041b2:	bf00      	nop
 80041b4:	20002640 	.word	0x20002640
 80041b8:	0802a9d0 	.word	0x0802a9d0

080041bc <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <calcepoch32+0x40>)
 80041be:	4810      	ldr	r0, [pc, #64]	; (8004200 <calcepoch32+0x44>)
 80041c0:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 80041c2:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80041c4:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80041c8:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80041ca:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80041cc:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80041ce:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80041d0:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80041d4:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 80041d6:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80041d8:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 80041da:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 80041dc:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 80041de:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 80041e0:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 80041e2:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 80041e6:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 80041e8:	f01f fdc4 	bl	8023d74 <mktime>
 80041ec:	4a05      	ldr	r2, [pc, #20]	; (8004204 <calcepoch32+0x48>)
 80041ee:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 80041f0:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 80041f4:	e9c2 3100 	strd	r3, r1, [r2]
}
 80041f8:	4418      	add	r0, r3
 80041fa:	bd10      	pop	{r4, pc}
 80041fc:	20002bfc 	.word	0x20002bfc
 8004200:	20002bd0 	.word	0x20002bd0
 8004204:	20002ab0 	.word	0x20002ab0

08004208 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 800420e:	b33a      	cbz	r2, 8004260 <printPacket+0x58>
 8004210:	4607      	mov	r7, r0
 8004212:	4616      	mov	r6, r2
 8004214:	1e4d      	subs	r5, r1, #1
 8004216:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 8004218:	f8df a054 	ldr.w	sl, [pc, #84]	; 8004270 <printPacket+0x68>
 800421c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8004274 <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 8004220:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8004278 <printPacket+0x70>
 8004224:	e013      	b.n	800424e <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 8004226:	f8da 1000 	ldr.w	r1, [sl]
 800422a:	1c4b      	adds	r3, r1, #1
 800422c:	f8ca 3000 	str.w	r3, [sl]
 8004230:	f020 fc5c 	bl	8024aec <iprintf>
	for (byte i = 0; i < len; i++) {
 8004234:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 8004236:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800423a:	4641      	mov	r1, r8
 800423c:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 800423e:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8004240:	f020 fe46 	bl	8024ed0 <siprintf>
		printf(temp);
 8004244:	a801      	add	r0, sp, #4
 8004246:	f020 fc51 	bl	8024aec <iprintf>
	for (byte i = 0; i < len; i++) {
 800424a:	42a6      	cmp	r6, r4
 800424c:	d008      	beq.n	8004260 <printPacket+0x58>
		if (i % 16 == 0) {
 800424e:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 8004252:	463a      	mov	r2, r7
 8004254:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 8004256:	d0e6      	beq.n	8004226 <printPacket+0x1e>
			printf(" ");
 8004258:	2020      	movs	r0, #32
 800425a:	f020 fc5f 	bl	8024b1c <putchar>
 800425e:	e7e9      	b.n	8004234 <printPacket+0x2c>
	}
	printf("\n\r");
 8004260:	4802      	ldr	r0, [pc, #8]	; (800426c <printPacket+0x64>)
 8004262:	f020 fc43 	bl	8024aec <iprintf>
}
 8004266:	b002      	add	sp, #8
 8004268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426c:	0802a2cc 	.word	0x0802a2cc
 8004270:	20002aa8 	.word	0x20002aa8
 8004274:	0802a9d4 	.word	0x0802a9d4
 8004278:	0802a9e0 	.word	0x0802a9e0

0800427c <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 800427c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004280:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8004320 <disableNmea+0xa4>
void disableNmea() {
 8004284:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8004286:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004288:	4f24      	ldr	r7, [pc, #144]	; (800431c <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 800428a:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 800428e:	f10d 0904 	add.w	r9, sp, #4
 8004292:	ad04      	add	r5, sp, #16
 8004294:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004298:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 800429c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80042a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80042a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80042a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80042ac:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 80042b0:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80042b4:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 80042b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042bc:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 80042c0:	f829 2b02 	strh.w	r2, [r9], #2
 80042c4:	0c12      	lsrs	r2, r2, #16
 80042c6:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 80042ca:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 80042ce:	7829      	ldrb	r1, [r5, #0]
 80042d0:	786a      	ldrb	r2, [r5, #1]
 80042d2:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 80042d6:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 80042d8:	f88d 100a 	strb.w	r1, [sp, #10]
 80042dc:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 80042e0:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 80042e4:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 80042e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042ec:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 80042ee:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 80042f0:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 80042f4:	44e6      	add	lr, ip
 80042f6:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 80042fa:	d1f5      	bne.n	80042e8 <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 80042fc:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80042fe:	2364      	movs	r3, #100	; 0x64
 8004300:	220b      	movs	r2, #11
 8004302:	a901      	add	r1, sp, #4
 8004304:	4638      	mov	r0, r7
 8004306:	f88d c00d 	strb.w	ip, [sp, #13]
 800430a:	f88d e00e 	strb.w	lr, [sp, #14]
 800430e:	f00e f985 	bl	801261c <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8004312:	4545      	cmp	r5, r8
 8004314:	d1d9      	bne.n	80042ca <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 8004316:	b00f      	add	sp, #60	; 0x3c
 8004318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800431c:	20002b44 	.word	0x20002b44
 8004320:	08028c3c 	.word	0x08028c3c

08004324 <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8004324:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 8004326:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8004328:	db1c      	blt.n	8004364 <isGoodChecksum+0x40>
 800432a:	4910      	ldr	r1, [pc, #64]	; (800436c <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 800432c:	2200      	movs	r2, #0
 800432e:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 8004332:	4613      	mov	r3, r2
 8004334:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 8004336:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 800433a:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 800433c:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 800433e:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8004340:	441a      	add	r2, r3
 8004342:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8004344:	d1f7      	bne.n	8004336 <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8004346:	490a      	ldr	r1, [pc, #40]	; (8004370 <isGoodChecksum+0x4c>)
 8004348:	4408      	add	r0, r1
 800434a:	7981      	ldrb	r1, [r0, #6]
 800434c:	4299      	cmp	r1, r3
 800434e:	d002      	beq.n	8004356 <isGoodChecksum+0x32>
 8004350:	2000      	movs	r0, #0
}
 8004352:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8004356:	79c0      	ldrb	r0, [r0, #7]
 8004358:	1a80      	subs	r0, r0, r2
 800435a:	fab0 f080 	clz	r0, r0
 800435e:	0940      	lsrs	r0, r0, #5
}
 8004360:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 8004364:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 8004366:	4613      	mov	r3, r2
 8004368:	e7ed      	b.n	8004346 <isGoodChecksum+0x22>
 800436a:	bf00      	nop
 800436c:	20002a29 	.word	0x20002a29
 8004370:	20002a28 	.word	0x20002a28

08004374 <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8004374:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8004376:	4c25      	ldr	r4, [pc, #148]	; (800440c <IsPacketReady+0x98>)
 8004378:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 800437a:	2b03      	cmp	r3, #3
 800437c:	d814      	bhi.n	80043a8 <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 800437e:	4a24      	ldr	r2, [pc, #144]	; (8004410 <IsPacketReady+0x9c>)
 8004380:	4619      	mov	r1, r3
 8004382:	5cd2      	ldrb	r2, [r2, r3]
 8004384:	4282      	cmp	r2, r0
 8004386:	d00a      	beq.n	800439e <IsPacketReady+0x2a>
 8004388:	4a22      	ldr	r2, [pc, #136]	; (8004414 <IsPacketReady+0xa0>)
 800438a:	5cd2      	ldrb	r2, [r2, r3]
 800438c:	4282      	cmp	r2, r0
 800438e:	d006      	beq.n	800439e <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8004390:	2200      	movs	r2, #0
 8004392:	4921      	ldr	r1, [pc, #132]	; (8004418 <IsPacketReady+0xa4>)
			p = 0;
 8004394:	4613      	mov	r3, r2
			len = 0;
 8004396:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 8004398:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 800439a:	70e3      	strb	r3, [r4, #3]
}
 800439c:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 800439e:	3301      	adds	r3, #1
 80043a0:	4a1e      	ldr	r2, [pc, #120]	; (800441c <IsPacketReady+0xa8>)
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	5450      	strb	r0, [r2, r1]
 80043a6:	e7f7      	b.n	8004398 <IsPacketReady+0x24>
		if (p < 6) {
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d917      	bls.n	80043dc <IsPacketReady+0x68>
		if (p == 6) {
 80043ac:	2b06      	cmp	r3, #6
 80043ae:	d01b      	beq.n	80043e8 <IsPacketReady+0x74>
 80043b0:	4d19      	ldr	r5, [pc, #100]	; (8004418 <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 80043b2:	682a      	ldr	r2, [r5, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	3207      	adds	r2, #7
 80043b8:	429a      	cmp	r2, r3
 80043ba:	dbed      	blt.n	8004398 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 80043bc:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 80043be:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 80043c0:	4e16      	ldr	r6, [pc, #88]	; (800441c <IsPacketReady+0xa8>)
 80043c2:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 80043c4:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 80043c6:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d1e5      	bne.n	8004398 <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 80043cc:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 80043ce:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 80043d0:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 80043d2:	f7ff ffa7 	bl	8004324 <isGoodChecksum>
 80043d6:	b998      	cbnz	r0, 8004400 <IsPacketReady+0x8c>
				p = 0;
 80043d8:	4603      	mov	r3, r0
 80043da:	e7dd      	b.n	8004398 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 80043dc:	490f      	ldr	r1, [pc, #60]	; (800441c <IsPacketReady+0xa8>)
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	54c8      	strb	r0, [r1, r3]
			return (0);
 80043e2:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 80043e4:	70e2      	strb	r2, [r4, #3]
}
 80043e6:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 80043e8:	490c      	ldr	r1, [pc, #48]	; (800441c <IsPacketReady+0xa8>)
 80043ea:	794d      	ldrb	r5, [r1, #5]
 80043ec:	790a      	ldrb	r2, [r1, #4]
 80043ee:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 80043f2:	4d09      	ldr	r5, [pc, #36]	; (8004418 <IsPacketReady+0xa4>)
 80043f4:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 80043f6:	682a      	ldr	r2, [r5, #0]
 80043f8:	2a7f      	cmp	r2, #127	; 0x7f
 80043fa:	d9da      	bls.n	80043b2 <IsPacketReady+0x3e>
				return 0;
 80043fc:	2000      	movs	r0, #0
}
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <IsPacketReady+0xac>)
 8004402:	2201      	movs	r2, #1
					return len;
 8004404:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 8004406:	601a      	str	r2, [r3, #0]
}
 8004408:	bd70      	pop	{r4, r5, r6, pc}
 800440a:	bf00      	nop
 800440c:	2000025c 	.word	0x2000025c
 8004410:	0802abd0 	.word	0x0802abd0
 8004414:	0802abd4 	.word	0x0802abd4
 8004418:	20002bc8 	.word	0x20002bc8
 800441c:	20002a28 	.word	0x20002a28
 8004420:	20002abc 	.word	0x20002abc

08004424 <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8004424:	4b74      	ldr	r3, [pc, #464]	; (80045f8 <setupneo+0x1d4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 800442a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442c:	b08d      	sub	sp, #52	; 0x34
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 800442e:	f000 80ba 	beq.w	80045a6 <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 8004432:	2284      	movs	r2, #132	; 0x84
 8004434:	4971      	ldr	r1, [pc, #452]	; (80045fc <setupneo+0x1d8>)
 8004436:	4872      	ldr	r0, [pc, #456]	; (8004600 <setupneo+0x1dc>)
 8004438:	f01f fb94 	bl	8023b64 <memcpy>
		gpsuarttx = huart6;
 800443c:	2284      	movs	r2, #132	; 0x84
 800443e:	496f      	ldr	r1, [pc, #444]	; (80045fc <setupneo+0x1d8>)
 8004440:	4870      	ldr	r0, [pc, #448]	; (8004604 <setupneo+0x1e0>)
 8004442:	f01f fb8f 	bl	8023b64 <memcpy>
		GPSUARTRX = USART6;
 8004446:	4b70      	ldr	r3, [pc, #448]	; (8004608 <setupneo+0x1e4>)
 8004448:	4a70      	ldr	r2, [pc, #448]	; (800460c <setupneo+0x1e8>)
 800444a:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 800444c:	2201      	movs	r2, #1
 800444e:	4970      	ldr	r1, [pc, #448]	; (8004610 <setupneo+0x1ec>)
 8004450:	486b      	ldr	r0, [pc, #428]	; (8004600 <setupneo+0x1dc>)
 8004452:	f00e fb7b 	bl	8012b4c <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8004456:	4607      	mov	r7, r0
 8004458:	2800      	cmp	r0, #0
 800445a:	f040 809d 	bne.w	8004598 <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 800445e:	f7ff ff0d 	bl	800427c <disableNmea>
	osDelay(500);
 8004462:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004466:	f010 fbcd 	bl	8014c04 <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 800446a:	4b6a      	ldr	r3, [pc, #424]	; (8004614 <setupneo+0x1f0>)
 800446c:	ae01      	add	r6, sp, #4
 800446e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004472:	4d69      	ldr	r5, [pc, #420]	; (8004618 <setupneo+0x1f4>)
 8004474:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004478:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 800447c:	4867      	ldr	r0, [pc, #412]	; (800461c <setupneo+0x1f8>)
 800447e:	f020 fbd1 	bl	8024c24 <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004482:	2364      	movs	r3, #100	; 0x64
 8004484:	2208      	movs	r2, #8
 8004486:	4631      	mov	r1, r6
 8004488:	485e      	ldr	r0, [pc, #376]	; (8004604 <setupneo+0x1e0>)
 800448a:	f00e f8c7 	bl	801261c <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 800448e:	e004      	b.n	800449a <setupneo+0x76>
		i++;
		osDelay(1);
 8004490:	f010 fbb8 	bl	8014c04 <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004494:	3c01      	subs	r4, #1
 8004496:	f000 80a5 	beq.w	80045e4 <setupneo+0x1c0>
 800449a:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 800449c:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f6      	beq.n	8004490 <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80044a2:	4c5f      	ldr	r4, [pc, #380]	; (8004620 <setupneo+0x1fc>)
 80044a4:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 80044a6:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80044a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80044ae:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80044b2:	2364      	movs	r3, #100	; 0x64
 80044b4:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80044b6:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80044ba:	4852      	ldr	r0, [pc, #328]	; (8004604 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80044bc:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80044c0:	4631      	mov	r1, r6
 80044c2:	f00e f8ab 	bl	801261c <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 80044c6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80044ca:	f010 fb9b 	bl	8014c04 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 80044ce:	4855      	ldr	r0, [pc, #340]	; (8004624 <setupneo+0x200>)
 80044d0:	f020 fb0c 	bl	8024aec <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 80044d4:	f104 0360 	add.w	r3, r4, #96	; 0x60
 80044d8:	46b4      	mov	ip, r6
 80044da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044dc:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80044e0:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 80044e2:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80044e6:	220e      	movs	r2, #14
 80044e8:	2364      	movs	r3, #100	; 0x64
 80044ea:	4846      	ldr	r0, [pc, #280]	; (8004604 <setupneo+0x1e0>)
 80044ec:	f00e f896 	bl	801261c <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 80044f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044f4:	f010 fb86 	bl	8014c04 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 80044f8:	484b      	ldr	r0, [pc, #300]	; (8004628 <setupneo+0x204>)
 80044fa:	f020 fb93 	bl	8024c24 <puts>
	byte packet[] = { 0xB5, // sync char 1
 80044fe:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 8004502:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004508:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800450c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800450e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004512:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8004514:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004518:	4631      	mov	r1, r6
 800451a:	222c      	movs	r2, #44	; 0x2c
 800451c:	4839      	ldr	r0, [pc, #228]	; (8004604 <setupneo+0x1e0>)
 800451e:	f00e f87d 	bl	801261c <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 8004522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004526:	f010 fb6d 	bl	8014c04 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 800452a:	4840      	ldr	r0, [pc, #256]	; (800462c <setupneo+0x208>)
 800452c:	f020 fade 	bl	8024aec <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8004530:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 8004534:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004536:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004538:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 800453a:	ca07      	ldmia	r2, {r0, r1, r2}
 800453c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004540:	f82c 2b02 	strh.w	r2, [ip], #2
 8004544:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004546:	4631      	mov	r1, r6
 8004548:	482e      	ldr	r0, [pc, #184]	; (8004604 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 800454a:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800454e:	220b      	movs	r2, #11
 8004550:	f00e f864 	bl	801261c <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 8004554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004558:	f010 fb54 	bl	8014c04 <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 800455c:	46b4      	mov	ip, r6
 800455e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004560:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004566:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800456a:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800456e:	2364      	movs	r3, #100	; 0x64
 8004570:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004572:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004576:	4631      	mov	r1, r6
 8004578:	4822      	ldr	r0, [pc, #136]	; (8004604 <setupneo+0x1e0>)
 800457a:	f00e f84f 	bl	801261c <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 800457e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004582:	f010 fb3f 	bl	8014c04 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8004586:	4b2a      	ldr	r3, [pc, #168]	; (8004630 <setupneo+0x20c>)
 8004588:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 800458a:	482a      	ldr	r0, [pc, #168]	; (8004634 <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 800458c:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 800458e:	f020 faad 	bl	8024aec <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8004592:	4638      	mov	r0, r7
 8004594:	b00d      	add	sp, #52	; 0x34
 8004596:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 8004598:	4601      	mov	r1, r0
 800459a:	4827      	ldr	r0, [pc, #156]	; (8004638 <setupneo+0x214>)
 800459c:	f020 faa6 	bl	8024aec <iprintf>
}
 80045a0:	4638      	mov	r0, r7
 80045a2:	b00d      	add	sp, #52	; 0x34
 80045a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 80045a6:	4c25      	ldr	r4, [pc, #148]	; (800463c <setupneo+0x218>)
 80045a8:	4620      	mov	r0, r4
 80045aa:	f00d f9cb 	bl	8011944 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 80045ae:	4620      	mov	r0, r4
 80045b0:	f00d f830 	bl	8011614 <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 80045b4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 80045b8:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 80045ba:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 80045bc:	f00e f8d6 	bl	801276c <HAL_UART_Init>
 80045c0:	b968      	cbnz	r0, 80045de <setupneo+0x1ba>
		gpsuartrx = huart8;
 80045c2:	2284      	movs	r2, #132	; 0x84
 80045c4:	491e      	ldr	r1, [pc, #120]	; (8004640 <setupneo+0x21c>)
 80045c6:	480e      	ldr	r0, [pc, #56]	; (8004600 <setupneo+0x1dc>)
 80045c8:	f01f facc 	bl	8023b64 <memcpy>
		gpsuarttx = huart7;
 80045cc:	2284      	movs	r2, #132	; 0x84
 80045ce:	491b      	ldr	r1, [pc, #108]	; (800463c <setupneo+0x218>)
 80045d0:	480c      	ldr	r0, [pc, #48]	; (8004604 <setupneo+0x1e0>)
 80045d2:	f01f fac7 	bl	8023b64 <memcpy>
		GPSUARTRX = UART8;
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <setupneo+0x1e4>)
 80045d8:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <setupneo+0x220>)
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e736      	b.n	800444c <setupneo+0x28>
			Error_Handler();
 80045de:	f7fe fdcb 	bl	8003178 <Error_Handler>
 80045e2:	e7ee      	b.n	80045c2 <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 80045e4:	4818      	ldr	r0, [pc, #96]	; (8004648 <setupneo+0x224>)
 80045e6:	f020 fb1d 	bl	8024c24 <puts>
		osDelay(200);
 80045ea:	20c8      	movs	r0, #200	; 0xc8
 80045ec:	f010 fb0a 	bl	8014c04 <osDelay>
		rebootme(2);
 80045f0:	2002      	movs	r0, #2
 80045f2:	f7fd fff9 	bl	80025e8 <rebootme>
 80045f6:	e754      	b.n	80044a2 <setupneo+0x7e>
 80045f8:	20001d4c 	.word	0x20001d4c
 80045fc:	20002850 	.word	0x20002850
 8004600:	20002ac0 	.word	0x20002ac0
 8004604:	20002b44 	.word	0x20002b44
 8004608:	20002a24 	.word	0x20002a24
 800460c:	40011400 	.word	0x40011400
 8004610:	20002bf4 	.word	0x20002bf4
 8004614:	08028c34 	.word	0x08028c34
 8004618:	20002bcc 	.word	0x20002bcc
 800461c:	0802a9e8 	.word	0x0802a9e8
 8004620:	08028c1c 	.word	0x08028c1c
 8004624:	0802aa28 	.word	0x0802aa28
 8004628:	0802aa58 	.word	0x0802aa58
 800462c:	0802aa80 	.word	0x0802aa80
 8004630:	20002bfc 	.word	0x20002bfc
 8004634:	0802aaa4 	.word	0x0802aaa4
 8004638:	0802aa00 	.word	0x0802aa00
 800463c:	200028d4 	.word	0x200028d4
 8004640:	20002958 	.word	0x20002958
 8004644:	40007c00 	.word	0x40007c00
 8004648:	0802aacc 	.word	0x0802aacc

0800464c <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 800464c:	4a2a      	ldr	r2, [pc, #168]	; (80046f8 <HAL_UART_RxCpltCallback+0xac>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800464e:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == GPSUARTRX) { //our UART
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	6803      	ldr	r3, [r0, #0]
 8004654:	4293      	cmp	r3, r2
 8004656:	d011      	beq.n	800467c <HAL_UART_RxCpltCallback+0x30>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8004658:	4a28      	ldr	r2, [pc, #160]	; (80046fc <HAL_UART_RxCpltCallback+0xb0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d024      	beq.n	80046a8 <HAL_UART_RxCpltCallback+0x5c>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 800465e:	4a28      	ldr	r2, [pc, #160]	; (8004700 <HAL_UART_RxCpltCallback+0xb4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d025      	beq.n	80046b0 <HAL_UART_RxCpltCallback+0x64>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 8004664:	4a27      	ldr	r2, [pc, #156]	; (8004704 <HAL_UART_RxCpltCallback+0xb8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_UART_RxCpltCallback+0x28>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 800466a:	4827      	ldr	r0, [pc, #156]	; (8004708 <HAL_UART_RxCpltCallback+0xbc>)
}
 800466c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("USART unknown uart int\n");
 8004670:	f020 bad8 	b.w	8024c24 <puts>
}
 8004674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart2_rxdone();
 8004678:	f7fe bcfe 	b.w	8003078 <uart2_rxdone>
		data = rxdatabuf[0];
 800467c:	4923      	ldr	r1, [pc, #140]	; (800470c <HAL_UART_RxCpltCallback+0xc0>)
		flag = 1;
 800467e:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 8004680:	4b23      	ldr	r3, [pc, #140]	; (8004710 <HAL_UART_RxCpltCallback+0xc4>)
		flag = 1;
 8004682:	4a24      	ldr	r2, [pc, #144]	; (8004714 <HAL_UART_RxCpltCallback+0xc8>)
		data = rxdatabuf[0];
 8004684:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 8004686:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 8004688:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 800468a:	f7ff fe73 	bl	8004374 <IsPacketReady>
 800468e:	2800      	cmp	r0, #0
 8004690:	dd1c      	ble.n	80046cc <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 8004692:	2854      	cmp	r0, #84	; 0x54
 8004694:	d01b      	beq.n	80046ce <HAL_UART_RxCpltCallback+0x82>
 8004696:	2864      	cmp	r0, #100	; 0x64
 8004698:	d00e      	beq.n	80046b8 <HAL_UART_RxCpltCallback+0x6c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 800469a:	b2c2      	uxtb	r2, r0
 800469c:	491e      	ldr	r1, [pc, #120]	; (8004718 <HAL_UART_RxCpltCallback+0xcc>)
 800469e:	481f      	ldr	r0, [pc, #124]	; (800471c <HAL_UART_RxCpltCallback+0xd0>)
}
 80046a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 80046a4:	f7ff bdb0 	b.w	8004208 <printPacket>
}
 80046a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart5_rxdone();
 80046ac:	f7fc bdbe 	b.w	800122c <uart5_rxdone>
}
 80046b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart6_rxdone();
 80046b4:	f000 bd0e 	b.w	80050d4 <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 80046b8:	4b19      	ldr	r3, [pc, #100]	; (8004720 <HAL_UART_RxCpltCallback+0xd4>)
 80046ba:	481a      	ldr	r0, [pc, #104]	; (8004724 <HAL_UART_RxCpltCallback+0xd8>)
 80046bc:	f1a3 020a 	sub.w	r2, r3, #10
 80046c0:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 80046c4:	f020 fa12 	bl	8024aec <iprintf>
				neoispresent = 1;
 80046c8:	4b17      	ldr	r3, [pc, #92]	; (8004728 <HAL_UART_RxCpltCallback+0xdc>)
 80046ca:	601c      	str	r4, [r3, #0]
}
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 80046ce:	4d17      	ldr	r5, [pc, #92]	; (800472c <HAL_UART_RxCpltCallback+0xe0>)
 80046d0:	224e      	movs	r2, #78	; 0x4e
 80046d2:	4917      	ldr	r1, [pc, #92]	; (8004730 <HAL_UART_RxCpltCallback+0xe4>)
 80046d4:	1d28      	adds	r0, r5, #4
 80046d6:	f01f fa45 	bl	8023b64 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 80046da:	f7ff fd6f 	bl	80041bc <calcepoch32>
 80046de:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 80046e2:	7e6b      	ldrb	r3, [r5, #25]
 80046e4:	f013 0301 	ands.w	r3, r3, #1
 80046e8:	d002      	beq.n	80046f0 <HAL_UART_RxCpltCallback+0xa4>
					gpslocked = 1;
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <HAL_UART_RxCpltCallback+0xe8>)
 80046ec:	701c      	strb	r4, [r3, #0]
}
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
					gpslocked = 0;
 80046f0:	4a10      	ldr	r2, [pc, #64]	; (8004734 <HAL_UART_RxCpltCallback+0xe8>)
 80046f2:	7013      	strb	r3, [r2, #0]
}
 80046f4:	bd38      	pop	{r3, r4, r5, pc}
 80046f6:	bf00      	nop
 80046f8:	20002a24 	.word	0x20002a24
 80046fc:	40005000 	.word	0x40005000
 8004700:	40011400 	.word	0x40011400
 8004704:	40004400 	.word	0x40004400
 8004708:	0802ab40 	.word	0x0802ab40
 800470c:	20002bf4 	.word	0x20002bf4
 8004710:	20002aac 	.word	0x20002aac
 8004714:	20002ab8 	.word	0x20002ab8
 8004718:	20002a28 	.word	0x20002a28
 800471c:	0802ab24 	.word	0x0802ab24
 8004720:	20002a56 	.word	0x20002a56
 8004724:	0802aaf8 	.word	0x0802aaf8
 8004728:	20002bcc 	.word	0x20002bcc
 800472c:	20002bfc 	.word	0x20002bfc
 8004730:	20002a2e 	.word	0x20002a2e
 8004734:	20002da8 	.word	0x20002da8

08004738 <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004738:	4926      	ldr	r1, [pc, #152]	; (80047d4 <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 800473a:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 800473e:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8004740:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004742:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8004744:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 8004746:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004748:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 800474a:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 800474c:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 800474e:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8004750:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8004752:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004754:	d02b      	beq.n	80047ae <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 8004756:	4920      	ldr	r1, [pc, #128]	; (80047d8 <HAL_UART_ErrorCallback+0xa0>)
 8004758:	428b      	cmp	r3, r1
 800475a:	d00f      	beq.n	800477c <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 800475c:	491f      	ldr	r1, [pc, #124]	; (80047dc <HAL_UART_ErrorCallback+0xa4>)
 800475e:	428b      	cmp	r3, r1
 8004760:	d000      	beq.n	8004764 <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8004762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 8004764:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 8004768:	481d      	ldr	r0, [pc, #116]	; (80047e0 <HAL_UART_ErrorCallback+0xa8>)
 800476a:	f020 f9bf 	bl	8024aec <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	2202      	movs	r2, #2
 8004772:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 8004774:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 8004776:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 8004778:	621d      	str	r5, [r3, #32]
}
 800477a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <HAL_UART_ErrorCallback+0xac>)
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	2a00      	cmp	r2, #0
 8004782:	d1ee      	bne.n	8004762 <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 8004784:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8004788:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <HAL_UART_ErrorCallback+0xb0>)
 800478a:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	0710      	lsls	r0, r2, #28
 8004790:	d500      	bpl.n	8004794 <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 8004792:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 8004794:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <HAL_UART_ErrorCallback+0xa0>)
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	0751      	lsls	r1, r2, #29
 800479a:	d501      	bpl.n	80047a0 <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 800479c:	2204      	movs	r2, #4
 800479e:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <HAL_UART_ErrorCallback+0xa0>)
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	0792      	lsls	r2, r2, #30
 80047a6:	d5dc      	bpl.n	8004762 <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 80047a8:	2202      	movs	r2, #2
 80047aa:	621a      	str	r2, [r3, #32]
}
 80047ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 80047ae:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80047b2:	480e      	ldr	r0, [pc, #56]	; (80047ec <HAL_UART_ErrorCallback+0xb4>)
 80047b4:	f020 f99a 	bl	8024aec <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 80047b8:	462a      	mov	r2, r5
 80047ba:	490d      	ldr	r1, [pc, #52]	; (80047f0 <HAL_UART_ErrorCallback+0xb8>)
 80047bc:	480d      	ldr	r0, [pc, #52]	; (80047f4 <HAL_UART_ErrorCallback+0xbc>)
 80047be:	f00e f9c5 	bl	8012b4c <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 80047c2:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 80047c6:	d0cc      	beq.n	8004762 <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 80047c8:	4601      	mov	r1, r0
 80047ca:	480b      	ldr	r0, [pc, #44]	; (80047f8 <HAL_UART_ErrorCallback+0xc0>)
}
 80047cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 80047d0:	f020 b98c 	b.w	8024aec <iprintf>
 80047d4:	20002a24 	.word	0x20002a24
 80047d8:	40005000 	.word	0x40005000
 80047dc:	40011400 	.word	0x40011400
 80047e0:	0802aba4 	.word	0x0802aba4
 80047e4:	200016c0 	.word	0x200016c0
 80047e8:	20001750 	.word	0x20001750
 80047ec:	0802ab58 	.word	0x0802ab58
 80047f0:	20002bf4 	.word	0x20002bf4
 80047f4:	20002ac0 	.word	0x20002ac0
 80047f8:	0802ab78 	.word	0x0802ab78
 80047fc:	00000000 	.word	0x00000000

08004800 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8004800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004804:	ed2d 8b02 	vpush	{d8}
 8004808:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 800480a:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 800480c:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 800480e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8004812:	ae0c      	add	r6, sp, #48	; 0x30
 8004814:	4f6e      	ldr	r7, [pc, #440]	; (80049d0 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8004816:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 80049f8 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 800481a:	f010 f9f3 	bl	8014c04 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 800481e:	2301      	movs	r3, #1
 8004820:	9600      	str	r6, [sp, #0]
 8004822:	b2aa      	uxth	r2, r5
 8004824:	21c1      	movs	r1, #193	; 0xc1
 8004826:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 8004828:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 800482a:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800482e:	f007 fa9d 	bl	800bd6c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004832:	4604      	mov	r4, r0
 8004834:	2800      	cmp	r0, #0
 8004836:	f040 80a6 	bne.w	8004986 <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 800483a:	3501      	adds	r5, #1
 800483c:	2d04      	cmp	r5, #4
 800483e:	d1ee      	bne.n	800481e <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 8004840:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 8004844:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 8004848:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 800484c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 8004850:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004854:	485f      	ldr	r0, [pc, #380]	; (80049d4 <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 8004856:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800485a:	495f      	ldr	r1, [pc, #380]	; (80049d8 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 800485c:	0992      	lsrs	r2, r2, #6
	t = tr;
 800485e:	099c      	lsrs	r4, r3, #6
	p = pr;
 8004860:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004864:	4a5d      	ldr	r2, [pc, #372]	; (80049dc <getpressure115.part.0+0x1dc>)
	t = tr;
 8004866:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 800486a:	119d      	asrs	r5, r3, #6
	p = pr;
 800486c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 8004870:	2400      	movs	r4, #0
	t = tr;
 8004872:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004876:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 800487a:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 800487e:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004882:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004886:	ed91 4b00 	vldr	d4, [r1]
 800488a:	4955      	ldr	r1, [pc, #340]	; (80049e0 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 800488c:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800488e:	eea1 4b07 	vfma.f64	d4, d1, d7
 8004892:	ed91 6b00 	vldr	d6, [r1]
 8004896:	ed9d 8b06 	vldr	d8, [sp, #24]
 800489a:	ed92 0b00 	vldr	d0, [r2]
 800489e:	eeb0 7b46 	vmov.f64	d7, d6
 80048a2:	ed9d 2b08 	vldr	d2, [sp, #32]
 80048a6:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80048aa:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 80049a0 <getpressure115.part.0+0x1a0>
 80048ae:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80049a8 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80048b2:	eea0 7b02 	vfma.f64	d7, d0, d2
 80048b6:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80048ba:	ed9d 6b06 	vldr	d6, [sp, #24]
 80048be:	eea6 5b03 	vfma.f64	d5, d6, d3
 80048c2:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 80048c6:	ed9d 0b06 	vldr	d0, [sp, #24]
 80048ca:	f020 fa63 	bl	8024d94 <modf>
	t = tr * -0.1706 + 112.27; //C
 80048ce:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80048d2:	4944      	ldr	r1, [pc, #272]	; (80049e4 <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80048d4:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 80048d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 80048dc:	4b42      	ldr	r3, [pc, #264]	; (80049e8 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 80048de:	2264      	movs	r2, #100	; 0x64
 80048e0:	4842      	ldr	r0, [pc, #264]	; (80049ec <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 80048e2:	ed9f 2b33 	vldr	d2, [pc, #204]	; 80049b0 <getpressure115.part.0+0x1b0>
 80048e6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80049b8 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 80048ea:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 80048ee:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80048f2:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80049c0 <getpressure115.part.0+0x1c0>
 80048f6:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 80048fa:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80048fe:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 8004902:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004906:	ed9f 2b30 	vldr	d2, [pc, #192]	; 80049c8 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800490a:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 800490e:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 8004912:	4b37      	ldr	r3, [pc, #220]	; (80049f0 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 8004914:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8004918:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800491c:	4935      	ldr	r1, [pc, #212]	; (80049f4 <getpressure115.part.0+0x1f4>)
	temperature = t;
 800491e:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 8004922:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004926:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 800492a:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800492e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004932:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 8004936:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800493a:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 800493e:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004942:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 8004946:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800494a:	feb8 7b47 	vrinta.f64	d7, d7
 800494e:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 8004952:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004956:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800495a:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 800495e:	ee16 3a10 	vmov	r3, s12
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004968:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 800496c:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800496e:	ee17 2a10 	vmov	r2, s14
}
 8004972:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004974:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800497c:	b00f      	add	sp, #60	; 0x3c
 800497e:	ecbd 8b02 	vpop	{d8}
 8004982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8004986:	4648      	mov	r0, r9
 8004988:	4621      	mov	r1, r4
 800498a:	f020 f8af 	bl	8024aec <iprintf>
			if (i == 3)
 800498e:	2d03      	cmp	r5, #3
 8004990:	f47f af53 	bne.w	800483a <getpressure115.part.0+0x3a>
}
 8004994:	4620      	mov	r0, r4
 8004996:	b00f      	add	sp, #60	; 0x3c
 8004998:	ecbd 8b02 	vpop	{d8}
 800499c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049a0:	04411044 	.word	0x04411044
 80049a4:	3fb04411 	.word	0x3fb04411
 80049a8:	00000000 	.word	0x00000000
 80049ac:	40490000 	.word	0x40490000
 80049b0:	86594af5 	.word	0x86594af5
 80049b4:	bfc5d638 	.word	0xbfc5d638
 80049b8:	ae147ae1 	.word	0xae147ae1
 80049bc:	405c1147 	.word	0x405c1147
 80049c0:	00000000 	.word	0x00000000
 80049c4:	40590000 	.word	0x40590000
 80049c8:	00000000 	.word	0x00000000
 80049cc:	40af4000 	.word	0x40af4000
 80049d0:	200021b0 	.word	0x200021b0
 80049d4:	20002cb8 	.word	0x20002cb8
 80049d8:	20002ca0 	.word	0x20002ca0
 80049dc:	20002ca8 	.word	0x20002ca8
 80049e0:	20002c98 	.word	0x20002c98
 80049e4:	20002d34 	.word	0x20002d34
 80049e8:	20002d38 	.word	0x20002d38
 80049ec:	20002d44 	.word	0x20002d44
 80049f0:	20002d40 	.word	0x20002d40
 80049f4:	20002bfc 	.word	0x20002bfc
 80049f8:	0802abd8 	.word	0x0802abd8

080049fc <cycleleds>:
void cycleleds(void) {
 80049fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fe:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 8004a00:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <cycleleds+0x74>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004a02:	4f1c      	ldr	r7, [pc, #112]	; (8004a74 <cycleleds+0x78>)
 8004a04:	ac01      	add	r4, sp, #4
 8004a06:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 8004a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a0c:	4623      	mov	r3, r4
 8004a0e:	4626      	mov	r6, r4
 8004a10:	c303      	stmia	r3!, {r0, r1}
 8004a12:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004a14:	f836 1b02 	ldrh.w	r1, [r6], #2
 8004a18:	4638      	mov	r0, r7
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f006 fd0c 	bl	800b438 <HAL_GPIO_WritePin>
		osDelay(140);
 8004a20:	208c      	movs	r0, #140	; 0x8c
 8004a22:	f010 f8ef 	bl	8014c04 <osDelay>
	for (i = 0; i < 5; i++) {
 8004a26:	42ae      	cmp	r6, r5
 8004a28:	d1f4      	bne.n	8004a14 <cycleleds+0x18>
	osDelay(600);
 8004a2a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004a2e:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8004a30:	4f10      	ldr	r7, [pc, #64]	; (8004a74 <cycleleds+0x78>)
	osDelay(600);
 8004a32:	f010 f8e7 	bl	8014c04 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8004a36:	f836 1b02 	ldrh.w	r1, [r6], #2
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f006 fcfb 	bl	800b438 <HAL_GPIO_WritePin>
		osDelay(140);
 8004a42:	208c      	movs	r0, #140	; 0x8c
 8004a44:	f010 f8de 	bl	8014c04 <osDelay>
	for (i = 0; i < 5; i++) {
 8004a48:	42ae      	cmp	r6, r5
 8004a4a:	d1f4      	bne.n	8004a36 <cycleleds+0x3a>
	osDelay(500);
 8004a4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004a50:	4e08      	ldr	r6, [pc, #32]	; (8004a74 <cycleleds+0x78>)
	osDelay(500);
 8004a52:	f010 f8d7 	bl	8014c04 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004a56:	f834 1b02 	ldrh.w	r1, [r4], #2
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f006 fceb 	bl	800b438 <HAL_GPIO_WritePin>
		osDelay(140);
 8004a62:	208c      	movs	r0, #140	; 0x8c
 8004a64:	f010 f8ce 	bl	8014c04 <osDelay>
	for (i = 0; i < 5; i++) {
 8004a68:	42ac      	cmp	r4, r5
 8004a6a:	d1f4      	bne.n	8004a56 <cycleleds+0x5a>
}
 8004a6c:	b005      	add	sp, #20
 8004a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a70:	08028cfc 	.word	0x08028cfc
 8004a74:	40020c00 	.word	0x40020c00

08004a78 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	b082      	sub	sp, #8
	osDelay(5);
 8004a7e:	2005      	movs	r0, #5
 8004a80:	f010 f8c0 	bl	8014c04 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004a84:	2201      	movs	r2, #1
 8004a86:	2104      	movs	r1, #4
 8004a88:	482b      	ldr	r0, [pc, #172]	; (8004b38 <setpgagain+0xc0>)
 8004a8a:	f006 fcd5 	bl	800b438 <HAL_GPIO_WritePin>
	osDelay(5);
 8004a8e:	2005      	movs	r0, #5
 8004a90:	f010 f8b8 	bl	8014c04 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004a94:	2200      	movs	r2, #0
 8004a96:	2104      	movs	r1, #4
 8004a98:	4827      	ldr	r0, [pc, #156]	; (8004b38 <setpgagain+0xc0>)
 8004a9a:	f006 fccd 	bl	800b438 <HAL_GPIO_WritePin>
	osDelay(5);
 8004a9e:	2005      	movs	r0, #5
 8004aa0:	f010 f8b0 	bl	8014c04 <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004aa4:	4925      	ldr	r1, [pc, #148]	; (8004b3c <setpgagain+0xc4>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aaa:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004aac:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004aae:	4824      	ldr	r0, [pc, #144]	; (8004b40 <setpgagain+0xc8>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004ab0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004ab4:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004ab8:	a901      	add	r1, sp, #4
 8004aba:	f009 fcc3 	bl	800e444 <HAL_SPI_Transmit>
 8004abe:	bb70      	cbnz	r0, 8004b1e <setpgagain+0xa6>
	osDelay(5);
 8004ac0:	2005      	movs	r0, #5
 8004ac2:	f010 f89f 	bl	8014c04 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	2104      	movs	r1, #4
 8004aca:	481b      	ldr	r0, [pc, #108]	; (8004b38 <setpgagain+0xc0>)
 8004acc:	f006 fcb4 	bl	800b438 <HAL_GPIO_WritePin>
	osDelay(5);
 8004ad0:	2005      	movs	r0, #5
 8004ad2:	f010 f897 	bl	8014c04 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2104      	movs	r1, #4
 8004ada:	4817      	ldr	r0, [pc, #92]	; (8004b38 <setpgagain+0xc0>)
 8004adc:	f006 fcac 	bl	800b438 <HAL_GPIO_WritePin>
	osDelay(5);
 8004ae0:	2005      	movs	r0, #5
 8004ae2:	f010 f88f 	bl	8014c04 <osDelay>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 8004ae6:	2c08      	cmp	r4, #8
 8004ae8:	f244 1001 	movw	r0, #16641	; 0x4101
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8004aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 8004af0:	bfb8      	it	lt
 8004af2:	f44f 4082 	movlt.w	r0, #16640	; 0x4100
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8004af6:	2201      	movs	r2, #1
 8004af8:	a901      	add	r1, sp, #4
 8004afa:	f8ad 0004 	strh.w	r0, [sp, #4]
 8004afe:	4810      	ldr	r0, [pc, #64]	; (8004b40 <setpgagain+0xc8>)
 8004b00:	f009 fca0 	bl	800e444 <HAL_SPI_Transmit>
 8004b04:	b990      	cbnz	r0, 8004b2c <setpgagain+0xb4>
	osDelay(5);
 8004b06:	2005      	movs	r0, #5
 8004b08:	f010 f87c 	bl	8014c04 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	2104      	movs	r1, #4
 8004b10:	4809      	ldr	r0, [pc, #36]	; (8004b38 <setpgagain+0xc0>)
 8004b12:	f006 fc91 	bl	800b438 <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <setpgagain+0xcc>)
 8004b18:	801c      	strh	r4, [r3, #0]
}
 8004b1a:	b002      	add	sp, #8
 8004b1c:	bd10      	pop	{r4, pc}
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 8004b1e:	4601      	mov	r1, r0
 8004b20:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004b24:	4808      	ldr	r0, [pc, #32]	; (8004b48 <setpgagain+0xd0>)
 8004b26:	f01f ffe1 	bl	8024aec <iprintf>
 8004b2a:	e7c9      	b.n	8004ac0 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 8004b2c:	4601      	mov	r1, r0
 8004b2e:	4807      	ldr	r0, [pc, #28]	; (8004b4c <setpgagain+0xd4>)
 8004b30:	f01f ffdc 	bl	8024aec <iprintf>
 8004b34:	e7e7      	b.n	8004b06 <setpgagain+0x8e>
 8004b36:	bf00      	nop
 8004b38:	40021800 	.word	0x40021800
 8004b3c:	0802b034 	.word	0x0802b034
 8004b40:	200022b4 	.word	0x200022b4
 8004b44:	20002d30 	.word	0x20002d30
 8004b48:	0802abfc 	.word	0x0802abfc
 8004b4c:	0802ac28 	.word	0x0802ac28

08004b50 <initpga>:
int initpga() {
 8004b50:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004b52:	2201      	movs	r2, #1
int initpga() {
 8004b54:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004b56:	2104      	movs	r1, #4
 8004b58:	4826      	ldr	r0, [pc, #152]	; (8004bf4 <initpga+0xa4>)
 8004b5a:	f006 fc6d 	bl	800b438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2104      	movs	r1, #4
 8004b62:	4824      	ldr	r0, [pc, #144]	; (8004bf4 <initpga+0xa4>)
 8004b64:	f006 fc68 	bl	800b438 <HAL_GPIO_WritePin>
	osDelay(50);
 8004b68:	2032      	movs	r0, #50	; 0x32
 8004b6a:	f010 f84b 	bl	8014c04 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004b6e:	2201      	movs	r2, #1
 8004b70:	2104      	movs	r1, #4
 8004b72:	4820      	ldr	r0, [pc, #128]	; (8004bf4 <initpga+0xa4>)
 8004b74:	f006 fc60 	bl	800b438 <HAL_GPIO_WritePin>
	osDelay(5);
 8004b78:	2005      	movs	r0, #5
 8004b7a:	f010 f843 	bl	8014c04 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2104      	movs	r1, #4
 8004b82:	481c      	ldr	r0, [pc, #112]	; (8004bf4 <initpga+0xa4>)
 8004b84:	f006 fc58 	bl	800b438 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f8ad 0004 	strh.w	r0, [sp, #4]
 8004b94:	a901      	add	r1, sp, #4
 8004b96:	4818      	ldr	r0, [pc, #96]	; (8004bf8 <initpga+0xa8>)
 8004b98:	f009 fc54 	bl	800e444 <HAL_SPI_Transmit>
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	bb08      	cbnz	r0, 8004be4 <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8004ba0:	2104      	movs	r1, #4
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4813      	ldr	r0, [pc, #76]	; (8004bf4 <initpga+0xa4>)
 8004ba6:	f006 fc47 	bl	800b438 <HAL_GPIO_WritePin>
	osDelay(5);
 8004baa:	2005      	movs	r0, #5
 8004bac:	f010 f82a 	bl	8014c04 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	2104      	movs	r1, #4
 8004bb4:	480f      	ldr	r0, [pc, #60]	; (8004bf4 <initpga+0xa4>)
 8004bb6:	f006 fc3f 	bl	800b438 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8004bba:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 8004bbe:	2005      	movs	r0, #5
 8004bc0:	f010 f820 	bl	8014c04 <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8004bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bc8:	2201      	movs	r2, #1
 8004bca:	a901      	add	r1, sp, #4
 8004bcc:	480a      	ldr	r0, [pc, #40]	; (8004bf8 <initpga+0xa8>)
 8004bce:	f8ad 4004 	strh.w	r4, [sp, #4]
 8004bd2:	f009 fc37 	bl	800e444 <HAL_SPI_Transmit>
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	b920      	cbnz	r0, 8004be4 <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 8004bda:	f7ff ff4d 	bl	8004a78 <setpgagain>
	return (0);
 8004bde:	4620      	mov	r0, r4
}
 8004be0:	b002      	add	sp, #8
 8004be2:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 8004be4:	4621      	mov	r1, r4
 8004be6:	4805      	ldr	r0, [pc, #20]	; (8004bfc <initpga+0xac>)
 8004be8:	f01f ff80 	bl	8024aec <iprintf>
		return (1);
 8004bec:	2001      	movs	r0, #1
}
 8004bee:	b002      	add	sp, #8
 8004bf0:	bd10      	pop	{r4, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40021800 	.word	0x40021800
 8004bf8:	200022b4 	.word	0x200022b4
 8004bfc:	0802ac44 	.word	0x0802ac44

08004c00 <bumppga>:
int bumppga(int i) {
 8004c00:	b530      	push	{r4, r5, lr}
	gain = pgagain;
 8004c02:	4d1f      	ldr	r5, [pc, #124]	; (8004c80 <bumppga+0x80>)
int bumppga(int i) {
 8004c04:	b083      	sub	sp, #12
 8004c06:	4604      	mov	r4, r0
	gain = pgagain;
 8004c08:	f9b5 1000 	ldrsh.w	r1, [r5]
	if ((pgagain > 9) || (pgagain < 0)) {
 8004c0c:	b28b      	uxth	r3, r1
	gain = pgagain;
 8004c0e:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 8004c10:	2b09      	cmp	r3, #9
 8004c12:	d827      	bhi.n	8004c64 <bumppga+0x64>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <bumppga+0x84>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b0b      	cmp	r3, #11
 8004c1a:	d00c      	beq.n	8004c36 <bumppga+0x36>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8004c1c:	2c00      	cmp	r4, #0
 8004c1e:	9b01      	ldr	r3, [sp, #4]
 8004c20:	da01      	bge.n	8004c26 <bumppga+0x26>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	dd04      	ble.n	8004c30 <bumppga+0x30>
 8004c26:	2c00      	cmp	r4, #0
 8004c28:	9b01      	ldr	r3, [sp, #4]
 8004c2a:	dd12      	ble.n	8004c52 <bumppga+0x52>
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	dd10      	ble.n	8004c52 <bumppga+0x52>
	return (0);
 8004c30:	2000      	movs	r0, #0
}
 8004c32:	b003      	add	sp, #12
 8004c34:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 8004c36:	2907      	cmp	r1, #7
 8004c38:	dd01      	ble.n	8004c3e <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 8004c3a:	2307      	movs	r3, #7
 8004c3c:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8004c3e:	2c00      	cmp	r4, #0
 8004c40:	9b01      	ldr	r3, [sp, #4]
 8004c42:	da01      	bge.n	8004c48 <bumppga+0x48>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	ddf3      	ble.n	8004c30 <bumppga+0x30>
 8004c48:	9b01      	ldr	r3, [sp, #4]
 8004c4a:	2b06      	cmp	r3, #6
 8004c4c:	dd01      	ble.n	8004c52 <bumppga+0x52>
 8004c4e:	2c00      	cmp	r4, #0
 8004c50:	dcee      	bgt.n	8004c30 <bumppga+0x30>
			gain = gain + i;
 8004c52:	9b01      	ldr	r3, [sp, #4]
 8004c54:	4423      	add	r3, r4
 8004c56:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 8004c58:	9801      	ldr	r0, [sp, #4]
 8004c5a:	f7ff ff0d 	bl	8004a78 <setpgagain>
			return (i);
 8004c5e:	4620      	mov	r0, r4
}
 8004c60:	b003      	add	sp, #12
 8004c62:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 8004c64:	4808      	ldr	r0, [pc, #32]	; (8004c88 <bumppga+0x88>)
 8004c66:	f01f ff41 	bl	8024aec <iprintf>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <bumppga+0x84>)
		pgagain = 0;
 8004c6c:	2200      	movs	r2, #0
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004c6e:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 8004c70:	802a      	strh	r2, [r5, #0]
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004c72:	2b0b      	cmp	r3, #11
 8004c74:	d0e3      	beq.n	8004c3e <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8004c76:	2c00      	cmp	r4, #0
 8004c78:	9b01      	ldr	r3, [sp, #4]
 8004c7a:	dbd2      	blt.n	8004c22 <bumppga+0x22>
 8004c7c:	e7d3      	b.n	8004c26 <bumppga+0x26>
 8004c7e:	bf00      	nop
 8004c80:	20002d30 	.word	0x20002d30
 8004c84:	20001d4c 	.word	0x20001d4c
 8004c88:	0802ac60 	.word	0x0802ac60

08004c8c <getpressure115>:
HAL_StatusTypeDef getpressure115(void) {
 8004c8c:	b510      	push	{r4, lr}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004c8e:	2012      	movs	r0, #18
HAL_StatusTypeDef getpressure115(void) {
 8004c90:	b084      	sub	sp, #16
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004c92:	2100      	movs	r1, #0
 8004c94:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004c98:	f88d 000c 	strb.w	r0, [sp, #12]
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	f88d 100d 	strb.w	r1, [sp, #13]
 8004ca2:	aa03      	add	r2, sp, #12
 8004ca4:	21c0      	movs	r1, #192	; 0xc0
 8004ca6:	4809      	ldr	r0, [pc, #36]	; (8004ccc <getpressure115+0x40>)
 8004ca8:	9400      	str	r4, [sp, #0]
 8004caa:	f006 fecb 	bl	800ba44 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004cae:	b928      	cbnz	r0, 8004cbc <getpressure115+0x30>
 8004cb0:	f7ff fda6 	bl	8004800 <getpressure115.part.0>
 8004cb4:	4604      	mov	r4, r0
}
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	b004      	add	sp, #16
 8004cba:	bd10      	pop	{r4, pc}
 8004cbc:	4604      	mov	r4, r0
		printf("I2C MPL115 HAL returned error 7\n\r");
 8004cbe:	4804      	ldr	r0, [pc, #16]	; (8004cd0 <getpressure115+0x44>)
 8004cc0:	f01f ff14 	bl	8024aec <iprintf>
}
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	b004      	add	sp, #16
 8004cc8:	bd10      	pop	{r4, pc}
 8004cca:	bf00      	nop
 8004ccc:	200021b0 	.word	0x200021b0
 8004cd0:	0802ac98 	.word	0x0802ac98

08004cd4 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8004cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8004cda:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004cde:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004ce2:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 8004ce6:	ac06      	add	r4, sp, #24
 8004ce8:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004cec:	4f36      	ldr	r7, [pc, #216]	; (8004dc8 <initpressure115+0xf4>)
 8004cee:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 8004cf2:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004cf6:	eb09 0204 	add.w	r2, r9, r4
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	9400      	str	r4, [sp, #0]
 8004cfe:	21c0      	movs	r1, #192	; 0xc0
 8004d00:	b292      	uxth	r2, r2
 8004d02:	4638      	mov	r0, r7
 8004d04:	441c      	add	r4, r3
 8004d06:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8004d0a:	f007 f82f 	bl	800bd6c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004d0e:	4605      	mov	r5, r0
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d141      	bne.n	8004d98 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 8004d14:	45a2      	cmp	sl, r4
 8004d16:	d1ee      	bne.n	8004cf6 <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8004d18:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004d1c:	2b5a      	cmp	r3, #90	; 0x5a
 8004d1e:	d04a      	beq.n	8004db6 <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8004d20:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8004d24:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004d28:	badb      	revsh	r3, r3
 8004d2a:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 8004d2e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8004d32:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8004d34:	109b      	asrs	r3, r3, #2
 8004d36:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 8004d38:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 8004d3a:	ee06 2a10 	vmov	s12, r2
 8004d3e:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 8004d42:	ee07 3a10 	vmov	s14, r3
 8004d46:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 8004d4a:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8004d4c:	ee05 1a10 	vmov	s10, r1
 8004d50:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004d54:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 8004d56:	ee04 0a10 	vmov	s8, r0
 8004d5a:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8004d5e:	4b1c      	ldr	r3, [pc, #112]	; (8004dd0 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8004d60:	481c      	ldr	r0, [pc, #112]	; (8004dd4 <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 8004d62:	491d      	ldr	r1, [pc, #116]	; (8004dd8 <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004d64:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 8004d68:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004d6c:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8004d6e:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 8004d72:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 8004d76:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004d7a:	f88d 2014 	strb.w	r2, [sp, #20]
 8004d7e:	2302      	movs	r3, #2
 8004d80:	aa05      	add	r2, sp, #20
 8004d82:	21c0      	movs	r1, #192	; 0xc0
 8004d84:	4810      	ldr	r0, [pc, #64]	; (8004dc8 <initpressure115+0xf4>)
 8004d86:	f006 fe5d 	bl	800ba44 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004d8a:	b968      	cbnz	r0, 8004da8 <initpressure115+0xd4>
 8004d8c:	f7ff fd38 	bl	8004800 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 8004d90:	4628      	mov	r0, r5
 8004d92:	b008      	add	sp, #32
 8004d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8004d98:	4601      	mov	r1, r0
 8004d9a:	4810      	ldr	r0, [pc, #64]	; (8004ddc <initpressure115+0x108>)
 8004d9c:	f01f fea6 	bl	8024aec <iprintf>
}
 8004da0:	4628      	mov	r0, r5
 8004da2:	b008      	add	sp, #32
 8004da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8004da8:	480d      	ldr	r0, [pc, #52]	; (8004de0 <initpressure115+0x10c>)
 8004daa:	f01f fe9f 	bl	8024aec <iprintf>
}
 8004dae:	4628      	mov	r0, r5
 8004db0:	b008      	add	sp, #32
 8004db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8004db6:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8004db8:	480a      	ldr	r0, [pc, #40]	; (8004de4 <initpressure115+0x110>)
 8004dba:	f01f fe97 	bl	8024aec <iprintf>
}
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	b008      	add	sp, #32
 8004dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200021b0 	.word	0x200021b0
 8004dcc:	20002cb8 	.word	0x20002cb8
 8004dd0:	20002c98 	.word	0x20002c98
 8004dd4:	20002ca0 	.word	0x20002ca0
 8004dd8:	20002ca8 	.word	0x20002ca8
 8004ddc:	0802acbc 	.word	0x0802acbc
 8004de0:	0802ac98 	.word	0x0802ac98
 8004de4:	0802acec 	.word	0x0802acec

08004de8 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8004de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dec:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8004dee:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8004df0:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004df2:	4f46      	ldr	r7, [pc, #280]	; (8004f0c <getpressure3115+0x124>)
 8004df4:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8004df6:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8004f2c <getpressure3115+0x144>
	data[0] = 0x55;
 8004dfa:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8004dfe:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004e00:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 8004e04:	f00f fefe 	bl	8014c04 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004e08:	2301      	movs	r3, #1
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	21c0      	movs	r1, #192	; 0xc0
 8004e0e:	4638      	mov	r0, r7
 8004e10:	9600      	str	r6, [sp, #0]
 8004e12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e16:	f006 ffa9 	bl	800bd6c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d163      	bne.n	8004ee8 <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8004e20:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8004e24:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8004e26:	071b      	lsls	r3, r3, #28
 8004e28:	d401      	bmi.n	8004e2e <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8004e2a:	2d04      	cmp	r5, #4
 8004e2c:	d1e7      	bne.n	8004dfe <getpressure3115+0x16>
 8004e2e:	2501      	movs	r5, #1
 8004e30:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004e32:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8004e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004f0c <getpressure3115+0x124>
 8004e3a:	46a9      	mov	r9, r5
 8004e3c:	b2aa      	uxth	r2, r5
 8004e3e:	2301      	movs	r3, #1
 8004e40:	21c0      	movs	r1, #192	; 0xc0
 8004e42:	4640      	mov	r0, r8
 8004e44:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8004e46:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004e48:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8004e4c:	f006 ff8e 	bl	800bd6c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004e50:	4604      	mov	r4, r0
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d152      	bne.n	8004efc <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8004e56:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8004e5a:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8004e5c:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8004e60:	d1ec      	bne.n	8004e3c <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004e62:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8004e66:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004e6a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004e6e:	0209      	lsls	r1, r1, #8
 8004e70:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8004e74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e7c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004e80:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 8004e82:	4923      	ldr	r1, [pc, #140]	; (8004f10 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004e84:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004e88:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004e8a:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004e8c:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004e8e:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004e90:	9805      	ldr	r0, [sp, #20]
 8004e92:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 8004e94:	4b1f      	ldr	r3, [pc, #124]	; (8004f14 <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004e96:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004e9a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004e9e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 8004ea2:	9a04      	ldr	r2, [sp, #16]
 8004ea4:	fba3 0202 	umull	r0, r2, r3, r2
 8004ea8:	0a12      	lsrs	r2, r2, #8
 8004eaa:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004eac:	9a04      	ldr	r2, [sp, #16]
 8004eae:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004eb2:	4819      	ldr	r0, [pc, #100]	; (8004f18 <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 8004eba:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8004ebc:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004ec0:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8004ec2:	9b06      	ldr	r3, [sp, #24]
 8004ec4:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004ec6:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 8004ec8:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004eca:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8004ecc:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 8004ece:	0912      	lsrs	r2, r2, #4
 8004ed0:	4813      	ldr	r0, [pc, #76]	; (8004f20 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 8004ed2:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 8004ed6:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8004ed8:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 8004eda:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <getpressure3115+0x13c>)
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	6013      	str	r3, [r2, #0]
}
 8004ee2:	b00c      	add	sp, #48	; 0x30
 8004ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8004ee8:	4601      	mov	r1, r0
 8004eea:	4640      	mov	r0, r8
 8004eec:	f01f fdfe 	bl	8024aec <iprintf>
			if (trys == 3)
 8004ef0:	2d03      	cmp	r5, #3
 8004ef2:	d195      	bne.n	8004e20 <getpressure3115+0x38>
}
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	b00c      	add	sp, #48	; 0x30
 8004ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8004efc:	4601      	mov	r1, r0
 8004efe:	480a      	ldr	r0, [pc, #40]	; (8004f28 <getpressure3115+0x140>)
 8004f00:	f01f fdf4 	bl	8024aec <iprintf>
}
 8004f04:	4620      	mov	r0, r4
 8004f06:	b00c      	add	sp, #48	; 0x30
 8004f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0c:	200021b0 	.word	0x200021b0
 8004f10:	20002bfc 	.word	0x20002bfc
 8004f14:	10624dd3 	.word	0x10624dd3
 8004f18:	20002d34 	.word	0x20002d34
 8004f1c:	20002d38 	.word	0x20002d38
 8004f20:	20002d40 	.word	0x20002d40
 8004f24:	20002d44 	.word	0x20002d44
 8004f28:	0802ad3c 	.word	0x0802ad3c
 8004f2c:	0802ad14 	.word	0x0802ad14

08004f30 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8004f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f32:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8004f34:	2501      	movs	r5, #1
 8004f36:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004f3a:	220c      	movs	r2, #12
 8004f3c:	a908      	add	r1, sp, #32
 8004f3e:	462b      	mov	r3, r5
 8004f40:	4832      	ldr	r0, [pc, #200]	; (800500c <initpressure3115+0xdc>)
 8004f42:	9100      	str	r1, [sp, #0]
 8004f44:	21c0      	movs	r1, #192	; 0xc0
 8004f46:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004f4a:	f006 ff0f 	bl	800bd6c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d145      	bne.n	8004fde <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8004f52:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004f56:	2bc4      	cmp	r3, #196	; 0xc4
 8004f58:	d003      	beq.n	8004f62 <initpressure3115+0x32>
		return (HAL_ERROR);
 8004f5a:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	b00b      	add	sp, #44	; 0x2c
 8004f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8004f62:	4f2b      	ldr	r7, [pc, #172]	; (8005010 <initpressure3115+0xe0>)
 8004f64:	aa05      	add	r2, sp, #20
 8004f66:	21c0      	movs	r1, #192	; 0xc0
 8004f68:	4828      	ldr	r0, [pc, #160]	; (800500c <initpressure3115+0xdc>)
 8004f6a:	89bb      	ldrh	r3, [r7, #12]
 8004f6c:	9600      	str	r6, [sp, #0]
 8004f6e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f72:	2302      	movs	r3, #2
 8004f74:	f006 fd66 	bl	800ba44 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004f78:	4604      	mov	r4, r0
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d136      	bne.n	8004fec <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8004f7e:	8a3b      	ldrh	r3, [r7, #16]
 8004f80:	aa06      	add	r2, sp, #24
 8004f82:	21c0      	movs	r1, #192	; 0xc0
 8004f84:	4821      	ldr	r0, [pc, #132]	; (800500c <initpressure3115+0xdc>)
 8004f86:	f8ad 3018 	strh.w	r3, [sp, #24]
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	9600      	str	r6, [sp, #0]
 8004f8e:	f006 fd59 	bl	800ba44 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004f92:	4604      	mov	r4, r0
 8004f94:	bb70      	cbnz	r0, 8004ff4 <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8004f96:	8aba      	ldrh	r2, [r7, #20]
 8004f98:	2302      	movs	r3, #2
 8004f9a:	21c0      	movs	r1, #192	; 0xc0
 8004f9c:	481b      	ldr	r0, [pc, #108]	; (800500c <initpressure3115+0xdc>)
 8004f9e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8004fa2:	aa07      	add	r2, sp, #28
 8004fa4:	9600      	str	r6, [sp, #0]
 8004fa6:	f006 fd4d 	bl	800ba44 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004faa:	4604      	mov	r4, r0
 8004fac:	bb50      	cbnz	r0, 8005004 <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8004fae:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 8004fb0:	2064      	movs	r0, #100	; 0x64
 8004fb2:	f00f fe27 	bl	8014c04 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8004fb6:	462b      	mov	r3, r5
 8004fb8:	9400      	str	r4, [sp, #0]
 8004fba:	462a      	mov	r2, r5
 8004fbc:	21c0      	movs	r1, #192	; 0xc0
 8004fbe:	4813      	ldr	r0, [pc, #76]	; (800500c <initpressure3115+0xdc>)
 8004fc0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004fc4:	f006 fed2 	bl	800bd6c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8004fc8:	4604      	mov	r4, r0
 8004fca:	b9b8      	cbnz	r0, 8004ffc <initpressure3115+0xcc>
	result = getpressure3115();
 8004fcc:	f7ff ff0c 	bl	8004de8 <getpressure3115>
	if (result != HAL_OK) {
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d0c2      	beq.n	8004f5c <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8004fd6:	480f      	ldr	r0, [pc, #60]	; (8005014 <initpressure3115+0xe4>)
 8004fd8:	f01f fd88 	bl	8024aec <iprintf>
 8004fdc:	e7be      	b.n	8004f5c <initpressure3115+0x2c>
 8004fde:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8004fe0:	480d      	ldr	r0, [pc, #52]	; (8005018 <initpressure3115+0xe8>)
 8004fe2:	f01f fd83 	bl	8024aec <iprintf>
}
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	b00b      	add	sp, #44	; 0x2c
 8004fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8004fec:	480b      	ldr	r0, [pc, #44]	; (800501c <initpressure3115+0xec>)
 8004fee:	f01f fd7d 	bl	8024aec <iprintf>
		return (result);
 8004ff2:	e7b3      	b.n	8004f5c <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8004ff4:	480a      	ldr	r0, [pc, #40]	; (8005020 <initpressure3115+0xf0>)
 8004ff6:	f01f fd79 	bl	8024aec <iprintf>
		return (result);
 8004ffa:	e7af      	b.n	8004f5c <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8004ffc:	4809      	ldr	r0, [pc, #36]	; (8005024 <initpressure3115+0xf4>)
 8004ffe:	f01f fd75 	bl	8024aec <iprintf>
		return (result);
 8005002:	e7ab      	b.n	8004f5c <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8005004:	4808      	ldr	r0, [pc, #32]	; (8005028 <initpressure3115+0xf8>)
 8005006:	f01f fd71 	bl	8024aec <iprintf>
		return (result);
 800500a:	e7a7      	b.n	8004f5c <initpressure3115+0x2c>
 800500c:	200021b0 	.word	0x200021b0
 8005010:	08028cfc 	.word	0x08028cfc
 8005014:	0802add4 	.word	0x0802add4
 8005018:	0802ac7c 	.word	0x0802ac7c
 800501c:	0802ad64 	.word	0x0802ad64
 8005020:	0802ad80 	.word	0x0802ad80
 8005024:	0802adb8 	.word	0x0802adb8
 8005028:	0802ad9c 	.word	0x0802ad9c

0800502c <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 800502c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 8005030:	4820      	ldr	r0, [pc, #128]	; (80050b4 <init_esp+0x88>)
 8005032:	f01f fdf7 	bl	8024c24 <puts>

	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 8005036:	2201      	movs	r2, #1
 8005038:	491f      	ldr	r1, [pc, #124]	; (80050b8 <init_esp+0x8c>)
 800503a:	4820      	ldr	r0, [pc, #128]	; (80050bc <init_esp+0x90>)
 800503c:	f00d fd86 	bl	8012b4c <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8005040:	bb98      	cbnz	r0, 80050aa <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8005042:	2200      	movs	r2, #0
 8005044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005048:	481d      	ldr	r0, [pc, #116]	; (80050c0 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 800504a:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 800504e:	f006 f9f3 	bl	800b438 <HAL_GPIO_WritePin>
	osDelay(20);
 8005052:	4c1c      	ldr	r4, [pc, #112]	; (80050c4 <init_esp+0x98>)
 8005054:	2014      	movs	r0, #20
 8005056:	4d1c      	ldr	r5, [pc, #112]	; (80050c8 <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 8005058:	4e1c      	ldr	r6, [pc, #112]	; (80050cc <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 800505a:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 800505e:	f00f fdd1 	bl	8014c04 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8005062:	2201      	movs	r2, #1
 8005064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005068:	4815      	ldr	r0, [pc, #84]	; (80050c0 <init_esp+0x94>)
 800506a:	f006 f9e5 	bl	800b438 <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	e006      	b.n	8005080 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 8005072:	5cf0      	ldrb	r0, [r6, r3]
 8005074:	6021      	str	r1, [r4, #0]
 8005076:	f01f fd51 	bl	8024b1c <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	2b60      	cmp	r3, #96	; 0x60
 800507e:	d810      	bhi.n	80050a2 <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8005080:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8005082:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8005084:	429a      	cmp	r2, r3
 8005086:	d1f4      	bne.n	8005072 <init_esp+0x46>
		osDelay(1);
 8005088:	2001      	movs	r0, #1
 800508a:	f00f fdbb 	bl	8014c04 <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 800508e:	3f01      	subs	r7, #1
 8005090:	d1ed      	bne.n	800506e <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 8005092:	20c8      	movs	r0, #200	; 0xc8
 8005094:	f00f fdb6 	bl	8014c04 <osDelay>
	printf("\n");
 8005098:	200a      	movs	r0, #10
}
 800509a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 800509e:	f01f bd3d 	b.w	8024b1c <putchar>
			espoutindex = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	f8c4 8000 	str.w	r8, [r4]
 80050a8:	e7ea      	b.n	8005080 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 80050aa:	4809      	ldr	r0, [pc, #36]	; (80050d0 <init_esp+0xa4>)
 80050ac:	f01f fdba 	bl	8024c24 <puts>
 80050b0:	e7c7      	b.n	8005042 <init_esp+0x16>
 80050b2:	bf00      	nop
 80050b4:	0802adf4 	.word	0x0802adf4
 80050b8:	20002cc0 	.word	0x20002cc0
 80050bc:	20002850 	.word	0x20002850
 80050c0:	40021000 	.word	0x40021000
 80050c4:	20002cc4 	.word	0x20002cc4
 80050c8:	20002d28 	.word	0x20002d28
 80050cc:	20002cc8 	.word	0x20002cc8
 80050d0:	0802ae08 	.word	0x0802ae08

080050d4 <uart6_rxdone>:
uart6_rxdone() {
 80050d4:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 80050d6:	4c0b      	ldr	r4, [pc, #44]	; (8005104 <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <uart6_rxdone+0x34>)
	i = esprxindex;
 80050da:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 80050dc:	7819      	ldrb	r1, [r3, #0]
 80050de:	1c6b      	adds	r3, r5, #1
 80050e0:	4a0a      	ldr	r2, [pc, #40]	; (800510c <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 80050e2:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 80050e4:	5551      	strb	r1, [r2, r5]
 80050e6:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 80050e8:	d902      	bls.n	80050f0 <uart6_rxdone+0x1c>
		esprxindex = 0;
 80050ea:	2200      	movs	r2, #0
 80050ec:	4613      	mov	r3, r2
 80050ee:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 80050f0:	4a07      	ldr	r2, [pc, #28]	; (8005110 <uart6_rxdone+0x3c>)
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d000      	beq.n	80050fa <uart6_rxdone+0x26>
}
 80050f8:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 80050fa:	4806      	ldr	r0, [pc, #24]	; (8005114 <uart6_rxdone+0x40>)
 80050fc:	f01f fd92 	bl	8024c24 <puts>
		esprxindex = i;
 8005100:	6025      	str	r5, [r4, #0]
}
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	20002d28 	.word	0x20002d28
 8005108:	20002cc0 	.word	0x20002cc0
 800510c:	20002cc8 	.word	0x20002cc8
 8005110:	20002cc4 	.word	0x20002cc4
 8005114:	0802ae20 	.word	0x0802ae20

08005118 <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 8005118:	b510      	push	{r4, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 800511e:	ac02      	add	r4, sp, #8
 8005120:	4620      	mov	r0, r4
 8005122:	f01f ff66 	bl	8024ff2 <stpcpy>
	strcat(txbuf, "\r\n");
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <esp_cmd+0x44>)
 8005128:	8819      	ldrh	r1, [r3, #0]
 800512a:	789a      	ldrb	r2, [r3, #2]
 800512c:	1b03      	subs	r3, r0, r4
 800512e:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 8005130:	4621      	mov	r1, r4
	len = strlen(txbuf);
 8005132:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 8005134:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 8005136:	480a      	ldr	r0, [pc, #40]	; (8005160 <esp_cmd+0x48>)
	len = strlen(txbuf);
 8005138:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 800513a:	f01f fcd7 	bl	8024aec <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 800513e:	9a01      	ldr	r2, [sp, #4]
 8005140:	4621      	mov	r1, r4
 8005142:	4808      	ldr	r0, [pc, #32]	; (8005164 <esp_cmd+0x4c>)
 8005144:	b292      	uxth	r2, r2
 8005146:	f00c fac1 	bl	80116cc <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 800514a:	b908      	cbnz	r0, 8005150 <esp_cmd+0x38>
}
 800514c:	b006      	add	sp, #24
 800514e:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8005150:	4601      	mov	r1, r0
 8005152:	4805      	ldr	r0, [pc, #20]	; (8005168 <esp_cmd+0x50>)
 8005154:	f01f fcca 	bl	8024aec <iprintf>
}
 8005158:	b006      	add	sp, #24
 800515a:	bd10      	pop	{r4, pc}
 800515c:	0802a9d0 	.word	0x0802a9d0
 8005160:	0802ae3c 	.word	0x0802ae3c
 8005164:	20002850 	.word	0x20002850
 8005168:	0802ae50 	.word	0x0802ae50

0800516c <test_esp>:
void test_esp() {
 800516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 8005170:	4813      	ldr	r0, [pc, #76]	; (80051c0 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 8005172:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 8005176:	f01f fd55 	bl	8024c24 <puts>
	osDelay(200);
 800517a:	4c12      	ldr	r4, [pc, #72]	; (80051c4 <test_esp+0x58>)
 800517c:	20c8      	movs	r0, #200	; 0xc8
 800517e:	4d12      	ldr	r5, [pc, #72]	; (80051c8 <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 8005180:	4e12      	ldr	r6, [pc, #72]	; (80051cc <test_esp+0x60>)
			espoutindex = 0;
 8005182:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 8005186:	f00f fd3d 	bl	8014c04 <osDelay>
	esp_cmd(getstatus);	// send the command
 800518a:	4811      	ldr	r0, [pc, #68]	; (80051d0 <test_esp+0x64>)
 800518c:	f7ff ffc4 	bl	8005118 <esp_cmd>
	while (espoutindex != esprxindex) {
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	e006      	b.n	80051a2 <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 8005194:	5cf0      	ldrb	r0, [r6, r3]
 8005196:	6021      	str	r1, [r4, #0]
 8005198:	f01f fcc0 	bl	8024b1c <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	2b60      	cmp	r3, #96	; 0x60
 80051a0:	d80a      	bhi.n	80051b8 <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 80051a2:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 80051a4:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d1f4      	bne.n	8005194 <test_esp+0x28>
		osDelay(1);
 80051aa:	2001      	movs	r0, #1
 80051ac:	f00f fd2a 	bl	8014c04 <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 80051b0:	3f01      	subs	r7, #1
 80051b2:	d1ed      	bne.n	8005190 <test_esp+0x24>
}
 80051b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f8c4 8000 	str.w	r8, [r4]
 80051be:	e7f0      	b.n	80051a2 <test_esp+0x36>
 80051c0:	0802ae70 	.word	0x0802ae70
 80051c4:	20002cc4 	.word	0x20002cc4
 80051c8:	20002d28 	.word	0x20002d28
 80051cc:	20002cc8 	.word	0x20002cc8
 80051d0:	20000268 	.word	0x20000268

080051d4 <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 80051d4:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 80051d6:	4818      	ldr	r0, [pc, #96]	; (8005238 <init_ds2485+0x64>)
void init_ds2485(void) {
 80051d8:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 80051da:	f01f fd23 	bl	8024c24 <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 80051de:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80051e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 80051e4:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 80051e6:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80051ea:	2303      	movs	r3, #3
 80051ec:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 80051ee:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80051f2:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 80051f4:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80051f8:	aa02      	add	r2, sp, #8
 80051fa:	4810      	ldr	r0, [pc, #64]	; (800523c <init_ds2485+0x68>)
 80051fc:	f006 fc22 	bl	800ba44 <HAL_I2C_Master_Transmit>
 8005200:	b9a8      	cbnz	r0, 800522e <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 8005202:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8005204:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 8005208:	f00f fcfc 	bl	8014c04 <osDelay>
		data[i] = 0xA5 + i;
 800520c:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 800520e:	2181      	movs	r1, #129	; 0x81
 8005210:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 8005212:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8005216:	aa02      	add	r2, sp, #8
 8005218:	4808      	ldr	r0, [pc, #32]	; (800523c <init_ds2485+0x68>)
 800521a:	9400      	str	r4, [sp, #0]
 800521c:	f006 fcda 	bl	800bbd4 <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 8005220:	4601      	mov	r1, r0
 8005222:	b110      	cbz	r0, 800522a <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8005224:	4806      	ldr	r0, [pc, #24]	; (8005240 <init_ds2485+0x6c>)
 8005226:	f01f fc61 	bl	8024aec <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 800522a:	b006      	add	sp, #24
 800522c:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 800522e:	4601      	mov	r1, r0
 8005230:	4803      	ldr	r0, [pc, #12]	; (8005240 <init_ds2485+0x6c>)
 8005232:	f01f fc5b 	bl	8024aec <iprintf>
 8005236:	e7e4      	b.n	8005202 <init_ds2485+0x2e>
 8005238:	0802ae98 	.word	0x0802ae98
 800523c:	200021b0 	.word	0x200021b0
 8005240:	0802aea4 	.word	0x0802aea4

08005244 <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4604      	mov	r4, r0
 8005248:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 800524a:	4821      	ldr	r0, [pc, #132]	; (80052d0 <readp_ds2485+0x8c>)
 800524c:	f01f fcea 	bl	8024c24 <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 8005250:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 8005256:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 8005258:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 800525c:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 8005262:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005266:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 8005268:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800526c:	aa03      	add	r2, sp, #12
 800526e:	4819      	ldr	r0, [pc, #100]	; (80052d4 <readp_ds2485+0x90>)
 8005270:	f006 fbe8 	bl	800ba44 <HAL_I2C_Master_Transmit>
 8005274:	bb18      	cbnz	r0, 80052be <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 8005276:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005278:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 800527c:	f00f fcc2 	bl	8014c04 <osDelay>
		data[i] = 0x5A + i;
 8005280:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005282:	b2a3      	uxth	r3, r4
 8005284:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 8005286:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 800528a:	2181      	movs	r1, #129	; 0x81
 800528c:	4811      	ldr	r0, [pc, #68]	; (80052d4 <readp_ds2485+0x90>)
 800528e:	9500      	str	r5, [sp, #0]
 8005290:	f006 fca0 	bl	800bbd4 <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 8005294:	b9b8      	cbnz	r0, 80052c6 <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 8005296:	4810      	ldr	r0, [pc, #64]	; (80052d8 <readp_ds2485+0x94>)
 8005298:	f10d 040b 	add.w	r4, sp, #11
 800529c:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 80052a0:	4d0e      	ldr	r5, [pc, #56]	; (80052dc <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 80052a2:	f01f fc23 	bl	8024aec <iprintf>
		printf("0x%02x ", data[i]);
 80052a6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80052aa:	4628      	mov	r0, r5
 80052ac:	f01f fc1e 	bl	8024aec <iprintf>
	for (i = 0; i < 8; i++) {
 80052b0:	42b4      	cmp	r4, r6
 80052b2:	d1f8      	bne.n	80052a6 <readp_ds2485+0x62>
	}
	printf("\n");
 80052b4:	200a      	movs	r0, #10
 80052b6:	f01f fc31 	bl	8024b1c <putchar>
}
 80052ba:	b006      	add	sp, #24
 80052bc:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 80052be:	4808      	ldr	r0, [pc, #32]	; (80052e0 <readp_ds2485+0x9c>)
 80052c0:	f01f fc14 	bl	8024aec <iprintf>
 80052c4:	e7d7      	b.n	8005276 <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 80052c6:	4601      	mov	r1, r0
 80052c8:	4806      	ldr	r0, [pc, #24]	; (80052e4 <readp_ds2485+0xa0>)
 80052ca:	f01f fc0f 	bl	8024aec <iprintf>
 80052ce:	e7e2      	b.n	8005296 <readp_ds2485+0x52>
 80052d0:	0802aec8 	.word	0x0802aec8
 80052d4:	200021b0 	.word	0x200021b0
 80052d8:	0802af28 	.word	0x0802af28
 80052dc:	0802af50 	.word	0x0802af50
 80052e0:	0802aee0 	.word	0x0802aee0
 80052e4:	0802af04 	.word	0x0802af04

080052e8 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 80052e8:	b530      	push	{r4, r5, lr}
 80052ea:	b083      	sub	sp, #12

	cycleleds();
	osDelay(500);
	printf("Initsplat: LED cycle\n");

	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 80052ec:	4c41      	ldr	r4, [pc, #260]	; (80053f4 <initsplat+0x10c>)
	cycleleds();
 80052ee:	f7ff fb85 	bl	80049fc <cycleleds>
	osDelay(500);
 80052f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052f6:	f00f fc85 	bl	8014c04 <osDelay>
	printf("Initsplat: LED cycle\n");
 80052fa:	483f      	ldr	r0, [pc, #252]	; (80053f8 <initsplat+0x110>)
 80052fc:	f01f fc92 	bl	8024c24 <puts>
	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	2b0b      	cmp	r3, #11
 8005304:	d05d      	beq.n	80053c2 <initsplat+0xda>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 8005306:	483d      	ldr	r0, [pc, #244]	; (80053fc <initsplat+0x114>)
 8005308:	f01f fc8c 	bl	8024c24 <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 800530c:	4d3c      	ldr	r5, [pc, #240]	; (8005400 <initsplat+0x118>)
	initpga();
 800530e:	f7ff fc1f 	bl	8004b50 <initpga>
	osDelay(500);
 8005312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005316:	f00f fc75 	bl	8014c04 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 800531a:	483a      	ldr	r0, [pc, #232]	; (8005404 <initsplat+0x11c>)
 800531c:	f01f fbe6 	bl	8024aec <iprintf>
	psensor = PNONE;
 8005320:	2300      	movs	r3, #0
 8005322:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 8005324:	f7ff fe04 	bl	8004f30 <initpressure3115>
 8005328:	b9e0      	cbnz	r0, 8005364 <initsplat+0x7c>
		printf("MPL3115A2 pressure sensor present\n\r");
 800532a:	4837      	ldr	r0, [pc, #220]	; (8005408 <initsplat+0x120>)
 800532c:	f01f fbde 	bl	8024aec <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 8005330:	4a36      	ldr	r2, [pc, #216]	; (800540c <initsplat+0x124>)
		psensor = MPL3115A2;
 8005332:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 8005334:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8005338:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 800533a:	f043 0310 	orr.w	r3, r3, #16
 800533e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 8005342:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005346:	f00f fc5d 	bl	8014c04 <osDelay>

	if ((circuitboardpcb == LIGHTNINGBOARD1) || (circuitboardpcb == LIGHTNINGBOARD2)) {
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	3b15      	subs	r3, #21
 800534e:	2b01      	cmp	r3, #1
 8005350:	d91c      	bls.n	800538c <initsplat+0xa4>
		osDelay(500);
		test_esp();
		osDelay(200);
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8005352:	2200      	movs	r2, #0
 8005354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005358:	482d      	ldr	r0, [pc, #180]	; (8005410 <initsplat+0x128>)
}
 800535a:	b003      	add	sp, #12
 800535c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8005360:	f006 b86a 	b.w	800b438 <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 8005364:	f7ff fcb6 	bl	8004cd4 <initpressure115>
 8005368:	b960      	cbnz	r0, 8005384 <initsplat+0x9c>
			printf("MPL115A2 pressure sensor present\n\r");
 800536a:	482a      	ldr	r0, [pc, #168]	; (8005414 <initsplat+0x12c>)
 800536c:	f01f fbbe 	bl	8024aec <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 8005370:	4a26      	ldr	r2, [pc, #152]	; (800540c <initsplat+0x124>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8005372:	2101      	movs	r1, #1
			statuspkt.bconf |= (MPL115A2 << 3);
 8005374:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8005378:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 800537a:	f043 0308 	orr.w	r3, r3, #8
 800537e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005382:	e7de      	b.n	8005342 <initsplat+0x5a>
			printf("NO pressure sensor present\n\r");
 8005384:	4824      	ldr	r0, [pc, #144]	; (8005418 <initsplat+0x130>)
 8005386:	f01f fbb1 	bl	8024aec <iprintf>
 800538a:	e7da      	b.n	8005342 <initsplat+0x5a>
		huart6.Init.BaudRate = 115200;
 800538c:	4823      	ldr	r0, [pc, #140]	; (800541c <initsplat+0x134>)
 800538e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005392:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 8005394:	f00d f9ea 	bl	801276c <HAL_UART_Init>
 8005398:	bb28      	cbnz	r0, 80053e6 <initsplat+0xfe>
	init_ds2485();
 800539a:	f7ff ff1b 	bl	80051d4 <init_ds2485>
	osDelay(80);
 800539e:	2050      	movs	r0, #80	; 0x50
 80053a0:	f00f fc30 	bl	8014c04 <osDelay>
	readp_ds2485(8);
 80053a4:	2008      	movs	r0, #8
 80053a6:	f7ff ff4d 	bl	8005244 <readp_ds2485>
		init_esp();
 80053aa:	f7ff fe3f 	bl	800502c <init_esp>
		osDelay(500);
 80053ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053b2:	f00f fc27 	bl	8014c04 <osDelay>
		test_esp();
 80053b6:	f7ff fed9 	bl	800516c <test_esp>
		osDelay(200);
 80053ba:	20c8      	movs	r0, #200	; 0xc8
 80053bc:	f00f fc22 	bl	8014c04 <osDelay>
 80053c0:	e7c7      	b.n	8005352 <initsplat+0x6a>
		printf("Initsplat: Dual Mux\n\r");
 80053c2:	4817      	ldr	r0, [pc, #92]	; (8005420 <initsplat+0x138>)
 80053c4:	f01f fb92 	bl	8024aec <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 80053c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053cc:	2301      	movs	r3, #1
 80053ce:	4a15      	ldr	r2, [pc, #84]	; (8005424 <initsplat+0x13c>)
 80053d0:	9000      	str	r0, [sp, #0]
 80053d2:	2188      	movs	r1, #136	; 0x88
 80053d4:	4814      	ldr	r0, [pc, #80]	; (8005428 <initsplat+0x140>)
 80053d6:	f006 fb35 	bl	800ba44 <HAL_I2C_Master_Transmit>
 80053da:	b938      	cbnz	r0, 80053ec <initsplat+0x104>
		osDelay(500);
 80053dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053e0:	f00f fc10 	bl	8014c04 <osDelay>
 80053e4:	e78f      	b.n	8005306 <initsplat+0x1e>
			Error_Handler();
 80053e6:	f7fd fec7 	bl	8003178 <Error_Handler>
 80053ea:	e7d6      	b.n	800539a <initsplat+0xb2>
		printf("I2C HAL returned error 1\n\r");
 80053ec:	480f      	ldr	r0, [pc, #60]	; (800542c <initsplat+0x144>)
 80053ee:	f01f fb7d 	bl	8024aec <iprintf>
 80053f2:	e7f3      	b.n	80053dc <initsplat+0xf4>
 80053f4:	20001d4c 	.word	0x20001d4c
 80053f8:	0802af58 	.word	0x0802af58
 80053fc:	0802af88 	.word	0x0802af88
 8005400:	20002d3c 	.word	0x20002d3c
 8005404:	0802afac 	.word	0x0802afac
 8005408:	0802afcc 	.word	0x0802afcc
 800540c:	20002bfc 	.word	0x20002bfc
 8005410:	40021000 	.word	0x40021000
 8005414:	0802aff0 	.word	0x0802aff0
 8005418:	0802b014 	.word	0x0802b014
 800541c:	20002850 	.word	0x20002850
 8005420:	0802af70 	.word	0x0802af70
 8005424:	20000274 	.word	0x20000274
 8005428:	200021b0 	.word	0x200021b0
 800542c:	0802ac7c 	.word	0x0802ac7c

08005430 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005430:	4b1a      	ldr	r3, [pc, #104]	; (800549c <HAL_MspInit+0x6c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005432:	2200      	movs	r2, #0
 8005434:	210f      	movs	r1, #15
 8005436:	f06f 0001 	mvn.w	r0, #1
{
 800543a:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800543c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 800543e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8005440:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8005444:	641c      	str	r4, [r3, #64]	; 0x40
 8005446:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005448:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 800544c:	9400      	str	r4, [sp, #0]
 800544e:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005450:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8005452:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005456:	645c      	str	r4, [r3, #68]	; 0x44
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005462:	f003 f80b 	bl	800847c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 8005466:	2200      	movs	r2, #0
 8005468:	2106      	movs	r1, #6
 800546a:	2005      	movs	r0, #5
 800546c:	f003 f806 	bl	800847c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005470:	2005      	movs	r0, #5
 8005472:	f003 f84d 	bl	8008510 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 8005476:	2200      	movs	r2, #0
 8005478:	2106      	movs	r1, #6
 800547a:	2005      	movs	r0, #5
 800547c:	f002 fffe 	bl	800847c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005480:	2005      	movs	r0, #5
 8005482:	f003 f845 	bl	8008510 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 8005486:	2051      	movs	r0, #81	; 0x51
 8005488:	2200      	movs	r2, #0
 800548a:	2106      	movs	r1, #6
 800548c:	f002 fff6 	bl	800847c <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005490:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005492:	b002      	add	sp, #8
 8005494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005498:	f003 b83a 	b.w	8008510 <HAL_NVIC_EnableIRQ>
 800549c:	40023800 	.word	0x40023800

080054a0 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80054a0:	4a49      	ldr	r2, [pc, #292]	; (80055c8 <HAL_ADC_MspInit+0x128>)
 80054a2:	6803      	ldr	r3, [r0, #0]
{
 80054a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 80054a6:	4293      	cmp	r3, r2
{
 80054a8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054aa:	f04f 0400 	mov.w	r4, #0
 80054ae:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80054b2:	9409      	str	r4, [sp, #36]	; 0x24
 80054b4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80054b8:	d007      	beq.n	80054ca <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80054ba:	4a44      	ldr	r2, [pc, #272]	; (80055cc <HAL_ADC_MspInit+0x12c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d045      	beq.n	800554c <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80054c0:	4a43      	ldr	r2, [pc, #268]	; (80055d0 <HAL_ADC_MspInit+0x130>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d05f      	beq.n	8005586 <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80054c6:	b00d      	add	sp, #52	; 0x34
 80054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80054ca:	4b42      	ldr	r3, [pc, #264]	; (80055d4 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054cc:	2703      	movs	r7, #3
 80054ce:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d0:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 80054d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d4:	4840      	ldr	r0, [pc, #256]	; (80055d8 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80054d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 80054da:	4e40      	ldr	r6, [pc, #256]	; (80055dc <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80054dc:	645a      	str	r2, [r3, #68]	; 0x44
 80054de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054e0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80054e4:	9201      	str	r2, [sp, #4]
 80054e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80054f8:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054fa:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80054fc:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005500:	f005 fcee 	bl	800aee0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8005504:	4b36      	ldr	r3, [pc, #216]	; (80055e0 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8005506:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800550a:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 800550c:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800550e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8005512:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005514:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005518:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800551a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800551e:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005520:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005522:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005526:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005528:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800552a:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800552e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005532:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005534:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005538:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800553c:	f003 fab0 	bl	8008aa0 <HAL_DMA_Init>
 8005540:	2800      	cmp	r0, #0
 8005542:	d13d      	bne.n	80055c0 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005544:	63ae      	str	r6, [r5, #56]	; 0x38
 8005546:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8005548:	b00d      	add	sp, #52	; 0x34
 800554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 800554c:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800554e:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005550:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005552:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555a:	645a      	str	r2, [r3, #68]	; 0x44
 800555c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800555e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005562:	9203      	str	r2, [sp, #12]
 8005564:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005570:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005572:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005576:	4818      	ldr	r0, [pc, #96]	; (80055d8 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005578:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800557a:	9304      	str	r3, [sp, #16]
 800557c:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800557e:	f005 fcaf 	bl	800aee0 <HAL_GPIO_Init>
}
 8005582:	b00d      	add	sp, #52	; 0x34
 8005584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005586:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005588:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800558a:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558c:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 800558e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
 8005596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005598:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800559c:	9205      	str	r2, [sp, #20]
 800559e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80055aa:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ac:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b0:	4809      	ldr	r0, [pc, #36]	; (80055d8 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055b2:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b4:	9306      	str	r3, [sp, #24]
 80055b6:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b8:	f005 fc92 	bl	800aee0 <HAL_GPIO_Init>
}
 80055bc:	b00d      	add	sp, #52	; 0x34
 80055be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80055c0:	f7fd fdda 	bl	8003178 <Error_Handler>
 80055c4:	e7be      	b.n	8005544 <HAL_ADC_MspInit+0xa4>
 80055c6:	bf00      	nop
 80055c8:	40012000 	.word	0x40012000
 80055cc:	40012100 	.word	0x40012100
 80055d0:	40012200 	.word	0x40012200
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40020000 	.word	0x40020000
 80055dc:	20001eb0 	.word	0x20001eb0
 80055e0:	40026470 	.word	0x40026470

080055e4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <HAL_CRC_MspInit+0x28>)
 80055e6:	6802      	ldr	r2, [r0, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d000      	beq.n	80055ee <HAL_CRC_MspInit+0xa>
 80055ec:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80055ee:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 80055f6:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 80055f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005608:	b002      	add	sp, #8
 800560a:	4770      	bx	lr
 800560c:	40023000 	.word	0x40023000

08005610 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8005610:	4b2b      	ldr	r3, [pc, #172]	; (80056c0 <HAL_DAC_MspInit+0xb0>)
 8005612:	6802      	ldr	r2, [r0, #0]
{
 8005614:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 8005616:	429a      	cmp	r2, r3
{
 8005618:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800561a:	f04f 0400 	mov.w	r4, #0
 800561e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005622:	9405      	str	r4, [sp, #20]
 8005624:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 8005628:	d001      	beq.n	800562e <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800562a:	b008      	add	sp, #32
 800562c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 800562e:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005632:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005634:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 8005636:	4e23      	ldr	r6, [pc, #140]	; (80056c4 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8005638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800563a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
 8005640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005642:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8005646:	9201      	str	r2, [sp, #4]
 8005648:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800564a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005652:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800565c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800565e:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005660:	4819      	ldr	r0, [pc, #100]	; (80056c8 <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005662:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005666:	f005 fc3b 	bl	800aee0 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800566a:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 800566e:	4a17      	ldr	r2, [pc, #92]	; (80056cc <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005670:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8005672:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005674:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 8005678:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800567a:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800567c:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 800567e:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005680:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005682:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8005684:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8005686:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800568a:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800568c:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800568e:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8005690:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005692:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8005694:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005696:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800569a:	f003 fa01 	bl	8008aa0 <HAL_DMA_Init>
 800569e:	b958      	cbnz	r0, 80056b8 <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80056a0:	2200      	movs	r2, #0
 80056a2:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80056a4:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80056a6:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80056a8:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80056aa:	f002 fee7 	bl	800847c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80056ae:	2036      	movs	r0, #54	; 0x36
 80056b0:	f002 ff2e 	bl	8008510 <HAL_NVIC_EnableIRQ>
}
 80056b4:	b008      	add	sp, #32
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80056b8:	f7fd fd5e 	bl	8003178 <Error_Handler>
 80056bc:	e7f0      	b.n	80056a0 <HAL_DAC_MspInit+0x90>
 80056be:	bf00      	nop
 80056c0:	40007400 	.word	0x40007400
 80056c4:	20001f10 	.word	0x20001f10
 80056c8:	40020000 	.word	0x40020000
 80056cc:	40026088 	.word	0x40026088

080056d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056d0:	b530      	push	{r4, r5, lr}
 80056d2:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d4:	2100      	movs	r1, #0
{
 80056d6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80056d8:	2290      	movs	r2, #144	; 0x90
 80056da:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80056de:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80056e2:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80056e6:	f01e fa65 	bl	8023bb4 <memset>
  if(hi2c->Instance==I2C1)
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	4a4a      	ldr	r2, [pc, #296]	; (8005818 <HAL_I2C_MspInit+0x148>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d007      	beq.n	8005702 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80056f2:	4a4a      	ldr	r2, [pc, #296]	; (800581c <HAL_I2C_MspInit+0x14c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d030      	beq.n	800575a <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 80056f8:	4a49      	ldr	r2, [pc, #292]	; (8005820 <HAL_I2C_MspInit+0x150>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d057      	beq.n	80057ae <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80056fe:	b031      	add	sp, #196	; 0xc4
 8005700:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005706:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005708:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800570a:	f007 ff27 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 800570e:	2800      	cmp	r0, #0
 8005710:	d178      	bne.n	8005804 <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005712:	4c44      	ldr	r4, [pc, #272]	; (8005824 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005714:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005718:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800571a:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800571c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571e:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005720:	f043 0302 	orr.w	r3, r3, #2
 8005724:	6323      	str	r3, [r4, #48]	; 0x30
 8005726:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005728:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800572c:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005730:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005732:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005734:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005736:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005738:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800573c:	483a      	ldr	r0, [pc, #232]	; (8005828 <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800573e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005740:	f005 fbce 	bl	800aee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800574a:	6423      	str	r3, [r4, #64]	; 0x40
 800574c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800574e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005752:	9302      	str	r3, [sp, #8]
 8005754:	9b02      	ldr	r3, [sp, #8]
}
 8005756:	b031      	add	sp, #196	; 0xc4
 8005758:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800575a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800575e:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005760:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005762:	f007 fefb 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 8005766:	2800      	cmp	r0, #0
 8005768:	d14f      	bne.n	800580a <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800576a:	4c2e      	ldr	r4, [pc, #184]	; (8005824 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800576c:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800576e:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005770:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005772:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005774:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005776:	f043 0320 	orr.w	r3, r3, #32
 800577a:	6323      	str	r3, [r4, #48]	; 0x30
 800577c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800577e:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005780:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005784:	4829      	ldr	r0, [pc, #164]	; (800582c <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005786:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005788:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800578a:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800578e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005792:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005794:	f005 fba4 	bl	800aee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800579a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800579e:	6423      	str	r3, [r4, #64]	; 0x40
 80057a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	9b04      	ldr	r3, [sp, #16]
}
 80057aa:	b031      	add	sp, #196	; 0xc4
 80057ac:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80057ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057b2:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80057b4:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057b6:	f007 fed1 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 80057ba:	bb48      	cbnz	r0, 8005810 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80057bc:	4c19      	ldr	r4, [pc, #100]	; (8005824 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80057be:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057c2:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057c4:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80057c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80057c8:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80057ca:	f043 0320 	orr.w	r3, r3, #32
 80057ce:	6323      	str	r3, [r4, #48]	; 0x30
 80057d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057d2:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057d6:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057da:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80057dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80057de:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80057e0:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e2:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80057e6:	4811      	ldr	r0, [pc, #68]	; (800582c <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80057e8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80057ea:	f005 fb79 	bl	800aee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80057ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057f4:	6423      	str	r3, [r4, #64]	; 0x40
 80057f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057fc:	9306      	str	r3, [sp, #24]
 80057fe:	9b06      	ldr	r3, [sp, #24]
}
 8005800:	b031      	add	sp, #196	; 0xc4
 8005802:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8005804:	f7fd fcb8 	bl	8003178 <Error_Handler>
 8005808:	e783      	b.n	8005712 <HAL_I2C_MspInit+0x42>
      Error_Handler();
 800580a:	f7fd fcb5 	bl	8003178 <Error_Handler>
 800580e:	e7ac      	b.n	800576a <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8005810:	f7fd fcb2 	bl	8003178 <Error_Handler>
 8005814:	e7d2      	b.n	80057bc <HAL_I2C_MspInit+0xec>
 8005816:	bf00      	nop
 8005818:	40005400 	.word	0x40005400
 800581c:	40005800 	.word	0x40005800
 8005820:	40006000 	.word	0x40006000
 8005824:	40023800 	.word	0x40023800
 8005828:	40020400 	.word	0x40020400
 800582c:	40021400 	.word	0x40021400

08005830 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8005830:	4b08      	ldr	r3, [pc, #32]	; (8005854 <HAL_RNG_MspInit+0x24>)
 8005832:	6802      	ldr	r2, [r0, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d000      	beq.n	800583a <HAL_RNG_MspInit+0xa>
 8005838:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800583a:	4b07      	ldr	r3, [pc, #28]	; (8005858 <HAL_RNG_MspInit+0x28>)
{
 800583c:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 800583e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005844:	635a      	str	r2, [r3, #52]	; 0x34
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8005850:	b002      	add	sp, #8
 8005852:	4770      	bx	lr
 8005854:	50060800 	.word	0x50060800
 8005858:	40023800 	.word	0x40023800

0800585c <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 800585c:	4a52      	ldr	r2, [pc, #328]	; (80059a8 <HAL_SPI_MspInit+0x14c>)
 800585e:	6803      	ldr	r3, [r0, #0]
{
 8005860:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 8005862:	4293      	cmp	r3, r2
{
 8005864:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005866:	f04f 0400 	mov.w	r4, #0
 800586a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800586e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005872:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 8005874:	d007      	beq.n	8005886 <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8005876:	4a4d      	ldr	r2, [pc, #308]	; (80059ac <HAL_SPI_MspInit+0x150>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d038      	beq.n	80058ee <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 800587c:	4a4c      	ldr	r2, [pc, #304]	; (80059b0 <HAL_SPI_MspInit+0x154>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d071      	beq.n	8005966 <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8005882:	b00f      	add	sp, #60	; 0x3c
 8005884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005886:	4b4b      	ldr	r3, [pc, #300]	; (80059b4 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005888:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800588a:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800588c:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 800588e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005890:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005892:	4849      	ldr	r0, [pc, #292]	; (80059b8 <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005898:	641a      	str	r2, [r3, #64]	; 0x40
 800589a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800589c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80058a0:	9201      	str	r2, [sp, #4]
 80058a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a6:	f042 0204 	orr.w	r2, r2, #4
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
 80058ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ae:	f002 0204 	and.w	r2, r2, #4
 80058b2:	9202      	str	r2, [sp, #8]
 80058b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b8:	f042 0208 	orr.w	r2, r2, #8
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80058c0:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058c2:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80058c6:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c8:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058cc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058ce:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058d0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058d2:	f005 fb05 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80058d6:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058d8:	a909      	add	r1, sp, #36	; 0x24
 80058da:	4838      	ldr	r0, [pc, #224]	; (80059bc <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058dc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80058de:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80058e0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80058e2:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058e6:	f005 fafb 	bl	800aee0 <HAL_GPIO_Init>
}
 80058ea:	b00f      	add	sp, #60	; 0x3c
 80058ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80058ee:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80058f2:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f4:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 80058f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80058f8:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058fa:	4831      	ldr	r0, [pc, #196]	; (80059c0 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80058fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005900:	641a      	str	r2, [r3, #64]	; 0x40
 8005902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005904:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005908:	9204      	str	r2, [sp, #16]
 800590a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800590c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800590e:	4332      	orrs	r2, r6
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
 8005912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005914:	4032      	ands	r2, r6
 8005916:	9205      	str	r2, [sp, #20]
 8005918:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800591a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800591c:	430a      	orrs	r2, r1
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005922:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005924:	400b      	ands	r3, r1
 8005926:	9306      	str	r3, [sp, #24]
 8005928:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800592a:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800592c:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005930:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8005932:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005934:	f005 fad4 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005938:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800593c:	a909      	add	r1, sp, #36	; 0x24
 800593e:	481e      	ldr	r0, [pc, #120]	; (80059b8 <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005940:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005942:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005946:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800594a:	f005 fac9 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800594e:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005950:	a909      	add	r1, sp, #36	; 0x24
 8005952:	481b      	ldr	r0, [pc, #108]	; (80059c0 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005954:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005956:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005958:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800595a:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800595e:	f005 fabf 	bl	800aee0 <HAL_GPIO_Init>
}
 8005962:	b00f      	add	sp, #60	; 0x3c
 8005964:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005966:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005968:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800596a:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800596c:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 800596e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005970:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005972:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005976:	645a      	str	r2, [r3, #68]	; 0x44
 8005978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800597a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800597e:	9207      	str	r2, [sp, #28]
 8005980:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005984:	f042 0210 	orr.w	r2, r2, #16
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800598a:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598e:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005990:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005994:	480b      	ldr	r0, [pc, #44]	; (80059c4 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005996:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005998:	9308      	str	r3, [sp, #32]
 800599a:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800599c:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059a0:	f005 fa9e 	bl	800aee0 <HAL_GPIO_Init>
}
 80059a4:	b00f      	add	sp, #60	; 0x3c
 80059a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059a8:	40003800 	.word	0x40003800
 80059ac:	40003c00 	.word	0x40003c00
 80059b0:	40013400 	.word	0x40013400
 80059b4:	40023800 	.word	0x40023800
 80059b8:	40020800 	.word	0x40020800
 80059bc:	40020c00 	.word	0x40020c00
 80059c0:	40020400 	.word	0x40020400
 80059c4:	40021000 	.word	0x40021000

080059c8 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80059c8:	4a73      	ldr	r2, [pc, #460]	; (8005b98 <HAL_TIM_Base_MspInit+0x1d0>)
 80059ca:	6803      	ldr	r3, [r0, #0]
{
 80059cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 80059ce:	4293      	cmp	r3, r2
{
 80059d0:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d2:	f04f 0400 	mov.w	r4, #0
 80059d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80059da:	940d      	str	r4, [sp, #52]	; 0x34
 80059dc:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 80059e0:	d021      	beq.n	8005a26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e6:	d055      	beq.n	8005a94 <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80059e8:	4a6c      	ldr	r2, [pc, #432]	; (8005b9c <HAL_TIM_Base_MspInit+0x1d4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d027      	beq.n	8005a3e <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80059ee:	4a6c      	ldr	r2, [pc, #432]	; (8005ba0 <HAL_TIM_Base_MspInit+0x1d8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d043      	beq.n	8005a7c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 80059f4:	4a6b      	ldr	r2, [pc, #428]	; (8005ba4 <HAL_TIM_Base_MspInit+0x1dc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	f000 80a5 	beq.w	8005b46 <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80059fc:	4a6a      	ldr	r2, [pc, #424]	; (8005ba8 <HAL_TIM_Base_MspInit+0x1e0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	f000 80b4 	beq.w	8005b6c <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8005a04:	4a69      	ldr	r2, [pc, #420]	; (8005bac <HAL_TIM_Base_MspInit+0x1e4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d02d      	beq.n	8005a66 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8005a0a:	4a69      	ldr	r2, [pc, #420]	; (8005bb0 <HAL_TIM_Base_MspInit+0x1e8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d114      	bne.n	8005a3a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005a10:	4b68      	ldr	r3, [pc, #416]	; (8005bb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a20:	930a      	str	r3, [sp, #40]	; 0x28
 8005a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005a24:	e009      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005a26:	4b63      	ldr	r3, [pc, #396]	; (8005bb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	645a      	str	r2, [r3, #68]	; 0x44
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	9b01      	ldr	r3, [sp, #4]
}
 8005a3a:	b011      	add	sp, #68	; 0x44
 8005a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a3e:	4b5d      	ldr	r3, [pc, #372]	; (8005bb4 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005a40:	4622      	mov	r2, r4
 8005a42:	2106      	movs	r1, #6
 8005a44:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a46:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005a48:	f044 0402 	orr.w	r4, r4, #2
 8005a4c:	641c      	str	r4, [r3, #64]	; 0x40
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	9305      	str	r3, [sp, #20]
 8005a56:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005a58:	f002 fd10 	bl	800847c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005a5c:	201d      	movs	r0, #29
 8005a5e:	f002 fd57 	bl	8008510 <HAL_NVIC_EnableIRQ>
}
 8005a62:	b011      	add	sp, #68	; 0x44
 8005a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005a66:	4b53      	ldr	r3, [pc, #332]	; (8005bb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a6a:	f042 0220 	orr.w	r2, r2, #32
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	9309      	str	r3, [sp, #36]	; 0x24
 8005a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7a:	e7de      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a7c:	4b4d      	ldr	r3, [pc, #308]	; (8005bb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a80:	f042 0204 	orr.w	r2, r2, #4
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	9306      	str	r3, [sp, #24]
 8005a8e:	9b06      	ldr	r3, [sp, #24]
}
 8005a90:	b011      	add	sp, #68	; 0x44
 8005a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a94:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a98:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a9a:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a9c:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aa0:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aa2:	4845      	ldr	r0, [pc, #276]	; (8005bb8 <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005aa4:	f042 0201 	orr.w	r2, r2, #1
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
 8005aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aac:	f002 0201 	and.w	r2, r2, #1
 8005ab0:	9202      	str	r2, [sp, #8]
 8005ab2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
 8005abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005abe:	f002 0201 	and.w	r2, r2, #1
 8005ac2:	9203      	str	r2, [sp, #12]
 8005ac4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac8:	f042 0202 	orr.w	r2, r2, #2
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad0:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ad2:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005ad6:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ad8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005ada:	2320      	movs	r3, #32
 8005adc:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ade:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae0:	f005 f9fe 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005ae4:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005ae6:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aea:	4834      	ldr	r0, [pc, #208]	; (8005bbc <HAL_TIM_Base_MspInit+0x1f4>)
 8005aec:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aee:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005af0:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8005af2:	4e33      	ldr	r6, [pc, #204]	; (8005bc0 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af4:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005af8:	f005 f9f2 	bl	800aee0 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8005b00:	4a30      	ldr	r2, [pc, #192]	; (8005bc4 <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8005b02:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005b04:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005b06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8005b0a:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8005b0c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005b10:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8005b12:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005b16:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8005b18:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8005b1a:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b1c:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8005b1e:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b20:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8005b24:	f002 ffbc 	bl	8008aa0 <HAL_DMA_Init>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d132      	bne.n	8005b92 <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8005b30:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005b32:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8005b34:	62ee      	str	r6, [r5, #44]	; 0x2c
 8005b36:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005b38:	f002 fca0 	bl	800847c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005b3c:	201c      	movs	r0, #28
 8005b3e:	f002 fce7 	bl	8008510 <HAL_NVIC_EnableIRQ>
}
 8005b42:	b011      	add	sp, #68	; 0x44
 8005b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005b46:	4b1b      	ldr	r3, [pc, #108]	; (8005bb4 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8005b48:	4622      	mov	r2, r4
 8005b4a:	2105      	movs	r1, #5
 8005b4c:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005b4e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005b50:	f044 0408 	orr.w	r4, r4, #8
 8005b54:	641c      	str	r4, [r3, #64]	; 0x40
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	9307      	str	r3, [sp, #28]
 8005b5e:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8005b60:	f002 fc8c 	bl	800847c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005b64:	2032      	movs	r0, #50	; 0x32
 8005b66:	f002 fcd3 	bl	8008510 <HAL_NVIC_EnableIRQ>
 8005b6a:	e766      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005b6c:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005b6e:	4622      	mov	r2, r4
 8005b70:	2106      	movs	r1, #6
 8005b72:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005b74:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005b76:	f044 0410 	orr.w	r4, r4, #16
 8005b7a:	641c      	str	r4, [r3, #64]	; 0x40
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	9308      	str	r3, [sp, #32]
 8005b84:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005b86:	f002 fc79 	bl	800847c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b8a:	2036      	movs	r0, #54	; 0x36
 8005b8c:	f002 fcc0 	bl	8008510 <HAL_NVIC_EnableIRQ>
 8005b90:	e753      	b.n	8005a3a <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 8005b92:	f7fd faf1 	bl	8003178 <Error_Handler>
 8005b96:	e7c9      	b.n	8005b2c <HAL_TIM_Base_MspInit+0x164>
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800
 8005ba4:	40000c00 	.word	0x40000c00
 8005ba8:	40001000 	.word	0x40001000
 8005bac:	40001400 	.word	0x40001400
 8005bb0:	40002000 	.word	0x40002000
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40020000 	.word	0x40020000
 8005bbc:	40020400 	.word	0x40020400
 8005bc0:	20001f70 	.word	0x20001f70
 8005bc4:	40026028 	.word	0x40026028

08005bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8005bc8:	491d      	ldr	r1, [pc, #116]	; (8005c40 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bca:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8005bcc:	6802      	ldr	r2, [r0, #0]
{
 8005bce:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 8005bd0:	428a      	cmp	r2, r1
{
 8005bd2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005bd8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005bdc:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8005bde:	d004      	beq.n	8005bea <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8005be0:	4b18      	ldr	r3, [pc, #96]	; (8005c44 <HAL_TIM_MspPostInit+0x7c>)
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d016      	beq.n	8005c14 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005be6:	b008      	add	sp, #32
 8005be8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bea:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005bec:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bee:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bf0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf4:	f042 0204 	orr.w	r2, r2, #4
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005bfc:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bfe:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c02:	4812      	ldr	r0, [pc, #72]	; (8005c4c <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c04:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005c0a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c0c:	f005 f968 	bl	800aee0 <HAL_GPIO_Init>
}
 8005c10:	b008      	add	sp, #32
 8005c12:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c14:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c18:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005c1a:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c1e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c22:	4322      	orrs	r2, r4
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005c28:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c2a:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c2c:	4808      	ldr	r0, [pc, #32]	; (8005c50 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2e:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c30:	9302      	str	r3, [sp, #8]
 8005c32:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005c34:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c36:	f005 f953 	bl	800aee0 <HAL_GPIO_Init>
}
 8005c3a:	b008      	add	sp, #32
 8005c3c:	bd10      	pop	{r4, pc}
 8005c3e:	bf00      	nop
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	40020800 	.word	0x40020800
 8005c50:	40020400 	.word	0x40020400

08005c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c58:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c5a:	2100      	movs	r1, #0
{
 8005c5c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c5e:	2290      	movs	r2, #144	; 0x90
 8005c60:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c62:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c64:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 8005c68:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c6c:	f01d ffa2 	bl	8023bb4 <memset>
  if(huart->Instance==UART4)
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	4aa2      	ldr	r2, [pc, #648]	; (8005efc <HAL_UART_MspInit+0x2a8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d070      	beq.n	8005d5a <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8005c78:	4aa1      	ldr	r2, [pc, #644]	; (8005f00 <HAL_UART_MspInit+0x2ac>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	f000 80c1 	beq.w	8005e02 <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8005c80:	4aa0      	ldr	r2, [pc, #640]	; (8005f04 <HAL_UART_MspInit+0x2b0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	f000 815e 	beq.w	8005f44 <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8005c88:	4a9f      	ldr	r2, [pc, #636]	; (8005f08 <HAL_UART_MspInit+0x2b4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00e      	beq.n	8005cac <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8005c8e:	4a9f      	ldr	r2, [pc, #636]	; (8005f0c <HAL_UART_MspInit+0x2b8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	f000 818e 	beq.w	8005fb2 <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8005c96:	4a9e      	ldr	r2, [pc, #632]	; (8005f10 <HAL_UART_MspInit+0x2bc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	f000 81b4 	beq.w	8006006 <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8005c9e:	4a9d      	ldr	r2, [pc, #628]	; (8005f14 <HAL_UART_MspInit+0x2c0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	f000 81df 	beq.w	8006064 <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005ca6:	b03c      	add	sp, #240	; 0xf0
 8005ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8005cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cb0:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8005cb2:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cb4:	f007 fc52 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f040 8261 	bne.w	8006180 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8005cbe:	4b96      	ldr	r3, [pc, #600]	; (8005f18 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005cc0:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005cc4:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 8005cc6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc8:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005cca:	4894      	ldr	r0, [pc, #592]	; (8005f1c <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8005ccc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005cd0:	6419      	str	r1, [r3, #64]	; 0x40
 8005cd2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005cd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005cd8:	910a      	str	r1, [sp, #40]	; 0x28
 8005cda:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005cdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005cde:	f041 0110 	orr.w	r1, r1, #16
 8005ce2:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ce4:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005ce8:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf2:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005cf6:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005cfa:	f005 f8f1 	bl	800aee0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005cfe:	4887      	ldr	r0, [pc, #540]	; (8005f1c <HAL_UART_MspInit+0x2c8>)
 8005d00:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005d02:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d04:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d08:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d0c:	f005 f8e8 	bl	800aee0 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8005d10:	4d83      	ldr	r5, [pc, #524]	; (8005f20 <HAL_UART_MspInit+0x2cc>)
 8005d12:	4a84      	ldr	r2, [pc, #528]	; (8005f24 <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8005d14:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8005d18:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8005d1a:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8005d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8005d26:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d2c:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d2e:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d32:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005d36:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8005d3a:	f002 feb1 	bl	8008aa0 <HAL_DMA_Init>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f040 8221 	bne.w	8006186 <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8005d44:	2200      	movs	r2, #0
 8005d46:	2103      	movs	r1, #3
 8005d48:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8005d4a:	6725      	str	r5, [r4, #112]	; 0x70
 8005d4c:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8005d4e:	f002 fb95 	bl	800847c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8005d52:	2053      	movs	r0, #83	; 0x53
 8005d54:	f002 fbdc 	bl	8008510 <HAL_NVIC_EnableIRQ>
 8005d58:	e7a5      	b.n	8005ca6 <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d5e:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005d60:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d62:	f007 fbfb 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f040 8179 	bne.w	800605e <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8005d6c:	4b6a      	ldr	r3, [pc, #424]	; (8005f18 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d6e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d70:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d72:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8005d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005d76:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d78:	a913      	add	r1, sp, #76	; 0x4c
 8005d7a:	486b      	ldr	r0, [pc, #428]	; (8005f28 <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8005d7c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
 8005d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d84:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8005d88:	9201      	str	r2, [sp, #4]
 8005d8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
 8005d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d96:	f002 0201 	and.w	r2, r2, #1
 8005d9a:	9202      	str	r2, [sp, #8]
 8005d9c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da0:	433a      	orrs	r2, r7
 8005da2:	631a      	str	r2, [r3, #48]	; 0x30
 8005da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da6:	403a      	ands	r2, r7
 8005da8:	9203      	str	r2, [sp, #12]
 8005daa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dae:	f042 0204 	orr.w	r2, r2, #4
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db6:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005db8:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005dbc:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dbe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8005dc0:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dc4:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8005dc6:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc8:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dcc:	f005 f888 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dd4:	a913      	add	r1, sp, #76	; 0x4c
 8005dd6:	4855      	ldr	r0, [pc, #340]	; (8005f2c <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005dd8:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dda:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005dde:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005de2:	f005 f87d 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005de6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dea:	a913      	add	r1, sp, #76	; 0x4c
 8005dec:	4850      	ldr	r0, [pc, #320]	; (8005f30 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dee:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005df0:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005df2:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df4:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005df8:	f005 f872 	bl	800aee0 <HAL_GPIO_Init>
}
 8005dfc:	b03c      	add	sp, #240	; 0xf0
 8005dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e06:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005e08:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e0a:	f007 fba7 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f040 81b0 	bne.w	8006174 <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005e14:	4b40      	ldr	r3, [pc, #256]	; (8005f18 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e16:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e18:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005e1a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8005e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e20:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e24:	a913      	add	r1, sp, #76	; 0x4c
 8005e26:	4841      	ldr	r0, [pc, #260]	; (8005f2c <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8005e28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e2c:	641a      	str	r2, [r3, #64]	; 0x40
 8005e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e30:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005e34:	9205      	str	r2, [sp, #20]
 8005e36:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3a:	4332      	orrs	r2, r6
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e40:	4032      	ands	r2, r6
 8005e42:	9206      	str	r2, [sp, #24]
 8005e44:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e48:	f042 0204 	orr.w	r2, r2, #4
 8005e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e50:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	9307      	str	r3, [sp, #28]
 8005e58:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e5a:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5c:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e60:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e64:	f005 f83c 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e68:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e6a:	4831      	ldr	r0, [pc, #196]	; (8005f30 <HAL_UART_MspInit+0x2dc>)
 8005e6c:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e6e:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e70:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e72:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005e74:	4e2f      	ldr	r6, [pc, #188]	; (8005f34 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005e76:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005e78:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e7c:	f005 f830 	bl	800aee0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005e80:	4a2d      	ldr	r2, [pc, #180]	; (8005f38 <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8005e82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005e86:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e88:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005e8a:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8005e90:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005e92:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e96:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e98:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005e9c:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ea0:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005ea4:	f002 fdfc 	bl	8008aa0 <HAL_DMA_Init>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f040 8160 	bne.w	800616e <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005eae:	4d23      	ldr	r5, [pc, #140]	; (8005f3c <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8005eb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005eb4:	4922      	ldr	r1, [pc, #136]	; (8005f40 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eb6:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8005eb8:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005ebe:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ec0:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005ec2:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8005ec4:	6726      	str	r6, [r4, #112]	; 0x70
 8005ec6:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ec8:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eca:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ecc:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ece:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ed0:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ed2:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005ed4:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005ed8:	f002 fde2 	bl	8008aa0 <HAL_DMA_Init>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f040 8143 	bne.w	8006168 <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2107      	movs	r1, #7
 8005ee6:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8005ee8:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005eea:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8005eec:	f002 fac6 	bl	800847c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005ef0:	2035      	movs	r0, #53	; 0x35
 8005ef2:	f002 fb0d 	bl	8008510 <HAL_NVIC_EnableIRQ>
}
 8005ef6:	b03c      	add	sp, #240	; 0xf0
 8005ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005efc:	40004c00 	.word	0x40004c00
 8005f00:	40005000 	.word	0x40005000
 8005f04:	40007800 	.word	0x40007800
 8005f08:	40007c00 	.word	0x40007c00
 8005f0c:	40004400 	.word	0x40004400
 8005f10:	40004800 	.word	0x40004800
 8005f14:	40011400 	.word	0x40011400
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	20002090 	.word	0x20002090
 8005f24:	400260a0 	.word	0x400260a0
 8005f28:	40020000 	.word	0x40020000
 8005f2c:	40020400 	.word	0x40020400
 8005f30:	40020800 	.word	0x40020800
 8005f34:	20001fd0 	.word	0x20001fd0
 8005f38:	40026010 	.word	0x40026010
 8005f3c:	20002030 	.word	0x20002030
 8005f40:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f48:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005f4a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f4c:	f007 fb06 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	f040 8112 	bne.w	800617a <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 8005f56:	4b8f      	ldr	r3, [pc, #572]	; (8006194 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f58:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005f5a:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5c:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8005f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005f60:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005f62:	488d      	ldr	r0, [pc, #564]	; (8006198 <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8005f64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
 8005f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f70:	9208      	str	r2, [sp, #32]
 8005f72:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f76:	f042 0220 	orr.w	r2, r2, #32
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f80:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005f82:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f84:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f88:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f8a:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005f90:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005f94:	f004 ffa4 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005f98:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005f9a:	a913      	add	r1, sp, #76	; 0x4c
 8005f9c:	487e      	ldr	r0, [pc, #504]	; (8006198 <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f9e:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005fa0:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005fa2:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005fa4:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005fa8:	f004 ff9a 	bl	800aee0 <HAL_GPIO_Init>
}
 8005fac:	b03c      	add	sp, #240	; 0xf0
 8005fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005fb2:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fb4:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005fb6:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fb8:	f007 fad0 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	f040 80e5 	bne.w	800618c <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005fc2:	4b74      	ldr	r3, [pc, #464]	; (8006194 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc4:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005fc6:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc8:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8005fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fcc:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 8005fce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005fd2:	641a      	str	r2, [r3, #64]	; 0x40
 8005fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fd6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005fda:	920c      	str	r2, [sp, #48]	; 0x30
 8005fdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe0:	f042 0208 	orr.w	r2, r2, #8
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe6:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fea:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fec:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ff0:	486a      	ldr	r0, [pc, #424]	; (800619c <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005ff2:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ff4:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ff6:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ff8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ffa:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ffc:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006000:	f004 ff6e 	bl	800aee0 <HAL_GPIO_Init>
 8006004:	e64f      	b.n	8005ca6 <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006006:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800600a:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800600c:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800600e:	f007 faa5 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 8006012:	2800      	cmp	r0, #0
 8006014:	f040 809c 	bne.w	8006150 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006018:	4b5e      	ldr	r3, [pc, #376]	; (8006194 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800601a:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800601c:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006020:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8006022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006024:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 8006026:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800602a:	641a      	str	r2, [r3, #64]	; 0x40
 800602c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800602e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006032:	920e      	str	r2, [sp, #56]	; 0x38
 8006034:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006038:	f042 0208 	orr.w	r2, r2, #8
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800603e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006042:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006044:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006048:	4854      	ldr	r0, [pc, #336]	; (800619c <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800604a:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800604c:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800604e:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006050:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006052:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006054:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006058:	f004 ff42 	bl	800aee0 <HAL_GPIO_Init>
 800605c:	e623      	b.n	8005ca6 <HAL_UART_MspInit+0x52>
      Error_Handler();
 800605e:	f7fd f88b 	bl	8003178 <Error_Handler>
 8006062:	e683      	b.n	8005d6c <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006064:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006068:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800606a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800606c:	f007 fa76 	bl	800d55c <HAL_RCCEx_PeriphCLKConfig>
 8006070:	2800      	cmp	r0, #0
 8006072:	d176      	bne.n	8006162 <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006074:	4b47      	ldr	r3, [pc, #284]	; (8006194 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006076:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006078:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607a:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 800607c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800607e:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006080:	4847      	ldr	r0, [pc, #284]	; (80061a0 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8006082:	f042 0220 	orr.w	r2, r2, #32
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
 8006088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608a:	f002 0220 	and.w	r2, r2, #32
 800608e:	9210      	str	r2, [sp, #64]	; 0x40
 8006090:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006094:	f042 0204 	orr.w	r2, r2, #4
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
 800609a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800609c:	f002 0204 	and.w	r2, r2, #4
 80060a0:	9211      	str	r2, [sp, #68]	; 0x44
 80060a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a6:	430a      	orrs	r2, r1
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ac:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060ae:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060b0:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80060b2:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060b4:	9312      	str	r3, [sp, #72]	; 0x48
 80060b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b8:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060bc:	a913      	add	r1, sp, #76	; 0x4c
 80060be:	f004 ff0f 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060c2:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80060c4:	4837      	ldr	r0, [pc, #220]	; (80061a4 <HAL_UART_MspInit+0x550>)
 80060c6:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060c8:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060ca:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ce:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060d0:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80060d2:	4e35      	ldr	r6, [pc, #212]	; (80061a8 <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80060d4:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80060d8:	f004 ff02 	bl	800aee0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80060dc:	4a33      	ldr	r2, [pc, #204]	; (80061ac <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80060de:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80060e2:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80060e4:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80060e8:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80060f0:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80060f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060f6:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060fa:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80060fe:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006102:	f002 fccd 	bl	8008aa0 <HAL_DMA_Init>
 8006106:	bb48      	cbnz	r0, 800615c <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006108:	4d29      	ldr	r5, [pc, #164]	; (80061b0 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800610a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800610e:	4929      	ldr	r1, [pc, #164]	; (80061b4 <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006110:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006112:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006114:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006118:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800611a:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800611c:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800611e:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006120:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006122:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006126:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006128:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800612a:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800612c:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800612e:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006130:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006132:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006134:	6726      	str	r6, [r4, #112]	; 0x70
 8006136:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006138:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 800613c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006140:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006144:	f002 fcac 	bl	8008aa0 <HAL_DMA_Init>
 8006148:	b928      	cbnz	r0, 8006156 <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800614a:	66e5      	str	r5, [r4, #108]	; 0x6c
 800614c:	63ac      	str	r4, [r5, #56]	; 0x38
}
 800614e:	e5aa      	b.n	8005ca6 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8006150:	f7fd f812 	bl	8003178 <Error_Handler>
 8006154:	e760      	b.n	8006018 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 8006156:	f7fd f80f 	bl	8003178 <Error_Handler>
 800615a:	e7f6      	b.n	800614a <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 800615c:	f7fd f80c 	bl	8003178 <Error_Handler>
 8006160:	e7d2      	b.n	8006108 <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 8006162:	f7fd f809 	bl	8003178 <Error_Handler>
 8006166:	e785      	b.n	8006074 <HAL_UART_MspInit+0x420>
      Error_Handler();
 8006168:	f7fd f806 	bl	8003178 <Error_Handler>
 800616c:	e6b9      	b.n	8005ee2 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 800616e:	f7fd f803 	bl	8003178 <Error_Handler>
 8006172:	e69c      	b.n	8005eae <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8006174:	f7fd f800 	bl	8003178 <Error_Handler>
 8006178:	e64c      	b.n	8005e14 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 800617a:	f7fc fffd 	bl	8003178 <Error_Handler>
 800617e:	e6ea      	b.n	8005f56 <HAL_UART_MspInit+0x302>
      Error_Handler();
 8006180:	f7fc fffa 	bl	8003178 <Error_Handler>
 8006184:	e59b      	b.n	8005cbe <HAL_UART_MspInit+0x6a>
      Error_Handler();
 8006186:	f7fc fff7 	bl	8003178 <Error_Handler>
 800618a:	e5db      	b.n	8005d44 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800618c:	f7fc fff4 	bl	8003178 <Error_Handler>
 8006190:	e717      	b.n	8005fc2 <HAL_UART_MspInit+0x36e>
 8006192:	bf00      	nop
 8006194:	40023800 	.word	0x40023800
 8006198:	40021400 	.word	0x40021400
 800619c:	40020c00 	.word	0x40020c00
 80061a0:	40020800 	.word	0x40020800
 80061a4:	40021800 	.word	0x40021800
 80061a8:	200020f0 	.word	0x200020f0
 80061ac:	40026428 	.word	0x40026428
 80061b0:	20002150 	.word	0x20002150
 80061b4:	400264a0 	.word	0x400264a0

080061b8 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 80061b8:	4a4f      	ldr	r2, [pc, #316]	; (80062f8 <HAL_UART_MspDeInit+0x140>)
 80061ba:	6803      	ldr	r3, [r0, #0]
 80061bc:	4293      	cmp	r3, r2
{
 80061be:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 80061c0:	d025      	beq.n	800620e <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 80061c2:	4a4e      	ldr	r2, [pc, #312]	; (80062fc <HAL_UART_MspDeInit+0x144>)
 80061c4:	4604      	mov	r4, r0
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d038      	beq.n	800623c <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 80061ca:	4a4d      	ldr	r2, [pc, #308]	; (8006300 <HAL_UART_MspDeInit+0x148>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d050      	beq.n	8006272 <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 80061d0:	4a4c      	ldr	r2, [pc, #304]	; (8006304 <HAL_UART_MspDeInit+0x14c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 80061d6:	4a4c      	ldr	r2, [pc, #304]	; (8006308 <HAL_UART_MspDeInit+0x150>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d056      	beq.n	800628a <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 80061dc:	4a4b      	ldr	r2, [pc, #300]	; (800630c <HAL_UART_MspDeInit+0x154>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d062      	beq.n	80062a8 <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 80061e2:	4a4b      	ldr	r2, [pc, #300]	; (8006310 <HAL_UART_MspDeInit+0x158>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d06c      	beq.n	80062c2 <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80061e8:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 80061ea:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 80061ee:	2103      	movs	r1, #3
 80061f0:	4848      	ldr	r0, [pc, #288]	; (8006314 <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 80061f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80061f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061f8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 80061fa:	f005 f817 	bl	800b22c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80061fe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006200:	f002 fdfa 	bl	8008df8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8006204:	2053      	movs	r0, #83	; 0x53
}
 8006206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 800620a:	f002 b995 	b.w	8008538 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 800620e:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8006212:	f248 0101 	movw	r1, #32769	; 0x8001
 8006216:	4840      	ldr	r0, [pc, #256]	; (8006318 <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 8006218:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800621a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800621e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8006220:	f005 f804 	bl	800b22c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 8006224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006228:	483c      	ldr	r0, [pc, #240]	; (800631c <HAL_UART_MspDeInit+0x164>)
 800622a:	f004 ffff 	bl	800b22c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 800622e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006232:	483b      	ldr	r0, [pc, #236]	; (8006320 <HAL_UART_MspDeInit+0x168>)
}
 8006234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8006238:	f004 bff8 	b.w	800b22c <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 800623c:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8006240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006244:	4835      	ldr	r0, [pc, #212]	; (800631c <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 8006246:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006248:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800624c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 800624e:	f004 ffed 	bl	800b22c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8006252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006256:	4832      	ldr	r0, [pc, #200]	; (8006320 <HAL_UART_MspDeInit+0x168>)
 8006258:	f004 ffe8 	bl	800b22c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800625c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800625e:	f002 fdcb 	bl	8008df8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8006262:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006264:	f002 fdc8 	bl	8008df8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8006268:	2035      	movs	r0, #53	; 0x35
}
 800626a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 800626e:	f002 b963 	b.w	8008538 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 8006272:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8006276:	21c0      	movs	r1, #192	; 0xc0
 8006278:	482a      	ldr	r0, [pc, #168]	; (8006324 <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 800627a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800627c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 8006280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 8006284:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8006286:	f004 bfd1 	b.w	800b22c <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 800628a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 800628e:	4826      	ldr	r0, [pc, #152]	; (8006328 <HAL_UART_MspDeInit+0x170>)
 8006290:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 8006292:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006294:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006298:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 800629a:	f004 ffc7 	bl	800b22c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800629e:	2026      	movs	r0, #38	; 0x26
}
 80062a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80062a4:	f002 b948 	b.w	8008538 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 80062a8:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80062ac:	f44f 7140 	mov.w	r1, #768	; 0x300
 80062b0:	481d      	ldr	r0, [pc, #116]	; (8006328 <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 80062b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80062b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 80062b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 80062bc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80062be:	f004 bfb5 	b.w	800b22c <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 80062c2:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 80062c6:	2140      	movs	r1, #64	; 0x40
 80062c8:	4815      	ldr	r0, [pc, #84]	; (8006320 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 80062ca:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80062cc:	f023 0320 	bic.w	r3, r3, #32
 80062d0:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 80062d2:	f004 ffab 	bl	800b22c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 80062d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062da:	4814      	ldr	r0, [pc, #80]	; (800632c <HAL_UART_MspDeInit+0x174>)
 80062dc:	f004 ffa6 	bl	800b22c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80062e0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80062e2:	f002 fd89 	bl	8008df8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80062e6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80062e8:	f002 fd86 	bl	8008df8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80062ec:	2047      	movs	r0, #71	; 0x47
}
 80062ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80062f2:	f002 b921 	b.w	8008538 <HAL_NVIC_DisableIRQ>
 80062f6:	bf00      	nop
 80062f8:	40004c00 	.word	0x40004c00
 80062fc:	40005000 	.word	0x40005000
 8006300:	40007800 	.word	0x40007800
 8006304:	40007c00 	.word	0x40007c00
 8006308:	40004400 	.word	0x40004400
 800630c:	40004800 	.word	0x40004800
 8006310:	40011400 	.word	0x40011400
 8006314:	40021000 	.word	0x40021000
 8006318:	40020000 	.word	0x40020000
 800631c:	40020400 	.word	0x40020400
 8006320:	40020800 	.word	0x40020800
 8006324:	40021400 	.word	0x40021400
 8006328:	40020c00 	.word	0x40020c00
 800632c:	40021800 	.word	0x40021800

08006330 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006330:	b530      	push	{r4, r5, lr}
 8006332:	4601      	mov	r1, r0
 8006334:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 8006336:	2200      	movs	r2, #0
 8006338:	202b      	movs	r0, #43	; 0x2b
 800633a:	f002 f89f 	bl	800847c <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800633e:	202b      	movs	r0, #43	; 0x2b
 8006340:	f002 f8e6 	bl	8008510 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006344:	4b15      	ldr	r3, [pc, #84]	; (800639c <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006346:	a901      	add	r1, sp, #4
 8006348:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 800634a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 800634c:	4c14      	ldr	r4, [pc, #80]	; (80063a0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 800634e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006352:	4d14      	ldr	r5, [pc, #80]	; (80063a4 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006360:	f007 f8da 	bl	800d518 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006364:	f007 f8b8 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 8006368:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800636a:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 800636c:	490e      	ldr	r1, [pc, #56]	; (80063a8 <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 800636e:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8006370:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006372:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006374:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8006378:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 800637c:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800637e:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8006380:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006382:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 8006384:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8006386:	f009 fbb9 	bl	800fafc <HAL_TIM_Base_Init>
 800638a:	b110      	cbz	r0, 8006392 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 800638c:	2001      	movs	r0, #1
}
 800638e:	b009      	add	sp, #36	; 0x24
 8006390:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 8006392:	4620      	mov	r0, r4
 8006394:	f008 fd86 	bl	800eea4 <HAL_TIM_Base_Start_IT>
}
 8006398:	b009      	add	sp, #36	; 0x24
 800639a:	bd30      	pop	{r4, r5, pc}
 800639c:	40023800 	.word	0x40023800
 80063a0:	20002d48 	.word	0x20002d48
 80063a4:	431bde83 	.word	0x431bde83
 80063a8:	40001800 	.word	0x40001800

080063ac <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop

080063b0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063b0:	e7fe      	b.n	80063b0 <HardFault_Handler>
 80063b2:	bf00      	nop

080063b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063b4:	e7fe      	b.n	80063b4 <MemManage_Handler>
 80063b6:	bf00      	nop

080063b8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063b8:	e7fe      	b.n	80063b8 <BusFault_Handler>
 80063ba:	bf00      	nop

080063bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063bc:	e7fe      	b.n	80063bc <UsageFault_Handler>
 80063be:	bf00      	nop

080063c0 <RCC_IRQHandler>:
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop

080063c4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80063c4:	4801      	ldr	r0, [pc, #4]	; (80063cc <DMA1_Stream0_IRQHandler+0x8>)
 80063c6:	f002 be83 	b.w	80090d0 <HAL_DMA_IRQHandler>
 80063ca:	bf00      	nop
 80063cc:	20001fd0 	.word	0x20001fd0

080063d0 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 80063d0:	4801      	ldr	r0, [pc, #4]	; (80063d8 <DMA1_Stream1_IRQHandler+0x8>)
 80063d2:	f002 be7d 	b.w	80090d0 <HAL_DMA_IRQHandler>
 80063d6:	bf00      	nop
 80063d8:	20001f70 	.word	0x20001f70

080063dc <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80063dc:	4801      	ldr	r0, [pc, #4]	; (80063e4 <DMA1_Stream5_IRQHandler+0x8>)
 80063de:	f002 be77 	b.w	80090d0 <HAL_DMA_IRQHandler>
 80063e2:	bf00      	nop
 80063e4:	20001f10 	.word	0x20001f10

080063e8 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <DMA1_Stream6_IRQHandler+0x8>)
 80063ea:	f002 be71 	b.w	80090d0 <HAL_DMA_IRQHandler>
 80063ee:	bf00      	nop
 80063f0:	20002090 	.word	0x20002090

080063f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80063f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80063f6:	4805      	ldr	r0, [pc, #20]	; (800640c <ADC_IRQHandler+0x18>)
 80063f8:	f001 fe1c 	bl	8008034 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80063fc:	4804      	ldr	r0, [pc, #16]	; (8006410 <ADC_IRQHandler+0x1c>)
 80063fe:	f001 fe19 	bl	8008034 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8006402:	4804      	ldr	r0, [pc, #16]	; (8006414 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 8006408:	f001 be14 	b.w	8008034 <HAL_ADC_IRQHandler>
 800640c:	20001da0 	.word	0x20001da0
 8006410:	20001de8 	.word	0x20001de8
 8006414:	20001e30 	.word	0x20001e30

08006418 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006418:	4801      	ldr	r0, [pc, #4]	; (8006420 <TIM2_IRQHandler+0x8>)
 800641a:	f009 b9e7 	b.w	800f7ec <HAL_TIM_IRQHandler>
 800641e:	bf00      	nop
 8006420:	20002478 	.word	0x20002478

08006424 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <TIM3_IRQHandler+0x8>)
 8006426:	f009 b9e1 	b.w	800f7ec <HAL_TIM_IRQHandler>
 800642a:	bf00      	nop
 800642c:	200024c4 	.word	0x200024c4

08006430 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006430:	4801      	ldr	r0, [pc, #4]	; (8006438 <USART2_IRQHandler+0x8>)
 8006432:	f00b bc5f 	b.w	8011cf4 <HAL_UART_IRQHandler>
 8006436:	bf00      	nop
 8006438:	20002640 	.word	0x20002640

0800643c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800643c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006440:	f005 b82c 	b.w	800b49c <HAL_GPIO_EXTI_IRQHandler>

08006444 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8006444:	4801      	ldr	r0, [pc, #4]	; (800644c <TIM8_BRK_TIM12_IRQHandler+0x8>)
 8006446:	f009 b9d1 	b.w	800f7ec <HAL_TIM_IRQHandler>
 800644a:	bf00      	nop
 800644c:	20002d48 	.word	0x20002d48

08006450 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8006452:	f009 b9cb 	b.w	800f7ec <HAL_TIM_IRQHandler>
 8006456:	bf00      	nop
 8006458:	2000242c 	.word	0x2000242c

0800645c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800645c:	4801      	ldr	r0, [pc, #4]	; (8006464 <DMA1_Stream7_IRQHandler+0x8>)
 800645e:	f002 be37 	b.w	80090d0 <HAL_DMA_IRQHandler>
 8006462:	bf00      	nop
 8006464:	20002030 	.word	0x20002030

08006468 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006468:	4801      	ldr	r0, [pc, #4]	; (8006470 <TIM5_IRQHandler+0x8>)
 800646a:	f009 b9bf 	b.w	800f7ec <HAL_TIM_IRQHandler>
 800646e:	bf00      	nop
 8006470:	2000255c 	.word	0x2000255c

08006474 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006474:	4801      	ldr	r0, [pc, #4]	; (800647c <UART5_IRQHandler+0x8>)
 8006476:	f00b bc3d 	b.w	8011cf4 <HAL_UART_IRQHandler>
 800647a:	bf00      	nop
 800647c:	200027cc 	.word	0x200027cc

08006480 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8006480:	4804      	ldr	r0, [pc, #16]	; (8006494 <TIM6_DAC_IRQHandler+0x14>)
{
 8006482:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 8006484:	f002 fa56 	bl	8008934 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8006488:	4803      	ldr	r0, [pc, #12]	; (8006498 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800648a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800648e:	f009 b9ad 	b.w	800f7ec <HAL_TIM_IRQHandler>
 8006492:	bf00      	nop
 8006494:	20001e9c 	.word	0x20001e9c
 8006498:	200025a8 	.word	0x200025a8

0800649c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800649c:	4801      	ldr	r0, [pc, #4]	; (80064a4 <DMA2_Stream1_IRQHandler+0x8>)
 800649e:	f002 be17 	b.w	80090d0 <HAL_DMA_IRQHandler>
 80064a2:	bf00      	nop
 80064a4:	200020f0 	.word	0x200020f0

080064a8 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80064a8:	4801      	ldr	r0, [pc, #4]	; (80064b0 <DMA2_Stream4_IRQHandler+0x8>)
 80064aa:	f002 be11 	b.w	80090d0 <HAL_DMA_IRQHandler>
 80064ae:	bf00      	nop
 80064b0:	20001eb0 	.word	0x20001eb0

080064b4 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80064b4:	4801      	ldr	r0, [pc, #4]	; (80064bc <ETH_IRQHandler+0x8>)
 80064b6:	f003 bd8f 	b.w	8009fd8 <HAL_ETH_IRQHandler>
 80064ba:	bf00      	nop
 80064bc:	20005fb8 	.word	0x20005fb8

080064c0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80064c0:	4801      	ldr	r0, [pc, #4]	; (80064c8 <OTG_FS_IRQHandler+0x8>)
 80064c2:	f005 bf09 	b.w	800c2d8 <HAL_PCD_IRQHandler>
 80064c6:	bf00      	nop
 80064c8:	2002f438 	.word	0x2002f438

080064cc <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80064cc:	4801      	ldr	r0, [pc, #4]	; (80064d4 <DMA2_Stream6_IRQHandler+0x8>)
 80064ce:	f002 bdff 	b.w	80090d0 <HAL_DMA_IRQHandler>
 80064d2:	bf00      	nop
 80064d4:	20002150 	.word	0x20002150

080064d8 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80064d8:	4801      	ldr	r0, [pc, #4]	; (80064e0 <USART6_IRQHandler+0x8>)
 80064da:	f00b bc0b 	b.w	8011cf4 <HAL_UART_IRQHandler>
 80064de:	bf00      	nop
 80064e0:	20002850 	.word	0x20002850

080064e4 <FPU_IRQHandler>:
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop

080064e8 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80064e8:	4801      	ldr	r0, [pc, #4]	; (80064f0 <UART8_IRQHandler+0x8>)
 80064ea:	f00b bc03 	b.w	8011cf4 <HAL_UART_IRQHandler>
 80064ee:	bf00      	nop
 80064f0:	20002958 	.word	0x20002958

080064f4 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 80064f4:	2001      	movs	r0, #1
 80064f6:	4770      	bx	lr

080064f8 <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 80064f8:	4b02      	ldr	r3, [pc, #8]	; (8006504 <_kill+0xc>)
 80064fa:	2216      	movs	r2, #22
	return -1;
}
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8006500:	601a      	str	r2, [r3, #0]
}
 8006502:	4770      	bx	lr
 8006504:	2002f84c 	.word	0x2002f84c

08006508 <_exit>:
	errno = EINVAL;
 8006508:	4b01      	ldr	r3, [pc, #4]	; (8006510 <_exit+0x8>)
 800650a:	2216      	movs	r2, #22
 800650c:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 800650e:	e7fe      	b.n	800650e <_exit+0x6>
 8006510:	2002f84c 	.word	0x2002f84c

08006514 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8006514:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006516:	1e16      	subs	r6, r2, #0
 8006518:	dd07      	ble.n	800652a <_read+0x16>
 800651a:	460c      	mov	r4, r1
 800651c:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 800651e:	f3af 8000 	nop.w
 8006522:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006526:	42a5      	cmp	r5, r4
 8006528:	d1f9      	bne.n	800651e <_read+0xa>
	}

	return len;
}
 800652a:	4630      	mov	r0, r6
 800652c:	bd70      	pop	{r4, r5, r6, pc}
 800652e:	bf00      	nop

08006530 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop

08006538 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8006538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800653c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800653e:	604b      	str	r3, [r1, #4]
}
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop

08006544 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8006544:	2001      	movs	r0, #1
 8006546:	4770      	bx	lr

08006548 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8006548:	2000      	movs	r0, #0
 800654a:	4770      	bx	lr

0800654c <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800654c:	490d      	ldr	r1, [pc, #52]	; (8006584 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 800654e:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006550:	4a0d      	ldr	r2, [pc, #52]	; (8006588 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8006552:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8006554:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006556:	4c0d      	ldr	r4, [pc, #52]	; (800658c <_sbrk+0x40>)
 8006558:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 800655a:	b170      	cbz	r0, 800657a <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800655c:	4403      	add	r3, r0
 800655e:	4293      	cmp	r3, r2
 8006560:	d803      	bhi.n	800656a <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 8006562:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 8006566:	600b      	str	r3, [r1, #0]
}
 8006568:	4770      	bx	lr
		errno = ENOMEM;
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <_sbrk+0x44>)
 800656c:	220c      	movs	r2, #12
		return (void*) -1;
 800656e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006572:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 8006576:	601a      	str	r2, [r3, #0]
}
 8006578:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 800657a:	4c06      	ldr	r4, [pc, #24]	; (8006594 <_sbrk+0x48>)
 800657c:	4620      	mov	r0, r4
 800657e:	600c      	str	r4, [r1, #0]
 8006580:	e7ec      	b.n	800655c <_sbrk+0x10>
 8006582:	bf00      	nop
 8006584:	20002d98 	.word	0x20002d98
 8006588:	20080000 	.word	0x20080000
 800658c:	00006800 	.word	0x00006800
 8006590:	2002f84c 	.word	0x2002f84c
 8006594:	2002f878 	.word	0x2002f878

08006598 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006598:	4a0f      	ldr	r2, [pc, #60]	; (80065d8 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 800659a:	4b10      	ldr	r3, [pc, #64]	; (80065dc <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800659c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80065a0:	490f      	ldr	r1, [pc, #60]	; (80065e0 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065a2:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 80065a6:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065a8:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 80065ac:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	f040 0001 	orr.w	r0, r0, #1
 80065b4:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 80065b6:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 80065bc:	4809      	ldr	r0, [pc, #36]	; (80065e4 <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80065be:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 80065c0:	6058      	str	r0, [r3, #4]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80065c2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 80065c6:	6819      	ldr	r1, [r3, #0]
 80065c8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80065cc:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 80065ce:	60dc      	str	r4, [r3, #12]
#endif
}
 80065d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80065d4:	6090      	str	r0, [r2, #8]
}
 80065d6:	4770      	bx	lr
 80065d8:	e000ed00 	.word	0xe000ed00
 80065dc:	40023800 	.word	0x40023800
 80065e0:	fef6ffff 	.word	0xfef6ffff
 80065e4:	24003010 	.word	0x24003010

080065e8 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 80065e8:	680b      	ldr	r3, [r1, #0]
 80065ea:	4a03      	ldr	r2, [pc, #12]	; (80065f8 <dnsfound+0x10>)
		ip_ready = -1;
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf08      	it	eq
 80065f0:	f04f 33ff 	moveq.w	r3, #4294967295
 80065f4:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 80065f6:	4770      	bx	lr
 80065f8:	20002dac 	.word	0x20002dac

080065fc <myreboot>:
void myreboot(char *msg) {
 80065fc:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 80065fe:	480a      	ldr	r0, [pc, #40]	; (8006628 <myreboot+0x2c>)
void myreboot(char *msg) {
 8006600:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 8006602:	f01e fa73 	bl	8024aec <iprintf>
	osDelay(2000);
 8006606:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800660a:	f00e fafb 	bl	8014c04 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800660e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006612:	4906      	ldr	r1, [pc, #24]	; (800662c <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006614:	4b06      	ldr	r3, [pc, #24]	; (8006630 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006616:	68ca      	ldr	r2, [r1, #12]
 8006618:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800661c:	4313      	orrs	r3, r2
 800661e:	60cb      	str	r3, [r1, #12]
 8006620:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006624:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006626:	e7fd      	b.n	8006624 <myreboot+0x28>
 8006628:	0802b058 	.word	0x0802b058
 800662c:	e000ed00 	.word	0xe000ed00
 8006630:	05fa0004 	.word	0x05fa0004

08006634 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8006634:	b500      	push	{lr}
 8006636:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006638:	f241 3388 	movw	r3, #5000	; 0x1388
 800663c:	4a16      	ldr	r2, [pc, #88]	; (8006698 <sendudp+0x64>)
 800663e:	f019 f9c1 	bl	801f9c4 <udp_sendto>
 8006642:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8006646:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800664a:	b943      	cbnz	r3, 800665e <sendudp+0x2a>
 800664c:	b25a      	sxtb	r2, r3
		busycount = 0;
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <sendudp+0x68>)
 8006650:	601a      	str	r2, [r3, #0]
	return (err);
 8006652:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006656:	b240      	sxtb	r0, r0
 8006658:	b003      	add	sp, #12
 800665a:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 800665e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006662:	480f      	ldr	r0, [pc, #60]	; (80066a0 <sendudp+0x6c>)
 8006664:	b249      	sxtb	r1, r1
 8006666:	f01e fa41 	bl	8024aec <iprintf>
		vTaskDelay(100); //some delay!
 800666a:	2064      	movs	r0, #100	; 0x64
 800666c:	f00f fe18 	bl	80162a0 <vTaskDelay>
		if (err == ERR_MEM) {
 8006670:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006674:	2bff      	cmp	r3, #255	; 0xff
 8006676:	d00c      	beq.n	8006692 <sendudp+0x5e>
		if (err == ERR_USE) {
 8006678:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800667c:	2bf8      	cmp	r3, #248	; 0xf8
 800667e:	d1e8      	bne.n	8006652 <sendudp+0x1e>
			if (busycount++ > 10)
 8006680:	4a06      	ldr	r2, [pc, #24]	; (800669c <sendudp+0x68>)
 8006682:	6813      	ldr	r3, [r2, #0]
 8006684:	1c59      	adds	r1, r3, #1
 8006686:	2b0a      	cmp	r3, #10
 8006688:	6011      	str	r1, [r2, #0]
 800668a:	dde2      	ble.n	8006652 <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 800668c:	4805      	ldr	r0, [pc, #20]	; (80066a4 <sendudp+0x70>)
 800668e:	f7ff ffb5 	bl	80065fc <myreboot>
			myreboot("sendudp: out of mem");
 8006692:	4805      	ldr	r0, [pc, #20]	; (80066a8 <sendudp+0x74>)
 8006694:	f7ff ffb2 	bl	80065fc <myreboot>
 8006698:	20002dc4 	.word	0x20002dc4
 800669c:	20002d9c 	.word	0x20002d9c
 80066a0:	0802b06c 	.word	0x0802b06c
 80066a4:	0802b094 	.word	0x0802b094
 80066a8:	0802b080 	.word	0x0802b080

080066ac <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80066ac:	4b25      	ldr	r3, [pc, #148]	; (8006744 <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80066ae:	4684      	mov	ip, r0
 80066b0:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80066b2:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80066b6:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80066b8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80066bc:	4c22      	ldr	r4, [pc, #136]	; (8006748 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80066be:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80066c0:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80066c2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80066c6:	4c21      	ldr	r4, [pc, #132]	; (800674c <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80066c8:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80066cc:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80066d0:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80066d4:	4c1e      	ldr	r4, [pc, #120]	; (8006750 <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80066d6:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80066da:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80066de:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80066e2:	4a1c      	ldr	r2, [pc, #112]	; (8006754 <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80066e4:	bfc8      	it	gt
 80066e6:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80066ea:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 80066ee:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80066f0:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	4d18      	ldr	r5, [pc, #96]	; (8006758 <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80066f8:	4a18      	ldr	r2, [pc, #96]	; (800675c <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80066fe:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006700:	bfb8      	it	lt
 8006702:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006704:	6f66      	ldr	r6, [r4, #116]	; 0x74
 8006706:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006708:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800670a:	4d15      	ldr	r5, [pc, #84]	; (8006760 <sendstatus+0xb4>)
 800670c:	b292      	uxth	r2, r2
 800670e:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006710:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006714:	432a      	orrs	r2, r5
 8006716:	4d13      	ldr	r5, [pc, #76]	; (8006764 <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006718:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800671a:	4035      	ands	r5, r6
 800671c:	432a      	orrs	r2, r5
 800671e:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006720:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8006724:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006726:	4a10      	ldr	r2, [pc, #64]	; (8006768 <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8006728:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 800672c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006730:	f7ff ff80 	bl	8006634 <sendudp>
 8006734:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	3301      	adds	r3, #1
 800673c:	6023      	str	r3, [r4, #0]
}
 800673e:	b002      	add	sp, #8
 8006740:	bd70      	pop	{r4, r5, r6, pc}
 8006742:	bf00      	nop
 8006744:	20000748 	.word	0x20000748
 8006748:	200006f4 	.word	0x200006f4
 800674c:	20002d30 	.word	0x20002d30
 8006750:	20002bfc 	.word	0x20002bfc
 8006754:	20000700 	.word	0x20000700
 8006758:	20000002 	.word	0x20000002
 800675c:	200006fc 	.word	0x200006fc
 8006760:	200006dc 	.word	0x200006dc
 8006764:	ffff0000 	.word	0xffff0000
 8006768:	20002dc4 	.word	0x20002dc4

0800676c <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	4604      	mov	r4, r0
 8006770:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 8006772:	4818      	ldr	r0, [pc, #96]	; (80067d4 <dnslookup+0x68>)
 8006774:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 8006776:	4e18      	ldr	r6, [pc, #96]	; (80067d8 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 8006778:	f01e f9b8 	bl	8024aec <iprintf>
	ip_ready = 0;
 800677c:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 800677e:	4620      	mov	r0, r4
 8006780:	4a16      	ldr	r2, [pc, #88]	; (80067dc <dnslookup+0x70>)
 8006782:	4639      	mov	r1, r7
	ip_ready = 0;
 8006784:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8006786:	f012 fdeb 	bl	8019360 <dns_gethostbyname>
 800678a:	4604      	mov	r4, r0

	switch (err) {
 800678c:	3005      	adds	r0, #5
 800678e:	d005      	beq.n	800679c <dnslookup+0x30>
 8006790:	b114      	cbz	r4, 8006798 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 8006792:	4813      	ldr	r0, [pc, #76]	; (80067e0 <dnslookup+0x74>)
 8006794:	f01e f9aa 	bl	8024aec <iprintf>
		break;
	}
	return (err);
}
 8006798:	4620      	mov	r0, r4
 800679a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 800679c:	4811      	ldr	r0, [pc, #68]	; (80067e4 <dnslookup+0x78>)
 800679e:	2514      	movs	r5, #20
 80067a0:	f01e f9a4 	bl	8024aec <iprintf>
		for (i = 0; i < 20; i++) {
 80067a4:	e001      	b.n	80067aa <dnslookup+0x3e>
 80067a6:	3d01      	subs	r5, #1
 80067a8:	d0f3      	beq.n	8006792 <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 80067aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067ae:	f00e fa29 	bl	8014c04 <osDelay>
			printf(".");
 80067b2:	202e      	movs	r0, #46	; 0x2e
 80067b4:	f01e f9b2 	bl	8024b1c <putchar>
			if (ip_ready) {
 80067b8:	6833      	ldr	r3, [r6, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0f3      	beq.n	80067a6 <dnslookup+0x3a>
				if (ip_ready == -1) {
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	d002      	beq.n	80067c8 <dnslookup+0x5c>
				return (ERR_OK);
 80067c2:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 80067c4:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 80067c6:	e7e7      	b.n	8006798 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 80067c8:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 80067ca:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 80067ce:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 80067d0:	e7e2      	b.n	8006798 <dnslookup+0x2c>
 80067d2:	bf00      	nop
 80067d4:	0802b0b0 	.word	0x0802b0b0
 80067d8:	20002dac 	.word	0x20002dac
 80067dc:	080065e9 	.word	0x080065e9
 80067e0:	0802b0ec 	.word	0x0802b0ec
 80067e4:	0802b0c4 	.word	0x0802b0c4
 80067e8:	0802b0e0 	.word	0x0802b0e0

080067ec <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 80067ec:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 80067ee:	4914      	ldr	r1, [pc, #80]	; (8006840 <locateudp+0x54>)
{
 80067f0:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 80067f2:	4814      	ldr	r0, [pc, #80]	; (8006844 <locateudp+0x58>)
 80067f4:	f01e f97a 	bl	8024aec <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 80067f8:	4913      	ldr	r1, [pc, #76]	; (8006848 <locateudp+0x5c>)
 80067fa:	4811      	ldr	r0, [pc, #68]	; (8006840 <locateudp+0x54>)
 80067fc:	f7ff ffb6 	bl	800676c <dnslookup>
 8006800:	b240      	sxtb	r0, r0
 8006802:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 8006806:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800680a:	b9a3      	cbnz	r3, 8006836 <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 800680c:	4b0e      	ldr	r3, [pc, #56]	; (8006848 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800680e:	490f      	ldr	r1, [pc, #60]	; (800684c <locateudp+0x60>)
	ip = udpdestip.addr;
 8006810:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8006812:	480f      	ldr	r0, [pc, #60]	; (8006850 <locateudp+0x64>)
 8006814:	0e22      	lsrs	r2, r4, #24
 8006816:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800681a:	e9cd 3200 	strd	r3, r2, [sp]
 800681e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8006822:	b2e2      	uxtb	r2, r4
 8006824:	f01e fb54 	bl	8024ed0 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8006828:	4909      	ldr	r1, [pc, #36]	; (8006850 <locateudp+0x64>)
 800682a:	480a      	ldr	r0, [pc, #40]	; (8006854 <locateudp+0x68>)
 800682c:	f01e f95e 	bl	8024aec <iprintf>
	return (ip);
}
 8006830:	4620      	mov	r0, r4
 8006832:	b004      	add	sp, #16
 8006834:	bd10      	pop	{r4, pc}
		rebootme(3);
 8006836:	2003      	movs	r0, #3
 8006838:	f7fb fed6 	bl	80025e8 <rebootme>
 800683c:	e7e6      	b.n	800680c <locateudp+0x20>
 800683e:	bf00      	nop
 8006840:	20002e10 	.word	0x20002e10
 8006844:	0802b110 	.word	0x0802b110
 8006848:	20002dc4 	.word	0x20002dc4
 800684c:	0802b130 	.word	0x0802b130
 8006850:	20002db4 	.word	0x20002db4
 8006854:	0802b140 	.word	0x0802b140

08006858 <startudp>:

void startudp(uint32_t ip) {
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	ed2d 8b02 	vpush	{d8}
 8006860:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8006862:	f00f fe45 	bl	80164f0 <xTaskGetCurrentTaskHandle>
 8006866:	4b75      	ldr	r3, [pc, #468]	; (8006a3c <startudp+0x1e4>)
 8006868:	4602      	mov	r2, r0
	osDelay(1000);
 800686a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800686e:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8006870:	f00e f9c8 	bl	8014c04 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8006874:	f019 f972 	bl	801fb5c <udp_new>
	if (pcb == NULL) {
 8006878:	2800      	cmp	r0, #0
 800687a:	f000 80ce 	beq.w	8006a1a <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 800687e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006882:	496f      	ldr	r1, [pc, #444]	; (8006a40 <startudp+0x1e8>)
 8006884:	ee08 0a10 	vmov	s16, r0
 8006888:	f018 ff18 	bl	801f6bc <udp_bind>
 800688c:	4605      	mov	r5, r0
 800688e:	2800      	cmp	r0, #0
 8006890:	f040 80bf 	bne.w	8006a12 <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8006894:	2241      	movs	r2, #65	; 0x41
 8006896:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 800689a:	2036      	movs	r0, #54	; 0x36
 800689c:	f013 feb6 	bl	801a60c <pbuf_alloc>

	if (p1 == NULL) {
 80068a0:	9000      	str	r0, [sp, #0]
 80068a2:	2800      	cmp	r0, #0
 80068a4:	f000 80bd 	beq.w	8006a22 <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 80068a8:	4c66      	ldr	r4, [pc, #408]	; (8006a44 <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80068aa:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 80068ae:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80068b0:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80068b6:	2241      	movs	r2, #65	; 0x41
 80068b8:	f013 fea8 	bl	801a60c <pbuf_alloc>
	if (p2 == NULL) {
 80068bc:	9001      	str	r0, [sp, #4]
 80068be:	2800      	cmp	r0, #0
 80068c0:	f000 80b7 	beq.w	8006a32 <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80068c4:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80068c6:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80068c8:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80068ca:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80068cc:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80068d0:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80068d2:	2201      	movs	r2, #1
 80068d4:	f013 fe9a 	bl	801a60c <pbuf_alloc>
	if (ps == NULL) {
 80068d8:	ee08 0a90 	vmov	s17, r0
 80068dc:	2800      	cmp	r0, #0
 80068de:	f000 80aa 	beq.w	8006a36 <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 80068e2:	4c59      	ldr	r4, [pc, #356]	; (8006a48 <startudp+0x1f0>)
 80068e4:	4f59      	ldr	r7, [pc, #356]	; (8006a4c <startudp+0x1f4>)
 80068e6:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 80068e8:	f241 3088 	movw	r0, #5000	; 0x1388
 80068ec:	f00e f98a 	bl	8014c04 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 80068f0:	4b57      	ldr	r3, [pc, #348]	; (8006a50 <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 80068f2:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 80068f4:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 80068f6:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80068f8:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80068fa:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 80068fe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8006902:	4b54      	ldr	r3, [pc, #336]	; (8006a54 <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8006904:	4854      	ldr	r0, [pc, #336]	; (8006a58 <startudp+0x200>)
 8006906:	4e55      	ldr	r6, [pc, #340]	; (8006a5c <startudp+0x204>)
 8006908:	f8df b188 	ldr.w	fp, [pc, #392]	; 8006a94 <startudp+0x23c>
 800690c:	f8df a188 	ldr.w	sl, [pc, #392]	; 8006a98 <startudp+0x240>
 8006910:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8006a9c <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8006914:	4d52      	ldr	r5, [pc, #328]	; (8006a60 <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8006916:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8006918:	f01e f984 	bl	8024c24 <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 800691c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006920:	2001      	movs	r0, #1
 8006922:	f00f ff2d 	bl	8016780 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8006926:	2800      	cmp	r0, #0
 8006928:	d05a      	beq.n	80069e0 <startudp+0x188>
			sigsend = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 800692e:	7833      	ldrb	r3, [r6, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0f3      	beq.n	800691c <startudp+0xc4>
 8006934:	f8db 3000 	ldr.w	r3, [fp]
 8006938:	f8da 2000 	ldr.w	r2, [sl]
 800693c:	4313      	orrs	r3, r2
 800693e:	d1ed      	bne.n	800691c <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8006940:	4a48      	ldr	r2, [pc, #288]	; (8006a64 <startudp+0x20c>)
 8006942:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	2a00      	cmp	r2, #0
 800694a:	bf08      	it	eq
 800694c:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 800694e:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8006950:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8006952:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8006954:	6822      	ldr	r2, [r4, #0]
 8006956:	684b      	ldr	r3, [r1, #4]
 8006958:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	684a      	ldr	r2, [r1, #4]
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	684a      	ldr	r2, [r1, #4]
 8006966:	0c1b      	lsrs	r3, r3, #16
 8006968:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 800696a:	7b89      	ldrb	r1, [r1, #14]
 800696c:	2901      	cmp	r1, #1
 800696e:	d006      	beq.n	800697e <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8006970:	4628      	mov	r0, r5
 8006972:	f01e f8bb 	bl	8024aec <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 8006976:	f899 100e 	ldrb.w	r1, [r9, #14]
 800697a:	2901      	cmp	r1, #1
 800697c:	d1f8      	bne.n	8006970 <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 800697e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006982:	4649      	mov	r1, r9
 8006984:	4a38      	ldr	r2, [pc, #224]	; (8006a68 <startudp+0x210>)
 8006986:	ee18 0a10 	vmov	r0, s16
 800698a:	f7ff fe53 	bl	8006634 <sendudp>
 800698e:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 8006992:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006996:	3301      	adds	r3, #1
 8006998:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 800699c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80069a0:	3301      	adds	r3, #1
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	3301      	adds	r3, #1
 80069ac:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 80069ae:	4b2f      	ldr	r3, [pc, #188]	; (8006a6c <startudp+0x214>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0b2      	beq.n	800691c <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 80069b6:	492e      	ldr	r1, [pc, #184]	; (8006a70 <startudp+0x218>)
 80069b8:	ee18 2a10 	vmov	r2, s16
 80069bc:	2001      	movs	r0, #1
 80069be:	780b      	ldrb	r3, [r1, #0]
 80069c0:	ee18 1a90 	vmov	r1, s17
 80069c4:	f7ff fe72 	bl	80066ac <sendstatus>
					sendendstatus = 0;	// cancel the flag
 80069c8:	2300      	movs	r3, #0
 80069ca:	4a28      	ldr	r2, [pc, #160]	; (8006a6c <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80069cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80069d0:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 80069d2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 80069d6:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80069d8:	f00f fed2 	bl	8016780 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 80069dc:	2800      	cmp	r0, #0
 80069de:	d1a4      	bne.n	800692a <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 80069e0:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <startudp+0x21c>)
 80069e2:	f8d8 2000 	ldr.w	r2, [r8]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d097      	beq.n	800691c <startudp+0xc4>
 80069ec:	4a22      	ldr	r2, [pc, #136]	; (8006a78 <startudp+0x220>)
 80069ee:	4923      	ldr	r1, [pc, #140]	; (8006a7c <startudp+0x224>)
 80069f0:	fb02 f203 	mul.w	r2, r2, r3
 80069f4:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 80069f8:	d390      	bcc.n	800691c <startudp+0xc4>
		talive = t1sec;
 80069fa:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 80069fe:	ee18 2a10 	vmov	r2, s16
 8006a02:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <startudp+0x218>)
 8006a04:	ee18 1a90 	vmov	r1, s17
 8006a08:	2002      	movs	r0, #2
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	f7ff fe4e 	bl	80066ac <sendstatus>
 8006a10:	e784      	b.n	800691c <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 8006a12:	481b      	ldr	r0, [pc, #108]	; (8006a80 <startudp+0x228>)
 8006a14:	f01e f906 	bl	8024c24 <puts>
		for (;;)
 8006a18:	e7fe      	b.n	8006a18 <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 8006a1a:	481a      	ldr	r0, [pc, #104]	; (8006a84 <startudp+0x22c>)
 8006a1c:	f01e f902 	bl	8024c24 <puts>
		for (;;)
 8006a20:	e7fe      	b.n	8006a20 <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 8006a22:	4819      	ldr	r0, [pc, #100]	; (8006a88 <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 8006a24:	b005      	add	sp, #20
 8006a26:	ecbd 8b02 	vpop	{d8}
 8006a2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8006a2e:	f01e b8f9 	b.w	8024c24 <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 8006a32:	4816      	ldr	r0, [pc, #88]	; (8006a8c <startudp+0x234>)
 8006a34:	e7f6      	b.n	8006a24 <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 8006a36:	4816      	ldr	r0, [pc, #88]	; (8006a90 <startudp+0x238>)
 8006a38:	e7f4      	b.n	8006a24 <startudp+0x1cc>
 8006a3a:	bf00      	nop
 8006a3c:	200007fc 	.word	0x200007fc
 8006a40:	08044cb8 	.word	0x08044cb8
 8006a44:	2000074c 	.word	0x2000074c
 8006a48:	20002bfc 	.word	0x20002bfc
 8006a4c:	20000764 	.word	0x20000764
 8006a50:	dec0edfe 	.word	0xdec0edfe
 8006a54:	2000074a 	.word	0x2000074a
 8006a58:	0802b1ec 	.word	0x0802b1ec
 8006a5c:	20002da8 	.word	0x20002da8
 8006a60:	0802b220 	.word	0x0802b220
 8006a64:	200006f0 	.word	0x200006f0
 8006a68:	20002dc4 	.word	0x20002dc4
 8006a6c:	2000075c 	.word	0x2000075c
 8006a70:	200006dc 	.word	0x200006dc
 8006a74:	20002a14 	.word	0x20002a14
 8006a78:	eeeeeeef 	.word	0xeeeeeeef
 8006a7c:	02222222 	.word	0x02222222
 8006a80:	0802b170 	.word	0x0802b170
 8006a84:	0802b154 	.word	0x0802b154
 8006a88:	0802b18c 	.word	0x0802b18c
 8006a8c:	0802b1ac 	.word	0x0802b1ac
 8006a90:	0802b1cc 	.word	0x0802b1cc
 8006a94:	20002da4 	.word	0x20002da4
 8006a98:	200006fc 	.word	0x200006fc
 8006a9c:	20002db0 	.word	0x20002db0

08006aa0 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 8006aa2:	4b52      	ldr	r3, [pc, #328]	; (8006bec <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006aa8:	4851      	ldr	r0, [pc, #324]	; (8006bf0 <tag_callback+0x150>)
	if (ledsenabled) {
 8006aaa:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 8006ab0:	b35a      	cbz	r2, 8006b0a <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006ab2:	f004 fcdb 	bl	800b46c <HAL_GPIO_TogglePin>
 8006ab6:	4c4f      	ldr	r4, [pc, #316]	; (8006bf4 <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8006ab8:	4d4f      	ldr	r5, [pc, #316]	; (8006bf8 <tag_callback+0x158>)
 8006aba:	e001      	b.n	8006ac0 <tag_callback+0x20>
 8006abc:	f01e f8b2 	bl	8024c24 <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	6820      	ldr	r0, [r4, #0]
 8006ac4:	f00e fe62 	bl	801578c <xQueueSemaphoreTake>
 8006ac8:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8006aca:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d1f5      	bne.n	8006abc <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8006ad0:	1f32      	subs	r2, r6, #4
 8006ad2:	2a07      	cmp	r2, #7
 8006ad4:	d81c      	bhi.n	8006b10 <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8006ad6:	4949      	ldr	r1, [pc, #292]	; (8006bfc <tag_callback+0x15c>)
 8006ad8:	4093      	lsls	r3, r2
 8006ada:	780a      	ldrb	r2, [r1, #0]
 8006adc:	4013      	ands	r3, r2
 8006ade:	4a48      	ldr	r2, [pc, #288]	; (8006c00 <tag_callback+0x160>)
 8006ae0:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 8006ae2:	bb5b      	cbnz	r3, 8006b3c <tag_callback+0x9c>
			strcpy(newstring, "0");
 8006ae4:	4b47      	ldr	r3, [pc, #284]	; (8006c04 <tag_callback+0x164>)
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8006aea:	2300      	movs	r3, #0
 8006aec:	6820      	ldr	r0, [r4, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	4619      	mov	r1, r3
 8006af2:	f00e fbb1 	bl	8015258 <xQueueGenericSend>
 8006af6:	2801      	cmp	r0, #1
 8006af8:	d002      	beq.n	8006b00 <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8006afa:	4843      	ldr	r0, [pc, #268]	; (8006c08 <tag_callback+0x168>)
 8006afc:	f01e f892 	bl	8024c24 <puts>
	}
	return (strlen(newstring));
 8006b00:	4638      	mov	r0, r7
}
 8006b02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8006b06:	f7f9 bba5 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 8006b0a:	f004 fc95 	bl	800b438 <HAL_GPIO_WritePin>
 8006b0e:	e7d2      	b.n	8006ab6 <tag_callback+0x16>
		switch (index) {
 8006b10:	2e14      	cmp	r6, #20
 8006b12:	d817      	bhi.n	8006b44 <tag_callback+0xa4>
 8006b14:	e8df f006 	tbb	[pc, r6]
 8006b18:	0b655055 	.word	0x0b655055
 8006b1c:	16161616 	.word	0x16161616
 8006b20:	16161616 	.word	0x16161616
 8006b24:	343d5a61 	.word	0x343d5a61
 8006b28:	464b2429 	.word	0x464b2429
 8006b2c:	1c          	.byte	0x1c
 8006b2d:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8006b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b32:	482f      	ldr	r0, [pc, #188]	; (8006bf0 <tag_callback+0x150>)
 8006b34:	f004 fc6e 	bl	800b414 <HAL_GPIO_ReadPin>
 8006b38:	2801      	cmp	r0, #1
 8006b3a:	d1d3      	bne.n	8006ae4 <tag_callback+0x44>
			strcpy(newstring, "1");
 8006b3c:	4b33      	ldr	r3, [pc, #204]	; (8006c0c <tag_callback+0x16c>)
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	803b      	strh	r3, [r7, #0]
 8006b42:	e7d2      	b.n	8006aea <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8006b44:	4632      	mov	r2, r6
 8006b46:	4932      	ldr	r1, [pc, #200]	; (8006c10 <tag_callback+0x170>)
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f01e f9c1 	bl	8024ed0 <siprintf>
			break;
 8006b4e:	e7cc      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8006b50:	4b30      	ldr	r3, [pc, #192]	; (8006c14 <tag_callback+0x174>)
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bf14      	ite	ne
 8006b58:	2331      	movne	r3, #49	; 0x31
 8006b5a:	2330      	moveq	r3, #48	; 0x30
 8006b5c:	803b      	strh	r3, [r7, #0]
			break;
 8006b5e:	e7c4      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 8006b60:	492d      	ldr	r1, [pc, #180]	; (8006c18 <tag_callback+0x178>)
 8006b62:	4638      	mov	r0, r7
 8006b64:	f01e fa5b 	bl	802501e <strcpy>
			break;
 8006b68:	e7bf      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8006b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b6e:	482b      	ldr	r0, [pc, #172]	; (8006c1c <tag_callback+0x17c>)
 8006b70:	f004 fc50 	bl	800b414 <HAL_GPIO_ReadPin>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	bf14      	ite	ne
 8006b78:	2330      	movne	r3, #48	; 0x30
 8006b7a:	2331      	moveq	r3, #49	; 0x31
 8006b7c:	803b      	strh	r3, [r7, #0]
			break;
 8006b7e:	e7b4      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8006b80:	4b27      	ldr	r3, [pc, #156]	; (8006c20 <tag_callback+0x180>)
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	f013 0f04 	tst.w	r3, #4
 8006b88:	bf14      	ite	ne
 8006b8a:	2331      	movne	r3, #49	; 0x31
 8006b8c:	2330      	moveq	r3, #48	; 0x30
 8006b8e:	803b      	strh	r3, [r7, #0]
			break;
 8006b90:	e7ab      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8006b92:	4b23      	ldr	r3, [pc, #140]	; (8006c20 <tag_callback+0x180>)
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	f013 0f02 	tst.w	r3, #2
 8006b9a:	bf14      	ite	ne
 8006b9c:	2331      	movne	r3, #49	; 0x31
 8006b9e:	2330      	moveq	r3, #48	; 0x30
 8006ba0:	803b      	strh	r3, [r7, #0]
			break;
 8006ba2:	e7a2      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 8006ba4:	491f      	ldr	r1, [pc, #124]	; (8006c24 <tag_callback+0x184>)
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f01e fa39 	bl	802501e <strcpy>
			break;
 8006bac:	e79d      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 8006bae:	491e      	ldr	r1, [pc, #120]	; (8006c28 <tag_callback+0x188>)
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f01e fa34 	bl	802501e <strcpy>
			break;
 8006bb6:	e798      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 8006bb8:	491c      	ldr	r1, [pc, #112]	; (8006c2c <tag_callback+0x18c>)
 8006bba:	4638      	mov	r0, r7
 8006bbc:	f01e fa2f 	bl	802501e <strcpy>
			break;
 8006bc0:	e793      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 8006bc2:	491b      	ldr	r1, [pc, #108]	; (8006c30 <tag_callback+0x190>)
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f01e fa2a 	bl	802501e <strcpy>
			break;
 8006bca:	e78e      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8006bcc:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <tag_callback+0x180>)
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	3330      	adds	r3, #48	; 0x30
 8006bd6:	803b      	strh	r3, [r7, #0]
			break;
 8006bd8:	e787      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, "5");
 8006bda:	4b16      	ldr	r3, [pc, #88]	; (8006c34 <tag_callback+0x194>)
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	803b      	strh	r3, [r7, #0]
			break;
 8006be0:	e783      	b.n	8006aea <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 8006be2:	4915      	ldr	r1, [pc, #84]	; (8006c38 <tag_callback+0x198>)
 8006be4:	4638      	mov	r0, r7
 8006be6:	f01e fa1a 	bl	802501e <strcpy>
			break;
 8006bea:	e77e      	b.n	8006aea <tag_callback+0x4a>
 8006bec:	20000270 	.word	0x20000270
 8006bf0:	40020c00 	.word	0x40020c00
 8006bf4:	20002a10 	.word	0x20002a10
 8006bf8:	0802b308 	.word	0x0802b308
 8006bfc:	20000274 	.word	0x20000274
 8006c00:	20002dc8 	.word	0x20002dc8
 8006c04:	08044894 	.word	0x08044894
 8006c08:	0802b334 	.word	0x0802b334
 8006c0c:	0802b0e8 	.word	0x0802b0e8
 8006c10:	0802b314 	.word	0x0802b314
 8006c14:	20000010 	.word	0x20000010
 8006c18:	20000084 	.word	0x20000084
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	20002d30 	.word	0x20002d30
 8006c24:	20000014 	.word	0x20000014
 8006c28:	20000128 	.word	0x20000128
 8006c2c:	20000074 	.word	0x20000074
 8006c30:	20000230 	.word	0x20000230
 8006c34:	08042c78 	.word	0x08042c78
 8006c38:	20000054 	.word	0x20000054

08006c3c <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	b085      	sub	sp, #20
 8006c42:	4615      	mov	r5, r2
 8006c44:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8006c46:	220a      	movs	r2, #10
 8006c48:	a903      	add	r1, sp, #12
 8006c4a:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8006c4c:	4699      	mov	r9, r3
 8006c4e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8006c50:	f01e ffd4 	bl	8025bfc <strtol>
 8006c54:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8006c56:	4621      	mov	r1, r4
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4871      	ldr	r0, [pc, #452]	; (8006e20 <httpd_cgi_handler+0x1e4>)
 8006c5c:	4633      	mov	r3, r6
 8006c5e:	f01d ff45 	bl	8024aec <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006c62:	2d00      	cmp	r5, #0
 8006c64:	dd37      	ble.n	8006cd6 <httpd_cgi_handler+0x9a>
 8006c66:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8006c68:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8006e50 <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8006c6c:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8006e54 <httpd_cgi_handler+0x218>
		switch (j) {
 8006c70:	f1a6 030a 	sub.w	r3, r6, #10
 8006c74:	2b0e      	cmp	r3, #14
 8006c76:	f200 80cc 	bhi.w	8006e12 <httpd_cgi_handler+0x1d6>
 8006c7a:	e8df f003 	tbb	[pc, r3]
 8006c7e:	9eb6      	.short	0x9eb6
 8006c80:	08080808 	.word	0x08080808
 8006c84:	08080808 	.word	0x08080808
 8006c88:	864d6073 	.word	0x864d6073
 8006c8c:	3a          	.byte	0x3a
 8006c8d:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 8006c8e:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8006c90:	2101      	movs	r1, #1
 8006c92:	f1a6 000c 	sub.w	r0, r6, #12
 8006c96:	4b63      	ldr	r3, [pc, #396]	; (8006e24 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8006c98:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8006c9a:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8006c9e:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 8006ca0:	2a30      	cmp	r2, #48	; 0x30
 8006ca2:	d01b      	beq.n	8006cdc <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8006ca4:	781a      	ldrb	r2, [r3, #0]
 8006ca6:	4311      	orrs	r1, r2
 8006ca8:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8006caa:	f001 0202 	and.w	r2, r1, #2
 8006cae:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8006cb0:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 8006cb2:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8006cb4:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8006cb8:	f01d ff18 	bl	8024aec <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8006cbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	4a58      	ldr	r2, [pc, #352]	; (8006e24 <httpd_cgi_handler+0x1e8>)
 8006cc4:	9100      	str	r1, [sp, #0]
 8006cc6:	2188      	movs	r1, #136	; 0x88
 8006cc8:	4857      	ldr	r0, [pc, #348]	; (8006e28 <httpd_cgi_handler+0x1ec>)
 8006cca:	f004 febb 	bl	800ba44 <HAL_I2C_Master_Transmit>
 8006cce:	b960      	cbnz	r0, 8006cea <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006cd0:	3401      	adds	r4, #1
 8006cd2:	42a5      	cmp	r5, r4
 8006cd4:	d1cc      	bne.n	8006c70 <httpd_cgi_handler+0x34>
}
 8006cd6:	b005      	add	sp, #20
 8006cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8006cdc:	2101      	movs	r1, #1
 8006cde:	fa01 f600 	lsl.w	r6, r1, r0
 8006ce2:	7819      	ldrb	r1, [r3, #0]
 8006ce4:	ea21 0106 	bic.w	r1, r1, r6
 8006ce8:	e7df      	b.n	8006caa <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8006cea:	4850      	ldr	r0, [pc, #320]	; (8006e2c <httpd_cgi_handler+0x1f0>)
 8006cec:	f01d fefe 	bl	8024aec <iprintf>
 8006cf0:	e7ee      	b.n	8006cd0 <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	3c01      	subs	r4, #1
 8006cf6:	484e      	ldr	r0, [pc, #312]	; (8006e30 <httpd_cgi_handler+0x1f4>)
 8006cf8:	440c      	add	r4, r1
 8006cfa:	4623      	mov	r3, r4
 8006cfc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d00:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006d02:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d04:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006d08:	bf18      	it	ne
 8006d0a:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d0c:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006d0e:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d10:	dcf3      	bgt.n	8006cfa <httpd_cgi_handler+0xbe>
}
 8006d12:	b005      	add	sp, #20
 8006d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d18:	4e46      	ldr	r6, [pc, #280]	; (8006e34 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006d20:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d22:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8006d24:	2b30      	cmp	r3, #48	; 0x30
 8006d26:	bf0c      	ite	eq
 8006d28:	f020 0001 	biceq.w	r0, r0, #1
 8006d2c:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8006d30:	f7fd fea2 	bl	8004a78 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d34:	42a5      	cmp	r5, r4
 8006d36:	dcf0      	bgt.n	8006d1a <httpd_cgi_handler+0xde>
}
 8006d38:	b005      	add	sp, #20
 8006d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3e:	4e3d      	ldr	r6, [pc, #244]	; (8006e34 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006d46:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d48:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8006d4a:	2b30      	cmp	r3, #48	; 0x30
 8006d4c:	bf0c      	ite	eq
 8006d4e:	f020 0002 	biceq.w	r0, r0, #2
 8006d52:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8006d56:	f7fd fe8f 	bl	8004a78 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d5a:	42a5      	cmp	r5, r4
 8006d5c:	dcf0      	bgt.n	8006d40 <httpd_cgi_handler+0x104>
}
 8006d5e:	b005      	add	sp, #20
 8006d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d64:	4e33      	ldr	r6, [pc, #204]	; (8006e34 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006d6c:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d6e:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8006d70:	2b30      	cmp	r3, #48	; 0x30
 8006d72:	bf0c      	ite	eq
 8006d74:	f020 0004 	biceq.w	r0, r0, #4
 8006d78:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8006d7c:	f7fd fe7c 	bl	8004a78 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d80:	42a5      	cmp	r5, r4
 8006d82:	dcf0      	bgt.n	8006d66 <httpd_cgi_handler+0x12a>
}
 8006d84:	b005      	add	sp, #20
 8006d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8a:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8006d8c:	4e2a      	ldr	r6, [pc, #168]	; (8006e38 <httpd_cgi_handler+0x1fc>)
 8006d8e:	e004      	b.n	8006d9a <httpd_cgi_handler+0x15e>
 8006d90:	f004 fb52 	bl	800b438 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d94:	42a5      	cmp	r5, r4
 8006d96:	dd9e      	ble.n	8006cd6 <httpd_cgi_handler+0x9a>
 8006d98:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8006d9a:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006da2:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8006da4:	4423      	add	r3, r4
 8006da6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006daa:	2b31      	cmp	r3, #49	; 0x31
 8006dac:	d1f0      	bne.n	8006d90 <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8006dae:	2200      	movs	r2, #0
 8006db0:	f004 fb42 	bl	800b438 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006db4:	42a5      	cmp	r5, r4
 8006db6:	dcef      	bgt.n	8006d98 <httpd_cgi_handler+0x15c>
 8006db8:	e78d      	b.n	8006cd6 <httpd_cgi_handler+0x9a>
 8006dba:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8006dbc:	4e1f      	ldr	r6, [pc, #124]	; (8006e3c <httpd_cgi_handler+0x200>)
 8006dbe:	e004      	b.n	8006dca <httpd_cgi_handler+0x18e>
 8006dc0:	f004 fb3a 	bl	800b438 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006dc4:	42ac      	cmp	r4, r5
 8006dc6:	da86      	bge.n	8006cd6 <httpd_cgi_handler+0x9a>
 8006dc8:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8006dca:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006dd2:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8006dd4:	4423      	add	r3, r4
 8006dd6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006dda:	2b30      	cmp	r3, #48	; 0x30
 8006ddc:	d1f0      	bne.n	8006dc0 <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8006dde:	2200      	movs	r2, #0
 8006de0:	f004 fb2a 	bl	800b438 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006de4:	42a5      	cmp	r5, r4
 8006de6:	dcef      	bgt.n	8006dc8 <httpd_cgi_handler+0x18c>
 8006de8:	e775      	b.n	8006cd6 <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8006dea:	4815      	ldr	r0, [pc, #84]	; (8006e40 <httpd_cgi_handler+0x204>)
 8006dec:	f01d ff1a 	bl	8024c24 <puts>
			osDelay(1000);
 8006df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006df4:	f00d ff06 	bl	8014c04 <osDelay>
 8006df8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006dfc:	4911      	ldr	r1, [pc, #68]	; (8006e44 <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006dfe:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006e00:	68ca      	ldr	r2, [r1, #12]
 8006e02:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60cb      	str	r3, [r1, #12]
 8006e0a:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006e0e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006e10:	e7fd      	b.n	8006e0e <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8006e12:	f8d9 1000 	ldr.w	r1, [r9]
 8006e16:	480d      	ldr	r0, [pc, #52]	; (8006e4c <httpd_cgi_handler+0x210>)
 8006e18:	f01d fe68 	bl	8024aec <iprintf>
			break;
 8006e1c:	e758      	b.n	8006cd0 <httpd_cgi_handler+0x94>
 8006e1e:	bf00      	nop
 8006e20:	0802b34c 	.word	0x0802b34c
 8006e24:	20000274 	.word	0x20000274
 8006e28:	200021b0 	.word	0x200021b0
 8006e2c:	0802ac7c 	.word	0x0802ac7c
 8006e30:	20000010 	.word	0x20000010
 8006e34:	20002d30 	.word	0x20002d30
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	40020c00 	.word	0x40020c00
 8006e40:	0802b378 	.word	0x0802b378
 8006e44:	e000ed00 	.word	0xe000ed00
 8006e48:	05fa0004 	.word	0x05fa0004
 8006e4c:	0802b3b0 	.word	0x0802b3b0
 8006e50:	20002d2c 	.word	0x20002d2c
 8006e54:	0802b394 	.word	0x0802b394

08006e58 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8006e58:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8006e5a:	4802      	ldr	r0, [pc, #8]	; (8006e64 <httpd_post_receive_data+0xc>)
 8006e5c:	f01d fee2 	bl	8024c24 <puts>
}
 8006e60:	2000      	movs	r0, #0
 8006e62:	bd08      	pop	{r3, pc}
 8006e64:	0802b3d0 	.word	0x0802b3d0

08006e68 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8006e68:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8006e6a:	4802      	ldr	r0, [pc, #8]	; (8006e74 <httpd_post_begin+0xc>)
 8006e6c:	f01d feda 	bl	8024c24 <puts>
}
 8006e70:	2000      	movs	r0, #0
 8006e72:	bd08      	pop	{r3, pc}
 8006e74:	0802b3ec 	.word	0x0802b3ec

08006e78 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <httpd_post_finished+0x8>)
 8006e7a:	f01d bed3 	b.w	8024c24 <puts>
 8006e7e:	bf00      	nop
 8006e80:	0802b400 	.word	0x0802b400

08006e84 <init_httpd_ssi>:

// embedded ssi tag handler setup
init_httpd_ssi() {

	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8006e84:	4803      	ldr	r0, [pc, #12]	; (8006e94 <init_httpd_ssi+0x10>)
 8006e86:	2215      	movs	r2, #21
 8006e88:	4903      	ldr	r1, [pc, #12]	; (8006e98 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8006e8a:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8006e8c:	f011 fd1c 	bl	80188c8 <http_set_ssi_handler>
}
 8006e90:	bd08      	pop	{r3, pc}
 8006e92:	bf00      	nop
 8006e94:	08006aa1 	.word	0x08006aa1
 8006e98:	20000280 	.word	0x20000280

08006e9c <parsep2>:

///////////////////////////////////////////////////////
/// parse p2 params
//////////////////////////////////////////////////////
int parsep2(char *buf, char *match, int type, void *value) {
 8006e9c:	b570      	push	{r4, r5, r6, lr}
	uint32_t *val;

	i = 0;
	j = 0;
	val = value;
	while ((buf[i]) && (buf[i] != '}')) {
 8006e9e:	7804      	ldrb	r4, [r0, #0]
 8006ea0:	b194      	cbz	r4, 8006ec8 <parsep2+0x2c>
 8006ea2:	2c7d      	cmp	r4, #125	; 0x7d
 8006ea4:	d010      	beq.n	8006ec8 <parsep2+0x2c>
	j = 0;
 8006ea6:	f04f 0e00 	mov.w	lr, #0
	i = 0;
 8006eaa:	4675      	mov	r5, lr
		if (buf[i++] == match[j]) {
 8006eac:	f811 600e 	ldrb.w	r6, [r1, lr]
 8006eb0:	f105 0c01 	add.w	ip, r5, #1
 8006eb4:	42a6      	cmp	r6, r4
			j++;
		} else {
			j = 0;
		}
		if (j > 0) {		// started matching something
			if (buf[i] == ':') {		// end of match
 8006eb6:	f810 400c 	ldrb.w	r4, [r0, ip]
		if (buf[i++] == match[j]) {
 8006eba:	d008      	beq.n	8006ece <parsep2+0x32>
 8006ebc:	4665      	mov	r5, ip
			j = 0;
 8006ebe:	f04f 0e00 	mov.w	lr, #0
	while ((buf[i]) && (buf[i] != '}')) {
 8006ec2:	b10c      	cbz	r4, 8006ec8 <parsep2+0x2c>
 8006ec4:	2c7d      	cmp	r4, #125	; 0x7d
 8006ec6:	d1f1      	bne.n	8006eac <parsep2+0x10>
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
				}
			}
		}
	}
	return (-1);
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
			if (buf[i] == ':') {		// end of match
 8006ece:	2c3a      	cmp	r4, #58	; 0x3a
			j++;
 8006ed0:	f10e 0e01 	add.w	lr, lr, #1
			if (buf[i] == ':') {		// end of match
 8006ed4:	d001      	beq.n	8006eda <parsep2+0x3e>
		if (buf[i++] == match[j]) {
 8006ed6:	4665      	mov	r5, ip
 8006ed8:	e7f3      	b.n	8006ec2 <parsep2+0x26>
				if (type == 1) {		// looking for a string
 8006eda:	2a01      	cmp	r2, #1
				i++;
 8006edc:	f105 0502 	add.w	r5, r5, #2
				if (type == 1) {		// looking for a string
 8006ee0:	d005      	beq.n	8006eee <parsep2+0x52>
				} else if (type == 2) { // uint32_t base 10 string
 8006ee2:	2a02      	cmp	r2, #2
 8006ee4:	d01b      	beq.n	8006f1e <parsep2+0x82>
				} else if (type == 3) { // uint32_t hex string
 8006ee6:	2a03      	cmp	r2, #3
 8006ee8:	d023      	beq.n	8006f32 <parsep2+0x96>
	while ((buf[i]) && (buf[i] != '}')) {
 8006eea:	5d44      	ldrb	r4, [r0, r5]
 8006eec:	e7e9      	b.n	8006ec2 <parsep2+0x26>
					while ((buf[i]) && (isalnum(buf[i]))) {
 8006eee:	5d44      	ldrb	r4, [r0, r5]
 8006ef0:	1941      	adds	r1, r0, r5
 8006ef2:	b35c      	cbz	r4, 8006f4c <parsep2+0xb0>
 8006ef4:	1e5d      	subs	r5, r3, #1
					j = 0;
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4e16      	ldr	r6, [pc, #88]	; (8006f54 <parsep2+0xb8>)
 8006efa:	e005      	b.n	8006f08 <parsep2+0x6c>
						pch[j++] = buf[i++];
 8006efc:	f805 4f01 	strb.w	r4, [r5, #1]!
 8006f00:	3201      	adds	r2, #1
					while ((buf[i]) && (isalnum(buf[i]))) {
 8006f02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f06:	b1f4      	cbz	r4, 8006f46 <parsep2+0xaa>
 8006f08:	5d30      	ldrb	r0, [r6, r4]
 8006f0a:	0740      	lsls	r0, r0, #29
 8006f0c:	d1f6      	bne.n	8006efc <parsep2+0x60>
					return ((j > 0) ? 0 : -1);
 8006f0e:	fab2 f082 	clz	r0, r2
					pch[j] = 0;
 8006f12:	4413      	add	r3, r2
					return ((j > 0) ? 0 : -1);
 8006f14:	0940      	lsrs	r0, r0, #5
 8006f16:	4240      	negs	r0, r0
					pch[j] = 0;
 8006f18:	2200      	movs	r2, #0
 8006f1a:	701a      	strb	r2, [r3, #0]
}
 8006f1c:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%u", val) == 1) ? 0 : -1);
 8006f1e:	461a      	mov	r2, r3
 8006f20:	490d      	ldr	r1, [pc, #52]	; (8006f58 <parsep2+0xbc>)
 8006f22:	4428      	add	r0, r5
 8006f24:	f01d fff4 	bl	8024f10 <siscanf>
 8006f28:	3801      	subs	r0, #1
 8006f2a:	bf18      	it	ne
 8006f2c:	f04f 30ff 	movne.w	r0, #4294967295
}
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
 8006f32:	461a      	mov	r2, r3
 8006f34:	4909      	ldr	r1, [pc, #36]	; (8006f5c <parsep2+0xc0>)
 8006f36:	4428      	add	r0, r5
 8006f38:	f01d ffea 	bl	8024f10 <siscanf>
 8006f3c:	3801      	subs	r0, #1
 8006f3e:	bf18      	it	ne
 8006f40:	f04f 30ff 	movne.w	r0, #4294967295
}
 8006f44:	bd70      	pop	{r4, r5, r6, pc}
					pch[j] = 0;
 8006f46:	4413      	add	r3, r2
 8006f48:	4620      	mov	r0, r4
 8006f4a:	e7e5      	b.n	8006f18 <parsep2+0x7c>
					while ((buf[i]) && (isalnum(buf[i]))) {
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f50:	e7e2      	b.n	8006f18 <parsep2+0x7c>
 8006f52:	bf00      	nop
 8006f54:	08044f15 	.word	0x08044f15
 8006f58:	0802b418 	.word	0x0802b418
 8006f5c:	0802b41c 	.word	0x0802b41c

08006f60 <returnpage>:

 p2 operands (strings):-
 */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8006f60:	b570      	push	{r4, r5, r6, lr}
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8006f62:	4c57      	ldr	r4, [pc, #348]	; (80070c0 <returnpage+0x160>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8006f64:	b0a8      	sub	sp, #160	; 0xa0
 8006f66:	4696      	mov	lr, r2
 8006f68:	f88d 000f 	strb.w	r0, [sp, #15]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8006f6c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8006f70:	f88d 100e 	strb.w	r1, [sp, #14]
 8006f74:	f8ad 300c 	strh.w	r3, [sp, #12]
	volatile int p1;
	volatile char p2[96];
	volatile char filename[16];
	volatile uint32_t crc;

	if (errorm == 0) {
 8006f78:	f89d 500e 	ldrb.w	r5, [sp, #14]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8006f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	f8cc 3000 	str.w	r3, [ip]
	if (errorm == 0) {
 8006f88:	b10d      	cbz	r5, 8006f8e <returnpage+0x2e>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 8006f8a:	b028      	add	sp, #160	; 0xa0
 8006f8c:	bd70      	pop	{r4, r5, r6, pc}
		nconv = sscanf(content, "%5u%48s%u%s", &sn, udp_target, &p1, &p2);
 8006f8e:	a905      	add	r1, sp, #20
 8006f90:	ac10      	add	r4, sp, #64	; 0x40
 8006f92:	4b4c      	ldr	r3, [pc, #304]	; (80070c4 <returnpage+0x164>)
 8006f94:	aa04      	add	r2, sp, #16
 8006f96:	4670      	mov	r0, lr
 8006f98:	e9cd 1400 	strd	r1, r4, [sp]
 8006f9c:	494a      	ldr	r1, [pc, #296]	; (80070c8 <returnpage+0x168>)
 8006f9e:	f01d ffb7 	bl	8024f10 <siscanf>
		if (nconv != EOF) {
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	d030      	beq.n	8007008 <returnpage+0xa8>
			switch (nconv) {
 8006fa6:	1e43      	subs	r3, r0, #1
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	f200 8084 	bhi.w	80070b6 <returnpage+0x156>
 8006fae:	e8df f003 	tbb	[pc, r3]
 8006fb2:	0f18      	.short	0x0f18
 8006fb4:	0206      	.short	0x0206
				if (p2[0] == '{') {		// its the start of enclosed params
 8006fb6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8006fba:	2b7b      	cmp	r3, #123	; 0x7b
 8006fbc:	d03a      	beq.n	8007034 <returnpage+0xd4>
				if (p1 == 1) {		// reboot
 8006fbe:	9b05      	ldr	r3, [sp, #20]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d06d      	beq.n	80070a0 <returnpage+0x140>
				if (p1 == 2) {		// freeze the UDP streaming
 8006fc4:	9b05      	ldr	r3, [sp, #20]
 8006fc6:	2b02      	cmp	r3, #2
					globalfreeze = 1;
 8006fc8:	4b40      	ldr	r3, [pc, #256]	; (80070cc <returnpage+0x16c>)
				if (p1 == 2) {		// freeze the UDP streaming
 8006fca:	d063      	beq.n	8007094 <returnpage+0x134>
					globalfreeze = 0;
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
				if (strlen(udp_target) < 7) {					// bad url or ip address
 8006fd0:	483c      	ldr	r0, [pc, #240]	; (80070c4 <returnpage+0x164>)
 8006fd2:	f7f9 f93f 	bl	8000254 <strlen>
 8006fd6:	2806      	cmp	r0, #6
 8006fd8:	d925      	bls.n	8007026 <returnpage+0xc6>
				printf("Server -> Target UDP host: %s\n", udp_target);
 8006fda:	493a      	ldr	r1, [pc, #232]	; (80070c4 <returnpage+0x164>)
 8006fdc:	483c      	ldr	r0, [pc, #240]	; (80070d0 <returnpage+0x170>)
 8006fde:	f01d fd85 	bl	8024aec <iprintf>
				if (statuspkt.uid != sn) {
 8006fe2:	4a3c      	ldr	r2, [pc, #240]	; (80070d4 <returnpage+0x174>)
 8006fe4:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 8006fe8:	9904      	ldr	r1, [sp, #16]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	428b      	cmp	r3, r1
 8006fee:	d0cc      	beq.n	8006f8a <returnpage+0x2a>
					statuspkt.uid = sn;
 8006ff0:	9b04      	ldr	r3, [sp, #16]
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8006ff2:	4839      	ldr	r0, [pc, #228]	; (80070d8 <returnpage+0x178>)
					statuspkt.uid = sn;
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8006ffa:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8006ffe:	b289      	uxth	r1, r1
 8007000:	f01d fd74 	bl	8024aec <iprintf>
}
 8007004:	b028      	add	sp, #160	; 0xa0
 8007006:	bd70      	pop	{r4, r5, r6, pc}
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 8007008:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800700c:	ac28      	add	r4, sp, #160	; 0xa0
 800700e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8007012:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8007016:	4831      	ldr	r0, [pc, #196]	; (80070dc <returnpage+0x17c>)
 8007018:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800701c:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8007020:	f01d fd64 	bl	8024aec <iprintf>
}
 8007024:	e7b1      	b.n	8006f8a <returnpage+0x2a>
					strcpy(udp_target, SERVER_DESTINATION);		// default it
 8007026:	4d2e      	ldr	r5, [pc, #184]	; (80070e0 <returnpage+0x180>)
 8007028:	4c26      	ldr	r4, [pc, #152]	; (80070c4 <returnpage+0x164>)
 800702a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800702c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800702e:	682b      	ldr	r3, [r5, #0]
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	e7d2      	b.n	8006fda <returnpage+0x7a>
					res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007034:	4e2b      	ldr	r6, [pc, #172]	; (80070e4 <returnpage+0x184>)
					res |= parsep2(&p2[1], "fw", 1, filename);
 8007036:	2201      	movs	r2, #1
 8007038:	492b      	ldr	r1, [pc, #172]	; (80070e8 <returnpage+0x188>)
 800703a:	ab07      	add	r3, sp, #28
 800703c:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 8007040:	f7ff ff2c 	bl	8006e9c <parsep2>
					res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007044:	4633      	mov	r3, r6
					res |= parsep2(&p2[1], "fw", 1, filename);
 8007046:	4604      	mov	r4, r0
					res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007048:	2202      	movs	r2, #2
 800704a:	4928      	ldr	r1, [pc, #160]	; (80070ec <returnpage+0x18c>)
 800704c:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 8007050:	f7ff ff24 	bl	8006e9c <parsep2>
 8007054:	4605      	mov	r5, r0
					res |= parsep2(&p2[1], "crc", 3, &crc);
 8007056:	ab06      	add	r3, sp, #24
 8007058:	2203      	movs	r2, #3
					res |= parsep2(&p2[1], "bld", 2, &newbuild);
 800705a:	4325      	orrs	r5, r4
					res |= parsep2(&p2[1], "crc", 3, &crc);
 800705c:	4924      	ldr	r1, [pc, #144]	; (80070f0 <returnpage+0x190>)
 800705e:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 8007062:	f7ff ff1b 	bl	8006e9c <parsep2>
 8007066:	4305      	orrs	r5, r0
					printf("filename=%s, build=%d, crc=0x%08x, res=%d\n", filename, newbuild, crc, res);
 8007068:	9b06      	ldr	r3, [sp, #24]
 800706a:	a907      	add	r1, sp, #28
 800706c:	6832      	ldr	r2, [r6, #0]
 800706e:	4821      	ldr	r0, [pc, #132]	; (80070f4 <returnpage+0x194>)
 8007070:	9500      	str	r5, [sp, #0]
 8007072:	f01d fd3b 	bl	8024aec <iprintf>
					if (!(res)) {		// a valid firmware string recieved
 8007076:	2d00      	cmp	r5, #0
 8007078:	d1a1      	bne.n	8006fbe <returnpage+0x5e>
						if (newbuild != BUILDNO) {	// the version advertised is different to this one running now
 800707a:	6832      	ldr	r2, [r6, #0]
 800707c:	f242 712b 	movw	r1, #10027	; 0x272b
 8007080:	428a      	cmp	r2, r1
 8007082:	d09c      	beq.n	8006fbe <returnpage+0x5e>
							printf("**************** Firmware: this build=%d, latest server build=%d *****************\n",BUILDNO,newbuild);
 8007084:	481c      	ldr	r0, [pc, #112]	; (80070f8 <returnpage+0x198>)
 8007086:	f01d fd31 	bl	8024aec <iprintf>
							tftloader(filename,crc);
 800708a:	9906      	ldr	r1, [sp, #24]
 800708c:	a807      	add	r0, sp, #28
 800708e:	f000 fd29 	bl	8007ae4 <tftloader>
 8007092:	e794      	b.n	8006fbe <returnpage+0x5e>
					globalfreeze = 1;
 8007094:	2201      	movs	r2, #1
					printf("Server -> commands a streaming freeze\n");
 8007096:	4819      	ldr	r0, [pc, #100]	; (80070fc <returnpage+0x19c>)
					globalfreeze = 1;
 8007098:	601a      	str	r2, [r3, #0]
					printf("Server -> commands a streaming freeze\n");
 800709a:	f01d fdc3 	bl	8024c24 <puts>
 800709e:	e797      	b.n	8006fd0 <returnpage+0x70>
					printf("Server -> commands a reboot...\n");
 80070a0:	4817      	ldr	r0, [pc, #92]	; (8007100 <returnpage+0x1a0>)
 80070a2:	f01d fdbf 	bl	8024c24 <puts>
					osDelay(2000);
 80070a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80070aa:	f00d fdab 	bl	8014c04 <osDelay>
					rebootme(6);
 80070ae:	2006      	movs	r0, #6
 80070b0:	f7fb fa9a 	bl	80025e8 <rebootme>
 80070b4:	e786      	b.n	8006fc4 <returnpage+0x64>
				printf("Wrong number of params from Server -> %d\n", nconv);
 80070b6:	4601      	mov	r1, r0
 80070b8:	4812      	ldr	r0, [pc, #72]	; (8007104 <returnpage+0x1a4>)
 80070ba:	f01d fd17 	bl	8024aec <iprintf>
				break;
 80070be:	e764      	b.n	8006f8a <returnpage+0x2a>
 80070c0:	08028d14 	.word	0x08028d14
 80070c4:	20002e10 	.word	0x20002e10
 80070c8:	0802b420 	.word	0x0802b420
 80070cc:	20002da4 	.word	0x20002da4
 80070d0:	0802b514 	.word	0x0802b514
 80070d4:	20002bfc 	.word	0x20002bfc
 80070d8:	0802b534 	.word	0x0802b534
 80070dc:	0802b580 	.word	0x0802b580
 80070e0:	0802b500 	.word	0x0802b500
 80070e4:	20002a04 	.word	0x20002a04
 80070e8:	0802b42c 	.word	0x0802b42c
 80070ec:	0802b430 	.word	0x0802b430
 80070f0:	0802b434 	.word	0x0802b434
 80070f4:	0802b438 	.word	0x0802b438
 80070f8:	0802b464 	.word	0x0802b464
 80070fc:	0802b4d8 	.word	0x0802b4d8
 8007100:	0802b4b8 	.word	0x0802b4b8
 8007104:	0802b554 	.word	0x0802b554

08007108 <httpclient>:

void httpclient(char Page[64]) {
 8007108:	b530      	push	{r4, r5, lr}
	uint32_t ip;
	int err;

	static char *Postvars = NULL;

	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 800710a:	4911      	ldr	r1, [pc, #68]	; (8007150 <httpclient+0x48>)
void httpclient(char Page[64]) {
 800710c:	b085      	sub	sp, #20
 800710e:	4604      	mov	r4, r0
	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 8007110:	4810      	ldr	r0, [pc, #64]	; (8007154 <httpclient+0x4c>)
 8007112:	f7ff fb2b 	bl	800676c <dnslookup>
	if (err != ERR_OK)
 8007116:	b9b0      	cbnz	r0, 8007146 <httpclient+0x3e>
		rebootme(7);
	ip = remoteip.addr;
 8007118:	4d0d      	ldr	r5, [pc, #52]	; (8007150 <httpclient+0x48>)
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 800711a:	480f      	ldr	r0, [pc, #60]	; (8007158 <httpclient+0x50>)
	ip = remoteip.addr;
 800711c:	682a      	ldr	r2, [r5, #0]
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 800711e:	0e11      	lsrs	r1, r2, #24
 8007120:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8007124:	e9cd 3100 	strd	r3, r1, [sp]
 8007128:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800712c:	4909      	ldr	r1, [pc, #36]	; (8007154 <httpclient+0x4c>)
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	f01d fcdc 	bl	8024aec <iprintf>
			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);

	result = hc_open(remoteip, Page, Postvars, returnpage);
 8007134:	4b09      	ldr	r3, [pc, #36]	; (800715c <httpclient+0x54>)
 8007136:	2200      	movs	r2, #0
 8007138:	4621      	mov	r1, r4
 800713a:	6828      	ldr	r0, [r5, #0]
 800713c:	f7f9 ffba 	bl	80010b4 <hc_open>
 8007140:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 8007142:	b005      	add	sp, #20
 8007144:	bd30      	pop	{r4, r5, pc}
		rebootme(7);
 8007146:	2007      	movs	r0, #7
 8007148:	f7fb fa4e 	bl	80025e8 <rebootme>
 800714c:	e7e4      	b.n	8007118 <httpclient+0x10>
 800714e:	bf00      	nop
 8007150:	20002dcc 	.word	0x20002dcc
 8007154:	0802b500 	.word	0x0802b500
 8007158:	0802b5bc 	.word	0x0802b5bc
 800715c:	08006f61 	.word	0x08006f61

08007160 <initialapisn>:
	httpclient(stmuid);		// get sn and targ
}

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8007160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int i;

	i = 1;
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8007164:	4e27      	ldr	r6, [pc, #156]	; (8007204 <initialapisn+0xa4>)
 8007166:	f242 722b 	movw	r2, #10027	; 0x272b
void initialapisn() {
 800716a:	b083      	sub	sp, #12
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 800716c:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
 8007170:	b29b      	uxth	r3, r3
 8007172:	4293      	cmp	r3, r2
 8007174:	d142      	bne.n	80071fc <initialapisn+0x9c>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8007176:	4d24      	ldr	r5, [pc, #144]	; (8007208 <initialapisn+0xa8>)
	{
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8007178:	2101      	movs	r1, #1
 800717a:	4824      	ldr	r0, [pc, #144]	; (800720c <initialapisn+0xac>)
		apisn();
		osDelay(5000);

		i++;
 800717c:	2402      	movs	r4, #2
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 800717e:	f01d fcb5 	bl	8024aec <iprintf>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8007182:	f8d5 1428 	ldr.w	r1, [r5, #1064]	; 0x428
 8007186:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 800718a:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 800718e:	4820      	ldr	r0, [pc, #128]	; (8007210 <initialapisn+0xb0>)
 8007190:	9100      	str	r1, [sp, #0]
 8007192:	4920      	ldr	r1, [pc, #128]	; (8007214 <initialapisn+0xb4>)
 8007194:	f01d fe9c 	bl	8024ed0 <siprintf>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8007198:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800720c <initialapisn+0xac>
	httpclient(stmuid);		// get sn and targ
 800719c:	481c      	ldr	r0, [pc, #112]	; (8007210 <initialapisn+0xb0>)
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 800719e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8007214 <initialapisn+0xb4>
	httpclient(stmuid);		// get sn and targ
 80071a2:	f7ff ffb1 	bl	8007108 <httpclient>
		osDelay(5000);
 80071a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80071aa:	f00d fd2b 	bl	8014c04 <osDelay>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80071ae:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
 80071b2:	f242 722b 	movw	r2, #10027	; 0x272b
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80071b6:	4621      	mov	r1, r4
 80071b8:	4648      	mov	r0, r9
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80071ba:	b29b      	uxth	r3, r3
		i++;
 80071bc:	3401      	adds	r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80071be:	4293      	cmp	r3, r2
 80071c0:	d11c      	bne.n	80071fc <initialapisn+0x9c>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80071c2:	f01d fc93 	bl	8024aec <iprintf>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 80071c6:	f8d5 7428 	ldr.w	r7, [r5, #1064]	; 0x428
 80071ca:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 80071ce:	4641      	mov	r1, r8
 80071d0:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 80071d4:	480e      	ldr	r0, [pc, #56]	; (8007210 <initialapisn+0xb0>)
 80071d6:	9700      	str	r7, [sp, #0]
 80071d8:	f01d fe7a 	bl	8024ed0 <siprintf>
	httpclient(stmuid);		// get sn and targ
 80071dc:	480c      	ldr	r0, [pc, #48]	; (8007210 <initialapisn+0xb0>)
 80071de:	f7ff ff93 	bl	8007108 <httpclient>
		osDelay(5000);
 80071e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80071e6:	f00d fd0d 	bl	8014c04 <osDelay>
		if (i > 10) {
 80071ea:	2c0a      	cmp	r4, #10
 80071ec:	dddf      	ble.n	80071ae <initialapisn+0x4e>
			printf("************* ABORTED **************\n");
 80071ee:	480a      	ldr	r0, [pc, #40]	; (8007218 <initialapisn+0xb8>)
 80071f0:	f01d fd18 	bl	8024c24 <puts>
			rebootme(8);
 80071f4:	2008      	movs	r0, #8
 80071f6:	f7fb f9f7 	bl	80025e8 <rebootme>
 80071fa:	e7d8      	b.n	80071ae <initialapisn+0x4e>
		}
	}
}
 80071fc:	b003      	add	sp, #12
 80071fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007202:	bf00      	nop
 8007204:	20002bfc 	.word	0x20002bfc
 8007208:	1ff0f000 	.word	0x1ff0f000
 800720c:	0802b5fc 	.word	0x0802b5fc
 8007210:	20002dd0 	.word	0x20002dd0
 8007214:	0802b5e4 	.word	0x0802b5e4
 8007218:	0802b62c 	.word	0x0802b62c

0800721c <requestapisn>:

void requestapisn() {
 800721c:	b508      	push	{r3, lr}
	printf("updating S/N and UDP target using http\n");
 800721e:	4804      	ldr	r0, [pc, #16]	; (8007230 <requestapisn+0x14>)
 8007220:	f01d fd00 	bl	8024c24 <puts>
	httpclient(stmuid);		// get sn and targ
 8007224:	4803      	ldr	r0, [pc, #12]	; (8007234 <requestapisn+0x18>)
}
 8007226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	httpclient(stmuid);		// get sn and targ
 800722a:	f7ff bf6d 	b.w	8007108 <httpclient>
 800722e:	bf00      	nop
 8007230:	0802b654 	.word	0x0802b654
 8007234:	20002dd0 	.word	0x20002dd0

08007238 <close_handle>:

static void tftp_tmr(void *arg);

static void
close_handle(void)
{
 8007238:	b538      	push	{r3, r4, r5, lr}
  tftp_state.port = 0;
 800723a:	4c0a      	ldr	r4, [pc, #40]	; (8007264 <close_handle+0x2c>)
 800723c:	2500      	movs	r5, #0
  ip_addr_set_any(0, &tftp_state.addr);

  if (tftp_state.last_data != NULL) {
 800723e:	68a0      	ldr	r0, [r4, #8]
  tftp_state.port = 0;
 8007240:	82a5      	strh	r5, [r4, #20]
  ip_addr_set_any(0, &tftp_state.addr);
 8007242:	6125      	str	r5, [r4, #16]
  if (tftp_state.last_data != NULL) {
 8007244:	b110      	cbz	r0, 800724c <close_handle+0x14>
    pbuf_free(tftp_state.last_data);
 8007246:	f013 fb97 	bl	801a978 <pbuf_free>
    tftp_state.last_data = NULL;
 800724a:	60a5      	str	r5, [r4, #8]
  }

  sys_untimeout(tftp_tmr, NULL);
 800724c:	4806      	ldr	r0, [pc, #24]	; (8007268 <close_handle+0x30>)
 800724e:	2100      	movs	r1, #0
 8007250:	f018 f8d2 	bl	801f3f8 <sys_untimeout>

  if (tftp_state.handle) {
 8007254:	6860      	ldr	r0, [r4, #4]
 8007256:	b120      	cbz	r0, 8007262 <close_handle+0x2a>
    tftp_state.ctx->close(tftp_state.handle);
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	4798      	blx	r3
    tftp_state.handle = NULL;
 800725e:	2300      	movs	r3, #0
 8007260:	6063      	str	r3, [r4, #4]
    LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: closing\n"));
  }
}
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	20002e50 	.word	0x20002e50
 8007268:	08007341 	.word	0x08007341

0800726c <send_request>:
  return p;
}

static err_t
send_request(const ip_addr_t *addr, u16_t port, u16_t opcode, const char* fname, const char* mode)
{
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	4680      	mov	r8, r0
 8007272:	b083      	sub	sp, #12
  size_t fname_length = strlen(fname)+1;
 8007274:	4618      	mov	r0, r3
{
 8007276:	4689      	mov	r9, r1
 8007278:	4616      	mov	r6, r2
 800727a:	469a      	mov	sl, r3
  size_t fname_length = strlen(fname)+1;
 800727c:	f7f8 ffea 	bl	8000254 <strlen>
 8007280:	4605      	mov	r5, r0
  size_t mode_length = strlen(mode)+1;
 8007282:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007284:	f7f8 ffe6 	bl	8000254 <strlen>
  size_t fname_length = strlen(fname)+1;
 8007288:	f105 0b01 	add.w	fp, r5, #1
  size_t mode_length = strlen(mode)+1;
 800728c:	1c47      	adds	r7, r0, #1
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 800728e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007292:	2036      	movs	r0, #54	; 0x36
  struct pbuf* p = init_packet(opcode, 0, fname_length + mode_length - 2);
 8007294:	eb0b 0107 	add.w	r1, fp, r7
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 8007298:	3102      	adds	r1, #2
 800729a:	b289      	uxth	r1, r1
 800729c:	f013 f9b6 	bl	801a60c <pbuf_alloc>
  if (p != NULL) {
 80072a0:	b328      	cbz	r0, 80072ee <send_request+0x82>
    payload = (u16_t*) p->payload;
 80072a2:	6842      	ldr	r2, [r0, #4]
    payload[0] = PP_HTONS(opcode);
 80072a4:	0236      	lsls	r6, r6, #8
 80072a6:	4604      	mov	r4, r0
    payload[1] = lwip_htons(extra);
 80072a8:	2000      	movs	r0, #0
    payload[0] = PP_HTONS(opcode);
 80072aa:	8016      	strh	r6, [r2, #0]
 80072ac:	9201      	str	r2, [sp, #4]
    payload[1] = lwip_htons(extra);
 80072ae:	f011 fb43 	bl	8018938 <lwip_htons>

  if (p == NULL) {
    return ERR_MEM;
  }

  payload = (char*) p->payload;
 80072b2:	6866      	ldr	r6, [r4, #4]
  MEMCPY(payload+2,              fname, fname_length);
 80072b4:	4651      	mov	r1, sl
    payload[1] = lwip_htons(extra);
 80072b6:	9a01      	ldr	r2, [sp, #4]
 80072b8:	8050      	strh	r0, [r2, #2]
  MEMCPY(payload+2,              fname, fname_length);
 80072ba:	465a      	mov	r2, fp
 80072bc:	1cb0      	adds	r0, r6, #2
 80072be:	f01c fc51 	bl	8023b64 <memcpy>
  MEMCPY(payload+2+fname_length, mode,  mode_length);
 80072c2:	1ce8      	adds	r0, r5, #3
 80072c4:	463a      	mov	r2, r7
 80072c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072c8:	4430      	add	r0, r6
 80072ca:	f01c fc4b 	bl	8023b64 <memcpy>

  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 80072ce:	480b      	ldr	r0, [pc, #44]	; (80072fc <send_request+0x90>)
 80072d0:	4621      	mov	r1, r4
 80072d2:	464b      	mov	r3, r9
 80072d4:	4642      	mov	r2, r8
 80072d6:	68c0      	ldr	r0, [r0, #12]
 80072d8:	f018 fb74 	bl	801f9c4 <udp_sendto>
 80072dc:	4603      	mov	r3, r0
  pbuf_free(p);
 80072de:	4620      	mov	r0, r4
  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 80072e0:	461c      	mov	r4, r3
  pbuf_free(p);
 80072e2:	f013 fb49 	bl	801a978 <pbuf_free>
  return ret;
}
 80072e6:	4620      	mov	r0, r4
 80072e8:	b003      	add	sp, #12
 80072ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_MEM;
 80072ee:	f04f 34ff 	mov.w	r4, #4294967295
}
 80072f2:	4620      	mov	r0, r4
 80072f4:	b003      	add	sp, #12
 80072f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fa:	bf00      	nop
 80072fc:	20002e50 	.word	0x20002e50

08007300 <resend_data.isra.0>:
  pbuf_free(p);
  return ret;
}

static err_t
resend_data(const ip_addr_t *addr, u16_t port)
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
  err_t ret;
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 8007302:	4f0e      	ldr	r7, [pc, #56]	; (800733c <resend_data.isra.0+0x3c>)
resend_data(const ip_addr_t *addr, u16_t port)
 8007304:	4605      	mov	r5, r0
 8007306:	460e      	mov	r6, r1
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 8007308:	f44f 7220 	mov.w	r2, #640	; 0x280
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2036      	movs	r0, #54	; 0x36
 8007310:	8959      	ldrh	r1, [r3, #10]
 8007312:	f013 f97b 	bl	801a60c <pbuf_alloc>
  if (p == NULL) {
 8007316:	b178      	cbz	r0, 8007338 <resend_data.isra.0+0x38>
    return ERR_MEM;
  }

  ret = pbuf_copy(p, tftp_state.last_data);
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	4604      	mov	r4, r0
 800731c:	f013 fbb4 	bl	801aa88 <pbuf_copy>
  if (ret != ERR_OK) {
 8007320:	b928      	cbnz	r0, 800732e <resend_data.isra.0+0x2e>
    pbuf_free(p);
    return ret;
  }

  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 8007322:	4633      	mov	r3, r6
 8007324:	462a      	mov	r2, r5
 8007326:	4621      	mov	r1, r4
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f018 fb4b 	bl	801f9c4 <udp_sendto>
  pbuf_free(p);
 800732e:	4620      	mov	r0, r4
  return ret;
}
 8007330:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbuf_free(p);
 8007334:	f013 bb20 	b.w	801a978 <pbuf_free>
}
 8007338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800733a:	bf00      	nop
 800733c:	20002e50 	.word	0x20002e50

08007340 <tftp_tmr>:
  pbuf_free(p);
}

static void
tftp_tmr(void *arg)
{
 8007340:	b510      	push	{r4, lr}
  LWIP_UNUSED_ARG(arg);

  tftp_state.timer++;
 8007342:	4c13      	ldr	r4, [pc, #76]	; (8007390 <tftp_tmr+0x50>)
 8007344:	69a3      	ldr	r3, [r4, #24]

  if (tftp_state.handle == NULL) {
 8007346:	6862      	ldr	r2, [r4, #4]
  tftp_state.timer++;
 8007348:	3301      	adds	r3, #1
 800734a:	61a3      	str	r3, [r4, #24]
  if (tftp_state.handle == NULL) {
 800734c:	b1f2      	cbz	r2, 800738c <tftp_tmr+0x4c>
    return;
  }

  sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 800734e:	2200      	movs	r2, #0
 8007350:	4910      	ldr	r1, [pc, #64]	; (8007394 <tftp_tmr+0x54>)
 8007352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007356:	f018 f831 	bl	801f3bc <sys_timeout>

  if ((tftp_state.timer - tftp_state.last_pkt) > (TFTP_TIMEOUT_MSECS / TFTP_TIMER_MSECS)) {
 800735a:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	2b0a      	cmp	r3, #10
 8007362:	dd13      	ble.n	800738c <tftp_tmr+0x4c>
    if ((tftp_state.last_data != NULL) && (tftp_state.retries < TFTP_MAX_RETRIES)) {
 8007364:	68a3      	ldr	r3, [r4, #8]
 8007366:	b11b      	cbz	r3, 8007370 <tftp_tmr+0x30>
 8007368:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800736c:	2b04      	cmp	r3, #4
 800736e:	d903      	bls.n	8007378 <tftp_tmr+0x38>
    } else {
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout\n"));
      close_handle();
    }
  }
}
 8007370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      close_handle();
 8007374:	f7ff bf60 	b.w	8007238 <close_handle>
      resend_data(&tftp_state.addr, tftp_state.port);
 8007378:	8aa1      	ldrh	r1, [r4, #20]
 800737a:	f104 0010 	add.w	r0, r4, #16
 800737e:	f7ff ffbf 	bl	8007300 <resend_data.isra.0>
      tftp_state.retries++;
 8007382:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007386:	3301      	adds	r3, #1
 8007388:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 800738c:	bd10      	pop	{r4, pc}
 800738e:	bf00      	nop
 8007390:	20002e50 	.word	0x20002e50
 8007394:	08007341 	.word	0x08007341

08007398 <send_ack.isra.0>:
send_ack(const ip_addr_t *addr, u16_t port, u16_t blknum)
 8007398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739c:	460f      	mov	r7, r1
 800739e:	4615      	mov	r5, r2
 80073a0:	4680      	mov	r8, r0
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 80073a2:	2104      	movs	r1, #4
 80073a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80073a8:	2036      	movs	r0, #54	; 0x36
 80073aa:	f013 f92f 	bl	801a60c <pbuf_alloc>
  if (p != NULL) {
 80073ae:	b1a0      	cbz	r0, 80073da <send_ack.isra.0+0x42>
    payload = (u16_t*) p->payload;
 80073b0:	6846      	ldr	r6, [r0, #4]
    payload[0] = PP_HTONS(opcode);
 80073b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b6:	4604      	mov	r4, r0
    payload[1] = lwip_htons(extra);
 80073b8:	4628      	mov	r0, r5
    payload[0] = PP_HTONS(opcode);
 80073ba:	8033      	strh	r3, [r6, #0]
    payload[1] = lwip_htons(extra);
 80073bc:	f011 fabc 	bl	8018938 <lwip_htons>
 80073c0:	8070      	strh	r0, [r6, #2]
  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 80073c2:	4807      	ldr	r0, [pc, #28]	; (80073e0 <send_ack.isra.0+0x48>)
 80073c4:	463b      	mov	r3, r7
 80073c6:	4642      	mov	r2, r8
 80073c8:	4621      	mov	r1, r4
 80073ca:	68c0      	ldr	r0, [r0, #12]
 80073cc:	f018 fafa 	bl	801f9c4 <udp_sendto>
  pbuf_free(p);
 80073d0:	4620      	mov	r0, r4
}
 80073d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  pbuf_free(p);
 80073d6:	f013 bacf 	b.w	801a978 <pbuf_free>
}
 80073da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073de:	bf00      	nop
 80073e0:	20002e50 	.word	0x20002e50

080073e4 <send_error.isra.0>:
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
 80073e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e8:	4606      	mov	r6, r0
  int str_length = strlen(str);
 80073ea:	4618      	mov	r0, r3
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
 80073ec:	460f      	mov	r7, r1
 80073ee:	4690      	mov	r8, r2
 80073f0:	461d      	mov	r5, r3
  int str_length = strlen(str);
 80073f2:	f7f8 ff2f 	bl	8000254 <strlen>
 80073f6:	4604      	mov	r4, r0
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 80073f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80073fc:	2036      	movs	r0, #54	; 0x36
 80073fe:	1d61      	adds	r1, r4, #5
 8007400:	b289      	uxth	r1, r1
 8007402:	f013 f903 	bl	801a60c <pbuf_alloc>
  if (p != NULL) {
 8007406:	b308      	cbz	r0, 800744c <send_error.isra.0+0x68>
    payload = (u16_t*) p->payload;
 8007408:	f104 0901 	add.w	r9, r4, #1
 800740c:	fa1f f888 	uxth.w	r8, r8
 8007410:	4604      	mov	r4, r0
    payload[0] = PP_HTONS(opcode);
 8007412:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    payload[1] = lwip_htons(extra);
 8007416:	4640      	mov	r0, r8
    payload = (u16_t*) p->payload;
 8007418:	f8d4 8004 	ldr.w	r8, [r4, #4]
    payload[0] = PP_HTONS(opcode);
 800741c:	f8a8 3000 	strh.w	r3, [r8]
    payload[1] = lwip_htons(extra);
 8007420:	f011 fa8a 	bl	8018938 <lwip_htons>
 8007424:	f8a8 0002 	strh.w	r0, [r8, #2]
  MEMCPY(&payload[2], str, str_length + 1);
 8007428:	6860      	ldr	r0, [r4, #4]
 800742a:	464a      	mov	r2, r9
 800742c:	4629      	mov	r1, r5
 800742e:	3004      	adds	r0, #4
 8007430:	f01c fb98 	bl	8023b64 <memcpy>
  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 8007434:	4806      	ldr	r0, [pc, #24]	; (8007450 <send_error.isra.0+0x6c>)
 8007436:	463b      	mov	r3, r7
 8007438:	4632      	mov	r2, r6
 800743a:	4621      	mov	r1, r4
 800743c:	68c0      	ldr	r0, [r0, #12]
 800743e:	f018 fac1 	bl	801f9c4 <udp_sendto>
  pbuf_free(p);
 8007442:	4620      	mov	r0, r4
}
 8007444:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8007448:	f013 ba96 	b.w	801a978 <pbuf_free>
}
 800744c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007450:	20002e50 	.word	0x20002e50

08007454 <send_data>:
{
 8007454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (tftp_state.last_data != NULL) {
 8007458:	4d20      	ldr	r5, [pc, #128]	; (80074dc <send_data+0x88>)
{
 800745a:	4606      	mov	r6, r0
 800745c:	460f      	mov	r7, r1
  if (tftp_state.last_data != NULL) {
 800745e:	68ab      	ldr	r3, [r5, #8]
 8007460:	b113      	cbz	r3, 8007468 <send_data+0x14>
    pbuf_free(tftp_state.last_data);
 8007462:	4618      	mov	r0, r3
 8007464:	f013 fa88 	bl	801a978 <pbuf_free>
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 8007468:	f44f 7220 	mov.w	r2, #640	; 0x280
 800746c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007470:	2036      	movs	r0, #54	; 0x36
  tftp_state.last_data = init_packet(TFTP_DATA, tftp_state.blknum, TFTP_MAX_PAYLOAD_SIZE);
 8007472:	f8b5 8020 	ldrh.w	r8, [r5, #32]
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 8007476:	f013 f8c9 	bl	801a60c <pbuf_alloc>
  if (p != NULL) {
 800747a:	4604      	mov	r4, r0
 800747c:	b350      	cbz	r0, 80074d4 <send_data+0x80>
    payload[0] = PP_HTONS(opcode);
 800747e:	f44f 7340 	mov.w	r3, #768	; 0x300
    payload[1] = lwip_htons(extra);
 8007482:	4640      	mov	r0, r8
    payload = (u16_t*) p->payload;
 8007484:	f8d4 8004 	ldr.w	r8, [r4, #4]
    payload[0] = PP_HTONS(opcode);
 8007488:	f8a8 3000 	strh.w	r3, [r8]
    payload[1] = lwip_htons(extra);
 800748c:	f011 fa54 	bl	8018938 <lwip_htons>
  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 8007490:	6861      	ldr	r1, [r4, #4]
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	f44f 7200 	mov.w	r2, #512	; 0x200
    payload[1] = lwip_htons(extra);
 8007498:	f8a8 0002 	strh.w	r0, [r8, #2]
  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 800749c:	3104      	adds	r1, #4
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	6868      	ldr	r0, [r5, #4]
  tftp_state.last_data = init_packet(TFTP_DATA, tftp_state.blknum, TFTP_MAX_PAYLOAD_SIZE);
 80074a2:	60ac      	str	r4, [r5, #8]
  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 80074a4:	4798      	blx	r3
  if (ret < 0) {
 80074a6:	1e03      	subs	r3, r0, #0
 80074a8:	db0a      	blt.n	80074c0 <send_data+0x6c>
  pbuf_realloc(tftp_state.last_data, (u16_t)(TFTP_HEADER_LENGTH + ret));
 80074aa:	3304      	adds	r3, #4
 80074ac:	68a8      	ldr	r0, [r5, #8]
 80074ae:	b299      	uxth	r1, r3
 80074b0:	f013 f966 	bl	801a780 <pbuf_realloc>
  resend_data(addr, port);
 80074b4:	4639      	mov	r1, r7
 80074b6:	4630      	mov	r0, r6
}
 80074b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  resend_data(addr, port);
 80074bc:	f7ff bf20 	b.w	8007300 <resend_data.isra.0>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Error occured while reading the file.");
 80074c0:	4639      	mov	r1, r7
 80074c2:	4630      	mov	r0, r6
 80074c4:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <send_data+0x8c>)
 80074c6:	2202      	movs	r2, #2
 80074c8:	f7ff ff8c 	bl	80073e4 <send_error.isra.0>
}
 80074cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    close_handle();
 80074d0:	f7ff beb2 	b.w	8007238 <close_handle>
  tftp_state.last_data = init_packet(TFTP_DATA, tftp_state.blknum, TFTP_MAX_PAYLOAD_SIZE);
 80074d4:	60a8      	str	r0, [r5, #8]
}
 80074d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074da:	bf00      	nop
 80074dc:	20002e50 	.word	0x20002e50
 80074e0:	0802b67c 	.word	0x0802b67c

080074e4 <tftp_recv>:
{
 80074e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 80074e8:	4c9b      	ldr	r4, [pc, #620]	; (8007758 <tftp_recv+0x274>)
{
 80074ea:	b08c      	sub	sp, #48	; 0x30
 80074ec:	4615      	mov	r5, r2
 80074ee:	461e      	mov	r6, r3
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 80074f0:	8aa1      	ldrh	r1, [r4, #20]
{
 80074f2:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 80074f6:	b109      	cbz	r1, 80074fc <tftp_recv+0x18>
 80074f8:	4541      	cmp	r1, r8
 80074fa:	d104      	bne.n	8007506 <tftp_recv+0x22>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 80074fc:	6923      	ldr	r3, [r4, #16]
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 80074fe:	b173      	cbz	r3, 800751e <tftp_recv+0x3a>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 8007500:	6832      	ldr	r2, [r6, #0]
 8007502:	4293      	cmp	r3, r2
 8007504:	d00b      	beq.n	800751e <tftp_recv+0x3a>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 8007506:	4b95      	ldr	r3, [pc, #596]	; (800775c <tftp_recv+0x278>)
 8007508:	2202      	movs	r2, #2
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 800750a:	4641      	mov	r1, r8
 800750c:	4630      	mov	r0, r6
 800750e:	f7ff ff69 	bl	80073e4 <send_error.isra.0>
  pbuf_free(p);
 8007512:	4628      	mov	r0, r5
}
 8007514:	b00c      	add	sp, #48	; 0x30
 8007516:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 800751a:	f013 ba2d 	b.w	801a978 <pbuf_free>
  u16_t *sbuf = (u16_t *) p->payload;
 800751e:	f8d5 9004 	ldr.w	r9, [r5, #4]
  tftp_state.retries = 0;
 8007522:	2300      	movs	r3, #0
  tftp_state.last_pkt = tftp_state.timer;
 8007524:	69a2      	ldr	r2, [r4, #24]
  opcode = sbuf[0];
 8007526:	f8b9 7000 	ldrh.w	r7, [r9]
  tftp_state.last_pkt = tftp_state.timer;
 800752a:	61e2      	str	r2, [r4, #28]
  switch (opcode) {
 800752c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
  tftp_state.retries = 0;
 8007530:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  switch (opcode) {
 8007534:	d03f      	beq.n	80075b6 <tftp_recv+0xd2>
 8007536:	d818      	bhi.n	800756a <tftp_recv+0x86>
 8007538:	f5b7 7f40 	cmp.w	r7, #768	; 0x300
 800753c:	d02d      	beq.n	800759a <tftp_recv+0xb6>
 800753e:	d829      	bhi.n	8007594 <tftp_recv+0xb0>
 8007540:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8007544:	d002      	beq.n	800754c <tftp_recv+0x68>
 8007546:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800754a:	d123      	bne.n	8007594 <tftp_recv+0xb0>
      const char tftp_null = 0;
 800754c:	2300      	movs	r3, #0
      if (tftp_state.handle != NULL) {
 800754e:	f8d4 9004 	ldr.w	r9, [r4, #4]
      const char tftp_null = 0;
 8007552:	f88d 300b 	strb.w	r3, [sp, #11]
      if (tftp_state.handle != NULL) {
 8007556:	f1b9 0f00 	cmp.w	r9, #0
 800755a:	d046      	beq.n	80075ea <tftp_recv+0x106>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 800755c:	4b7f      	ldr	r3, [pc, #508]	; (800775c <tftp_recv+0x278>)
 800755e:	2202      	movs	r2, #2
 8007560:	4641      	mov	r1, r8
 8007562:	4630      	mov	r0, r6
 8007564:	f7ff ff3e 	bl	80073e4 <send_error.isra.0>
        break;
 8007568:	e7d3      	b.n	8007512 <tftp_recv+0x2e>
  switch (opcode) {
 800756a:	f5b7 6fa0 	cmp.w	r7, #1280	; 0x500
 800756e:	d111      	bne.n	8007594 <tftp_recv+0xb0>
      if (tftp_state.handle != NULL) {
 8007570:	6863      	ldr	r3, [r4, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0cd      	beq.n	8007512 <tftp_recv+0x2e>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 8007576:	2104      	movs	r1, #4
 8007578:	4628      	mov	r0, r5
 800757a:	f013 f98d 	bl	801a898 <pbuf_remove_header>
        tftp_state.ctx->error(tftp_state.handle, sbuf[1], (const char*)p->payload, p->len);
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	6860      	ldr	r0, [r4, #4]
 8007582:	896b      	ldrh	r3, [r5, #10]
 8007584:	6914      	ldr	r4, [r2, #16]
 8007586:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 800758a:	686a      	ldr	r2, [r5, #4]
 800758c:	47a0      	blx	r4
        close_handle();
 800758e:	f7ff fe53 	bl	8007238 <close_handle>
 8007592:	e7be      	b.n	8007512 <tftp_recv+0x2e>
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 8007594:	4b72      	ldr	r3, [pc, #456]	; (8007760 <tftp_recv+0x27c>)
 8007596:	2204      	movs	r2, #4
 8007598:	e7b7      	b.n	800750a <tftp_recv+0x26>
      if (tftp_state.handle == NULL) {
 800759a:	6863      	ldr	r3, [r4, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d056      	beq.n	800764e <tftp_recv+0x16a>
      if (tftp_state.mode_write != 1) {
 80075a0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d059      	beq.n	800765c <tftp_recv+0x178>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a write connection");
 80075a8:	4b6e      	ldr	r3, [pc, #440]	; (8007764 <tftp_recv+0x280>)
 80075aa:	2202      	movs	r2, #2
 80075ac:	4641      	mov	r1, r8
 80075ae:	4630      	mov	r0, r6
 80075b0:	f7ff ff18 	bl	80073e4 <send_error.isra.0>
        break;
 80075b4:	e7ad      	b.n	8007512 <tftp_recv+0x2e>
      if (tftp_state.handle == NULL) {
 80075b6:	6863      	ldr	r3, [r4, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d048      	beq.n	800764e <tftp_recv+0x16a>
      if (tftp_state.mode_write != 0) {
 80075bc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80075c0:	bb83      	cbnz	r3, 8007624 <tftp_recv+0x140>
      blknum = lwip_ntohs(sbuf[1]);
 80075c2:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 80075c6:	f011 f9b7 	bl	8018938 <lwip_htons>
      if (blknum != tftp_state.blknum) {
 80075ca:	8c23      	ldrh	r3, [r4, #32]
 80075cc:	4283      	cmp	r3, r0
 80075ce:	d137      	bne.n	8007640 <tftp_recv+0x15c>
      if (tftp_state.last_data != NULL) {
 80075d0:	68a2      	ldr	r2, [r4, #8]
 80075d2:	b11a      	cbz	r2, 80075dc <tftp_recv+0xf8>
      if (!lastpkt) {
 80075d4:	8912      	ldrh	r2, [r2, #8]
 80075d6:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
 80075da:	d1d8      	bne.n	800758e <tftp_recv+0xaa>
        tftp_state.blknum++;
 80075dc:	3301      	adds	r3, #1
        send_data(addr, port);
 80075de:	4641      	mov	r1, r8
 80075e0:	4630      	mov	r0, r6
        tftp_state.blknum++;
 80075e2:	8423      	strh	r3, [r4, #32]
        send_data(addr, port);
 80075e4:	f7ff ff36 	bl	8007454 <send_data>
 80075e8:	e793      	b.n	8007512 <tftp_recv+0x2e>
      if ((tftp_state.tftp_mode & LWIP_TFTP_MODE_SERVER) == 0) {
 80075ea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80075ee:	07db      	lsls	r3, r3, #31
 80075f0:	d51f      	bpl.n	8007632 <tftp_recv+0x14e>
      sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 80075f2:	464a      	mov	r2, r9
 80075f4:	495c      	ldr	r1, [pc, #368]	; (8007768 <tftp_recv+0x284>)
 80075f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075fa:	f017 fedf 	bl	801f3bc <sys_timeout>
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 80075fe:	2201      	movs	r2, #1
 8007600:	2302      	movs	r3, #2
 8007602:	f10d 010b 	add.w	r1, sp, #11
 8007606:	4628      	mov	r0, r5
 8007608:	f013 fbc8 	bl	801ad9c <pbuf_memfind>
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 800760c:	1e42      	subs	r2, r0, #1
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 800760e:	4682      	mov	sl, r0
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 8007610:	b292      	uxth	r2, r2
 8007612:	2a15      	cmp	r2, #21
 8007614:	d933      	bls.n	800767e <tftp_recv+0x19a>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Filename too long/not NULL terminated");
 8007616:	4b55      	ldr	r3, [pc, #340]	; (800776c <tftp_recv+0x288>)
 8007618:	2202      	movs	r2, #2
 800761a:	4641      	mov	r1, r8
 800761c:	4630      	mov	r0, r6
 800761e:	f7ff fee1 	bl	80073e4 <send_error.isra.0>
        break;
 8007622:	e776      	b.n	8007512 <tftp_recv+0x2e>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a read connection");
 8007624:	4b52      	ldr	r3, [pc, #328]	; (8007770 <tftp_recv+0x28c>)
 8007626:	2202      	movs	r2, #2
 8007628:	4641      	mov	r1, r8
 800762a:	4630      	mov	r0, r6
 800762c:	f7ff feda 	bl	80073e4 <send_error.isra.0>
        break;
 8007630:	e76f      	b.n	8007512 <tftp_recv+0x2e>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "TFTP server not enabled");
 8007632:	4b50      	ldr	r3, [pc, #320]	; (8007774 <tftp_recv+0x290>)
 8007634:	2202      	movs	r2, #2
 8007636:	4641      	mov	r1, r8
 8007638:	4630      	mov	r0, r6
 800763a:	f7ff fed3 	bl	80073e4 <send_error.isra.0>
        break;
 800763e:	e768      	b.n	8007512 <tftp_recv+0x2e>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 8007640:	4b4d      	ldr	r3, [pc, #308]	; (8007778 <tftp_recv+0x294>)
 8007642:	2205      	movs	r2, #5
 8007644:	4641      	mov	r1, r8
 8007646:	4630      	mov	r0, r6
 8007648:	f7ff fecc 	bl	80073e4 <send_error.isra.0>
 800764c:	e761      	b.n	8007512 <tftp_recv+0x2e>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 800764e:	4b4b      	ldr	r3, [pc, #300]	; (800777c <tftp_recv+0x298>)
 8007650:	2202      	movs	r2, #2
 8007652:	4641      	mov	r1, r8
 8007654:	4630      	mov	r0, r6
 8007656:	f7ff fec5 	bl	80073e4 <send_error.isra.0>
        break;
 800765a:	e75a      	b.n	8007512 <tftp_recv+0x2e>
      blknum = lwip_ntohs(sbuf[1]);
 800765c:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8007660:	f011 f96a 	bl	8018938 <lwip_htons>
      if (blknum == tftp_state.blknum) {
 8007664:	8c27      	ldrh	r7, [r4, #32]
 8007666:	4287      	cmp	r7, r0
 8007668:	d046      	beq.n	80076f8 <tftp_recv+0x214>
      } else if ((u16_t)(blknum + 1) == tftp_state.blknum) {
 800766a:	1c43      	adds	r3, r0, #1
 800766c:	b29b      	uxth	r3, r3
 800766e:	429f      	cmp	r7, r3
 8007670:	d1e6      	bne.n	8007640 <tftp_recv+0x15c>
        send_ack(addr, port, blknum);
 8007672:	4602      	mov	r2, r0
 8007674:	4641      	mov	r1, r8
 8007676:	4630      	mov	r0, r6
 8007678:	f7ff fe8e 	bl	8007398 <send_ack.isra.0>
 800767c:	e749      	b.n	8007512 <tftp_recv+0x2e>
      pbuf_copy_partial(p, filename, filename_end_offset - 1, 2);
 800767e:	2302      	movs	r3, #2
 8007680:	a906      	add	r1, sp, #24
 8007682:	4628      	mov	r0, r5
 8007684:	f013 fa1c 	bl	801aac0 <pbuf_copy_partial>
      mode_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), filename_end_offset + 1);
 8007688:	f10a 0301 	add.w	r3, sl, #1
 800768c:	2201      	movs	r2, #1
 800768e:	f10d 010b 	add.w	r1, sp, #11
 8007692:	b29b      	uxth	r3, r3
 8007694:	4628      	mov	r0, r5
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	f013 fb80 	bl	801ad9c <pbuf_memfind>
      if ((u16_t)(mode_end_offset - filename_end_offset) > sizeof(mode)) {
 800769c:	eba0 000a 	sub.w	r0, r0, sl
 80076a0:	9b01      	ldr	r3, [sp, #4]
 80076a2:	b282      	uxth	r2, r0
 80076a4:	2a0b      	cmp	r2, #11
 80076a6:	d906      	bls.n	80076b6 <tftp_recv+0x1d2>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Mode too long/not NULL terminated");
 80076a8:	4b35      	ldr	r3, [pc, #212]	; (8007780 <tftp_recv+0x29c>)
 80076aa:	2202      	movs	r2, #2
 80076ac:	4641      	mov	r1, r8
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7ff fe98 	bl	80073e4 <send_error.isra.0>
        break;
 80076b4:	e72d      	b.n	8007512 <tftp_recv+0x2e>
      pbuf_copy_partial(p, mode, mode_end_offset - filename_end_offset, filename_end_offset + 1);
 80076b6:	a903      	add	r1, sp, #12
 80076b8:	4628      	mov	r0, r5
 80076ba:	f013 fa01 	bl	801aac0 <pbuf_copy_partial>
      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 80076be:	f5a7 7200 	sub.w	r2, r7, #512	; 0x200
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	a903      	add	r1, sp, #12
 80076c6:	fab2 f282 	clz	r2, r2
 80076ca:	a806      	add	r0, sp, #24
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	0952      	lsrs	r2, r2, #5
 80076d0:	4798      	blx	r3
      tftp_state.blknum = 1;
 80076d2:	2201      	movs	r2, #1
      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 80076d4:	6060      	str	r0, [r4, #4]
      tftp_state.blknum = 1;
 80076d6:	8422      	strh	r2, [r4, #32]
      if (!tftp_state.handle) {
 80076d8:	2800      	cmp	r0, #0
 80076da:	d037      	beq.n	800774c <tftp_recv+0x268>
      ip_addr_copy(tftp_state.addr, *addr);
 80076dc:	6833      	ldr	r3, [r6, #0]
      if (opcode == PP_HTONS(TFTP_WRQ)) {
 80076de:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
      tftp_state.port = port;
 80076e2:	f8a4 8014 	strh.w	r8, [r4, #20]
      ip_addr_copy(tftp_state.addr, *addr);
 80076e6:	6123      	str	r3, [r4, #16]
      if (opcode == PP_HTONS(TFTP_WRQ)) {
 80076e8:	d028      	beq.n	800773c <tftp_recv+0x258>
        send_data(addr, port);
 80076ea:	4641      	mov	r1, r8
 80076ec:	4630      	mov	r0, r6
        tftp_state.mode_write = 0;
 80076ee:	f884 9023 	strb.w	r9, [r4, #35]	; 0x23
        send_data(addr, port);
 80076f2:	f7ff feaf 	bl	8007454 <send_data>
 80076f6:	e70c      	b.n	8007512 <tftp_recv+0x2e>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 80076f8:	2104      	movs	r1, #4
 80076fa:	4628      	mov	r0, r5
 80076fc:	f013 f8cc 	bl	801a898 <pbuf_remove_header>
        ret = tftp_state.ctx->write(tftp_state.handle, p);
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	4629      	mov	r1, r5
 8007704:	6860      	ldr	r0, [r4, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	4798      	blx	r3
        if (ret < 0) {
 800770a:	2800      	cmp	r0, #0
 800770c:	db0d      	blt.n	800772a <tftp_recv+0x246>
          send_ack(addr, port, blknum);
 800770e:	463a      	mov	r2, r7
 8007710:	4641      	mov	r1, r8
 8007712:	4630      	mov	r0, r6
 8007714:	f7ff fe40 	bl	8007398 <send_ack.isra.0>
        if (p->tot_len < TFTP_MAX_PAYLOAD_SIZE) {
 8007718:	892b      	ldrh	r3, [r5, #8]
 800771a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771e:	f4ff af36 	bcc.w	800758e <tftp_recv+0xaa>
          tftp_state.blknum++;
 8007722:	8c23      	ldrh	r3, [r4, #32]
 8007724:	3301      	adds	r3, #1
 8007726:	8423      	strh	r3, [r4, #32]
 8007728:	e6f3      	b.n	8007512 <tftp_recv+0x2e>
          send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "error writing file");
 800772a:	4b16      	ldr	r3, [pc, #88]	; (8007784 <tftp_recv+0x2a0>)
 800772c:	4641      	mov	r1, r8
 800772e:	4630      	mov	r0, r6
 8007730:	2202      	movs	r2, #2
 8007732:	f7ff fe57 	bl	80073e4 <send_error.isra.0>
          close_handle();
 8007736:	f7ff fd7f 	bl	8007238 <close_handle>
 800773a:	e7ed      	b.n	8007718 <tftp_recv+0x234>
        tftp_state.mode_write = 1;
 800773c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        send_ack(addr, port, 0);
 8007740:	4641      	mov	r1, r8
 8007742:	464a      	mov	r2, r9
 8007744:	4630      	mov	r0, r6
 8007746:	f7ff fe27 	bl	8007398 <send_ack.isra.0>
 800774a:	e6e2      	b.n	8007512 <tftp_recv+0x2e>
        send_error(addr, port, TFTP_ERROR_FILE_NOT_FOUND, "Unable to open requested file.");
 800774c:	4b0e      	ldr	r3, [pc, #56]	; (8007788 <tftp_recv+0x2a4>)
 800774e:	4641      	mov	r1, r8
 8007750:	4630      	mov	r0, r6
 8007752:	f7ff fe47 	bl	80073e4 <send_error.isra.0>
        break;
 8007756:	e6dc      	b.n	8007512 <tftp_recv+0x2e>
 8007758:	20002e50 	.word	0x20002e50
 800775c:	0802b6a4 	.word	0x0802b6a4
 8007760:	0802b7bc 	.word	0x0802b7bc
 8007764:	0802b764 	.word	0x0802b764
 8007768:	08007341 	.word	0x08007341
 800776c:	0802b6e8 	.word	0x0802b6e8
 8007770:	0802b7a4 	.word	0x0802b7a4
 8007774:	0802b6d0 	.word	0x0802b6d0
 8007778:	0802b790 	.word	0x0802b790
 800777c:	0802b754 	.word	0x0802b754
 8007780:	0802b710 	.word	0x0802b710
 8007784:	0802b77c 	.word	0x0802b77c
 8007788:	0802b734 	.word	0x0802b734

0800778c <tftp_init_common>:
 * @param mode TFTP mode (client/server)
 * @param ctx TFTP callback struct
 */
err_t
tftp_init_common(u8_t mode, const struct tftp_context *ctx)
{
 800778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778e:	4606      	mov	r6, r0
  err_t ret;

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8007790:	202e      	movs	r0, #46	; 0x2e
{
 8007792:	460f      	mov	r7, r1
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8007794:	f018 f9f6 	bl	801fb84 <udp_new_ip_type>
  if (pcb == NULL) {
 8007798:	b1d8      	cbz	r0, 80077d2 <tftp_init_common+0x46>
    return ERR_MEM;
  }

  ret = udp_bind(pcb, IP_ANY_TYPE, TFTP_PORT);
 800779a:	2245      	movs	r2, #69	; 0x45
 800779c:	490e      	ldr	r1, [pc, #56]	; (80077d8 <tftp_init_common+0x4c>)
 800779e:	4605      	mov	r5, r0
 80077a0:	f017 ff8c 	bl	801f6bc <udp_bind>
  if (ret != ERR_OK) {
 80077a4:	4604      	mov	r4, r0
 80077a6:	b978      	cbnz	r0, 80077c8 <tftp_init_common+0x3c>
    udp_remove(pcb);
    return ret;
  }

  tftp_state.handle    = NULL;
 80077a8:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <tftp_init_common+0x50>)
  tftp_state.timer     = 0;
  tftp_state.last_data = NULL;
  tftp_state.upcb      = pcb;
  tftp_state.tftp_mode = mode;

  udp_recv(pcb, tftp_recv, NULL);
 80077aa:	4602      	mov	r2, r0
 80077ac:	490c      	ldr	r1, [pc, #48]	; (80077e0 <tftp_init_common+0x54>)
  tftp_state.handle    = NULL;
 80077ae:	6058      	str	r0, [r3, #4]
  tftp_state.port      = 0;
 80077b0:	8298      	strh	r0, [r3, #20]
  tftp_state.timer     = 0;
 80077b2:	6198      	str	r0, [r3, #24]
  tftp_state.ctx       = ctx;
 80077b4:	601f      	str	r7, [r3, #0]
  tftp_state.tftp_mode = mode;
 80077b6:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
  tftp_state.upcb      = pcb;
 80077ba:	e9c3 0502 	strd	r0, r5, [r3, #8]
  udp_recv(pcb, tftp_recv, NULL);
 80077be:	4628      	mov	r0, r5
 80077c0:	f018 f990 	bl	801fae4 <udp_recv>

  return ERR_OK;
}
 80077c4:	4620      	mov	r0, r4
 80077c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    udp_remove(pcb);
 80077c8:	4628      	mov	r0, r5
 80077ca:	f018 f99d 	bl	801fb08 <udp_remove>
}
 80077ce:	4620      	mov	r0, r4
 80077d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 80077d2:	f04f 34ff 	mov.w	r4, #4294967295
 80077d6:	e7f5      	b.n	80077c4 <tftp_init_common+0x38>
 80077d8:	08044cb8 	.word	0x08044cb8
 80077dc:	20002e50 	.word	0x20002e50
 80077e0:	080074e5 	.word	0x080074e5

080077e4 <tftp_init_client>:
 * Initialize TFTP client.
 * @param ctx TFTP callback struct
 */
err_t
tftp_init_client(const struct tftp_context *ctx)
{
 80077e4:	4601      	mov	r1, r0
  return tftp_init_common(LWIP_TFTP_MODE_CLIENT, ctx);
 80077e6:	2002      	movs	r0, #2
 80077e8:	f7ff bfd0 	b.w	800778c <tftp_init_common>

080077ec <tftp_get>:
  }
  return NULL;
}

err_t tftp_get(void* basememptr, const ip_addr_t *addr, u16_t port, const char* fname, enum tftp_transfer_mode mode)
{
 80077ec:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 80077ee:	4c20      	ldr	r4, [pc, #128]	; (8007870 <tftp_get+0x84>)
{
 80077f0:	4605      	mov	r5, r0
 80077f2:	4608      	mov	r0, r1
 80077f4:	4611      	mov	r1, r2
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 80077f6:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
{
 80077fa:	f89d 2010 	ldrb.w	r2, [sp, #16]
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 80077fe:	f01c 0f02 	tst.w	ip, #2
 8007802:	d024      	beq.n	800784e <tftp_get+0x62>
  LWIP_ERROR("tftp_get: invalid file name", fname != NULL, return ERR_VAL);
 8007804:	b35b      	cbz	r3, 800785e <tftp_get+0x72>
  LWIP_ERROR("tftp_get: invalid mode", mode <= TFTP_MODE_BINARY, return ERR_VAL);
 8007806:	2a02      	cmp	r2, #2
 8007808:	d817      	bhi.n	800783a <tftp_get+0x4e>

  tftp_state.handle = basememptr;
 800780a:	6065      	str	r5, [r4, #4]
  tftp_state.blknum = 1;
 800780c:	2501      	movs	r5, #1
 800780e:	8425      	strh	r5, [r4, #32]
  tftp_state.mode_write = 1; /* We want to receive data */
 8007810:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  if (mode == TFTP_MODE_OCTET) {
 8007814:	b152      	cbz	r2, 800782c <tftp_get+0x40>
    return "binary";
 8007816:	4d17      	ldr	r5, [pc, #92]	; (8007874 <tftp_get+0x88>)
 8007818:	4c17      	ldr	r4, [pc, #92]	; (8007878 <tftp_get+0x8c>)
 800781a:	2a01      	cmp	r2, #1
 800781c:	bf18      	it	ne
 800781e:	462c      	movne	r4, r5
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 8007820:	2201      	movs	r2, #1
 8007822:	9404      	str	r4, [sp, #16]
}
 8007824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 8007828:	f7ff bd20 	b.w	800726c <send_request>
    return "octet";
 800782c:	4c13      	ldr	r4, [pc, #76]	; (800787c <tftp_get+0x90>)
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 800782e:	2201      	movs	r2, #1
 8007830:	9404      	str	r4, [sp, #16]
}
 8007832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 8007836:	f7ff bd19 	b.w	800726c <send_request>
  LWIP_ERROR("tftp_get: invalid mode", mode <= TFTP_MODE_BINARY, return ERR_VAL);
 800783a:	4b11      	ldr	r3, [pc, #68]	; (8007880 <tftp_get+0x94>)
 800783c:	f240 2216 	movw	r2, #534	; 0x216
 8007840:	4910      	ldr	r1, [pc, #64]	; (8007884 <tftp_get+0x98>)
 8007842:	4811      	ldr	r0, [pc, #68]	; (8007888 <tftp_get+0x9c>)
 8007844:	f01d f952 	bl	8024aec <iprintf>
}
 8007848:	f06f 0005 	mvn.w	r0, #5
 800784c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 800784e:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <tftp_get+0x94>)
 8007850:	f44f 7205 	mov.w	r2, #532	; 0x214
 8007854:	490d      	ldr	r1, [pc, #52]	; (800788c <tftp_get+0xa0>)
 8007856:	480c      	ldr	r0, [pc, #48]	; (8007888 <tftp_get+0x9c>)
 8007858:	f01d f948 	bl	8024aec <iprintf>
 800785c:	e7f4      	b.n	8007848 <tftp_get+0x5c>
  LWIP_ERROR("tftp_get: invalid file name", fname != NULL, return ERR_VAL);
 800785e:	4b08      	ldr	r3, [pc, #32]	; (8007880 <tftp_get+0x94>)
 8007860:	f240 2215 	movw	r2, #533	; 0x215
 8007864:	490a      	ldr	r1, [pc, #40]	; (8007890 <tftp_get+0xa4>)
 8007866:	4808      	ldr	r0, [pc, #32]	; (8007888 <tftp_get+0x9c>)
 8007868:	f01d f940 	bl	8024aec <iprintf>
 800786c:	e7ec      	b.n	8007848 <tftp_get+0x5c>
 800786e:	bf00      	nop
 8007870:	20002e50 	.word	0x20002e50
 8007874:	0802b854 	.word	0x0802b854
 8007878:	0802b840 	.word	0x0802b840
 800787c:	0802b84c 	.word	0x0802b84c
 8007880:	0802b7d0 	.word	0x0802b7d0
 8007884:	0802b8a0 	.word	0x0802b8a0
 8007888:	0802b818 	.word	0x0802b818
 800788c:	0802b85c 	.word	0x0802b85c
 8007890:	0802b884 	.word	0x0802b884

08007894 <tftp_open_mem>:

static void* tftp_open_mem(const unsigned int memaddress, u8_t is_write) {
	void *basememptr;
	uint32_t  myaddr;

	if (is_write) {
 8007894:	b141      	cbz	r1, 80078a8 <tftp_open_mem+0x14>
		myaddr = (uint32_t)tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 8007896:	4b05      	ldr	r3, [pc, #20]	; (80078ac <tftp_open_mem+0x18>)
		if ((memaddress & 0x8100000) != myaddr) {	// dont allow write to this segment!
 8007898:	f000 6201 	and.w	r2, r0, #135266304	; 0x8100000
		myaddr = (uint32_t)tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 800789c:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
			basememptr = (void*) memaddress;
 80078a0:	429a      	cmp	r2, r3
 80078a2:	bf08      	it	eq
 80078a4:	2000      	moveq	r0, #0
 80078a6:	4770      	bx	lr
			return (basememptr);		// write
		} else
			return (0);
	} else {
		return (0);						// not implemented
 80078a8:	4608      	mov	r0, r1
		//   return (void*)memopen(memptr, 0);		// read
	}
}
 80078aa:	4770      	bx	lr
 80078ac:	08007895 	.word	0x08007895

080078b0 <tftp_open>:
	if (is_write) {
 80078b0:	b142      	cbz	r2, 80078c4 <tftp_open+0x14>
		myaddr = (uint32_t)tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 80078b2:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <tftp_open+0x18>)
		if ((memaddress & 0x8100000) != myaddr) {	// dont allow write to this segment!
 80078b4:	f000 6201 	and.w	r2, r0, #135266304	; 0x8100000
		myaddr = (uint32_t)tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 80078b8:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
			return (basememptr);		// write
 80078bc:	4293      	cmp	r3, r2
 80078be:	bf08      	it	eq
 80078c0:	2000      	moveq	r0, #0
 80078c2:	4770      	bx	lr
		return (0);						// not implemented
 80078c4:	4610      	mov	r0, r2

static void* tftp_open(const char *fname, const char *mode, u8_t is_write) {
	LWIP_UNUSED_ARG(mode);
	return tftp_open_mem(fname, is_write);
}
 80078c6:	4770      	bx	lr
 80078c8:	08007895 	.word	0x08007895

080078cc <tftp_read>:
	ret = memread(buf, 1, bytes, (void*) memptr);
	if (ret <= 0) {
		return -1;
	}
	return ret;
}
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop

080078d4 <tftp_error>:
	}
	return 0;
}

/* For TFTP client only */
static void tftp_error(void *memptr, int err, const char *msg, int size) {
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	b09a      	sub	sp, #104	; 0x68
 80078d8:	461e      	mov	r6, r3
 80078da:	4615      	mov	r5, r2
 80078dc:	460c      	mov	r4, r1
	char message[100];

	LWIP_UNUSED_ARG(memptr);

	memset(message, 0, sizeof(message));
 80078de:	2264      	movs	r2, #100	; 0x64
 80078e0:	2100      	movs	r1, #0
 80078e2:	a801      	add	r0, sp, #4
 80078e4:	f01c f966 	bl	8023bb4 <memset>
	MEMCPY(message, msg, LWIP_MIN(sizeof(message)-1, (size_t)size));
 80078e8:	2e63      	cmp	r6, #99	; 0x63
 80078ea:	4632      	mov	r2, r6
 80078ec:	4629      	mov	r1, r5
 80078ee:	bf28      	it	cs
 80078f0:	2263      	movcs	r2, #99	; 0x63
 80078f2:	a801      	add	r0, sp, #4
 80078f4:	f01c f936 	bl	8023b64 <memcpy>

	printf("TFTP error: %d (%s)", err, message);
 80078f8:	aa01      	add	r2, sp, #4
 80078fa:	4621      	mov	r1, r4
 80078fc:	4802      	ldr	r0, [pc, #8]	; (8007908 <tftp_error+0x34>)
 80078fe:	f01d f8f5 	bl	8024aec <iprintf>
}
 8007902:	b01a      	add	sp, #104	; 0x68
 8007904:	bd70      	pop	{r4, r5, r6, pc}
 8007906:	bf00      	nop
 8007908:	0802b8b8 	.word	0x0802b8b8

0800790c <tftp_write>:
	while (p != NULL) {
 800790c:	2900      	cmp	r1, #0
 800790e:	d054      	beq.n	80079ba <tftp_write+0xae>
static int tftp_write(void *memptr, struct pbuf *p) {
 8007910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007914:	460f      	mov	r7, r1
 8007916:	b082      	sub	sp, #8
 8007918:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80079cc <tftp_write+0xc0>
		data = 0;
 800791c:	2600      	movs	r6, #0
		if ((res = WriteFlashWord(memptr, data)) != 0) {
 800791e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80079d0 <tftp_write+0xc4>
	filelength += (int) len;
 8007922:	f8d8 3000 	ldr.w	r3, [r8]
		if (memwrite(p->payload, 1, p->len, memptr) != (size_t) p->len) {
 8007926:	897d      	ldrh	r5, [r7, #10]
 8007928:	f8d7 9004 	ldr.w	r9, [r7, #4]
	filelength += (int) len;
 800792c:	442b      	add	r3, r5
 800792e:	f8c8 3000 	str.w	r3, [r8]
	for (i = 0; i < len;) {		// avoid read buffer overflow
 8007932:	b355      	cbz	r5, 800798a <tftp_write+0x7e>
		if ((res = WriteFlashWord(memptr, data)) != 0) {
 8007934:	f8da 0000 	ldr.w	r0, [sl]
	for (i = 0; i < len;) {		// avoid read buffer overflow
 8007938:	2400      	movs	r4, #0
		data = 0;
 800793a:	f04f 0c04 	mov.w	ip, #4
 800793e:	9601      	str	r6, [sp, #4]
			data >>= 8;
 8007940:	9a01      	ldr	r2, [sp, #4]
			data |= (i < len) ? (buf[i++] << 24) : 0;
 8007942:	42a5      	cmp	r5, r4
 8007944:	f04f 0100 	mov.w	r1, #0
			data >>= 8;
 8007948:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800794c:	9201      	str	r2, [sp, #4]
			data |= (i < len) ? (buf[i++] << 24) : 0;
 800794e:	d903      	bls.n	8007958 <tftp_write+0x4c>
 8007950:	f819 3004 	ldrb.w	r3, [r9, r4]
 8007954:	3401      	adds	r4, #1
 8007956:	0619      	lsls	r1, r3, #24
 8007958:	9b01      	ldr	r3, [sp, #4]
		for (j = 0; j < 4; j++) {
 800795a:	f1bc 0c01 	subs.w	ip, ip, #1
			data |= (i < len) ? (buf[i++] << 24) : 0;
 800795e:	ea43 0301 	orr.w	r3, r3, r1
 8007962:	9301      	str	r3, [sp, #4]
		for (j = 0; j < 4; j++) {
 8007964:	d1ec      	bne.n	8007940 <tftp_write+0x34>
		if ((res = WriteFlashWord(memptr, data)) != 0) {
 8007966:	9901      	ldr	r1, [sp, #4]
 8007968:	f7f9 f9ee 	bl	8000d48 <WriteFlashWord>
 800796c:	b9a0      	cbnz	r0, 8007998 <tftp_write+0x8c>
		if (*(uint32_t*) memptr != data) {
 800796e:	f8da 0000 	ldr.w	r0, [sl]
 8007972:	9a01      	ldr	r2, [sp, #4]
 8007974:	6803      	ldr	r3, [r0, #0]
 8007976:	4293      	cmp	r3, r2
 8007978:	d116      	bne.n	80079a8 <tftp_write+0x9c>
		memptr += 4;
 800797a:	3004      	adds	r0, #4
	for (i = 0; i < len;) {		// avoid read buffer overflow
 800797c:	42a5      	cmp	r5, r4
		memptr += 4;
 800797e:	f8ca 0000 	str.w	r0, [sl]
	for (i = 0; i < len;) {		// avoid read buffer overflow
 8007982:	d8da      	bhi.n	800793a <tftp_write+0x2e>
		if (memwrite(p->payload, 1, p->len, memptr) != (size_t) p->len) {
 8007984:	897b      	ldrh	r3, [r7, #10]
 8007986:	42ab      	cmp	r3, r5
 8007988:	d119      	bne.n	80079be <tftp_write+0xb2>
		p = p->next;
 800798a:	683f      	ldr	r7, [r7, #0]
	while (p != NULL) {
 800798c:	2f00      	cmp	r7, #0
 800798e:	d1c8      	bne.n	8007922 <tftp_write+0x16>
	return 0;
 8007990:	2000      	movs	r0, #0
}
 8007992:	b002      	add	sp, #8
 8007994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("memwrite: WriteFlash error\n");
 8007998:	480a      	ldr	r0, [pc, #40]	; (80079c4 <tftp_write+0xb8>)
 800799a:	f01d f943 	bl	8024c24 <puts>
			return -1;
 800799e:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079a2:	b002      	add	sp, #8
 80079a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("memwrite: Readback error at %08x\n", memptr);
 80079a8:	4601      	mov	r1, r0
 80079aa:	4807      	ldr	r0, [pc, #28]	; (80079c8 <tftp_write+0xbc>)
 80079ac:	f01d f89e 	bl	8024aec <iprintf>
			return -1;
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079b4:	b002      	add	sp, #8
 80079b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return 0;
 80079ba:	2000      	movs	r0, #0
}
 80079bc:	4770      	bx	lr
			return -1;
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	e7ee      	b.n	80079a2 <tftp_write+0x96>
 80079c4:	0802b8cc 	.word	0x0802b8cc
 80079c8:	0802b8e8 	.word	0x0802b8e8
 80079cc:	20002e78 	.word	0x20002e78
 80079d0:	20002e80 	.word	0x20002e80

080079d4 <tftp_close>:
static void tftp_close(void *memptr) {
 80079d4:	b508      	push	{r3, lr}
	printf("tftp memclose: filelength=%d, memptr=0x%0x\n", filelength, (unsigned int) memptr);
 80079d6:	4a0a      	ldr	r2, [pc, #40]	; (8007a00 <tftp_close+0x2c>)
 80079d8:	4b0a      	ldr	r3, [pc, #40]	; (8007a04 <tftp_close+0x30>)
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	6819      	ldr	r1, [r3, #0]
 80079de:	480a      	ldr	r0, [pc, #40]	; (8007a08 <tftp_close+0x34>)
 80079e0:	f01d f884 	bl	8024aec <iprintf>
	osDelay(1000);
 80079e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079e8:	f00d f90c 	bl	8014c04 <osDelay>
	if (LockFlash() != HAL_OK) {
 80079ec:	f7f9 f946 	bl	8000c7c <LockFlash>
 80079f0:	b900      	cbnz	r0, 80079f4 <tftp_close+0x20>
}
 80079f2:	bd08      	pop	{r3, pc}
		printf("tftp: flash2 failed\n");
 80079f4:	4805      	ldr	r0, [pc, #20]	; (8007a0c <tftp_close+0x38>)
}
 80079f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("tftp: flash2 failed\n");
 80079fa:	f01d b913 	b.w	8024c24 <puts>
 80079fe:	bf00      	nop
 8007a00:	20002e80 	.word	0x20002e80
 8007a04:	20002e78 	.word	0x20002e78
 8007a08:	0802b90c 	.word	0x0802b90c
 8007a0c:	0802b938 	.word	0x0802b938

08007a10 <tftp_client>:
// unused
void tftp_example_init_server(void) {
	tftp_init_server(&tftp);
}

void tftp_client(void) {
 8007a10:	b530      	push	{r4, r5, lr}
 8007a12:	b085      	sub	sp, #20
	void *mptr;
	err_t err;
	ip_addr_t srv;

	printf("+++++++++++++ tftp_init_client: start\n");
 8007a14:	4824      	ldr	r0, [pc, #144]	; (8007aa8 <tftp_client+0x98>)
 8007a16:	f01d f905 	bl	8024c24 <puts>

	int ret = ipaddr_aton(LWIP_TFTP_EXAMPLE_CLIENT_REMOTEIP, &srv);
 8007a1a:	4824      	ldr	r0, [pc, #144]	; (8007aac <tftp_client+0x9c>)
 8007a1c:	a903      	add	r1, sp, #12
 8007a1e:	f01a fd93 	bl	8022548 <ip4addr_aton>
	LWIP_ASSERT("ipaddr_aton failed", ret == 1);
 8007a22:	2801      	cmp	r0, #1
 8007a24:	d005      	beq.n	8007a32 <tftp_client+0x22>
 8007a26:	4b22      	ldr	r3, [pc, #136]	; (8007ab0 <tftp_client+0xa0>)
 8007a28:	22c3      	movs	r2, #195	; 0xc3
 8007a2a:	4922      	ldr	r1, [pc, #136]	; (8007ab4 <tftp_client+0xa4>)
 8007a2c:	4822      	ldr	r0, [pc, #136]	; (8007ab8 <tftp_client+0xa8>)
 8007a2e:	f01d f85d 	bl	8024aec <iprintf>

	err = tftp_init_client(&tftp);
 8007a32:	4822      	ldr	r0, [pc, #136]	; (8007abc <tftp_client+0xac>)
 8007a34:	f7ff fed6 	bl	80077e4 <tftp_init_client>
	if ((err != ERR_OK) && (err != ERR_USE))		// ERR_USE might be subsequent call
 8007a38:	b108      	cbz	r0, 8007a3e <tftp_client+0x2e>
 8007a3a:	3008      	adds	r0, #8
 8007a3c:	d11e      	bne.n	8007a7c <tftp_client+0x6c>
		LWIP_ASSERT("tftp_init_client failed", err == ERR_OK);

	mptr = tftp_open_mem(load_address, 1);
 8007a3e:	4a20      	ldr	r2, [pc, #128]	; (8007ac0 <tftp_client+0xb0>)
		myaddr = (uint32_t)tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 8007a40:	4b20      	ldr	r3, [pc, #128]	; (8007ac4 <tftp_client+0xb4>)
	mptr = tftp_open_mem(load_address, 1);
 8007a42:	6814      	ldr	r4, [r2, #0]
		myaddr = (uint32_t)tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 8007a44:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
		if ((memaddress & 0x8100000) != myaddr) {	// dont allow write to this segment!
 8007a48:	f004 6201 	and.w	r2, r4, #135266304	; 0x8100000
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d023      	beq.n	8007a98 <tftp_client+0x88>
	LWIP_ASSERT("failed to create memory", mptr != NULL);
 8007a50:	b314      	cbz	r4, 8007a98 <tftp_client+0x88>
	if (mptr == NULL)
		return;

	memptr = mptr;
 8007a52:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <tftp_client+0xb8>)
	filelength = 0;
 8007a54:	2500      	movs	r5, #0
 8007a56:	4b1d      	ldr	r3, [pc, #116]	; (8007acc <tftp_client+0xbc>)

	EraseFlash(memptr);
 8007a58:	4620      	mov	r0, r4
	memptr = mptr;
 8007a5a:	6014      	str	r4, [r2, #0]
	filelength = 0;
 8007a5c:	601d      	str	r5, [r3, #0]
	EraseFlash(memptr);
 8007a5e:	f7f9 f923 	bl	8000ca8 <EraseFlash>
	err = tftp_get(mptr, &srv, TFTP_PORT, LWIP_TFTP_EXAMPLE_CLIENT_FILENAME, TFTP_MODE_OCTET);
 8007a62:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <tftp_client+0xc0>)
 8007a64:	2245      	movs	r2, #69	; 0x45
 8007a66:	a903      	add	r1, sp, #12
 8007a68:	4620      	mov	r0, r4
 8007a6a:	9500      	str	r5, [sp, #0]
 8007a6c:	f7ff febe 	bl	80077ec <tftp_get>
	LWIP_ASSERT("tftp_get failed", err == ERR_OK);
 8007a70:	b958      	cbnz	r0, 8007a8a <tftp_client+0x7a>

	printf("+++++++++++++ tftp_init_client: end\n");
 8007a72:	4818      	ldr	r0, [pc, #96]	; (8007ad4 <tftp_client+0xc4>)
 8007a74:	f01d f8d6 	bl	8024c24 <puts>
}
 8007a78:	b005      	add	sp, #20
 8007a7a:	bd30      	pop	{r4, r5, pc}
		LWIP_ASSERT("tftp_init_client failed", err == ERR_OK);
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <tftp_client+0xa0>)
 8007a7e:	22c7      	movs	r2, #199	; 0xc7
 8007a80:	4915      	ldr	r1, [pc, #84]	; (8007ad8 <tftp_client+0xc8>)
 8007a82:	480d      	ldr	r0, [pc, #52]	; (8007ab8 <tftp_client+0xa8>)
 8007a84:	f01d f832 	bl	8024aec <iprintf>
 8007a88:	e7d9      	b.n	8007a3e <tftp_client+0x2e>
	LWIP_ASSERT("tftp_get failed", err == ERR_OK);
 8007a8a:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <tftp_client+0xa0>)
 8007a8c:	22d3      	movs	r2, #211	; 0xd3
 8007a8e:	4913      	ldr	r1, [pc, #76]	; (8007adc <tftp_client+0xcc>)
 8007a90:	4809      	ldr	r0, [pc, #36]	; (8007ab8 <tftp_client+0xa8>)
 8007a92:	f01d f82b 	bl	8024aec <iprintf>
 8007a96:	e7ec      	b.n	8007a72 <tftp_client+0x62>
	LWIP_ASSERT("failed to create memory", mptr != NULL);
 8007a98:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <tftp_client+0xa0>)
 8007a9a:	22ca      	movs	r2, #202	; 0xca
 8007a9c:	4910      	ldr	r1, [pc, #64]	; (8007ae0 <tftp_client+0xd0>)
 8007a9e:	4806      	ldr	r0, [pc, #24]	; (8007ab8 <tftp_client+0xa8>)
 8007aa0:	f01d f824 	bl	8024aec <iprintf>
}
 8007aa4:	b005      	add	sp, #20
 8007aa6:	bd30      	pop	{r4, r5, pc}
 8007aa8:	0802b94c 	.word	0x0802b94c
 8007aac:	0802b974 	.word	0x0802b974
 8007ab0:	0802b984 	.word	0x0802b984
 8007ab4:	0802b9a4 	.word	0x0802b9a4
 8007ab8:	0802b818 	.word	0x0802b818
 8007abc:	0802baac 	.word	0x0802baac
 8007ac0:	20002e7c 	.word	0x20002e7c
 8007ac4:	08007895 	.word	0x08007895
 8007ac8:	20002e80 	.word	0x20002e80
 8007acc:	20002e78 	.word	0x20002e78
 8007ad0:	0802ba1c 	.word	0x0802ba1c
 8007ad4:	0802b9f8 	.word	0x0802b9f8
 8007ad8:	0802b9b8 	.word	0x0802b9b8
 8007adc:	0802b9e8 	.word	0x0802b9e8
 8007ae0:	0802b9d0 	.word	0x0802b9d0

08007ae4 <tftloader>:
void tftloader(char filename[], uint32_t crc)
{
static char newfilename[24];
int i;

sprintf(newfilename,"%s-%02u-%04u.bin",filename,circuitboardpcb,newbuild);
 8007ae4:	490e      	ldr	r1, [pc, #56]	; (8007b20 <tftloader+0x3c>)
{
 8007ae6:	4602      	mov	r2, r0
sprintf(newfilename,"%s-%02u-%04u.bin",filename,circuitboardpcb,newbuild);
 8007ae8:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <tftloader+0x40>)
{
 8007aea:	b530      	push	{r4, r5, lr}
sprintf(newfilename,"%s-%02u-%04u.bin",filename,circuitboardpcb,newbuild);
 8007aec:	680d      	ldr	r5, [r1, #0]
{
 8007aee:	b083      	sub	sp, #12
sprintf(newfilename,"%s-%02u-%04u.bin",filename,circuitboardpcb,newbuild);
 8007af0:	4c0d      	ldr	r4, [pc, #52]	; (8007b28 <tftloader+0x44>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	490d      	ldr	r1, [pc, #52]	; (8007b2c <tftloader+0x48>)
 8007af6:	4620      	mov	r0, r4
 8007af8:	9500      	str	r5, [sp, #0]
 8007afa:	f01d f9e9 	bl	8024ed0 <siprintf>
printf("**************** Attempting to download new firmware - do not switch off *************\n");
 8007afe:	480c      	ldr	r0, [pc, #48]	; (8007b30 <tftloader+0x4c>)
 8007b00:	f01d f890 	bl	8024c24 <puts>
printf("Trying to TFTPload %s\n",newfilename);
 8007b04:	4621      	mov	r1, r4
 8007b06:	480b      	ldr	r0, [pc, #44]	; (8007b34 <tftloader+0x50>)
 8007b08:	f01c fff0 	bl	8024aec <iprintf>
load_address = TFTP_BASE_MEM;
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <tftloader+0x54>)
 8007b0e:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8007b12:	601a      	str	r2, [r3, #0]
tftp_client();
}
 8007b14:	b003      	add	sp, #12
 8007b16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
tftp_client();
 8007b1a:	f7ff bf79 	b.w	8007a10 <tftp_client>
 8007b1e:	bf00      	nop
 8007b20:	20002a04 	.word	0x20002a04
 8007b24:	20001d4c 	.word	0x20001d4c
 8007b28:	20002e84 	.word	0x20002e84
 8007b2c:	0802ba28 	.word	0x0802ba28
 8007b30:	0802ba3c 	.word	0x0802ba3c
 8007b34:	0802ba94 	.word	0x0802ba94
 8007b38:	20002e7c 	.word	0x20002e7c

08007b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8007b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007b42:	e003      	b.n	8007b4c <LoopCopyDataInit>

08007b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007b44:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007b4a:	3104      	adds	r1, #4

08007b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007b4c:	480b      	ldr	r0, [pc, #44]	; (8007b7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007b4e:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007b54:	d3f6      	bcc.n	8007b44 <CopyDataInit>
  ldr  r2, =_sbss
 8007b56:	4a0b      	ldr	r2, [pc, #44]	; (8007b84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007b58:	e002      	b.n	8007b60 <LoopFillZerobss>

08007b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007b5c:	f842 3b04 	str.w	r3, [r2], #4

08007b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007b60:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b64:	d3f9      	bcc.n	8007b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007b66:	f7fe fd17 	bl	8006598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b6a:	f01b fe9f 	bl	80238ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b6e:	f7fb fb7f 	bl	8003270 <main>
  bx  lr    
 8007b72:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8007b74:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007b78:	0804580c 	.word	0x0804580c
  ldr  r0, =_sdata
 8007b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007b80:	200006bc 	.word	0x200006bc
  ldr  r2, =_sbss
 8007b84:	200006c0 	.word	0x200006c0
  ldr  r3, = _ebss
 8007b88:	2002f874 	.word	0x2002f874

08007b8c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b8c:	e7fe      	b.n	8007b8c <CAN1_RX0_IRQHandler>
	...

08007b90 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b90:	4a07      	ldr	r2, [pc, #28]	; (8007bb0 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b92:	2003      	movs	r0, #3
{
 8007b94:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b96:	6813      	ldr	r3, [r2, #0]
 8007b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b9c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b9e:	f000 fc4f 	bl	8008440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f7fe fbc4 	bl	8006330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007ba8:	f7fd fc42 	bl	8005430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007bac:	2000      	movs	r0, #0
 8007bae:	bd08      	pop	{r3, pc}
 8007bb0:	40023c00 	.word	0x40023c00

08007bb4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007bb4:	4a03      	ldr	r2, [pc, #12]	; (8007bc4 <HAL_IncTick+0x10>)
 8007bb6:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <HAL_IncTick+0x14>)
 8007bb8:	6811      	ldr	r1, [r2, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	440b      	add	r3, r1
 8007bbe:	6013      	str	r3, [r2, #0]
}
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20002e9c 	.word	0x20002e9c
 8007bc8:	200002d8 	.word	0x200002d8

08007bcc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007bcc:	4b01      	ldr	r3, [pc, #4]	; (8007bd4 <HAL_GetTick+0x8>)
 8007bce:	6818      	ldr	r0, [r3, #0]
}
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20002e9c 	.word	0x20002e9c

08007bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007bdc:	f7ff fff6 	bl	8007bcc <HAL_GetTick>
 8007be0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007be2:	1c63      	adds	r3, r4, #1
 8007be4:	d002      	beq.n	8007bec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007be6:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <HAL_Delay+0x20>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bec:	f7ff ffee 	bl	8007bcc <HAL_GetTick>
 8007bf0:	1b43      	subs	r3, r0, r5
 8007bf2:	42a3      	cmp	r3, r4
 8007bf4:	d3fa      	bcc.n	8007bec <HAL_Delay+0x14>
  {
  }
}
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	200002d8 	.word	0x200002d8

08007bfc <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f000 8144 	beq.w	8007e8a <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007c02:	6803      	ldr	r3, [r0, #0]
 8007c04:	49a7      	ldr	r1, [pc, #668]	; (8007ea4 <HAL_ADC_Init+0x2a8>)
 8007c06:	4aa8      	ldr	r2, [pc, #672]	; (8007ea8 <HAL_ADC_Init+0x2ac>)
 8007c08:	428b      	cmp	r3, r1
 8007c0a:	bf18      	it	ne
 8007c0c:	4293      	cmpne	r3, r2
{
 8007c0e:	b570      	push	{r4, r5, r6, lr}
 8007c10:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007c12:	d003      	beq.n	8007c1c <HAL_ADC_Init+0x20>
 8007c14:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d177      	bne.n	8007d0c <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8007c22:	d17c      	bne.n	8007d1e <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007c24:	68a3      	ldr	r3, [r4, #8]
 8007c26:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007c2a:	f040 8082 	bne.w	8007d32 <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d84e      	bhi.n	8007cd2 <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007c34:	69a3      	ldr	r3, [r4, #24]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d845      	bhi.n	8007cc6 <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8007c3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007c3c:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8007c40:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8007c44:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007c48:	bf18      	it	ne
 8007c4a:	2900      	cmpne	r1, #0
 8007c4c:	bf14      	ite	ne
 8007c4e:	2301      	movne	r3, #1
 8007c50:	2300      	moveq	r3, #0
 8007c52:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8007c56:	bf0c      	ite	eq
 8007c58:	2300      	moveq	r3, #0
 8007c5a:	f003 0301 	andne.w	r3, r3, #1
 8007c5e:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 8007c62:	bf0c      	ite	eq
 8007c64:	2300      	moveq	r3, #0
 8007c66:	f003 0301 	andne.w	r3, r3, #1
 8007c6a:	b123      	cbz	r3, 8007c76 <HAL_ADC_Init+0x7a>
 8007c6c:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8007c70:	2a01      	cmp	r2, #1
 8007c72:	f200 8111 	bhi.w	8007e98 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8007c76:	68e3      	ldr	r3, [r4, #12]
 8007c78:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8007c7c:	d165      	bne.n	8007d4a <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007c7e:	69e3      	ldr	r3, [r4, #28]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	2b0f      	cmp	r3, #15
 8007c84:	d85b      	bhi.n	8007d3e <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007c86:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d830      	bhi.n	8007cf0 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007c8e:	6963      	ldr	r3, [r4, #20]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d835      	bhi.n	8007d00 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8007c94:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d823      	bhi.n	8007ce4 <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c9c:	4b83      	ldr	r3, [pc, #524]	; (8007eac <HAL_ADC_Init+0x2b0>)
 8007c9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d004      	beq.n	8007cae <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8007ca4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ca6:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8007caa:	f040 80e8 	bne.w	8007e7e <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007cae:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	f000 80d4 	beq.w	8007e5e <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cb8:	06db      	lsls	r3, r3, #27
 8007cba:	d54c      	bpl.n	8007d56 <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007cbc:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8007cbe:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8007cc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8007cc4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007cc6:	f240 1151 	movw	r1, #337	; 0x151
 8007cca:	4879      	ldr	r0, [pc, #484]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007ccc:	f7fc fa56 	bl	800417c <assert_failed>
 8007cd0:	e7b3      	b.n	8007c3a <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007cd2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8007cd6:	4876      	ldr	r0, [pc, #472]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007cd8:	f7fc fa50 	bl	800417c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007cdc:	69a3      	ldr	r3, [r4, #24]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d9ab      	bls.n	8007c3a <HAL_ADC_Init+0x3e>
 8007ce2:	e7f0      	b.n	8007cc6 <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8007ce4:	f240 1157 	movw	r1, #343	; 0x157
 8007ce8:	4871      	ldr	r0, [pc, #452]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007cea:	f7fc fa47 	bl	800417c <assert_failed>
 8007cee:	e7d5      	b.n	8007c9c <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007cf0:	f240 1155 	movw	r1, #341	; 0x155
 8007cf4:	486e      	ldr	r0, [pc, #440]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007cf6:	f7fc fa41 	bl	800417c <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007cfa:	6963      	ldr	r3, [r4, #20]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d9c9      	bls.n	8007c94 <HAL_ADC_Init+0x98>
 8007d00:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8007d04:	486a      	ldr	r0, [pc, #424]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007d06:	f7fc fa39 	bl	800417c <assert_failed>
 8007d0a:	e7c3      	b.n	8007c94 <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007d0c:	f240 114d 	movw	r1, #333	; 0x14d
 8007d10:	4867      	ldr	r0, [pc, #412]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007d12:	f7fc fa33 	bl	800417c <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007d16:	6863      	ldr	r3, [r4, #4]
 8007d18:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8007d1c:	d082      	beq.n	8007c24 <HAL_ADC_Init+0x28>
 8007d1e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8007d22:	4863      	ldr	r0, [pc, #396]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007d24:	f7fc fa2a 	bl	800417c <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007d28:	68a3      	ldr	r3, [r4, #8]
 8007d2a:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007d2e:	f43f af7e 	beq.w	8007c2e <HAL_ADC_Init+0x32>
 8007d32:	f240 114f 	movw	r1, #335	; 0x14f
 8007d36:	485e      	ldr	r0, [pc, #376]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007d38:	f7fc fa20 	bl	800417c <assert_failed>
 8007d3c:	e777      	b.n	8007c2e <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007d3e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8007d42:	485b      	ldr	r0, [pc, #364]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007d44:	f7fc fa1a 	bl	800417c <assert_failed>
 8007d48:	e79d      	b.n	8007c86 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8007d4a:	f240 1153 	movw	r1, #339	; 0x153
 8007d4e:	4858      	ldr	r0, [pc, #352]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007d50:	f7fc fa14 	bl	800417c <assert_failed>
 8007d54:	e793      	b.n	8007c7e <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 8007d56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d58:	4b56      	ldr	r3, [pc, #344]	; (8007eb4 <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007d5a:	4a57      	ldr	r2, [pc, #348]	; (8007eb8 <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 8007d5c:	400b      	ands	r3, r1
 8007d5e:	f043 0302 	orr.w	r3, r3, #2
 8007d62:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007d64:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007d66:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007d68:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8007d6c:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007d6e:	6851      	ldr	r1, [r2, #4]
 8007d70:	6860      	ldr	r0, [r4, #4]
 8007d72:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d74:	484d      	ldr	r0, [pc, #308]	; (8007eac <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007d76:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007d78:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007d7a:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007d7c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007d80:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007d88:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007d8a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007d92:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007d94:	6859      	ldr	r1, [r3, #4]
 8007d96:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007d98:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007d9a:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007d9c:	6899      	ldr	r1, [r3, #8]
 8007d9e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8007da2:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007da4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007da6:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007da8:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007daa:	ea42 0205 	orr.w	r2, r2, r5
 8007dae:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007db0:	d05c      	beq.n	8007e6c <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007db2:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007db4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007db6:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8007dba:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	4311      	orrs	r1, r2
 8007dc0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007dc2:	6899      	ldr	r1, [r3, #8]
 8007dc4:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8007dc8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	432a      	orrs	r2, r5
 8007dce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007dd0:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007dd2:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007dd4:	f021 0102 	bic.w	r1, r1, #2
 8007dd8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8007de0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007de2:	f894 2020 	ldrb.w	r2, [r4, #32]
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	d051      	beq.n	8007e8e <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007dea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007dec:	3a01      	subs	r2, #1
 8007dee:	2a07      	cmp	r2, #7
 8007df0:	d864      	bhi.n	8007ebc <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007df2:	6859      	ldr	r1, [r3, #4]
 8007df4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007df8:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007dfa:	6859      	ldr	r1, [r3, #4]
 8007dfc:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8007e00:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e02:	6859      	ldr	r1, [r3, #4]
 8007e04:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8007e08:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8007e0c:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e0e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e10:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e14:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e16:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e1c:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e20:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e22:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007e24:	6899      	ldr	r1, [r3, #8]
 8007e26:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8007e2a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007e2c:	6899      	ldr	r1, [r3, #8]
 8007e2e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8007e32:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8007e36:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007e38:	6899      	ldr	r1, [r3, #8]
 8007e3a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007e3e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8007e46:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007e48:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8007e4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e4c:	f023 0303 	bic.w	r3, r3, #3
 8007e50:	f043 0301 	orr.w	r3, r3, #1
 8007e54:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8007e56:	2300      	movs	r3, #0
 8007e58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007e5c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f7fd fb1e 	bl	80054a0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007e64:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8007e66:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8007e6a:	e724      	b.n	8007cb6 <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e6c:	689a      	ldr	r2, [r3, #8]
 8007e6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e7a:	609a      	str	r2, [r3, #8]
 8007e7c:	e7a8      	b.n	8007dd0 <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8007e7e:	f240 115b 	movw	r1, #347	; 0x15b
 8007e82:	480b      	ldr	r0, [pc, #44]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007e84:	f7fc f97a 	bl	800417c <assert_failed>
 8007e88:	e711      	b.n	8007cae <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 8007e8a:	2001      	movs	r0, #1
}
 8007e8c:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e94:	605a      	str	r2, [r3, #4]
 8007e96:	e7b8      	b.n	8007e0a <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8007e98:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007e9c:	4804      	ldr	r0, [pc, #16]	; (8007eb0 <HAL_ADC_Init+0x2b4>)
 8007e9e:	f7fc f96d 	bl	800417c <assert_failed>
 8007ea2:	e6e8      	b.n	8007c76 <HAL_ADC_Init+0x7a>
 8007ea4:	40012000 	.word	0x40012000
 8007ea8:	40012100 	.word	0x40012100
 8007eac:	0f000001 	.word	0x0f000001
 8007eb0:	0802bac0 	.word	0x0802bac0
 8007eb4:	ffffeefd 	.word	0xffffeefd
 8007eb8:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007ebc:	f240 71ac 	movw	r1, #1964	; 0x7ac
 8007ec0:	4803      	ldr	r0, [pc, #12]	; (8007ed0 <HAL_ADC_Init+0x2d4>)
 8007ec2:	f7fc f95b 	bl	800417c <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007ec6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007ec8:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007eca:	3a01      	subs	r2, #1
 8007ecc:	e791      	b.n	8007df2 <HAL_ADC_Init+0x1f6>
 8007ece:	bf00      	nop
 8007ed0:	0802bac0 	.word	0x0802bac0

08007ed4 <HAL_ADC_Start>:
{
 8007ed4:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 8007ed6:	2300      	movs	r3, #0
{
 8007ed8:	b082      	sub	sp, #8
 8007eda:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8007edc:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007ede:	6983      	ldr	r3, [r0, #24]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d904      	bls.n	8007eee <HAL_ADC_Start+0x1a>
 8007ee4:	f240 21df 	movw	r1, #735	; 0x2df
 8007ee8:	4848      	ldr	r0, [pc, #288]	; (800800c <HAL_ADC_Start+0x138>)
 8007eea:	f7fc f947 	bl	800417c <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8007eee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ef0:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8007ef4:	d174      	bne.n	8007fe0 <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 8007ef6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d079      	beq.n	8007ff2 <HAL_ADC_Start+0x11e>
 8007efe:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007f00:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 8007f02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007f06:	6893      	ldr	r3, [r2, #8]
 8007f08:	07d8      	lsls	r0, r3, #31
 8007f0a:	d414      	bmi.n	8007f36 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007f0c:	4b40      	ldr	r3, [pc, #256]	; (8008010 <HAL_ADC_Start+0x13c>)
 8007f0e:	4841      	ldr	r0, [pc, #260]	; (8008014 <HAL_ADC_Start+0x140>)
 8007f10:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8007f12:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007f14:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8007f18:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007f1c:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8007f1e:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007f20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007f24:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	b12b      	cbz	r3, 8007f36 <HAL_ADC_Start+0x62>
      counter--;
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8007f30:	9b01      	ldr	r3, [sp, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f9      	bne.n	8007f2a <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007f36:	6890      	ldr	r0, [r2, #8]
 8007f38:	f010 0001 	ands.w	r0, r0, #1
 8007f3c:	d02c      	beq.n	8007f98 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 8007f3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007f40:	4b35      	ldr	r3, [pc, #212]	; (8008018 <HAL_ADC_Start+0x144>)
 8007f42:	400b      	ands	r3, r1
 8007f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f48:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007f4a:	6853      	ldr	r3, [r2, #4]
 8007f4c:	0559      	lsls	r1, r3, #21
 8007f4e:	d505      	bpl.n	8007f5c <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f5a:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f5e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8007f62:	d02f      	beq.n	8007fc4 <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007f64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007f66:	f023 0306 	bic.w	r3, r3, #6
 8007f6a:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007f6c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8007f70:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007f72:	4b2a      	ldr	r3, [pc, #168]	; (800801c <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 8007f74:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007f78:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007f7a:	6858      	ldr	r0, [r3, #4]
 8007f7c:	f010 001f 	ands.w	r0, r0, #31
 8007f80:	d114      	bne.n	8007fac <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007f82:	6893      	ldr	r3, [r2, #8]
 8007f84:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8007f88:	d10e      	bne.n	8007fa8 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007f8a:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 8007f8c:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007f8e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8007f92:	6091      	str	r1, [r2, #8]
}
 8007f94:	b002      	add	sp, #8
 8007f96:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f9a:	f043 0310 	orr.w	r3, r3, #16
 8007f9e:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fa0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007fa8:	b002      	add	sp, #8
 8007faa:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007fac:	481c      	ldr	r0, [pc, #112]	; (8008020 <HAL_ADC_Start+0x14c>)
 8007fae:	4282      	cmp	r2, r0
 8007fb0:	d00a      	beq.n	8007fc8 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007fb2:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007fb4:	06db      	lsls	r3, r3, #27
 8007fb6:	d402      	bmi.n	8007fbe <HAL_ADC_Start+0xea>
 8007fb8:	4c1a      	ldr	r4, [pc, #104]	; (8008024 <HAL_ADC_Start+0x150>)
 8007fba:	42a2      	cmp	r2, r4
 8007fbc:	d01c      	beq.n	8007ff8 <HAL_ADC_Start+0x124>
  return HAL_OK;
 8007fbe:	2000      	movs	r0, #0
}
 8007fc0:	b002      	add	sp, #8
 8007fc2:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8007fc4:	6463      	str	r3, [r4, #68]	; 0x44
 8007fc6:	e7d1      	b.n	8007f6c <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007fc8:	6893      	ldr	r3, [r2, #8]
 8007fca:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8007fce:	d103      	bne.n	8007fd8 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007fd0:	6893      	ldr	r3, [r2, #8]
 8007fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fd6:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007fd8:	4b10      	ldr	r3, [pc, #64]	; (800801c <HAL_ADC_Start+0x148>)
  return HAL_OK;
 8007fda:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007fdc:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007fde:	e7e3      	b.n	8007fa8 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8007fe0:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8007fe4:	4809      	ldr	r0, [pc, #36]	; (800800c <HAL_ADC_Start+0x138>)
 8007fe6:	f7fc f8c9 	bl	800417c <assert_failed>
  __HAL_LOCK(hadc);
 8007fea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d185      	bne.n	8007efe <HAL_ADC_Start+0x2a>
 8007ff2:	2002      	movs	r0, #2
}
 8007ff4:	b002      	add	sp, #8
 8007ff6:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007ff8:	68a0      	ldr	r0, [r4, #8]
 8007ffa:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8007ffe:	d1de      	bne.n	8007fbe <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008000:	68a3      	ldr	r3, [r4, #8]
 8008002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008006:	60a3      	str	r3, [r4, #8]
 8008008:	e7ce      	b.n	8007fa8 <HAL_ADC_Start+0xd4>
 800800a:	bf00      	nop
 800800c:	0802bac0 	.word	0x0802bac0
 8008010:	2000027c 	.word	0x2000027c
 8008014:	431bde83 	.word	0x431bde83
 8008018:	fffff8fe 	.word	0xfffff8fe
 800801c:	40012300 	.word	0x40012300
 8008020:	40012000 	.word	0x40012000
 8008024:	40012200 	.word	0x40012200

08008028 <HAL_ADC_ConvCpltCallback>:
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop

0800802c <HAL_ADC_LevelOutOfWindowCallback>:
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <HAL_ADC_ErrorCallback>:
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop

08008034 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008034:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 8008036:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008038:	2a01      	cmp	r2, #1
{
 800803a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 800803c:	681d      	ldr	r5, [r3, #0]
{
 800803e:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008040:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008042:	d904      	bls.n	800804e <HAL_ADC_IRQHandler+0x1a>
 8008044:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8008048:	4851      	ldr	r0, [pc, #324]	; (8008190 <HAL_ADC_IRQHandler+0x15c>)
 800804a:	f7fc f897 	bl	800417c <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800804e:	69e3      	ldr	r3, [r4, #28]
 8008050:	3b01      	subs	r3, #1
 8008052:	2b0f      	cmp	r3, #15
 8008054:	f200 8086 	bhi.w	8008164 <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8008058:	6963      	ldr	r3, [r4, #20]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d87c      	bhi.n	8008158 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 800805e:	07ab      	lsls	r3, r5, #30
 8008060:	d52c      	bpl.n	80080bc <HAL_ADC_IRQHandler+0x88>
 8008062:	06b0      	lsls	r0, r6, #26
 8008064:	d52a      	bpl.n	80080bc <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008068:	06d9      	lsls	r1, r3, #27
 800806a:	d403      	bmi.n	8008074 <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800806c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800806e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008072:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800807c:	d117      	bne.n	80080ae <HAL_ADC_IRQHandler+0x7a>
 800807e:	69a2      	ldr	r2, [r4, #24]
 8008080:	b9aa      	cbnz	r2, 80080ae <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008084:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8008088:	d002      	beq.n	8008090 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800808a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800808c:	0552      	lsls	r2, r2, #21
 800808e:	d40e      	bmi.n	80080ae <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	f022 0220 	bic.w	r2, r2, #32
 8008096:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800809a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800809e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080a2:	04d8      	lsls	r0, r3, #19
 80080a4:	d403      	bmi.n	80080ae <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80080a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7ff ffba 	bl	8008028 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	f06f 0212 	mvn.w	r2, #18
 80080ba:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80080bc:	0769      	lsls	r1, r5, #29
 80080be:	d530      	bpl.n	8008122 <HAL_ADC_IRQHandler+0xee>
 80080c0:	0632      	lsls	r2, r6, #24
 80080c2:	d52e      	bpl.n	8008122 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80080c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080c6:	06db      	lsls	r3, r3, #27
 80080c8:	d403      	bmi.n	80080d2 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80080ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80080d0:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80080da:	d11b      	bne.n	8008114 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80080dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80080de:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80080e2:	d151      	bne.n	8008188 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80080e4:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80080e6:	0551      	lsls	r1, r2, #21
 80080e8:	d414      	bmi.n	8008114 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80080ea:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80080ec:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80080f0:	d110      	bne.n	8008114 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80080f2:	69a2      	ldr	r2, [r4, #24]
 80080f4:	b972      	cbnz	r2, 8008114 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080fc:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80080fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008104:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008108:	05da      	lsls	r2, r3, #23
 800810a:	d403      	bmi.n	8008114 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800810c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008114:	4620      	mov	r0, r4
 8008116:	f000 f92f 	bl	8008378 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	f06f 020c 	mvn.w	r2, #12
 8008120:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008122:	0673      	lsls	r3, r6, #25
 8008124:	d505      	bpl.n	8008132 <HAL_ADC_IRQHandler+0xfe>
 8008126:	07e8      	lsls	r0, r5, #31
 8008128:	d503      	bpl.n	8008132 <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	07d9      	lsls	r1, r3, #31
 8008130:	d41e      	bmi.n	8008170 <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 8008132:	06aa      	lsls	r2, r5, #26
 8008134:	d501      	bpl.n	800813a <HAL_ADC_IRQHandler+0x106>
 8008136:	0173      	lsls	r3, r6, #5
 8008138:	d400      	bmi.n	800813c <HAL_ADC_IRQHandler+0x108>
}
 800813a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800813c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800813e:	f06f 0520 	mvn.w	r5, #32
 8008142:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 8008144:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008146:	f043 0302 	orr.w	r3, r3, #2
 800814a:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800814c:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 800814e:	f7ff ff6f 	bl	8008030 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	601d      	str	r5, [r3, #0]
}
 8008156:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8008158:	f240 41c3 	movw	r1, #1219	; 0x4c3
 800815c:	480c      	ldr	r0, [pc, #48]	; (8008190 <HAL_ADC_IRQHandler+0x15c>)
 800815e:	f7fc f80d 	bl	800417c <assert_failed>
 8008162:	e77c      	b.n	800805e <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8008164:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8008168:	4809      	ldr	r0, [pc, #36]	; (8008190 <HAL_ADC_IRQHandler+0x15c>)
 800816a:	f7fc f807 	bl	800417c <assert_failed>
 800816e:	e773      	b.n	8008058 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008170:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008172:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008178:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800817a:	f7ff ff57 	bl	800802c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	f06f 0201 	mvn.w	r2, #1
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	e7d4      	b.n	8008132 <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008188:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800818a:	0550      	lsls	r0, r2, #21
 800818c:	d4c2      	bmi.n	8008114 <HAL_ADC_IRQHandler+0xe0>
 800818e:	e7a9      	b.n	80080e4 <HAL_ADC_IRQHandler+0xb0>
 8008190:	0802bac0 	.word	0x0802bac0

08008194 <HAL_ADC_ConfigChannel>:
{
 8008194:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8008196:	2300      	movs	r3, #0
{
 8008198:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800819a:	4a71      	ldr	r2, [pc, #452]	; (8008360 <HAL_ADC_ConfigChannel+0x1cc>)
{
 800819c:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 800819e:	9301      	str	r3, [sp, #4]
{
 80081a0:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80081a2:	680b      	ldr	r3, [r1, #0]
 80081a4:	4293      	cmp	r3, r2
 80081a6:	bf18      	it	ne
 80081a8:	2b12      	cmpne	r3, #18
 80081aa:	d902      	bls.n	80081b2 <HAL_ADC_ConfigChannel+0x1e>
 80081ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b0:	d142      	bne.n	8008238 <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80081b2:	6863      	ldr	r3, [r4, #4]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	2b0f      	cmp	r3, #15
 80081b8:	d847      	bhi.n	800824a <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80081ba:	68a3      	ldr	r3, [r4, #8]
 80081bc:	2b07      	cmp	r3, #7
 80081be:	d84c      	bhi.n	800825a <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 80081c0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d051      	beq.n	800826c <HAL_ADC_ConfigChannel+0xd8>
 80081c8:	2301      	movs	r3, #1
 80081ca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80081ce:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80081d0:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80081d2:	2809      	cmp	r0, #9
 80081d4:	d94d      	bls.n	8008272 <HAL_ADC_ConfigChannel+0xde>
 80081d6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80081da:	d04a      	beq.n	8008272 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80081dc:	b281      	uxth	r1, r0
 80081de:	f04f 0c07 	mov.w	ip, #7
 80081e2:	68de      	ldr	r6, [r3, #12]
 80081e4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80081e8:	4f5d      	ldr	r7, [pc, #372]	; (8008360 <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80081ea:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80081ec:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80081ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80081f2:	ea26 060c 	bic.w	r6, r6, ip
 80081f6:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80081f8:	f000 8083 	beq.w	8008302 <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80081fc:	68a6      	ldr	r6, [r4, #8]
 80081fe:	4096      	lsls	r6, r2
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	4316      	orrs	r6, r2
 8008204:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 8008206:	6862      	ldr	r2, [r4, #4]
 8008208:	2a06      	cmp	r2, #6
 800820a:	d846      	bhi.n	800829a <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800820c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008210:	241f      	movs	r4, #31
 8008212:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008214:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008216:	4094      	lsls	r4, r2
 8008218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800821a:	ea22 0204 	bic.w	r2, r2, r4
 800821e:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008222:	4311      	orrs	r1, r2
 8008224:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008226:	4a4f      	ldr	r2, [pc, #316]	; (8008364 <HAL_ADC_ConfigChannel+0x1d0>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d048      	beq.n	80082be <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 800822c:	2300      	movs	r3, #0
  return HAL_OK;
 800822e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8008230:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8008234:	b003      	add	sp, #12
 8008236:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8008238:	f240 618b 	movw	r1, #1675	; 0x68b
 800823c:	484a      	ldr	r0, [pc, #296]	; (8008368 <HAL_ADC_ConfigChannel+0x1d4>)
 800823e:	f7fb ff9d 	bl	800417c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8008242:	6863      	ldr	r3, [r4, #4]
 8008244:	3b01      	subs	r3, #1
 8008246:	2b0f      	cmp	r3, #15
 8008248:	d9b7      	bls.n	80081ba <HAL_ADC_ConfigChannel+0x26>
 800824a:	f240 618c 	movw	r1, #1676	; 0x68c
 800824e:	4846      	ldr	r0, [pc, #280]	; (8008368 <HAL_ADC_ConfigChannel+0x1d4>)
 8008250:	f7fb ff94 	bl	800417c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8008254:	68a3      	ldr	r3, [r4, #8]
 8008256:	2b07      	cmp	r3, #7
 8008258:	d9b2      	bls.n	80081c0 <HAL_ADC_ConfigChannel+0x2c>
 800825a:	f240 618d 	movw	r1, #1677	; 0x68d
 800825e:	4842      	ldr	r0, [pc, #264]	; (8008368 <HAL_ADC_ConfigChannel+0x1d4>)
 8008260:	f7fb ff8c 	bl	800417c <assert_failed>
  __HAL_LOCK(hadc);
 8008264:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008268:	2b01      	cmp	r3, #1
 800826a:	d1ad      	bne.n	80081c8 <HAL_ADC_ConfigChannel+0x34>
 800826c:	2002      	movs	r0, #2
}
 800826e:	b003      	add	sp, #12
 8008270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008272:	b281      	uxth	r1, r0
 8008274:	f04f 0c07 	mov.w	ip, #7
 8008278:	691e      	ldr	r6, [r3, #16]
 800827a:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800827e:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008280:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008284:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008288:	ea26 060c 	bic.w	r6, r6, ip
 800828c:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800828e:	691e      	ldr	r6, [r3, #16]
 8008290:	4332      	orrs	r2, r6
 8008292:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 8008294:	6862      	ldr	r2, [r4, #4]
 8008296:	2a06      	cmp	r2, #6
 8008298:	d9b8      	bls.n	800820c <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 800829a:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800829c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 80082a0:	d81c      	bhi.n	80082dc <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80082a2:	3a23      	subs	r2, #35	; 0x23
 80082a4:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80082a6:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80082a8:	4094      	lsls	r4, r2
 80082aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ac:	ea22 0204 	bic.w	r2, r2, r4
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80082b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b4:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80082b6:	4a2b      	ldr	r2, [pc, #172]	; (8008364 <HAL_ADC_ConfigChannel+0x1d0>)
 80082b8:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80082ba:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80082bc:	d1b6      	bne.n	800822c <HAL_ADC_ConfigChannel+0x98>
 80082be:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80082c2:	d017      	beq.n	80082f4 <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80082c4:	2812      	cmp	r0, #18
 80082c6:	d123      	bne.n	8008310 <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80082c8:	4b28      	ldr	r3, [pc, #160]	; (800836c <HAL_ADC_ConfigChannel+0x1d8>)
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80082d0:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80082d8:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80082da:	e7a7      	b.n	800822c <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80082dc:	3a41      	subs	r2, #65	; 0x41
 80082de:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80082e0:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80082e2:	4094      	lsls	r4, r2
 80082e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e6:	ea22 0204 	bic.w	r2, r2, r4
 80082ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80082ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ee:	4311      	orrs	r1, r2
 80082f0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80082f2:	e798      	b.n	8008226 <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80082f4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80082f8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80082fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008300:	e794      	b.n	800822c <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8008302:	68a1      	ldr	r1, [r4, #8]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800830a:	2112      	movs	r1, #18
 800830c:	60da      	str	r2, [r3, #12]
 800830e:	e77a      	b.n	8008206 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008310:	4b13      	ldr	r3, [pc, #76]	; (8008360 <HAL_ADC_ConfigChannel+0x1cc>)
 8008312:	4298      	cmp	r0, r3
 8008314:	d001      	beq.n	800831a <HAL_ADC_ConfigChannel+0x186>
 8008316:	2811      	cmp	r0, #17
 8008318:	d188      	bne.n	800822c <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 800831a:	4b14      	ldr	r3, [pc, #80]	; (800836c <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800831c:	4910      	ldr	r1, [pc, #64]	; (8008360 <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 800831e:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008320:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8008322:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8008326:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800832e:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008330:	f47f af7c 	bne.w	800822c <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008334:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <HAL_ADC_ConfigChannel+0x1dc>)
 8008336:	4a0f      	ldr	r2, [pc, #60]	; (8008374 <HAL_ADC_ConfigChannel+0x1e0>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	fba2 2303 	umull	r2, r3, r2, r3
 800833e:	0c9b      	lsrs	r3, r3, #18
 8008340:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8008348:	9b01      	ldr	r3, [sp, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	f43f af6e 	beq.w	800822c <HAL_ADC_ConfigChannel+0x98>
        counter--;
 8008350:	9b01      	ldr	r3, [sp, #4]
 8008352:	3b01      	subs	r3, #1
 8008354:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8008356:	9b01      	ldr	r3, [sp, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1f9      	bne.n	8008350 <HAL_ADC_ConfigChannel+0x1bc>
 800835c:	e766      	b.n	800822c <HAL_ADC_ConfigChannel+0x98>
 800835e:	bf00      	nop
 8008360:	10000012 	.word	0x10000012
 8008364:	40012000 	.word	0x40012000
 8008368:	0802bac0 	.word	0x0802bac0
 800836c:	40012300 	.word	0x40012300
 8008370:	2000027c 	.word	0x2000027c
 8008374:	431bde83 	.word	0x431bde83

08008378 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop

0800837c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800837c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 800837e:	680b      	ldr	r3, [r1, #0]
{
 8008380:	460c      	mov	r4, r1
 8008382:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8008384:	2b19      	cmp	r3, #25
 8008386:	d93e      	bls.n	8008406 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8008388:	f240 31af 	movw	r1, #943	; 0x3af
 800838c:	4829      	ldr	r0, [pc, #164]	; (8008434 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 800838e:	f7fb fef5 	bl	800417c <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8008392:	6863      	ldr	r3, [r4, #4]
 8008394:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8008398:	d13e      	bne.n	8008418 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 800839a:	68a3      	ldr	r3, [r4, #8]
 800839c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a4:	bf18      	it	ne
 80083a6:	2b00      	cmpne	r3, #0
 80083a8:	bf14      	ite	ne
 80083aa:	2201      	movne	r2, #1
 80083ac:	2200      	moveq	r2, #0
 80083ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b2:	bf0c      	ite	eq
 80083b4:	2200      	moveq	r2, #0
 80083b6:	f002 0201 	andne.w	r2, r2, #1
 80083ba:	b112      	cbz	r2, 80083c2 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80083bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083c0:	d132      	bne.n	8008428 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80083c2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d02c      	beq.n	8008424 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 80083ca:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	f022 021f 	bic.w	r2, r2, #31
 80083d2:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	6821      	ldr	r1, [r4, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80083e2:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	6861      	ldr	r1, [r4, #4]
 80083e8:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083ea:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 80083ec:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80083f4:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 80083f6:	68a0      	ldr	r0, [r4, #8]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 80083fc:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 80083fe:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8008400:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8008404:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8008406:	4a0d      	ldr	r2, [pc, #52]	; (800843c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
 800840c:	07db      	lsls	r3, r3, #31
 800840e:	d5bb      	bpl.n	8008388 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8008416:	d0c0      	beq.n	800839a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008418:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 800841c:	4805      	ldr	r0, [pc, #20]	; (8008434 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 800841e:	f7fb fead 	bl	800417c <assert_failed>
 8008422:	e7ba      	b.n	800839a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8008424:	2002      	movs	r0, #2
}
 8008426:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8008428:	f240 31b1 	movw	r1, #945	; 0x3b1
 800842c:	4801      	ldr	r0, [pc, #4]	; (8008434 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 800842e:	f7fb fea5 	bl	800417c <assert_failed>
 8008432:	e7c6      	b.n	80083c2 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8008434:	0802baf8 	.word	0x0802baf8
 8008438:	40012300 	.word	0x40012300
 800843c:	02e602e7 	.word	0x02e602e7

08008440 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008440:	1ec3      	subs	r3, r0, #3
 8008442:	2b04      	cmp	r3, #4
{
 8008444:	b510      	push	{r4, lr}
 8008446:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008448:	d80c      	bhi.n	8008464 <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800844a:	4909      	ldr	r1, [pc, #36]	; (8008470 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800844c:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800844e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8008452:	4b08      	ldr	r3, [pc, #32]	; (8008474 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008454:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008456:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800845a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800845c:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 800845e:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 8008460:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008462:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008464:	2191      	movs	r1, #145	; 0x91
 8008466:	4804      	ldr	r0, [pc, #16]	; (8008478 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8008468:	f7fb fe88 	bl	800417c <assert_failed>
 800846c:	e7ed      	b.n	800844a <HAL_NVIC_SetPriorityGrouping+0xa>
 800846e:	bf00      	nop
 8008470:	e000ed00 	.word	0xe000ed00
 8008474:	05fa0000 	.word	0x05fa0000
 8008478:	0802bb34 	.word	0x0802bb34

0800847c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800847c:	2a0f      	cmp	r2, #15
{ 
 800847e:	b570      	push	{r4, r5, r6, lr}
 8008480:	4616      	mov	r6, r2
 8008482:	4605      	mov	r5, r0
 8008484:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008486:	d836      	bhi.n	80084f6 <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8008488:	2c0f      	cmp	r4, #15
 800848a:	d82f      	bhi.n	80084ec <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800848c:	4b1c      	ldr	r3, [pc, #112]	; (8008500 <HAL_NVIC_SetPriority+0x84>)
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008494:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008498:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800849a:	2804      	cmp	r0, #4
 800849c:	bf28      	it	cs
 800849e:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084a0:	2a06      	cmp	r2, #6
 80084a2:	d918      	bls.n	80084d6 <HAL_NVIC_SetPriority+0x5a>
 80084a4:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084a6:	f04f 32ff 	mov.w	r2, #4294967295
 80084aa:	409a      	lsls	r2, r3
 80084ac:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084b0:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80084b4:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084b6:	fa01 f100 	lsl.w	r1, r1, r0
 80084ba:	ea24 0401 	bic.w	r4, r4, r1
 80084be:	fa04 f403 	lsl.w	r4, r4, r3
 80084c2:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 80084c6:	db09      	blt.n	80084dc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084c8:	0124      	lsls	r4, r4, #4
 80084ca:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <HAL_NVIC_SetPriority+0x88>)
 80084cc:	b2e4      	uxtb	r4, r4
 80084ce:	442b      	add	r3, r5
 80084d0:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80084d4:	bd70      	pop	{r4, r5, r6, pc}
 80084d6:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084d8:	4633      	mov	r3, r6
 80084da:	e7e9      	b.n	80084b0 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084dc:	f005 050f 	and.w	r5, r5, #15
 80084e0:	0124      	lsls	r4, r4, #4
 80084e2:	4b09      	ldr	r3, [pc, #36]	; (8008508 <HAL_NVIC_SetPriority+0x8c>)
 80084e4:	b2e4      	uxtb	r4, r4
 80084e6:	442b      	add	r3, r5
 80084e8:	761c      	strb	r4, [r3, #24]
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80084ec:	21aa      	movs	r1, #170	; 0xaa
 80084ee:	4807      	ldr	r0, [pc, #28]	; (800850c <HAL_NVIC_SetPriority+0x90>)
 80084f0:	f7fb fe44 	bl	800417c <assert_failed>
 80084f4:	e7ca      	b.n	800848c <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80084f6:	21a9      	movs	r1, #169	; 0xa9
 80084f8:	4804      	ldr	r0, [pc, #16]	; (800850c <HAL_NVIC_SetPriority+0x90>)
 80084fa:	f7fb fe3f 	bl	800417c <assert_failed>
 80084fe:	e7c3      	b.n	8008488 <HAL_NVIC_SetPriority+0xc>
 8008500:	e000ed00 	.word	0xe000ed00
 8008504:	e000e100 	.word	0xe000e100
 8008508:	e000ecfc 	.word	0xe000ecfc
 800850c:	0802bb34 	.word	0x0802bb34

08008510 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008510:	2800      	cmp	r0, #0
 8008512:	db08      	blt.n	8008526 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008514:	f000 011f 	and.w	r1, r0, #31
 8008518:	2301      	movs	r3, #1
 800851a:	0940      	lsrs	r0, r0, #5
 800851c:	4a04      	ldr	r2, [pc, #16]	; (8008530 <HAL_NVIC_EnableIRQ+0x20>)
 800851e:	408b      	lsls	r3, r1
 8008520:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008524:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008526:	21bd      	movs	r1, #189	; 0xbd
 8008528:	4802      	ldr	r0, [pc, #8]	; (8008534 <HAL_NVIC_EnableIRQ+0x24>)
 800852a:	f7fb be27 	b.w	800417c <assert_failed>
 800852e:	bf00      	nop
 8008530:	e000e100 	.word	0xe000e100
 8008534:	0802bb34 	.word	0x0802bb34

08008538 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008538:	2800      	cmp	r0, #0
 800853a:	db0e      	blt.n	800855a <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800853c:	0943      	lsrs	r3, r0, #5
 800853e:	2201      	movs	r2, #1
 8008540:	f000 001f 	and.w	r0, r0, #31
 8008544:	4907      	ldr	r1, [pc, #28]	; (8008564 <HAL_NVIC_DisableIRQ+0x2c>)
 8008546:	3320      	adds	r3, #32
 8008548:	fa02 f000 	lsl.w	r0, r2, r0
 800854c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008550:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008554:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8008558:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800855a:	21cd      	movs	r1, #205	; 0xcd
 800855c:	4802      	ldr	r0, [pc, #8]	; (8008568 <HAL_NVIC_DisableIRQ+0x30>)
 800855e:	f7fb be0d 	b.w	800417c <assert_failed>
 8008562:	bf00      	nop
 8008564:	e000e100 	.word	0xe000e100
 8008568:	0802bb34 	.word	0x0802bb34

0800856c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800856c:	2800      	cmp	r0, #0
 800856e:	d075      	beq.n	800865c <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8008570:	4b3b      	ldr	r3, [pc, #236]	; (8008660 <HAL_CRC_Init+0xf4>)
 8008572:	6802      	ldr	r2, [r0, #0]
 8008574:	429a      	cmp	r2, r3
{
 8008576:	b510      	push	{r4, lr}
 8008578:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800857a:	d003      	beq.n	8008584 <HAL_CRC_Init+0x18>
 800857c:	2170      	movs	r1, #112	; 0x70
 800857e:	4839      	ldr	r0, [pc, #228]	; (8008664 <HAL_CRC_Init+0xf8>)
 8008580:	f7fb fdfc 	bl	800417c <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008584:	7f63      	ldrb	r3, [r4, #29]
 8008586:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800858a:	2b00      	cmp	r3, #0
 800858c:	d055      	beq.n	800863a <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800858e:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008590:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008592:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008594:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008596:	d838      	bhi.n	800860a <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008598:	2b00      	cmp	r3, #0
 800859a:	d13d      	bne.n	8008618 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	4a32      	ldr	r2, [pc, #200]	; (8008668 <HAL_CRC_Init+0xfc>)
 80085a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	f022 0218 	bic.w	r2, r2, #24
 80085a8:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80085aa:	7963      	ldrb	r3, [r4, #5]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d83c      	bhi.n	800862a <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80085b0:	b1e3      	cbz	r3, 80085ec <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80085b2:	6922      	ldr	r2, [r4, #16]
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80085b8:	6962      	ldr	r2, [r4, #20]
 80085ba:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 80085be:	d11d      	bne.n	80085fc <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80085c0:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80085c2:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80085c4:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80085c8:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80085ca:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80085ce:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80085d0:	d13d      	bne.n	800864e <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80085d2:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80085d4:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80085d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80085da:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80085dc:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80085de:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80085e0:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80085e2:	d82f      	bhi.n	8008644 <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80085e4:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80085e6:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 80085e8:	7763      	strb	r3, [r4, #29]
}
 80085ea:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80085ec:	f04f 32ff 	mov.w	r2, #4294967295
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80085f4:	6962      	ldr	r2, [r4, #20]
 80085f6:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 80085fa:	d0e1      	beq.n	80085c0 <HAL_CRC_Init+0x54>
 80085fc:	219c      	movs	r1, #156	; 0x9c
 80085fe:	4819      	ldr	r0, [pc, #100]	; (8008664 <HAL_CRC_Init+0xf8>)
 8008600:	f7fb fdbc 	bl	800417c <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008604:	6962      	ldr	r2, [r4, #20]
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	e7da      	b.n	80085c0 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800860a:	217e      	movs	r1, #126	; 0x7e
 800860c:	4815      	ldr	r0, [pc, #84]	; (8008664 <HAL_CRC_Init+0xf8>)
 800860e:	f7fb fdb5 	bl	800417c <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008612:	7923      	ldrb	r3, [r4, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0c1      	beq.n	800859c <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008618:	4620      	mov	r0, r4
 800861a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800861e:	f000 f825 	bl	800866c <HAL_CRCEx_Polynomial_Set>
 8008622:	2800      	cmp	r0, #0
 8008624:	d0c1      	beq.n	80085aa <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8008626:	2001      	movs	r0, #1
}
 8008628:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 800862a:	2190      	movs	r1, #144	; 0x90
 800862c:	480d      	ldr	r0, [pc, #52]	; (8008664 <HAL_CRC_Init+0xf8>)
 800862e:	f7fb fda5 	bl	800417c <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008632:	7963      	ldrb	r3, [r4, #5]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1bc      	bne.n	80085b2 <HAL_CRC_Init+0x46>
 8008638:	e7d8      	b.n	80085ec <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 800863a:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 800863c:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 800863e:	f7fc ffd1 	bl	80055e4 <HAL_CRC_MspInit>
 8008642:	e7a4      	b.n	800858e <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008644:	21a5      	movs	r1, #165	; 0xa5
 8008646:	4807      	ldr	r0, [pc, #28]	; (8008664 <HAL_CRC_Init+0xf8>)
 8008648:	f7fb fd98 	bl	800417c <assert_failed>
 800864c:	e7ca      	b.n	80085e4 <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800864e:	4805      	ldr	r0, [pc, #20]	; (8008664 <HAL_CRC_Init+0xf8>)
 8008650:	21a0      	movs	r1, #160	; 0xa0
 8008652:	f7fb fd93 	bl	800417c <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	69a0      	ldr	r0, [r4, #24]
 800865a:	e7ba      	b.n	80085d2 <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 800865c:	2001      	movs	r0, #1
}
 800865e:	4770      	bx	lr
 8008660:	40023000 	.word	0x40023000
 8008664:	0802bb70 	.word	0x0802bb70
 8008668:	04c11db7 	.word	0x04c11db7

0800866c <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 800866c:	f032 0318 	bics.w	r3, r2, #24
{
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	4616      	mov	r6, r2
 8008674:	4605      	mov	r5, r0
 8008676:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8008678:	d003      	beq.n	8008682 <HAL_CRCEx_Polynomial_Set+0x16>
 800867a:	215f      	movs	r1, #95	; 0x5f
 800867c:	4818      	ldr	r0, [pc, #96]	; (80086e0 <HAL_CRCEx_Polynomial_Set+0x74>)
 800867e:	f7fb fd7d 	bl	800417c <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008682:	231e      	movs	r3, #30
 8008684:	e001      	b.n	800868a <HAL_CRCEx_Polynomial_Set+0x1e>
 8008686:	3b01      	subs	r3, #1
 8008688:	d315      	bcc.n	80086b6 <HAL_CRCEx_Polynomial_Set+0x4a>
 800868a:	fa24 fc03 	lsr.w	ip, r4, r3
 800868e:	f01c 0f01 	tst.w	ip, #1
 8008692:	d0f8      	beq.n	8008686 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8008694:	2e18      	cmp	r6, #24
 8008696:	d80f      	bhi.n	80086b8 <HAL_CRCEx_Polynomial_Set+0x4c>
 8008698:	e8df f006 	tbb	[pc, r6]
 800869c:	0e0e0e12 	.word	0x0e0e0e12
 80086a0:	0e0e0e0e 	.word	0x0e0e0e0e
 80086a4:	0e0e0e1b 	.word	0x0e0e0e1b
 80086a8:	0e0e0e0e 	.word	0x0e0e0e0e
 80086ac:	0e0e0e1e 	.word	0x0e0e0e1e
 80086b0:	0e0e0e0e 	.word	0x0e0e0e0e
 80086b4:	10          	.byte	0x10
 80086b5:	00          	.byte	0x00
 80086b6:	b11e      	cbz	r6, 80086c0 <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 80086b8:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 80086bc:	2b06      	cmp	r3, #6
 80086be:	d8fb      	bhi.n	80086b8 <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80086c0:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80086c2:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 80086c4:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80086c6:	688b      	ldr	r3, [r1, #8]
 80086c8:	f023 0318 	bic.w	r3, r3, #24
 80086cc:	4333      	orrs	r3, r6
 80086ce:	608b      	str	r3, [r1, #8]
}
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 80086d2:	2b0f      	cmp	r3, #15
 80086d4:	d9f4      	bls.n	80086c0 <HAL_CRCEx_Polynomial_Set+0x54>
 80086d6:	e7ef      	b.n	80086b8 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 80086d8:	2b07      	cmp	r3, #7
 80086da:	d9f1      	bls.n	80086c0 <HAL_CRCEx_Polynomial_Set+0x54>
 80086dc:	e7ec      	b.n	80086b8 <HAL_CRCEx_Polynomial_Set+0x4c>
 80086de:	bf00      	nop
 80086e0:	0802bba8 	.word	0x0802bba8

080086e4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80086e4:	b1d8      	cbz	r0, 800871e <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80086e6:	4b0f      	ldr	r3, [pc, #60]	; (8008724 <HAL_DAC_Init+0x40>)
 80086e8:	6802      	ldr	r2, [r0, #0]
 80086ea:	429a      	cmp	r2, r3
{
 80086ec:	b510      	push	{r4, lr}
 80086ee:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80086f0:	d004      	beq.n	80086fc <HAL_DAC_Init+0x18>
 80086f2:	f240 1115 	movw	r1, #277	; 0x115
 80086f6:	480c      	ldr	r0, [pc, #48]	; (8008728 <HAL_DAC_Init+0x44>)
 80086f8:	f7fb fd40 	bl	800417c <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 80086fc:	7923      	ldrb	r3, [r4, #4]
 80086fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008702:	b13b      	cbz	r3, 8008714 <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008704:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8008706:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008708:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800870a:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800870c:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800870e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8008710:	7122      	strb	r2, [r4, #4]
}
 8008712:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 8008714:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8008716:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8008718:	f7fc ff7a 	bl	8005610 <HAL_DAC_MspInit>
 800871c:	e7f2      	b.n	8008704 <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 800871e:	2001      	movs	r0, #1
}
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	40007400 	.word	0x40007400
 8008728:	0802bbe4 	.word	0x0802bbe4

0800872c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800872c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008730:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8008732:	f031 0310 	bics.w	r3, r1, #16
{
 8008736:	460d      	mov	r5, r1
 8008738:	4604      	mov	r4, r0
 800873a:	4617      	mov	r7, r2
 800873c:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 800873e:	d16b      	bne.n	8008818 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 8008740:	f036 0304 	bics.w	r3, r6, #4
 8008744:	d001      	beq.n	800874a <HAL_DAC_Start_DMA+0x1e>
 8008746:	2e08      	cmp	r6, #8
 8008748:	d15b      	bne.n	8008802 <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 800874a:	7962      	ldrb	r2, [r4, #5]
 800874c:	2a01      	cmp	r2, #1
 800874e:	d060      	beq.n	8008812 <HAL_DAC_Start_DMA+0xe6>
 8008750:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008752:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 8008756:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008758:	2302      	movs	r3, #2
 800875a:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 800875c:	bb35      	cbnz	r5, 80087ac <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800875e:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008760:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008762:	4b39      	ldr	r3, [pc, #228]	; (8008848 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008764:	4a39      	ldr	r2, [pc, #228]	; (800884c <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008766:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008768:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800876c:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800876e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008772:	4a37      	ldr	r2, [pc, #220]	; (8008850 <HAL_DAC_Start_DMA+0x124>)
 8008774:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008776:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 800877a:	d059      	beq.n	8008830 <HAL_DAC_Start_DMA+0x104>
 800877c:	2e08      	cmp	r6, #8
 800877e:	d054      	beq.n	800882a <HAL_DAC_Start_DMA+0xfe>
 8008780:	2e00      	cmp	r6, #0
 8008782:	d04f      	beq.n	8008824 <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008784:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008786:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800878a:	4643      	mov	r3, r8
 800878c:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800878e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8008792:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008796:	f000 fbe3 	bl	8008f60 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800879a:	2300      	movs	r3, #0
 800879c:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800879e:	b330      	cbz	r0, 80087ee <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	f043 0304 	orr.w	r3, r3, #4
 80087a6:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 80087a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80087ac:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 80087ae:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80087b0:	4b28      	ldr	r3, [pc, #160]	; (8008854 <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80087b2:	4a29      	ldr	r2, [pc, #164]	; (8008858 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80087b4:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80087b6:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80087ba:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80087bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80087c0:	4a26      	ldr	r2, [pc, #152]	; (800885c <HAL_DAC_Start_DMA+0x130>)
 80087c2:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80087c4:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 80087c8:	d03b      	beq.n	8008842 <HAL_DAC_Start_DMA+0x116>
 80087ca:	2e08      	cmp	r6, #8
 80087cc:	d036      	beq.n	800883c <HAL_DAC_Start_DMA+0x110>
 80087ce:	b396      	cbz	r6, 8008836 <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80087d0:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80087d2:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80087d6:	4643      	mov	r3, r8
 80087d8:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80087da:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80087de:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80087e2:	f000 fbbd 	bl	8008f60 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 80087e6:	2300      	movs	r3, #0
 80087e8:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d1d8      	bne.n	80087a0 <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	f005 0110 	and.w	r1, r5, #16
 80087f4:	2501      	movs	r5, #1
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	408d      	lsls	r5, r1
 80087fa:	4315      	orrs	r5, r2
 80087fc:	601d      	str	r5, [r3, #0]
}
 80087fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8008802:	f44f 7104 	mov.w	r1, #528	; 0x210
 8008806:	4816      	ldr	r0, [pc, #88]	; (8008860 <HAL_DAC_Start_DMA+0x134>)
 8008808:	f7fb fcb8 	bl	800417c <assert_failed>
  __HAL_LOCK(hdac);
 800880c:	7962      	ldrb	r2, [r4, #5]
 800880e:	2a01      	cmp	r2, #1
 8008810:	d19e      	bne.n	8008750 <HAL_DAC_Start_DMA+0x24>
 8008812:	2002      	movs	r0, #2
}
 8008814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008818:	f240 210f 	movw	r1, #527	; 0x20f
 800881c:	4810      	ldr	r0, [pc, #64]	; (8008860 <HAL_DAC_Start_DMA+0x134>)
 800881e:	f7fb fcad 	bl	800417c <assert_failed>
 8008822:	e78d      	b.n	8008740 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008824:	f10c 0208 	add.w	r2, ip, #8
        break;
 8008828:	e7ad      	b.n	8008786 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800882a:	f10c 0210 	add.w	r2, ip, #16
        break;
 800882e:	e7aa      	b.n	8008786 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008830:	f10c 020c 	add.w	r2, ip, #12
        break;
 8008834:	e7a7      	b.n	8008786 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008836:	f10c 0214 	add.w	r2, ip, #20
        break;
 800883a:	e7ca      	b.n	80087d2 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800883c:	f10c 021c 	add.w	r2, ip, #28
        break;
 8008840:	e7c7      	b.n	80087d2 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008842:	f10c 0218 	add.w	r2, ip, #24
        break;
 8008846:	e7c4      	b.n	80087d2 <HAL_DAC_Start_DMA+0xa6>
 8008848:	080088f5 	.word	0x080088f5
 800884c:	08008909 	.word	0x08008909
 8008850:	08008919 	.word	0x08008919
 8008854:	08008a6d 	.word	0x08008a6d
 8008858:	08008a7d 	.word	0x08008a7d
 800885c:	08008a89 	.word	0x08008a89
 8008860:	0802bbe4 	.word	0x0802bbe4

08008864 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008864:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8008866:	f031 0310 	bics.w	r3, r1, #16
{
 800886a:	460d      	mov	r5, r1
 800886c:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 800886e:	d11e      	bne.n	80088ae <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008870:	6803      	ldr	r3, [r0, #0]
 8008872:	f001 0e10 	and.w	lr, r1, #16
 8008876:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800887a:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 8008882:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008886:	ea20 000c 	bic.w	r0, r0, ip
 800888a:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	ea22 0201 	bic.w	r2, r2, r1
 8008892:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8008894:	bb05      	cbnz	r5, 80088d8 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8008896:	68a0      	ldr	r0, [r4, #8]
 8008898:	f000 fbbe 	bl	8009018 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800889c:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800889e:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80088a0:	6813      	ldr	r3, [r2, #0]
 80088a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088a6:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80088a8:	2301      	movs	r3, #1
 80088aa:	7123      	strb	r3, [r4, #4]
}
 80088ac:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 80088ae:	f240 218f 	movw	r1, #655	; 0x28f
 80088b2:	480f      	ldr	r0, [pc, #60]	; (80088f0 <HAL_DAC_Stop_DMA+0x8c>)
 80088b4:	f7fb fc62 	bl	800417c <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80088b8:	f005 0510 	and.w	r5, r5, #16
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 80088c2:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 80088c8:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80088ca:	ea22 0200 	bic.w	r2, r2, r0
 80088ce:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 80088d0:	681d      	ldr	r5, [r3, #0]
 80088d2:	ea25 0501 	bic.w	r5, r5, r1
 80088d6:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80088d8:	68e0      	ldr	r0, [r4, #12]
 80088da:	f000 fb9d 	bl	8009018 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80088de:	6822      	ldr	r2, [r4, #0]
}
 80088e0:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80088e2:	6813      	ldr	r3, [r2, #0]
 80088e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088e8:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80088ea:	2301      	movs	r3, #1
 80088ec:	7123      	strb	r3, [r4, #4]
}
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	0802bbe4 	.word	0x0802bbe4

080088f4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80088f4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088f6:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80088f8:	4620      	mov	r0, r4
 80088fa:	f7fa fb59 	bl	8002fb0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80088fe:	2301      	movs	r3, #1
 8008900:	7123      	strb	r3, [r4, #4]
}
 8008902:	bd10      	pop	{r4, pc}

08008904 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008908:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800890a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800890c:	f7ff fffa 	bl	8008904 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008910:	bd08      	pop	{r3, pc}
 8008912:	bf00      	nop

08008914 <HAL_DAC_ErrorCallbackCh1>:
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008918:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800891a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800891c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800891e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008920:	f043 0304 	orr.w	r3, r3, #4
 8008924:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008926:	f7ff fff5 	bl	8008914 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800892a:	2301      	movs	r3, #1
 800892c:	7123      	strb	r3, [r4, #4]
}
 800892e:	bd10      	pop	{r4, pc}

08008930 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop

08008934 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008934:	6803      	ldr	r3, [r0, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	0491      	lsls	r1, r2, #18
{
 800893a:	b510      	push	{r4, lr}
 800893c:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800893e:	d502      	bpl.n	8008946 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8008940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008942:	0492      	lsls	r2, r2, #18
 8008944:	d418      	bmi.n	8008978 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	0091      	lsls	r1, r2, #2
 800894a:	d502      	bpl.n	8008952 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800894c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800894e:	0092      	lsls	r2, r2, #2
 8008950:	d400      	bmi.n	8008954 <HAL_DAC_IRQHandler+0x20>
}
 8008952:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8008954:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008956:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800895a:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 800895c:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800895e:	6922      	ldr	r2, [r4, #16]
 8008960:	f042 0202 	orr.w	r2, r2, #2
 8008964:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008966:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 800896e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008972:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008974:	f000 b878 	b.w	8008a68 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8008978:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800897a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 800897e:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008980:	6902      	ldr	r2, [r0, #16]
 8008982:	f042 0201 	orr.w	r2, r2, #1
 8008986:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008988:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008990:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8008992:	f7ff ffcd 	bl	8008930 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	e7d5      	b.n	8008946 <HAL_DAC_IRQHandler+0x12>
 800899a:	bf00      	nop

0800899c <HAL_DAC_ConfigChannel>:
{
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80089a0:	6808      	ldr	r0, [r1, #0]
{
 80089a2:	4616      	mov	r6, r2
 80089a4:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80089a6:	f020 0308 	bic.w	r3, r0, #8
 80089aa:	f020 0204 	bic.w	r2, r0, #4
 80089ae:	2b24      	cmp	r3, #36	; 0x24
 80089b0:	bf18      	it	ne
 80089b2:	2a00      	cmpne	r2, #0
 80089b4:	f020 0210 	bic.w	r2, r0, #16
 80089b8:	bf14      	ite	ne
 80089ba:	2301      	movne	r3, #1
 80089bc:	2300      	moveq	r3, #0
 80089be:	283c      	cmp	r0, #60	; 0x3c
 80089c0:	bf0c      	ite	eq
 80089c2:	2300      	moveq	r3, #0
 80089c4:	f003 0301 	andne.w	r3, r3, #1
 80089c8:	2a0c      	cmp	r2, #12
 80089ca:	bf0c      	ite	eq
 80089cc:	2300      	moveq	r3, #0
 80089ce:	f003 0301 	andne.w	r3, r3, #1
 80089d2:	b11b      	cbz	r3, 80089dc <HAL_DAC_ConfigChannel+0x40>
 80089d4:	f020 0020 	bic.w	r0, r0, #32
 80089d8:	2814      	cmp	r0, #20
 80089da:	d137      	bne.n	8008a4c <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 80089dc:	686b      	ldr	r3, [r5, #4]
 80089de:	f033 0302 	bics.w	r3, r3, #2
 80089e2:	d12d      	bne.n	8008a40 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 80089e4:	f036 0310 	bics.w	r3, r6, #16
 80089e8:	d120      	bne.n	8008a2c <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 80089ea:	7963      	ldrb	r3, [r4, #5]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d025      	beq.n	8008a3c <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80089f0:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 80089f4:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80089f6:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 80089fa:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80089fc:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80089fe:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008a02:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 8008a06:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008a08:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 8008a0a:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a0c:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008a0e:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 8008a12:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a14:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008a16:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8008a18:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008a1a:	4082      	lsls	r2, r0
 8008a1c:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 8008a1e:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008a20:	ea23 0302 	bic.w	r3, r3, r2
 8008a24:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008a26:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8008a28:	7165      	strb	r5, [r4, #5]
}
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008a2c:	f240 31a6 	movw	r1, #934	; 0x3a6
 8008a30:	4809      	ldr	r0, [pc, #36]	; (8008a58 <HAL_DAC_ConfigChannel+0xbc>)
 8008a32:	f7fb fba3 	bl	800417c <assert_failed>
  __HAL_LOCK(hdac);
 8008a36:	7963      	ldrb	r3, [r4, #5]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d1d9      	bne.n	80089f0 <HAL_DAC_ConfigChannel+0x54>
 8008a3c:	2002      	movs	r0, #2
}
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008a40:	f240 31a5 	movw	r1, #933	; 0x3a5
 8008a44:	4804      	ldr	r0, [pc, #16]	; (8008a58 <HAL_DAC_ConfigChannel+0xbc>)
 8008a46:	f7fb fb99 	bl	800417c <assert_failed>
 8008a4a:	e7cb      	b.n	80089e4 <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008a4c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8008a50:	4801      	ldr	r0, [pc, #4]	; (8008a58 <HAL_DAC_ConfigChannel+0xbc>)
 8008a52:	f7fb fb93 	bl	800417c <assert_failed>
 8008a56:	e7c1      	b.n	80089dc <HAL_DAC_ConfigChannel+0x40>
 8008a58:	0802bbe4 	.word	0x0802bbe4

08008a5c <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop

08008a60 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop

08008a64 <HAL_DACEx_ErrorCallbackCh2>:
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop

08008a68 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop

08008a6c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008a6c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a6e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008a70:	4620      	mov	r0, r4
 8008a72:	f7ff fff3 	bl	8008a5c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008a76:	2301      	movs	r3, #1
 8008a78:	7123      	strb	r3, [r4, #4]
}
 8008a7a:	bd10      	pop	{r4, pc}

08008a7c <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008a7c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008a7e:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008a80:	f7ff ffee 	bl	8008a60 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008a84:	bd08      	pop	{r3, pc}
 8008a86:	bf00      	nop

08008a88 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008a88:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a8a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008a8c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008a8e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008a90:	f043 0304 	orr.w	r3, r3, #4
 8008a94:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008a96:	f7ff ffe5 	bl	8008a64 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	7123      	strb	r3, [r4, #4]
}
 8008a9e:	bd10      	pop	{r4, pc}

08008aa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8008aa4:	f7ff f892 	bl	8007bcc <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008aa8:	2c00      	cmp	r4, #0
 8008aaa:	f000 8156 	beq.w	8008d5a <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	4bad      	ldr	r3, [pc, #692]	; (8008d68 <HAL_DMA_Init+0x2c8>)
 8008ab4:	49ad      	ldr	r1, [pc, #692]	; (8008d6c <HAL_DMA_Init+0x2cc>)
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	bf18      	it	ne
 8008aba:	428a      	cmpne	r2, r1
 8008abc:	f101 0118 	add.w	r1, r1, #24
 8008ac0:	bf14      	ite	ne
 8008ac2:	2301      	movne	r3, #1
 8008ac4:	2300      	moveq	r3, #0
 8008ac6:	428a      	cmp	r2, r1
 8008ac8:	bf0c      	ite	eq
 8008aca:	2300      	moveq	r3, #0
 8008acc:	f003 0301 	andne.w	r3, r3, #1
 8008ad0:	3118      	adds	r1, #24
 8008ad2:	428a      	cmp	r2, r1
 8008ad4:	bf0c      	ite	eq
 8008ad6:	2300      	moveq	r3, #0
 8008ad8:	f003 0301 	andne.w	r3, r3, #1
 8008adc:	3118      	adds	r1, #24
 8008ade:	428a      	cmp	r2, r1
 8008ae0:	bf0c      	ite	eq
 8008ae2:	2300      	moveq	r3, #0
 8008ae4:	f003 0301 	andne.w	r3, r3, #1
 8008ae8:	3118      	adds	r1, #24
 8008aea:	428a      	cmp	r2, r1
 8008aec:	bf0c      	ite	eq
 8008aee:	2300      	moveq	r3, #0
 8008af0:	f003 0301 	andne.w	r3, r3, #1
 8008af4:	3118      	adds	r1, #24
 8008af6:	428a      	cmp	r2, r1
 8008af8:	bf0c      	ite	eq
 8008afa:	2300      	moveq	r3, #0
 8008afc:	f003 0301 	andne.w	r3, r3, #1
 8008b00:	3118      	adds	r1, #24
 8008b02:	428a      	cmp	r2, r1
 8008b04:	bf0c      	ite	eq
 8008b06:	2300      	moveq	r3, #0
 8008b08:	f003 0301 	andne.w	r3, r3, #1
 8008b0c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8008b10:	428a      	cmp	r2, r1
 8008b12:	bf0c      	ite	eq
 8008b14:	2300      	moveq	r3, #0
 8008b16:	f003 0301 	andne.w	r3, r3, #1
 8008b1a:	3118      	adds	r1, #24
 8008b1c:	428a      	cmp	r2, r1
 8008b1e:	bf0c      	ite	eq
 8008b20:	2300      	moveq	r3, #0
 8008b22:	f003 0301 	andne.w	r3, r3, #1
 8008b26:	3118      	adds	r1, #24
 8008b28:	428a      	cmp	r2, r1
 8008b2a:	bf0c      	ite	eq
 8008b2c:	2300      	moveq	r3, #0
 8008b2e:	f003 0301 	andne.w	r3, r3, #1
 8008b32:	3118      	adds	r1, #24
 8008b34:	428a      	cmp	r2, r1
 8008b36:	bf0c      	ite	eq
 8008b38:	2300      	moveq	r3, #0
 8008b3a:	f003 0301 	andne.w	r3, r3, #1
 8008b3e:	3118      	adds	r1, #24
 8008b40:	428a      	cmp	r2, r1
 8008b42:	bf0c      	ite	eq
 8008b44:	2300      	moveq	r3, #0
 8008b46:	f003 0301 	andne.w	r3, r3, #1
 8008b4a:	3118      	adds	r1, #24
 8008b4c:	428a      	cmp	r2, r1
 8008b4e:	bf0c      	ite	eq
 8008b50:	2300      	moveq	r3, #0
 8008b52:	f003 0301 	andne.w	r3, r3, #1
 8008b56:	3118      	adds	r1, #24
 8008b58:	428a      	cmp	r2, r1
 8008b5a:	bf0c      	ite	eq
 8008b5c:	2300      	moveq	r3, #0
 8008b5e:	f003 0301 	andne.w	r3, r3, #1
 8008b62:	b11b      	cbz	r3, 8008b6c <HAL_DMA_Init+0xcc>
 8008b64:	4b82      	ldr	r3, [pc, #520]	; (8008d70 <HAL_DMA_Init+0x2d0>)
 8008b66:	429a      	cmp	r2, r3
 8008b68:	f040 8139 	bne.w	8008dde <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8008b6c:	6863      	ldr	r3, [r4, #4]
 8008b6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b76:	bf18      	it	ne
 8008b78:	2b00      	cmpne	r3, #0
 8008b7a:	bf14      	ite	ne
 8008b7c:	2201      	movne	r2, #1
 8008b7e:	2200      	moveq	r2, #0
 8008b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b84:	bf0c      	ite	eq
 8008b86:	2200      	moveq	r2, #0
 8008b88:	f002 0201 	andne.w	r2, r2, #1
 8008b8c:	b11a      	cbz	r2, 8008b96 <HAL_DMA_Init+0xf6>
 8008b8e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008b92:	f040 8129 	bne.w	8008de8 <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8008b96:	68a3      	ldr	r3, [r4, #8]
 8008b98:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8008b9c:	d002      	beq.n	8008ba4 <HAL_DMA_Init+0x104>
 8008b9e:	2b80      	cmp	r3, #128	; 0x80
 8008ba0:	f040 80a8 	bne.w	8008cf4 <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8008ba4:	68e3      	ldr	r3, [r4, #12]
 8008ba6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008baa:	f040 80ac 	bne.w	8008d06 <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8008bb4:	f040 80b0 	bne.w	8008d18 <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8008bb8:	6963      	ldr	r3, [r4, #20]
 8008bba:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8008bbe:	d003      	beq.n	8008bc8 <HAL_DMA_Init+0x128>
 8008bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc4:	f040 8091 	bne.w	8008cea <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8008bc8:	69a3      	ldr	r3, [r4, #24]
 8008bca:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8008bce:	d003      	beq.n	8008bd8 <HAL_DMA_Init+0x138>
 8008bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bd4:	f040 8084 	bne.w	8008ce0 <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8008bd8:	69e3      	ldr	r3, [r4, #28]
 8008bda:	f033 0220 	bics.w	r2, r3, #32
 8008bde:	d002      	beq.n	8008be6 <HAL_DMA_Init+0x146>
 8008be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be4:	d16f      	bne.n	8008cc6 <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8008be6:	6a23      	ldr	r3, [r4, #32]
 8008be8:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008bec:	d173      	bne.n	8008cd6 <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8008bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf0:	f033 0204 	bics.w	r2, r3, #4
 8008bf4:	d15f      	bne.n	8008cb6 <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d14d      	bne.n	8008c96 <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008bfa:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8008bfc:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8008bfe:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 8008c00:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8008c04:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	f022 0201 	bic.w	r2, r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c10:	e006      	b.n	8008c20 <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c12:	f7fe ffdb 	bl	8007bcc <HAL_GetTick>
 8008c16:	1b40      	subs	r0, r0, r5
 8008c18:	2805      	cmp	r0, #5
 8008c1a:	f200 8082 	bhi.w	8008d22 <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	07d1      	lsls	r1, r2, #31
 8008c24:	d4f5      	bmi.n	8008c12 <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008c26:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 8008c2a:	68e1      	ldr	r1, [r4, #12]
 8008c2c:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008c2e:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 8008c30:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008c32:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008c34:	6921      	ldr	r1, [r4, #16]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	6961      	ldr	r1, [r4, #20]
 8008c3a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008c3c:	69e1      	ldr	r1, [r4, #28]
 8008c3e:	4302      	orrs	r2, r0
 8008c40:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008c42:	494c      	ldr	r1, [pc, #304]	; (8008d74 <HAL_DMA_Init+0x2d4>)
 8008c44:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8008c46:	6a25      	ldr	r5, [r4, #32]
 8008c48:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008c4a:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c4e:	2904      	cmp	r1, #4
 8008c50:	d06e      	beq.n	8008d30 <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008c54:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008c56:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008c5a:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c5c:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8008c5e:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c60:	4945      	ldr	r1, [pc, #276]	; (8008d78 <HAL_DMA_Init+0x2d8>)
 8008c62:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c64:	4845      	ldr	r0, [pc, #276]	; (8008d7c <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c66:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8008c6a:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c6c:	4a44      	ldr	r2, [pc, #272]	; (8008d80 <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c6e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c72:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c76:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c7a:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c7c:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c80:	bf88      	it	hi
 8008c82:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c84:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c86:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c88:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c8a:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8008c8c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c8e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008c90:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8008c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d860      	bhi.n	8008d5e <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8008c9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c9e:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8008ca2:	d171      	bne.n	8008d88 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8008ca4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ca6:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8008caa:	d0a6      	beq.n	8008bfa <HAL_DMA_Init+0x15a>
 8008cac:	21c8      	movs	r1, #200	; 0xc8
 8008cae:	4835      	ldr	r0, [pc, #212]	; (8008d84 <HAL_DMA_Init+0x2e4>)
 8008cb0:	f7fb fa64 	bl	800417c <assert_failed>
 8008cb4:	e7a1      	b.n	8008bfa <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8008cb6:	21c1      	movs	r1, #193	; 0xc1
 8008cb8:	4832      	ldr	r0, [pc, #200]	; (8008d84 <HAL_DMA_Init+0x2e4>)
 8008cba:	f7fb fa5f 	bl	800417c <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8008cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d09a      	beq.n	8008bfa <HAL_DMA_Init+0x15a>
 8008cc4:	e7e7      	b.n	8008c96 <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8008cc6:	21bf      	movs	r1, #191	; 0xbf
 8008cc8:	482e      	ldr	r0, [pc, #184]	; (8008d84 <HAL_DMA_Init+0x2e4>)
 8008cca:	f7fb fa57 	bl	800417c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8008cce:	6a23      	ldr	r3, [r4, #32]
 8008cd0:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008cd4:	d08b      	beq.n	8008bee <HAL_DMA_Init+0x14e>
 8008cd6:	21c0      	movs	r1, #192	; 0xc0
 8008cd8:	482a      	ldr	r0, [pc, #168]	; (8008d84 <HAL_DMA_Init+0x2e4>)
 8008cda:	f7fb fa4f 	bl	800417c <assert_failed>
 8008cde:	e786      	b.n	8008bee <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8008ce0:	21be      	movs	r1, #190	; 0xbe
 8008ce2:	4828      	ldr	r0, [pc, #160]	; (8008d84 <HAL_DMA_Init+0x2e4>)
 8008ce4:	f7fb fa4a 	bl	800417c <assert_failed>
 8008ce8:	e776      	b.n	8008bd8 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8008cea:	21bd      	movs	r1, #189	; 0xbd
 8008cec:	4825      	ldr	r0, [pc, #148]	; (8008d84 <HAL_DMA_Init+0x2e4>)
 8008cee:	f7fb fa45 	bl	800417c <assert_failed>
 8008cf2:	e769      	b.n	8008bc8 <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8008cf4:	21ba      	movs	r1, #186	; 0xba
 8008cf6:	4823      	ldr	r0, [pc, #140]	; (8008d84 <HAL_DMA_Init+0x2e4>)
 8008cf8:	f7fb fa40 	bl	800417c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8008cfc:	68e3      	ldr	r3, [r4, #12]
 8008cfe:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008d02:	f43f af54 	beq.w	8008bae <HAL_DMA_Init+0x10e>
 8008d06:	21bb      	movs	r1, #187	; 0xbb
 8008d08:	481e      	ldr	r0, [pc, #120]	; (8008d84 <HAL_DMA_Init+0x2e4>)
 8008d0a:	f7fb fa37 	bl	800417c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8008d0e:	6923      	ldr	r3, [r4, #16]
 8008d10:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8008d14:	f43f af50 	beq.w	8008bb8 <HAL_DMA_Init+0x118>
 8008d18:	21bc      	movs	r1, #188	; 0xbc
 8008d1a:	481a      	ldr	r0, [pc, #104]	; (8008d84 <HAL_DMA_Init+0x2e4>)
 8008d1c:	f7fb fa2e 	bl	800417c <assert_failed>
 8008d20:	e74a      	b.n	8008bb8 <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d24:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008d26:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d28:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d2a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008d30:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8008d34:	4329      	orrs	r1, r5
 8008d36:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8008d38:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8008d3a:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8008d3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008d3e:	f021 0107 	bic.w	r1, r1, #7
 8008d42:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8008d44:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008d48:	2d00      	cmp	r5, #0
 8008d4a:	d087      	beq.n	8008c5c <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008d4c:	bb08      	cbnz	r0, 8008d92 <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 8008d4e:	2a01      	cmp	r2, #1
 8008d50:	d040      	beq.n	8008dd4 <HAL_DMA_Init+0x334>
 8008d52:	f032 0202 	bics.w	r2, r2, #2
 8008d56:	d181      	bne.n	8008c5c <HAL_DMA_Init+0x1bc>
 8008d58:	e023      	b.n	8008da2 <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 8008d5a:	2001      	movs	r0, #1
}
 8008d5c:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8008d5e:	21c6      	movs	r1, #198	; 0xc6
 8008d60:	4808      	ldr	r0, [pc, #32]	; (8008d84 <HAL_DMA_Init+0x2e4>)
 8008d62:	f7fb fa0b 	bl	800417c <assert_failed>
 8008d66:	e799      	b.n	8008c9c <HAL_DMA_Init+0x1fc>
 8008d68:	40026010 	.word	0x40026010
 8008d6c:	40026028 	.word	0x40026028
 8008d70:	400264b8 	.word	0x400264b8
 8008d74:	e010803f 	.word	0xe010803f
 8008d78:	aaaaaaab 	.word	0xaaaaaaab
 8008d7c:	0802bc54 	.word	0x0802bc54
 8008d80:	fffffc00 	.word	0xfffffc00
 8008d84:	0802bc1c 	.word	0x0802bc1c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8008d88:	21c7      	movs	r1, #199	; 0xc7
 8008d8a:	481a      	ldr	r0, [pc, #104]	; (8008df4 <HAL_DMA_Init+0x354>)
 8008d8c:	f7fb f9f6 	bl	800417c <assert_failed>
 8008d90:	e788      	b.n	8008ca4 <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d92:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008d96:	d00e      	beq.n	8008db6 <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008d98:	2a02      	cmp	r2, #2
 8008d9a:	d905      	bls.n	8008da8 <HAL_DMA_Init+0x308>
 8008d9c:	2a03      	cmp	r2, #3
 8008d9e:	f47f af5d 	bne.w	8008c5c <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008da2:	01ea      	lsls	r2, r5, #7
 8008da4:	f57f af5a 	bpl.w	8008c5c <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 8008da8:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008daa:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8008dac:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008dae:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8008db0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008db4:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8008db6:	2a03      	cmp	r2, #3
 8008db8:	f63f af50 	bhi.w	8008c5c <HAL_DMA_Init+0x1bc>
 8008dbc:	a001      	add	r0, pc, #4	; (adr r0, 8008dc4 <HAL_DMA_Init+0x324>)
 8008dbe:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8008dc2:	bf00      	nop
 8008dc4:	08008da9 	.word	0x08008da9
 8008dc8:	08008da3 	.word	0x08008da3
 8008dcc:	08008da9 	.word	0x08008da9
 8008dd0:	08008dd5 	.word	0x08008dd5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008dd4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8008dd8:	f47f af40 	bne.w	8008c5c <HAL_DMA_Init+0x1bc>
 8008ddc:	e7e4      	b.n	8008da8 <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008dde:	21b8      	movs	r1, #184	; 0xb8
 8008de0:	4804      	ldr	r0, [pc, #16]	; (8008df4 <HAL_DMA_Init+0x354>)
 8008de2:	f7fb f9cb 	bl	800417c <assert_failed>
 8008de6:	e6c1      	b.n	8008b6c <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8008de8:	21b9      	movs	r1, #185	; 0xb9
 8008dea:	4802      	ldr	r0, [pc, #8]	; (8008df4 <HAL_DMA_Init+0x354>)
 8008dec:	f7fb f9c6 	bl	800417c <assert_failed>
 8008df0:	e6d1      	b.n	8008b96 <HAL_DMA_Init+0xf6>
 8008df2:	bf00      	nop
 8008df4:	0802bc1c 	.word	0x0802bc1c

08008df8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	f000 8097 	beq.w	8008f2c <HAL_DMA_DeInit+0x134>
{
 8008dfe:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008e00:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8008e04:	4604      	mov	r4, r0
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	b2d8      	uxtb	r0, r3
 8008e0a:	f000 808e 	beq.w	8008f2a <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008e0e:	6822      	ldr	r2, [r4, #0]
 8008e10:	4b4b      	ldr	r3, [pc, #300]	; (8008f40 <HAL_DMA_DeInit+0x148>)
 8008e12:	484c      	ldr	r0, [pc, #304]	; (8008f44 <HAL_DMA_DeInit+0x14c>)
 8008e14:	494c      	ldr	r1, [pc, #304]	; (8008f48 <HAL_DMA_DeInit+0x150>)
 8008e16:	429a      	cmp	r2, r3
 8008e18:	bf18      	it	ne
 8008e1a:	4282      	cmpne	r2, r0
 8008e1c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8008e20:	bf14      	ite	ne
 8008e22:	2301      	movne	r3, #1
 8008e24:	2300      	moveq	r3, #0
 8008e26:	428a      	cmp	r2, r1
 8008e28:	bf0c      	ite	eq
 8008e2a:	2300      	moveq	r3, #0
 8008e2c:	f003 0301 	andne.w	r3, r3, #1
 8008e30:	3130      	adds	r1, #48	; 0x30
 8008e32:	4282      	cmp	r2, r0
 8008e34:	bf0c      	ite	eq
 8008e36:	2300      	moveq	r3, #0
 8008e38:	f003 0301 	andne.w	r3, r3, #1
 8008e3c:	3030      	adds	r0, #48	; 0x30
 8008e3e:	428a      	cmp	r2, r1
 8008e40:	bf0c      	ite	eq
 8008e42:	2300      	moveq	r3, #0
 8008e44:	f003 0301 	andne.w	r3, r3, #1
 8008e48:	3130      	adds	r1, #48	; 0x30
 8008e4a:	4282      	cmp	r2, r0
 8008e4c:	bf0c      	ite	eq
 8008e4e:	2300      	moveq	r3, #0
 8008e50:	f003 0301 	andne.w	r3, r3, #1
 8008e54:	3030      	adds	r0, #48	; 0x30
 8008e56:	428a      	cmp	r2, r1
 8008e58:	bf0c      	ite	eq
 8008e5a:	2300      	moveq	r3, #0
 8008e5c:	f003 0301 	andne.w	r3, r3, #1
 8008e60:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008e64:	4282      	cmp	r2, r0
 8008e66:	bf0c      	ite	eq
 8008e68:	2300      	moveq	r3, #0
 8008e6a:	f003 0301 	andne.w	r3, r3, #1
 8008e6e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8008e72:	428a      	cmp	r2, r1
 8008e74:	bf0c      	ite	eq
 8008e76:	2300      	moveq	r3, #0
 8008e78:	f003 0301 	andne.w	r3, r3, #1
 8008e7c:	3130      	adds	r1, #48	; 0x30
 8008e7e:	4282      	cmp	r2, r0
 8008e80:	bf0c      	ite	eq
 8008e82:	2300      	moveq	r3, #0
 8008e84:	f003 0301 	andne.w	r3, r3, #1
 8008e88:	3030      	adds	r0, #48	; 0x30
 8008e8a:	428a      	cmp	r2, r1
 8008e8c:	bf0c      	ite	eq
 8008e8e:	2300      	moveq	r3, #0
 8008e90:	f003 0301 	andne.w	r3, r3, #1
 8008e94:	3130      	adds	r1, #48	; 0x30
 8008e96:	4282      	cmp	r2, r0
 8008e98:	bf0c      	ite	eq
 8008e9a:	2300      	moveq	r3, #0
 8008e9c:	f003 0301 	andne.w	r3, r3, #1
 8008ea0:	3030      	adds	r0, #48	; 0x30
 8008ea2:	428a      	cmp	r2, r1
 8008ea4:	bf0c      	ite	eq
 8008ea6:	2300      	moveq	r3, #0
 8008ea8:	f003 0301 	andne.w	r3, r3, #1
 8008eac:	3130      	adds	r1, #48	; 0x30
 8008eae:	4282      	cmp	r2, r0
 8008eb0:	bf0c      	ite	eq
 8008eb2:	2300      	moveq	r3, #0
 8008eb4:	f003 0301 	andne.w	r3, r3, #1
 8008eb8:	428a      	cmp	r2, r1
 8008eba:	bf0c      	ite	eq
 8008ebc:	2300      	moveq	r3, #0
 8008ebe:	f003 0301 	andne.w	r3, r3, #1
 8008ec2:	b113      	cbz	r3, 8008eca <HAL_DMA_DeInit+0xd2>
 8008ec4:	4b21      	ldr	r3, [pc, #132]	; (8008f4c <HAL_DMA_DeInit+0x154>)
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d132      	bne.n	8008f30 <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 8008eca:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008ecc:	b2d3      	uxtb	r3, r2
 8008ece:	4920      	ldr	r1, [pc, #128]	; (8008f50 <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 8008ed0:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008ed4:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 8008ed6:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 8008ed8:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008eda:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 8008ede:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 8008ee0:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 8008ee2:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 8008ee6:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008ee8:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 8008eec:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8008eee:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8008ef0:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8008ef2:	f04f 0021 	mov.w	r0, #33	; 0x21
 8008ef6:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008ef8:	4816      	ldr	r0, [pc, #88]	; (8008f54 <HAL_DMA_DeInit+0x15c>)
 8008efa:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008efc:	4916      	ldr	r1, [pc, #88]	; (8008f58 <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008efe:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008f00:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f04:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008f08:	bf88      	it	hi
 8008f0a:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f0c:	4082      	lsls	r2, r0
  return HAL_OK;
 8008f0e:	4618      	mov	r0, r3
 8008f10:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f12:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f14:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8008f16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8008f1a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8008f1e:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8008f22:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8008f26:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 8008f2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008f2c:	2001      	movs	r0, #1
}
 8008f2e:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008f30:	f240 1149 	movw	r1, #329	; 0x149
 8008f34:	4809      	ldr	r0, [pc, #36]	; (8008f5c <HAL_DMA_DeInit+0x164>)
 8008f36:	f7fb f921 	bl	800417c <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	e7c5      	b.n	8008eca <HAL_DMA_DeInit+0xd2>
 8008f3e:	bf00      	nop
 8008f40:	40026010 	.word	0x40026010
 8008f44:	40026028 	.word	0x40026028
 8008f48:	40026040 	.word	0x40026040
 8008f4c:	400264b8 	.word	0x400264b8
 8008f50:	aaaaaaab 	.word	0xaaaaaaab
 8008f54:	0802bc54 	.word	0x0802bc54
 8008f58:	fffffc00 	.word	0xfffffc00
 8008f5c:	0802bc1c 	.word	0x0802bc1c

08008f60 <HAL_DMA_Start_IT>:
{
 8008f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f64:	461e      	mov	r6, r3
 8008f66:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f68:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008f6c:	1e58      	subs	r0, r3, #1
 8008f6e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8008f72:	4688      	mov	r8, r1
 8008f74:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008f76:	4298      	cmp	r0, r3
 8008f78:	d83b      	bhi.n	8008ff2 <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 8008f7a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d040      	beq.n	8009004 <HAL_DMA_Start_IT+0xa4>
 8008f82:	2301      	movs	r3, #1
 8008f84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8008f88:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d005      	beq.n	8008f9c <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8008f90:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8008f92:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8008f94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8008f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f9c:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008f9e:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8008fa0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fae:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fb0:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 8008fb2:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fb4:	2b40      	cmp	r3, #64	; 0x40
 8008fb6:	d028      	beq.n	800900a <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 8008fb8:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 8008fbc:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fbe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008fc0:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8008fc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fc4:	408b      	lsls	r3, r1
 8008fc6:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	f043 0316 	orr.w	r3, r3, #22
 8008fd0:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008fd2:	696b      	ldr	r3, [r5, #20]
 8008fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd8:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8008fda:	b11a      	cbz	r2, 8008fe4 <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	f043 0308 	orr.w	r3, r3, #8
 8008fe2:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8008fe4:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008fe8:	f043 0301 	orr.w	r3, r3, #1
 8008fec:	602b      	str	r3, [r5, #0]
}
 8008fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008ff2:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008ff6:	4807      	ldr	r0, [pc, #28]	; (8009014 <HAL_DMA_Start_IT+0xb4>)
 8008ff8:	f7fb f8c0 	bl	800417c <assert_failed>
  __HAL_LOCK(hdma);
 8008ffc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009000:	2b01      	cmp	r3, #1
 8009002:	d1be      	bne.n	8008f82 <HAL_DMA_Start_IT+0x22>
 8009004:	2002      	movs	r0, #2
}
 8009006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 800900a:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800900c:	f8c5 800c 	str.w	r8, [r5, #12]
 8009010:	e7d5      	b.n	8008fbe <HAL_DMA_Start_IT+0x5e>
 8009012:	bf00      	nop
 8009014:	0802bc1c 	.word	0x0802bc1c

08009018 <HAL_DMA_Abort>:
{
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800901c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800901e:	f7fe fdd5 	bl	8007bcc <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009022:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8009026:	2b02      	cmp	r3, #2
 8009028:	d006      	beq.n	8009038 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800902a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800902c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800902e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009030:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009032:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8009036:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	4605      	mov	r5, r0
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	f022 0216 	bic.w	r2, r2, #22
 8009042:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009044:	695a      	ldr	r2, [r3, #20]
 8009046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800904a:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800904c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800904e:	b33a      	cbz	r2, 80090a0 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	f022 0208 	bic.w	r2, r2, #8
 8009056:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	f022 0201 	bic.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009060:	e005      	b.n	800906e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009062:	f7fe fdb3 	bl	8007bcc <HAL_GetTick>
 8009066:	1b43      	subs	r3, r0, r5
 8009068:	2b05      	cmp	r3, #5
 800906a:	d80f      	bhi.n	800908c <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f013 0301 	ands.w	r3, r3, #1
 8009074:	d1f5      	bne.n	8009062 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009076:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009078:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800907a:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800907c:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800907e:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009080:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8009082:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009086:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800908a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800908c:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800908e:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8009090:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009092:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8009094:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009096:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800909a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 800909e:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80090a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80090a2:	2a00      	cmp	r2, #0
 80090a4:	d1d4      	bne.n	8009050 <HAL_DMA_Abort+0x38>
 80090a6:	e7d7      	b.n	8009058 <HAL_DMA_Abort+0x40>

080090a8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80090a8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 80090ac:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80090ae:	2a02      	cmp	r2, #2
 80090b0:	d003      	beq.n	80090ba <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090b2:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80090b4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80090b8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80090ba:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80090bc:	2105      	movs	r1, #5
  return HAL_OK;
 80090be:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 80090c0:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80090c4:	6813      	ldr	r3, [r2, #0]
 80090c6:	f023 0301 	bic.w	r3, r3, #1
 80090ca:	6013      	str	r3, [r2, #0]
}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop

080090d0 <HAL_DMA_IRQHandler>:
{
 80090d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 80090d4:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 80090d6:	4b74      	ldr	r3, [pc, #464]	; (80092a8 <HAL_DMA_IRQHandler+0x1d8>)
{
 80090d8:	b082      	sub	sp, #8
 80090da:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 80090dc:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 80090de:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80090e0:	2208      	movs	r2, #8
 80090e2:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80090e6:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80090e8:	409a      	lsls	r2, r3
 80090ea:	4222      	tst	r2, r4
 80090ec:	d004      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80090ee:	6801      	ldr	r1, [r0, #0]
 80090f0:	680f      	ldr	r7, [r1, #0]
 80090f2:	0778      	lsls	r0, r7, #29
 80090f4:	f100 80ab 	bmi.w	800924e <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80090f8:	2201      	movs	r2, #1
 80090fa:	409a      	lsls	r2, r3
 80090fc:	4222      	tst	r2, r4
 80090fe:	d005      	beq.n	800910c <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009100:	f8d8 1000 	ldr.w	r1, [r8]
 8009104:	6949      	ldr	r1, [r1, #20]
 8009106:	0609      	lsls	r1, r1, #24
 8009108:	f100 8099 	bmi.w	800923e <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800910c:	2204      	movs	r2, #4
 800910e:	409a      	lsls	r2, r3
 8009110:	4222      	tst	r2, r4
 8009112:	d005      	beq.n	8009120 <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009114:	f8d8 1000 	ldr.w	r1, [r8]
 8009118:	6809      	ldr	r1, [r1, #0]
 800911a:	078f      	lsls	r7, r1, #30
 800911c:	f100 8087 	bmi.w	800922e <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009120:	2210      	movs	r2, #16
 8009122:	409a      	lsls	r2, r3
 8009124:	4222      	tst	r2, r4
 8009126:	d004      	beq.n	8009132 <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009128:	f8d8 1000 	ldr.w	r1, [r8]
 800912c:	680f      	ldr	r7, [r1, #0]
 800912e:	0738      	lsls	r0, r7, #28
 8009130:	d468      	bmi.n	8009204 <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009132:	2220      	movs	r2, #32
 8009134:	409a      	lsls	r2, r3
 8009136:	4222      	tst	r2, r4
 8009138:	d017      	beq.n	800916a <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800913a:	f8d8 1000 	ldr.w	r1, [r8]
 800913e:	680c      	ldr	r4, [r1, #0]
 8009140:	06e0      	lsls	r0, r4, #27
 8009142:	d512      	bpl.n	800916a <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009144:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009146:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800914a:	2a05      	cmp	r2, #5
 800914c:	d039      	beq.n	80091c2 <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800914e:	680b      	ldr	r3, [r1, #0]
 8009150:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009154:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009156:	f000 808d 	beq.w	8009274 <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800915a:	0319      	lsls	r1, r3, #12
 800915c:	f140 8098 	bpl.w	8009290 <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 8009160:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8009164:	b10b      	cbz	r3, 800916a <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 8009166:	4640      	mov	r0, r8
 8009168:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800916a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800916e:	2b00      	cmp	r3, #0
 8009170:	d045      	beq.n	80091fe <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009172:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8009176:	07da      	lsls	r2, r3, #31
 8009178:	d51b      	bpl.n	80091b2 <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 800917a:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 800917e:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8009180:	494a      	ldr	r1, [pc, #296]	; (80092ac <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8009182:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8009186:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8009188:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800918c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8009190:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8009192:	6013      	str	r3, [r2, #0]
 8009194:	e002      	b.n	800919c <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009196:	6813      	ldr	r3, [r2, #0]
 8009198:	07db      	lsls	r3, r3, #31
 800919a:	d504      	bpl.n	80091a6 <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	3301      	adds	r3, #1
 80091a0:	42ab      	cmp	r3, r5
 80091a2:	9301      	str	r3, [sp, #4]
 80091a4:	d9f7      	bls.n	8009196 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 80091a6:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80091a8:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80091aa:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80091ae:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80091b2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80091b6:	b313      	cbz	r3, 80091fe <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 80091b8:	4640      	mov	r0, r8
}
 80091ba:	b002      	add	sp, #8
 80091bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80091c0:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80091c2:	680a      	ldr	r2, [r1, #0]
 80091c4:	f022 0216 	bic.w	r2, r2, #22
 80091c8:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80091ca:	694a      	ldr	r2, [r1, #20]
 80091cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091d0:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80091d2:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80091d6:	2a00      	cmp	r2, #0
 80091d8:	d060      	beq.n	800929c <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80091da:	680a      	ldr	r2, [r1, #0]
 80091dc:	f022 0208 	bic.w	r2, r2, #8
 80091e0:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091e2:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 80091e4:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091e6:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 80091ea:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091ec:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 80091ee:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 80091f2:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80091f6:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1dc      	bne.n	80091b8 <HAL_DMA_IRQHandler+0xe8>
}
 80091fe:	b002      	add	sp, #8
 8009200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009204:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009206:	680a      	ldr	r2, [r1, #0]
 8009208:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800920c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800920e:	d12a      	bne.n	8009266 <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009210:	05d7      	lsls	r7, r2, #23
 8009212:	d403      	bmi.n	800921c <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009214:	680a      	ldr	r2, [r1, #0]
 8009216:	f022 0208 	bic.w	r2, r2, #8
 800921a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800921c:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8009220:	2a00      	cmp	r2, #0
 8009222:	d086      	beq.n	8009132 <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 8009224:	4640      	mov	r0, r8
 8009226:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009228:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800922c:	e781      	b.n	8009132 <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800922e:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009230:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8009234:	f042 0204 	orr.w	r2, r2, #4
 8009238:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800923c:	e770      	b.n	8009120 <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800923e:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009240:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8009244:	f042 0202 	orr.w	r2, r2, #2
 8009248:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800924c:	e75e      	b.n	800910c <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800924e:	680f      	ldr	r7, [r1, #0]
 8009250:	f027 0704 	bic.w	r7, r7, #4
 8009254:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009256:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009258:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800925c:	f042 0201 	orr.w	r2, r2, #1
 8009260:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8009264:	e748      	b.n	80090f8 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009266:	0312      	lsls	r2, r2, #12
 8009268:	d5d8      	bpl.n	800921c <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800926a:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800926e:	2a00      	cmp	r2, #0
 8009270:	d1d8      	bne.n	8009224 <HAL_DMA_IRQHandler+0x154>
 8009272:	e75e      	b.n	8009132 <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009274:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8009278:	f47f af72 	bne.w	8009160 <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800927c:	680a      	ldr	r2, [r1, #0]
 800927e:	f022 0210 	bic.w	r2, r2, #16
 8009282:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009284:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8009286:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800928a:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800928e:	e767      	b.n	8009160 <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 8009290:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8009294:	2b00      	cmp	r3, #0
 8009296:	f47f af66 	bne.w	8009166 <HAL_DMA_IRQHandler+0x96>
 800929a:	e766      	b.n	800916a <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800929c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80092a0:	2a00      	cmp	r2, #0
 80092a2:	d19a      	bne.n	80091da <HAL_DMA_IRQHandler+0x10a>
 80092a4:	e79d      	b.n	80091e2 <HAL_DMA_IRQHandler+0x112>
 80092a6:	bf00      	nop
 80092a8:	2000027c 	.word	0x2000027c
 80092ac:	1b4e81b5 	.word	0x1b4e81b5

080092b0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80092b0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80092b2:	4770      	bx	lr

080092b4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80092b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b8:	9f08      	ldr	r7, [sp, #32]
 80092ba:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80092bc:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 80092c0:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80092c2:	1e7d      	subs	r5, r7, #1
{
 80092c4:	4691      	mov	r9, r2
 80092c6:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80092c8:	4285      	cmp	r5, r0
 80092ca:	d85f      	bhi.n	800938c <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80092cc:	68a0      	ldr	r0, [r4, #8]
 80092ce:	2880      	cmp	r0, #128	; 0x80
 80092d0:	d063      	beq.n	800939a <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80092d2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	f000 8090 	beq.w	80093fc <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80092dc:	2301      	movs	r3, #1
 80092de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80092e2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d005      	beq.n	80092f6 <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80092ea:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 80092ec:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 80092ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 80092f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80092f6:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80092f8:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80092fa:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 80092fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8009306:	682b      	ldr	r3, [r5, #0]
 8009308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800930c:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 800930e:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 8009310:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009312:	d06a      	beq.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8009314:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8009318:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800931c:	4b93      	ldr	r3, [pc, #588]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800931e:	429d      	cmp	r5, r3
 8009320:	d941      	bls.n	80093a6 <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 8009322:	3b48      	subs	r3, #72	; 0x48
 8009324:	4992      	ldr	r1, [pc, #584]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8009326:	4a93      	ldr	r2, [pc, #588]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8009328:	429d      	cmp	r5, r3
 800932a:	bf18      	it	ne
 800932c:	428d      	cmpne	r5, r1
 800932e:	bf14      	ite	ne
 8009330:	2301      	movne	r3, #1
 8009332:	2300      	moveq	r3, #0
 8009334:	4295      	cmp	r5, r2
 8009336:	bf0c      	ite	eq
 8009338:	2300      	moveq	r3, #0
 800933a:	f003 0301 	andne.w	r3, r3, #1
 800933e:	b11b      	cbz	r3, 8009348 <HAL_DMAEx_MultiBufferStart_IT+0x94>
 8009340:	4b8d      	ldr	r3, [pc, #564]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009342:	429d      	cmp	r5, r3
 8009344:	f040 812e 	bne.w	80095a4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8009348:	4b8c      	ldr	r3, [pc, #560]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800934a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800934c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800934e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009350:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009352:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009354:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009356:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009358:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800935a:	2201      	movs	r2, #1
 800935c:	4b87      	ldr	r3, [pc, #540]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800935e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009360:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009362:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009364:	f043 0316 	orr.w	r3, r3, #22
 8009368:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800936a:	696b      	ldr	r3, [r5, #20]
 800936c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009370:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009372:	2a00      	cmp	r2, #0
 8009374:	d03e      	beq.n	80093f4 <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 8009376:	682b      	ldr	r3, [r5, #0]
 8009378:	f043 0308 	orr.w	r3, r3, #8
 800937c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 800937e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009380:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8009382:	f043 0301 	orr.w	r3, r3, #1
 8009386:	602b      	str	r3, [r5, #0]
}
 8009388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800938c:	487c      	ldr	r0, [pc, #496]	; (8009580 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800938e:	21a1      	movs	r1, #161	; 0xa1
 8009390:	f7fa fef4 	bl	800417c <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009394:	68a0      	ldr	r0, [r4, #8]
 8009396:	2880      	cmp	r0, #128	; 0x80
 8009398:	d19b      	bne.n	80092d2 <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800939a:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 800939e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80093a0:	6563      	str	r3, [r4, #84]	; 0x54
}
 80093a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80093a6:	4b77      	ldr	r3, [pc, #476]	; (8009584 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80093a8:	429d      	cmp	r5, r3
 80093aa:	d929      	bls.n	8009400 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80093ac:	3ba8      	subs	r3, #168	; 0xa8
 80093ae:	4976      	ldr	r1, [pc, #472]	; (8009588 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80093b0:	4a70      	ldr	r2, [pc, #448]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80093b2:	429d      	cmp	r5, r3
 80093b4:	bf18      	it	ne
 80093b6:	428d      	cmpne	r5, r1
 80093b8:	bf14      	ite	ne
 80093ba:	2301      	movne	r3, #1
 80093bc:	2300      	moveq	r3, #0
 80093be:	4295      	cmp	r5, r2
 80093c0:	bf0c      	ite	eq
 80093c2:	2300      	moveq	r3, #0
 80093c4:	f003 0301 	andne.w	r3, r3, #1
 80093c8:	b113      	cbz	r3, 80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 80093ca:	4b6b      	ldr	r3, [pc, #428]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80093cc:	429d      	cmp	r5, r3
 80093ce:	d15a      	bne.n	8009486 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 80093d0:	4b6a      	ldr	r3, [pc, #424]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80093d2:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80093d4:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80093d6:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80093d8:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80093da:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80093dc:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80093de:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80093e0:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80093e2:	2301      	movs	r3, #1
 80093e4:	4a65      	ldr	r2, [pc, #404]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80093e6:	6093      	str	r3, [r2, #8]
 80093e8:	e7ba      	b.n	8009360 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 80093ea:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 80093ee:	f8c5 800c 	str.w	r8, [r5, #12]
 80093f2:	e793      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80093f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1bd      	bne.n	8009376 <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 80093fa:	e7c0      	b.n	800937e <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 80093fc:	2002      	movs	r0, #2
 80093fe:	e778      	b.n	80092f2 <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009400:	4b62      	ldr	r3, [pc, #392]	; (800958c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8009402:	429d      	cmp	r5, r3
 8009404:	d91f      	bls.n	8009446 <HAL_DMAEx_MultiBufferStart_IT+0x192>
 8009406:	3b48      	subs	r3, #72	; 0x48
 8009408:	495f      	ldr	r1, [pc, #380]	; (8009588 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800940a:	4a5a      	ldr	r2, [pc, #360]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800940c:	429d      	cmp	r5, r3
 800940e:	bf18      	it	ne
 8009410:	428d      	cmpne	r5, r1
 8009412:	bf14      	ite	ne
 8009414:	2301      	movne	r3, #1
 8009416:	2300      	moveq	r3, #0
 8009418:	4295      	cmp	r5, r2
 800941a:	bf0c      	ite	eq
 800941c:	2300      	moveq	r3, #0
 800941e:	f003 0301 	andne.w	r3, r3, #1
 8009422:	b11b      	cbz	r3, 800942c <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8009424:	4b54      	ldr	r3, [pc, #336]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009426:	429d      	cmp	r5, r3
 8009428:	f040 8152 	bne.w	80096d0 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 800942c:	4b58      	ldr	r3, [pc, #352]	; (8009590 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800942e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009430:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009432:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009434:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009436:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009438:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800943a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800943c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800943e:	2301      	movs	r3, #1
 8009440:	4a53      	ldr	r2, [pc, #332]	; (8009590 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8009442:	60d3      	str	r3, [r2, #12]
 8009444:	e78c      	b.n	8009360 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009446:	4b50      	ldr	r3, [pc, #320]	; (8009588 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8009448:	4949      	ldr	r1, [pc, #292]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800944a:	4a4a      	ldr	r2, [pc, #296]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800944c:	429d      	cmp	r5, r3
 800944e:	bf18      	it	ne
 8009450:	428d      	cmpne	r5, r1
 8009452:	bf14      	ite	ne
 8009454:	2301      	movne	r3, #1
 8009456:	2300      	moveq	r3, #0
 8009458:	4295      	cmp	r5, r2
 800945a:	bf0c      	ite	eq
 800945c:	2300      	moveq	r3, #0
 800945e:	f003 0301 	andne.w	r3, r3, #1
 8009462:	b11b      	cbz	r3, 800946c <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 8009464:	4b44      	ldr	r3, [pc, #272]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009466:	429d      	cmp	r5, r3
 8009468:	f040 80be 	bne.w	80095e8 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 800946c:	4b48      	ldr	r3, [pc, #288]	; (8009590 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800946e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009470:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009472:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009474:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009476:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009478:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800947a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800947c:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800947e:	2301      	movs	r3, #1
 8009480:	4a43      	ldr	r2, [pc, #268]	; (8009590 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8009482:	6093      	str	r3, [r2, #8]
 8009484:	e76c      	b.n	8009360 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009486:	3b48      	subs	r3, #72	; 0x48
 8009488:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800948c:	3218      	adds	r2, #24
 800948e:	429d      	cmp	r5, r3
 8009490:	bf18      	it	ne
 8009492:	428d      	cmpne	r5, r1
 8009494:	bf14      	ite	ne
 8009496:	2301      	movne	r3, #1
 8009498:	2300      	moveq	r3, #0
 800949a:	4295      	cmp	r5, r2
 800949c:	bf0c      	ite	eq
 800949e:	2300      	moveq	r3, #0
 80094a0:	f003 0301 	andne.w	r3, r3, #1
 80094a4:	b11b      	cbz	r3, 80094ae <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 80094a6:	4b3b      	ldr	r3, [pc, #236]	; (8009594 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80094a8:	429d      	cmp	r5, r3
 80094aa:	f040 8210 	bne.w	80098ce <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 80094ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80094b2:	4b39      	ldr	r3, [pc, #228]	; (8009598 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80094b4:	4839      	ldr	r0, [pc, #228]	; (800959c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80094b6:	4a31      	ldr	r2, [pc, #196]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80094b8:	429d      	cmp	r5, r3
 80094ba:	bf18      	it	ne
 80094bc:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80094be:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80094c0:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 80094c4:	bf14      	ite	ne
 80094c6:	2301      	movne	r3, #1
 80094c8:	2300      	moveq	r3, #0
 80094ca:	4295      	cmp	r5, r2
 80094cc:	bf0c      	ite	eq
 80094ce:	2300      	moveq	r3, #0
 80094d0:	f003 0301 	andne.w	r3, r3, #1
 80094d4:	b11b      	cbz	r3, 80094de <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 80094d6:	4b2f      	ldr	r3, [pc, #188]	; (8009594 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80094d8:	429d      	cmp	r5, r3
 80094da:	f040 8212 	bne.w	8009902 <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 80094de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80094e2:	4b2d      	ldr	r3, [pc, #180]	; (8009598 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80094e4:	482d      	ldr	r0, [pc, #180]	; (800959c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80094e6:	4925      	ldr	r1, [pc, #148]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80094e8:	429d      	cmp	r5, r3
 80094ea:	bf18      	it	ne
 80094ec:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80094ee:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80094f0:	bf14      	ite	ne
 80094f2:	2301      	movne	r3, #1
 80094f4:	2300      	moveq	r3, #0
 80094f6:	4a2a      	ldr	r2, [pc, #168]	; (80095a0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80094f8:	4295      	cmp	r5, r2
 80094fa:	bf0c      	ite	eq
 80094fc:	2300      	moveq	r3, #0
 80094fe:	f003 0301 	andne.w	r3, r3, #1
 8009502:	b11b      	cbz	r3, 800950c <HAL_DMAEx_MultiBufferStart_IT+0x258>
 8009504:	4b23      	ldr	r3, [pc, #140]	; (8009594 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009506:	429d      	cmp	r5, r3
 8009508:	f040 822b 	bne.w	8009962 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800950c:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009510:	4b22      	ldr	r3, [pc, #136]	; (800959c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009512:	4821      	ldr	r0, [pc, #132]	; (8009598 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009514:	4919      	ldr	r1, [pc, #100]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009516:	429d      	cmp	r5, r3
 8009518:	bf18      	it	ne
 800951a:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800951c:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800951e:	bf14      	ite	ne
 8009520:	2301      	movne	r3, #1
 8009522:	2300      	moveq	r3, #0
 8009524:	4a1e      	ldr	r2, [pc, #120]	; (80095a0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009526:	4295      	cmp	r5, r2
 8009528:	bf0c      	ite	eq
 800952a:	2300      	moveq	r3, #0
 800952c:	f003 0301 	andne.w	r3, r3, #1
 8009530:	b11b      	cbz	r3, 800953a <HAL_DMAEx_MultiBufferStart_IT+0x286>
 8009532:	4b18      	ldr	r3, [pc, #96]	; (8009594 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009534:	429d      	cmp	r5, r3
 8009536:	f040 81fc 	bne.w	8009932 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 800953a:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800953e:	4b17      	ldr	r3, [pc, #92]	; (800959c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009540:	4815      	ldr	r0, [pc, #84]	; (8009598 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009542:	490e      	ldr	r1, [pc, #56]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009544:	429d      	cmp	r5, r3
 8009546:	bf18      	it	ne
 8009548:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800954a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800954c:	bf14      	ite	ne
 800954e:	2301      	movne	r3, #1
 8009550:	2300      	moveq	r3, #0
 8009552:	4a13      	ldr	r2, [pc, #76]	; (80095a0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009554:	4295      	cmp	r5, r2
 8009556:	bf0c      	ite	eq
 8009558:	2300      	moveq	r3, #0
 800955a:	f003 0301 	andne.w	r3, r3, #1
 800955e:	b11b      	cbz	r3, 8009568 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8009560:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009562:	429d      	cmp	r5, r3
 8009564:	f040 8215 	bne.w	8009992 <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 8009568:	2340      	movs	r3, #64	; 0x40
 800956a:	e73b      	b.n	80093e4 <HAL_DMAEx_MultiBufferStart_IT+0x130>
 800956c:	40026458 	.word	0x40026458
 8009570:	40026010 	.word	0x40026010
 8009574:	40026070 	.word	0x40026070
 8009578:	40026470 	.word	0x40026470
 800957c:	40026400 	.word	0x40026400
 8009580:	0802bc5c 	.word	0x0802bc5c
 8009584:	400260b8 	.word	0x400260b8
 8009588:	40026410 	.word	0x40026410
 800958c:	40026058 	.word	0x40026058
 8009590:	40026000 	.word	0x40026000
 8009594:	40026488 	.word	0x40026488
 8009598:	40026028 	.word	0x40026028
 800959c:	40026428 	.word	0x40026428
 80095a0:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80095a4:	3b48      	subs	r3, #72	; 0x48
 80095a6:	3118      	adds	r1, #24
 80095a8:	3218      	adds	r2, #24
 80095aa:	429d      	cmp	r5, r3
 80095ac:	bf18      	it	ne
 80095ae:	428d      	cmpne	r5, r1
 80095b0:	bf14      	ite	ne
 80095b2:	2301      	movne	r3, #1
 80095b4:	2300      	moveq	r3, #0
 80095b6:	4295      	cmp	r5, r2
 80095b8:	bf0c      	ite	eq
 80095ba:	2300      	moveq	r3, #0
 80095bc:	f003 0301 	andne.w	r3, r3, #1
 80095c0:	b11b      	cbz	r3, 80095ca <HAL_DMAEx_MultiBufferStart_IT+0x316>
 80095c2:	4b7d      	ldr	r3, [pc, #500]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80095c4:	429d      	cmp	r5, r3
 80095c6:	f040 8103 	bne.w	80097d0 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 80095ca:	4b7c      	ldr	r3, [pc, #496]	; (80097bc <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 80095cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80095d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80095d4:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80095d6:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80095da:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80095dc:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80095e0:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80095e2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80095e4:	2240      	movs	r2, #64	; 0x40
 80095e6:	e6b9      	b.n	800935c <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80095e8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80095ec:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 80095f0:	3218      	adds	r2, #24
 80095f2:	429d      	cmp	r5, r3
 80095f4:	bf18      	it	ne
 80095f6:	428d      	cmpne	r5, r1
 80095f8:	bf14      	ite	ne
 80095fa:	2301      	movne	r3, #1
 80095fc:	2300      	moveq	r3, #0
 80095fe:	4295      	cmp	r5, r2
 8009600:	bf0c      	ite	eq
 8009602:	2300      	moveq	r3, #0
 8009604:	f003 0301 	andne.w	r3, r3, #1
 8009608:	b11b      	cbz	r3, 8009612 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 800960a:	4b6b      	ldr	r3, [pc, #428]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800960c:	429d      	cmp	r5, r3
 800960e:	f040 81d8 	bne.w	80099c2 <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 8009612:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009616:	4b6a      	ldr	r3, [pc, #424]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009618:	486a      	ldr	r0, [pc, #424]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800961a:	4a6b      	ldr	r2, [pc, #428]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800961c:	429d      	cmp	r5, r3
 800961e:	bf18      	it	ne
 8009620:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009622:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009624:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8009628:	bf14      	ite	ne
 800962a:	2301      	movne	r3, #1
 800962c:	2300      	moveq	r3, #0
 800962e:	4295      	cmp	r5, r2
 8009630:	bf0c      	ite	eq
 8009632:	2300      	moveq	r3, #0
 8009634:	f003 0301 	andne.w	r3, r3, #1
 8009638:	b11b      	cbz	r3, 8009642 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800963a:	4b5f      	ldr	r3, [pc, #380]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800963c:	429d      	cmp	r5, r3
 800963e:	f040 81d9 	bne.w	80099f4 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8009642:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009646:	4b5e      	ldr	r3, [pc, #376]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009648:	485e      	ldr	r0, [pc, #376]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800964a:	495f      	ldr	r1, [pc, #380]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800964c:	429d      	cmp	r5, r3
 800964e:	bf18      	it	ne
 8009650:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009652:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009654:	bf14      	ite	ne
 8009656:	2301      	movne	r3, #1
 8009658:	2300      	moveq	r3, #0
 800965a:	4a5c      	ldr	r2, [pc, #368]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800965c:	4295      	cmp	r5, r2
 800965e:	bf0c      	ite	eq
 8009660:	2300      	moveq	r3, #0
 8009662:	f003 0301 	andne.w	r3, r3, #1
 8009666:	b11b      	cbz	r3, 8009670 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8009668:	4b53      	ldr	r3, [pc, #332]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800966a:	429d      	cmp	r5, r3
 800966c:	f040 822c 	bne.w	8009ac8 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8009670:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009674:	4b53      	ldr	r3, [pc, #332]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009676:	4852      	ldr	r0, [pc, #328]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009678:	4953      	ldr	r1, [pc, #332]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800967a:	429d      	cmp	r5, r3
 800967c:	bf18      	it	ne
 800967e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009680:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009682:	bf14      	ite	ne
 8009684:	2301      	movne	r3, #1
 8009686:	2300      	moveq	r3, #0
 8009688:	4a50      	ldr	r2, [pc, #320]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800968a:	4295      	cmp	r5, r2
 800968c:	bf0c      	ite	eq
 800968e:	2300      	moveq	r3, #0
 8009690:	f003 0301 	andne.w	r3, r3, #1
 8009694:	b11b      	cbz	r3, 800969e <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009696:	4b48      	ldr	r3, [pc, #288]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009698:	429d      	cmp	r5, r3
 800969a:	f040 81db 	bne.w	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 800969e:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80096a2:	4b47      	ldr	r3, [pc, #284]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80096a4:	4847      	ldr	r0, [pc, #284]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80096a6:	4948      	ldr	r1, [pc, #288]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80096a8:	429d      	cmp	r5, r3
 80096aa:	bf18      	it	ne
 80096ac:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80096ae:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80096b0:	bf14      	ite	ne
 80096b2:	2301      	movne	r3, #1
 80096b4:	2300      	moveq	r3, #0
 80096b6:	4a45      	ldr	r2, [pc, #276]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80096b8:	4295      	cmp	r5, r2
 80096ba:	bf0c      	ite	eq
 80096bc:	2300      	moveq	r3, #0
 80096be:	f003 0301 	andne.w	r3, r3, #1
 80096c2:	b11b      	cbz	r3, 80096cc <HAL_DMAEx_MultiBufferStart_IT+0x418>
 80096c4:	4b3c      	ldr	r3, [pc, #240]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80096c6:	429d      	cmp	r5, r3
 80096c8:	f040 822d 	bne.w	8009b26 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80096cc:	2340      	movs	r3, #64	; 0x40
 80096ce:	e6d7      	b.n	8009480 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80096d0:	3b48      	subs	r3, #72	; 0x48
 80096d2:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80096d6:	3218      	adds	r2, #24
 80096d8:	429d      	cmp	r5, r3
 80096da:	bf18      	it	ne
 80096dc:	428d      	cmpne	r5, r1
 80096de:	bf14      	ite	ne
 80096e0:	2301      	movne	r3, #1
 80096e2:	2300      	moveq	r3, #0
 80096e4:	4295      	cmp	r5, r2
 80096e6:	bf0c      	ite	eq
 80096e8:	2300      	moveq	r3, #0
 80096ea:	f003 0301 	andne.w	r3, r3, #1
 80096ee:	b11b      	cbz	r3, 80096f8 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 80096f0:	4b31      	ldr	r3, [pc, #196]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80096f2:	429d      	cmp	r5, r3
 80096f4:	f040 81d0 	bne.w	8009a98 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 80096f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096fc:	4b31      	ldr	r3, [pc, #196]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80096fe:	4830      	ldr	r0, [pc, #192]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009700:	4a31      	ldr	r2, [pc, #196]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009702:	429d      	cmp	r5, r3
 8009704:	bf18      	it	ne
 8009706:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009708:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800970a:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800970e:	bf14      	ite	ne
 8009710:	2301      	movne	r3, #1
 8009712:	2300      	moveq	r3, #0
 8009714:	4295      	cmp	r5, r2
 8009716:	bf0c      	ite	eq
 8009718:	2300      	moveq	r3, #0
 800971a:	f003 0301 	andne.w	r3, r3, #1
 800971e:	b11b      	cbz	r3, 8009728 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 8009720:	4b25      	ldr	r3, [pc, #148]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009722:	429d      	cmp	r5, r3
 8009724:	f040 817e 	bne.w	8009a24 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8009728:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800972c:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800972e:	4825      	ldr	r0, [pc, #148]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009730:	4925      	ldr	r1, [pc, #148]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009732:	429d      	cmp	r5, r3
 8009734:	bf18      	it	ne
 8009736:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009738:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800973a:	bf14      	ite	ne
 800973c:	2301      	movne	r3, #1
 800973e:	2300      	moveq	r3, #0
 8009740:	4a22      	ldr	r2, [pc, #136]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009742:	4295      	cmp	r5, r2
 8009744:	bf0c      	ite	eq
 8009746:	2300      	moveq	r3, #0
 8009748:	f003 0301 	andne.w	r3, r3, #1
 800974c:	b11b      	cbz	r3, 8009756 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800974e:	4b1a      	ldr	r3, [pc, #104]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009750:	429d      	cmp	r5, r3
 8009752:	f040 81fe 	bne.w	8009b52 <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 8009756:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800975a:	4b1a      	ldr	r3, [pc, #104]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800975c:	4818      	ldr	r0, [pc, #96]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800975e:	491a      	ldr	r1, [pc, #104]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009760:	429d      	cmp	r5, r3
 8009762:	bf18      	it	ne
 8009764:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009766:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009768:	bf14      	ite	ne
 800976a:	2301      	movne	r3, #1
 800976c:	2300      	moveq	r3, #0
 800976e:	4a17      	ldr	r2, [pc, #92]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009770:	4295      	cmp	r5, r2
 8009772:	bf0c      	ite	eq
 8009774:	2300      	moveq	r3, #0
 8009776:	f003 0301 	andne.w	r3, r3, #1
 800977a:	b11b      	cbz	r3, 8009784 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 800977c:	4b0e      	ldr	r3, [pc, #56]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800977e:	429d      	cmp	r5, r3
 8009780:	f040 81ba 	bne.w	8009af8 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8009784:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009788:	4b0e      	ldr	r3, [pc, #56]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800978a:	480d      	ldr	r0, [pc, #52]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800978c:	490e      	ldr	r1, [pc, #56]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800978e:	429d      	cmp	r5, r3
 8009790:	bf18      	it	ne
 8009792:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009794:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009796:	bf14      	ite	ne
 8009798:	2301      	movne	r3, #1
 800979a:	2300      	moveq	r3, #0
 800979c:	4a0b      	ldr	r2, [pc, #44]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800979e:	4295      	cmp	r5, r2
 80097a0:	bf0c      	ite	eq
 80097a2:	2300      	moveq	r3, #0
 80097a4:	f003 0301 	andne.w	r3, r3, #1
 80097a8:	b11b      	cbz	r3, 80097b2 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80097aa:	4b03      	ldr	r3, [pc, #12]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80097ac:	429d      	cmp	r5, r3
 80097ae:	f040 81e6 	bne.w	8009b7e <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 80097b2:	2340      	movs	r3, #64	; 0x40
 80097b4:	e644      	b.n	8009440 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 80097b6:	bf00      	nop
 80097b8:	40026488 	.word	0x40026488
 80097bc:	40026400 	.word	0x40026400
 80097c0:	40026428 	.word	0x40026428
 80097c4:	40026028 	.word	0x40026028
 80097c8:	40026000 	.word	0x40026000
 80097cc:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80097d0:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80097d4:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 80097d8:	3218      	adds	r2, #24
 80097da:	429d      	cmp	r5, r3
 80097dc:	bf18      	it	ne
 80097de:	428d      	cmpne	r5, r1
 80097e0:	bf14      	ite	ne
 80097e2:	2301      	movne	r3, #1
 80097e4:	2300      	moveq	r3, #0
 80097e6:	4295      	cmp	r5, r2
 80097e8:	bf0c      	ite	eq
 80097ea:	2300      	moveq	r3, #0
 80097ec:	f003 0301 	andne.w	r3, r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 81e6 	beq.w	8009bc2 <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 80097f6:	4ba3      	ldr	r3, [pc, #652]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80097f8:	429d      	cmp	r5, r3
 80097fa:	f000 81e2 	beq.w	8009bc2 <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 80097fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009802:	4ba1      	ldr	r3, [pc, #644]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009804:	48a1      	ldr	r0, [pc, #644]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009806:	4aa2      	ldr	r2, [pc, #648]	; (8009a90 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009808:	429d      	cmp	r5, r3
 800980a:	bf18      	it	ne
 800980c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800980e:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009810:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009814:	bf14      	ite	ne
 8009816:	2301      	movne	r3, #1
 8009818:	2300      	moveq	r3, #0
 800981a:	4295      	cmp	r5, r2
 800981c:	bf0c      	ite	eq
 800981e:	2300      	moveq	r3, #0
 8009820:	f003 0301 	andne.w	r3, r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 81c9 	beq.w	8009bbc <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800982a:	4b96      	ldr	r3, [pc, #600]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800982c:	429d      	cmp	r5, r3
 800982e:	f000 81c5 	beq.w	8009bbc <HAL_DMAEx_MultiBufferStart_IT+0x908>
 8009832:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009836:	4b94      	ldr	r3, [pc, #592]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009838:	4894      	ldr	r0, [pc, #592]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800983a:	4995      	ldr	r1, [pc, #596]	; (8009a90 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800983c:	429d      	cmp	r5, r3
 800983e:	bf18      	it	ne
 8009840:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009842:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009844:	bf14      	ite	ne
 8009846:	2301      	movne	r3, #1
 8009848:	2300      	moveq	r3, #0
 800984a:	4a92      	ldr	r2, [pc, #584]	; (8009a94 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800984c:	4295      	cmp	r5, r2
 800984e:	bf0c      	ite	eq
 8009850:	2300      	moveq	r3, #0
 8009852:	f003 0301 	andne.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 81ad 	beq.w	8009bb6 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 800985c:	4b89      	ldr	r3, [pc, #548]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800985e:	429d      	cmp	r5, r3
 8009860:	f000 81a9 	beq.w	8009bb6 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 8009864:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009868:	4b87      	ldr	r3, [pc, #540]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800986a:	4888      	ldr	r0, [pc, #544]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800986c:	4988      	ldr	r1, [pc, #544]	; (8009a90 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800986e:	429d      	cmp	r5, r3
 8009870:	bf18      	it	ne
 8009872:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009874:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009876:	bf14      	ite	ne
 8009878:	2301      	movne	r3, #1
 800987a:	2300      	moveq	r3, #0
 800987c:	4a85      	ldr	r2, [pc, #532]	; (8009a94 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800987e:	4295      	cmp	r5, r2
 8009880:	bf0c      	ite	eq
 8009882:	2300      	moveq	r3, #0
 8009884:	f003 0301 	andne.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 8191 	beq.w	8009bb0 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800988e:	4b7d      	ldr	r3, [pc, #500]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009890:	429d      	cmp	r5, r3
 8009892:	f000 818d 	beq.w	8009bb0 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 8009896:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800989a:	4b7b      	ldr	r3, [pc, #492]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800989c:	487b      	ldr	r0, [pc, #492]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800989e:	497c      	ldr	r1, [pc, #496]	; (8009a90 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80098a0:	429d      	cmp	r5, r3
 80098a2:	bf18      	it	ne
 80098a4:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80098a6:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80098a8:	bf14      	ite	ne
 80098aa:	2301      	movne	r3, #1
 80098ac:	2300      	moveq	r3, #0
 80098ae:	4a79      	ldr	r2, [pc, #484]	; (8009a94 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80098b0:	4295      	cmp	r5, r2
 80098b2:	bf0c      	ite	eq
 80098b4:	2300      	moveq	r3, #0
 80098b6:	f003 0301 	andne.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 8174 	beq.w	8009ba8 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 80098c0:	4b70      	ldr	r3, [pc, #448]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80098c2:	429d      	cmp	r5, r3
 80098c4:	f000 8170 	beq.w	8009ba8 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 80098c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80098cc:	e546      	b.n	800935c <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80098ce:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80098d2:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 80098d6:	3218      	adds	r2, #24
 80098d8:	429d      	cmp	r5, r3
 80098da:	bf18      	it	ne
 80098dc:	428d      	cmpne	r5, r1
 80098de:	bf14      	ite	ne
 80098e0:	2301      	movne	r3, #1
 80098e2:	2300      	moveq	r3, #0
 80098e4:	4295      	cmp	r5, r2
 80098e6:	bf0c      	ite	eq
 80098e8:	2300      	moveq	r3, #0
 80098ea:	f003 0301 	andne.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 816d 	beq.w	8009bce <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 80098f4:	4b63      	ldr	r3, [pc, #396]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80098f6:	429d      	cmp	r5, r3
 80098f8:	f000 8169 	beq.w	8009bce <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 80098fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009900:	e5d7      	b.n	80094b2 <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009902:	4b62      	ldr	r3, [pc, #392]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009904:	4960      	ldr	r1, [pc, #384]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009906:	4a63      	ldr	r2, [pc, #396]	; (8009a94 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009908:	429d      	cmp	r5, r3
 800990a:	bf18      	it	ne
 800990c:	428d      	cmpne	r5, r1
 800990e:	bf14      	ite	ne
 8009910:	2301      	movne	r3, #1
 8009912:	2300      	moveq	r3, #0
 8009914:	4295      	cmp	r5, r2
 8009916:	bf0c      	ite	eq
 8009918:	2300      	moveq	r3, #0
 800991a:	f003 0301 	andne.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 815b 	beq.w	8009bda <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8009924:	4b57      	ldr	r3, [pc, #348]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009926:	429d      	cmp	r5, r3
 8009928:	f000 8157 	beq.w	8009bda <HAL_DMAEx_MultiBufferStart_IT+0x926>
 800992c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009930:	e5d7      	b.n	80094e2 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009932:	4b55      	ldr	r3, [pc, #340]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009934:	4955      	ldr	r1, [pc, #340]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009936:	4a57      	ldr	r2, [pc, #348]	; (8009a94 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009938:	429d      	cmp	r5, r3
 800993a:	bf18      	it	ne
 800993c:	428d      	cmpne	r5, r1
 800993e:	bf14      	ite	ne
 8009940:	2301      	movne	r3, #1
 8009942:	2300      	moveq	r3, #0
 8009944:	4295      	cmp	r5, r2
 8009946:	bf0c      	ite	eq
 8009948:	2300      	moveq	r3, #0
 800994a:	f003 0301 	andne.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 8140 	beq.w	8009bd4 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8009954:	4b4b      	ldr	r3, [pc, #300]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009956:	429d      	cmp	r5, r3
 8009958:	f000 813c 	beq.w	8009bd4 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800995c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009960:	e5ed      	b.n	800953e <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009962:	4b49      	ldr	r3, [pc, #292]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009964:	4949      	ldr	r1, [pc, #292]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009966:	4a4b      	ldr	r2, [pc, #300]	; (8009a94 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009968:	429d      	cmp	r5, r3
 800996a:	bf18      	it	ne
 800996c:	428d      	cmpne	r5, r1
 800996e:	bf14      	ite	ne
 8009970:	2301      	movne	r3, #1
 8009972:	2300      	moveq	r3, #0
 8009974:	4295      	cmp	r5, r2
 8009976:	bf0c      	ite	eq
 8009978:	2300      	moveq	r3, #0
 800997a:	f003 0301 	andne.w	r3, r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 812e 	beq.w	8009be0 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8009984:	4b3f      	ldr	r3, [pc, #252]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009986:	429d      	cmp	r5, r3
 8009988:	f000 812a 	beq.w	8009be0 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800998c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009990:	e5be      	b.n	8009510 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009992:	4b3d      	ldr	r3, [pc, #244]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009994:	493d      	ldr	r1, [pc, #244]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009996:	4a3f      	ldr	r2, [pc, #252]	; (8009a94 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009998:	429d      	cmp	r5, r3
 800999a:	bf18      	it	ne
 800999c:	428d      	cmpne	r5, r1
 800999e:	bf14      	ite	ne
 80099a0:	2301      	movne	r3, #1
 80099a2:	2300      	moveq	r3, #0
 80099a4:	4295      	cmp	r5, r2
 80099a6:	bf0c      	ite	eq
 80099a8:	2300      	moveq	r3, #0
 80099aa:	f003 0301 	andne.w	r3, r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 810a 	beq.w	8009bc8 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 80099b4:	4b33      	ldr	r3, [pc, #204]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80099b6:	429d      	cmp	r5, r3
 80099b8:	f000 8106 	beq.w	8009bc8 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 80099bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80099c0:	e510      	b.n	80093e4 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80099c2:	3b48      	subs	r3, #72	; 0x48
 80099c4:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80099c8:	3218      	adds	r2, #24
 80099ca:	429d      	cmp	r5, r3
 80099cc:	bf18      	it	ne
 80099ce:	428d      	cmpne	r5, r1
 80099d0:	bf14      	ite	ne
 80099d2:	2301      	movne	r3, #1
 80099d4:	2300      	moveq	r3, #0
 80099d6:	4295      	cmp	r5, r2
 80099d8:	bf0c      	ite	eq
 80099da:	2300      	moveq	r3, #0
 80099dc:	f003 0301 	andne.w	r3, r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 8112 	beq.w	8009c0a <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80099e6:	4b27      	ldr	r3, [pc, #156]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80099e8:	429d      	cmp	r5, r3
 80099ea:	f000 810e 	beq.w	8009c0a <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80099ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80099f2:	e610      	b.n	8009616 <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80099f4:	4b24      	ldr	r3, [pc, #144]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80099f6:	4925      	ldr	r1, [pc, #148]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 80099f8:	4a26      	ldr	r2, [pc, #152]	; (8009a94 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80099fa:	429d      	cmp	r5, r3
 80099fc:	bf18      	it	ne
 80099fe:	428d      	cmpne	r5, r1
 8009a00:	bf14      	ite	ne
 8009a02:	2301      	movne	r3, #1
 8009a04:	2300      	moveq	r3, #0
 8009a06:	4295      	cmp	r5, r2
 8009a08:	bf0c      	ite	eq
 8009a0a:	2300      	moveq	r3, #0
 8009a0c:	f003 0301 	andne.w	r3, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 80ee 	beq.w	8009bf2 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8009a16:	4b1b      	ldr	r3, [pc, #108]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009a18:	429d      	cmp	r5, r3
 8009a1a:	f000 80ea 	beq.w	8009bf2 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8009a1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009a22:	e610      	b.n	8009646 <HAL_DMAEx_MultiBufferStart_IT+0x392>
 8009a24:	4b19      	ldr	r3, [pc, #100]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009a26:	4918      	ldr	r1, [pc, #96]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009a28:	4a1a      	ldr	r2, [pc, #104]	; (8009a94 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009a2a:	429d      	cmp	r5, r3
 8009a2c:	bf18      	it	ne
 8009a2e:	428d      	cmpne	r5, r1
 8009a30:	bf14      	ite	ne
 8009a32:	2301      	movne	r3, #1
 8009a34:	2300      	moveq	r3, #0
 8009a36:	4295      	cmp	r5, r2
 8009a38:	bf0c      	ite	eq
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	f003 0301 	andne.w	r3, r3, #1
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 80e8 	beq.w	8009c16 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8009a46:	4b0f      	ldr	r3, [pc, #60]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009a48:	429d      	cmp	r5, r3
 8009a4a:	f000 80e4 	beq.w	8009c16 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8009a4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009a52:	e66b      	b.n	800972c <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009a54:	4b0d      	ldr	r3, [pc, #52]	; (8009a8c <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009a56:	490c      	ldr	r1, [pc, #48]	; (8009a88 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009a58:	4a0e      	ldr	r2, [pc, #56]	; (8009a94 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009a5a:	429d      	cmp	r5, r3
 8009a5c:	bf18      	it	ne
 8009a5e:	428d      	cmpne	r5, r1
 8009a60:	bf14      	ite	ne
 8009a62:	2301      	movne	r3, #1
 8009a64:	2300      	moveq	r3, #0
 8009a66:	4295      	cmp	r5, r2
 8009a68:	bf0c      	ite	eq
 8009a6a:	2300      	moveq	r3, #0
 8009a6c:	f003 0301 	andne.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 80bb 	beq.w	8009bec <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8009a76:	4b03      	ldr	r3, [pc, #12]	; (8009a84 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009a78:	429d      	cmp	r5, r3
 8009a7a:	f000 80b7 	beq.w	8009bec <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8009a7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a82:	e60e      	b.n	80096a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8009a84:	400264a0 	.word	0x400264a0
 8009a88:	40026040 	.word	0x40026040
 8009a8c:	40026440 	.word	0x40026440
 8009a90:	40026400 	.word	0x40026400
 8009a94:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a98:	3b48      	subs	r3, #72	; 0x48
 8009a9a:	3118      	adds	r1, #24
 8009a9c:	3218      	adds	r2, #24
 8009a9e:	429d      	cmp	r5, r3
 8009aa0:	bf18      	it	ne
 8009aa2:	428d      	cmpne	r5, r1
 8009aa4:	bf14      	ite	ne
 8009aa6:	2301      	movne	r3, #1
 8009aa8:	2300      	moveq	r3, #0
 8009aaa:	4295      	cmp	r5, r2
 8009aac:	bf0c      	ite	eq
 8009aae:	2300      	moveq	r3, #0
 8009ab0:	f003 0301 	andne.w	r3, r3, #1
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 80ab 	beq.w	8009c10 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8009aba:	4b5a      	ldr	r3, [pc, #360]	; (8009c24 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009abc:	429d      	cmp	r5, r3
 8009abe:	f000 80a7 	beq.w	8009c10 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8009ac2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009ac6:	e619      	b.n	80096fc <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009ac8:	4b57      	ldr	r3, [pc, #348]	; (8009c28 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009aca:	4958      	ldr	r1, [pc, #352]	; (8009c2c <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009acc:	4a58      	ldr	r2, [pc, #352]	; (8009c30 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009ace:	429d      	cmp	r5, r3
 8009ad0:	bf18      	it	ne
 8009ad2:	428d      	cmpne	r5, r1
 8009ad4:	bf14      	ite	ne
 8009ad6:	2301      	movne	r3, #1
 8009ad8:	2300      	moveq	r3, #0
 8009ada:	4295      	cmp	r5, r2
 8009adc:	bf0c      	ite	eq
 8009ade:	2300      	moveq	r3, #0
 8009ae0:	f003 0301 	andne.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 808a 	beq.w	8009bfe <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8009aea:	4b4e      	ldr	r3, [pc, #312]	; (8009c24 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009aec:	429d      	cmp	r5, r3
 8009aee:	f000 8086 	beq.w	8009bfe <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8009af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009af6:	e5bd      	b.n	8009674 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009af8:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009afa:	494b      	ldr	r1, [pc, #300]	; (8009c28 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009afc:	4a4c      	ldr	r2, [pc, #304]	; (8009c30 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009afe:	429d      	cmp	r5, r3
 8009b00:	bf18      	it	ne
 8009b02:	428d      	cmpne	r5, r1
 8009b04:	bf14      	ite	ne
 8009b06:	2301      	movne	r3, #1
 8009b08:	2300      	moveq	r3, #0
 8009b0a:	4295      	cmp	r5, r2
 8009b0c:	bf0c      	ite	eq
 8009b0e:	2300      	moveq	r3, #0
 8009b10:	f003 0301 	andne.w	r3, r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 8081 	beq.w	8009c1c <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8009b1a:	4b42      	ldr	r3, [pc, #264]	; (8009c24 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009b1c:	429d      	cmp	r5, r3
 8009b1e:	d07d      	beq.n	8009c1c <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8009b20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b24:	e630      	b.n	8009788 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009b26:	4b40      	ldr	r3, [pc, #256]	; (8009c28 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009b28:	4940      	ldr	r1, [pc, #256]	; (8009c2c <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009b2a:	4a41      	ldr	r2, [pc, #260]	; (8009c30 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009b2c:	429d      	cmp	r5, r3
 8009b2e:	bf18      	it	ne
 8009b30:	428d      	cmpne	r5, r1
 8009b32:	bf14      	ite	ne
 8009b34:	2301      	movne	r3, #1
 8009b36:	2300      	moveq	r3, #0
 8009b38:	4295      	cmp	r5, r2
 8009b3a:	bf0c      	ite	eq
 8009b3c:	2300      	moveq	r3, #0
 8009b3e:	f003 0301 	andne.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d058      	beq.n	8009bf8 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8009b46:	4b37      	ldr	r3, [pc, #220]	; (8009c24 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009b48:	429d      	cmp	r5, r3
 8009b4a:	d055      	beq.n	8009bf8 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8009b4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b50:	e496      	b.n	8009480 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009b52:	4b35      	ldr	r3, [pc, #212]	; (8009c28 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009b54:	4935      	ldr	r1, [pc, #212]	; (8009c2c <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009b56:	4a36      	ldr	r2, [pc, #216]	; (8009c30 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009b58:	429d      	cmp	r5, r3
 8009b5a:	bf18      	it	ne
 8009b5c:	428d      	cmpne	r5, r1
 8009b5e:	bf14      	ite	ne
 8009b60:	2301      	movne	r3, #1
 8009b62:	2300      	moveq	r3, #0
 8009b64:	4295      	cmp	r5, r2
 8009b66:	bf0c      	ite	eq
 8009b68:	2300      	moveq	r3, #0
 8009b6a:	f003 0301 	andne.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d048      	beq.n	8009c04 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8009b72:	4b2c      	ldr	r3, [pc, #176]	; (8009c24 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009b74:	429d      	cmp	r5, r3
 8009b76:	d045      	beq.n	8009c04 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8009b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b7c:	e5ed      	b.n	800975a <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009b7e:	4b2a      	ldr	r3, [pc, #168]	; (8009c28 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009b80:	492a      	ldr	r1, [pc, #168]	; (8009c2c <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009b82:	4a2b      	ldr	r2, [pc, #172]	; (8009c30 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009b84:	429d      	cmp	r5, r3
 8009b86:	bf18      	it	ne
 8009b88:	428d      	cmpne	r5, r1
 8009b8a:	bf14      	ite	ne
 8009b8c:	2301      	movne	r3, #1
 8009b8e:	2300      	moveq	r3, #0
 8009b90:	4295      	cmp	r5, r2
 8009b92:	bf0c      	ite	eq
 8009b94:	2300      	moveq	r3, #0
 8009b96:	f003 0301 	andne.w	r3, r3, #1
 8009b9a:	b323      	cbz	r3, 8009be6 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8009b9c:	4b21      	ldr	r3, [pc, #132]	; (8009c24 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009b9e:	429d      	cmp	r5, r3
 8009ba0:	d021      	beq.n	8009be6 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8009ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ba6:	e44b      	b.n	8009440 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 8009ba8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009bac:	f7ff bbd6 	b.w	800935c <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009bb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009bb4:	e671      	b.n	800989a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009bb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009bba:	e655      	b.n	8009868 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009bbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bc0:	e639      	b.n	8009836 <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009bc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bc6:	e61c      	b.n	8009802 <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009bcc:	e40a      	b.n	80093e4 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bd2:	e46e      	b.n	80094b2 <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009bd4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009bd8:	e4b1      	b.n	800953e <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009bda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bde:	e480      	b.n	80094e2 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009be0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009be4:	e494      	b.n	8009510 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009bea:	e429      	b.n	8009440 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009bec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009bf0:	e557      	b.n	80096a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009bf2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bf6:	e526      	b.n	8009646 <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009bfc:	e440      	b.n	8009480 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009bfe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c02:	e537      	b.n	8009674 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 8009c04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c08:	e5a7      	b.n	800975a <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c0e:	e502      	b.n	8009616 <HAL_DMAEx_MultiBufferStart_IT+0x362>
 8009c10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c14:	e572      	b.n	80096fc <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c1a:	e587      	b.n	800972c <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009c20:	e5b2      	b.n	8009788 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8009c22:	bf00      	nop
 8009c24:	400264a0 	.word	0x400264a0
 8009c28:	40026040 	.word	0x40026040
 8009c2c:	40026440 	.word	0x40026440
 8009c30:	400260a0 	.word	0x400260a0

08009c34 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009c38:	2900      	cmp	r1, #0
 8009c3a:	d15b      	bne.n	8009cf4 <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8009c3c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 8009c40:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009c42:	69e3      	ldr	r3, [r4, #28]
 8009c44:	b90b      	cbnz	r3, 8009c4a <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 8009c46:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 8009c4a:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009c4c:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009c4e:	4b2e      	ldr	r3, [pc, #184]	; (8009d08 <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 8009c50:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009c52:	402b      	ands	r3, r5
 8009c54:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8009c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009c5a:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009c5c:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009c5e:	f7fd ffbb 	bl	8007bd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8009c62:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009c64:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009c66:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8009c68:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009c6a:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009c6c:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8009c6e:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009c70:	f7fd ffb2 	bl	8007bd8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8009c74:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009c76:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009c7a:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8009c7c:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009c7e:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009c80:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8009c82:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009c84:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8009c8a:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8009c8c:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009c8e:	f7fd ffa3 	bl	8007bd8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8009c92:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009c94:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8009c96:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009c98:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8009c9a:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009c9c:	f7fd ff9c 	bl	8007bd8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8009ca0:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8009ca2:	491a      	ldr	r1, [pc, #104]	; (8009d0c <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 8009ca4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 8009ca8:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009caa:	4a19      	ldr	r2, [pc, #100]	; (8009d10 <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 8009cac:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8009cae:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009cb0:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009cb2:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8009cb4:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 8009cb6:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009cb8:	f7fd ff8e 	bl	8007bd8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8009cbc:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009cbe:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009cc0:	4a14      	ldr	r2, [pc, #80]	; (8009d14 <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 8009cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc6:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009cc8:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8009cca:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ccc:	f7fd ff84 	bl	8007bd8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8009cd0:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009cd2:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 8009cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009cd8:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 8009cda:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009cdc:	d103      	bne.n	8009ce6 <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8009cde:	69d9      	ldr	r1, [r3, #28]
 8009ce0:	4a0d      	ldr	r2, [pc, #52]	; (8009d18 <ETH_MACDMAConfig+0xe4>)
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8009ce6:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8009ce8:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8009cea:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8009cec:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8009cee:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8009cf0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8009cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 8009cf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009cfc:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8009d00:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8009d04:	e79d      	b.n	8009c42 <ETH_MACDMAConfig+0xe>
 8009d06:	bf00      	nop
 8009d08:	ff20810f 	.word	0xff20810f
 8009d0c:	f8de3f23 	.word	0xf8de3f23
 8009d10:	02200004 	.word	0x02200004
 8009d14:	02c12080 	.word	0x02c12080
 8009d18:	00010040 	.word	0x00010040
 8009d1c:	40028000 	.word	0x40028000

08009d20 <HAL_ETH_DMATxDescListInit>:
{
 8009d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d24:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 8009d26:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 8009d2a:	2801      	cmp	r0, #1
 8009d2c:	d03b      	beq.n	8009da6 <HAL_ETH_DMATxDescListInit+0x86>
 8009d2e:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009d32:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 8009d34:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 8009d38:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009d3c:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 8009d40:	b31b      	cbz	r3, 8009d8a <HAL_ETH_DMATxDescListInit+0x6a>
 8009d42:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009d44:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 8009d48:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009d4c:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009d4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 8009d52:	f10c 36ff 	add.w	r6, ip, #4294967295
 8009d56:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8009d5a:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009d5c:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8009d5e:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009d60:	f1ba 0f00 	cmp.w	sl, #0
 8009d64:	d103      	bne.n	8009d6e <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8009d66:	6817      	ldr	r7, [r2, #0]
 8009d68:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 8009d6c:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 8009d6e:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 8009d70:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 8009d74:	bf34      	ite	cc
 8009d76:	4675      	movcc	r5, lr
 8009d78:	f102 0e20 	addcs.w	lr, r2, #32
 8009d7c:	4563      	cmp	r3, ip
 8009d7e:	60d5      	str	r5, [r2, #12]
 8009d80:	f10c 0501 	add.w	r5, ip, #1
 8009d84:	4672      	mov	r2, lr
 8009d86:	46ac      	mov	ip, r5
 8009d88:	d8e3      	bhi.n	8009d52 <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009d8a:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 8009d8e:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 8009d90:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d96:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 8009d98:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 8009d9c:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 8009d9e:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 8009da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 8009da6:	2002      	movs	r0, #2
}
 8009da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009dac <HAL_ETH_DMARxDescListInit>:
{
 8009dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db0:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 8009db2:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 8009db6:	2801      	cmp	r0, #1
 8009db8:	d033      	beq.n	8009e22 <HAL_ETH_DMARxDescListInit+0x76>
 8009dba:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009dbe:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 8009dc0:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 8009dc2:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009dc6:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 8009dca:	b1eb      	cbz	r3, 8009e08 <HAL_ETH_DMARxDescListInit+0x5c>
 8009dcc:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 8009dce:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8009dd2:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8009dd4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009dd8:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 8009ddc:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8009de0:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8009de2:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 8009de4:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 8009de8:	45c6      	cmp	lr, r8
 8009dea:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8009dee:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009df0:	bf34      	ite	cc
 8009df2:	4675      	movcc	r5, lr
 8009df4:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 8009df8:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009dfa:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 8009dfc:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 8009dfe:	f10c 0501 	add.w	r5, ip, #1
 8009e02:	4672      	mov	r2, lr
 8009e04:	46ac      	mov	ip, r5
 8009e06:	d8e9      	bhi.n	8009ddc <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8009e08:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 8009e0a:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 8009e0c:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8009e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e12:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 8009e14:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 8009e18:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 8009e1a:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 8009e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 8009e22:	2002      	movs	r0, #2
}
 8009e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009e28 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8009e28:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d078      	beq.n	8009f22 <HAL_ETH_TransmitFrame+0xfa>
 8009e30:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009e34:	2302      	movs	r3, #2
 8009e36:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 8009e38:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009e3c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 8009e40:	2900      	cmp	r1, #0
 8009e42:	d03c      	beq.n	8009ebe <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009e44:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009e46:	6818      	ldr	r0, [r3, #0]
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	db60      	blt.n	8009f0e <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8009e4c:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8009e50:	4281      	cmp	r1, r0
{
 8009e52:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8009e54:	d93c      	bls.n	8009ed0 <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8009e56:	4c34      	ldr	r4, [pc, #208]	; (8009f28 <HAL_ETH_TransmitFrame+0x100>)
 8009e58:	fba4 4c01 	umull	r4, ip, r4, r1
 8009e5c:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8009e60:	fb00 101c 	mls	r0, r0, ip, r1
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d030      	beq.n	8009eca <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 8009e68:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8009e6c:	482f      	ldr	r0, [pc, #188]	; (8009f2c <HAL_ETH_TransmitFrame+0x104>)
 8009e6e:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 8009e72:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009e74:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8009e78:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 8009e7c:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8009e80:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8009e84:	e00f      	b.n	8009ea6 <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 8009e86:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009e88:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 8009e8a:	d104      	bne.n	8009e96 <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8009e8c:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8009e8e:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8009e90:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8009e94:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009e96:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 8009e98:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009e9a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8009e9e:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009ea0:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009ea2:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8009ea4:	d03b      	beq.n	8009f1e <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8009eac:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 8009eae:	2c00      	cmp	r4, #0
 8009eb0:	d1e9      	bne.n	8009e86 <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8009eb2:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009eb4:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8009eb6:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8009eba:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 8009ebc:	e7eb      	b.n	8009e96 <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 8009ebe:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 8009ec0:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009ec4:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 8009ec8:	4770      	bx	lr
  if (bufcount == 1)
 8009eca:	f1bc 0f01 	cmp.w	ip, #1
 8009ece:	d1cd      	bne.n	8009e6c <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009ed0:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8009ed2:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009ed6:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009ed8:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8009edc:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009ede:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009ee0:	6819      	ldr	r1, [r3, #0]
 8009ee2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009ee6:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009ee8:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8009eea:	6813      	ldr	r3, [r2, #0]
 8009eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef0:	6959      	ldr	r1, [r3, #20]
 8009ef2:	0749      	lsls	r1, r1, #29
 8009ef4:	d503      	bpl.n	8009efe <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8009ef6:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 8009ef8:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8009efa:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 8009efc:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 8009efe:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8009f00:	2101      	movs	r1, #1
  return HAL_OK;
 8009f02:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8009f04:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009f08:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8009f0c:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8009f0e:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 8009f10:	2300      	movs	r3, #0
    return HAL_ERROR;
 8009f12:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8009f14:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009f18:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 8009f1c:	4770      	bx	lr
 8009f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f20:	e7e3      	b.n	8009eea <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 8009f22:	2002      	movs	r0, #2
}
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	ac02b00b 	.word	0xac02b00b
 8009f2c:	fffffa0c 	.word	0xfffffa0c

08009f30 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8009f30:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d02f      	beq.n	8009f98 <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 8009f38:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009f3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009f3c:	4602      	mov	r2, r0
{
 8009f3e:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 8009f40:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009f42:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8009f46:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009f4a:	6819      	ldr	r1, [r3, #0]
 8009f4c:	2900      	cmp	r1, #0
 8009f4e:	db15      	blt.n	8009f7c <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 8009f50:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8009f52:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 8009f54:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8009f56:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8009f5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009f5e:	d016      	beq.n	8009f8e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8009f60:	6819      	ldr	r1, [r3, #0]
 8009f62:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 8009f66:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8009f68:	d118      	bne.n	8009f9c <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8009f6a:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 8009f6c:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8009f6e:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 8009f70:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009f72:	6819      	ldr	r1, [r3, #0]
 8009f74:	2900      	cmp	r1, #0
 8009f76:	db01      	blt.n	8009f7c <HAL_ETH_GetReceivedFrame_IT+0x4c>
 8009f78:	2804      	cmp	r0, #4
 8009f7a:	d1ea      	bne.n	8009f52 <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 8009f7c:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8009f7e:	2100      	movs	r1, #0
  return HAL_ERROR;
 8009f80:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8009f82:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009f86:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 8009f8a:	bc30      	pop	{r4, r5}
 8009f8c:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8009f8e:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009f90:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 8009f92:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009f94:	6293      	str	r3, [r2, #40]	; 0x28
 8009f96:	e7ec      	b.n	8009f72 <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 8009f98:	2002      	movs	r0, #2
}
 8009f9a:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 8009f9c:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8009f9e:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8009fa0:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 8009fa2:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 8009fa4:	d011      	beq.n	8009fca <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8009fa6:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009fa8:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 8009faa:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8009fac:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009fae:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009fb0:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 8009fb4:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8009fb6:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009fb8:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009fba:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8009fbc:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 8009fc0:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009fc2:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 8009fc4:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 8009fc8:	e7df      	b.n	8009f8a <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8009fca:	4618      	mov	r0, r3
 8009fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8009fce:	e7eb      	b.n	8009fa8 <HAL_ETH_GetReceivedFrame_IT+0x78>

08009fd0 <HAL_ETH_TxCpltCallback>:
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop

08009fd4 <HAL_ETH_ErrorCallback>:
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop

08009fd8 <HAL_ETH_IRQHandler>:
{
 8009fd8:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8009fda:	6803      	ldr	r3, [r0, #0]
{
 8009fdc:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8009fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe2:	695d      	ldr	r5, [r3, #20]
 8009fe4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8009fe8:	d125      	bne.n	800a036 <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8009fea:	695a      	ldr	r2, [r3, #20]
 8009fec:	07d2      	lsls	r2, r2, #31
 8009fee:	d416      	bmi.n	800a01e <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8009ff0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009ff4:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8009ff6:	695b      	ldr	r3, [r3, #20]
 8009ff8:	041b      	lsls	r3, r3, #16
 8009ffa:	d400      	bmi.n	8009ffe <HAL_ETH_IRQHandler+0x26>
}
 8009ffc:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 8009ffe:	4620      	mov	r0, r4
 800a000:	f7ff ffe8 	bl	8009fd4 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 800a00a:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a00c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800a010:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a012:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a014:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a018:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800a01c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 800a01e:	f7ff ffd7 	bl	8009fd0 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	2201      	movs	r2, #1
 800a026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02a:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a02c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a030:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800a034:	e7dc      	b.n	8009ff0 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800a036:	f009 fe03 	bl	8013c40 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800a03e:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800a044:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a046:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a048:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a04c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a050:	e7ce      	b.n	8009ff0 <HAL_ETH_IRQHandler+0x18>
 800a052:	bf00      	nop

0800a054 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a054:	8a03      	ldrh	r3, [r0, #16]
 800a056:	2b20      	cmp	r3, #32
{
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	4604      	mov	r4, r0
 800a05c:	460e      	mov	r6, r1
 800a05e:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a060:	d834      	bhi.n	800a0cc <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a062:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a066:	2b82      	cmp	r3, #130	; 0x82
 800a068:	d039      	beq.n	800a0de <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a06a:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 800a06c:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a06e:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a070:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a074:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a076:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800a07a:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a07c:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800a07e:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a082:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a084:	430b      	orrs	r3, r1
 800a086:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800a088:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 800a08c:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800a08e:	f7fd fd9d 	bl	8007bcc <HAL_GetTick>
 800a092:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a094:	e004      	b.n	800a0a0 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 800a096:	6821      	ldr	r1, [r4, #0]
 800a098:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a09a:	f013 0301 	ands.w	r3, r3, #1
 800a09e:	d00d      	beq.n	800a0bc <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800a0a0:	f7fd fd94 	bl	8007bcc <HAL_GetTick>
 800a0a4:	1b83      	subs	r3, r0, r6
 800a0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0aa:	d3f4      	bcc.n	800a096 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800a0ac:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800a0ae:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800a0b0:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800a0b2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a0b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a0bc:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 800a0be:	2101      	movs	r1, #1
  return HAL_OK;
 800a0c0:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a0c2:	b292      	uxth	r2, r2
 800a0c4:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 800a0c6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a0cc:	f240 5116 	movw	r1, #1302	; 0x516
 800a0d0:	4804      	ldr	r0, [pc, #16]	; (800a0e4 <HAL_ETH_ReadPHYRegister+0x90>)
 800a0d2:	f7fa f853 	bl	800417c <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a0d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a0da:	2b82      	cmp	r3, #130	; 0x82
 800a0dc:	d1c5      	bne.n	800a06a <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 800a0de:	2002      	movs	r0, #2
}
 800a0e0:	bd70      	pop	{r4, r5, r6, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0802bc98 	.word	0x0802bc98

0800a0e8 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a0e8:	8a03      	ldrh	r3, [r0, #16]
 800a0ea:	2b20      	cmp	r3, #32
{
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	460d      	mov	r5, r1
 800a0f2:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a0f4:	d833      	bhi.n	800a15e <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a0f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a0fa:	2b42      	cmp	r3, #66	; 0x42
 800a0fc:	d038      	beq.n	800a170 <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a0fe:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 800a100:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a102:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a104:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800a108:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a10a:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a10c:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800a110:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a112:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800a114:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800a116:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a11a:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a11c:	430b      	orrs	r3, r1
 800a11e:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800a120:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 800a124:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800a126:	f7fd fd51 	bl	8007bcc <HAL_GetTick>
 800a12a:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a12c:	e004      	b.n	800a138 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a132:	f013 0301 	ands.w	r3, r3, #1
 800a136:	d00d      	beq.n	800a154 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800a138:	f7fd fd48 	bl	8007bcc <HAL_GetTick>
 800a13c:	1b43      	subs	r3, r0, r5
 800a13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a142:	d3f4      	bcc.n	800a12e <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 800a144:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800a146:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800a148:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800a14a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a14e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800a152:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800a154:	2201      	movs	r2, #1
  return HAL_OK; 
 800a156:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a158:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800a15c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a15e:	f240 515e 	movw	r1, #1374	; 0x55e
 800a162:	4804      	ldr	r0, [pc, #16]	; (800a174 <HAL_ETH_WritePHYRegister+0x8c>)
 800a164:	f7fa f80a 	bl	800417c <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a168:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a16c:	2b42      	cmp	r3, #66	; 0x42
 800a16e:	d1c6      	bne.n	800a0fe <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800a170:	2002      	movs	r0, #2
}
 800a172:	bd70      	pop	{r4, r5, r6, pc}
 800a174:	0802bc98 	.word	0x0802bc98

0800a178 <HAL_ETH_Init>:
{
 800a178:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800a17a:	2300      	movs	r3, #0
{
 800a17c:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800a17e:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800a180:	2800      	cmp	r0, #0
 800a182:	f000 80f5 	beq.w	800a370 <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800a186:	6843      	ldr	r3, [r0, #4]
 800a188:	4604      	mov	r4, r0
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	f200 809c 	bhi.w	800a2c8 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a190:	69a3      	ldr	r3, [r4, #24]
 800a192:	2b01      	cmp	r3, #1
 800a194:	f200 808f 	bhi.w	800a2b6 <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a198:	69e3      	ldr	r3, [r4, #28]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d873      	bhi.n	800a286 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800a19e:	6a23      	ldr	r3, [r4, #32]
 800a1a0:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a1a4:	d177      	bne.n	800a296 <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 800a1a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a1aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d07b      	beq.n	800a2aa <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1b2:	4b91      	ldr	r3, [pc, #580]	; (800a3f8 <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a1b4:	4a91      	ldr	r2, [pc, #580]	; (800a3fc <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a1b8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800a1bc:	6459      	str	r1, [r3, #68]	; 0x44
 800a1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a1c8:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a1ca:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a1cc:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a1d4:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a1d6:	6851      	ldr	r1, [r2, #4]
 800a1d8:	6a20      	ldr	r0, [r4, #32]
 800a1da:	4301      	orrs	r1, r0
 800a1dc:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	f042 0201 	orr.w	r2, r2, #1
 800a1e4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800a1e6:	f7fd fcf1 	bl	8007bcc <HAL_GetTick>
 800a1ea:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a1ec:	e005      	b.n	800a1fa <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800a1ee:	f7fd fced 	bl	8007bcc <HAL_GetTick>
 800a1f2:	1b43      	subs	r3, r0, r5
 800a1f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a1f8:	d86f      	bhi.n	800a2da <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a200:	6812      	ldr	r2, [r2, #0]
 800a202:	07d0      	lsls	r0, r2, #31
 800a204:	d4f3      	bmi.n	800a1ee <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 800a206:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800a208:	f003 f960 	bl	800d4cc <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a20c:	4b7c      	ldr	r3, [pc, #496]	; (800a400 <HAL_ETH_Init+0x288>)
 800a20e:	4a7d      	ldr	r2, [pc, #500]	; (800a404 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800a210:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a214:	4403      	add	r3, r0
 800a216:	4293      	cmp	r3, r2
 800a218:	d274      	bcs.n	800a304 <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800a21a:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a21e:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a220:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a224:	2100      	movs	r1, #0
 800a226:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a228:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a22a:	f7ff ff5d 	bl	800a0e8 <HAL_ETH_WritePHYRegister>
 800a22e:	4605      	mov	r5, r0
 800a230:	2800      	cmp	r0, #0
 800a232:	d15c      	bne.n	800a2ee <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 800a234:	20ff      	movs	r0, #255	; 0xff
 800a236:	f7fd fccf 	bl	8007bd8 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d178      	bne.n	800a332 <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a240:	68a3      	ldr	r3, [r4, #8]
 800a242:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a246:	f040 809e 	bne.w	800a386 <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800a24a:	68e3      	ldr	r3, [r4, #12]
 800a24c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a250:	f040 8092 	bne.w	800a378 <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800a254:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a256:	08db      	lsrs	r3, r3, #3
 800a258:	2100      	movs	r1, #0
 800a25a:	4620      	mov	r0, r4
 800a25c:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800a260:	b292      	uxth	r2, r2
 800a262:	f7ff ff41 	bl	800a0e8 <HAL_ETH_WritePHYRegister>
 800a266:	2800      	cmp	r0, #0
 800a268:	d141      	bne.n	800a2ee <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 800a26a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a26e:	f7fd fcb3 	bl	8007bd8 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800a272:	4620      	mov	r0, r4
 800a274:	2100      	movs	r1, #0
 800a276:	f7ff fcdd 	bl	8009c34 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800a27a:	2301      	movs	r3, #1
}
 800a27c:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800a27e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a282:	b003      	add	sp, #12
 800a284:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a286:	21e0      	movs	r1, #224	; 0xe0
 800a288:	485f      	ldr	r0, [pc, #380]	; (800a408 <HAL_ETH_Init+0x290>)
 800a28a:	f7f9 ff77 	bl	800417c <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800a28e:	6a23      	ldr	r3, [r4, #32]
 800a290:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a294:	d087      	beq.n	800a1a6 <HAL_ETH_Init+0x2e>
 800a296:	21e1      	movs	r1, #225	; 0xe1
 800a298:	485b      	ldr	r0, [pc, #364]	; (800a408 <HAL_ETH_Init+0x290>)
 800a29a:	f7f9 ff6f 	bl	800417c <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800a29e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a2a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d183      	bne.n	800a1b2 <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 800a2aa:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 800a2ac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800a2b0:	f009 fc38 	bl	8013b24 <HAL_ETH_MspInit>
 800a2b4:	e77d      	b.n	800a1b2 <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a2b6:	21df      	movs	r1, #223	; 0xdf
 800a2b8:	4853      	ldr	r0, [pc, #332]	; (800a408 <HAL_ETH_Init+0x290>)
 800a2ba:	f7f9 ff5f 	bl	800417c <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a2be:	69e3      	ldr	r3, [r4, #28]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	f67f af6c 	bls.w	800a19e <HAL_ETH_Init+0x26>
 800a2c6:	e7de      	b.n	800a286 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800a2c8:	21de      	movs	r1, #222	; 0xde
 800a2ca:	484f      	ldr	r0, [pc, #316]	; (800a408 <HAL_ETH_Init+0x290>)
 800a2cc:	f7f9 ff56 	bl	800417c <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a2d0:	69a3      	ldr	r3, [r4, #24]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	f67f af60 	bls.w	800a198 <HAL_ETH_Init+0x20>
 800a2d8:	e7ed      	b.n	800a2b6 <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 800a2dc:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 800a2de:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a2e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a2e4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	b003      	add	sp, #12
 800a2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	f7ff fc9f 	bl	8009c34 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800a2f6:	2301      	movs	r3, #1
      return HAL_ERROR;
 800a2f8:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 800a2fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a2fe:	4628      	mov	r0, r5
 800a300:	b003      	add	sp, #12
 800a302:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800a304:	4b41      	ldr	r3, [pc, #260]	; (800a40c <HAL_ETH_Init+0x294>)
 800a306:	4a42      	ldr	r2, [pc, #264]	; (800a410 <HAL_ETH_Init+0x298>)
 800a308:	4403      	add	r3, r0
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d90e      	bls.n	800a32c <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800a30e:	4b41      	ldr	r3, [pc, #260]	; (800a414 <HAL_ETH_Init+0x29c>)
 800a310:	4a41      	ldr	r2, [pc, #260]	; (800a418 <HAL_ETH_Init+0x2a0>)
 800a312:	4403      	add	r3, r0
 800a314:	4293      	cmp	r3, r2
 800a316:	d382      	bcc.n	800a21e <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800a318:	4b40      	ldr	r3, [pc, #256]	; (800a41c <HAL_ETH_Init+0x2a4>)
 800a31a:	4a41      	ldr	r2, [pc, #260]	; (800a420 <HAL_ETH_Init+0x2a8>)
 800a31c:	4403      	add	r3, r0
 800a31e:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800a320:	bf94      	ite	ls
 800a322:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800a326:	f045 0510 	orrhi.w	r5, r5, #16
 800a32a:	e778      	b.n	800a21e <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800a32c:	f045 050c 	orr.w	r5, r5, #12
 800a330:	e775      	b.n	800a21e <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 800a332:	f7fd fc4b 	bl	8007bcc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a336:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a33a:	4606      	mov	r6, r0
 800a33c:	e002      	b.n	800a344 <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800a33e:	9b00      	ldr	r3, [sp, #0]
 800a340:	0759      	lsls	r1, r3, #29
 800a342:	d426      	bmi.n	800a392 <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a344:	466a      	mov	r2, sp
 800a346:	2101      	movs	r1, #1
 800a348:	4620      	mov	r0, r4
 800a34a:	f7ff fe83 	bl	800a054 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a34e:	f7fd fc3d 	bl	8007bcc <HAL_GetTick>
 800a352:	1b80      	subs	r0, r0, r6
 800a354:	42b8      	cmp	r0, r7
 800a356:	d9f2      	bls.n	800a33e <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 800a358:	2101      	movs	r1, #1
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7ff fc6a 	bl	8009c34 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800a360:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800a362:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800a364:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800a366:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800a36a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800a36e:	e7bb      	b.n	800a2e8 <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 800a370:	2501      	movs	r5, #1
}
 800a372:	4628      	mov	r0, r5
 800a374:	b003      	add	sp, #12
 800a376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800a378:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800a37c:	4822      	ldr	r0, [pc, #136]	; (800a408 <HAL_ETH_Init+0x290>)
 800a37e:	f7f9 fefd 	bl	800417c <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a382:	68e3      	ldr	r3, [r4, #12]
 800a384:	e766      	b.n	800a254 <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a386:	f240 11c5 	movw	r1, #453	; 0x1c5
 800a38a:	481f      	ldr	r0, [pc, #124]	; (800a408 <HAL_ETH_Init+0x290>)
 800a38c:	f7f9 fef6 	bl	800417c <assert_failed>
 800a390:	e75b      	b.n	800a24a <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800a392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a396:	2100      	movs	r1, #0
 800a398:	4620      	mov	r0, r4
 800a39a:	f7ff fea5 	bl	800a0e8 <HAL_ETH_WritePHYRegister>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d1a5      	bne.n	800a2ee <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 800a3a2:	f7fd fc13 	bl	8007bcc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a3a6:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	e002      	b.n	800a3b4 <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a3ae:	9b00      	ldr	r3, [sp, #0]
 800a3b0:	069a      	lsls	r2, r3, #26
 800a3b2:	d40a      	bmi.n	800a3ca <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a3b4:	466a      	mov	r2, sp
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f7ff fe4b 	bl	800a054 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a3be:	f7fd fc05 	bl	8007bcc <HAL_GetTick>
 800a3c2:	1b80      	subs	r0, r0, r6
 800a3c4:	42b8      	cmp	r0, r7
 800a3c6:	d9f2      	bls.n	800a3ae <HAL_ETH_Init+0x236>
 800a3c8:	e7c6      	b.n	800a358 <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800a3ca:	466a      	mov	r2, sp
 800a3cc:	2110      	movs	r1, #16
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f7ff fe40 	bl	800a054 <HAL_ETH_ReadPHYRegister>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d18a      	bne.n	800a2ee <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a3d8:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800a3da:	f013 0204 	ands.w	r2, r3, #4
 800a3de:	bf18      	it	ne
 800a3e0:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800a3e4:	079b      	lsls	r3, r3, #30
 800a3e6:	60e2      	str	r2, [r4, #12]
 800a3e8:	d501      	bpl.n	800a3ee <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800a3ea:	60a0      	str	r0, [r4, #8]
 800a3ec:	e741      	b.n	800a272 <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 800a3ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a3f2:	60a3      	str	r3, [r4, #8]
 800a3f4:	e73d      	b.n	800a272 <HAL_ETH_Init+0xfa>
 800a3f6:	bf00      	nop
 800a3f8:	40023800 	.word	0x40023800
 800a3fc:	40013800 	.word	0x40013800
 800a400:	feced300 	.word	0xfeced300
 800a404:	00e4e1c0 	.word	0x00e4e1c0
 800a408:	0802bc98 	.word	0x0802bc98
 800a40c:	fde9f140 	.word	0xfde9f140
 800a410:	017d783f 	.word	0x017d783f
 800a414:	fc6c7900 	.word	0xfc6c7900
 800a418:	02625a00 	.word	0x02625a00
 800a41c:	fa0a1f00 	.word	0xfa0a1f00
 800a420:	02faf07f 	.word	0x02faf07f

0800a424 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800a424:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d044      	beq.n	800a4b6 <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800a42c:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800a42e:	2202      	movs	r2, #2
{  
 800a430:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800a432:	2601      	movs	r6, #1
{  
 800a434:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 800a436:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 800a438:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a43c:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 800a440:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800a442:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a444:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	f042 0208 	orr.w	r2, r2, #8
 800a44c:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a452:	f7fd fbc1 	bl	8007bd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a456:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a458:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800a45e:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	f042 0204 	orr.w	r2, r2, #4
 800a466:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a46c:	f7fd fbb4 	bl	8007bd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a470:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a472:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800a47c:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a47e:	699a      	ldr	r2, [r3, #24]
 800a480:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a484:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a48a:	f7fd fba5 	bl	8007bd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800a48e:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800a490:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 800a492:	9a01      	ldr	r2, [sp, #4]
 800a494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a498:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800a49a:	699a      	ldr	r2, [r3, #24]
 800a49c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4a0:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800a4a2:	699a      	ldr	r2, [r3, #24]
 800a4a4:	f042 0202 	orr.w	r2, r2, #2
 800a4a8:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 800a4aa:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a4ae:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800a4b2:	b004      	add	sp, #16
 800a4b4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800a4b6:	2002      	movs	r0, #2
}
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop

0800a4bc <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800a4bc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d046      	beq.n	800a552 <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a4c4:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800a4c6:	2102      	movs	r1, #2
{  
 800a4c8:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a4ca:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 800a4ce:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a4d0:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 800a4d4:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 800a4d6:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 800a4da:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a4dc:	6991      	ldr	r1, [r2, #24]
 800a4de:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a4e0:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a4e2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a4e6:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800a4e8:	6991      	ldr	r1, [r2, #24]
 800a4ea:	f021 0102 	bic.w	r1, r1, #2
 800a4ee:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800a4f0:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	f022 0204 	bic.w	r2, r2, #4
 800a4f8:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a4fe:	f7fd fb6b 	bl	8007bd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a502:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a504:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800a50e:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a516:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a51c:	f7fd fb5c 	bl	8007bd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800a520:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a522:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 800a524:	9902      	ldr	r1, [sp, #8]
 800a526:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a52a:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800a52c:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	f022 0208 	bic.w	r2, r2, #8
 800a534:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a53a:	f7fd fb4d 	bl	8007bd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a53e:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800a540:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800a546:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a54a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800a54e:	b004      	add	sp, #16
 800a550:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800a552:	2002      	movs	r0, #2
}
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop

0800a558 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800a558:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	f000 8249 	beq.w	800a9f4 <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a562:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 800a564:	2202      	movs	r2, #2
{
 800a566:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a568:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a56c:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800a56e:	f04f 0101 	mov.w	r1, #1
 800a572:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 800a574:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a578:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a57c:	f040 8207 	bne.w	800a98e <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800a580:	68eb      	ldr	r3, [r5, #12]
 800a582:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800a586:	f040 8114 	bne.w	800a7b2 <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 800a58a:	2c00      	cmp	r4, #0
 800a58c:	f000 8119 	beq.w	800a7c2 <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a596:	f040 8139 	bne.w	800a80c <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a59a:	6863      	ldr	r3, [r4, #4]
 800a59c:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a5a0:	f040 816b 	bne.w	800a87a <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a5a4:	68a3      	ldr	r3, [r4, #8]
 800a5a6:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a5aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a5ae:	d002      	beq.n	800a5b6 <HAL_ETH_ConfigMAC+0x5e>
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 8221 	bne.w	800a9f8 <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800a5b6:	68e3      	ldr	r3, [r4, #12]
 800a5b8:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a5bc:	f040 8152 	bne.w	800a864 <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a5c0:	6923      	ldr	r3, [r4, #16]
 800a5c2:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a5c6:	f040 8142 	bne.w	800a84e <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a5ca:	6963      	ldr	r3, [r4, #20]
 800a5cc:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a5d0:	f040 8132 	bne.w	800a838 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a5d4:	69a3      	ldr	r3, [r4, #24]
 800a5d6:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a5da:	f040 8122 	bne.w	800a822 <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a5de:	69e3      	ldr	r3, [r4, #28]
 800a5e0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a5e4:	f040 81a3 	bne.w	800a92e <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a5e8:	6a23      	ldr	r3, [r4, #32]
 800a5ea:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a5ee:	f040 818e 	bne.w	800a90e <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800a5f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5f4:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800a5f8:	f040 8193 	bne.w	800a922 <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800a5fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a5fe:	f033 0310 	bics.w	r3, r3, #16
 800a602:	f040 8179 	bne.w	800a8f8 <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a606:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a608:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800a60c:	f040 819a 	bne.w	800a944 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a610:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a612:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a616:	d003      	beq.n	800a620 <HAL_ETH_ConfigMAC+0xc8>
 800a618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a61c:	f040 81d8 	bne.w	800a9d0 <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800a620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a626:	2a40      	cmp	r2, #64	; 0x40
 800a628:	d002      	beq.n	800a630 <HAL_ETH_ConfigMAC+0xd8>
 800a62a:	2b80      	cmp	r3, #128	; 0x80
 800a62c:	f040 81ba 	bne.w	800a9a4 <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a630:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a632:	f033 0320 	bics.w	r3, r3, #32
 800a636:	f040 80de 	bne.w	800a7f6 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a63a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a63c:	f033 0308 	bics.w	r3, r3, #8
 800a640:	f040 80cf 	bne.w	800a7e2 <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a644:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a646:	2b01      	cmp	r3, #1
 800a648:	f200 80a5 	bhi.w	800a796 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a64c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a64e:	f240 4204 	movw	r2, #1028	; 0x404
 800a652:	4293      	cmp	r3, r2
 800a654:	bf18      	it	ne
 800a656:	2b10      	cmpne	r3, #16
 800a658:	d003      	beq.n	800a662 <HAL_ETH_ConfigMAC+0x10a>
 800a65a:	f033 0304 	bics.w	r3, r3, #4
 800a65e:	f040 81c3 	bne.w	800a9e8 <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800a662:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a664:	f033 0202 	bics.w	r2, r3, #2
 800a668:	d004      	beq.n	800a674 <HAL_ETH_ConfigMAC+0x11c>
 800a66a:	f240 4202 	movw	r2, #1026	; 0x402
 800a66e:	4293      	cmp	r3, r2
 800a670:	f040 81a3 	bne.w	800a9ba <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a674:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a67a:	f080 816e 	bcs.w	800a95a <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800a67e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a680:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a684:	f040 8173 	bne.w	800a96e <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800a688:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a68a:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a68e:	f040 8178 	bne.w	800a982 <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800a692:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a694:	f033 0308 	bics.w	r3, r3, #8
 800a698:	f040 8123 	bne.w	800a8e2 <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a69c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a69e:	f033 0304 	bics.w	r3, r3, #4
 800a6a2:	f040 8113 	bne.w	800a8cc <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a6a6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a6a8:	f033 0302 	bics.w	r3, r3, #2
 800a6ac:	f040 8103 	bne.w	800a8b6 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a6b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a6b2:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a6b6:	f040 80f3 	bne.w	800a8a0 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a6ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a6bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6c0:	f080 80e8 	bcs.w	800a894 <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800a6c4:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a6c6:	49b5      	ldr	r1, [pc, #724]	; (800a99c <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800a6c8:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800a6ca:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a6cc:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800a6ce:	6860      	ldr	r0, [r4, #4]
 800a6d0:	4303      	orrs	r3, r0
 800a6d2:	68a0      	ldr	r0, [r4, #8]
 800a6d4:	4303      	orrs	r3, r0
 800a6d6:	68e0      	ldr	r0, [r4, #12]
 800a6d8:	4303      	orrs	r3, r0
 800a6da:	6920      	ldr	r0, [r4, #16]
 800a6dc:	4303      	orrs	r3, r0
 800a6de:	6960      	ldr	r0, [r4, #20]
 800a6e0:	4303      	orrs	r3, r0
 800a6e2:	69a0      	ldr	r0, [r4, #24]
 800a6e4:	4303      	orrs	r3, r0
 800a6e6:	69e0      	ldr	r0, [r4, #28]
 800a6e8:	4303      	orrs	r3, r0
 800a6ea:	6a20      	ldr	r0, [r4, #32]
 800a6ec:	4303      	orrs	r3, r0
 800a6ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a6f0:	4303      	orrs	r3, r0
 800a6f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a6f4:	4303      	orrs	r3, r0
 800a6f6:	68a8      	ldr	r0, [r5, #8]
 800a6f8:	4303      	orrs	r3, r0
 800a6fa:	68e8      	ldr	r0, [r5, #12]
 800a6fc:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a6fe:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800a700:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a702:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800a704:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a706:	f7fd fa67 	bl	8007bd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800a70a:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a70c:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a70e:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800a712:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a714:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800a716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a718:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800a71a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a71c:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800a71e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a720:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800a722:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a724:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800a726:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a728:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800a72a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a72c:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a72e:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800a730:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a732:	f7fd fa51 	bl	8007bd8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800a736:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800a738:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800a73a:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800a73c:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800a73e:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a740:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800a744:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800a746:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a748:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800a74a:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800a74e:	4303      	orrs	r3, r0
 800a750:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a752:	4303      	orrs	r3, r0
 800a754:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800a756:	4303      	orrs	r3, r0
 800a758:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a75a:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800a75c:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800a75e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a762:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800a764:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800a766:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800a768:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a76a:	f7fd fa35 	bl	8007bd8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800a76e:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800a770:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800a772:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800a776:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800a778:	430a      	orrs	r2, r1
 800a77a:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800a77c:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800a77e:	f7fd fa2b 	bl	8007bd8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800a782:	682b      	ldr	r3, [r5, #0]
 800a784:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800a786:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800a788:	2201      	movs	r2, #1
  return HAL_OK;  
 800a78a:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800a78c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a790:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800a794:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a796:	f240 6123 	movw	r1, #1571	; 0x623
 800a79a:	4881      	ldr	r0, [pc, #516]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a79c:	f7f9 fcee 	bl	800417c <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a7a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a7a2:	f240 4204 	movw	r2, #1028	; 0x404
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	bf18      	it	ne
 800a7aa:	2b10      	cmpne	r3, #16
 800a7ac:	f47f af55 	bne.w	800a65a <HAL_ETH_ConfigMAC+0x102>
 800a7b0:	e757      	b.n	800a662 <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800a7b2:	f240 610e 	movw	r1, #1550	; 0x60e
 800a7b6:	487a      	ldr	r0, [pc, #488]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a7b8:	f7f9 fce0 	bl	800417c <assert_failed>
  if (macconf != NULL)
 800a7bc:	2c00      	cmp	r4, #0
 800a7be:	f47f aee7 	bne.w	800a590 <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800a7c2:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a7c4:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a7c6:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800a7ca:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a7cc:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800a7ce:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a7d2:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a7d4:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800a7d6:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a7d8:	f7fd f9fe 	bl	8007bd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	601c      	str	r4, [r3, #0]
 800a7e0:	e7d1      	b.n	800a786 <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a7e2:	f240 6122 	movw	r1, #1570	; 0x622
 800a7e6:	486e      	ldr	r0, [pc, #440]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a7e8:	f7f9 fcc8 	bl	800417c <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a7ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	f67f af2c 	bls.w	800a64c <HAL_ETH_ConfigMAC+0xf4>
 800a7f4:	e7cf      	b.n	800a796 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a7f6:	f240 6121 	movw	r1, #1569	; 0x621
 800a7fa:	4869      	ldr	r0, [pc, #420]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a7fc:	f7f9 fcbe 	bl	800417c <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a800:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a802:	f033 0308 	bics.w	r3, r3, #8
 800a806:	f43f af1d 	beq.w	800a644 <HAL_ETH_ConfigMAC+0xec>
 800a80a:	e7ea      	b.n	800a7e2 <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800a80c:	f240 6113 	movw	r1, #1555	; 0x613
 800a810:	4863      	ldr	r0, [pc, #396]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a812:	f7f9 fcb3 	bl	800417c <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a816:	6863      	ldr	r3, [r4, #4]
 800a818:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a81c:	f43f aec2 	beq.w	800a5a4 <HAL_ETH_ConfigMAC+0x4c>
 800a820:	e02b      	b.n	800a87a <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a822:	f240 6119 	movw	r1, #1561	; 0x619
 800a826:	485e      	ldr	r0, [pc, #376]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a828:	f7f9 fca8 	bl	800417c <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a82c:	69e3      	ldr	r3, [r4, #28]
 800a82e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a832:	f43f aed9 	beq.w	800a5e8 <HAL_ETH_ConfigMAC+0x90>
 800a836:	e07a      	b.n	800a92e <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a838:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800a83c:	4858      	ldr	r0, [pc, #352]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a83e:	f7f9 fc9d 	bl	800417c <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a842:	69a3      	ldr	r3, [r4, #24]
 800a844:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a848:	f43f aec9 	beq.w	800a5de <HAL_ETH_ConfigMAC+0x86>
 800a84c:	e7e9      	b.n	800a822 <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a84e:	f240 6117 	movw	r1, #1559	; 0x617
 800a852:	4853      	ldr	r0, [pc, #332]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a854:	f7f9 fc92 	bl	800417c <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a858:	6963      	ldr	r3, [r4, #20]
 800a85a:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a85e:	f43f aeb9 	beq.w	800a5d4 <HAL_ETH_ConfigMAC+0x7c>
 800a862:	e7e9      	b.n	800a838 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800a864:	f240 6116 	movw	r1, #1558	; 0x616
 800a868:	484d      	ldr	r0, [pc, #308]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a86a:	f7f9 fc87 	bl	800417c <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a86e:	6923      	ldr	r3, [r4, #16]
 800a870:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a874:	f43f aea9 	beq.w	800a5ca <HAL_ETH_ConfigMAC+0x72>
 800a878:	e7e9      	b.n	800a84e <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a87a:	f240 6114 	movw	r1, #1556	; 0x614
 800a87e:	4848      	ldr	r0, [pc, #288]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a880:	f7f9 fc7c 	bl	800417c <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a884:	68a3      	ldr	r3, [r4, #8]
 800a886:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a88a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a88e:	f47f ae8f 	bne.w	800a5b0 <HAL_ETH_ConfigMAC+0x58>
 800a892:	e690      	b.n	800a5b6 <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a894:	f240 612d 	movw	r1, #1581	; 0x62d
 800a898:	4841      	ldr	r0, [pc, #260]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a89a:	f7f9 fc6f 	bl	800417c <assert_failed>
 800a89e:	e711      	b.n	800a6c4 <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a8a0:	f240 612c 	movw	r1, #1580	; 0x62c
 800a8a4:	483e      	ldr	r0, [pc, #248]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a8a6:	f7f9 fc69 	bl	800417c <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a8aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a8ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b0:	f4ff af08 	bcc.w	800a6c4 <HAL_ETH_ConfigMAC+0x16c>
 800a8b4:	e7ee      	b.n	800a894 <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a8b6:	f240 612b 	movw	r1, #1579	; 0x62b
 800a8ba:	4839      	ldr	r0, [pc, #228]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a8bc:	f7f9 fc5e 	bl	800417c <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a8c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a8c2:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a8c6:	f43f aef8 	beq.w	800a6ba <HAL_ETH_ConfigMAC+0x162>
 800a8ca:	e7e9      	b.n	800a8a0 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a8cc:	f240 612a 	movw	r1, #1578	; 0x62a
 800a8d0:	4833      	ldr	r0, [pc, #204]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a8d2:	f7f9 fc53 	bl	800417c <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a8d6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a8d8:	f033 0302 	bics.w	r3, r3, #2
 800a8dc:	f43f aee8 	beq.w	800a6b0 <HAL_ETH_ConfigMAC+0x158>
 800a8e0:	e7e9      	b.n	800a8b6 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800a8e2:	f240 6129 	movw	r1, #1577	; 0x629
 800a8e6:	482e      	ldr	r0, [pc, #184]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a8e8:	f7f9 fc48 	bl	800417c <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a8ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8ee:	f033 0304 	bics.w	r3, r3, #4
 800a8f2:	f43f aed8 	beq.w	800a6a6 <HAL_ETH_ConfigMAC+0x14e>
 800a8f6:	e7e9      	b.n	800a8cc <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800a8f8:	f240 611d 	movw	r1, #1565	; 0x61d
 800a8fc:	4828      	ldr	r0, [pc, #160]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a8fe:	f7f9 fc3d 	bl	800417c <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a902:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a904:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800a908:	f43f ae82 	beq.w	800a610 <HAL_ETH_ConfigMAC+0xb8>
 800a90c:	e01a      	b.n	800a944 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a90e:	f240 611b 	movw	r1, #1563	; 0x61b
 800a912:	4823      	ldr	r0, [pc, #140]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a914:	f7f9 fc32 	bl	800417c <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800a918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a91a:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800a91e:	f43f ae6d 	beq.w	800a5fc <HAL_ETH_ConfigMAC+0xa4>
 800a922:	f240 611c 	movw	r1, #1564	; 0x61c
 800a926:	481e      	ldr	r0, [pc, #120]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a928:	f7f9 fc28 	bl	800417c <assert_failed>
 800a92c:	e666      	b.n	800a5fc <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a92e:	f240 611a 	movw	r1, #1562	; 0x61a
 800a932:	481b      	ldr	r0, [pc, #108]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a934:	f7f9 fc22 	bl	800417c <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a938:	6a23      	ldr	r3, [r4, #32]
 800a93a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a93e:	f43f ae58 	beq.w	800a5f2 <HAL_ETH_ConfigMAC+0x9a>
 800a942:	e7e4      	b.n	800a90e <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a944:	f240 611e 	movw	r1, #1566	; 0x61e
 800a948:	4815      	ldr	r0, [pc, #84]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a94a:	f7f9 fc17 	bl	800417c <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a94e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a950:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a954:	f47f ae60 	bne.w	800a618 <HAL_ETH_ConfigMAC+0xc0>
 800a958:	e662      	b.n	800a620 <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a95a:	f240 6126 	movw	r1, #1574	; 0x626
 800a95e:	4810      	ldr	r0, [pc, #64]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a960:	f7f9 fc0c 	bl	800417c <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800a964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a966:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a96a:	f43f ae8d 	beq.w	800a688 <HAL_ETH_ConfigMAC+0x130>
 800a96e:	f240 6127 	movw	r1, #1575	; 0x627
 800a972:	480b      	ldr	r0, [pc, #44]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a974:	f7f9 fc02 	bl	800417c <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800a978:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a97a:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a97e:	f43f ae88 	beq.w	800a692 <HAL_ETH_ConfigMAC+0x13a>
 800a982:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800a986:	4806      	ldr	r0, [pc, #24]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a988:	f7f9 fbf8 	bl	800417c <assert_failed>
 800a98c:	e681      	b.n	800a692 <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a98e:	f240 610d 	movw	r1, #1549	; 0x60d
 800a992:	4803      	ldr	r0, [pc, #12]	; (800a9a0 <HAL_ETH_ConfigMAC+0x448>)
 800a994:	f7f9 fbf2 	bl	800417c <assert_failed>
 800a998:	e5f2      	b.n	800a580 <HAL_ETH_ConfigMAC+0x28>
 800a99a:	bf00      	nop
 800a99c:	ff20810f 	.word	0xff20810f
 800a9a0:	0802bc98 	.word	0x0802bc98
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800a9a4:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800a9a8:	4816      	ldr	r0, [pc, #88]	; (800aa04 <HAL_ETH_ConfigMAC+0x4ac>)
 800a9aa:	f7f9 fbe7 	bl	800417c <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a9ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9b0:	f033 0320 	bics.w	r3, r3, #32
 800a9b4:	f43f ae41 	beq.w	800a63a <HAL_ETH_ConfigMAC+0xe2>
 800a9b8:	e71d      	b.n	800a7f6 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800a9ba:	f240 6125 	movw	r1, #1573	; 0x625
 800a9be:	4811      	ldr	r0, [pc, #68]	; (800aa04 <HAL_ETH_ConfigMAC+0x4ac>)
 800a9c0:	f7f9 fbdc 	bl	800417c <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a9c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a9c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ca:	f4ff ae58 	bcc.w	800a67e <HAL_ETH_ConfigMAC+0x126>
 800a9ce:	e7c4      	b.n	800a95a <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a9d0:	f240 611f 	movw	r1, #1567	; 0x61f
 800a9d4:	480b      	ldr	r0, [pc, #44]	; (800aa04 <HAL_ETH_ConfigMAC+0x4ac>)
 800a9d6:	f7f9 fbd1 	bl	800417c <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800a9da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9e0:	2a40      	cmp	r2, #64	; 0x40
 800a9e2:	f47f ae22 	bne.w	800a62a <HAL_ETH_ConfigMAC+0xd2>
 800a9e6:	e623      	b.n	800a630 <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a9e8:	f240 6124 	movw	r1, #1572	; 0x624
 800a9ec:	4805      	ldr	r0, [pc, #20]	; (800aa04 <HAL_ETH_ConfigMAC+0x4ac>)
 800a9ee:	f7f9 fbc5 	bl	800417c <assert_failed>
 800a9f2:	e636      	b.n	800a662 <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800a9f4:	2002      	movs	r0, #2
}
 800a9f6:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a9f8:	f240 6115 	movw	r1, #1557	; 0x615
 800a9fc:	4801      	ldr	r0, [pc, #4]	; (800aa04 <HAL_ETH_ConfigMAC+0x4ac>)
 800a9fe:	f7f9 fbbd 	bl	800417c <assert_failed>
 800aa02:	e5d8      	b.n	800a5b6 <HAL_ETH_ConfigMAC+0x5e>
 800aa04:	0802bc98 	.word	0x0802bc98

0800aa08 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800aa08:	4b18      	ldr	r3, [pc, #96]	; (800aa6c <FLASH_SetErrorCode+0x64>)
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	079b      	lsls	r3, r3, #30
 800aa0e:	d504      	bpl.n	800aa1a <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800aa10:	4a17      	ldr	r2, [pc, #92]	; (800aa70 <FLASH_SetErrorCode+0x68>)
 800aa12:	6993      	ldr	r3, [r2, #24]
 800aa14:	f043 0320 	orr.w	r3, r3, #32
 800aa18:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800aa1a:	4b14      	ldr	r3, [pc, #80]	; (800aa6c <FLASH_SetErrorCode+0x64>)
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	06d8      	lsls	r0, r3, #27
 800aa20:	d504      	bpl.n	800aa2c <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800aa22:	4a13      	ldr	r2, [pc, #76]	; (800aa70 <FLASH_SetErrorCode+0x68>)
 800aa24:	6993      	ldr	r3, [r2, #24]
 800aa26:	f043 0310 	orr.w	r3, r3, #16
 800aa2a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <FLASH_SetErrorCode+0x64>)
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	0699      	lsls	r1, r3, #26
 800aa32:	d504      	bpl.n	800aa3e <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800aa34:	4a0e      	ldr	r2, [pc, #56]	; (800aa70 <FLASH_SetErrorCode+0x68>)
 800aa36:	6993      	ldr	r3, [r2, #24]
 800aa38:	f043 0308 	orr.w	r3, r3, #8
 800aa3c:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800aa3e:	4b0b      	ldr	r3, [pc, #44]	; (800aa6c <FLASH_SetErrorCode+0x64>)
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	065a      	lsls	r2, r3, #25
 800aa44:	d504      	bpl.n	800aa50 <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800aa46:	4a0a      	ldr	r2, [pc, #40]	; (800aa70 <FLASH_SetErrorCode+0x68>)
 800aa48:	6993      	ldr	r3, [r2, #24]
 800aa4a:	f043 0304 	orr.w	r3, r3, #4
 800aa4e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800aa50:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <FLASH_SetErrorCode+0x64>)
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	061b      	lsls	r3, r3, #24
 800aa56:	d504      	bpl.n	800aa62 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800aa58:	4a05      	ldr	r2, [pc, #20]	; (800aa70 <FLASH_SetErrorCode+0x68>)
 800aa5a:	6993      	ldr	r3, [r2, #24]
 800aa5c:	f043 0302 	orr.w	r3, r3, #2
 800aa60:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800aa62:	4b02      	ldr	r3, [pc, #8]	; (800aa6c <FLASH_SetErrorCode+0x64>)
 800aa64:	22f2      	movs	r2, #242	; 0xf2
 800aa66:	60da      	str	r2, [r3, #12]
}
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	40023c00 	.word	0x40023c00
 800aa70:	20002ea0 	.word	0x20002ea0

0800aa74 <FLASH_Program_Byte>:
{
 800aa74:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800aa76:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800aa7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa82:	d304      	bcc.n	800aa8e <FLASH_Program_Byte+0x1a>
 800aa84:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <FLASH_Program_Byte+0x44>)
 800aa86:	4403      	add	r3, r0
 800aa88:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800aa8c:	d20e      	bcs.n	800aaac <FLASH_Program_Byte+0x38>
  FLASH->CR &= CR_PSIZE_MASK;
 800aa8e:	4b0b      	ldr	r3, [pc, #44]	; (800aabc <FLASH_Program_Byte+0x48>)
 800aa90:	691a      	ldr	r2, [r3, #16]
 800aa92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800aa96:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800aa98:	691a      	ldr	r2, [r3, #16]
 800aa9a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aa9c:	691a      	ldr	r2, [r3, #16]
 800aa9e:	f042 0201 	orr.w	r2, r2, #1
 800aaa2:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800aaa4:	7025      	strb	r5, [r4, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800aaa6:	f3bf 8f4f 	dsb	sy
}
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800aaac:	f240 21ee 	movw	r1, #750	; 0x2ee
 800aab0:	4803      	ldr	r0, [pc, #12]	; (800aac0 <FLASH_Program_Byte+0x4c>)
 800aab2:	f7f9 fb63 	bl	800417c <assert_failed>
 800aab6:	e7ea      	b.n	800aa8e <FLASH_Program_Byte+0x1a>
 800aab8:	e00f1000 	.word	0xe00f1000
 800aabc:	40023c00 	.word	0x40023c00
 800aac0:	0802bcd0 	.word	0x0802bcd0

0800aac4 <FLASH_Program_HalfWord>:
{
 800aac4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800aac6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800aaca:	4604      	mov	r4, r0
 800aacc:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800aace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aad2:	d304      	bcc.n	800aade <FLASH_Program_HalfWord+0x1a>
 800aad4:	4b0d      	ldr	r3, [pc, #52]	; (800ab0c <FLASH_Program_HalfWord+0x48>)
 800aad6:	4403      	add	r3, r0
 800aad8:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800aadc:	d210      	bcs.n	800ab00 <FLASH_Program_HalfWord+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800aade:	4b0c      	ldr	r3, [pc, #48]	; (800ab10 <FLASH_Program_HalfWord+0x4c>)
 800aae0:	691a      	ldr	r2, [r3, #16]
 800aae2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800aae6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800aae8:	691a      	ldr	r2, [r3, #16]
 800aaea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aaee:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aaf0:	691a      	ldr	r2, [r3, #16]
 800aaf2:	f042 0201 	orr.w	r2, r2, #1
 800aaf6:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800aaf8:	8025      	strh	r5, [r4, #0]
 800aafa:	f3bf 8f4f 	dsb	sy
}
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab00:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800ab04:	4803      	ldr	r0, [pc, #12]	; (800ab14 <FLASH_Program_HalfWord+0x50>)
 800ab06:	f7f9 fb39 	bl	800417c <assert_failed>
 800ab0a:	e7e8      	b.n	800aade <FLASH_Program_HalfWord+0x1a>
 800ab0c:	e00f1000 	.word	0xe00f1000
 800ab10:	40023c00 	.word	0x40023c00
 800ab14:	0802bcd0 	.word	0x0802bcd0

0800ab18 <FLASH_Program_Word>:
{
 800ab18:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab1a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800ab1e:	4604      	mov	r4, r0
 800ab20:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab26:	d304      	bcc.n	800ab32 <FLASH_Program_Word+0x1a>
 800ab28:	4b0d      	ldr	r3, [pc, #52]	; (800ab60 <FLASH_Program_Word+0x48>)
 800ab2a:	4403      	add	r3, r0
 800ab2c:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800ab30:	d210      	bcs.n	800ab54 <FLASH_Program_Word+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800ab32:	4b0c      	ldr	r3, [pc, #48]	; (800ab64 <FLASH_Program_Word+0x4c>)
 800ab34:	691a      	ldr	r2, [r3, #16]
 800ab36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ab3a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ab3c:	691a      	ldr	r2, [r3, #16]
 800ab3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab42:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ab44:	691a      	ldr	r2, [r3, #16]
 800ab46:	f042 0201 	orr.w	r2, r2, #1
 800ab4a:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800ab4c:	6025      	str	r5, [r4, #0]
 800ab4e:	f3bf 8f4f 	dsb	sy
}
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab54:	f240 21b3 	movw	r1, #691	; 0x2b3
 800ab58:	4803      	ldr	r0, [pc, #12]	; (800ab68 <FLASH_Program_Word+0x50>)
 800ab5a:	f7f9 fb0f 	bl	800417c <assert_failed>
 800ab5e:	e7e8      	b.n	800ab32 <FLASH_Program_Word+0x1a>
 800ab60:	e00f1000 	.word	0xe00f1000
 800ab64:	40023c00 	.word	0x40023c00
 800ab68:	0802bcd0 	.word	0x0802bcd0

0800ab6c <FLASH_Program_DoubleWord>:
{
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	461d      	mov	r5, r3
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab70:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800ab74:	4604      	mov	r4, r0
 800ab76:	4616      	mov	r6, r2
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab7c:	d304      	bcc.n	800ab88 <FLASH_Program_DoubleWord+0x1c>
 800ab7e:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <FLASH_Program_DoubleWord+0x50>)
 800ab80:	4403      	add	r3, r0
 800ab82:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800ab86:	d213      	bcs.n	800abb0 <FLASH_Program_DoubleWord+0x44>
  FLASH->CR &= CR_PSIZE_MASK;
 800ab88:	490d      	ldr	r1, [pc, #52]	; (800abc0 <FLASH_Program_DoubleWord+0x54>)
 800ab8a:	690b      	ldr	r3, [r1, #16]
 800ab8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab90:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ab92:	690b      	ldr	r3, [r1, #16]
 800ab94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ab98:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ab9a:	690b      	ldr	r3, [r1, #16]
 800ab9c:	f043 0301 	orr.w	r3, r3, #1
 800aba0:	610b      	str	r3, [r1, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800aba2:	6026      	str	r6, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800aba4:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800aba8:	6065      	str	r5, [r4, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800abaa:	f3bf 8f4f 	dsb	sy
}
 800abae:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800abb0:	f240 218e 	movw	r1, #654	; 0x28e
 800abb4:	4803      	ldr	r0, [pc, #12]	; (800abc4 <FLASH_Program_DoubleWord+0x58>)
 800abb6:	f7f9 fae1 	bl	800417c <assert_failed>
 800abba:	e7e5      	b.n	800ab88 <FLASH_Program_DoubleWord+0x1c>
 800abbc:	e00f1000 	.word	0xe00f1000
 800abc0:	40023c00 	.word	0x40023c00
 800abc4:	0802bcd0 	.word	0x0802bcd0

0800abc8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800abc8:	4b06      	ldr	r3, [pc, #24]	; (800abe4 <HAL_FLASH_Unlock+0x1c>)
 800abca:	691a      	ldr	r2, [r3, #16]
 800abcc:	2a00      	cmp	r2, #0
 800abce:	db01      	blt.n	800abd4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800abd0:	2000      	movs	r0, #0
}
 800abd2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800abd4:	4904      	ldr	r1, [pc, #16]	; (800abe8 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800abd6:	4a05      	ldr	r2, [pc, #20]	; (800abec <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800abd8:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800abda:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800abdc:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800abde:	0fc0      	lsrs	r0, r0, #31
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40023c00 	.word	0x40023c00
 800abe8:	45670123 	.word	0x45670123
 800abec:	cdef89ab 	.word	0xcdef89ab

0800abf0 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800abf0:	4a03      	ldr	r2, [pc, #12]	; (800ac00 <HAL_FLASH_Lock+0x10>)
}
 800abf2:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 800abf4:	6913      	ldr	r3, [r2, #16]
 800abf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abfa:	6113      	str	r3, [r2, #16]
}
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	40023c00 	.word	0x40023c00

0800ac04 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800ac04:	4b01      	ldr	r3, [pc, #4]	; (800ac0c <HAL_FLASH_GetError+0x8>)
 800ac06:	6998      	ldr	r0, [r3, #24]
}  
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	20002ea0 	.word	0x20002ea0

0800ac10 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ac10:	4b13      	ldr	r3, [pc, #76]	; (800ac60 <FLASH_WaitForLastOperation+0x50>)
 800ac12:	2200      	movs	r2, #0
{ 
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ac18:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ac1a:	4d12      	ldr	r5, [pc, #72]	; (800ac64 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 800ac1c:	f7fc ffd6 	bl	8007bcc <HAL_GetTick>
 800ac20:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ac22:	e001      	b.n	800ac28 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800ac24:	1c62      	adds	r2, r4, #1
 800ac26:	d10e      	bne.n	800ac46 <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ac28:	68eb      	ldr	r3, [r5, #12]
 800ac2a:	03db      	lsls	r3, r3, #15
 800ac2c:	d4fa      	bmi.n	800ac24 <FLASH_WaitForLastOperation+0x14>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800ac2e:	68ea      	ldr	r2, [r5, #12]
 800ac30:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800ac34:	d10f      	bne.n	800ac56 <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ac36:	68e8      	ldr	r0, [r5, #12]
 800ac38:	f010 0001 	ands.w	r0, r0, #1
 800ac3c:	d002      	beq.n	800ac44 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ac3e:	2301      	movs	r3, #1
  return HAL_OK;
 800ac40:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ac42:	60eb      	str	r3, [r5, #12]
}  
 800ac44:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800ac46:	b124      	cbz	r4, 800ac52 <FLASH_WaitForLastOperation+0x42>
 800ac48:	f7fc ffc0 	bl	8007bcc <HAL_GetTick>
 800ac4c:	1b80      	subs	r0, r0, r6
 800ac4e:	42a0      	cmp	r0, r4
 800ac50:	d9ea      	bls.n	800ac28 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800ac52:	2003      	movs	r0, #3
}  
 800ac54:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800ac56:	f7ff fed7 	bl	800aa08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ac5a:	2001      	movs	r0, #1
}  
 800ac5c:	bd70      	pop	{r4, r5, r6, pc}
 800ac5e:	bf00      	nop
 800ac60:	20002ea0 	.word	0x20002ea0
 800ac64:	40023c00 	.word	0x40023c00

0800ac68 <HAL_FLASH_Program>:
{
 800ac68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800ac6c:	4d23      	ldr	r5, [pc, #140]	; (800acfc <HAL_FLASH_Program+0x94>)
{
 800ac6e:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 800ac70:	7d2a      	ldrb	r2, [r5, #20]
 800ac72:	2a01      	cmp	r2, #1
 800ac74:	d03a      	beq.n	800acec <HAL_FLASH_Program+0x84>
 800ac76:	4698      	mov	r8, r3
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800ac78:	2803      	cmp	r0, #3
  __HAL_LOCK(&pFlash);
 800ac7a:	f04f 0301 	mov.w	r3, #1
 800ac7e:	4604      	mov	r4, r0
 800ac80:	752b      	strb	r3, [r5, #20]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800ac82:	d81d      	bhi.n	800acc0 <HAL_FLASH_Program+0x58>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac84:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac88:	460e      	mov	r6, r1
 800ac8a:	f7ff ffc1 	bl	800ac10 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800ac8e:	b998      	cbnz	r0, 800acb8 <HAL_FLASH_Program+0x50>
    switch(TypeProgram)
 800ac90:	3c01      	subs	r4, #1
 800ac92:	2c02      	cmp	r4, #2
 800ac94:	d82d      	bhi.n	800acf2 <HAL_FLASH_Program+0x8a>
 800ac96:	e8df f004 	tbb	[pc, r4]
 800ac9a:	1e02      	.short	0x1e02
 800ac9c:	23          	.byte	0x23
 800ac9d:	00          	.byte	0x00
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ac9e:	b2b9      	uxth	r1, r7
 800aca0:	4630      	mov	r0, r6
 800aca2:	f7ff ff0f 	bl	800aac4 <FLASH_Program_HalfWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aca6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800acaa:	f7ff ffb1 	bl	800ac10 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800acae:	4a14      	ldr	r2, [pc, #80]	; (800ad00 <HAL_FLASH_Program+0x98>)
 800acb0:	6913      	ldr	r3, [r2, #16]
 800acb2:	f023 0301 	bic.w	r3, r3, #1
 800acb6:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800acb8:	2300      	movs	r3, #0
 800acba:	752b      	strb	r3, [r5, #20]
}
 800acbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800acc0:	4810      	ldr	r0, [pc, #64]	; (800ad04 <HAL_FLASH_Program+0x9c>)
 800acc2:	21aa      	movs	r1, #170	; 0xaa
 800acc4:	f7f9 fa5a 	bl	800417c <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800acc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800accc:	f7ff ffa0 	bl	800ac10 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d1f1      	bne.n	800acb8 <HAL_FLASH_Program+0x50>
 800acd4:	e7e7      	b.n	800aca6 <HAL_FLASH_Program+0x3e>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800acd6:	4639      	mov	r1, r7
 800acd8:	4630      	mov	r0, r6
 800acda:	f7ff ff1d 	bl	800ab18 <FLASH_Program_Word>
        break;
 800acde:	e7e2      	b.n	800aca6 <HAL_FLASH_Program+0x3e>
        FLASH_Program_DoubleWord(Address, Data);
 800ace0:	463a      	mov	r2, r7
 800ace2:	4643      	mov	r3, r8
 800ace4:	4630      	mov	r0, r6
 800ace6:	f7ff ff41 	bl	800ab6c <FLASH_Program_DoubleWord>
        break;
 800acea:	e7dc      	b.n	800aca6 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800acec:	2002      	movs	r0, #2
}
 800acee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800acf2:	b2f9      	uxtb	r1, r7
 800acf4:	4630      	mov	r0, r6
 800acf6:	f7ff febd 	bl	800aa74 <FLASH_Program_Byte>
        break;
 800acfa:	e7d4      	b.n	800aca6 <HAL_FLASH_Program+0x3e>
 800acfc:	20002ea0 	.word	0x20002ea0
 800ad00:	40023c00 	.word	0x40023c00
 800ad04:	0802bcd0 	.word	0x0802bcd0

0800ad08 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800ad08:	2803      	cmp	r0, #3
{
 800ad0a:	b538      	push	{r3, r4, r5, lr}
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	460d      	mov	r5, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800ad10:	d82f      	bhi.n	800ad72 <FLASH_MassErase+0x6a>
  assert_param(IS_FLASH_BANK(Banks));
 800ad12:	1e6b      	subs	r3, r5, #1
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d81c      	bhi.n	800ad52 <FLASH_MassErase+0x4a>

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800ad18:	4b19      	ldr	r3, [pc, #100]	; (800ad80 <FLASH_MassErase+0x78>)
  if(Banks == FLASH_BANK_BOTH)
 800ad1a:	2d03      	cmp	r5, #3
  FLASH->CR &= CR_PSIZE_MASK;
 800ad1c:	691a      	ldr	r2, [r3, #16]
 800ad1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ad22:	611a      	str	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 800ad24:	d10e      	bne.n	800ad44 <FLASH_MassErase+0x3c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800ad26:	6919      	ldr	r1, [r3, #16]
 800ad28:	f248 0204 	movw	r2, #32772	; 0x8004
 800ad2c:	430a      	orrs	r2, r1
 800ad2e:	611a      	str	r2, [r3, #16]
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800ad30:	4a13      	ldr	r2, [pc, #76]	; (800ad80 <FLASH_MassErase+0x78>)
 800ad32:	6910      	ldr	r0, [r2, #16]
 800ad34:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800ad38:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800ad3c:	6110      	str	r0, [r2, #16]
 800ad3e:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
  else if(Banks == FLASH_BANK_2)
 800ad44:	2d02      	cmp	r5, #2
 800ad46:	d10e      	bne.n	800ad66 <FLASH_MassErase+0x5e>
    FLASH->CR |= FLASH_CR_MER2;
 800ad48:	691a      	ldr	r2, [r3, #16]
 800ad4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad4e:	611a      	str	r2, [r3, #16]
 800ad50:	e7ee      	b.n	800ad30 <FLASH_MassErase+0x28>
  assert_param(IS_FLASH_BANK(Banks));
 800ad52:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800ad56:	480b      	ldr	r0, [pc, #44]	; (800ad84 <FLASH_MassErase+0x7c>)
 800ad58:	f7f9 fa10 	bl	800417c <assert_failed>
  FLASH->CR &= CR_PSIZE_MASK;
 800ad5c:	4a08      	ldr	r2, [pc, #32]	; (800ad80 <FLASH_MassErase+0x78>)
 800ad5e:	6913      	ldr	r3, [r2, #16]
 800ad60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad64:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_MER1;    
 800ad66:	4a06      	ldr	r2, [pc, #24]	; (800ad80 <FLASH_MassErase+0x78>)
 800ad68:	6913      	ldr	r3, [r2, #16]
 800ad6a:	f043 0304 	orr.w	r3, r3, #4
 800ad6e:	6113      	str	r3, [r2, #16]
 800ad70:	e7de      	b.n	800ad30 <FLASH_MassErase+0x28>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800ad72:	f240 11bb 	movw	r1, #443	; 0x1bb
 800ad76:	4803      	ldr	r0, [pc, #12]	; (800ad84 <FLASH_MassErase+0x7c>)
 800ad78:	f7f9 fa00 	bl	800417c <assert_failed>
 800ad7c:	e7c9      	b.n	800ad12 <FLASH_MassErase+0xa>
 800ad7e:	bf00      	nop
 800ad80:	40023c00 	.word	0x40023c00
 800ad84:	0802bd0c 	.word	0x0802bd0c

0800ad88 <FLASH_Erase_Sector>:
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
  uint32_t tmp_psize = 0;

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 800ad88:	2817      	cmp	r0, #23
{
 800ad8a:	b538      	push	{r3, r4, r5, lr}
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	460c      	mov	r4, r1
  assert_param(IS_FLASH_SECTOR(Sector));
 800ad90:	d82b      	bhi.n	800adea <FLASH_Erase_Sector+0x62>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800ad92:	2c03      	cmp	r4, #3
 800ad94:	d821      	bhi.n	800adda <FLASH_Erase_Sector+0x52>
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800ad96:	b9dc      	cbnz	r4, 800add0 <FLASH_Erase_Sector+0x48>
  {
    Sector += 4;
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800ad98:	4b1a      	ldr	r3, [pc, #104]	; (800ae04 <FLASH_Erase_Sector+0x7c>)
  if(Sector > FLASH_SECTOR_11) 
 800ad9a:	2d0b      	cmp	r5, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800ad9c:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800ad9e:	bf88      	it	hi
 800ada0:	3504      	addhi	r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
 800ada2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ada6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800ada8:	6919      	ldr	r1, [r3, #16]
 800adaa:	430c      	orrs	r4, r1
 800adac:	611c      	str	r4, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800adae:	691a      	ldr	r2, [r3, #16]
 800adb0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800adb4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800adb6:	6918      	ldr	r0, [r3, #16]
 800adb8:	ea40 05c5 	orr.w	r5, r0, r5, lsl #3
 800adbc:	f045 0502 	orr.w	r5, r5, #2
 800adc0:	611d      	str	r5, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800adc8:	611a      	str	r2, [r3, #16]
 800adca:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800adce:	bd38      	pop	{r3, r4, r5, pc}
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800add0:	2c01      	cmp	r4, #1
 800add2:	d110      	bne.n	800adf6 <FLASH_Erase_Sector+0x6e>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800add4:	f44f 7480 	mov.w	r4, #256	; 0x100
 800add8:	e7de      	b.n	800ad98 <FLASH_Erase_Sector+0x10>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800adda:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800adde:	480a      	ldr	r0, [pc, #40]	; (800ae08 <FLASH_Erase_Sector+0x80>)
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ade0:	f44f 7440 	mov.w	r4, #768	; 0x300
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800ade4:	f7f9 f9ca 	bl	800417c <assert_failed>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800ade8:	e7d6      	b.n	800ad98 <FLASH_Erase_Sector+0x10>
  assert_param(IS_FLASH_SECTOR(Sector));
 800adea:	f240 11eb 	movw	r1, #491	; 0x1eb
 800adee:	4806      	ldr	r0, [pc, #24]	; (800ae08 <FLASH_Erase_Sector+0x80>)
 800adf0:	f7f9 f9c4 	bl	800417c <assert_failed>
 800adf4:	e7cd      	b.n	800ad92 <FLASH_Erase_Sector+0xa>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800adf6:	2c02      	cmp	r4, #2
 800adf8:	bf0c      	ite	eq
 800adfa:	f44f 7400 	moveq.w	r4, #512	; 0x200
 800adfe:	f44f 7440 	movne.w	r4, #768	; 0x300
 800ae02:	e7c9      	b.n	800ad98 <FLASH_Erase_Sector+0x10>
 800ae04:	40023c00 	.word	0x40023c00
 800ae08:	0802bd0c 	.word	0x0802bd0c

0800ae0c <HAL_FLASHEx_Erase>:
{
 800ae0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800ae10:	4f2f      	ldr	r7, [pc, #188]	; (800aed0 <HAL_FLASHEx_Erase+0xc4>)
 800ae12:	7d3b      	ldrb	r3, [r7, #20]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d040      	beq.n	800ae9a <HAL_FLASHEx_Erase+0x8e>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4688      	mov	r8, r1
 800ae1e:	753b      	strb	r3, [r7, #20]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800ae20:	6803      	ldr	r3, [r0, #0]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d903      	bls.n	800ae2e <HAL_FLASHEx_Erase+0x22>
 800ae26:	21a5      	movs	r1, #165	; 0xa5
 800ae28:	482a      	ldr	r0, [pc, #168]	; (800aed4 <HAL_FLASHEx_Erase+0xc8>)
 800ae2a:	f7f9 f9a7 	bl	800417c <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae32:	f7ff feed 	bl	800ac10 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800ae36:	4606      	mov	r6, r0
 800ae38:	bb50      	cbnz	r0, 800ae90 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 800ae3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae3e:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d034      	beq.n	800aeb2 <HAL_FLASHEx_Erase+0xa6>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800ae48:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800ae4c:	442b      	add	r3, r5
 800ae4e:	1e5a      	subs	r2, r3, #1
 800ae50:	2a17      	cmp	r2, #23
 800ae52:	d826      	bhi.n	800aea2 <HAL_FLASHEx_Erase+0x96>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ae54:	429d      	cmp	r5, r3
 800ae56:	d21b      	bcs.n	800ae90 <HAL_FLASHEx_Erase+0x84>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800ae58:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800aed8 <HAL_FLASHEx_Erase+0xcc>
 800ae5c:	e005      	b.n	800ae6a <HAL_FLASHEx_Erase+0x5e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ae5e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800ae62:	3501      	adds	r5, #1
 800ae64:	4413      	add	r3, r2
 800ae66:	42ab      	cmp	r3, r5
 800ae68:	d912      	bls.n	800ae90 <HAL_FLASHEx_Erase+0x84>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	7c21      	ldrb	r1, [r4, #16]
 800ae6e:	f7ff ff8b 	bl	800ad88 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae72:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae76:	f7ff fecb 	bl	800ac10 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800ae7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae7e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ae82:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d0e9      	beq.n	800ae5e <HAL_FLASHEx_Erase+0x52>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae8a:	4606      	mov	r6, r0
          *SectorError = index;
 800ae8c:	f8c8 5000 	str.w	r5, [r8]
  __HAL_UNLOCK(&pFlash);
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4630      	mov	r0, r6
  __HAL_UNLOCK(&pFlash);
 800ae94:	753b      	strb	r3, [r7, #20]
}
 800ae96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800ae9a:	2602      	movs	r6, #2
}
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800aea2:	21c1      	movs	r1, #193	; 0xc1
 800aea4:	480b      	ldr	r0, [pc, #44]	; (800aed4 <HAL_FLASHEx_Erase+0xc8>)
 800aea6:	f7f9 f969 	bl	800417c <assert_failed>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800aeaa:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800aeae:	442b      	add	r3, r5
 800aeb0:	e7d0      	b.n	800ae54 <HAL_FLASHEx_Erase+0x48>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800aeb2:	6861      	ldr	r1, [r4, #4]
 800aeb4:	7c20      	ldrb	r0, [r4, #16]
 800aeb6:	f7ff ff27 	bl	800ad08 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aeba:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aebe:	f7ff fea7 	bl	800ac10 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800aec2:	4a05      	ldr	r2, [pc, #20]	; (800aed8 <HAL_FLASHEx_Erase+0xcc>)
 800aec4:	4b05      	ldr	r3, [pc, #20]	; (800aedc <HAL_FLASHEx_Erase+0xd0>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aec6:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800aec8:	6911      	ldr	r1, [r2, #16]
 800aeca:	400b      	ands	r3, r1
 800aecc:	6113      	str	r3, [r2, #16]
 800aece:	e7df      	b.n	800ae90 <HAL_FLASHEx_Erase+0x84>
 800aed0:	20002ea0 	.word	0x20002ea0
 800aed4:	0802bd0c 	.word	0x0802bd0c
 800aed8:	40023c00 	.word	0x40023c00
 800aedc:	ffff7ffb 	.word	0xffff7ffb

0800aee0 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800aee0:	4bb9      	ldr	r3, [pc, #740]	; (800b1c8 <HAL_GPIO_Init+0x2e8>)
 800aee2:	4aba      	ldr	r2, [pc, #744]	; (800b1cc <HAL_GPIO_Init+0x2ec>)
 800aee4:	4290      	cmp	r0, r2
 800aee6:	bf18      	it	ne
 800aee8:	4298      	cmpne	r0, r3
{
 800aeea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800aeee:	bf18      	it	ne
 800aef0:	2301      	movne	r3, #1
{
 800aef2:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800aef4:	bf08      	it	eq
 800aef6:	2300      	moveq	r3, #0
{
 800aef8:	4606      	mov	r6, r0
 800aefa:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	d026      	beq.n	800af4e <HAL_GPIO_Init+0x6e>
 800af00:	4bb3      	ldr	r3, [pc, #716]	; (800b1d0 <HAL_GPIO_Init+0x2f0>)
 800af02:	4298      	cmp	r0, r3
 800af04:	d023      	beq.n	800af4e <HAL_GPIO_Init+0x6e>
 800af06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af0a:	4298      	cmp	r0, r3
 800af0c:	d01f      	beq.n	800af4e <HAL_GPIO_Init+0x6e>
 800af0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af12:	4298      	cmp	r0, r3
 800af14:	d01b      	beq.n	800af4e <HAL_GPIO_Init+0x6e>
 800af16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af1a:	4298      	cmp	r0, r3
 800af1c:	d017      	beq.n	800af4e <HAL_GPIO_Init+0x6e>
 800af1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af22:	4298      	cmp	r0, r3
 800af24:	d013      	beq.n	800af4e <HAL_GPIO_Init+0x6e>
 800af26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af2a:	4298      	cmp	r0, r3
 800af2c:	d00f      	beq.n	800af4e <HAL_GPIO_Init+0x6e>
 800af2e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800af32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af36:	4290      	cmp	r0, r2
 800af38:	bf18      	it	ne
 800af3a:	4298      	cmpne	r0, r3
 800af3c:	d007      	beq.n	800af4e <HAL_GPIO_Init+0x6e>
 800af3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af42:	4298      	cmp	r0, r3
 800af44:	d003      	beq.n	800af4e <HAL_GPIO_Init+0x6e>
 800af46:	21aa      	movs	r1, #170	; 0xaa
 800af48:	48a2      	ldr	r0, [pc, #648]	; (800b1d4 <HAL_GPIO_Init+0x2f4>)
 800af4a:	f7f9 f917 	bl	800417c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800af4e:	883b      	ldrh	r3, [r7, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 811a 	beq.w	800b18a <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800af5c:	bf18      	it	ne
 800af5e:	2a03      	cmpne	r2, #3
 800af60:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800af64:	bf8c      	ite	hi
 800af66:	2301      	movhi	r3, #1
 800af68:	2300      	movls	r3, #0
 800af6a:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800af6e:	bf0c      	ite	eq
 800af70:	2300      	moveq	r3, #0
 800af72:	f003 0301 	andne.w	r3, r3, #1
 800af76:	3a11      	subs	r2, #17
 800af78:	2a01      	cmp	r2, #1
 800af7a:	bf94      	ite	ls
 800af7c:	2300      	movls	r3, #0
 800af7e:	f003 0301 	andhi.w	r3, r3, #1
 800af82:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800af86:	bf0c      	ite	eq
 800af88:	2300      	moveq	r3, #0
 800af8a:	f003 0301 	andne.w	r3, r3, #1
 800af8e:	b11b      	cbz	r3, 800af98 <HAL_GPIO_Init+0xb8>
 800af90:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800af94:	f040 813e 	bne.w	800b214 <HAL_GPIO_Init+0x334>
{
 800af98:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af9a:	f8df a260 	ldr.w	sl, [pc, #608]	; 800b1fc <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800af9e:	46b8      	mov	r8, r7
 800afa0:	e003      	b.n	800afaa <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800afa2:	3501      	adds	r5, #1
 800afa4:	2d10      	cmp	r5, #16
 800afa6:	f000 80b3 	beq.w	800b110 <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800afaa:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800afac:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800afb0:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800afb2:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800afb6:	ea34 0303 	bics.w	r3, r4, r3
 800afba:	d1f2      	bne.n	800afa2 <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800afbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800afc0:	f001 0303 	and.w	r3, r1, #3
 800afc4:	1e5a      	subs	r2, r3, #1
 800afc6:	2a01      	cmp	r2, #1
 800afc8:	f240 80a5 	bls.w	800b116 <HAL_GPIO_Init+0x236>
 800afcc:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800afce:	f04f 0b03 	mov.w	fp, #3
 800afd2:	fa0b fb07 	lsl.w	fp, fp, r7
 800afd6:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d025      	beq.n	800b02a <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800afde:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800afe2:	2802      	cmp	r0, #2
 800afe4:	f200 80b3 	bhi.w	800b14e <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800afe8:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800afea:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800afec:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800afee:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800aff2:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800aff6:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aff8:	d117      	bne.n	800b02a <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800affa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800affe:	280f      	cmp	r0, #15
 800b000:	f200 80c8 	bhi.w	800b194 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800b004:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b006:	f005 0e07 	and.w	lr, r5, #7
 800b00a:	f04f 0c0f 	mov.w	ip, #15
 800b00e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b012:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800b016:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b018:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b01c:	fa0c fe0e 	lsl.w	lr, ip, lr
 800b020:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b024:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800b028:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800b02a:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b02c:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b02e:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b032:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b036:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800b03a:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b03c:	d0b1      	beq.n	800afa2 <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b03e:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800b042:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b046:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b04a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b04e:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b050:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800b054:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800b058:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b05c:	9203      	str	r2, [sp, #12]
 800b05e:	4a5e      	ldr	r2, [pc, #376]	; (800b1d8 <HAL_GPIO_Init+0x2f8>)
 800b060:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800b062:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b064:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800b066:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b068:	40a3      	lsls	r3, r4
 800b06a:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b06e:	4857      	ldr	r0, [pc, #348]	; (800b1cc <HAL_GPIO_Init+0x2ec>)
 800b070:	4286      	cmp	r6, r0
 800b072:	d025      	beq.n	800b0c0 <HAL_GPIO_Init+0x1e0>
 800b074:	9801      	ldr	r0, [sp, #4]
 800b076:	2800      	cmp	r0, #0
 800b078:	d07d      	beq.n	800b176 <HAL_GPIO_Init+0x296>
 800b07a:	4855      	ldr	r0, [pc, #340]	; (800b1d0 <HAL_GPIO_Init+0x2f0>)
 800b07c:	4286      	cmp	r6, r0
 800b07e:	d07f      	beq.n	800b180 <HAL_GPIO_Init+0x2a0>
 800b080:	4856      	ldr	r0, [pc, #344]	; (800b1dc <HAL_GPIO_Init+0x2fc>)
 800b082:	4286      	cmp	r6, r0
 800b084:	f000 8091 	beq.w	800b1aa <HAL_GPIO_Init+0x2ca>
 800b088:	4855      	ldr	r0, [pc, #340]	; (800b1e0 <HAL_GPIO_Init+0x300>)
 800b08a:	4286      	cmp	r6, r0
 800b08c:	f000 8092 	beq.w	800b1b4 <HAL_GPIO_Init+0x2d4>
 800b090:	4854      	ldr	r0, [pc, #336]	; (800b1e4 <HAL_GPIO_Init+0x304>)
 800b092:	4286      	cmp	r6, r0
 800b094:	f000 80b4 	beq.w	800b200 <HAL_GPIO_Init+0x320>
 800b098:	4853      	ldr	r0, [pc, #332]	; (800b1e8 <HAL_GPIO_Init+0x308>)
 800b09a:	4286      	cmp	r6, r0
 800b09c:	f000 80b5 	beq.w	800b20a <HAL_GPIO_Init+0x32a>
 800b0a0:	4852      	ldr	r0, [pc, #328]	; (800b1ec <HAL_GPIO_Init+0x30c>)
 800b0a2:	4286      	cmp	r6, r0
 800b0a4:	f000 808b 	beq.w	800b1be <HAL_GPIO_Init+0x2de>
 800b0a8:	4851      	ldr	r0, [pc, #324]	; (800b1f0 <HAL_GPIO_Init+0x310>)
 800b0aa:	4286      	cmp	r6, r0
 800b0ac:	f000 80b7 	beq.w	800b21e <HAL_GPIO_Init+0x33e>
 800b0b0:	4850      	ldr	r0, [pc, #320]	; (800b1f4 <HAL_GPIO_Init+0x314>)
 800b0b2:	4286      	cmp	r6, r0
 800b0b4:	bf0c      	ite	eq
 800b0b6:	2009      	moveq	r0, #9
 800b0b8:	200a      	movne	r0, #10
 800b0ba:	fa00 f404 	lsl.w	r4, r0, r4
 800b0be:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800b0c0:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800b0c2:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800b0c6:	4b4c      	ldr	r3, [pc, #304]	; (800b1f8 <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800b0c8:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800b0ca:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b0cc:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800b0ce:	4b4a      	ldr	r3, [pc, #296]	; (800b1f8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b0d0:	bf54      	ite	pl
 800b0d2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b0d4:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b0d8:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800b0da:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800b0dc:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800b0de:	4b46      	ldr	r3, [pc, #280]	; (800b1f8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b0e0:	bf54      	ite	pl
 800b0e2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b0e4:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b0e8:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800b0ea:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800b0ec:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800b0ee:	4b42      	ldr	r3, [pc, #264]	; (800b1f8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b0f0:	bf54      	ite	pl
 800b0f2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b0f4:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800b0f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b0fa:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800b0fc:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800b0fe:	4a3e      	ldr	r2, [pc, #248]	; (800b1f8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b100:	bf54      	ite	pl
 800b102:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800b104:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800b108:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800b10a:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b10c:	f47f af4d 	bne.w	800afaa <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800b110:	b005      	add	sp, #20
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b116:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800b11a:	2803      	cmp	r0, #3
 800b11c:	d820      	bhi.n	800b160 <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800b11e:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b120:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800b124:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b128:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800b12c:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b12e:	ea20 000b 	bic.w	r0, r0, fp
 800b132:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800b136:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800b13a:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800b13c:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b13e:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b142:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800b146:	40ac      	lsls	r4, r5
 800b148:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800b14a:	6074      	str	r4, [r6, #4]
 800b14c:	e745      	b.n	800afda <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b14e:	21ce      	movs	r1, #206	; 0xce
 800b150:	4820      	ldr	r0, [pc, #128]	; (800b1d4 <HAL_GPIO_Init+0x2f4>)
 800b152:	f7f9 f813 	bl	800417c <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b156:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b15a:	f001 0303 	and.w	r3, r1, #3
 800b15e:	e743      	b.n	800afe8 <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b160:	21bd      	movs	r1, #189	; 0xbd
 800b162:	481c      	ldr	r0, [pc, #112]	; (800b1d4 <HAL_GPIO_Init+0x2f4>)
 800b164:	f7f9 f80a 	bl	800417c <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b168:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b16c:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b170:	f001 0303 	and.w	r3, r1, #3
 800b174:	e7d3      	b.n	800b11e <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b176:	2001      	movs	r0, #1
 800b178:	fa00 f404 	lsl.w	r4, r0, r4
 800b17c:	4323      	orrs	r3, r4
 800b17e:	e79f      	b.n	800b0c0 <HAL_GPIO_Init+0x1e0>
 800b180:	2002      	movs	r0, #2
 800b182:	fa00 f404 	lsl.w	r4, r0, r4
 800b186:	4323      	orrs	r3, r4
 800b188:	e79a      	b.n	800b0c0 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b18a:	21ab      	movs	r1, #171	; 0xab
 800b18c:	4811      	ldr	r0, [pc, #68]	; (800b1d4 <HAL_GPIO_Init+0x2f4>)
 800b18e:	f7f8 fff5 	bl	800417c <assert_failed>
 800b192:	e6e0      	b.n	800af56 <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800b194:	21db      	movs	r1, #219	; 0xdb
 800b196:	480f      	ldr	r0, [pc, #60]	; (800b1d4 <HAL_GPIO_Init+0x2f4>)
 800b198:	f7f8 fff0 	bl	800417c <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b19c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b1a0:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b1a4:	f001 0303 	and.w	r3, r1, #3
 800b1a8:	e72c      	b.n	800b004 <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b1aa:	2003      	movs	r0, #3
 800b1ac:	fa00 f404 	lsl.w	r4, r0, r4
 800b1b0:	4323      	orrs	r3, r4
 800b1b2:	e785      	b.n	800b0c0 <HAL_GPIO_Init+0x1e0>
 800b1b4:	2004      	movs	r0, #4
 800b1b6:	fa00 f404 	lsl.w	r4, r0, r4
 800b1ba:	4323      	orrs	r3, r4
 800b1bc:	e780      	b.n	800b0c0 <HAL_GPIO_Init+0x1e0>
 800b1be:	2007      	movs	r0, #7
 800b1c0:	fa00 f404 	lsl.w	r4, r0, r4
 800b1c4:	4323      	orrs	r3, r4
 800b1c6:	e77b      	b.n	800b0c0 <HAL_GPIO_Init+0x1e0>
 800b1c8:	40020400 	.word	0x40020400
 800b1cc:	40020000 	.word	0x40020000
 800b1d0:	40020800 	.word	0x40020800
 800b1d4:	0802bd4c 	.word	0x0802bd4c
 800b1d8:	40013800 	.word	0x40013800
 800b1dc:	40020c00 	.word	0x40020c00
 800b1e0:	40021000 	.word	0x40021000
 800b1e4:	40021400 	.word	0x40021400
 800b1e8:	40021800 	.word	0x40021800
 800b1ec:	40021c00 	.word	0x40021c00
 800b1f0:	40022000 	.word	0x40022000
 800b1f4:	40022400 	.word	0x40022400
 800b1f8:	40013c00 	.word	0x40013c00
 800b1fc:	40023800 	.word	0x40023800
 800b200:	2005      	movs	r0, #5
 800b202:	fa00 f404 	lsl.w	r4, r0, r4
 800b206:	4323      	orrs	r3, r4
 800b208:	e75a      	b.n	800b0c0 <HAL_GPIO_Init+0x1e0>
 800b20a:	2006      	movs	r0, #6
 800b20c:	fa00 f404 	lsl.w	r4, r0, r4
 800b210:	4323      	orrs	r3, r4
 800b212:	e755      	b.n	800b0c0 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b214:	21ac      	movs	r1, #172	; 0xac
 800b216:	4804      	ldr	r0, [pc, #16]	; (800b228 <HAL_GPIO_Init+0x348>)
 800b218:	f7f8 ffb0 	bl	800417c <assert_failed>
 800b21c:	e6bc      	b.n	800af98 <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b21e:	2008      	movs	r0, #8
 800b220:	fa00 f404 	lsl.w	r4, r0, r4
 800b224:	4323      	orrs	r3, r4
 800b226:	e74b      	b.n	800b0c0 <HAL_GPIO_Init+0x1e0>
 800b228:	0802bd4c 	.word	0x0802bd4c

0800b22c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b22c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b230:	4f6b      	ldr	r7, [pc, #428]	; (800b3e0 <HAL_GPIO_DeInit+0x1b4>)
{
 800b232:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b234:	4b6b      	ldr	r3, [pc, #428]	; (800b3e4 <HAL_GPIO_DeInit+0x1b8>)
{
 800b236:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b238:	42b8      	cmp	r0, r7
 800b23a:	bf18      	it	ne
 800b23c:	4298      	cmpne	r0, r3
 800b23e:	bf14      	ite	ne
 800b240:	2701      	movne	r7, #1
 800b242:	2700      	moveq	r7, #0
 800b244:	d027      	beq.n	800b296 <HAL_GPIO_DeInit+0x6a>
 800b246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b24a:	4298      	cmp	r0, r3
 800b24c:	d023      	beq.n	800b296 <HAL_GPIO_DeInit+0x6a>
 800b24e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b252:	4298      	cmp	r0, r3
 800b254:	d01f      	beq.n	800b296 <HAL_GPIO_DeInit+0x6a>
 800b256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b25a:	4298      	cmp	r0, r3
 800b25c:	d01b      	beq.n	800b296 <HAL_GPIO_DeInit+0x6a>
 800b25e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b262:	4298      	cmp	r0, r3
 800b264:	d017      	beq.n	800b296 <HAL_GPIO_DeInit+0x6a>
 800b266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b26a:	4298      	cmp	r0, r3
 800b26c:	d013      	beq.n	800b296 <HAL_GPIO_DeInit+0x6a>
 800b26e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b272:	4298      	cmp	r0, r3
 800b274:	d00f      	beq.n	800b296 <HAL_GPIO_DeInit+0x6a>
 800b276:	4a5c      	ldr	r2, [pc, #368]	; (800b3e8 <HAL_GPIO_DeInit+0x1bc>)
 800b278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b27c:	4290      	cmp	r0, r2
 800b27e:	bf18      	it	ne
 800b280:	4298      	cmpne	r0, r3
 800b282:	d008      	beq.n	800b296 <HAL_GPIO_DeInit+0x6a>
 800b284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b288:	4298      	cmp	r0, r3
 800b28a:	d004      	beq.n	800b296 <HAL_GPIO_DeInit+0x6a>
 800b28c:	f240 112b 	movw	r1, #299	; 0x12b
 800b290:	4856      	ldr	r0, [pc, #344]	; (800b3ec <HAL_GPIO_DeInit+0x1c0>)
 800b292:	f7f8 ff73 	bl	800417c <assert_failed>
{
 800b296:	2300      	movs	r3, #0
 800b298:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b40c <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b29c:	f8df a140 	ldr.w	sl, [pc, #320]	; 800b3e0 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b2a0:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800b410 <HAL_GPIO_DeInit+0x1e4>
 800b2a4:	e002      	b.n	800b2ac <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	2b10      	cmp	r3, #16
 800b2aa:	d07b      	beq.n	800b3a4 <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800b2ac:	2001      	movs	r0, #1
 800b2ae:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800b2b2:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800b2b6:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800b2ba:	d1f4      	bne.n	800b2a6 <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800b2bc:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b2c0:	f003 0103 	and.w	r1, r3, #3
 800b2c4:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b2c8:	4554      	cmp	r4, sl
 800b2ca:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b2cc:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800b2d0:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b2d4:	fa0c fc01 	lsl.w	ip, ip, r1
 800b2d8:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b2dc:	d01e      	beq.n	800b31c <HAL_GPIO_DeInit+0xf0>
 800b2de:	2f00      	cmp	r7, #0
 800b2e0:	d063      	beq.n	800b3aa <HAL_GPIO_DeInit+0x17e>
 800b2e2:	4843      	ldr	r0, [pc, #268]	; (800b3f0 <HAL_GPIO_DeInit+0x1c4>)
 800b2e4:	4284      	cmp	r4, r0
 800b2e6:	d063      	beq.n	800b3b0 <HAL_GPIO_DeInit+0x184>
 800b2e8:	4842      	ldr	r0, [pc, #264]	; (800b3f4 <HAL_GPIO_DeInit+0x1c8>)
 800b2ea:	4284      	cmp	r4, r0
 800b2ec:	d064      	beq.n	800b3b8 <HAL_GPIO_DeInit+0x18c>
 800b2ee:	4842      	ldr	r0, [pc, #264]	; (800b3f8 <HAL_GPIO_DeInit+0x1cc>)
 800b2f0:	4284      	cmp	r4, r0
 800b2f2:	d065      	beq.n	800b3c0 <HAL_GPIO_DeInit+0x194>
 800b2f4:	4841      	ldr	r0, [pc, #260]	; (800b3fc <HAL_GPIO_DeInit+0x1d0>)
 800b2f6:	4284      	cmp	r4, r0
 800b2f8:	d066      	beq.n	800b3c8 <HAL_GPIO_DeInit+0x19c>
 800b2fa:	4841      	ldr	r0, [pc, #260]	; (800b400 <HAL_GPIO_DeInit+0x1d4>)
 800b2fc:	4284      	cmp	r4, r0
 800b2fe:	d053      	beq.n	800b3a8 <HAL_GPIO_DeInit+0x17c>
 800b300:	4840      	ldr	r0, [pc, #256]	; (800b404 <HAL_GPIO_DeInit+0x1d8>)
 800b302:	4284      	cmp	r4, r0
 800b304:	d064      	beq.n	800b3d0 <HAL_GPIO_DeInit+0x1a4>
 800b306:	4838      	ldr	r0, [pc, #224]	; (800b3e8 <HAL_GPIO_DeInit+0x1bc>)
 800b308:	4284      	cmp	r4, r0
 800b30a:	d065      	beq.n	800b3d8 <HAL_GPIO_DeInit+0x1ac>
 800b30c:	483e      	ldr	r0, [pc, #248]	; (800b408 <HAL_GPIO_DeInit+0x1dc>)
 800b30e:	4284      	cmp	r4, r0
 800b310:	bf14      	ite	ne
 800b312:	200a      	movne	r0, #10
 800b314:	2009      	moveq	r0, #9
 800b316:	fa00 f101 	lsl.w	r1, r0, r1
 800b31a:	e000      	b.n	800b31e <HAL_GPIO_DeInit+0xf2>
 800b31c:	2100      	movs	r1, #0
 800b31e:	4588      	cmp	r8, r1
 800b320:	d11b      	bne.n	800b35a <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b322:	f8d9 1000 	ldr.w	r1, [r9]
 800b326:	ea21 010e 	bic.w	r1, r1, lr
 800b32a:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b32e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b332:	ea21 010e 	bic.w	r1, r1, lr
 800b336:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b33a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800b33e:	ea21 010e 	bic.w	r1, r1, lr
 800b342:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b346:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800b34a:	ea21 010e 	bic.w	r1, r1, lr
 800b34e:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800b352:	68b1      	ldr	r1, [r6, #8]
 800b354:	ea21 010c 	bic.w	r1, r1, ip
 800b358:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b35a:	0059      	lsls	r1, r3, #1
 800b35c:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b35e:	f003 0c07 	and.w	ip, r3, #7
 800b362:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b364:	fa00 f101 	lsl.w	r1, r0, r1
 800b368:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b36a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b36e:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b372:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b376:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b378:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800b37a:	3301      	adds	r3, #1
 800b37c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800b380:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b382:	6a06      	ldr	r6, [r0, #32]
 800b384:	ea26 060c 	bic.w	r6, r6, ip
 800b388:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b38a:	68e0      	ldr	r0, [r4, #12]
 800b38c:	ea20 0001 	bic.w	r0, r0, r1
 800b390:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b392:	6860      	ldr	r0, [r4, #4]
 800b394:	ea20 0202 	bic.w	r2, r0, r2
 800b398:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b39a:	68a2      	ldr	r2, [r4, #8]
 800b39c:	ea22 0101 	bic.w	r1, r2, r1
 800b3a0:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b3a2:	d183      	bne.n	800b2ac <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800b3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b3a8:	2006      	movs	r0, #6
 800b3aa:	fa00 f101 	lsl.w	r1, r0, r1
 800b3ae:	e7b6      	b.n	800b31e <HAL_GPIO_DeInit+0xf2>
 800b3b0:	2002      	movs	r0, #2
 800b3b2:	fa00 f101 	lsl.w	r1, r0, r1
 800b3b6:	e7b2      	b.n	800b31e <HAL_GPIO_DeInit+0xf2>
 800b3b8:	2003      	movs	r0, #3
 800b3ba:	fa00 f101 	lsl.w	r1, r0, r1
 800b3be:	e7ae      	b.n	800b31e <HAL_GPIO_DeInit+0xf2>
 800b3c0:	2004      	movs	r0, #4
 800b3c2:	fa00 f101 	lsl.w	r1, r0, r1
 800b3c6:	e7aa      	b.n	800b31e <HAL_GPIO_DeInit+0xf2>
 800b3c8:	2005      	movs	r0, #5
 800b3ca:	fa00 f101 	lsl.w	r1, r0, r1
 800b3ce:	e7a6      	b.n	800b31e <HAL_GPIO_DeInit+0xf2>
 800b3d0:	2007      	movs	r0, #7
 800b3d2:	fa00 f101 	lsl.w	r1, r0, r1
 800b3d6:	e7a2      	b.n	800b31e <HAL_GPIO_DeInit+0xf2>
 800b3d8:	2008      	movs	r0, #8
 800b3da:	fa00 f101 	lsl.w	r1, r0, r1
 800b3de:	e79e      	b.n	800b31e <HAL_GPIO_DeInit+0xf2>
 800b3e0:	40020000 	.word	0x40020000
 800b3e4:	40020400 	.word	0x40020400
 800b3e8:	40022000 	.word	0x40022000
 800b3ec:	0802bd4c 	.word	0x0802bd4c
 800b3f0:	40020800 	.word	0x40020800
 800b3f4:	40020c00 	.word	0x40020c00
 800b3f8:	40021000 	.word	0x40021000
 800b3fc:	40021400 	.word	0x40021400
 800b400:	40021800 	.word	0x40021800
 800b404:	40021c00 	.word	0x40021c00
 800b408:	40022400 	.word	0x40022400
 800b40c:	40013800 	.word	0x40013800
 800b410:	40013c00 	.word	0x40013c00

0800b414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b418:	460c      	mov	r4, r1
 800b41a:	b129      	cbz	r1, 800b428 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b41c:	692b      	ldr	r3, [r5, #16]
 800b41e:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b420:	bf14      	ite	ne
 800b422:	2001      	movne	r0, #1
 800b424:	2000      	moveq	r0, #0
 800b426:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b428:	f240 1177 	movw	r1, #375	; 0x177
 800b42c:	4801      	ldr	r0, [pc, #4]	; (800b434 <HAL_GPIO_ReadPin+0x20>)
 800b42e:	f7f8 fea5 	bl	800417c <assert_failed>
 800b432:	e7f3      	b.n	800b41c <HAL_GPIO_ReadPin+0x8>
 800b434:	0802bd4c 	.word	0x0802bd4c

0800b438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b438:	b570      	push	{r4, r5, r6, lr}
 800b43a:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b43c:	460c      	mov	r4, r1
{
 800b43e:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b440:	b161      	cbz	r1, 800b45c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800b442:	2d01      	cmp	r5, #1
 800b444:	d803      	bhi.n	800b44e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800b446:	b905      	cbnz	r5, 800b44a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b448:	0424      	lsls	r4, r4, #16
 800b44a:	61b4      	str	r4, [r6, #24]
  }
}
 800b44c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800b44e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800b452:	4805      	ldr	r0, [pc, #20]	; (800b468 <HAL_GPIO_WritePin+0x30>)
 800b454:	f7f8 fe92 	bl	800417c <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b458:	61b4      	str	r4, [r6, #24]
}
 800b45a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b45c:	f240 1197 	movw	r1, #407	; 0x197
 800b460:	4801      	ldr	r0, [pc, #4]	; (800b468 <HAL_GPIO_WritePin+0x30>)
 800b462:	f7f8 fe8b 	bl	800417c <assert_failed>
 800b466:	e7ec      	b.n	800b442 <HAL_GPIO_WritePin+0xa>
 800b468:	0802bd4c 	.word	0x0802bd4c

0800b46c <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b470:	460c      	mov	r4, r1
 800b472:	b141      	cbz	r1, 800b486 <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b474:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b476:	ea04 0301 	and.w	r3, r4, r1
 800b47a:	ea24 0401 	bic.w	r4, r4, r1
 800b47e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800b482:	61ac      	str	r4, [r5, #24]
}
 800b484:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b486:	f240 11af 	movw	r1, #431	; 0x1af
 800b48a:	4802      	ldr	r0, [pc, #8]	; (800b494 <HAL_GPIO_TogglePin+0x28>)
 800b48c:	f7f8 fe76 	bl	800417c <assert_failed>
 800b490:	e7f0      	b.n	800b474 <HAL_GPIO_TogglePin+0x8>
 800b492:	bf00      	nop
 800b494:	0802bd4c 	.word	0x0802bd4c

0800b498 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop

0800b49c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b49c:	4a04      	ldr	r2, [pc, #16]	; (800b4b0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800b49e:	6951      	ldr	r1, [r2, #20]
 800b4a0:	4201      	tst	r1, r0
 800b4a2:	d100      	bne.n	800b4a6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800b4a4:	4770      	bx	lr
{
 800b4a6:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b4a8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b4aa:	f7ff fff5 	bl	800b498 <HAL_GPIO_EXTI_Callback>
}
 800b4ae:	bd08      	pop	{r3, pc}
 800b4b0:	40013c00 	.word	0x40013c00

0800b4b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b4bc:	4926      	ldr	r1, [pc, #152]	; (800b558 <I2C_TransferConfig+0xa4>)
{
 800b4be:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b4c0:	4a26      	ldr	r2, [pc, #152]	; (800b55c <I2C_TransferConfig+0xa8>)
{
 800b4c2:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b4c4:	6803      	ldr	r3, [r0, #0]
{
 800b4c6:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	bf18      	it	ne
 800b4cc:	428b      	cmpne	r3, r1
 800b4ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b4d2:	bf14      	ite	ne
 800b4d4:	2201      	movne	r2, #1
 800b4d6:	2200      	moveq	r2, #0
 800b4d8:	428b      	cmp	r3, r1
 800b4da:	bf0c      	ite	eq
 800b4dc:	2200      	moveq	r2, #0
 800b4de:	f002 0201 	andne.w	r2, r2, #1
 800b4e2:	b112      	cbz	r2, 800b4ea <I2C_TransferConfig+0x36>
 800b4e4:	4a1e      	ldr	r2, [pc, #120]	; (800b560 <I2C_TransferConfig+0xac>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d123      	bne.n	800b532 <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800b4ea:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800b4ee:	d002      	beq.n	800b4f6 <I2C_TransferConfig+0x42>
 800b4f0:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800b4f4:	d129      	bne.n	800b54a <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800b4f6:	4b1b      	ldr	r3, [pc, #108]	; (800b564 <I2C_TransferConfig+0xb0>)
 800b4f8:	429f      	cmp	r7, r3
 800b4fa:	d005      	beq.n	800b508 <I2C_TransferConfig+0x54>
 800b4fc:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800b500:	4a19      	ldr	r2, [pc, #100]	; (800b568 <I2C_TransferConfig+0xb4>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d000      	beq.n	800b508 <I2C_TransferConfig+0x54>
 800b506:	b9d7      	cbnz	r7, 800b53e <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b508:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b50c:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b510:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800b514:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800b518:	4a14      	ldr	r2, [pc, #80]	; (800b56c <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b51a:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800b51c:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800b520:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b522:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800b526:	ea27 0702 	bic.w	r7, r7, r2
 800b52a:	433b      	orrs	r3, r7
 800b52c:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b532:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800b536:	480e      	ldr	r0, [pc, #56]	; (800b570 <I2C_TransferConfig+0xbc>)
 800b538:	f7f8 fe20 	bl	800417c <assert_failed>
 800b53c:	e7d5      	b.n	800b4ea <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800b53e:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800b542:	480b      	ldr	r0, [pc, #44]	; (800b570 <I2C_TransferConfig+0xbc>)
 800b544:	f7f8 fe1a 	bl	800417c <assert_failed>
 800b548:	e7de      	b.n	800b508 <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800b54a:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800b54e:	4808      	ldr	r0, [pc, #32]	; (800b570 <I2C_TransferConfig+0xbc>)
 800b550:	f7f8 fe14 	bl	800417c <assert_failed>
 800b554:	e7cf      	b.n	800b4f6 <I2C_TransferConfig+0x42>
 800b556:	bf00      	nop
 800b558:	40005800 	.word	0x40005800
 800b55c:	40005400 	.word	0x40005400
 800b560:	40006000 	.word	0x40006000
 800b564:	80004000 	.word	0x80004000
 800b568:	80002000 	.word	0x80002000
 800b56c:	03ff63ff 	.word	0x03ff63ff
 800b570:	0802bd88 	.word	0x0802bd88

0800b574 <I2C_IsErrorOccurred>:
{
 800b574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800b578:	6803      	ldr	r3, [r0, #0]
{
 800b57a:	460d      	mov	r5, r1
 800b57c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800b57e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b580:	f011 0110 	ands.w	r1, r1, #16
 800b584:	d045      	beq.n	800b612 <I2C_IsErrorOccurred+0x9e>
 800b586:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800b588:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b58c:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800b58e:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b592:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b594:	699a      	ldr	r2, [r3, #24]
 800b596:	0696      	lsls	r6, r2, #26
 800b598:	f100 808d 	bmi.w	800b6b6 <I2C_IsErrorOccurred+0x142>
 800b59c:	f1b9 0f00 	cmp.w	r9, #0
 800b5a0:	f040 808d 	bne.w	800b6be <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800b5a4:	1c6a      	adds	r2, r5, #1
 800b5a6:	d152      	bne.n	800b64e <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b5a8:	699a      	ldr	r2, [r3, #24]
 800b5aa:	0697      	lsls	r7, r2, #26
 800b5ac:	d5fc      	bpl.n	800b5a8 <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5ae:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800b5b0:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800b5b2:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5b6:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800b5b8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b5ba:	05d5      	lsls	r5, r2, #23
 800b5bc:	d42d      	bmi.n	800b61a <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b5be:	0557      	lsls	r7, r2, #21
 800b5c0:	d53d      	bpl.n	800b63e <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b5c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b5c6:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b5ca:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b5cc:	0596      	lsls	r6, r2, #22
 800b5ce:	d504      	bpl.n	800b5da <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b5d0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800b5d4:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b5d8:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b5da:	699a      	ldr	r2, [r3, #24]
 800b5dc:	0790      	lsls	r0, r2, #30
 800b5de:	d501      	bpl.n	800b5e4 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b5e4:	699a      	ldr	r2, [r3, #24]
 800b5e6:	07d2      	lsls	r2, r2, #31
 800b5e8:	d524      	bpl.n	800b634 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800b5ea:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b5ec:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800b5ee:	4835      	ldr	r0, [pc, #212]	; (800b6c4 <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800b5f0:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800b5f4:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5f6:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800b5f8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800b5fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800b5fc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800b600:	4319      	orrs	r1, r3
 800b602:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b604:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b608:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800b60c:	4648      	mov	r0, r9
 800b60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800b612:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800b614:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b616:	05d5      	lsls	r5, r2, #23
 800b618:	d5d1      	bpl.n	800b5be <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b61a:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800b61e:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b622:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b624:	0550      	lsls	r0, r2, #21
 800b626:	d5d1      	bpl.n	800b5cc <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b628:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b62c:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b630:	61d8      	str	r0, [r3, #28]
 800b632:	e7cb      	b.n	800b5cc <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b634:	699a      	ldr	r2, [r3, #24]
 800b636:	f042 0201 	orr.w	r2, r2, #1
 800b63a:	619a      	str	r2, [r3, #24]
 800b63c:	e7d5      	b.n	800b5ea <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b63e:	0595      	lsls	r5, r2, #22
 800b640:	d4c6      	bmi.n	800b5d0 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800b642:	f1b9 0f00 	cmp.w	r9, #0
 800b646:	d1c8      	bne.n	800b5da <I2C_IsErrorOccurred+0x66>
}
 800b648:	4648      	mov	r0, r9
 800b64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b64e:	f7fc fabd 	bl	8007bcc <HAL_GetTick>
 800b652:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b654:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b656:	42a8      	cmp	r0, r5
 800b658:	d801      	bhi.n	800b65e <I2C_IsErrorOccurred+0xea>
 800b65a:	2d00      	cmp	r5, #0
 800b65c:	d19a      	bne.n	800b594 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b65e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800b660:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b664:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800b666:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b668:	040e      	lsls	r6, r1, #16
 800b66a:	d50d      	bpl.n	800b688 <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800b66c:	0441      	lsls	r1, r0, #17
 800b66e:	d40b      	bmi.n	800b688 <I2C_IsErrorOccurred+0x114>
 800b670:	2a20      	cmp	r2, #32
 800b672:	d009      	beq.n	800b688 <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b67a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b67c:	f7fc faa6 	bl	8007bcc <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b680:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800b682:	4607      	mov	r7, r0
 800b684:	e000      	b.n	800b688 <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	699e      	ldr	r6, [r3, #24]
 800b68a:	f016 0620 	ands.w	r6, r6, #32
 800b68e:	d181      	bne.n	800b594 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b690:	f7fc fa9c 	bl	8007bcc <HAL_GetTick>
 800b694:	1bc0      	subs	r0, r0, r7
 800b696:	2819      	cmp	r0, #25
 800b698:	d9f5      	bls.n	800b686 <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b69a:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800b69c:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800b6a0:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6a4:	f043 0320 	orr.w	r3, r3, #32
 800b6a8:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800b6aa:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b6ae:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6b0:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800b6b4:	e7e8      	b.n	800b688 <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800b6b6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ba:	f43f af78 	beq.w	800b5ae <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800b6be:	2104      	movs	r1, #4
 800b6c0:	e7a8      	b.n	800b614 <I2C_IsErrorOccurred+0xa0>
 800b6c2:	bf00      	nop
 800b6c4:	fe00e800 	.word	0xfe00e800

0800b6c8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	460d      	mov	r5, r1
 800b6ce:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b6d0:	e004      	b.n	800b6dc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6d2:	f7ff ff4f 	bl	800b574 <I2C_IsErrorOccurred>
 800b6d6:	b950      	cbnz	r0, 800b6ee <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800b6d8:	1c6a      	adds	r2, r5, #1
 800b6da:	d10a      	bne.n	800b6f2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b6dc:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6de:	4632      	mov	r2, r6
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	079b      	lsls	r3, r3, #30
 800b6e8:	d5f3      	bpl.n	800b6d2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800b6ea:	2000      	movs	r0, #0
}
 800b6ec:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800b6ee:	2001      	movs	r0, #1
}
 800b6f0:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6f2:	f7fc fa6b 	bl	8007bcc <HAL_GetTick>
 800b6f6:	1b80      	subs	r0, r0, r6
 800b6f8:	42a8      	cmp	r0, r5
 800b6fa:	d801      	bhi.n	800b700 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800b6fc:	2d00      	cmp	r5, #0
 800b6fe:	d1ed      	bne.n	800b6dc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b700:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b702:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b704:	2200      	movs	r2, #0
        return HAL_ERROR;
 800b706:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b708:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800b70a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b70e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b710:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b714:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800b718:	bd70      	pop	{r4, r5, r6, pc}
 800b71a:	bf00      	nop

0800b71c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	4605      	mov	r5, r0
 800b720:	460c      	mov	r4, r1
 800b722:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b724:	e008      	b.n	800b738 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b726:	f7ff ff25 	bl	800b574 <I2C_IsErrorOccurred>
 800b72a:	b9d8      	cbnz	r0, 800b764 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b72c:	f7fc fa4e 	bl	8007bcc <HAL_GetTick>
 800b730:	1b80      	subs	r0, r0, r6
 800b732:	42a0      	cmp	r0, r4
 800b734:	d809      	bhi.n	800b74a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800b736:	b144      	cbz	r4, 800b74a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b738:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b73a:	4632      	mov	r2, r6
 800b73c:	4621      	mov	r1, r4
 800b73e:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	069b      	lsls	r3, r3, #26
 800b744:	d5ef      	bpl.n	800b726 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800b746:	2000      	movs	r0, #0
}
 800b748:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b74a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b74c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b74e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800b750:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b752:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800b754:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b758:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b75a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b75e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800b762:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800b764:	2001      	movs	r0, #1
}
 800b766:	bd70      	pop	{r4, r5, r6, pc}

0800b768 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	4604      	mov	r4, r0
 800b76c:	460d      	mov	r5, r1
 800b76e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b770:	e00c      	b.n	800b78c <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b772:	f7ff feff 	bl	800b574 <I2C_IsErrorOccurred>
 800b776:	b9e8      	cbnz	r0, 800b7b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	699a      	ldr	r2, [r3, #24]
 800b77c:	0691      	lsls	r1, r2, #26
 800b77e:	d41b      	bmi.n	800b7b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b780:	f7fc fa24 	bl	8007bcc <HAL_GetTick>
 800b784:	1b80      	subs	r0, r0, r6
 800b786:	42a8      	cmp	r0, r5
 800b788:	d809      	bhi.n	800b79e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800b78a:	b145      	cbz	r5, 800b79e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b78c:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b78e:	4632      	mov	r2, r6
 800b790:	4629      	mov	r1, r5
 800b792:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	075b      	lsls	r3, r3, #29
 800b798:	d5eb      	bpl.n	800b772 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800b79a:	2000      	movs	r0, #0
}
 800b79c:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b79e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b7a0:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800b7a2:	2100      	movs	r1, #0
      return HAL_ERROR;
 800b7a4:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7a6:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800b7a8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7ac:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b7ae:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800b7b4:	2001      	movs	r0, #1
}
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b7b8:	699a      	ldr	r2, [r3, #24]
 800b7ba:	0752      	lsls	r2, r2, #29
 800b7bc:	d502      	bpl.n	800b7c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800b7be:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b7c0:	2a00      	cmp	r2, #0
 800b7c2:	d1ea      	bne.n	800b79a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	f012 0210 	ands.w	r2, r2, #16
 800b7ca:	d012      	beq.n	800b7f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7cc:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b7ce:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7d0:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b7d2:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7d4:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800b7d6:	4808      	ldr	r0, [pc, #32]	; (800b7f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7d8:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7da:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	4002      	ands	r2, r0
        return HAL_ERROR;
 800b7e0:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800b7e2:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800b7e4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800b7e8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800b7f0:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7f2:	6462      	str	r2, [r4, #68]	; 0x44
 800b7f4:	e7ee      	b.n	800b7d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800b7f6:	bf00      	nop
 800b7f8:	fe00e800 	.word	0xfe00e800

0800b7fc <I2C_RequestMemoryRead>:
{
 800b7fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b800:	4c26      	ldr	r4, [pc, #152]	; (800b89c <I2C_RequestMemoryRead+0xa0>)
{
 800b802:	b083      	sub	sp, #12
 800b804:	4698      	mov	r8, r3
 800b806:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b808:	9400      	str	r4, [sp, #0]
{
 800b80a:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b80c:	2300      	movs	r3, #0
 800b80e:	fa5f f288 	uxtb.w	r2, r8
{
 800b812:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b816:	f7ff fe4d 	bl	800b4b4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b81a:	4628      	mov	r0, r5
 800b81c:	463a      	mov	r2, r7
 800b81e:	4621      	mov	r1, r4
 800b820:	f7ff ff52 	bl	800b6c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b824:	b9e0      	cbnz	r0, 800b860 <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b826:	f1b8 0f01 	cmp.w	r8, #1
 800b82a:	4606      	mov	r6, r0
 800b82c:	d10d      	bne.n	800b84a <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b82e:	fa5f f389 	uxtb.w	r3, r9
 800b832:	682a      	ldr	r2, [r5, #0]
 800b834:	6293      	str	r3, [r2, #40]	; 0x28
 800b836:	e001      	b.n	800b83c <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800b838:	1c61      	adds	r1, r4, #1
 800b83a:	d116      	bne.n	800b86a <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b83c:	6993      	ldr	r3, [r2, #24]
 800b83e:	065b      	lsls	r3, r3, #25
 800b840:	d5fa      	bpl.n	800b838 <I2C_RequestMemoryRead+0x3c>
}
 800b842:	4630      	mov	r0, r6
 800b844:	b003      	add	sp, #12
 800b846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b84a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800b84e:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b850:	4621      	mov	r1, r4
 800b852:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b854:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b856:	463a      	mov	r2, r7
 800b858:	f7ff ff36 	bl	800b6c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d0e6      	beq.n	800b82e <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800b860:	2601      	movs	r6, #1
}
 800b862:	4630      	mov	r0, r6
 800b864:	b003      	add	sp, #12
 800b866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b86a:	f7fc f9af 	bl	8007bcc <HAL_GetTick>
 800b86e:	1bc0      	subs	r0, r0, r7
 800b870:	4284      	cmp	r4, r0
 800b872:	d302      	bcc.n	800b87a <I2C_RequestMemoryRead+0x7e>
 800b874:	b10c      	cbz	r4, 800b87a <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b876:	682a      	ldr	r2, [r5, #0]
 800b878:	e7e0      	b.n	800b83c <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b87a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b87c:	2120      	movs	r1, #32
    return HAL_ERROR;
 800b87e:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b880:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b882:	430b      	orrs	r3, r1
}
 800b884:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800b886:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b88a:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b88c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b890:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800b894:	b003      	add	sp, #12
 800b896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b89a:	bf00      	nop
 800b89c:	80002000 	.word	0x80002000

0800b8a0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	f000 80c1 	beq.w	800ba28 <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b8a6:	4b61      	ldr	r3, [pc, #388]	; (800ba2c <HAL_I2C_Init+0x18c>)
 800b8a8:	6802      	ldr	r2, [r0, #0]
 800b8aa:	4961      	ldr	r1, [pc, #388]	; (800ba30 <HAL_I2C_Init+0x190>)
{
 800b8ac:	b510      	push	{r4, lr}
 800b8ae:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b8b0:	4860      	ldr	r0, [pc, #384]	; (800ba34 <HAL_I2C_Init+0x194>)
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	bf18      	it	ne
 800b8b6:	4282      	cmpne	r2, r0
 800b8b8:	bf14      	ite	ne
 800b8ba:	2301      	movne	r3, #1
 800b8bc:	2300      	moveq	r3, #0
 800b8be:	428a      	cmp	r2, r1
 800b8c0:	bf0c      	ite	eq
 800b8c2:	2300      	moveq	r3, #0
 800b8c4:	f003 0301 	andne.w	r3, r3, #1
 800b8c8:	b11b      	cbz	r3, 800b8d2 <HAL_I2C_Init+0x32>
 800b8ca:	4b5b      	ldr	r3, [pc, #364]	; (800ba38 <HAL_I2C_Init+0x198>)
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	f040 80a5 	bne.w	800ba1c <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d8:	f080 809a 	bcs.w	800ba10 <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800b8dc:	68e3      	ldr	r3, [r4, #12]
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d855      	bhi.n	800b990 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800b8e4:	6923      	ldr	r3, [r4, #16]
 800b8e6:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800b8ea:	d15a      	bne.n	800b9a2 <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800b8ec:	6963      	ldr	r3, [r4, #20]
 800b8ee:	2bff      	cmp	r3, #255	; 0xff
 800b8f0:	d85f      	bhi.n	800b9b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800b8f2:	69a3      	ldr	r3, [r4, #24]
 800b8f4:	2b07      	cmp	r3, #7
 800b8f6:	d864      	bhi.n	800b9c2 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800b8f8:	69e3      	ldr	r3, [r4, #28]
 800b8fa:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800b8fe:	d169      	bne.n	800b9d4 <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800b900:	6a23      	ldr	r3, [r4, #32]
 800b902:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800b906:	d16e      	bne.n	800b9e6 <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b908:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b90c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b910:	2b00      	cmp	r3, #0
 800b912:	d073      	beq.n	800b9fc <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800b914:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b916:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b918:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b91a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b91e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b920:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b924:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800b926:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b92a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800b92c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b92e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b930:	689a      	ldr	r2, [r3, #8]
 800b932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b936:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b938:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b93a:	d065      	beq.n	800ba08 <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b93c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b940:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b942:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b944:	d102      	bne.n	800b94c <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b94a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b94c:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800b94e:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b952:	493a      	ldr	r1, [pc, #232]	; (800ba3c <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b954:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b956:	4301      	orrs	r1, r0
 800b958:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b95a:	68d9      	ldr	r1, [r3, #12]
 800b95c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800b960:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b962:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b966:	4302      	orrs	r2, r0
 800b968:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b96c:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b970:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b972:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b974:	4301      	orrs	r1, r0
  return HAL_OK;
 800b976:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b978:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b97a:	6819      	ldr	r1, [r3, #0]
 800b97c:	f041 0101 	orr.w	r1, r1, #1
 800b980:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b982:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b984:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b988:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b98a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800b98e:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800b990:	f240 2117 	movw	r1, #535	; 0x217
 800b994:	482a      	ldr	r0, [pc, #168]	; (800ba40 <HAL_I2C_Init+0x1a0>)
 800b996:	f7f8 fbf1 	bl	800417c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800b99a:	6923      	ldr	r3, [r4, #16]
 800b99c:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800b9a0:	d0a4      	beq.n	800b8ec <HAL_I2C_Init+0x4c>
 800b9a2:	f44f 7106 	mov.w	r1, #536	; 0x218
 800b9a6:	4826      	ldr	r0, [pc, #152]	; (800ba40 <HAL_I2C_Init+0x1a0>)
 800b9a8:	f7f8 fbe8 	bl	800417c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800b9ac:	6963      	ldr	r3, [r4, #20]
 800b9ae:	2bff      	cmp	r3, #255	; 0xff
 800b9b0:	d99f      	bls.n	800b8f2 <HAL_I2C_Init+0x52>
 800b9b2:	f240 2119 	movw	r1, #537	; 0x219
 800b9b6:	4822      	ldr	r0, [pc, #136]	; (800ba40 <HAL_I2C_Init+0x1a0>)
 800b9b8:	f7f8 fbe0 	bl	800417c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800b9bc:	69a3      	ldr	r3, [r4, #24]
 800b9be:	2b07      	cmp	r3, #7
 800b9c0:	d99a      	bls.n	800b8f8 <HAL_I2C_Init+0x58>
 800b9c2:	f240 211a 	movw	r1, #538	; 0x21a
 800b9c6:	481e      	ldr	r0, [pc, #120]	; (800ba40 <HAL_I2C_Init+0x1a0>)
 800b9c8:	f7f8 fbd8 	bl	800417c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800b9cc:	69e3      	ldr	r3, [r4, #28]
 800b9ce:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800b9d2:	d095      	beq.n	800b900 <HAL_I2C_Init+0x60>
 800b9d4:	f240 211b 	movw	r1, #539	; 0x21b
 800b9d8:	4819      	ldr	r0, [pc, #100]	; (800ba40 <HAL_I2C_Init+0x1a0>)
 800b9da:	f7f8 fbcf 	bl	800417c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800b9de:	6a23      	ldr	r3, [r4, #32]
 800b9e0:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800b9e4:	d090      	beq.n	800b908 <HAL_I2C_Init+0x68>
 800b9e6:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800b9ea:	4815      	ldr	r0, [pc, #84]	; (800ba40 <HAL_I2C_Init+0x1a0>)
 800b9ec:	f7f8 fbc6 	bl	800417c <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b9f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b9f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d18b      	bne.n	800b914 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800b9fc:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800b9fe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800ba02:	f7f9 fe65 	bl	80056d0 <HAL_I2C_MspInit>
 800ba06:	e785      	b.n	800b914 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba0c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba0e:	e79d      	b.n	800b94c <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800ba10:	f240 2116 	movw	r1, #534	; 0x216
 800ba14:	480a      	ldr	r0, [pc, #40]	; (800ba40 <HAL_I2C_Init+0x1a0>)
 800ba16:	f7f8 fbb1 	bl	800417c <assert_failed>
 800ba1a:	e75f      	b.n	800b8dc <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ba1c:	f240 2115 	movw	r1, #533	; 0x215
 800ba20:	4807      	ldr	r0, [pc, #28]	; (800ba40 <HAL_I2C_Init+0x1a0>)
 800ba22:	f7f8 fbab 	bl	800417c <assert_failed>
 800ba26:	e754      	b.n	800b8d2 <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800ba28:	2001      	movs	r0, #1
}
 800ba2a:	4770      	bx	lr
 800ba2c:	40005400 	.word	0x40005400
 800ba30:	40005c00 	.word	0x40005c00
 800ba34:	40005800 	.word	0x40005800
 800ba38:	40006000 	.word	0x40006000
 800ba3c:	02008000 	.word	0x02008000
 800ba40:	0802bd88 	.word	0x0802bd88

0800ba44 <HAL_I2C_Master_Transmit>:
{
 800ba44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba48:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba4a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800ba4e:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba50:	2b20      	cmp	r3, #32
{
 800ba52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba54:	d16d      	bne.n	800bb32 <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800ba56:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d068      	beq.n	800bb32 <HAL_I2C_Master_Transmit+0xee>
 800ba60:	2301      	movs	r3, #1
 800ba62:	460f      	mov	r7, r1
 800ba64:	4691      	mov	r9, r2
 800ba66:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800ba6a:	f7fc f8af 	bl	8007bcc <HAL_GetTick>
 800ba6e:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba70:	e004      	b.n	800ba7c <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba72:	f7fc f8ab 	bl	8007bcc <HAL_GetTick>
 800ba76:	1b80      	subs	r0, r0, r6
 800ba78:	2819      	cmp	r0, #25
 800ba7a:	d85e      	bhi.n	800bb3a <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	6999      	ldr	r1, [r3, #24]
 800ba80:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800ba84:	d1f5      	bne.n	800ba72 <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ba86:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800ba88:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800ba8c:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ba8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ba92:	2310      	movs	r3, #16
 800ba94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba98:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800ba9a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	2bff      	cmp	r3, #255	; 0xff
 800baa4:	d86d      	bhi.n	800bb82 <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800baa6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800baa8:	4639      	mov	r1, r7
 800baaa:	4b48      	ldr	r3, [pc, #288]	; (800bbcc <HAL_I2C_Master_Transmit+0x188>)
 800baac:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800baae:	b292      	uxth	r2, r2
 800bab0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bab2:	b2d2      	uxtb	r2, r2
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800baba:	f7ff fcfb 	bl	800b4b4 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800babe:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bac2:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800bac6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bac8:	4632      	mov	r2, r6
 800baca:	4629      	mov	r1, r5
 800bacc:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800bace:	b29b      	uxth	r3, r3
 800bad0:	b1eb      	cbz	r3, 800bb0e <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bad2:	f7ff fdf9 	bl	800b6c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d174      	bne.n	800bbc4 <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bada:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800badc:	6821      	ldr	r1, [r4, #0]
 800bade:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800bae2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bae4:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800bae6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800bae8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800baea:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800baec:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800baee:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800baf0:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800baf2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800baf4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800baf6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800baf8:	b292      	uxth	r2, r2
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1e3      	bne.n	800bac6 <HAL_I2C_Master_Transmit+0x82>
 800bafe:	bb6a      	cbnz	r2, 800bb5c <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800bb00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb02:	4632      	mov	r2, r6
 800bb04:	4629      	mov	r1, r5
 800bb06:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1e1      	bne.n	800bad2 <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb0e:	f7ff fe05 	bl	800b71c <I2C_WaitOnSTOPFlagUntilTimeout>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	d156      	bne.n	800bbc4 <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb16:	6823      	ldr	r3, [r4, #0]
 800bb18:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800bb1a:	4d2d      	ldr	r5, [pc, #180]	; (800bbd0 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb1c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bb1e:	685a      	ldr	r2, [r3, #4]
 800bb20:	402a      	ands	r2, r5
 800bb22:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bb24:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800bb28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bb2c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800bb30:	e000      	b.n	800bb34 <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800bb32:	2002      	movs	r0, #2
}
 800bb34:	b003      	add	sp, #12
 800bb36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb3c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb3e:	2200      	movs	r2, #0
          return HAL_ERROR;
 800bb40:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb42:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800bb44:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb48:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb4a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb4e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800bb52:	b003      	add	sp, #12
 800bb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800bb58:	1c6a      	adds	r2, r5, #1
 800bb5a:	d11d      	bne.n	800bb98 <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb5c:	698b      	ldr	r3, [r1, #24]
 800bb5e:	061b      	lsls	r3, r3, #24
 800bb60:	d5fa      	bpl.n	800bb58 <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	2bff      	cmp	r3, #255	; 0xff
 800bb68:	d91f      	bls.n	800bbaa <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb6a:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bb6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb72:	22ff      	movs	r2, #255	; 0xff
 800bb74:	4639      	mov	r1, r7
 800bb76:	4620      	mov	r0, r4
 800bb78:	f8cd 8000 	str.w	r8, [sp]
 800bb7c:	f7ff fc9a 	bl	800b4b4 <I2C_TransferConfig>
 800bb80:	e7a1      	b.n	800bac6 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb82:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bb84:	4b11      	ldr	r3, [pc, #68]	; (800bbcc <HAL_I2C_Master_Transmit+0x188>)
 800bb86:	4639      	mov	r1, r7
 800bb88:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb8a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb92:	f7ff fc8f 	bl	800b4b4 <I2C_TransferConfig>
 800bb96:	e792      	b.n	800babe <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb98:	f7fc f818 	bl	8007bcc <HAL_GetTick>
 800bb9c:	1b80      	subs	r0, r0, r6
 800bb9e:	4285      	cmp	r5, r0
 800bba0:	d3cb      	bcc.n	800bb3a <HAL_I2C_Master_Transmit+0xf6>
 800bba2:	2d00      	cmp	r5, #0
 800bba4:	d0c9      	beq.n	800bb3a <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bba6:	6821      	ldr	r1, [r4, #0]
 800bba8:	e7d8      	b.n	800bb5c <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbaa:	f8cd 8000 	str.w	r8, [sp]
 800bbae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800bbb2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbb4:	4639      	mov	r1, r7
 800bbb6:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800bbb8:	b292      	uxth	r2, r2
 800bbba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbbc:	b2d2      	uxtb	r2, r2
 800bbbe:	f7ff fc79 	bl	800b4b4 <I2C_TransferConfig>
 800bbc2:	e780      	b.n	800bac6 <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800bbc4:	2001      	movs	r0, #1
}
 800bbc6:	b003      	add	sp, #12
 800bbc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbcc:	80002000 	.word	0x80002000
 800bbd0:	fe00e800 	.word	0xfe00e800

0800bbd4 <HAL_I2C_Master_Receive>:
{
 800bbd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbd8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbda:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800bbde:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbe0:	2b20      	cmp	r3, #32
{
 800bbe2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbe4:	f040 8088 	bne.w	800bcf8 <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800bbe8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bbec:	4604      	mov	r4, r0
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	f000 8082 	beq.w	800bcf8 <HAL_I2C_Master_Receive+0x124>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	460f      	mov	r7, r1
 800bbf8:	4691      	mov	r9, r2
 800bbfa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800bbfe:	f7fb ffe5 	bl	8007bcc <HAL_GetTick>
 800bc02:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc04:	e004      	b.n	800bc10 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc06:	f7fb ffe1 	bl	8007bcc <HAL_GetTick>
 800bc0a:	1b80      	subs	r0, r0, r6
 800bc0c:	2819      	cmp	r0, #25
 800bc0e:	d87e      	bhi.n	800bd0e <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	6999      	ldr	r1, [r3, #24]
 800bc14:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800bc18:	d1f5      	bne.n	800bc06 <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bc1a:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800bc1c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800bc20:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bc22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bc26:	2310      	movs	r3, #16
 800bc28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc2c:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800bc2e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	2bff      	cmp	r3, #255	; 0xff
 800bc38:	d878      	bhi.n	800bd2c <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800bc3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	4b49      	ldr	r3, [pc, #292]	; (800bd64 <HAL_I2C_Master_Receive+0x190>)
 800bc40:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800bc42:	b292      	uxth	r2, r2
 800bc44:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc46:	b2d2      	uxtb	r2, r2
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc4e:	f7ff fc31 	bl	800b4b4 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc52:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc56:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800bc5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	4629      	mov	r1, r5
 800bc60:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d035      	beq.n	800bcd4 <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc68:	f7ff fd7e 	bl	800b768 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d175      	bne.n	800bd5c <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bc70:	6822      	ldr	r2, [r4, #0]
 800bc72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc76:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800bc78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800bc7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800bc7c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800bc7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800bc80:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800bc82:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800bc84:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800bc86:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800bc88:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800bc8c:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc8e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800bc90:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1e1      	bne.n	800bc5a <HAL_I2C_Master_Receive+0x86>
 800bc96:	2a00      	cmp	r2, #0
 800bc98:	d0df      	beq.n	800bc5a <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc9a:	6822      	ldr	r2, [r4, #0]
 800bc9c:	e001      	b.n	800bca2 <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800bc9e:	1c69      	adds	r1, r5, #1
 800bca0:	d12e      	bne.n	800bd00 <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bca2:	6993      	ldr	r3, [r2, #24]
 800bca4:	061b      	lsls	r3, r3, #24
 800bca6:	d5fa      	bpl.n	800bc9e <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bca8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	2bff      	cmp	r3, #255	; 0xff
 800bcae:	d948      	bls.n	800bd42 <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bcb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bcb4:	22ff      	movs	r2, #255	; 0xff
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcba:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bcbe:	f8cd 8000 	str.w	r8, [sp]
 800bcc2:	f7ff fbf7 	bl	800b4b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bcc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcc8:	4632      	mov	r2, r6
 800bcca:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800bccc:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcce:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1c9      	bne.n	800bc68 <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcd4:	f7ff fd22 	bl	800b71c <I2C_WaitOnSTOPFlagUntilTimeout>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d13f      	bne.n	800bd5c <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800bce0:	4d21      	ldr	r5, [pc, #132]	; (800bd68 <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bce2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bce4:	685a      	ldr	r2, [r3, #4]
 800bce6:	402a      	ands	r2, r5
 800bce8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bcea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800bcee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bcf2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800bcf6:	e000      	b.n	800bcfa <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800bcf8:	2002      	movs	r0, #2
}
 800bcfa:	b003      	add	sp, #12
 800bcfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd00:	f7fb ff64 	bl	8007bcc <HAL_GetTick>
 800bd04:	1b80      	subs	r0, r0, r6
 800bd06:	4285      	cmp	r5, r0
 800bd08:	d301      	bcc.n	800bd0e <HAL_I2C_Master_Receive+0x13a>
 800bd0a:	2d00      	cmp	r5, #0
 800bd0c:	d1c5      	bne.n	800bc9a <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd10:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd12:	2200      	movs	r2, #0
          return HAL_ERROR;
 800bd14:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd16:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800bd18:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd1c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd1e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd22:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800bd26:	b003      	add	sp, #12
 800bd28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd2c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bd2e:	4b0d      	ldr	r3, [pc, #52]	; (800bd64 <HAL_I2C_Master_Receive+0x190>)
 800bd30:	4639      	mov	r1, r7
 800bd32:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd34:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd3c:	f7ff fbba 	bl	800b4b4 <I2C_TransferConfig>
 800bd40:	e787      	b.n	800bc52 <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd42:	f8cd 8000 	str.w	r8, [sp]
 800bd46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800bd4a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800bd50:	b292      	uxth	r2, r2
 800bd52:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd54:	b2d2      	uxtb	r2, r2
 800bd56:	f7ff fbad 	bl	800b4b4 <I2C_TransferConfig>
 800bd5a:	e77e      	b.n	800bc5a <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800bd5c:	2001      	movs	r0, #1
}
 800bd5e:	b003      	add	sp, #12
 800bd60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd64:	80002400 	.word	0x80002400
 800bd68:	fe00e800 	.word	0xfe00e800

0800bd6c <HAL_I2C_Mem_Read>:
{
 800bd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd70:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800bd72:	3b01      	subs	r3, #1
{
 800bd74:	b083      	sub	sp, #12
 800bd76:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800bd78:	2b01      	cmp	r3, #1
{
 800bd7a:	4688      	mov	r8, r1
 800bd7c:	4691      	mov	r9, r2
 800bd7e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800bd82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800bd84:	d904      	bls.n	800bd90 <HAL_I2C_Mem_Read+0x24>
 800bd86:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800bd8a:	486e      	ldr	r0, [pc, #440]	; (800bf44 <HAL_I2C_Mem_Read+0x1d8>)
 800bd8c:	f7f8 f9f6 	bl	800417c <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd90:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800bd94:	2b20      	cmp	r3, #32
 800bd96:	d17f      	bne.n	800be98 <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800bd98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d075      	beq.n	800be8a <HAL_I2C_Mem_Read+0x11e>
 800bd9e:	f1ba 0f00 	cmp.w	sl, #0
 800bda2:	d072      	beq.n	800be8a <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800bda4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d075      	beq.n	800be98 <HAL_I2C_Mem_Read+0x12c>
 800bdac:	2301      	movs	r3, #1
 800bdae:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800bdb2:	f7fb ff0b 	bl	8007bcc <HAL_GetTick>
 800bdb6:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdb8:	e004      	b.n	800bdc4 <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdba:	f7fb ff07 	bl	8007bcc <HAL_GetTick>
 800bdbe:	1b80      	subs	r0, r0, r6
 800bdc0:	2819      	cmp	r0, #25
 800bdc2:	d874      	bhi.n	800beae <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	699b      	ldr	r3, [r3, #24]
 800bdc8:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800bdcc:	d1f5      	bne.n	800bdba <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800bdce:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bdd0:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800bdd2:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bdd6:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800bdd8:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bdda:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bddc:	4628      	mov	r0, r5
 800bdde:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bde2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bde6:	2140      	movs	r1, #64	; 0x40
 800bde8:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bdec:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bdee:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800bdf2:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bdf6:	f7ff fd01 	bl	800b7fc <I2C_RequestMemoryRead>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	f040 8083 	bne.w	800bf06 <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be00:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800be02:	b29b      	uxth	r3, r3
 800be04:	2bff      	cmp	r3, #255	; 0xff
 800be06:	f240 808e 	bls.w	800bf26 <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800be0a:	4b4f      	ldr	r3, [pc, #316]	; (800bf48 <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800be0c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800be0e:	4641      	mov	r1, r8
 800be10:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800be12:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be1a:	f7ff fb4b 	bl	800b4b4 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800be1e:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800be20:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be24:	682a      	ldr	r2, [r5, #0]
 800be26:	e001      	b.n	800be2c <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800be28:	1c63      	adds	r3, r4, #1
 800be2a:	d139      	bne.n	800bea0 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be2c:	6993      	ldr	r3, [r2, #24]
 800be2e:	0758      	lsls	r0, r3, #29
 800be30:	d5fa      	bpl.n	800be28 <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800be32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800be34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be36:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800be38:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800be3a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800be3c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800be3e:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800be40:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800be42:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800be44:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800be46:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800be48:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be4a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800be4c:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be4e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800be50:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be52:	b90b      	cbnz	r3, 800be58 <HAL_I2C_Mem_Read+0xec>
 800be54:	2a00      	cmp	r2, #0
 800be56:	d140      	bne.n	800beda <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800be58:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e1      	bne.n	800be24 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be60:	4632      	mov	r2, r6
 800be62:	4621      	mov	r1, r4
 800be64:	4628      	mov	r0, r5
 800be66:	f7ff fc59 	bl	800b71c <I2C_WaitOnSTOPFlagUntilTimeout>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d168      	bne.n	800bf40 <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be6e:	682b      	ldr	r3, [r5, #0]
 800be70:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800be72:	4c36      	ldr	r4, [pc, #216]	; (800bf4c <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be74:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	4022      	ands	r2, r4
 800be7a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800be7c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800be80:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be84:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800be88:	e003      	b.n	800be92 <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800be8a:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800be8e:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800be90:	646b      	str	r3, [r5, #68]	; 0x44
}
 800be92:	b003      	add	sp, #12
 800be94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800be98:	2002      	movs	r0, #2
}
 800be9a:	b003      	add	sp, #12
 800be9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bea0:	f7fb fe94 	bl	8007bcc <HAL_GetTick>
 800bea4:	1b80      	subs	r0, r0, r6
 800bea6:	4284      	cmp	r4, r0
 800bea8:	d301      	bcc.n	800beae <HAL_I2C_Mem_Read+0x142>
 800beaa:	2c00      	cmp	r4, #0
 800beac:	d1ba      	bne.n	800be24 <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800beae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800beb0:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800beb2:	2200      	movs	r2, #0
          return HAL_ERROR;
 800beb4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800beb6:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800beb8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bebc:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bebe:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bec2:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800bec6:	b003      	add	sp, #12
 800bec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800becc:	f7fb fe7e 	bl	8007bcc <HAL_GetTick>
 800bed0:	1b80      	subs	r0, r0, r6
 800bed2:	4284      	cmp	r4, r0
 800bed4:	d3eb      	bcc.n	800beae <HAL_I2C_Mem_Read+0x142>
 800bed6:	2c00      	cmp	r4, #0
 800bed8:	d0e9      	beq.n	800beae <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800beda:	682a      	ldr	r2, [r5, #0]
 800bedc:	e001      	b.n	800bee2 <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800bede:	1c61      	adds	r1, r4, #1
 800bee0:	d1f4      	bne.n	800becc <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bee2:	6993      	ldr	r3, [r2, #24]
 800bee4:	061b      	lsls	r3, r3, #24
 800bee6:	d5fa      	bpl.n	800bede <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bee8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800beea:	b29b      	uxth	r3, r3
 800beec:	2bff      	cmp	r3, #255	; 0xff
 800beee:	d90e      	bls.n	800bf0e <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bef0:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bef8:	22ff      	movs	r2, #255	; 0xff
 800befa:	4641      	mov	r1, r8
 800befc:	4628      	mov	r0, r5
 800befe:	9700      	str	r7, [sp, #0]
 800bf00:	f7ff fad8 	bl	800b4b4 <I2C_TransferConfig>
 800bf04:	e7a8      	b.n	800be58 <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800bf06:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800bf08:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800bf0c:	e7c1      	b.n	800be92 <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf0e:	9700      	str	r7, [sp, #0]
 800bf10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800bf14:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf16:	4641      	mov	r1, r8
 800bf18:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800bf1a:	b292      	uxth	r2, r2
 800bf1c:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf1e:	b2d2      	uxtb	r2, r2
 800bf20:	f7ff fac8 	bl	800b4b4 <I2C_TransferConfig>
 800bf24:	e798      	b.n	800be58 <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800bf26:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf28:	4641      	mov	r1, r8
 800bf2a:	4b07      	ldr	r3, [pc, #28]	; (800bf48 <HAL_I2C_Mem_Read+0x1dc>)
 800bf2c:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800bf2e:	b292      	uxth	r2, r2
 800bf30:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf32:	b2d2      	uxtb	r2, r2
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf3a:	f7ff fabb 	bl	800b4b4 <I2C_TransferConfig>
 800bf3e:	e76e      	b.n	800be1e <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800bf40:	2001      	movs	r0, #1
 800bf42:	e7a6      	b.n	800be92 <HAL_I2C_Mem_Read+0x126>
 800bf44:	0802bd88 	.word	0x0802bd88
 800bf48:	80002400 	.word	0x80002400
 800bf4c:	fe00e800 	.word	0xfe00e800

0800bf50 <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bf50:	4b23      	ldr	r3, [pc, #140]	; (800bfe0 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800bf52:	6802      	ldr	r2, [r0, #0]
{
 800bf54:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bf56:	4d23      	ldr	r5, [pc, #140]	; (800bfe4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800bf58:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bf5a:	4e23      	ldr	r6, [pc, #140]	; (800bfe8 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	bf18      	it	ne
 800bf60:	42aa      	cmpne	r2, r5
{
 800bf62:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bf64:	bf14      	ite	ne
 800bf66:	2301      	movne	r3, #1
 800bf68:	2300      	moveq	r3, #0
 800bf6a:	42b2      	cmp	r2, r6
 800bf6c:	bf0c      	ite	eq
 800bf6e:	2300      	moveq	r3, #0
 800bf70:	f003 0301 	andne.w	r3, r3, #1
 800bf74:	b113      	cbz	r3, 800bf7c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800bf76:	4b1d      	ldr	r3, [pc, #116]	; (800bfec <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d12c      	bne.n	800bfd6 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800bf7c:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800bf80:	d124      	bne.n	800bfcc <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf82:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800bf86:	2b20      	cmp	r3, #32
 800bf88:	b2de      	uxtb	r6, r3
 800bf8a:	d11d      	bne.n	800bfc8 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf8c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d019      	beq.n	800bfc8 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bf94:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800bf96:	2224      	movs	r2, #36	; 0x24
 800bf98:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	f022 0201 	bic.w	r2, r2, #1
 800bfa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bfaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bfac:	6819      	ldr	r1, [r3, #0]
 800bfae:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfb0:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800bfb2:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800bfb4:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	f042 0201 	orr.w	r2, r2, #1
 800bfbc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800bfbe:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800bfc2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800bfc6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800bfc8:	2002      	movs	r0, #2
}
 800bfca:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800bfcc:	215f      	movs	r1, #95	; 0x5f
 800bfce:	4808      	ldr	r0, [pc, #32]	; (800bff0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800bfd0:	f7f8 f8d4 	bl	800417c <assert_failed>
 800bfd4:	e7d5      	b.n	800bf82 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bfd6:	215e      	movs	r1, #94	; 0x5e
 800bfd8:	4805      	ldr	r0, [pc, #20]	; (800bff0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800bfda:	f7f8 f8cf 	bl	800417c <assert_failed>
 800bfde:	e7cd      	b.n	800bf7c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800bfe0:	40005400 	.word	0x40005400
 800bfe4:	40005800 	.word	0x40005800
 800bfe8:	40005c00 	.word	0x40005c00
 800bfec:	40006000 	.word	0x40006000
 800bff0:	0802bdc0 	.word	0x0802bdc0

0800bff4 <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bff4:	4b22      	ldr	r3, [pc, #136]	; (800c080 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800bff6:	6802      	ldr	r2, [r0, #0]
{
 800bff8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bffa:	4d22      	ldr	r5, [pc, #136]	; (800c084 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800bffc:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bffe:	4e22      	ldr	r6, [pc, #136]	; (800c088 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c000:	429a      	cmp	r2, r3
 800c002:	bf18      	it	ne
 800c004:	42aa      	cmpne	r2, r5
{
 800c006:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c008:	bf14      	ite	ne
 800c00a:	2301      	movne	r3, #1
 800c00c:	2300      	moveq	r3, #0
 800c00e:	42b2      	cmp	r2, r6
 800c010:	bf0c      	ite	eq
 800c012:	2300      	moveq	r3, #0
 800c014:	f003 0301 	andne.w	r3, r3, #1
 800c018:	b113      	cbz	r3, 800c020 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800c01a:	4b1c      	ldr	r3, [pc, #112]	; (800c08c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d12a      	bne.n	800c076 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800c020:	2d0f      	cmp	r5, #15
 800c022:	d823      	bhi.n	800c06c <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c024:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c028:	2b20      	cmp	r3, #32
 800c02a:	b2de      	uxtb	r6, r3
 800c02c:	d11c      	bne.n	800c068 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c02e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c032:	2b01      	cmp	r3, #1
 800c034:	d018      	beq.n	800c068 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c036:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c038:	2224      	movs	r2, #36	; 0x24
 800c03a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	f022 0201 	bic.w	r2, r2, #1
 800c044:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c046:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c048:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c04c:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c050:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800c052:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800c054:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	f042 0201 	orr.w	r2, r2, #1
 800c05c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c05e:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c062:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c066:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c068:	2002      	movs	r0, #2
}
 800c06a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800c06c:	218d      	movs	r1, #141	; 0x8d
 800c06e:	4808      	ldr	r0, [pc, #32]	; (800c090 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800c070:	f7f8 f884 	bl	800417c <assert_failed>
 800c074:	e7d6      	b.n	800c024 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c076:	218c      	movs	r1, #140	; 0x8c
 800c078:	4805      	ldr	r0, [pc, #20]	; (800c090 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800c07a:	f7f8 f87f 	bl	800417c <assert_failed>
 800c07e:	e7cf      	b.n	800c020 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800c080:	40005400 	.word	0x40005400
 800c084:	40005800 	.word	0x40005800
 800c088:	40005c00 	.word	0x40005c00
 800c08c:	40006000 	.word	0x40006000
 800c090:	0802bdc0 	.word	0x0802bdc0

0800c094 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c094:	2800      	cmp	r0, #0
 800c096:	d04c      	beq.n	800c132 <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800c098:	6802      	ldr	r2, [r0, #0]
{
 800c09a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800c09c:	4b26      	ldr	r3, [pc, #152]	; (800c138 <HAL_IWDG_Init+0xa4>)
 800c09e:	4604      	mov	r4, r0
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d003      	beq.n	800c0ac <HAL_IWDG_Init+0x18>
 800c0a4:	21b5      	movs	r1, #181	; 0xb5
 800c0a6:	4825      	ldr	r0, [pc, #148]	; (800c13c <HAL_IWDG_Init+0xa8>)
 800c0a8:	f7f8 f868 	bl	800417c <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800c0ac:	6863      	ldr	r3, [r4, #4]
 800c0ae:	2b06      	cmp	r3, #6
 800c0b0:	d835      	bhi.n	800c11e <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800c0b2:	68a3      	ldr	r3, [r4, #8]
 800c0b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b8:	d22c      	bcs.n	800c114 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800c0ba:	68e3      	ldr	r3, [r4, #12]
 800c0bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0c0:	d223      	bcs.n	800c10a <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c0c2:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c0c6:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c0c8:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800c0cc:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c0ce:	f245 5055 	movw	r0, #21845	; 0x5555
 800c0d2:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c0d4:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c0d6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c0d8:	f7fb fd78 	bl	8007bcc <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c0dc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c0de:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c0e0:	68da      	ldr	r2, [r3, #12]
 800c0e2:	0751      	lsls	r1, r2, #29
 800c0e4:	d00a      	beq.n	800c0fc <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c0e6:	f7fb fd71 	bl	8007bcc <HAL_GetTick>
 800c0ea:	1b43      	subs	r3, r0, r5
 800c0ec:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c0ee:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c0f0:	d9f6      	bls.n	800c0e0 <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c0f2:	68da      	ldr	r2, [r3, #12]
 800c0f4:	0752      	lsls	r2, r2, #29
 800c0f6:	d0f3      	beq.n	800c0e0 <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800c0f8:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800c0fa:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c0fc:	6919      	ldr	r1, [r3, #16]
 800c0fe:	68e2      	ldr	r2, [r4, #12]
 800c100:	4291      	cmp	r1, r2
 800c102:	d011      	beq.n	800c128 <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800c104:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c106:	611a      	str	r2, [r3, #16]
}
 800c108:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800c10a:	21b8      	movs	r1, #184	; 0xb8
 800c10c:	480b      	ldr	r0, [pc, #44]	; (800c13c <HAL_IWDG_Init+0xa8>)
 800c10e:	f7f8 f835 	bl	800417c <assert_failed>
 800c112:	e7d6      	b.n	800c0c2 <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800c114:	21b7      	movs	r1, #183	; 0xb7
 800c116:	4809      	ldr	r0, [pc, #36]	; (800c13c <HAL_IWDG_Init+0xa8>)
 800c118:	f7f8 f830 	bl	800417c <assert_failed>
 800c11c:	e7cd      	b.n	800c0ba <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800c11e:	21b6      	movs	r1, #182	; 0xb6
 800c120:	4806      	ldr	r0, [pc, #24]	; (800c13c <HAL_IWDG_Init+0xa8>)
 800c122:	f7f8 f82b 	bl	800417c <assert_failed>
 800c126:	e7c4      	b.n	800c0b2 <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c128:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800c12c:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c12e:	601a      	str	r2, [r3, #0]
}
 800c130:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c132:	2001      	movs	r0, #1
}
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	40003000 	.word	0x40003000
 800c13c:	0802bdfc 	.word	0x0802bdfc

0800c140 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c140:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c142:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800c146:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	601a      	str	r2, [r3, #0]
}
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop

0800c150 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c152:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c154:	2800      	cmp	r0, #0
 800c156:	f000 809d 	beq.w	800c294 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800c15a:	6804      	ldr	r4, [r0, #0]
 800c15c:	4605      	mov	r5, r0
 800c15e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800c162:	d003      	beq.n	800c16c <HAL_PCD_Init+0x1c>
 800c164:	4b4f      	ldr	r3, [pc, #316]	; (800c2a4 <HAL_PCD_Init+0x154>)
 800c166:	429c      	cmp	r4, r3
 800c168:	f040 8081 	bne.w	800c26e <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c16c:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800c170:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 8086 	beq.w	800c286 <HAL_PCD_Init+0x136>
 800c17a:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c17c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c17e:	462e      	mov	r6, r5
 800c180:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800c182:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c186:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c188:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c18a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800c18e:	bf08      	it	eq
 800c190:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800c192:	f006 fe87 	bl	8012ea4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c196:	f856 eb10 	ldr.w	lr, [r6], #16
 800c19a:	46b4      	mov	ip, r6
 800c19c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c1a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c1a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1a8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800c1ac:	e884 0003 	stmia.w	r4, {r0, r1}
 800c1b0:	4670      	mov	r0, lr
 800c1b2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800c1b6:	f006 fdb5 	bl	8012d24 <USB_CoreInit>
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	b130      	cbz	r0, 800c1cc <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800c1be:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c1c0:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800c1c2:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c1c4:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800c1c8:	b00b      	add	sp, #44	; 0x2c
 800c1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c1cc:	4601      	mov	r1, r0
 800c1ce:	6828      	ldr	r0, [r5, #0]
 800c1d0:	f006 fe70 	bl	8012eb4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1d4:	6868      	ldr	r0, [r5, #4]
 800c1d6:	b358      	cbz	r0, 800c230 <HAL_PCD_Init+0xe0>
 800c1d8:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800c1da:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c1de:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800c1e0:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1e4:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800c1e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800c1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c1f0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1f4:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800c1f8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1fc:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c1fe:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800c202:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c204:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c208:	d3ea      	bcc.n	800c1e0 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800c20a:	2200      	movs	r2, #0
 800c20c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c210:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800c212:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800c216:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c21a:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800c21c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c220:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c222:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c226:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c22a:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c22e:	d3ed      	bcc.n	800c20c <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c230:	466c      	mov	r4, sp
 800c232:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c236:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c23a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c23e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c242:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800c246:	6828      	ldr	r0, [r5, #0]
 800c248:	f006 feb8 	bl	8012fbc <USB_DevInit>
 800c24c:	4604      	mov	r4, r0
 800c24e:	2800      	cmp	r0, #0
 800c250:	d1b5      	bne.n	800c1be <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800c252:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800c254:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800c256:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800c25a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800c25c:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800c260:	d01c      	beq.n	800c29c <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800c262:	6828      	ldr	r0, [r5, #0]
 800c264:	f007 fa72 	bl	801374c <USB_DevDisconnect>
}
 800c268:	4620      	mov	r0, r4
 800c26a:	b00b      	add	sp, #44	; 0x2c
 800c26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800c26e:	2187      	movs	r1, #135	; 0x87
 800c270:	480d      	ldr	r0, [pc, #52]	; (800c2a8 <HAL_PCD_Init+0x158>)
 800c272:	f7f7 ff83 	bl	800417c <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c276:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800c27a:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c27c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c280:	2b00      	cmp	r3, #0
 800c282:	f47f af7a 	bne.w	800c17a <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800c286:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800c288:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800c28c:	f017 f86c 	bl	8023368 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800c290:	6828      	ldr	r0, [r5, #0]
 800c292:	e773      	b.n	800c17c <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800c294:	2401      	movs	r4, #1
}
 800c296:	4620      	mov	r0, r4
 800c298:	b00b      	add	sp, #44	; 0x2c
 800c29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c29c:	4628      	mov	r0, r5
 800c29e:	f000 fcc7 	bl	800cc30 <HAL_PCDEx_ActivateLPM>
 800c2a2:	e7de      	b.n	800c262 <HAL_PCD_Init+0x112>
 800c2a4:	40040000 	.word	0x40040000
 800c2a8:	0802be38 	.word	0x0802be38

0800c2ac <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800c2ac:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d00f      	beq.n	800c2d4 <HAL_PCD_Start+0x28>
 800c2b4:	2301      	movs	r3, #1
{
 800c2b6:	b510      	push	{r4, lr}
 800c2b8:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800c2ba:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800c2bc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800c2c0:	f006 fde8 	bl	8012e94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c2c4:	6820      	ldr	r0, [r4, #0]
 800c2c6:	f007 fa31 	bl	801372c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c2ca:	2300      	movs	r3, #0

  return HAL_OK;
 800c2cc:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c2ce:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c2d2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800c2d4:	2002      	movs	r0, #2
}
 800c2d6:	4770      	bx	lr

0800c2d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c2dc:	6807      	ldr	r7, [r0, #0]
{
 800c2de:	b089      	sub	sp, #36	; 0x24
 800c2e0:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c2e2:	4638      	mov	r0, r7
 800c2e4:	f007 fa70 	bl	80137c8 <USB_GetMode>
 800c2e8:	b110      	cbz	r0, 800c2f0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800c2ea:	b009      	add	sp, #36	; 0x24
 800c2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c2f0:	4683      	mov	fp, r0
 800c2f2:	6820      	ldr	r0, [r4, #0]
 800c2f4:	f007 fa3a 	bl	801376c <USB_ReadInterrupts>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d0f6      	beq.n	800c2ea <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c2fc:	6820      	ldr	r0, [r4, #0]
 800c2fe:	f007 fa35 	bl	801376c <USB_ReadInterrupts>
 800c302:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c306:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c308:	d003      	beq.n	800c312 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c30a:	6943      	ldr	r3, [r0, #20]
 800c30c:	f003 0302 	and.w	r3, r3, #2
 800c310:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c312:	f007 fa2b 	bl	801376c <USB_ReadInterrupts>
 800c316:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c31a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c31c:	d012      	beq.n	800c344 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c31e:	6983      	ldr	r3, [r0, #24]
 800c320:	f023 0310 	bic.w	r3, r3, #16
 800c324:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800c326:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c328:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c32c:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c330:	2b02      	cmp	r3, #2
 800c332:	f000 8253 	beq.w	800c7dc <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c336:	2b06      	cmp	r3, #6
 800c338:	f000 81b1 	beq.w	800c69e <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c33c:	6983      	ldr	r3, [r0, #24]
 800c33e:	f043 0310 	orr.w	r3, r3, #16
 800c342:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c344:	f007 fa12 	bl	801376c <USB_ReadInterrupts>
 800c348:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c34c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c34e:	f040 80cf 	bne.w	800c4f0 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c352:	f007 fa0b 	bl	801376c <USB_ReadInterrupts>
 800c356:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c35a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c35c:	d175      	bne.n	800c44a <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c35e:	f007 fa05 	bl	801376c <USB_ReadInterrupts>
 800c362:	2800      	cmp	r0, #0
 800c364:	db5d      	blt.n	800c422 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c366:	6820      	ldr	r0, [r4, #0]
 800c368:	f007 fa00 	bl	801376c <USB_ReadInterrupts>
 800c36c:	0500      	lsls	r0, r0, #20
 800c36e:	d44d      	bmi.n	800c40c <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c370:	6820      	ldr	r0, [r4, #0]
 800c372:	f007 f9fb 	bl	801376c <USB_ReadInterrupts>
 800c376:	0102      	lsls	r2, r0, #4
 800c378:	d514      	bpl.n	800c3a4 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c37a:	6822      	ldr	r2, [r4, #0]
 800c37c:	6953      	ldr	r3, [r2, #20]
 800c37e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c382:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800c384:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f040 8172 	bne.w	800c672 <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800c38e:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c390:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800c392:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c396:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c398:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800c39c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c3a0:	f017 f950 	bl	8023644 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c3a4:	6820      	ldr	r0, [r4, #0]
 800c3a6:	f007 f9e1 	bl	801376c <USB_ReadInterrupts>
 800c3aa:	04c3      	lsls	r3, r0, #19
 800c3ac:	f100 8116 	bmi.w	800c5dc <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c3b0:	6820      	ldr	r0, [r4, #0]
 800c3b2:	f007 f9db 	bl	801376c <USB_ReadInterrupts>
 800c3b6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800c3ba:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c3bc:	f040 80f7 	bne.w	800c5ae <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c3c0:	f007 f9d4 	bl	801376c <USB_ReadInterrupts>
 800c3c4:	0707      	lsls	r7, r0, #28
 800c3c6:	f100 80e9 	bmi.w	800c59c <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c3ca:	6820      	ldr	r0, [r4, #0]
 800c3cc:	f007 f9ce 	bl	801376c <USB_ReadInterrupts>
 800c3d0:	02c6      	lsls	r6, r0, #11
 800c3d2:	f100 80d9 	bmi.w	800c588 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c3d6:	6820      	ldr	r0, [r4, #0]
 800c3d8:	f007 f9c8 	bl	801376c <USB_ReadInterrupts>
 800c3dc:	0285      	lsls	r5, r0, #10
 800c3de:	f100 80c9 	bmi.w	800c574 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c3e2:	6820      	ldr	r0, [r4, #0]
 800c3e4:	f007 f9c2 	bl	801376c <USB_ReadInterrupts>
 800c3e8:	0040      	lsls	r0, r0, #1
 800c3ea:	f100 80ba 	bmi.w	800c562 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c3ee:	6820      	ldr	r0, [r4, #0]
 800c3f0:	f007 f9bc 	bl	801376c <USB_ReadInterrupts>
 800c3f4:	0741      	lsls	r1, r0, #29
 800c3f6:	f57f af78 	bpl.w	800c2ea <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c3fe:	076a      	lsls	r2, r5, #29
 800c400:	f100 820d 	bmi.w	800c81e <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800c404:	685a      	ldr	r2, [r3, #4]
 800c406:	432a      	orrs	r2, r5
 800c408:	605a      	str	r2, [r3, #4]
 800c40a:	e76e      	b.n	800c2ea <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c40c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800c410:	07d9      	lsls	r1, r3, #31
 800c412:	f100 8200 	bmi.w	800c816 <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c416:	6820      	ldr	r0, [r4, #0]
 800c418:	6943      	ldr	r3, [r0, #20]
 800c41a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c41e:	6143      	str	r3, [r0, #20]
 800c420:	e7a7      	b.n	800c372 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c422:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800c426:	f022 0201 	bic.w	r2, r2, #1
 800c42a:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800c42e:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800c432:	2b01      	cmp	r3, #1
 800c434:	f000 812c 	beq.w	800c690 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800c438:	4620      	mov	r0, r4
 800c43a:	f017 f831 	bl	80234a0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c43e:	6820      	ldr	r0, [r4, #0]
 800c440:	6943      	ldr	r3, [r0, #20]
 800c442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c446:	6143      	str	r3, [r0, #20]
 800c448:	e78e      	b.n	800c368 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c44a:	f007 f99b 	bl	8013784 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800c44e:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c450:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800c452:	f1b8 0f00 	cmp.w	r8, #0
 800c456:	d082      	beq.n	800c35e <HAL_PCD_IRQHandler+0x86>
 800c458:	4626      	mov	r6, r4
 800c45a:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800c45e:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c462:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800c466:	e009      	b.n	800c47c <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800c468:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800c46c:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800c470:	f106 061c 	add.w	r6, r6, #28
 800c474:	f109 0920 	add.w	r9, r9, #32
 800c478:	f000 8126 	beq.w	800c6c8 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c47c:	f018 0f01 	tst.w	r8, #1
 800c480:	d0f2      	beq.n	800c468 <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c482:	fa5f f78a 	uxtb.w	r7, sl
 800c486:	4639      	mov	r1, r7
 800c488:	f007 f98e 	bl	80137a8 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c48c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c48e:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c490:	d515      	bpl.n	800c4be <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c492:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c494:	f00a 030f 	and.w	r3, sl, #15
 800c498:	2201      	movs	r2, #1
 800c49a:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c49c:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800c4a0:	ea23 0302 	bic.w	r3, r3, r2
 800c4a4:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c4a8:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800c4aa:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c4ac:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800c4b0:	4299      	cmp	r1, r3
 800c4b2:	f000 81b9 	beq.w	800c828 <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f016 ffb5 	bl	8023428 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c4be:	0728      	lsls	r0, r5, #28
 800c4c0:	d502      	bpl.n	800c4c8 <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c4c2:	2308      	movs	r3, #8
 800c4c4:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c4c8:	06e9      	lsls	r1, r5, #27
 800c4ca:	d502      	bpl.n	800c4d2 <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c4cc:	2310      	movs	r3, #16
 800c4ce:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c4d2:	066a      	lsls	r2, r5, #25
 800c4d4:	d502      	bpl.n	800c4dc <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c4d6:	2340      	movs	r3, #64	; 0x40
 800c4d8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c4dc:	07ab      	lsls	r3, r5, #30
 800c4de:	d502      	bpl.n	800c4e6 <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c4e6:	062d      	lsls	r5, r5, #24
 800c4e8:	f100 80f1 	bmi.w	800c6ce <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c4ec:	6820      	ldr	r0, [r4, #0]
 800c4ee:	e7bb      	b.n	800c468 <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c4f0:	f007 f940 	bl	8013774 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800c4f4:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c4f6:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800c4f8:	2d00      	cmp	r5, #0
 800c4fa:	f43f af2a 	beq.w	800c352 <HAL_PCD_IRQHandler+0x7a>
 800c4fe:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800c502:	46a2      	mov	sl, r4
      epnum = 0U;
 800c504:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c508:	9703      	str	r7, [sp, #12]
 800c50a:	e008      	b.n	800c51e <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800c50c:	086d      	lsrs	r5, r5, #1
        epnum++;
 800c50e:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800c512:	f106 0620 	add.w	r6, r6, #32
 800c516:	f10a 0a1c 	add.w	sl, sl, #28
 800c51a:	f000 80d3 	beq.w	800c6c4 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800c51e:	07ef      	lsls	r7, r5, #31
 800c520:	d5f4      	bpl.n	800c50c <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c522:	fa5f f788 	uxtb.w	r7, r8
 800c526:	4639      	mov	r1, r7
 800c528:	f007 f934 	bl	8013794 <USB_ReadDevOutEPInterrupt>
 800c52c:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c52e:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c530:	f019 0f01 	tst.w	r9, #1
 800c534:	f040 8135 	bne.w	800c7a2 <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c538:	f019 0f08 	tst.w	r9, #8
 800c53c:	f040 8119 	bne.w	800c772 <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c540:	f019 0f10 	tst.w	r9, #16
 800c544:	d001      	beq.n	800c54a <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c546:	2310      	movs	r3, #16
 800c548:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c54a:	f019 0f20 	tst.w	r9, #32
 800c54e:	d001      	beq.n	800c554 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c550:	2320      	movs	r3, #32
 800c552:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c554:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800c558:	d0d8      	beq.n	800c50c <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c55a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c55e:	60b3      	str	r3, [r6, #8]
 800c560:	e7d4      	b.n	800c50c <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800c562:	4620      	mov	r0, r4
 800c564:	f016 ffa8 	bl	80234b8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c568:	6820      	ldr	r0, [r4, #0]
 800c56a:	6943      	ldr	r3, [r0, #20]
 800c56c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c570:	6143      	str	r3, [r0, #20]
 800c572:	e73d      	b.n	800c3f0 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c574:	4620      	mov	r0, r4
 800c576:	2100      	movs	r1, #0
 800c578:	f016 ff96 	bl	80234a8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c57c:	6820      	ldr	r0, [r4, #0]
 800c57e:	6943      	ldr	r3, [r0, #20]
 800c580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c584:	6143      	str	r3, [r0, #20]
 800c586:	e72d      	b.n	800c3e4 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c588:	4620      	mov	r0, r4
 800c58a:	2100      	movs	r1, #0
 800c58c:	f016 ff90 	bl	80234b0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c590:	6820      	ldr	r0, [r4, #0]
 800c592:	6943      	ldr	r3, [r0, #20]
 800c594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c598:	6143      	str	r3, [r0, #20]
 800c59a:	e71d      	b.n	800c3d8 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800c59c:	4620      	mov	r0, r4
 800c59e:	f016 ff4d 	bl	802343c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c5a2:	6820      	ldr	r0, [r4, #0]
 800c5a4:	6943      	ldr	r3, [r0, #20]
 800c5a6:	f003 0308 	and.w	r3, r3, #8
 800c5aa:	6143      	str	r3, [r0, #20]
 800c5ac:	e70e      	b.n	800c3cc <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800c5ae:	f007 f90f 	bl	80137d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c5b2:	6820      	ldr	r0, [r4, #0]
 800c5b4:	f006 fdc0 	bl	8013138 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c5b8:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c5ba:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c5bc:	f000 ff86 	bl	800d4cc <HAL_RCC_GetHCLKFreq>
 800c5c0:	7b22      	ldrb	r2, [r4, #12]
 800c5c2:	4601      	mov	r1, r0
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	f006 fbeb 	bl	8012da0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f016 ff3a 	bl	8023444 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c5d0:	6820      	ldr	r0, [r4, #0]
 800c5d2:	6943      	ldr	r3, [r0, #20]
 800c5d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5d8:	6143      	str	r3, [r0, #20]
 800c5da:	e6f1      	b.n	800c3c0 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c5dc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800c5e0:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c5e4:	2110      	movs	r1, #16
 800c5e6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c5e8:	f023 0301 	bic.w	r3, r3, #1
 800c5ec:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c5ee:	f006 fc97 	bl	8012f20 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5f2:	6860      	ldr	r0, [r4, #4]
 800c5f4:	b1e0      	cbz	r0, 800c630 <HAL_PCD_IRQHandler+0x358>
 800c5f6:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c5fa:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800c5fe:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c600:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c604:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c606:	3320      	adds	r3, #32
 800c608:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c60a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800c60e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c612:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c616:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800c61a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800c61e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c622:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800c626:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800c62a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c62e:	d1e6      	bne.n	800c5fe <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c630:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c632:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c634:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c638:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c63a:	b9f2      	cbnz	r2, 800c67a <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c63c:	696a      	ldr	r2, [r5, #20]
 800c63e:	f242 032b 	movw	r3, #8235	; 0x202b
 800c642:	4313      	orrs	r3, r2
 800c644:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c646:	692b      	ldr	r3, [r5, #16]
 800c648:	f043 030b 	orr.w	r3, r3, #11
 800c64c:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c64e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c652:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c656:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c658:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c65c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c65e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c662:	f007 f8cb 	bl	80137fc <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c666:	6820      	ldr	r0, [r4, #0]
 800c668:	6943      	ldr	r3, [r0, #20]
 800c66a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c66e:	6143      	str	r3, [r0, #20]
 800c670:	e69f      	b.n	800c3b2 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800c672:	4620      	mov	r0, r4
 800c674:	f016 fefc 	bl	8023470 <HAL_PCD_SuspendCallback>
 800c678:	e694      	b.n	800c3a4 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c67a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800c67e:	f043 030b 	orr.w	r3, r3, #11
 800c682:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c686:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c688:	f043 030b 	orr.w	r3, r3, #11
 800c68c:	646b      	str	r3, [r5, #68]	; 0x44
 800c68e:	e7de      	b.n	800c64e <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800c690:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c692:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800c694:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c698:	f016 ffd4 	bl	8023644 <HAL_PCDEx_LPM_Callback>
 800c69c:	e6cf      	b.n	800c43e <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c69e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c6a2:	2208      	movs	r2, #8
 800c6a4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f006 ffa9 	bl	8013600 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c6ae:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800c6b2:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c6b6:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c6b8:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800c6bc:	440b      	add	r3, r1
 800c6be:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800c6c2:	e63b      	b.n	800c33c <HAL_PCD_IRQHandler+0x64>
 800c6c4:	9f03      	ldr	r7, [sp, #12]
 800c6c6:	e644      	b.n	800c352 <HAL_PCD_IRQHandler+0x7a>
 800c6c8:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800c6cc:	e647      	b.n	800c35e <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800c6ce:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c6d2:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800c6d6:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c6d8:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800c6da:	f63f aec5 	bhi.w	800c468 <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c6de:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800c6e2:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6e4:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c6e8:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800c6ec:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800c6ee:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800c6f0:	428a      	cmp	r2, r1
 800c6f2:	bf28      	it	cs
 800c6f4:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c6f6:	9905      	ldr	r1, [sp, #20]
 800c6f8:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800c6fa:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c6fc:	b289      	uxth	r1, r1
 800c6fe:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800c702:	f0c0 80bc 	bcc.w	800c87e <HAL_PCD_IRQHandler+0x5a6>
 800c706:	f8cd 8018 	str.w	r8, [sp, #24]
 800c70a:	46a0      	mov	r8, r4
 800c70c:	9c05      	ldr	r4, [sp, #20]
 800c70e:	e01a      	b.n	800c746 <HAL_PCD_IRQHandler+0x46e>
 800c710:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c712:	463a      	mov	r2, r7
 800c714:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800c716:	4658      	mov	r0, fp
 800c718:	429d      	cmp	r5, r3
 800c71a:	bf28      	it	cs
 800c71c:	461d      	movcs	r5, r3
 800c71e:	f898 3010 	ldrb.w	r3, [r8, #16]
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	b2ab      	uxth	r3, r5
 800c726:	f006 ff55 	bl	80135d4 <USB_WritePacket>
    ep->xfer_buff  += len;
 800c72a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c72c:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800c72e:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c730:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800c732:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800c734:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800c736:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800c738:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c73a:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800c73e:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c740:	f0c0 8096 	bcc.w	800c870 <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c744:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800c746:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800c748:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c74c:	d3e0      	bcc.n	800c710 <HAL_PCD_IRQHandler+0x438>
 800c74e:	4644      	mov	r4, r8
 800c750:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c754:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c758:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c75a:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c75c:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c75e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c762:	f00a 030f 	and.w	r3, sl, #15
 800c766:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c768:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c76a:	ea23 0302 	bic.w	r3, r3, r2
 800c76e:	634b      	str	r3, [r1, #52]	; 0x34
 800c770:	e67a      	b.n	800c468 <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c772:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c774:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c778:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c77e:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c780:	485f      	ldr	r0, [pc, #380]	; (800c900 <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c782:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c784:	4282      	cmp	r2, r0
 800c786:	d961      	bls.n	800c84c <HAL_PCD_IRQHandler+0x574>
 800c788:	040a      	lsls	r2, r1, #16
 800c78a:	d502      	bpl.n	800c792 <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c78c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c790:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c792:	4620      	mov	r0, r4
 800c794:	f016 fe38 	bl	8023408 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c798:	6921      	ldr	r1, [r4, #16]
 800c79a:	2901      	cmp	r1, #1
 800c79c:	d07f      	beq.n	800c89e <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c79e:	6820      	ldr	r0, [r4, #0]
 800c7a0:	e6ce      	b.n	800c540 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c7a2:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800c7a4:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c7a6:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c7a8:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800c7ac:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c7ae:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c7b2:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800c7b6:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800c7b8:	d04d      	beq.n	800c856 <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c7ba:	4952      	ldr	r1, [pc, #328]	; (800c904 <HAL_PCD_IRQHandler+0x62c>)
 800c7bc:	458c      	cmp	ip, r1
 800c7be:	d062      	beq.n	800c886 <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c7c0:	f1b8 0f00 	cmp.w	r8, #0
 800c7c4:	d104      	bne.n	800c7d0 <HAL_PCD_IRQHandler+0x4f8>
 800c7c6:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800c7ca:	2a00      	cmp	r2, #0
 800c7cc:	f000 8092 	beq.w	800c8f4 <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	f016 fe1e 	bl	8023414 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7d8:	6820      	ldr	r0, [r4, #0]
 800c7da:	e6ad      	b.n	800c538 <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c7dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c7e0:	421d      	tst	r5, r3
 800c7e2:	f43f adab 	beq.w	800c33c <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c7e6:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c7ea:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c7f4:	4615      	mov	r5, r2
 800c7f6:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800c7fa:	f006 ff01 	bl	8013600 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c7fe:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c802:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c804:	442b      	add	r3, r5
 800c806:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c80a:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800c80e:	442b      	add	r3, r5
 800c810:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800c814:	e592      	b.n	800c33c <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800c816:	4620      	mov	r0, r4
 800c818:	f016 fe2a 	bl	8023470 <HAL_PCD_SuspendCallback>
 800c81c:	e5fb      	b.n	800c416 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800c81e:	4620      	mov	r0, r4
 800c820:	f016 fe4e 	bl	80234c0 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800c824:	6823      	ldr	r3, [r4, #0]
 800c826:	e5ed      	b.n	800c404 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c828:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800c82c:	4413      	add	r3, r2
 800c82e:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c830:	f1ba 0f00 	cmp.w	sl, #0
 800c834:	f47f ae3f 	bne.w	800c4b6 <HAL_PCD_IRQHandler+0x1de>
 800c838:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f47f ae3b 	bne.w	800c4b6 <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c840:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c844:	6820      	ldr	r0, [r4, #0]
 800c846:	f006 ffd9 	bl	80137fc <USB_EP0_OutStart>
 800c84a:	e634      	b.n	800c4b6 <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800c84c:	4620      	mov	r0, r4
 800c84e:	f016 fddb 	bl	8023408 <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c852:	6820      	ldr	r0, [r4, #0]
 800c854:	e674      	b.n	800c540 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c856:	0719      	lsls	r1, r3, #28
 800c858:	d51c      	bpl.n	800c894 <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c85a:	4929      	ldr	r1, [pc, #164]	; (800c900 <HAL_PCD_IRQHandler+0x628>)
 800c85c:	458c      	cmp	ip, r1
 800c85e:	f67f ae6b 	bls.w	800c538 <HAL_PCD_IRQHandler+0x260>
 800c862:	041f      	lsls	r7, r3, #16
 800c864:	f57f ae68 	bpl.w	800c538 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c86c:	6093      	str	r3, [r2, #8]
 800c86e:	e663      	b.n	800c538 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c870:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800c872:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c874:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c878:	f8d4 b000 	ldr.w	fp, [r4]
 800c87c:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800c87e:	42ab      	cmp	r3, r5
 800c880:	f4ff adf2 	bcc.w	800c468 <HAL_PCD_IRQHandler+0x190>
 800c884:	e768      	b.n	800c758 <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c886:	0419      	lsls	r1, r3, #16
 800c888:	d4ee      	bmi.n	800c868 <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c88a:	0699      	lsls	r1, r3, #26
 800c88c:	d5a0      	bpl.n	800c7d0 <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c88e:	2120      	movs	r1, #32
 800c890:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c892:	e79d      	b.n	800c7d0 <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c894:	0699      	lsls	r1, r3, #26
 800c896:	d508      	bpl.n	800c8aa <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c898:	2320      	movs	r3, #32
 800c89a:	6093      	str	r3, [r2, #8]
 800c89c:	e64c      	b.n	800c538 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c89e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c8a2:	6820      	ldr	r0, [r4, #0]
 800c8a4:	f006 ffaa 	bl	80137fc <USB_EP0_OutStart>
 800c8a8:	e779      	b.n	800c79e <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c8aa:	f013 0f28 	tst.w	r3, #40	; 0x28
 800c8ae:	f47f ae43 	bne.w	800c538 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c8b2:	4913      	ldr	r1, [pc, #76]	; (800c900 <HAL_PCD_IRQHandler+0x628>)
 800c8b4:	458c      	cmp	ip, r1
 800c8b6:	d901      	bls.n	800c8bc <HAL_PCD_IRQHandler+0x5e4>
 800c8b8:	041b      	lsls	r3, r3, #16
 800c8ba:	d4d5      	bmi.n	800c868 <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c8bc:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800c8be:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c8c2:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800c8c6:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800c8c8:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800c8cc:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800c8d0:	440a      	add	r2, r1
 800c8d2:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c8d6:	f1b8 0f00 	cmp.w	r8, #0
 800c8da:	f47f af79 	bne.w	800c7d0 <HAL_PCD_IRQHandler+0x4f8>
 800c8de:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800c8e2:	2a00      	cmp	r2, #0
 800c8e4:	f47f af74 	bne.w	800c7d0 <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c8e8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	f006 ff85 	bl	80137fc <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c8f2:	e76d      	b.n	800c7d0 <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c8f4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c8f8:	4641      	mov	r1, r8
 800c8fa:	f006 ff7f 	bl	80137fc <USB_EP0_OutStart>
 800c8fe:	e767      	b.n	800c7d0 <HAL_PCD_IRQHandler+0x4f8>
 800c900:	4f54300a 	.word	0x4f54300a
 800c904:	4f54310a 	.word	0x4f54310a

0800c908 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800c908:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800c90c:	2a01      	cmp	r2, #1
 800c90e:	d00e      	beq.n	800c92e <HAL_PCD_SetAddress+0x26>
 800c910:	2201      	movs	r2, #1
{
 800c912:	b510      	push	{r4, lr}
 800c914:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c916:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800c918:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800c91c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c920:	f006 fef2 	bl	8013708 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c924:	2300      	movs	r3, #0
  return HAL_OK;
 800c926:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c928:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c92c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800c92e:	2002      	movs	r0, #2
}
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop

0800c934 <HAL_PCD_EP_Open>:
{
 800c934:	b510      	push	{r4, lr}
 800c936:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800c93a:	0609      	lsls	r1, r1, #24
{
 800c93c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800c93e:	d427      	bmi.n	800c990 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c940:	f04f 0c1c 	mov.w	ip, #28
 800c944:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800c948:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800c94c:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800c950:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800c954:	2000      	movs	r0, #0
 800c956:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800c95a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800c95c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c95e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800c962:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800c964:	b10a      	cbz	r2, 800c96a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800c966:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d101      	bne.n	800c972 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800c972:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800c976:	2b01      	cmp	r3, #1
 800c978:	d018      	beq.n	800c9ac <HAL_PCD_EP_Open+0x78>
 800c97a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c97c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c97e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c982:	f006 fbe5 	bl	8013150 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c986:	2300      	movs	r3, #0
  return ret;
 800c988:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c98a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c98e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c990:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800c992:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c996:	fb00 400e 	mla	r0, r0, lr, r4
 800c99a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800c99e:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800c9a2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800c9a6:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800c9aa:	e7d6      	b.n	800c95a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800c9ac:	2002      	movs	r0, #2
}
 800c9ae:	bd10      	pop	{r4, pc}

0800c9b0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800c9b0:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c9b4:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c9b8:	f04f 011c 	mov.w	r1, #28
{
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800c9c0:	d11a      	bne.n	800c9f8 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c9c2:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800c9c6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800c9ca:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c9cc:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800c9d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c9d4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c9d8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800c9da:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d019      	beq.n	800ca16 <HAL_PCD_EP_Close+0x66>
 800c9e2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c9e4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c9e6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c9ea:	f006 fbf9 	bl	80131e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c9ee:	2300      	movs	r3, #0
  return HAL_OK;
 800c9f0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c9f2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c9f6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c9f8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800c9fc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800ca00:	2001      	movs	r0, #1
 800ca02:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca06:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800ca08:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ca0c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800ca0e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d1e5      	bne.n	800c9e2 <HAL_PCD_EP_Close+0x32>
 800ca16:	2002      	movs	r0, #2
}
 800ca18:	bd10      	pop	{r4, pc}
 800ca1a:	bf00      	nop

0800ca1c <HAL_PCD_EP_Receive>:
{
 800ca1c:	b510      	push	{r4, lr}
 800ca1e:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ca22:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800ca24:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ca28:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800ca2c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ca30:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800ca34:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800ca38:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800ca3a:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca3e:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800ca42:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800ca46:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800ca4a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca4c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800ca4e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800ca50:	bf08      	it	eq
 800ca52:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca56:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ca58:	b91c      	cbnz	r4, 800ca62 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca5a:	f006 fd37 	bl	80134cc <USB_EP0StartXfer>
}
 800ca5e:	2000      	movs	r0, #0
 800ca60:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca62:	f006 fc1b 	bl	801329c <USB_EPStartXfer>
}
 800ca66:	2000      	movs	r0, #0
 800ca68:	bd10      	pop	{r4, pc}
 800ca6a:	bf00      	nop

0800ca6c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ca6c:	f001 010f 	and.w	r1, r1, #15
 800ca70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ca74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800ca78:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop

0800ca80 <HAL_PCD_EP_Transmit>:
{
 800ca80:	b510      	push	{r4, lr}
 800ca82:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca86:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800ca88:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca8c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800ca90:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca94:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800ca96:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800ca9a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800ca9c:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800caa0:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800caa4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800caa6:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800caaa:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800caae:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cab0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800cab2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800cab4:	bf08      	it	eq
 800cab6:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800caba:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cabc:	b91c      	cbnz	r4, 800cac6 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cabe:	f006 fd05 	bl	80134cc <USB_EP0StartXfer>
}
 800cac2:	2000      	movs	r0, #0
 800cac4:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cac6:	f006 fbe9 	bl	801329c <USB_EPStartXfer>
}
 800caca:	2000      	movs	r0, #0
 800cacc:	bd10      	pop	{r4, pc}
 800cace:	bf00      	nop

0800cad0 <HAL_PCD_EP_SetStall>:
{
 800cad0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cad2:	6843      	ldr	r3, [r0, #4]
 800cad4:	f001 050f 	and.w	r5, r1, #15
 800cad8:	429d      	cmp	r5, r3
 800cada:	d834      	bhi.n	800cb46 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800cadc:	060b      	lsls	r3, r1, #24
 800cade:	4604      	mov	r4, r0
 800cae0:	d41d      	bmi.n	800cb1e <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800cae2:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800cae4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800cae8:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800caec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800caf0:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800caf2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800caf6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800cafa:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800cafc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800cafe:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800cb00:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d01c      	beq.n	800cb42 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cb08:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800cb0a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cb0e:	f006 fd9b 	bl	8013648 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cb12:	b1d5      	cbz	r5, 800cb4a <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800cb14:	2300      	movs	r3, #0
  return HAL_OK;
 800cb16:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800cb18:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800cb1c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb1e:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800cb20:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800cb24:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb26:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800cb2a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb2e:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800cb30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800cb34:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb36:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800cb38:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800cb3a:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d1e2      	bne.n	800cb08 <HAL_PCD_EP_SetStall+0x38>
 800cb42:	2002      	movs	r0, #2
}
 800cb44:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800cb46:	2001      	movs	r0, #1
}
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cb4a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cb4e:	7c21      	ldrb	r1, [r4, #16]
 800cb50:	6820      	ldr	r0, [r4, #0]
 800cb52:	f006 fe53 	bl	80137fc <USB_EP0_OutStart>
 800cb56:	e7dd      	b.n	800cb14 <HAL_PCD_EP_SetStall+0x44>

0800cb58 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cb58:	6842      	ldr	r2, [r0, #4]
{
 800cb5a:	b538      	push	{r3, r4, r5, lr}
 800cb5c:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d832      	bhi.n	800cbca <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800cb64:	f011 0f80 	tst.w	r1, #128	; 0x80
 800cb68:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb6a:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800cb6e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800cb72:	d119      	bne.n	800cba8 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb74:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800cb78:	2000      	movs	r0, #0
 800cb7a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800cb7e:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb80:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800cb84:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb88:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800cb8a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800cb8c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d018      	beq.n	800cbc6 <HAL_PCD_EP_ClrStall+0x6e>
 800cb94:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cb96:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800cb98:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cb9c:	f006 fd88 	bl	80136b0 <USB_EPClearStall>
  return HAL_OK;
 800cba0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800cba2:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800cba6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cba8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800cbac:	2001      	movs	r0, #1
 800cbae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800cbb2:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cbb4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800cbb6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800cbba:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800cbbc:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800cbbe:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d1e6      	bne.n	800cb94 <HAL_PCD_EP_ClrStall+0x3c>
 800cbc6:	2002      	movs	r0, #2
}
 800cbc8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800cbca:	2001      	movs	r0, #1
}
 800cbcc:	bd38      	pop	{r3, r4, r5, pc}
 800cbce:	bf00      	nop

0800cbd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cbd0:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cbd2:	6804      	ldr	r4, [r0, #0]
 800cbd4:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800cbd6:	b931      	cbnz	r1, 800cbe6 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800cbd8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800cbdc:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800cbde:	2000      	movs	r0, #0
 800cbe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbe4:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cbe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800cbe8:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cbec:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800cbf0:	d00b      	beq.n	800cc0a <HAL_PCDEx_SetTxFiFo+0x3a>
 800cbf2:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cbf4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800cbf8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cbfa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800cbfe:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cc00:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800cc02:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cc04:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800cc08:	d3f4      	bcc.n	800cbf4 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cc0a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800cc0e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800cc12:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800cc16:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cc1a:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800cc1e:	2000      	movs	r0, #0
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop

0800cc24 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800cc24:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800cc26:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	6259      	str	r1, [r3, #36]	; 0x24
}
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop

0800cc30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cc30:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800cc32:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800cc36:	4909      	ldr	r1, [pc, #36]	; (800cc5c <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc38:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800cc3a:	4660      	mov	r0, ip
{
 800cc3c:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800cc3e:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800cc40:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800cc44:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800cc48:	6993      	ldr	r3, [r2, #24]
}
 800cc4a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800cc4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc52:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800cc54:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cc56:	4319      	orrs	r1, r3
 800cc58:	6551      	str	r1, [r2, #84]	; 0x54
}
 800cc5a:	4770      	bx	lr
 800cc5c:	10000003 	.word	0x10000003

0800cc60 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cc60:	4a02      	ldr	r2, [pc, #8]	; (800cc6c <HAL_PWR_EnableBkUpAccess+0xc>)
 800cc62:	6813      	ldr	r3, [r2, #0]
 800cc64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc68:	6013      	str	r3, [r2, #0]
}
 800cc6a:	4770      	bx	lr
 800cc6c:	40007000 	.word	0x40007000

0800cc70 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800cc70:	4b1a      	ldr	r3, [pc, #104]	; (800ccdc <HAL_PWREx_EnableOverDrive+0x6c>)
 800cc72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800cc78:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800cc7a:	641a      	str	r2, [r3, #64]	; 0x40
{
 800cc7c:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800cc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800cc80:	4c17      	ldr	r4, [pc, #92]	; (800cce0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800cc82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc86:	9301      	str	r3, [sp, #4]
 800cc88:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc90:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cc92:	f7fa ff9b 	bl	8007bcc <HAL_GetTick>
 800cc96:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cc98:	e005      	b.n	800cca6 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cc9a:	f7fa ff97 	bl	8007bcc <HAL_GetTick>
 800cc9e:	1b40      	subs	r0, r0, r5
 800cca0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cca4:	d817      	bhi.n	800ccd6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cca6:	6863      	ldr	r3, [r4, #4]
 800cca8:	03da      	lsls	r2, r3, #15
 800ccaa:	d5f6      	bpl.n	800cc9a <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ccac:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ccae:	4d0c      	ldr	r5, [pc, #48]	; (800cce0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ccb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccb4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800ccb6:	f7fa ff89 	bl	8007bcc <HAL_GetTick>
 800ccba:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ccbc:	e005      	b.n	800ccca <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ccbe:	f7fa ff85 	bl	8007bcc <HAL_GetTick>
 800ccc2:	1b00      	subs	r0, r0, r4
 800ccc4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ccc8:	d805      	bhi.n	800ccd6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ccca:	686b      	ldr	r3, [r5, #4]
 800cccc:	039b      	lsls	r3, r3, #14
 800ccce:	d5f6      	bpl.n	800ccbe <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800ccd0:	2000      	movs	r0, #0
}
 800ccd2:	b003      	add	sp, #12
 800ccd4:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800ccd6:	2003      	movs	r0, #3
}
 800ccd8:	b003      	add	sp, #12
 800ccda:	bd30      	pop	{r4, r5, pc}
 800ccdc:	40023800 	.word	0x40023800
 800cce0:	40007000 	.word	0x40007000

0800cce4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cce4:	2800      	cmp	r0, #0
 800cce6:	f000 828c 	beq.w	800d202 <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800ccea:	6803      	ldr	r3, [r0, #0]
 800ccec:	2b0f      	cmp	r3, #15
{
 800ccee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800ccf6:	f200 8123 	bhi.w	800cf40 <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ccfa:	07dd      	lsls	r5, r3, #31
 800ccfc:	d534      	bpl.n	800cd68 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800ccfe:	6863      	ldr	r3, [r4, #4]
 800cd00:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800cd04:	d003      	beq.n	800cd0e <HAL_RCC_OscConfig+0x2a>
 800cd06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd0a:	f040 8175 	bne.w	800cff8 <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cd0e:	4aa3      	ldr	r2, [pc, #652]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
 800cd10:	6893      	ldr	r3, [r2, #8]
 800cd12:	f003 030c 	and.w	r3, r3, #12
 800cd16:	2b04      	cmp	r3, #4
 800cd18:	d01d      	beq.n	800cd56 <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd1a:	6893      	ldr	r3, [r2, #8]
 800cd1c:	f003 030c 	and.w	r3, r3, #12
 800cd20:	2b08      	cmp	r3, #8
 800cd22:	d015      	beq.n	800cd50 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd24:	6863      	ldr	r3, [r4, #4]
 800cd26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd2a:	f000 816b 	beq.w	800d004 <HAL_RCC_OscConfig+0x320>
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f000 819c 	beq.w	800d06c <HAL_RCC_OscConfig+0x388>
 800cd34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd38:	4b98      	ldr	r3, [pc, #608]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	f000 822d 	beq.w	800d19a <HAL_RCC_OscConfig+0x4b6>
 800cd40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cd44:	601a      	str	r2, [r3, #0]
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cd4c:	601a      	str	r2, [r3, #0]
 800cd4e:	e15e      	b.n	800d00e <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd50:	6853      	ldr	r3, [r2, #4]
 800cd52:	0258      	lsls	r0, r3, #9
 800cd54:	d5e6      	bpl.n	800cd24 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd56:	4b91      	ldr	r3, [pc, #580]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	0399      	lsls	r1, r3, #14
 800cd5c:	d503      	bpl.n	800cd66 <HAL_RCC_OscConfig+0x82>
 800cd5e:	6863      	ldr	r3, [r4, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 80ff 	beq.w	800cf64 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd66:	6823      	ldr	r3, [r4, #0]
 800cd68:	079f      	lsls	r7, r3, #30
 800cd6a:	d531      	bpl.n	800cdd0 <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800cd6c:	68e3      	ldr	r3, [r4, #12]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	f200 80fc 	bhi.w	800cf6c <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800cd74:	6923      	ldr	r3, [r4, #16]
 800cd76:	2b1f      	cmp	r3, #31
 800cd78:	f200 8101 	bhi.w	800cf7e <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cd7c:	4b87      	ldr	r3, [pc, #540]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
 800cd7e:	689a      	ldr	r2, [r3, #8]
 800cd80:	f012 0f0c 	tst.w	r2, #12
 800cd84:	f000 80e7 	beq.w	800cf56 <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cd88:	689a      	ldr	r2, [r3, #8]
 800cd8a:	f002 020c 	and.w	r2, r2, #12
 800cd8e:	2a08      	cmp	r2, #8
 800cd90:	f000 80dd 	beq.w	800cf4e <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cd94:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cd96:	4d81      	ldr	r5, [pc, #516]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 819d 	beq.w	800d0d8 <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800cd9e:	682b      	ldr	r3, [r5, #0]
 800cda0:	f043 0301 	orr.w	r3, r3, #1
 800cda4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cda6:	f7fa ff11 	bl	8007bcc <HAL_GetTick>
 800cdaa:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cdac:	e005      	b.n	800cdba <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cdae:	f7fa ff0d 	bl	8007bcc <HAL_GetTick>
 800cdb2:	1b80      	subs	r0, r0, r6
 800cdb4:	2802      	cmp	r0, #2
 800cdb6:	f200 8155 	bhi.w	800d064 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cdba:	682b      	ldr	r3, [r5, #0]
 800cdbc:	0798      	lsls	r0, r3, #30
 800cdbe:	d5f6      	bpl.n	800cdae <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	6922      	ldr	r2, [r4, #16]
 800cdc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cdc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800cdcc:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	071a      	lsls	r2, r3, #28
 800cdd2:	d42a      	bmi.n	800ce2a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cdd4:	075e      	lsls	r6, r3, #29
 800cdd6:	d544      	bpl.n	800ce62 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800cdd8:	68a3      	ldr	r3, [r4, #8]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d906      	bls.n	800cdec <HAL_RCC_OscConfig+0x108>
 800cdde:	2b05      	cmp	r3, #5
 800cde0:	d004      	beq.n	800cdec <HAL_RCC_OscConfig+0x108>
 800cde2:	f240 2106 	movw	r1, #518	; 0x206
 800cde6:	486e      	ldr	r0, [pc, #440]	; (800cfa0 <HAL_RCC_OscConfig+0x2bc>)
 800cde8:	f7f7 f9c8 	bl	800417c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cdec:	4b6b      	ldr	r3, [pc, #428]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
 800cdee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cdf0:	00d5      	lsls	r5, r2, #3
 800cdf2:	f140 80ec 	bpl.w	800cfce <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800cdf6:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cdf8:	4e6a      	ldr	r6, [pc, #424]	; (800cfa4 <HAL_RCC_OscConfig+0x2c0>)
 800cdfa:	6833      	ldr	r3, [r6, #0]
 800cdfc:	05d8      	lsls	r0, r3, #23
 800cdfe:	f140 8121 	bpl.w	800d044 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce02:	68a3      	ldr	r3, [r4, #8]
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	f000 8179 	beq.w	800d0fc <HAL_RCC_OscConfig+0x418>
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f000 8144 	beq.w	800d098 <HAL_RCC_OscConfig+0x3b4>
 800ce10:	2b05      	cmp	r3, #5
 800ce12:	4b62      	ldr	r3, [pc, #392]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
 800ce14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ce16:	f000 81c8 	beq.w	800d1aa <HAL_RCC_OscConfig+0x4c6>
 800ce1a:	f022 0201 	bic.w	r2, r2, #1
 800ce1e:	671a      	str	r2, [r3, #112]	; 0x70
 800ce20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ce22:	f022 0204 	bic.w	r2, r2, #4
 800ce26:	671a      	str	r2, [r3, #112]	; 0x70
 800ce28:	e16d      	b.n	800d106 <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800ce2a:	6963      	ldr	r3, [r4, #20]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	f200 80c4 	bhi.w	800cfba <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800ce32:	4d5a      	ldr	r5, [pc, #360]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f000 80a8 	beq.w	800cf8a <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800ce3a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ce3c:	f043 0301 	orr.w	r3, r3, #1
 800ce40:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ce42:	f7fa fec3 	bl	8007bcc <HAL_GetTick>
 800ce46:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce48:	e005      	b.n	800ce56 <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce4a:	f7fa febf 	bl	8007bcc <HAL_GetTick>
 800ce4e:	1b80      	subs	r0, r0, r6
 800ce50:	2802      	cmp	r0, #2
 800ce52:	f200 8107 	bhi.w	800d064 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce56:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ce58:	079b      	lsls	r3, r3, #30
 800ce5a:	d5f6      	bpl.n	800ce4a <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce5c:	6823      	ldr	r3, [r4, #0]
 800ce5e:	075e      	lsls	r6, r3, #29
 800ce60:	d4ba      	bmi.n	800cdd8 <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800ce62:	69a0      	ldr	r0, [r4, #24]
 800ce64:	2802      	cmp	r0, #2
 800ce66:	f200 80bd 	bhi.w	800cfe4 <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d064      	beq.n	800cf38 <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ce6e:	4d4b      	ldr	r5, [pc, #300]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
 800ce70:	68ab      	ldr	r3, [r5, #8]
 800ce72:	f003 030c 	and.w	r3, r3, #12
 800ce76:	2b08      	cmp	r3, #8
 800ce78:	f000 8158 	beq.w	800d12c <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ce7c:	2802      	cmp	r0, #2
 800ce7e:	f040 81ae 	bne.w	800d1de <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800ce82:	69e3      	ldr	r3, [r4, #28]
 800ce84:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800ce88:	f040 81a3 	bne.w	800d1d2 <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800ce8c:	6a23      	ldr	r3, [r4, #32]
 800ce8e:	3b02      	subs	r3, #2
 800ce90:	2b3d      	cmp	r3, #61	; 0x3d
 800ce92:	f200 8198 	bhi.w	800d1c6 <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800ce96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce98:	3b32      	subs	r3, #50	; 0x32
 800ce9a:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800ce9e:	f200 818c 	bhi.w	800d1ba <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800cea2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cea4:	2b08      	cmp	r3, #8
 800cea6:	f200 8172 	bhi.w	800d18e <HAL_RCC_OscConfig+0x4aa>
 800ceaa:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800ceae:	fa22 f303 	lsr.w	r3, r2, r3
 800ceb2:	07d8      	lsls	r0, r3, #31
 800ceb4:	f140 816b 	bpl.w	800d18e <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800ceb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ceba:	3b02      	subs	r3, #2
 800cebc:	2b0d      	cmp	r3, #13
 800cebe:	f200 81a8 	bhi.w	800d212 <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800cec2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cec4:	3b02      	subs	r3, #2
 800cec6:	2b05      	cmp	r3, #5
 800cec8:	f200 819d 	bhi.w	800d206 <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cecc:	4d33      	ldr	r5, [pc, #204]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
 800cece:	682b      	ldr	r3, [r5, #0]
 800ced0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ced4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ced6:	f7fa fe79 	bl	8007bcc <HAL_GetTick>
 800ceda:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cedc:	e005      	b.n	800ceea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cede:	f7fa fe75 	bl	8007bcc <HAL_GetTick>
 800cee2:	1b80      	subs	r0, r0, r6
 800cee4:	2802      	cmp	r0, #2
 800cee6:	f200 80bd 	bhi.w	800d064 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ceea:	682b      	ldr	r3, [r5, #0]
 800ceec:	0199      	lsls	r1, r3, #6
 800ceee:	d4f6      	bmi.n	800cede <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cef0:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800cef4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cef6:	430b      	orrs	r3, r1
 800cef8:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cefa:	4e28      	ldr	r6, [pc, #160]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cefc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800cf00:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800cf04:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800cf08:	0852      	lsrs	r2, r2, #1
 800cf0a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800cf0e:	3a01      	subs	r2, #1
 800cf10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf14:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800cf16:	682b      	ldr	r3, [r5, #0]
 800cf18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800cf1e:	f7fa fe55 	bl	8007bcc <HAL_GetTick>
 800cf22:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf24:	e005      	b.n	800cf32 <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf26:	f7fa fe51 	bl	8007bcc <HAL_GetTick>
 800cf2a:	1b00      	subs	r0, r0, r4
 800cf2c:	2802      	cmp	r0, #2
 800cf2e:	f200 8099 	bhi.w	800d064 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf32:	6833      	ldr	r3, [r6, #0]
 800cf34:	019a      	lsls	r2, r3, #6
 800cf36:	d5f6      	bpl.n	800cf26 <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800cf38:	2000      	movs	r0, #0
}
 800cf3a:	b002      	add	sp, #8
 800cf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800cf40:	f240 1163 	movw	r1, #355	; 0x163
 800cf44:	4816      	ldr	r0, [pc, #88]	; (800cfa0 <HAL_RCC_OscConfig+0x2bc>)
 800cf46:	f7f7 f919 	bl	800417c <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	e6d5      	b.n	800ccfa <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	025e      	lsls	r6, r3, #9
 800cf52:	f53f af1f 	bmi.w	800cd94 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf56:	4b11      	ldr	r3, [pc, #68]	; (800cf9c <HAL_RCC_OscConfig+0x2b8>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	079d      	lsls	r5, r3, #30
 800cf5c:	d565      	bpl.n	800d02a <HAL_RCC_OscConfig+0x346>
 800cf5e:	68e3      	ldr	r3, [r4, #12]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d062      	beq.n	800d02a <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800cf64:	2001      	movs	r0, #1
}
 800cf66:	b002      	add	sp, #8
 800cf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800cf6c:	f240 119b 	movw	r1, #411	; 0x19b
 800cf70:	480b      	ldr	r0, [pc, #44]	; (800cfa0 <HAL_RCC_OscConfig+0x2bc>)
 800cf72:	f7f7 f903 	bl	800417c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800cf76:	6923      	ldr	r3, [r4, #16]
 800cf78:	2b1f      	cmp	r3, #31
 800cf7a:	f67f aeff 	bls.w	800cd7c <HAL_RCC_OscConfig+0x98>
 800cf7e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800cf82:	4807      	ldr	r0, [pc, #28]	; (800cfa0 <HAL_RCC_OscConfig+0x2bc>)
 800cf84:	f7f7 f8fa 	bl	800417c <assert_failed>
 800cf88:	e6f8      	b.n	800cd7c <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800cf8a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800cf8c:	f023 0301 	bic.w	r3, r3, #1
 800cf90:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800cf92:	f7fa fe1b 	bl	8007bcc <HAL_GetTick>
 800cf96:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf98:	e00b      	b.n	800cfb2 <HAL_RCC_OscConfig+0x2ce>
 800cf9a:	bf00      	nop
 800cf9c:	40023800 	.word	0x40023800
 800cfa0:	0802be70 	.word	0x0802be70
 800cfa4:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfa8:	f7fa fe10 	bl	8007bcc <HAL_GetTick>
 800cfac:	1b80      	subs	r0, r0, r6
 800cfae:	2802      	cmp	r0, #2
 800cfb0:	d858      	bhi.n	800d064 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cfb2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800cfb4:	079f      	lsls	r7, r3, #30
 800cfb6:	d4f7      	bmi.n	800cfa8 <HAL_RCC_OscConfig+0x2c4>
 800cfb8:	e750      	b.n	800ce5c <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800cfba:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800cfbe:	4898      	ldr	r0, [pc, #608]	; (800d220 <HAL_RCC_OscConfig+0x53c>)
 800cfc0:	f7f7 f8dc 	bl	800417c <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cfc4:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800cfc6:	4d97      	ldr	r5, [pc, #604]	; (800d224 <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d0de      	beq.n	800cf8a <HAL_RCC_OscConfig+0x2a6>
 800cfcc:	e735      	b.n	800ce3a <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800cfce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800cfd0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800cfd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cfd6:	641a      	str	r2, [r3, #64]	; 0x40
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfde:	9301      	str	r3, [sp, #4]
 800cfe0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800cfe2:	e709      	b.n	800cdf8 <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800cfe4:	488e      	ldr	r0, [pc, #568]	; (800d220 <HAL_RCC_OscConfig+0x53c>)
 800cfe6:	f240 214a 	movw	r1, #586	; 0x24a
 800cfea:	f7f7 f8c7 	bl	800417c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cfee:	69a0      	ldr	r0, [r4, #24]
 800cff0:	2800      	cmp	r0, #0
 800cff2:	f47f af3c 	bne.w	800ce6e <HAL_RCC_OscConfig+0x18a>
 800cff6:	e79f      	b.n	800cf38 <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800cff8:	f240 1169 	movw	r1, #361	; 0x169
 800cffc:	4888      	ldr	r0, [pc, #544]	; (800d220 <HAL_RCC_OscConfig+0x53c>)
 800cffe:	f7f7 f8bd 	bl	800417c <assert_failed>
 800d002:	e684      	b.n	800cd0e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d004:	4a87      	ldr	r2, [pc, #540]	; (800d224 <HAL_RCC_OscConfig+0x540>)
 800d006:	6813      	ldr	r3, [r2, #0]
 800d008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d00c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800d00e:	f7fa fddd 	bl	8007bcc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d012:	4e84      	ldr	r6, [pc, #528]	; (800d224 <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800d014:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d016:	e004      	b.n	800d022 <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d018:	f7fa fdd8 	bl	8007bcc <HAL_GetTick>
 800d01c:	1b40      	subs	r0, r0, r5
 800d01e:	2864      	cmp	r0, #100	; 0x64
 800d020:	d820      	bhi.n	800d064 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d022:	6833      	ldr	r3, [r6, #0]
 800d024:	039a      	lsls	r2, r3, #14
 800d026:	d5f7      	bpl.n	800d018 <HAL_RCC_OscConfig+0x334>
 800d028:	e69d      	b.n	800cd66 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d02a:	4a7e      	ldr	r2, [pc, #504]	; (800d224 <HAL_RCC_OscConfig+0x540>)
 800d02c:	6921      	ldr	r1, [r4, #16]
 800d02e:	6813      	ldr	r3, [r2, #0]
 800d030:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d034:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d038:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d03a:	6823      	ldr	r3, [r4, #0]
 800d03c:	071a      	lsls	r2, r3, #28
 800d03e:	f57f aec9 	bpl.w	800cdd4 <HAL_RCC_OscConfig+0xf0>
 800d042:	e6f2      	b.n	800ce2a <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800d044:	6833      	ldr	r3, [r6, #0]
 800d046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d04a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800d04c:	f7fa fdbe 	bl	8007bcc <HAL_GetTick>
 800d050:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d052:	6833      	ldr	r3, [r6, #0]
 800d054:	05d9      	lsls	r1, r3, #23
 800d056:	f53f aed4 	bmi.w	800ce02 <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d05a:	f7fa fdb7 	bl	8007bcc <HAL_GetTick>
 800d05e:	1bc0      	subs	r0, r0, r7
 800d060:	2864      	cmp	r0, #100	; 0x64
 800d062:	d9f6      	bls.n	800d052 <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800d064:	2003      	movs	r0, #3
}
 800d066:	b002      	add	sp, #8
 800d068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d06c:	4d6d      	ldr	r5, [pc, #436]	; (800d224 <HAL_RCC_OscConfig+0x540>)
 800d06e:	682b      	ldr	r3, [r5, #0]
 800d070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d074:	602b      	str	r3, [r5, #0]
 800d076:	682b      	ldr	r3, [r5, #0]
 800d078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d07c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d07e:	f7fa fda5 	bl	8007bcc <HAL_GetTick>
 800d082:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d084:	e004      	b.n	800d090 <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d086:	f7fa fda1 	bl	8007bcc <HAL_GetTick>
 800d08a:	1b80      	subs	r0, r0, r6
 800d08c:	2864      	cmp	r0, #100	; 0x64
 800d08e:	d8e9      	bhi.n	800d064 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d090:	682b      	ldr	r3, [r5, #0]
 800d092:	039b      	lsls	r3, r3, #14
 800d094:	d4f7      	bmi.n	800d086 <HAL_RCC_OscConfig+0x3a2>
 800d096:	e666      	b.n	800cd66 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d098:	4e62      	ldr	r6, [pc, #392]	; (800d224 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d09a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d09e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d0a0:	f023 0301 	bic.w	r3, r3, #1
 800d0a4:	6733      	str	r3, [r6, #112]	; 0x70
 800d0a6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d0a8:	f023 0304 	bic.w	r3, r3, #4
 800d0ac:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d0ae:	f7fa fd8d 	bl	8007bcc <HAL_GetTick>
 800d0b2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d0b4:	e004      	b.n	800d0c0 <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d0b6:	f7fa fd89 	bl	8007bcc <HAL_GetTick>
 800d0ba:	1bc0      	subs	r0, r0, r7
 800d0bc:	4540      	cmp	r0, r8
 800d0be:	d8d1      	bhi.n	800d064 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d0c0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d0c2:	079b      	lsls	r3, r3, #30
 800d0c4:	d4f7      	bmi.n	800d0b6 <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800d0c6:	2d00      	cmp	r5, #0
 800d0c8:	f43f aecb 	beq.w	800ce62 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0cc:	4a55      	ldr	r2, [pc, #340]	; (800d224 <HAL_RCC_OscConfig+0x540>)
 800d0ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d0d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0d4:	6413      	str	r3, [r2, #64]	; 0x40
 800d0d6:	e6c4      	b.n	800ce62 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800d0d8:	682b      	ldr	r3, [r5, #0]
 800d0da:	f023 0301 	bic.w	r3, r3, #1
 800d0de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d0e0:	f7fa fd74 	bl	8007bcc <HAL_GetTick>
 800d0e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d0e6:	e004      	b.n	800d0f2 <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d0e8:	f7fa fd70 	bl	8007bcc <HAL_GetTick>
 800d0ec:	1b80      	subs	r0, r0, r6
 800d0ee:	2802      	cmp	r0, #2
 800d0f0:	d8b8      	bhi.n	800d064 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d0f2:	682b      	ldr	r3, [r5, #0]
 800d0f4:	0799      	lsls	r1, r3, #30
 800d0f6:	d4f7      	bmi.n	800d0e8 <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	e669      	b.n	800cdd0 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d0fc:	4a49      	ldr	r2, [pc, #292]	; (800d224 <HAL_RCC_OscConfig+0x540>)
 800d0fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800d100:	f043 0301 	orr.w	r3, r3, #1
 800d104:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d106:	f7fa fd61 	bl	8007bcc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d10a:	4f46      	ldr	r7, [pc, #280]	; (800d224 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d10c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d110:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d112:	e004      	b.n	800d11e <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d114:	f7fa fd5a 	bl	8007bcc <HAL_GetTick>
 800d118:	1b80      	subs	r0, r0, r6
 800d11a:	4540      	cmp	r0, r8
 800d11c:	d8a2      	bhi.n	800d064 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d11e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d120:	079a      	lsls	r2, r3, #30
 800d122:	d5f7      	bpl.n	800d114 <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800d124:	2d00      	cmp	r5, #0
 800d126:	f43f ae9c 	beq.w	800ce62 <HAL_RCC_OscConfig+0x17e>
 800d12a:	e7cf      	b.n	800d0cc <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d12c:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800d12e:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d130:	f43f af03 	beq.w	800cf3a <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d134:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d138:	69e1      	ldr	r1, [r4, #28]
 800d13a:	428b      	cmp	r3, r1
 800d13c:	f47f af12 	bne.w	800cf64 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d140:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d144:	6a21      	ldr	r1, [r4, #32]
 800d146:	428b      	cmp	r3, r1
 800d148:	f47f af0c 	bne.w	800cf64 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d14c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d150:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d152:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d154:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800d158:	f47f af04 	bne.w	800cf64 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d15c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d15e:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800d162:	085b      	lsrs	r3, r3, #1
 800d164:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d166:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800d16a:	f47f aefb 	bne.w	800cf64 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d16e:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800d172:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d174:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800d178:	f47f aef4 	bne.w	800cf64 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d17c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d17e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d182:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800d186:	bf14      	ite	ne
 800d188:	2001      	movne	r0, #1
 800d18a:	2000      	moveq	r0, #0
 800d18c:	e6d5      	b.n	800cf3a <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800d18e:	f240 2156 	movw	r1, #598	; 0x256
 800d192:	4823      	ldr	r0, [pc, #140]	; (800d220 <HAL_RCC_OscConfig+0x53c>)
 800d194:	f7f6 fff2 	bl	800417c <assert_failed>
 800d198:	e68e      	b.n	800ceb8 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d19a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d1a6:	601a      	str	r2, [r3, #0]
 800d1a8:	e731      	b.n	800d00e <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d1aa:	f042 0204 	orr.w	r2, r2, #4
 800d1ae:	671a      	str	r2, [r3, #112]	; 0x70
 800d1b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d1b2:	f042 0201 	orr.w	r2, r2, #1
 800d1b6:	671a      	str	r2, [r3, #112]	; 0x70
 800d1b8:	e7a5      	b.n	800d106 <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800d1ba:	f240 2155 	movw	r1, #597	; 0x255
 800d1be:	4818      	ldr	r0, [pc, #96]	; (800d220 <HAL_RCC_OscConfig+0x53c>)
 800d1c0:	f7f6 ffdc 	bl	800417c <assert_failed>
 800d1c4:	e66d      	b.n	800cea2 <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800d1c6:	f44f 7115 	mov.w	r1, #596	; 0x254
 800d1ca:	4815      	ldr	r0, [pc, #84]	; (800d220 <HAL_RCC_OscConfig+0x53c>)
 800d1cc:	f7f6 ffd6 	bl	800417c <assert_failed>
 800d1d0:	e661      	b.n	800ce96 <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d1d2:	f240 2153 	movw	r1, #595	; 0x253
 800d1d6:	4812      	ldr	r0, [pc, #72]	; (800d220 <HAL_RCC_OscConfig+0x53c>)
 800d1d8:	f7f6 ffd0 	bl	800417c <assert_failed>
 800d1dc:	e656      	b.n	800ce8c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800d1de:	682b      	ldr	r3, [r5, #0]
 800d1e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d1e6:	f7fa fcf1 	bl	8007bcc <HAL_GetTick>
 800d1ea:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d1ec:	e005      	b.n	800d1fa <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1ee:	f7fa fced 	bl	8007bcc <HAL_GetTick>
 800d1f2:	1b00      	subs	r0, r0, r4
 800d1f4:	2802      	cmp	r0, #2
 800d1f6:	f63f af35 	bhi.w	800d064 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d1fa:	682b      	ldr	r3, [r5, #0]
 800d1fc:	019b      	lsls	r3, r3, #6
 800d1fe:	d4f6      	bmi.n	800d1ee <HAL_RCC_OscConfig+0x50a>
 800d200:	e69a      	b.n	800cf38 <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800d202:	2001      	movs	r0, #1
}
 800d204:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800d206:	f240 2159 	movw	r1, #601	; 0x259
 800d20a:	4805      	ldr	r0, [pc, #20]	; (800d220 <HAL_RCC_OscConfig+0x53c>)
 800d20c:	f7f6 ffb6 	bl	800417c <assert_failed>
 800d210:	e65c      	b.n	800cecc <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800d212:	f240 2157 	movw	r1, #599	; 0x257
 800d216:	4802      	ldr	r0, [pc, #8]	; (800d220 <HAL_RCC_OscConfig+0x53c>)
 800d218:	f7f6 ffb0 	bl	800417c <assert_failed>
 800d21c:	e651      	b.n	800cec2 <HAL_RCC_OscConfig+0x1de>
 800d21e:	bf00      	nop
 800d220:	0802be70 	.word	0x0802be70
 800d224:	40023800 	.word	0x40023800

0800d228 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d228:	4916      	ldr	r1, [pc, #88]	; (800d284 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800d22a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d22c:	688b      	ldr	r3, [r1, #8]
 800d22e:	f003 030c 	and.w	r3, r3, #12
 800d232:	2b04      	cmp	r3, #4
 800d234:	d01b      	beq.n	800d26e <HAL_RCC_GetSysClockFreq+0x46>
 800d236:	2b08      	cmp	r3, #8
 800d238:	d117      	bne.n	800d26a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d23a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d23c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d23e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d242:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d244:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800d248:	d113      	bne.n	800d272 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d24a:	480f      	ldr	r0, [pc, #60]	; (800d288 <HAL_RCC_GetSysClockFreq+0x60>)
 800d24c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800d250:	fba1 0100 	umull	r0, r1, r1, r0
 800d254:	f7f3 f8ac 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d258:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <HAL_RCC_GetSysClockFreq+0x5c>)
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800d260:	3301      	adds	r3, #1
 800d262:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800d264:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800d268:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800d26a:	4807      	ldr	r0, [pc, #28]	; (800d288 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800d26c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d26e:	4807      	ldr	r0, [pc, #28]	; (800d28c <HAL_RCC_GetSysClockFreq+0x64>)
}
 800d270:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d272:	4806      	ldr	r0, [pc, #24]	; (800d28c <HAL_RCC_GetSysClockFreq+0x64>)
 800d274:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800d278:	2300      	movs	r3, #0
 800d27a:	fba1 0100 	umull	r0, r1, r1, r0
 800d27e:	f7f3 f897 	bl	80003b0 <__aeabi_uldivmod>
 800d282:	e7e9      	b.n	800d258 <HAL_RCC_GetSysClockFreq+0x30>
 800d284:	40023800 	.word	0x40023800
 800d288:	00f42400 	.word	0x00f42400
 800d28c:	007a1200 	.word	0x007a1200

0800d290 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800d290:	2800      	cmp	r0, #0
 800d292:	f000 80f6 	beq.w	800d482 <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d296:	6803      	ldr	r3, [r0, #0]
 800d298:	3b01      	subs	r3, #1
 800d29a:	2b0e      	cmp	r3, #14
{
 800d29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d2a4:	f200 80d6 	bhi.w	800d454 <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800d2a8:	2d0f      	cmp	r5, #15
 800d2aa:	f200 80c3 	bhi.w	800d434 <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d2ae:	4a81      	ldr	r2, [pc, #516]	; (800d4b4 <HAL_RCC_ClockConfig+0x224>)
 800d2b0:	6813      	ldr	r3, [r2, #0]
 800d2b2:	f003 030f 	and.w	r3, r3, #15
 800d2b6:	42ab      	cmp	r3, r5
 800d2b8:	d36f      	bcc.n	800d39a <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	0798      	lsls	r0, r3, #30
 800d2be:	d530      	bpl.n	800d322 <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2c0:	0759      	lsls	r1, r3, #29
 800d2c2:	d504      	bpl.n	800d2ce <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d2c4:	497c      	ldr	r1, [pc, #496]	; (800d4b8 <HAL_RCC_ClockConfig+0x228>)
 800d2c6:	688a      	ldr	r2, [r1, #8]
 800d2c8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800d2cc:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2ce:	071a      	lsls	r2, r3, #28
 800d2d0:	d504      	bpl.n	800d2dc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d2d2:	4979      	ldr	r1, [pc, #484]	; (800d4b8 <HAL_RCC_ClockConfig+0x228>)
 800d2d4:	688a      	ldr	r2, [r1, #8]
 800d2d6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800d2da:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800d2dc:	68a1      	ldr	r1, [r4, #8]
 800d2de:	f021 0220 	bic.w	r2, r1, #32
 800d2e2:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800d2e6:	2a90      	cmp	r2, #144	; 0x90
 800d2e8:	bf18      	it	ne
 800d2ea:	2800      	cmpne	r0, #0
 800d2ec:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800d2f0:	bf14      	ite	ne
 800d2f2:	2201      	movne	r2, #1
 800d2f4:	2200      	moveq	r2, #0
 800d2f6:	29f0      	cmp	r1, #240	; 0xf0
 800d2f8:	bf0c      	ite	eq
 800d2fa:	2200      	moveq	r2, #0
 800d2fc:	f002 0201 	andne.w	r2, r2, #1
 800d300:	28a0      	cmp	r0, #160	; 0xa0
 800d302:	bf0c      	ite	eq
 800d304:	2200      	moveq	r2, #0
 800d306:	f002 0201 	andne.w	r2, r2, #1
 800d30a:	b122      	cbz	r2, 800d316 <HAL_RCC_ClockConfig+0x86>
 800d30c:	f021 0210 	bic.w	r2, r1, #16
 800d310:	2ac0      	cmp	r2, #192	; 0xc0
 800d312:	f040 80b8 	bne.w	800d486 <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d316:	4868      	ldr	r0, [pc, #416]	; (800d4b8 <HAL_RCC_ClockConfig+0x228>)
 800d318:	6882      	ldr	r2, [r0, #8]
 800d31a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800d31e:	4311      	orrs	r1, r2
 800d320:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d322:	07df      	lsls	r7, r3, #31
 800d324:	d526      	bpl.n	800d374 <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800d326:	6863      	ldr	r3, [r4, #4]
 800d328:	2b02      	cmp	r3, #2
 800d32a:	f200 80a1 	bhi.w	800d470 <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d32e:	4a62      	ldr	r2, [pc, #392]	; (800d4b8 <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d330:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d332:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d334:	f000 8098 	beq.w	800d468 <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d338:	2b02      	cmp	r3, #2
 800d33a:	f000 8091 	beq.w	800d460 <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d33e:	0791      	lsls	r1, r2, #30
 800d340:	d528      	bpl.n	800d394 <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d342:	4e5d      	ldr	r6, [pc, #372]	; (800d4b8 <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d344:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d348:	68b2      	ldr	r2, [r6, #8]
 800d34a:	f022 0203 	bic.w	r2, r2, #3
 800d34e:	4313      	orrs	r3, r2
 800d350:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800d352:	f7fa fc3b 	bl	8007bcc <HAL_GetTick>
 800d356:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d358:	e005      	b.n	800d366 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d35a:	f7fa fc37 	bl	8007bcc <HAL_GetTick>
 800d35e:	1bc0      	subs	r0, r0, r7
 800d360:	4540      	cmp	r0, r8
 800d362:	f200 808c 	bhi.w	800d47e <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d366:	68b3      	ldr	r3, [r6, #8]
 800d368:	6862      	ldr	r2, [r4, #4]
 800d36a:	f003 030c 	and.w	r3, r3, #12
 800d36e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800d372:	d1f2      	bne.n	800d35a <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d374:	4a4f      	ldr	r2, [pc, #316]	; (800d4b4 <HAL_RCC_ClockConfig+0x224>)
 800d376:	6813      	ldr	r3, [r2, #0]
 800d378:	f003 030f 	and.w	r3, r3, #15
 800d37c:	42ab      	cmp	r3, r5
 800d37e:	d91a      	bls.n	800d3b6 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d380:	6813      	ldr	r3, [r2, #0]
 800d382:	f023 030f 	bic.w	r3, r3, #15
 800d386:	432b      	orrs	r3, r5
 800d388:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d38a:	6813      	ldr	r3, [r2, #0]
 800d38c:	f003 030f 	and.w	r3, r3, #15
 800d390:	42ab      	cmp	r3, r5
 800d392:	d010      	beq.n	800d3b6 <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800d394:	2001      	movs	r0, #1
}
 800d396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d39a:	6813      	ldr	r3, [r2, #0]
 800d39c:	f023 030f 	bic.w	r3, r3, #15
 800d3a0:	432b      	orrs	r3, r5
 800d3a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d3a4:	6813      	ldr	r3, [r2, #0]
 800d3a6:	f003 030f 	and.w	r3, r3, #15
 800d3aa:	42ab      	cmp	r3, r5
 800d3ac:	d1f2      	bne.n	800d394 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	0798      	lsls	r0, r3, #30
 800d3b2:	d485      	bmi.n	800d2c0 <HAL_RCC_ClockConfig+0x30>
 800d3b4:	e7b5      	b.n	800d322 <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3b6:	6823      	ldr	r3, [r4, #0]
 800d3b8:	075a      	lsls	r2, r3, #29
 800d3ba:	d512      	bpl.n	800d3e2 <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800d3bc:	68e1      	ldr	r1, [r4, #12]
 800d3be:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800d3c2:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800d3c6:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800d3ca:	bf18      	it	ne
 800d3cc:	2a00      	cmpne	r2, #0
 800d3ce:	d002      	beq.n	800d3d6 <HAL_RCC_ClockConfig+0x146>
 800d3d0:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800d3d4:	d15f      	bne.n	800d496 <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d3d6:	4838      	ldr	r0, [pc, #224]	; (800d4b8 <HAL_RCC_ClockConfig+0x228>)
 800d3d8:	6882      	ldr	r2, [r0, #8]
 800d3da:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800d3de:	430a      	orrs	r2, r1
 800d3e0:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3e2:	071b      	lsls	r3, r3, #28
 800d3e4:	d513      	bpl.n	800d40e <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800d3e6:	6922      	ldr	r2, [r4, #16]
 800d3e8:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800d3ec:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800d3f0:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800d3f4:	bf18      	it	ne
 800d3f6:	2b00      	cmpne	r3, #0
 800d3f8:	d002      	beq.n	800d400 <HAL_RCC_ClockConfig+0x170>
 800d3fa:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800d3fe:	d152      	bne.n	800d4a6 <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d400:	492d      	ldr	r1, [pc, #180]	; (800d4b8 <HAL_RCC_ClockConfig+0x228>)
 800d402:	688b      	ldr	r3, [r1, #8]
 800d404:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d408:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d40c:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d40e:	f7ff ff0b 	bl	800d228 <HAL_RCC_GetSysClockFreq>
 800d412:	4a29      	ldr	r2, [pc, #164]	; (800d4b8 <HAL_RCC_ClockConfig+0x228>)
 800d414:	4c29      	ldr	r4, [pc, #164]	; (800d4bc <HAL_RCC_ClockConfig+0x22c>)
 800d416:	4603      	mov	r3, r0
 800d418:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800d41a:	4829      	ldr	r0, [pc, #164]	; (800d4c0 <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d41c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800d420:	4928      	ldr	r1, [pc, #160]	; (800d4c4 <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800d422:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d424:	5ca2      	ldrb	r2, [r4, r2]
 800d426:	40d3      	lsrs	r3, r2
 800d428:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800d42a:	f7f8 ff81 	bl	8006330 <HAL_InitTick>
  return HAL_OK;
 800d42e:	2000      	movs	r0, #0
}
 800d430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800d434:	f240 21de 	movw	r1, #734	; 0x2de
 800d438:	4823      	ldr	r0, [pc, #140]	; (800d4c8 <HAL_RCC_ClockConfig+0x238>)
 800d43a:	f7f6 fe9f 	bl	800417c <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d43e:	4b1d      	ldr	r3, [pc, #116]	; (800d4b4 <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800d440:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d442:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d444:	6819      	ldr	r1, [r3, #0]
 800d446:	f021 010f 	bic.w	r1, r1, #15
 800d44a:	430d      	orrs	r5, r1
 800d44c:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d44e:	681b      	ldr	r3, [r3, #0]
}
 800d450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d454:	f240 21dd 	movw	r1, #733	; 0x2dd
 800d458:	481b      	ldr	r0, [pc, #108]	; (800d4c8 <HAL_RCC_ClockConfig+0x238>)
 800d45a:	f7f6 fe8f 	bl	800417c <assert_failed>
 800d45e:	e723      	b.n	800d2a8 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d460:	0190      	lsls	r0, r2, #6
 800d462:	f53f af6e 	bmi.w	800d342 <HAL_RCC_ClockConfig+0xb2>
 800d466:	e795      	b.n	800d394 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d468:	0396      	lsls	r6, r2, #14
 800d46a:	f53f af6a 	bmi.w	800d342 <HAL_RCC_ClockConfig+0xb2>
 800d46e:	e791      	b.n	800d394 <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800d470:	f240 3109 	movw	r1, #777	; 0x309
 800d474:	4814      	ldr	r0, [pc, #80]	; (800d4c8 <HAL_RCC_ClockConfig+0x238>)
 800d476:	f7f6 fe81 	bl	800417c <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d47a:	6863      	ldr	r3, [r4, #4]
 800d47c:	e757      	b.n	800d32e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800d47e:	2003      	movs	r0, #3
 800d480:	e789      	b.n	800d396 <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800d482:	2001      	movs	r0, #1
}
 800d484:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800d486:	f240 3102 	movw	r1, #770	; 0x302
 800d48a:	480f      	ldr	r0, [pc, #60]	; (800d4c8 <HAL_RCC_ClockConfig+0x238>)
 800d48c:	f7f6 fe76 	bl	800417c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d490:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	e73f      	b.n	800d316 <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800d496:	f240 3146 	movw	r1, #838	; 0x346
 800d49a:	480b      	ldr	r0, [pc, #44]	; (800d4c8 <HAL_RCC_ClockConfig+0x238>)
 800d49c:	f7f6 fe6e 	bl	800417c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d4a0:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	e797      	b.n	800d3d6 <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800d4a6:	f240 314d 	movw	r1, #845	; 0x34d
 800d4aa:	4807      	ldr	r0, [pc, #28]	; (800d4c8 <HAL_RCC_ClockConfig+0x238>)
 800d4ac:	f7f6 fe66 	bl	800417c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d4b0:	6922      	ldr	r2, [r4, #16]
 800d4b2:	e7a5      	b.n	800d400 <HAL_RCC_ClockConfig+0x170>
 800d4b4:	40023c00 	.word	0x40023c00
 800d4b8:	40023800 	.word	0x40023800
 800d4bc:	0802b040 	.word	0x0802b040
 800d4c0:	200002dc 	.word	0x200002dc
 800d4c4:	2000027c 	.word	0x2000027c
 800d4c8:	0802be70 	.word	0x0802be70

0800d4cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800d4cc:	4b01      	ldr	r3, [pc, #4]	; (800d4d4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800d4ce:	6818      	ldr	r0, [r3, #0]
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	2000027c 	.word	0x2000027c

0800d4d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d4d8:	4b04      	ldr	r3, [pc, #16]	; (800d4ec <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800d4da:	4905      	ldr	r1, [pc, #20]	; (800d4f0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	4a05      	ldr	r2, [pc, #20]	; (800d4f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800d4e0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800d4e4:	6808      	ldr	r0, [r1, #0]
 800d4e6:	5cd3      	ldrb	r3, [r2, r3]
}
 800d4e8:	40d8      	lsrs	r0, r3
 800d4ea:	4770      	bx	lr
 800d4ec:	40023800 	.word	0x40023800
 800d4f0:	2000027c 	.word	0x2000027c
 800d4f4:	0802b050 	.word	0x0802b050

0800d4f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d4f8:	4b04      	ldr	r3, [pc, #16]	; (800d50c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800d4fa:	4905      	ldr	r1, [pc, #20]	; (800d510 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	4a05      	ldr	r2, [pc, #20]	; (800d514 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800d500:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800d504:	6808      	ldr	r0, [r1, #0]
 800d506:	5cd3      	ldrb	r3, [r2, r3]
}
 800d508:	40d8      	lsrs	r0, r3
 800d50a:	4770      	bx	lr
 800d50c:	40023800 	.word	0x40023800
 800d510:	2000027c 	.word	0x2000027c
 800d514:	0802b050 	.word	0x0802b050

0800d518 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d518:	4b0e      	ldr	r3, [pc, #56]	; (800d554 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d51a:	220f      	movs	r2, #15
 800d51c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d51e:	689a      	ldr	r2, [r3, #8]
 800d520:	f002 0203 	and.w	r2, r2, #3
 800d524:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d526:	689a      	ldr	r2, [r3, #8]
 800d528:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800d52c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d52e:	689a      	ldr	r2, [r3, #8]
 800d530:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800d534:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	08db      	lsrs	r3, r3, #3
{
 800d53a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d53c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d540:	4c05      	ldr	r4, [pc, #20]	; (800d558 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d542:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d544:	6823      	ldr	r3, [r4, #0]
}
 800d546:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d54a:	f003 030f 	and.w	r3, r3, #15
 800d54e:	600b      	str	r3, [r1, #0]
}
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	40023800 	.word	0x40023800
 800d558:	40023c00 	.word	0x40023c00

0800d55c <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800d55c:	4a56      	ldr	r2, [pc, #344]	; (800d6b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800d55e:	6803      	ldr	r3, [r0, #0]
 800d560:	401a      	ands	r2, r3
{
 800d562:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d566:	4604      	mov	r4, r0
 800d568:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800d56a:	2a00      	cmp	r2, #0
 800d56c:	f000 833f 	beq.w	800dbee <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d570:	f013 0601 	ands.w	r6, r3, #1
 800d574:	d00f      	beq.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800d576:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800d578:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800d57c:	f040 8342 	bne.w	800dc04 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d580:	4a4e      	ldr	r2, [pc, #312]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d582:	6891      	ldr	r1, [r2, #8]
 800d584:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800d588:	6091      	str	r1, [r2, #8]
 800d58a:	6891      	ldr	r1, [r2, #8]
 800d58c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d58e:	fab6 f686 	clz	r6, r6
 800d592:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d594:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d596:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800d59a:	d014      	beq.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800d59c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800d59e:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800d5a2:	f040 838d 	bne.w	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d5a6:	4945      	ldr	r1, [pc, #276]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d5a8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d5ac:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800d5b0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800d5b4:	ea42 0205 	orr.w	r2, r2, r5
 800d5b8:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d5bc:	f000 831f 	beq.w	800dbfe <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d5c0:	fab5 f585 	clz	r5, r5
 800d5c4:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d5c6:	02d9      	lsls	r1, r3, #11
 800d5c8:	d514      	bpl.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800d5ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d5cc:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800d5d0:	f040 837d 	bne.w	800dcce <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d5d4:	4839      	ldr	r0, [pc, #228]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d5d6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d5da:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800d5de:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800d5e2:	ea42 0201 	orr.w	r2, r2, r1
 800d5e6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d5ea:	f000 8306 	beq.w	800dbfa <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800d5ee:	2900      	cmp	r1, #0
 800d5f0:	bf08      	it	eq
 800d5f2:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800d5f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800d5f8:	bf18      	it	ne
 800d5fa:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d5fc:	069a      	lsls	r2, r3, #26
 800d5fe:	f140 8099 	bpl.w	800d734 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800d602:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d604:	482e      	ldr	r0, [pc, #184]	; (800d6c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800d606:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d60a:	bf18      	it	ne
 800d60c:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800d610:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800d614:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800d618:	bf14      	ite	ne
 800d61a:	2301      	movne	r3, #1
 800d61c:	2300      	moveq	r3, #0
 800d61e:	4287      	cmp	r7, r0
 800d620:	bf0c      	ite	eq
 800d622:	2300      	moveq	r3, #0
 800d624:	f003 0301 	andne.w	r3, r3, #1
 800d628:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800d62c:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800d630:	4287      	cmp	r7, r0
 800d632:	bf0c      	ite	eq
 800d634:	2300      	moveq	r3, #0
 800d636:	f003 0301 	andne.w	r3, r3, #1
 800d63a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800d63e:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800d642:	4281      	cmp	r1, r0
 800d644:	bf0c      	ite	eq
 800d646:	2300      	moveq	r3, #0
 800d648:	f003 0301 	andne.w	r3, r3, #1
 800d64c:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800d650:	4287      	cmp	r7, r0
 800d652:	bf0c      	ite	eq
 800d654:	2300      	moveq	r3, #0
 800d656:	f003 0301 	andne.w	r3, r3, #1
 800d65a:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800d65e:	4281      	cmp	r1, r0
 800d660:	bf0c      	ite	eq
 800d662:	2300      	moveq	r3, #0
 800d664:	f003 0301 	andne.w	r3, r3, #1
 800d668:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800d66c:	4281      	cmp	r1, r0
 800d66e:	bf0c      	ite	eq
 800d670:	2300      	moveq	r3, #0
 800d672:	f003 0301 	andne.w	r3, r3, #1
 800d676:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800d67a:	4281      	cmp	r1, r0
 800d67c:	bf0c      	ite	eq
 800d67e:	2300      	moveq	r3, #0
 800d680:	f003 0301 	andne.w	r3, r3, #1
 800d684:	b12b      	cbz	r3, 800d692 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d686:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d68a:	4b0e      	ldr	r3, [pc, #56]	; (800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800d68c:	429a      	cmp	r2, r3
 800d68e:	f040 8438 	bne.w	800df02 <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d692:	4b0a      	ldr	r3, [pc, #40]	; (800d6bc <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d694:	4f0c      	ldr	r7, [pc, #48]	; (800d6c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800d696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d698:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d69c:	641a      	str	r2, [r3, #64]	; 0x40
 800d69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6a4:	9301      	str	r3, [sp, #4]
 800d6a6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6ae:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6b0:	f7fa fa8c 	bl	8007bcc <HAL_GetTick>
 800d6b4:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d6b6:	e010      	b.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800d6b8:	1dfffff9 	.word	0x1dfffff9
 800d6bc:	40023800 	.word	0x40023800
 800d6c0:	00020300 	.word	0x00020300
 800d6c4:	001c0300 	.word	0x001c0300
 800d6c8:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d6cc:	f7fa fa7e 	bl	8007bcc <HAL_GetTick>
 800d6d0:	eba0 0008 	sub.w	r0, r0, r8
 800d6d4:	2864      	cmp	r0, #100	; 0x64
 800d6d6:	f200 8286 	bhi.w	800dbe6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	05db      	lsls	r3, r3, #23
 800d6de:	d5f5      	bpl.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d6e0:	4fb0      	ldr	r7, [pc, #704]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d6e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d6e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d6e6:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800d6ea:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800d6ee:	d011      	beq.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800d6f0:	4291      	cmp	r1, r2
 800d6f2:	d00f      	beq.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d6f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d6f6:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d6f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800d6fc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800d700:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d702:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d704:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800d708:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d70a:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d70c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d70e:	07d0      	lsls	r0, r2, #31
 800d710:	f100 836c 	bmi.w	800ddec <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d714:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800d718:	f000 82c9 	beq.w	800dcae <HAL_RCCEx_PeriphCLKConfig+0x752>
 800d71c:	49a1      	ldr	r1, [pc, #644]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d71e:	688a      	ldr	r2, [r1, #8]
 800d720:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800d724:	608a      	str	r2, [r1, #8]
 800d726:	4a9f      	ldr	r2, [pc, #636]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d72c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800d72e:	430b      	orrs	r3, r1
 800d730:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d732:	6823      	ldr	r3, [r4, #0]
 800d734:	06da      	lsls	r2, r3, #27
 800d736:	d510      	bpl.n	800d75a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800d738:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800d73a:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800d73e:	f040 82db 	bne.w	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d742:	4a98      	ldr	r2, [pc, #608]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d744:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800d748:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800d74c:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800d750:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800d754:	4339      	orrs	r1, r7
 800d756:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d75a:	045f      	lsls	r7, r3, #17
 800d75c:	d50f      	bpl.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800d75e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d760:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800d764:	d003      	beq.n	800d76e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800d766:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800d76a:	f040 8299 	bne.w	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d76e:	488d      	ldr	r0, [pc, #564]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d770:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d774:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800d778:	430a      	orrs	r2, r1
 800d77a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d77e:	0418      	lsls	r0, r3, #16
 800d780:	d50f      	bpl.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800d782:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800d784:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800d788:	d003      	beq.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800d78a:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800d78e:	f040 826a 	bne.w	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d792:	4884      	ldr	r0, [pc, #528]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d794:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d798:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800d79c:	430a      	orrs	r2, r1
 800d79e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d7a2:	03d9      	lsls	r1, r3, #15
 800d7a4:	d50f      	bpl.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800d7a6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800d7a8:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800d7ac:	d003      	beq.n	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800d7ae:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800d7b2:	f040 8260 	bne.w	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d7b6:	487b      	ldr	r0, [pc, #492]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d7b8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d7bc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800d7c0:	430a      	orrs	r2, r1
 800d7c2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d7c6:	039a      	lsls	r2, r3, #14
 800d7c8:	d50f      	bpl.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800d7ca:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800d7cc:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800d7d0:	d003      	beq.n	800d7da <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800d7d2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800d7d6:	f040 825b 	bne.w	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d7da:	4872      	ldr	r0, [pc, #456]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d7dc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d7e0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800d7e4:	430a      	orrs	r2, r1
 800d7e6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d7ea:	065f      	lsls	r7, r3, #25
 800d7ec:	d50b      	bpl.n	800d806 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800d7ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d7f0:	2903      	cmp	r1, #3
 800d7f2:	f200 82b3 	bhi.w	800dd5c <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d7f6:	486b      	ldr	r0, [pc, #428]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d7f8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d7fc:	f022 0203 	bic.w	r2, r2, #3
 800d800:	430a      	orrs	r2, r1
 800d802:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d806:	0618      	lsls	r0, r3, #24
 800d808:	d50c      	bpl.n	800d824 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800d80a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d80c:	f031 020c 	bics.w	r2, r1, #12
 800d810:	f040 82b4 	bne.w	800dd7c <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d814:	4863      	ldr	r0, [pc, #396]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d816:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d81a:	f022 020c 	bic.w	r2, r2, #12
 800d81e:	430a      	orrs	r2, r1
 800d820:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d824:	05d9      	lsls	r1, r3, #23
 800d826:	d50c      	bpl.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800d828:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d82a:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800d82e:	f040 82ad 	bne.w	800dd8c <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d832:	485c      	ldr	r0, [pc, #368]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d834:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d838:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800d83c:	430a      	orrs	r2, r1
 800d83e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d842:	059a      	lsls	r2, r3, #22
 800d844:	d50c      	bpl.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800d846:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800d848:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800d84c:	f040 82a6 	bne.w	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d850:	4854      	ldr	r0, [pc, #336]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d852:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d856:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d85a:	430a      	orrs	r2, r1
 800d85c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d860:	055f      	lsls	r7, r3, #21
 800d862:	d50c      	bpl.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800d864:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d866:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800d86a:	f040 829f 	bne.w	800ddac <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d86e:	484d      	ldr	r0, [pc, #308]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d870:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d874:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d878:	430a      	orrs	r2, r1
 800d87a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d87e:	0518      	lsls	r0, r3, #20
 800d880:	d50c      	bpl.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800d882:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d884:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800d888:	f040 8298 	bne.w	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d88c:	4845      	ldr	r0, [pc, #276]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d88e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d892:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d896:	430a      	orrs	r2, r1
 800d898:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d89c:	04d9      	lsls	r1, r3, #19
 800d89e:	d50c      	bpl.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800d8a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d8a2:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800d8a6:	f040 8291 	bne.w	800ddcc <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d8aa:	483e      	ldr	r0, [pc, #248]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d8ac:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d8b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800d8b4:	430a      	orrs	r2, r1
 800d8b6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d8ba:	049a      	lsls	r2, r3, #18
 800d8bc:	d50c      	bpl.n	800d8d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800d8be:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800d8c0:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800d8c4:	f040 828a 	bne.w	800dddc <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d8c8:	4836      	ldr	r0, [pc, #216]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d8ca:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d8ce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d8d2:	430a      	orrs	r2, r1
 800d8d4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d8d8:	025f      	lsls	r7, r3, #9
 800d8da:	d50c      	bpl.n	800d8f6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800d8dc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800d8de:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800d8e2:	f040 8222 	bne.w	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d8e6:	482f      	ldr	r0, [pc, #188]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d8e8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d8ec:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800d8f0:	430a      	orrs	r2, r1
 800d8f2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d8f6:	0298      	lsls	r0, r3, #10
 800d8f8:	d510      	bpl.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800d8fa:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800d8fc:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800d900:	f040 821b 	bne.w	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d904:	4827      	ldr	r0, [pc, #156]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800d906:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d90a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800d90e:	bf08      	it	eq
 800d910:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d912:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800d916:	430a      	orrs	r2, r1
 800d918:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800d91c:	f013 0f08 	tst.w	r3, #8
 800d920:	bf18      	it	ne
 800d922:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d924:	0359      	lsls	r1, r3, #13
 800d926:	d50c      	bpl.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800d928:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800d92a:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800d92e:	f040 821d 	bne.w	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d932:	481c      	ldr	r0, [pc, #112]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d934:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d938:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800d93c:	430a      	orrs	r2, r1
 800d93e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d942:	021a      	lsls	r2, r3, #8
 800d944:	d50d      	bpl.n	800d962 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800d946:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800d94a:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800d94e:	f040 81fc 	bne.w	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d952:	4814      	ldr	r0, [pc, #80]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d954:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d958:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d95c:	430a      	orrs	r2, r1
 800d95e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d962:	015f      	lsls	r7, r3, #5
 800d964:	d50d      	bpl.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800d966:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800d96a:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800d96e:	f040 81ca 	bne.w	800dd06 <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d972:	480c      	ldr	r0, [pc, #48]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d974:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d978:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800d97c:	430a      	orrs	r2, r1
 800d97e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d982:	0118      	lsls	r0, r3, #4
 800d984:	d510      	bpl.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800d986:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800d98a:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800d98e:	f040 81c3 	bne.w	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d992:	4804      	ldr	r0, [pc, #16]	; (800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d994:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800d998:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800d99c:	430a      	orrs	r2, r1
 800d99e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800d9a2:	e001      	b.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800d9a4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d9a8:	00d9      	lsls	r1, r3, #3
 800d9aa:	d50d      	bpl.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800d9ac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800d9b0:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800d9b4:	f040 8198 	bne.w	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d9b8:	49b3      	ldr	r1, [pc, #716]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d9ba:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800d9be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d9c8:	2e01      	cmp	r6, #1
 800d9ca:	d003      	beq.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	019a      	lsls	r2, r3, #6
 800d9d0:	f140 8083 	bpl.w	800dada <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d9d4:	4eac      	ldr	r6, [pc, #688]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d9d6:	6833      	ldr	r3, [r6, #0]
 800d9d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d9dc:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9de:	f7fa f8f5 	bl	8007bcc <HAL_GetTick>
 800d9e2:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d9e4:	e005      	b.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d9e6:	f7fa f8f1 	bl	8007bcc <HAL_GetTick>
 800d9ea:	1bc0      	subs	r0, r0, r7
 800d9ec:	2864      	cmp	r0, #100	; 0x64
 800d9ee:	f200 80fa 	bhi.w	800dbe6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d9f2:	6833      	ldr	r3, [r6, #0]
 800d9f4:	011b      	lsls	r3, r3, #4
 800d9f6:	d4f6      	bmi.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800d9f8:	6863      	ldr	r3, [r4, #4]
 800d9fa:	3b32      	subs	r3, #50	; 0x32
 800d9fc:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800da00:	f200 816c 	bhi.w	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800da04:	6823      	ldr	r3, [r4, #0]
 800da06:	07df      	lsls	r7, r3, #31
 800da08:	d517      	bpl.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800da0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800da0c:	b9aa      	cbnz	r2, 800da3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800da0e:	68a7      	ldr	r7, [r4, #8]
 800da10:	1eba      	subs	r2, r7, #2
 800da12:	2a05      	cmp	r2, #5
 800da14:	f200 820c 	bhi.w	800de30 <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800da18:	499b      	ldr	r1, [pc, #620]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800da1a:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800da1c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800da20:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800da24:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800da28:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800da2c:	4332      	orrs	r2, r6
 800da2e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800da32:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800da36:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800da3a:	031e      	lsls	r6, r3, #12
 800da3c:	f100 80e9 	bmi.w	800dc12 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800da40:	02d8      	lsls	r0, r3, #11
 800da42:	d504      	bpl.n	800da4e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800da44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800da46:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800da4a:	f000 80e7 	beq.w	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800da4e:	01d9      	lsls	r1, r3, #7
 800da50:	d514      	bpl.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800da52:	6927      	ldr	r7, [r4, #16]
 800da54:	2f03      	cmp	r7, #3
 800da56:	f200 81f9 	bhi.w	800de4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800da5a:	498b      	ldr	r1, [pc, #556]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800da5c:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800da5e:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800da62:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800da66:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800da6a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800da6e:	4332      	orrs	r2, r6
 800da70:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800da74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800da78:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800da7c:	019a      	lsls	r2, r3, #6
 800da7e:	d51a      	bpl.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800da80:	6923      	ldr	r3, [r4, #16]
 800da82:	2b03      	cmp	r3, #3
 800da84:	f200 81dc 	bhi.w	800de40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800da88:	68a3      	ldr	r3, [r4, #8]
 800da8a:	3b02      	subs	r3, #2
 800da8c:	2b05      	cmp	r3, #5
 800da8e:	f200 81ec 	bhi.w	800de6a <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800da92:	68e2      	ldr	r2, [r4, #12]
 800da94:	1e93      	subs	r3, r2, #2
 800da96:	2b0d      	cmp	r3, #13
 800da98:	f200 81e0 	bhi.w	800de5c <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800da9c:	6923      	ldr	r3, [r4, #16]
 800da9e:	6861      	ldr	r1, [r4, #4]
 800daa0:	041b      	lsls	r3, r3, #16
 800daa2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800daa6:	68a1      	ldr	r1, [r4, #8]
 800daa8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800daac:	4976      	ldr	r1, [pc, #472]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800daae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dab2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800dab6:	4e74      	ldr	r6, [pc, #464]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800dab8:	6833      	ldr	r3, [r6, #0]
 800daba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dabe:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dac0:	f7fa f884 	bl	8007bcc <HAL_GetTick>
 800dac4:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dac6:	e005      	b.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dac8:	f7fa f880 	bl	8007bcc <HAL_GetTick>
 800dacc:	1bc0      	subs	r0, r0, r7
 800dace:	2864      	cmp	r0, #100	; 0x64
 800dad0:	f200 8089 	bhi.w	800dbe6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dad4:	6833      	ldr	r3, [r6, #0]
 800dad6:	011b      	lsls	r3, r3, #4
 800dad8:	d5f6      	bpl.n	800dac8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800dada:	2d01      	cmp	r5, #1
 800dadc:	d003      	beq.n	800dae6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800dade:	2000      	movs	r0, #0
}
 800dae0:	b003      	add	sp, #12
 800dae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800dae6:	4d68      	ldr	r5, [pc, #416]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800dae8:	682b      	ldr	r3, [r5, #0]
 800daea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800daee:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800daf0:	f7fa f86c 	bl	8007bcc <HAL_GetTick>
 800daf4:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800daf6:	e004      	b.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800daf8:	f7fa f868 	bl	8007bcc <HAL_GetTick>
 800dafc:	1b80      	subs	r0, r0, r6
 800dafe:	2864      	cmp	r0, #100	; 0x64
 800db00:	d871      	bhi.n	800dbe6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800db02:	682b      	ldr	r3, [r5, #0]
 800db04:	009f      	lsls	r7, r3, #2
 800db06:	d4f7      	bmi.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800db08:	6963      	ldr	r3, [r4, #20]
 800db0a:	3b32      	subs	r3, #50	; 0x32
 800db0c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800db10:	f200 81b9 	bhi.w	800de86 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	031d      	lsls	r5, r3, #12
 800db18:	f140 81ad 	bpl.w	800de76 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800db1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800db1e:	2a00      	cmp	r2, #0
 800db20:	f040 81a9 	bne.w	800de76 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800db24:	69a3      	ldr	r3, [r4, #24]
 800db26:	3b02      	subs	r3, #2
 800db28:	2b0d      	cmp	r3, #13
 800db2a:	f200 81d5 	bhi.w	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800db2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800db30:	1e59      	subs	r1, r3, #1
 800db32:	291f      	cmp	r1, #31
 800db34:	f200 81c8 	bhi.w	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800db38:	4a53      	ldr	r2, [pc, #332]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800db3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800db3e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800db42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800db46:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800db4a:	4303      	orrs	r3, r0
 800db4c:	6960      	ldr	r0, [r4, #20]
 800db4e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800db52:	69a0      	ldr	r0, [r4, #24]
 800db54:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800db58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800db5c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800db60:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800db64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800db68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	0299      	lsls	r1, r3, #10
 800db70:	d504      	bpl.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x620>
 800db72:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800db74:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800db78:	f000 818b 	beq.w	800de92 <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800db7c:	071a      	lsls	r2, r3, #28
 800db7e:	d522      	bpl.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800db80:	69e3      	ldr	r3, [r4, #28]
 800db82:	3b02      	subs	r3, #2
 800db84:	2b05      	cmp	r3, #5
 800db86:	f200 8199 	bhi.w	800debc <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800db8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800db8c:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800db90:	f040 81a8 	bne.w	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800db94:	4a3c      	ldr	r2, [pc, #240]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800db96:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800db98:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800db9c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800dba0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800dba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800dba8:	430b      	orrs	r3, r1
 800dbaa:	69e1      	ldr	r1, [r4, #28]
 800dbac:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800dbb0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800dbb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800dbb8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800dbbc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800dbc0:	4303      	orrs	r3, r0
 800dbc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800dbc6:	4c30      	ldr	r4, [pc, #192]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbce:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800dbd0:	f7f9 fffc 	bl	8007bcc <HAL_GetTick>
 800dbd4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800dbd6:	6823      	ldr	r3, [r4, #0]
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	d480      	bmi.n	800dade <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800dbdc:	f7f9 fff6 	bl	8007bcc <HAL_GetTick>
 800dbe0:	1b40      	subs	r0, r0, r5
 800dbe2:	2864      	cmp	r0, #100	; 0x64
 800dbe4:	d9f7      	bls.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800dbe6:	2003      	movs	r0, #3
}
 800dbe8:	b003      	add	sp, #12
 800dbea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800dbee:	2172      	movs	r1, #114	; 0x72
 800dbf0:	4826      	ldr	r0, [pc, #152]	; (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800dbf2:	f7f6 fac3 	bl	800417c <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	e4ba      	b.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800dbfa:	2601      	movs	r6, #1
 800dbfc:	e4fa      	b.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800dbfe:	2500      	movs	r5, #0
      plli2sused = 1;
 800dc00:	2601      	movs	r6, #1
 800dc02:	e4e0      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800dc04:	2178      	movs	r1, #120	; 0x78
 800dc06:	4821      	ldr	r0, [pc, #132]	; (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800dc08:	f7f6 fab8 	bl	800417c <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dc0c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	e4b6      	b.n	800d580 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dc12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dc14:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800dc18:	f47f af12 	bne.w	800da40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800dc1c:	68e3      	ldr	r3, [r4, #12]
 800dc1e:	3b02      	subs	r3, #2
 800dc20:	2b0d      	cmp	r3, #13
 800dc22:	f200 80f7 	bhi.w	800de14 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800dc26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc28:	1e59      	subs	r1, r3, #1
 800dc2a:	291f      	cmp	r1, #31
 800dc2c:	f200 80f8 	bhi.w	800de20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dc30:	4a15      	ldr	r2, [pc, #84]	; (800dc88 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800dc32:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dc36:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800dc3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800dc3e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800dc42:	4303      	orrs	r3, r0
 800dc44:	6860      	ldr	r0, [r4, #4]
 800dc46:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800dc4a:	68e0      	ldr	r0, [r4, #12]
 800dc4c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800dc50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800dc54:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800dc58:	f023 031f 	bic.w	r3, r3, #31
 800dc5c:	430b      	orrs	r3, r1
 800dc5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	e6f3      	b.n	800da4e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800dc66:	f240 1105 	movw	r1, #261	; 0x105
 800dc6a:	4808      	ldr	r0, [pc, #32]	; (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800dc6c:	f7f6 fa86 	bl	800417c <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dc70:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	e58d      	b.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800dc76:	f240 110f 	movw	r1, #271	; 0x10f
 800dc7a:	4804      	ldr	r0, [pc, #16]	; (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800dc7c:	f7f6 fa7e 	bl	800417c <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dc80:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dc82:	6823      	ldr	r3, [r4, #0]
 800dc84:	e597      	b.n	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800dc86:	bf00      	nop
 800dc88:	40023800 	.word	0x40023800
 800dc8c:	0802bea8 	.word	0x0802bea8
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800dc90:	f240 1119 	movw	r1, #281	; 0x119
 800dc94:	489e      	ldr	r0, [pc, #632]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dc96:	f7f6 fa71 	bl	800417c <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dc9a:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dc9c:	6823      	ldr	r3, [r4, #0]
 800dc9e:	e59c      	b.n	800d7da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800dca0:	21fb      	movs	r1, #251	; 0xfb
 800dca2:	489b      	ldr	r0, [pc, #620]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dca4:	f7f6 fa6a 	bl	800417c <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dca8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	e55f      	b.n	800d76e <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dcae:	4899      	ldr	r0, [pc, #612]	; (800df14 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800dcb0:	4999      	ldr	r1, [pc, #612]	; (800df18 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800dcb2:	6882      	ldr	r2, [r0, #8]
 800dcb4:	4019      	ands	r1, r3
 800dcb6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800dcba:	430a      	orrs	r2, r1
 800dcbc:	6082      	str	r2, [r0, #8]
 800dcbe:	e532      	b.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800dcc0:	2188      	movs	r1, #136	; 0x88
 800dcc2:	4893      	ldr	r0, [pc, #588]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dcc4:	f7f6 fa5a 	bl	800417c <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dcc8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800dcca:	6823      	ldr	r3, [r4, #0]
 800dccc:	e46b      	b.n	800d5a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800dcce:	219c      	movs	r1, #156	; 0x9c
 800dcd0:	488f      	ldr	r0, [pc, #572]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dcd2:	f7f6 fa53 	bl	800417c <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800dcd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dcd8:	6823      	ldr	r3, [r4, #0]
 800dcda:	e47b      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800dcdc:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800dce0:	488b      	ldr	r0, [pc, #556]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dce2:	f7f6 fa4b 	bl	800417c <assert_failed>
 800dce6:	e68d      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800dce8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800dcec:	4888      	ldr	r0, [pc, #544]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dcee:	f7f6 fa45 	bl	800417c <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800dcf2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800dcf6:	e65f      	b.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800dcf8:	21f1      	movs	r1, #241	; 0xf1
 800dcfa:	4885      	ldr	r0, [pc, #532]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dcfc:	f7f6 fa3e 	bl	800417c <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dd00:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dd02:	6823      	ldr	r3, [r4, #0]
 800dd04:	e51d      	b.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800dd06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd0a:	4881      	ldr	r0, [pc, #516]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dd0c:	f7f6 fa36 	bl	800417c <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800dd10:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	e62c      	b.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800dd18:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800dd1c:	487c      	ldr	r0, [pc, #496]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dd1e:	f7f6 fa2d 	bl	800417c <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dd22:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800dd26:	6823      	ldr	r3, [r4, #0]
 800dd28:	e633      	b.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800dd2a:	f240 1173 	movw	r1, #371	; 0x173
 800dd2e:	4878      	ldr	r0, [pc, #480]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dd30:	f7f6 fa24 	bl	800417c <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dd34:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800dd36:	6823      	ldr	r3, [r4, #0]
 800dd38:	e5d5      	b.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800dd3a:	f240 117d 	movw	r1, #381	; 0x17d
 800dd3e:	4874      	ldr	r0, [pc, #464]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dd40:	f7f6 fa1c 	bl	800417c <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800dd44:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	e5dc      	b.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800dd4a:	f240 119f 	movw	r1, #415	; 0x19f
 800dd4e:	4870      	ldr	r0, [pc, #448]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dd50:	f7f6 fa14 	bl	800417c <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dd54:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800dd58:	6823      	ldr	r3, [r4, #0]
 800dd5a:	e5fa      	b.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800dd5c:	f240 1123 	movw	r1, #291	; 0x123
 800dd60:	486b      	ldr	r0, [pc, #428]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dd62:	f7f6 fa0b 	bl	800417c <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dd66:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	e544      	b.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800dd6c:	f240 1195 	movw	r1, #405	; 0x195
 800dd70:	4867      	ldr	r0, [pc, #412]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dd72:	f7f6 fa03 	bl	800417c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dd76:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800dd78:	6823      	ldr	r3, [r4, #0]
 800dd7a:	e5da      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800dd7c:	f240 112d 	movw	r1, #301	; 0x12d
 800dd80:	4863      	ldr	r0, [pc, #396]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dd82:	f7f6 f9fb 	bl	800417c <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dd86:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dd88:	6823      	ldr	r3, [r4, #0]
 800dd8a:	e543      	b.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800dd8c:	f240 1137 	movw	r1, #311	; 0x137
 800dd90:	485f      	ldr	r0, [pc, #380]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dd92:	f7f6 f9f3 	bl	800417c <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dd96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dd98:	6823      	ldr	r3, [r4, #0]
 800dd9a:	e54a      	b.n	800d832 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800dd9c:	f240 1141 	movw	r1, #321	; 0x141
 800dda0:	485b      	ldr	r0, [pc, #364]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dda2:	f7f6 f9eb 	bl	800417c <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dda6:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dda8:	6823      	ldr	r3, [r4, #0]
 800ddaa:	e551      	b.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800ddac:	f240 114b 	movw	r1, #331	; 0x14b
 800ddb0:	4857      	ldr	r0, [pc, #348]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800ddb2:	f7f6 f9e3 	bl	800417c <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ddb6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ddb8:	6823      	ldr	r3, [r4, #0]
 800ddba:	e558      	b.n	800d86e <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800ddbc:	f240 1155 	movw	r1, #341	; 0x155
 800ddc0:	4853      	ldr	r0, [pc, #332]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800ddc2:	f7f6 f9db 	bl	800417c <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ddc6:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ddc8:	6823      	ldr	r3, [r4, #0]
 800ddca:	e55f      	b.n	800d88c <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800ddcc:	f240 115f 	movw	r1, #351	; 0x15f
 800ddd0:	484f      	ldr	r0, [pc, #316]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800ddd2:	f7f6 f9d3 	bl	800417c <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ddd6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ddd8:	6823      	ldr	r3, [r4, #0]
 800ddda:	e566      	b.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800dddc:	f240 1169 	movw	r1, #361	; 0x169
 800dde0:	484b      	ldr	r0, [pc, #300]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dde2:	f7f6 f9cb 	bl	800417c <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800dde6:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dde8:	6823      	ldr	r3, [r4, #0]
 800ddea:	e56d      	b.n	800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800ddec:	f7f9 feee 	bl	8007bcc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ddf0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800ddf4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ddf6:	e006      	b.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ddf8:	f7f9 fee8 	bl	8007bcc <HAL_GetTick>
 800ddfc:	eba0 0008 	sub.w	r0, r0, r8
 800de00:	4548      	cmp	r0, r9
 800de02:	f63f aef0 	bhi.w	800dbe6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de08:	0799      	lsls	r1, r3, #30
 800de0a:	d5f5      	bpl.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800de0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800de0e:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800de12:	e47f      	b.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800de14:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800de18:	483d      	ldr	r0, [pc, #244]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800de1a:	f7f6 f9af 	bl	800417c <assert_failed>
 800de1e:	e702      	b.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800de20:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800de24:	483a      	ldr	r0, [pc, #232]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800de26:	f7f6 f9a9 	bl	800417c <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800de2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de2c:	1e59      	subs	r1, r3, #1
 800de2e:	e6ff      	b.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800de30:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800de34:	4836      	ldr	r0, [pc, #216]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800de36:	f7f6 f9a1 	bl	800417c <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800de3a:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800de3c:	6823      	ldr	r3, [r4, #0]
 800de3e:	e5eb      	b.n	800da18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800de40:	f44f 7105 	mov.w	r1, #532	; 0x214
 800de44:	4832      	ldr	r0, [pc, #200]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800de46:	f7f6 f999 	bl	800417c <assert_failed>
 800de4a:	e61d      	b.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800de4c:	f240 2105 	movw	r1, #517	; 0x205
 800de50:	482f      	ldr	r0, [pc, #188]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800de52:	f7f6 f993 	bl	800417c <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800de56:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800de58:	6823      	ldr	r3, [r4, #0]
 800de5a:	e5fe      	b.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800de5c:	f240 2116 	movw	r1, #534	; 0x216
 800de60:	482b      	ldr	r0, [pc, #172]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800de62:	f7f6 f98b 	bl	800417c <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800de66:	68e2      	ldr	r2, [r4, #12]
 800de68:	e618      	b.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800de6a:	f240 2115 	movw	r1, #533	; 0x215
 800de6e:	4828      	ldr	r0, [pc, #160]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800de70:	f7f6 f984 	bl	800417c <assert_failed>
 800de74:	e60d      	b.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800de76:	02d8      	lsls	r0, r3, #11
 800de78:	f57f ae79 	bpl.w	800db6e <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800de7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800de7e:	2a00      	cmp	r2, #0
 800de80:	f47f ae75 	bne.w	800db6e <HAL_RCCEx_PeriphCLKConfig+0x612>
 800de84:	e64e      	b.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800de86:	f44f 7111 	mov.w	r1, #580	; 0x244
 800de8a:	4821      	ldr	r0, [pc, #132]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800de8c:	f7f6 f976 	bl	800417c <assert_failed>
 800de90:	e640      	b.n	800db14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800de92:	6a20      	ldr	r0, [r4, #32]
 800de94:	2803      	cmp	r0, #3
 800de96:	d82c      	bhi.n	800def2 <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800de98:	491e      	ldr	r1, [pc, #120]	; (800df14 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800de9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800de9e:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800dea2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800dea6:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800deaa:	432a      	orrs	r2, r5
 800deac:	6965      	ldr	r5, [r4, #20]
 800deae:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800deb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800deb6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800deba:	e65f      	b.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800debc:	f240 216f 	movw	r1, #623	; 0x26f
 800dec0:	4813      	ldr	r0, [pc, #76]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dec2:	f7f6 f95b 	bl	800417c <assert_failed>
 800dec6:	e660      	b.n	800db8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800dec8:	f240 214d 	movw	r1, #589	; 0x24d
 800decc:	4810      	ldr	r0, [pc, #64]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dece:	f7f6 f955 	bl	800417c <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ded2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ded4:	1e59      	subs	r1, r3, #1
 800ded6:	e62f      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800ded8:	f240 214b 	movw	r1, #587	; 0x24b
 800dedc:	480c      	ldr	r0, [pc, #48]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dede:	f7f6 f94d 	bl	800417c <assert_failed>
 800dee2:	e624      	b.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800dee4:	480a      	ldr	r0, [pc, #40]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dee6:	f44f 711c 	mov.w	r1, #624	; 0x270
 800deea:	f7f6 f947 	bl	800417c <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800deee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800def0:	e650      	b.n	800db94 <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800def2:	4807      	ldr	r0, [pc, #28]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800def4:	f44f 7118 	mov.w	r1, #608	; 0x260
 800def8:	f7f6 f940 	bl	800417c <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800defc:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800defe:	6823      	ldr	r3, [r4, #0]
 800df00:	e7ca      	b.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800df02:	21b7      	movs	r1, #183	; 0xb7
 800df04:	4802      	ldr	r0, [pc, #8]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800df06:	f7f6 f939 	bl	800417c <assert_failed>
 800df0a:	f7ff bbc2 	b.w	800d692 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800df0e:	bf00      	nop
 800df10:	0802bea8 	.word	0x0802bea8
 800df14:	40023800 	.word	0x40023800
 800df18:	0ffffcff 	.word	0x0ffffcff

0800df1c <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800df1c:	b308      	cbz	r0, 800df62 <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800df1e:	4b12      	ldr	r3, [pc, #72]	; (800df68 <HAL_RNG_Init+0x4c>)
 800df20:	6802      	ldr	r2, [r0, #0]
 800df22:	429a      	cmp	r2, r3
{
 800df24:	b510      	push	{r4, lr}
 800df26:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800df28:	d003      	beq.n	800df32 <HAL_RNG_Init+0x16>
 800df2a:	21a3      	movs	r1, #163	; 0xa3
 800df2c:	480f      	ldr	r0, [pc, #60]	; (800df6c <HAL_RNG_Init+0x50>)
 800df2e:	f7f6 f925 	bl	800417c <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800df32:	7963      	ldrb	r3, [r4, #5]
 800df34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800df38:	b173      	cbz	r3, 800df58 <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800df3a:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800df3c:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800df3e:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800df40:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800df44:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800df46:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800df48:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800df4a:	f043 0304 	orr.w	r3, r3, #4
 800df4e:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800df50:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800df54:	60a2      	str	r2, [r4, #8]
}
 800df56:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800df58:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800df5a:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800df5c:	f7f7 fc68 	bl	8005830 <HAL_RNG_MspInit>
 800df60:	e7eb      	b.n	800df3a <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800df62:	2001      	movs	r0, #1
}
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	50060800 	.word	0x50060800
 800df6c:	0802bee4 	.word	0x0802bee4

0800df70 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800df70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df72:	460c      	mov	r4, r1
 800df74:	4615      	mov	r5, r2
 800df76:	b083      	sub	sp, #12
 800df78:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800df7a:	4425      	add	r5, r4
 800df7c:	f7f9 fe26 	bl	8007bcc <HAL_GetTick>
 800df80:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800df82:	f7f9 fe23 	bl	8007bcc <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800df86:	4b25      	ldr	r3, [pc, #148]	; (800e01c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800df88:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800df90:	fb05 f303 	mul.w	r3, r5, r3
 800df94:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df96:	6832      	ldr	r2, [r6, #0]
 800df98:	e001      	b.n	800df9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800df9a:	1c63      	adds	r3, r4, #1
 800df9c:	d106      	bne.n	800dfac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df9e:	6893      	ldr	r3, [r2, #8]
 800dfa0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800dfa4:	d1f9      	bne.n	800df9a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800dfa6:	4618      	mov	r0, r3
}
 800dfa8:	b003      	add	sp, #12
 800dfaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dfac:	f7f9 fe0e 	bl	8007bcc <HAL_GetTick>
 800dfb0:	1bc0      	subs	r0, r0, r7
 800dfb2:	42a8      	cmp	r0, r5
 800dfb4:	d208      	bcs.n	800dfc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800dfb6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800dfb8:	2b00      	cmp	r3, #0
      count--;
 800dfba:	9b01      	ldr	r3, [sp, #4]
 800dfbc:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800dfc0:	bf08      	it	eq
 800dfc2:	2500      	moveq	r5, #0
      count--;
 800dfc4:	9301      	str	r3, [sp, #4]
 800dfc6:	e7e6      	b.n	800df96 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfc8:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dfcc:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfce:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dfd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dfd6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfd8:	d014      	beq.n	800e004 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dfda:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800dfdc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800dfe0:	d007      	beq.n	800dff2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800dfe2:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800dfe4:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800dfe6:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800dfe8:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800dfec:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800dff0:	e7da      	b.n	800dfa8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dff8:	601a      	str	r2, [r3, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e000:	601a      	str	r2, [r3, #0]
 800e002:	e7ee      	b.n	800dfe2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e004:	68b2      	ldr	r2, [r6, #8]
 800e006:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e00a:	d002      	beq.n	800e012 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800e00c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e010:	d1e3      	bne.n	800dfda <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e018:	601a      	str	r2, [r3, #0]
 800e01a:	e7de      	b.n	800dfda <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800e01c:	2000027c 	.word	0x2000027c

0800e020 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e024:	4615      	mov	r5, r2
 800e026:	4698      	mov	r8, r3
 800e028:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e02a:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e02c:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e02e:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800e030:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e034:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e036:	f7f9 fdc9 	bl	8007bcc <HAL_GetTick>
 800e03a:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800e03e:	f7f9 fdc5 	bl	8007bcc <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e042:	4b2e      	ldr	r3, [pc, #184]	; (800e0fc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e044:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800e048:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e04a:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800e04c:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e04e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e052:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e056:	0d1b      	lsrs	r3, r3, #20
 800e058:	fb07 f303 	mul.w	r3, r7, r3
 800e05c:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800e05e:	e00b      	b.n	800e078 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e060:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800e064:	d106      	bne.n	800e074 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e066:	f899 300c 	ldrb.w	r3, [r9, #12]
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e070:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e074:	1c6b      	adds	r3, r5, #1
 800e076:	d106      	bne.n	800e086 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800e078:	6893      	ldr	r3, [r2, #8]
 800e07a:	4023      	ands	r3, r4
 800e07c:	d1f0      	bne.n	800e060 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800e07e:	4618      	mov	r0, r3
}
 800e080:	b003      	add	sp, #12
 800e082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e086:	f7f9 fda1 	bl	8007bcc <HAL_GetTick>
 800e08a:	eba0 0008 	sub.w	r0, r0, r8
 800e08e:	42b8      	cmp	r0, r7
 800e090:	d209      	bcs.n	800e0a6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800e092:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800e094:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800e096:	2b00      	cmp	r3, #0
      count--;
 800e098:	9b01      	ldr	r3, [sp, #4]
 800e09a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800e09e:	bf08      	it	eq
 800e0a0:	2700      	moveq	r7, #0
      count--;
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	e7e8      	b.n	800e078 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0a6:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e0aa:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0ac:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e0b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e0b4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0b6:	d014      	beq.n	800e0e2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e0b8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800e0ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e0be:	d007      	beq.n	800e0d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800e0c0:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800e0c2:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800e0c4:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800e0c6:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800e0ca:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800e0ce:	e7d7      	b.n	800e080 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e0d6:	601a      	str	r2, [r3, #0]
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e0de:	601a      	str	r2, [r3, #0]
 800e0e0:	e7ee      	b.n	800e0c0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0e2:	68b2      	ldr	r2, [r6, #8]
 800e0e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e0e8:	d002      	beq.n	800e0f0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800e0ea:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e0ee:	d1e3      	bne.n	800e0b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0f6:	601a      	str	r2, [r3, #0]
 800e0f8:	e7de      	b.n	800e0b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800e0fa:	bf00      	nop
 800e0fc:	2000027c 	.word	0x2000027c

0800e100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e100:	b570      	push	{r4, r5, r6, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	4613      	mov	r3, r2
 800e106:	460e      	mov	r6, r1
 800e108:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e10a:	9201      	str	r2, [sp, #4]
 800e10c:	460a      	mov	r2, r1
 800e10e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e112:	f7ff ff85 	bl	800e020 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800e116:	9b01      	ldr	r3, [sp, #4]
 800e118:	bb58      	cbnz	r0, 800e172 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e11a:	4919      	ldr	r1, [pc, #100]	; (800e180 <SPI_EndRxTxTransaction+0x80>)
 800e11c:	4a19      	ldr	r2, [pc, #100]	; (800e184 <SPI_EndRxTxTransaction+0x84>)
 800e11e:	6808      	ldr	r0, [r1, #0]
 800e120:	fba2 2000 	umull	r2, r0, r2, r0
 800e124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e128:	0d40      	lsrs	r0, r0, #21
 800e12a:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e12e:	686a      	ldr	r2, [r5, #4]
 800e130:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e134:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e136:	d107      	bne.n	800e148 <SPI_EndRxTxTransaction+0x48>
 800e138:	e012      	b.n	800e160 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800e13a:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e13c:	682a      	ldr	r2, [r5, #0]
      count--;
 800e13e:	3c01      	subs	r4, #1
 800e140:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e142:	6894      	ldr	r4, [r2, #8]
 800e144:	0622      	lsls	r2, r4, #24
 800e146:	d502      	bpl.n	800e14e <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800e148:	9c03      	ldr	r4, [sp, #12]
 800e14a:	2c00      	cmp	r4, #0
 800e14c:	d1f5      	bne.n	800e13a <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e14e:	4632      	mov	r2, r6
 800e150:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e154:	4628      	mov	r0, r5
 800e156:	f7ff ff63 	bl	800e020 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800e15a:	b950      	cbnz	r0, 800e172 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800e15c:	b004      	add	sp, #16
 800e15e:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e160:	461a      	mov	r2, r3
 800e162:	4631      	mov	r1, r6
 800e164:	4628      	mov	r0, r5
 800e166:	9301      	str	r3, [sp, #4]
 800e168:	f7ff ff02 	bl	800df70 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800e16c:	9b01      	ldr	r3, [sp, #4]
 800e16e:	2800      	cmp	r0, #0
 800e170:	d0ed      	beq.n	800e14e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e172:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800e174:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e176:	f043 0320 	orr.w	r3, r3, #32
 800e17a:	662b      	str	r3, [r5, #96]	; 0x60
}
 800e17c:	b004      	add	sp, #16
 800e17e:	bd70      	pop	{r4, r5, r6, pc}
 800e180:	2000027c 	.word	0x2000027c
 800e184:	165e9f81 	.word	0x165e9f81

0800e188 <HAL_SPI_Init>:
  if (hspi == NULL)
 800e188:	2800      	cmp	r0, #0
 800e18a:	f000 8128 	beq.w	800e3de <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e18e:	6802      	ldr	r2, [r0, #0]
 800e190:	4ba7      	ldr	r3, [pc, #668]	; (800e430 <HAL_SPI_Init+0x2a8>)
 800e192:	49a8      	ldr	r1, [pc, #672]	; (800e434 <HAL_SPI_Init+0x2ac>)
{
 800e194:	b570      	push	{r4, r5, r6, lr}
 800e196:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e198:	48a7      	ldr	r0, [pc, #668]	; (800e438 <HAL_SPI_Init+0x2b0>)
 800e19a:	429a      	cmp	r2, r3
 800e19c:	bf18      	it	ne
 800e19e:	4282      	cmpne	r2, r0
 800e1a0:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800e1a4:	bf14      	ite	ne
 800e1a6:	2301      	movne	r3, #1
 800e1a8:	2300      	moveq	r3, #0
 800e1aa:	428a      	cmp	r2, r1
 800e1ac:	bf0c      	ite	eq
 800e1ae:	2300      	moveq	r3, #0
 800e1b0:	f003 0301 	andne.w	r3, r3, #1
 800e1b4:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800e1b8:	4282      	cmp	r2, r0
 800e1ba:	bf0c      	ite	eq
 800e1bc:	2300      	moveq	r3, #0
 800e1be:	f003 0301 	andne.w	r3, r3, #1
 800e1c2:	428a      	cmp	r2, r1
 800e1c4:	bf0c      	ite	eq
 800e1c6:	2300      	moveq	r3, #0
 800e1c8:	f003 0301 	andne.w	r3, r3, #1
 800e1cc:	b11b      	cbz	r3, 800e1d6 <HAL_SPI_Init+0x4e>
 800e1ce:	4b9b      	ldr	r3, [pc, #620]	; (800e43c <HAL_SPI_Init+0x2b4>)
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	f040 80fe 	bne.w	800e3d2 <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800e1d6:	6863      	ldr	r3, [r4, #4]
 800e1d8:	b11b      	cbz	r3, 800e1e2 <HAL_SPI_Init+0x5a>
 800e1da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1de:	f040 80cd 	bne.w	800e37c <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800e1e2:	68a3      	ldr	r3, [r4, #8]
 800e1e4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800e1e8:	d003      	beq.n	800e1f2 <HAL_SPI_Init+0x6a>
 800e1ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1ee:	f040 80db 	bne.w	800e3a8 <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800e1f2:	68e2      	ldr	r2, [r4, #12]
 800e1f4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800e1f8:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800e1fc:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800e200:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e204:	bf18      	it	ne
 800e206:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800e20a:	bf14      	ite	ne
 800e20c:	2301      	movne	r3, #1
 800e20e:	2300      	moveq	r3, #0
 800e210:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800e214:	bf0c      	ite	eq
 800e216:	2300      	moveq	r3, #0
 800e218:	f003 0301 	andne.w	r3, r3, #1
 800e21c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e220:	bf0c      	ite	eq
 800e222:	2300      	moveq	r3, #0
 800e224:	f003 0301 	andne.w	r3, r3, #1
 800e228:	b12b      	cbz	r3, 800e236 <HAL_SPI_Init+0xae>
 800e22a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e22e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800e232:	f040 80f7 	bne.w	800e424 <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800e236:	69a3      	ldr	r3, [r4, #24]
 800e238:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800e23c:	d003      	beq.n	800e246 <HAL_SPI_Init+0xbe>
 800e23e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e242:	f040 80a1 	bne.w	800e388 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800e246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e248:	f033 0308 	bics.w	r3, r3, #8
 800e24c:	f040 80a6 	bne.w	800e39c <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e250:	69e3      	ldr	r3, [r4, #28]
 800e252:	f023 0318 	bic.w	r3, r3, #24
 800e256:	2b20      	cmp	r3, #32
 800e258:	d002      	beq.n	800e260 <HAL_SPI_Init+0xd8>
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f040 80d6 	bne.w	800e40c <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800e260:	6a23      	ldr	r3, [r4, #32]
 800e262:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800e266:	f040 80a8 	bne.w	800e3ba <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800e26a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e26c:	f033 0210 	bics.w	r2, r3, #16
 800e270:	d17b      	bne.n	800e36a <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e272:	2b00      	cmp	r3, #0
 800e274:	d16e      	bne.n	800e354 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	f033 0302 	bics.w	r3, r3, #2
 800e27c:	f040 80c0 	bne.w	800e400 <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800e280:	6963      	ldr	r3, [r4, #20]
 800e282:	2b01      	cmp	r3, #1
 800e284:	d904      	bls.n	800e290 <HAL_SPI_Init+0x108>
 800e286:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800e28a:	486d      	ldr	r0, [pc, #436]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e28c:	f7f5 ff76 	bl	800417c <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e290:	6863      	ldr	r3, [r4, #4]
 800e292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e296:	f000 80a4 	beq.w	800e3e2 <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e29a:	2300      	movs	r3, #0
 800e29c:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e29e:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800e2a0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e2a4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800e2a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	f000 808b 	beq.w	800e3c6 <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800e2b0:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800e2b2:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2b4:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800e2b6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800e2ba:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e2bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800e2c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e2c4:	bf8c      	ite	hi
 800e2c6:	f04f 0c00 	movhi.w	ip, #0
 800e2ca:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800e2ce:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e2d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e2d4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800e2d8:	d16c      	bne.n	800e3b4 <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e2da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e2dc:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800e2e0:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e2e2:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e2e6:	6923      	ldr	r3, [r4, #16]
 800e2e8:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800e2ec:	68a1      	ldr	r1, [r4, #8]
 800e2ee:	f003 0302 	and.w	r3, r3, #2
 800e2f2:	69a6      	ldr	r6, [r4, #24]
 800e2f4:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800e2f8:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e2fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e2fc:	431a      	orrs	r2, r3
 800e2fe:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e300:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e304:	f003 0301 	and.w	r3, r3, #1
 800e308:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e30a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e30c:	f003 0310 	and.w	r3, r3, #16
 800e310:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e312:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e314:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e318:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800e31c:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e320:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e322:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e326:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e32a:	430a      	orrs	r2, r1
 800e32c:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e32e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e330:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e334:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e338:	430a      	orrs	r2, r1
 800e33a:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e33c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e33e:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800e340:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e342:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e344:	69eb      	ldr	r3, [r5, #28]
 800e346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e34a:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e34c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e34e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800e352:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e354:	69e3      	ldr	r3, [r4, #28]
 800e356:	f023 0318 	bic.w	r3, r3, #24
 800e35a:	2b20      	cmp	r3, #32
 800e35c:	d001      	beq.n	800e362 <HAL_SPI_Init+0x1da>
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d15a      	bne.n	800e418 <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e362:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e364:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800e368:	e799      	b.n	800e29e <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800e36a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800e36e:	4834      	ldr	r0, [pc, #208]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e370:	f7f5 ff04 	bl	800417c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1ec      	bne.n	800e354 <HAL_SPI_Init+0x1cc>
 800e37a:	e77c      	b.n	800e276 <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800e37c:	f240 1147 	movw	r1, #327	; 0x147
 800e380:	482f      	ldr	r0, [pc, #188]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e382:	f7f5 fefb 	bl	800417c <assert_failed>
 800e386:	e72c      	b.n	800e1e2 <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800e388:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800e38c:	482c      	ldr	r0, [pc, #176]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e38e:	f7f5 fef5 	bl	800417c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800e392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e394:	f033 0308 	bics.w	r3, r3, #8
 800e398:	f43f af5a 	beq.w	800e250 <HAL_SPI_Init+0xc8>
 800e39c:	f240 114b 	movw	r1, #331	; 0x14b
 800e3a0:	4827      	ldr	r0, [pc, #156]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e3a2:	f7f5 feeb 	bl	800417c <assert_failed>
 800e3a6:	e753      	b.n	800e250 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800e3a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800e3ac:	4824      	ldr	r0, [pc, #144]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e3ae:	f7f5 fee5 	bl	800417c <assert_failed>
 800e3b2:	e71e      	b.n	800e1f2 <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e3b4:	2000      	movs	r0, #0
 800e3b6:	62a0      	str	r0, [r4, #40]	; 0x28
 800e3b8:	e792      	b.n	800e2e0 <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800e3ba:	f240 114d 	movw	r1, #333	; 0x14d
 800e3be:	4820      	ldr	r0, [pc, #128]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e3c0:	f7f5 fedc 	bl	800417c <assert_failed>
 800e3c4:	e751      	b.n	800e26a <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800e3c6:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800e3c8:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800e3cc:	f7f7 fa46 	bl	800585c <HAL_SPI_MspInit>
 800e3d0:	e76e      	b.n	800e2b0 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e3d2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800e3d6:	481a      	ldr	r0, [pc, #104]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e3d8:	f7f5 fed0 	bl	800417c <assert_failed>
 800e3dc:	e6fb      	b.n	800e1d6 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800e3de:	2001      	movs	r0, #1
}
 800e3e0:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e3e2:	69e3      	ldr	r3, [r4, #28]
 800e3e4:	f023 0318 	bic.w	r3, r3, #24
 800e3e8:	2b20      	cmp	r3, #32
 800e3ea:	f43f af58 	beq.w	800e29e <HAL_SPI_Init+0x116>
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f43f af55 	beq.w	800e29e <HAL_SPI_Init+0x116>
 800e3f4:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800e3f8:	4811      	ldr	r0, [pc, #68]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e3fa:	f7f5 febf 	bl	800417c <assert_failed>
 800e3fe:	e74e      	b.n	800e29e <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800e400:	f240 1151 	movw	r1, #337	; 0x151
 800e404:	480e      	ldr	r0, [pc, #56]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e406:	f7f5 feb9 	bl	800417c <assert_failed>
 800e40a:	e739      	b.n	800e280 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e40c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800e410:	480b      	ldr	r0, [pc, #44]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e412:	f7f5 feb3 	bl	800417c <assert_failed>
 800e416:	e723      	b.n	800e260 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e418:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e41c:	4808      	ldr	r0, [pc, #32]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e41e:	f7f5 fead 	bl	800417c <assert_failed>
 800e422:	e79e      	b.n	800e362 <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800e424:	f240 1149 	movw	r1, #329	; 0x149
 800e428:	4805      	ldr	r0, [pc, #20]	; (800e440 <HAL_SPI_Init+0x2b8>)
 800e42a:	f7f5 fea7 	bl	800417c <assert_failed>
 800e42e:	e702      	b.n	800e236 <HAL_SPI_Init+0xae>
 800e430:	40013000 	.word	0x40013000
 800e434:	40003c00 	.word	0x40003c00
 800e438:	40003800 	.word	0x40003800
 800e43c:	40015400 	.word	0x40015400
 800e440:	0802bf1c 	.word	0x0802bf1c

0800e444 <HAL_SPI_Transmit>:
{
 800e444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e448:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e44a:	6883      	ldr	r3, [r0, #8]
{
 800e44c:	b082      	sub	sp, #8
 800e44e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e450:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800e454:	460f      	mov	r7, r1
 800e456:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e458:	d171      	bne.n	800e53e <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800e45a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d076      	beq.n	800e550 <HAL_SPI_Transmit+0x10c>
 800e462:	2301      	movs	r3, #1
 800e464:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800e468:	f7f9 fbb0 	bl	8007bcc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800e46c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800e470:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800e472:	2b01      	cmp	r3, #1
 800e474:	b2d8      	uxtb	r0, r3
 800e476:	d009      	beq.n	800e48c <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800e478:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800e47a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800e47c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800e47e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e482:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800e486:	b002      	add	sp, #8
 800e488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800e48c:	2f00      	cmp	r7, #0
 800e48e:	d0f4      	beq.n	800e47a <HAL_SPI_Transmit+0x36>
 800e490:	fab8 f388 	clz	r3, r8
 800e494:	095b      	lsrs	r3, r3, #5
 800e496:	f1b8 0f00 	cmp.w	r8, #0
 800e49a:	d0ee      	beq.n	800e47a <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e49c:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e49e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e4a0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e4a4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4a8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e4aa:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800e4ae:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e4b2:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e4b4:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800e4b8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4bc:	68a3      	ldr	r3, [r4, #8]
 800e4be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800e4c2:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4c4:	d07a      	beq.n	800e5bc <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	0652      	lsls	r2, r2, #25
 800e4ca:	d403      	bmi.n	800e4d4 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4d2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4d4:	68e2      	ldr	r2, [r4, #12]
 800e4d6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e4da:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4dc:	d93c      	bls.n	800e558 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e4de:	b112      	cbz	r2, 800e4e6 <HAL_SPI_Transmit+0xa2>
 800e4e0:	f1b8 0f01 	cmp.w	r8, #1
 800e4e4:	d107      	bne.n	800e4f6 <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4e6:	f837 2b02 	ldrh.w	r2, [r7], #2
 800e4ea:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800e4ec:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4ee:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800e4f0:	3a01      	subs	r2, #1
 800e4f2:	b292      	uxth	r2, r2
 800e4f4:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800e4f6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800e4f8:	b292      	uxth	r2, r2
 800e4fa:	b992      	cbnz	r2, 800e522 <HAL_SPI_Transmit+0xde>
 800e4fc:	e072      	b.n	800e5e4 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e500:	f832 1b02 	ldrh.w	r1, [r2], #2
 800e504:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800e506:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e50a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800e50c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e510:	fa1f fc8c 	uxth.w	ip, ip
 800e514:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800e518:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d061      	beq.n	800e5e4 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	689a      	ldr	r2, [r3, #8]
 800e524:	0797      	lsls	r7, r2, #30
 800e526:	d4ea      	bmi.n	800e4fe <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e528:	f7f9 fb50 	bl	8007bcc <HAL_GetTick>
 800e52c:	1b80      	subs	r0, r0, r6
 800e52e:	42a8      	cmp	r0, r5
 800e530:	d301      	bcc.n	800e536 <HAL_SPI_Transmit+0xf2>
 800e532:	1c68      	adds	r0, r5, #1
 800e534:	d101      	bne.n	800e53a <HAL_SPI_Transmit+0xf6>
 800e536:	2d00      	cmp	r5, #0
 800e538:	d1ee      	bne.n	800e518 <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800e53a:	2003      	movs	r0, #3
 800e53c:	e79d      	b.n	800e47a <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e53e:	f240 313d 	movw	r1, #829	; 0x33d
 800e542:	4838      	ldr	r0, [pc, #224]	; (800e624 <HAL_SPI_Transmit+0x1e0>)
 800e544:	f7f5 fe1a 	bl	800417c <assert_failed>
  __HAL_LOCK(hspi);
 800e548:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d188      	bne.n	800e462 <HAL_SPI_Transmit+0x1e>
 800e550:	2002      	movs	r0, #2
}
 800e552:	b002      	add	sp, #8
 800e554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e558:	b112      	cbz	r2, 800e560 <HAL_SPI_Transmit+0x11c>
 800e55a:	f1b8 0f01 	cmp.w	r8, #1
 800e55e:	d10b      	bne.n	800e578 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800e560:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800e562:	b292      	uxth	r2, r2
 800e564:	2a01      	cmp	r2, #1
 800e566:	d953      	bls.n	800e610 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e568:	f837 2b02 	ldrh.w	r2, [r7], #2
 800e56c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800e56e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e570:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e572:	3b02      	subs	r3, #2
 800e574:	b29b      	uxth	r3, r3
 800e576:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800e578:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	b983      	cbnz	r3, 800e5a0 <HAL_SPI_Transmit+0x15c>
 800e57e:	e031      	b.n	800e5e4 <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800e580:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800e582:	b29b      	uxth	r3, r3
 800e584:	2b01      	cmp	r3, #1
 800e586:	d922      	bls.n	800e5ce <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e588:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e58a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800e58e:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800e590:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e592:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e594:	3b02      	subs	r3, #2
 800e596:	b29b      	uxth	r3, r3
 800e598:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800e59a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800e59c:	b289      	uxth	r1, r1
 800e59e:	b309      	cbz	r1, 800e5e4 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e5a0:	6822      	ldr	r2, [r4, #0]
 800e5a2:	6893      	ldr	r3, [r2, #8]
 800e5a4:	0799      	lsls	r1, r3, #30
 800e5a6:	d4eb      	bmi.n	800e580 <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5a8:	f7f9 fb10 	bl	8007bcc <HAL_GetTick>
 800e5ac:	1b80      	subs	r0, r0, r6
 800e5ae:	42a8      	cmp	r0, r5
 800e5b0:	d301      	bcc.n	800e5b6 <HAL_SPI_Transmit+0x172>
 800e5b2:	1c6b      	adds	r3, r5, #1
 800e5b4:	d1c1      	bne.n	800e53a <HAL_SPI_Transmit+0xf6>
 800e5b6:	2d00      	cmp	r5, #0
 800e5b8:	d1ef      	bne.n	800e59a <HAL_SPI_Transmit+0x156>
 800e5ba:	e7be      	b.n	800e53a <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e5c4:	681a      	ldr	r2, [r3, #0]
 800e5c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	e77b      	b.n	800e4c6 <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e5ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800e5d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800e5d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800e5d8:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800e5da:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800e5dc:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800e5de:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800e5e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e5e2:	e7da      	b.n	800e59a <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e5e4:	4632      	mov	r2, r6
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f7ff fd89 	bl	800e100 <SPI_EndRxTxTransaction>
 800e5ee:	b108      	cbz	r0, 800e5f4 <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e5f0:	2320      	movs	r3, #32
 800e5f2:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e5f4:	68a3      	ldr	r3, [r4, #8]
 800e5f6:	b933      	cbnz	r3, 800e606 <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e5f8:	6822      	ldr	r2, [r4, #0]
 800e5fa:	9301      	str	r3, [sp, #4]
 800e5fc:	68d3      	ldr	r3, [r2, #12]
 800e5fe:	9301      	str	r3, [sp, #4]
 800e600:	6893      	ldr	r3, [r2, #8]
 800e602:	9301      	str	r3, [sp, #4]
 800e604:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e606:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800e608:	3800      	subs	r0, #0
 800e60a:	bf18      	it	ne
 800e60c:	2001      	movne	r0, #1
error:
 800e60e:	e734      	b.n	800e47a <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e610:	783a      	ldrb	r2, [r7, #0]
 800e612:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800e614:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800e616:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800e618:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800e61a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800e61c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800e61e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800e620:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e622:	e7a9      	b.n	800e578 <HAL_SPI_Transmit+0x134>
 800e624:	0802bf1c 	.word	0x0802bf1c

0800e628 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e628:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e62a:	4a12      	ldr	r2, [pc, #72]	; (800e674 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e62c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800e630:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e632:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800e634:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800e636:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800e638:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e63a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e63e:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800e640:	680d      	ldr	r5, [r1, #0]
 800e642:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e644:	688d      	ldr	r5, [r1, #8]
 800e646:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e64a:	4d0b      	ldr	r5, [pc, #44]	; (800e678 <TIM_OC5_SetConfig+0x50>)
 800e64c:	42a8      	cmp	r0, r5
 800e64e:	d00a      	beq.n	800e666 <TIM_OC5_SetConfig+0x3e>
 800e650:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e654:	42a8      	cmp	r0, r5
 800e656:	d006      	beq.n	800e666 <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e658:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800e65a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800e65c:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800e65e:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e660:	6203      	str	r3, [r0, #32]
}
 800e662:	bc30      	pop	{r4, r5}
 800e664:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e666:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e66a:	694d      	ldr	r5, [r1, #20]
 800e66c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800e670:	e7f2      	b.n	800e658 <TIM_OC5_SetConfig+0x30>
 800e672:	bf00      	nop
 800e674:	fffeff8f 	.word	0xfffeff8f
 800e678:	40010000 	.word	0x40010000

0800e67c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e67c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e67e:	4a12      	ldr	r2, [pc, #72]	; (800e6c8 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e680:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800e684:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e686:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800e688:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800e68a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800e68c:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e68e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e692:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e694:	680d      	ldr	r5, [r1, #0]
 800e696:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e69a:	688d      	ldr	r5, [r1, #8]
 800e69c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6a0:	4d0a      	ldr	r5, [pc, #40]	; (800e6cc <TIM_OC6_SetConfig+0x50>)
 800e6a2:	42a8      	cmp	r0, r5
 800e6a4:	d00a      	beq.n	800e6bc <TIM_OC6_SetConfig+0x40>
 800e6a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e6aa:	42a8      	cmp	r0, r5
 800e6ac:	d006      	beq.n	800e6bc <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e6ae:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800e6b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800e6b2:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800e6b4:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6b6:	6203      	str	r3, [r0, #32]
}
 800e6b8:	bc30      	pop	{r4, r5}
 800e6ba:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e6bc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e6c0:	694d      	ldr	r5, [r1, #20]
 800e6c2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800e6c6:	e7f2      	b.n	800e6ae <TIM_OC6_SetConfig+0x32>
 800e6c8:	feff8fff 	.word	0xfeff8fff
 800e6cc:	40010000 	.word	0x40010000

0800e6d0 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6d0:	6a03      	ldr	r3, [r0, #32]
 800e6d2:	f023 0301 	bic.w	r3, r3, #1
{
 800e6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6da:	6203      	str	r3, [r0, #32]
{
 800e6dc:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800e6de:	6a05      	ldr	r5, [r0, #32]
{
 800e6e0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800e6e2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e6e6:	4b27      	ldr	r3, [pc, #156]	; (800e784 <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 800e6e8:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 800e6ec:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 800e6ee:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e6f0:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800e6f2:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 800e6f4:	688b      	ldr	r3, [r1, #8]
 800e6f6:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e6f8:	4b23      	ldr	r3, [pc, #140]	; (800e788 <TIM_OC1_SetConfig+0xb8>)
 800e6fa:	4298      	cmp	r0, r3
 800e6fc:	d00b      	beq.n	800e716 <TIM_OC1_SetConfig+0x46>
 800e6fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e702:	4298      	cmp	r0, r3
 800e704:	d007      	beq.n	800e716 <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800e706:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800e708:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800e70c:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800e70e:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800e710:	6225      	str	r5, [r4, #32]
}
 800e712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800e716:	68f3      	ldr	r3, [r6, #12]
 800e718:	f033 0208 	bics.w	r2, r3, #8
 800e71c:	d120      	bne.n	800e760 <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 800e71e:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800e722:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e724:	69b3      	ldr	r3, [r6, #24]
 800e726:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800e72a:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e72e:	d11e      	bne.n	800e76e <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e730:	6973      	ldr	r3, [r6, #20]
 800e732:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e736:	d106      	bne.n	800e746 <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e738:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800e73c:	69b1      	ldr	r1, [r6, #24]
 800e73e:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800e740:	ea42 0803 	orr.w	r8, r2, r3
 800e744:	e7df      	b.n	800e706 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e746:	f641 316d 	movw	r1, #7021	; 0x1b6d
 800e74a:	4810      	ldr	r0, [pc, #64]	; (800e78c <TIM_OC1_SetConfig+0xbc>)
 800e74c:	f7f5 fd16 	bl	800417c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e750:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800e754:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 800e756:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800e758:	430a      	orrs	r2, r1
 800e75a:	ea42 0803 	orr.w	r8, r2, r3
 800e75e:	e7d2      	b.n	800e706 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800e760:	f641 315f 	movw	r1, #7007	; 0x1b5f
 800e764:	4809      	ldr	r0, [pc, #36]	; (800e78c <TIM_OC1_SetConfig+0xbc>)
 800e766:	f7f5 fd09 	bl	800417c <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800e76a:	68f3      	ldr	r3, [r6, #12]
 800e76c:	e7d7      	b.n	800e71e <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e76e:	f641 316c 	movw	r1, #7020	; 0x1b6c
 800e772:	4806      	ldr	r0, [pc, #24]	; (800e78c <TIM_OC1_SetConfig+0xbc>)
 800e774:	f7f5 fd02 	bl	800417c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e778:	6973      	ldr	r3, [r6, #20]
 800e77a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e77e:	d0db      	beq.n	800e738 <TIM_OC1_SetConfig+0x68>
 800e780:	e7e1      	b.n	800e746 <TIM_OC1_SetConfig+0x76>
 800e782:	bf00      	nop
 800e784:	fffeff8c 	.word	0xfffeff8c
 800e788:	40010000 	.word	0x40010000
 800e78c:	0802bf54 	.word	0x0802bf54

0800e790 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e790:	6a03      	ldr	r3, [r0, #32]
 800e792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800e796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e79a:	6203      	str	r3, [r0, #32]
{
 800e79c:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800e79e:	6a05      	ldr	r5, [r0, #32]
{
 800e7a0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800e7a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e7a6:	4b29      	ldr	r3, [pc, #164]	; (800e84c <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 800e7a8:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 800e7ac:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 800e7ae:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e7b0:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800e7b2:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e7b4:	688b      	ldr	r3, [r1, #8]
 800e7b6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e7ba:	4b25      	ldr	r3, [pc, #148]	; (800e850 <TIM_OC3_SetConfig+0xc0>)
 800e7bc:	4298      	cmp	r0, r3
 800e7be:	d00b      	beq.n	800e7d8 <TIM_OC3_SetConfig+0x48>
 800e7c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e7c4:	4298      	cmp	r0, r3
 800e7c6:	d007      	beq.n	800e7d8 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800e7c8:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800e7ca:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800e7ce:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800e7d0:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800e7d2:	6225      	str	r5, [r4, #32]
}
 800e7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800e7d8:	68f3      	ldr	r3, [r6, #12]
 800e7da:	f033 0208 	bics.w	r2, r3, #8
 800e7de:	d123      	bne.n	800e828 <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 800e7e0:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e7e4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e7e8:	69b3      	ldr	r3, [r6, #24]
 800e7ea:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800e7ee:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e7f2:	d120      	bne.n	800e836 <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e7f4:	6973      	ldr	r3, [r6, #20]
 800e7f6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e7fa:	d107      	bne.n	800e80c <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e7fc:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e800:	69b1      	ldr	r1, [r6, #24]
 800e802:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800e806:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800e80a:	e7dd      	b.n	800e7c8 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e80c:	f641 4103 	movw	r1, #7171	; 0x1c03
 800e810:	4810      	ldr	r0, [pc, #64]	; (800e854 <TIM_OC3_SetConfig+0xc4>)
 800e812:	f7f5 fcb3 	bl	800417c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e816:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e81a:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e81c:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e81e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800e822:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800e826:	e7cf      	b.n	800e7c8 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800e828:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 800e82c:	4809      	ldr	r0, [pc, #36]	; (800e854 <TIM_OC3_SetConfig+0xc4>)
 800e82e:	f7f5 fca5 	bl	800417c <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e832:	68f3      	ldr	r3, [r6, #12]
 800e834:	e7d4      	b.n	800e7e0 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e836:	f641 4102 	movw	r1, #7170	; 0x1c02
 800e83a:	4806      	ldr	r0, [pc, #24]	; (800e854 <TIM_OC3_SetConfig+0xc4>)
 800e83c:	f7f5 fc9e 	bl	800417c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e840:	6973      	ldr	r3, [r6, #20]
 800e842:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e846:	d0d9      	beq.n	800e7fc <TIM_OC3_SetConfig+0x6c>
 800e848:	e7e0      	b.n	800e80c <TIM_OC3_SetConfig+0x7c>
 800e84a:	bf00      	nop
 800e84c:	fffeff8c 	.word	0xfffeff8c
 800e850:	40010000 	.word	0x40010000
 800e854:	0802bf54 	.word	0x0802bf54

0800e858 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e858:	6a03      	ldr	r3, [r0, #32]
 800e85a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800e85e:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e860:	6203      	str	r3, [r0, #32]
{
 800e862:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 800e864:	6a06      	ldr	r6, [r0, #32]
{
 800e866:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 800e868:	6842      	ldr	r2, [r0, #4]
{
 800e86a:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 800e86c:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800e86e:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e872:	4b16      	ldr	r3, [pc, #88]	; (800e8cc <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e874:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e876:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e878:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e87c:	68ab      	ldr	r3, [r5, #8]
 800e87e:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e882:	4b13      	ldr	r3, [pc, #76]	; (800e8d0 <TIM_OC4_SetConfig+0x78>)
 800e884:	4298      	cmp	r0, r3
 800e886:	d00a      	beq.n	800e89e <TIM_OC4_SetConfig+0x46>
 800e888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e88c:	4298      	cmp	r0, r3
 800e88e:	d006      	beq.n	800e89e <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 800e890:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800e892:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800e894:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800e896:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800e898:	6226      	str	r6, [r4, #32]
}
 800e89a:	b003      	add	sp, #12
 800e89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e89e:	696b      	ldr	r3, [r5, #20]
 800e8a0:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800e8a4:	d104      	bne.n	800e8b0 <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e8a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e8aa:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800e8ae:	e7ef      	b.n	800e890 <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e8b0:	f641 4141 	movw	r1, #7233	; 0x1c41
 800e8b4:	4807      	ldr	r0, [pc, #28]	; (800e8d4 <TIM_OC4_SetConfig+0x7c>)
 800e8b6:	9201      	str	r2, [sp, #4]
 800e8b8:	f7f5 fc60 	bl	800417c <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e8bc:	9a01      	ldr	r2, [sp, #4]
 800e8be:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e8c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e8c4:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800e8c8:	e7e2      	b.n	800e890 <TIM_OC4_SetConfig+0x38>
 800e8ca:	bf00      	nop
 800e8cc:	feff8cff 	.word	0xfeff8cff
 800e8d0:	40010000 	.word	0x40010000
 800e8d4:	0802bf54 	.word	0x0802bf54

0800e8d8 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e8d8:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800e8da:	684a      	ldr	r2, [r1, #4]
{
 800e8dc:	b570      	push	{r4, r5, r6, lr}
 800e8de:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 800e8e0:	6899      	ldr	r1, [r3, #8]
{
 800e8e2:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800e8e4:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 800e8e6:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 800e8ea:	4980      	ldr	r1, [pc, #512]	; (800eaec <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800e8ec:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800e8ee:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 800e8f2:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800e8f6:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800e8fa:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800e8fc:	f000 8104 	beq.w	800eb08 <TIM_SlaveTimer_SetConfig+0x230>
 800e900:	d953      	bls.n	800e9aa <TIM_SlaveTimer_SetConfig+0xd2>
 800e902:	2a60      	cmp	r2, #96	; 0x60
 800e904:	f000 816b 	beq.w	800ebde <TIM_SlaveTimer_SetConfig+0x306>
 800e908:	2a70      	cmp	r2, #112	; 0x70
 800e90a:	d151      	bne.n	800e9b0 <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800e90c:	4a78      	ldr	r2, [pc, #480]	; (800eaf0 <TIM_SlaveTimer_SetConfig+0x218>)
 800e90e:	4979      	ldr	r1, [pc, #484]	; (800eaf4 <TIM_SlaveTimer_SetConfig+0x21c>)
 800e910:	4293      	cmp	r3, r2
 800e912:	bf18      	it	ne
 800e914:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e918:	bf14      	ite	ne
 800e91a:	2201      	movne	r2, #1
 800e91c:	2200      	moveq	r2, #0
 800e91e:	428b      	cmp	r3, r1
 800e920:	bf0c      	ite	eq
 800e922:	2200      	moveq	r2, #0
 800e924:	f002 0201 	andne.w	r2, r2, #1
 800e928:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e92c:	428b      	cmp	r3, r1
 800e92e:	bf0c      	ite	eq
 800e930:	2200      	moveq	r2, #0
 800e932:	f002 0201 	andne.w	r2, r2, #1
 800e936:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e93a:	428b      	cmp	r3, r1
 800e93c:	bf0c      	ite	eq
 800e93e:	2200      	moveq	r2, #0
 800e940:	f002 0201 	andne.w	r2, r2, #1
 800e944:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800e948:	428b      	cmp	r3, r1
 800e94a:	bf0c      	ite	eq
 800e94c:	2200      	moveq	r2, #0
 800e94e:	f002 0201 	andne.w	r2, r2, #1
 800e952:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800e956:	428b      	cmp	r3, r1
 800e958:	bf0c      	ite	eq
 800e95a:	2200      	moveq	r2, #0
 800e95c:	f002 0201 	andne.w	r2, r2, #1
 800e960:	b11a      	cbz	r2, 800e96a <TIM_SlaveTimer_SetConfig+0x92>
 800e962:	4a65      	ldr	r2, [pc, #404]	; (800eaf8 <TIM_SlaveTimer_SetConfig+0x220>)
 800e964:	4293      	cmp	r3, r2
 800e966:	f040 81bb 	bne.w	800ece0 <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800e96a:	68e3      	ldr	r3, [r4, #12]
 800e96c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800e970:	f040 819e 	bne.w	800ecb0 <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e974:	68a3      	ldr	r3, [r4, #8]
 800e976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e97a:	bf18      	it	ne
 800e97c:	2b0a      	cmpne	r3, #10
 800e97e:	d003      	beq.n	800e988 <TIM_SlaveTimer_SetConfig+0xb0>
 800e980:	f033 0302 	bics.w	r3, r3, #2
 800e984:	f040 81a6 	bne.w	800ecd4 <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e988:	6921      	ldr	r1, [r4, #16]
 800e98a:	290f      	cmp	r1, #15
 800e98c:	f200 8175 	bhi.w	800ec7a <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800e990:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e992:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 800e996:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e998:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800e99a:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e99c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800e9a0:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e9a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9a6:	60ab      	str	r3, [r5, #8]
}
 800e9a8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800e9aa:	2a40      	cmp	r2, #64	; 0x40
 800e9ac:	d03a      	beq.n	800ea24 <TIM_SlaveTimer_SetConfig+0x14c>
 800e9ae:	d901      	bls.n	800e9b4 <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 800e9b0:	2001      	movs	r0, #1
}
 800e9b2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800e9b4:	2a20      	cmp	r2, #32
 800e9b6:	d002      	beq.n	800e9be <TIM_SlaveTimer_SetConfig+0xe6>
 800e9b8:	d930      	bls.n	800ea1c <TIM_SlaveTimer_SetConfig+0x144>
 800e9ba:	2a30      	cmp	r2, #48	; 0x30
 800e9bc:	d1f8      	bne.n	800e9b0 <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e9be:	4a4c      	ldr	r2, [pc, #304]	; (800eaf0 <TIM_SlaveTimer_SetConfig+0x218>)
 800e9c0:	484c      	ldr	r0, [pc, #304]	; (800eaf4 <TIM_SlaveTimer_SetConfig+0x21c>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	bf18      	it	ne
 800e9c6:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e9ca:	494c      	ldr	r1, [pc, #304]	; (800eafc <TIM_SlaveTimer_SetConfig+0x224>)
 800e9cc:	4c4c      	ldr	r4, [pc, #304]	; (800eb00 <TIM_SlaveTimer_SetConfig+0x228>)
 800e9ce:	bf14      	ite	ne
 800e9d0:	2201      	movne	r2, #1
 800e9d2:	2200      	moveq	r2, #0
 800e9d4:	4283      	cmp	r3, r0
 800e9d6:	bf0c      	ite	eq
 800e9d8:	2200      	moveq	r2, #0
 800e9da:	f002 0201 	andne.w	r2, r2, #1
 800e9de:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800e9e2:	428b      	cmp	r3, r1
 800e9e4:	bf0c      	ite	eq
 800e9e6:	2200      	moveq	r2, #0
 800e9e8:	f002 0201 	andne.w	r2, r2, #1
 800e9ec:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800e9f0:	42a3      	cmp	r3, r4
 800e9f2:	bf0c      	ite	eq
 800e9f4:	2200      	moveq	r2, #0
 800e9f6:	f002 0201 	andne.w	r2, r2, #1
 800e9fa:	4283      	cmp	r3, r0
 800e9fc:	bf0c      	ite	eq
 800e9fe:	2200      	moveq	r2, #0
 800ea00:	f002 0201 	andne.w	r2, r2, #1
 800ea04:	428b      	cmp	r3, r1
 800ea06:	bf0c      	ite	eq
 800ea08:	2200      	moveq	r2, #0
 800ea0a:	f002 0201 	andne.w	r2, r2, #1
 800ea0e:	b11a      	cbz	r2, 800ea18 <TIM_SlaveTimer_SetConfig+0x140>
 800ea10:	4a39      	ldr	r2, [pc, #228]	; (800eaf8 <TIM_SlaveTimer_SetConfig+0x220>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	f040 816a 	bne.w	800ecec <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 800ea18:	2000      	movs	r0, #0
}
 800ea1a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800ea1c:	f032 0210 	bics.w	r2, r2, #16
 800ea20:	d1c6      	bne.n	800e9b0 <TIM_SlaveTimer_SetConfig+0xd8>
 800ea22:	e7cc      	b.n	800e9be <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ea24:	4a32      	ldr	r2, [pc, #200]	; (800eaf0 <TIM_SlaveTimer_SetConfig+0x218>)
 800ea26:	4933      	ldr	r1, [pc, #204]	; (800eaf4 <TIM_SlaveTimer_SetConfig+0x21c>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	bf18      	it	ne
 800ea2c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ea30:	bf14      	ite	ne
 800ea32:	2201      	movne	r2, #1
 800ea34:	2200      	moveq	r2, #0
 800ea36:	428b      	cmp	r3, r1
 800ea38:	bf0c      	ite	eq
 800ea3a:	2200      	moveq	r2, #0
 800ea3c:	f002 0201 	andne.w	r2, r2, #1
 800ea40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ea44:	428b      	cmp	r3, r1
 800ea46:	bf0c      	ite	eq
 800ea48:	2200      	moveq	r2, #0
 800ea4a:	f002 0201 	andne.w	r2, r2, #1
 800ea4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ea52:	428b      	cmp	r3, r1
 800ea54:	bf0c      	ite	eq
 800ea56:	2200      	moveq	r2, #0
 800ea58:	f002 0201 	andne.w	r2, r2, #1
 800ea5c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ea60:	428b      	cmp	r3, r1
 800ea62:	bf0c      	ite	eq
 800ea64:	2200      	moveq	r2, #0
 800ea66:	f002 0201 	andne.w	r2, r2, #1
 800ea6a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800ea6e:	428b      	cmp	r3, r1
 800ea70:	bf0c      	ite	eq
 800ea72:	2200      	moveq	r2, #0
 800ea74:	f002 0201 	andne.w	r2, r2, #1
 800ea78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ea7c:	428b      	cmp	r3, r1
 800ea7e:	bf0c      	ite	eq
 800ea80:	2200      	moveq	r2, #0
 800ea82:	f002 0201 	andne.w	r2, r2, #1
 800ea86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ea8a:	428b      	cmp	r3, r1
 800ea8c:	bf0c      	ite	eq
 800ea8e:	2200      	moveq	r2, #0
 800ea90:	f002 0201 	andne.w	r2, r2, #1
 800ea94:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800ea98:	428b      	cmp	r3, r1
 800ea9a:	bf0c      	ite	eq
 800ea9c:	2200      	moveq	r2, #0
 800ea9e:	f002 0201 	andne.w	r2, r2, #1
 800eaa2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eaa6:	428b      	cmp	r3, r1
 800eaa8:	bf0c      	ite	eq
 800eaaa:	2200      	moveq	r2, #0
 800eaac:	f002 0201 	andne.w	r2, r2, #1
 800eab0:	b11a      	cbz	r2, 800eaba <TIM_SlaveTimer_SetConfig+0x1e2>
 800eab2:	4a14      	ldr	r2, [pc, #80]	; (800eb04 <TIM_SlaveTimer_SetConfig+0x22c>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	f040 8126 	bne.w	800ed06 <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800eaba:	6923      	ldr	r3, [r4, #16]
 800eabc:	2b0f      	cmp	r3, #15
 800eabe:	f200 80ea 	bhi.w	800ec96 <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800eac2:	6823      	ldr	r3, [r4, #0]
 800eac4:	2b05      	cmp	r3, #5
 800eac6:	f43f af73 	beq.w	800e9b0 <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 800eaca:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eacc:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800eace:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800ead0:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ead2:	6a19      	ldr	r1, [r3, #32]
 800ead4:	f021 0101 	bic.w	r1, r1, #1
 800ead8:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800eada:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eadc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800eae0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800eae4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800eae6:	621c      	str	r4, [r3, #32]
}
 800eae8:	bd70      	pop	{r4, r5, r6, pc}
 800eaea:	bf00      	nop
 800eaec:	fffefff8 	.word	0xfffefff8
 800eaf0:	40010000 	.word	0x40010000
 800eaf4:	40000400 	.word	0x40000400
 800eaf8:	40001800 	.word	0x40001800
 800eafc:	40000800 	.word	0x40000800
 800eb00:	40000c00 	.word	0x40000c00
 800eb04:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800eb08:	4a85      	ldr	r2, [pc, #532]	; (800ed20 <TIM_SlaveTimer_SetConfig+0x448>)
 800eb0a:	4986      	ldr	r1, [pc, #536]	; (800ed24 <TIM_SlaveTimer_SetConfig+0x44c>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	bf18      	it	ne
 800eb10:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800eb14:	bf14      	ite	ne
 800eb16:	2201      	movne	r2, #1
 800eb18:	2200      	moveq	r2, #0
 800eb1a:	428b      	cmp	r3, r1
 800eb1c:	bf0c      	ite	eq
 800eb1e:	2200      	moveq	r2, #0
 800eb20:	f002 0201 	andne.w	r2, r2, #1
 800eb24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb28:	428b      	cmp	r3, r1
 800eb2a:	bf0c      	ite	eq
 800eb2c:	2200      	moveq	r2, #0
 800eb2e:	f002 0201 	andne.w	r2, r2, #1
 800eb32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb36:	428b      	cmp	r3, r1
 800eb38:	bf0c      	ite	eq
 800eb3a:	2200      	moveq	r2, #0
 800eb3c:	f002 0201 	andne.w	r2, r2, #1
 800eb40:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800eb44:	428b      	cmp	r3, r1
 800eb46:	bf0c      	ite	eq
 800eb48:	2200      	moveq	r2, #0
 800eb4a:	f002 0201 	andne.w	r2, r2, #1
 800eb4e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800eb52:	428b      	cmp	r3, r1
 800eb54:	bf0c      	ite	eq
 800eb56:	2200      	moveq	r2, #0
 800eb58:	f002 0201 	andne.w	r2, r2, #1
 800eb5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb60:	428b      	cmp	r3, r1
 800eb62:	bf0c      	ite	eq
 800eb64:	2200      	moveq	r2, #0
 800eb66:	f002 0201 	andne.w	r2, r2, #1
 800eb6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb6e:	428b      	cmp	r3, r1
 800eb70:	bf0c      	ite	eq
 800eb72:	2200      	moveq	r2, #0
 800eb74:	f002 0201 	andne.w	r2, r2, #1
 800eb78:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800eb7c:	428b      	cmp	r3, r1
 800eb7e:	bf0c      	ite	eq
 800eb80:	2200      	moveq	r2, #0
 800eb82:	f002 0201 	andne.w	r2, r2, #1
 800eb86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb8a:	428b      	cmp	r3, r1
 800eb8c:	bf0c      	ite	eq
 800eb8e:	2200      	moveq	r2, #0
 800eb90:	f002 0201 	andne.w	r2, r2, #1
 800eb94:	b11a      	cbz	r2, 800eb9e <TIM_SlaveTimer_SetConfig+0x2c6>
 800eb96:	4a64      	ldr	r2, [pc, #400]	; (800ed28 <TIM_SlaveTimer_SetConfig+0x450>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	f040 80ba 	bne.w	800ed12 <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800eb9e:	68a3      	ldr	r3, [r4, #8]
 800eba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eba4:	bf18      	it	ne
 800eba6:	2b0a      	cmpne	r3, #10
 800eba8:	d003      	beq.n	800ebb2 <TIM_SlaveTimer_SetConfig+0x2da>
 800ebaa:	f033 0302 	bics.w	r3, r3, #2
 800ebae:	f040 808b 	bne.w	800ecc8 <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ebb2:	6926      	ldr	r6, [r4, #16]
 800ebb4:	2e0f      	cmp	r6, #15
 800ebb6:	d874      	bhi.n	800eca2 <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebb8:	682b      	ldr	r3, [r5, #0]
 800ebba:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800ebbc:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebbe:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ebc0:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebc4:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800ebc8:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800ebca:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebcc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebce:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ebd0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ebd4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ebd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ebda:	6219      	str	r1, [r3, #32]
}
 800ebdc:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ebde:	4a50      	ldr	r2, [pc, #320]	; (800ed20 <TIM_SlaveTimer_SetConfig+0x448>)
 800ebe0:	4950      	ldr	r1, [pc, #320]	; (800ed24 <TIM_SlaveTimer_SetConfig+0x44c>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	bf18      	it	ne
 800ebe6:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ebea:	bf14      	ite	ne
 800ebec:	2201      	movne	r2, #1
 800ebee:	2200      	moveq	r2, #0
 800ebf0:	428b      	cmp	r3, r1
 800ebf2:	bf0c      	ite	eq
 800ebf4:	2200      	moveq	r2, #0
 800ebf6:	f002 0201 	andne.w	r2, r2, #1
 800ebfa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ebfe:	428b      	cmp	r3, r1
 800ec00:	bf0c      	ite	eq
 800ec02:	2200      	moveq	r2, #0
 800ec04:	f002 0201 	andne.w	r2, r2, #1
 800ec08:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec0c:	428b      	cmp	r3, r1
 800ec0e:	bf0c      	ite	eq
 800ec10:	2200      	moveq	r2, #0
 800ec12:	f002 0201 	andne.w	r2, r2, #1
 800ec16:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ec1a:	428b      	cmp	r3, r1
 800ec1c:	bf0c      	ite	eq
 800ec1e:	2200      	moveq	r2, #0
 800ec20:	f002 0201 	andne.w	r2, r2, #1
 800ec24:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800ec28:	428b      	cmp	r3, r1
 800ec2a:	bf0c      	ite	eq
 800ec2c:	2200      	moveq	r2, #0
 800ec2e:	f002 0201 	andne.w	r2, r2, #1
 800ec32:	b112      	cbz	r2, 800ec3a <TIM_SlaveTimer_SetConfig+0x362>
 800ec34:	4a3d      	ldr	r2, [pc, #244]	; (800ed2c <TIM_SlaveTimer_SetConfig+0x454>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d15f      	bne.n	800ecfa <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ec3a:	68a3      	ldr	r3, [r4, #8]
 800ec3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec40:	bf18      	it	ne
 800ec42:	2b0a      	cmpne	r3, #10
 800ec44:	d002      	beq.n	800ec4c <TIM_SlaveTimer_SetConfig+0x374>
 800ec46:	f033 0302 	bics.w	r3, r3, #2
 800ec4a:	d137      	bne.n	800ecbc <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ec4c:	6926      	ldr	r6, [r4, #16]
 800ec4e:	2e0f      	cmp	r6, #15
 800ec50:	d81a      	bhi.n	800ec88 <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec52:	682b      	ldr	r3, [r5, #0]
 800ec54:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec56:	6a18      	ldr	r0, [r3, #32]
 800ec58:	f020 0010 	bic.w	r0, r0, #16
 800ec5c:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800ec5e:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800ec60:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800ec62:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ec64:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ec68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ec6c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800ec70:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800ec74:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec76:	621a      	str	r2, [r3, #32]
}
 800ec78:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ec7a:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 800ec7e:	482c      	ldr	r0, [pc, #176]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ec80:	f7f5 fa7c 	bl	800417c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ec84:	6921      	ldr	r1, [r4, #16]
 800ec86:	e683      	b.n	800e990 <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ec88:	f641 511f 	movw	r1, #7455	; 0x1d1f
 800ec8c:	4828      	ldr	r0, [pc, #160]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ec8e:	f7f5 fa75 	bl	800417c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec92:	6926      	ldr	r6, [r4, #16]
 800ec94:	e7dd      	b.n	800ec52 <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ec96:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 800ec9a:	4825      	ldr	r0, [pc, #148]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ec9c:	f7f5 fa6e 	bl	800417c <assert_failed>
 800eca0:	e70f      	b.n	800eac2 <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800eca2:	f641 5111 	movw	r1, #7441	; 0x1d11
 800eca6:	4822      	ldr	r0, [pc, #136]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800eca8:	f7f5 fa68 	bl	800417c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ecac:	6926      	ldr	r6, [r4, #16]
 800ecae:	e783      	b.n	800ebb8 <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800ecb0:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 800ecb4:	481e      	ldr	r0, [pc, #120]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ecb6:	f7f5 fa61 	bl	800417c <assert_failed>
 800ecba:	e65b      	b.n	800e974 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ecbc:	f641 511e 	movw	r1, #7454	; 0x1d1e
 800ecc0:	481b      	ldr	r0, [pc, #108]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ecc2:	f7f5 fa5b 	bl	800417c <assert_failed>
 800ecc6:	e7c1      	b.n	800ec4c <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ecc8:	f641 5110 	movw	r1, #7440	; 0x1d10
 800eccc:	4818      	ldr	r0, [pc, #96]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ecce:	f7f5 fa55 	bl	800417c <assert_failed>
 800ecd2:	e76e      	b.n	800ebb2 <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ecd4:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800ecd8:	4815      	ldr	r0, [pc, #84]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ecda:	f7f5 fa4f 	bl	800417c <assert_failed>
 800ecde:	e653      	b.n	800e988 <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800ece0:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 800ece4:	4812      	ldr	r0, [pc, #72]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ece6:	f7f5 fa49 	bl	800417c <assert_failed>
 800ecea:	e63e      	b.n	800e96a <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ecec:	f641 512e 	movw	r1, #7470	; 0x1d2e
 800ecf0:	480f      	ldr	r0, [pc, #60]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ecf2:	f7f5 fa43 	bl	800417c <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800ecf6:	2000      	movs	r0, #0
}
 800ecf8:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ecfa:	f641 511d 	movw	r1, #7453	; 0x1d1d
 800ecfe:	480c      	ldr	r0, [pc, #48]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ed00:	f7f5 fa3c 	bl	800417c <assert_failed>
 800ed04:	e799      	b.n	800ec3a <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ed06:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 800ed0a:	4809      	ldr	r0, [pc, #36]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ed0c:	f7f5 fa36 	bl	800417c <assert_failed>
 800ed10:	e6d3      	b.n	800eaba <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ed12:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800ed16:	4806      	ldr	r0, [pc, #24]	; (800ed30 <TIM_SlaveTimer_SetConfig+0x458>)
 800ed18:	f7f5 fa30 	bl	800417c <assert_failed>
 800ed1c:	e73f      	b.n	800eb9e <TIM_SlaveTimer_SetConfig+0x2c6>
 800ed1e:	bf00      	nop
 800ed20:	40010000 	.word	0x40010000
 800ed24:	40000400 	.word	0x40000400
 800ed28:	40002000 	.word	0x40002000
 800ed2c:	40001800 	.word	0x40001800
 800ed30:	0802bf54 	.word	0x0802bf54

0800ed34 <HAL_TIM_Base_Start>:
{
 800ed34:	b538      	push	{r3, r4, r5, lr}
 800ed36:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ed38:	4b52      	ldr	r3, [pc, #328]	; (800ee84 <HAL_TIM_Base_Start+0x150>)
 800ed3a:	4d53      	ldr	r5, [pc, #332]	; (800ee88 <HAL_TIM_Base_Start+0x154>)
 800ed3c:	6822      	ldr	r2, [r4, #0]
 800ed3e:	4953      	ldr	r1, [pc, #332]	; (800ee8c <HAL_TIM_Base_Start+0x158>)
 800ed40:	429a      	cmp	r2, r3
 800ed42:	bf18      	it	ne
 800ed44:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ed48:	4851      	ldr	r0, [pc, #324]	; (800ee90 <HAL_TIM_Base_Start+0x15c>)
 800ed4a:	bf14      	ite	ne
 800ed4c:	2301      	movne	r3, #1
 800ed4e:	2300      	moveq	r3, #0
 800ed50:	42aa      	cmp	r2, r5
 800ed52:	bf0c      	ite	eq
 800ed54:	2300      	moveq	r3, #0
 800ed56:	f003 0301 	andne.w	r3, r3, #1
 800ed5a:	428a      	cmp	r2, r1
 800ed5c:	bf0c      	ite	eq
 800ed5e:	2300      	moveq	r3, #0
 800ed60:	f003 0301 	andne.w	r3, r3, #1
 800ed64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed68:	4282      	cmp	r2, r0
 800ed6a:	bf0c      	ite	eq
 800ed6c:	2300      	moveq	r3, #0
 800ed6e:	f003 0301 	andne.w	r3, r3, #1
 800ed72:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800ed76:	428a      	cmp	r2, r1
 800ed78:	bf0c      	ite	eq
 800ed7a:	2300      	moveq	r3, #0
 800ed7c:	f003 0301 	andne.w	r3, r3, #1
 800ed80:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800ed84:	4282      	cmp	r2, r0
 800ed86:	bf0c      	ite	eq
 800ed88:	2300      	moveq	r3, #0
 800ed8a:	f003 0301 	andne.w	r3, r3, #1
 800ed8e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800ed92:	428a      	cmp	r2, r1
 800ed94:	bf0c      	ite	eq
 800ed96:	2300      	moveq	r3, #0
 800ed98:	f003 0301 	andne.w	r3, r3, #1
 800ed9c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800eda0:	4282      	cmp	r2, r0
 800eda2:	bf0c      	ite	eq
 800eda4:	2300      	moveq	r3, #0
 800eda6:	f003 0301 	andne.w	r3, r3, #1
 800edaa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800edae:	428a      	cmp	r2, r1
 800edb0:	bf0c      	ite	eq
 800edb2:	2300      	moveq	r3, #0
 800edb4:	f003 0301 	andne.w	r3, r3, #1
 800edb8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800edbc:	4282      	cmp	r2, r0
 800edbe:	bf0c      	ite	eq
 800edc0:	2300      	moveq	r3, #0
 800edc2:	f003 0301 	andne.w	r3, r3, #1
 800edc6:	428a      	cmp	r2, r1
 800edc8:	bf0c      	ite	eq
 800edca:	2300      	moveq	r3, #0
 800edcc:	f003 0301 	andne.w	r3, r3, #1
 800edd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800edd4:	428a      	cmp	r2, r1
 800edd6:	bf0c      	ite	eq
 800edd8:	2300      	moveq	r3, #0
 800edda:	f003 0301 	andne.w	r3, r3, #1
 800edde:	b113      	cbz	r3, 800ede6 <HAL_TIM_Base_Start+0xb2>
 800ede0:	4b2c      	ldr	r3, [pc, #176]	; (800ee94 <HAL_TIM_Base_Start+0x160>)
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d143      	bne.n	800ee6e <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 800ede6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800edea:	2b01      	cmp	r3, #1
 800edec:	d13b      	bne.n	800ee66 <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edee:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800edf0:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edf2:	4b24      	ldr	r3, [pc, #144]	; (800ee84 <HAL_TIM_Base_Start+0x150>)
 800edf4:	4d24      	ldr	r5, [pc, #144]	; (800ee88 <HAL_TIM_Base_Start+0x154>)
 800edf6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800edfa:	bf18      	it	ne
 800edfc:	429a      	cmpne	r2, r3
 800edfe:	4923      	ldr	r1, [pc, #140]	; (800ee8c <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ee00:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee04:	bf0c      	ite	eq
 800ee06:	2301      	moveq	r3, #1
 800ee08:	2300      	movne	r3, #0
 800ee0a:	4c21      	ldr	r4, [pc, #132]	; (800ee90 <HAL_TIM_Base_Start+0x15c>)
 800ee0c:	42aa      	cmp	r2, r5
 800ee0e:	bf08      	it	eq
 800ee10:	f043 0301 	orreq.w	r3, r3, #1
 800ee14:	4820      	ldr	r0, [pc, #128]	; (800ee98 <HAL_TIM_Base_Start+0x164>)
 800ee16:	428a      	cmp	r2, r1
 800ee18:	bf08      	it	eq
 800ee1a:	f043 0301 	orreq.w	r3, r3, #1
 800ee1e:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800ee22:	42a2      	cmp	r2, r4
 800ee24:	bf08      	it	eq
 800ee26:	f043 0301 	orreq.w	r3, r3, #1
 800ee2a:	4282      	cmp	r2, r0
 800ee2c:	bf08      	it	eq
 800ee2e:	f043 0301 	orreq.w	r3, r3, #1
 800ee32:	428a      	cmp	r2, r1
 800ee34:	bf08      	it	eq
 800ee36:	f043 0301 	orreq.w	r3, r3, #1
 800ee3a:	b933      	cbnz	r3, 800ee4a <HAL_TIM_Base_Start+0x116>
 800ee3c:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800ee40:	1a10      	subs	r0, r2, r0
 800ee42:	fab0 f080 	clz	r0, r0
 800ee46:	0940      	lsrs	r0, r0, #5
 800ee48:	b1b8      	cbz	r0, 800ee7a <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee4a:	6891      	ldr	r1, [r2, #8]
 800ee4c:	4b13      	ldr	r3, [pc, #76]	; (800ee9c <HAL_TIM_Base_Start+0x168>)
 800ee4e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee50:	2b06      	cmp	r3, #6
 800ee52:	d00a      	beq.n	800ee6a <HAL_TIM_Base_Start+0x136>
 800ee54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee58:	d007      	beq.n	800ee6a <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 800ee5a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800ee5c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800ee5e:	f043 0301 	orr.w	r3, r3, #1
 800ee62:	6013      	str	r3, [r2, #0]
}
 800ee64:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ee66:	2001      	movs	r0, #1
}
 800ee68:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800ee6a:	2000      	movs	r0, #0
}
 800ee6c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ee6e:	f240 1197 	movw	r1, #407	; 0x197
 800ee72:	480b      	ldr	r0, [pc, #44]	; (800eea0 <HAL_TIM_Base_Start+0x16c>)
 800ee74:	f7f5 f982 	bl	800417c <assert_failed>
 800ee78:	e7b5      	b.n	800ede6 <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 800ee7a:	6813      	ldr	r3, [r2, #0]
 800ee7c:	f043 0301 	orr.w	r3, r3, #1
 800ee80:	6013      	str	r3, [r2, #0]
}
 800ee82:	bd38      	pop	{r3, r4, r5, pc}
 800ee84:	40010000 	.word	0x40010000
 800ee88:	40000400 	.word	0x40000400
 800ee8c:	40000800 	.word	0x40000800
 800ee90:	40000c00 	.word	0x40000c00
 800ee94:	40002000 	.word	0x40002000
 800ee98:	40010400 	.word	0x40010400
 800ee9c:	00010007 	.word	0x00010007
 800eea0:	0802bf54 	.word	0x0802bf54

0800eea4 <HAL_TIM_Base_Start_IT>:
{
 800eea4:	b538      	push	{r3, r4, r5, lr}
 800eea6:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800eea8:	4b54      	ldr	r3, [pc, #336]	; (800effc <HAL_TIM_Base_Start_IT+0x158>)
 800eeaa:	4d55      	ldr	r5, [pc, #340]	; (800f000 <HAL_TIM_Base_Start_IT+0x15c>)
 800eeac:	6822      	ldr	r2, [r4, #0]
 800eeae:	4955      	ldr	r1, [pc, #340]	; (800f004 <HAL_TIM_Base_Start_IT+0x160>)
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	bf18      	it	ne
 800eeb4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800eeb8:	4853      	ldr	r0, [pc, #332]	; (800f008 <HAL_TIM_Base_Start_IT+0x164>)
 800eeba:	bf14      	ite	ne
 800eebc:	2301      	movne	r3, #1
 800eebe:	2300      	moveq	r3, #0
 800eec0:	42aa      	cmp	r2, r5
 800eec2:	bf0c      	ite	eq
 800eec4:	2300      	moveq	r3, #0
 800eec6:	f003 0301 	andne.w	r3, r3, #1
 800eeca:	428a      	cmp	r2, r1
 800eecc:	bf0c      	ite	eq
 800eece:	2300      	moveq	r3, #0
 800eed0:	f003 0301 	andne.w	r3, r3, #1
 800eed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eed8:	4282      	cmp	r2, r0
 800eeda:	bf0c      	ite	eq
 800eedc:	2300      	moveq	r3, #0
 800eede:	f003 0301 	andne.w	r3, r3, #1
 800eee2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800eee6:	428a      	cmp	r2, r1
 800eee8:	bf0c      	ite	eq
 800eeea:	2300      	moveq	r3, #0
 800eeec:	f003 0301 	andne.w	r3, r3, #1
 800eef0:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800eef4:	4282      	cmp	r2, r0
 800eef6:	bf0c      	ite	eq
 800eef8:	2300      	moveq	r3, #0
 800eefa:	f003 0301 	andne.w	r3, r3, #1
 800eefe:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800ef02:	428a      	cmp	r2, r1
 800ef04:	bf0c      	ite	eq
 800ef06:	2300      	moveq	r3, #0
 800ef08:	f003 0301 	andne.w	r3, r3, #1
 800ef0c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800ef10:	4282      	cmp	r2, r0
 800ef12:	bf0c      	ite	eq
 800ef14:	2300      	moveq	r3, #0
 800ef16:	f003 0301 	andne.w	r3, r3, #1
 800ef1a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800ef1e:	428a      	cmp	r2, r1
 800ef20:	bf0c      	ite	eq
 800ef22:	2300      	moveq	r3, #0
 800ef24:	f003 0301 	andne.w	r3, r3, #1
 800ef28:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800ef2c:	4282      	cmp	r2, r0
 800ef2e:	bf0c      	ite	eq
 800ef30:	2300      	moveq	r3, #0
 800ef32:	f003 0301 	andne.w	r3, r3, #1
 800ef36:	428a      	cmp	r2, r1
 800ef38:	bf0c      	ite	eq
 800ef3a:	2300      	moveq	r3, #0
 800ef3c:	f003 0301 	andne.w	r3, r3, #1
 800ef40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ef44:	428a      	cmp	r2, r1
 800ef46:	bf0c      	ite	eq
 800ef48:	2300      	moveq	r3, #0
 800ef4a:	f003 0301 	andne.w	r3, r3, #1
 800ef4e:	b113      	cbz	r3, 800ef56 <HAL_TIM_Base_Start_IT+0xb2>
 800ef50:	4b2e      	ldr	r3, [pc, #184]	; (800f00c <HAL_TIM_Base_Start_IT+0x168>)
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d147      	bne.n	800efe6 <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 800ef56:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d13f      	bne.n	800efde <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef5e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ef60:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef62:	4b26      	ldr	r3, [pc, #152]	; (800effc <HAL_TIM_Base_Start_IT+0x158>)
 800ef64:	4d26      	ldr	r5, [pc, #152]	; (800f000 <HAL_TIM_Base_Start_IT+0x15c>)
 800ef66:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800ef6a:	bf18      	it	ne
 800ef6c:	429a      	cmpne	r2, r3
 800ef6e:	4825      	ldr	r0, [pc, #148]	; (800f004 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ef70:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef74:	bf0c      	ite	eq
 800ef76:	2301      	moveq	r3, #1
 800ef78:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef7a:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef7c:	42aa      	cmp	r2, r5
 800ef7e:	bf08      	it	eq
 800ef80:	f043 0301 	orreq.w	r3, r3, #1
 800ef84:	4c20      	ldr	r4, [pc, #128]	; (800f008 <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef86:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef8a:	4282      	cmp	r2, r0
 800ef8c:	bf08      	it	eq
 800ef8e:	f043 0301 	orreq.w	r3, r3, #1
 800ef92:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef96:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef98:	42a2      	cmp	r2, r4
 800ef9a:	bf08      	it	eq
 800ef9c:	f043 0301 	orreq.w	r3, r3, #1
 800efa0:	491b      	ldr	r1, [pc, #108]	; (800f010 <HAL_TIM_Base_Start_IT+0x16c>)
 800efa2:	4282      	cmp	r2, r0
 800efa4:	bf08      	it	eq
 800efa6:	f043 0301 	orreq.w	r3, r3, #1
 800efaa:	428a      	cmp	r2, r1
 800efac:	bf08      	it	eq
 800efae:	f043 0301 	orreq.w	r3, r3, #1
 800efb2:	b933      	cbnz	r3, 800efc2 <HAL_TIM_Base_Start_IT+0x11e>
 800efb4:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800efb8:	1a10      	subs	r0, r2, r0
 800efba:	fab0 f080 	clz	r0, r0
 800efbe:	0940      	lsrs	r0, r0, #5
 800efc0:	b1b8      	cbz	r0, 800eff2 <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efc2:	6891      	ldr	r1, [r2, #8]
 800efc4:	4b13      	ldr	r3, [pc, #76]	; (800f014 <HAL_TIM_Base_Start_IT+0x170>)
 800efc6:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efc8:	2b06      	cmp	r3, #6
 800efca:	d00a      	beq.n	800efe2 <HAL_TIM_Base_Start_IT+0x13e>
 800efcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efd0:	d007      	beq.n	800efe2 <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 800efd2:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800efd4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800efd6:	f043 0301 	orr.w	r3, r3, #1
 800efda:	6013      	str	r3, [r2, #0]
}
 800efdc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800efde:	2001      	movs	r0, #1
}
 800efe0:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800efe2:	2000      	movs	r0, #0
}
 800efe4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800efe6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800efea:	480b      	ldr	r0, [pc, #44]	; (800f018 <HAL_TIM_Base_Start_IT+0x174>)
 800efec:	f7f5 f8c6 	bl	800417c <assert_failed>
 800eff0:	e7b1      	b.n	800ef56 <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 800eff2:	6813      	ldr	r3, [r2, #0]
 800eff4:	f043 0301 	orr.w	r3, r3, #1
 800eff8:	6013      	str	r3, [r2, #0]
}
 800effa:	bd38      	pop	{r3, r4, r5, pc}
 800effc:	40010000 	.word	0x40010000
 800f000:	40000400 	.word	0x40000400
 800f004:	40000800 	.word	0x40000800
 800f008:	40000c00 	.word	0x40000c00
 800f00c:	40002000 	.word	0x40002000
 800f010:	40014000 	.word	0x40014000
 800f014:	00010007 	.word	0x00010007
 800f018:	0802bf54 	.word	0x0802bf54

0800f01c <HAL_TIM_OC_MspInit>:
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop

0800f020 <HAL_TIM_PWM_MspInit>:
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop

0800f024 <HAL_TIM_IC_MspInit>:
 800f024:	4770      	bx	lr
 800f026:	bf00      	nop

0800f028 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800f028:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	f000 8151 	beq.w	800f2d4 <HAL_TIM_ConfigClockSource+0x2ac>
 800f032:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800f034:	2302      	movs	r3, #2
{
 800f036:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800f038:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f03c:	460d      	mov	r5, r1
 800f03e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800f042:	4604      	mov	r4, r0
 800f044:	680b      	ldr	r3, [r1, #0]
 800f046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f04a:	bf18      	it	ne
 800f04c:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800f050:	bf14      	ite	ne
 800f052:	2201      	movne	r2, #1
 800f054:	2200      	moveq	r2, #0
 800f056:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 800f05a:	f002 0201 	and.w	r2, r2, #1
 800f05e:	bf08      	it	eq
 800f060:	2200      	moveq	r2, #0
 800f062:	b112      	cbz	r2, 800f06a <HAL_TIM_ConfigClockSource+0x42>
 800f064:	2940      	cmp	r1, #64	; 0x40
 800f066:	f040 8267 	bne.w	800f538 <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 800f06a:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800f06c:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f06e:	499a      	ldr	r1, [pc, #616]	; (800f2d8 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 800f070:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f072:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800f076:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800f078:	f000 8138 	beq.w	800f2ec <HAL_TIM_ConfigClockSource+0x2c4>
 800f07c:	d84f      	bhi.n	800f11e <HAL_TIM_ConfigClockSource+0xf6>
 800f07e:	2b40      	cmp	r3, #64	; 0x40
 800f080:	f000 81d7 	beq.w	800f432 <HAL_TIM_ConfigClockSource+0x40a>
 800f084:	f240 80a2 	bls.w	800f1cc <HAL_TIM_ConfigClockSource+0x1a4>
 800f088:	2b50      	cmp	r3, #80	; 0x50
 800f08a:	f040 8097 	bne.w	800f1bc <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f08e:	4b93      	ldr	r3, [pc, #588]	; (800f2dc <HAL_TIM_ConfigClockSource+0x2b4>)
 800f090:	4993      	ldr	r1, [pc, #588]	; (800f2e0 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f092:	429a      	cmp	r2, r3
 800f094:	bf18      	it	ne
 800f096:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f09a:	bf14      	ite	ne
 800f09c:	2301      	movne	r3, #1
 800f09e:	2300      	moveq	r3, #0
 800f0a0:	428a      	cmp	r2, r1
 800f0a2:	bf0c      	ite	eq
 800f0a4:	2300      	moveq	r3, #0
 800f0a6:	f003 0301 	andne.w	r3, r3, #1
 800f0aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f0ae:	428a      	cmp	r2, r1
 800f0b0:	bf0c      	ite	eq
 800f0b2:	2300      	moveq	r3, #0
 800f0b4:	f003 0301 	andne.w	r3, r3, #1
 800f0b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f0bc:	428a      	cmp	r2, r1
 800f0be:	bf0c      	ite	eq
 800f0c0:	2300      	moveq	r3, #0
 800f0c2:	f003 0301 	andne.w	r3, r3, #1
 800f0c6:	b11b      	cbz	r3, 800f0d0 <HAL_TIM_ConfigClockSource+0xa8>
 800f0c8:	4b86      	ldr	r3, [pc, #536]	; (800f2e4 <HAL_TIM_ConfigClockSource+0x2bc>)
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	f040 8222 	bne.w	800f514 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f0d0:	686b      	ldr	r3, [r5, #4]
 800f0d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0d6:	bf18      	it	ne
 800f0d8:	2b0a      	cmpne	r3, #10
 800f0da:	d003      	beq.n	800f0e4 <HAL_TIM_ConfigClockSource+0xbc>
 800f0dc:	f033 0302 	bics.w	r3, r3, #2
 800f0e0:	f040 81fe 	bne.w	800f4e0 <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f0e4:	68ee      	ldr	r6, [r5, #12]
 800f0e6:	2e0f      	cmp	r6, #15
 800f0e8:	f200 8242 	bhi.w	800f570 <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0ec:	6823      	ldr	r3, [r4, #0]
 800f0ee:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800f0f0:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0f2:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f0f4:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0f8:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800f0fc:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f0fe:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f100:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f102:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f104:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f108:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f10c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f10e:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f110:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f112:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f116:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800f11a:	609a      	str	r2, [r3, #8]
}
 800f11c:	e04f      	b.n	800f1be <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f11e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f122:	f000 812c 	beq.w	800f37e <HAL_TIM_ConfigClockSource+0x356>
 800f126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f12a:	d17e      	bne.n	800f22a <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800f12c:	4b6b      	ldr	r3, [pc, #428]	; (800f2dc <HAL_TIM_ConfigClockSource+0x2b4>)
 800f12e:	496c      	ldr	r1, [pc, #432]	; (800f2e0 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f130:	429a      	cmp	r2, r3
 800f132:	bf18      	it	ne
 800f134:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f138:	bf14      	ite	ne
 800f13a:	2301      	movne	r3, #1
 800f13c:	2300      	moveq	r3, #0
 800f13e:	428a      	cmp	r2, r1
 800f140:	bf0c      	ite	eq
 800f142:	2300      	moveq	r3, #0
 800f144:	f003 0301 	andne.w	r3, r3, #1
 800f148:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f14c:	428a      	cmp	r2, r1
 800f14e:	bf0c      	ite	eq
 800f150:	2300      	moveq	r3, #0
 800f152:	f003 0301 	andne.w	r3, r3, #1
 800f156:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f15a:	428a      	cmp	r2, r1
 800f15c:	bf0c      	ite	eq
 800f15e:	2300      	moveq	r3, #0
 800f160:	f003 0301 	andne.w	r3, r3, #1
 800f164:	b11b      	cbz	r3, 800f16e <HAL_TIM_ConfigClockSource+0x146>
 800f166:	4b5f      	ldr	r3, [pc, #380]	; (800f2e4 <HAL_TIM_ConfigClockSource+0x2bc>)
 800f168:	429a      	cmp	r2, r3
 800f16a:	f040 81c5 	bne.w	800f4f8 <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f16e:	68ab      	ldr	r3, [r5, #8]
 800f170:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f174:	f040 8210 	bne.w	800f598 <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f178:	686b      	ldr	r3, [r5, #4]
 800f17a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f17e:	bf18      	it	ne
 800f180:	2b0a      	cmpne	r3, #10
 800f182:	d003      	beq.n	800f18c <HAL_TIM_ConfigClockSource+0x164>
 800f184:	f033 0302 	bics.w	r3, r3, #2
 800f188:	f040 81a4 	bne.w	800f4d4 <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f18c:	68ee      	ldr	r6, [r5, #12]
 800f18e:	2e0f      	cmp	r6, #15
 800f190:	f200 81d9 	bhi.w	800f546 <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 800f194:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f196:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800f19a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f19c:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f19e:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f1a0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800f1a4:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f1a6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800f1aa:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f1ac:	6893      	ldr	r3, [r2, #8]
 800f1ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f1b2:	6093      	str	r3, [r2, #8]
      break;
 800f1b4:	e003      	b.n	800f1be <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f1b6:	f033 0110 	bics.w	r1, r3, #16
 800f1ba:	d00c      	beq.n	800f1d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800f1bc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800f1be:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800f1c0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800f1c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f1c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f1ca:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800f1cc:	2b20      	cmp	r3, #32
 800f1ce:	d002      	beq.n	800f1d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800f1d0:	d9f1      	bls.n	800f1b6 <HAL_TIM_ConfigClockSource+0x18e>
 800f1d2:	2b30      	cmp	r3, #48	; 0x30
 800f1d4:	d1f2      	bne.n	800f1bc <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800f1d6:	4941      	ldr	r1, [pc, #260]	; (800f2dc <HAL_TIM_ConfigClockSource+0x2b4>)
 800f1d8:	4841      	ldr	r0, [pc, #260]	; (800f2e0 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f1da:	428a      	cmp	r2, r1
 800f1dc:	bf18      	it	ne
 800f1de:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f1e2:	bf14      	ite	ne
 800f1e4:	2101      	movne	r1, #1
 800f1e6:	2100      	moveq	r1, #0
 800f1e8:	4282      	cmp	r2, r0
 800f1ea:	bf0c      	ite	eq
 800f1ec:	2100      	moveq	r1, #0
 800f1ee:	f001 0101 	andne.w	r1, r1, #1
 800f1f2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f1f6:	4282      	cmp	r2, r0
 800f1f8:	bf0c      	ite	eq
 800f1fa:	2100      	moveq	r1, #0
 800f1fc:	f001 0101 	andne.w	r1, r1, #1
 800f200:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f204:	4282      	cmp	r2, r0
 800f206:	bf0c      	ite	eq
 800f208:	2100      	moveq	r1, #0
 800f20a:	f001 0101 	andne.w	r1, r1, #1
 800f20e:	b119      	cbz	r1, 800f218 <HAL_TIM_ConfigClockSource+0x1f0>
 800f210:	4934      	ldr	r1, [pc, #208]	; (800f2e4 <HAL_TIM_ConfigClockSource+0x2bc>)
 800f212:	428a      	cmp	r2, r1
 800f214:	f040 8176 	bne.w	800f504 <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 800f218:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800f21a:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800f21c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f220:	430b      	orrs	r3, r1
 800f222:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800f226:	6093      	str	r3, [r2, #8]
}
 800f228:	e7c9      	b.n	800f1be <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f22a:	2b70      	cmp	r3, #112	; 0x70
 800f22c:	d1c6      	bne.n	800f1bc <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f22e:	4b2b      	ldr	r3, [pc, #172]	; (800f2dc <HAL_TIM_ConfigClockSource+0x2b4>)
 800f230:	492b      	ldr	r1, [pc, #172]	; (800f2e0 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f232:	429a      	cmp	r2, r3
 800f234:	bf18      	it	ne
 800f236:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f23a:	bf14      	ite	ne
 800f23c:	2301      	movne	r3, #1
 800f23e:	2300      	moveq	r3, #0
 800f240:	428a      	cmp	r2, r1
 800f242:	bf0c      	ite	eq
 800f244:	2300      	moveq	r3, #0
 800f246:	f003 0301 	andne.w	r3, r3, #1
 800f24a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f24e:	428a      	cmp	r2, r1
 800f250:	bf0c      	ite	eq
 800f252:	2300      	moveq	r3, #0
 800f254:	f003 0301 	andne.w	r3, r3, #1
 800f258:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f25c:	428a      	cmp	r2, r1
 800f25e:	bf0c      	ite	eq
 800f260:	2300      	moveq	r3, #0
 800f262:	f003 0301 	andne.w	r3, r3, #1
 800f266:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f26a:	428a      	cmp	r2, r1
 800f26c:	bf0c      	ite	eq
 800f26e:	2300      	moveq	r3, #0
 800f270:	f003 0301 	andne.w	r3, r3, #1
 800f274:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f278:	428a      	cmp	r2, r1
 800f27a:	bf0c      	ite	eq
 800f27c:	2300      	moveq	r3, #0
 800f27e:	f003 0301 	andne.w	r3, r3, #1
 800f282:	b11b      	cbz	r3, 800f28c <HAL_TIM_ConfigClockSource+0x264>
 800f284:	4b18      	ldr	r3, [pc, #96]	; (800f2e8 <HAL_TIM_ConfigClockSource+0x2c0>)
 800f286:	429a      	cmp	r2, r3
 800f288:	f040 818c 	bne.w	800f5a4 <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f28c:	68ab      	ldr	r3, [r5, #8]
 800f28e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f292:	f040 817b 	bne.w	800f58c <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f296:	686b      	ldr	r3, [r5, #4]
 800f298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f29c:	bf18      	it	ne
 800f29e:	2b0a      	cmpne	r3, #10
 800f2a0:	d003      	beq.n	800f2aa <HAL_TIM_ConfigClockSource+0x282>
 800f2a2:	f033 0302 	bics.w	r3, r3, #2
 800f2a6:	f040 8121 	bne.w	800f4ec <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f2aa:	68ee      	ldr	r6, [r5, #12]
 800f2ac:	2e0f      	cmp	r6, #15
 800f2ae:	f200 8166 	bhi.w	800f57e <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 800f2b2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f2b4:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800f2b8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f2ba:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f2bc:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2be:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800f2c2:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f2c4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800f2c8:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800f2ca:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f2cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800f2d0:	6093      	str	r3, [r2, #8]
      break;
 800f2d2:	e774      	b.n	800f1be <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 800f2d4:	2002      	movs	r0, #2
}
 800f2d6:	4770      	bx	lr
 800f2d8:	fffe0088 	.word	0xfffe0088
 800f2dc:	40010000 	.word	0x40010000
 800f2e0:	40000400 	.word	0x40000400
 800f2e4:	40010400 	.word	0x40010400
 800f2e8:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f2ec:	4bb0      	ldr	r3, [pc, #704]	; (800f5b0 <HAL_TIM_ConfigClockSource+0x588>)
 800f2ee:	49b1      	ldr	r1, [pc, #708]	; (800f5b4 <HAL_TIM_ConfigClockSource+0x58c>)
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	bf18      	it	ne
 800f2f4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f2f8:	bf14      	ite	ne
 800f2fa:	2301      	movne	r3, #1
 800f2fc:	2300      	moveq	r3, #0
 800f2fe:	428a      	cmp	r2, r1
 800f300:	bf0c      	ite	eq
 800f302:	2300      	moveq	r3, #0
 800f304:	f003 0301 	andne.w	r3, r3, #1
 800f308:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f30c:	428a      	cmp	r2, r1
 800f30e:	bf0c      	ite	eq
 800f310:	2300      	moveq	r3, #0
 800f312:	f003 0301 	andne.w	r3, r3, #1
 800f316:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f31a:	428a      	cmp	r2, r1
 800f31c:	bf0c      	ite	eq
 800f31e:	2300      	moveq	r3, #0
 800f320:	f003 0301 	andne.w	r3, r3, #1
 800f324:	b11b      	cbz	r3, 800f32e <HAL_TIM_ConfigClockSource+0x306>
 800f326:	4ba4      	ldr	r3, [pc, #656]	; (800f5b8 <HAL_TIM_ConfigClockSource+0x590>)
 800f328:	429a      	cmp	r2, r3
 800f32a:	f040 80ff 	bne.w	800f52c <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f32e:	686b      	ldr	r3, [r5, #4]
 800f330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f334:	bf18      	it	ne
 800f336:	2b0a      	cmpne	r3, #10
 800f338:	d003      	beq.n	800f342 <HAL_TIM_ConfigClockSource+0x31a>
 800f33a:	f033 0302 	bics.w	r3, r3, #2
 800f33e:	f040 80c3 	bne.w	800f4c8 <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f342:	68ee      	ldr	r6, [r5, #12]
 800f344:	2e0f      	cmp	r6, #15
 800f346:	f200 810c 	bhi.w	800f562 <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f34e:	6a18      	ldr	r0, [r3, #32]
 800f350:	f020 0010 	bic.w	r0, r0, #16
 800f354:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800f356:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800f358:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800f35a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f35c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f360:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f364:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800f368:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800f36c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800f36e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f370:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f372:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f376:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800f37a:	609a      	str	r2, [r3, #8]
}
 800f37c:	e71f      	b.n	800f1be <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f37e:	4b8c      	ldr	r3, [pc, #560]	; (800f5b0 <HAL_TIM_ConfigClockSource+0x588>)
 800f380:	488c      	ldr	r0, [pc, #560]	; (800f5b4 <HAL_TIM_ConfigClockSource+0x58c>)
 800f382:	429a      	cmp	r2, r3
 800f384:	bf18      	it	ne
 800f386:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f38a:	498c      	ldr	r1, [pc, #560]	; (800f5bc <HAL_TIM_ConfigClockSource+0x594>)
 800f38c:	bf14      	ite	ne
 800f38e:	2301      	movne	r3, #1
 800f390:	2300      	moveq	r3, #0
 800f392:	4282      	cmp	r2, r0
 800f394:	bf0c      	ite	eq
 800f396:	2300      	moveq	r3, #0
 800f398:	f003 0301 	andne.w	r3, r3, #1
 800f39c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f3a0:	428a      	cmp	r2, r1
 800f3a2:	bf0c      	ite	eq
 800f3a4:	2300      	moveq	r3, #0
 800f3a6:	f003 0301 	andne.w	r3, r3, #1
 800f3aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3ae:	4282      	cmp	r2, r0
 800f3b0:	bf0c      	ite	eq
 800f3b2:	2300      	moveq	r3, #0
 800f3b4:	f003 0301 	andne.w	r3, r3, #1
 800f3b8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f3bc:	428a      	cmp	r2, r1
 800f3be:	bf0c      	ite	eq
 800f3c0:	2300      	moveq	r3, #0
 800f3c2:	f003 0301 	andne.w	r3, r3, #1
 800f3c6:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f3ca:	4282      	cmp	r2, r0
 800f3cc:	bf0c      	ite	eq
 800f3ce:	2300      	moveq	r3, #0
 800f3d0:	f003 0301 	andne.w	r3, r3, #1
 800f3d4:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f3d8:	428a      	cmp	r2, r1
 800f3da:	bf0c      	ite	eq
 800f3dc:	2300      	moveq	r3, #0
 800f3de:	f003 0301 	andne.w	r3, r3, #1
 800f3e2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f3e6:	4282      	cmp	r2, r0
 800f3e8:	bf0c      	ite	eq
 800f3ea:	2300      	moveq	r3, #0
 800f3ec:	f003 0301 	andne.w	r3, r3, #1
 800f3f0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f3f4:	428a      	cmp	r2, r1
 800f3f6:	bf0c      	ite	eq
 800f3f8:	2300      	moveq	r3, #0
 800f3fa:	f003 0301 	andne.w	r3, r3, #1
 800f3fe:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f402:	4282      	cmp	r2, r0
 800f404:	bf0c      	ite	eq
 800f406:	2300      	moveq	r3, #0
 800f408:	f003 0301 	andne.w	r3, r3, #1
 800f40c:	428a      	cmp	r2, r1
 800f40e:	bf0c      	ite	eq
 800f410:	2300      	moveq	r3, #0
 800f412:	f003 0301 	andne.w	r3, r3, #1
 800f416:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f41a:	428a      	cmp	r2, r1
 800f41c:	bf0c      	ite	eq
 800f41e:	2300      	moveq	r3, #0
 800f420:	f003 0301 	andne.w	r3, r3, #1
 800f424:	b11b      	cbz	r3, 800f42e <HAL_TIM_ConfigClockSource+0x406>
 800f426:	4b66      	ldr	r3, [pc, #408]	; (800f5c0 <HAL_TIM_ConfigClockSource+0x598>)
 800f428:	429a      	cmp	r2, r3
 800f42a:	f040 80cd 	bne.w	800f5c8 <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 800f42e:	2000      	movs	r0, #0
 800f430:	e6c5      	b.n	800f1be <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f432:	4b5f      	ldr	r3, [pc, #380]	; (800f5b0 <HAL_TIM_ConfigClockSource+0x588>)
 800f434:	495f      	ldr	r1, [pc, #380]	; (800f5b4 <HAL_TIM_ConfigClockSource+0x58c>)
 800f436:	429a      	cmp	r2, r3
 800f438:	bf18      	it	ne
 800f43a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f43e:	bf14      	ite	ne
 800f440:	2301      	movne	r3, #1
 800f442:	2300      	moveq	r3, #0
 800f444:	428a      	cmp	r2, r1
 800f446:	bf0c      	ite	eq
 800f448:	2300      	moveq	r3, #0
 800f44a:	f003 0301 	andne.w	r3, r3, #1
 800f44e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f452:	428a      	cmp	r2, r1
 800f454:	bf0c      	ite	eq
 800f456:	2300      	moveq	r3, #0
 800f458:	f003 0301 	andne.w	r3, r3, #1
 800f45c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f460:	428a      	cmp	r2, r1
 800f462:	bf0c      	ite	eq
 800f464:	2300      	moveq	r3, #0
 800f466:	f003 0301 	andne.w	r3, r3, #1
 800f46a:	b113      	cbz	r3, 800f472 <HAL_TIM_ConfigClockSource+0x44a>
 800f46c:	4b52      	ldr	r3, [pc, #328]	; (800f5b8 <HAL_TIM_ConfigClockSource+0x590>)
 800f46e:	429a      	cmp	r2, r3
 800f470:	d156      	bne.n	800f520 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f472:	686b      	ldr	r3, [r5, #4]
 800f474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f478:	bf18      	it	ne
 800f47a:	2b0a      	cmpne	r3, #10
 800f47c:	d002      	beq.n	800f484 <HAL_TIM_ConfigClockSource+0x45c>
 800f47e:	f033 0302 	bics.w	r3, r3, #2
 800f482:	d11b      	bne.n	800f4bc <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f484:	68ee      	ldr	r6, [r5, #12]
 800f486:	2e0f      	cmp	r6, #15
 800f488:	d864      	bhi.n	800f554 <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f48a:	6823      	ldr	r3, [r4, #0]
 800f48c:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800f48e:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f490:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f492:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f496:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800f49a:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f49c:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f49e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4a0:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f4a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f4a6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f4aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4ac:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f4ae:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f4b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f4b4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800f4b8:	609a      	str	r2, [r3, #8]
}
 800f4ba:	e680      	b.n	800f1be <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f4bc:	f241 51a6 	movw	r1, #5542	; 0x15a6
 800f4c0:	4840      	ldr	r0, [pc, #256]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f4c2:	f7f4 fe5b 	bl	800417c <assert_failed>
 800f4c6:	e7dd      	b.n	800f484 <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f4c8:	f241 5196 	movw	r1, #5526	; 0x1596
 800f4cc:	483d      	ldr	r0, [pc, #244]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f4ce:	f7f4 fe55 	bl	800417c <assert_failed>
 800f4d2:	e736      	b.n	800f342 <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f4d4:	f241 5173 	movw	r1, #5491	; 0x1573
 800f4d8:	483a      	ldr	r0, [pc, #232]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f4da:	f7f4 fe4f 	bl	800417c <assert_failed>
 800f4de:	e655      	b.n	800f18c <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f4e0:	f241 5186 	movw	r1, #5510	; 0x1586
 800f4e4:	4837      	ldr	r0, [pc, #220]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f4e6:	f7f4 fe49 	bl	800417c <assert_failed>
 800f4ea:	e5fb      	b.n	800f0e4 <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f4ec:	f241 515b 	movw	r1, #5467	; 0x155b
 800f4f0:	4834      	ldr	r0, [pc, #208]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f4f2:	f7f4 fe43 	bl	800417c <assert_failed>
 800f4f6:	e6d8      	b.n	800f2aa <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800f4f8:	f241 516f 	movw	r1, #5487	; 0x156f
 800f4fc:	4831      	ldr	r0, [pc, #196]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f4fe:	f7f4 fe3d 	bl	800417c <assert_failed>
 800f502:	e634      	b.n	800f16e <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800f504:	f241 51b6 	movw	r1, #5558	; 0x15b6
 800f508:	482e      	ldr	r0, [pc, #184]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f50a:	f7f4 fe37 	bl	800417c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f50e:	6822      	ldr	r2, [r4, #0]
 800f510:	682b      	ldr	r3, [r5, #0]
 800f512:	e681      	b.n	800f218 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f514:	f241 5183 	movw	r1, #5507	; 0x1583
 800f518:	482a      	ldr	r0, [pc, #168]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f51a:	f7f4 fe2f 	bl	800417c <assert_failed>
 800f51e:	e5d7      	b.n	800f0d0 <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f520:	f241 51a3 	movw	r1, #5539	; 0x15a3
 800f524:	4827      	ldr	r0, [pc, #156]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f526:	f7f4 fe29 	bl	800417c <assert_failed>
 800f52a:	e7a2      	b.n	800f472 <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f52c:	f241 5193 	movw	r1, #5523	; 0x1593
 800f530:	4824      	ldr	r0, [pc, #144]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f532:	f7f4 fe23 	bl	800417c <assert_failed>
 800f536:	e6fa      	b.n	800f32e <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800f538:	f241 5144 	movw	r1, #5444	; 0x1544
 800f53c:	4821      	ldr	r0, [pc, #132]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f53e:	f7f4 fe1d 	bl	800417c <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 800f542:	682b      	ldr	r3, [r5, #0]
 800f544:	e591      	b.n	800f06a <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f546:	f241 5174 	movw	r1, #5492	; 0x1574
 800f54a:	481e      	ldr	r0, [pc, #120]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f54c:	f7f4 fe16 	bl	800417c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800f550:	68ee      	ldr	r6, [r5, #12]
 800f552:	e61f      	b.n	800f194 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f554:	f241 51a7 	movw	r1, #5543	; 0x15a7
 800f558:	481a      	ldr	r0, [pc, #104]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f55a:	f7f4 fe0f 	bl	800417c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f55e:	68ee      	ldr	r6, [r5, #12]
 800f560:	e793      	b.n	800f48a <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f562:	f241 5197 	movw	r1, #5527	; 0x1597
 800f566:	4817      	ldr	r0, [pc, #92]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f568:	f7f4 fe08 	bl	800417c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f56c:	68ee      	ldr	r6, [r5, #12]
 800f56e:	e6ec      	b.n	800f34a <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f570:	f241 5187 	movw	r1, #5511	; 0x1587
 800f574:	4813      	ldr	r0, [pc, #76]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f576:	f7f4 fe01 	bl	800417c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f57a:	68ee      	ldr	r6, [r5, #12]
 800f57c:	e5b6      	b.n	800f0ec <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f57e:	f241 515c 	movw	r1, #5468	; 0x155c
 800f582:	4810      	ldr	r0, [pc, #64]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f584:	f7f4 fdfa 	bl	800417c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800f588:	68ee      	ldr	r6, [r5, #12]
 800f58a:	e692      	b.n	800f2b2 <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f58c:	f241 515a 	movw	r1, #5466	; 0x155a
 800f590:	480c      	ldr	r0, [pc, #48]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f592:	f7f4 fdf3 	bl	800417c <assert_failed>
 800f596:	e67e      	b.n	800f296 <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f598:	f241 5172 	movw	r1, #5490	; 0x1572
 800f59c:	4809      	ldr	r0, [pc, #36]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f59e:	f7f4 fded 	bl	800417c <assert_failed>
 800f5a2:	e5e9      	b.n	800f178 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f5a4:	f241 5157 	movw	r1, #5463	; 0x1557
 800f5a8:	4806      	ldr	r0, [pc, #24]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x59c>)
 800f5aa:	f7f4 fde7 	bl	800417c <assert_failed>
 800f5ae:	e66d      	b.n	800f28c <HAL_TIM_ConfigClockSource+0x264>
 800f5b0:	40010000 	.word	0x40010000
 800f5b4:	40000400 	.word	0x40000400
 800f5b8:	40010400 	.word	0x40010400
 800f5bc:	40000800 	.word	0x40000800
 800f5c0:	40002000 	.word	0x40002000
 800f5c4:	0802bf54 	.word	0x0802bf54
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f5c8:	4803      	ldr	r0, [pc, #12]	; (800f5d8 <HAL_TIM_ConfigClockSource+0x5b0>)
 800f5ca:	f241 5150 	movw	r1, #5456	; 0x1550
 800f5ce:	f7f4 fdd5 	bl	800417c <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800f5d2:	2000      	movs	r0, #0
 800f5d4:	e5f3      	b.n	800f1be <HAL_TIM_ConfigClockSource+0x196>
 800f5d6:	bf00      	nop
 800f5d8:	0802bf54 	.word	0x0802bf54

0800f5dc <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800f5dc:	6802      	ldr	r2, [r0, #0]
{
 800f5de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800f5e0:	4b39      	ldr	r3, [pc, #228]	; (800f6c8 <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 800f5e2:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800f5e4:	4f39      	ldr	r7, [pc, #228]	; (800f6cc <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800f5e6:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	bf18      	it	ne
 800f5ec:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f5f0:	4e37      	ldr	r6, [pc, #220]	; (800f6d0 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800f5f2:	4938      	ldr	r1, [pc, #224]	; (800f6d4 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800f5f4:	bf14      	ite	ne
 800f5f6:	2301      	movne	r3, #1
 800f5f8:	2300      	moveq	r3, #0
 800f5fa:	42ba      	cmp	r2, r7
 800f5fc:	bf0c      	ite	eq
 800f5fe:	2300      	moveq	r3, #0
 800f600:	f003 0301 	andne.w	r3, r3, #1
 800f604:	42b2      	cmp	r2, r6
 800f606:	bf0c      	ite	eq
 800f608:	2300      	moveq	r3, #0
 800f60a:	f003 0301 	andne.w	r3, r3, #1
 800f60e:	428a      	cmp	r2, r1
 800f610:	bf0c      	ite	eq
 800f612:	2300      	moveq	r3, #0
 800f614:	f003 0301 	andne.w	r3, r3, #1
 800f618:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f61c:	428a      	cmp	r2, r1
 800f61e:	bf0c      	ite	eq
 800f620:	2300      	moveq	r3, #0
 800f622:	f003 0301 	andne.w	r3, r3, #1
 800f626:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f62a:	428a      	cmp	r2, r1
 800f62c:	bf0c      	ite	eq
 800f62e:	2300      	moveq	r3, #0
 800f630:	f003 0301 	andne.w	r3, r3, #1
 800f634:	b113      	cbz	r3, 800f63c <HAL_TIM_SlaveConfigSynchro+0x60>
 800f636:	4b28      	ldr	r3, [pc, #160]	; (800f6d8 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800f638:	429a      	cmp	r2, r3
 800f63a:	d138      	bne.n	800f6ae <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800f63c:	682b      	ldr	r3, [r5, #0]
 800f63e:	1f1a      	subs	r2, r3, #4
 800f640:	2a03      	cmp	r2, #3
 800f642:	d902      	bls.n	800f64a <HAL_TIM_SlaveConfigSynchro+0x6e>
 800f644:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800f648:	d12b      	bne.n	800f6a2 <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800f64a:	686b      	ldr	r3, [r5, #4]
 800f64c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800f650:	2b40      	cmp	r3, #64	; 0x40
 800f652:	d000      	beq.n	800f656 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800f654:	bb8b      	cbnz	r3, 800f6ba <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800f656:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d01f      	beq.n	800f69e <HAL_TIM_SlaveConfigSynchro+0xc2>
 800f65e:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800f660:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800f662:	4629      	mov	r1, r5
 800f664:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800f666:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f66a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800f66e:	f7ff f933 	bl	800e8d8 <TIM_SlaveTimer_SetConfig>
 800f672:	b968      	cbnz	r0, 800f690 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800f674:	6823      	ldr	r3, [r4, #0]
 800f676:	68da      	ldr	r2, [r3, #12]
 800f678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f67c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800f67e:	68da      	ldr	r2, [r3, #12]
 800f680:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f684:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800f686:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f68a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800f68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 800f690:	2300      	movs	r3, #0
    return HAL_ERROR;
 800f692:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 800f694:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800f698:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800f69e:	2002      	movs	r0, #2
}
 800f6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800f6a2:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800f6a6:	480d      	ldr	r0, [pc, #52]	; (800f6dc <HAL_TIM_SlaveConfigSynchro+0x100>)
 800f6a8:	f7f4 fd68 	bl	800417c <assert_failed>
 800f6ac:	e7cd      	b.n	800f64a <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800f6ae:	f241 51f6 	movw	r1, #5622	; 0x15f6
 800f6b2:	480a      	ldr	r0, [pc, #40]	; (800f6dc <HAL_TIM_SlaveConfigSynchro+0x100>)
 800f6b4:	f7f4 fd62 	bl	800417c <assert_failed>
 800f6b8:	e7c0      	b.n	800f63c <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800f6ba:	f241 51f8 	movw	r1, #5624	; 0x15f8
 800f6be:	4807      	ldr	r0, [pc, #28]	; (800f6dc <HAL_TIM_SlaveConfigSynchro+0x100>)
 800f6c0:	f7f4 fd5c 	bl	800417c <assert_failed>
 800f6c4:	e7c7      	b.n	800f656 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800f6c6:	bf00      	nop
 800f6c8:	40010000 	.word	0x40010000
 800f6cc:	40000400 	.word	0x40000400
 800f6d0:	40000800 	.word	0x40000800
 800f6d4:	40000c00 	.word	0x40000c00
 800f6d8:	40001800 	.word	0x40001800
 800f6dc:	0802bf54 	.word	0x0802bf54

0800f6e0 <HAL_TIM_OC_DelayElapsedCallback>:
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop

0800f6e4 <TIM_DMACaptureCplt>:
{
 800f6e4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f6e6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f6e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6ea:	4283      	cmp	r3, r0
 800f6ec:	d01e      	beq.n	800f72c <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f6ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f6f0:	4283      	cmp	r3, r0
 800f6f2:	d00b      	beq.n	800f70c <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f6f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f6f6:	4283      	cmp	r3, r0
 800f6f8:	d027      	beq.n	800f74a <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f6fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f6fc:	4283      	cmp	r3, r0
 800f6fe:	d02f      	beq.n	800f760 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 800f700:	4620      	mov	r0, r4
 800f702:	f7f3 fc59 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f706:	2300      	movs	r3, #0
 800f708:	7723      	strb	r3, [r4, #28]
}
 800f70a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f70c:	2202      	movs	r2, #2
 800f70e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800f710:	69db      	ldr	r3, [r3, #28]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1f4      	bne.n	800f700 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f716:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 800f718:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f71a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f71e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 800f722:	f7f3 fc49 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f726:	2300      	movs	r3, #0
 800f728:	7723      	strb	r3, [r4, #28]
}
 800f72a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f72c:	2201      	movs	r2, #1
 800f72e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800f730:	69db      	ldr	r3, [r3, #28]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1e4      	bne.n	800f700 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f736:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 800f73a:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f73c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800f740:	f7f3 fc3a 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f744:	2300      	movs	r3, #0
 800f746:	7723      	strb	r3, [r4, #28]
}
 800f748:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f74a:	2204      	movs	r2, #4
 800f74c:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800f74e:	69db      	ldr	r3, [r3, #28]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1d5      	bne.n	800f700 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f754:	2301      	movs	r3, #1
 800f756:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f75a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f75e:	e7cf      	b.n	800f700 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f760:	2208      	movs	r2, #8
 800f762:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800f764:	69db      	ldr	r3, [r3, #28]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d1ca      	bne.n	800f700 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f76a:	2301      	movs	r3, #1
 800f76c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f770:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800f774:	e7c4      	b.n	800f700 <TIM_DMACaptureCplt+0x1c>
 800f776:	bf00      	nop

0800f778 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800f778:	4770      	bx	lr
 800f77a:	bf00      	nop

0800f77c <TIM_DMACaptureHalfCplt>:
{
 800f77c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f77e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f782:	4283      	cmp	r3, r0
 800f784:	d016      	beq.n	800f7b4 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f788:	4283      	cmp	r3, r0
 800f78a:	d00b      	beq.n	800f7a4 <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f78c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f78e:	4283      	cmp	r3, r0
 800f790:	d018      	beq.n	800f7c4 <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f792:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f794:	4283      	cmp	r3, r0
 800f796:	d01d      	beq.n	800f7d4 <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800f798:	4620      	mov	r0, r4
 800f79a:	f7ff ffed 	bl	800f778 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	7723      	strb	r3, [r4, #28]
}
 800f7a2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f7a4:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800f7a6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f7a8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800f7aa:	f7ff ffe5 	bl	800f778 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	7723      	strb	r3, [r4, #28]
}
 800f7b2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f7b4:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800f7b6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f7b8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800f7ba:	f7ff ffdd 	bl	800f778 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	7723      	strb	r3, [r4, #28]
}
 800f7c2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f7c4:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800f7c6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f7c8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800f7ca:	f7ff ffd5 	bl	800f778 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	7723      	strb	r3, [r4, #28]
}
 800f7d2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f7d4:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800f7d6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f7d8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800f7da:	f7ff ffcd 	bl	800f778 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	7723      	strb	r3, [r4, #28]
}
 800f7e2:	bd10      	pop	{r4, pc}

0800f7e4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop

0800f7e8 <HAL_TIM_TriggerCallback>:
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop

0800f7ec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f7ec:	6803      	ldr	r3, [r0, #0]
 800f7ee:	691a      	ldr	r2, [r3, #16]
 800f7f0:	0791      	lsls	r1, r2, #30
{
 800f7f2:	b510      	push	{r4, lr}
 800f7f4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f7f6:	d502      	bpl.n	800f7fe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f7f8:	68da      	ldr	r2, [r3, #12]
 800f7fa:	0792      	lsls	r2, r2, #30
 800f7fc:	d468      	bmi.n	800f8d0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f7fe:	691a      	ldr	r2, [r3, #16]
 800f800:	0752      	lsls	r2, r2, #29
 800f802:	d502      	bpl.n	800f80a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f804:	68da      	ldr	r2, [r3, #12]
 800f806:	0750      	lsls	r0, r2, #29
 800f808:	d44f      	bmi.n	800f8aa <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f80a:	691a      	ldr	r2, [r3, #16]
 800f80c:	0711      	lsls	r1, r2, #28
 800f80e:	d502      	bpl.n	800f816 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f810:	68da      	ldr	r2, [r3, #12]
 800f812:	0712      	lsls	r2, r2, #28
 800f814:	d437      	bmi.n	800f886 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f816:	691a      	ldr	r2, [r3, #16]
 800f818:	06d0      	lsls	r0, r2, #27
 800f81a:	d502      	bpl.n	800f822 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f81c:	68da      	ldr	r2, [r3, #12]
 800f81e:	06d1      	lsls	r1, r2, #27
 800f820:	d41e      	bmi.n	800f860 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f822:	691a      	ldr	r2, [r3, #16]
 800f824:	07d2      	lsls	r2, r2, #31
 800f826:	d502      	bpl.n	800f82e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f828:	68da      	ldr	r2, [r3, #12]
 800f82a:	07d0      	lsls	r0, r2, #31
 800f82c:	d469      	bmi.n	800f902 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f82e:	691a      	ldr	r2, [r3, #16]
 800f830:	0611      	lsls	r1, r2, #24
 800f832:	d502      	bpl.n	800f83a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f834:	68da      	ldr	r2, [r3, #12]
 800f836:	0612      	lsls	r2, r2, #24
 800f838:	d46b      	bmi.n	800f912 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f83a:	691a      	ldr	r2, [r3, #16]
 800f83c:	05d0      	lsls	r0, r2, #23
 800f83e:	d502      	bpl.n	800f846 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f840:	68da      	ldr	r2, [r3, #12]
 800f842:	0611      	lsls	r1, r2, #24
 800f844:	d46d      	bmi.n	800f922 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f846:	691a      	ldr	r2, [r3, #16]
 800f848:	0652      	lsls	r2, r2, #25
 800f84a:	d502      	bpl.n	800f852 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f84c:	68da      	ldr	r2, [r3, #12]
 800f84e:	0650      	lsls	r0, r2, #25
 800f850:	d46f      	bmi.n	800f932 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f852:	691a      	ldr	r2, [r3, #16]
 800f854:	0691      	lsls	r1, r2, #26
 800f856:	d502      	bpl.n	800f85e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f858:	68da      	ldr	r2, [r3, #12]
 800f85a:	0692      	lsls	r2, r2, #26
 800f85c:	d449      	bmi.n	800f8f2 <HAL_TIM_IRQHandler+0x106>
}
 800f85e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f860:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f864:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800f866:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f868:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f86a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f86c:	69db      	ldr	r3, [r3, #28]
 800f86e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f872:	d16f      	bne.n	800f954 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f874:	f7ff ff34 	bl	800f6e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f878:	4620      	mov	r0, r4
 800f87a:	f7ff ffb3 	bl	800f7e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f87e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f880:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f882:	7722      	strb	r2, [r4, #28]
 800f884:	e7cd      	b.n	800f822 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f886:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f88a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800f88c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f88e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f890:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f892:	69db      	ldr	r3, [r3, #28]
 800f894:	079b      	lsls	r3, r3, #30
 800f896:	d15a      	bne.n	800f94e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f898:	f7ff ff22 	bl	800f6e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f89c:	4620      	mov	r0, r4
 800f89e:	f7ff ffa1 	bl	800f7e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8a2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f8a4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8a6:	7722      	strb	r2, [r4, #28]
 800f8a8:	e7b5      	b.n	800f816 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f8aa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f8ae:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800f8b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f8b2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f8b4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f8b6:	699b      	ldr	r3, [r3, #24]
 800f8b8:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f8bc:	d144      	bne.n	800f948 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8be:	f7ff ff0f 	bl	800f6e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f7ff ff8e 	bl	800f7e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8c8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f8ca:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8cc:	7722      	strb	r2, [r4, #28]
 800f8ce:	e79c      	b.n	800f80a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f8d0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f8d4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f8d6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f8d8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f8da:	699b      	ldr	r3, [r3, #24]
 800f8dc:	0799      	lsls	r1, r3, #30
 800f8de:	d130      	bne.n	800f942 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8e0:	f7ff fefe 	bl	800f6e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f7ff ff7d 	bl	800f7e4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8ea:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f8ec:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8ee:	7722      	strb	r2, [r4, #28]
 800f8f0:	e785      	b.n	800f7fe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f8f2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800f8f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f8f8:	611a      	str	r2, [r3, #16]
}
 800f8fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800f8fe:	f001 be53 	b.w	80115a8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f902:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800f906:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f908:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f90a:	f7f3 fbcb 	bl	80030a4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f90e:	6823      	ldr	r3, [r4, #0]
 800f910:	e78d      	b.n	800f82e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f912:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800f916:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f918:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800f91a:	f001 fe47 	bl	80115ac <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	e78b      	b.n	800f83a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f922:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800f926:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f928:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800f92a:	f001 fe41 	bl	80115b0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f92e:	6823      	ldr	r3, [r4, #0]
 800f930:	e789      	b.n	800f846 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f932:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800f936:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f938:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800f93a:	f7ff ff55 	bl	800f7e8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	e787      	b.n	800f852 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800f942:	f7f3 fb39 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 800f946:	e7d0      	b.n	800f8ea <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800f948:	f7f3 fb36 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 800f94c:	e7bc      	b.n	800f8c8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800f94e:	f7f3 fb33 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 800f952:	e7a6      	b.n	800f8a2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800f954:	f7f3 fb30 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 800f958:	e791      	b.n	800f87e <HAL_TIM_IRQHandler+0x92>
 800f95a:	bf00      	nop

0800f95c <HAL_TIM_ErrorCallback>:
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop

0800f960 <TIM_DMAError>:
{
 800f960:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f962:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f966:	4283      	cmp	r3, r0
 800f968:	d01c      	beq.n	800f9a4 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f96a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f96c:	4283      	cmp	r3, r0
 800f96e:	d00e      	beq.n	800f98e <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f970:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f972:	4283      	cmp	r3, r0
 800f974:	d020      	beq.n	800f9b8 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f976:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f978:	4283      	cmp	r3, r0
 800f97a:	d028      	beq.n	800f9ce <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 800f97c:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800f97e:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 800f980:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800f984:	f7ff ffea 	bl	800f95c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f988:	2300      	movs	r3, #0
 800f98a:	7723      	strb	r3, [r4, #28]
}
 800f98c:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f98e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f990:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 800f992:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f994:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f998:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800f99a:	f7ff ffdf 	bl	800f95c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	7723      	strb	r3, [r4, #28]
}
 800f9a2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f9a4:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800f9a6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f9a8:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f9aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800f9ae:	f7ff ffd5 	bl	800f95c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	7723      	strb	r3, [r4, #28]
}
 800f9b6:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f9b8:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f9ba:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 800f9bc:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f9be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f9c2:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800f9c4:	f7ff ffca 	bl	800f95c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	7723      	strb	r3, [r4, #28]
}
 800f9cc:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f9ce:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f9d0:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 800f9d2:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f9d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f9d8:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800f9da:	f7ff ffbf 	bl	800f95c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	7723      	strb	r3, [r4, #28]
}
 800f9e2:	bd10      	pop	{r4, pc}

0800f9e4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f9e4:	4a3c      	ldr	r2, [pc, #240]	; (800fad8 <TIM_Base_SetConfig+0xf4>)
 800f9e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800f9ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f9ec:	eba0 0202 	sub.w	r2, r0, r2
 800f9f0:	fab2 f282 	clz	r2, r2
{
 800f9f4:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f9f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800f9fa:	d010      	beq.n	800fa1e <TIM_Base_SetConfig+0x3a>
 800f9fc:	b97a      	cbnz	r2, 800fa1e <TIM_Base_SetConfig+0x3a>
 800f9fe:	4d37      	ldr	r5, [pc, #220]	; (800fadc <TIM_Base_SetConfig+0xf8>)
 800fa00:	4c37      	ldr	r4, [pc, #220]	; (800fae0 <TIM_Base_SetConfig+0xfc>)
 800fa02:	42a0      	cmp	r0, r4
 800fa04:	bf18      	it	ne
 800fa06:	42a8      	cmpne	r0, r5
 800fa08:	d12b      	bne.n	800fa62 <TIM_Base_SetConfig+0x7e>
 800fa0a:	4c36      	ldr	r4, [pc, #216]	; (800fae4 <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800fa10:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa12:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 800fa14:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa16:	fab4 f484 	clz	r4, r4
 800fa1a:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa1c:	e008      	b.n	800fa30 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 800fa1e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800fa24:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa26:	4c2f      	ldr	r4, [pc, #188]	; (800fae4 <TIM_Base_SetConfig+0x100>)
 800fa28:	1b04      	subs	r4, r0, r4
 800fa2a:	fab4 f484 	clz	r4, r4
 800fa2e:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa30:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa36:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fa38:	694d      	ldr	r5, [r1, #20]
 800fa3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa3e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800fa40:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fa42:	688b      	ldr	r3, [r1, #8]
 800fa44:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800fa46:	680b      	ldr	r3, [r1, #0]
 800fa48:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fa4a:	b922      	cbnz	r2, 800fa56 <TIM_Base_SetConfig+0x72>
 800fa4c:	b91c      	cbnz	r4, 800fa56 <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 800fa4e:	2301      	movs	r3, #1
}
 800fa50:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800fa52:	6143      	str	r3, [r0, #20]
}
 800fa54:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800fa56:	690b      	ldr	r3, [r1, #16]
 800fa58:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800fa5a:	2301      	movs	r3, #1
}
 800fa5c:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800fa5e:	6143      	str	r3, [r0, #20]
}
 800fa60:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800fa66:	42a0      	cmp	r0, r4
 800fa68:	d024      	beq.n	800fab4 <TIM_Base_SetConfig+0xd0>
 800fa6a:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800fa6e:	42a0      	cmp	r0, r4
 800fa70:	d020      	beq.n	800fab4 <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa72:	4c1d      	ldr	r4, [pc, #116]	; (800fae8 <TIM_Base_SetConfig+0x104>)
 800fa74:	4d1d      	ldr	r5, [pc, #116]	; (800faec <TIM_Base_SetConfig+0x108>)
 800fa76:	42a0      	cmp	r0, r4
 800fa78:	bf18      	it	ne
 800fa7a:	42a8      	cmpne	r0, r5
 800fa7c:	bf0c      	ite	eq
 800fa7e:	2401      	moveq	r4, #1
 800fa80:	2400      	movne	r4, #0
 800fa82:	d027      	beq.n	800fad4 <TIM_Base_SetConfig+0xf0>
 800fa84:	4e1a      	ldr	r6, [pc, #104]	; (800faf0 <TIM_Base_SetConfig+0x10c>)
 800fa86:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800fa8a:	42a8      	cmp	r0, r5
 800fa8c:	bf18      	it	ne
 800fa8e:	42b0      	cmpne	r0, r6
 800fa90:	d0ce      	beq.n	800fa30 <TIM_Base_SetConfig+0x4c>
 800fa92:	4c18      	ldr	r4, [pc, #96]	; (800faf4 <TIM_Base_SetConfig+0x110>)
 800fa94:	42a0      	cmp	r0, r4
 800fa96:	d01d      	beq.n	800fad4 <TIM_Base_SetConfig+0xf0>
 800fa98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800fa9c:	42a0      	cmp	r0, r4
 800fa9e:	d019      	beq.n	800fad4 <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800faa0:	694d      	ldr	r5, [r1, #20]
 800faa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800faa6:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800faa8:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800faaa:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800faac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800faae:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800fab0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fab2:	e7cc      	b.n	800fa4e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800fab4:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800faba:	4c0a      	ldr	r4, [pc, #40]	; (800fae4 <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 800fabc:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fabe:	4d0e      	ldr	r5, [pc, #56]	; (800faf8 <TIM_Base_SetConfig+0x114>)
 800fac0:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fac2:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fac4:	fab4 f484 	clz	r4, r4
 800fac8:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800facc:	d0b0      	beq.n	800fa30 <TIM_Base_SetConfig+0x4c>
 800face:	2c00      	cmp	r4, #0
 800fad0:	d1ae      	bne.n	800fa30 <TIM_Base_SetConfig+0x4c>
 800fad2:	e7ce      	b.n	800fa72 <TIM_Base_SetConfig+0x8e>
 800fad4:	2400      	movs	r4, #0
 800fad6:	e7ab      	b.n	800fa30 <TIM_Base_SetConfig+0x4c>
 800fad8:	40010000 	.word	0x40010000
 800fadc:	40000400 	.word	0x40000400
 800fae0:	40000800 	.word	0x40000800
 800fae4:	40010400 	.word	0x40010400
 800fae8:	40014400 	.word	0x40014400
 800faec:	40014000 	.word	0x40014000
 800faf0:	40014800 	.word	0x40014800
 800faf4:	40001c00 	.word	0x40001c00
 800faf8:	40000c00 	.word	0x40000c00

0800fafc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800fafc:	2800      	cmp	r0, #0
 800fafe:	f000 80b8 	beq.w	800fc72 <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fb02:	6802      	ldr	r2, [r0, #0]
 800fb04:	4b5f      	ldr	r3, [pc, #380]	; (800fc84 <HAL_TIM_Base_Init+0x188>)
 800fb06:	4960      	ldr	r1, [pc, #384]	; (800fc88 <HAL_TIM_Base_Init+0x18c>)
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	bf18      	it	ne
 800fb0c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800fb10:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fb12:	bf14      	ite	ne
 800fb14:	2301      	movne	r3, #1
 800fb16:	2300      	moveq	r3, #0
 800fb18:	4604      	mov	r4, r0
 800fb1a:	485c      	ldr	r0, [pc, #368]	; (800fc8c <HAL_TIM_Base_Init+0x190>)
 800fb1c:	4282      	cmp	r2, r0
 800fb1e:	bf0c      	ite	eq
 800fb20:	2300      	moveq	r3, #0
 800fb22:	f003 0301 	andne.w	r3, r3, #1
 800fb26:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fb2a:	428a      	cmp	r2, r1
 800fb2c:	bf0c      	ite	eq
 800fb2e:	2300      	moveq	r3, #0
 800fb30:	f003 0301 	andne.w	r3, r3, #1
 800fb34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb38:	4282      	cmp	r2, r0
 800fb3a:	bf0c      	ite	eq
 800fb3c:	2300      	moveq	r3, #0
 800fb3e:	f003 0301 	andne.w	r3, r3, #1
 800fb42:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fb46:	428a      	cmp	r2, r1
 800fb48:	bf0c      	ite	eq
 800fb4a:	2300      	moveq	r3, #0
 800fb4c:	f003 0301 	andne.w	r3, r3, #1
 800fb50:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800fb54:	4282      	cmp	r2, r0
 800fb56:	bf0c      	ite	eq
 800fb58:	2300      	moveq	r3, #0
 800fb5a:	f003 0301 	andne.w	r3, r3, #1
 800fb5e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800fb62:	428a      	cmp	r2, r1
 800fb64:	bf0c      	ite	eq
 800fb66:	2300      	moveq	r3, #0
 800fb68:	f003 0301 	andne.w	r3, r3, #1
 800fb6c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800fb70:	4282      	cmp	r2, r0
 800fb72:	bf0c      	ite	eq
 800fb74:	2300      	moveq	r3, #0
 800fb76:	f003 0301 	andne.w	r3, r3, #1
 800fb7a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fb7e:	428a      	cmp	r2, r1
 800fb80:	bf0c      	ite	eq
 800fb82:	2300      	moveq	r3, #0
 800fb84:	f003 0301 	andne.w	r3, r3, #1
 800fb88:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800fb8c:	4282      	cmp	r2, r0
 800fb8e:	bf0c      	ite	eq
 800fb90:	2300      	moveq	r3, #0
 800fb92:	f003 0301 	andne.w	r3, r3, #1
 800fb96:	428a      	cmp	r2, r1
 800fb98:	bf0c      	ite	eq
 800fb9a:	2300      	moveq	r3, #0
 800fb9c:	f003 0301 	andne.w	r3, r3, #1
 800fba0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fba4:	428a      	cmp	r2, r1
 800fba6:	bf0c      	ite	eq
 800fba8:	2300      	moveq	r3, #0
 800fbaa:	f003 0301 	andne.w	r3, r3, #1
 800fbae:	b113      	cbz	r3, 800fbb6 <HAL_TIM_Base_Init+0xba>
 800fbb0:	4b37      	ldr	r3, [pc, #220]	; (800fc90 <HAL_TIM_Base_Init+0x194>)
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d15f      	bne.n	800fc76 <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800fbb6:	68a3      	ldr	r3, [r4, #8]
 800fbb8:	f023 0210 	bic.w	r2, r3, #16
 800fbbc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800fbc0:	2920      	cmp	r1, #32
 800fbc2:	bf18      	it	ne
 800fbc4:	2a00      	cmpne	r2, #0
 800fbc6:	d001      	beq.n	800fbcc <HAL_TIM_Base_Init+0xd0>
 800fbc8:	2b40      	cmp	r3, #64	; 0x40
 800fbca:	d14c      	bne.n	800fc66 <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800fbcc:	6923      	ldr	r3, [r4, #16]
 800fbce:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800fbd2:	d002      	beq.n	800fbda <HAL_TIM_Base_Init+0xde>
 800fbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbd8:	d12b      	bne.n	800fc32 <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800fbda:	69a3      	ldr	r3, [r4, #24]
 800fbdc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800fbe0:	d130      	bne.n	800fc44 <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800fbe2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800fbe6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fbea:	b3b3      	cbz	r3, 800fc5a <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fbec:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800fbee:	2302      	movs	r3, #2
 800fbf0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fbf4:	f851 0b04 	ldr.w	r0, [r1], #4
 800fbf8:	f7ff fef4 	bl	800f9e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fbfc:	2301      	movs	r3, #1
  return HAL_OK;
 800fbfe:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fc00:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800fc08:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800fc0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800fc10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800fc14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800fc20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc24:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800fc28:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800fc2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800fc30:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800fc32:	f44f 718c 	mov.w	r1, #280	; 0x118
 800fc36:	4817      	ldr	r0, [pc, #92]	; (800fc94 <HAL_TIM_Base_Init+0x198>)
 800fc38:	f7f4 faa0 	bl	800417c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800fc3c:	69a3      	ldr	r3, [r4, #24]
 800fc3e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800fc42:	d0ce      	beq.n	800fbe2 <HAL_TIM_Base_Init+0xe6>
 800fc44:	f240 1119 	movw	r1, #281	; 0x119
 800fc48:	4812      	ldr	r0, [pc, #72]	; (800fc94 <HAL_TIM_Base_Init+0x198>)
 800fc4a:	f7f4 fa97 	bl	800417c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800fc4e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800fc52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1c8      	bne.n	800fbec <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 800fc5a:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800fc5c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800fc60:	f7f5 feb2 	bl	80059c8 <HAL_TIM_Base_MspInit>
 800fc64:	e7c2      	b.n	800fbec <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800fc66:	f240 1117 	movw	r1, #279	; 0x117
 800fc6a:	480a      	ldr	r0, [pc, #40]	; (800fc94 <HAL_TIM_Base_Init+0x198>)
 800fc6c:	f7f4 fa86 	bl	800417c <assert_failed>
 800fc70:	e7ac      	b.n	800fbcc <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 800fc72:	2001      	movs	r0, #1
}
 800fc74:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fc76:	f44f 718b 	mov.w	r1, #278	; 0x116
 800fc7a:	4806      	ldr	r0, [pc, #24]	; (800fc94 <HAL_TIM_Base_Init+0x198>)
 800fc7c:	f7f4 fa7e 	bl	800417c <assert_failed>
 800fc80:	e799      	b.n	800fbb6 <HAL_TIM_Base_Init+0xba>
 800fc82:	bf00      	nop
 800fc84:	40010000 	.word	0x40010000
 800fc88:	40000800 	.word	0x40000800
 800fc8c:	40000400 	.word	0x40000400
 800fc90:	40002000 	.word	0x40002000
 800fc94:	0802bf54 	.word	0x0802bf54

0800fc98 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	f000 80b8 	beq.w	800fe0e <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fc9e:	6802      	ldr	r2, [r0, #0]
 800fca0:	4b5f      	ldr	r3, [pc, #380]	; (800fe20 <HAL_TIM_OC_Init+0x188>)
 800fca2:	4960      	ldr	r1, [pc, #384]	; (800fe24 <HAL_TIM_OC_Init+0x18c>)
 800fca4:	429a      	cmp	r2, r3
 800fca6:	bf18      	it	ne
 800fca8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800fcac:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fcae:	bf14      	ite	ne
 800fcb0:	2301      	movne	r3, #1
 800fcb2:	2300      	moveq	r3, #0
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	485c      	ldr	r0, [pc, #368]	; (800fe28 <HAL_TIM_OC_Init+0x190>)
 800fcb8:	4282      	cmp	r2, r0
 800fcba:	bf0c      	ite	eq
 800fcbc:	2300      	moveq	r3, #0
 800fcbe:	f003 0301 	andne.w	r3, r3, #1
 800fcc2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fcc6:	428a      	cmp	r2, r1
 800fcc8:	bf0c      	ite	eq
 800fcca:	2300      	moveq	r3, #0
 800fccc:	f003 0301 	andne.w	r3, r3, #1
 800fcd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcd4:	4282      	cmp	r2, r0
 800fcd6:	bf0c      	ite	eq
 800fcd8:	2300      	moveq	r3, #0
 800fcda:	f003 0301 	andne.w	r3, r3, #1
 800fcde:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fce2:	428a      	cmp	r2, r1
 800fce4:	bf0c      	ite	eq
 800fce6:	2300      	moveq	r3, #0
 800fce8:	f003 0301 	andne.w	r3, r3, #1
 800fcec:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800fcf0:	4282      	cmp	r2, r0
 800fcf2:	bf0c      	ite	eq
 800fcf4:	2300      	moveq	r3, #0
 800fcf6:	f003 0301 	andne.w	r3, r3, #1
 800fcfa:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800fcfe:	428a      	cmp	r2, r1
 800fd00:	bf0c      	ite	eq
 800fd02:	2300      	moveq	r3, #0
 800fd04:	f003 0301 	andne.w	r3, r3, #1
 800fd08:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800fd0c:	4282      	cmp	r2, r0
 800fd0e:	bf0c      	ite	eq
 800fd10:	2300      	moveq	r3, #0
 800fd12:	f003 0301 	andne.w	r3, r3, #1
 800fd16:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fd1a:	428a      	cmp	r2, r1
 800fd1c:	bf0c      	ite	eq
 800fd1e:	2300      	moveq	r3, #0
 800fd20:	f003 0301 	andne.w	r3, r3, #1
 800fd24:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800fd28:	4282      	cmp	r2, r0
 800fd2a:	bf0c      	ite	eq
 800fd2c:	2300      	moveq	r3, #0
 800fd2e:	f003 0301 	andne.w	r3, r3, #1
 800fd32:	428a      	cmp	r2, r1
 800fd34:	bf0c      	ite	eq
 800fd36:	2300      	moveq	r3, #0
 800fd38:	f003 0301 	andne.w	r3, r3, #1
 800fd3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fd40:	428a      	cmp	r2, r1
 800fd42:	bf0c      	ite	eq
 800fd44:	2300      	moveq	r3, #0
 800fd46:	f003 0301 	andne.w	r3, r3, #1
 800fd4a:	b113      	cbz	r3, 800fd52 <HAL_TIM_OC_Init+0xba>
 800fd4c:	4b37      	ldr	r3, [pc, #220]	; (800fe2c <HAL_TIM_OC_Init+0x194>)
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d15f      	bne.n	800fe12 <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800fd52:	68a3      	ldr	r3, [r4, #8]
 800fd54:	f023 0210 	bic.w	r2, r3, #16
 800fd58:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800fd5c:	2920      	cmp	r1, #32
 800fd5e:	bf18      	it	ne
 800fd60:	2a00      	cmpne	r2, #0
 800fd62:	d001      	beq.n	800fd68 <HAL_TIM_OC_Init+0xd0>
 800fd64:	2b40      	cmp	r3, #64	; 0x40
 800fd66:	d14c      	bne.n	800fe02 <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800fd68:	6923      	ldr	r3, [r4, #16]
 800fd6a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800fd6e:	d002      	beq.n	800fd76 <HAL_TIM_OC_Init+0xde>
 800fd70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd74:	d12b      	bne.n	800fdce <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800fd76:	69a3      	ldr	r3, [r4, #24]
 800fd78:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800fd7c:	d130      	bne.n	800fde0 <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800fd7e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800fd82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fd86:	b3b3      	cbz	r3, 800fdf6 <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800fd88:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800fd8a:	2302      	movs	r3, #2
 800fd8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800fd90:	f851 0b04 	ldr.w	r0, [r1], #4
 800fd94:	f7ff fe26 	bl	800f9e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fd98:	2301      	movs	r3, #1
  return HAL_OK;
 800fd9a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fd9c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fda0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800fda4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800fda8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800fdac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800fdb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fdb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fdb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800fdbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fdc0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800fdc4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800fdc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800fdcc:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800fdce:	f240 2197 	movw	r1, #663	; 0x297
 800fdd2:	4817      	ldr	r0, [pc, #92]	; (800fe30 <HAL_TIM_OC_Init+0x198>)
 800fdd4:	f7f4 f9d2 	bl	800417c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800fdd8:	69a3      	ldr	r3, [r4, #24]
 800fdda:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800fdde:	d0ce      	beq.n	800fd7e <HAL_TIM_OC_Init+0xe6>
 800fde0:	f44f 7126 	mov.w	r1, #664	; 0x298
 800fde4:	4812      	ldr	r0, [pc, #72]	; (800fe30 <HAL_TIM_OC_Init+0x198>)
 800fde6:	f7f4 f9c9 	bl	800417c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800fdea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800fdee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d1c8      	bne.n	800fd88 <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 800fdf6:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800fdf8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800fdfc:	f7ff f90e 	bl	800f01c <HAL_TIM_OC_MspInit>
 800fe00:	e7c2      	b.n	800fd88 <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800fe02:	f240 2196 	movw	r1, #662	; 0x296
 800fe06:	480a      	ldr	r0, [pc, #40]	; (800fe30 <HAL_TIM_OC_Init+0x198>)
 800fe08:	f7f4 f9b8 	bl	800417c <assert_failed>
 800fe0c:	e7ac      	b.n	800fd68 <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 800fe0e:	2001      	movs	r0, #1
}
 800fe10:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fe12:	f240 2195 	movw	r1, #661	; 0x295
 800fe16:	4806      	ldr	r0, [pc, #24]	; (800fe30 <HAL_TIM_OC_Init+0x198>)
 800fe18:	f7f4 f9b0 	bl	800417c <assert_failed>
 800fe1c:	e799      	b.n	800fd52 <HAL_TIM_OC_Init+0xba>
 800fe1e:	bf00      	nop
 800fe20:	40010000 	.word	0x40010000
 800fe24:	40000800 	.word	0x40000800
 800fe28:	40000400 	.word	0x40000400
 800fe2c:	40002000 	.word	0x40002000
 800fe30:	0802bf54 	.word	0x0802bf54

0800fe34 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800fe34:	2800      	cmp	r0, #0
 800fe36:	f000 80b8 	beq.w	800ffaa <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fe3a:	6802      	ldr	r2, [r0, #0]
 800fe3c:	4b5f      	ldr	r3, [pc, #380]	; (800ffbc <HAL_TIM_PWM_Init+0x188>)
 800fe3e:	4960      	ldr	r1, [pc, #384]	; (800ffc0 <HAL_TIM_PWM_Init+0x18c>)
 800fe40:	429a      	cmp	r2, r3
 800fe42:	bf18      	it	ne
 800fe44:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800fe48:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fe4a:	bf14      	ite	ne
 800fe4c:	2301      	movne	r3, #1
 800fe4e:	2300      	moveq	r3, #0
 800fe50:	4604      	mov	r4, r0
 800fe52:	485c      	ldr	r0, [pc, #368]	; (800ffc4 <HAL_TIM_PWM_Init+0x190>)
 800fe54:	4282      	cmp	r2, r0
 800fe56:	bf0c      	ite	eq
 800fe58:	2300      	moveq	r3, #0
 800fe5a:	f003 0301 	andne.w	r3, r3, #1
 800fe5e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fe62:	428a      	cmp	r2, r1
 800fe64:	bf0c      	ite	eq
 800fe66:	2300      	moveq	r3, #0
 800fe68:	f003 0301 	andne.w	r3, r3, #1
 800fe6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe70:	4282      	cmp	r2, r0
 800fe72:	bf0c      	ite	eq
 800fe74:	2300      	moveq	r3, #0
 800fe76:	f003 0301 	andne.w	r3, r3, #1
 800fe7a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fe7e:	428a      	cmp	r2, r1
 800fe80:	bf0c      	ite	eq
 800fe82:	2300      	moveq	r3, #0
 800fe84:	f003 0301 	andne.w	r3, r3, #1
 800fe88:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800fe8c:	4282      	cmp	r2, r0
 800fe8e:	bf0c      	ite	eq
 800fe90:	2300      	moveq	r3, #0
 800fe92:	f003 0301 	andne.w	r3, r3, #1
 800fe96:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800fe9a:	428a      	cmp	r2, r1
 800fe9c:	bf0c      	ite	eq
 800fe9e:	2300      	moveq	r3, #0
 800fea0:	f003 0301 	andne.w	r3, r3, #1
 800fea4:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800fea8:	4282      	cmp	r2, r0
 800feaa:	bf0c      	ite	eq
 800feac:	2300      	moveq	r3, #0
 800feae:	f003 0301 	andne.w	r3, r3, #1
 800feb2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800feb6:	428a      	cmp	r2, r1
 800feb8:	bf0c      	ite	eq
 800feba:	2300      	moveq	r3, #0
 800febc:	f003 0301 	andne.w	r3, r3, #1
 800fec0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800fec4:	4282      	cmp	r2, r0
 800fec6:	bf0c      	ite	eq
 800fec8:	2300      	moveq	r3, #0
 800feca:	f003 0301 	andne.w	r3, r3, #1
 800fece:	428a      	cmp	r2, r1
 800fed0:	bf0c      	ite	eq
 800fed2:	2300      	moveq	r3, #0
 800fed4:	f003 0301 	andne.w	r3, r3, #1
 800fed8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fedc:	428a      	cmp	r2, r1
 800fede:	bf0c      	ite	eq
 800fee0:	2300      	moveq	r3, #0
 800fee2:	f003 0301 	andne.w	r3, r3, #1
 800fee6:	b113      	cbz	r3, 800feee <HAL_TIM_PWM_Init+0xba>
 800fee8:	4b37      	ldr	r3, [pc, #220]	; (800ffc8 <HAL_TIM_PWM_Init+0x194>)
 800feea:	429a      	cmp	r2, r3
 800feec:	d15f      	bne.n	800ffae <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800feee:	68a3      	ldr	r3, [r4, #8]
 800fef0:	f023 0210 	bic.w	r2, r3, #16
 800fef4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800fef8:	2920      	cmp	r1, #32
 800fefa:	bf18      	it	ne
 800fefc:	2a00      	cmpne	r2, #0
 800fefe:	d001      	beq.n	800ff04 <HAL_TIM_PWM_Init+0xd0>
 800ff00:	2b40      	cmp	r3, #64	; 0x40
 800ff02:	d14c      	bne.n	800ff9e <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ff04:	6923      	ldr	r3, [r4, #16]
 800ff06:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ff0a:	d002      	beq.n	800ff12 <HAL_TIM_PWM_Init+0xde>
 800ff0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff10:	d12b      	bne.n	800ff6a <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ff12:	69a3      	ldr	r3, [r4, #24]
 800ff14:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ff18:	d130      	bne.n	800ff7c <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ff1a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ff1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ff22:	b3b3      	cbz	r3, 800ff92 <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff24:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800ff26:	2302      	movs	r3, #2
 800ff28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff2c:	f851 0b04 	ldr.w	r0, [r1], #4
 800ff30:	f7ff fd58 	bl	800f9e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ff34:	2301      	movs	r3, #1
  return HAL_OK;
 800ff36:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ff38:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800ff40:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ff44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ff48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ff4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ff58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff5c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ff60:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ff64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ff68:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ff6a:	f240 5132 	movw	r1, #1330	; 0x532
 800ff6e:	4817      	ldr	r0, [pc, #92]	; (800ffcc <HAL_TIM_PWM_Init+0x198>)
 800ff70:	f7f4 f904 	bl	800417c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ff74:	69a3      	ldr	r3, [r4, #24]
 800ff76:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ff7a:	d0ce      	beq.n	800ff1a <HAL_TIM_PWM_Init+0xe6>
 800ff7c:	f240 5133 	movw	r1, #1331	; 0x533
 800ff80:	4812      	ldr	r0, [pc, #72]	; (800ffcc <HAL_TIM_PWM_Init+0x198>)
 800ff82:	f7f4 f8fb 	bl	800417c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ff86:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ff8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1c8      	bne.n	800ff24 <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 800ff92:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800ff94:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800ff98:	f7ff f842 	bl	800f020 <HAL_TIM_PWM_MspInit>
 800ff9c:	e7c2      	b.n	800ff24 <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ff9e:	f240 5131 	movw	r1, #1329	; 0x531
 800ffa2:	480a      	ldr	r0, [pc, #40]	; (800ffcc <HAL_TIM_PWM_Init+0x198>)
 800ffa4:	f7f4 f8ea 	bl	800417c <assert_failed>
 800ffa8:	e7ac      	b.n	800ff04 <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 800ffaa:	2001      	movs	r0, #1
}
 800ffac:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ffae:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 800ffb2:	4806      	ldr	r0, [pc, #24]	; (800ffcc <HAL_TIM_PWM_Init+0x198>)
 800ffb4:	f7f4 f8e2 	bl	800417c <assert_failed>
 800ffb8:	e799      	b.n	800feee <HAL_TIM_PWM_Init+0xba>
 800ffba:	bf00      	nop
 800ffbc:	40010000 	.word	0x40010000
 800ffc0:	40000800 	.word	0x40000800
 800ffc4:	40000400 	.word	0x40000400
 800ffc8:	40002000 	.word	0x40002000
 800ffcc:	0802bf54 	.word	0x0802bf54

0800ffd0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	f000 80b8 	beq.w	8010146 <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ffd6:	6802      	ldr	r2, [r0, #0]
 800ffd8:	4b5f      	ldr	r3, [pc, #380]	; (8010158 <HAL_TIM_IC_Init+0x188>)
 800ffda:	4960      	ldr	r1, [pc, #384]	; (801015c <HAL_TIM_IC_Init+0x18c>)
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	bf18      	it	ne
 800ffe0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800ffe4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ffe6:	bf14      	ite	ne
 800ffe8:	2301      	movne	r3, #1
 800ffea:	2300      	moveq	r3, #0
 800ffec:	4604      	mov	r4, r0
 800ffee:	485c      	ldr	r0, [pc, #368]	; (8010160 <HAL_TIM_IC_Init+0x190>)
 800fff0:	4282      	cmp	r2, r0
 800fff2:	bf0c      	ite	eq
 800fff4:	2300      	moveq	r3, #0
 800fff6:	f003 0301 	andne.w	r3, r3, #1
 800fffa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fffe:	428a      	cmp	r2, r1
 8010000:	bf0c      	ite	eq
 8010002:	2300      	moveq	r3, #0
 8010004:	f003 0301 	andne.w	r3, r3, #1
 8010008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801000c:	4282      	cmp	r2, r0
 801000e:	bf0c      	ite	eq
 8010010:	2300      	moveq	r3, #0
 8010012:	f003 0301 	andne.w	r3, r3, #1
 8010016:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801001a:	428a      	cmp	r2, r1
 801001c:	bf0c      	ite	eq
 801001e:	2300      	moveq	r3, #0
 8010020:	f003 0301 	andne.w	r3, r3, #1
 8010024:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010028:	4282      	cmp	r2, r0
 801002a:	bf0c      	ite	eq
 801002c:	2300      	moveq	r3, #0
 801002e:	f003 0301 	andne.w	r3, r3, #1
 8010032:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010036:	428a      	cmp	r2, r1
 8010038:	bf0c      	ite	eq
 801003a:	2300      	moveq	r3, #0
 801003c:	f003 0301 	andne.w	r3, r3, #1
 8010040:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010044:	4282      	cmp	r2, r0
 8010046:	bf0c      	ite	eq
 8010048:	2300      	moveq	r3, #0
 801004a:	f003 0301 	andne.w	r3, r3, #1
 801004e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010052:	428a      	cmp	r2, r1
 8010054:	bf0c      	ite	eq
 8010056:	2300      	moveq	r3, #0
 8010058:	f003 0301 	andne.w	r3, r3, #1
 801005c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010060:	4282      	cmp	r2, r0
 8010062:	bf0c      	ite	eq
 8010064:	2300      	moveq	r3, #0
 8010066:	f003 0301 	andne.w	r3, r3, #1
 801006a:	428a      	cmp	r2, r1
 801006c:	bf0c      	ite	eq
 801006e:	2300      	moveq	r3, #0
 8010070:	f003 0301 	andne.w	r3, r3, #1
 8010074:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010078:	428a      	cmp	r2, r1
 801007a:	bf0c      	ite	eq
 801007c:	2300      	moveq	r3, #0
 801007e:	f003 0301 	andne.w	r3, r3, #1
 8010082:	b113      	cbz	r3, 801008a <HAL_TIM_IC_Init+0xba>
 8010084:	4b37      	ldr	r3, [pc, #220]	; (8010164 <HAL_TIM_IC_Init+0x194>)
 8010086:	429a      	cmp	r2, r3
 8010088:	d15f      	bne.n	801014a <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801008a:	68a3      	ldr	r3, [r4, #8]
 801008c:	f023 0210 	bic.w	r2, r3, #16
 8010090:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8010094:	2920      	cmp	r1, #32
 8010096:	bf18      	it	ne
 8010098:	2a00      	cmpne	r2, #0
 801009a:	d001      	beq.n	80100a0 <HAL_TIM_IC_Init+0xd0>
 801009c:	2b40      	cmp	r3, #64	; 0x40
 801009e:	d14c      	bne.n	801013a <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80100a0:	6923      	ldr	r3, [r4, #16]
 80100a2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80100a6:	d002      	beq.n	80100ae <HAL_TIM_IC_Init+0xde>
 80100a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100ac:	d12b      	bne.n	8010106 <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80100ae:	69a3      	ldr	r3, [r4, #24]
 80100b0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80100b4:	d130      	bne.n	8010118 <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80100b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80100ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80100be:	b3b3      	cbz	r3, 801012e <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100c0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80100c2:	2302      	movs	r3, #2
 80100c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80100cc:	f7ff fc8a 	bl	800f9e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100d0:	2301      	movs	r3, #1
  return HAL_OK;
 80100d2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100d4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80100dc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80100e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80100e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80100e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80100f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80100f8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80100fc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010100:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010104:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010106:	f240 71cc 	movw	r1, #1996	; 0x7cc
 801010a:	4817      	ldr	r0, [pc, #92]	; (8010168 <HAL_TIM_IC_Init+0x198>)
 801010c:	f7f4 f836 	bl	800417c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010110:	69a3      	ldr	r3, [r4, #24]
 8010112:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010116:	d0ce      	beq.n	80100b6 <HAL_TIM_IC_Init+0xe6>
 8010118:	f240 71cd 	movw	r1, #1997	; 0x7cd
 801011c:	4812      	ldr	r0, [pc, #72]	; (8010168 <HAL_TIM_IC_Init+0x198>)
 801011e:	f7f4 f82d 	bl	800417c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010122:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010126:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801012a:	2b00      	cmp	r3, #0
 801012c:	d1c8      	bne.n	80100c0 <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 801012e:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8010130:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8010134:	f7fe ff76 	bl	800f024 <HAL_TIM_IC_MspInit>
 8010138:	e7c2      	b.n	80100c0 <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801013a:	f240 71cb 	movw	r1, #1995	; 0x7cb
 801013e:	480a      	ldr	r0, [pc, #40]	; (8010168 <HAL_TIM_IC_Init+0x198>)
 8010140:	f7f4 f81c 	bl	800417c <assert_failed>
 8010144:	e7ac      	b.n	80100a0 <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 8010146:	2001      	movs	r0, #1
}
 8010148:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801014a:	f240 71ca 	movw	r1, #1994	; 0x7ca
 801014e:	4806      	ldr	r0, [pc, #24]	; (8010168 <HAL_TIM_IC_Init+0x198>)
 8010150:	f7f4 f814 	bl	800417c <assert_failed>
 8010154:	e799      	b.n	801008a <HAL_TIM_IC_Init+0xba>
 8010156:	bf00      	nop
 8010158:	40010000 	.word	0x40010000
 801015c:	40000800 	.word	0x40000800
 8010160:	40000400 	.word	0x40000400
 8010164:	40002000 	.word	0x40002000
 8010168:	0802bf54 	.word	0x0802bf54

0801016c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801016c:	6a03      	ldr	r3, [r0, #32]
 801016e:	f023 0310 	bic.w	r3, r3, #16
{
 8010172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010176:	6203      	str	r3, [r0, #32]
{
 8010178:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 801017a:	6a05      	ldr	r5, [r0, #32]
{
 801017c:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 801017e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010182:	4b29      	ldr	r3, [pc, #164]	; (8010228 <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 8010184:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 8010188:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801018a:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801018c:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801018e:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010192:	688b      	ldr	r3, [r1, #8]
 8010194:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010198:	4b24      	ldr	r3, [pc, #144]	; (801022c <TIM_OC2_SetConfig+0xc0>)
 801019a:	4298      	cmp	r0, r3
 801019c:	d00b      	beq.n	80101b6 <TIM_OC2_SetConfig+0x4a>
 801019e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80101a2:	4298      	cmp	r0, r3
 80101a4:	d007      	beq.n	80101b6 <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 80101a6:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80101a8:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 80101ac:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80101ae:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80101b0:	6225      	str	r5, [r4, #32]
}
 80101b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80101b6:	68f3      	ldr	r3, [r6, #12]
 80101b8:	f033 0208 	bics.w	r2, r3, #8
 80101bc:	d123      	bne.n	8010206 <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80101be:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80101c2:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80101c6:	69b3      	ldr	r3, [r6, #24]
 80101c8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 80101cc:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80101d0:	d120      	bne.n	8010214 <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80101d2:	6973      	ldr	r3, [r6, #20]
 80101d4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80101d8:	d107      	bne.n	80101ea <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80101da:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80101de:	69b1      	ldr	r1, [r6, #24]
 80101e0:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 80101e4:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 80101e8:	e7dd      	b.n	80101a6 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80101ea:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 80101ee:	4810      	ldr	r0, [pc, #64]	; (8010230 <TIM_OC2_SetConfig+0xc4>)
 80101f0:	f7f3 ffc4 	bl	800417c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80101f4:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80101f8:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80101fa:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80101fc:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8010200:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8010204:	e7cf      	b.n	80101a6 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010206:	f641 31aa 	movw	r1, #7082	; 0x1baa
 801020a:	4809      	ldr	r0, [pc, #36]	; (8010230 <TIM_OC2_SetConfig+0xc4>)
 801020c:	f7f3 ffb6 	bl	800417c <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010210:	68f3      	ldr	r3, [r6, #12]
 8010212:	e7d4      	b.n	80101be <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010214:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 8010218:	4805      	ldr	r0, [pc, #20]	; (8010230 <TIM_OC2_SetConfig+0xc4>)
 801021a:	f7f3 ffaf 	bl	800417c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 801021e:	6973      	ldr	r3, [r6, #20]
 8010220:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010224:	d0d9      	beq.n	80101da <TIM_OC2_SetConfig+0x6e>
 8010226:	e7e0      	b.n	80101ea <TIM_OC2_SetConfig+0x7e>
 8010228:	feff8cff 	.word	0xfeff8cff
 801022c:	40010000 	.word	0x40010000
 8010230:	0802bf54 	.word	0x0802bf54

08010234 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8010234:	2a14      	cmp	r2, #20
{
 8010236:	b570      	push	{r4, r5, r6, lr}
 8010238:	4614      	mov	r4, r2
 801023a:	4605      	mov	r5, r0
 801023c:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 801023e:	d937      	bls.n	80102b0 <HAL_TIM_OC_ConfigChannel+0x7c>
 8010240:	2a3c      	cmp	r2, #60	; 0x3c
 8010242:	d139      	bne.n	80102b8 <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8010244:	6833      	ldr	r3, [r6, #0]
 8010246:	f023 0210 	bic.w	r2, r3, #16
 801024a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 801024e:	2a40      	cmp	r2, #64	; 0x40
 8010250:	bf18      	it	ne
 8010252:	2b00      	cmpne	r3, #0
 8010254:	d003      	beq.n	801025e <HAL_TIM_OC_ConfigChannel+0x2a>
 8010256:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801025a:	f040 8138 	bne.w	80104ce <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 801025e:	68b3      	ldr	r3, [r6, #8]
 8010260:	f033 0302 	bics.w	r3, r3, #2
 8010264:	d12e      	bne.n	80102c4 <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8010266:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801026a:	2b01      	cmp	r3, #1
 801026c:	d033      	beq.n	80102d6 <HAL_TIM_OC_ConfigChannel+0xa2>
 801026e:	2301      	movs	r3, #1
 8010270:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8010274:	2c14      	cmp	r4, #20
 8010276:	d816      	bhi.n	80102a6 <HAL_TIM_OC_ConfigChannel+0x72>
 8010278:	e8df f014 	tbh	[pc, r4, lsl #1]
 801027c:	0015002f 	.word	0x0015002f
 8010280:	00150015 	.word	0x00150015
 8010284:	00150080 	.word	0x00150080
 8010288:	00150015 	.word	0x00150015
 801028c:	001500b5 	.word	0x001500b5
 8010290:	00150015 	.word	0x00150015
 8010294:	001500db 	.word	0x001500db
 8010298:	00150015 	.word	0x00150015
 801029c:	00150101 	.word	0x00150101
 80102a0:	00150015 	.word	0x00150015
 80102a4:	010e      	.short	0x010e
 80102a6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80102a8:	2300      	movs	r3, #0
 80102aa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80102ae:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 80102b0:	4b98      	ldr	r3, [pc, #608]	; (8010514 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 80102b2:	40d3      	lsrs	r3, r2
 80102b4:	07db      	lsls	r3, r3, #31
 80102b6:	d4c5      	bmi.n	8010244 <HAL_TIM_OC_ConfigChannel+0x10>
 80102b8:	f640 71df 	movw	r1, #4063	; 0xfdf
 80102bc:	4896      	ldr	r0, [pc, #600]	; (8010518 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80102be:	f7f3 ff5d 	bl	800417c <assert_failed>
 80102c2:	e7bf      	b.n	8010244 <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80102c4:	f640 71e1 	movw	r1, #4065	; 0xfe1
 80102c8:	4893      	ldr	r0, [pc, #588]	; (8010518 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80102ca:	f7f3 ff57 	bl	800417c <assert_failed>
  __HAL_LOCK(htim);
 80102ce:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d1cb      	bne.n	801026e <HAL_TIM_OC_ConfigChannel+0x3a>
 80102d6:	2002      	movs	r0, #2
}
 80102d8:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80102da:	6828      	ldr	r0, [r5, #0]
 80102dc:	4b8f      	ldr	r3, [pc, #572]	; (801051c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 80102de:	4a90      	ldr	r2, [pc, #576]	; (8010520 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 80102e0:	4298      	cmp	r0, r3
 80102e2:	bf18      	it	ne
 80102e4:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80102e8:	bf14      	ite	ne
 80102ea:	2301      	movne	r3, #1
 80102ec:	2300      	moveq	r3, #0
 80102ee:	4290      	cmp	r0, r2
 80102f0:	bf0c      	ite	eq
 80102f2:	2300      	moveq	r3, #0
 80102f4:	f003 0301 	andne.w	r3, r3, #1
 80102f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80102fc:	4290      	cmp	r0, r2
 80102fe:	bf0c      	ite	eq
 8010300:	2300      	moveq	r3, #0
 8010302:	f003 0301 	andne.w	r3, r3, #1
 8010306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801030a:	4290      	cmp	r0, r2
 801030c:	bf0c      	ite	eq
 801030e:	2300      	moveq	r3, #0
 8010310:	f003 0301 	andne.w	r3, r3, #1
 8010314:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010318:	4290      	cmp	r0, r2
 801031a:	bf0c      	ite	eq
 801031c:	2300      	moveq	r3, #0
 801031e:	f003 0301 	andne.w	r3, r3, #1
 8010322:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010326:	4290      	cmp	r0, r2
 8010328:	bf0c      	ite	eq
 801032a:	2300      	moveq	r3, #0
 801032c:	f003 0301 	andne.w	r3, r3, #1
 8010330:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010334:	4290      	cmp	r0, r2
 8010336:	bf0c      	ite	eq
 8010338:	2300      	moveq	r3, #0
 801033a:	f003 0301 	andne.w	r3, r3, #1
 801033e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010342:	4290      	cmp	r0, r2
 8010344:	bf0c      	ite	eq
 8010346:	2300      	moveq	r3, #0
 8010348:	f003 0301 	andne.w	r3, r3, #1
 801034c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010350:	4290      	cmp	r0, r2
 8010352:	bf0c      	ite	eq
 8010354:	2300      	moveq	r3, #0
 8010356:	f003 0301 	andne.w	r3, r3, #1
 801035a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801035e:	4290      	cmp	r0, r2
 8010360:	bf0c      	ite	eq
 8010362:	2300      	moveq	r3, #0
 8010364:	f003 0301 	andne.w	r3, r3, #1
 8010368:	b11b      	cbz	r3, 8010372 <HAL_TIM_OC_ConfigChannel+0x13e>
 801036a:	4b6e      	ldr	r3, [pc, #440]	; (8010524 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 801036c:	4298      	cmp	r0, r3
 801036e:	f040 80c9 	bne.w	8010504 <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010372:	4631      	mov	r1, r6
 8010374:	f7fe f9ac 	bl	800e6d0 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010378:	2000      	movs	r0, #0
      break;
 801037a:	e795      	b.n	80102a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801037c:	6828      	ldr	r0, [r5, #0]
 801037e:	4b67      	ldr	r3, [pc, #412]	; (801051c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010380:	4a67      	ldr	r2, [pc, #412]	; (8010520 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010382:	4298      	cmp	r0, r3
 8010384:	bf18      	it	ne
 8010386:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801038a:	bf14      	ite	ne
 801038c:	2301      	movne	r3, #1
 801038e:	2300      	moveq	r3, #0
 8010390:	4290      	cmp	r0, r2
 8010392:	bf0c      	ite	eq
 8010394:	2300      	moveq	r3, #0
 8010396:	f003 0301 	andne.w	r3, r3, #1
 801039a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801039e:	4290      	cmp	r0, r2
 80103a0:	bf0c      	ite	eq
 80103a2:	2300      	moveq	r3, #0
 80103a4:	f003 0301 	andne.w	r3, r3, #1
 80103a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80103ac:	4290      	cmp	r0, r2
 80103ae:	bf0c      	ite	eq
 80103b0:	2300      	moveq	r3, #0
 80103b2:	f003 0301 	andne.w	r3, r3, #1
 80103b6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80103ba:	4290      	cmp	r0, r2
 80103bc:	bf0c      	ite	eq
 80103be:	2300      	moveq	r3, #0
 80103c0:	f003 0301 	andne.w	r3, r3, #1
 80103c4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80103c8:	4290      	cmp	r0, r2
 80103ca:	bf0c      	ite	eq
 80103cc:	2300      	moveq	r3, #0
 80103ce:	f003 0301 	andne.w	r3, r3, #1
 80103d2:	b11b      	cbz	r3, 80103dc <HAL_TIM_OC_ConfigChannel+0x1a8>
 80103d4:	4b54      	ldr	r3, [pc, #336]	; (8010528 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 80103d6:	4298      	cmp	r0, r3
 80103d8:	f040 808d 	bne.w	80104f6 <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80103dc:	4631      	mov	r1, r6
 80103de:	f7ff fec5 	bl	801016c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80103e2:	2000      	movs	r0, #0
      break;
 80103e4:	e760      	b.n	80102a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80103e6:	6828      	ldr	r0, [r5, #0]
 80103e8:	4b4c      	ldr	r3, [pc, #304]	; (801051c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 80103ea:	4a4d      	ldr	r2, [pc, #308]	; (8010520 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 80103ec:	4298      	cmp	r0, r3
 80103ee:	bf18      	it	ne
 80103f0:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80103f4:	bf14      	ite	ne
 80103f6:	2301      	movne	r3, #1
 80103f8:	2300      	moveq	r3, #0
 80103fa:	4290      	cmp	r0, r2
 80103fc:	bf0c      	ite	eq
 80103fe:	2300      	moveq	r3, #0
 8010400:	f003 0301 	andne.w	r3, r3, #1
 8010404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010408:	4290      	cmp	r0, r2
 801040a:	bf0c      	ite	eq
 801040c:	2300      	moveq	r3, #0
 801040e:	f003 0301 	andne.w	r3, r3, #1
 8010412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010416:	4290      	cmp	r0, r2
 8010418:	bf0c      	ite	eq
 801041a:	2300      	moveq	r3, #0
 801041c:	f003 0301 	andne.w	r3, r3, #1
 8010420:	b113      	cbz	r3, 8010428 <HAL_TIM_OC_ConfigChannel+0x1f4>
 8010422:	4b42      	ldr	r3, [pc, #264]	; (801052c <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8010424:	4298      	cmp	r0, r3
 8010426:	d15f      	bne.n	80104e8 <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010428:	4631      	mov	r1, r6
 801042a:	f7fe f9b1 	bl	800e790 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 801042e:	2000      	movs	r0, #0
      break;
 8010430:	e73a      	b.n	80102a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010432:	6828      	ldr	r0, [r5, #0]
 8010434:	4b39      	ldr	r3, [pc, #228]	; (801051c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010436:	4a3a      	ldr	r2, [pc, #232]	; (8010520 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010438:	4298      	cmp	r0, r3
 801043a:	bf18      	it	ne
 801043c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010440:	bf14      	ite	ne
 8010442:	2301      	movne	r3, #1
 8010444:	2300      	moveq	r3, #0
 8010446:	4290      	cmp	r0, r2
 8010448:	bf0c      	ite	eq
 801044a:	2300      	moveq	r3, #0
 801044c:	f003 0301 	andne.w	r3, r3, #1
 8010450:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010454:	4290      	cmp	r0, r2
 8010456:	bf0c      	ite	eq
 8010458:	2300      	moveq	r3, #0
 801045a:	f003 0301 	andne.w	r3, r3, #1
 801045e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010462:	4290      	cmp	r0, r2
 8010464:	bf0c      	ite	eq
 8010466:	2300      	moveq	r3, #0
 8010468:	f003 0301 	andne.w	r3, r3, #1
 801046c:	b113      	cbz	r3, 8010474 <HAL_TIM_OC_ConfigChannel+0x240>
 801046e:	4b2f      	ldr	r3, [pc, #188]	; (801052c <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8010470:	4298      	cmp	r0, r3
 8010472:	d132      	bne.n	80104da <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010474:	4631      	mov	r1, r6
 8010476:	f7fe f9ef 	bl	800e858 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 801047a:	2000      	movs	r0, #0
      break;
 801047c:	e714      	b.n	80102a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 801047e:	6828      	ldr	r0, [r5, #0]
 8010480:	4b26      	ldr	r3, [pc, #152]	; (801051c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010482:	4298      	cmp	r0, r3
 8010484:	d003      	beq.n	801048e <HAL_TIM_OC_ConfigChannel+0x25a>
 8010486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801048a:	4298      	cmp	r0, r3
 801048c:	d118      	bne.n	80104c0 <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801048e:	4631      	mov	r1, r6
 8010490:	f7fe f8ca 	bl	800e628 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010494:	2000      	movs	r0, #0
      break;
 8010496:	e707      	b.n	80102a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010498:	6828      	ldr	r0, [r5, #0]
 801049a:	4b20      	ldr	r3, [pc, #128]	; (801051c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 801049c:	4298      	cmp	r0, r3
 801049e:	d003      	beq.n	80104a8 <HAL_TIM_OC_ConfigChannel+0x274>
 80104a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80104a4:	4298      	cmp	r0, r3
 80104a6:	d104      	bne.n	80104b2 <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80104a8:	4631      	mov	r1, r6
 80104aa:	f7fe f8e7 	bl	800e67c <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80104ae:	2000      	movs	r0, #0
      break;
 80104b0:	e6fa      	b.n	80102a8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80104b2:	4819      	ldr	r0, [pc, #100]	; (8010518 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80104b4:	f241 011d 	movw	r1, #4125	; 0x101d
 80104b8:	f7f3 fe60 	bl	800417c <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80104bc:	6828      	ldr	r0, [r5, #0]
 80104be:	e7f3      	b.n	80104a8 <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80104c0:	4815      	ldr	r0, [pc, #84]	; (8010518 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80104c2:	f241 0113 	movw	r1, #4115	; 0x1013
 80104c6:	f7f3 fe59 	bl	800417c <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80104ca:	6828      	ldr	r0, [r5, #0]
 80104cc:	e7df      	b.n	801048e <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 80104ce:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 80104d2:	4811      	ldr	r0, [pc, #68]	; (8010518 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80104d4:	f7f3 fe52 	bl	800417c <assert_failed>
 80104d8:	e6c1      	b.n	801025e <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80104da:	480f      	ldr	r0, [pc, #60]	; (8010518 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80104dc:	f241 0109 	movw	r1, #4105	; 0x1009
 80104e0:	f7f3 fe4c 	bl	800417c <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80104e4:	6828      	ldr	r0, [r5, #0]
 80104e6:	e7c5      	b.n	8010474 <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80104e8:	480b      	ldr	r0, [pc, #44]	; (8010518 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80104ea:	f640 71ff 	movw	r1, #4095	; 0xfff
 80104ee:	f7f3 fe45 	bl	800417c <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80104f2:	6828      	ldr	r0, [r5, #0]
 80104f4:	e798      	b.n	8010428 <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80104f6:	4808      	ldr	r0, [pc, #32]	; (8010518 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80104f8:	f640 71f5 	movw	r1, #4085	; 0xff5
 80104fc:	f7f3 fe3e 	bl	800417c <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010500:	6828      	ldr	r0, [r5, #0]
 8010502:	e76b      	b.n	80103dc <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010504:	4804      	ldr	r0, [pc, #16]	; (8010518 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010506:	f640 71eb 	movw	r1, #4075	; 0xfeb
 801050a:	f7f3 fe37 	bl	800417c <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801050e:	6828      	ldr	r0, [r5, #0]
 8010510:	e72f      	b.n	8010372 <HAL_TIM_OC_ConfigChannel+0x13e>
 8010512:	bf00      	nop
 8010514:	00111111 	.word	0x00111111
 8010518:	0802bf54 	.word	0x0802bf54
 801051c:	40010000 	.word	0x40010000
 8010520:	40000400 	.word	0x40000400
 8010524:	40002000 	.word	0x40002000
 8010528:	40001800 	.word	0x40001800
 801052c:	40010400 	.word	0x40010400

08010530 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8010530:	2a14      	cmp	r2, #20
{
 8010532:	b570      	push	{r4, r5, r6, lr}
 8010534:	4616      	mov	r6, r2
 8010536:	4605      	mov	r5, r0
 8010538:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 801053a:	d933      	bls.n	80105a4 <HAL_TIM_PWM_ConfigChannel+0x74>
 801053c:	2a3c      	cmp	r2, #60	; 0x3c
 801053e:	d135      	bne.n	80105ac <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8010540:	6822      	ldr	r2, [r4, #0]
 8010542:	4b90      	ldr	r3, [pc, #576]	; (8010784 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8010544:	4013      	ands	r3, r2
 8010546:	2b60      	cmp	r3, #96	; 0x60
 8010548:	d004      	beq.n	8010554 <HAL_TIM_PWM_ConfigChannel+0x24>
 801054a:	f022 0210 	bic.w	r2, r2, #16
 801054e:	4b8e      	ldr	r3, [pc, #568]	; (8010788 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8010550:	429a      	cmp	r2, r3
 8010552:	d147      	bne.n	80105e4 <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010554:	68a3      	ldr	r3, [r4, #8]
 8010556:	f033 0302 	bics.w	r3, r3, #2
 801055a:	d13d      	bne.n	80105d8 <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 801055c:	6923      	ldr	r3, [r4, #16]
 801055e:	f033 0304 	bics.w	r3, r3, #4
 8010562:	d12e      	bne.n	80105c2 <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8010564:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010568:	2b01      	cmp	r3, #1
 801056a:	d033      	beq.n	80105d4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 801056c:	2301      	movs	r3, #1
 801056e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8010572:	2e14      	cmp	r6, #20
 8010574:	d820      	bhi.n	80105b8 <HAL_TIM_PWM_ConfigChannel+0x88>
 8010576:	e8df f016 	tbh	[pc, r6, lsl #1]
 801057a:	00a7      	.short	0x00a7
 801057c:	001f001f 	.word	0x001f001f
 8010580:	0115001f 	.word	0x0115001f
 8010584:	001f001f 	.word	0x001f001f
 8010588:	0157001f 	.word	0x0157001f
 801058c:	001f001f 	.word	0x001f001f
 8010590:	0057001f 	.word	0x0057001f
 8010594:	001f001f 	.word	0x001f001f
 8010598:	008c001f 	.word	0x008c001f
 801059c:	001f001f 	.word	0x001f001f
 80105a0:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 80105a4:	4b79      	ldr	r3, [pc, #484]	; (801078c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80105a6:	40d3      	lsrs	r3, r2
 80105a8:	07db      	lsls	r3, r3, #31
 80105aa:	d4c9      	bmi.n	8010540 <HAL_TIM_PWM_ConfigChannel+0x10>
 80105ac:	f241 01a7 	movw	r1, #4263	; 0x10a7
 80105b0:	4877      	ldr	r0, [pc, #476]	; (8010790 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80105b2:	f7f3 fde3 	bl	800417c <assert_failed>
 80105b6:	e7c3      	b.n	8010540 <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 80105b8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80105ba:	2300      	movs	r3, #0
 80105bc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80105c0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80105c2:	f241 01aa 	movw	r1, #4266	; 0x10aa
 80105c6:	4872      	ldr	r0, [pc, #456]	; (8010790 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80105c8:	f7f3 fdd8 	bl	800417c <assert_failed>
  __HAL_LOCK(htim);
 80105cc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d1cb      	bne.n	801056c <HAL_TIM_PWM_ConfigChannel+0x3c>
 80105d4:	2002      	movs	r0, #2
}
 80105d6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80105d8:	f241 01a9 	movw	r1, #4265	; 0x10a9
 80105dc:	486c      	ldr	r0, [pc, #432]	; (8010790 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80105de:	f7f3 fdcd 	bl	800417c <assert_failed>
 80105e2:	e7bb      	b.n	801055c <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80105e4:	f241 01a8 	movw	r1, #4264	; 0x10a8
 80105e8:	4869      	ldr	r0, [pc, #420]	; (8010790 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80105ea:	f7f3 fdc7 	bl	800417c <assert_failed>
 80105ee:	e7b1      	b.n	8010554 <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80105f0:	6828      	ldr	r0, [r5, #0]
 80105f2:	4b68      	ldr	r3, [pc, #416]	; (8010794 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80105f4:	4298      	cmp	r0, r3
 80105f6:	d004      	beq.n	8010602 <HAL_TIM_PWM_ConfigChannel+0xd2>
 80105f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80105fc:	4298      	cmp	r0, r3
 80105fe:	f040 814d 	bne.w	801089c <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010602:	4621      	mov	r1, r4
 8010604:	f7fe f83a 	bl	800e67c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010608:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801060a:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801060c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801060e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010612:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010614:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010616:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 801061a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801061c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801061e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010622:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010624:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010626:	e7c8      	b.n	80105ba <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010628:	6828      	ldr	r0, [r5, #0]
 801062a:	4b5a      	ldr	r3, [pc, #360]	; (8010794 <HAL_TIM_PWM_ConfigChannel+0x264>)
 801062c:	4a5a      	ldr	r2, [pc, #360]	; (8010798 <HAL_TIM_PWM_ConfigChannel+0x268>)
 801062e:	4298      	cmp	r0, r3
 8010630:	bf18      	it	ne
 8010632:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010636:	bf14      	ite	ne
 8010638:	2301      	movne	r3, #1
 801063a:	2300      	moveq	r3, #0
 801063c:	4290      	cmp	r0, r2
 801063e:	bf0c      	ite	eq
 8010640:	2300      	moveq	r3, #0
 8010642:	f003 0301 	andne.w	r3, r3, #1
 8010646:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801064a:	4290      	cmp	r0, r2
 801064c:	bf0c      	ite	eq
 801064e:	2300      	moveq	r3, #0
 8010650:	f003 0301 	andne.w	r3, r3, #1
 8010654:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010658:	4290      	cmp	r0, r2
 801065a:	bf0c      	ite	eq
 801065c:	2300      	moveq	r3, #0
 801065e:	f003 0301 	andne.w	r3, r3, #1
 8010662:	b11b      	cbz	r3, 801066c <HAL_TIM_PWM_ConfigChannel+0x13c>
 8010664:	4b4d      	ldr	r3, [pc, #308]	; (801079c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8010666:	4298      	cmp	r0, r3
 8010668:	f040 811f 	bne.w	80108aa <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801066c:	4621      	mov	r1, r4
 801066e:	f7fe f8f3 	bl	800e858 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010672:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010674:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010676:	69d9      	ldr	r1, [r3, #28]
 8010678:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 801067c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801067e:	69d9      	ldr	r1, [r3, #28]
 8010680:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010684:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010686:	69da      	ldr	r2, [r3, #28]
 8010688:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 801068c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801068e:	61da      	str	r2, [r3, #28]
      break;
 8010690:	e793      	b.n	80105ba <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010692:	6828      	ldr	r0, [r5, #0]
 8010694:	4b3f      	ldr	r3, [pc, #252]	; (8010794 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010696:	4298      	cmp	r0, r3
 8010698:	d004      	beq.n	80106a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 801069a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801069e:	4298      	cmp	r0, r3
 80106a0:	f040 80f5 	bne.w	801088e <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80106a4:	4621      	mov	r1, r4
 80106a6:	f7fd ffbf 	bl	800e628 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80106aa:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80106ac:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80106ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80106b0:	f041 0108 	orr.w	r1, r1, #8
 80106b4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80106b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80106b8:	f021 0104 	bic.w	r1, r1, #4
 80106bc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80106be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106c0:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80106c2:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80106c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80106c6:	e778      	b.n	80105ba <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80106c8:	6828      	ldr	r0, [r5, #0]
 80106ca:	4b32      	ldr	r3, [pc, #200]	; (8010794 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80106cc:	4a32      	ldr	r2, [pc, #200]	; (8010798 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80106ce:	4298      	cmp	r0, r3
 80106d0:	bf18      	it	ne
 80106d2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80106d6:	bf14      	ite	ne
 80106d8:	2301      	movne	r3, #1
 80106da:	2300      	moveq	r3, #0
 80106dc:	4290      	cmp	r0, r2
 80106de:	bf0c      	ite	eq
 80106e0:	2300      	moveq	r3, #0
 80106e2:	f003 0301 	andne.w	r3, r3, #1
 80106e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80106ea:	4290      	cmp	r0, r2
 80106ec:	bf0c      	ite	eq
 80106ee:	2300      	moveq	r3, #0
 80106f0:	f003 0301 	andne.w	r3, r3, #1
 80106f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80106f8:	4290      	cmp	r0, r2
 80106fa:	bf0c      	ite	eq
 80106fc:	2300      	moveq	r3, #0
 80106fe:	f003 0301 	andne.w	r3, r3, #1
 8010702:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010706:	4290      	cmp	r0, r2
 8010708:	bf0c      	ite	eq
 801070a:	2300      	moveq	r3, #0
 801070c:	f003 0301 	andne.w	r3, r3, #1
 8010710:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010714:	4290      	cmp	r0, r2
 8010716:	bf0c      	ite	eq
 8010718:	2300      	moveq	r3, #0
 801071a:	f003 0301 	andne.w	r3, r3, #1
 801071e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010722:	4290      	cmp	r0, r2
 8010724:	bf0c      	ite	eq
 8010726:	2300      	moveq	r3, #0
 8010728:	f003 0301 	andne.w	r3, r3, #1
 801072c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010730:	4290      	cmp	r0, r2
 8010732:	bf0c      	ite	eq
 8010734:	2300      	moveq	r3, #0
 8010736:	f003 0301 	andne.w	r3, r3, #1
 801073a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 801073e:	4290      	cmp	r0, r2
 8010740:	bf0c      	ite	eq
 8010742:	2300      	moveq	r3, #0
 8010744:	f003 0301 	andne.w	r3, r3, #1
 8010748:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801074c:	4290      	cmp	r0, r2
 801074e:	bf0c      	ite	eq
 8010750:	2300      	moveq	r3, #0
 8010752:	f003 0301 	andne.w	r3, r3, #1
 8010756:	b11b      	cbz	r3, 8010760 <HAL_TIM_PWM_ConfigChannel+0x230>
 8010758:	4b11      	ldr	r3, [pc, #68]	; (80107a0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 801075a:	4298      	cmp	r0, r3
 801075c:	f040 80ba 	bne.w	80108d4 <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010760:	4621      	mov	r1, r4
 8010762:	f7fd ffb5 	bl	800e6d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010766:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010768:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801076a:	6999      	ldr	r1, [r3, #24]
 801076c:	f041 0108 	orr.w	r1, r1, #8
 8010770:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010772:	6999      	ldr	r1, [r3, #24]
 8010774:	f021 0104 	bic.w	r1, r1, #4
 8010778:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801077a:	699a      	ldr	r2, [r3, #24]
 801077c:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 801077e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010780:	619a      	str	r2, [r3, #24]
      break;
 8010782:	e71a      	b.n	80105ba <HAL_TIM_PWM_ConfigChannel+0x8a>
 8010784:	fffeffef 	.word	0xfffeffef
 8010788:	00010040 	.word	0x00010040
 801078c:	00111111 	.word	0x00111111
 8010790:	0802bf54 	.word	0x0802bf54
 8010794:	40010000 	.word	0x40010000
 8010798:	40000400 	.word	0x40000400
 801079c:	40010400 	.word	0x40010400
 80107a0:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80107a4:	6828      	ldr	r0, [r5, #0]
 80107a6:	4b4f      	ldr	r3, [pc, #316]	; (80108e4 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 80107a8:	4a4f      	ldr	r2, [pc, #316]	; (80108e8 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 80107aa:	4298      	cmp	r0, r3
 80107ac:	bf18      	it	ne
 80107ae:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80107b2:	bf14      	ite	ne
 80107b4:	2301      	movne	r3, #1
 80107b6:	2300      	moveq	r3, #0
 80107b8:	4290      	cmp	r0, r2
 80107ba:	bf0c      	ite	eq
 80107bc:	2300      	moveq	r3, #0
 80107be:	f003 0301 	andne.w	r3, r3, #1
 80107c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80107c6:	4290      	cmp	r0, r2
 80107c8:	bf0c      	ite	eq
 80107ca:	2300      	moveq	r3, #0
 80107cc:	f003 0301 	andne.w	r3, r3, #1
 80107d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80107d4:	4290      	cmp	r0, r2
 80107d6:	bf0c      	ite	eq
 80107d8:	2300      	moveq	r3, #0
 80107da:	f003 0301 	andne.w	r3, r3, #1
 80107de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80107e2:	4290      	cmp	r0, r2
 80107e4:	bf0c      	ite	eq
 80107e6:	2300      	moveq	r3, #0
 80107e8:	f003 0301 	andne.w	r3, r3, #1
 80107ec:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80107f0:	4290      	cmp	r0, r2
 80107f2:	bf0c      	ite	eq
 80107f4:	2300      	moveq	r3, #0
 80107f6:	f003 0301 	andne.w	r3, r3, #1
 80107fa:	b113      	cbz	r3, 8010802 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 80107fc:	4b3b      	ldr	r3, [pc, #236]	; (80108ec <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 80107fe:	4298      	cmp	r0, r3
 8010800:	d161      	bne.n	80108c6 <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010802:	4621      	mov	r1, r4
 8010804:	f7ff fcb2 	bl	801016c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010808:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801080a:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801080c:	6999      	ldr	r1, [r3, #24]
 801080e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010812:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010814:	6999      	ldr	r1, [r3, #24]
 8010816:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 801081a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801081c:	699a      	ldr	r2, [r3, #24]
 801081e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010822:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010824:	619a      	str	r2, [r3, #24]
      break;
 8010826:	e6c8      	b.n	80105ba <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010828:	6828      	ldr	r0, [r5, #0]
 801082a:	4b2e      	ldr	r3, [pc, #184]	; (80108e4 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 801082c:	4a2e      	ldr	r2, [pc, #184]	; (80108e8 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 801082e:	4298      	cmp	r0, r3
 8010830:	bf18      	it	ne
 8010832:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010836:	bf14      	ite	ne
 8010838:	2301      	movne	r3, #1
 801083a:	2300      	moveq	r3, #0
 801083c:	4290      	cmp	r0, r2
 801083e:	bf0c      	ite	eq
 8010840:	2300      	moveq	r3, #0
 8010842:	f003 0301 	andne.w	r3, r3, #1
 8010846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801084a:	4290      	cmp	r0, r2
 801084c:	bf0c      	ite	eq
 801084e:	2300      	moveq	r3, #0
 8010850:	f003 0301 	andne.w	r3, r3, #1
 8010854:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010858:	4290      	cmp	r0, r2
 801085a:	bf0c      	ite	eq
 801085c:	2300      	moveq	r3, #0
 801085e:	f003 0301 	andne.w	r3, r3, #1
 8010862:	b113      	cbz	r3, 801086a <HAL_TIM_PWM_ConfigChannel+0x33a>
 8010864:	4b22      	ldr	r3, [pc, #136]	; (80108f0 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 8010866:	4298      	cmp	r0, r3
 8010868:	d126      	bne.n	80108b8 <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801086a:	4621      	mov	r1, r4
 801086c:	f7fd ff90 	bl	800e790 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010870:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010872:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010874:	69d9      	ldr	r1, [r3, #28]
 8010876:	f041 0108 	orr.w	r1, r1, #8
 801087a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801087c:	69d9      	ldr	r1, [r3, #28]
 801087e:	f021 0104 	bic.w	r1, r1, #4
 8010882:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010884:	69da      	ldr	r2, [r3, #28]
 8010886:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010888:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801088a:	61da      	str	r2, [r3, #28]
      break;
 801088c:	e695      	b.n	80105ba <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 801088e:	4819      	ldr	r0, [pc, #100]	; (80108f4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010890:	f241 01f8 	movw	r1, #4344	; 0x10f8
 8010894:	f7f3 fc72 	bl	800417c <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010898:	6828      	ldr	r0, [r5, #0]
 801089a:	e703      	b.n	80106a4 <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 801089c:	4815      	ldr	r0, [pc, #84]	; (80108f4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801089e:	f241 1109 	movw	r1, #4361	; 0x1109
 80108a2:	f7f3 fc6b 	bl	800417c <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80108a6:	6828      	ldr	r0, [r5, #0]
 80108a8:	e6ab      	b.n	8010602 <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80108aa:	4812      	ldr	r0, [pc, #72]	; (80108f4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80108ac:	f241 01e7 	movw	r1, #4327	; 0x10e7
 80108b0:	f7f3 fc64 	bl	800417c <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80108b4:	6828      	ldr	r0, [r5, #0]
 80108b6:	e6d9      	b.n	801066c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80108b8:	480e      	ldr	r0, [pc, #56]	; (80108f4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80108ba:	f241 01d6 	movw	r1, #4310	; 0x10d6
 80108be:	f7f3 fc5d 	bl	800417c <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80108c2:	6828      	ldr	r0, [r5, #0]
 80108c4:	e7d1      	b.n	801086a <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80108c6:	480b      	ldr	r0, [pc, #44]	; (80108f4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80108c8:	f241 01c5 	movw	r1, #4293	; 0x10c5
 80108cc:	f7f3 fc56 	bl	800417c <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80108d0:	6828      	ldr	r0, [r5, #0]
 80108d2:	e796      	b.n	8010802 <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80108d4:	4807      	ldr	r0, [pc, #28]	; (80108f4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80108d6:	f241 01b4 	movw	r1, #4276	; 0x10b4
 80108da:	f7f3 fc4f 	bl	800417c <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80108de:	6828      	ldr	r0, [r5, #0]
 80108e0:	e73e      	b.n	8010760 <HAL_TIM_PWM_ConfigChannel+0x230>
 80108e2:	bf00      	nop
 80108e4:	40010000 	.word	0x40010000
 80108e8:	40000400 	.word	0x40000400
 80108ec:	40001800 	.word	0x40001800
 80108f0:	40010400 	.word	0x40010400
 80108f4:	0802bf54 	.word	0x0802bf54

080108f8 <TIM_TI1_SetConfig>:
{
 80108f8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80108fa:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80108fc:	4e1b      	ldr	r6, [pc, #108]	; (801096c <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80108fe:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010902:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010904:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010906:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8010908:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801090a:	d01d      	beq.n	8010948 <TIM_TI1_SetConfig+0x50>
 801090c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010910:	d01a      	beq.n	8010948 <TIM_TI1_SetConfig+0x50>
 8010912:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8010916:	42b0      	cmp	r0, r6
 8010918:	d016      	beq.n	8010948 <TIM_TI1_SetConfig+0x50>
 801091a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801091e:	42b0      	cmp	r0, r6
 8010920:	d012      	beq.n	8010948 <TIM_TI1_SetConfig+0x50>
 8010922:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010926:	42b0      	cmp	r0, r6
 8010928:	d00e      	beq.n	8010948 <TIM_TI1_SetConfig+0x50>
 801092a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 801092e:	42b0      	cmp	r0, r6
 8010930:	d00a      	beq.n	8010948 <TIM_TI1_SetConfig+0x50>
 8010932:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8010936:	42b0      	cmp	r0, r6
 8010938:	d006      	beq.n	8010948 <TIM_TI1_SetConfig+0x50>
 801093a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 801093e:	42b0      	cmp	r0, r6
 8010940:	d002      	beq.n	8010948 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010942:	f044 0201 	orr.w	r2, r4, #1
 8010946:	e002      	b.n	801094e <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010948:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 801094c:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801094e:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010950:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010954:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010958:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801095c:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801095e:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010960:	4313      	orrs	r3, r2
}
 8010962:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 8010964:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8010966:	6201      	str	r1, [r0, #32]
}
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	40010000 	.word	0x40010000

08010970 <HAL_TIM_IC_ConfigChannel>:
{
 8010970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010972:	4ba8      	ldr	r3, [pc, #672]	; (8010c14 <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 8010974:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010976:	6801      	ldr	r1, [r0, #0]
{
 8010978:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801097a:	4fa7      	ldr	r7, [pc, #668]	; (8010c18 <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 801097c:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801097e:	4299      	cmp	r1, r3
 8010980:	bf18      	it	ne
 8010982:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 8010986:	4aa5      	ldr	r2, [pc, #660]	; (8010c1c <HAL_TIM_IC_ConfigChannel+0x2ac>)
 8010988:	bf14      	ite	ne
 801098a:	2301      	movne	r3, #1
 801098c:	2300      	moveq	r3, #0
 801098e:	42b9      	cmp	r1, r7
 8010990:	bf0c      	ite	eq
 8010992:	2300      	moveq	r3, #0
 8010994:	f003 0301 	andne.w	r3, r3, #1
 8010998:	4291      	cmp	r1, r2
 801099a:	bf0c      	ite	eq
 801099c:	2300      	moveq	r3, #0
 801099e:	f003 0301 	andne.w	r3, r3, #1
 80109a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80109a6:	4291      	cmp	r1, r2
 80109a8:	bf0c      	ite	eq
 80109aa:	2300      	moveq	r3, #0
 80109ac:	f003 0301 	andne.w	r3, r3, #1
 80109b0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80109b4:	4291      	cmp	r1, r2
 80109b6:	bf0c      	ite	eq
 80109b8:	2300      	moveq	r3, #0
 80109ba:	f003 0301 	andne.w	r3, r3, #1
 80109be:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80109c2:	4291      	cmp	r1, r2
 80109c4:	bf0c      	ite	eq
 80109c6:	2300      	moveq	r3, #0
 80109c8:	f003 0301 	andne.w	r3, r3, #1
 80109cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80109d0:	4291      	cmp	r1, r2
 80109d2:	bf0c      	ite	eq
 80109d4:	2300      	moveq	r3, #0
 80109d6:	f003 0301 	andne.w	r3, r3, #1
 80109da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80109de:	4291      	cmp	r1, r2
 80109e0:	bf0c      	ite	eq
 80109e2:	2300      	moveq	r3, #0
 80109e4:	f003 0301 	andne.w	r3, r3, #1
 80109e8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80109ec:	4291      	cmp	r1, r2
 80109ee:	bf0c      	ite	eq
 80109f0:	2300      	moveq	r3, #0
 80109f2:	f003 0301 	andne.w	r3, r3, #1
 80109f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80109fa:	4291      	cmp	r1, r2
 80109fc:	bf0c      	ite	eq
 80109fe:	2300      	moveq	r3, #0
 8010a00:	f003 0301 	andne.w	r3, r3, #1
 8010a04:	b11b      	cbz	r3, 8010a0e <HAL_TIM_IC_ConfigChannel+0x9e>
 8010a06:	4b86      	ldr	r3, [pc, #536]	; (8010c20 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 8010a08:	4299      	cmp	r1, r3
 8010a0a:	f040 8158 	bne.w	8010cbe <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	f033 0202 	bics.w	r2, r3, #2
 8010a14:	d001      	beq.n	8010a1a <HAL_TIM_IC_ConfigChannel+0xaa>
 8010a16:	2b0a      	cmp	r3, #10
 8010a18:	d11e      	bne.n	8010a58 <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8010a1a:	6863      	ldr	r3, [r4, #4]
 8010a1c:	3b01      	subs	r3, #1
 8010a1e:	2b02      	cmp	r3, #2
 8010a20:	d823      	bhi.n	8010a6a <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8010a22:	68a3      	ldr	r3, [r4, #8]
 8010a24:	f033 030c 	bics.w	r3, r3, #12
 8010a28:	d128      	bne.n	8010a7c <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8010a2a:	68e3      	ldr	r3, [r4, #12]
 8010a2c:	2b0f      	cmp	r3, #15
 8010a2e:	d82d      	bhi.n	8010a8c <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 8010a30:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d032      	beq.n	8010a9e <HAL_TIM_IC_ConfigChannel+0x12e>
 8010a38:	2001      	movs	r0, #1
 8010a3a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8010a3e:	b386      	cbz	r6, 8010aa2 <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 8010a40:	2e04      	cmp	r6, #4
 8010a42:	d042      	beq.n	8010aca <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 8010a44:	2e08      	cmp	r6, #8
 8010a46:	f000 80f3 	beq.w	8010c30 <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 8010a4a:	2e0c      	cmp	r6, #12
 8010a4c:	f000 8095 	beq.w	8010b7a <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 8010a50:	2300      	movs	r3, #0
 8010a52:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8010a58:	f241 0141 	movw	r1, #4161	; 0x1041
 8010a5c:	4871      	ldr	r0, [pc, #452]	; (8010c24 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010a5e:	f7f3 fb8d 	bl	800417c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8010a62:	6863      	ldr	r3, [r4, #4]
 8010a64:	3b01      	subs	r3, #1
 8010a66:	2b02      	cmp	r3, #2
 8010a68:	d9db      	bls.n	8010a22 <HAL_TIM_IC_ConfigChannel+0xb2>
 8010a6a:	f241 0142 	movw	r1, #4162	; 0x1042
 8010a6e:	486d      	ldr	r0, [pc, #436]	; (8010c24 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010a70:	f7f3 fb84 	bl	800417c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8010a74:	68a3      	ldr	r3, [r4, #8]
 8010a76:	f033 030c 	bics.w	r3, r3, #12
 8010a7a:	d0d6      	beq.n	8010a2a <HAL_TIM_IC_ConfigChannel+0xba>
 8010a7c:	f241 0143 	movw	r1, #4163	; 0x1043
 8010a80:	4868      	ldr	r0, [pc, #416]	; (8010c24 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010a82:	f7f3 fb7b 	bl	800417c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8010a86:	68e3      	ldr	r3, [r4, #12]
 8010a88:	2b0f      	cmp	r3, #15
 8010a8a:	d9d1      	bls.n	8010a30 <HAL_TIM_IC_ConfigChannel+0xc0>
 8010a8c:	f241 0144 	movw	r1, #4164	; 0x1044
 8010a90:	4864      	ldr	r0, [pc, #400]	; (8010c24 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010a92:	f7f3 fb73 	bl	800417c <assert_failed>
  __HAL_LOCK(htim);
 8010a96:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d1cc      	bne.n	8010a38 <HAL_TIM_IC_ConfigChannel+0xc8>
 8010a9e:	2002      	movs	r0, #2
}
 8010aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8010aa2:	e9d4 1200 	ldrd	r1, r2, [r4]
 8010aa6:	68e3      	ldr	r3, [r4, #12]
 8010aa8:	6828      	ldr	r0, [r5, #0]
 8010aaa:	f7ff ff25 	bl	80108f8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010aae:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010ab0:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010ab2:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010ab4:	6999      	ldr	r1, [r3, #24]
 8010ab6:	f021 010c 	bic.w	r1, r1, #12
 8010aba:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010abc:	699a      	ldr	r2, [r3, #24]
 8010abe:	4322      	orrs	r2, r4
 8010ac0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010ac8:	e7c5      	b.n	8010a56 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010aca:	682a      	ldr	r2, [r5, #0]
 8010acc:	4b51      	ldr	r3, [pc, #324]	; (8010c14 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 8010ace:	4952      	ldr	r1, [pc, #328]	; (8010c18 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	bf18      	it	ne
 8010ad4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010ad8:	bf14      	ite	ne
 8010ada:	2301      	movne	r3, #1
 8010adc:	2300      	moveq	r3, #0
 8010ade:	428a      	cmp	r2, r1
 8010ae0:	bf0c      	ite	eq
 8010ae2:	2300      	moveq	r3, #0
 8010ae4:	f003 0301 	andne.w	r3, r3, #1
 8010ae8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010aec:	428a      	cmp	r2, r1
 8010aee:	bf0c      	ite	eq
 8010af0:	2300      	moveq	r3, #0
 8010af2:	f003 0301 	andne.w	r3, r3, #1
 8010af6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010afa:	428a      	cmp	r2, r1
 8010afc:	bf0c      	ite	eq
 8010afe:	2300      	moveq	r3, #0
 8010b00:	f003 0301 	andne.w	r3, r3, #1
 8010b04:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010b08:	428a      	cmp	r2, r1
 8010b0a:	bf0c      	ite	eq
 8010b0c:	2300      	moveq	r3, #0
 8010b0e:	f003 0301 	andne.w	r3, r3, #1
 8010b12:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010b16:	428a      	cmp	r2, r1
 8010b18:	bf0c      	ite	eq
 8010b1a:	2300      	moveq	r3, #0
 8010b1c:	f003 0301 	andne.w	r3, r3, #1
 8010b20:	b11b      	cbz	r3, 8010b2a <HAL_TIM_IC_ConfigChannel+0x1ba>
 8010b22:	4b41      	ldr	r3, [pc, #260]	; (8010c28 <HAL_TIM_IC_ConfigChannel+0x2b8>)
 8010b24:	429a      	cmp	r2, r3
 8010b26:	f040 80d7 	bne.w	8010cd8 <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b2a:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8010b2c:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b2e:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010b32:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 8010b34:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b38:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010b3a:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 8010b3c:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010b3e:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010b40:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010b42:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010b46:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010b4a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010b4e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010b52:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 8010b54:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8010b56:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010b58:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010b5c:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010b5e:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8010b60:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010b62:	6991      	ldr	r1, [r2, #24]
 8010b64:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8010b68:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010b6a:	6993      	ldr	r3, [r2, #24]
 8010b6c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8010b70:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8010b72:	2300      	movs	r3, #0
 8010b74:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010b78:	e76d      	b.n	8010a56 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010b7a:	682b      	ldr	r3, [r5, #0]
 8010b7c:	4a25      	ldr	r2, [pc, #148]	; (8010c14 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 8010b7e:	4926      	ldr	r1, [pc, #152]	; (8010c18 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	bf18      	it	ne
 8010b84:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010b88:	bf14      	ite	ne
 8010b8a:	2201      	movne	r2, #1
 8010b8c:	2200      	moveq	r2, #0
 8010b8e:	428b      	cmp	r3, r1
 8010b90:	bf0c      	ite	eq
 8010b92:	2200      	moveq	r2, #0
 8010b94:	f002 0201 	andne.w	r2, r2, #1
 8010b98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010b9c:	428b      	cmp	r3, r1
 8010b9e:	bf0c      	ite	eq
 8010ba0:	2200      	moveq	r2, #0
 8010ba2:	f002 0201 	andne.w	r2, r2, #1
 8010ba6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010baa:	428b      	cmp	r3, r1
 8010bac:	bf0c      	ite	eq
 8010bae:	2200      	moveq	r2, #0
 8010bb0:	f002 0201 	andne.w	r2, r2, #1
 8010bb4:	b142      	cbz	r2, 8010bc8 <HAL_TIM_IC_ConfigChannel+0x258>
 8010bb6:	4a1d      	ldr	r2, [pc, #116]	; (8010c2c <HAL_TIM_IC_ConfigChannel+0x2bc>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d005      	beq.n	8010bc8 <HAL_TIM_IC_ConfigChannel+0x258>
 8010bbc:	f241 017a 	movw	r1, #4218	; 0x107a
 8010bc0:	4818      	ldr	r0, [pc, #96]	; (8010c24 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010bc2:	f7f3 fadb 	bl	800417c <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 8010bc6:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010bc8:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 8010bca:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010bcc:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010bd0:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 8010bd2:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010bd6:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010bd8:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8010bda:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010bdc:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010bde:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8010be0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010be4:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8010be8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010bec:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010bf0:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8010bf2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 8010bf4:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010bf6:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010bfa:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010bfc:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 8010bfe:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8010c00:	69d9      	ldr	r1, [r3, #28]
 8010c02:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8010c06:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010c08:	69da      	ldr	r2, [r3, #28]
 8010c0a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8010c0e:	61da      	str	r2, [r3, #28]
 8010c10:	e71e      	b.n	8010a50 <HAL_TIM_IC_ConfigChannel+0xe0>
 8010c12:	bf00      	nop
 8010c14:	40010000 	.word	0x40010000
 8010c18:	40000400 	.word	0x40000400
 8010c1c:	40000800 	.word	0x40000800
 8010c20:	40002000 	.word	0x40002000
 8010c24:	0802bf54 	.word	0x0802bf54
 8010c28:	40001800 	.word	0x40001800
 8010c2c:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010c30:	682b      	ldr	r3, [r5, #0]
 8010c32:	4a2d      	ldr	r2, [pc, #180]	; (8010ce8 <HAL_TIM_IC_ConfigChannel+0x378>)
 8010c34:	492d      	ldr	r1, [pc, #180]	; (8010cec <HAL_TIM_IC_ConfigChannel+0x37c>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	bf18      	it	ne
 8010c3a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010c3e:	bf14      	ite	ne
 8010c40:	2201      	movne	r2, #1
 8010c42:	2200      	moveq	r2, #0
 8010c44:	428b      	cmp	r3, r1
 8010c46:	bf0c      	ite	eq
 8010c48:	2200      	moveq	r2, #0
 8010c4a:	f002 0201 	andne.w	r2, r2, #1
 8010c4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c52:	428b      	cmp	r3, r1
 8010c54:	bf0c      	ite	eq
 8010c56:	2200      	moveq	r2, #0
 8010c58:	f002 0201 	andne.w	r2, r2, #1
 8010c5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c60:	428b      	cmp	r3, r1
 8010c62:	bf0c      	ite	eq
 8010c64:	2200      	moveq	r2, #0
 8010c66:	f002 0201 	andne.w	r2, r2, #1
 8010c6a:	b112      	cbz	r2, 8010c72 <HAL_TIM_IC_ConfigChannel+0x302>
 8010c6c:	4a20      	ldr	r2, [pc, #128]	; (8010cf0 <HAL_TIM_IC_ConfigChannel+0x380>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d12b      	bne.n	8010cca <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c72:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 8010c74:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c76:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010c7a:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 8010c7c:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c80:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010c82:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8010c84:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010c86:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010c88:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8010c8a:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010c8e:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 8010c92:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010c94:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010c98:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8010c9a:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8010c9c:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 8010ca0:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010ca2:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010ca4:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8010ca6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010ca8:	69d9      	ldr	r1, [r3, #28]
 8010caa:	f021 010c 	bic.w	r1, r1, #12
 8010cae:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010cb0:	69da      	ldr	r2, [r3, #28]
 8010cb2:	4322      	orrs	r2, r4
 8010cb4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010cbc:	e6cb      	b.n	8010a56 <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010cbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8010cc2:	480c      	ldr	r0, [pc, #48]	; (8010cf4 <HAL_TIM_IC_ConfigChannel+0x384>)
 8010cc4:	f7f3 fa5a 	bl	800417c <assert_failed>
 8010cc8:	e6a1      	b.n	8010a0e <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010cca:	f241 016a 	movw	r1, #4202	; 0x106a
 8010cce:	4809      	ldr	r0, [pc, #36]	; (8010cf4 <HAL_TIM_IC_ConfigChannel+0x384>)
 8010cd0:	f7f3 fa54 	bl	800417c <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 8010cd4:	682b      	ldr	r3, [r5, #0]
 8010cd6:	e7cc      	b.n	8010c72 <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010cd8:	f241 015a 	movw	r1, #4186	; 0x105a
 8010cdc:	4805      	ldr	r0, [pc, #20]	; (8010cf4 <HAL_TIM_IC_ConfigChannel+0x384>)
 8010cde:	f7f3 fa4d 	bl	800417c <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 8010ce2:	682a      	ldr	r2, [r5, #0]
 8010ce4:	e721      	b.n	8010b2a <HAL_TIM_IC_ConfigChannel+0x1ba>
 8010ce6:	bf00      	nop
 8010ce8:	40010000 	.word	0x40010000
 8010cec:	40000400 	.word	0x40000400
 8010cf0:	40010400 	.word	0x40010400
 8010cf4:	0802bf54 	.word	0x0802bf54

08010cf8 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8010cf8:	4b2b      	ldr	r3, [pc, #172]	; (8010da8 <TIM_CCxChannelCmd+0xb0>)
 8010cfa:	4298      	cmp	r0, r3
{
 8010cfc:	b530      	push	{r4, r5, lr}
 8010cfe:	4604      	mov	r4, r0
 8010d00:	b083      	sub	sp, #12
 8010d02:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8010d04:	d031      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d06:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010d0a:	d02e      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d0c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8010d10:	4298      	cmp	r0, r3
 8010d12:	d02a      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d18:	4298      	cmp	r0, r3
 8010d1a:	d026      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d20:	4298      	cmp	r0, r3
 8010d22:	d022      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d24:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8010d28:	4298      	cmp	r0, r3
 8010d2a:	d01e      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d2c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8010d30:	4298      	cmp	r0, r3
 8010d32:	d01a      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d38:	4298      	cmp	r0, r3
 8010d3a:	d016      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d40:	4298      	cmp	r0, r3
 8010d42:	d012      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d44:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8010d48:	4298      	cmp	r0, r3
 8010d4a:	d00e      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d50:	4298      	cmp	r0, r3
 8010d52:	d00a      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d58:	4298      	cmp	r0, r3
 8010d5a:	d006      	beq.n	8010d6a <TIM_CCxChannelCmd+0x72>
 8010d5c:	f641 6199 	movw	r1, #7833	; 0x1e99
 8010d60:	4812      	ldr	r0, [pc, #72]	; (8010dac <TIM_CCxChannelCmd+0xb4>)
 8010d62:	9201      	str	r2, [sp, #4]
 8010d64:	f7f3 fa0a 	bl	800417c <assert_failed>
 8010d68:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 8010d6a:	2d14      	cmp	r5, #20
 8010d6c:	d90f      	bls.n	8010d8e <TIM_CCxChannelCmd+0x96>
 8010d6e:	2d3c      	cmp	r5, #60	; 0x3c
 8010d70:	d111      	bne.n	8010d96 <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010d72:	f005 051f 	and.w	r5, r5, #31
 8010d76:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010d78:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010d7a:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d7c:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 8010d7e:	ea23 0301 	bic.w	r3, r3, r1
 8010d82:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d84:	6a25      	ldr	r5, [r4, #32]
 8010d86:	4315      	orrs	r5, r2
 8010d88:	6225      	str	r5, [r4, #32]
}
 8010d8a:	b003      	add	sp, #12
 8010d8c:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 8010d8e:	4b08      	ldr	r3, [pc, #32]	; (8010db0 <TIM_CCxChannelCmd+0xb8>)
 8010d90:	40eb      	lsrs	r3, r5
 8010d92:	07db      	lsls	r3, r3, #31
 8010d94:	d4ed      	bmi.n	8010d72 <TIM_CCxChannelCmd+0x7a>
 8010d96:	f641 619a 	movw	r1, #7834	; 0x1e9a
 8010d9a:	4804      	ldr	r0, [pc, #16]	; (8010dac <TIM_CCxChannelCmd+0xb4>)
 8010d9c:	9201      	str	r2, [sp, #4]
 8010d9e:	f7f3 f9ed 	bl	800417c <assert_failed>
 8010da2:	9a01      	ldr	r2, [sp, #4]
 8010da4:	e7e5      	b.n	8010d72 <TIM_CCxChannelCmd+0x7a>
 8010da6:	bf00      	nop
 8010da8:	40010000 	.word	0x40010000
 8010dac:	0802bf54 	.word	0x0802bf54
 8010db0:	00111111 	.word	0x00111111

08010db4 <HAL_TIM_IC_Start_DMA>:
{
 8010db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010db8:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010dba:	460d      	mov	r5, r1
{
 8010dbc:	4617      	mov	r7, r2
 8010dbe:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010dc0:	2900      	cmp	r1, #0
 8010dc2:	f040 8087 	bne.w	8010ed4 <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010dc6:	6803      	ldr	r3, [r0, #0]
 8010dc8:	4aa4      	ldr	r2, [pc, #656]	; (801105c <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010dca:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010dce:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010dd0:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010dd4:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010dd6:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010dda:	d037      	beq.n	8010e4c <HAL_TIM_IC_Start_DMA+0x98>
 8010ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010de0:	d034      	beq.n	8010e4c <HAL_TIM_IC_Start_DMA+0x98>
 8010de2:	4a9f      	ldr	r2, [pc, #636]	; (8011060 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d031      	beq.n	8010e4c <HAL_TIM_IC_Start_DMA+0x98>
 8010de8:	4a9e      	ldr	r2, [pc, #632]	; (8011064 <HAL_TIM_IC_Start_DMA+0x2b0>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d066      	beq.n	8010ebc <HAL_TIM_IC_Start_DMA+0x108>
 8010dee:	4a9e      	ldr	r2, [pc, #632]	; (8011068 <HAL_TIM_IC_Start_DMA+0x2b4>)
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d063      	beq.n	8010ebc <HAL_TIM_IC_Start_DMA+0x108>
 8010df4:	4a9d      	ldr	r2, [pc, #628]	; (801106c <HAL_TIM_IC_Start_DMA+0x2b8>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	f040 80f7 	bne.w	8010fea <HAL_TIM_IC_Start_DMA+0x236>
 8010dfc:	2d14      	cmp	r5, #20
 8010dfe:	d862      	bhi.n	8010ec6 <HAL_TIM_IC_Start_DMA+0x112>
 8010e00:	4a9b      	ldr	r2, [pc, #620]	; (8011070 <HAL_TIM_IC_Start_DMA+0x2bc>)
 8010e02:	40ea      	lsrs	r2, r5
 8010e04:	07d2      	lsls	r2, r2, #31
 8010e06:	d55e      	bpl.n	8010ec6 <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8010e08:	4994      	ldr	r1, [pc, #592]	; (801105c <HAL_TIM_IC_Start_DMA+0x2a8>)
 8010e0a:	4a95      	ldr	r2, [pc, #596]	; (8011060 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8010e0c:	428b      	cmp	r3, r1
 8010e0e:	bf18      	it	ne
 8010e10:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010e14:	bf14      	ite	ne
 8010e16:	2101      	movne	r1, #1
 8010e18:	2100      	moveq	r1, #0
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	bf0c      	ite	eq
 8010e1e:	2100      	moveq	r1, #0
 8010e20:	f001 0101 	andne.w	r1, r1, #1
 8010e24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	bf0c      	ite	eq
 8010e2c:	2100      	moveq	r1, #0
 8010e2e:	f001 0101 	andne.w	r1, r1, #1
 8010e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010e36:	4293      	cmp	r3, r2
 8010e38:	bf0c      	ite	eq
 8010e3a:	2100      	moveq	r1, #0
 8010e3c:	f001 0101 	andne.w	r1, r1, #1
 8010e40:	b121      	cbz	r1, 8010e4c <HAL_TIM_IC_Start_DMA+0x98>
 8010e42:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010e46:	4293      	cmp	r3, r2
 8010e48:	f040 80c5 	bne.w	8010fd6 <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8010e4c:	2e02      	cmp	r6, #2
 8010e4e:	d06a      	beq.n	8010f26 <HAL_TIM_IC_Start_DMA+0x172>
 8010e50:	f1b9 0f02 	cmp.w	r9, #2
 8010e54:	d067      	beq.n	8010f26 <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8010e56:	2e01      	cmp	r6, #1
 8010e58:	d106      	bne.n	8010e68 <HAL_TIM_IC_Start_DMA+0xb4>
 8010e5a:	f1b9 0f01 	cmp.w	r9, #1
 8010e5e:	d103      	bne.n	8010e68 <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 8010e60:	b92f      	cbnz	r7, 8010e6e <HAL_TIM_IC_Start_DMA+0xba>
 8010e62:	f1b8 0f00 	cmp.w	r8, #0
 8010e66:	d002      	beq.n	8010e6e <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 8010e68:	2001      	movs	r0, #1
}
 8010e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010e6e:	2302      	movs	r3, #2
 8010e70:	2d00      	cmp	r5, #0
 8010e72:	d05b      	beq.n	8010f2c <HAL_TIM_IC_Start_DMA+0x178>
 8010e74:	2d04      	cmp	r5, #4
 8010e76:	f000 8119 	beq.w	80110ac <HAL_TIM_IC_Start_DMA+0x2f8>
 8010e7a:	2d08      	cmp	r5, #8
 8010e7c:	f000 8141 	beq.w	8011102 <HAL_TIM_IC_Start_DMA+0x34e>
 8010e80:	2d0c      	cmp	r5, #12
 8010e82:	f000 815d 	beq.w	8011140 <HAL_TIM_IC_Start_DMA+0x38c>
 8010e86:	2d10      	cmp	r5, #16
 8010e88:	f000 812f 	beq.w	80110ea <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e8c:	4629      	mov	r1, r5
  switch (Channel)
 8010e8e:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e94:	2201      	movs	r2, #1
 8010e96:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010e98:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e9c:	f7ff ff2c 	bl	8010cf8 <TIM_CCxChannelCmd>
  switch (Channel)
 8010ea0:	2d08      	cmp	r5, #8
 8010ea2:	f200 812b 	bhi.w	80110fc <HAL_TIM_IC_Start_DMA+0x348>
 8010ea6:	e8df f015 	tbh	[pc, r5, lsl #1]
 8010eaa:	010a      	.short	0x010a
 8010eac:	01290129 	.word	0x01290129
 8010eb0:	01350129 	.word	0x01350129
 8010eb4:	01290129 	.word	0x01290129
 8010eb8:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010ebc:	f035 0204 	bics.w	r2, r5, #4
 8010ec0:	d0a2      	beq.n	8010e08 <HAL_TIM_IC_Start_DMA+0x54>
 8010ec2:	2a08      	cmp	r2, #8
 8010ec4:	d0a0      	beq.n	8010e08 <HAL_TIM_IC_Start_DMA+0x54>
 8010ec6:	f640 114a 	movw	r1, #2378	; 0x94a
 8010eca:	486a      	ldr	r0, [pc, #424]	; (8011074 <HAL_TIM_IC_Start_DMA+0x2c0>)
 8010ecc:	f7f3 f956 	bl	800417c <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8010ed0:	6823      	ldr	r3, [r4, #0]
 8010ed2:	e799      	b.n	8010e08 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010ed4:	2904      	cmp	r1, #4
 8010ed6:	f000 8090 	beq.w	8010ffa <HAL_TIM_IC_Start_DMA+0x246>
 8010eda:	2908      	cmp	r1, #8
 8010edc:	f000 80e0 	beq.w	80110a0 <HAL_TIM_IC_Start_DMA+0x2ec>
 8010ee0:	290c      	cmp	r1, #12
 8010ee2:	d07e      	beq.n	8010fe2 <HAL_TIM_IC_Start_DMA+0x22e>
 8010ee4:	2910      	cmp	r1, #16
 8010ee6:	f000 814a 	beq.w	801117e <HAL_TIM_IC_Start_DMA+0x3ca>
 8010eea:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 8010eee:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010ef0:	6823      	ldr	r3, [r4, #0]
 8010ef2:	4a5a      	ldr	r2, [pc, #360]	; (801105c <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010ef4:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010ef8:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010efa:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010efe:	f000 8098 	beq.w	8011032 <HAL_TIM_IC_Start_DMA+0x27e>
 8010f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f06:	f000 8088 	beq.w	801101a <HAL_TIM_IC_Start_DMA+0x266>
 8010f0a:	4a55      	ldr	r2, [pc, #340]	; (8011060 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	f47f af6b 	bne.w	8010de8 <HAL_TIM_IC_Start_DMA+0x34>
 8010f12:	f035 020c 	bics.w	r2, r5, #12
 8010f16:	d099      	beq.n	8010e4c <HAL_TIM_IC_Start_DMA+0x98>
 8010f18:	4a57      	ldr	r2, [pc, #348]	; (8011078 <HAL_TIM_IC_Start_DMA+0x2c4>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d1d3      	bne.n	8010ec6 <HAL_TIM_IC_Start_DMA+0x112>
 8010f1e:	2d00      	cmp	r5, #0
 8010f20:	f43f af72 	beq.w	8010e08 <HAL_TIM_IC_Start_DMA+0x54>
 8010f24:	e7cf      	b.n	8010ec6 <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 8010f26:	2002      	movs	r0, #2
}
 8010f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010f2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010f30:	4629      	mov	r1, r5
 8010f32:	2201      	movs	r2, #1
 8010f34:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010f36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010f3a:	f7ff fedd 	bl	8010cf8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8010f3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010f40:	494e      	ldr	r1, [pc, #312]	; (801107c <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8010f42:	4643      	mov	r3, r8
 8010f44:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8010f46:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010f48:	494d      	ldr	r1, [pc, #308]	; (8011080 <HAL_TIM_IC_Start_DMA+0x2cc>)
 8010f4a:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010f4c:	494d      	ldr	r1, [pc, #308]	; (8011084 <HAL_TIM_IC_Start_DMA+0x2d0>)
 8010f4e:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8010f50:	6821      	ldr	r1, [r4, #0]
 8010f52:	3134      	adds	r1, #52	; 0x34
 8010f54:	f7f8 f804 	bl	8008f60 <HAL_DMA_Start_IT>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d185      	bne.n	8010e68 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010f5c:	6822      	ldr	r2, [r4, #0]
 8010f5e:	68d3      	ldr	r3, [r2, #12]
 8010f60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010f64:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010f66:	4b3d      	ldr	r3, [pc, #244]	; (801105c <HAL_TIM_IC_Start_DMA+0x2a8>)
 8010f68:	4c3d      	ldr	r4, [pc, #244]	; (8011060 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8010f6a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8010f6e:	bf18      	it	ne
 8010f70:	429a      	cmpne	r2, r3
 8010f72:	493c      	ldr	r1, [pc, #240]	; (8011064 <HAL_TIM_IC_Start_DMA+0x2b0>)
 8010f74:	bf0c      	ite	eq
 8010f76:	2301      	moveq	r3, #1
 8010f78:	2300      	movne	r3, #0
 8010f7a:	42a2      	cmp	r2, r4
 8010f7c:	bf08      	it	eq
 8010f7e:	f043 0301 	orreq.w	r3, r3, #1
 8010f82:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8010f86:	428a      	cmp	r2, r1
 8010f88:	bf08      	it	eq
 8010f8a:	f043 0301 	orreq.w	r3, r3, #1
 8010f8e:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 8010f92:	42a2      	cmp	r2, r4
 8010f94:	bf08      	it	eq
 8010f96:	f043 0301 	orreq.w	r3, r3, #1
 8010f9a:	428a      	cmp	r2, r1
 8010f9c:	bf08      	it	eq
 8010f9e:	f043 0301 	orreq.w	r3, r3, #1
 8010fa2:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010fa6:	428a      	cmp	r2, r1
 8010fa8:	bf08      	it	eq
 8010faa:	f043 0301 	orreq.w	r3, r3, #1
 8010fae:	b913      	cbnz	r3, 8010fb6 <HAL_TIM_IC_Start_DMA+0x202>
 8010fb0:	4b35      	ldr	r3, [pc, #212]	; (8011088 <HAL_TIM_IC_Start_DMA+0x2d4>)
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d109      	bne.n	8010fca <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010fb6:	6891      	ldr	r1, [r2, #8]
 8010fb8:	4b34      	ldr	r3, [pc, #208]	; (801108c <HAL_TIM_IC_Start_DMA+0x2d8>)
 8010fba:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010fbc:	2b06      	cmp	r3, #6
 8010fbe:	f43f af54 	beq.w	8010e6a <HAL_TIM_IC_Start_DMA+0xb6>
 8010fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fc6:	f43f af50 	beq.w	8010e6a <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 8010fca:	6813      	ldr	r3, [r2, #0]
 8010fcc:	f043 0301 	orr.w	r3, r3, #1
 8010fd0:	6013      	str	r3, [r2, #0]
}
 8010fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8010fd6:	f640 114b 	movw	r1, #2379	; 0x94b
 8010fda:	4826      	ldr	r0, [pc, #152]	; (8011074 <HAL_TIM_IC_Start_DMA+0x2c0>)
 8010fdc:	f7f3 f8ce 	bl	800417c <assert_failed>
 8010fe0:	e734      	b.n	8010e4c <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010fe2:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 8010fe6:	b2f6      	uxtb	r6, r6
 8010fe8:	e782      	b.n	8010ef0 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010fea:	4a29      	ldr	r2, [pc, #164]	; (8011090 <HAL_TIM_IC_Start_DMA+0x2dc>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d128      	bne.n	8011042 <HAL_TIM_IC_Start_DMA+0x28e>
 8010ff0:	f035 0204 	bics.w	r2, r5, #4
 8010ff4:	f47f af67 	bne.w	8010ec6 <HAL_TIM_IC_Start_DMA+0x112>
 8010ff8:	e706      	b.n	8010e08 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010ffa:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010ffe:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011002:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011004:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011006:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801100a:	4a14      	ldr	r2, [pc, #80]	; (801105c <HAL_TIM_IC_Start_DMA+0x2a8>)
 801100c:	4293      	cmp	r3, r2
 801100e:	f43f af1d 	beq.w	8010e4c <HAL_TIM_IC_Start_DMA+0x98>
 8011012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011016:	f47f af78 	bne.w	8010f0a <HAL_TIM_IC_Start_DMA+0x156>
 801101a:	f035 020c 	bics.w	r2, r5, #12
 801101e:	f43f af15 	beq.w	8010e4c <HAL_TIM_IC_Start_DMA+0x98>
 8011022:	4a1c      	ldr	r2, [pc, #112]	; (8011094 <HAL_TIM_IC_Start_DMA+0x2e0>)
 8011024:	4293      	cmp	r3, r2
 8011026:	f47f af77 	bne.w	8010f18 <HAL_TIM_IC_Start_DMA+0x164>
 801102a:	2d00      	cmp	r5, #0
 801102c:	f43f aeec 	beq.w	8010e08 <HAL_TIM_IC_Start_DMA+0x54>
 8011030:	e749      	b.n	8010ec6 <HAL_TIM_IC_Start_DMA+0x112>
 8011032:	f025 0204 	bic.w	r2, r5, #4
 8011036:	2a08      	cmp	r2, #8
 8011038:	f43f af08 	beq.w	8010e4c <HAL_TIM_IC_Start_DMA+0x98>
 801103c:	2a10      	cmp	r2, #16
 801103e:	f43f af05 	beq.w	8010e4c <HAL_TIM_IC_Start_DMA+0x98>
 8011042:	4a15      	ldr	r2, [pc, #84]	; (8011098 <HAL_TIM_IC_Start_DMA+0x2e4>)
 8011044:	4293      	cmp	r3, r2
 8011046:	f43f af6a 	beq.w	8010f1e <HAL_TIM_IC_Start_DMA+0x16a>
 801104a:	4a14      	ldr	r2, [pc, #80]	; (801109c <HAL_TIM_IC_Start_DMA+0x2e8>)
 801104c:	4293      	cmp	r3, r2
 801104e:	f43f af66 	beq.w	8010f1e <HAL_TIM_IC_Start_DMA+0x16a>
 8011052:	4a0d      	ldr	r2, [pc, #52]	; (8011088 <HAL_TIM_IC_Start_DMA+0x2d4>)
 8011054:	4293      	cmp	r3, r2
 8011056:	d0cb      	beq.n	8010ff0 <HAL_TIM_IC_Start_DMA+0x23c>
 8011058:	e7e3      	b.n	8011022 <HAL_TIM_IC_Start_DMA+0x26e>
 801105a:	bf00      	nop
 801105c:	40010000 	.word	0x40010000
 8011060:	40000400 	.word	0x40000400
 8011064:	40000800 	.word	0x40000800
 8011068:	40000c00 	.word	0x40000c00
 801106c:	40010400 	.word	0x40010400
 8011070:	00111111 	.word	0x00111111
 8011074:	0802bf54 	.word	0x0802bf54
 8011078:	40002000 	.word	0x40002000
 801107c:	0800f6e5 	.word	0x0800f6e5
 8011080:	0800f77d 	.word	0x0800f77d
 8011084:	0800f961 	.word	0x0800f961
 8011088:	40001800 	.word	0x40001800
 801108c:	00010007 	.word	0x00010007
 8011090:	40014000 	.word	0x40014000
 8011094:	40001c00 	.word	0x40001c00
 8011098:	40014400 	.word	0x40014400
 801109c:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80110a0:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80110a4:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80110a8:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80110aa:	e7ab      	b.n	8011004 <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80110ac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80110b0:	4629      	mov	r1, r5
 80110b2:	2201      	movs	r2, #1
 80110b4:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80110b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80110ba:	f7ff fe1d 	bl	8010cf8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80110be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80110c0:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80110c2:	4931      	ldr	r1, [pc, #196]	; (8011188 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80110c4:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80110c6:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80110c8:	4930      	ldr	r1, [pc, #192]	; (801118c <HAL_TIM_IC_Start_DMA+0x3d8>)
 80110ca:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80110cc:	4930      	ldr	r1, [pc, #192]	; (8011190 <HAL_TIM_IC_Start_DMA+0x3dc>)
 80110ce:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80110d0:	6821      	ldr	r1, [r4, #0]
 80110d2:	3138      	adds	r1, #56	; 0x38
 80110d4:	f7f7 ff44 	bl	8008f60 <HAL_DMA_Start_IT>
 80110d8:	2800      	cmp	r0, #0
 80110da:	f47f aec5 	bne.w	8010e68 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80110de:	6822      	ldr	r2, [r4, #0]
 80110e0:	68d3      	ldr	r3, [r2, #12]
 80110e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80110e6:	60d3      	str	r3, [r2, #12]
      break;
 80110e8:	e73d      	b.n	8010f66 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80110ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80110ee:	2201      	movs	r2, #1
 80110f0:	4629      	mov	r1, r5
 80110f2:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80110f4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80110f8:	f7ff fdfe 	bl	8010cf8 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80110fc:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 80110fe:	2001      	movs	r0, #1
 8011100:	e731      	b.n	8010f66 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011102:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011106:	4629      	mov	r1, r5
 8011108:	2201      	movs	r2, #1
 801110a:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801110c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011110:	f7ff fdf2 	bl	8010cf8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011114:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8011116:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011118:	491b      	ldr	r1, [pc, #108]	; (8011188 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 801111a:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 801111c:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801111e:	491b      	ldr	r1, [pc, #108]	; (801118c <HAL_TIM_IC_Start_DMA+0x3d8>)
 8011120:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8011122:	491b      	ldr	r1, [pc, #108]	; (8011190 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8011124:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8011126:	6821      	ldr	r1, [r4, #0]
 8011128:	313c      	adds	r1, #60	; 0x3c
 801112a:	f7f7 ff19 	bl	8008f60 <HAL_DMA_Start_IT>
 801112e:	2800      	cmp	r0, #0
 8011130:	f47f ae9a 	bne.w	8010e68 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8011134:	6822      	ldr	r2, [r4, #0]
 8011136:	68d3      	ldr	r3, [r2, #12]
 8011138:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801113c:	60d3      	str	r3, [r2, #12]
      break;
 801113e:	e712      	b.n	8010f66 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011140:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011144:	4629      	mov	r1, r5
 8011146:	2201      	movs	r2, #1
 8011148:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801114a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801114e:	f7ff fdd3 	bl	8010cf8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8011152:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8011154:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8011156:	490c      	ldr	r1, [pc, #48]	; (8011188 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8011158:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 801115a:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801115c:	490b      	ldr	r1, [pc, #44]	; (801118c <HAL_TIM_IC_Start_DMA+0x3d8>)
 801115e:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8011160:	490b      	ldr	r1, [pc, #44]	; (8011190 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8011162:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8011164:	6821      	ldr	r1, [r4, #0]
 8011166:	3140      	adds	r1, #64	; 0x40
 8011168:	f7f7 fefa 	bl	8008f60 <HAL_DMA_Start_IT>
 801116c:	2800      	cmp	r0, #0
 801116e:	f47f ae7b 	bne.w	8010e68 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8011172:	6822      	ldr	r2, [r4, #0]
 8011174:	68d3      	ldr	r3, [r2, #12]
 8011176:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801117a:	60d3      	str	r3, [r2, #12]
      break;
 801117c:	e6f3      	b.n	8010f66 <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801117e:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8011182:	b2f6      	uxtb	r6, r6
 8011184:	e6b4      	b.n	8010ef0 <HAL_TIM_IC_Start_DMA+0x13c>
 8011186:	bf00      	nop
 8011188:	0800f6e5 	.word	0x0800f6e5
 801118c:	0800f77d 	.word	0x0800f77d
 8011190:	0800f961 	.word	0x0800f961

08011194 <HAL_TIM_IC_Stop_DMA>:
{
 8011194:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011196:	4b82      	ldr	r3, [pc, #520]	; (80113a0 <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 8011198:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801119a:	6800      	ldr	r0, [r0, #0]
{
 801119c:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801119e:	4298      	cmp	r0, r3
 80111a0:	f000 80cc 	beq.w	801133c <HAL_TIM_IC_Stop_DMA+0x1a8>
 80111a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80111a8:	d056      	beq.n	8011258 <HAL_TIM_IC_Stop_DMA+0xc4>
 80111aa:	4b7e      	ldr	r3, [pc, #504]	; (80113a4 <HAL_TIM_IC_Stop_DMA+0x210>)
 80111ac:	4298      	cmp	r0, r3
 80111ae:	d053      	beq.n	8011258 <HAL_TIM_IC_Stop_DMA+0xc4>
 80111b0:	4b7d      	ldr	r3, [pc, #500]	; (80113a8 <HAL_TIM_IC_Stop_DMA+0x214>)
 80111b2:	4298      	cmp	r0, r3
 80111b4:	d050      	beq.n	8011258 <HAL_TIM_IC_Stop_DMA+0xc4>
 80111b6:	4b7d      	ldr	r3, [pc, #500]	; (80113ac <HAL_TIM_IC_Stop_DMA+0x218>)
 80111b8:	4298      	cmp	r0, r3
 80111ba:	d04d      	beq.n	8011258 <HAL_TIM_IC_Stop_DMA+0xc4>
 80111bc:	4b7c      	ldr	r3, [pc, #496]	; (80113b0 <HAL_TIM_IC_Stop_DMA+0x21c>)
 80111be:	4298      	cmp	r0, r3
 80111c0:	f000 80bc 	beq.w	801133c <HAL_TIM_IC_Stop_DMA+0x1a8>
 80111c4:	4b7b      	ldr	r3, [pc, #492]	; (80113b4 <HAL_TIM_IC_Stop_DMA+0x220>)
 80111c6:	4298      	cmp	r0, r3
 80111c8:	d00c      	beq.n	80111e4 <HAL_TIM_IC_Stop_DMA+0x50>
 80111ca:	4b7b      	ldr	r3, [pc, #492]	; (80113b8 <HAL_TIM_IC_Stop_DMA+0x224>)
 80111cc:	4298      	cmp	r0, r3
 80111ce:	f000 80d9 	beq.w	8011384 <HAL_TIM_IC_Stop_DMA+0x1f0>
 80111d2:	4b7a      	ldr	r3, [pc, #488]	; (80113bc <HAL_TIM_IC_Stop_DMA+0x228>)
 80111d4:	4298      	cmp	r0, r3
 80111d6:	f000 80d5 	beq.w	8011384 <HAL_TIM_IC_Stop_DMA+0x1f0>
 80111da:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80111de:	4298      	cmp	r0, r3
 80111e0:	f040 80c9 	bne.w	8011376 <HAL_TIM_IC_Stop_DMA+0x1e2>
 80111e4:	f035 0304 	bics.w	r3, r5, #4
 80111e8:	f000 80cf 	beq.w	801138a <HAL_TIM_IC_Stop_DMA+0x1f6>
 80111ec:	4874      	ldr	r0, [pc, #464]	; (80113c0 <HAL_TIM_IC_Stop_DMA+0x22c>)
 80111ee:	f640 11e5 	movw	r1, #2533	; 0x9e5
 80111f2:	f7f2 ffc3 	bl	800417c <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80111f6:	6820      	ldr	r0, [r4, #0]
 80111f8:	4b69      	ldr	r3, [pc, #420]	; (80113a0 <HAL_TIM_IC_Stop_DMA+0x20c>)
 80111fa:	4a6a      	ldr	r2, [pc, #424]	; (80113a4 <HAL_TIM_IC_Stop_DMA+0x210>)
 80111fc:	4298      	cmp	r0, r3
 80111fe:	bf18      	it	ne
 8011200:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011204:	bf14      	ite	ne
 8011206:	2301      	movne	r3, #1
 8011208:	2300      	moveq	r3, #0
 801120a:	4290      	cmp	r0, r2
 801120c:	bf0c      	ite	eq
 801120e:	2300      	moveq	r3, #0
 8011210:	f003 0301 	andne.w	r3, r3, #1
 8011214:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011218:	4290      	cmp	r0, r2
 801121a:	bf0c      	ite	eq
 801121c:	2300      	moveq	r3, #0
 801121e:	f003 0301 	andne.w	r3, r3, #1
 8011222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011226:	4290      	cmp	r0, r2
 8011228:	bf0c      	ite	eq
 801122a:	2300      	moveq	r3, #0
 801122c:	f003 0301 	andne.w	r3, r3, #1
 8011230:	b11b      	cbz	r3, 801123a <HAL_TIM_IC_Stop_DMA+0xa6>
 8011232:	4b5f      	ldr	r3, [pc, #380]	; (80113b0 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8011234:	4298      	cmp	r0, r3
 8011236:	f040 80a8 	bne.w	801138a <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801123a:	2200      	movs	r2, #0
 801123c:	4629      	mov	r1, r5
 801123e:	f7ff fd5b 	bl	8010cf8 <TIM_CCxChannelCmd>
  switch (Channel)
 8011242:	2d0c      	cmp	r5, #12
 8011244:	d80c      	bhi.n	8011260 <HAL_TIM_IC_Stop_DMA+0xcc>
 8011246:	e8df f005 	tbb	[pc, r5]
 801124a:	0b0d      	.short	0x0b0d
 801124c:	0b640b0b 	.word	0x0b640b0b
 8011250:	0b4a0b0b 	.word	0x0b4a0b0b
 8011254:	0b0b      	.short	0x0b0b
 8011256:	22          	.byte	0x22
 8011257:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011258:	f035 030c 	bics.w	r3, r5, #12
 801125c:	d1c6      	bne.n	80111ec <HAL_TIM_IC_Stop_DMA+0x58>
 801125e:	e7ec      	b.n	801123a <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8011260:	2001      	movs	r0, #1
}
 8011262:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011264:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011266:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011268:	68d3      	ldr	r3, [r2, #12]
 801126a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801126e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011270:	f7f7 ff1a 	bl	80090a8 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011274:	6823      	ldr	r3, [r4, #0]
 8011276:	f241 1211 	movw	r2, #4369	; 0x1111
 801127a:	6a19      	ldr	r1, [r3, #32]
 801127c:	4211      	tst	r1, r2
 801127e:	d06c      	beq.n	801135a <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011280:	2301      	movs	r3, #1
 8011282:	2000      	movs	r0, #0
 8011284:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011288:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 801128c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 801128e:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011290:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011292:	68d3      	ldr	r3, [r2, #12]
 8011294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011298:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 801129a:	f7f7 ff05 	bl	80090a8 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 801129e:	6823      	ldr	r3, [r4, #0]
 80112a0:	f241 1211 	movw	r2, #4369	; 0x1111
 80112a4:	6a19      	ldr	r1, [r3, #32]
 80112a6:	4211      	tst	r1, r2
 80112a8:	d161      	bne.n	801136e <HAL_TIM_IC_Stop_DMA+0x1da>
 80112aa:	6a19      	ldr	r1, [r3, #32]
 80112ac:	f240 4244 	movw	r2, #1092	; 0x444
 80112b0:	4211      	tst	r1, r2
 80112b2:	d15c      	bne.n	801136e <HAL_TIM_IC_Stop_DMA+0x1da>
 80112b4:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80112b6:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 80112b8:	f022 0201 	bic.w	r2, r2, #1
 80112bc:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80112be:	d036      	beq.n	801132e <HAL_TIM_IC_Stop_DMA+0x19a>
 80112c0:	2d08      	cmp	r5, #8
 80112c2:	d01f      	beq.n	8011304 <HAL_TIM_IC_Stop_DMA+0x170>
 80112c4:	2d0c      	cmp	r5, #12
 80112c6:	d052      	beq.n	801136e <HAL_TIM_IC_Stop_DMA+0x1da>
 80112c8:	2d10      	cmp	r5, #16
 80112ca:	f04f 0301 	mov.w	r3, #1
 80112ce:	d063      	beq.n	8011398 <HAL_TIM_IC_Stop_DMA+0x204>
 80112d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80112d4:	2301      	movs	r3, #1
 80112d6:	2000      	movs	r0, #0
 80112d8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 80112dc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80112de:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80112e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80112e2:	68d3      	ldr	r3, [r2, #12]
 80112e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80112e8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80112ea:	f7f7 fedd 	bl	80090a8 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 80112ee:	6823      	ldr	r3, [r4, #0]
 80112f0:	f241 1211 	movw	r2, #4369	; 0x1111
 80112f4:	6a19      	ldr	r1, [r3, #32]
 80112f6:	4211      	tst	r1, r2
 80112f8:	d104      	bne.n	8011304 <HAL_TIM_IC_Stop_DMA+0x170>
 80112fa:	6a19      	ldr	r1, [r3, #32]
 80112fc:	f240 4244 	movw	r2, #1092	; 0x444
 8011300:	4211      	tst	r1, r2
 8011302:	d0d7      	beq.n	80112b4 <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011304:	2301      	movs	r3, #1
 8011306:	2000      	movs	r0, #0
 8011308:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801130c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8011310:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011312:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011314:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011316:	68d3      	ldr	r3, [r2, #12]
 8011318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801131c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 801131e:	f7f7 fec3 	bl	80090a8 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011322:	6823      	ldr	r3, [r4, #0]
 8011324:	f241 1211 	movw	r2, #4369	; 0x1111
 8011328:	6a19      	ldr	r1, [r3, #32]
 801132a:	4211      	tst	r1, r2
 801132c:	d00f      	beq.n	801134e <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801132e:	2301      	movs	r3, #1
 8011330:	2000      	movs	r0, #0
 8011332:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 801133a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801133c:	2d14      	cmp	r5, #20
 801133e:	f63f af55 	bhi.w	80111ec <HAL_TIM_IC_Stop_DMA+0x58>
 8011342:	4b20      	ldr	r3, [pc, #128]	; (80113c4 <HAL_TIM_IC_Stop_DMA+0x230>)
 8011344:	40eb      	lsrs	r3, r5
 8011346:	07db      	lsls	r3, r3, #31
 8011348:	f53f af77 	bmi.w	801123a <HAL_TIM_IC_Stop_DMA+0xa6>
 801134c:	e74e      	b.n	80111ec <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 801134e:	6a19      	ldr	r1, [r3, #32]
 8011350:	f240 4244 	movw	r2, #1092	; 0x444
 8011354:	4211      	tst	r1, r2
 8011356:	d0ad      	beq.n	80112b4 <HAL_TIM_IC_Stop_DMA+0x120>
 8011358:	e7e9      	b.n	801132e <HAL_TIM_IC_Stop_DMA+0x19a>
 801135a:	6a19      	ldr	r1, [r3, #32]
 801135c:	f240 4244 	movw	r2, #1092	; 0x444
 8011360:	4211      	tst	r1, r2
 8011362:	d18d      	bne.n	8011280 <HAL_TIM_IC_Stop_DMA+0xec>
 8011364:	681a      	ldr	r2, [r3, #0]
 8011366:	f022 0201 	bic.w	r2, r2, #1
 801136a:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801136c:	e788      	b.n	8011280 <HAL_TIM_IC_Stop_DMA+0xec>
 801136e:	2301      	movs	r3, #1
 8011370:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011374:	e7ae      	b.n	80112d4 <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011376:	4b14      	ldr	r3, [pc, #80]	; (80113c8 <HAL_TIM_IC_Stop_DMA+0x234>)
 8011378:	4298      	cmp	r0, r3
 801137a:	d003      	beq.n	8011384 <HAL_TIM_IC_Stop_DMA+0x1f0>
 801137c:	4b13      	ldr	r3, [pc, #76]	; (80113cc <HAL_TIM_IC_Stop_DMA+0x238>)
 801137e:	4298      	cmp	r0, r3
 8011380:	f47f af34 	bne.w	80111ec <HAL_TIM_IC_Stop_DMA+0x58>
 8011384:	2d00      	cmp	r5, #0
 8011386:	f47f af31 	bne.w	80111ec <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 801138a:	480d      	ldr	r0, [pc, #52]	; (80113c0 <HAL_TIM_IC_Stop_DMA+0x22c>)
 801138c:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8011390:	f7f2 fef4 	bl	800417c <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011394:	6820      	ldr	r0, [r4, #0]
 8011396:	e750      	b.n	801123a <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801139c:	e79a      	b.n	80112d4 <HAL_TIM_IC_Stop_DMA+0x140>
 801139e:	bf00      	nop
 80113a0:	40010000 	.word	0x40010000
 80113a4:	40000400 	.word	0x40000400
 80113a8:	40000800 	.word	0x40000800
 80113ac:	40000c00 	.word	0x40000c00
 80113b0:	40010400 	.word	0x40010400
 80113b4:	40014000 	.word	0x40014000
 80113b8:	40014400 	.word	0x40014400
 80113bc:	40014800 	.word	0x40014800
 80113c0:	0802bf54 	.word	0x0802bf54
 80113c4:	00111111 	.word	0x00111111
 80113c8:	40001c00 	.word	0x40001c00
 80113cc:	40002000 	.word	0x40002000

080113d0 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80113d0:	6802      	ldr	r2, [r0, #0]
{
 80113d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80113d6:	4b6d      	ldr	r3, [pc, #436]	; (801158c <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 80113d8:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80113da:	4f6d      	ldr	r7, [pc, #436]	; (8011590 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 80113dc:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80113de:	429a      	cmp	r2, r3
 80113e0:	bf18      	it	ne
 80113e2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80113e6:	4e6b      	ldr	r6, [pc, #428]	; (8011594 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 80113e8:	496b      	ldr	r1, [pc, #428]	; (8011598 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 80113ea:	bf14      	ite	ne
 80113ec:	2301      	movne	r3, #1
 80113ee:	2300      	moveq	r3, #0
 80113f0:	42ba      	cmp	r2, r7
 80113f2:	bf0c      	ite	eq
 80113f4:	2300      	moveq	r3, #0
 80113f6:	f003 0301 	andne.w	r3, r3, #1
 80113fa:	42b2      	cmp	r2, r6
 80113fc:	bf0c      	ite	eq
 80113fe:	2300      	moveq	r3, #0
 8011400:	f003 0301 	andne.w	r3, r3, #1
 8011404:	428a      	cmp	r2, r1
 8011406:	bf0c      	ite	eq
 8011408:	2300      	moveq	r3, #0
 801140a:	f003 0301 	andne.w	r3, r3, #1
 801140e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011412:	428a      	cmp	r2, r1
 8011414:	bf0c      	ite	eq
 8011416:	2300      	moveq	r3, #0
 8011418:	f003 0301 	andne.w	r3, r3, #1
 801141c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011420:	428a      	cmp	r2, r1
 8011422:	bf0c      	ite	eq
 8011424:	2300      	moveq	r3, #0
 8011426:	f003 0301 	andne.w	r3, r3, #1
 801142a:	b11b      	cbz	r3, 8011434 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 801142c:	4b5b      	ldr	r3, [pc, #364]	; (801159c <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 801142e:	429a      	cmp	r2, r3
 8011430:	f040 808c 	bne.w	801154c <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8011434:	682b      	ldr	r3, [r5, #0]
 8011436:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 801143a:	2b40      	cmp	r3, #64	; 0x40
 801143c:	d002      	beq.n	8011444 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 801143e:	2b00      	cmp	r3, #0
 8011440:	f040 808a 	bne.w	8011558 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8011444:	68ab      	ldr	r3, [r5, #8]
 8011446:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801144a:	d173      	bne.n	8011534 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 801144c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011450:	2b01      	cmp	r3, #1
 8011452:	d078      	beq.n	8011546 <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011454:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 8011456:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011458:	f8df 9130 	ldr.w	r9, [pc, #304]	; 801158c <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 801145c:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801145e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801159c <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 8011462:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011466:	eba2 0009 	sub.w	r0, r2, r9
 801146a:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 801146e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011472:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 8011476:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011478:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 801147c:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801147e:	0940      	lsrs	r0, r0, #5
 8011480:	0949      	lsrs	r1, r1, #5
 8011482:	ea50 0301 	orrs.w	r3, r0, r1
 8011486:	d135      	bne.n	80114f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8011488:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801148a:	430b      	orrs	r3, r1
 801148c:	4940      	ldr	r1, [pc, #256]	; (8011590 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 801148e:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011492:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8011496:	bf08      	it	eq
 8011498:	f043 0301 	orreq.w	r3, r3, #1
 801149c:	428a      	cmp	r2, r1
 801149e:	bf08      	it	eq
 80114a0:	f043 0301 	orreq.w	r3, r3, #1
 80114a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80114a8:	428a      	cmp	r2, r1
 80114aa:	bf08      	it	eq
 80114ac:	f043 0301 	orreq.w	r3, r3, #1
 80114b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80114b4:	428a      	cmp	r2, r1
 80114b6:	bf08      	it	eq
 80114b8:	f043 0301 	orreq.w	r3, r3, #1
 80114bc:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80114c0:	428a      	cmp	r2, r1
 80114c2:	bf08      	it	eq
 80114c4:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80114c8:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80114ca:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80114cc:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 80114ce:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80114d0:	b913      	cbnz	r3, 80114d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80114d2:	4b33      	ldr	r3, [pc, #204]	; (80115a0 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 80114d4:	429a      	cmp	r2, r3
 80114d6:	d104      	bne.n	80114e2 <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80114d8:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80114da:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80114de:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80114e0:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80114e2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80114e4:	2201      	movs	r2, #1

  return HAL_OK;
 80114e6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80114e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80114ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80114f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80114f4:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80114f8:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 80114fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011500:	bf18      	it	ne
 8011502:	2b00      	cmpne	r3, #0
 8011504:	bf14      	ite	ne
 8011506:	f04f 0c01 	movne.w	ip, #1
 801150a:	f04f 0c00 	moveq.w	ip, #0
 801150e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011512:	bf0c      	ite	eq
 8011514:	f04f 0c00 	moveq.w	ip, #0
 8011518:	f00c 0c01 	andne.w	ip, ip, #1
 801151c:	f1bc 0f00 	cmp.w	ip, #0
 8011520:	d002      	beq.n	8011528 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8011522:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011526:	d11d      	bne.n	8011564 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011528:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801152c:	4603      	mov	r3, r0
 801152e:	ea47 070e 	orr.w	r7, r7, lr
 8011532:	e7aa      	b.n	801148a <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8011534:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8011538:	481a      	ldr	r0, [pc, #104]	; (80115a4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 801153a:	f7f2 fe1f 	bl	800417c <assert_failed>
  __HAL_LOCK(htim);
 801153e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011542:	2b01      	cmp	r3, #1
 8011544:	d186      	bne.n	8011454 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8011546:	2002      	movs	r0, #2
}
 8011548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 801154c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8011550:	4814      	ldr	r0, [pc, #80]	; (80115a4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011552:	f7f2 fe13 	bl	800417c <assert_failed>
 8011556:	e76d      	b.n	8011434 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8011558:	f240 71b4 	movw	r1, #1972	; 0x7b4
 801155c:	4811      	ldr	r0, [pc, #68]	; (80115a4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 801155e:	f7f2 fe0d 	bl	800417c <assert_failed>
 8011562:	e76f      	b.n	8011444 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8011564:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8011568:	480e      	ldr	r0, [pc, #56]	; (80115a4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 801156a:	f7f2 fe07 	bl	800417c <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 801156e:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011570:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011574:	eba2 0309 	sub.w	r3, r2, r9
 8011578:	eba2 0c08 	sub.w	ip, r2, r8
 801157c:	4258      	negs	r0, r3
 801157e:	4158      	adcs	r0, r3
 8011580:	f1dc 0100 	rsbs	r1, ip, #0
 8011584:	eb41 010c 	adc.w	r1, r1, ip
 8011588:	e7ce      	b.n	8011528 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 801158a:	bf00      	nop
 801158c:	40010000 	.word	0x40010000
 8011590:	40000400 	.word	0x40000400
 8011594:	40000800 	.word	0x40000800
 8011598:	40000c00 	.word	0x40000c00
 801159c:	40010400 	.word	0x40010400
 80115a0:	40001800 	.word	0x40001800
 80115a4:	0802bf8c 	.word	0x0802bf8c

080115a8 <HAL_TIMEx_CommutCallback>:
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop

080115ac <HAL_TIMEx_BreakCallback>:
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop

080115b0 <HAL_TIMEx_Break2Callback>:
 80115b0:	4770      	bx	lr
 80115b2:	bf00      	nop

080115b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80115b4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115b6:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80115ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115be:	e842 3100 	strex	r1, r3, [r2]
 80115c2:	2900      	cmp	r1, #0
 80115c4:	d1f7      	bne.n	80115b6 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115c6:	f102 0308 	add.w	r3, r2, #8
 80115ca:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115ce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115d2:	f102 0c08 	add.w	ip, r2, #8
 80115d6:	e84c 3100 	strex	r1, r3, [ip]
 80115da:	2900      	cmp	r1, #0
 80115dc:	d1f3      	bne.n	80115c6 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115de:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d005      	beq.n	80115f0 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115e4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80115e6:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80115e8:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 80115ea:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115ec:	6603      	str	r3, [r0, #96]	; 0x60
}
 80115ee:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115f0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115f8:	e842 3100 	strex	r1, r3, [r2]
 80115fc:	2900      	cmp	r1, #0
 80115fe:	d0f1      	beq.n	80115e4 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011600:	e852 3f00 	ldrex	r3, [r2]
 8011604:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011608:	e842 3100 	strex	r1, r3, [r2]
 801160c:	2900      	cmp	r1, #0
 801160e:	d1ef      	bne.n	80115f0 <UART_EndRxTransfer+0x3c>
 8011610:	e7e8      	b.n	80115e4 <UART_EndRxTransfer+0x30>
 8011612:	bf00      	nop

08011614 <HAL_UART_DeInit>:
  if (huart == NULL)
 8011614:	2800      	cmp	r0, #0
 8011616:	d046      	beq.n	80116a6 <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011618:	6802      	ldr	r2, [r0, #0]
 801161a:	4927      	ldr	r1, [pc, #156]	; (80116b8 <HAL_UART_DeInit+0xa4>)
{
 801161c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 801161e:	4b27      	ldr	r3, [pc, #156]	; (80116bc <HAL_UART_DeInit+0xa8>)
 8011620:	4604      	mov	r4, r0
 8011622:	4827      	ldr	r0, [pc, #156]	; (80116c0 <HAL_UART_DeInit+0xac>)
 8011624:	429a      	cmp	r2, r3
 8011626:	bf18      	it	ne
 8011628:	4282      	cmpne	r2, r0
 801162a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801162e:	bf14      	ite	ne
 8011630:	2301      	movne	r3, #1
 8011632:	2300      	moveq	r3, #0
 8011634:	428a      	cmp	r2, r1
 8011636:	bf0c      	ite	eq
 8011638:	2300      	moveq	r3, #0
 801163a:	f003 0301 	andne.w	r3, r3, #1
 801163e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011642:	4282      	cmp	r2, r0
 8011644:	bf0c      	ite	eq
 8011646:	2300      	moveq	r3, #0
 8011648:	f003 0301 	andne.w	r3, r3, #1
 801164c:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8011650:	428a      	cmp	r2, r1
 8011652:	bf0c      	ite	eq
 8011654:	2300      	moveq	r3, #0
 8011656:	f003 0301 	andne.w	r3, r3, #1
 801165a:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 801165e:	4282      	cmp	r2, r0
 8011660:	bf0c      	ite	eq
 8011662:	2300      	moveq	r3, #0
 8011664:	f003 0301 	andne.w	r3, r3, #1
 8011668:	428a      	cmp	r2, r1
 801166a:	bf0c      	ite	eq
 801166c:	2300      	moveq	r3, #0
 801166e:	f003 0301 	andne.w	r3, r3, #1
 8011672:	b113      	cbz	r3, 801167a <HAL_UART_DeInit+0x66>
 8011674:	4b13      	ldr	r3, [pc, #76]	; (80116c4 <HAL_UART_DeInit+0xb0>)
 8011676:	429a      	cmp	r2, r3
 8011678:	d117      	bne.n	80116aa <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 801167a:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 801167c:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 801167e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011680:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8011682:	6813      	ldr	r3, [r2, #0]
 8011684:	f023 0301 	bic.w	r3, r3, #1
 8011688:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 801168a:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 801168c:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 801168e:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 8011690:	f7f4 fd92 	bl	80061b8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011694:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 8011698:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 801169a:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 801169c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80116a0:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116a2:	6625      	str	r5, [r4, #96]	; 0x60
}
 80116a4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80116a6:	2001      	movs	r0, #1
}
 80116a8:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 80116aa:	f240 2167 	movw	r1, #615	; 0x267
 80116ae:	4806      	ldr	r0, [pc, #24]	; (80116c8 <HAL_UART_DeInit+0xb4>)
 80116b0:	f7f2 fd64 	bl	800417c <assert_failed>
  __HAL_UART_DISABLE(huart);
 80116b4:	6822      	ldr	r2, [r4, #0]
 80116b6:	e7e0      	b.n	801167a <HAL_UART_DeInit+0x66>
 80116b8:	40004800 	.word	0x40004800
 80116bc:	40011000 	.word	0x40011000
 80116c0:	40004400 	.word	0x40004400
 80116c4:	40007c00 	.word	0x40007c00
 80116c8:	0802bfc8 	.word	0x0802bfc8

080116cc <HAL_UART_Transmit_DMA>:
{
 80116cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80116ce:	6f87      	ldr	r7, [r0, #120]	; 0x78
 80116d0:	2f20      	cmp	r7, #32
 80116d2:	d141      	bne.n	8011758 <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 80116d4:	2900      	cmp	r1, #0
 80116d6:	d03d      	beq.n	8011754 <HAL_UART_Transmit_DMA+0x88>
 80116d8:	fab2 f682 	clz	r6, r2
 80116dc:	0976      	lsrs	r6, r6, #5
 80116de:	2a00      	cmp	r2, #0
 80116e0:	d038      	beq.n	8011754 <HAL_UART_Transmit_DMA+0x88>
 80116e2:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 80116e4:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 80116e8:	2801      	cmp	r0, #1
 80116ea:	d035      	beq.n	8011758 <HAL_UART_Transmit_DMA+0x8c>
 80116ec:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80116ee:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 80116f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 80116f2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 80116f6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116f8:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 80116fc:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8011700:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011704:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8011706:	b190      	cbz	r0, 801172e <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011708:	f8df c060 	ldr.w	ip, [pc, #96]	; 801176c <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801170c:	4613      	mov	r3, r2
 801170e:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011710:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011714:	f8df c058 	ldr.w	ip, [pc, #88]	; 8011770 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011718:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 801171a:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801171c:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011720:	f8df c050 	ldr.w	ip, [pc, #80]	; 8011774 <HAL_UART_Transmit_DMA+0xa8>
 8011724:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011728:	f7f7 fc1a 	bl	8008f60 <HAL_DMA_Start_IT>
 801172c:	b9b0      	cbnz	r0, 801175c <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801172e:	6822      	ldr	r2, [r4, #0]
 8011730:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8011732:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011734:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8011736:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801173a:	f102 0308 	add.w	r3, r2, #8
 801173e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011746:	f102 0108 	add.w	r1, r2, #8
 801174a:	e841 3000 	strex	r0, r3, [r1]
 801174e:	2800      	cmp	r0, #0
 8011750:	d1f3      	bne.n	801173a <HAL_UART_Transmit_DMA+0x6e>
}
 8011752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011754:	2001      	movs	r0, #1
}
 8011756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8011758:	2002      	movs	r0, #2
}
 801175a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801175c:	2310      	movs	r3, #16
        return HAL_ERROR;
 801175e:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8011760:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011764:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8011768:	67a7      	str	r7, [r4, #120]	; 0x78
}
 801176a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801176c:	0801187d 	.word	0x0801187d
 8011770:	080118c5 	.word	0x080118c5
 8011774:	080118d5 	.word	0x080118d5

08011778 <HAL_UART_Abort>:
{
 8011778:	b538      	push	{r3, r4, r5, lr}
 801177a:	4604      	mov	r4, r0
 801177c:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801177e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8011782:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011786:	e843 2100 	strex	r1, r2, [r3]
 801178a:	2900      	cmp	r1, #0
 801178c:	d1f7      	bne.n	801177e <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801178e:	f103 0208 	add.w	r2, r3, #8
 8011792:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011796:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801179a:	f103 0008 	add.w	r0, r3, #8
 801179e:	e840 2100 	strex	r1, r2, [r0]
 80117a2:	2900      	cmp	r1, #0
 80117a4:	d1f3      	bne.n	801178e <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117a6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80117a8:	2a01      	cmp	r2, #1
 80117aa:	d043      	beq.n	8011834 <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80117ac:	6899      	ldr	r1, [r3, #8]
 80117ae:	461a      	mov	r2, r3
 80117b0:	0608      	lsls	r0, r1, #24
 80117b2:	d42a      	bmi.n	801180a <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117b4:	6899      	ldr	r1, [r3, #8]
 80117b6:	0649      	lsls	r1, r1, #25
 80117b8:	d514      	bpl.n	80117e4 <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117ba:	f103 0208 	add.w	r2, r3, #8
 80117be:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80117c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117c6:	f103 0008 	add.w	r0, r3, #8
 80117ca:	e840 2100 	strex	r1, r2, [r0]
 80117ce:	2900      	cmp	r1, #0
 80117d0:	d1f3      	bne.n	80117ba <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 80117d2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80117d4:	2800      	cmp	r0, #0
 80117d6:	d03e      	beq.n	8011856 <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 80117d8:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80117da:	f7f7 fc1d 	bl	8009018 <HAL_DMA_Abort>
 80117de:	2800      	cmp	r0, #0
 80117e0:	d145      	bne.n	801186e <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80117e2:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 80117e4:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80117e6:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 80117e8:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 80117ea:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 80117ee:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 80117f0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80117f4:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80117f6:	6991      	ldr	r1, [r2, #24]
 80117f8:	f041 0108 	orr.w	r1, r1, #8
 80117fc:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 80117fe:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011800:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011802:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011804:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8011808:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801180a:	f103 0208 	add.w	r2, r3, #8
 801180e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011816:	f103 0008 	add.w	r0, r3, #8
 801181a:	e840 2100 	strex	r1, r2, [r0]
 801181e:	2900      	cmp	r1, #0
 8011820:	d1f3      	bne.n	801180a <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 8011822:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011824:	b120      	cbz	r0, 8011830 <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 8011826:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8011828:	f7f7 fbf6 	bl	8009018 <HAL_DMA_Abort>
 801182c:	b9a8      	cbnz	r0, 801185a <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801182e:	6823      	ldr	r3, [r4, #0]
 8011830:	461a      	mov	r2, r3
 8011832:	e7bf      	b.n	80117b4 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011834:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8011838:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183c:	e843 2100 	strex	r1, r2, [r3]
 8011840:	2900      	cmp	r1, #0
 8011842:	d0b3      	beq.n	80117ac <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011844:	e853 2f00 	ldrex	r2, [r3]
 8011848:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801184c:	e843 2100 	strex	r1, r2, [r3]
 8011850:	2900      	cmp	r1, #0
 8011852:	d1ef      	bne.n	8011834 <HAL_UART_Abort+0xbc>
 8011854:	e7aa      	b.n	80117ac <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011856:	461a      	mov	r2, r3
 8011858:	e7c4      	b.n	80117e4 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801185a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801185c:	f7f7 fd28 	bl	80092b0 <HAL_DMA_GetError>
 8011860:	2820      	cmp	r0, #32
 8011862:	d1e4      	bne.n	801182e <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011864:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 8011866:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011868:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 801186c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801186e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011870:	f7f7 fd1e 	bl	80092b0 <HAL_DMA_GetError>
 8011874:	2820      	cmp	r0, #32
 8011876:	d1b4      	bne.n	80117e2 <HAL_UART_Abort+0x6a>
 8011878:	e7f4      	b.n	8011864 <HAL_UART_Abort+0xec>
 801187a:	bf00      	nop

0801187c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801187c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801187e:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011880:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011886:	d018      	beq.n	80118ba <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8011888:	2300      	movs	r3, #0
 801188a:	6802      	ldr	r2, [r0, #0]
 801188c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011890:	f102 0308 	add.w	r3, r2, #8
 8011894:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801189c:	f102 0008 	add.w	r0, r2, #8
 80118a0:	e840 3100 	strex	r1, r3, [r0]
 80118a4:	2900      	cmp	r1, #0
 80118a6:	d1f3      	bne.n	8011890 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118a8:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80118ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118b0:	e842 3100 	strex	r1, r3, [r2]
 80118b4:	2900      	cmp	r1, #0
 80118b6:	d1f7      	bne.n	80118a8 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80118b8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80118ba:	f7ef fcb9 	bl	8001230 <HAL_UART_TxCpltCallback>
}
 80118be:	bd08      	pop	{r3, pc}

080118c0 <HAL_UART_TxHalfCpltCallback>:
 80118c0:	4770      	bx	lr
 80118c2:	bf00      	nop

080118c4 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80118c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80118c6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80118c8:	f7ff fffa 	bl	80118c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80118cc:	bd08      	pop	{r3, pc}
 80118ce:	bf00      	nop

080118d0 <HAL_UART_RxHalfCpltCallback>:
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop

080118d4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80118d4:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80118d6:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80118d8:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 80118da:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80118dc:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80118de:	6893      	ldr	r3, [r2, #8]
 80118e0:	061b      	lsls	r3, r3, #24
 80118e2:	d501      	bpl.n	80118e8 <UART_DMAError+0x14>
 80118e4:	2921      	cmp	r1, #33	; 0x21
 80118e6:	d00d      	beq.n	8011904 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80118e8:	6893      	ldr	r3, [r2, #8]
 80118ea:	065b      	lsls	r3, r3, #25
 80118ec:	d501      	bpl.n	80118f2 <UART_DMAError+0x1e>
 80118ee:	2c22      	cmp	r4, #34	; 0x22
 80118f0:	d016      	beq.n	8011920 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80118f2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80118f6:	f043 0310 	orr.w	r3, r3, #16
 80118fa:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80118fe:	f7f2 ff1b 	bl	8004738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011902:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8011904:	2300      	movs	r3, #0
 8011906:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801190a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801190e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011912:	e842 3100 	strex	r1, r3, [r2]
 8011916:	2900      	cmp	r1, #0
 8011918:	d1f7      	bne.n	801190a <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 801191a:	2320      	movs	r3, #32
 801191c:	6783      	str	r3, [r0, #120]	; 0x78
}
 801191e:	e7e3      	b.n	80118e8 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8011920:	2300      	movs	r3, #0
 8011922:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8011926:	f7ff fe45 	bl	80115b4 <UART_EndRxTransfer>
 801192a:	e7e2      	b.n	80118f2 <UART_DMAError+0x1e>

0801192c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801192c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801192e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8011930:	2300      	movs	r3, #0
 8011932:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8011936:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801193a:	f7f2 fefd 	bl	8004738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801193e:	bd08      	pop	{r3, pc}

08011940 <HAL_UART_AbortCpltCallback>:
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop

08011944 <HAL_UART_Abort_IT>:
{
 8011944:	b570      	push	{r4, r5, r6, lr}
 8011946:	6803      	ldr	r3, [r0, #0]
 8011948:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801194a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801194e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011952:	e843 2100 	strex	r1, r2, [r3]
 8011956:	2900      	cmp	r1, #0
 8011958:	d1f7      	bne.n	801194a <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801195a:	f103 0208 	add.w	r2, r3, #8
 801195e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011962:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011966:	f103 0008 	add.w	r0, r3, #8
 801196a:	e840 2100 	strex	r1, r2, [r0]
 801196e:	2900      	cmp	r1, #0
 8011970:	d1f3      	bne.n	801195a <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011972:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8011974:	2a01      	cmp	r2, #1
 8011976:	d05e      	beq.n	8011a36 <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 8011978:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 801197a:	2800      	cmp	r0, #0
 801197c:	d071      	beq.n	8011a62 <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801197e:	689a      	ldr	r2, [r3, #8]
 8011980:	461c      	mov	r4, r3
 8011982:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8011986:	bf18      	it	ne
 8011988:	4a3b      	ldrne	r2, [pc, #236]	; (8011a78 <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 801198a:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 801198c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801198e:	b129      	cbz	r1, 801199c <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011990:	689a      	ldr	r2, [r3, #8]
 8011992:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8011996:	bf18      	it	ne
 8011998:	4a38      	ldrne	r2, [pc, #224]	; (8011a7c <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 801199a:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801199c:	689a      	ldr	r2, [r3, #8]
 801199e:	0612      	lsls	r2, r2, #24
 80119a0:	d430      	bmi.n	8011a04 <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119a2:	689a      	ldr	r2, [r3, #8]
 80119a4:	0656      	lsls	r6, r2, #25
 80119a6:	d515      	bpl.n	80119d4 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 80119a8:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119aa:	f103 0208 	add.w	r2, r3, #8
 80119ae:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80119b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b6:	f103 0008 	add.w	r0, r3, #8
 80119ba:	e840 2600 	strex	r6, r2, [r0]
 80119be:	2e00      	cmp	r6, #0
 80119c0:	d1f3      	bne.n	80119aa <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 80119c2:	2900      	cmp	r1, #0
 80119c4:	d04f      	beq.n	8011a66 <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80119c6:	4608      	mov	r0, r1
 80119c8:	f7f7 fb6e 	bl	80090a8 <HAL_DMA_Abort_IT>
 80119cc:	b1c0      	cbz	r0, 8011a00 <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 80119ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80119d0:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 80119d2:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 80119d4:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80119d6:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 80119d8:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 80119da:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 80119dc:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 80119e0:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 80119e2:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 80119e6:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119e8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80119ec:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80119ee:	69a2      	ldr	r2, [r4, #24]
 80119f0:	f042 0208 	orr.w	r2, r2, #8
 80119f4:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 80119f6:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 80119f8:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119fa:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 80119fc:	f7ff ffa0 	bl	8011940 <HAL_UART_AbortCpltCallback>
}
 8011a00:	2000      	movs	r0, #0
 8011a02:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a04:	f103 0208 	add.w	r2, r3, #8
 8011a08:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a10:	f103 0608 	add.w	r6, r3, #8
 8011a14:	e846 2400 	strex	r4, r2, [r6]
 8011a18:	2c00      	cmp	r4, #0
 8011a1a:	d1f3      	bne.n	8011a04 <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 8011a1c:	b1e0      	cbz	r0, 8011a58 <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8011a1e:	f7f7 fb43 	bl	80090a8 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a22:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8011a24:	b318      	cbz	r0, 8011a6e <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 8011a26:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a28:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 8011a2a:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a2c:	461c      	mov	r4, r3
 8011a2e:	0651      	lsls	r1, r2, #25
 8011a30:	d5d0      	bpl.n	80119d4 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8011a32:	2401      	movs	r4, #1
 8011a34:	e01e      	b.n	8011a74 <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a36:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8011a3a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a3e:	e843 2100 	strex	r1, r2, [r3]
 8011a42:	2900      	cmp	r1, #0
 8011a44:	d098      	beq.n	8011978 <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a46:	e853 2f00 	ldrex	r2, [r3]
 8011a4a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a4e:	e843 2100 	strex	r1, r2, [r3]
 8011a52:	2900      	cmp	r1, #0
 8011a54:	d1ef      	bne.n	8011a36 <HAL_UART_Abort_IT+0xf2>
 8011a56:	e78f      	b.n	8011978 <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a58:	689a      	ldr	r2, [r3, #8]
 8011a5a:	461c      	mov	r4, r3
 8011a5c:	0652      	lsls	r2, r2, #25
 8011a5e:	d5b9      	bpl.n	80119d4 <HAL_UART_Abort_IT+0x90>
 8011a60:	e7a2      	b.n	80119a8 <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011a62:	461c      	mov	r4, r3
 8011a64:	e792      	b.n	801198c <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 8011a66:	2c01      	cmp	r4, #1
 8011a68:	d1ca      	bne.n	8011a00 <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011a6a:	461c      	mov	r4, r3
 8011a6c:	e7b2      	b.n	80119d4 <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a6e:	689a      	ldr	r2, [r3, #8]
 8011a70:	0650      	lsls	r0, r2, #25
 8011a72:	d5c5      	bpl.n	8011a00 <HAL_UART_Abort_IT+0xbc>
 8011a74:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8011a76:	e798      	b.n	80119aa <HAL_UART_Abort_IT+0x66>
 8011a78:	08011ac1 	.word	0x08011ac1
 8011a7c:	08011a81 	.word	0x08011a81

08011a80 <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a80:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 8011a82:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011a84:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 8011a88:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 8011a8a:	b113      	cbz	r3, 8011a92 <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a8e:	b103      	cbz	r3, 8011a92 <UART_DMARxAbortCallback+0x12>
 8011a90:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011a92:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011a94:	6802      	ldr	r2, [r0, #0]
 8011a96:	210f      	movs	r1, #15
{
 8011a98:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8011a9a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011a9e:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 8011aa0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011aa4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011aa8:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011aaa:	6991      	ldr	r1, [r2, #24]
 8011aac:	f041 0108 	orr.w	r1, r1, #8
 8011ab0:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8011ab2:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011ab4:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ab6:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011ab8:	f7ff ff42 	bl	8011940 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011abc:	bd10      	pop	{r4, pc}
 8011abe:	bf00      	nop

08011ac0 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ac0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 8011ac2:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 8011ac4:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 8011ac8:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8011aca:	b113      	cbz	r3, 8011ad2 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ace:	b103      	cbz	r3, 8011ad2 <UART_DMATxAbortCallback+0x12>
 8011ad0:	4770      	bx	lr
{
 8011ad2:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8011ad4:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 8011ad6:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011ad8:	6801      	ldr	r1, [r0, #0]
 8011ada:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 8011adc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 8011ae0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ae4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011ae8:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 8011aea:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011aec:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011aee:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 8011af0:	f7ff ff26 	bl	8011940 <HAL_UART_AbortCpltCallback>
}
 8011af4:	bd10      	pop	{r4, pc}
 8011af6:	bf00      	nop

08011af8 <HAL_UARTEx_RxEventCallback>:
}
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop

08011afc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011afc:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011afe:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8011b00:	2b22      	cmp	r3, #34	; 0x22
 8011b02:	d005      	beq.n	8011b10 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011b04:	6802      	ldr	r2, [r0, #0]
 8011b06:	6993      	ldr	r3, [r2, #24]
 8011b08:	f043 0308 	orr.w	r3, r3, #8
 8011b0c:	6193      	str	r3, [r2, #24]
  }
}
 8011b0e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011b10:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011b12:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011b18:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8011b1a:	400b      	ands	r3, r1
 8011b1c:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8011b1e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8011b22:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8011b24:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 8011b26:	3201      	adds	r2, #1
    huart->RxXferCount--;
 8011b28:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8011b2a:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8011b2c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8011b30:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d1e9      	bne.n	8011b0e <UART_RxISR_8BIT+0x12>
 8011b3a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b3c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011b40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b44:	e843 2100 	strex	r1, r2, [r3]
 8011b48:	2900      	cmp	r1, #0
 8011b4a:	d1f7      	bne.n	8011b3c <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b4c:	f103 0208 	add.w	r2, r3, #8
 8011b50:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b54:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b58:	f103 0c08 	add.w	ip, r3, #8
 8011b5c:	e84c 2100 	strex	r1, r2, [ip]
 8011b60:	2900      	cmp	r1, #0
 8011b62:	d1f3      	bne.n	8011b4c <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 8011b64:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8011b66:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8011b68:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b6a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8011b6c:	2a01      	cmp	r2, #1
 8011b6e:	d112      	bne.n	8011b96 <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b70:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b72:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b76:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b7a:	e843 2100 	strex	r1, r2, [r3]
 8011b7e:	2900      	cmp	r1, #0
 8011b80:	d1f7      	bne.n	8011b72 <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011b82:	69da      	ldr	r2, [r3, #28]
 8011b84:	06d2      	lsls	r2, r2, #27
 8011b86:	d501      	bpl.n	8011b8c <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011b88:	2210      	movs	r2, #16
 8011b8a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011b8c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8011b90:	f7ff ffb2 	bl	8011af8 <HAL_UARTEx_RxEventCallback>
}
 8011b94:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8011b96:	f7f2 fd59 	bl	800464c <HAL_UART_RxCpltCallback>
}
 8011b9a:	bd08      	pop	{r3, pc}

08011b9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011b9c:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b9e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8011ba0:	2b22      	cmp	r3, #34	; 0x22
 8011ba2:	d005      	beq.n	8011bb0 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ba4:	6802      	ldr	r2, [r0, #0]
 8011ba6:	6993      	ldr	r3, [r2, #24]
 8011ba8:	f043 0308 	orr.w	r3, r3, #8
 8011bac:	6193      	str	r3, [r2, #24]
  }
}
 8011bae:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011bb0:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8011bb2:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8011bb8:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8011bba:	ea02 020c 	and.w	r2, r2, ip
 8011bbe:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8011bc2:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8011bc6:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8011bc8:	3a01      	subs	r2, #1
 8011bca:	b292      	uxth	r2, r2
 8011bcc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8011bd0:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8011bd4:	b292      	uxth	r2, r2
 8011bd6:	2a00      	cmp	r2, #0
 8011bd8:	d1e9      	bne.n	8011bae <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bda:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011bde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011be2:	e843 2100 	strex	r1, r2, [r3]
 8011be6:	2900      	cmp	r1, #0
 8011be8:	d1f7      	bne.n	8011bda <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bea:	f103 0208 	add.w	r2, r3, #8
 8011bee:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bf2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf6:	f103 0c08 	add.w	ip, r3, #8
 8011bfa:	e84c 2100 	strex	r1, r2, [ip]
 8011bfe:	2900      	cmp	r1, #0
 8011c00:	d1f3      	bne.n	8011bea <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 8011c02:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8011c04:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8011c06:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c08:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8011c0a:	2a01      	cmp	r2, #1
 8011c0c:	d112      	bne.n	8011c34 <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c0e:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c10:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c14:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c18:	e843 2100 	strex	r1, r2, [r3]
 8011c1c:	2900      	cmp	r1, #0
 8011c1e:	d1f7      	bne.n	8011c10 <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011c20:	69da      	ldr	r2, [r3, #28]
 8011c22:	06d2      	lsls	r2, r2, #27
 8011c24:	d501      	bpl.n	8011c2a <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c26:	2210      	movs	r2, #16
 8011c28:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c2a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8011c2e:	f7ff ff63 	bl	8011af8 <HAL_UARTEx_RxEventCallback>
}
 8011c32:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8011c34:	f7f2 fd0a 	bl	800464c <HAL_UART_RxCpltCallback>
}
 8011c38:	bd08      	pop	{r3, pc}
 8011c3a:	bf00      	nop

08011c3c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c3c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8011c3e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c40:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d002      	beq.n	8011c4c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8011c46:	f7ff fe43 	bl	80118d0 <HAL_UART_RxHalfCpltCallback>
}
 8011c4a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011c4c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8011c50:	0849      	lsrs	r1, r1, #1
 8011c52:	f7ff ff51 	bl	8011af8 <HAL_UARTEx_RxEventCallback>
}
 8011c56:	bd08      	pop	{r3, pc}

08011c58 <UART_DMAReceiveCplt>:
{
 8011c58:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011c5a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c5c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c62:	d028      	beq.n	8011cb6 <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 8011c64:	2200      	movs	r2, #0
 8011c66:	6803      	ldr	r3, [r0, #0]
 8011c68:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c6c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c74:	e843 2100 	strex	r1, r2, [r3]
 8011c78:	2900      	cmp	r1, #0
 8011c7a:	d1f7      	bne.n	8011c6c <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c7c:	f103 0208 	add.w	r2, r3, #8
 8011c80:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c84:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c88:	f103 0c08 	add.w	ip, r3, #8
 8011c8c:	e84c 2100 	strex	r1, r2, [ip]
 8011c90:	2900      	cmp	r1, #0
 8011c92:	d1f3      	bne.n	8011c7c <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c94:	f103 0208 	add.w	r2, r3, #8
 8011c98:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ca0:	f103 0c08 	add.w	ip, r3, #8
 8011ca4:	e84c 2100 	strex	r1, r2, [ip]
 8011ca8:	2900      	cmp	r1, #0
 8011caa:	d1f3      	bne.n	8011c94 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8011cac:	2220      	movs	r2, #32
 8011cae:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cb0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8011cb2:	2a01      	cmp	r2, #1
 8011cb4:	d005      	beq.n	8011cc2 <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cb6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011cb8:	2b01      	cmp	r3, #1
 8011cba:	d013      	beq.n	8011ce4 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8011cbc:	f7f2 fcc6 	bl	800464c <HAL_UART_RxCpltCallback>
}
 8011cc0:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cc2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cc6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cca:	e843 2100 	strex	r1, r2, [r3]
 8011cce:	2900      	cmp	r1, #0
 8011cd0:	d0f1      	beq.n	8011cb6 <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd2:	e853 2f00 	ldrex	r2, [r3]
 8011cd6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cda:	e843 2100 	strex	r1, r2, [r3]
 8011cde:	2900      	cmp	r1, #0
 8011ce0:	d1ef      	bne.n	8011cc2 <UART_DMAReceiveCplt+0x6a>
 8011ce2:	e7e8      	b.n	8011cb6 <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011ce4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8011ce8:	f7ff ff06 	bl	8011af8 <HAL_UARTEx_RxEventCallback>
}
 8011cec:	bd08      	pop	{r3, pc}
 8011cee:	bf00      	nop

08011cf0 <HAL_UARTEx_WakeupCallback>:
}
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop

08011cf4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011cf4:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011cf6:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011cfa:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011cfc:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 8011cfe:	ea12 0f0c 	tst.w	r2, ip
{
 8011d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d06:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011d08:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8011d0a:	d17d      	bne.n	8011e08 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011d0c:	0697      	lsls	r7, r2, #26
 8011d0e:	d502      	bpl.n	8011d16 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011d10:	068e      	lsls	r6, r1, #26
 8011d12:	f100 80f4 	bmi.w	8011efe <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d16:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8011d18:	2801      	cmp	r0, #1
 8011d1a:	d024      	beq.n	8011d66 <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011d1c:	02d0      	lsls	r0, r2, #11
 8011d1e:	d502      	bpl.n	8011d26 <HAL_UART_IRQHandler+0x32>
 8011d20:	026f      	lsls	r7, r5, #9
 8011d22:	f100 80f1 	bmi.w	8011f08 <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011d26:	0616      	lsls	r6, r2, #24
 8011d28:	d414      	bmi.n	8011d54 <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011d2a:	0650      	lsls	r0, r2, #25
 8011d2c:	d501      	bpl.n	8011d32 <HAL_UART_IRQHandler+0x3e>
 8011d2e:	064a      	lsls	r2, r1, #25
 8011d30:	d401      	bmi.n	8011d36 <HAL_UART_IRQHandler+0x42>
}
 8011d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d36:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d3e:	e843 2100 	strex	r1, r2, [r3]
 8011d42:	2900      	cmp	r1, #0
 8011d44:	d1f7      	bne.n	8011d36 <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 8011d46:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 8011d48:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8011d4a:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8011d4c:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8011d4e:	f7ef fa6f 	bl	8001230 <HAL_UART_TxCpltCallback>
}
 8011d52:	e7ee      	b.n	8011d32 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011d54:	060d      	lsls	r5, r1, #24
 8011d56:	d5e8      	bpl.n	8011d2a <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 8011d58:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d0e9      	beq.n	8011d32 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 8011d5e:	4620      	mov	r0, r4
}
 8011d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8011d64:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011d66:	06d7      	lsls	r7, r2, #27
 8011d68:	d5d8      	bpl.n	8011d1c <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011d6a:	06ce      	lsls	r6, r1, #27
 8011d6c:	d5d6      	bpl.n	8011d1c <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011d6e:	2210      	movs	r2, #16
 8011d70:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d72:	689a      	ldr	r2, [r3, #8]
 8011d74:	0655      	lsls	r5, r2, #25
 8011d76:	f140 80d9 	bpl.w	8011f2c <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011d7a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011d7c:	6802      	ldr	r2, [r0, #0]
 8011d7e:	6852      	ldr	r2, [r2, #4]
 8011d80:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8011d82:	2a00      	cmp	r2, #0
 8011d84:	d0d5      	beq.n	8011d32 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011d86:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8011d8a:	4291      	cmp	r1, r2
 8011d8c:	d9d1      	bls.n	8011d32 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 8011d8e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011d92:	69c2      	ldr	r2, [r0, #28]
 8011d94:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8011d98:	d02e      	beq.n	8011df8 <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d9a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011da2:	e843 2100 	strex	r1, r2, [r3]
 8011da6:	2900      	cmp	r1, #0
 8011da8:	d1f7      	bne.n	8011d9a <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011daa:	f103 0208 	add.w	r2, r3, #8
 8011dae:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011db2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db6:	f103 0508 	add.w	r5, r3, #8
 8011dba:	e845 2100 	strex	r1, r2, [r5]
 8011dbe:	2900      	cmp	r1, #0
 8011dc0:	d1f3      	bne.n	8011daa <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dc2:	f103 0208 	add.w	r2, r3, #8
 8011dc6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dce:	f103 0508 	add.w	r5, r3, #8
 8011dd2:	e845 2100 	strex	r1, r2, [r5]
 8011dd6:	2900      	cmp	r1, #0
 8011dd8:	d1f3      	bne.n	8011dc2 <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 8011dda:	2220      	movs	r2, #32
 8011ddc:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dde:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011de0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011de4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011de8:	e843 2100 	strex	r1, r2, [r3]
 8011dec:	2900      	cmp	r1, #0
 8011dee:	d1f7      	bne.n	8011de0 <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011df0:	f7f7 f912 	bl	8009018 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011df4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8011df8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	1ac9      	subs	r1, r1, r3
 8011e00:	b289      	uxth	r1, r1
 8011e02:	f7ff fe79 	bl	8011af8 <HAL_UARTEx_RxEventCallback>
 8011e06:	e794      	b.n	8011d32 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011e08:	4864      	ldr	r0, [pc, #400]	; (8011f9c <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8011e0a:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011e0e:	4008      	ands	r0, r1
 8011e10:	4330      	orrs	r0, r6
 8011e12:	d080      	beq.n	8011d16 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011e14:	07d5      	lsls	r5, r2, #31
 8011e16:	461f      	mov	r7, r3
 8011e18:	d509      	bpl.n	8011e2e <HAL_UART_IRQHandler+0x13a>
 8011e1a:	05c8      	lsls	r0, r1, #23
 8011e1c:	d507      	bpl.n	8011e2e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011e1e:	2001      	movs	r0, #1
 8011e20:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011e22:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8011e26:	f040 0001 	orr.w	r0, r0, #1
 8011e2a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e2e:	0795      	lsls	r5, r2, #30
 8011e30:	d560      	bpl.n	8011ef4 <HAL_UART_IRQHandler+0x200>
 8011e32:	b18e      	cbz	r6, 8011e58 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011e34:	2002      	movs	r0, #2
 8011e36:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011e38:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8011e3c:	f040 0004 	orr.w	r0, r0, #4
 8011e40:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e44:	0750      	lsls	r0, r2, #29
 8011e46:	d507      	bpl.n	8011e58 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011e48:	2004      	movs	r0, #4
 8011e4a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011e4c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8011e50:	f040 0002 	orr.w	r0, r0, #2
 8011e54:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011e58:	0710      	lsls	r0, r2, #28
 8011e5a:	d50b      	bpl.n	8011e74 <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011e5c:	f001 0020 	and.w	r0, r1, #32
 8011e60:	4330      	orrs	r0, r6
 8011e62:	d007      	beq.n	8011e74 <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011e64:	2008      	movs	r0, #8
 8011e66:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011e68:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8011e6c:	f040 0008 	orr.w	r0, r0, #8
 8011e70:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011e74:	0516      	lsls	r6, r2, #20
 8011e76:	d50a      	bpl.n	8011e8e <HAL_UART_IRQHandler+0x19a>
 8011e78:	014d      	lsls	r5, r1, #5
 8011e7a:	d508      	bpl.n	8011e8e <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011e7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011e80:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011e82:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8011e86:	f043 0320 	orr.w	r3, r3, #32
 8011e8a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011e8e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	f43f af4d 	beq.w	8011d32 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011e98:	0690      	lsls	r0, r2, #26
 8011e9a:	d501      	bpl.n	8011ea0 <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011e9c:	0689      	lsls	r1, r1, #26
 8011e9e:	d43e      	bmi.n	8011f1e <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 8011ea0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 8011ea4:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011ea6:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011ea8:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011eb0:	431d      	orrs	r5, r3
 8011eb2:	d06e      	beq.n	8011f92 <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 8011eb4:	f7ff fb7e 	bl	80115b4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011eb8:	6823      	ldr	r3, [r4, #0]
 8011eba:	689a      	ldr	r2, [r3, #8]
 8011ebc:	0652      	lsls	r2, r2, #25
 8011ebe:	d52a      	bpl.n	8011f16 <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec0:	f103 0208 	add.w	r2, r3, #8
 8011ec4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ecc:	f103 0008 	add.w	r0, r3, #8
 8011ed0:	e840 2100 	strex	r1, r2, [r0]
 8011ed4:	2900      	cmp	r1, #0
 8011ed6:	d1f3      	bne.n	8011ec0 <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 8011ed8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011eda:	b1e0      	cbz	r0, 8011f16 <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011edc:	4b30      	ldr	r3, [pc, #192]	; (8011fa0 <HAL_UART_IRQHandler+0x2ac>)
 8011ede:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011ee0:	f7f7 f8e2 	bl	80090a8 <HAL_DMA_Abort_IT>
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	f43f af24 	beq.w	8011d32 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011eea:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8011eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011ef0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011ef2:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ef4:	0755      	lsls	r5, r2, #29
 8011ef6:	d5af      	bpl.n	8011e58 <HAL_UART_IRQHandler+0x164>
 8011ef8:	2e00      	cmp	r6, #0
 8011efa:	d1a5      	bne.n	8011e48 <HAL_UART_IRQHandler+0x154>
 8011efc:	e7ac      	b.n	8011e58 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 8011efe:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	f47f af2d 	bne.w	8011d60 <HAL_UART_IRQHandler+0x6c>
 8011f06:	e714      	b.n	8011d32 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011f08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8011f0c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011f0e:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8011f10:	f7ff feee 	bl	8011cf0 <HAL_UARTEx_WakeupCallback>
    return;
 8011f14:	e70d      	b.n	8011d32 <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 8011f16:	4620      	mov	r0, r4
 8011f18:	f7f2 fc0e 	bl	8004738 <HAL_UART_ErrorCallback>
 8011f1c:	e709      	b.n	8011d32 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 8011f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d0bd      	beq.n	8011ea0 <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 8011f24:	4620      	mov	r0, r4
 8011f26:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011f28:	6827      	ldr	r7, [r4, #0]
 8011f2a:	e7b9      	b.n	8011ea0 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011f2c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8011f30:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8011f34:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011f38:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 8011f3a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011f3c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8011f3e:	2900      	cmp	r1, #0
 8011f40:	f43f aef7 	beq.w	8011d32 <HAL_UART_IRQHandler+0x3e>
 8011f44:	2a00      	cmp	r2, #0
 8011f46:	f43f aef4 	beq.w	8011d32 <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f4a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011f4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f52:	e843 2000 	strex	r0, r2, [r3]
 8011f56:	2800      	cmp	r0, #0
 8011f58:	d1f7      	bne.n	8011f4a <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f5a:	f103 0208 	add.w	r2, r3, #8
 8011f5e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f62:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f66:	f103 0508 	add.w	r5, r3, #8
 8011f6a:	e845 2000 	strex	r0, r2, [r5]
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	d1f3      	bne.n	8011f5a <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 8011f72:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8011f74:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8011f76:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f78:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f7a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f7e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f82:	e843 2000 	strex	r0, r2, [r3]
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d1f7      	bne.n	8011f7a <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f7ff fdb4 	bl	8011af8 <HAL_UARTEx_RxEventCallback>
 8011f90:	e6cf      	b.n	8011d32 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 8011f92:	f7f2 fbd1 	bl	8004738 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f96:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8011f9a:	e6ca      	b.n	8011d32 <HAL_UART_IRQHandler+0x3e>
 8011f9c:	04000120 	.word	0x04000120
 8011fa0:	0801192d 	.word	0x0801192d

08011fa4 <UART_SetConfig>:
{
 8011fa4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8011fa6:	6842      	ldr	r2, [r0, #4]
{
 8011fa8:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8011faa:	4bac      	ldr	r3, [pc, #688]	; (801225c <UART_SetConfig+0x2b8>)
 8011fac:	429a      	cmp	r2, r3
 8011fae:	f200 80bb 	bhi.w	8012128 <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8011fb2:	68a3      	ldr	r3, [r4, #8]
 8011fb4:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8011fb8:	d002      	beq.n	8011fc0 <UART_SetConfig+0x1c>
 8011fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011fbe:	d179      	bne.n	80120b4 <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8011fc0:	68e3      	ldr	r3, [r4, #12]
 8011fc2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8011fc6:	d17e      	bne.n	80120c6 <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8011fc8:	6a23      	ldr	r3, [r4, #32]
 8011fca:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8011fce:	f040 8084 	bne.w	80120da <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8011fd2:	6923      	ldr	r3, [r4, #16]
 8011fd4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8011fd8:	d002      	beq.n	8011fe0 <UART_SetConfig+0x3c>
 8011fda:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011fde:	d163      	bne.n	80120a8 <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8011fe0:	6963      	ldr	r3, [r4, #20]
 8011fe2:	f033 020c 	bics.w	r2, r3, #12
 8011fe6:	d146      	bne.n	8012076 <UART_SetConfig+0xd2>
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d044      	beq.n	8012076 <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8011fec:	69a3      	ldr	r3, [r4, #24]
 8011fee:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8011ff2:	d149      	bne.n	8012088 <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8011ff4:	69e0      	ldr	r0, [r4, #28]
 8011ff6:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8011ffa:	d14e      	bne.n	801209a <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011ffc:	6921      	ldr	r1, [r4, #16]
 8011ffe:	68a2      	ldr	r2, [r4, #8]
 8012000:	6823      	ldr	r3, [r4, #0]
 8012002:	430a      	orrs	r2, r1
 8012004:	6961      	ldr	r1, [r4, #20]
 8012006:	681d      	ldr	r5, [r3, #0]
 8012008:	430a      	orrs	r2, r1
 801200a:	4995      	ldr	r1, [pc, #596]	; (8012260 <UART_SetConfig+0x2bc>)
 801200c:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801200e:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012010:	430a      	orrs	r2, r1
 8012012:	4302      	orrs	r2, r0
 8012014:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012016:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012018:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801201a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 801201e:	4329      	orrs	r1, r5
 8012020:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8012022:	6a21      	ldr	r1, [r4, #32]
 8012024:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012026:	6899      	ldr	r1, [r3, #8]
 8012028:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 801202c:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 801202e:	498d      	ldr	r1, [pc, #564]	; (8012264 <UART_SetConfig+0x2c0>)
 8012030:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012032:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012034:	d07e      	beq.n	8012134 <UART_SetConfig+0x190>
 8012036:	4a8c      	ldr	r2, [pc, #560]	; (8012268 <UART_SetConfig+0x2c4>)
 8012038:	4293      	cmp	r3, r2
 801203a:	d054      	beq.n	80120e6 <UART_SetConfig+0x142>
 801203c:	4a8b      	ldr	r2, [pc, #556]	; (801226c <UART_SetConfig+0x2c8>)
 801203e:	4293      	cmp	r3, r2
 8012040:	f000 812a 	beq.w	8012298 <UART_SetConfig+0x2f4>
 8012044:	4a8a      	ldr	r2, [pc, #552]	; (8012270 <UART_SetConfig+0x2cc>)
 8012046:	4293      	cmp	r3, r2
 8012048:	f000 8137 	beq.w	80122ba <UART_SetConfig+0x316>
 801204c:	4a89      	ldr	r2, [pc, #548]	; (8012274 <UART_SetConfig+0x2d0>)
 801204e:	4293      	cmp	r3, r2
 8012050:	f000 809e 	beq.w	8012190 <UART_SetConfig+0x1ec>
 8012054:	4a88      	ldr	r2, [pc, #544]	; (8012278 <UART_SetConfig+0x2d4>)
 8012056:	4293      	cmp	r3, r2
 8012058:	f000 80d1 	beq.w	80121fe <UART_SetConfig+0x25a>
 801205c:	4a87      	ldr	r2, [pc, #540]	; (801227c <UART_SetConfig+0x2d8>)
 801205e:	4293      	cmp	r3, r2
 8012060:	f000 8151 	beq.w	8012306 <UART_SetConfig+0x362>
 8012064:	4a86      	ldr	r2, [pc, #536]	; (8012280 <UART_SetConfig+0x2dc>)
 8012066:	4293      	cmp	r3, r2
 8012068:	f000 8164 	beq.w	8012334 <UART_SetConfig+0x390>
    switch (clocksource)
 801206c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 801206e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8012070:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8012074:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8012076:	f640 3176 	movw	r1, #2934	; 0xb76
 801207a:	4882      	ldr	r0, [pc, #520]	; (8012284 <UART_SetConfig+0x2e0>)
 801207c:	f7f2 f87e 	bl	800417c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8012080:	69a3      	ldr	r3, [r4, #24]
 8012082:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8012086:	d0b5      	beq.n	8011ff4 <UART_SetConfig+0x50>
 8012088:	487e      	ldr	r0, [pc, #504]	; (8012284 <UART_SetConfig+0x2e0>)
 801208a:	f640 3177 	movw	r1, #2935	; 0xb77
 801208e:	f7f2 f875 	bl	800417c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8012092:	69e0      	ldr	r0, [r4, #28]
 8012094:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8012098:	d0b0      	beq.n	8011ffc <UART_SetConfig+0x58>
 801209a:	487a      	ldr	r0, [pc, #488]	; (8012284 <UART_SetConfig+0x2e0>)
 801209c:	f640 3178 	movw	r1, #2936	; 0xb78
 80120a0:	f7f2 f86c 	bl	800417c <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80120a4:	69e0      	ldr	r0, [r4, #28]
 80120a6:	e7a9      	b.n	8011ffc <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80120a8:	f640 3175 	movw	r1, #2933	; 0xb75
 80120ac:	4875      	ldr	r0, [pc, #468]	; (8012284 <UART_SetConfig+0x2e0>)
 80120ae:	f7f2 f865 	bl	800417c <assert_failed>
 80120b2:	e795      	b.n	8011fe0 <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80120b4:	f640 3171 	movw	r1, #2929	; 0xb71
 80120b8:	4872      	ldr	r0, [pc, #456]	; (8012284 <UART_SetConfig+0x2e0>)
 80120ba:	f7f2 f85f 	bl	800417c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80120be:	68e3      	ldr	r3, [r4, #12]
 80120c0:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80120c4:	d080      	beq.n	8011fc8 <UART_SetConfig+0x24>
 80120c6:	f640 3172 	movw	r1, #2930	; 0xb72
 80120ca:	486e      	ldr	r0, [pc, #440]	; (8012284 <UART_SetConfig+0x2e0>)
 80120cc:	f7f2 f856 	bl	800417c <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80120d0:	6a23      	ldr	r3, [r4, #32]
 80120d2:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80120d6:	f43f af7c 	beq.w	8011fd2 <UART_SetConfig+0x2e>
 80120da:	f640 3173 	movw	r1, #2931	; 0xb73
 80120de:	4869      	ldr	r0, [pc, #420]	; (8012284 <UART_SetConfig+0x2e0>)
 80120e0:	f7f2 f84c 	bl	800417c <assert_failed>
 80120e4:	e775      	b.n	8011fd2 <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80120e6:	4b68      	ldr	r3, [pc, #416]	; (8012288 <UART_SetConfig+0x2e4>)
 80120e8:	4a68      	ldr	r2, [pc, #416]	; (801228c <UART_SetConfig+0x2e8>)
 80120ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80120ee:	f003 030c 	and.w	r3, r3, #12
 80120f2:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80120f8:	d033      	beq.n	8012162 <UART_SetConfig+0x1be>
    switch (clocksource)
 80120fa:	2b08      	cmp	r3, #8
 80120fc:	d8b6      	bhi.n	801206c <UART_SetConfig+0xc8>
 80120fe:	a201      	add	r2, pc, #4	; (adr r2, 8012104 <UART_SetConfig+0x160>)
 8012100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012104:	080121bf 	.word	0x080121bf
 8012108:	0801214b 	.word	0x0801214b
 801210c:	08012215 	.word	0x08012215
 8012110:	0801206d 	.word	0x0801206d
 8012114:	080121b3 	.word	0x080121b3
 8012118:	0801206d 	.word	0x0801206d
 801211c:	0801206d 	.word	0x0801206d
 8012120:	0801206d 	.word	0x0801206d
 8012124:	080121d5 	.word	0x080121d5
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8012128:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 801212c:	4855      	ldr	r0, [pc, #340]	; (8012284 <UART_SetConfig+0x2e0>)
 801212e:	f7f2 f825 	bl	800417c <assert_failed>
 8012132:	e73e      	b.n	8011fb2 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012134:	4b54      	ldr	r3, [pc, #336]	; (8012288 <UART_SetConfig+0x2e4>)
 8012136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801213a:	f003 0303 	and.w	r3, r3, #3
 801213e:	3b01      	subs	r3, #1
 8012140:	2b02      	cmp	r3, #2
 8012142:	d90b      	bls.n	801215c <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012144:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012148:	d066      	beq.n	8012218 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 801214a:	f7fb f9d5 	bl	800d4f8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801214e:	2800      	cmp	r0, #0
 8012150:	d142      	bne.n	80121d8 <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 8012152:	2300      	movs	r3, #0
 8012154:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 8012156:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 801215a:	bd38      	pop	{r3, r4, r5, pc}
 801215c:	4a4c      	ldr	r2, [pc, #304]	; (8012290 <UART_SetConfig+0x2ec>)
 801215e:	5cd3      	ldrb	r3, [r2, r3]
 8012160:	e7c8      	b.n	80120f4 <UART_SetConfig+0x150>
    switch (clocksource)
 8012162:	2b08      	cmp	r3, #8
 8012164:	d882      	bhi.n	801206c <UART_SetConfig+0xc8>
 8012166:	a201      	add	r2, pc, #4	; (adr r2, 801216c <UART_SetConfig+0x1c8>)
 8012168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801216c:	08012255 	.word	0x08012255
 8012170:	08012219 	.word	0x08012219
 8012174:	080122fd 	.word	0x080122fd
 8012178:	0801206d 	.word	0x0801206d
 801217c:	0801224f 	.word	0x0801224f
 8012180:	0801206d 	.word	0x0801206d
 8012184:	0801206d 	.word	0x0801206d
 8012188:	0801206d 	.word	0x0801206d
 801218c:	08012301 	.word	0x08012301
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012190:	4b3d      	ldr	r3, [pc, #244]	; (8012288 <UART_SetConfig+0x2e4>)
 8012192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801219a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801219e:	d036      	beq.n	801220e <UART_SetConfig+0x26a>
 80121a0:	d810      	bhi.n	80121c4 <UART_SetConfig+0x220>
 80121a2:	b14b      	cbz	r3, 80121b8 <UART_SetConfig+0x214>
 80121a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80121a8:	f47f af60 	bne.w	801206c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121ac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80121b0:	d04d      	beq.n	801224e <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 80121b2:	f7fb f839 	bl	800d228 <HAL_RCC_GetSysClockFreq>
        break;
 80121b6:	e7ca      	b.n	801214e <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80121bc:	d04a      	beq.n	8012254 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80121be:	f7fb f98b 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
        break;
 80121c2:	e7c4      	b.n	801214e <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80121c8:	f47f af50 	bne.w	801206c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80121d0:	f000 8096 	beq.w	8012300 <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 80121d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80121d8:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80121da:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80121de:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80121e2:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80121e6:	f1a3 0110 	sub.w	r1, r3, #16
 80121ea:	4291      	cmp	r1, r2
 80121ec:	f63f af3e 	bhi.w	801206c <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80121f0:	6822      	ldr	r2, [r4, #0]
 80121f2:	2000      	movs	r0, #0
 80121f4:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80121f6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80121f8:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80121fc:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121fe:	4b22      	ldr	r3, [pc, #136]	; (8012288 <UART_SetConfig+0x2e4>)
 8012200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801220c:	d168      	bne.n	80122e0 <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801220e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012212:	d073      	beq.n	80122fc <UART_SetConfig+0x358>
    switch (clocksource)
 8012214:	481f      	ldr	r0, [pc, #124]	; (8012294 <UART_SetConfig+0x2f0>)
 8012216:	e7df      	b.n	80121d8 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 8012218:	f7fb f96e 	bl	800d4f8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801221c:	2800      	cmp	r0, #0
 801221e:	d098      	beq.n	8012152 <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012220:	0043      	lsls	r3, r0, #1
 8012222:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012224:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012228:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801222c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012230:	f1a3 0210 	sub.w	r2, r3, #16
 8012234:	428a      	cmp	r2, r1
 8012236:	f63f af19 	bhi.w	801206c <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801223a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801223e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8012242:	6821      	ldr	r1, [r4, #0]
 8012244:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012246:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8012248:	4313      	orrs	r3, r2
 801224a:	60cb      	str	r3, [r1, #12]
 801224c:	e70f      	b.n	801206e <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 801224e:	f7fa ffeb 	bl	800d228 <HAL_RCC_GetSysClockFreq>
        break;
 8012252:	e7e3      	b.n	801221c <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012254:	f7fb f940 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
        break;
 8012258:	e7e0      	b.n	801221c <UART_SetConfig+0x278>
 801225a:	bf00      	nop
 801225c:	019bfcc0 	.word	0x019bfcc0
 8012260:	efff69f3 	.word	0xefff69f3
 8012264:	40011000 	.word	0x40011000
 8012268:	40004400 	.word	0x40004400
 801226c:	40004800 	.word	0x40004800
 8012270:	40004c00 	.word	0x40004c00
 8012274:	40005000 	.word	0x40005000
 8012278:	40011400 	.word	0x40011400
 801227c:	40007800 	.word	0x40007800
 8012280:	40007c00 	.word	0x40007c00
 8012284:	0802bfc8 	.word	0x0802bfc8
 8012288:	40023800 	.word	0x40023800
 801228c:	0802c008 	.word	0x0802c008
 8012290:	0802c004 	.word	0x0802c004
 8012294:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012298:	4b32      	ldr	r3, [pc, #200]	; (8012364 <UART_SetConfig+0x3c0>)
 801229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801229e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80122a2:	2b20      	cmp	r3, #32
 80122a4:	d0b3      	beq.n	801220e <UART_SetConfig+0x26a>
 80122a6:	d805      	bhi.n	80122b4 <UART_SetConfig+0x310>
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d085      	beq.n	80121b8 <UART_SetConfig+0x214>
 80122ac:	2b10      	cmp	r3, #16
 80122ae:	f43f af7d 	beq.w	80121ac <UART_SetConfig+0x208>
 80122b2:	e6db      	b.n	801206c <UART_SetConfig+0xc8>
 80122b4:	2b30      	cmp	r3, #48	; 0x30
 80122b6:	d089      	beq.n	80121cc <UART_SetConfig+0x228>
 80122b8:	e6d8      	b.n	801206c <UART_SetConfig+0xc8>
 80122ba:	4b2a      	ldr	r3, [pc, #168]	; (8012364 <UART_SetConfig+0x3c0>)
 80122bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80122c4:	2b80      	cmp	r3, #128	; 0x80
 80122c6:	d0a2      	beq.n	801220e <UART_SetConfig+0x26a>
 80122c8:	d806      	bhi.n	80122d8 <UART_SetConfig+0x334>
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	f43f af74 	beq.w	80121b8 <UART_SetConfig+0x214>
 80122d0:	2b40      	cmp	r3, #64	; 0x40
 80122d2:	f43f af6b 	beq.w	80121ac <UART_SetConfig+0x208>
 80122d6:	e6c9      	b.n	801206c <UART_SetConfig+0xc8>
 80122d8:	2bc0      	cmp	r3, #192	; 0xc0
 80122da:	f43f af77 	beq.w	80121cc <UART_SetConfig+0x228>
 80122de:	e6c5      	b.n	801206c <UART_SetConfig+0xc8>
 80122e0:	d807      	bhi.n	80122f2 <UART_SetConfig+0x34e>
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f43f af2e 	beq.w	8012144 <UART_SetConfig+0x1a0>
 80122e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80122ec:	f43f af5e 	beq.w	80121ac <UART_SetConfig+0x208>
 80122f0:	e6bc      	b.n	801206c <UART_SetConfig+0xc8>
 80122f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80122f6:	f43f af69 	beq.w	80121cc <UART_SetConfig+0x228>
 80122fa:	e6b7      	b.n	801206c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80122fc:	4b1a      	ldr	r3, [pc, #104]	; (8012368 <UART_SetConfig+0x3c4>)
 80122fe:	e790      	b.n	8012222 <UART_SetConfig+0x27e>
    switch (clocksource)
 8012300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012304:	e78d      	b.n	8012222 <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012306:	4b17      	ldr	r3, [pc, #92]	; (8012364 <UART_SetConfig+0x3c0>)
 8012308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801230c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012314:	f43f af7b 	beq.w	801220e <UART_SetConfig+0x26a>
 8012318:	d807      	bhi.n	801232a <UART_SetConfig+0x386>
 801231a:	2b00      	cmp	r3, #0
 801231c:	f43f af4c 	beq.w	80121b8 <UART_SetConfig+0x214>
 8012320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012324:	f43f af42 	beq.w	80121ac <UART_SetConfig+0x208>
 8012328:	e6a0      	b.n	801206c <UART_SetConfig+0xc8>
 801232a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801232e:	f43f af4d 	beq.w	80121cc <UART_SetConfig+0x228>
 8012332:	e69b      	b.n	801206c <UART_SetConfig+0xc8>
 8012334:	4b0b      	ldr	r3, [pc, #44]	; (8012364 <UART_SetConfig+0x3c0>)
 8012336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801233a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801233e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012342:	f43f af64 	beq.w	801220e <UART_SetConfig+0x26a>
 8012346:	d807      	bhi.n	8012358 <UART_SetConfig+0x3b4>
 8012348:	2b00      	cmp	r3, #0
 801234a:	f43f af35 	beq.w	80121b8 <UART_SetConfig+0x214>
 801234e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012352:	f43f af2b 	beq.w	80121ac <UART_SetConfig+0x208>
 8012356:	e689      	b.n	801206c <UART_SetConfig+0xc8>
 8012358:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801235c:	f43f af36 	beq.w	80121cc <UART_SetConfig+0x228>
 8012360:	e684      	b.n	801206c <UART_SetConfig+0xc8>
 8012362:	bf00      	nop
 8012364:	40023800 	.word	0x40023800
 8012368:	01e84800 	.word	0x01e84800

0801236c <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 801236c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801236e:	2bff      	cmp	r3, #255	; 0xff
{
 8012370:	b510      	push	{r4, lr}
 8012372:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012374:	d87b      	bhi.n	801246e <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012376:	07da      	lsls	r2, r3, #31
 8012378:	d50a      	bpl.n	8012390 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 801237a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801237c:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8012380:	f040 808e 	bne.w	80124a0 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012384:	6820      	ldr	r0, [r4, #0]
 8012386:	6842      	ldr	r2, [r0, #4]
 8012388:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801238c:	430a      	orrs	r2, r1
 801238e:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012390:	0798      	lsls	r0, r3, #30
 8012392:	d50a      	bpl.n	80123aa <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8012394:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012396:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 801239a:	f040 8089 	bne.w	80124b0 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801239e:	6820      	ldr	r0, [r4, #0]
 80123a0:	6842      	ldr	r2, [r0, #4]
 80123a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80123a6:	430a      	orrs	r2, r1
 80123a8:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80123aa:	0759      	lsls	r1, r3, #29
 80123ac:	d50a      	bpl.n	80123c4 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80123ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80123b0:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 80123b4:	f040 8084 	bne.w	80124c0 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80123b8:	6820      	ldr	r0, [r4, #0]
 80123ba:	6842      	ldr	r2, [r0, #4]
 80123bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80123c0:	430a      	orrs	r2, r1
 80123c2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80123c4:	071a      	lsls	r2, r3, #28
 80123c6:	d509      	bpl.n	80123dc <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80123c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123ca:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 80123ce:	d17f      	bne.n	80124d0 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80123d0:	6820      	ldr	r0, [r4, #0]
 80123d2:	6842      	ldr	r2, [r0, #4]
 80123d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80123d8:	430a      	orrs	r2, r1
 80123da:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80123dc:	06d8      	lsls	r0, r3, #27
 80123de:	d509      	bpl.n	80123f4 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80123e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80123e2:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 80123e6:	d17b      	bne.n	80124e0 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80123e8:	6820      	ldr	r0, [r4, #0]
 80123ea:	6882      	ldr	r2, [r0, #8]
 80123ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80123f0:	430a      	orrs	r2, r1
 80123f2:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80123f4:	0699      	lsls	r1, r3, #26
 80123f6:	d509      	bpl.n	801240c <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80123f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80123fa:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 80123fe:	d177      	bne.n	80124f0 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012400:	6820      	ldr	r0, [r4, #0]
 8012402:	6882      	ldr	r2, [r0, #8]
 8012404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012408:	430a      	orrs	r2, r1
 801240a:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801240c:	065a      	lsls	r2, r3, #25
 801240e:	d521      	bpl.n	8012454 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8012410:	4b46      	ldr	r3, [pc, #280]	; (801252c <UART_AdvFeatureConfig+0x1c0>)
 8012412:	6822      	ldr	r2, [r4, #0]
 8012414:	4846      	ldr	r0, [pc, #280]	; (8012530 <UART_AdvFeatureConfig+0x1c4>)
 8012416:	4947      	ldr	r1, [pc, #284]	; (8012534 <UART_AdvFeatureConfig+0x1c8>)
 8012418:	429a      	cmp	r2, r3
 801241a:	bf18      	it	ne
 801241c:	4282      	cmpne	r2, r0
 801241e:	bf14      	ite	ne
 8012420:	2301      	movne	r3, #1
 8012422:	2300      	moveq	r3, #0
 8012424:	428a      	cmp	r2, r1
 8012426:	bf0c      	ite	eq
 8012428:	2300      	moveq	r3, #0
 801242a:	f003 0301 	andne.w	r3, r3, #1
 801242e:	b113      	cbz	r3, 8012436 <UART_AdvFeatureConfig+0xca>
 8012430:	4b41      	ldr	r3, [pc, #260]	; (8012538 <UART_AdvFeatureConfig+0x1cc>)
 8012432:	429a      	cmp	r2, r3
 8012434:	d16b      	bne.n	801250e <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8012436:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012438:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 801243c:	d160      	bne.n	8012500 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801243e:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012440:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012444:	684b      	ldr	r3, [r1, #4]
 8012446:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801244a:	ea43 0302 	orr.w	r3, r3, r2
 801244e:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012450:	d014      	beq.n	801247c <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012454:	061b      	lsls	r3, r3, #24
 8012456:	d509      	bpl.n	801246c <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8012458:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801245a:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 801245e:	d118      	bne.n	8012492 <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012460:	6821      	ldr	r1, [r4, #0]
 8012462:	684b      	ldr	r3, [r1, #4]
 8012464:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8012468:	4313      	orrs	r3, r2
 801246a:	604b      	str	r3, [r1, #4]
}
 801246c:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 801246e:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8012472:	4832      	ldr	r0, [pc, #200]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 8012474:	f7f1 fe82 	bl	800417c <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801247a:	e77c      	b.n	8012376 <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 801247c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801247e:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8012482:	d14a      	bne.n	801251a <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012484:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012486:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012488:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 801248c:	4302      	orrs	r2, r0
 801248e:	604a      	str	r2, [r1, #4]
 8012490:	e7e0      	b.n	8012454 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8012492:	f640 4136 	movw	r1, #3126	; 0xc36
 8012496:	4829      	ldr	r0, [pc, #164]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 8012498:	f7f1 fe70 	bl	800417c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801249c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801249e:	e7df      	b.n	8012460 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80124a0:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80124a4:	4825      	ldr	r0, [pc, #148]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 80124a6:	f7f1 fe69 	bl	800417c <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80124aa:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 80124ae:	e769      	b.n	8012384 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80124b0:	f640 4105 	movw	r1, #3077	; 0xc05
 80124b4:	4821      	ldr	r0, [pc, #132]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 80124b6:	f7f1 fe61 	bl	800417c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80124ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80124bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124be:	e76e      	b.n	801239e <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80124c0:	f640 410c 	movw	r1, #3084	; 0xc0c
 80124c4:	481d      	ldr	r0, [pc, #116]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 80124c6:	f7f1 fe59 	bl	800417c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80124ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80124cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124ce:	e773      	b.n	80123b8 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80124d0:	f640 4113 	movw	r1, #3091	; 0xc13
 80124d4:	4819      	ldr	r0, [pc, #100]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 80124d6:	f7f1 fe51 	bl	800417c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80124da:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80124dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124de:	e777      	b.n	80123d0 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80124e0:	f640 411a 	movw	r1, #3098	; 0xc1a
 80124e4:	4815      	ldr	r0, [pc, #84]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 80124e6:	f7f1 fe49 	bl	800417c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80124ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80124ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124ee:	e77b      	b.n	80123e8 <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80124f0:	f640 4121 	movw	r1, #3105	; 0xc21
 80124f4:	4811      	ldr	r0, [pc, #68]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 80124f6:	f7f1 fe41 	bl	800417c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80124fa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80124fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124fe:	e77f      	b.n	8012400 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8012500:	f640 4129 	movw	r1, #3113	; 0xc29
 8012504:	480d      	ldr	r0, [pc, #52]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 8012506:	f7f1 fe39 	bl	800417c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801250a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801250c:	e797      	b.n	801243e <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 801250e:	f640 4128 	movw	r1, #3112	; 0xc28
 8012512:	480a      	ldr	r0, [pc, #40]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 8012514:	f7f1 fe32 	bl	800417c <assert_failed>
 8012518:	e78d      	b.n	8012436 <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 801251a:	f640 412e 	movw	r1, #3118	; 0xc2e
 801251e:	4807      	ldr	r0, [pc, #28]	; (801253c <UART_AdvFeatureConfig+0x1d0>)
 8012520:	f7f1 fe2c 	bl	800417c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012524:	6821      	ldr	r1, [r4, #0]
 8012526:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012528:	e7ac      	b.n	8012484 <UART_AdvFeatureConfig+0x118>
 801252a:	bf00      	nop
 801252c:	40011000 	.word	0x40011000
 8012530:	40004400 	.word	0x40004400
 8012534:	40004800 	.word	0x40004800
 8012538:	40011400 	.word	0x40011400
 801253c:	0802bfc8 	.word	0x0802bfc8

08012540 <UART_WaitOnFlagUntilTimeout>:
{
 8012540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012548:	4681      	mov	r9, r0
 801254a:	460f      	mov	r7, r1
 801254c:	4616      	mov	r6, r2
 801254e:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012550:	6805      	ldr	r5, [r0, #0]
 8012552:	e002      	b.n	801255a <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8012554:	f1b8 3fff 	cmp.w	r8, #4294967295
 8012558:	d10c      	bne.n	8012574 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801255a:	69ec      	ldr	r4, [r5, #28]
 801255c:	ea37 0304 	bics.w	r3, r7, r4
 8012560:	bf0c      	ite	eq
 8012562:	f04f 0c01 	moveq.w	ip, #1
 8012566:	f04f 0c00 	movne.w	ip, #0
 801256a:	45b4      	cmp	ip, r6
 801256c:	d0f2      	beq.n	8012554 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 801256e:	2000      	movs	r0, #0
}
 8012570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012574:	f7f5 fb2a 	bl	8007bcc <HAL_GetTick>
 8012578:	eba0 000a 	sub.w	r0, r0, sl
 801257c:	4540      	cmp	r0, r8
 801257e:	d82d      	bhi.n	80125dc <UART_WaitOnFlagUntilTimeout+0x9c>
 8012580:	f1b8 0f00 	cmp.w	r8, #0
 8012584:	d02a      	beq.n	80125dc <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012586:	f8d9 5000 	ldr.w	r5, [r9]
 801258a:	682b      	ldr	r3, [r5, #0]
 801258c:	462a      	mov	r2, r5
 801258e:	0759      	lsls	r1, r3, #29
 8012590:	d5e3      	bpl.n	801255a <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012592:	69eb      	ldr	r3, [r5, #28]
 8012594:	051b      	lsls	r3, r3, #20
 8012596:	d5e0      	bpl.n	801255a <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801259c:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801259e:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80125a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125a6:	e842 3100 	strex	r1, r3, [r2]
 80125aa:	2900      	cmp	r1, #0
 80125ac:	d1f7      	bne.n	801259e <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ae:	f102 0308 	add.w	r3, r2, #8
 80125b2:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80125b6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ba:	f102 0008 	add.w	r0, r2, #8
 80125be:	e840 3100 	strex	r1, r3, [r0]
 80125c2:	2900      	cmp	r1, #0
 80125c4:	d1f3      	bne.n	80125ae <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 80125c6:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 80125c8:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80125ca:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 80125ce:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80125d2:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80125d6:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 80125da:	e7c9      	b.n	8012570 <UART_WaitOnFlagUntilTimeout+0x30>
 80125dc:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125e0:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80125e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125e8:	e842 3100 	strex	r1, r3, [r2]
 80125ec:	2900      	cmp	r1, #0
 80125ee:	d1f7      	bne.n	80125e0 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125f0:	f102 0308 	add.w	r3, r2, #8
 80125f4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80125f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125fc:	f102 0008 	add.w	r0, r2, #8
 8012600:	e840 3100 	strex	r1, r3, [r0]
 8012604:	2900      	cmp	r1, #0
 8012606:	d1f3      	bne.n	80125f0 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8012608:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 801260a:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 801260c:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8012610:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8012614:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8012618:	e7aa      	b.n	8012570 <UART_WaitOnFlagUntilTimeout+0x30>
 801261a:	bf00      	nop

0801261c <HAL_UART_Transmit>:
{
 801261c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012620:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8012622:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8012624:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8012626:	2b20      	cmp	r3, #32
 8012628:	d14b      	bne.n	80126c2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 801262a:	460d      	mov	r5, r1
 801262c:	2900      	cmp	r1, #0
 801262e:	d044      	beq.n	80126ba <HAL_UART_Transmit+0x9e>
 8012630:	fab2 f982 	clz	r9, r2
 8012634:	4617      	mov	r7, r2
 8012636:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801263a:	2a00      	cmp	r2, #0
 801263c:	d03d      	beq.n	80126ba <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 801263e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8012642:	4604      	mov	r4, r0
 8012644:	2b01      	cmp	r3, #1
 8012646:	d03c      	beq.n	80126c2 <HAL_UART_Transmit+0xa6>
 8012648:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801264a:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 801264e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012652:	2321      	movs	r3, #33	; 0x21
 8012654:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8012656:	f7f5 fab9 	bl	8007bcc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801265a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 801265c:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 801265e:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8012666:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801266a:	d040      	beq.n	80126ee <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 801266c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8012670:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8012672:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8012674:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8012678:	b973      	cbnz	r3, 8012698 <HAL_UART_Transmit+0x7c>
 801267a:	e02a      	b.n	80126d2 <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801267c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8012680:	6823      	ldr	r3, [r4, #0]
 8012682:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8012684:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8012688:	3a01      	subs	r2, #1
 801268a:	b292      	uxth	r2, r2
 801268c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8012690:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8012694:	b292      	uxth	r2, r2
 8012696:	b1e2      	cbz	r2, 80126d2 <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012698:	4643      	mov	r3, r8
 801269a:	2200      	movs	r2, #0
 801269c:	2180      	movs	r1, #128	; 0x80
 801269e:	4620      	mov	r0, r4
 80126a0:	9600      	str	r6, [sp, #0]
 80126a2:	f7ff ff4d 	bl	8012540 <UART_WaitOnFlagUntilTimeout>
 80126a6:	b980      	cbnz	r0, 80126ca <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 80126a8:	2d00      	cmp	r5, #0
 80126aa:	d1e7      	bne.n	801267c <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80126ac:	f839 3b02 	ldrh.w	r3, [r9], #2
 80126b0:	6822      	ldr	r2, [r4, #0]
 80126b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126b6:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80126b8:	e7e4      	b.n	8012684 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 80126ba:	2001      	movs	r0, #1
}
 80126bc:	b003      	add	sp, #12
 80126be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80126c2:	2002      	movs	r0, #2
}
 80126c4:	b003      	add	sp, #12
 80126c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80126ca:	2003      	movs	r0, #3
}
 80126cc:	b003      	add	sp, #12
 80126ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80126d2:	4643      	mov	r3, r8
 80126d4:	2200      	movs	r2, #0
 80126d6:	2140      	movs	r1, #64	; 0x40
 80126d8:	4620      	mov	r0, r4
 80126da:	9600      	str	r6, [sp, #0]
 80126dc:	f7ff ff30 	bl	8012540 <UART_WaitOnFlagUntilTimeout>
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d1f2      	bne.n	80126ca <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 80126e4:	2320      	movs	r3, #32
 80126e6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80126e8:	b003      	add	sp, #12
 80126ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126ee:	6923      	ldr	r3, [r4, #16]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d1bb      	bne.n	801266c <HAL_UART_Transmit+0x50>
 80126f4:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80126f6:	461d      	mov	r5, r3
 80126f8:	e7b8      	b.n	801266c <HAL_UART_Transmit+0x50>
 80126fa:	bf00      	nop

080126fc <UART_CheckIdleState>:
{
 80126fc:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126fe:	2600      	movs	r6, #0
{
 8012700:	4604      	mov	r4, r0
 8012702:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012704:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8012708:	f7f5 fa60 	bl	8007bcc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801270c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 801270e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	0712      	lsls	r2, r2, #28
 8012714:	d40c      	bmi.n	8012730 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	075b      	lsls	r3, r3, #29
 801271a:	d418      	bmi.n	801274e <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801271c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 801271e:	2220      	movs	r2, #32
  return HAL_OK;
 8012720:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8012722:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8012724:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8012728:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801272a:	6623      	str	r3, [r4, #96]	; 0x60
}
 801272c:	b002      	add	sp, #8
 801272e:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012730:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8012734:	4603      	mov	r3, r0
 8012736:	4632      	mov	r2, r6
 8012738:	4620      	mov	r0, r4
 801273a:	9100      	str	r1, [sp, #0]
 801273c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012740:	f7ff fefe 	bl	8012540 <UART_WaitOnFlagUntilTimeout>
 8012744:	b978      	cbnz	r0, 8012766 <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012746:	6823      	ldr	r3, [r4, #0]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	075b      	lsls	r3, r3, #29
 801274c:	d5e6      	bpl.n	801271c <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801274e:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8012752:	462b      	mov	r3, r5
 8012754:	2200      	movs	r2, #0
 8012756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801275a:	9000      	str	r0, [sp, #0]
 801275c:	4620      	mov	r0, r4
 801275e:	f7ff feef 	bl	8012540 <UART_WaitOnFlagUntilTimeout>
 8012762:	2800      	cmp	r0, #0
 8012764:	d0da      	beq.n	801271c <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8012766:	2003      	movs	r0, #3
}
 8012768:	b002      	add	sp, #8
 801276a:	bd70      	pop	{r4, r5, r6, pc}

0801276c <HAL_UART_Init>:
  if (huart == NULL)
 801276c:	2800      	cmp	r0, #0
 801276e:	f000 8099 	beq.w	80128a4 <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012772:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012774:	6802      	ldr	r2, [r0, #0]
{
 8012776:	b510      	push	{r4, lr}
 8012778:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 801277a:	2b00      	cmp	r3, #0
 801277c:	d051      	beq.n	8012822 <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 801277e:	4b4d      	ldr	r3, [pc, #308]	; (80128b4 <HAL_UART_Init+0x148>)
 8012780:	484d      	ldr	r0, [pc, #308]	; (80128b8 <HAL_UART_Init+0x14c>)
 8012782:	494e      	ldr	r1, [pc, #312]	; (80128bc <HAL_UART_Init+0x150>)
 8012784:	429a      	cmp	r2, r3
 8012786:	bf18      	it	ne
 8012788:	4282      	cmpne	r2, r0
 801278a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801278e:	bf14      	ite	ne
 8012790:	2301      	movne	r3, #1
 8012792:	2300      	moveq	r3, #0
 8012794:	428a      	cmp	r2, r1
 8012796:	bf0c      	ite	eq
 8012798:	2300      	moveq	r3, #0
 801279a:	f003 0301 	andne.w	r3, r3, #1
 801279e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80127a2:	4282      	cmp	r2, r0
 80127a4:	bf0c      	ite	eq
 80127a6:	2300      	moveq	r3, #0
 80127a8:	f003 0301 	andne.w	r3, r3, #1
 80127ac:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 80127b0:	428a      	cmp	r2, r1
 80127b2:	bf0c      	ite	eq
 80127b4:	2300      	moveq	r3, #0
 80127b6:	f003 0301 	andne.w	r3, r3, #1
 80127ba:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 80127be:	4282      	cmp	r2, r0
 80127c0:	bf0c      	ite	eq
 80127c2:	2300      	moveq	r3, #0
 80127c4:	f003 0301 	andne.w	r3, r3, #1
 80127c8:	428a      	cmp	r2, r1
 80127ca:	bf0c      	ite	eq
 80127cc:	2300      	moveq	r3, #0
 80127ce:	f003 0301 	andne.w	r3, r3, #1
 80127d2:	b113      	cbz	r3, 80127da <HAL_UART_Init+0x6e>
 80127d4:	4b3a      	ldr	r3, [pc, #232]	; (80128c0 <HAL_UART_Init+0x154>)
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d166      	bne.n	80128a8 <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80127da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d057      	beq.n	8012890 <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 80127e0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80127e2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80127e4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80127e6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80127e8:	6813      	ldr	r3, [r2, #0]
 80127ea:	f023 0301 	bic.w	r3, r3, #1
 80127ee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80127f0:	f7ff fbd8 	bl	8011fa4 <UART_SetConfig>
 80127f4:	2801      	cmp	r0, #1
 80127f6:	d049      	beq.n	801288c <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80127f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d14e      	bne.n	801289c <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80127fe:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8012800:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012802:	685a      	ldr	r2, [r3, #4]
 8012804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012808:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801280a:	689a      	ldr	r2, [r3, #8]
 801280c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012810:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	f042 0201 	orr.w	r2, r2, #1
}
 8012818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 801281c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801281e:	f7ff bf6d 	b.w	80126fc <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8012822:	4b24      	ldr	r3, [pc, #144]	; (80128b4 <HAL_UART_Init+0x148>)
 8012824:	4824      	ldr	r0, [pc, #144]	; (80128b8 <HAL_UART_Init+0x14c>)
 8012826:	4925      	ldr	r1, [pc, #148]	; (80128bc <HAL_UART_Init+0x150>)
 8012828:	429a      	cmp	r2, r3
 801282a:	bf18      	it	ne
 801282c:	4282      	cmpne	r2, r0
 801282e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8012832:	bf14      	ite	ne
 8012834:	2301      	movne	r3, #1
 8012836:	2300      	moveq	r3, #0
 8012838:	428a      	cmp	r2, r1
 801283a:	bf0c      	ite	eq
 801283c:	2300      	moveq	r3, #0
 801283e:	f003 0301 	andne.w	r3, r3, #1
 8012842:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012846:	4282      	cmp	r2, r0
 8012848:	bf0c      	ite	eq
 801284a:	2300      	moveq	r3, #0
 801284c:	f003 0301 	andne.w	r3, r3, #1
 8012850:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8012854:	428a      	cmp	r2, r1
 8012856:	bf0c      	ite	eq
 8012858:	2300      	moveq	r3, #0
 801285a:	f003 0301 	andne.w	r3, r3, #1
 801285e:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8012862:	4282      	cmp	r2, r0
 8012864:	bf0c      	ite	eq
 8012866:	2300      	moveq	r3, #0
 8012868:	f003 0301 	andne.w	r3, r3, #1
 801286c:	428a      	cmp	r2, r1
 801286e:	bf0c      	ite	eq
 8012870:	2300      	moveq	r3, #0
 8012872:	f003 0301 	andne.w	r3, r3, #1
 8012876:	2b00      	cmp	r3, #0
 8012878:	d0af      	beq.n	80127da <HAL_UART_Init+0x6e>
 801287a:	4b11      	ldr	r3, [pc, #68]	; (80128c0 <HAL_UART_Init+0x154>)
 801287c:	429a      	cmp	r2, r3
 801287e:	d0ac      	beq.n	80127da <HAL_UART_Init+0x6e>
 8012880:	f240 1131 	movw	r1, #305	; 0x131
 8012884:	480f      	ldr	r0, [pc, #60]	; (80128c4 <HAL_UART_Init+0x158>)
 8012886:	f7f1 fc79 	bl	800417c <assert_failed>
 801288a:	e7a6      	b.n	80127da <HAL_UART_Init+0x6e>
}
 801288c:	2001      	movs	r0, #1
 801288e:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 8012890:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8012892:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8012896:	f7f3 f9dd 	bl	8005c54 <HAL_UART_MspInit>
 801289a:	e7a1      	b.n	80127e0 <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 801289c:	4620      	mov	r0, r4
 801289e:	f7ff fd65 	bl	801236c <UART_AdvFeatureConfig>
 80128a2:	e7ac      	b.n	80127fe <HAL_UART_Init+0x92>
}
 80128a4:	2001      	movs	r0, #1
 80128a6:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80128a8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80128ac:	4805      	ldr	r0, [pc, #20]	; (80128c4 <HAL_UART_Init+0x158>)
 80128ae:	f7f1 fc65 	bl	800417c <assert_failed>
 80128b2:	e792      	b.n	80127da <HAL_UART_Init+0x6e>
 80128b4:	40011000 	.word	0x40011000
 80128b8:	40004400 	.word	0x40004400
 80128bc:	40004800 	.word	0x40004800
 80128c0:	40007c00 	.word	0x40007c00
 80128c4:	0802bfc8 	.word	0x0802bfc8

080128c8 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 80128c8:	2800      	cmp	r0, #0
 80128ca:	d04a      	beq.n	8012962 <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80128cc:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 80128d0:	b570      	push	{r4, r5, r6, lr}
 80128d2:	460e      	mov	r6, r1
 80128d4:	4604      	mov	r4, r0
 80128d6:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80128d8:	d13d      	bne.n	8012956 <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 80128da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d034      	beq.n	801294a <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 80128e0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80128e2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80128e4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80128e6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80128e8:	6813      	ldr	r3, [r2, #0]
 80128ea:	f023 0301 	bic.w	r3, r3, #1
 80128ee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80128f0:	f7ff fb58 	bl	8011fa4 <UART_SetConfig>
 80128f4:	2801      	cmp	r0, #1
 80128f6:	d026      	beq.n	8012946 <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80128f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128fa:	bb03      	cbnz	r3, 801293e <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80128fc:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80128fe:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012902:	685a      	ldr	r2, [r3, #4]
 8012904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012908:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801290a:	689a      	ldr	r2, [r3, #8]
 801290c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012910:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8012912:	d00d      	beq.n	8012930 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8012914:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012916:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8012918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801291c:	4315      	orrs	r5, r2
 801291e:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	f042 0201 	orr.w	r2, r2, #1
}
 8012926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 801292a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801292c:	f7ff bee6 	b.w	80126fc <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8012930:	6859      	ldr	r1, [r3, #4]
 8012932:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8012936:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 801293a:	605e      	str	r6, [r3, #4]
 801293c:	e7ea      	b.n	8012914 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 801293e:	4620      	mov	r0, r4
 8012940:	f7ff fd14 	bl	801236c <UART_AdvFeatureConfig>
 8012944:	e7da      	b.n	80128fc <HAL_MultiProcessor_Init+0x34>
}
 8012946:	2001      	movs	r0, #1
 8012948:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 801294a:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 801294c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8012950:	f7f3 f980 	bl	8005c54 <HAL_UART_MspInit>
 8012954:	e7c4      	b.n	80128e0 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8012956:	f240 211d 	movw	r1, #541	; 0x21d
 801295a:	4803      	ldr	r0, [pc, #12]	; (8012968 <HAL_MultiProcessor_Init+0xa0>)
 801295c:	f7f1 fc0e 	bl	800417c <assert_failed>
 8012960:	e7bb      	b.n	80128da <HAL_MultiProcessor_Init+0x12>
}
 8012962:	2001      	movs	r0, #1
 8012964:	4770      	bx	lr
 8012966:	bf00      	nop
 8012968:	0802bfc8 	.word	0x0802bfc8

0801296c <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 801296c:	6883      	ldr	r3, [r0, #8]
{
 801296e:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 8012970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8012974:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 8012978:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 801297a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 801297e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8012982:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8012984:	d04f      	beq.n	8012a26 <UART_Start_Receive_IT+0xba>
 8012986:	2b00      	cmp	r3, #0
 8012988:	d043      	beq.n	8012a12 <UART_Start_Receive_IT+0xa6>
 801298a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801298e:	d057      	beq.n	8012a40 <UART_Start_Receive_IT+0xd4>
 8012990:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012994:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012996:	2322      	movs	r3, #34	; 0x22
 8012998:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801299a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801299e:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129a0:	f102 0308 	add.w	r3, r2, #8
 80129a4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80129a8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129ac:	f102 0408 	add.w	r4, r2, #8
 80129b0:	e844 3100 	strex	r1, r3, [r4]
 80129b4:	2900      	cmp	r1, #0
 80129b6:	d1f3      	bne.n	80129a0 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80129b8:	6883      	ldr	r3, [r0, #8]
 80129ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80129be:	d011      	beq.n	80129e4 <UART_Start_Receive_IT+0x78>
 80129c0:	4c23      	ldr	r4, [pc, #140]	; (8012a50 <UART_Start_Receive_IT+0xe4>)
 80129c2:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 80129c4:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 80129c8:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 80129ca:	b18b      	cbz	r3, 80129f0 <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129cc:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80129d0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129d4:	e842 3100 	strex	r1, r3, [r2]
 80129d8:	2900      	cmp	r1, #0
 80129da:	d1f7      	bne.n	80129cc <UART_Start_Receive_IT+0x60>
}
 80129dc:	2000      	movs	r0, #0
 80129de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129e2:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80129e4:	6903      	ldr	r3, [r0, #16]
 80129e6:	bb33      	cbnz	r3, 8012a36 <UART_Start_Receive_IT+0xca>
 80129e8:	491a      	ldr	r1, [pc, #104]	; (8012a54 <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 80129ea:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 80129ee:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129f0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80129f4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129f8:	e842 3100 	strex	r1, r3, [r2]
 80129fc:	2900      	cmp	r1, #0
 80129fe:	d0ed      	beq.n	80129dc <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a00:	e852 3f00 	ldrex	r3, [r2]
 8012a04:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a08:	e842 3100 	strex	r1, r3, [r2]
 8012a0c:	2900      	cmp	r1, #0
 8012a0e:	d1ef      	bne.n	80129f0 <UART_Start_Receive_IT+0x84>
 8012a10:	e7e4      	b.n	80129dc <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 8012a12:	6903      	ldr	r3, [r0, #16]
 8012a14:	b91b      	cbnz	r3, 8012a1e <UART_Start_Receive_IT+0xb2>
 8012a16:	23ff      	movs	r3, #255	; 0xff
 8012a18:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012a1c:	e7ba      	b.n	8012994 <UART_Start_Receive_IT+0x28>
 8012a1e:	237f      	movs	r3, #127	; 0x7f
 8012a20:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012a24:	e7b6      	b.n	8012994 <UART_Start_Receive_IT+0x28>
 8012a26:	6903      	ldr	r3, [r0, #16]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d1f4      	bne.n	8012a16 <UART_Start_Receive_IT+0xaa>
 8012a2c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8012a30:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012a34:	e7ae      	b.n	8012994 <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 8012a36:	4b06      	ldr	r3, [pc, #24]	; (8012a50 <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 8012a38:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8012a3c:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012a3e:	e7c5      	b.n	80129cc <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 8012a40:	6903      	ldr	r3, [r0, #16]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d0eb      	beq.n	8012a1e <UART_Start_Receive_IT+0xb2>
 8012a46:	233f      	movs	r3, #63	; 0x3f
 8012a48:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012a4c:	e7a2      	b.n	8012994 <UART_Start_Receive_IT+0x28>
 8012a4e:	bf00      	nop
 8012a50:	08011afd 	.word	0x08011afd
 8012a54:	08011b9d 	.word	0x08011b9d

08012a58 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8012a58:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8012a5a:	2b20      	cmp	r3, #32
 8012a5c:	d11e      	bne.n	8012a9c <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 8012a5e:	b1d9      	cbz	r1, 8012a98 <HAL_UART_Receive_IT+0x40>
 8012a60:	fab2 f382 	clz	r3, r2
 8012a64:	095b      	lsrs	r3, r3, #5
 8012a66:	b1ba      	cbz	r2, 8012a98 <HAL_UART_Receive_IT+0x40>
{
 8012a68:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8012a6a:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8012a6e:	2c01      	cmp	r4, #1
 8012a70:	d016      	beq.n	8012aa0 <HAL_UART_Receive_IT+0x48>
 8012a72:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012a74:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a76:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8012a78:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012a7c:	6863      	ldr	r3, [r4, #4]
 8012a7e:	021b      	lsls	r3, r3, #8
 8012a80:	d507      	bpl.n	8012a92 <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a82:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012a86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a8a:	e844 3500 	strex	r5, r3, [r4]
 8012a8e:	2d00      	cmp	r5, #0
 8012a90:	d1f7      	bne.n	8012a82 <HAL_UART_Receive_IT+0x2a>
}
 8012a92:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8012a94:	f7ff bf6a 	b.w	801296c <UART_Start_Receive_IT>
      return HAL_ERROR;
 8012a98:	2001      	movs	r0, #1
}
 8012a9a:	4770      	bx	lr
    return HAL_BUSY;
 8012a9c:	2002      	movs	r0, #2
 8012a9e:	4770      	bx	lr
 8012aa0:	2002      	movs	r0, #2
}
 8012aa2:	bc30      	pop	{r4, r5}
 8012aa4:	4770      	bx	lr
 8012aa6:	bf00      	nop

08012aa8 <UART_Start_Receive_DMA>:
{
 8012aa8:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012aaa:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012aac:	2500      	movs	r5, #0
{
 8012aae:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8012ab0:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ab2:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 8012ab6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012aba:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8012abc:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8012abe:	b168      	cbz	r0, 8012adc <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012ac0:	4e1f      	ldr	r6, [pc, #124]	; (8012b40 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012ac2:	4613      	mov	r3, r2
 8012ac4:	460a      	mov	r2, r1
 8012ac6:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012ac8:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012aca:	4e1e      	ldr	r6, [pc, #120]	; (8012b44 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012acc:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 8012ace:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012ad0:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012ad2:	4e1d      	ldr	r6, [pc, #116]	; (8012b48 <UART_Start_Receive_DMA+0xa0>)
 8012ad4:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012ad6:	f7f6 fa43 	bl	8008f60 <HAL_DMA_Start_IT>
 8012ada:	bb40      	cbnz	r0, 8012b2e <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 8012adc:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012ade:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8012ae0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012ae4:	b14b      	cbz	r3, 8012afa <UART_Start_Receive_DMA+0x52>
 8012ae6:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ae8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012af0:	e843 2100 	strex	r1, r2, [r3]
 8012af4:	2900      	cmp	r1, #0
 8012af6:	d1f7      	bne.n	8012ae8 <UART_Start_Receive_DMA+0x40>
 8012af8:	e000      	b.n	8012afc <UART_Start_Receive_DMA+0x54>
 8012afa:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012afc:	f103 0208 	add.w	r2, r3, #8
 8012b00:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b04:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b08:	f103 0008 	add.w	r0, r3, #8
 8012b0c:	e840 2100 	strex	r1, r2, [r0]
 8012b10:	2900      	cmp	r1, #0
 8012b12:	d1f3      	bne.n	8012afc <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b14:	f103 0208 	add.w	r2, r3, #8
 8012b18:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b20:	f103 0108 	add.w	r1, r3, #8
 8012b24:	e841 2000 	strex	r0, r2, [r1]
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	d1f3      	bne.n	8012b14 <UART_Start_Receive_DMA+0x6c>
}
 8012b2c:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012b2e:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8012b30:	2320      	movs	r3, #32
      return HAL_ERROR;
 8012b32:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8012b34:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012b38:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8012b3c:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8012b3e:	bd70      	pop	{r4, r5, r6, pc}
 8012b40:	08011c59 	.word	0x08011c59
 8012b44:	08011c3d 	.word	0x08011c3d
 8012b48:	080118d5 	.word	0x080118d5

08012b4c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8012b4c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8012b4e:	2b20      	cmp	r3, #32
 8012b50:	d11e      	bne.n	8012b90 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 8012b52:	b1d9      	cbz	r1, 8012b8c <HAL_UART_Receive_DMA+0x40>
 8012b54:	fab2 f382 	clz	r3, r2
 8012b58:	095b      	lsrs	r3, r3, #5
 8012b5a:	b1ba      	cbz	r2, 8012b8c <HAL_UART_Receive_DMA+0x40>
{
 8012b5c:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8012b5e:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8012b62:	2c01      	cmp	r4, #1
 8012b64:	d016      	beq.n	8012b94 <HAL_UART_Receive_DMA+0x48>
 8012b66:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012b68:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b6a:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8012b6c:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012b70:	6863      	ldr	r3, [r4, #4]
 8012b72:	021b      	lsls	r3, r3, #8
 8012b74:	d507      	bpl.n	8012b86 <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b76:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b7e:	e844 3500 	strex	r5, r3, [r4]
 8012b82:	2d00      	cmp	r5, #0
 8012b84:	d1f7      	bne.n	8012b76 <HAL_UART_Receive_DMA+0x2a>
}
 8012b86:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012b88:	f7ff bf8e 	b.w	8012aa8 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8012b8c:	2001      	movs	r0, #1
}
 8012b8e:	4770      	bx	lr
    return HAL_BUSY;
 8012b90:	2002      	movs	r0, #2
 8012b92:	4770      	bx	lr
 8012b94:	2002      	movs	r0, #2
}
 8012b96:	bc30      	pop	{r4, r5}
 8012b98:	4770      	bx	lr
 8012b9a:	bf00      	nop

08012b9c <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8012b9c:	2800      	cmp	r0, #0
 8012b9e:	f000 808a 	beq.w	8012cb6 <HAL_RS485Ex_Init+0x11a>
{
 8012ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 8012ba6:	4c47      	ldr	r4, [pc, #284]	; (8012cc4 <HAL_RS485Ex_Init+0x128>)
 8012ba8:	4617      	mov	r7, r2
 8012baa:	461d      	mov	r5, r3
 8012bac:	4a46      	ldr	r2, [pc, #280]	; (8012cc8 <HAL_RS485Ex_Init+0x12c>)
 8012bae:	6803      	ldr	r3, [r0, #0]
 8012bb0:	460e      	mov	r6, r1
 8012bb2:	4680      	mov	r8, r0
 8012bb4:	42a3      	cmp	r3, r4
 8012bb6:	bf18      	it	ne
 8012bb8:	4293      	cmpne	r3, r2
 8012bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012bbe:	bf14      	ite	ne
 8012bc0:	2401      	movne	r4, #1
 8012bc2:	2400      	moveq	r4, #0
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	bf0c      	ite	eq
 8012bc8:	2400      	moveq	r4, #0
 8012bca:	f004 0401 	andne.w	r4, r4, #1
 8012bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	bf0c      	ite	eq
 8012bd6:	2400      	moveq	r4, #0
 8012bd8:	f004 0401 	andne.w	r4, r4, #1
 8012bdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012be0:	4293      	cmp	r3, r2
 8012be2:	bf0c      	ite	eq
 8012be4:	2400      	moveq	r4, #0
 8012be6:	f004 0401 	andne.w	r4, r4, #1
 8012bea:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8012bee:	4293      	cmp	r3, r2
 8012bf0:	bf0c      	ite	eq
 8012bf2:	2400      	moveq	r4, #0
 8012bf4:	f004 0401 	andne.w	r4, r4, #1
 8012bf8:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8012bfc:	4293      	cmp	r3, r2
 8012bfe:	bf0c      	ite	eq
 8012c00:	2400      	moveq	r4, #0
 8012c02:	f004 0401 	andne.w	r4, r4, #1
 8012c06:	b11c      	cbz	r4, 8012c10 <HAL_RS485Ex_Init+0x74>
 8012c08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012c0c:	4293      	cmp	r3, r2
 8012c0e:	d154      	bne.n	8012cba <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8012c10:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 8012c14:	d14a      	bne.n	8012cac <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 8012c16:	2f1f      	cmp	r7, #31
 8012c18:	d843      	bhi.n	8012ca2 <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8012c1a:	2d1f      	cmp	r5, #31
 8012c1c:	d83c      	bhi.n	8012c98 <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 8012c1e:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8012c22:	b39b      	cbz	r3, 8012c8c <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8012c24:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 8012c28:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012c2a:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 8012c2c:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8012c30:	6813      	ldr	r3, [r2, #0]
 8012c32:	f023 0301 	bic.w	r3, r3, #1
 8012c36:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012c38:	f7ff f9b4 	bl	8011fa4 <UART_SetConfig>
 8012c3c:	2801      	cmp	r0, #1
 8012c3e:	d022      	beq.n	8012c86 <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012c40:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8012c44:	b9db      	cbnz	r3, 8012c7e <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012c46:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8012c4a:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012c4c:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012c4e:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8012c50:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012c54:	4d1d      	ldr	r5, [pc, #116]	; (8012ccc <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012c5a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8012c5c:	6899      	ldr	r1, [r3, #8]
 8012c5e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8012c62:	430e      	orrs	r6, r1
 8012c64:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012c66:	681a      	ldr	r2, [r3, #0]
 8012c68:	4015      	ands	r5, r2
 8012c6a:	432f      	orrs	r7, r5
 8012c6c:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8012c6e:	681a      	ldr	r2, [r3, #0]
 8012c70:	f042 0201 	orr.w	r2, r2, #1
}
 8012c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 8012c78:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012c7a:	f7ff bd3f 	b.w	80126fc <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8012c7e:	4640      	mov	r0, r8
 8012c80:	f7ff fb74 	bl	801236c <UART_AdvFeatureConfig>
 8012c84:	e7df      	b.n	8012c46 <HAL_RS485Ex_Init+0xaa>
}
 8012c86:	2001      	movs	r0, #1
 8012c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 8012c8c:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 8012c8e:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8012c92:	f7f2 ffdf 	bl	8005c54 <HAL_UART_MspInit>
 8012c96:	e7c5      	b.n	8012c24 <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8012c98:	21aa      	movs	r1, #170	; 0xaa
 8012c9a:	480d      	ldr	r0, [pc, #52]	; (8012cd0 <HAL_RS485Ex_Init+0x134>)
 8012c9c:	f7f1 fa6e 	bl	800417c <assert_failed>
 8012ca0:	e7bd      	b.n	8012c1e <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 8012ca2:	21a7      	movs	r1, #167	; 0xa7
 8012ca4:	480a      	ldr	r0, [pc, #40]	; (8012cd0 <HAL_RS485Ex_Init+0x134>)
 8012ca6:	f7f1 fa69 	bl	800417c <assert_failed>
 8012caa:	e7b6      	b.n	8012c1a <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8012cac:	21a4      	movs	r1, #164	; 0xa4
 8012cae:	4808      	ldr	r0, [pc, #32]	; (8012cd0 <HAL_RS485Ex_Init+0x134>)
 8012cb0:	f7f1 fa64 	bl	800417c <assert_failed>
 8012cb4:	e7af      	b.n	8012c16 <HAL_RS485Ex_Init+0x7a>
}
 8012cb6:	2001      	movs	r0, #1
 8012cb8:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 8012cba:	21a1      	movs	r1, #161	; 0xa1
 8012cbc:	4804      	ldr	r0, [pc, #16]	; (8012cd0 <HAL_RS485Ex_Init+0x134>)
 8012cbe:	f7f1 fa5d 	bl	800417c <assert_failed>
 8012cc2:	e7a5      	b.n	8012c10 <HAL_RS485Ex_Init+0x74>
 8012cc4:	40011000 	.word	0x40011000
 8012cc8:	40004400 	.word	0x40004400
 8012ccc:	fc00ffff 	.word	0xfc00ffff
 8012cd0:	0802c018 	.word	0x0802c018

08012cd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012cd4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8012cd6:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012cd8:	4a11      	ldr	r2, [pc, #68]	; (8012d20 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 8012cda:	9301      	str	r3, [sp, #4]
 8012cdc:	e002      	b.n	8012ce4 <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012cde:	6903      	ldr	r3, [r0, #16]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	db07      	blt.n	8012cf4 <USB_CoreReset+0x20>
    if (++count > 200000U)
 8012ce4:	9b01      	ldr	r3, [sp, #4]
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	9301      	str	r3, [sp, #4]
 8012cec:	d9f7      	bls.n	8012cde <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 8012cee:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8012cf0:	b002      	add	sp, #8
 8012cf2:	4770      	bx	lr
  count = 0U;
 8012cf4:	2300      	movs	r3, #0
    if (++count > 200000U)
 8012cf6:	4a0a      	ldr	r2, [pc, #40]	; (8012d20 <USB_CoreReset+0x4c>)
  count = 0U;
 8012cf8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012cfa:	6903      	ldr	r3, [r0, #16]
 8012cfc:	f043 0301 	orr.w	r3, r3, #1
 8012d00:	6103      	str	r3, [r0, #16]
 8012d02:	e003      	b.n	8012d0c <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012d04:	6903      	ldr	r3, [r0, #16]
 8012d06:	f013 0301 	ands.w	r3, r3, #1
 8012d0a:	d005      	beq.n	8012d18 <USB_CoreReset+0x44>
    if (++count > 200000U)
 8012d0c:	9b01      	ldr	r3, [sp, #4]
 8012d0e:	3301      	adds	r3, #1
 8012d10:	4293      	cmp	r3, r2
 8012d12:	9301      	str	r3, [sp, #4]
 8012d14:	d9f6      	bls.n	8012d04 <USB_CoreReset+0x30>
 8012d16:	e7ea      	b.n	8012cee <USB_CoreReset+0x1a>
  return HAL_OK;
 8012d18:	4618      	mov	r0, r3
}
 8012d1a:	b002      	add	sp, #8
 8012d1c:	4770      	bx	lr
 8012d1e:	bf00      	nop
 8012d20:	00030d40 	.word	0x00030d40

08012d24 <USB_CoreInit>:
{
 8012d24:	b084      	sub	sp, #16
 8012d26:	b510      	push	{r4, lr}
 8012d28:	f10d 0c0c 	add.w	ip, sp, #12
 8012d2c:	4604      	mov	r4, r0
 8012d2e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012d32:	9b08      	ldr	r3, [sp, #32]
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d122      	bne.n	8012d7e <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012d38:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012d3a:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 8012d3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012d40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8012d44:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012d46:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012d48:	68c2      	ldr	r2, [r0, #12]
 8012d4a:	ea03 0302 	and.w	r3, r3, r2
 8012d4e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012d50:	68c3      	ldr	r3, [r0, #12]
 8012d52:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012d56:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8012d58:	d01c      	beq.n	8012d94 <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	f7ff ffba 	bl	8012cd4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8012d60:	9b06      	ldr	r3, [sp, #24]
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	d107      	bne.n	8012d76 <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012d66:	68a3      	ldr	r3, [r4, #8]
 8012d68:	f043 0306 	orr.w	r3, r3, #6
 8012d6c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012d6e:	68a3      	ldr	r3, [r4, #8]
 8012d70:	f043 0320 	orr.w	r3, r3, #32
 8012d74:	60a3      	str	r3, [r4, #8]
}
 8012d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d7a:	b004      	add	sp, #16
 8012d7c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012d7e:	68c3      	ldr	r3, [r0, #12]
 8012d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d84:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8012d86:	f7ff ffa5 	bl	8012cd4 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012d8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012d90:	63a3      	str	r3, [r4, #56]	; 0x38
 8012d92:	e7e5      	b.n	8012d60 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012d94:	68c3      	ldr	r3, [r0, #12]
 8012d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012d9a:	60c3      	str	r3, [r0, #12]
 8012d9c:	e7dd      	b.n	8012d5a <USB_CoreInit+0x36>
 8012d9e:	bf00      	nop

08012da0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8012da0:	2a02      	cmp	r2, #2
{
 8012da2:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8012da4:	d00b      	beq.n	8012dbe <USB_SetTurnaroundTime+0x1e>
 8012da6:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012daa:	68d9      	ldr	r1, [r3, #12]
}
 8012dac:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012dae:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8012db2:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012db4:	68da      	ldr	r2, [r3, #12]
 8012db6:	ea42 020c 	orr.w	r2, r2, ip
 8012dba:	60da      	str	r2, [r3, #12]
}
 8012dbc:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012dbe:	4a23      	ldr	r2, [pc, #140]	; (8012e4c <USB_SetTurnaroundTime+0xac>)
 8012dc0:	4823      	ldr	r0, [pc, #140]	; (8012e50 <USB_SetTurnaroundTime+0xb0>)
 8012dc2:	440a      	add	r2, r1
 8012dc4:	4282      	cmp	r2, r0
 8012dc6:	d92c      	bls.n	8012e22 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012dc8:	4a22      	ldr	r2, [pc, #136]	; (8012e54 <USB_SetTurnaroundTime+0xb4>)
 8012dca:	4823      	ldr	r0, [pc, #140]	; (8012e58 <USB_SetTurnaroundTime+0xb8>)
 8012dcc:	440a      	add	r2, r1
 8012dce:	4282      	cmp	r2, r0
 8012dd0:	d92a      	bls.n	8012e28 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012dd2:	4a22      	ldr	r2, [pc, #136]	; (8012e5c <USB_SetTurnaroundTime+0xbc>)
 8012dd4:	4822      	ldr	r0, [pc, #136]	; (8012e60 <USB_SetTurnaroundTime+0xc0>)
 8012dd6:	440a      	add	r2, r1
 8012dd8:	4282      	cmp	r2, r0
 8012dda:	d928      	bls.n	8012e2e <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012ddc:	4a21      	ldr	r2, [pc, #132]	; (8012e64 <USB_SetTurnaroundTime+0xc4>)
 8012dde:	4822      	ldr	r0, [pc, #136]	; (8012e68 <USB_SetTurnaroundTime+0xc8>)
 8012de0:	440a      	add	r2, r1
 8012de2:	4282      	cmp	r2, r0
 8012de4:	d326      	bcc.n	8012e34 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012de6:	4a21      	ldr	r2, [pc, #132]	; (8012e6c <USB_SetTurnaroundTime+0xcc>)
 8012de8:	4821      	ldr	r0, [pc, #132]	; (8012e70 <USB_SetTurnaroundTime+0xd0>)
 8012dea:	440a      	add	r2, r1
 8012dec:	4282      	cmp	r2, r0
 8012dee:	d924      	bls.n	8012e3a <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012df0:	4a20      	ldr	r2, [pc, #128]	; (8012e74 <USB_SetTurnaroundTime+0xd4>)
 8012df2:	4821      	ldr	r0, [pc, #132]	; (8012e78 <USB_SetTurnaroundTime+0xd8>)
 8012df4:	440a      	add	r2, r1
 8012df6:	4282      	cmp	r2, r0
 8012df8:	d322      	bcc.n	8012e40 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012dfa:	4a20      	ldr	r2, [pc, #128]	; (8012e7c <USB_SetTurnaroundTime+0xdc>)
 8012dfc:	4820      	ldr	r0, [pc, #128]	; (8012e80 <USB_SetTurnaroundTime+0xe0>)
 8012dfe:	440a      	add	r2, r1
 8012e00:	4282      	cmp	r2, r0
 8012e02:	d3d0      	bcc.n	8012da6 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012e04:	4a1f      	ldr	r2, [pc, #124]	; (8012e84 <USB_SetTurnaroundTime+0xe4>)
 8012e06:	4820      	ldr	r0, [pc, #128]	; (8012e88 <USB_SetTurnaroundTime+0xe8>)
 8012e08:	440a      	add	r2, r1
 8012e0a:	4282      	cmp	r2, r0
 8012e0c:	d31b      	bcc.n	8012e46 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012e0e:	4a1f      	ldr	r2, [pc, #124]	; (8012e8c <USB_SetTurnaroundTime+0xec>)
 8012e10:	481f      	ldr	r0, [pc, #124]	; (8012e90 <USB_SetTurnaroundTime+0xf0>)
 8012e12:	440a      	add	r2, r1
 8012e14:	4282      	cmp	r2, r0
 8012e16:	bf34      	ite	cc
 8012e18:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 8012e1c:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 8012e20:	e7c3      	b.n	8012daa <USB_SetTurnaroundTime+0xa>
 8012e22:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 8012e26:	e7c0      	b.n	8012daa <USB_SetTurnaroundTime+0xa>
 8012e28:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 8012e2c:	e7bd      	b.n	8012daa <USB_SetTurnaroundTime+0xa>
 8012e2e:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8012e32:	e7ba      	b.n	8012daa <USB_SetTurnaroundTime+0xa>
 8012e34:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8012e38:	e7b7      	b.n	8012daa <USB_SetTurnaroundTime+0xa>
 8012e3a:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8012e3e:	e7b4      	b.n	8012daa <USB_SetTurnaroundTime+0xa>
 8012e40:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 8012e44:	e7b1      	b.n	8012daa <USB_SetTurnaroundTime+0xa>
 8012e46:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8012e4a:	e7ae      	b.n	8012daa <USB_SetTurnaroundTime+0xa>
 8012e4c:	ff275340 	.word	0xff275340
 8012e50:	000c34ff 	.word	0x000c34ff
 8012e54:	ff1b1e40 	.word	0xff1b1e40
 8012e58:	000f423f 	.word	0x000f423f
 8012e5c:	ff0bdc00 	.word	0xff0bdc00
 8012e60:	00124f7f 	.word	0x00124f7f
 8012e64:	fef98c80 	.word	0xfef98c80
 8012e68:	0013d620 	.word	0x0013d620
 8012e6c:	fee5b660 	.word	0xfee5b660
 8012e70:	0016e35f 	.word	0x0016e35f
 8012e74:	feced300 	.word	0xfeced300
 8012e78:	001b7740 	.word	0x001b7740
 8012e7c:	feb35bc0 	.word	0xfeb35bc0
 8012e80:	002191c0 	.word	0x002191c0
 8012e84:	fe91ca00 	.word	0xfe91ca00
 8012e88:	00387520 	.word	0x00387520
 8012e8c:	fe5954e0 	.word	0xfe5954e0
 8012e90:	00419ce0 	.word	0x00419ce0

08012e94 <USB_EnableGlobalInt>:
{
 8012e94:	4603      	mov	r3, r0
}
 8012e96:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012e98:	689a      	ldr	r2, [r3, #8]
 8012e9a:	f042 0201 	orr.w	r2, r2, #1
 8012e9e:	609a      	str	r2, [r3, #8]
}
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop

08012ea4 <USB_DisableGlobalInt>:
{
 8012ea4:	4603      	mov	r3, r0
}
 8012ea6:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012ea8:	689a      	ldr	r2, [r3, #8]
 8012eaa:	f022 0201 	bic.w	r2, r2, #1
 8012eae:	609a      	str	r2, [r3, #8]
}
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop

08012eb4 <USB_SetCurrentMode>:
{
 8012eb4:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012eb6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8012eb8:	2901      	cmp	r1, #1
{
 8012eba:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012ebc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012ec0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8012ec2:	d017      	beq.n	8012ef4 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8012ec4:	b9a1      	cbnz	r1, 8012ef0 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012ec6:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8012ec8:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012ece:	60c3      	str	r3, [r0, #12]
 8012ed0:	e001      	b.n	8012ed6 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012ed2:	2c32      	cmp	r4, #50	; 0x32
 8012ed4:	d00c      	beq.n	8012ef0 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8012ed6:	2001      	movs	r0, #1
      ms++;
 8012ed8:	4404      	add	r4, r0
      HAL_Delay(1U);
 8012eda:	f7f4 fe7d 	bl	8007bd8 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8012ede:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012ee0:	07db      	lsls	r3, r3, #31
 8012ee2:	d4f6      	bmi.n	8012ed2 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8012ee4:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8012ee8:	fab0 f080 	clz	r0, r0
 8012eec:	0940      	lsrs	r0, r0, #5
}
 8012eee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8012ef0:	2001      	movs	r0, #1
}
 8012ef2:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012ef4:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8012ef6:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012ef8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012efc:	60c3      	str	r3, [r0, #12]
 8012efe:	e001      	b.n	8012f04 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012f00:	2c32      	cmp	r4, #50	; 0x32
 8012f02:	d0f5      	beq.n	8012ef0 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8012f04:	2001      	movs	r0, #1
      ms++;
 8012f06:	4404      	add	r4, r0
      HAL_Delay(1U);
 8012f08:	f7f4 fe66 	bl	8007bd8 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8012f0c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012f0e:	07da      	lsls	r2, r3, #31
 8012f10:	d5f6      	bpl.n	8012f00 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 8012f12:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8012f16:	fab0 f080 	clz	r0, r0
 8012f1a:	0940      	lsrs	r0, r0, #5
 8012f1c:	e7e7      	b.n	8012eee <USB_SetCurrentMode+0x3a>
 8012f1e:	bf00      	nop

08012f20 <USB_FlushTxFifo>:
{
 8012f20:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8012f22:	2300      	movs	r3, #0
    if (++count > 200000U)
 8012f24:	4a11      	ldr	r2, [pc, #68]	; (8012f6c <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 8012f26:	9301      	str	r3, [sp, #4]
 8012f28:	e002      	b.n	8012f30 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012f2a:	6903      	ldr	r3, [r0, #16]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	db07      	blt.n	8012f40 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8012f30:	9b01      	ldr	r3, [sp, #4]
 8012f32:	3301      	adds	r3, #1
 8012f34:	4293      	cmp	r3, r2
 8012f36:	9301      	str	r3, [sp, #4]
 8012f38:	d9f7      	bls.n	8012f2a <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 8012f3a:	2003      	movs	r0, #3
}
 8012f3c:	b002      	add	sp, #8
 8012f3e:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012f40:	0189      	lsls	r1, r1, #6
  count = 0U;
 8012f42:	2300      	movs	r3, #0
    if (++count > 200000U)
 8012f44:	4a09      	ldr	r2, [pc, #36]	; (8012f6c <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012f46:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8012f4a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012f4c:	6101      	str	r1, [r0, #16]
 8012f4e:	e003      	b.n	8012f58 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012f50:	6903      	ldr	r3, [r0, #16]
 8012f52:	f013 0320 	ands.w	r3, r3, #32
 8012f56:	d005      	beq.n	8012f64 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 8012f58:	9b01      	ldr	r3, [sp, #4]
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	9301      	str	r3, [sp, #4]
 8012f60:	d9f6      	bls.n	8012f50 <USB_FlushTxFifo+0x30>
 8012f62:	e7ea      	b.n	8012f3a <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 8012f64:	4618      	mov	r0, r3
}
 8012f66:	b002      	add	sp, #8
 8012f68:	4770      	bx	lr
 8012f6a:	bf00      	nop
 8012f6c:	00030d40 	.word	0x00030d40

08012f70 <USB_FlushRxFifo>:
{
 8012f70:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8012f72:	2300      	movs	r3, #0
    if (++count > 200000U)
 8012f74:	4a10      	ldr	r2, [pc, #64]	; (8012fb8 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 8012f76:	9301      	str	r3, [sp, #4]
 8012f78:	e002      	b.n	8012f80 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012f7a:	6903      	ldr	r3, [r0, #16]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	db07      	blt.n	8012f90 <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 8012f80:	9b01      	ldr	r3, [sp, #4]
 8012f82:	3301      	adds	r3, #1
 8012f84:	4293      	cmp	r3, r2
 8012f86:	9301      	str	r3, [sp, #4]
 8012f88:	d9f7      	bls.n	8012f7a <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 8012f8a:	2003      	movs	r0, #3
}
 8012f8c:	b002      	add	sp, #8
 8012f8e:	4770      	bx	lr
  count = 0U;
 8012f90:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012f92:	2310      	movs	r3, #16
    if (++count > 200000U)
 8012f94:	4a08      	ldr	r2, [pc, #32]	; (8012fb8 <USB_FlushRxFifo+0x48>)
  count = 0U;
 8012f96:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012f98:	6103      	str	r3, [r0, #16]
 8012f9a:	e003      	b.n	8012fa4 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012f9c:	6903      	ldr	r3, [r0, #16]
 8012f9e:	f013 0310 	ands.w	r3, r3, #16
 8012fa2:	d005      	beq.n	8012fb0 <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 8012fa4:	9b01      	ldr	r3, [sp, #4]
 8012fa6:	3301      	adds	r3, #1
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	9301      	str	r3, [sp, #4]
 8012fac:	d9f6      	bls.n	8012f9c <USB_FlushRxFifo+0x2c>
 8012fae:	e7ec      	b.n	8012f8a <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 8012fb0:	4618      	mov	r0, r3
}
 8012fb2:	b002      	add	sp, #8
 8012fb4:	4770      	bx	lr
 8012fb6:	bf00      	nop
 8012fb8:	00030d40 	.word	0x00030d40

08012fbc <USB_DevInit>:
{
 8012fbc:	b084      	sub	sp, #16
 8012fbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fc2:	ad09      	add	r5, sp, #36	; 0x24
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012fc8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8012fcc:	2300      	movs	r3, #0
 8012fce:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8012fd6:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8012fd8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8012fdc:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8012fde:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8012fe0:	d1f7      	bne.n	8012fd2 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8012fe2:	2e00      	cmp	r6, #0
 8012fe4:	f040 8092 	bne.w	801310c <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012fe8:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8012fec:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8012ff0:	f043 0302 	orr.w	r3, r3, #2
 8012ff4:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012ff6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012ff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012ffc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012ffe:	6823      	ldr	r3, [r4, #0]
 8013000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013004:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013006:	6823      	ldr	r3, [r4, #0]
 8013008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801300c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 801300e:	2300      	movs	r3, #0
 8013010:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801301a:	2b01      	cmp	r3, #1
 801301c:	d07d      	beq.n	801311a <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	f043 0303 	orr.w	r3, r3, #3
 8013024:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013026:	2110      	movs	r1, #16
 8013028:	4620      	mov	r0, r4
 801302a:	f7ff ff79 	bl	8012f20 <USB_FlushTxFifo>
 801302e:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013030:	4620      	mov	r0, r4
 8013032:	f7ff ff9d 	bl	8012f70 <USB_FlushRxFifo>
 8013036:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 801303a:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801303c:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 801303e:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 8013040:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 8013042:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013044:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 8013046:	bf18      	it	ne
 8013048:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801304a:	b1ed      	cbz	r5, 8013088 <USB_DevInit+0xcc>
 801304c:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013050:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013054:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8013058:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801305a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 801305e:	e009      	b.n	8013074 <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8013060:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013064:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013066:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801306a:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801306e:	3320      	adds	r3, #32
 8013070:	4295      	cmp	r5, r2
 8013072:	d02c      	beq.n	80130ce <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013074:	6819      	ldr	r1, [r3, #0]
 8013076:	2900      	cmp	r1, #0
 8013078:	daf2      	bge.n	8013060 <USB_DevInit+0xa4>
      if (i == 0U)
 801307a:	b112      	cbz	r2, 8013082 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801307c:	f8c3 8000 	str.w	r8, [r3]
 8013080:	e7f0      	b.n	8013064 <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013082:	f8c3 9000 	str.w	r9, [r3]
 8013086:	e7ed      	b.n	8013064 <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013088:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 801308a:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801308c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013090:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013092:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8013096:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013098:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 801309a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801309c:	b91b      	cbnz	r3, 80130a6 <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801309e:	69a3      	ldr	r3, [r4, #24]
 80130a0:	f043 0310 	orr.w	r3, r3, #16
 80130a4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80130a6:	69a2      	ldr	r2, [r4, #24]
 80130a8:	4b21      	ldr	r3, [pc, #132]	; (8013130 <USB_DevInit+0x174>)
 80130aa:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 80130ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80130ae:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80130b0:	b11a      	cbz	r2, 80130ba <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80130b2:	69a3      	ldr	r3, [r4, #24]
 80130b4:	f043 0308 	orr.w	r3, r3, #8
 80130b8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80130ba:	2e01      	cmp	r6, #1
 80130bc:	d103      	bne.n	80130c6 <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80130be:	69a2      	ldr	r2, [r4, #24]
 80130c0:	4b1c      	ldr	r3, [pc, #112]	; (8013134 <USB_DevInit+0x178>)
 80130c2:	4313      	orrs	r3, r2
 80130c4:	61a3      	str	r3, [r4, #24]
}
 80130c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130ca:	b004      	add	sp, #16
 80130cc:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80130ce:	2200      	movs	r2, #0
 80130d0:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80130d4:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80130d8:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80130dc:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80130de:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80130e2:	e009      	b.n	80130f8 <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80130e4:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80130e8:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80130ea:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80130ee:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80130f2:	3320      	adds	r3, #32
 80130f4:	4295      	cmp	r5, r2
 80130f6:	d0c7      	beq.n	8013088 <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80130f8:	6819      	ldr	r1, [r3, #0]
 80130fa:	2900      	cmp	r1, #0
 80130fc:	daf2      	bge.n	80130e4 <USB_DevInit+0x128>
      if (i == 0U)
 80130fe:	b112      	cbz	r2, 8013106 <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013100:	f8c3 8000 	str.w	r8, [r3]
 8013104:	e7f0      	b.n	80130e8 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013106:	f8c3 9000 	str.w	r9, [r3]
 801310a:	e7ed      	b.n	80130e8 <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801310c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801310e:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013116:	63a3      	str	r3, [r4, #56]	; 0x38
 8013118:	e779      	b.n	801300e <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 801311a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801311c:	b913      	cbnz	r3, 8013124 <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8013122:	e780      	b.n	8013026 <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	f043 0301 	orr.w	r3, r3, #1
 801312a:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 801312c:	e77b      	b.n	8013026 <USB_DevInit+0x6a>
 801312e:	bf00      	nop
 8013130:	803c3800 	.word	0x803c3800
 8013134:	40000004 	.word	0x40000004

08013138 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013138:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801313c:	f013 0006 	ands.w	r0, r3, #6
 8013140:	d004      	beq.n	801314c <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8013142:	f013 0f02 	tst.w	r3, #2
 8013146:	bf14      	ite	ne
 8013148:	2002      	movne	r0, #2
 801314a:	200f      	moveq	r0, #15
}
 801314c:	4770      	bx	lr
 801314e:	bf00      	nop

08013150 <USB_ActivateEndpoint>:
{
 8013150:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8013152:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013154:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8013156:	2b01      	cmp	r3, #1
 8013158:	d020      	beq.n	801319c <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801315a:	f002 0c0f 	and.w	ip, r2, #15
 801315e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013162:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013166:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801316a:	fa03 f30c 	lsl.w	r3, r3, ip
 801316e:	4323      	orrs	r3, r4
 8013170:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013174:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8013178:	041b      	lsls	r3, r3, #16
 801317a:	d40c      	bmi.n	8013196 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801317c:	688b      	ldr	r3, [r1, #8]
 801317e:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 8013182:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013186:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013188:	4914      	ldr	r1, [pc, #80]	; (80131dc <USB_ActivateEndpoint+0x8c>)
 801318a:	4323      	orrs	r3, r4
 801318c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8013190:	4319      	orrs	r1, r3
 8013192:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8013196:	2000      	movs	r0, #0
 8013198:	bc30      	pop	{r4, r5}
 801319a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801319c:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 80131a0:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80131a4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80131a8:	40ab      	lsls	r3, r5
 80131aa:	69e5      	ldr	r5, [r4, #28]
 80131ac:	432b      	orrs	r3, r5
 80131ae:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80131b0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80131b4:	041c      	lsls	r4, r3, #16
 80131b6:	d4ee      	bmi.n	8013196 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131b8:	688b      	ldr	r3, [r1, #8]
 80131ba:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 80131be:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80131c2:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131c4:	4905      	ldr	r1, [pc, #20]	; (80131dc <USB_ActivateEndpoint+0x8c>)
 80131c6:	432b      	orrs	r3, r5
 80131c8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80131cc:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 80131d0:	4311      	orrs	r1, r2
}
 80131d2:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131d4:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 80131d8:	2000      	movs	r0, #0
 80131da:	4770      	bx	lr
 80131dc:	10008000 	.word	0x10008000

080131e0 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 80131e0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80131e2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80131e4:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80131e6:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80131ea:	d02a      	beq.n	8013242 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131ec:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 80131f0:	2a00      	cmp	r2, #0
 80131f2:	db19      	blt.n	8013228 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80131f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80131f8:	f003 030f 	and.w	r3, r3, #15
 80131fc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8013200:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013204:	4a23      	ldr	r2, [pc, #140]	; (8013294 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013206:	ea21 0103 	bic.w	r1, r1, r3
 801320a:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801320e:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8013212:	ea21 0303 	bic.w	r3, r1, r3
 8013216:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 801321a:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801321c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013220:	401a      	ands	r2, r3
 8013222:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 8013226:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013228:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 801322c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013230:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013234:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013238:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801323c:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8013240:	e7d8      	b.n	80131f4 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013242:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8013246:	2a00      	cmp	r2, #0
 8013248:	da0b      	bge.n	8013262 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801324a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 801324e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013252:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013256:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 801325a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801325e:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013262:	f003 020f 	and.w	r2, r3, #15
 8013266:	2301      	movs	r3, #1
 8013268:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 801326c:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801326e:	4a0a      	ldr	r2, [pc, #40]	; (8013298 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013270:	ea21 0103 	bic.w	r1, r1, r3
 8013274:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013278:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 801327c:	ea21 0303 	bic.w	r3, r1, r3
 8013280:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8013284:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013286:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 801328a:	401a      	ands	r2, r3
 801328c:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8013290:	4770      	bx	lr
 8013292:	bf00      	nop
 8013294:	eff37800 	.word	0xeff37800
 8013298:	ec337800 	.word	0xec337800

0801329c <USB_EPStartXfer>:
{
 801329c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 80132a0:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80132a2:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80132a6:	2b01      	cmp	r3, #1
 80132a8:	d051      	beq.n	801334e <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80132aa:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 80132ae:	4c84      	ldr	r4, [pc, #528]	; (80134c0 <USB_EPStartXfer+0x224>)
 80132b0:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 80132b4:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 80132b8:	402c      	ands	r4, r5
 80132ba:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80132bc:	4c81      	ldr	r4, [pc, #516]	; (80134c4 <USB_EPStartXfer+0x228>)
 80132be:	691d      	ldr	r5, [r3, #16]
 80132c0:	402c      	ands	r4, r5
 80132c2:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 80132c4:	694c      	ldr	r4, [r1, #20]
 80132c6:	b384      	cbz	r4, 801332a <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80132c8:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 80132ca:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80132cc:	4e7e      	ldr	r6, [pc, #504]	; (80134c8 <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80132ce:	442c      	add	r4, r5
 80132d0:	f104 34ff 	add.w	r4, r4, #4294967295
 80132d4:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80132d8:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 80132dc:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80132de:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80132e2:	691d      	ldr	r5, [r3, #16]
 80132e4:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80132e8:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80132ec:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80132ee:	691d      	ldr	r5, [r3, #16]
 80132f0:	ea44 0405 	orr.w	r4, r4, r5
 80132f4:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80132f6:	d025      	beq.n	8013344 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 80132f8:	78cb      	ldrb	r3, [r1, #3]
 80132fa:	2b01      	cmp	r3, #1
 80132fc:	d10c      	bne.n	8013318 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80132fe:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013302:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013306:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 801330a:	bf0c      	ite	eq
 801330c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013310:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013314:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013318:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 801331c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013320:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8013324:	2000      	movs	r0, #0
 8013326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801332a:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 801332c:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801332e:	691d      	ldr	r5, [r3, #16]
 8013330:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8013334:	ea44 0405 	orr.w	r4, r4, r5
 8013338:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801333a:	691c      	ldr	r4, [r3, #16]
 801333c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8013340:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8013342:	d1d9      	bne.n	80132f8 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8013344:	68ca      	ldr	r2, [r1, #12]
 8013346:	2a00      	cmp	r2, #0
 8013348:	d0d6      	beq.n	80132f8 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801334a:	615a      	str	r2, [r3, #20]
 801334c:	e7d4      	b.n	80132f8 <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 801334e:	694d      	ldr	r5, [r1, #20]
 8013350:	2d00      	cmp	r5, #0
 8013352:	d03d      	beq.n	80133d0 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013354:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 8013358:	4e59      	ldr	r6, [pc, #356]	; (80134c0 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801335a:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801335e:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013362:	4f58      	ldr	r7, [pc, #352]	; (80134c4 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013364:	ea08 0606 	and.w	r6, r8, r6
 8013368:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801336c:	eb05 060e 	add.w	r6, r5, lr
 8013370:	3e01      	subs	r6, #1
 8013372:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013376:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 801337a:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801337c:	4e52      	ldr	r6, [pc, #328]	; (80134c8 <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801337e:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013382:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 8013386:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 801338a:	433e      	orrs	r6, r7
 801338c:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013390:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8013394:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8013398:	433e      	orrs	r6, r7
 801339a:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801339e:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80133a2:	f891 e003 	ldrb.w	lr, [r1, #3]
 80133a6:	f1be 0f01 	cmp.w	lr, #1
 80133aa:	d057      	beq.n	801345c <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 80133ac:	2a01      	cmp	r2, #1
 80133ae:	d072      	beq.n	8013496 <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80133b0:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80133b4:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80133b8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80133bc:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80133c0:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80133c4:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80133c8:	4313      	orrs	r3, r2
 80133ca:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 80133ce:	e7a9      	b.n	8013324 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80133d0:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 80133d4:	4e3b      	ldr	r6, [pc, #236]	; (80134c4 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80133d6:	4c3a      	ldr	r4, [pc, #232]	; (80134c0 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 80133d8:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80133da:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 80133de:	ea06 0607 	and.w	r6, r6, r7
 80133e2:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80133e6:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 80133ea:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80133ee:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80133f2:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 80133f6:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80133fa:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80133fe:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8013402:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 8013406:	d03a      	beq.n	801347e <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013408:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 801340c:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013410:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8013414:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8013418:	d184      	bne.n	8013324 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801341a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 801341e:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013422:	6833      	ldr	r3, [r6, #0]
 8013424:	bf0c      	ite	eq
 8013426:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801342a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 801342e:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8013430:	2a00      	cmp	r2, #0
 8013432:	f47f af77 	bne.w	8013324 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 8013436:	b2ad      	uxth	r5, r5
 8013438:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 801343a:	08ad      	lsrs	r5, r5, #2
 801343c:	f43f af72 	beq.w	8013324 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013440:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013442:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 8013446:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 801344a:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 801344e:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8013452:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013454:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8013458:	d1f9      	bne.n	801344e <USB_EPStartXfer+0x1b2>
 801345a:	e763      	b.n	8013324 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801345c:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 801345e:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013460:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013464:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013466:	6933      	ldr	r3, [r6, #16]
 8013468:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801346c:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 801346e:	d017      	beq.n	80134a0 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013470:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8013474:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013478:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 801347c:	e7cd      	b.n	801341a <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 801347e:	690b      	ldr	r3, [r1, #16]
 8013480:	b963      	cbnz	r3, 801349c <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 8013482:	f1be 0f01 	cmp.w	lr, #1
 8013486:	d00e      	beq.n	80134a6 <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013488:	6833      	ldr	r3, [r6, #0]
}
 801348a:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801348c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013490:	6033      	str	r3, [r6, #0]
}
 8013492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8013496:	690b      	ldr	r3, [r1, #16]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d0f5      	beq.n	8013488 <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801349c:	6173      	str	r3, [r6, #20]
 801349e:	e7f0      	b.n	8013482 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 80134a0:	690b      	ldr	r3, [r1, #16]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d1fa      	bne.n	801349c <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80134a6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80134aa:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80134ae:	6833      	ldr	r3, [r6, #0]
 80134b0:	bf0c      	ite	eq
 80134b2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80134b6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80134ba:	6033      	str	r3, [r6, #0]
 80134bc:	e7e4      	b.n	8013488 <USB_EPStartXfer+0x1ec>
 80134be:	bf00      	nop
 80134c0:	fff80000 	.word	0xfff80000
 80134c4:	e007ffff 	.word	0xe007ffff
 80134c8:	1ff80000 	.word	0x1ff80000

080134cc <USB_EP0StartXfer>:
{
 80134cc:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 80134ce:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80134d0:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80134d2:	2b01      	cmp	r3, #1
 80134d4:	d027      	beq.n	8013526 <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80134d6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80134da:	4c3c      	ldr	r4, [pc, #240]	; (80135cc <USB_EP0StartXfer+0x100>)
 80134dc:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 80134e0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80134e4:	402c      	ands	r4, r5
 80134e6:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80134e8:	4c39      	ldr	r4, [pc, #228]	; (80135d0 <USB_EP0StartXfer+0x104>)
 80134ea:	691d      	ldr	r5, [r3, #16]
 80134ec:	402c      	ands	r4, r5
 80134ee:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 80134f0:	694c      	ldr	r4, [r1, #20]
 80134f2:	b9ac      	cbnz	r4, 8013520 <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 80134f4:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80134f6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80134f8:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 80134fc:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80134fe:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013502:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013504:	691d      	ldr	r5, [r3, #16]
 8013506:	ea44 0405 	orr.w	r4, r4, r5
 801350a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 801350c:	d03e      	beq.n	801358c <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801350e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013516:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 801351a:	2000      	movs	r0, #0
 801351c:	bcf0      	pop	{r4, r5, r6, r7}
 801351e:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8013520:	688c      	ldr	r4, [r1, #8]
 8013522:	614c      	str	r4, [r1, #20]
 8013524:	e7e7      	b.n	80134f6 <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013526:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 801352a:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801352c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8013530:	2d00      	cmp	r5, #0
 8013532:	d030      	beq.n	8013596 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013534:	691f      	ldr	r7, [r3, #16]
 8013536:	4e25      	ldr	r6, [pc, #148]	; (80135cc <USB_EP0StartXfer+0x100>)
 8013538:	403e      	ands	r6, r7
 801353a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801353c:	4e24      	ldr	r6, [pc, #144]	; (80135d0 <USB_EP0StartXfer+0x104>)
 801353e:	691f      	ldr	r7, [r3, #16]
 8013540:	403e      	ands	r6, r7
 8013542:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8013544:	688e      	ldr	r6, [r1, #8]
 8013546:	42b5      	cmp	r5, r6
 8013548:	d901      	bls.n	801354e <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 801354a:	4635      	mov	r5, r6
 801354c:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801354e:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013550:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8013554:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013556:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 801355a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801355c:	691e      	ldr	r6, [r3, #16]
 801355e:	ea45 0506 	orr.w	r5, r5, r6
 8013562:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8013564:	d027      	beq.n	80135b6 <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013566:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8013568:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801356a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 801356e:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8013570:	2900      	cmp	r1, #0
 8013572:	d0d2      	beq.n	801351a <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013574:	f004 020f 	and.w	r2, r4, #15
 8013578:	2401      	movs	r4, #1
 801357a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 801357e:	4094      	lsls	r4, r2
 8013580:	431c      	orrs	r4, r3
 8013582:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8013586:	2000      	movs	r0, #0
 8013588:	bcf0      	pop	{r4, r5, r6, r7}
 801358a:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 801358c:	68ca      	ldr	r2, [r1, #12]
 801358e:	2a00      	cmp	r2, #0
 8013590:	d0bd      	beq.n	801350e <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013592:	615a      	str	r2, [r3, #20]
 8013594:	e7bb      	b.n	801350e <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013596:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8013598:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801359a:	4d0d      	ldr	r5, [pc, #52]	; (80135d0 <USB_EP0StartXfer+0x104>)
 801359c:	ea05 0506 	and.w	r5, r5, r6
 80135a0:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80135a2:	691d      	ldr	r5, [r3, #16]
 80135a4:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80135a8:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80135aa:	4d08      	ldr	r5, [pc, #32]	; (80135cc <USB_EP0StartXfer+0x100>)
 80135ac:	691e      	ldr	r6, [r3, #16]
 80135ae:	ea05 0506 	and.w	r5, r5, r6
 80135b2:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80135b4:	d1d7      	bne.n	8013566 <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 80135b6:	690a      	ldr	r2, [r1, #16]
 80135b8:	b102      	cbz	r2, 80135bc <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80135ba:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80135bc:	681a      	ldr	r2, [r3, #0]
}
 80135be:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80135c0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 80135c4:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80135c6:	601a      	str	r2, [r3, #0]
}
 80135c8:	4770      	bx	lr
 80135ca:	bf00      	nop
 80135cc:	fff80000 	.word	0xfff80000
 80135d0:	e007ffff 	.word	0xe007ffff

080135d4 <USB_WritePacket>:
{
 80135d4:	b410      	push	{r4}
 80135d6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 80135da:	b964      	cbnz	r4, 80135f6 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 80135dc:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 80135de:	089b      	lsrs	r3, r3, #2
 80135e0:	d009      	beq.n	80135f6 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80135e2:	3201      	adds	r2, #1
 80135e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80135e8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80135ec:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 80135f0:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80135f2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80135f4:	d1fa      	bne.n	80135ec <USB_WritePacket+0x18>
}
 80135f6:	2000      	movs	r0, #0
 80135f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135fc:	4770      	bx	lr
 80135fe:	bf00      	nop

08013600 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8013600:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8013604:	b570      	push	{r4, r5, r6, lr}
 8013606:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8013608:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 801360c:	d01a      	beq.n	8013644 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801360e:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8013612:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8013614:	2300      	movs	r3, #0
 8013616:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013618:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 801361c:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801361e:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8013622:	d1f8      	bne.n	8013616 <USB_ReadPacket+0x16>
    pDest++;
 8013624:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8013628:	b15e      	cbz	r6, 8013642 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801362a:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 801362e:	4406      	add	r6, r0
 8013630:	2200      	movs	r2, #0
 8013632:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013634:	fa21 f302 	lsr.w	r3, r1, r2
 8013638:	3208      	adds	r2, #8
 801363a:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 801363e:	42b0      	cmp	r0, r6
 8013640:	d1f8      	bne.n	8013634 <USB_ReadPacket+0x34>
}
 8013642:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8013644:	4608      	mov	r0, r1
 8013646:	e7ef      	b.n	8013628 <USB_ReadPacket+0x28>

08013648 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8013648:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801364a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 801364c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801364e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8013652:	d00c      	beq.n	801366e <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013654:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8013658:	b10b      	cbz	r3, 801365e <USB_EPSetStall+0x16>
 801365a:	2a00      	cmp	r2, #0
 801365c:	da14      	bge.n	8013688 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801365e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013662:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013666:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 801366a:	2000      	movs	r0, #0
 801366c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801366e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8013672:	2a00      	cmp	r2, #0
 8013674:	db00      	blt.n	8013678 <USB_EPSetStall+0x30>
 8013676:	b973      	cbnz	r3, 8013696 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013678:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801367c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013680:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8013684:	2000      	movs	r0, #0
 8013686:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013688:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 801368c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013690:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8013694:	e7e3      	b.n	801365e <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013696:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801369a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801369e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80136a2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80136a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80136aa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80136ae:	e7e9      	b.n	8013684 <USB_EPSetStall+0x3c>

080136b0 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80136b0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80136b2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80136b4:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80136b6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80136ba:	d013      	beq.n	80136e4 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80136bc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80136c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80136c4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80136c8:	78cb      	ldrb	r3, [r1, #3]
 80136ca:	3b02      	subs	r3, #2
 80136cc:	2b01      	cmp	r3, #1
 80136ce:	d901      	bls.n	80136d4 <USB_EPClearStall+0x24>
}
 80136d0:	2000      	movs	r0, #0
 80136d2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80136d4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80136d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136dc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80136e0:	2000      	movs	r0, #0
 80136e2:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80136e4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80136e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80136ec:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80136f0:	78cb      	ldrb	r3, [r1, #3]
 80136f2:	3b02      	subs	r3, #2
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d8eb      	bhi.n	80136d0 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80136f8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80136fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013700:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8013704:	2000      	movs	r0, #0
 8013706:	4770      	bx	lr

08013708 <USB_SetDevAddress>:
{
 8013708:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801370a:	0109      	lsls	r1, r1, #4
}
 801370c:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801370e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013712:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013716:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 801371a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801371e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8013722:	4311      	orrs	r1, r2
 8013724:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop

0801372c <USB_DevConnect>:
{
 801372c:	4603      	mov	r3, r0
}
 801372e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013730:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013734:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013738:	f022 0203 	bic.w	r2, r2, #3
 801373c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013740:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013744:	f023 0302 	bic.w	r3, r3, #2
 8013748:	604b      	str	r3, [r1, #4]
}
 801374a:	4770      	bx	lr

0801374c <USB_DevDisconnect>:
{
 801374c:	4603      	mov	r3, r0
}
 801374e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013750:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013754:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013758:	f022 0203 	bic.w	r2, r2, #3
 801375c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013760:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013764:	f043 0302 	orr.w	r3, r3, #2
 8013768:	604b      	str	r3, [r1, #4]
}
 801376a:	4770      	bx	lr

0801376c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 801376c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 801376e:	6980      	ldr	r0, [r0, #24]
}
 8013770:	4010      	ands	r0, r2
 8013772:	4770      	bx	lr

08013774 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8013774:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013778:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 801377c:	4018      	ands	r0, r3
}
 801377e:	0c00      	lsrs	r0, r0, #16
 8013780:	4770      	bx	lr
 8013782:	bf00      	nop

08013784 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8013784:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013788:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 801378c:	4018      	ands	r0, r3
}
 801378e:	b280      	uxth	r0, r0
 8013790:	4770      	bx	lr
 8013792:	bf00      	nop

08013794 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013794:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013798:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801379c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80137a0:	6940      	ldr	r0, [r0, #20]
}
 80137a2:	4010      	ands	r0, r2
 80137a4:	4770      	bx	lr
 80137a6:	bf00      	nop

080137a8 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80137a8:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80137ac:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80137b0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80137b4:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80137b8:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80137bc:	40cb      	lsrs	r3, r1
 80137be:	01db      	lsls	r3, r3, #7
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	4313      	orrs	r3, r2
}
 80137c4:	4018      	ands	r0, r3
 80137c6:	4770      	bx	lr

080137c8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80137c8:	6940      	ldr	r0, [r0, #20]
}
 80137ca:	f000 0001 	and.w	r0, r0, #1
 80137ce:	4770      	bx	lr

080137d0 <USB_ActivateSetup>:
{
 80137d0:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80137d2:	4a09      	ldr	r2, [pc, #36]	; (80137f8 <USB_ActivateSetup+0x28>)
}
 80137d4:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80137d6:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 80137da:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80137dc:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80137e0:	4022      	ands	r2, r4
}
 80137e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80137e6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80137ea:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80137ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80137f2:	604b      	str	r3, [r1, #4]
}
 80137f4:	4770      	bx	lr
 80137f6:	bf00      	nop
 80137f8:	fffff800 	.word	0xfffff800

080137fc <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80137fc:	4b14      	ldr	r3, [pc, #80]	; (8013850 <USB_EP0_OutStart+0x54>)
{
 80137fe:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013800:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013802:	429c      	cmp	r4, r3
 8013804:	d81a      	bhi.n	801383c <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013806:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801380a:	2300      	movs	r3, #0
  if (dma == 1U)
 801380c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801380e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013810:	6903      	ldr	r3, [r0, #16]
 8013812:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013816:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013818:	6903      	ldr	r3, [r0, #16]
 801381a:	f043 0318 	orr.w	r3, r3, #24
 801381e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013820:	6903      	ldr	r3, [r0, #16]
 8013822:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013826:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8013828:	d104      	bne.n	8013834 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801382a:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801382c:	6803      	ldr	r3, [r0, #0]
 801382e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013832:	6003      	str	r3, [r0, #0]
}
 8013834:	2000      	movs	r0, #0
 8013836:	f85d 4b04 	ldr.w	r4, [sp], #4
 801383a:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801383c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013840:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8013844:	2b00      	cmp	r3, #0
 8013846:	dae0      	bge.n	801380a <USB_EP0_OutStart+0xe>
}
 8013848:	2000      	movs	r0, #0
 801384a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801384e:	4770      	bx	lr
 8013850:	4f54300a 	.word	0x4f54300a

08013854 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013854:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8013856:	4903      	ldr	r1, [pc, #12]	; (8013864 <MX_FATFS_Init+0x10>)
 8013858:	4803      	ldr	r0, [pc, #12]	; (8013868 <MX_FATFS_Init+0x14>)
 801385a:	f001 f96f 	bl	8014b3c <FATFS_LinkDriver>
 801385e:	4b03      	ldr	r3, [pc, #12]	; (801386c <MX_FATFS_Init+0x18>)
 8013860:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013862:	bd08      	pop	{r3, pc}
 8013864:	20002ebc 	.word	0x20002ebc
 8013868:	200002e4 	.word	0x200002e4
 801386c:	20002ec0 	.word	0x20002ec0

08013870 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8013870:	4b02      	ldr	r3, [pc, #8]	; (801387c <USER_initialize+0xc>)
 8013872:	2201      	movs	r2, #1
 8013874:	701a      	strb	r2, [r3, #0]
    return Stat;
 8013876:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8013878:	4770      	bx	lr
 801387a:	bf00      	nop
 801387c:	200002e0 	.word	0x200002e0

08013880 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8013880:	2000      	movs	r0, #0
 8013882:	4770      	bx	lr

08013884 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8013884:	2001      	movs	r0, #1
 8013886:	4770      	bx	lr

08013888 <USER_write>:
 8013888:	2000      	movs	r0, #0
 801388a:	4770      	bx	lr

0801388c <USER_status>:
 801388c:	4b02      	ldr	r3, [pc, #8]	; (8013898 <USER_status+0xc>)
 801388e:	2201      	movs	r2, #1
 8013890:	701a      	strb	r2, [r3, #0]
 8013892:	7818      	ldrb	r0, [r3, #0]
 8013894:	4770      	bx	lr
 8013896:	bf00      	nop
 8013898:	200002e0 	.word	0x200002e0

0801389c <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801389c:	2100      	movs	r1, #0
{
 801389e:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 80138a0:	4608      	mov	r0, r1
{
 80138a2:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 80138a4:	f003 fe6e 	bl	8017584 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80138a8:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 80138aa:	4b1f      	ldr	r3, [pc, #124]	; (8013928 <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 80138ac:	491f      	ldr	r1, [pc, #124]	; (801392c <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 80138ae:	4a20      	ldr	r2, [pc, #128]	; (8013930 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80138b0:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 80138b2:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 80138b4:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 80138b6:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80138b8:	481e      	ldr	r0, [pc, #120]	; (8013934 <MX_LWIP_Init+0x98>)
 80138ba:	4d1f      	ldr	r5, [pc, #124]	; (8013938 <MX_LWIP_Init+0x9c>)
 80138bc:	9002      	str	r0, [sp, #8]
 80138be:	481f      	ldr	r0, [pc, #124]	; (801393c <MX_LWIP_Init+0xa0>)
 80138c0:	9001      	str	r0, [sp, #4]
 80138c2:	4628      	mov	r0, r5
 80138c4:	f006 fc0c 	bl	801a0e0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80138c8:	4628      	mov	r0, r5
 80138ca:	f006 fcb7 	bl	801a23c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80138ce:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80138d2:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 80138d4:	075b      	lsls	r3, r3, #29
 80138d6:	d524      	bpl.n	8013922 <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 80138d8:	f006 fcb6 	bl	801a248 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80138dc:	4918      	ldr	r1, [pc, #96]	; (8013940 <MX_LWIP_Init+0xa4>)
 80138de:	4816      	ldr	r0, [pc, #88]	; (8013938 <MX_LWIP_Init+0x9c>)
 80138e0:	f006 fd3c 	bl	801a35c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80138e4:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80138e6:	2101      	movs	r1, #1
 80138e8:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 80138ea:	4e16      	ldr	r6, [pc, #88]	; (8013944 <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80138ec:	4c16      	ldr	r4, [pc, #88]	; (8013948 <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 80138ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80138f2:	f001 fa0d 	bl	8014d10 <osSemaphoreCreate>
 80138f6:	4b15      	ldr	r3, [pc, #84]	; (801394c <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 80138f8:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80138fa:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80138fe:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 8013900:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8013902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013908:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801390c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8013910:	4631      	mov	r1, r6
 8013912:	a807      	add	r0, sp, #28
 8013914:	f001 f944 	bl	8014ba0 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8013918:	4807      	ldr	r0, [pc, #28]	; (8013938 <MX_LWIP_Init+0x9c>)
 801391a:	f00d fc7f 	bl	802121c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801391e:	b00e      	add	sp, #56	; 0x38
 8013920:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 8013922:	f006 fcb3 	bl	801a28c <netif_set_down>
 8013926:	e7d9      	b.n	80138dc <MX_LWIP_Init+0x40>
 8013928:	20002f04 	.word	0x20002f04
 801392c:	20002f08 	.word	0x20002f08
 8013930:	20002f14 	.word	0x20002f14
 8013934:	080174fd 	.word	0x080174fd
 8013938:	20002ec8 	.word	0x20002ec8
 801393c:	08013c4d 	.word	0x08013c4d
 8013940:	08013e2d 	.word	0x08013e2d
 8013944:	20002f0c 	.word	0x20002f0c
 8013948:	08028d28 	.word	0x08028d28
 801394c:	20002ec4 	.word	0x20002ec4

08013950 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013950:	4b2c      	ldr	r3, [pc, #176]	; (8013a04 <low_level_output+0xb4>)
{
 8013952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013956:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 8013958:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 801395a:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801395c:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 801395e:	2900      	cmp	r1, #0
 8013960:	d04d      	beq.n	80139fe <low_level_output+0xae>
  bufferoffset = 0;
 8013962:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013964:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 8013968:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801396a:	6822      	ldr	r2, [r4, #0]
 801396c:	2a00      	cmp	r2, #0
 801396e:	db1b      	blt.n	80139a8 <low_level_output+0x58>
      byteslefttocopy = q->len;
 8013970:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013974:	1995      	adds	r5, r2, r6
 8013976:	454d      	cmp	r5, r9
 8013978:	d93c      	bls.n	80139f4 <low_level_output+0xa4>
      payloadoffset = 0;
 801397a:	2700      	movs	r7, #0
 801397c:	e002      	b.n	8013984 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801397e:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8013980:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013982:	d921      	bls.n	80139c8 <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8013984:	eba9 0a06 	sub.w	sl, r9, r6
 8013988:	f8db 1004 	ldr.w	r1, [fp, #4]
 801398c:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 801398e:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8013990:	4439      	add	r1, r7
 8013992:	4652      	mov	r2, sl
 8013994:	f010 f8e6 	bl	8023b64 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8013998:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801399a:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801399e:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80139a0:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80139a2:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80139a4:	42b3      	cmp	r3, r6
 80139a6:	daea      	bge.n	801397e <low_level_output+0x2e>
        errval = ERR_USE;
 80139a8:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80139ac:	4b15      	ldr	r3, [pc, #84]	; (8013a04 <low_level_output+0xb4>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139b4:	695a      	ldr	r2, [r3, #20]
 80139b6:	0692      	lsls	r2, r2, #26
 80139b8:	d503      	bpl.n	80139c2 <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80139ba:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80139bc:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80139be:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 80139c0:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 80139c2:	b003      	add	sp, #12
 80139c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139c8:	4618      	mov	r0, r3
 80139ca:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80139cc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80139d0:	462a      	mov	r2, r5
 80139d2:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80139d4:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80139d6:	4439      	add	r1, r7
 80139d8:	f010 f8c4 	bl	8023b64 <memcpy>
  for(q = p; q != NULL; q = q->next)
 80139dc:	f8db b000 	ldr.w	fp, [fp]
 80139e0:	9b01      	ldr	r3, [sp, #4]
 80139e2:	f1bb 0f00 	cmp.w	fp, #0
 80139e6:	d1c0      	bne.n	801396a <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 80139e8:	4641      	mov	r1, r8
 80139ea:	4806      	ldr	r0, [pc, #24]	; (8013a04 <low_level_output+0xb4>)
 80139ec:	f7f6 fa1c 	bl	8009e28 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 80139f0:	2000      	movs	r0, #0
 80139f2:	e7db      	b.n	80139ac <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80139f4:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 80139f6:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80139f8:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 80139fa:	4615      	mov	r5, r2
 80139fc:	e7e6      	b.n	80139cc <low_level_output+0x7c>
  uint32_t framelength = 0;
 80139fe:	4688      	mov	r8, r1
 8013a00:	e7f2      	b.n	80139e8 <low_level_output+0x98>
 8013a02:	bf00      	nop
 8013a04:	20005fb8 	.word	0x20005fb8

08013a08 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8013a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a0c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8013b20 <ethernetif_input+0x118>
 8013a10:	b083      	sub	sp, #12
 8013a12:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8013a14:	4b40      	ldr	r3, [pc, #256]	; (8013b18 <ethernetif_input+0x110>)
 8013a16:	f04f 31ff 	mov.w	r1, #4294967295
 8013a1a:	6818      	ldr	r0, [r3, #0]
 8013a1c:	f001 f99e 	bl	8014d5c <osSemaphoreWait>
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d1f7      	bne.n	8013a14 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8013a24:	483d      	ldr	r0, [pc, #244]	; (8013b1c <ethernetif_input+0x114>)
 8013a26:	f00f fb8d 	bl	8023144 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8013a2a:	483d      	ldr	r0, [pc, #244]	; (8013b20 <ethernetif_input+0x118>)
 8013a2c:	f7f6 fa80 	bl	8009f30 <HAL_ETH_GetReceivedFrame_IT>
 8013a30:	4604      	mov	r4, r0
 8013a32:	2800      	cmp	r0, #0
 8013a34:	d168      	bne.n	8013b08 <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 8013a36:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 8013a3a:	bb51      	cbnz	r1, 8013a92 <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 8013a3c:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013a40:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013a44:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013a48:	b140      	cbz	r0, 8013a5c <ethernetif_input+0x54>
 8013a4a:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013a4c:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013a4e:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013a50:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013a54:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013a56:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013a58:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013a5a:	d1f7      	bne.n	8013a4c <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013a5c:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 8013a60:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 8013a66:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013a6a:	695a      	ldr	r2, [r3, #20]
 8013a6c:	0612      	lsls	r2, r2, #24
 8013a6e:	d503      	bpl.n	8013a78 <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8013a70:	2280      	movs	r2, #128	; 0x80
 8013a72:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 8013a74:	2200      	movs	r2, #0
 8013a76:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 8013a78:	f1ba 0f00 	cmp.w	sl, #0
 8013a7c:	d044      	beq.n	8013b08 <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 8013a7e:	9901      	ldr	r1, [sp, #4]
 8013a80:	4650      	mov	r0, sl
 8013a82:	690b      	ldr	r3, [r1, #16]
 8013a84:	4798      	blx	r3
 8013a86:	2800      	cmp	r0, #0
 8013a88:	d142      	bne.n	8013b10 <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8013a8a:	4824      	ldr	r0, [pc, #144]	; (8013b1c <ethernetif_input+0x114>)
 8013a8c:	f00f fb60 	bl	8023150 <sys_mutex_unlock>
      } while(p!=NULL);
 8013a90:	e7c8      	b.n	8013a24 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8013a92:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8013a96:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8013a9a:	f006 fdb7 	bl	801a60c <pbuf_alloc>
  if (p != NULL)
 8013a9e:	4682      	mov	sl, r0
 8013aa0:	2800      	cmp	r0, #0
 8013aa2:	d0cb      	beq.n	8013a3c <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013aa4:	4683      	mov	fp, r0
    bufferoffset = 0;
 8013aa6:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013aa8:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013aac:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 8013ab0:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013ab4:	1854      	adds	r4, r2, r1
 8013ab6:	4544      	cmp	r4, r8
 8013ab8:	d923      	bls.n	8013b02 <ethernetif_input+0xfa>
      payloadoffset = 0;
 8013aba:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013abc:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013ac0:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8013ac4:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013ac8:	4439      	add	r1, r7
 8013aca:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8013acc:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013ace:	f010 f849 	bl	8023b64 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013ad2:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013ad4:	4544      	cmp	r4, r8
        bufferoffset = 0;
 8013ad6:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8013ada:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013adc:	d8ee      	bhi.n	8013abc <ethernetif_input+0xb4>
 8013ade:	4639      	mov	r1, r7
 8013ae0:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013ae2:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013ae6:	4428      	add	r0, r5
 8013ae8:	f010 f83c 	bl	8023b64 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8013aec:	f8db b000 	ldr.w	fp, [fp]
 8013af0:	f1bb 0f00 	cmp.w	fp, #0
 8013af4:	d0a4      	beq.n	8013a40 <ethernetif_input+0x38>
 8013af6:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 8013af8:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013afc:	1854      	adds	r4, r2, r1
 8013afe:	4544      	cmp	r4, r8
 8013b00:	d8db      	bhi.n	8013aba <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013b02:	4439      	add	r1, r7
      payloadoffset = 0;
 8013b04:	2500      	movs	r5, #0
 8013b06:	e7ec      	b.n	8013ae2 <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 8013b08:	4804      	ldr	r0, [pc, #16]	; (8013b1c <ethernetif_input+0x114>)
 8013b0a:	f00f fb21 	bl	8023150 <sys_mutex_unlock>
      } while(p!=NULL);
 8013b0e:	e781      	b.n	8013a14 <ethernetif_input+0xc>
            pbuf_free(p);
 8013b10:	4650      	mov	r0, sl
 8013b12:	f006 ff31 	bl	801a978 <pbuf_free>
 8013b16:	e7b8      	b.n	8013a8a <ethernetif_input+0x82>
 8013b18:	20006000 	.word	0x20006000
 8013b1c:	2001e2c0 	.word	0x2001e2c0
 8013b20:	20005fb8 	.word	0x20005fb8

08013b24 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8013b24:	4b41      	ldr	r3, [pc, #260]	; (8013c2c <HAL_ETH_MspInit+0x108>)
 8013b26:	6802      	ldr	r2, [r0, #0]
{
 8013b28:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8013b2a:	429a      	cmp	r2, r3
{
 8013b2c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013b2e:	f04f 0400 	mov.w	r4, #0
 8013b32:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8013b36:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8013b3a:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8013b3c:	d001      	beq.n	8013b42 <HAL_ETH_MspInit+0x1e>
}
 8013b3e:	b00d      	add	sp, #52	; 0x34
 8013b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8013b42:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b46:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8013b48:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b4a:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 8013b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013b4e:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013b50:	4837      	ldr	r0, [pc, #220]	; (8013c30 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8013b52:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8013b56:	631a      	str	r2, [r3, #48]	; 0x30
 8013b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b5a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8013b5e:	9200      	str	r2, [sp, #0]
 8013b60:	9a00      	ldr	r2, [sp, #0]
 8013b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b64:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013b68:	631a      	str	r2, [r3, #48]	; 0x30
 8013b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b6c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8013b70:	9201      	str	r2, [sp, #4]
 8013b72:	9a01      	ldr	r2, [sp, #4]
 8013b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b76:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013b7a:	631a      	str	r2, [r3, #48]	; 0x30
 8013b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b7e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8013b82:	9202      	str	r2, [sp, #8]
 8013b84:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b88:	f042 0204 	orr.w	r2, r2, #4
 8013b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8013b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b90:	f002 0204 	and.w	r2, r2, #4
 8013b94:	9203      	str	r2, [sp, #12]
 8013b96:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b9a:	f042 0201 	orr.w	r2, r2, #1
 8013b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8013ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ba2:	f002 0201 	and.w	r2, r2, #1
 8013ba6:	9204      	str	r2, [sp, #16]
 8013ba8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013bac:	433a      	orrs	r2, r7
 8013bae:	631a      	str	r2, [r3, #48]	; 0x30
 8013bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013bb2:	403a      	ands	r2, r7
 8013bb4:	9205      	str	r2, [sp, #20]
 8013bb6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8013bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bc2:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013bc8:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bca:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013bce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013bd0:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013bd2:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013bd4:	f7f7 f984 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8013bd8:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013bda:	a907      	add	r1, sp, #28
 8013bdc:	4815      	ldr	r0, [pc, #84]	; (8013c34 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8013bde:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013be0:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013be4:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013be8:	f7f7 f97a 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8013bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8013bf0:	a907      	add	r1, sp, #28
 8013bf2:	4811      	ldr	r0, [pc, #68]	; (8013c38 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8013bf4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bf6:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013bfa:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8013bfe:	f7f7 f96f 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8013c02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013c06:	a907      	add	r1, sp, #28
 8013c08:	480c      	ldr	r0, [pc, #48]	; (8013c3c <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8013c0a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c0c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013c0e:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c10:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013c14:	f7f7 f964 	bl	800aee0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8013c18:	4622      	mov	r2, r4
 8013c1a:	2106      	movs	r1, #6
 8013c1c:	203d      	movs	r0, #61	; 0x3d
 8013c1e:	f7f4 fc2d 	bl	800847c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8013c22:	203d      	movs	r0, #61	; 0x3d
 8013c24:	f7f4 fc74 	bl	8008510 <HAL_NVIC_EnableIRQ>
}
 8013c28:	b00d      	add	sp, #52	; 0x34
 8013c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c2c:	40028000 	.word	0x40028000
 8013c30:	40020800 	.word	0x40020800
 8013c34:	40020000 	.word	0x40020000
 8013c38:	40020400 	.word	0x40020400
 8013c3c:	40021800 	.word	0x40021800

08013c40 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8013c40:	4b01      	ldr	r3, [pc, #4]	; (8013c48 <HAL_ETH_RxCpltCallback+0x8>)
 8013c42:	6818      	ldr	r0, [r3, #0]
 8013c44:	f001 b8b6 	b.w	8014db4 <osSemaphoreRelease>
 8013c48:	20006000 	.word	0x20006000

08013c4c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8013c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013c4e:	4604      	mov	r4, r0
{
 8013c50:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013c52:	2800      	cmp	r0, #0
 8013c54:	f000 809e 	beq.w	8013d94 <ethernetif_init+0x148>
  heth.Instance = ETH;
 8013c58:	4d52      	ldr	r5, [pc, #328]	; (8013da4 <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 8013c5a:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8013c5c:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8013c60:	4b51      	ldr	r3, [pc, #324]	; (8013da8 <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 8013c62:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 8013c64:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 8013c66:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 8013c6a:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8013c6e:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 8013c70:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 8013c72:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 8013c74:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8013c78:	494c      	ldr	r1, [pc, #304]	; (8013dac <ethernetif_init+0x160>)
  heth.Instance = ETH;
 8013c7a:	4a4d      	ldr	r2, [pc, #308]	; (8013db0 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 8013c7c:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 8013c7e:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8013c80:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8013c82:	494c      	ldr	r1, [pc, #304]	; (8013db4 <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 8013c84:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8013c88:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 8013c8a:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013c8c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 8013c90:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8013c94:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8013c98:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013c9c:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8013c9e:	4042      	eors	r2, r0
 8013ca0:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 8013ca4:	404a      	eors	r2, r1
 8013ca6:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8013caa:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8013cae:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8013cb2:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 8013cb6:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8013cba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8013cbe:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8013cc0:	404b      	eors	r3, r1
 8013cc2:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8013cc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013cca:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 8013cce:	ab01      	add	r3, sp, #4
 8013cd0:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8013cd2:	f7f6 fa51 	bl	800a178 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8013cd6:	b928      	cbnz	r0, 8013ce4 <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8013cd8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8013cdc:	f043 0304 	orr.w	r3, r3, #4
 8013ce0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8013ce4:	2304      	movs	r3, #4
 8013ce6:	4a34      	ldr	r2, [pc, #208]	; (8013db8 <ethernetif_init+0x16c>)
 8013ce8:	4934      	ldr	r1, [pc, #208]	; (8013dbc <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 8013cea:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8013cec:	482d      	ldr	r0, [pc, #180]	; (8013da4 <ethernetif_init+0x158>)
 8013cee:	f7f6 f817 	bl	8009d20 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8013cf2:	2304      	movs	r3, #4
 8013cf4:	4a32      	ldr	r2, [pc, #200]	; (8013dc0 <ethernetif_init+0x174>)
 8013cf6:	4933      	ldr	r1, [pc, #204]	; (8013dc4 <ethernetif_init+0x178>)
 8013cf8:	482a      	ldr	r0, [pc, #168]	; (8013da4 <ethernetif_init+0x158>)
 8013cfa:	f7f6 f857 	bl	8009dac <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8013cfe:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8013d00:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8013d02:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 8013d06:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8013d0a:	4e2f      	ldr	r6, [pc, #188]	; (8013dc8 <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8013d0c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8013d10:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8013d14:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8013d16:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8013d18:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8013d1c:	7858      	ldrb	r0, [r3, #1]
 8013d1e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8013d22:	7898      	ldrb	r0, [r3, #2]
 8013d24:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8013d28:	78d8      	ldrb	r0, [r3, #3]
 8013d2a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8013d2e:	7918      	ldrb	r0, [r3, #4]
 8013d30:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8013d34:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8013d36:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 8013d38:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8013d3a:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8013d3c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8013d40:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 8013d44:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8013d48:	f000 ffe2 	bl	8014d10 <osSemaphoreCreate>
 8013d4c:	4b1f      	ldr	r3, [pc, #124]	; (8013dcc <ethernetif_init+0x180>)
 8013d4e:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8013d50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013d54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013d58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8013d5c:	4621      	mov	r1, r4
 8013d5e:	a805      	add	r0, sp, #20
 8013d60:	f000 ff1e 	bl	8014ba0 <osThreadCreate>
  HAL_ETH_Start(&heth);
 8013d64:	480f      	ldr	r0, [pc, #60]	; (8013da4 <ethernetif_init+0x158>)
 8013d66:	f7f6 fb5d 	bl	800a424 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8013d6a:	466a      	mov	r2, sp
 8013d6c:	211d      	movs	r1, #29
 8013d6e:	480d      	ldr	r0, [pc, #52]	; (8013da4 <ethernetif_init+0x158>)
 8013d70:	f7f6 f970 	bl	800a054 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8013d74:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8013d76:	211d      	movs	r1, #29
 8013d78:	480a      	ldr	r0, [pc, #40]	; (8013da4 <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 8013d7a:	f042 020b 	orr.w	r2, r2, #11
 8013d7e:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8013d80:	f7f6 f9b2 	bl	800a0e8 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8013d84:	466a      	mov	r2, sp
 8013d86:	211d      	movs	r1, #29
 8013d88:	4806      	ldr	r0, [pc, #24]	; (8013da4 <ethernetif_init+0x158>)
 8013d8a:	f7f6 f963 	bl	800a054 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8013d8e:	4638      	mov	r0, r7
 8013d90:	b00d      	add	sp, #52	; 0x34
 8013d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013d94:	4b0e      	ldr	r3, [pc, #56]	; (8013dd0 <ethernetif_init+0x184>)
 8013d96:	f240 223a 	movw	r2, #570	; 0x23a
 8013d9a:	490e      	ldr	r1, [pc, #56]	; (8013dd4 <ethernetif_init+0x188>)
 8013d9c:	480e      	ldr	r0, [pc, #56]	; (8013dd8 <ethernetif_init+0x18c>)
 8013d9e:	f010 fea5 	bl	8024aec <iprintf>
 8013da2:	e759      	b.n	8013c58 <ethernetif_init+0xc>
 8013da4:	20005fb8 	.word	0x20005fb8
 8013da8:	1ff0f000 	.word	0x1ff0f000
 8013dac:	08021d9d 	.word	0x08021d9d
 8013db0:	40028000 	.word	0x40028000
 8013db4:	08013951 	.word	0x08013951
 8013db8:	200047e8 	.word	0x200047e8
 8013dbc:	20002f98 	.word	0x20002f98
 8013dc0:	20003018 	.word	0x20003018
 8013dc4:	20002f18 	.word	0x20002f18
 8013dc8:	08028d44 	.word	0x08028d44
 8013dcc:	20006000 	.word	0x20006000
 8013dd0:	0802c064 	.word	0x0802c064
 8013dd4:	0802c080 	.word	0x0802c080
 8013dd8:	0802b818 	.word	0x0802b818

08013ddc <sys_now>:
 8013ddc:	f7f3 bef6 	b.w	8007bcc <HAL_GetTick>

08013de0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8013de0:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 8013de2:	2300      	movs	r3, #0
{
 8013de4:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8013de6:	4d0f      	ldr	r5, [pc, #60]	; (8013e24 <ethernetif_set_link+0x44>)
{
 8013de8:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 8013dea:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 8013dec:	e003      	b.n	8013df6 <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8013dee:	b1b3      	cbz	r3, 8013e1e <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8013df0:	20c8      	movs	r0, #200	; 0xc8
 8013df2:	f000 ff07 	bl	8014c04 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8013df6:	aa01      	add	r2, sp, #4
 8013df8:	2101      	movs	r1, #1
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	f7f6 f92a 	bl	800a054 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8013e00:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 8013e02:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8013e04:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 8013e08:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8013e0c:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 8013e0e:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8013e10:	d4ed      	bmi.n	8013dee <ethernetif_set_link+0xe>
 8013e12:	b113      	cbz	r3, 8013e1a <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 8013e14:	f006 fa62 	bl	801a2dc <netif_set_link_up>
 8013e18:	e7ea      	b.n	8013df0 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8013e1a:	0753      	lsls	r3, r2, #29
 8013e1c:	d5e8      	bpl.n	8013df0 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 8013e1e:	f006 fa83 	bl	801a328 <netif_set_link_down>
 8013e22:	e7e5      	b.n	8013df0 <ethernetif_set_link+0x10>
 8013e24:	20005fb8 	.word	0x20005fb8

08013e28 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop

08013e2c <ethernetif_update_config>:
{
 8013e2c:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 8013e2e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8013e32:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 8013e34:	2100      	movs	r1, #0
{
 8013e36:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8013e38:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8013e3a:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8013e3c:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8013e3e:	d538      	bpl.n	8013eb2 <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8013e40:	4c32      	ldr	r4, [pc, #200]	; (8013f0c <ethernetif_update_config+0xe0>)
 8013e42:	6863      	ldr	r3, [r4, #4]
 8013e44:	b9e3      	cbnz	r3, 8013e80 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8013e46:	68a3      	ldr	r3, [r4, #8]
 8013e48:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8013e4c:	d140      	bne.n	8013ed0 <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8013e4e:	68e2      	ldr	r2, [r4, #12]
 8013e50:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8013e54:	d135      	bne.n	8013ec2 <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8013e56:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8013e58:	08d2      	lsrs	r2, r2, #3
 8013e5a:	2100      	movs	r1, #0
 8013e5c:	482b      	ldr	r0, [pc, #172]	; (8013f0c <ethernetif_update_config+0xe0>)
 8013e5e:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8013e62:	b292      	uxth	r2, r2
 8013e64:	f7f6 f940 	bl	800a0e8 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8013e68:	2100      	movs	r1, #0
 8013e6a:	4828      	ldr	r0, [pc, #160]	; (8013f0c <ethernetif_update_config+0xe0>)
 8013e6c:	f7f6 fb74 	bl	800a558 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8013e70:	4826      	ldr	r0, [pc, #152]	; (8013f0c <ethernetif_update_config+0xe0>)
 8013e72:	f7f6 fad7 	bl	800a424 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8013e76:	4628      	mov	r0, r5
 8013e78:	f7ff ffd6 	bl	8013e28 <ethernetif_notify_conn_changed>
}
 8013e7c:	b003      	add	sp, #12
 8013e7e:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8013e80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013e84:	4620      	mov	r0, r4
 8013e86:	f7f6 f92f 	bl	800a0e8 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8013e8a:	f7f3 fe9f 	bl	8007bcc <HAL_GetTick>
 8013e8e:	9000      	str	r0, [sp, #0]
 8013e90:	e002      	b.n	8013e98 <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8013e92:	9b01      	ldr	r3, [sp, #4]
 8013e94:	069a      	lsls	r2, r3, #26
 8013e96:	d425      	bmi.n	8013ee4 <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8013e98:	aa01      	add	r2, sp, #4
 8013e9a:	2101      	movs	r1, #1
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	f7f6 f8d9 	bl	800a054 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8013ea2:	f7f3 fe93 	bl	8007bcc <HAL_GetTick>
 8013ea6:	9b00      	ldr	r3, [sp, #0]
 8013ea8:	1ac3      	subs	r3, r0, r3
 8013eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013eae:	d9f0      	bls.n	8013e92 <ethernetif_update_config+0x66>
 8013eb0:	e7c9      	b.n	8013e46 <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 8013eb2:	4816      	ldr	r0, [pc, #88]	; (8013f0c <ethernetif_update_config+0xe0>)
 8013eb4:	f7f6 fb02 	bl	800a4bc <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 8013eb8:	4628      	mov	r0, r5
 8013eba:	f7ff ffb5 	bl	8013e28 <ethernetif_notify_conn_changed>
}
 8013ebe:	b003      	add	sp, #12
 8013ec0:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8013ec2:	f240 21e3 	movw	r1, #739	; 0x2e3
 8013ec6:	4812      	ldr	r0, [pc, #72]	; (8013f10 <ethernetif_update_config+0xe4>)
 8013ec8:	f7f0 f958 	bl	800417c <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8013ecc:	68e2      	ldr	r2, [r4, #12]
 8013ece:	e7c2      	b.n	8013e56 <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8013ed0:	f240 21e2 	movw	r1, #738	; 0x2e2
 8013ed4:	480e      	ldr	r0, [pc, #56]	; (8013f10 <ethernetif_update_config+0xe4>)
 8013ed6:	f7f0 f951 	bl	800417c <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8013eda:	68e2      	ldr	r2, [r4, #12]
 8013edc:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8013ee0:	d0b9      	beq.n	8013e56 <ethernetif_update_config+0x2a>
 8013ee2:	e7ee      	b.n	8013ec2 <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8013ee4:	aa01      	add	r2, sp, #4
 8013ee6:	2110      	movs	r1, #16
 8013ee8:	4808      	ldr	r0, [pc, #32]	; (8013f0c <ethernetif_update_config+0xe0>)
 8013eea:	f7f6 f8b3 	bl	800a054 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8013eee:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8013ef0:	f013 0204 	ands.w	r2, r3, #4
 8013ef4:	bf18      	it	ne
 8013ef6:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 8013efa:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8013efc:	bf4c      	ite	mi
 8013efe:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8013f00:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8013f04:	60e2      	str	r2, [r4, #12]
 8013f06:	60a3      	str	r3, [r4, #8]
 8013f08:	e7ae      	b.n	8013e68 <ethernetif_update_config+0x3c>
 8013f0a:	bf00      	nop
 8013f0c:	20005fb8 	.word	0x20005fb8
 8013f10:	0802c064 	.word	0x0802c064

08013f14 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013f14:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8013f18:	b183      	cbz	r3, 8013f3c <USBD_CDC_EP0_RxReady+0x28>
{
 8013f1a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013f1c:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013f20:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8013f24:	28ff      	cmp	r0, #255	; 0xff
 8013f26:	d007      	beq.n	8013f38 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013f28:	689b      	ldr	r3, [r3, #8]
 8013f2a:	4621      	mov	r1, r4
 8013f2c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8013f30:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8013f32:	23ff      	movs	r3, #255	; 0xff
 8013f34:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8013f38:	2000      	movs	r0, #0
 8013f3a:	bd10      	pop	{r4, pc}
 8013f3c:	2000      	movs	r0, #0
 8013f3e:	4770      	bx	lr

08013f40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013f40:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013f42:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 8013f44:	4801      	ldr	r0, [pc, #4]	; (8013f4c <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013f46:	801a      	strh	r2, [r3, #0]
}
 8013f48:	4770      	bx	lr
 8013f4a:	bf00      	nop
 8013f4c:	20000330 	.word	0x20000330

08013f50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013f50:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013f52:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 8013f54:	4801      	ldr	r0, [pc, #4]	; (8013f5c <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013f56:	801a      	strh	r2, [r3, #0]
}
 8013f58:	4770      	bx	lr
 8013f5a:	bf00      	nop
 8013f5c:	20000374 	.word	0x20000374

08013f60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013f60:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013f62:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8013f64:	4801      	ldr	r0, [pc, #4]	; (8013f6c <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013f66:	801a      	strh	r2, [r3, #0]
}
 8013f68:	4770      	bx	lr
 8013f6a:	bf00      	nop
 8013f6c:	200003c4 	.word	0x200003c4

08013f70 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013f70:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013f72:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8013f74:	4801      	ldr	r0, [pc, #4]	; (8013f7c <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013f76:	801a      	strh	r2, [r3, #0]
}
 8013f78:	4770      	bx	lr
 8013f7a:	bf00      	nop
 8013f7c:	200003b8 	.word	0x200003b8

08013f80 <USBD_CDC_DataOut>:
{
 8013f80:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013f82:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8013f86:	b17d      	cbz	r5, 8013fa8 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013f88:	4604      	mov	r4, r0
 8013f8a:	f00f fb57 	bl	802363c <USBD_LL_GetRxDataSize>
 8013f8e:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013f90:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8013f94:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8013f98:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8013f9c:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013f9e:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013fa2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8013fa4:	2000      	movs	r0, #0
}
 8013fa6:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8013fa8:	2003      	movs	r0, #3
}
 8013faa:	bd38      	pop	{r3, r4, r5, pc}

08013fac <USBD_CDC_DataIn>:
{
 8013fac:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 8013fae:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8013fb2:	b34d      	cbz	r5, 8014008 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013fb4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8013fb8:	4686      	mov	lr, r0
 8013fba:	460a      	mov	r2, r1
 8013fbc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8013fc0:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8013fc4:	b15b      	cbz	r3, 8013fde <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013fc6:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8013fca:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 8013fce:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8013fd2:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8013fd4:	fbb3 f6f4 	udiv	r6, r3, r4
 8013fd8:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013fdc:	b164      	cbz	r4, 8013ff8 <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013fde:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 8013fe2:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013fe4:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8013fe8:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8013fec:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8013fee:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013ff2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8013ff4:	4620      	mov	r0, r4
}
 8013ff6:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013ff8:	4623      	mov	r3, r4
 8013ffa:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8013ffc:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014000:	f00f fb00 	bl	8023604 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8014004:	4620      	mov	r0, r4
}
 8014006:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8014008:	2003      	movs	r0, #3
}
 801400a:	bd70      	pop	{r4, r5, r6, pc}

0801400c <USBD_CDC_Setup>:
{
 801400c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801400e:	f891 c000 	ldrb.w	ip, [r1]
{
 8014012:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 8014014:	2300      	movs	r3, #0
{
 8014016:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014018:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 801401c:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801401e:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8014022:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8014026:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801402a:	d01c      	beq.n	8014066 <USBD_CDC_Setup+0x5a>
 801402c:	2e20      	cmp	r6, #32
 801402e:	d112      	bne.n	8014056 <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8014030:	88ca      	ldrh	r2, [r1, #6]
 8014032:	2a00      	cmp	r2, #0
 8014034:	d036      	beq.n	80140a4 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 8014036:	f01c 0f80 	tst.w	ip, #128	; 0x80
 801403a:	d055      	beq.n	80140e8 <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 801403c:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801403e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8014042:	4639      	mov	r1, r7
 8014044:	7860      	ldrb	r0, [r4, #1]
 8014046:	689b      	ldr	r3, [r3, #8]
 8014048:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801404a:	88e2      	ldrh	r2, [r4, #6]
 801404c:	4639      	mov	r1, r7
 801404e:	4628      	mov	r0, r5
 8014050:	f000 fd2c 	bl	8014aac <USBD_CtlSendData>
 8014054:	e004      	b.n	8014060 <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 8014056:	4621      	mov	r1, r4
 8014058:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 801405a:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 801405c:	f000 fcf0 	bl	8014a40 <USBD_CtlError>
}
 8014060:	4630      	mov	r0, r6
 8014062:	b003      	add	sp, #12
 8014064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8014066:	784b      	ldrb	r3, [r1, #1]
 8014068:	2b0b      	cmp	r3, #11
 801406a:	d8f4      	bhi.n	8014056 <USBD_CDC_Setup+0x4a>
 801406c:	a201      	add	r2, pc, #4	; (adr r2, 8014074 <USBD_CDC_Setup+0x68>)
 801406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014072:	bf00      	nop
 8014074:	080140b7 	.word	0x080140b7
 8014078:	08014061 	.word	0x08014061
 801407c:	08014057 	.word	0x08014057
 8014080:	08014057 	.word	0x08014057
 8014084:	08014057 	.word	0x08014057
 8014088:	08014057 	.word	0x08014057
 801408c:	08014057 	.word	0x08014057
 8014090:	08014057 	.word	0x08014057
 8014094:	08014057 	.word	0x08014057
 8014098:	08014057 	.word	0x08014057
 801409c:	080140d5 	.word	0x080140d5
 80140a0:	080140cb 	.word	0x080140cb
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80140a4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 80140a8:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80140aa:	7848      	ldrb	r0, [r1, #1]
 80140ac:	689b      	ldr	r3, [r3, #8]
 80140ae:	4798      	blx	r3
}
 80140b0:	4630      	mov	r0, r6
 80140b2:	b003      	add	sp, #12
 80140b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140b6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80140ba:	2a03      	cmp	r2, #3
 80140bc:	d01e      	beq.n	80140fc <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 80140be:	4621      	mov	r1, r4
 80140c0:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 80140c2:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 80140c4:	f000 fcbc 	bl	8014a40 <USBD_CtlError>
        ret = USBD_FAIL;
 80140c8:	e7ca      	b.n	8014060 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80140ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80140ce:	2b03      	cmp	r3, #3
 80140d0:	d0c6      	beq.n	8014060 <USBD_CDC_Setup+0x54>
 80140d2:	e7f4      	b.n	80140be <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80140d8:	2b03      	cmp	r3, #3
 80140da:	d1f0      	bne.n	80140be <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80140dc:	2201      	movs	r2, #1
 80140de:	f10d 0105 	add.w	r1, sp, #5
 80140e2:	f000 fce3 	bl	8014aac <USBD_CtlSendData>
 80140e6:	e7bb      	b.n	8014060 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 80140e8:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 80140ea:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 80140ec:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 80140f0:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80140f4:	4639      	mov	r1, r7
 80140f6:	f000 fcf1 	bl	8014adc <USBD_CtlPrepareRx>
 80140fa:	e7b1      	b.n	8014060 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80140fc:	2202      	movs	r2, #2
 80140fe:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8014102:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014104:	f000 fcd2 	bl	8014aac <USBD_CtlSendData>
 8014108:	e7aa      	b.n	8014060 <USBD_CDC_Setup+0x54>
 801410a:	bf00      	nop

0801410c <USBD_CDC_DeInit>:
{
 801410c:	b538      	push	{r3, r4, r5, lr}
 801410e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014110:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014112:	2181      	movs	r1, #129	; 0x81
 8014114:	f00f fa2a 	bl	802356c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014118:	2101      	movs	r1, #1
 801411a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801411c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801411e:	f00f fa25 	bl	802356c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014122:	2182      	movs	r1, #130	; 0x82
 8014124:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014126:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801412a:	f00f fa1f 	bl	802356c <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 801412e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014132:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8014134:	b14b      	cbz	r3, 801414a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014136:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 801413a:	685b      	ldr	r3, [r3, #4]
 801413c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801413e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8014142:	f00f fcf7 	bl	8023b34 <free>
    pdev->pClassData = NULL;
 8014146:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 801414a:	2000      	movs	r0, #0
 801414c:	bd38      	pop	{r3, r4, r5, pc}
 801414e:	bf00      	nop

08014150 <USBD_CDC_Init>:
{
 8014150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014154:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014156:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801415a:	f00f fce3 	bl	8023b24 <malloc>
  if (hcdc == NULL)
 801415e:	4605      	mov	r5, r0
 8014160:	2800      	cmp	r0, #0
 8014162:	d04c      	beq.n	80141fe <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014164:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8014166:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801416a:	b393      	cbz	r3, 80141d2 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801416c:	2340      	movs	r3, #64	; 0x40
 801416e:	2202      	movs	r2, #2
 8014170:	2181      	movs	r1, #129	; 0x81
 8014172:	4620      	mov	r0, r4
 8014174:	f00f f9e8 	bl	8023548 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014178:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801417a:	2340      	movs	r3, #64	; 0x40
 801417c:	4631      	mov	r1, r6
 801417e:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014180:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014182:	4620      	mov	r0, r4
 8014184:	f00f f9e0 	bl	8023548 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014188:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801418a:	2203      	movs	r2, #3
 801418c:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801418e:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014192:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014194:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014198:	2308      	movs	r3, #8
 801419a:	f00f f9d5 	bl	8023548 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801419e:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80141a2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 80141a6:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80141a8:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80141b0:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 80141b2:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 80141b6:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80141ba:	b9ae      	cbnz	r6, 80141e8 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80141bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80141c0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80141c4:	4641      	mov	r1, r8
 80141c6:	4620      	mov	r0, r4
 80141c8:	f00f fa2a 	bl	8023620 <USBD_LL_PrepareReceive>
}
 80141cc:	4630      	mov	r0, r6
 80141ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80141d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80141d6:	2202      	movs	r2, #2
 80141d8:	2181      	movs	r1, #129	; 0x81
 80141da:	4620      	mov	r0, r4
 80141dc:	f00f f9b4 	bl	8023548 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80141e0:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80141e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80141e6:	e7c9      	b.n	801417c <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 80141e8:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80141ea:	2340      	movs	r3, #64	; 0x40
 80141ec:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80141f0:	4641      	mov	r1, r8
 80141f2:	4620      	mov	r0, r4
 80141f4:	f00f fa14 	bl	8023620 <USBD_LL_PrepareReceive>
}
 80141f8:	4630      	mov	r0, r6
 80141fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 80141fe:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8014200:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014204:	e7e2      	b.n	80141cc <USBD_CDC_Init+0x7c>
 8014206:	bf00      	nop

08014208 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014208:	4603      	mov	r3, r0
  if (fops == NULL)
 801420a:	b119      	cbz	r1, 8014214 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 801420c:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 801420e:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 8014212:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8014214:	2003      	movs	r0, #3
}
 8014216:	4770      	bx	lr

08014218 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014218:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 801421a:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801421c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8014220:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014224:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop

0801422c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801422c:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 801422e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8014230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014234:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8014238:	4770      	bx	lr
 801423a:	bf00      	nop

0801423c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801423c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8014240:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8014242:	b19a      	cbz	r2, 801426c <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014244:	7c04      	ldrb	r4, [r0, #16]
 8014246:	b144      	cbz	r4, 801425a <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014248:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801424a:	2340      	movs	r3, #64	; 0x40
 801424c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014250:	2101      	movs	r1, #1
 8014252:	f00f f9e5 	bl	8023620 <USBD_LL_PrepareReceive>
}
 8014256:	4620      	mov	r0, r4
 8014258:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801425a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801425e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014262:	2101      	movs	r1, #1
 8014264:	f00f f9dc 	bl	8023620 <USBD_LL_PrepareReceive>
}
 8014268:	4620      	mov	r0, r4
 801426a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 801426c:	2403      	movs	r4, #3
}
 801426e:	4620      	mov	r0, r4
 8014270:	bd10      	pop	{r4, pc}
 8014272:	bf00      	nop

08014274 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014274:	b1a0      	cbz	r0, 80142a0 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8014276:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801427a:	b113      	cbz	r3, 8014282 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 801427c:	2300      	movs	r3, #0
 801427e:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8014282:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8014286:	b113      	cbz	r3, 801428e <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8014288:	2300      	movs	r3, #0
 801428a:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801428e:	b109      	cbz	r1, 8014294 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8014290:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014294:	2301      	movs	r3, #1
  pdev->id = id;
 8014296:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014298:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801429c:	f00f b914 	b.w	80234c8 <USBD_LL_Init>

  return ret;
}
 80142a0:	2003      	movs	r0, #3
 80142a2:	4770      	bx	lr

080142a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80142a4:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 80142a6:	2400      	movs	r4, #0
{
 80142a8:	b083      	sub	sp, #12
  uint16_t len = 0U;
 80142aa:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 80142ae:	b159      	cbz	r1, 80142c8 <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80142b0:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80142b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80142b4:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 80142b8:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80142bc:	4798      	blx	r3
 80142be:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 80142c2:	4620      	mov	r0, r4
 80142c4:	b003      	add	sp, #12
 80142c6:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80142c8:	2403      	movs	r4, #3
}
 80142ca:	4620      	mov	r0, r4
 80142cc:	b003      	add	sp, #12
 80142ce:	bd30      	pop	{r4, r5, pc}

080142d0 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80142d0:	f00f b92c 	b.w	802352c <USBD_LL_Start>

080142d4 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80142d4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80142d8:	b10b      	cbz	r3, 80142de <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	4718      	bx	r3
  }

  return ret;
}
 80142de:	2003      	movs	r0, #3
 80142e0:	4770      	bx	lr
 80142e2:	bf00      	nop

080142e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80142e4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80142e6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80142ea:	b10b      	cbz	r3, 80142f0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80142ec:	685b      	ldr	r3, [r3, #4]
 80142ee:	4798      	blx	r3
  }

  return USBD_OK;
}
 80142f0:	2000      	movs	r0, #0
 80142f2:	bd08      	pop	{r3, pc}

080142f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80142f4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80142f6:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 80142fa:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80142fc:	4628      	mov	r0, r5
 80142fe:	f000 fb93 	bl	8014a28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014302:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8014304:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8014308:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 801430c:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8014310:	f001 031f 	and.w	r3, r1, #31
 8014314:	4293      	cmp	r3, r2
 8014316:	d009      	beq.n	801432c <USBD_LL_SetupStage+0x38>
 8014318:	2b02      	cmp	r3, #2
 801431a:	d013      	beq.n	8014344 <USBD_LL_SetupStage+0x50>
 801431c:	b163      	cbz	r3, 8014338 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801431e:	4620      	mov	r0, r4
 8014320:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8014324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014328:	f00f b92e 	b.w	8023588 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801432c:	4629      	mov	r1, r5
 801432e:	4620      	mov	r0, r4
}
 8014330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014334:	f000 ba9e 	b.w	8014874 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014338:	4629      	mov	r1, r5
 801433a:	4620      	mov	r0, r4
}
 801433c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014340:	f000 b8fa 	b.w	8014538 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014344:	4629      	mov	r1, r5
 8014346:	4620      	mov	r0, r4
}
 8014348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801434c:	f000 baca 	b.w	80148e4 <USBD_StdEPReq>

08014350 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014350:	b570      	push	{r4, r5, r6, lr}
 8014352:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014354:	b939      	cbnz	r1, 8014366 <USBD_LL_DataOutStage+0x16>
 8014356:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014358:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 801435c:	460c      	mov	r4, r1
 801435e:	2a03      	cmp	r2, #3
 8014360:	d00e      	beq.n	8014380 <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8014362:	2000      	movs	r0, #0
}
 8014364:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8014366:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801436a:	699b      	ldr	r3, [r3, #24]
 801436c:	b133      	cbz	r3, 801437c <USBD_LL_DataOutStage+0x2c>
 801436e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014372:	2a03      	cmp	r2, #3
 8014374:	d102      	bne.n	801437c <USBD_LL_DataOutStage+0x2c>
}
 8014376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801437a:	4718      	bx	r3
    return USBD_FAIL;
 801437c:	2003      	movs	r0, #3
}
 801437e:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8014380:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8014384:	4291      	cmp	r1, r2
 8014386:	d80d      	bhi.n	80143a4 <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014388:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801438c:	691b      	ldr	r3, [r3, #16]
 801438e:	b123      	cbz	r3, 801439a <USBD_LL_DataOutStage+0x4a>
 8014390:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014394:	2a03      	cmp	r2, #3
 8014396:	d100      	bne.n	801439a <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8014398:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 801439a:	4628      	mov	r0, r5
 801439c:	f000 fbb6 	bl	8014b0c <USBD_CtlSendStatus>
  return USBD_OK;
 80143a0:	2000      	movs	r0, #0
 80143a2:	e7df      	b.n	8014364 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 80143a4:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80143a6:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 80143a8:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80143ac:	bf28      	it	cs
 80143ae:	460a      	movcs	r2, r1
 80143b0:	4619      	mov	r1, r3
 80143b2:	f000 fba1 	bl	8014af8 <USBD_CtlContinueRx>
  return USBD_OK;
 80143b6:	4620      	mov	r0, r4
}
 80143b8:	bd70      	pop	{r4, r5, r6, pc}
 80143ba:	bf00      	nop

080143bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80143bc:	b570      	push	{r4, r5, r6, lr}
 80143be:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80143c0:	b949      	cbnz	r1, 80143d6 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80143c2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80143c6:	2b02      	cmp	r3, #2
 80143c8:	d012      	beq.n	80143f0 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80143ca:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d027      	beq.n	8014422 <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80143d2:	2000      	movs	r0, #0
}
 80143d4:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80143d6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80143da:	695b      	ldr	r3, [r3, #20]
 80143dc:	b133      	cbz	r3, 80143ec <USBD_LL_DataInStage+0x30>
 80143de:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80143e2:	2a03      	cmp	r2, #3
 80143e4:	d102      	bne.n	80143ec <USBD_LL_DataInStage+0x30>
}
 80143e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80143ea:	4718      	bx	r3
    return USBD_FAIL;
 80143ec:	2003      	movs	r0, #3
}
 80143ee:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80143f0:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 80143f4:	460d      	mov	r5, r1
 80143f6:	42b3      	cmp	r3, r6
 80143f8:	d818      	bhi.n	801442c <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 80143fa:	d027      	beq.n	801444c <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80143fc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014400:	68db      	ldr	r3, [r3, #12]
 8014402:	b11b      	cbz	r3, 801440c <USBD_LL_DataInStage+0x50>
 8014404:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8014408:	2a03      	cmp	r2, #3
 801440a:	d01c      	beq.n	8014446 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801440c:	2180      	movs	r1, #128	; 0x80
 801440e:	4620      	mov	r0, r4
 8014410:	f00f f8ba 	bl	8023588 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014414:	4620      	mov	r0, r4
 8014416:	f000 fb85 	bl	8014b24 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 801441a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 801441e:	2b01      	cmp	r3, #1
 8014420:	d1d7      	bne.n	80143d2 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8014422:	2300      	movs	r3, #0
  return USBD_OK;
 8014424:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 8014426:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 801442a:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 801442c:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801442e:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8014430:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014432:	461a      	mov	r2, r3
 8014434:	f000 fb48 	bl	8014ac8 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014438:	462b      	mov	r3, r5
 801443a:	462a      	mov	r2, r5
 801443c:	4629      	mov	r1, r5
 801443e:	4620      	mov	r0, r4
 8014440:	f00f f8ee 	bl	8023620 <USBD_LL_PrepareReceive>
 8014444:	e7c1      	b.n	80143ca <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8014446:	4620      	mov	r0, r4
 8014448:	4798      	blx	r3
 801444a:	e7df      	b.n	801440c <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 801444c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 801444e:	4293      	cmp	r3, r2
 8014450:	d8d4      	bhi.n	80143fc <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8014452:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8014456:	429a      	cmp	r2, r3
 8014458:	d2d0      	bcs.n	80143fc <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801445a:	460a      	mov	r2, r1
 801445c:	f000 fb34 	bl	8014ac8 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014460:	462b      	mov	r3, r5
 8014462:	462a      	mov	r2, r5
 8014464:	4629      	mov	r1, r5
 8014466:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8014468:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801446c:	f00f f8d8 	bl	8023620 <USBD_LL_PrepareReceive>
 8014470:	e7ab      	b.n	80143ca <USBD_LL_DataInStage+0xe>
 8014472:	bf00      	nop

08014474 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8014474:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014476:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8014478:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 801447c:	b570      	push	{r4, r5, r6, lr}
 801447e:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014480:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014484:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8014488:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 801448a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 801448e:	b11b      	cbz	r3, 8014498 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014490:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014494:	685b      	ldr	r3, [r3, #4]
 8014496:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014498:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801449a:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801449c:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801449e:	4620      	mov	r0, r4
 80144a0:	462b      	mov	r3, r5
 80144a2:	4611      	mov	r1, r2
 80144a4:	f00f f850 	bl	8023548 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80144a8:	462b      	mov	r3, r5
 80144aa:	2200      	movs	r2, #0
 80144ac:	2180      	movs	r1, #128	; 0x80
 80144ae:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80144b0:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80144b4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80144b8:	f00f f846 	bl	8023548 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 80144bc:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80144be:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80144c0:	6225      	str	r5, [r4, #32]
}
 80144c2:	bd70      	pop	{r4, r5, r6, pc}

080144c4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80144c4:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 80144c6:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80144c8:	7419      	strb	r1, [r3, #16]
}
 80144ca:	4770      	bx	lr

080144cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80144cc:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80144ce:	2104      	movs	r1, #4

  return USBD_OK;
}
 80144d0:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 80144d2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80144d6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 80144da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 80144de:	4770      	bx	lr

080144e0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80144e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80144e4:	2b04      	cmp	r3, #4
 80144e6:	d103      	bne.n	80144f0 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80144e8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80144ec:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80144f0:	2000      	movs	r0, #0
 80144f2:	4770      	bx	lr

080144f4 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144f4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80144f8:	2a03      	cmp	r2, #3
 80144fa:	d001      	beq.n	8014500 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80144fc:	2000      	movs	r0, #0
 80144fe:	4770      	bx	lr
{
 8014500:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8014502:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014506:	69db      	ldr	r3, [r3, #28]
 8014508:	b103      	cbz	r3, 801450c <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 801450a:	4798      	blx	r3
}
 801450c:	2000      	movs	r0, #0
 801450e:	bd08      	pop	{r3, pc}

08014510 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8014510:	2000      	movs	r0, #0
 8014512:	4770      	bx	lr

08014514 <USBD_LL_IsoOUTIncomplete>:
 8014514:	2000      	movs	r0, #0
 8014516:	4770      	bx	lr

08014518 <USBD_LL_DevConnected>:
 8014518:	2000      	movs	r0, #0
 801451a:	4770      	bx	lr

0801451c <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801451c:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 801451e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014522:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8014526:	b12a      	cbz	r2, 8014534 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014528:	6852      	ldr	r2, [r2, #4]
 801452a:	7901      	ldrb	r1, [r0, #4]
{
 801452c:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801452e:	4790      	blx	r2
  }

  return USBD_OK;
}
 8014530:	2000      	movs	r0, #0
 8014532:	bd08      	pop	{r3, pc}
 8014534:	2000      	movs	r0, #0
 8014536:	4770      	bx	lr

08014538 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014538:	b570      	push	{r4, r5, r6, lr}
 801453a:	780c      	ldrb	r4, [r1, #0]
 801453c:	b082      	sub	sp, #8
 801453e:	460e      	mov	r6, r1
 8014540:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014542:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8014546:	2c20      	cmp	r4, #32
 8014548:	d00e      	beq.n	8014568 <USBD_StdDevReq+0x30>
 801454a:	2c40      	cmp	r4, #64	; 0x40
 801454c:	d00c      	beq.n	8014568 <USBD_StdDevReq+0x30>
 801454e:	b1a4      	cbz	r4, 801457a <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014550:	2180      	movs	r1, #128	; 0x80
 8014552:	4628      	mov	r0, r5
 8014554:	f00f f818 	bl	8023588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014558:	2100      	movs	r1, #0
 801455a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 801455c:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 801455e:	f00f f813 	bl	8023588 <USBD_LL_StallEP>
}
 8014562:	4620      	mov	r0, r4
 8014564:	b002      	add	sp, #8
 8014566:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014568:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 801456c:	4631      	mov	r1, r6
 801456e:	4628      	mov	r0, r5
 8014570:	689b      	ldr	r3, [r3, #8]
}
 8014572:	b002      	add	sp, #8
 8014574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014578:	4718      	bx	r3
    switch (req->bRequest)
 801457a:	784b      	ldrb	r3, [r1, #1]
 801457c:	2b09      	cmp	r3, #9
 801457e:	d8e7      	bhi.n	8014550 <USBD_StdDevReq+0x18>
 8014580:	a201      	add	r2, pc, #4	; (adr r2, 8014588 <USBD_StdDevReq+0x50>)
 8014582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014586:	bf00      	nop
 8014588:	080145e7 	.word	0x080145e7
 801458c:	08014615 	.word	0x08014615
 8014590:	08014551 	.word	0x08014551
 8014594:	08014633 	.word	0x08014633
 8014598:	08014551 	.word	0x08014551
 801459c:	0801463b 	.word	0x0801463b
 80145a0:	08014673 	.word	0x08014673
 80145a4:	08014551 	.word	0x08014551
 80145a8:	08014697 	.word	0x08014697
 80145ac:	080145b1 	.word	0x080145b1
  cfgidx = (uint8_t)(req->wValue);
 80145b0:	7889      	ldrb	r1, [r1, #2]
 80145b2:	4eaa      	ldr	r6, [pc, #680]	; (801485c <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80145b4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80145b6:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80145b8:	f200 8146 	bhi.w	8014848 <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 80145bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80145c0:	2b02      	cmp	r3, #2
 80145c2:	f000 8130 	beq.w	8014826 <USBD_StdDevReq+0x2ee>
 80145c6:	2b03      	cmp	r3, #3
 80145c8:	f000 810c 	beq.w	80147e4 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80145cc:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 80145ce:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80145d0:	f00e ffda 	bl	8023588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80145d4:	2100      	movs	r1, #0
 80145d6:	4628      	mov	r0, r5
 80145d8:	f00e ffd6 	bl	8023588 <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80145dc:	7831      	ldrb	r1, [r6, #0]
 80145de:	4628      	mov	r0, r5
 80145e0:	f7ff fe80 	bl	80142e4 <USBD_ClrClassConfig>
    break;
 80145e4:	e7bd      	b.n	8014562 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80145e6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80145ea:	3a01      	subs	r2, #1
 80145ec:	2a02      	cmp	r2, #2
 80145ee:	d868      	bhi.n	80146c2 <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 80145f0:	88ca      	ldrh	r2, [r1, #6]
 80145f2:	2a02      	cmp	r2, #2
 80145f4:	d165      	bne.n	80146c2 <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80145f6:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 80145f8:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80145fc:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 80145fe:	b10a      	cbz	r2, 8014604 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014600:	2203      	movs	r2, #3
 8014602:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014604:	2202      	movs	r2, #2
 8014606:	f105 010c 	add.w	r1, r5, #12
 801460a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 801460c:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801460e:	f000 fa4d 	bl	8014aac <USBD_CtlSendData>
    break;
 8014612:	e7a6      	b.n	8014562 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8014614:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014618:	3b01      	subs	r3, #1
 801461a:	2b02      	cmp	r3, #2
 801461c:	d851      	bhi.n	80146c2 <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801461e:	884b      	ldrh	r3, [r1, #2]
 8014620:	2b01      	cmp	r3, #1
 8014622:	d19e      	bne.n	8014562 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8014624:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 8014626:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 8014628:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801462c:	f000 fa6e 	bl	8014b0c <USBD_CtlSendStatus>
 8014630:	e797      	b.n	8014562 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014632:	884b      	ldrh	r3, [r1, #2]
 8014634:	2b01      	cmp	r3, #1
 8014636:	d194      	bne.n	8014562 <USBD_StdDevReq+0x2a>
 8014638:	e7f5      	b.n	8014626 <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801463a:	888b      	ldrh	r3, [r1, #4]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d140      	bne.n	80146c2 <USBD_StdDevReq+0x18a>
 8014640:	88cb      	ldrh	r3, [r1, #6]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d13d      	bne.n	80146c2 <USBD_StdDevReq+0x18a>
 8014646:	884e      	ldrh	r6, [r1, #2]
 8014648:	2e7f      	cmp	r6, #127	; 0x7f
 801464a:	d83a      	bhi.n	80146c2 <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801464c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014650:	2b03      	cmp	r3, #3
 8014652:	d036      	beq.n	80146c2 <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014654:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8014656:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801465a:	f00e ffc5 	bl	80235e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801465e:	4628      	mov	r0, r5
 8014660:	f000 fa54 	bl	8014b0c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8014664:	2e00      	cmp	r6, #0
 8014666:	f040 80da 	bne.w	801481e <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 801466a:	2301      	movs	r3, #1
 801466c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014670:	e777      	b.n	8014562 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 8014672:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8014674:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8014676:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 801467a:	0a13      	lsrs	r3, r2, #8
 801467c:	3b01      	subs	r3, #1
 801467e:	2b0e      	cmp	r3, #14
 8014680:	d81f      	bhi.n	80146c2 <USBD_StdDevReq+0x18a>
 8014682:	e8df f003 	tbb	[pc, r3]
 8014686:	6b77      	.short	0x6b77
 8014688:	4f1e1e59 	.word	0x4f1e1e59
 801468c:	1e1e1e43 	.word	0x1e1e1e43
 8014690:	1e1e1e1e 	.word	0x1e1e1e1e
 8014694:	29          	.byte	0x29
 8014695:	00          	.byte	0x00
  if (req->wLength != 1U)
 8014696:	88ca      	ldrh	r2, [r1, #6]
 8014698:	2a01      	cmp	r2, #1
 801469a:	d112      	bne.n	80146c2 <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 801469c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80146a0:	2b02      	cmp	r3, #2
 80146a2:	f200 8098 	bhi.w	80147d6 <USBD_StdDevReq+0x29e>
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f43f af52 	beq.w	8014550 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 80146ac:	4601      	mov	r1, r0
 80146ae:	2300      	movs	r3, #0
 80146b0:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80146b4:	f000 f9fa 	bl	8014aac <USBD_CtlSendData>
      break;
 80146b8:	e753      	b.n	8014562 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80146ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80146be:	699b      	ldr	r3, [r3, #24]
 80146c0:	b97b      	cbnz	r3, 80146e2 <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80146c2:	2180      	movs	r1, #128	; 0x80
 80146c4:	4628      	mov	r0, r5
 80146c6:	f00e ff5f 	bl	8023588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80146ca:	2100      	movs	r1, #0
 80146cc:	4628      	mov	r0, r5
 80146ce:	f00e ff5b 	bl	8023588 <USBD_LL_StallEP>
}
 80146d2:	4620      	mov	r0, r4
 80146d4:	b002      	add	sp, #8
 80146d6:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80146d8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80146dc:	69db      	ldr	r3, [r3, #28]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d0ef      	beq.n	80146c2 <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80146e2:	f10d 0106 	add.w	r1, sp, #6
 80146e6:	7c28      	ldrb	r0, [r5, #16]
 80146e8:	4798      	blx	r3
    if (req->wLength != 0U)
 80146ea:	88f2      	ldrh	r2, [r6, #6]
 80146ec:	2a00      	cmp	r2, #0
 80146ee:	d06e      	beq.n	80147ce <USBD_StdDevReq+0x296>
      if (len != 0U)
 80146f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d0e4      	beq.n	80146c2 <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 80146f8:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80146fa:	4601      	mov	r1, r0
 80146fc:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 80146fe:	bf28      	it	cs
 8014700:	461a      	movcs	r2, r3
 8014702:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014706:	f000 f9d1 	bl	8014aac <USBD_CtlSendData>
 801470a:	e72a      	b.n	8014562 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801470c:	7c03      	ldrb	r3, [r0, #16]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d1d7      	bne.n	80146c2 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014712:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014716:	f10d 0006 	add.w	r0, sp, #6
 801471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801471c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801471e:	2307      	movs	r3, #7
 8014720:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014722:	e7e2      	b.n	80146ea <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014724:	7c03      	ldrb	r3, [r0, #16]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d1cb      	bne.n	80146c2 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801472a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801472e:	f10d 0006 	add.w	r0, sp, #6
 8014732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014734:	4798      	blx	r3
  if (err != 0U)
 8014736:	e7d8      	b.n	80146ea <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 8014738:	b2d2      	uxtb	r2, r2
 801473a:	2a05      	cmp	r2, #5
 801473c:	d8c1      	bhi.n	80146c2 <USBD_StdDevReq+0x18a>
 801473e:	a301      	add	r3, pc, #4	; (adr r3, 8014744 <USBD_StdDevReq+0x20c>)
 8014740:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8014744:	080147b5 	.word	0x080147b5
 8014748:	080147a9 	.word	0x080147a9
 801474c:	0801479d 	.word	0x0801479d
 8014750:	08014791 	.word	0x08014791
 8014754:	08014785 	.word	0x08014785
 8014758:	080146bb 	.word	0x080146bb
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801475c:	7c03      	ldrb	r3, [r0, #16]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d17e      	bne.n	8014860 <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014762:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014766:	f10d 0006 	add.w	r0, sp, #6
 801476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801476c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801476e:	2302      	movs	r3, #2
 8014770:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014772:	e7ba      	b.n	80146ea <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014774:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014778:	f10d 0106 	add.w	r1, sp, #6
 801477c:	7c00      	ldrb	r0, [r0, #16]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4798      	blx	r3
  if (err != 0U)
 8014782:	e7b2      	b.n	80146ea <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014784:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014788:	695b      	ldr	r3, [r3, #20]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d1a9      	bne.n	80146e2 <USBD_StdDevReq+0x1aa>
 801478e:	e798      	b.n	80146c2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014790:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014794:	691b      	ldr	r3, [r3, #16]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d1a3      	bne.n	80146e2 <USBD_StdDevReq+0x1aa>
 801479a:	e792      	b.n	80146c2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801479c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d19d      	bne.n	80146e2 <USBD_StdDevReq+0x1aa>
 80147a6:	e78c      	b.n	80146c2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80147a8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80147ac:	689b      	ldr	r3, [r3, #8]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d197      	bne.n	80146e2 <USBD_StdDevReq+0x1aa>
 80147b2:	e786      	b.n	80146c2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80147b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80147b8:	685b      	ldr	r3, [r3, #4]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d191      	bne.n	80146e2 <USBD_StdDevReq+0x1aa>
 80147be:	e780      	b.n	80146c2 <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80147c0:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 80147c2:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80147c4:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80147c6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80147ca:	f7ff fd8b 	bl	80142e4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80147ce:	4628      	mov	r0, r5
 80147d0:	f000 f99c 	bl	8014b0c <USBD_CtlSendStatus>
 80147d4:	e6c5      	b.n	8014562 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 80147d6:	2b03      	cmp	r3, #3
 80147d8:	f47f aeba 	bne.w	8014550 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80147dc:	1d01      	adds	r1, r0, #4
 80147de:	f000 f965 	bl	8014aac <USBD_CtlSendData>
      break;
 80147e2:	e6be      	b.n	8014562 <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 80147e4:	2900      	cmp	r1, #0
 80147e6:	d0eb      	beq.n	80147c0 <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 80147e8:	6841      	ldr	r1, [r0, #4]
 80147ea:	2901      	cmp	r1, #1
 80147ec:	d0ef      	beq.n	80147ce <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80147ee:	b2c9      	uxtb	r1, r1
 80147f0:	f7ff fd78 	bl	80142e4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80147f4:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80147f6:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 80147f8:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80147fa:	f7ff fd6b 	bl	80142d4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80147fe:	4606      	mov	r6, r0
 8014800:	2800      	cmp	r0, #0
 8014802:	d0e4      	beq.n	80147ce <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014804:	2180      	movs	r1, #128	; 0x80
 8014806:	4628      	mov	r0, r5
 8014808:	f00e febe 	bl	8023588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801480c:	2100      	movs	r1, #0
 801480e:	4628      	mov	r0, r5
 8014810:	4634      	mov	r4, r6
 8014812:	f00e feb9 	bl	8023588 <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014816:	7929      	ldrb	r1, [r5, #4]
 8014818:	4628      	mov	r0, r5
 801481a:	f7ff fd63 	bl	80142e4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801481e:	2302      	movs	r3, #2
 8014820:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014824:	e69d      	b.n	8014562 <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8014826:	2900      	cmp	r1, #0
 8014828:	d0d1      	beq.n	80147ce <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 801482a:	2101      	movs	r1, #1
 801482c:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801482e:	f7ff fd51 	bl	80142d4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8014832:	4604      	mov	r4, r0
 8014834:	2800      	cmp	r0, #0
 8014836:	f47f af44 	bne.w	80146c2 <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 801483a:	4628      	mov	r0, r5
 801483c:	f000 f966 	bl	8014b0c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8014840:	2303      	movs	r3, #3
 8014842:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014846:	e68c      	b.n	8014562 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014848:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 801484a:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801484c:	f00e fe9c 	bl	8023588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014850:	2100      	movs	r1, #0
 8014852:	4628      	mov	r0, r5
 8014854:	f00e fe98 	bl	8023588 <USBD_LL_StallEP>
}
 8014858:	e683      	b.n	8014562 <USBD_StdDevReq+0x2a>
 801485a:	bf00      	nop
 801485c:	20006004 	.word	0x20006004
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014860:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014864:	f10d 0006 	add.w	r0, sp, #6
 8014868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801486a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801486c:	2302      	movs	r3, #2
 801486e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014870:	e73b      	b.n	80146ea <USBD_StdDevReq+0x1b2>
 8014872:	bf00      	nop

08014874 <USBD_StdItfReq>:
{
 8014874:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014876:	780b      	ldrb	r3, [r1, #0]
{
 8014878:	460d      	mov	r5, r1
 801487a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801487c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8014880:	2a40      	cmp	r2, #64	; 0x40
 8014882:	d00b      	beq.n	801489c <USBD_StdItfReq+0x28>
 8014884:	065b      	lsls	r3, r3, #25
 8014886:	d509      	bpl.n	801489c <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8014888:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801488a:	2180      	movs	r1, #128	; 0x80
 801488c:	f00e fe7c 	bl	8023588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014890:	4620      	mov	r0, r4
 8014892:	4629      	mov	r1, r5
 8014894:	f00e fe78 	bl	8023588 <USBD_LL_StallEP>
}
 8014898:	4628      	mov	r0, r5
 801489a:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 801489c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80148a0:	3b01      	subs	r3, #1
 80148a2:	2b02      	cmp	r3, #2
 80148a4:	d812      	bhi.n	80148cc <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80148a6:	792b      	ldrb	r3, [r5, #4]
 80148a8:	2b01      	cmp	r3, #1
 80148aa:	d80f      	bhi.n	80148cc <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80148ac:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80148b0:	4629      	mov	r1, r5
 80148b2:	4620      	mov	r0, r4
 80148b4:	689b      	ldr	r3, [r3, #8]
 80148b6:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80148b8:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80148ba:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d1eb      	bne.n	8014898 <USBD_StdItfReq+0x24>
 80148c0:	2800      	cmp	r0, #0
 80148c2:	d1e9      	bne.n	8014898 <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 80148c4:	4620      	mov	r0, r4
 80148c6:	f000 f921 	bl	8014b0c <USBD_CtlSendStatus>
 80148ca:	e7e5      	b.n	8014898 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80148cc:	2180      	movs	r1, #128	; 0x80
 80148ce:	4620      	mov	r0, r4
 80148d0:	f00e fe5a 	bl	8023588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80148d4:	2100      	movs	r1, #0
 80148d6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 80148d8:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 80148da:	f00e fe55 	bl	8023588 <USBD_LL_StallEP>
}
 80148de:	4628      	mov	r0, r5
 80148e0:	bd38      	pop	{r3, r4, r5, pc}
 80148e2:	bf00      	nop

080148e4 <USBD_StdEPReq>:
{
 80148e4:	b570      	push	{r4, r5, r6, lr}
 80148e6:	780b      	ldrb	r3, [r1, #0]
 80148e8:	460d      	mov	r5, r1
 80148ea:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80148ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80148f0:	2b20      	cmp	r3, #32
 80148f2:	d00c      	beq.n	801490e <USBD_StdEPReq+0x2a>
 80148f4:	2b40      	cmp	r3, #64	; 0x40
 80148f6:	d00a      	beq.n	801490e <USBD_StdEPReq+0x2a>
 80148f8:	b18b      	cbz	r3, 801491e <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80148fa:	2180      	movs	r1, #128	; 0x80
 80148fc:	4620      	mov	r0, r4
 80148fe:	f00e fe43 	bl	8023588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014902:	2100      	movs	r1, #0
 8014904:	4620      	mov	r0, r4
 8014906:	f00e fe3f 	bl	8023588 <USBD_LL_StallEP>
}
 801490a:	2000      	movs	r0, #0
 801490c:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801490e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014912:	4629      	mov	r1, r5
 8014914:	4620      	mov	r0, r4
 8014916:	689b      	ldr	r3, [r3, #8]
}
 8014918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801491c:	4718      	bx	r3
    switch (req->bRequest)
 801491e:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8014920:	888a      	ldrh	r2, [r1, #4]
 8014922:	2b01      	cmp	r3, #1
 8014924:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8014926:	d036      	beq.n	8014996 <USBD_StdEPReq+0xb2>
 8014928:	2b03      	cmp	r3, #3
 801492a:	d023      	beq.n	8014974 <USBD_StdEPReq+0x90>
 801492c:	2b00      	cmp	r3, #0
 801492e:	d1e4      	bne.n	80148fa <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8014930:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014934:	2b02      	cmp	r3, #2
 8014936:	d04c      	beq.n	80149d2 <USBD_StdEPReq+0xee>
 8014938:	2b03      	cmp	r3, #3
 801493a:	d1de      	bne.n	80148fa <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801493c:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8014940:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014942:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014946:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 801494a:	d453      	bmi.n	80149f4 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801494c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8014950:	2b00      	cmp	r3, #0
 8014952:	d0d2      	beq.n	80148fa <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014954:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8014958:	2514      	movs	r5, #20
 801495a:	fb05 0503 	mla	r5, r5, r3, r0
 801495e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014962:	2b00      	cmp	r3, #0
 8014964:	d152      	bne.n	8014a0c <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 8014966:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014968:	2202      	movs	r2, #2
 801496a:	4629      	mov	r1, r5
 801496c:	4620      	mov	r0, r4
 801496e:	f000 f89d 	bl	8014aac <USBD_CtlSendData>
          break;
 8014972:	e7ca      	b.n	801490a <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8014974:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014978:	2b02      	cmp	r3, #2
 801497a:	d021      	beq.n	80149c0 <USBD_StdEPReq+0xdc>
 801497c:	2b03      	cmp	r3, #3
 801497e:	d1bc      	bne.n	80148fa <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014980:	886b      	ldrh	r3, [r5, #2]
 8014982:	b923      	cbnz	r3, 801498e <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014984:	064a      	lsls	r2, r1, #25
 8014986:	d002      	beq.n	801498e <USBD_StdEPReq+0xaa>
 8014988:	88eb      	ldrh	r3, [r5, #6]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d049      	beq.n	8014a22 <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 801498e:	4620      	mov	r0, r4
 8014990:	f000 f8bc 	bl	8014b0c <USBD_CtlSendStatus>
        break;
 8014994:	e7b9      	b.n	801490a <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8014996:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801499a:	2b02      	cmp	r3, #2
 801499c:	d010      	beq.n	80149c0 <USBD_StdEPReq+0xdc>
 801499e:	2b03      	cmp	r3, #3
 80149a0:	d1ab      	bne.n	80148fa <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80149a2:	886b      	ldrh	r3, [r5, #2]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d1b0      	bne.n	801490a <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 80149a8:	064e      	lsls	r6, r1, #25
 80149aa:	d135      	bne.n	8014a18 <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 80149ac:	4620      	mov	r0, r4
 80149ae:	f000 f8ad 	bl	8014b0c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80149b2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80149b6:	4629      	mov	r1, r5
 80149b8:	4620      	mov	r0, r4
 80149ba:	689b      	ldr	r3, [r3, #8]
 80149bc:	4798      	blx	r3
 80149be:	e7a4      	b.n	801490a <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80149c0:	064b      	lsls	r3, r1, #25
 80149c2:	d09a      	beq.n	80148fa <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80149c4:	f00e fde0 	bl	8023588 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80149c8:	2180      	movs	r1, #128	; 0x80
 80149ca:	4620      	mov	r0, r4
 80149cc:	f00e fddc 	bl	8023588 <USBD_LL_StallEP>
 80149d0:	e79b      	b.n	801490a <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80149d2:	0648      	lsls	r0, r1, #25
 80149d4:	d191      	bne.n	80148fa <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149d6:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 80149d8:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80149dc:	f04f 0202 	mov.w	r2, #2
 80149e0:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149e2:	bf4c      	ite	mi
 80149e4:	f104 0114 	addmi.w	r1, r4, #20
 80149e8:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 80149ec:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80149ee:	f000 f85d 	bl	8014aac <USBD_CtlSendData>
        break;
 80149f2:	e78a      	b.n	801490a <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80149f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	f43f af7f 	beq.w	80148fa <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149fc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8014a00:	1c5d      	adds	r5, r3, #1
 8014a02:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014a06:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8014a0a:	e7aa      	b.n	8014962 <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014a0c:	4620      	mov	r0, r4
 8014a0e:	f00e fdd7 	bl	80235c0 <USBD_LL_IsStallEP>
 8014a12:	b120      	cbz	r0, 8014a1e <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 8014a14:	2301      	movs	r3, #1
 8014a16:	e7a6      	b.n	8014966 <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014a18:	f00e fdc4 	bl	80235a4 <USBD_LL_ClearStallEP>
 8014a1c:	e7c6      	b.n	80149ac <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 8014a1e:	6028      	str	r0, [r5, #0]
 8014a20:	e7a2      	b.n	8014968 <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a22:	f00e fdb1 	bl	8023588 <USBD_LL_StallEP>
 8014a26:	e7b2      	b.n	801498e <USBD_StdEPReq+0xaa>

08014a28 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8014a28:	780b      	ldrb	r3, [r1, #0]
 8014a2a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8014a2c:	784b      	ldrb	r3, [r1, #1]
 8014a2e:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8014a30:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8014a32:	8043      	strh	r3, [r0, #2]
 8014a34:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8014a36:	8083      	strh	r3, [r0, #4]
 8014a38:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 8014a3a:	80c3      	strh	r3, [r0, #6]
}
 8014a3c:	4770      	bx	lr
 8014a3e:	bf00      	nop

08014a40 <USBD_CtlError>:
{
 8014a40:	b510      	push	{r4, lr}
 8014a42:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a44:	2180      	movs	r1, #128	; 0x80
 8014a46:	f00e fd9f 	bl	8023588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014a4a:	2100      	movs	r1, #0
 8014a4c:	4620      	mov	r0, r4
}
 8014a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8014a52:	f00e bd99 	b.w	8023588 <USBD_LL_StallEP>
 8014a56:	bf00      	nop

08014a58 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8014a58:	b318      	cbz	r0, 8014aa2 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8014a5a:	7803      	ldrb	r3, [r0, #0]
{
 8014a5c:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8014a5e:	b30b      	cbz	r3, 8014aa4 <USBD_GetString+0x4c>
 8014a60:	4604      	mov	r4, r0
 8014a62:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8014a66:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 8014a6a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8014a6e:	b2db      	uxtb	r3, r3
 8014a70:	2d00      	cmp	r5, #0
 8014a72:	d1f8      	bne.n	8014a66 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014a74:	3301      	adds	r3, #1
 8014a76:	005b      	lsls	r3, r3, #1
 8014a78:	b2dc      	uxtb	r4, r3
 8014a7a:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014a7c:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8014a7e:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014a80:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8014a82:	7804      	ldrb	r4, [r0, #0]
 8014a84:	b15c      	cbz	r4, 8014a9e <USBD_GetString+0x46>
  idx++;
 8014a86:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8014a88:	2500      	movs	r5, #0
    idx++;
 8014a8a:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8014a8c:	54cc      	strb	r4, [r1, r3]
    idx++;
 8014a8e:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8014a90:	b2d2      	uxtb	r2, r2
    idx++;
 8014a92:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8014a94:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8014a96:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8014a9a:	2c00      	cmp	r4, #0
 8014a9c:	d1f5      	bne.n	8014a8a <USBD_GetString+0x32>
}
 8014a9e:	bc30      	pop	{r4, r5}
 8014aa0:	4770      	bx	lr
 8014aa2:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8014aa4:	2402      	movs	r4, #2
 8014aa6:	4623      	mov	r3, r4
 8014aa8:	e7e7      	b.n	8014a7a <USBD_GetString+0x22>
 8014aaa:	bf00      	nop

08014aac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014aac:	b510      	push	{r4, lr}
 8014aae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014ab0:	2402      	movs	r4, #2
{
 8014ab2:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014ab4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014ab6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8014aba:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014abe:	f00e fda1 	bl	8023604 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	bd10      	pop	{r4, pc}
 8014ac6:	bf00      	nop

08014ac8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014ac8:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014aca:	2100      	movs	r1, #0
{
 8014acc:	b508      	push	{r3, lr}
 8014ace:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014ad0:	4662      	mov	r2, ip
 8014ad2:	f00e fd97 	bl	8023604 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014ad6:	2000      	movs	r0, #0
 8014ad8:	bd08      	pop	{r3, pc}
 8014ada:	bf00      	nop

08014adc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014adc:	b510      	push	{r4, lr}
 8014ade:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014ae0:	2403      	movs	r4, #3
{
 8014ae2:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014ae4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014ae6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8014aea:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014aee:	f00e fd97 	bl	8023620 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014af2:	2000      	movs	r0, #0
 8014af4:	bd10      	pop	{r4, pc}
 8014af6:	bf00      	nop

08014af8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014af8:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014afa:	2100      	movs	r1, #0
{
 8014afc:	b508      	push	{r3, lr}
 8014afe:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014b00:	4662      	mov	r2, ip
 8014b02:	f00e fd8d 	bl	8023620 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014b06:	2000      	movs	r0, #0
 8014b08:	bd08      	pop	{r3, pc}
 8014b0a:	bf00      	nop

08014b0c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014b0c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014b0e:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014b10:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014b12:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014b16:	461a      	mov	r2, r3
 8014b18:	4619      	mov	r1, r3
 8014b1a:	f00e fd73 	bl	8023604 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014b1e:	2000      	movs	r0, #0
 8014b20:	bd08      	pop	{r3, pc}
 8014b22:	bf00      	nop

08014b24 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014b24:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014b26:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014b28:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014b2a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014b2e:	461a      	mov	r2, r3
 8014b30:	4619      	mov	r1, r3
 8014b32:	f00e fd75 	bl	8023620 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014b36:	2000      	movs	r0, #0
 8014b38:	bd08      	pop	{r3, pc}
 8014b3a:	bf00      	nop

08014b3c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8014b3c:	4b10      	ldr	r3, [pc, #64]	; (8014b80 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014b3e:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8014b40:	7a5c      	ldrb	r4, [r3, #9]
 8014b42:	b9cc      	cbnz	r4, 8014b78 <FATFS_LinkDriver+0x3c>
 8014b44:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8014b46:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8014b4a:	7a5c      	ldrb	r4, [r3, #9]
 8014b4c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8014b4e:	7a5c      	ldrb	r4, [r3, #9]
 8014b50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014b54:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8014b56:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8014b58:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8014b5a:	441c      	add	r4, r3
 8014b5c:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8014b5e:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8014b60:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8014b62:	b2e4      	uxtb	r4, r4
 8014b64:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8014b66:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8014b68:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8014b6a:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8014b6c:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 8014b6e:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8014b70:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8014b74:	708b      	strb	r3, [r1, #2]
}
 8014b76:	4770      	bx	lr
  uint8_t ret = 1;
 8014b78:	2001      	movs	r0, #1
}
 8014b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b7e:	4770      	bx	lr
 8014b80:	20006008 	.word	0x20006008

08014b84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014b84:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8014b86:	f001 f9c9 	bl	8015f1c <vTaskStartScheduler>
  
  return osOK;
}
 8014b8a:	2000      	movs	r0, #0
 8014b8c:	bd08      	pop	{r3, pc}
 8014b8e:	bf00      	nop

08014b90 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014b90:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8014b94:	b10b      	cbz	r3, 8014b9a <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8014b96:	f001 ba23 	b.w	8015fe0 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8014b9a:	f001 ba1b 	b.w	8015fd4 <xTaskGetTickCount>
 8014b9e:	bf00      	nop

08014ba0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014ba0:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014ba2:	6944      	ldr	r4, [r0, #20]
{
 8014ba4:	b086      	sub	sp, #24
 8014ba6:	4684      	mov	ip, r0
 8014ba8:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014baa:	b1ac      	cbz	r4, 8014bd8 <osThreadCreate+0x38>
 8014bac:	6986      	ldr	r6, [r0, #24]
 8014bae:	b19e      	cbz	r6, 8014bd8 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014bb0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014bb4:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 8014bb8:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014bbc:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8014bc0:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 8014bc2:	bf14      	ite	ne
 8014bc4:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014bc8:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014bca:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8014bce:	9500      	str	r5, [sp, #0]
 8014bd0:	f001 f932 	bl	8015e38 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8014bd4:	b006      	add	sp, #24
 8014bd6:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014bd8:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 8014bdc:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 8014be0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8014be2:	bf14      	ite	ne
 8014be4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014be6:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014be8:	e9dc 1000 	ldrd	r1, r0, [ip]
 8014bec:	9400      	str	r4, [sp, #0]
 8014bee:	ac05      	add	r4, sp, #20
 8014bf0:	9401      	str	r4, [sp, #4]
 8014bf2:	f001 f961 	bl	8015eb8 <xTaskCreate>
 8014bf6:	2801      	cmp	r0, #1
  return handle;
 8014bf8:	bf0c      	ite	eq
 8014bfa:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8014bfc:	2000      	movne	r0, #0
}
 8014bfe:	b006      	add	sp, #24
 8014c00:	bd70      	pop	{r4, r5, r6, pc}
 8014c02:	bf00      	nop

08014c04 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014c04:	2801      	cmp	r0, #1
{
 8014c06:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014c08:	bf38      	it	cc
 8014c0a:	2001      	movcc	r0, #1
 8014c0c:	f001 fb48 	bl	80162a0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014c10:	2000      	movs	r0, #0
 8014c12:	bd08      	pop	{r3, pc}

08014c14 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8014c14:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8014c16:	6844      	ldr	r4, [r0, #4]
{
 8014c18:	b082      	sub	sp, #8
 8014c1a:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 8014c1c:	b16c      	cbz	r4, 8014c3a <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8014c1e:	f1a1 0201 	sub.w	r2, r1, #1
 8014c22:	6800      	ldr	r0, [r0, #0]
 8014c24:	2101      	movs	r1, #1
 8014c26:	fab2 f282 	clz	r2, r2
 8014c2a:	0952      	lsrs	r2, r2, #5
 8014c2c:	e9cd 0400 	strd	r0, r4, [sp]
 8014c30:	4808      	ldr	r0, [pc, #32]	; (8014c54 <osTimerCreate+0x40>)
 8014c32:	f001 fee9 	bl	8016a08 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8014c36:	b002      	add	sp, #8
 8014c38:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8014c3a:	f1a1 0201 	sub.w	r2, r1, #1
 8014c3e:	6804      	ldr	r4, [r0, #0]
 8014c40:	2101      	movs	r1, #1
 8014c42:	4804      	ldr	r0, [pc, #16]	; (8014c54 <osTimerCreate+0x40>)
 8014c44:	fab2 f282 	clz	r2, r2
 8014c48:	9400      	str	r4, [sp, #0]
 8014c4a:	0952      	lsrs	r2, r2, #5
 8014c4c:	f001 feac 	bl	80169a8 <xTimerCreate>
}
 8014c50:	b002      	add	sp, #8
 8014c52:	bd10      	pop	{r4, pc}
 8014c54:	08029460 	.word	0x08029460

08014c58 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8014c58:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8014c5a:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8014c5c:	b109      	cbz	r1, 8014c62 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8014c5e:	f000 bbc9 	b.w	80153f4 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8014c62:	f000 bbdf 	b.w	8015424 <xQueueCreateMutex>
 8014c66:	bf00      	nop

08014c68 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8014c68:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014c6a:	2400      	movs	r4, #0
{
 8014c6c:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8014c6e:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8014c70:	b310      	cbz	r0, 8014cb8 <osMutexWait+0x50>
 8014c72:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8014c76:	b933      	cbnz	r3, 8014c86 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8014c78:	f000 fd88 	bl	801578c <xQueueSemaphoreTake>
 8014c7c:	2801      	cmp	r0, #1
 8014c7e:	d118      	bne.n	8014cb2 <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8014c80:	2000      	movs	r0, #0
}
 8014c82:	b002      	add	sp, #8
 8014c84:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8014c86:	aa01      	add	r2, sp, #4
 8014c88:	4621      	mov	r1, r4
 8014c8a:	f000 fe63 	bl	8015954 <xQueueReceiveFromISR>
 8014c8e:	2801      	cmp	r0, #1
 8014c90:	d10f      	bne.n	8014cb2 <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 8014c92:	9b01      	ldr	r3, [sp, #4]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d0f3      	beq.n	8014c80 <osMutexWait+0x18>
 8014c98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ca0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014ca4:	f3bf 8f4f 	dsb	sy
 8014ca8:	f3bf 8f6f 	isb	sy
  return osOK;
 8014cac:	4620      	mov	r0, r4
}
 8014cae:	b002      	add	sp, #8
 8014cb0:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8014cb2:	20ff      	movs	r0, #255	; 0xff
}
 8014cb4:	b002      	add	sp, #8
 8014cb6:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8014cb8:	2080      	movs	r0, #128	; 0x80
}
 8014cba:	b002      	add	sp, #8
 8014cbc:	bd10      	pop	{r4, pc}
 8014cbe:	bf00      	nop

08014cc0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8014cc0:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8014cc2:	2400      	movs	r4, #0
{
 8014cc4:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 8014cc6:	9401      	str	r4, [sp, #4]
 8014cc8:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8014ccc:	b19b      	cbz	r3, 8014cf6 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8014cce:	a901      	add	r1, sp, #4
 8014cd0:	f000 fc34 	bl	801553c <xQueueGiveFromISR>
 8014cd4:	2801      	cmp	r0, #1
 8014cd6:	d114      	bne.n	8014d02 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014cd8:	9b01      	ldr	r3, [sp, #4]
 8014cda:	b1ab      	cbz	r3, 8014d08 <osMutexRelease+0x48>
 8014cdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ce4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014ce8:	f3bf 8f4f 	dsb	sy
 8014cec:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8014cf0:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8014cf2:	b002      	add	sp, #8
 8014cf4:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	4619      	mov	r1, r3
 8014cfa:	f000 faad 	bl	8015258 <xQueueGenericSend>
 8014cfe:	2801      	cmp	r0, #1
 8014d00:	d002      	beq.n	8014d08 <osMutexRelease+0x48>
    result = osErrorOS;
 8014d02:	20ff      	movs	r0, #255	; 0xff
}
 8014d04:	b002      	add	sp, #8
 8014d06:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8014d08:	2000      	movs	r0, #0
}
 8014d0a:	b002      	add	sp, #8
 8014d0c:	bd10      	pop	{r4, pc}
 8014d0e:	bf00      	nop

08014d10 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014d10:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8014d12:	6844      	ldr	r4, [r0, #4]
{ 
 8014d14:	b083      	sub	sp, #12
 8014d16:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8014d18:	b184      	cbz	r4, 8014d3c <osSemaphoreCreate+0x2c>
    if (count == 1) {
 8014d1a:	2901      	cmp	r1, #1
 8014d1c:	d003      	beq.n	8014d26 <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8014d1e:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8014d20:	4620      	mov	r0, r4
 8014d22:	b003      	add	sp, #12
 8014d24:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8014d26:	2200      	movs	r2, #0
 8014d28:	2503      	movs	r5, #3
 8014d2a:	4623      	mov	r3, r4
 8014d2c:	4611      	mov	r1, r2
 8014d2e:	9500      	str	r5, [sp, #0]
 8014d30:	f000 fa08 	bl	8015144 <xQueueGenericCreateStatic>
 8014d34:	4604      	mov	r4, r0
}
 8014d36:	4620      	mov	r0, r4
 8014d38:	b003      	add	sp, #12
 8014d3a:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8014d3c:	2901      	cmp	r1, #1
 8014d3e:	d1ef      	bne.n	8014d20 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8014d40:	4621      	mov	r1, r4
 8014d42:	2203      	movs	r2, #3
 8014d44:	f000 fa56 	bl	80151f4 <xQueueGenericCreate>
 8014d48:	4604      	mov	r4, r0
 8014d4a:	2800      	cmp	r0, #0
 8014d4c:	d0e8      	beq.n	8014d20 <osSemaphoreCreate+0x10>
 8014d4e:	2300      	movs	r3, #0
 8014d50:	461a      	mov	r2, r3
 8014d52:	4619      	mov	r1, r3
 8014d54:	f000 fa80 	bl	8015258 <xQueueGenericSend>
 8014d58:	e7e2      	b.n	8014d20 <osSemaphoreCreate+0x10>
 8014d5a:	bf00      	nop

08014d5c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8014d5c:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014d5e:	2400      	movs	r4, #0
{
 8014d60:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8014d62:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8014d64:	b310      	cbz	r0, 8014dac <osSemaphoreWait+0x50>
 8014d66:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8014d6a:	b933      	cbnz	r3, 8014d7a <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014d6c:	f000 fd0e 	bl	801578c <xQueueSemaphoreTake>
 8014d70:	2801      	cmp	r0, #1
 8014d72:	d118      	bne.n	8014da6 <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8014d74:	2000      	movs	r0, #0
}
 8014d76:	b002      	add	sp, #8
 8014d78:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014d7a:	aa01      	add	r2, sp, #4
 8014d7c:	4621      	mov	r1, r4
 8014d7e:	f000 fde9 	bl	8015954 <xQueueReceiveFromISR>
 8014d82:	2801      	cmp	r0, #1
 8014d84:	d10f      	bne.n	8014da6 <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 8014d86:	9b01      	ldr	r3, [sp, #4]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d0f3      	beq.n	8014d74 <osSemaphoreWait+0x18>
 8014d8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014d98:	f3bf 8f4f 	dsb	sy
 8014d9c:	f3bf 8f6f 	isb	sy
  return osOK;
 8014da0:	4620      	mov	r0, r4
}
 8014da2:	b002      	add	sp, #8
 8014da4:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8014da6:	20ff      	movs	r0, #255	; 0xff
}
 8014da8:	b002      	add	sp, #8
 8014daa:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8014dac:	2080      	movs	r0, #128	; 0x80
}
 8014dae:	b002      	add	sp, #8
 8014db0:	bd10      	pop	{r4, pc}
 8014db2:	bf00      	nop

08014db4 <osSemaphoreRelease>:
 8014db4:	b510      	push	{r4, lr}
 8014db6:	2400      	movs	r4, #0
 8014db8:	b082      	sub	sp, #8
 8014dba:	9401      	str	r4, [sp, #4]
 8014dbc:	f3ef 8305 	mrs	r3, IPSR
 8014dc0:	b19b      	cbz	r3, 8014dea <osSemaphoreRelease+0x36>
 8014dc2:	a901      	add	r1, sp, #4
 8014dc4:	f000 fbba 	bl	801553c <xQueueGiveFromISR>
 8014dc8:	2801      	cmp	r0, #1
 8014dca:	d114      	bne.n	8014df6 <osSemaphoreRelease+0x42>
 8014dcc:	9b01      	ldr	r3, [sp, #4]
 8014dce:	b1ab      	cbz	r3, 8014dfc <osSemaphoreRelease+0x48>
 8014dd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014dd8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014ddc:	f3bf 8f4f 	dsb	sy
 8014de0:	f3bf 8f6f 	isb	sy
 8014de4:	4620      	mov	r0, r4
 8014de6:	b002      	add	sp, #8
 8014de8:	bd10      	pop	{r4, pc}
 8014dea:	461a      	mov	r2, r3
 8014dec:	4619      	mov	r1, r3
 8014dee:	f000 fa33 	bl	8015258 <xQueueGenericSend>
 8014df2:	2801      	cmp	r0, #1
 8014df4:	d002      	beq.n	8014dfc <osSemaphoreRelease+0x48>
 8014df6:	20ff      	movs	r0, #255	; 0xff
 8014df8:	b002      	add	sp, #8
 8014dfa:	bd10      	pop	{r4, pc}
 8014dfc:	2000      	movs	r0, #0
 8014dfe:	b002      	add	sp, #8
 8014e00:	bd10      	pop	{r4, pc}
 8014e02:	bf00      	nop

08014e04 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014e04:	6882      	ldr	r2, [r0, #8]
 8014e06:	b15a      	cbz	r2, 8014e20 <osMessageCreate+0x1c>
 8014e08:	68c3      	ldr	r3, [r0, #12]
 8014e0a:	b14b      	cbz	r3, 8014e20 <osMessageCreate+0x1c>
{
 8014e0c:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014e0e:	2400      	movs	r4, #0
{
 8014e10:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014e12:	e9d0 0100 	ldrd	r0, r1, [r0]
 8014e16:	9400      	str	r4, [sp, #0]
 8014e18:	f000 f994 	bl	8015144 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014e1c:	b002      	add	sp, #8
 8014e1e:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014e20:	2200      	movs	r2, #0
 8014e22:	e9d0 0100 	ldrd	r0, r1, [r0]
 8014e26:	f000 b9e5 	b.w	80151f4 <xQueueGenericCreate>
 8014e2a:	bf00      	nop

08014e2c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014e2c:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8014e2e:	2400      	movs	r4, #0
{
 8014e30:	b084      	sub	sp, #16
 8014e32:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014e34:	9403      	str	r4, [sp, #12]
 8014e36:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8014e3a:	b15b      	cbz	r3, 8014e54 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014e3c:	4623      	mov	r3, r4
 8014e3e:	aa03      	add	r2, sp, #12
 8014e40:	a901      	add	r1, sp, #4
 8014e42:	f000 fb09 	bl	8015458 <xQueueGenericSendFromISR>
 8014e46:	2801      	cmp	r0, #1
 8014e48:	d10c      	bne.n	8014e64 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014e4a:	9b03      	ldr	r3, [sp, #12]
 8014e4c:	b96b      	cbnz	r3, 8014e6a <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8014e4e:	2000      	movs	r0, #0
}
 8014e50:	b004      	add	sp, #16
 8014e52:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014e54:	2a01      	cmp	r2, #1
 8014e56:	a901      	add	r1, sp, #4
 8014e58:	bf38      	it	cc
 8014e5a:	2201      	movcc	r2, #1
 8014e5c:	f000 f9fc 	bl	8015258 <xQueueGenericSend>
 8014e60:	2801      	cmp	r0, #1
 8014e62:	d0f4      	beq.n	8014e4e <osMessagePut+0x22>
      return osErrorOS;
 8014e64:	20ff      	movs	r0, #255	; 0xff
}
 8014e66:	b004      	add	sp, #16
 8014e68:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8014e6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e72:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014e76:	f3bf 8f4f 	dsb	sy
 8014e7a:	f3bf 8f6f 	isb	sy
  return osOK;
 8014e7e:	4620      	mov	r0, r4
}
 8014e80:	b004      	add	sp, #16
 8014e82:	bd10      	pop	{r4, pc}

08014e84 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014e84:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8014e86:	2600      	movs	r6, #0
{
 8014e88:	b084      	sub	sp, #16
 8014e8a:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 8014e8c:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 8014e90:	b379      	cbz	r1, 8014ef2 <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8014e92:	460b      	mov	r3, r1
 8014e94:	9600      	str	r6, [sp, #0]
 8014e96:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8014e9a:	b991      	cbnz	r1, 8014ec2 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014e9c:	a902      	add	r1, sp, #8
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	4615      	mov	r5, r2
 8014ea2:	f000 fbab 	bl	80155fc <xQueueReceive>
 8014ea6:	2801      	cmp	r0, #1
 8014ea8:	d02d      	beq.n	8014f06 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014eaa:	2d00      	cmp	r5, #0
 8014eac:	bf18      	it	ne
 8014eae:	2540      	movne	r5, #64	; 0x40
 8014eb0:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 8014eb2:	ab04      	add	r3, sp, #16
 8014eb4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014eb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	b004      	add	sp, #16
 8014ec0:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014ec2:	466a      	mov	r2, sp
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	a902      	add	r1, sp, #8
 8014ec8:	f000 fd44 	bl	8015954 <xQueueReceiveFromISR>
      event.status = osOK;
 8014ecc:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 8014ece:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8014ed0:	bf0c      	ite	eq
 8014ed2:	2210      	moveq	r2, #16
 8014ed4:	2200      	movne	r2, #0
 8014ed6:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d0ea      	beq.n	8014eb2 <osMessageGet+0x2e>
 8014edc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014ee8:	f3bf 8f4f 	dsb	sy
 8014eec:	f3bf 8f6f 	isb	sy
 8014ef0:	e7df      	b.n	8014eb2 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 8014ef2:	2380      	movs	r3, #128	; 0x80
 8014ef4:	9301      	str	r3, [sp, #4]
    return event;
 8014ef6:	ab04      	add	r3, sp, #16
 8014ef8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014efc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014f00:	4620      	mov	r0, r4
 8014f02:	b004      	add	sp, #16
 8014f04:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8014f06:	2310      	movs	r3, #16
 8014f08:	9301      	str	r3, [sp, #4]
 8014f0a:	e7d2      	b.n	8014eb2 <osMessageGet+0x2e>

08014f0c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f0c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014f10:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014f14:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014f16:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014f18:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f1a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f1c:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014f20:	4770      	bx	lr
 8014f22:	bf00      	nop

08014f24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014f24:	2300      	movs	r3, #0
 8014f26:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014f28:	4770      	bx	lr
 8014f2a:	bf00      	nop

08014f2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8014f2c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8014f2e:	6802      	ldr	r2, [r0, #0]
{
 8014f30:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014f32:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8014f34:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8014f36:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014f38:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014f3a:	689c      	ldr	r4, [r3, #8]
 8014f3c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014f3e:	6099      	str	r1, [r3, #8]
}
 8014f40:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8014f44:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8014f46:	6002      	str	r2, [r0, #0]
}
 8014f48:	4770      	bx	lr
 8014f4a:	bf00      	nop

08014f4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014f4c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014f4e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014f50:	1c6b      	adds	r3, r5, #1
 8014f52:	d010      	beq.n	8014f76 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014f54:	f100 0308 	add.w	r3, r0, #8
 8014f58:	461c      	mov	r4, r3
 8014f5a:	685b      	ldr	r3, [r3, #4]
 8014f5c:	681a      	ldr	r2, [r3, #0]
 8014f5e:	42aa      	cmp	r2, r5
 8014f60:	d9fa      	bls.n	8014f58 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8014f62:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8014f64:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8014f66:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014f68:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014f6a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8014f6c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8014f6e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8014f70:	6002      	str	r2, [r0, #0]
}
 8014f72:	bc30      	pop	{r4, r5}
 8014f74:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8014f76:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8014f78:	6863      	ldr	r3, [r4, #4]
 8014f7a:	e7f2      	b.n	8014f62 <vListInsert+0x16>

08014f7c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014f7c:	6903      	ldr	r3, [r0, #16]
{
 8014f7e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014f80:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014f82:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8014f86:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8014f88:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014f8c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014f8e:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8014f90:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014f94:	bf08      	it	eq
 8014f96:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8014f98:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8014f9a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8014f9c:	3a01      	subs	r2, #1
 8014f9e:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8014fa0:	6818      	ldr	r0, [r3, #0]
}
 8014fa2:	4770      	bx	lr

08014fa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014fa4:	b570      	push	{r4, r5, r6, lr}
 8014fa6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014fa8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8014faa:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014fac:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014fae:	b92a      	cbnz	r2, 8014fbc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014fb0:	6805      	ldr	r5, [r0, #0]
 8014fb2:	b365      	cbz	r5, 801500e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014fb4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8014fb6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014fb8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8014fba:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8014fbc:	b97d      	cbnz	r5, 8014fde <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014fbe:	6840      	ldr	r0, [r0, #4]
 8014fc0:	f00e fdd0 	bl	8023b64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014fc4:	6863      	ldr	r3, [r4, #4]
 8014fc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014fc8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014fca:	68a2      	ldr	r2, [r4, #8]
 8014fcc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014fce:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014fd0:	d319      	bcc.n	8015006 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014fd2:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014fd4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8014fd6:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014fd8:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014fda:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8014fdc:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014fde:	68c0      	ldr	r0, [r0, #12]
 8014fe0:	f00e fdc0 	bl	8023b64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014fe4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014fe6:	68e3      	ldr	r3, [r4, #12]
 8014fe8:	4251      	negs	r1, r2
 8014fea:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014fec:	6822      	ldr	r2, [r4, #0]
 8014fee:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014ff0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014ff2:	d202      	bcs.n	8014ffa <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014ff4:	68a3      	ldr	r3, [r4, #8]
 8014ff6:	440b      	add	r3, r1
 8014ff8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8014ffa:	2d02      	cmp	r5, #2
 8014ffc:	d00d      	beq.n	801501a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014ffe:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8015000:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015002:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8015004:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015006:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8015008:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801500a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 801500c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801500e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015010:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015012:	f001 fadb 	bl	80165cc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015016:	60a5      	str	r5, [r4, #8]
 8015018:	e7ce      	b.n	8014fb8 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801501a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 801501c:	f04f 0000 	mov.w	r0, #0
 8015020:	bf38      	it	cc
 8015022:	2601      	movcc	r6, #1
 8015024:	e7c8      	b.n	8014fb8 <prvCopyDataToQueue+0x14>
 8015026:	bf00      	nop

08015028 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015028:	b570      	push	{r4, r5, r6, lr}
 801502a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801502c:	f001 ff6a 	bl	8016f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015030:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8015034:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015036:	2c00      	cmp	r4, #0
 8015038:	dd14      	ble.n	8015064 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801503a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 801503e:	e003      	b.n	8015048 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015040:	1e63      	subs	r3, r4, #1
 8015042:	b2da      	uxtb	r2, r3
 8015044:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015046:	b16a      	cbz	r2, 8015064 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015048:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801504a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801504c:	b153      	cbz	r3, 8015064 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801504e:	f001 f9a5 	bl	801639c <xTaskRemoveFromEventList>
 8015052:	2800      	cmp	r0, #0
 8015054:	d0f4      	beq.n	8015040 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8015056:	f001 fa45 	bl	80164e4 <vTaskMissedYield>
			--cTxLock;
 801505a:	1e63      	subs	r3, r4, #1
 801505c:	b2da      	uxtb	r2, r3
 801505e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015060:	2a00      	cmp	r2, #0
 8015062:	d1f1      	bne.n	8015048 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015064:	23ff      	movs	r3, #255	; 0xff
 8015066:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801506a:	f001 ff71 	bl	8016f50 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801506e:	f001 ff49 	bl	8016f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015072:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8015076:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015078:	2c00      	cmp	r4, #0
 801507a:	dd14      	ble.n	80150a6 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801507c:	f105 0610 	add.w	r6, r5, #16
 8015080:	e003      	b.n	801508a <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015082:	1e63      	subs	r3, r4, #1
 8015084:	b2da      	uxtb	r2, r3
 8015086:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015088:	b16a      	cbz	r2, 80150a6 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801508a:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801508c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801508e:	b153      	cbz	r3, 80150a6 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015090:	f001 f984 	bl	801639c <xTaskRemoveFromEventList>
 8015094:	2800      	cmp	r0, #0
 8015096:	d0f4      	beq.n	8015082 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8015098:	f001 fa24 	bl	80164e4 <vTaskMissedYield>
				--cRxLock;
 801509c:	1e63      	subs	r3, r4, #1
 801509e:	b2da      	uxtb	r2, r3
 80150a0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80150a2:	2a00      	cmp	r2, #0
 80150a4:	d1f1      	bne.n	801508a <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80150a6:	23ff      	movs	r3, #255	; 0xff
 80150a8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80150ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80150b0:	f001 bf4e 	b.w	8016f50 <vPortExitCritical>

080150b4 <xQueueGenericReset>:
{
 80150b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80150b6:	b1e0      	cbz	r0, 80150f2 <xQueueGenericReset+0x3e>
 80150b8:	4604      	mov	r4, r0
 80150ba:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80150bc:	f001 ff22 	bl	8016f04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150c0:	6822      	ldr	r2, [r4, #0]
 80150c2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80150c6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150c8:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150cc:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150ce:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150d0:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150d2:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80150d4:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80150d6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150d8:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80150da:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80150dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80150e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80150e4:	b985      	cbnz	r5, 8015108 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80150e6:	6923      	ldr	r3, [r4, #16]
 80150e8:	b9d3      	cbnz	r3, 8015120 <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 80150ea:	f001 ff31 	bl	8016f50 <vPortExitCritical>
}
 80150ee:	2001      	movs	r0, #1
 80150f0:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80150f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80150f6:	b672      	cpsid	i
 80150f8:	f383 8811 	msr	BASEPRI, r3
 80150fc:	f3bf 8f6f 	isb	sy
 8015100:	f3bf 8f4f 	dsb	sy
 8015104:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015106:	e7fe      	b.n	8015106 <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015108:	f104 0010 	add.w	r0, r4, #16
 801510c:	f7ff fefe 	bl	8014f0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015110:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015114:	f7ff fefa 	bl	8014f0c <vListInitialise>
	taskEXIT_CRITICAL();
 8015118:	f001 ff1a 	bl	8016f50 <vPortExitCritical>
}
 801511c:	2001      	movs	r0, #1
 801511e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015120:	f104 0010 	add.w	r0, r4, #16
 8015124:	f001 f93a 	bl	801639c <xTaskRemoveFromEventList>
 8015128:	2800      	cmp	r0, #0
 801512a:	d0de      	beq.n	80150ea <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 801512c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015134:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015138:	f3bf 8f4f 	dsb	sy
 801513c:	f3bf 8f6f 	isb	sy
 8015140:	e7d3      	b.n	80150ea <xQueueGenericReset+0x36>
 8015142:	bf00      	nop

08015144 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015144:	b950      	cbnz	r0, 801515c <xQueueGenericCreateStatic+0x18>
 8015146:	f04f 0330 	mov.w	r3, #48	; 0x30
 801514a:	b672      	cpsid	i
 801514c:	f383 8811 	msr	BASEPRI, r3
 8015150:	f3bf 8f6f 	isb	sy
 8015154:	f3bf 8f4f 	dsb	sy
 8015158:	b662      	cpsie	i
 801515a:	e7fe      	b.n	801515a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 801515c:	b17b      	cbz	r3, 801517e <xQueueGenericCreateStatic+0x3a>
	{
 801515e:	b510      	push	{r4, lr}
 8015160:	460c      	mov	r4, r1
 8015162:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015164:	b33a      	cbz	r2, 80151b6 <xQueueGenericCreateStatic+0x72>
 8015166:	b9a9      	cbnz	r1, 8015194 <xQueueGenericCreateStatic+0x50>
 8015168:	f04f 0330 	mov.w	r3, #48	; 0x30
 801516c:	b672      	cpsid	i
 801516e:	f383 8811 	msr	BASEPRI, r3
 8015172:	f3bf 8f6f 	isb	sy
 8015176:	f3bf 8f4f 	dsb	sy
 801517a:	b662      	cpsie	i
 801517c:	e7fe      	b.n	801517c <xQueueGenericCreateStatic+0x38>
 801517e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015182:	b672      	cpsid	i
 8015184:	f383 8811 	msr	BASEPRI, r3
 8015188:	f3bf 8f6f 	isb	sy
 801518c:	f3bf 8f4f 	dsb	sy
 8015190:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8015192:	e7fe      	b.n	8015192 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015194:	b17a      	cbz	r2, 80151b6 <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015196:	2148      	movs	r1, #72	; 0x48
 8015198:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 801519a:	9903      	ldr	r1, [sp, #12]
 801519c:	2948      	cmp	r1, #72	; 0x48
 801519e:	d017      	beq.n	80151d0 <xQueueGenericCreateStatic+0x8c>
 80151a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80151a4:	b672      	cpsid	i
 80151a6:	f383 8811 	msr	BASEPRI, r3
 80151aa:	f3bf 8f6f 	isb	sy
 80151ae:	f3bf 8f4f 	dsb	sy
 80151b2:	b662      	cpsie	i
 80151b4:	e7fe      	b.n	80151b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80151b6:	2c00      	cmp	r4, #0
 80151b8:	d0ed      	beq.n	8015196 <xQueueGenericCreateStatic+0x52>
 80151ba:	f04f 0330 	mov.w	r3, #48	; 0x30
 80151be:	b672      	cpsid	i
 80151c0:	f383 8811 	msr	BASEPRI, r3
 80151c4:	f3bf 8f6f 	isb	sy
 80151c8:	f3bf 8f4f 	dsb	sy
 80151cc:	b662      	cpsie	i
 80151ce:	e7fe      	b.n	80151ce <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80151d0:	2c00      	cmp	r4, #0
 80151d2:	bf08      	it	eq
 80151d4:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80151d6:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 80151d8:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80151da:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80151dc:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 80151e0:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80151e2:	641c      	str	r4, [r3, #64]	; 0x40
 80151e4:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80151e6:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80151e8:	f7ff ff64 	bl	80150b4 <xQueueGenericReset>
	}
 80151ec:	9b01      	ldr	r3, [sp, #4]
 80151ee:	4618      	mov	r0, r3
 80151f0:	b004      	add	sp, #16
 80151f2:	bd10      	pop	{r4, pc}

080151f4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80151f4:	b950      	cbnz	r0, 801520c <xQueueGenericCreate+0x18>
 80151f6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80151fa:	b672      	cpsid	i
 80151fc:	f383 8811 	msr	BASEPRI, r3
 8015200:	f3bf 8f6f 	isb	sy
 8015204:	f3bf 8f4f 	dsb	sy
 8015208:	b662      	cpsie	i
 801520a:	e7fe      	b.n	801520a <xQueueGenericCreate+0x16>
	{
 801520c:	b570      	push	{r4, r5, r6, lr}
 801520e:	4605      	mov	r5, r0
 8015210:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 8015212:	b979      	cbnz	r1, 8015234 <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015214:	2048      	movs	r0, #72	; 0x48
 8015216:	f001 ffdf 	bl	80171d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801521a:	4604      	mov	r4, r0
 801521c:	b1c0      	cbz	r0, 8015250 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801521e:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015222:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015224:	2101      	movs	r1, #1
 8015226:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8015228:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801522c:	f7ff ff42 	bl	80150b4 <xQueueGenericReset>
	}
 8015230:	4620      	mov	r0, r4
 8015232:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015234:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015238:	3048      	adds	r0, #72	; 0x48
 801523a:	f001 ffcd 	bl	80171d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801523e:	4604      	mov	r4, r0
 8015240:	b130      	cbz	r0, 8015250 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015242:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015244:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015248:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801524c:	6003      	str	r3, [r0, #0]
 801524e:	e7e9      	b.n	8015224 <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015250:	2400      	movs	r4, #0
	}
 8015252:	4620      	mov	r0, r4
 8015254:	bd70      	pop	{r4, r5, r6, pc}
 8015256:	bf00      	nop

08015258 <xQueueGenericSend>:
{
 8015258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801525c:	b085      	sub	sp, #20
 801525e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8015260:	2800      	cmp	r0, #0
 8015262:	f000 8083 	beq.w	801536c <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015266:	460f      	mov	r7, r1
 8015268:	4604      	mov	r4, r0
 801526a:	461e      	mov	r6, r3
 801526c:	2900      	cmp	r1, #0
 801526e:	d06b      	beq.n	8015348 <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015270:	2e02      	cmp	r6, #2
 8015272:	d10d      	bne.n	8015290 <xQueueGenericSend+0x38>
 8015274:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015276:	2b01      	cmp	r3, #1
 8015278:	d00a      	beq.n	8015290 <xQueueGenericSend+0x38>
 801527a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801527e:	b672      	cpsid	i
 8015280:	f383 8811 	msr	BASEPRI, r3
 8015284:	f3bf 8f6f 	isb	sy
 8015288:	f3bf 8f4f 	dsb	sy
 801528c:	b662      	cpsie	i
 801528e:	e7fe      	b.n	801528e <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015290:	f001 f934 	bl	80164fc <xTaskGetSchedulerState>
 8015294:	2800      	cmp	r0, #0
 8015296:	d074      	beq.n	8015382 <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015298:	f1a6 0802 	sub.w	r8, r6, #2
 801529c:	2500      	movs	r5, #0
 801529e:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 80152a2:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80152a4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80152a8:	e007      	b.n	80152ba <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80152aa:	f001 fe51 	bl	8016f50 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80152ae:	4620      	mov	r0, r4
 80152b0:	f7ff feba 	bl	8015028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80152b4:	f000 ffe2 	bl	801627c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80152b8:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80152ba:	f001 fe23 	bl	8016f04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80152be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80152c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80152c2:	4290      	cmp	r0, r2
 80152c4:	d36b      	bcc.n	801539e <xQueueGenericSend+0x146>
 80152c6:	f1b8 0f00 	cmp.w	r8, #0
 80152ca:	d168      	bne.n	801539e <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 80152cc:	9b01      	ldr	r3, [sp, #4]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d07d      	beq.n	80153ce <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 80152d2:	2d00      	cmp	r5, #0
 80152d4:	d046      	beq.n	8015364 <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 80152d6:	f001 fe3b 	bl	8016f50 <vPortExitCritical>
		vTaskSuspendAll();
 80152da:	f000 fe73 	bl	8015fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80152de:	f001 fe11 	bl	8016f04 <vPortEnterCritical>
 80152e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80152e6:	2bff      	cmp	r3, #255	; 0xff
 80152e8:	d101      	bne.n	80152ee <xQueueGenericSend+0x96>
 80152ea:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80152ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80152f2:	2bff      	cmp	r3, #255	; 0xff
 80152f4:	d101      	bne.n	80152fa <xQueueGenericSend+0xa2>
 80152f6:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80152fa:	f001 fe29 	bl	8016f50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80152fe:	a901      	add	r1, sp, #4
 8015300:	a802      	add	r0, sp, #8
 8015302:	f001 f8a3 	bl	801644c <xTaskCheckForTimeOut>
 8015306:	2800      	cmp	r0, #0
 8015308:	d165      	bne.n	80153d6 <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 801530a:	f001 fdfb 	bl	8016f04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801530e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015310:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015312:	429a      	cmp	r2, r3
 8015314:	d1c9      	bne.n	80152aa <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 8015316:	f001 fe1b 	bl	8016f50 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801531a:	9901      	ldr	r1, [sp, #4]
 801531c:	f104 0010 	add.w	r0, r4, #16
 8015320:	f001 f800 	bl	8016324 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015324:	4620      	mov	r0, r4
 8015326:	f7ff fe7f 	bl	8015028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801532a:	f000 ffa7 	bl	801627c <xTaskResumeAll>
 801532e:	2800      	cmp	r0, #0
 8015330:	d1c2      	bne.n	80152b8 <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 8015332:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801533a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801533e:	f3bf 8f4f 	dsb	sy
 8015342:	f3bf 8f6f 	isb	sy
 8015346:	e7b7      	b.n	80152b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015348:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801534a:	2b00      	cmp	r3, #0
 801534c:	d090      	beq.n	8015270 <xQueueGenericSend+0x18>
 801534e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015352:	b672      	cpsid	i
 8015354:	f383 8811 	msr	BASEPRI, r3
 8015358:	f3bf 8f6f 	isb	sy
 801535c:	f3bf 8f4f 	dsb	sy
 8015360:	b662      	cpsie	i
 8015362:	e7fe      	b.n	8015362 <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015364:	a802      	add	r0, sp, #8
 8015366:	f001 f865 	bl	8016434 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801536a:	e7b4      	b.n	80152d6 <xQueueGenericSend+0x7e>
 801536c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015370:	b672      	cpsid	i
 8015372:	f383 8811 	msr	BASEPRI, r3
 8015376:	f3bf 8f6f 	isb	sy
 801537a:	f3bf 8f4f 	dsb	sy
 801537e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015380:	e7fe      	b.n	8015380 <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015382:	9b01      	ldr	r3, [sp, #4]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d087      	beq.n	8015298 <xQueueGenericSend+0x40>
 8015388:	f04f 0330 	mov.w	r3, #48	; 0x30
 801538c:	b672      	cpsid	i
 801538e:	f383 8811 	msr	BASEPRI, r3
 8015392:	f3bf 8f6f 	isb	sy
 8015396:	f3bf 8f4f 	dsb	sy
 801539a:	b662      	cpsie	i
 801539c:	e7fe      	b.n	801539c <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801539e:	4632      	mov	r2, r6
 80153a0:	4639      	mov	r1, r7
 80153a2:	4620      	mov	r0, r4
 80153a4:	f7ff fdfe 	bl	8014fa4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153aa:	b9db      	cbnz	r3, 80153e4 <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 80153ac:	b148      	cbz	r0, 80153c2 <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 80153ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80153b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80153ba:	f3bf 8f4f 	dsb	sy
 80153be:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80153c2:	f001 fdc5 	bl	8016f50 <vPortExitCritical>
				return pdPASS;
 80153c6:	2001      	movs	r0, #1
}
 80153c8:	b005      	add	sp, #20
 80153ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 80153ce:	f001 fdbf 	bl	8016f50 <vPortExitCritical>
					return errQUEUE_FULL;
 80153d2:	4640      	mov	r0, r8
 80153d4:	e7f8      	b.n	80153c8 <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 80153d6:	4620      	mov	r0, r4
 80153d8:	f7ff fe26 	bl	8015028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80153dc:	f000 ff4e 	bl	801627c <xTaskResumeAll>
			return errQUEUE_FULL;
 80153e0:	2000      	movs	r0, #0
 80153e2:	e7f1      	b.n	80153c8 <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80153e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80153e8:	f000 ffd8 	bl	801639c <xTaskRemoveFromEventList>
 80153ec:	2800      	cmp	r0, #0
 80153ee:	d0e8      	beq.n	80153c2 <xQueueGenericSend+0x16a>
 80153f0:	e7dd      	b.n	80153ae <xQueueGenericSend+0x156>
 80153f2:	bf00      	nop

080153f4 <xQueueCreateMutexStatic>:
	{
 80153f4:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80153f6:	2200      	movs	r2, #0
	{
 80153f8:	4604      	mov	r4, r0
 80153fa:	b082      	sub	sp, #8
 80153fc:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80153fe:	2001      	movs	r0, #1
 8015400:	4611      	mov	r1, r2
 8015402:	9400      	str	r4, [sp, #0]
 8015404:	f7ff fe9e 	bl	8015144 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8015408:	4604      	mov	r4, r0
 801540a:	b138      	cbz	r0, 801541c <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801540c:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801540e:	461a      	mov	r2, r3
 8015410:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015412:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015414:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015416:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015418:	f7ff ff1e 	bl	8015258 <xQueueGenericSend>
	}
 801541c:	4620      	mov	r0, r4
 801541e:	b002      	add	sp, #8
 8015420:	bd10      	pop	{r4, pc}
 8015422:	bf00      	nop

08015424 <xQueueCreateMutex>:
	{
 8015424:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015426:	2048      	movs	r0, #72	; 0x48
 8015428:	f001 fed6 	bl	80171d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801542c:	4604      	mov	r4, r0
 801542e:	b188      	cbz	r0, 8015454 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015430:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8015432:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015434:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015436:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 801543a:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801543e:	f7ff fe39 	bl	80150b4 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015442:	462b      	mov	r3, r5
 8015444:	462a      	mov	r2, r5
 8015446:	4629      	mov	r1, r5
 8015448:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801544a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801544c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801544e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015450:	f7ff ff02 	bl	8015258 <xQueueGenericSend>
	}
 8015454:	4620      	mov	r0, r4
 8015456:	bd38      	pop	{r3, r4, r5, pc}

08015458 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8015458:	2800      	cmp	r0, #0
 801545a:	d053      	beq.n	8015504 <xQueueGenericSendFromISR+0xac>
{
 801545c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015460:	460e      	mov	r6, r1
 8015462:	4604      	mov	r4, r0
 8015464:	4617      	mov	r7, r2
 8015466:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015468:	b359      	cbz	r1, 80154c2 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801546a:	2d02      	cmp	r5, #2
 801546c:	d10d      	bne.n	801548a <xQueueGenericSendFromISR+0x32>
 801546e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015470:	2b01      	cmp	r3, #1
 8015472:	d00a      	beq.n	801548a <xQueueGenericSendFromISR+0x32>
 8015474:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015478:	b672      	cpsid	i
 801547a:	f383 8811 	msr	BASEPRI, r3
 801547e:	f3bf 8f6f 	isb	sy
 8015482:	f3bf 8f4f 	dsb	sy
 8015486:	b662      	cpsie	i
 8015488:	e7fe      	b.n	8015488 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801548a:	f001 fe41 	bl	8017110 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801548e:	f3ef 8811 	mrs	r8, BASEPRI
 8015492:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015496:	b672      	cpsid	i
 8015498:	f383 8811 	msr	BASEPRI, r3
 801549c:	f3bf 8f6f 	isb	sy
 80154a0:	f3bf 8f4f 	dsb	sy
 80154a4:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80154a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80154a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80154aa:	429a      	cmp	r2, r3
 80154ac:	d317      	bcc.n	80154de <xQueueGenericSendFromISR+0x86>
 80154ae:	f1a5 0002 	sub.w	r0, r5, #2
 80154b2:	fab0 f080 	clz	r0, r0
 80154b6:	0940      	lsrs	r0, r0, #5
 80154b8:	b988      	cbnz	r0, 80154de <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80154ba:	f388 8811 	msr	BASEPRI, r8
}
 80154be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80154c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d0d0      	beq.n	801546a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 80154c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80154cc:	b672      	cpsid	i
 80154ce:	f383 8811 	msr	BASEPRI, r3
 80154d2:	f3bf 8f6f 	isb	sy
 80154d6:	f3bf 8f4f 	dsb	sy
 80154da:	b662      	cpsie	i
 80154dc:	e7fe      	b.n	80154dc <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80154de:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 80154e0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80154e4:	4631      	mov	r1, r6
 80154e6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80154e8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80154ea:	f7ff fd5b 	bl	8014fa4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80154ee:	1c6b      	adds	r3, r5, #1
 80154f0:	d013      	beq.n	801551a <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80154f2:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 80154f4:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80154f6:	b25b      	sxtb	r3, r3
 80154f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 80154fc:	f388 8811 	msr	BASEPRI, r8
}
 8015500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8015504:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015508:	b672      	cpsid	i
 801550a:	f383 8811 	msr	BASEPRI, r3
 801550e:	f3bf 8f6f 	isb	sy
 8015512:	f3bf 8f4f 	dsb	sy
 8015516:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015518:	e7fe      	b.n	8015518 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801551a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801551c:	b90b      	cbnz	r3, 8015522 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 801551e:	2001      	movs	r0, #1
 8015520:	e7cb      	b.n	80154ba <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015522:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015526:	f000 ff39 	bl	801639c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 801552a:	2800      	cmp	r0, #0
 801552c:	d0f7      	beq.n	801551e <xQueueGenericSendFromISR+0xc6>
 801552e:	2f00      	cmp	r7, #0
 8015530:	d0f5      	beq.n	801551e <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015532:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015534:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015536:	603b      	str	r3, [r7, #0]
 8015538:	e7bf      	b.n	80154ba <xQueueGenericSendFromISR+0x62>
 801553a:	bf00      	nop

0801553c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 801553c:	b380      	cbz	r0, 80155a0 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 801553e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8015540:	b570      	push	{r4, r5, r6, lr}
 8015542:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8015544:	b153      	cbz	r3, 801555c <xQueueGiveFromISR+0x20>
 8015546:	f04f 0330 	mov.w	r3, #48	; 0x30
 801554a:	b672      	cpsid	i
 801554c:	f383 8811 	msr	BASEPRI, r3
 8015550:	f3bf 8f6f 	isb	sy
 8015554:	f3bf 8f4f 	dsb	sy
 8015558:	b662      	cpsie	i
 801555a:	e7fe      	b.n	801555a <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801555c:	6803      	ldr	r3, [r0, #0]
 801555e:	460d      	mov	r5, r1
 8015560:	b34b      	cbz	r3, 80155b6 <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015562:	f001 fdd5 	bl	8017110 <vPortValidateInterruptPriority>
	__asm volatile
 8015566:	f3ef 8611 	mrs	r6, BASEPRI
 801556a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801556e:	b672      	cpsid	i
 8015570:	f383 8811 	msr	BASEPRI, r3
 8015574:	f3bf 8f6f 	isb	sy
 8015578:	f3bf 8f4f 	dsb	sy
 801557c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801557e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015580:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015582:	429a      	cmp	r2, r3
 8015584:	d925      	bls.n	80155d2 <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8015586:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801558a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 801558c:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801558e:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8015590:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8015592:	d022      	beq.n	80155da <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015594:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8015596:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015598:	b25b      	sxtb	r3, r3
 801559a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801559e:	e019      	b.n	80155d4 <xQueueGiveFromISR+0x98>
	__asm volatile
 80155a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80155a4:	b672      	cpsid	i
 80155a6:	f383 8811 	msr	BASEPRI, r3
 80155aa:	f3bf 8f6f 	isb	sy
 80155ae:	f3bf 8f4f 	dsb	sy
 80155b2:	b662      	cpsie	i
	configASSERT( pxQueue );
 80155b4:	e7fe      	b.n	80155b4 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80155b6:	6883      	ldr	r3, [r0, #8]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d0d2      	beq.n	8015562 <xQueueGiveFromISR+0x26>
 80155bc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80155c0:	b672      	cpsid	i
 80155c2:	f383 8811 	msr	BASEPRI, r3
 80155c6:	f3bf 8f6f 	isb	sy
 80155ca:	f3bf 8f4f 	dsb	sy
 80155ce:	b662      	cpsie	i
 80155d0:	e7fe      	b.n	80155d0 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 80155d2:	2000      	movs	r0, #0
	__asm volatile
 80155d4:	f386 8811 	msr	BASEPRI, r6
}
 80155d8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80155da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155dc:	b90b      	cbnz	r3, 80155e2 <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 80155de:	2001      	movs	r0, #1
 80155e0:	e7f8      	b.n	80155d4 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80155e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80155e6:	f000 fed9 	bl	801639c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80155ea:	2d00      	cmp	r5, #0
 80155ec:	d0f7      	beq.n	80155de <xQueueGiveFromISR+0xa2>
 80155ee:	2800      	cmp	r0, #0
 80155f0:	d0f5      	beq.n	80155de <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80155f2:	2301      	movs	r3, #1
			xReturn = pdPASS;
 80155f4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 80155f6:	602b      	str	r3, [r5, #0]
 80155f8:	e7ec      	b.n	80155d4 <xQueueGiveFromISR+0x98>
 80155fa:	bf00      	nop

080155fc <xQueueReceive>:
{
 80155fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015600:	b085      	sub	sp, #20
 8015602:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015604:	2800      	cmp	r0, #0
 8015606:	f000 80a4 	beq.w	8015752 <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801560a:	460d      	mov	r5, r1
 801560c:	4604      	mov	r4, r0
 801560e:	2900      	cmp	r1, #0
 8015610:	d047      	beq.n	80156a2 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015612:	f000 ff73 	bl	80164fc <xTaskGetSchedulerState>
 8015616:	2800      	cmp	r0, #0
 8015618:	d051      	beq.n	80156be <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 801561a:	f001 fc73 	bl	8016f04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801561e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015620:	2e00      	cmp	r6, #0
 8015622:	d16b      	bne.n	80156fc <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015624:	9b01      	ldr	r3, [sp, #4]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d035      	beq.n	8015696 <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 801562a:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801562c:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8015630:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015634:	a802      	add	r0, sp, #8
 8015636:	f000 fefd 	bl	8016434 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801563a:	f001 fc89 	bl	8016f50 <vPortExitCritical>
		vTaskSuspendAll();
 801563e:	f000 fcc1 	bl	8015fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015642:	f001 fc5f 	bl	8016f04 <vPortEnterCritical>
 8015646:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801564a:	2bff      	cmp	r3, #255	; 0xff
 801564c:	d101      	bne.n	8015652 <xQueueReceive+0x56>
 801564e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8015652:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015656:	2bff      	cmp	r3, #255	; 0xff
 8015658:	d101      	bne.n	801565e <xQueueReceive+0x62>
 801565a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801565e:	f001 fc77 	bl	8016f50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015662:	a901      	add	r1, sp, #4
 8015664:	a802      	add	r0, sp, #8
 8015666:	f000 fef1 	bl	801644c <xTaskCheckForTimeOut>
 801566a:	2800      	cmp	r0, #0
 801566c:	d135      	bne.n	80156da <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 801566e:	f001 fc49 	bl	8016f04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015674:	2b00      	cmp	r3, #0
 8015676:	d056      	beq.n	8015726 <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 8015678:	f001 fc6a 	bl	8016f50 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 801567c:	4620      	mov	r0, r4
 801567e:	f7ff fcd3 	bl	8015028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015682:	f000 fdfb 	bl	801627c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8015686:	f001 fc3d 	bl	8016f04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801568a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801568c:	2e00      	cmp	r6, #0
 801568e:	d135      	bne.n	80156fc <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015690:	9b01      	ldr	r3, [sp, #4]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d1d1      	bne.n	801563a <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8015696:	f001 fc5b 	bl	8016f50 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801569a:	2000      	movs	r0, #0
}
 801569c:	b005      	add	sp, #20
 801569e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80156a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d0b4      	beq.n	8015612 <xQueueReceive+0x16>
	__asm volatile
 80156a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80156ac:	b672      	cpsid	i
 80156ae:	f383 8811 	msr	BASEPRI, r3
 80156b2:	f3bf 8f6f 	isb	sy
 80156b6:	f3bf 8f4f 	dsb	sy
 80156ba:	b662      	cpsie	i
 80156bc:	e7fe      	b.n	80156bc <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80156be:	9b01      	ldr	r3, [sp, #4]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d0aa      	beq.n	801561a <xQueueReceive+0x1e>
 80156c4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80156c8:	b672      	cpsid	i
 80156ca:	f383 8811 	msr	BASEPRI, r3
 80156ce:	f3bf 8f6f 	isb	sy
 80156d2:	f3bf 8f4f 	dsb	sy
 80156d6:	b662      	cpsie	i
 80156d8:	e7fe      	b.n	80156d8 <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 80156da:	4620      	mov	r0, r4
 80156dc:	f7ff fca4 	bl	8015028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80156e0:	f000 fdcc 	bl	801627c <xTaskResumeAll>
	taskENTER_CRITICAL();
 80156e4:	f001 fc0e 	bl	8016f04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80156e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d0d3      	beq.n	8015696 <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 80156ee:	f001 fc2f 	bl	8016f50 <vPortExitCritical>
		taskENTER_CRITICAL();
 80156f2:	f001 fc07 	bl	8016f04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80156f6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80156f8:	2e00      	cmp	r6, #0
 80156fa:	d0c9      	beq.n	8015690 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80156fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80156fe:	b152      	cbz	r2, 8015716 <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015700:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015702:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015704:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015706:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015708:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801570a:	d301      	bcc.n	8015710 <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801570c:	6821      	ldr	r1, [r4, #0]
 801570e:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015710:	4628      	mov	r0, r5
 8015712:	f00e fa27 	bl	8023b64 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015716:	3e01      	subs	r6, #1
 8015718:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801571a:	6923      	ldr	r3, [r4, #16]
 801571c:	bb23      	cbnz	r3, 8015768 <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 801571e:	f001 fc17 	bl	8016f50 <vPortExitCritical>
				return pdPASS;
 8015722:	2001      	movs	r0, #1
 8015724:	e7ba      	b.n	801569c <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 8015726:	f001 fc13 	bl	8016f50 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801572a:	9901      	ldr	r1, [sp, #4]
 801572c:	4640      	mov	r0, r8
 801572e:	f000 fdf9 	bl	8016324 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015732:	4620      	mov	r0, r4
 8015734:	f7ff fc78 	bl	8015028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015738:	f000 fda0 	bl	801627c <xTaskResumeAll>
 801573c:	2800      	cmp	r0, #0
 801573e:	d1d8      	bne.n	80156f2 <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8015740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015744:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8015748:	f3bf 8f4f 	dsb	sy
 801574c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8015750:	e7cf      	b.n	80156f2 <xQueueReceive+0xf6>
 8015752:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015756:	b672      	cpsid	i
 8015758:	f383 8811 	msr	BASEPRI, r3
 801575c:	f3bf 8f6f 	isb	sy
 8015760:	f3bf 8f4f 	dsb	sy
 8015764:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8015766:	e7fe      	b.n	8015766 <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015768:	f104 0010 	add.w	r0, r4, #16
 801576c:	f000 fe16 	bl	801639c <xTaskRemoveFromEventList>
 8015770:	2800      	cmp	r0, #0
 8015772:	d0d4      	beq.n	801571e <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 8015774:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801577c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015780:	f3bf 8f4f 	dsb	sy
 8015784:	f3bf 8f6f 	isb	sy
 8015788:	e7c9      	b.n	801571e <xQueueReceive+0x122>
 801578a:	bf00      	nop

0801578c <xQueueSemaphoreTake>:
{
 801578c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801578e:	b085      	sub	sp, #20
 8015790:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015792:	2800      	cmp	r0, #0
 8015794:	d057      	beq.n	8015846 <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 8015796:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8015798:	4604      	mov	r4, r0
 801579a:	b156      	cbz	r6, 80157b2 <xQueueSemaphoreTake+0x26>
 801579c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80157a0:	b672      	cpsid	i
 80157a2:	f383 8811 	msr	BASEPRI, r3
 80157a6:	f3bf 8f6f 	isb	sy
 80157aa:	f3bf 8f4f 	dsb	sy
 80157ae:	b662      	cpsie	i
 80157b0:	e7fe      	b.n	80157b0 <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80157b2:	f000 fea3 	bl	80164fc <xTaskGetSchedulerState>
 80157b6:	4605      	mov	r5, r0
 80157b8:	2800      	cmp	r0, #0
 80157ba:	d04f      	beq.n	801585c <xQueueSemaphoreTake+0xd0>
 80157bc:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 80157be:	f001 fba1 	bl	8016f04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80157c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 80157c4:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80157c6:	bb8b      	cbnz	r3, 801582c <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80157c8:	9b01      	ldr	r3, [sp, #4]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	f000 809f 	beq.w	801590e <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 80157d0:	2d00      	cmp	r5, #0
 80157d2:	d05d      	beq.n	8015890 <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 80157d4:	f001 fbbc 	bl	8016f50 <vPortExitCritical>
		vTaskSuspendAll();
 80157d8:	f000 fbf4 	bl	8015fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80157dc:	f001 fb92 	bl	8016f04 <vPortEnterCritical>
 80157e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80157e4:	2bff      	cmp	r3, #255	; 0xff
 80157e6:	d101      	bne.n	80157ec <xQueueSemaphoreTake+0x60>
 80157e8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80157ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80157f0:	2bff      	cmp	r3, #255	; 0xff
 80157f2:	d101      	bne.n	80157f8 <xQueueSemaphoreTake+0x6c>
 80157f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80157f8:	f001 fbaa 	bl	8016f50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80157fc:	a901      	add	r1, sp, #4
 80157fe:	a802      	add	r0, sp, #8
 8015800:	f000 fe24 	bl	801644c <xTaskCheckForTimeOut>
 8015804:	2800      	cmp	r0, #0
 8015806:	d137      	bne.n	8015878 <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 8015808:	f001 fb7c 	bl	8016f04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801580c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801580e:	2b00      	cmp	r3, #0
 8015810:	d042      	beq.n	8015898 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 8015812:	f001 fb9d 	bl	8016f50 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8015816:	4620      	mov	r0, r4
 8015818:	f7ff fc06 	bl	8015028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801581c:	f000 fd2e 	bl	801627c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8015820:	f001 fb70 	bl	8016f04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015826:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015828:	2b00      	cmp	r3, #0
 801582a:	d0cd      	beq.n	80157c8 <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801582c:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801582e:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015830:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015832:	2a00      	cmp	r2, #0
 8015834:	f000 8089 	beq.w	801594a <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015838:	6923      	ldr	r3, [r4, #16]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d174      	bne.n	8015928 <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 801583e:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8015840:	f001 fb86 	bl	8016f50 <vPortExitCritical>
				return pdPASS;
 8015844:	e046      	b.n	80158d4 <xQueueSemaphoreTake+0x148>
 8015846:	f04f 0330 	mov.w	r3, #48	; 0x30
 801584a:	b672      	cpsid	i
 801584c:	f383 8811 	msr	BASEPRI, r3
 8015850:	f3bf 8f6f 	isb	sy
 8015854:	f3bf 8f4f 	dsb	sy
 8015858:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 801585a:	e7fe      	b.n	801585a <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801585c:	9b01      	ldr	r3, [sp, #4]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d03b      	beq.n	80158da <xQueueSemaphoreTake+0x14e>
 8015862:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015866:	b672      	cpsid	i
 8015868:	f383 8811 	msr	BASEPRI, r3
 801586c:	f3bf 8f6f 	isb	sy
 8015870:	f3bf 8f4f 	dsb	sy
 8015874:	b662      	cpsie	i
 8015876:	e7fe      	b.n	8015876 <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 8015878:	4620      	mov	r0, r4
 801587a:	f7ff fbd5 	bl	8015028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801587e:	f000 fcfd 	bl	801627c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8015882:	f001 fb3f 	bl	8016f04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015886:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015888:	b30b      	cbz	r3, 80158ce <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 801588a:	f001 fb61 	bl	8016f50 <vPortExitCritical>
	return xReturn;
 801588e:	e7c7      	b.n	8015820 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015890:	a802      	add	r0, sp, #8
 8015892:	f000 fdcf 	bl	8016434 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015896:	e79d      	b.n	80157d4 <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 8015898:	f001 fb5a 	bl	8016f50 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801589c:	6823      	ldr	r3, [r4, #0]
 801589e:	b36b      	cbz	r3, 80158fc <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80158a0:	9901      	ldr	r1, [sp, #4]
 80158a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80158a6:	f000 fd3d 	bl	8016324 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80158aa:	4620      	mov	r0, r4
 80158ac:	f7ff fbbc 	bl	8015028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80158b0:	f000 fce4 	bl	801627c <xTaskResumeAll>
 80158b4:	2800      	cmp	r0, #0
 80158b6:	d1b3      	bne.n	8015820 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 80158b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80158bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80158c4:	f3bf 8f4f 	dsb	sy
 80158c8:	f3bf 8f6f 	isb	sy
 80158cc:	e7a8      	b.n	8015820 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 80158ce:	f001 fb3f 	bl	8016f50 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80158d2:	b926      	cbnz	r6, 80158de <xQueueSemaphoreTake+0x152>
}
 80158d4:	4630      	mov	r0, r6
 80158d6:	b005      	add	sp, #20
 80158d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158da:	4606      	mov	r6, r0
 80158dc:	e76f      	b.n	80157be <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 80158de:	f001 fb11 	bl	8016f04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80158e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80158e4:	b119      	cbz	r1, 80158ee <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80158e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80158e8:	6819      	ldr	r1, [r3, #0]
 80158ea:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80158ee:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80158f0:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80158f2:	f000 fecb 	bl	801668c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80158f6:	f001 fb2b 	bl	8016f50 <vPortExitCritical>
 80158fa:	e7eb      	b.n	80158d4 <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 80158fc:	f001 fb02 	bl	8016f04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015900:	68a0      	ldr	r0, [r4, #8]
 8015902:	f000 fe0b 	bl	801651c <xTaskPriorityInherit>
 8015906:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8015908:	f001 fb22 	bl	8016f50 <vPortExitCritical>
 801590c:	e7c8      	b.n	80158a0 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 801590e:	2e00      	cmp	r6, #0
 8015910:	d0f1      	beq.n	80158f6 <xQueueSemaphoreTake+0x16a>
 8015912:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015916:	b672      	cpsid	i
 8015918:	f383 8811 	msr	BASEPRI, r3
 801591c:	f3bf 8f6f 	isb	sy
 8015920:	f3bf 8f4f 	dsb	sy
 8015924:	b662      	cpsie	i
 8015926:	e7fe      	b.n	8015926 <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015928:	f104 0010 	add.w	r0, r4, #16
 801592c:	f000 fd36 	bl	801639c <xTaskRemoveFromEventList>
 8015930:	2800      	cmp	r0, #0
 8015932:	d084      	beq.n	801583e <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8015934:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801593c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015940:	f3bf 8f4f 	dsb	sy
 8015944:	f3bf 8f6f 	isb	sy
 8015948:	e779      	b.n	801583e <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801594a:	f000 ff0d 	bl	8016768 <pvTaskIncrementMutexHeldCount>
 801594e:	60a0      	str	r0, [r4, #8]
 8015950:	e772      	b.n	8015838 <xQueueSemaphoreTake+0xac>
 8015952:	bf00      	nop

08015954 <xQueueReceiveFromISR>:
{
 8015954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8015958:	b330      	cbz	r0, 80159a8 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801595a:	460e      	mov	r6, r1
 801595c:	4604      	mov	r4, r0
 801595e:	4617      	mov	r7, r2
 8015960:	b1a1      	cbz	r1, 801598c <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015962:	f001 fbd5 	bl	8017110 <vPortValidateInterruptPriority>
	__asm volatile
 8015966:	f3ef 8911 	mrs	r9, BASEPRI
 801596a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801596e:	b672      	cpsid	i
 8015970:	f383 8811 	msr	BASEPRI, r3
 8015974:	f3bf 8f6f 	isb	sy
 8015978:	f3bf 8f4f 	dsb	sy
 801597c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801597e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015980:	b9ed      	cbnz	r5, 80159be <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 8015982:	4628      	mov	r0, r5
	__asm volatile
 8015984:	f389 8811 	msr	BASEPRI, r9
}
 8015988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801598c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801598e:	2b00      	cmp	r3, #0
 8015990:	d0e7      	beq.n	8015962 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8015992:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015996:	b672      	cpsid	i
 8015998:	f383 8811 	msr	BASEPRI, r3
 801599c:	f3bf 8f6f 	isb	sy
 80159a0:	f3bf 8f4f 	dsb	sy
 80159a4:	b662      	cpsie	i
 80159a6:	e7fe      	b.n	80159a6 <xQueueReceiveFromISR+0x52>
 80159a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159ac:	b672      	cpsid	i
 80159ae:	f383 8811 	msr	BASEPRI, r3
 80159b2:	f3bf 8f6f 	isb	sy
 80159b6:	f3bf 8f4f 	dsb	sy
 80159ba:	b662      	cpsie	i
	configASSERT( pxQueue );
 80159bc:	e7fe      	b.n	80159bc <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 80159be:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80159c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 80159c4:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80159c8:	b142      	cbz	r2, 80159dc <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80159ca:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80159cc:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80159ce:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80159d0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80159d2:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80159d4:	d215      	bcs.n	8015a02 <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80159d6:	4630      	mov	r0, r6
 80159d8:	f00e f8c4 	bl	8023b64 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80159dc:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80159de:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80159e2:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80159e4:	d009      	beq.n	80159fa <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80159e6:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 80159ea:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80159ec:	b25b      	sxtb	r3, r3
 80159ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 80159f2:	f389 8811 	msr	BASEPRI, r9
}
 80159f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80159fa:	6923      	ldr	r3, [r4, #16]
 80159fc:	b923      	cbnz	r3, 8015a08 <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 80159fe:	2001      	movs	r0, #1
 8015a00:	e7c0      	b.n	8015984 <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015a02:	6821      	ldr	r1, [r4, #0]
 8015a04:	60e1      	str	r1, [r4, #12]
 8015a06:	e7e6      	b.n	80159d6 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015a08:	f104 0010 	add.w	r0, r4, #16
 8015a0c:	f000 fcc6 	bl	801639c <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8015a10:	2f00      	cmp	r7, #0
 8015a12:	d0f4      	beq.n	80159fe <xQueueReceiveFromISR+0xaa>
 8015a14:	2800      	cmp	r0, #0
 8015a16:	d0f2      	beq.n	80159fe <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015a18:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015a1a:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015a1c:	603b      	str	r3, [r7, #0]
 8015a1e:	e7b1      	b.n	8015984 <xQueueReceiveFromISR+0x30>

08015a20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015a20:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015a22:	2300      	movs	r3, #0
 8015a24:	4c08      	ldr	r4, [pc, #32]	; (8015a48 <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015a26:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8015a2a:	b12a      	cbz	r2, 8015a38 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	2b08      	cmp	r3, #8
 8015a30:	d1f9      	bne.n	8015a26 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a36:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015a38:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015a3c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8015a40:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015a44:	6050      	str	r0, [r2, #4]
	}
 8015a46:	4770      	bx	lr
 8015a48:	20006014 	.word	0x20006014

08015a4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015a4c:	b570      	push	{r4, r5, r6, lr}
 8015a4e:	4604      	mov	r4, r0
 8015a50:	460e      	mov	r6, r1
 8015a52:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015a54:	f001 fa56 	bl	8016f04 <vPortEnterCritical>
 8015a58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015a5c:	2bff      	cmp	r3, #255	; 0xff
 8015a5e:	d102      	bne.n	8015a66 <vQueueWaitForMessageRestricted+0x1a>
 8015a60:	2300      	movs	r3, #0
 8015a62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8015a66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015a6a:	2bff      	cmp	r3, #255	; 0xff
 8015a6c:	d102      	bne.n	8015a74 <vQueueWaitForMessageRestricted+0x28>
 8015a6e:	2300      	movs	r3, #0
 8015a70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015a74:	f001 fa6c 	bl	8016f50 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015a78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015a7a:	b123      	cbz	r3, 8015a86 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015a7c:	4620      	mov	r0, r4
	}
 8015a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8015a82:	f7ff bad1 	b.w	8015028 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015a86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015a8a:	462a      	mov	r2, r5
 8015a8c:	4631      	mov	r1, r6
 8015a8e:	f000 fc65 	bl	801635c <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8015a92:	4620      	mov	r0, r4
	}
 8015a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8015a98:	f7ff bac6 	b.w	8015028 <prvUnlockQueue>

08015a9c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015aa0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015aa2:	f001 fa2f 	bl	8016f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015aa6:	4a35      	ldr	r2, [pc, #212]	; (8015b7c <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8015aa8:	4d35      	ldr	r5, [pc, #212]	; (8015b80 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 8015aaa:	6813      	ldr	r3, [r2, #0]
 8015aac:	3301      	adds	r3, #1
 8015aae:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015ab0:	682b      	ldr	r3, [r5, #0]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d034      	beq.n	8015b20 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015ab6:	4e33      	ldr	r6, [pc, #204]	; (8015b84 <prvAddNewTaskToReadyList+0xe8>)
 8015ab8:	6833      	ldr	r3, [r6, #0]
 8015aba:	b343      	cbz	r3, 8015b0e <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015abc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015abe:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8015ba8 <prvAddNewTaskToReadyList+0x10c>
 8015ac2:	2201      	movs	r2, #1
		uxTaskNumber++;
 8015ac4:	4f30      	ldr	r7, [pc, #192]	; (8015b88 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8015ac6:	4931      	ldr	r1, [pc, #196]	; (8015b8c <prvAddNewTaskToReadyList+0xf0>)
 8015ac8:	409a      	lsls	r2, r3
 8015aca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015ace:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	3301      	adds	r3, #1
 8015ad6:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8015ad8:	680b      	ldr	r3, [r1, #0]
 8015ada:	431a      	orrs	r2, r3
 8015adc:	600a      	str	r2, [r1, #0]
 8015ade:	1d21      	adds	r1, r4, #4
 8015ae0:	f7ff fa24 	bl	8014f2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015ae4:	f001 fa34 	bl	8016f50 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015ae8:	6833      	ldr	r3, [r6, #0]
 8015aea:	b173      	cbz	r3, 8015b0a <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015aec:	682a      	ldr	r2, [r5, #0]
 8015aee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015af0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d209      	bcs.n	8015b0a <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015af6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015afe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015b02:	f3bf 8f4f 	dsb	sy
 8015b06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015b0e:	682a      	ldr	r2, [r5, #0]
 8015b10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015b12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015b14:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8015ba8 <prvAddNewTaskToReadyList+0x10c>
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	d8d2      	bhi.n	8015ac2 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8015b1c:	602c      	str	r4, [r5, #0]
 8015b1e:	e7d0      	b.n	8015ac2 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8015b20:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015b22:	6813      	ldr	r3, [r2, #0]
 8015b24:	2b01      	cmp	r3, #1
 8015b26:	d004      	beq.n	8015b32 <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 8015b28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015b2a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8015ba8 <prvAddNewTaskToReadyList+0x10c>
 8015b2e:	4e15      	ldr	r6, [pc, #84]	; (8015b84 <prvAddNewTaskToReadyList+0xe8>)
 8015b30:	e7c7      	b.n	8015ac2 <prvAddNewTaskToReadyList+0x26>
 8015b32:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8015ba8 <prvAddNewTaskToReadyList+0x10c>
 8015b36:	4646      	mov	r6, r8
 8015b38:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015b3c:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015b3e:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015b40:	f7ff f9e4 	bl	8014f0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015b44:	42b7      	cmp	r7, r6
 8015b46:	d1f9      	bne.n	8015b3c <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015b48:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8015bac <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 8015b4c:	4f10      	ldr	r7, [pc, #64]	; (8015b90 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 8015b4e:	4648      	mov	r0, r9
 8015b50:	4e0c      	ldr	r6, [pc, #48]	; (8015b84 <prvAddNewTaskToReadyList+0xe8>)
 8015b52:	f7ff f9db 	bl	8014f0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015b56:	4638      	mov	r0, r7
 8015b58:	f7ff f9d8 	bl	8014f0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015b5c:	480d      	ldr	r0, [pc, #52]	; (8015b94 <prvAddNewTaskToReadyList+0xf8>)
 8015b5e:	f7ff f9d5 	bl	8014f0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015b62:	480d      	ldr	r0, [pc, #52]	; (8015b98 <prvAddNewTaskToReadyList+0xfc>)
 8015b64:	f7ff f9d2 	bl	8014f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015b68:	480c      	ldr	r0, [pc, #48]	; (8015b9c <prvAddNewTaskToReadyList+0x100>)
 8015b6a:	f7ff f9cf 	bl	8014f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015b6e:	4b0c      	ldr	r3, [pc, #48]	; (8015ba0 <prvAddNewTaskToReadyList+0x104>)
 8015b70:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015b74:	4b0b      	ldr	r3, [pc, #44]	; (8015ba4 <prvAddNewTaskToReadyList+0x108>)
 8015b76:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8015b78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 8015b7a:	e7a2      	b.n	8015ac2 <prvAddNewTaskToReadyList+0x26>
 8015b7c:	200060ec 	.word	0x200060ec
 8015b80:	20006054 	.word	0x20006054
 8015b84:	20006148 	.word	0x20006148
 8015b88:	200060fc 	.word	0x200060fc
 8015b8c:	20006100 	.word	0x20006100
 8015b90:	20006118 	.word	0x20006118
 8015b94:	20006134 	.word	0x20006134
 8015b98:	20006160 	.word	0x20006160
 8015b9c:	2000614c 	.word	0x2000614c
 8015ba0:	20006058 	.word	0x20006058
 8015ba4:	2000605c 	.word	0x2000605c
 8015ba8:	20006060 	.word	0x20006060
 8015bac:	20006104 	.word	0x20006104

08015bb0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015bb2:	4b1b      	ldr	r3, [pc, #108]	; (8015c20 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8015bb4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015bb6:	4e1b      	ldr	r6, [pc, #108]	; (8015c24 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8015bb8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8015bba:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015bbc:	6833      	ldr	r3, [r6, #0]
 8015bbe:	1d18      	adds	r0, r3, #4
 8015bc0:	f7ff f9dc 	bl	8014f7c <uxListRemove>
 8015bc4:	b948      	cbnz	r0, 8015bda <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015bc6:	6833      	ldr	r3, [r6, #0]
 8015bc8:	4917      	ldr	r1, [pc, #92]	; (8015c28 <prvAddCurrentTaskToDelayedList+0x78>)
 8015bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bcc:	2301      	movs	r3, #1
 8015bce:	fa03 f202 	lsl.w	r2, r3, r2
 8015bd2:	680b      	ldr	r3, [r1, #0]
 8015bd4:	ea23 0302 	bic.w	r3, r3, r2
 8015bd8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015bda:	1c63      	adds	r3, r4, #1
 8015bdc:	d100      	bne.n	8015be0 <prvAddCurrentTaskToDelayedList+0x30>
 8015bde:	b9bf      	cbnz	r7, 8015c10 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015be0:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015be2:	6833      	ldr	r3, [r6, #0]
 8015be4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8015be6:	d307      	bcc.n	8015bf8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015be8:	4b10      	ldr	r3, [pc, #64]	; (8015c2c <prvAddCurrentTaskToDelayedList+0x7c>)
 8015bea:	6818      	ldr	r0, [r3, #0]
 8015bec:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015bee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015bf2:	3104      	adds	r1, #4
 8015bf4:	f7ff b9aa 	b.w	8014f4c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015bf8:	4b0d      	ldr	r3, [pc, #52]	; (8015c30 <prvAddCurrentTaskToDelayedList+0x80>)
 8015bfa:	6818      	ldr	r0, [r3, #0]
 8015bfc:	6831      	ldr	r1, [r6, #0]
 8015bfe:	3104      	adds	r1, #4
 8015c00:	f7ff f9a4 	bl	8014f4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015c04:	4b0b      	ldr	r3, [pc, #44]	; (8015c34 <prvAddCurrentTaskToDelayedList+0x84>)
 8015c06:	681a      	ldr	r2, [r3, #0]
 8015c08:	42a2      	cmp	r2, r4
 8015c0a:	d900      	bls.n	8015c0e <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 8015c0c:	601c      	str	r4, [r3, #0]
}
 8015c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015c10:	6831      	ldr	r1, [r6, #0]
 8015c12:	4809      	ldr	r0, [pc, #36]	; (8015c38 <prvAddCurrentTaskToDelayedList+0x88>)
 8015c14:	3104      	adds	r1, #4
}
 8015c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015c1a:	f7ff b987 	b.w	8014f2c <vListInsertEnd>
 8015c1e:	bf00      	nop
 8015c20:	20006174 	.word	0x20006174
 8015c24:	20006054 	.word	0x20006054
 8015c28:	20006100 	.word	0x20006100
 8015c2c:	2000605c 	.word	0x2000605c
 8015c30:	20006058 	.word	0x20006058
 8015c34:	2000612c 	.word	0x2000612c
 8015c38:	2000614c 	.word	0x2000614c

08015c3c <prvDeleteTCB>:
	{
 8015c3c:	b510      	push	{r4, lr}
 8015c3e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015c40:	304c      	adds	r0, #76	; 0x4c
 8015c42:	f00f f84b 	bl	8024cdc <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015c46:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8015c4a:	b173      	cbz	r3, 8015c6a <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015c4c:	2b01      	cmp	r3, #1
 8015c4e:	d015      	beq.n	8015c7c <prvDeleteTCB+0x40>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015c50:	2b02      	cmp	r3, #2
 8015c52:	d012      	beq.n	8015c7a <prvDeleteTCB+0x3e>
	__asm volatile
 8015c54:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c58:	b672      	cpsid	i
 8015c5a:	f383 8811 	msr	BASEPRI, r3
 8015c5e:	f3bf 8f6f 	isb	sy
 8015c62:	f3bf 8f4f 	dsb	sy
 8015c66:	b662      	cpsie	i
 8015c68:	e7fe      	b.n	8015c68 <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 8015c6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015c6c:	f001 fb50 	bl	8017310 <vPortFree>
				vPortFree( pxTCB );
 8015c70:	4620      	mov	r0, r4
	}
 8015c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8015c76:	f001 bb4b 	b.w	8017310 <vPortFree>
	}
 8015c7a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8015c7c:	4620      	mov	r0, r4
	}
 8015c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8015c82:	f001 bb45 	b.w	8017310 <vPortFree>
 8015c86:	bf00      	nop

08015c88 <prvIdleTask>:
{
 8015c88:	4c16      	ldr	r4, [pc, #88]	; (8015ce4 <prvIdleTask+0x5c>)
				taskYIELD();
 8015c8a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8015c8e:	4e16      	ldr	r6, [pc, #88]	; (8015ce8 <prvIdleTask+0x60>)
 8015c90:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8015c94:	4d15      	ldr	r5, [pc, #84]	; (8015cec <prvIdleTask+0x64>)
 8015c96:	f8df a058 	ldr.w	sl, [pc, #88]	; 8015cf0 <prvIdleTask+0x68>
{
 8015c9a:	b580      	push	{r7, lr}
 8015c9c:	e011      	b.n	8015cc2 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8015c9e:	f001 f931 	bl	8016f04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ca2:	68f3      	ldr	r3, [r6, #12]
 8015ca4:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ca6:	1d38      	adds	r0, r7, #4
 8015ca8:	f7ff f968 	bl	8014f7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015cac:	682b      	ldr	r3, [r5, #0]
 8015cae:	3b01      	subs	r3, #1
 8015cb0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015cb2:	6823      	ldr	r3, [r4, #0]
 8015cb4:	3b01      	subs	r3, #1
 8015cb6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8015cb8:	f001 f94a 	bl	8016f50 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8015cbc:	4638      	mov	r0, r7
 8015cbe:	f7ff ffbd 	bl	8015c3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015cc2:	6823      	ldr	r3, [r4, #0]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d1ea      	bne.n	8015c9e <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015cc8:	f8da 3000 	ldr.w	r3, [sl]
 8015ccc:	2b01      	cmp	r3, #1
 8015cce:	d905      	bls.n	8015cdc <prvIdleTask+0x54>
				taskYIELD();
 8015cd0:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8015cd4:	f3bf 8f4f 	dsb	sy
 8015cd8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8015cdc:	f7eb f858 	bl	8000d90 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8015ce0:	e7ef      	b.n	8015cc2 <prvIdleTask+0x3a>
 8015ce2:	bf00      	nop
 8015ce4:	200060f0 	.word	0x200060f0
 8015ce8:	20006160 	.word	0x20006160
 8015cec:	200060ec 	.word	0x200060ec
 8015cf0:	20006060 	.word	0x20006060

08015cf4 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 8015cf4:	4b1d      	ldr	r3, [pc, #116]	; (8015d6c <vTaskSwitchContext.part.0+0x78>)
 8015cf6:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 8015cf8:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 8015cfa:	4c1d      	ldr	r4, [pc, #116]	; (8015d70 <vTaskSwitchContext.part.0+0x7c>)
		xYieldPending = pdFALSE;
 8015cfc:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8015cfe:	6822      	ldr	r2, [r4, #0]
 8015d00:	6823      	ldr	r3, [r4, #0]
 8015d02:	6812      	ldr	r2, [r2, #0]
 8015d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d927      	bls.n	8015d5a <vTaskSwitchContext.part.0+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d0a:	4b1a      	ldr	r3, [pc, #104]	; (8015d74 <vTaskSwitchContext.part.0+0x80>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015d0e:	fab3 f383 	clz	r3, r3
 8015d12:	b2db      	uxtb	r3, r3
 8015d14:	4a18      	ldr	r2, [pc, #96]	; (8015d78 <vTaskSwitchContext.part.0+0x84>)
 8015d16:	f1c3 031f 	rsb	r3, r3, #31
 8015d1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015d1e:	0099      	lsls	r1, r3, #2
 8015d20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d24:	5850      	ldr	r0, [r2, r1]
 8015d26:	b950      	cbnz	r0, 8015d3e <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 8015d28:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015d2c:	b672      	cpsid	i
 8015d2e:	f383 8811 	msr	BASEPRI, r3
 8015d32:	f3bf 8f6f 	isb	sy
 8015d36:	f3bf 8f4f 	dsb	sy
 8015d3a:	b662      	cpsie	i
 8015d3c:	e7fe      	b.n	8015d3c <vTaskSwitchContext.part.0+0x48>
 8015d3e:	6858      	ldr	r0, [r3, #4]
 8015d40:	3108      	adds	r1, #8
 8015d42:	6840      	ldr	r0, [r0, #4]
 8015d44:	440a      	add	r2, r1
 8015d46:	4290      	cmp	r0, r2
 8015d48:	6058      	str	r0, [r3, #4]
 8015d4a:	d00c      	beq.n	8015d66 <vTaskSwitchContext.part.0+0x72>
 8015d4c:	68c3      	ldr	r3, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015d4e:	4a0b      	ldr	r2, [pc, #44]	; (8015d7c <vTaskSwitchContext.part.0+0x88>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d50:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015d52:	6823      	ldr	r3, [r4, #0]
 8015d54:	334c      	adds	r3, #76	; 0x4c
 8015d56:	6013      	str	r3, [r2, #0]
}
 8015d58:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8015d5a:	6820      	ldr	r0, [r4, #0]
 8015d5c:	6821      	ldr	r1, [r4, #0]
 8015d5e:	3134      	adds	r1, #52	; 0x34
 8015d60:	f7eb f818 	bl	8000d94 <vApplicationStackOverflowHook>
 8015d64:	e7d1      	b.n	8015d0a <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d66:	6840      	ldr	r0, [r0, #4]
 8015d68:	6058      	str	r0, [r3, #4]
 8015d6a:	e7ef      	b.n	8015d4c <vTaskSwitchContext.part.0+0x58>
 8015d6c:	20006178 	.word	0x20006178
 8015d70:	20006054 	.word	0x20006054
 8015d74:	20006100 	.word	0x20006100
 8015d78:	20006060 	.word	0x20006060
 8015d7c:	20000488 	.word	0x20000488

08015d80 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8015d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015d86:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015d88:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8015d8c:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015d8e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8015d90:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8015d92:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015d96:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015d9a:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8015d9e:	2900      	cmp	r1, #0
 8015da0:	d041      	beq.n	8015e26 <prvInitialiseNewTask.constprop.0+0xa6>
 8015da2:	f101 3cff 	add.w	ip, r1, #4294967295
 8015da6:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8015daa:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015dac:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 8015db0:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8015db4:	b10d      	cbz	r5, 8015dba <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015db6:	458c      	cmp	ip, r1
 8015db8:	d1f8      	bne.n	8015dac <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015dba:	2300      	movs	r3, #0
 8015dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015dc0:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8015dc2:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015dc6:	1d20      	adds	r0, r4, #4
 8015dc8:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8015dca:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 8015dce:	bf28      	it	cs
 8015dd0:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8015dd2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8015dd4:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015dd6:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015dda:	f7ff f8a3 	bl	8014f24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015dde:	f104 0018 	add.w	r0, r4, #24
 8015de2:	f7ff f89f 	bl	8014f24 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015de6:	4651      	mov	r1, sl
 8015de8:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 8015dea:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015dee:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015df2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015df4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015df6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015df8:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015dfc:	f00d feda 	bl	8023bb4 <memset>
 8015e00:	4b0a      	ldr	r3, [pc, #40]	; (8015e2c <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015e02:	464a      	mov	r2, r9
 8015e04:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015e06:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015e08:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015e0a:	4b09      	ldr	r3, [pc, #36]	; (8015e30 <prvInitialiseNewTask.constprop.0+0xb0>)
 8015e0c:	6563      	str	r3, [r4, #84]	; 0x54
 8015e0e:	4b09      	ldr	r3, [pc, #36]	; (8015e34 <prvInitialiseNewTask.constprop.0+0xb4>)
 8015e10:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015e12:	f001 f847 	bl	8016ea4 <pxPortInitialiseStack>
 8015e16:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8015e18:	f1b8 0f00 	cmp.w	r8, #0
 8015e1c:	d001      	beq.n	8015e22 <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015e1e:	f8c8 4000 	str.w	r4, [r8]
}
 8015e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015e26:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8015e2a:	e7c9      	b.n	8015dc0 <prvInitialiseNewTask.constprop.0+0x40>
 8015e2c:	08045038 	.word	0x08045038
 8015e30:	08045058 	.word	0x08045058
 8015e34:	08045018 	.word	0x08045018

08015e38 <xTaskCreateStatic>:
	{
 8015e38:	b530      	push	{r4, r5, lr}
 8015e3a:	b087      	sub	sp, #28
 8015e3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8015e3e:	b1e4      	cbz	r4, 8015e7a <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 8015e40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015e42:	b17d      	cbz	r5, 8015e64 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 8015e44:	25b4      	movs	r5, #180	; 0xb4
 8015e46:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015e48:	9d05      	ldr	r5, [sp, #20]
 8015e4a:	2db4      	cmp	r5, #180	; 0xb4
 8015e4c:	d020      	beq.n	8015e90 <xTaskCreateStatic+0x58>
 8015e4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015e52:	b672      	cpsid	i
 8015e54:	f383 8811 	msr	BASEPRI, r3
 8015e58:	f3bf 8f6f 	isb	sy
 8015e5c:	f3bf 8f4f 	dsb	sy
 8015e60:	b662      	cpsie	i
 8015e62:	e7fe      	b.n	8015e62 <xTaskCreateStatic+0x2a>
 8015e64:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015e68:	b672      	cpsid	i
 8015e6a:	f383 8811 	msr	BASEPRI, r3
 8015e6e:	f3bf 8f6f 	isb	sy
 8015e72:	f3bf 8f4f 	dsb	sy
 8015e76:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8015e78:	e7fe      	b.n	8015e78 <xTaskCreateStatic+0x40>
 8015e7a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015e7e:	b672      	cpsid	i
 8015e80:	f383 8811 	msr	BASEPRI, r3
 8015e84:	f3bf 8f6f 	isb	sy
 8015e88:	f3bf 8f4f 	dsb	sy
 8015e8c:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8015e8e:	e7fe      	b.n	8015e8e <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015e90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015e92:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015e94:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015e96:	9502      	str	r5, [sp, #8]
 8015e98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015e9a:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015e9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015e9e:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015ea2:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015ea4:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015ea6:	9401      	str	r4, [sp, #4]
 8015ea8:	f7ff ff6a 	bl	8015d80 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015eac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015eae:	f7ff fdf5 	bl	8015a9c <prvAddNewTaskToReadyList>
	}
 8015eb2:	9804      	ldr	r0, [sp, #16]
 8015eb4:	b007      	add	sp, #28
 8015eb6:	bd30      	pop	{r4, r5, pc}

08015eb8 <xTaskCreate>:
	{
 8015eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ebc:	4607      	mov	r7, r0
 8015ebe:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015ec0:	0090      	lsls	r0, r2, #2
	{
 8015ec2:	4615      	mov	r5, r2
 8015ec4:	4688      	mov	r8, r1
 8015ec6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015ec8:	f001 f986 	bl	80171d8 <pvPortMalloc>
			if( pxStack != NULL )
 8015ecc:	b1d8      	cbz	r0, 8015f06 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015ece:	4604      	mov	r4, r0
 8015ed0:	20b4      	movs	r0, #180	; 0xb4
 8015ed2:	f001 f981 	bl	80171d8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8015ed6:	4606      	mov	r6, r0
 8015ed8:	b1d0      	cbz	r0, 8015f10 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8015eda:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015edc:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015ede:	464b      	mov	r3, r9
 8015ee0:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015ee2:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015ee6:	4641      	mov	r1, r8
 8015ee8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015eea:	4638      	mov	r0, r7
 8015eec:	9602      	str	r6, [sp, #8]
 8015eee:	9401      	str	r4, [sp, #4]
 8015ef0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015ef2:	9400      	str	r4, [sp, #0]
 8015ef4:	f7ff ff44 	bl	8015d80 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015ef8:	4630      	mov	r0, r6
 8015efa:	f7ff fdcf 	bl	8015a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015efe:	2001      	movs	r0, #1
	}
 8015f00:	b005      	add	sp, #20
 8015f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015f06:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8015f0a:	b005      	add	sp, #20
 8015f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8015f10:	4620      	mov	r0, r4
 8015f12:	f001 f9fd 	bl	8017310 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015f16:	f04f 30ff 	mov.w	r0, #4294967295
 8015f1a:	e7f1      	b.n	8015f00 <xTaskCreate+0x48>

08015f1c <vTaskStartScheduler>:
{
 8015f1c:	b510      	push	{r4, lr}
 8015f1e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015f20:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015f22:	aa07      	add	r2, sp, #28
 8015f24:	a906      	add	r1, sp, #24
 8015f26:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015f28:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015f2c:	f7ea ff36 	bl	8000d9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015f30:	4623      	mov	r3, r4
 8015f32:	9a07      	ldr	r2, [sp, #28]
 8015f34:	9400      	str	r4, [sp, #0]
 8015f36:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8015f3a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8015f3e:	491a      	ldr	r1, [pc, #104]	; (8015fa8 <vTaskStartScheduler+0x8c>)
 8015f40:	481a      	ldr	r0, [pc, #104]	; (8015fac <vTaskStartScheduler+0x90>)
 8015f42:	f7ff ff79 	bl	8015e38 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8015f46:	b1f8      	cbz	r0, 8015f88 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8015f48:	f000 fcfa 	bl	8016940 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8015f4c:	2801      	cmp	r0, #1
 8015f4e:	d11d      	bne.n	8015f8c <vTaskStartScheduler+0x70>
 8015f50:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015f54:	b672      	cpsid	i
 8015f56:	f383 8811 	msr	BASEPRI, r3
 8015f5a:	f3bf 8f6f 	isb	sy
 8015f5e:	f3bf 8f4f 	dsb	sy
 8015f62:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015f64:	4b12      	ldr	r3, [pc, #72]	; (8015fb0 <vTaskStartScheduler+0x94>)
 8015f66:	4a13      	ldr	r2, [pc, #76]	; (8015fb4 <vTaskStartScheduler+0x98>)
 8015f68:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8015f6a:	4913      	ldr	r1, [pc, #76]	; (8015fb8 <vTaskStartScheduler+0x9c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015f6c:	334c      	adds	r3, #76	; 0x4c
 8015f6e:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8015f70:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8015f74:	4a11      	ldr	r2, [pc, #68]	; (8015fbc <vTaskStartScheduler+0xa0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8015f76:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015f78:	4b11      	ldr	r3, [pc, #68]	; (8015fc0 <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 8015f7a:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015f7c:	601c      	str	r4, [r3, #0]
}
 8015f7e:	b008      	add	sp, #32
 8015f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8015f84:	f001 b85a 	b.w	801703c <xPortStartScheduler>
}
 8015f88:	b008      	add	sp, #32
 8015f8a:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015f8c:	3001      	adds	r0, #1
 8015f8e:	d1fb      	bne.n	8015f88 <vTaskStartScheduler+0x6c>
 8015f90:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015f94:	b672      	cpsid	i
 8015f96:	f383 8811 	msr	BASEPRI, r3
 8015f9a:	f3bf 8f6f 	isb	sy
 8015f9e:	f3bf 8f4f 	dsb	sy
 8015fa2:	b662      	cpsie	i
 8015fa4:	e7fe      	b.n	8015fa4 <vTaskStartScheduler+0x88>
 8015fa6:	bf00      	nop
 8015fa8:	0802c090 	.word	0x0802c090
 8015fac:	08015c89 	.word	0x08015c89
 8015fb0:	20006054 	.word	0x20006054
 8015fb4:	20000488 	.word	0x20000488
 8015fb8:	2000612c 	.word	0x2000612c
 8015fbc:	20006148 	.word	0x20006148
 8015fc0:	20006174 	.word	0x20006174

08015fc4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8015fc4:	4a02      	ldr	r2, [pc, #8]	; (8015fd0 <vTaskSuspendAll+0xc>)
 8015fc6:	6813      	ldr	r3, [r2, #0]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	6013      	str	r3, [r2, #0]
}
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop
 8015fd0:	200060f8 	.word	0x200060f8

08015fd4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8015fd4:	4b01      	ldr	r3, [pc, #4]	; (8015fdc <xTaskGetTickCount+0x8>)
 8015fd6:	6818      	ldr	r0, [r3, #0]
}
 8015fd8:	4770      	bx	lr
 8015fda:	bf00      	nop
 8015fdc:	20006174 	.word	0x20006174

08015fe0 <xTaskGetTickCountFromISR>:
{
 8015fe0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015fe2:	f001 f895 	bl	8017110 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8015fe6:	4b01      	ldr	r3, [pc, #4]	; (8015fec <xTaskGetTickCountFromISR+0xc>)
 8015fe8:	6818      	ldr	r0, [r3, #0]
}
 8015fea:	bd08      	pop	{r3, pc}
 8015fec:	20006174 	.word	0x20006174

08015ff0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ff0:	4b52      	ldr	r3, [pc, #328]	; (801613c <xTaskIncrementTick+0x14c>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
{
 8015ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff8:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d14c      	bne.n	8016098 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015ffe:	4b50      	ldr	r3, [pc, #320]	; (8016140 <xTaskIncrementTick+0x150>)
 8016000:	681d      	ldr	r5, [r3, #0]
 8016002:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8016004:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016006:	2d00      	cmp	r5, #0
 8016008:	d054      	beq.n	80160b4 <xTaskIncrementTick+0xc4>
 801600a:	4b4e      	ldr	r3, [pc, #312]	; (8016144 <xTaskIncrementTick+0x154>)
 801600c:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 801600e:	9b01      	ldr	r3, [sp, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	42ab      	cmp	r3, r5
 8016014:	d85d      	bhi.n	80160d2 <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016016:	4e4c      	ldr	r6, [pc, #304]	; (8016148 <xTaskIncrementTick+0x158>)
 8016018:	6833      	ldr	r3, [r6, #0]
 801601a:	681c      	ldr	r4, [r3, #0]
 801601c:	2c00      	cmp	r4, #0
 801601e:	d07c      	beq.n	801611a <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 8016020:	2400      	movs	r4, #0
 8016022:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8016160 <xTaskIncrementTick+0x170>
 8016026:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8016164 <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 801602a:	f04f 0a01 	mov.w	sl, #1
 801602e:	4f47      	ldr	r7, [pc, #284]	; (801614c <xTaskIncrementTick+0x15c>)
 8016030:	e024      	b.n	801607c <xTaskIncrementTick+0x8c>
 8016032:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016034:	f7fe ffa2 	bl	8014f7c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016038:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801603c:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016040:	9900      	ldr	r1, [sp, #0]
 8016042:	b112      	cbz	r2, 801604a <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016044:	f7fe ff9a 	bl	8014f7c <uxListRemove>
 8016048:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 801604a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 801604e:	683b      	ldr	r3, [r7, #0]
 8016050:	fa0a f200 	lsl.w	r2, sl, r0
 8016054:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016058:	431a      	orrs	r2, r3
 801605a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801605e:	603a      	str	r2, [r7, #0]
 8016060:	f7fe ff64 	bl	8014f2c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016064:	f8d9 3000 	ldr.w	r3, [r9]
 8016068:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 801606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801606e:	429a      	cmp	r2, r3
 8016070:	bf28      	it	cs
 8016072:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016074:	6833      	ldr	r3, [r6, #0]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d052      	beq.n	8016122 <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801607c:	6833      	ldr	r3, [r6, #0]
 801607e:	68db      	ldr	r3, [r3, #12]
 8016080:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016084:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016088:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 801608c:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801608e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8016090:	d2cf      	bcs.n	8016032 <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 8016092:	9b01      	ldr	r3, [sp, #4]
 8016094:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016096:	e021      	b.n	80160dc <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 8016098:	4a2d      	ldr	r2, [pc, #180]	; (8016150 <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 801609a:	2400      	movs	r4, #0
		++uxPendedTicks;
 801609c:	6813      	ldr	r3, [r2, #0]
 801609e:	3301      	adds	r3, #1
 80160a0:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80160a2:	4b2c      	ldr	r3, [pc, #176]	; (8016154 <xTaskIncrementTick+0x164>)
 80160a4:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80160a6:	2b00      	cmp	r3, #0
}
 80160a8:	bf0c      	ite	eq
 80160aa:	4620      	moveq	r0, r4
 80160ac:	2001      	movne	r0, #1
 80160ae:	b003      	add	sp, #12
 80160b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80160b4:	4b24      	ldr	r3, [pc, #144]	; (8016148 <xTaskIncrementTick+0x158>)
 80160b6:	681a      	ldr	r2, [r3, #0]
 80160b8:	6812      	ldr	r2, [r2, #0]
 80160ba:	b1da      	cbz	r2, 80160f4 <xTaskIncrementTick+0x104>
 80160bc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80160c0:	b672      	cpsid	i
 80160c2:	f383 8811 	msr	BASEPRI, r3
 80160c6:	f3bf 8f6f 	isb	sy
 80160ca:	f3bf 8f4f 	dsb	sy
 80160ce:	b662      	cpsie	i
 80160d0:	e7fe      	b.n	80160d0 <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 80160d2:	2400      	movs	r4, #0
 80160d4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8016160 <xTaskIncrementTick+0x170>
 80160d8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8016164 <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80160dc:	f8d9 3000 	ldr.w	r3, [r9]
 80160e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80160e6:	009b      	lsls	r3, r3, #2
 80160e8:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 80160ec:	2b02      	cmp	r3, #2
 80160ee:	bf28      	it	cs
 80160f0:	2401      	movcs	r4, #1
 80160f2:	e7d6      	b.n	80160a2 <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 80160f4:	4a18      	ldr	r2, [pc, #96]	; (8016158 <xTaskIncrementTick+0x168>)
 80160f6:	6818      	ldr	r0, [r3, #0]
 80160f8:	6811      	ldr	r1, [r2, #0]
 80160fa:	6019      	str	r1, [r3, #0]
 80160fc:	4917      	ldr	r1, [pc, #92]	; (801615c <xTaskIncrementTick+0x16c>)
 80160fe:	6010      	str	r0, [r2, #0]
 8016100:	680a      	ldr	r2, [r1, #0]
 8016102:	3201      	adds	r2, #1
 8016104:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016106:	681a      	ldr	r2, [r3, #0]
 8016108:	6812      	ldr	r2, [r2, #0]
 801610a:	b97a      	cbnz	r2, 801612c <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 801610c:	4b0d      	ldr	r3, [pc, #52]	; (8016144 <xTaskIncrementTick+0x154>)
 801610e:	461a      	mov	r2, r3
 8016110:	9301      	str	r3, [sp, #4]
 8016112:	f04f 33ff 	mov.w	r3, #4294967295
 8016116:	6013      	str	r3, [r2, #0]
 8016118:	e779      	b.n	801600e <xTaskIncrementTick+0x1e>
 801611a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8016160 <xTaskIncrementTick+0x170>
 801611e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8016164 <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016122:	f04f 33ff 	mov.w	r3, #4294967295
 8016126:	9a01      	ldr	r2, [sp, #4]
 8016128:	6013      	str	r3, [r2, #0]
					break;
 801612a:	e7d7      	b.n	80160dc <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801612c:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801612e:	4a05      	ldr	r2, [pc, #20]	; (8016144 <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016130:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016132:	9201      	str	r2, [sp, #4]
 8016134:	68db      	ldr	r3, [r3, #12]
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	6013      	str	r3, [r2, #0]
}
 801613a:	e768      	b.n	801600e <xTaskIncrementTick+0x1e>
 801613c:	200060f8 	.word	0x200060f8
 8016140:	20006174 	.word	0x20006174
 8016144:	2000612c 	.word	0x2000612c
 8016148:	20006058 	.word	0x20006058
 801614c:	20006100 	.word	0x20006100
 8016150:	200060f4 	.word	0x200060f4
 8016154:	20006178 	.word	0x20006178
 8016158:	2000605c 	.word	0x2000605c
 801615c:	20006130 	.word	0x20006130
 8016160:	20006060 	.word	0x20006060
 8016164:	20006054 	.word	0x20006054

08016168 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8016168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801616c:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 801616e:	f000 fec9 	bl	8016f04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8016172:	4b38      	ldr	r3, [pc, #224]	; (8016254 <xTaskResumeAll.part.0+0xec>)
 8016174:	681a      	ldr	r2, [r3, #0]
 8016176:	3a01      	subs	r2, #1
 8016178:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d159      	bne.n	8016234 <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016180:	4b35      	ldr	r3, [pc, #212]	; (8016258 <xTaskResumeAll.part.0+0xf0>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d055      	beq.n	8016234 <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016188:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016270 <xTaskResumeAll.part.0+0x108>
 801618c:	f8da 3000 	ldr.w	r3, [sl]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d05c      	beq.n	801624e <xTaskResumeAll.part.0+0xe6>
 8016194:	4d31      	ldr	r5, [pc, #196]	; (801625c <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 8016196:	2601      	movs	r6, #1
 8016198:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8016274 <xTaskResumeAll.part.0+0x10c>
 801619c:	4f30      	ldr	r7, [pc, #192]	; (8016260 <xTaskResumeAll.part.0+0xf8>)
 801619e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8016278 <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161a2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80161a6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80161a8:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80161ac:	f104 0018 	add.w	r0, r4, #24
 80161b0:	f7fe fee4 	bl	8014f7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80161b4:	4658      	mov	r0, fp
 80161b6:	f7fe fee1 	bl	8014f7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80161ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80161bc:	682a      	ldr	r2, [r5, #0]
 80161be:	4659      	mov	r1, fp
 80161c0:	fa06 f300 	lsl.w	r3, r6, r0
 80161c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80161c8:	4313      	orrs	r3, r2
 80161ca:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80161ce:	602b      	str	r3, [r5, #0]
 80161d0:	f7fe feac 	bl	8014f2c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80161d4:	683b      	ldr	r3, [r7, #0]
 80161d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80161d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161da:	429a      	cmp	r2, r3
 80161dc:	d301      	bcc.n	80161e2 <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 80161de:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80161e2:	f8da 3000 	ldr.w	r3, [sl]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d1db      	bne.n	80161a2 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80161ea:	4b1e      	ldr	r3, [pc, #120]	; (8016264 <xTaskResumeAll.part.0+0xfc>)
 80161ec:	681a      	ldr	r2, [r3, #0]
 80161ee:	6812      	ldr	r2, [r2, #0]
 80161f0:	b342      	cbz	r2, 8016244 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161f2:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80161f4:	4b1c      	ldr	r3, [pc, #112]	; (8016268 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161f6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80161f8:	68d2      	ldr	r2, [r2, #12]
 80161fa:	6852      	ldr	r2, [r2, #4]
 80161fc:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80161fe:	4e1b      	ldr	r6, [pc, #108]	; (801626c <xTaskResumeAll.part.0+0x104>)
 8016200:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016202:	b144      	cbz	r4, 8016216 <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 8016204:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8016206:	f7ff fef3 	bl	8015ff0 <xTaskIncrementTick>
 801620a:	b108      	cbz	r0, 8016210 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 801620c:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016210:	3c01      	subs	r4, #1
 8016212:	d1f8      	bne.n	8016206 <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 8016214:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8016216:	f8d9 3000 	ldr.w	r3, [r9]
 801621a:	b15b      	cbz	r3, 8016234 <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 801621c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016224:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016228:	f3bf 8f4f 	dsb	sy
 801622c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8016230:	2001      	movs	r0, #1
 8016232:	e000      	b.n	8016236 <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 8016234:	2000      	movs	r0, #0
 8016236:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8016238:	f000 fe8a 	bl	8016f50 <vPortExitCritical>
}
 801623c:	9801      	ldr	r0, [sp, #4]
 801623e:	b003      	add	sp, #12
 8016240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8016244:	4b08      	ldr	r3, [pc, #32]	; (8016268 <xTaskResumeAll.part.0+0x100>)
 8016246:	f04f 32ff 	mov.w	r2, #4294967295
 801624a:	601a      	str	r2, [r3, #0]
 801624c:	e7d7      	b.n	80161fe <xTaskResumeAll.part.0+0x96>
 801624e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8016278 <xTaskResumeAll.part.0+0x110>
 8016252:	e7d4      	b.n	80161fe <xTaskResumeAll.part.0+0x96>
 8016254:	200060f8 	.word	0x200060f8
 8016258:	200060ec 	.word	0x200060ec
 801625c:	20006100 	.word	0x20006100
 8016260:	20006054 	.word	0x20006054
 8016264:	20006058 	.word	0x20006058
 8016268:	2000612c 	.word	0x2000612c
 801626c:	200060f4 	.word	0x200060f4
 8016270:	20006134 	.word	0x20006134
 8016274:	20006060 	.word	0x20006060
 8016278:	20006178 	.word	0x20006178

0801627c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 801627c:	4b07      	ldr	r3, [pc, #28]	; (801629c <xTaskResumeAll+0x20>)
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	b953      	cbnz	r3, 8016298 <xTaskResumeAll+0x1c>
 8016282:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016286:	b672      	cpsid	i
 8016288:	f383 8811 	msr	BASEPRI, r3
 801628c:	f3bf 8f6f 	isb	sy
 8016290:	f3bf 8f4f 	dsb	sy
 8016294:	b662      	cpsie	i
 8016296:	e7fe      	b.n	8016296 <xTaskResumeAll+0x1a>
 8016298:	f7ff bf66 	b.w	8016168 <xTaskResumeAll.part.0>
 801629c:	200060f8 	.word	0x200060f8

080162a0 <vTaskDelay>:
	{
 80162a0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80162a2:	b950      	cbnz	r0, 80162ba <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80162a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80162a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80162b0:	f3bf 8f4f 	dsb	sy
 80162b4:	f3bf 8f6f 	isb	sy
	}
 80162b8:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80162ba:	4c12      	ldr	r4, [pc, #72]	; (8016304 <vTaskDelay+0x64>)
 80162bc:	6821      	ldr	r1, [r4, #0]
 80162be:	b151      	cbz	r1, 80162d6 <vTaskDelay+0x36>
 80162c0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80162c4:	b672      	cpsid	i
 80162c6:	f383 8811 	msr	BASEPRI, r3
 80162ca:	f3bf 8f6f 	isb	sy
 80162ce:	f3bf 8f4f 	dsb	sy
 80162d2:	b662      	cpsie	i
 80162d4:	e7fe      	b.n	80162d4 <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 80162d6:	6823      	ldr	r3, [r4, #0]
 80162d8:	3301      	adds	r3, #1
 80162da:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80162dc:	f7ff fc68 	bl	8015bb0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 80162e0:	6823      	ldr	r3, [r4, #0]
 80162e2:	b953      	cbnz	r3, 80162fa <vTaskDelay+0x5a>
 80162e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80162e8:	b672      	cpsid	i
 80162ea:	f383 8811 	msr	BASEPRI, r3
 80162ee:	f3bf 8f6f 	isb	sy
 80162f2:	f3bf 8f4f 	dsb	sy
 80162f6:	b662      	cpsie	i
 80162f8:	e7fe      	b.n	80162f8 <vTaskDelay+0x58>
 80162fa:	f7ff ff35 	bl	8016168 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80162fe:	2800      	cmp	r0, #0
 8016300:	d0d0      	beq.n	80162a4 <vTaskDelay+0x4>
	}
 8016302:	bd10      	pop	{r4, pc}
 8016304:	200060f8 	.word	0x200060f8

08016308 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016308:	4b04      	ldr	r3, [pc, #16]	; (801631c <vTaskSwitchContext+0x14>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	b11b      	cbz	r3, 8016316 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 801630e:	4b04      	ldr	r3, [pc, #16]	; (8016320 <vTaskSwitchContext+0x18>)
 8016310:	2201      	movs	r2, #1
 8016312:	601a      	str	r2, [r3, #0]
}
 8016314:	4770      	bx	lr
 8016316:	f7ff bced 	b.w	8015cf4 <vTaskSwitchContext.part.0>
 801631a:	bf00      	nop
 801631c:	200060f8 	.word	0x200060f8
 8016320:	20006178 	.word	0x20006178

08016324 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8016324:	b160      	cbz	r0, 8016340 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016326:	4b0c      	ldr	r3, [pc, #48]	; (8016358 <vTaskPlaceOnEventList+0x34>)
{
 8016328:	b510      	push	{r4, lr}
 801632a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801632c:	6819      	ldr	r1, [r3, #0]
 801632e:	3118      	adds	r1, #24
 8016330:	f7fe fe0c 	bl	8014f4c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016334:	4620      	mov	r0, r4
 8016336:	2101      	movs	r1, #1
}
 8016338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801633c:	f7ff bc38 	b.w	8015bb0 <prvAddCurrentTaskToDelayedList>
 8016340:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016344:	b672      	cpsid	i
 8016346:	f383 8811 	msr	BASEPRI, r3
 801634a:	f3bf 8f6f 	isb	sy
 801634e:	f3bf 8f4f 	dsb	sy
 8016352:	b662      	cpsie	i
	configASSERT( pxEventList );
 8016354:	e7fe      	b.n	8016354 <vTaskPlaceOnEventList+0x30>
 8016356:	bf00      	nop
 8016358:	20006054 	.word	0x20006054

0801635c <vTaskPlaceOnEventListRestricted>:
	{
 801635c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 801635e:	b180      	cbz	r0, 8016382 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016360:	4b0d      	ldr	r3, [pc, #52]	; (8016398 <vTaskPlaceOnEventListRestricted+0x3c>)
 8016362:	460d      	mov	r5, r1
 8016364:	4614      	mov	r4, r2
 8016366:	6819      	ldr	r1, [r3, #0]
 8016368:	3118      	adds	r1, #24
 801636a:	f7fe fddf 	bl	8014f2c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 801636e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016370:	4621      	mov	r1, r4
 8016372:	bf0c      	ite	eq
 8016374:	4628      	moveq	r0, r5
 8016376:	f04f 30ff 	movne.w	r0, #4294967295
	}
 801637a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801637e:	f7ff bc17 	b.w	8015bb0 <prvAddCurrentTaskToDelayedList>
 8016382:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016386:	b672      	cpsid	i
 8016388:	f383 8811 	msr	BASEPRI, r3
 801638c:	f3bf 8f6f 	isb	sy
 8016390:	f3bf 8f4f 	dsb	sy
 8016394:	b662      	cpsie	i
		configASSERT( pxEventList );
 8016396:	e7fe      	b.n	8016396 <vTaskPlaceOnEventListRestricted+0x3a>
 8016398:	20006054 	.word	0x20006054

0801639c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801639c:	68c3      	ldr	r3, [r0, #12]
{
 801639e:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163a0:	68dc      	ldr	r4, [r3, #12]
{
 80163a2:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 80163a4:	b364      	cbz	r4, 8016400 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80163a6:	f104 0518 	add.w	r5, r4, #24
 80163aa:	4628      	mov	r0, r5
 80163ac:	f7fe fde6 	bl	8014f7c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80163b0:	4b1a      	ldr	r3, [pc, #104]	; (801641c <xTaskRemoveFromEventList+0x80>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	b17b      	cbz	r3, 80163d6 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80163b6:	4629      	mov	r1, r5
 80163b8:	4819      	ldr	r0, [pc, #100]	; (8016420 <xTaskRemoveFromEventList+0x84>)
 80163ba:	f7fe fdb7 	bl	8014f2c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80163be:	4b19      	ldr	r3, [pc, #100]	; (8016424 <xTaskRemoveFromEventList+0x88>)
 80163c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d925      	bls.n	8016416 <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 80163ca:	2301      	movs	r3, #1
 80163cc:	4a16      	ldr	r2, [pc, #88]	; (8016428 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 80163ce:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 80163d0:	6013      	str	r3, [r2, #0]
}
 80163d2:	b003      	add	sp, #12
 80163d4:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80163d6:	1d21      	adds	r1, r4, #4
 80163d8:	4608      	mov	r0, r1
 80163da:	9101      	str	r1, [sp, #4]
 80163dc:	f7fe fdce 	bl	8014f7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80163e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80163e2:	4a12      	ldr	r2, [pc, #72]	; (801642c <xTaskRemoveFromEventList+0x90>)
 80163e4:	2301      	movs	r3, #1
 80163e6:	9901      	ldr	r1, [sp, #4]
 80163e8:	6815      	ldr	r5, [r2, #0]
 80163ea:	4083      	lsls	r3, r0
 80163ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80163f0:	432b      	orrs	r3, r5
 80163f2:	6013      	str	r3, [r2, #0]
 80163f4:	4b0e      	ldr	r3, [pc, #56]	; (8016430 <xTaskRemoveFromEventList+0x94>)
 80163f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80163fa:	f7fe fd97 	bl	8014f2c <vListInsertEnd>
 80163fe:	e7de      	b.n	80163be <xTaskRemoveFromEventList+0x22>
 8016400:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016404:	b672      	cpsid	i
 8016406:	f383 8811 	msr	BASEPRI, r3
 801640a:	f3bf 8f6f 	isb	sy
 801640e:	f3bf 8f4f 	dsb	sy
 8016412:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8016414:	e7fe      	b.n	8016414 <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 8016416:	2000      	movs	r0, #0
}
 8016418:	b003      	add	sp, #12
 801641a:	bd30      	pop	{r4, r5, pc}
 801641c:	200060f8 	.word	0x200060f8
 8016420:	20006134 	.word	0x20006134
 8016424:	20006054 	.word	0x20006054
 8016428:	20006178 	.word	0x20006178
 801642c:	20006100 	.word	0x20006100
 8016430:	20006060 	.word	0x20006060

08016434 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016434:	4a03      	ldr	r2, [pc, #12]	; (8016444 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016436:	4b04      	ldr	r3, [pc, #16]	; (8016448 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016438:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	e9c0 2300 	strd	r2, r3, [r0]
}
 8016440:	4770      	bx	lr
 8016442:	bf00      	nop
 8016444:	20006130 	.word	0x20006130
 8016448:	20006174 	.word	0x20006174

0801644c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 801644c:	b338      	cbz	r0, 801649e <xTaskCheckForTimeOut+0x52>
{
 801644e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016450:	460d      	mov	r5, r1
 8016452:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8016454:	b1c1      	cbz	r1, 8016488 <xTaskCheckForTimeOut+0x3c>
 8016456:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8016458:	f000 fd54 	bl	8016f04 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 801645c:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 801645e:	4a1f      	ldr	r2, [pc, #124]	; (80164dc <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 8016460:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8016462:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8016464:	d034      	beq.n	80164d0 <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016466:	f8df c078 	ldr.w	ip, [pc, #120]	; 80164e0 <xTaskCheckForTimeOut+0x94>
 801646a:	6826      	ldr	r6, [r4, #0]
 801646c:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016470:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016472:	42be      	cmp	r6, r7
 8016474:	d01e      	beq.n	80164b4 <xTaskCheckForTimeOut+0x68>
 8016476:	4288      	cmp	r0, r1
 8016478:	d81c      	bhi.n	80164b4 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 801647a:	2001      	movs	r0, #1
 801647c:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 801647e:	f000 fd67 	bl	8016f50 <vPortExitCritical>
}
 8016482:	9801      	ldr	r0, [sp, #4]
 8016484:	b003      	add	sp, #12
 8016486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016488:	f04f 0330 	mov.w	r3, #48	; 0x30
 801648c:	b672      	cpsid	i
 801648e:	f383 8811 	msr	BASEPRI, r3
 8016492:	f3bf 8f6f 	isb	sy
 8016496:	f3bf 8f4f 	dsb	sy
 801649a:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 801649c:	e7fe      	b.n	801649c <xTaskCheckForTimeOut+0x50>
 801649e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80164a2:	b672      	cpsid	i
 80164a4:	f383 8811 	msr	BASEPRI, r3
 80164a8:	f3bf 8f6f 	isb	sy
 80164ac:	f3bf 8f4f 	dsb	sy
 80164b0:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 80164b2:	e7fe      	b.n	80164b2 <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80164b4:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80164b8:	4573      	cmp	r3, lr
 80164ba:	d90b      	bls.n	80164d4 <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 80164bc:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80164be:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80164c2:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80164c4:	4403      	add	r3, r0
			xReturn = pdFALSE;
 80164c6:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 80164c8:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80164ca:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80164ce:	e7d5      	b.n	801647c <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 80164d0:	2000      	movs	r0, #0
 80164d2:	e7d3      	b.n	801647c <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 80164d4:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80164d6:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 80164d8:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80164da:	e7cf      	b.n	801647c <xTaskCheckForTimeOut+0x30>
 80164dc:	20006174 	.word	0x20006174
 80164e0:	20006130 	.word	0x20006130

080164e4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80164e4:	4b01      	ldr	r3, [pc, #4]	; (80164ec <vTaskMissedYield+0x8>)
 80164e6:	2201      	movs	r2, #1
 80164e8:	601a      	str	r2, [r3, #0]
}
 80164ea:	4770      	bx	lr
 80164ec:	20006178 	.word	0x20006178

080164f0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80164f0:	4b01      	ldr	r3, [pc, #4]	; (80164f8 <xTaskGetCurrentTaskHandle+0x8>)
 80164f2:	6818      	ldr	r0, [r3, #0]
	}
 80164f4:	4770      	bx	lr
 80164f6:	bf00      	nop
 80164f8:	20006054 	.word	0x20006054

080164fc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80164fc:	4b05      	ldr	r3, [pc, #20]	; (8016514 <xTaskGetSchedulerState+0x18>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	b133      	cbz	r3, 8016510 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016502:	4b05      	ldr	r3, [pc, #20]	; (8016518 <xTaskGetSchedulerState+0x1c>)
 8016504:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8016506:	2b00      	cmp	r3, #0
 8016508:	bf0c      	ite	eq
 801650a:	2002      	moveq	r0, #2
 801650c:	2000      	movne	r0, #0
 801650e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016510:	2001      	movs	r0, #1
	}
 8016512:	4770      	bx	lr
 8016514:	20006148 	.word	0x20006148
 8016518:	200060f8 	.word	0x200060f8

0801651c <xTaskPriorityInherit>:
	{
 801651c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 801651e:	4604      	mov	r4, r0
	{
 8016520:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8016522:	b1c8      	cbz	r0, 8016558 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016524:	4d26      	ldr	r5, [pc, #152]	; (80165c0 <xTaskPriorityInherit+0xa4>)
 8016526:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016528:	682a      	ldr	r2, [r5, #0]
 801652a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801652c:	4293      	cmp	r3, r2
 801652e:	d215      	bcs.n	801655c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016530:	6982      	ldr	r2, [r0, #24]
 8016532:	2a00      	cmp	r2, #0
 8016534:	db04      	blt.n	8016540 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016536:	682a      	ldr	r2, [r5, #0]
 8016538:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801653a:	f1c2 0207 	rsb	r2, r2, #7
 801653e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016540:	4e20      	ldr	r6, [pc, #128]	; (80165c4 <xTaskPriorityInherit+0xa8>)
 8016542:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016546:	6962      	ldr	r2, [r4, #20]
 8016548:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801654c:	429a      	cmp	r2, r3
 801654e:	d00e      	beq.n	801656e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016550:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8016552:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016556:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8016558:	b002      	add	sp, #8
 801655a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801655c:	682b      	ldr	r3, [r5, #0]
 801655e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016562:	4298      	cmp	r0, r3
 8016564:	bf2c      	ite	cs
 8016566:	2000      	movcs	r0, #0
 8016568:	2001      	movcc	r0, #1
	}
 801656a:	b002      	add	sp, #8
 801656c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801656e:	1d21      	adds	r1, r4, #4
 8016570:	4608      	mov	r0, r1
 8016572:	9101      	str	r1, [sp, #4]
 8016574:	f7fe fd02 	bl	8014f7c <uxListRemove>
 8016578:	9901      	ldr	r1, [sp, #4]
 801657a:	b970      	cbnz	r0, 801659a <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801657c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801657e:	4a12      	ldr	r2, [pc, #72]	; (80165c8 <xTaskPriorityInherit+0xac>)
 8016580:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8016584:	009b      	lsls	r3, r3, #2
 8016586:	58f3      	ldr	r3, [r6, r3]
 8016588:	b943      	cbnz	r3, 801659c <xTaskPriorityInherit+0x80>
 801658a:	2301      	movs	r3, #1
 801658c:	fa03 f000 	lsl.w	r0, r3, r0
 8016590:	6813      	ldr	r3, [r2, #0]
 8016592:	ea23 0300 	bic.w	r3, r3, r0
 8016596:	6013      	str	r3, [r2, #0]
 8016598:	e000      	b.n	801659c <xTaskPriorityInherit+0x80>
 801659a:	4a0b      	ldr	r2, [pc, #44]	; (80165c8 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801659c:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801659e:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80165a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165a2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80165a4:	2401      	movs	r4, #1
 80165a6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80165aa:	fa04 f303 	lsl.w	r3, r4, r3
 80165ae:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80165b2:	432b      	orrs	r3, r5
 80165b4:	6013      	str	r3, [r2, #0]
 80165b6:	f7fe fcb9 	bl	8014f2c <vListInsertEnd>
				xReturn = pdTRUE;
 80165ba:	4620      	mov	r0, r4
 80165bc:	e7cc      	b.n	8016558 <xTaskPriorityInherit+0x3c>
 80165be:	bf00      	nop
 80165c0:	20006054 	.word	0x20006054
 80165c4:	20006060 	.word	0x20006060
 80165c8:	20006100 	.word	0x20006100

080165cc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80165cc:	b340      	cbz	r0, 8016620 <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 80165ce:	4b2c      	ldr	r3, [pc, #176]	; (8016680 <xTaskPriorityDisinherit+0xb4>)
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	4283      	cmp	r3, r0
	{
 80165d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165d6:	4604      	mov	r4, r0
 80165d8:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 80165da:	d00a      	beq.n	80165f2 <xTaskPriorityDisinherit+0x26>
 80165dc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80165e0:	b672      	cpsid	i
 80165e2:	f383 8811 	msr	BASEPRI, r3
 80165e6:	f3bf 8f6f 	isb	sy
 80165ea:	f3bf 8f4f 	dsb	sy
 80165ee:	b662      	cpsie	i
 80165f0:	e7fe      	b.n	80165f0 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80165f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165f4:	b14b      	cbz	r3, 801660a <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80165f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80165f8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80165fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80165fc:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80165fe:	4291      	cmp	r1, r2
 8016600:	d000      	beq.n	8016604 <xTaskPriorityDisinherit+0x38>
 8016602:	b17b      	cbz	r3, 8016624 <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8016604:	2000      	movs	r0, #0
	}
 8016606:	b003      	add	sp, #12
 8016608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801660a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801660e:	b672      	cpsid	i
 8016610:	f383 8811 	msr	BASEPRI, r3
 8016614:	f3bf 8f6f 	isb	sy
 8016618:	f3bf 8f4f 	dsb	sy
 801661c:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 801661e:	e7fe      	b.n	801661e <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8016620:	2000      	movs	r0, #0
	}
 8016622:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016624:	1d01      	adds	r1, r0, #4
 8016626:	4608      	mov	r0, r1
 8016628:	9101      	str	r1, [sp, #4]
 801662a:	f7fe fca7 	bl	8014f7c <uxListRemove>
 801662e:	9901      	ldr	r1, [sp, #4]
 8016630:	b1a0      	cbz	r0, 801665c <xTaskPriorityDisinherit+0x90>
 8016632:	4814      	ldr	r0, [pc, #80]	; (8016684 <xTaskPriorityDisinherit+0xb8>)
 8016634:	4a14      	ldr	r2, [pc, #80]	; (8016688 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016636:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8016638:	2501      	movs	r5, #1
 801663a:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801663c:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016640:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016642:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8016644:	fa05 f403 	lsl.w	r4, r5, r3
 8016648:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801664c:	4334      	orrs	r4, r6
 801664e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016652:	6014      	str	r4, [r2, #0]
 8016654:	f7fe fc6a 	bl	8014f2c <vListInsertEnd>
					xReturn = pdTRUE;
 8016658:	4628      	mov	r0, r5
		return xReturn;
 801665a:	e7d4      	b.n	8016606 <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801665c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 801665e:	4809      	ldr	r0, [pc, #36]	; (8016684 <xTaskPriorityDisinherit+0xb8>)
 8016660:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8016664:	4a08      	ldr	r2, [pc, #32]	; (8016688 <xTaskPriorityDisinherit+0xbc>)
 8016666:	009b      	lsls	r3, r3, #2
 8016668:	58c3      	ldr	r3, [r0, r3]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d1e3      	bne.n	8016636 <xTaskPriorityDisinherit+0x6a>
 801666e:	2301      	movs	r3, #1
 8016670:	fa03 f505 	lsl.w	r5, r3, r5
 8016674:	6813      	ldr	r3, [r2, #0]
 8016676:	ea23 0305 	bic.w	r3, r3, r5
 801667a:	6013      	str	r3, [r2, #0]
 801667c:	e7db      	b.n	8016636 <xTaskPriorityDisinherit+0x6a>
 801667e:	bf00      	nop
 8016680:	20006054 	.word	0x20006054
 8016684:	20006060 	.word	0x20006060
 8016688:	20006100 	.word	0x20006100

0801668c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801668c:	2800      	cmp	r0, #0
 801668e:	d044      	beq.n	801671a <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8016690:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 8016692:	b530      	push	{r4, r5, lr}
 8016694:	4604      	mov	r4, r0
 8016696:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8016698:	b153      	cbz	r3, 80166b0 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801669a:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 801669c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801669e:	4281      	cmp	r1, r0
 80166a0:	bf38      	it	cc
 80166a2:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80166a4:	428a      	cmp	r2, r1
 80166a6:	d001      	beq.n	80166ac <vTaskPriorityDisinheritAfterTimeout+0x20>
 80166a8:	2b01      	cmp	r3, #1
 80166aa:	d00c      	beq.n	80166c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 80166ac:	b003      	add	sp, #12
 80166ae:	bd30      	pop	{r4, r5, pc}
 80166b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166b4:	b672      	cpsid	i
 80166b6:	f383 8811 	msr	BASEPRI, r3
 80166ba:	f3bf 8f6f 	isb	sy
 80166be:	f3bf 8f4f 	dsb	sy
 80166c2:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 80166c4:	e7fe      	b.n	80166c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 80166c6:	4b25      	ldr	r3, [pc, #148]	; (801675c <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	42a3      	cmp	r3, r4
 80166cc:	d026      	beq.n	801671c <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80166ce:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 80166d0:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	db02      	blt.n	80166dc <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166d6:	f1c1 0107 	rsb	r1, r1, #7
 80166da:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80166dc:	4d20      	ldr	r5, [pc, #128]	; (8016760 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80166de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80166e2:	6961      	ldr	r1, [r4, #20]
 80166e4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80166e8:	4299      	cmp	r1, r3
 80166ea:	d1df      	bne.n	80166ac <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80166ec:	1d21      	adds	r1, r4, #4
 80166ee:	4608      	mov	r0, r1
 80166f0:	9101      	str	r1, [sp, #4]
 80166f2:	f7fe fc43 	bl	8014f7c <uxListRemove>
 80166f6:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80166f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80166fa:	b1d0      	cbz	r0, 8016732 <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80166fc:	2301      	movs	r3, #1
 80166fe:	0090      	lsls	r0, r2, #2
 8016700:	4c18      	ldr	r4, [pc, #96]	; (8016764 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016702:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8016704:	4410      	add	r0, r2
 8016706:	6822      	ldr	r2, [r4, #0]
 8016708:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 801670c:	4313      	orrs	r3, r2
 801670e:	6023      	str	r3, [r4, #0]
	}
 8016710:	b003      	add	sp, #12
 8016712:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8016716:	f7fe bc09 	b.w	8014f2c <vListInsertEnd>
 801671a:	4770      	bx	lr
 801671c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016720:	b672      	cpsid	i
 8016722:	f383 8811 	msr	BASEPRI, r3
 8016726:	f3bf 8f6f 	isb	sy
 801672a:	f3bf 8f4f 	dsb	sy
 801672e:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8016730:	e7fe      	b.n	8016730 <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016732:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8016736:	0090      	lsls	r0, r2, #2
 8016738:	009b      	lsls	r3, r3, #2
 801673a:	58eb      	ldr	r3, [r5, r3]
 801673c:	b11b      	cbz	r3, 8016746 <vTaskPriorityDisinheritAfterTimeout+0xba>
 801673e:	2301      	movs	r3, #1
 8016740:	4c08      	ldr	r4, [pc, #32]	; (8016764 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016742:	4093      	lsls	r3, r2
 8016744:	e7de      	b.n	8016704 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8016746:	4c07      	ldr	r4, [pc, #28]	; (8016764 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016748:	2301      	movs	r3, #1
 801674a:	f8d4 c000 	ldr.w	ip, [r4]
 801674e:	4093      	lsls	r3, r2
 8016750:	ea2c 0c03 	bic.w	ip, ip, r3
 8016754:	f8c4 c000 	str.w	ip, [r4]
 8016758:	e7d4      	b.n	8016704 <vTaskPriorityDisinheritAfterTimeout+0x78>
 801675a:	bf00      	nop
 801675c:	20006054 	.word	0x20006054
 8016760:	20006060 	.word	0x20006060
 8016764:	20006100 	.word	0x20006100

08016768 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8016768:	4b04      	ldr	r3, [pc, #16]	; (801677c <pvTaskIncrementMutexHeldCount+0x14>)
 801676a:	681a      	ldr	r2, [r3, #0]
 801676c:	b11a      	cbz	r2, 8016776 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 801676e:	6819      	ldr	r1, [r3, #0]
 8016770:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8016772:	3201      	adds	r2, #1
 8016774:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8016776:	6818      	ldr	r0, [r3, #0]
	}
 8016778:	4770      	bx	lr
 801677a:	bf00      	nop
 801677c:	20006054 	.word	0x20006054

08016780 <ulTaskNotifyTake>:
	{
 8016780:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8016782:	4c1a      	ldr	r4, [pc, #104]	; (80167ec <ulTaskNotifyTake+0x6c>)
	{
 8016784:	4606      	mov	r6, r0
 8016786:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8016788:	f000 fbbc 	bl	8016f04 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801678c:	6823      	ldr	r3, [r4, #0]
 801678e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016792:	b923      	cbnz	r3, 801679e <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8016794:	6823      	ldr	r3, [r4, #0]
 8016796:	2101      	movs	r1, #1
 8016798:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
				if( xTicksToWait > ( TickType_t ) 0 )
 801679c:	b9c5      	cbnz	r5, 80167d0 <ulTaskNotifyTake+0x50>
		taskEXIT_CRITICAL();
 801679e:	f000 fbd7 	bl	8016f50 <vPortExitCritical>
		taskENTER_CRITICAL();
 80167a2:	f000 fbaf 	bl	8016f04 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80167a6:	6823      	ldr	r3, [r4, #0]
 80167a8:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
			if( ulReturn != 0UL )
 80167ac:	b125      	cbz	r5, 80167b8 <ulTaskNotifyTake+0x38>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80167ae:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80167b0:	b156      	cbz	r6, 80167c8 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80167b2:	2200      	movs	r2, #0
 80167b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80167b8:	6823      	ldr	r3, [r4, #0]
 80167ba:	2200      	movs	r2, #0
 80167bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		taskEXIT_CRITICAL();
 80167c0:	f000 fbc6 	bl	8016f50 <vPortExitCritical>
	}
 80167c4:	4628      	mov	r0, r5
 80167c6:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80167c8:	1e6a      	subs	r2, r5, #1
 80167ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80167ce:	e7f3      	b.n	80167b8 <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80167d0:	4628      	mov	r0, r5
 80167d2:	f7ff f9ed 	bl	8015bb0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80167d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80167da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80167e2:	f3bf 8f4f 	dsb	sy
 80167e6:	f3bf 8f6f 	isb	sy
 80167ea:	e7d8      	b.n	801679e <ulTaskNotifyTake+0x1e>
 80167ec:	20006054 	.word	0x20006054

080167f0 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 80167f0:	b318      	cbz	r0, 801683a <vTaskNotifyGiveFromISR+0x4a>
	{
 80167f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167f4:	b083      	sub	sp, #12
 80167f6:	4604      	mov	r4, r0
 80167f8:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80167fa:	f000 fc89 	bl	8017110 <vPortValidateInterruptPriority>
	__asm volatile
 80167fe:	f3ef 8611 	mrs	r6, BASEPRI
 8016802:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016806:	b672      	cpsid	i
 8016808:	f383 8811 	msr	BASEPRI, r3
 801680c:	f3bf 8f6f 	isb	sy
 8016810:	f3bf 8f4f 	dsb	sy
 8016814:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016816:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016818:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801681c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016820:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8016822:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016826:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 8016828:	f103 0301 	add.w	r3, r3, #1
 801682c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016830:	d00e      	beq.n	8016850 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 8016832:	f386 8811 	msr	BASEPRI, r6
	}
 8016836:	b003      	add	sp, #12
 8016838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 801683a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801683e:	b672      	cpsid	i
 8016840:	f383 8811 	msr	BASEPRI, r3
 8016844:	f3bf 8f6f 	isb	sy
 8016848:	f3bf 8f4f 	dsb	sy
 801684c:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 801684e:	e7fe      	b.n	801684e <vTaskNotifyGiveFromISR+0x5e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016850:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016852:	b153      	cbz	r3, 801686a <vTaskNotifyGiveFromISR+0x7a>
 8016854:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016858:	b672      	cpsid	i
 801685a:	f383 8811 	msr	BASEPRI, r3
 801685e:	f3bf 8f6f 	isb	sy
 8016862:	f3bf 8f4f 	dsb	sy
 8016866:	b662      	cpsie	i
 8016868:	e7fe      	b.n	8016868 <vTaskNotifyGiveFromISR+0x78>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801686a:	4b14      	ldr	r3, [pc, #80]	; (80168bc <vTaskNotifyGiveFromISR+0xcc>)
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	b18b      	cbz	r3, 8016894 <vTaskNotifyGiveFromISR+0xa4>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8016870:	f104 0118 	add.w	r1, r4, #24
 8016874:	4812      	ldr	r0, [pc, #72]	; (80168c0 <vTaskNotifyGiveFromISR+0xd0>)
 8016876:	f7fe fb59 	bl	8014f2c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801687a:	4b12      	ldr	r3, [pc, #72]	; (80168c4 <vTaskNotifyGiveFromISR+0xd4>)
 801687c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016882:	429a      	cmp	r2, r3
 8016884:	d9d5      	bls.n	8016832 <vTaskNotifyGiveFromISR+0x42>
					if( pxHigherPriorityTaskWoken != NULL )
 8016886:	b10d      	cbz	r5, 801688c <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8016888:	2301      	movs	r3, #1
 801688a:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 801688c:	4b0e      	ldr	r3, [pc, #56]	; (80168c8 <vTaskNotifyGiveFromISR+0xd8>)
 801688e:	2201      	movs	r2, #1
 8016890:	601a      	str	r2, [r3, #0]
 8016892:	e7ce      	b.n	8016832 <vTaskNotifyGiveFromISR+0x42>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016894:	1d21      	adds	r1, r4, #4
 8016896:	4608      	mov	r0, r1
 8016898:	9101      	str	r1, [sp, #4]
 801689a:	f7fe fb6f 	bl	8014f7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801689e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80168a0:	4b0a      	ldr	r3, [pc, #40]	; (80168cc <vTaskNotifyGiveFromISR+0xdc>)
 80168a2:	4087      	lsls	r7, r0
 80168a4:	4a0a      	ldr	r2, [pc, #40]	; (80168d0 <vTaskNotifyGiveFromISR+0xe0>)
 80168a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80168aa:	9901      	ldr	r1, [sp, #4]
 80168ac:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80168b0:	681a      	ldr	r2, [r3, #0]
 80168b2:	4317      	orrs	r7, r2
 80168b4:	601f      	str	r7, [r3, #0]
 80168b6:	f7fe fb39 	bl	8014f2c <vListInsertEnd>
 80168ba:	e7de      	b.n	801687a <vTaskNotifyGiveFromISR+0x8a>
 80168bc:	200060f8 	.word	0x200060f8
 80168c0:	20006134 	.word	0x20006134
 80168c4:	20006054 	.word	0x20006054
 80168c8:	20006178 	.word	0x20006178
 80168cc:	20006100 	.word	0x20006100
 80168d0:	20006060 	.word	0x20006060

080168d4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80168d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80168d6:	4c12      	ldr	r4, [pc, #72]	; (8016920 <prvCheckForValidListAndQueue+0x4c>)
{
 80168d8:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80168da:	f000 fb13 	bl	8016f04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80168de:	6825      	ldr	r5, [r4, #0]
 80168e0:	b125      	cbz	r5, 80168ec <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80168e2:	b003      	add	sp, #12
 80168e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80168e8:	f000 bb32 	b.w	8016f50 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 80168ec:	4f0d      	ldr	r7, [pc, #52]	; (8016924 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 80168ee:	4e0e      	ldr	r6, [pc, #56]	; (8016928 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 80168f0:	4638      	mov	r0, r7
 80168f2:	f7fe fb0b 	bl	8014f0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80168f6:	4630      	mov	r0, r6
 80168f8:	f7fe fb08 	bl	8014f0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80168fc:	4a0b      	ldr	r2, [pc, #44]	; (801692c <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80168fe:	9500      	str	r5, [sp, #0]
 8016900:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8016902:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016904:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8016906:	4a0a      	ldr	r2, [pc, #40]	; (8016930 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016908:	4b0a      	ldr	r3, [pc, #40]	; (8016934 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 801690a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801690c:	4a0a      	ldr	r2, [pc, #40]	; (8016938 <prvCheckForValidListAndQueue+0x64>)
 801690e:	f7fe fc19 	bl	8015144 <xQueueGenericCreateStatic>
 8016912:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8016914:	2800      	cmp	r0, #0
 8016916:	d0e4      	beq.n	80168e2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016918:	4908      	ldr	r1, [pc, #32]	; (801693c <prvCheckForValidListAndQueue+0x68>)
 801691a:	f7ff f881 	bl	8015a20 <vQueueAddToRegistry>
 801691e:	e7e0      	b.n	80168e2 <prvCheckForValidListAndQueue+0xe>
 8016920:	20006298 	.word	0x20006298
 8016924:	20006224 	.word	0x20006224
 8016928:	20006238 	.word	0x20006238
 801692c:	2000617c 	.word	0x2000617c
 8016930:	20006180 	.word	0x20006180
 8016934:	20006250 	.word	0x20006250
 8016938:	20006184 	.word	0x20006184
 801693c:	0802c098 	.word	0x0802c098

08016940 <xTimerCreateTimerTask>:
{
 8016940:	b530      	push	{r4, r5, lr}
 8016942:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8016944:	f7ff ffc6 	bl	80168d4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8016948:	4b13      	ldr	r3, [pc, #76]	; (8016998 <xTimerCreateTimerTask+0x58>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	b1cb      	cbz	r3, 8016982 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801694e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016950:	aa07      	add	r2, sp, #28
 8016952:	a906      	add	r1, sp, #24
 8016954:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016956:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016958:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801695c:	f7ea fa2e 	bl	8000dbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016960:	4623      	mov	r3, r4
 8016962:	9a07      	ldr	r2, [sp, #28]
 8016964:	9500      	str	r5, [sp, #0]
 8016966:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 801696a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801696e:	490b      	ldr	r1, [pc, #44]	; (801699c <xTimerCreateTimerTask+0x5c>)
 8016970:	480b      	ldr	r0, [pc, #44]	; (80169a0 <xTimerCreateTimerTask+0x60>)
 8016972:	f7ff fa61 	bl	8015e38 <xTaskCreateStatic>
 8016976:	4b0b      	ldr	r3, [pc, #44]	; (80169a4 <xTimerCreateTimerTask+0x64>)
 8016978:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801697a:	b110      	cbz	r0, 8016982 <xTimerCreateTimerTask+0x42>
}
 801697c:	2001      	movs	r0, #1
 801697e:	b009      	add	sp, #36	; 0x24
 8016980:	bd30      	pop	{r4, r5, pc}
 8016982:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016986:	b672      	cpsid	i
 8016988:	f383 8811 	msr	BASEPRI, r3
 801698c:	f3bf 8f6f 	isb	sy
 8016990:	f3bf 8f4f 	dsb	sy
 8016994:	b662      	cpsie	i
	configASSERT( xReturn );
 8016996:	e7fe      	b.n	8016996 <xTimerCreateTimerTask+0x56>
 8016998:	20006298 	.word	0x20006298
 801699c:	0802c0a0 	.word	0x0802c0a0
 80169a0:	08016ba1 	.word	0x08016ba1
 80169a4:	2000629c 	.word	0x2000629c

080169a8 <xTimerCreate>:
	{
 80169a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169ac:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80169ae:	2028      	movs	r0, #40	; 0x28
	{
 80169b0:	4688      	mov	r8, r1
 80169b2:	4615      	mov	r5, r2
 80169b4:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80169b6:	f000 fc0f 	bl	80171d8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 80169ba:	4604      	mov	r4, r0
 80169bc:	b1b0      	cbz	r0, 80169ec <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 80169be:	2300      	movs	r3, #0
 80169c0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80169c4:	f1b8 0f00 	cmp.w	r8, #0
 80169c8:	d013      	beq.n	80169f2 <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 80169ca:	f7ff ff83 	bl	80168d4 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80169ce:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80169d0:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 80169d2:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80169d4:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 80169d6:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80169da:	f7fe faa3 	bl	8014f24 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80169de:	b12d      	cbz	r5, 80169ec <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80169e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80169e4:	f043 0304 	orr.w	r3, r3, #4
 80169e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 80169ec:	4620      	mov	r0, r4
 80169ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80169f6:	b672      	cpsid	i
 80169f8:	f383 8811 	msr	BASEPRI, r3
 80169fc:	f3bf 8f6f 	isb	sy
 8016a00:	f3bf 8f4f 	dsb	sy
 8016a04:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016a06:	e7fe      	b.n	8016a06 <xTimerCreate+0x5e>

08016a08 <xTimerCreateStatic>:
	{
 8016a08:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8016a0a:	2428      	movs	r4, #40	; 0x28
	{
 8016a0c:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 8016a0e:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 8016a10:	9d05      	ldr	r5, [sp, #20]
 8016a12:	2d28      	cmp	r5, #40	; 0x28
 8016a14:	d00a      	beq.n	8016a2c <xTimerCreateStatic+0x24>
 8016a16:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016a1a:	b672      	cpsid	i
 8016a1c:	f383 8811 	msr	BASEPRI, r3
 8016a20:	f3bf 8f6f 	isb	sy
 8016a24:	f3bf 8f4f 	dsb	sy
 8016a28:	b662      	cpsie	i
 8016a2a:	e7fe      	b.n	8016a2a <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016a2c:	4604      	mov	r4, r0
 8016a2e:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 8016a30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016a32:	b318      	cbz	r0, 8016a7c <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8016a34:	2002      	movs	r0, #2
 8016a36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016a38:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016a3c:	b349      	cbz	r1, 8016a92 <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 8016a3e:	9101      	str	r1, [sp, #4]
 8016a40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016a44:	f7ff ff46 	bl	80168d4 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8016a4a:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 8016a4c:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 8016a4e:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8016a50:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016a52:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 8016a54:	9b03      	ldr	r3, [sp, #12]
 8016a56:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8016a58:	4613      	mov	r3, r2
 8016a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a5c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016a5e:	f7fe fa61 	bl	8014f24 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8016a62:	9a02      	ldr	r2, [sp, #8]
 8016a64:	b13a      	cbz	r2, 8016a76 <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8016a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016a6e:	f043 0304 	orr.w	r3, r3, #4
 8016a72:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 8016a76:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016a78:	b007      	add	sp, #28
 8016a7a:	bd30      	pop	{r4, r5, pc}
 8016a7c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016a80:	b672      	cpsid	i
 8016a82:	f383 8811 	msr	BASEPRI, r3
 8016a86:	f3bf 8f6f 	isb	sy
 8016a8a:	f3bf 8f4f 	dsb	sy
 8016a8e:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 8016a90:	e7fe      	b.n	8016a90 <xTimerCreateStatic+0x88>
 8016a92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016a96:	b672      	cpsid	i
 8016a98:	f383 8811 	msr	BASEPRI, r3
 8016a9c:	f3bf 8f6f 	isb	sy
 8016aa0:	f3bf 8f4f 	dsb	sy
 8016aa4:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016aa6:	e7fe      	b.n	8016aa6 <xTimerCreateStatic+0x9e>

08016aa8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8016aa8:	b1c8      	cbz	r0, 8016ade <xTimerGenericCommand+0x36>
{
 8016aaa:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8016aac:	4d19      	ldr	r5, [pc, #100]	; (8016b14 <xTimerGenericCommand+0x6c>)
{
 8016aae:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8016ab0:	682c      	ldr	r4, [r5, #0]
 8016ab2:	b18c      	cbz	r4, 8016ad8 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016ab4:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016ab6:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8016ab8:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016abc:	dc1a      	bgt.n	8016af4 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016abe:	f7ff fd1d 	bl	80164fc <xTaskGetSchedulerState>
 8016ac2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016ac4:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016ac8:	d01d      	beq.n	8016b06 <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016aca:	4669      	mov	r1, sp
 8016acc:	461a      	mov	r2, r3
 8016ace:	6828      	ldr	r0, [r5, #0]
 8016ad0:	f7fe fbc2 	bl	8015258 <xQueueGenericSend>
}
 8016ad4:	b005      	add	sp, #20
 8016ad6:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8016ad8:	4620      	mov	r0, r4
}
 8016ada:	b005      	add	sp, #20
 8016adc:	bd30      	pop	{r4, r5, pc}
 8016ade:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ae2:	b672      	cpsid	i
 8016ae4:	f383 8811 	msr	BASEPRI, r3
 8016ae8:	f3bf 8f6f 	isb	sy
 8016aec:	f3bf 8f4f 	dsb	sy
 8016af0:	b662      	cpsie	i
	configASSERT( xTimer );
 8016af2:	e7fe      	b.n	8016af2 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016af4:	469c      	mov	ip, r3
 8016af6:	4669      	mov	r1, sp
 8016af8:	2300      	movs	r3, #0
 8016afa:	4620      	mov	r0, r4
 8016afc:	4662      	mov	r2, ip
 8016afe:	f7fe fcab 	bl	8015458 <xQueueGenericSendFromISR>
}
 8016b02:	b005      	add	sp, #20
 8016b04:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016b06:	9a08      	ldr	r2, [sp, #32]
 8016b08:	4669      	mov	r1, sp
 8016b0a:	6828      	ldr	r0, [r5, #0]
 8016b0c:	f7fe fba4 	bl	8015258 <xQueueGenericSend>
 8016b10:	e7e3      	b.n	8016ada <xTimerGenericCommand+0x32>
 8016b12:	bf00      	nop
 8016b14:	20006298 	.word	0x20006298

08016b18 <prvSwitchTimerLists>:
{
 8016b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b1c:	4e1e      	ldr	r6, [pc, #120]	; (8016b98 <prvSwitchTimerLists+0x80>)
 8016b1e:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016b20:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016b24:	e00d      	b.n	8016b42 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016b26:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016b28:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016b2a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016b2c:	1d25      	adds	r5, r4, #4
 8016b2e:	4628      	mov	r0, r5
 8016b30:	f7fe fa24 	bl	8014f7c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016b34:	6a23      	ldr	r3, [r4, #32]
 8016b36:	4620      	mov	r0, r4
 8016b38:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016b3a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8016b3e:	075b      	lsls	r3, r3, #29
 8016b40:	d40a      	bmi.n	8016b58 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016b42:	6833      	ldr	r3, [r6, #0]
 8016b44:	681a      	ldr	r2, [r3, #0]
 8016b46:	2a00      	cmp	r2, #0
 8016b48:	d1ed      	bne.n	8016b26 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8016b4a:	4a14      	ldr	r2, [pc, #80]	; (8016b9c <prvSwitchTimerLists+0x84>)
 8016b4c:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016b4e:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8016b50:	6031      	str	r1, [r6, #0]
}
 8016b52:	b002      	add	sp, #8
 8016b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016b58:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016b5a:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016b60:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016b62:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8016b64:	42af      	cmp	r7, r5
 8016b66:	d205      	bcs.n	8016b74 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016b68:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016b6a:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016b6c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016b6e:	f7fe f9ed 	bl	8014f4c <vListInsert>
 8016b72:	e7e6      	b.n	8016b42 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016b74:	4619      	mov	r1, r3
 8016b76:	f8cd 8000 	str.w	r8, [sp]
 8016b7a:	f7ff ff95 	bl	8016aa8 <xTimerGenericCommand>
				configASSERT( xResult );
 8016b7e:	2800      	cmp	r0, #0
 8016b80:	d1df      	bne.n	8016b42 <prvSwitchTimerLists+0x2a>
 8016b82:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b86:	b672      	cpsid	i
 8016b88:	f383 8811 	msr	BASEPRI, r3
 8016b8c:	f3bf 8f6f 	isb	sy
 8016b90:	f3bf 8f4f 	dsb	sy
 8016b94:	b662      	cpsie	i
 8016b96:	e7fe      	b.n	8016b96 <prvSwitchTimerLists+0x7e>
 8016b98:	2000617c 	.word	0x2000617c
 8016b9c:	20006180 	.word	0x20006180

08016ba0 <prvTimerTask>:
{
 8016ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba4:	4e9a      	ldr	r6, [pc, #616]	; (8016e10 <prvTimerTask+0x270>)
 8016ba6:	b087      	sub	sp, #28
 8016ba8:	4d9a      	ldr	r5, [pc, #616]	; (8016e14 <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 8016baa:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8016bae:	4c9a      	ldr	r4, [pc, #616]	; (8016e18 <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016bb0:	6833      	ldr	r3, [r6, #0]
 8016bb2:	681f      	ldr	r7, [r3, #0]
 8016bb4:	2f00      	cmp	r7, #0
 8016bb6:	f000 80ac 	beq.w	8016d12 <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016bba:	68db      	ldr	r3, [r3, #12]
 8016bbc:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8016bbe:	f7ff fa01 	bl	8015fc4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8016bc2:	f7ff fa07 	bl	8015fd4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8016bc6:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8016bc8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8016bca:	4290      	cmp	r0, r2
 8016bcc:	f0c0 80a9 	bcc.w	8016d22 <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016bd0:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8016bd2:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016bd4:	f200 80ca 	bhi.w	8016d6c <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 8016bd8:	f7ff fb50 	bl	801627c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bdc:	6832      	ldr	r2, [r6, #0]
 8016bde:	68d2      	ldr	r2, [r2, #12]
 8016be0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016be4:	f10b 0804 	add.w	r8, fp, #4
 8016be8:	4640      	mov	r0, r8
 8016bea:	f7fe f9c7 	bl	8014f7c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016bee:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 8016bf2:	0743      	lsls	r3, r0, #29
 8016bf4:	f100 80ca 	bmi.w	8016d8c <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016bf8:	f020 0001 	bic.w	r0, r0, #1
 8016bfc:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016c00:	f8db 3020 	ldr.w	r3, [fp, #32]
 8016c04:	4658      	mov	r0, fp
 8016c06:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016c08:	2200      	movs	r2, #0
 8016c0a:	a902      	add	r1, sp, #8
 8016c0c:	6820      	ldr	r0, [r4, #0]
 8016c0e:	f7fe fcf5 	bl	80155fc <xQueueReceive>
 8016c12:	2800      	cmp	r0, #0
 8016c14:	d0cc      	beq.n	8016bb0 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016c16:	9b02      	ldr	r3, [sp, #8]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	db71      	blt.n	8016d00 <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016c1c:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016c1e:	697b      	ldr	r3, [r7, #20]
 8016c20:	b113      	cbz	r3, 8016c28 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016c22:	1d38      	adds	r0, r7, #4
 8016c24:	f7fe f9aa 	bl	8014f7c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8016c28:	f7ff f9d4 	bl	8015fd4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8016c2c:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8016c2e:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8016c30:	4298      	cmp	r0, r3
 8016c32:	d37d      	bcc.n	8016d30 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 8016c34:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8016c36:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8016c3a:	2b09      	cmp	r3, #9
 8016c3c:	d8e4      	bhi.n	8016c08 <prvTimerTask+0x68>
 8016c3e:	e8df f003 	tbb	[pc, r3]
 8016c42:	0505      	.short	0x0505
 8016c44:	56394f05 	.word	0x56394f05
 8016c48:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016c4c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016c50:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016c52:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016c56:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016c58:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016c5a:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016c5e:	185a      	adds	r2, r3, r1
 8016c60:	bf2c      	ite	cs
 8016c62:	2001      	movcs	r0, #1
 8016c64:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8016c66:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016c68:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8016c6a:	f200 8081 	bhi.w	8016d70 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c6e:	eba8 0303 	sub.w	r3, r8, r3
 8016c72:	4299      	cmp	r1, r3
 8016c74:	f200 80b5 	bhi.w	8016de2 <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016c78:	6a3b      	ldr	r3, [r7, #32]
 8016c7a:	4638      	mov	r0, r7
 8016c7c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016c7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016c82:	0759      	lsls	r1, r3, #29
 8016c84:	d5c0      	bpl.n	8016c08 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016c86:	2200      	movs	r2, #0
 8016c88:	69bb      	ldr	r3, [r7, #24]
 8016c8a:	4638      	mov	r0, r7
 8016c8c:	9200      	str	r2, [sp, #0]
 8016c8e:	9a03      	ldr	r2, [sp, #12]
 8016c90:	441a      	add	r2, r3
 8016c92:	2300      	movs	r3, #0
 8016c94:	4619      	mov	r1, r3
 8016c96:	f7ff ff07 	bl	8016aa8 <xTimerGenericCommand>
							configASSERT( xResult );
 8016c9a:	2800      	cmp	r0, #0
 8016c9c:	d1b4      	bne.n	8016c08 <prvTimerTask+0x68>
 8016c9e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ca2:	b672      	cpsid	i
 8016ca4:	f383 8811 	msr	BASEPRI, r3
 8016ca8:	f3bf 8f6f 	isb	sy
 8016cac:	f3bf 8f4f 	dsb	sy
 8016cb0:	b662      	cpsie	i
 8016cb2:	e7fe      	b.n	8016cb2 <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016cb4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016cb8:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016cba:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016cbe:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016cc0:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	f000 8098 	beq.w	8016dfa <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016cca:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016ccc:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016cce:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8016cd0:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016cd2:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8016cd4:	d856      	bhi.n	8016d84 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016cd6:	4b51      	ldr	r3, [pc, #324]	; (8016e1c <prvTimerTask+0x27c>)
 8016cd8:	6818      	ldr	r0, [r3, #0]
 8016cda:	f7fe f937 	bl	8014f4c <vListInsert>
	return xProcessTimerNow;
 8016cde:	e793      	b.n	8016c08 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ce4:	f023 0301 	bic.w	r3, r3, #1
 8016ce8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 8016cec:	e78c      	b.n	8016c08 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016cee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016cf2:	079a      	lsls	r2, r3, #30
 8016cf4:	d56c      	bpl.n	8016dd0 <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016cf6:	f023 0301 	bic.w	r3, r3, #1
 8016cfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8016cfe:	e783      	b.n	8016c08 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016d00:	9b03      	ldr	r3, [sp, #12]
 8016d02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016d06:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016d08:	9b02      	ldr	r3, [sp, #8]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	f6ff af7c 	blt.w	8016c08 <prvTimerTask+0x68>
 8016d10:	e784      	b.n	8016c1c <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8016d12:	f7ff f957 	bl	8015fc4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8016d16:	f7ff f95d 	bl	8015fd4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8016d1a:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8016d1c:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8016d1e:	4282      	cmp	r2, r0
 8016d20:	d909      	bls.n	8016d36 <prvTimerTask+0x196>
		prvSwitchTimerLists();
 8016d22:	f7ff fef9 	bl	8016b18 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8016d26:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8016d2a:	f7ff faa7 	bl	801627c <xTaskResumeAll>
 8016d2e:	e76b      	b.n	8016c08 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8016d30:	f7ff fef2 	bl	8016b18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016d34:	e77e      	b.n	8016c34 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016d36:	4b39      	ldr	r3, [pc, #228]	; (8016e1c <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 8016d38:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016d3c:	681a      	ldr	r2, [r3, #0]
 8016d3e:	6812      	ldr	r2, [r2, #0]
 8016d40:	fab2 f282 	clz	r2, r2
 8016d44:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016d46:	eba7 010a 	sub.w	r1, r7, sl
 8016d4a:	6820      	ldr	r0, [r4, #0]
 8016d4c:	f7fe fe7e 	bl	8015a4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8016d50:	f7ff fa94 	bl	801627c <xTaskResumeAll>
 8016d54:	2800      	cmp	r0, #0
 8016d56:	f47f af57 	bne.w	8016c08 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8016d5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8016d5e:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8016d62:	f3bf 8f4f 	dsb	sy
 8016d66:	f3bf 8f6f 	isb	sy
 8016d6a:	e74d      	b.n	8016c08 <prvTimerTask+0x68>
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	e7ea      	b.n	8016d46 <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016d70:	4543      	cmp	r3, r8
 8016d72:	d902      	bls.n	8016d7a <prvTimerTask+0x1da>
 8016d74:	2800      	cmp	r0, #0
 8016d76:	f43f af7f 	beq.w	8016c78 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016d7a:	1d39      	adds	r1, r7, #4
 8016d7c:	6830      	ldr	r0, [r6, #0]
 8016d7e:	f7fe f8e5 	bl	8014f4c <vListInsert>
	return xProcessTimerNow;
 8016d82:	e741      	b.n	8016c08 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016d84:	6830      	ldr	r0, [r6, #0]
 8016d86:	f7fe f8e1 	bl	8014f4c <vListInsert>
 8016d8a:	e73d      	b.n	8016c08 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016d8c:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016d90:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016d94:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8016d96:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016d98:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8016d9c:	d31c      	bcc.n	8016dd8 <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d9e:	ebaa 0307 	sub.w	r3, sl, r7
 8016da2:	429a      	cmp	r2, r3
 8016da4:	d823      	bhi.n	8016dee <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016da6:	2300      	movs	r3, #0
 8016da8:	463a      	mov	r2, r7
 8016daa:	4658      	mov	r0, fp
 8016dac:	4619      	mov	r1, r3
 8016dae:	9300      	str	r3, [sp, #0]
 8016db0:	f7ff fe7a 	bl	8016aa8 <xTimerGenericCommand>
			configASSERT( xResult );
 8016db4:	2800      	cmp	r0, #0
 8016db6:	f47f af23 	bne.w	8016c00 <prvTimerTask+0x60>
 8016dba:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016dbe:	b672      	cpsid	i
 8016dc0:	f383 8811 	msr	BASEPRI, r3
 8016dc4:	f3bf 8f6f 	isb	sy
 8016dc8:	f3bf 8f4f 	dsb	sy
 8016dcc:	b662      	cpsie	i
 8016dce:	e7fe      	b.n	8016dce <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 8016dd0:	4638      	mov	r0, r7
 8016dd2:	f000 fa9d 	bl	8017310 <vPortFree>
 8016dd6:	e717      	b.n	8016c08 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016dd8:	4641      	mov	r1, r8
 8016dda:	6830      	ldr	r0, [r6, #0]
 8016ddc:	f7fe f8b6 	bl	8014f4c <vListInsert>
	return xProcessTimerNow;
 8016de0:	e70e      	b.n	8016c00 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016de2:	4b0e      	ldr	r3, [pc, #56]	; (8016e1c <prvTimerTask+0x27c>)
 8016de4:	1d39      	adds	r1, r7, #4
 8016de6:	6818      	ldr	r0, [r3, #0]
 8016de8:	f7fe f8b0 	bl	8014f4c <vListInsert>
	return xProcessTimerNow;
 8016dec:	e70c      	b.n	8016c08 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016dee:	4b0b      	ldr	r3, [pc, #44]	; (8016e1c <prvTimerTask+0x27c>)
 8016df0:	4641      	mov	r1, r8
 8016df2:	6818      	ldr	r0, [r3, #0]
 8016df4:	f7fe f8aa 	bl	8014f4c <vListInsert>
	return xProcessTimerNow;
 8016df8:	e702      	b.n	8016c00 <prvTimerTask+0x60>
 8016dfa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016dfe:	b672      	cpsid	i
 8016e00:	f383 8811 	msr	BASEPRI, r3
 8016e04:	f3bf 8f6f 	isb	sy
 8016e08:	f3bf 8f4f 	dsb	sy
 8016e0c:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016e0e:	e7fe      	b.n	8016e0e <prvTimerTask+0x26e>
 8016e10:	2000617c 	.word	0x2000617c
 8016e14:	2000624c 	.word	0x2000624c
 8016e18:	20006298 	.word	0x20006298
 8016e1c:	20006180 	.word	0x20006180

08016e20 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016e20:	4808      	ldr	r0, [pc, #32]	; (8016e44 <prvPortStartFirstTask+0x24>)
 8016e22:	6800      	ldr	r0, [r0, #0]
 8016e24:	6800      	ldr	r0, [r0, #0]
 8016e26:	f380 8808 	msr	MSP, r0
 8016e2a:	f04f 0000 	mov.w	r0, #0
 8016e2e:	f380 8814 	msr	CONTROL, r0
 8016e32:	b662      	cpsie	i
 8016e34:	b661      	cpsie	f
 8016e36:	f3bf 8f4f 	dsb	sy
 8016e3a:	f3bf 8f6f 	isb	sy
 8016e3e:	df00      	svc	0
 8016e40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016e42:	0000      	.short	0x0000
 8016e44:	e000ed08 	.word	0xe000ed08

08016e48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016e48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016e58 <vPortEnableVFP+0x10>
 8016e4c:	6801      	ldr	r1, [r0, #0]
 8016e4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016e52:	6001      	str	r1, [r0, #0]
 8016e54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016e56:	0000      	.short	0x0000
 8016e58:	e000ed88 	.word	0xe000ed88

08016e5c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8016e5c:	4b10      	ldr	r3, [pc, #64]	; (8016ea0 <prvTaskExitError+0x44>)
{
 8016e5e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8016e60:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8016e62:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8016e64:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8016e66:	3301      	adds	r3, #1
 8016e68:	d00a      	beq.n	8016e80 <prvTaskExitError+0x24>
 8016e6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e6e:	b672      	cpsid	i
 8016e70:	f383 8811 	msr	BASEPRI, r3
 8016e74:	f3bf 8f6f 	isb	sy
 8016e78:	f3bf 8f4f 	dsb	sy
 8016e7c:	b662      	cpsie	i
 8016e7e:	e7fe      	b.n	8016e7e <prvTaskExitError+0x22>
 8016e80:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e84:	b672      	cpsid	i
 8016e86:	f383 8811 	msr	BASEPRI, r3
 8016e8a:	f3bf 8f6f 	isb	sy
 8016e8e:	f3bf 8f4f 	dsb	sy
 8016e92:	b662      	cpsie	i
	while( ulDummy == 0 )
 8016e94:	9b01      	ldr	r3, [sp, #4]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d0fc      	beq.n	8016e94 <prvTaskExitError+0x38>
}
 8016e9a:	b002      	add	sp, #8
 8016e9c:	4770      	bx	lr
 8016e9e:	bf00      	nop
 8016ea0:	20000408 	.word	0x20000408

08016ea4 <pxPortInitialiseStack>:
{
 8016ea4:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016ea6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016eaa:	4809      	ldr	r0, [pc, #36]	; (8016ed0 <pxPortInitialiseStack+0x2c>)
{
 8016eac:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016eae:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016eb2:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016eb6:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8016eba:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016ebe:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016ec2:	f06f 0102 	mvn.w	r1, #2
}
 8016ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016eca:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8016ece:	4770      	bx	lr
 8016ed0:	08016e5d 	.word	0x08016e5d
	...

08016ee0 <SVC_Handler>:
	__asm volatile (
 8016ee0:	4b07      	ldr	r3, [pc, #28]	; (8016f00 <pxCurrentTCBConst2>)
 8016ee2:	6819      	ldr	r1, [r3, #0]
 8016ee4:	6808      	ldr	r0, [r1, #0]
 8016ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eea:	f380 8809 	msr	PSP, r0
 8016eee:	f3bf 8f6f 	isb	sy
 8016ef2:	f04f 0000 	mov.w	r0, #0
 8016ef6:	f380 8811 	msr	BASEPRI, r0
 8016efa:	4770      	bx	lr
 8016efc:	f3af 8000 	nop.w

08016f00 <pxCurrentTCBConst2>:
 8016f00:	20006054 	.word	0x20006054

08016f04 <vPortEnterCritical>:
 8016f04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f08:	b672      	cpsid	i
 8016f0a:	f383 8811 	msr	BASEPRI, r3
 8016f0e:	f3bf 8f6f 	isb	sy
 8016f12:	f3bf 8f4f 	dsb	sy
 8016f16:	b662      	cpsie	i
	uxCriticalNesting++;
 8016f18:	4a0c      	ldr	r2, [pc, #48]	; (8016f4c <vPortEnterCritical+0x48>)
 8016f1a:	6813      	ldr	r3, [r2, #0]
 8016f1c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8016f1e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8016f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8016f22:	d000      	beq.n	8016f26 <vPortEnterCritical+0x22>
}
 8016f24:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016f26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016f2a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8016f2e:	b2db      	uxtb	r3, r3
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d0f7      	beq.n	8016f24 <vPortEnterCritical+0x20>
 8016f34:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f38:	b672      	cpsid	i
 8016f3a:	f383 8811 	msr	BASEPRI, r3
 8016f3e:	f3bf 8f6f 	isb	sy
 8016f42:	f3bf 8f4f 	dsb	sy
 8016f46:	b662      	cpsie	i
 8016f48:	e7fe      	b.n	8016f48 <vPortEnterCritical+0x44>
 8016f4a:	bf00      	nop
 8016f4c:	20000408 	.word	0x20000408

08016f50 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8016f50:	4a09      	ldr	r2, [pc, #36]	; (8016f78 <vPortExitCritical+0x28>)
 8016f52:	6813      	ldr	r3, [r2, #0]
 8016f54:	b953      	cbnz	r3, 8016f6c <vPortExitCritical+0x1c>
 8016f56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f5a:	b672      	cpsid	i
 8016f5c:	f383 8811 	msr	BASEPRI, r3
 8016f60:	f3bf 8f6f 	isb	sy
 8016f64:	f3bf 8f4f 	dsb	sy
 8016f68:	b662      	cpsie	i
 8016f6a:	e7fe      	b.n	8016f6a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8016f6c:	3b01      	subs	r3, #1
 8016f6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016f70:	b90b      	cbnz	r3, 8016f76 <vPortExitCritical+0x26>
	__asm volatile
 8016f72:	f383 8811 	msr	BASEPRI, r3
}
 8016f76:	4770      	bx	lr
 8016f78:	20000408 	.word	0x20000408
 8016f7c:	00000000 	.word	0x00000000

08016f80 <PendSV_Handler>:
	__asm volatile
 8016f80:	f3ef 8009 	mrs	r0, PSP
 8016f84:	f3bf 8f6f 	isb	sy
 8016f88:	4b15      	ldr	r3, [pc, #84]	; (8016fe0 <pxCurrentTCBConst>)
 8016f8a:	681a      	ldr	r2, [r3, #0]
 8016f8c:	f01e 0f10 	tst.w	lr, #16
 8016f90:	bf08      	it	eq
 8016f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f9a:	6010      	str	r0, [r2, #0]
 8016f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016fa0:	f04f 0030 	mov.w	r0, #48	; 0x30
 8016fa4:	b672      	cpsid	i
 8016fa6:	f380 8811 	msr	BASEPRI, r0
 8016faa:	f3bf 8f4f 	dsb	sy
 8016fae:	f3bf 8f6f 	isb	sy
 8016fb2:	b662      	cpsie	i
 8016fb4:	f7ff f9a8 	bl	8016308 <vTaskSwitchContext>
 8016fb8:	f04f 0000 	mov.w	r0, #0
 8016fbc:	f380 8811 	msr	BASEPRI, r0
 8016fc0:	bc09      	pop	{r0, r3}
 8016fc2:	6819      	ldr	r1, [r3, #0]
 8016fc4:	6808      	ldr	r0, [r1, #0]
 8016fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fca:	f01e 0f10 	tst.w	lr, #16
 8016fce:	bf08      	it	eq
 8016fd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016fd4:	f380 8809 	msr	PSP, r0
 8016fd8:	f3bf 8f6f 	isb	sy
 8016fdc:	4770      	bx	lr
 8016fde:	bf00      	nop

08016fe0 <pxCurrentTCBConst>:
 8016fe0:	20006054 	.word	0x20006054

08016fe4 <SysTick_Handler>:
{
 8016fe4:	b508      	push	{r3, lr}
	__asm volatile
 8016fe6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016fea:	b672      	cpsid	i
 8016fec:	f383 8811 	msr	BASEPRI, r3
 8016ff0:	f3bf 8f6f 	isb	sy
 8016ff4:	f3bf 8f4f 	dsb	sy
 8016ff8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8016ffa:	f7fe fff9 	bl	8015ff0 <xTaskIncrementTick>
 8016ffe:	b128      	cbz	r0, 801700c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017000:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017008:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 801700c:	2300      	movs	r3, #0
 801700e:	f383 8811 	msr	BASEPRI, r3
}
 8017012:	bd08      	pop	{r3, pc}

08017014 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017014:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8017018:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801701a:	4b06      	ldr	r3, [pc, #24]	; (8017034 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801701c:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801701e:	4806      	ldr	r0, [pc, #24]	; (8017038 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017020:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017022:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	fba0 0303 	umull	r0, r3, r0, r3
 801702a:	099b      	lsrs	r3, r3, #6
 801702c:	3b01      	subs	r3, #1
 801702e:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017030:	6111      	str	r1, [r2, #16]
}
 8017032:	4770      	bx	lr
 8017034:	2000027c 	.word	0x2000027c
 8017038:	10624dd3 	.word	0x10624dd3

0801703c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801703c:	4b30      	ldr	r3, [pc, #192]	; (8017100 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801703e:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017042:	4830      	ldr	r0, [pc, #192]	; (8017104 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017044:	4930      	ldr	r1, [pc, #192]	; (8017108 <xPortStartScheduler+0xcc>)
{
 8017046:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017048:	781a      	ldrb	r2, [r3, #0]
{
 801704a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801704c:	b2d2      	uxtb	r2, r2
 801704e:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017050:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017052:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017056:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017058:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801705a:	b2db      	uxtb	r3, r3
 801705c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017060:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017064:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017068:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801706c:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801706e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017070:	d50f      	bpl.n	8017092 <xPortStartScheduler+0x56>
 8017072:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017074:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017078:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801707a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801707c:	005b      	lsls	r3, r3, #1
 801707e:	b2db      	uxtb	r3, r3
 8017080:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017084:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017088:	061b      	lsls	r3, r3, #24
 801708a:	d4f3      	bmi.n	8017074 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801708c:	2903      	cmp	r1, #3
 801708e:	d00b      	beq.n	80170a8 <xPortStartScheduler+0x6c>
 8017090:	6001      	str	r1, [r0, #0]
	__asm volatile
 8017092:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017096:	b672      	cpsid	i
 8017098:	f383 8811 	msr	BASEPRI, r3
 801709c:	f3bf 8f6f 	isb	sy
 80170a0:	f3bf 8f4f 	dsb	sy
 80170a4:	b662      	cpsie	i
 80170a6:	e7fe      	b.n	80170a6 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80170a8:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80170aa:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80170ae:	4a14      	ldr	r2, [pc, #80]	; (8017100 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80170b0:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80170b4:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 80170b6:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80170b8:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80170ba:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80170bc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80170c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80170c4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80170c8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80170cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80170d0:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80170d4:	f7ff ff9e 	bl	8017014 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80170d8:	4b0c      	ldr	r3, [pc, #48]	; (801710c <xPortStartScheduler+0xd0>)
 80170da:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80170dc:	f7ff feb4 	bl	8016e48 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80170e0:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80170e4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80170e8:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80170ec:	f7ff fe98 	bl	8016e20 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80170f0:	f7ff f90a 	bl	8016308 <vTaskSwitchContext>
}
 80170f4:	4628      	mov	r0, r5
	prvTaskExitError();
 80170f6:	f7ff feb1 	bl	8016e5c <prvTaskExitError>
}
 80170fa:	b003      	add	sp, #12
 80170fc:	bd30      	pop	{r4, r5, pc}
 80170fe:	bf00      	nop
 8017100:	e000e400 	.word	0xe000e400
 8017104:	200062a4 	.word	0x200062a4
 8017108:	200062a0 	.word	0x200062a0
 801710c:	20000408 	.word	0x20000408

08017110 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017110:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017114:	2b0f      	cmp	r3, #15
 8017116:	d910      	bls.n	801713a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017118:	4913      	ldr	r1, [pc, #76]	; (8017168 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801711a:	4a14      	ldr	r2, [pc, #80]	; (801716c <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801711c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801711e:	7812      	ldrb	r2, [r2, #0]
 8017120:	429a      	cmp	r2, r3
 8017122:	d90a      	bls.n	801713a <vPortValidateInterruptPriority+0x2a>
 8017124:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017128:	b672      	cpsid	i
 801712a:	f383 8811 	msr	BASEPRI, r3
 801712e:	f3bf 8f6f 	isb	sy
 8017132:	f3bf 8f4f 	dsb	sy
 8017136:	b662      	cpsie	i
 8017138:	e7fe      	b.n	8017138 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801713a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801713e:	4a0c      	ldr	r2, [pc, #48]	; (8017170 <vPortValidateInterruptPriority+0x60>)
 8017140:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8017144:	6812      	ldr	r2, [r2, #0]
 8017146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801714a:	4293      	cmp	r3, r2
 801714c:	d90a      	bls.n	8017164 <vPortValidateInterruptPriority+0x54>
 801714e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017152:	b672      	cpsid	i
 8017154:	f383 8811 	msr	BASEPRI, r3
 8017158:	f3bf 8f6f 	isb	sy
 801715c:	f3bf 8f4f 	dsb	sy
 8017160:	b662      	cpsie	i
 8017162:	e7fe      	b.n	8017162 <vPortValidateInterruptPriority+0x52>
	}
 8017164:	4770      	bx	lr
 8017166:	bf00      	nop
 8017168:	e000e3f0 	.word	0xe000e3f0
 801716c:	200062a0 	.word	0x200062a0
 8017170:	200062a4 	.word	0x200062a4

08017174 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017174:	4b16      	ldr	r3, [pc, #88]	; (80171d0 <prvInsertBlockIntoFreeList+0x5c>)
{
 8017176:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017178:	461a      	mov	r2, r3
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	4283      	cmp	r3, r0
 801717e:	d3fb      	bcc.n	8017178 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017180:	6851      	ldr	r1, [r2, #4]
 8017182:	eb02 0c01 	add.w	ip, r2, r1
 8017186:	4560      	cmp	r0, ip
 8017188:	d00b      	beq.n	80171a2 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801718a:	6841      	ldr	r1, [r0, #4]
 801718c:	eb00 0c01 	add.w	ip, r0, r1
 8017190:	4563      	cmp	r3, ip
 8017192:	d00e      	beq.n	80171b2 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017194:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017196:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017198:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801719c:	bf18      	it	ne
 801719e:	6010      	strne	r0, [r2, #0]
}
 80171a0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80171a2:	6844      	ldr	r4, [r0, #4]
 80171a4:	4610      	mov	r0, r2
 80171a6:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80171a8:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80171ac:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80171ae:	4563      	cmp	r3, ip
 80171b0:	d1f0      	bne.n	8017194 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80171b2:	4c08      	ldr	r4, [pc, #32]	; (80171d4 <prvInsertBlockIntoFreeList+0x60>)
 80171b4:	6824      	ldr	r4, [r4, #0]
 80171b6:	42a3      	cmp	r3, r4
 80171b8:	d0ec      	beq.n	8017194 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 80171ba:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80171bc:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80171c0:	4421      	add	r1, r4
}
 80171c2:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80171c6:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80171ca:	bf18      	it	ne
 80171cc:	6010      	strne	r0, [r2, #0]
}
 80171ce:	4770      	bx	lr
 80171d0:	2001e2b8 	.word	0x2001e2b8
 80171d4:	200062a8 	.word	0x200062a8

080171d8 <pvPortMalloc>:
{
 80171d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171dc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80171de:	f7fe fef1 	bl	8015fc4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80171e2:	f8df c128 	ldr.w	ip, [pc, #296]	; 801730c <pvPortMalloc+0x134>
 80171e6:	f8dc 3000 	ldr.w	r3, [ip]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d05d      	beq.n	80172aa <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80171ee:	4b42      	ldr	r3, [pc, #264]	; (80172f8 <pvPortMalloc+0x120>)
 80171f0:	681d      	ldr	r5, [r3, #0]
 80171f2:	422c      	tst	r4, r5
 80171f4:	d130      	bne.n	8017258 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 80171f6:	b37c      	cbz	r4, 8017258 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80171f8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 80171fa:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80171fe:	d002      	beq.n	8017206 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017200:	f021 0107 	bic.w	r1, r1, #7
 8017204:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017206:	b339      	cbz	r1, 8017258 <pvPortMalloc+0x80>
 8017208:	4f3c      	ldr	r7, [pc, #240]	; (80172fc <pvPortMalloc+0x124>)
 801720a:	683e      	ldr	r6, [r7, #0]
 801720c:	428e      	cmp	r6, r1
 801720e:	d323      	bcc.n	8017258 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 8017210:	483b      	ldr	r0, [pc, #236]	; (8017300 <pvPortMalloc+0x128>)
 8017212:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017214:	e003      	b.n	801721e <pvPortMalloc+0x46>
 8017216:	6823      	ldr	r3, [r4, #0]
 8017218:	b123      	cbz	r3, 8017224 <pvPortMalloc+0x4c>
 801721a:	4620      	mov	r0, r4
 801721c:	461c      	mov	r4, r3
 801721e:	6862      	ldr	r2, [r4, #4]
 8017220:	428a      	cmp	r2, r1
 8017222:	d3f8      	bcc.n	8017216 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8017224:	f8dc 3000 	ldr.w	r3, [ip]
 8017228:	42a3      	cmp	r3, r4
 801722a:	d015      	beq.n	8017258 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801722c:	6803      	ldr	r3, [r0, #0]
 801722e:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017232:	6823      	ldr	r3, [r4, #0]
 8017234:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017236:	1a53      	subs	r3, r2, r1
 8017238:	2b10      	cmp	r3, #16
 801723a:	d91b      	bls.n	8017274 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801723c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801723e:	0742      	lsls	r2, r0, #29
 8017240:	d013      	beq.n	801726a <pvPortMalloc+0x92>
 8017242:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017246:	b672      	cpsid	i
 8017248:	f383 8811 	msr	BASEPRI, r3
 801724c:	f3bf 8f6f 	isb	sy
 8017250:	f3bf 8f4f 	dsb	sy
 8017254:	b662      	cpsie	i
 8017256:	e7fe      	b.n	8017256 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 8017258:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 801725c:	f7ff f80e 	bl	801627c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8017260:	f7e9 fd9a 	bl	8000d98 <vApplicationMallocFailedHook>
}
 8017264:	4640      	mov	r0, r8
 8017266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801726a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801726c:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801726e:	f7ff ff81 	bl	8017174 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017272:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017274:	4b23      	ldr	r3, [pc, #140]	; (8017304 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017276:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017278:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801727a:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801727c:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801727e:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017280:	bf38      	it	cc
 8017282:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8017284:	2300      	movs	r3, #0
 8017286:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 801728a:	f7fe fff7 	bl	801627c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801728e:	f018 0f07 	tst.w	r8, #7
 8017292:	d0e7      	beq.n	8017264 <pvPortMalloc+0x8c>
 8017294:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017298:	b672      	cpsid	i
 801729a:	f383 8811 	msr	BASEPRI, r3
 801729e:	f3bf 8f6f 	isb	sy
 80172a2:	f3bf 8f4f 	dsb	sy
 80172a6:	b662      	cpsie	i
 80172a8:	e7fe      	b.n	80172a8 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 80172aa:	4b17      	ldr	r3, [pc, #92]	; (8017308 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80172ac:	075d      	lsls	r5, r3, #29
 80172ae:	d11b      	bne.n	80172e8 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80172b0:	461a      	mov	r2, r3
 80172b2:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80172b6:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 80172b8:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 80172ba:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80172bc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80172c0:	f023 0307 	bic.w	r3, r3, #7
}
 80172c4:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80172c6:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 80172c8:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 80172cc:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80172d0:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80172d4:	4b0a      	ldr	r3, [pc, #40]	; (8017300 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 80172d6:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80172da:	4b0a      	ldr	r3, [pc, #40]	; (8017304 <pvPortMalloc+0x12c>)
 80172dc:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80172de:	4b07      	ldr	r3, [pc, #28]	; (80172fc <pvPortMalloc+0x124>)
 80172e0:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80172e2:	4b05      	ldr	r3, [pc, #20]	; (80172f8 <pvPortMalloc+0x120>)
 80172e4:	601e      	str	r6, [r3, #0]
}
 80172e6:	e784      	b.n	80171f2 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80172e8:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80172ea:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80172ee:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80172f2:	4610      	mov	r0, r2
 80172f4:	e7e0      	b.n	80172b8 <pvPortMalloc+0xe0>
 80172f6:	bf00      	nop
 80172f8:	2001e2ac 	.word	0x2001e2ac
 80172fc:	2001e2b0 	.word	0x2001e2b0
 8017300:	2001e2b8 	.word	0x2001e2b8
 8017304:	2001e2b4 	.word	0x2001e2b4
 8017308:	200062ac 	.word	0x200062ac
 801730c:	200062a8 	.word	0x200062a8

08017310 <vPortFree>:
	if( pv != NULL )
 8017310:	b1f0      	cbz	r0, 8017350 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017312:	4a1c      	ldr	r2, [pc, #112]	; (8017384 <vPortFree+0x74>)
 8017314:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017318:	6812      	ldr	r2, [r2, #0]
 801731a:	4213      	tst	r3, r2
 801731c:	d00d      	beq.n	801733a <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801731e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8017322:	b1b1      	cbz	r1, 8017352 <vPortFree+0x42>
 8017324:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017328:	b672      	cpsid	i
 801732a:	f383 8811 	msr	BASEPRI, r3
 801732e:	f3bf 8f6f 	isb	sy
 8017332:	f3bf 8f4f 	dsb	sy
 8017336:	b662      	cpsie	i
 8017338:	e7fe      	b.n	8017338 <vPortFree+0x28>
 801733a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801733e:	b672      	cpsid	i
 8017340:	f383 8811 	msr	BASEPRI, r3
 8017344:	f3bf 8f6f 	isb	sy
 8017348:	f3bf 8f4f 	dsb	sy
 801734c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801734e:	e7fe      	b.n	801734e <vPortFree+0x3e>
 8017350:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017352:	ea23 0302 	bic.w	r3, r3, r2
{
 8017356:	b500      	push	{lr}
 8017358:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801735a:	f840 3c04 	str.w	r3, [r0, #-4]
 801735e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8017360:	f7fe fe30 	bl	8015fc4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017364:	4a08      	ldr	r2, [pc, #32]	; (8017388 <vPortFree+0x78>)
 8017366:	9801      	ldr	r0, [sp, #4]
 8017368:	6811      	ldr	r1, [r2, #0]
 801736a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801736e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017370:	440b      	add	r3, r1
 8017372:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017374:	f7ff fefe 	bl	8017174 <prvInsertBlockIntoFreeList>
}
 8017378:	b003      	add	sp, #12
 801737a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 801737e:	f7fe bf7d 	b.w	801627c <xTaskResumeAll>
 8017382:	bf00      	nop
 8017384:	2001e2ac 	.word	0x2001e2ac
 8017388:	2001e2b0 	.word	0x2001e2b0

0801738c <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 801738c:	f003 baf4 	b.w	801a978 <pbuf_free>

08017390 <tcpip_thread>:
{
 8017390:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8017392:	4839      	ldr	r0, [pc, #228]	; (8017478 <tcpip_thread+0xe8>)
{
 8017394:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8017396:	f00b fed5 	bl	8023144 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801739a:	4b38      	ldr	r3, [pc, #224]	; (801747c <tcpip_thread+0xec>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	b113      	cbz	r3, 80173a6 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 80173a0:	4a37      	ldr	r2, [pc, #220]	; (8017480 <tcpip_thread+0xf0>)
 80173a2:	6810      	ldr	r0, [r2, #0]
 80173a4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80173a6:	4d34      	ldr	r5, [pc, #208]	; (8017478 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80173a8:	4e36      	ldr	r6, [pc, #216]	; (8017484 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80173aa:	4f37      	ldr	r7, [pc, #220]	; (8017488 <tcpip_thread+0xf8>)
 80173ac:	e010      	b.n	80173d0 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 80173ae:	b168      	cbz	r0, 80173cc <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 80173b0:	4628      	mov	r0, r5
 80173b2:	f00b fecd 	bl	8023150 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80173b6:	4622      	mov	r2, r4
 80173b8:	a901      	add	r1, sp, #4
 80173ba:	4630      	mov	r0, r6
 80173bc:	f00b fe7e 	bl	80230bc <sys_arch_mbox_fetch>
 80173c0:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80173c2:	4628      	mov	r0, r5
 80173c4:	f00b febe 	bl	8023144 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80173c8:	3401      	adds	r4, #1
 80173ca:	d111      	bne.n	80173f0 <tcpip_thread+0x60>
    sys_check_timeouts();
 80173cc:	f008 f832 	bl	801f434 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 80173d0:	f008 f858 	bl	801f484 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80173d4:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80173d6:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80173d8:	d1e9      	bne.n	80173ae <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 80173da:	4628      	mov	r0, r5
 80173dc:	f00b feb8 	bl	8023150 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80173e0:	2200      	movs	r2, #0
 80173e2:	a901      	add	r1, sp, #4
 80173e4:	4630      	mov	r0, r6
 80173e6:	f00b fe69 	bl	80230bc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80173ea:	4628      	mov	r0, r5
 80173ec:	f00b feaa 	bl	8023144 <sys_mutex_lock>
    if (msg == NULL) {
 80173f0:	9c01      	ldr	r4, [sp, #4]
 80173f2:	b37c      	cbz	r4, 8017454 <tcpip_thread+0xc4>
  switch (msg->type) {
 80173f4:	7823      	ldrb	r3, [r4, #0]
 80173f6:	2b04      	cmp	r3, #4
 80173f8:	d837      	bhi.n	801746a <tcpip_thread+0xda>
 80173fa:	e8df f003 	tbb	[pc, r3]
 80173fe:	1821      	.short	0x1821
 8017400:	070f      	.short	0x070f
 8017402:	03          	.byte	0x03
 8017403:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017404:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8017408:	4798      	blx	r3
      break;
 801740a:	e7e1      	b.n	80173d0 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 801740c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8017410:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017412:	4621      	mov	r1, r4
 8017414:	2009      	movs	r0, #9
 8017416:	f002 fdb3 	bl	8019f80 <memp_free>
      break;
 801741a:	e7d9      	b.n	80173d0 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 801741c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8017420:	f007 ffea 	bl	801f3f8 <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017424:	4621      	mov	r1, r4
 8017426:	2009      	movs	r0, #9
 8017428:	f002 fdaa 	bl	8019f80 <memp_free>
      break;
 801742c:	e7d0      	b.n	80173d0 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 801742e:	1d20      	adds	r0, r4, #4
 8017430:	c807      	ldmia	r0, {r0, r1, r2}
 8017432:	f007 ffc3 	bl	801f3bc <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017436:	4621      	mov	r1, r4
 8017438:	2009      	movs	r0, #9
 801743a:	f002 fda1 	bl	8019f80 <memp_free>
      break;
 801743e:	e7c7      	b.n	80173d0 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8017440:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8017444:	6860      	ldr	r0, [r4, #4]
 8017446:	4798      	blx	r3
 8017448:	b958      	cbnz	r0, 8017462 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801744a:	4621      	mov	r1, r4
 801744c:	200a      	movs	r0, #10
 801744e:	f002 fd97 	bl	8019f80 <memp_free>
      break;
 8017452:	e7bd      	b.n	80173d0 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017454:	463b      	mov	r3, r7
 8017456:	2291      	movs	r2, #145	; 0x91
 8017458:	490c      	ldr	r1, [pc, #48]	; (801748c <tcpip_thread+0xfc>)
 801745a:	480d      	ldr	r0, [pc, #52]	; (8017490 <tcpip_thread+0x100>)
 801745c:	f00d fb46 	bl	8024aec <iprintf>
      continue;
 8017460:	e7b6      	b.n	80173d0 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8017462:	6860      	ldr	r0, [r4, #4]
 8017464:	f003 fa88 	bl	801a978 <pbuf_free>
 8017468:	e7ef      	b.n	801744a <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801746a:	463b      	mov	r3, r7
 801746c:	22cf      	movs	r2, #207	; 0xcf
 801746e:	4907      	ldr	r1, [pc, #28]	; (801748c <tcpip_thread+0xfc>)
 8017470:	4807      	ldr	r0, [pc, #28]	; (8017490 <tcpip_thread+0x100>)
 8017472:	f00d fb3b 	bl	8024aec <iprintf>
      break;
 8017476:	e7ab      	b.n	80173d0 <tcpip_thread+0x40>
 8017478:	2001e2c0 	.word	0x2001e2c0
 801747c:	2001e2c4 	.word	0x2001e2c4
 8017480:	2001e2c8 	.word	0x2001e2c8
 8017484:	2001e2cc 	.word	0x2001e2cc
 8017488:	0802c0a8 	.word	0x0802c0a8
 801748c:	0802c0d8 	.word	0x0802c0d8
 8017490:	0802b818 	.word	0x0802b818

08017494 <tcpip_inpkt>:
{
 8017494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017496:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017498:	4814      	ldr	r0, [pc, #80]	; (80174ec <tcpip_inpkt+0x58>)
{
 801749a:	460e      	mov	r6, r1
 801749c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801749e:	f00b fe2f 	bl	8023100 <sys_mbox_valid>
 80174a2:	b188      	cbz	r0, 80174c8 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80174a4:	22fe      	movs	r2, #254	; 0xfe
 80174a6:	4912      	ldr	r1, [pc, #72]	; (80174f0 <tcpip_inpkt+0x5c>)
 80174a8:	200a      	movs	r0, #10
 80174aa:	f002 fd33 	bl	8019f14 <memp_malloc_fn>
  if (msg == NULL) {
 80174ae:	4604      	mov	r4, r0
 80174b0:	b1c0      	cbz	r0, 80174e4 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 80174b2:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 80174b4:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80174b6:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80174b8:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 80174ba:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80174bc:	480b      	ldr	r0, [pc, #44]	; (80174ec <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 80174be:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80174c0:	f00b fdf2 	bl	80230a8 <sys_mbox_trypost>
 80174c4:	b938      	cbnz	r0, 80174d6 <tcpip_inpkt+0x42>
}
 80174c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80174c8:	4b09      	ldr	r3, [pc, #36]	; (80174f0 <tcpip_inpkt+0x5c>)
 80174ca:	22fc      	movs	r2, #252	; 0xfc
 80174cc:	4909      	ldr	r1, [pc, #36]	; (80174f4 <tcpip_inpkt+0x60>)
 80174ce:	480a      	ldr	r0, [pc, #40]	; (80174f8 <tcpip_inpkt+0x64>)
 80174d0:	f00d fb0c 	bl	8024aec <iprintf>
 80174d4:	e7e6      	b.n	80174a4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80174d6:	4621      	mov	r1, r4
 80174d8:	200a      	movs	r0, #10
 80174da:	f002 fd51 	bl	8019f80 <memp_free>
    return ERR_MEM;
 80174de:	f04f 30ff 	mov.w	r0, #4294967295
}
 80174e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 80174e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80174e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174ea:	bf00      	nop
 80174ec:	2001e2cc 	.word	0x2001e2cc
 80174f0:	0802c0a8 	.word	0x0802c0a8
 80174f4:	0802c0f8 	.word	0x0802c0f8
 80174f8:	0802b818 	.word	0x0802b818

080174fc <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80174fc:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8017500:	f013 0f18 	tst.w	r3, #24
 8017504:	d002      	beq.n	801750c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8017506:	4a03      	ldr	r2, [pc, #12]	; (8017514 <tcpip_input+0x18>)
 8017508:	f7ff bfc4 	b.w	8017494 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 801750c:	4a02      	ldr	r2, [pc, #8]	; (8017518 <tcpip_input+0x1c>)
 801750e:	f7ff bfc1 	b.w	8017494 <tcpip_inpkt>
 8017512:	bf00      	nop
 8017514:	08022f69 	.word	0x08022f69
 8017518:	080221c5 	.word	0x080221c5

0801751c <tcpip_try_callback>:
{
 801751c:	b570      	push	{r4, r5, r6, lr}
 801751e:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017520:	4814      	ldr	r0, [pc, #80]	; (8017574 <tcpip_try_callback+0x58>)
{
 8017522:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017524:	f00b fdec 	bl	8023100 <sys_mbox_valid>
 8017528:	b188      	cbz	r0, 801754e <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801752a:	f240 125f 	movw	r2, #351	; 0x15f
 801752e:	4912      	ldr	r1, [pc, #72]	; (8017578 <tcpip_try_callback+0x5c>)
 8017530:	2009      	movs	r0, #9
 8017532:	f002 fcef 	bl	8019f14 <memp_malloc_fn>
  if (msg == NULL) {
 8017536:	4604      	mov	r4, r0
 8017538:	b1c0      	cbz	r0, 801756c <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 801753a:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801753c:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 801753e:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017542:	480c      	ldr	r0, [pc, #48]	; (8017574 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 8017544:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017546:	f00b fdaf 	bl	80230a8 <sys_mbox_trypost>
 801754a:	b940      	cbnz	r0, 801755e <tcpip_try_callback+0x42>
}
 801754c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801754e:	4b0a      	ldr	r3, [pc, #40]	; (8017578 <tcpip_try_callback+0x5c>)
 8017550:	f240 125d 	movw	r2, #349	; 0x15d
 8017554:	4909      	ldr	r1, [pc, #36]	; (801757c <tcpip_try_callback+0x60>)
 8017556:	480a      	ldr	r0, [pc, #40]	; (8017580 <tcpip_try_callback+0x64>)
 8017558:	f00d fac8 	bl	8024aec <iprintf>
 801755c:	e7e5      	b.n	801752a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801755e:	4621      	mov	r1, r4
 8017560:	2009      	movs	r0, #9
 8017562:	f002 fd0d 	bl	8019f80 <memp_free>
    return ERR_MEM;
 8017566:	f04f 30ff 	mov.w	r0, #4294967295
}
 801756a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 801756c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017570:	bd70      	pop	{r4, r5, r6, pc}
 8017572:	bf00      	nop
 8017574:	2001e2cc 	.word	0x2001e2cc
 8017578:	0802c0a8 	.word	0x0802c0a8
 801757c:	0802c0f8 	.word	0x0802c0f8
 8017580:	0802b818 	.word	0x0802b818

08017584 <tcpip_init>:
{
 8017584:	b530      	push	{r4, r5, lr}
 8017586:	b083      	sub	sp, #12
 8017588:	4605      	mov	r5, r0
 801758a:	460c      	mov	r4, r1
  lwip_init();
 801758c:	f001 ffae 	bl	80194ec <lwip_init>
  tcpip_init_done = initfunc;
 8017590:	4a15      	ldr	r2, [pc, #84]	; (80175e8 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017592:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8017594:	4b15      	ldr	r3, [pc, #84]	; (80175ec <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017596:	4816      	ldr	r0, [pc, #88]	; (80175f0 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8017598:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 801759a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801759c:	f00b fd6e 	bl	802307c <sys_mbox_new>
 80175a0:	b968      	cbnz	r0, 80175be <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80175a2:	4814      	ldr	r0, [pc, #80]	; (80175f4 <tcpip_init+0x70>)
 80175a4:	f00b fdbe 	bl	8023124 <sys_mutex_new>
 80175a8:	b9a8      	cbnz	r0, 80175d6 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80175aa:	2200      	movs	r2, #0
 80175ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80175b0:	4911      	ldr	r1, [pc, #68]	; (80175f8 <tcpip_init+0x74>)
 80175b2:	9200      	str	r2, [sp, #0]
 80175b4:	4811      	ldr	r0, [pc, #68]	; (80175fc <tcpip_init+0x78>)
 80175b6:	f00b fdcf 	bl	8023158 <sys_thread_new>
}
 80175ba:	b003      	add	sp, #12
 80175bc:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80175be:	4b10      	ldr	r3, [pc, #64]	; (8017600 <tcpip_init+0x7c>)
 80175c0:	f240 2261 	movw	r2, #609	; 0x261
 80175c4:	490f      	ldr	r1, [pc, #60]	; (8017604 <tcpip_init+0x80>)
 80175c6:	4810      	ldr	r0, [pc, #64]	; (8017608 <tcpip_init+0x84>)
 80175c8:	f00d fa90 	bl	8024aec <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80175cc:	4809      	ldr	r0, [pc, #36]	; (80175f4 <tcpip_init+0x70>)
 80175ce:	f00b fda9 	bl	8023124 <sys_mutex_new>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	d0e9      	beq.n	80175aa <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80175d6:	4b0a      	ldr	r3, [pc, #40]	; (8017600 <tcpip_init+0x7c>)
 80175d8:	f240 2265 	movw	r2, #613	; 0x265
 80175dc:	490b      	ldr	r1, [pc, #44]	; (801760c <tcpip_init+0x88>)
 80175de:	480a      	ldr	r0, [pc, #40]	; (8017608 <tcpip_init+0x84>)
 80175e0:	f00d fa84 	bl	8024aec <iprintf>
 80175e4:	e7e1      	b.n	80175aa <tcpip_init+0x26>
 80175e6:	bf00      	nop
 80175e8:	2001e2c4 	.word	0x2001e2c4
 80175ec:	2001e2c8 	.word	0x2001e2c8
 80175f0:	2001e2cc 	.word	0x2001e2cc
 80175f4:	2001e2c0 	.word	0x2001e2c0
 80175f8:	08017391 	.word	0x08017391
 80175fc:	0802c150 	.word	0x0802c150
 8017600:	0802c0a8 	.word	0x0802c0a8
 8017604:	0802c108 	.word	0x0802c108
 8017608:	0802b818 	.word	0x0802b818
 801760c:	0802c12c 	.word	0x0802c12c

08017610 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8017610:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8017612:	4801      	ldr	r0, [pc, #4]	; (8017618 <pbuf_free_callback+0x8>)
 8017614:	f7ff bf82 	b.w	801751c <tcpip_try_callback>
 8017618:	0801738d 	.word	0x0801738d

0801761c <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801761c:	b1e8      	cbz	r0, 801765a <fs_open+0x3e>
{
 801761e:	b570      	push	{r4, r5, r6, lr}
 8017620:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8017622:	b1b9      	cbz	r1, 8017654 <fs_open+0x38>
 8017624:	4606      	mov	r6, r0
 8017626:	490e      	ldr	r1, [pc, #56]	; (8017660 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8017628:	4c0e      	ldr	r4, [pc, #56]	; (8017664 <fs_open+0x48>)
 801762a:	e000      	b.n	801762e <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 801762c:	6861      	ldr	r1, [r4, #4]
 801762e:	4628      	mov	r0, r5
 8017630:	f7e8 fe06 	bl	8000240 <strcmp>
 8017634:	b128      	cbz	r0, 8017642 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8017636:	6824      	ldr	r4, [r4, #0]
 8017638:	2c00      	cmp	r4, #0
 801763a:	d1f7      	bne.n	801762c <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 801763c:	f06f 0005 	mvn.w	r0, #5
}
 8017640:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8017642:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 8017646:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 8017648:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 801764a:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 801764e:	7c23      	ldrb	r3, [r4, #16]
 8017650:	7433      	strb	r3, [r6, #16]
}
 8017652:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8017654:	f06f 000f 	mvn.w	r0, #15
}
 8017658:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 801765a:	f06f 000f 	mvn.w	r0, #15
}
 801765e:	4770      	bx	lr
 8017660:	08036fe4 	.word	0x08036fe4
 8017664:	08042150 	.word	0x08042150

08017668 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8017668:	4770      	bx	lr
 801766a:	bf00      	nop

0801766c <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 801766c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8017670:	1a10      	subs	r0, r2, r0
 8017672:	4770      	bx	lr

08017674 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8017674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8017678:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 801767a:	b374      	cbz	r4, 80176da <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 801767c:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 8017680:	4617      	mov	r7, r2
 8017682:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8017686:	4605      	mov	r5, r0
 8017688:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801768c:	460e      	mov	r6, r1
 801768e:	4698      	mov	r8, r3
 8017690:	fa1f fc8c 	uxth.w	ip, ip
 8017694:	4594      	cmp	ip, r2
 8017696:	bf28      	it	cs
 8017698:	4694      	movcs	ip, r2
 801769a:	4564      	cmp	r4, ip
 801769c:	bf28      	it	cs
 801769e:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80176a0:	4643      	mov	r3, r8
 80176a2:	4622      	mov	r2, r4
 80176a4:	4631      	mov	r1, r6
 80176a6:	4628      	mov	r0, r5
 80176a8:	f006 fcf0 	bl	801e08c <tcp_write>
    if (err == ERR_MEM) {
 80176ac:	1c43      	adds	r3, r0, #1
 80176ae:	d007      	beq.n	80176c0 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 80176b0:	b970      	cbnz	r0, 80176d0 <http_write+0x5c>
 80176b2:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 80176b4:	8b6b      	ldrh	r3, [r5, #26]
 80176b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80176ba:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 80176bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 80176c0:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 80176c4:	b123      	cbz	r3, 80176d0 <http_write+0x5c>
 80176c6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 80176ca:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 80176cc:	2b08      	cmp	r3, #8
 80176ce:	d901      	bls.n	80176d4 <http_write+0x60>
    *length = 0;
 80176d0:	2400      	movs	r4, #0
 80176d2:	e7ee      	b.n	80176b2 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 80176d4:	2c01      	cmp	r4, #1
 80176d6:	d8e3      	bhi.n	80176a0 <http_write+0x2c>
 80176d8:	e7fa      	b.n	80176d0 <http_write+0x5c>
    return ERR_OK;
 80176da:	4620      	mov	r0, r4
}
 80176dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080176e0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80176e0:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 80176e2:	4b0e      	ldr	r3, [pc, #56]	; (801771c <http_get_404_file+0x3c>)
{
 80176e4:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 80176e6:	4604      	mov	r4, r0
 80176e8:	4619      	mov	r1, r3
  *uri = "/404.html";
 80176ea:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 80176ec:	f7ff ff96 	bl	801761c <fs_open>
  if (err != ERR_OK) {
 80176f0:	b908      	cbnz	r0, 80176f6 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 80176f2:	4620      	mov	r0, r4
 80176f4:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 80176f6:	490a      	ldr	r1, [pc, #40]	; (8017720 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 80176f8:	4620      	mov	r0, r4
    *uri = "/404.htm";
 80176fa:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 80176fc:	f7ff ff8e 	bl	801761c <fs_open>
    if (err != ERR_OK) {
 8017700:	2800      	cmp	r0, #0
 8017702:	d0f6      	beq.n	80176f2 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8017704:	4907      	ldr	r1, [pc, #28]	; (8017724 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8017706:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8017708:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 801770a:	f7ff ff87 	bl	801761c <fs_open>
      if (err != ERR_OK) {
 801770e:	2800      	cmp	r0, #0
 8017710:	d0ef      	beq.n	80176f2 <http_get_404_file+0x12>
        *uri = NULL;
 8017712:	2300      	movs	r3, #0
        return NULL;
 8017714:	461c      	mov	r4, r3
        *uri = NULL;
 8017716:	602b      	str	r3, [r5, #0]
        return NULL;
 8017718:	e7eb      	b.n	80176f2 <http_get_404_file+0x12>
 801771a:	bf00      	nop
 801771c:	08042164 	.word	0x08042164
 8017720:	08042170 	.word	0x08042170
 8017724:	0804217c 	.word	0x0804217c

08017728 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8017728:	bb82      	cbnz	r2, 801778c <http_accept+0x64>
{
 801772a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 801772c:	fab1 f581 	clz	r5, r1
 8017730:	460c      	mov	r4, r1
 8017732:	096d      	lsrs	r5, r5, #5
 8017734:	b339      	cbz	r1, 8017786 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8017736:	2101      	movs	r1, #1
 8017738:	4620      	mov	r0, r4
 801773a:	f003 fe99 	bl	801b470 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 801773e:	2034      	movs	r0, #52	; 0x34
 8017740:	f002 fa46 	bl	8019bd0 <mem_malloc>
  if (ret != NULL) {
 8017744:	4606      	mov	r6, r0
 8017746:	b1d8      	cbz	r0, 8017780 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8017748:	2234      	movs	r2, #52	; 0x34
 801774a:	4629      	mov	r1, r5
 801774c:	f00c fa32 	bl	8023bb4 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8017750:	4631      	mov	r1, r6
 8017752:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8017754:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8017756:	f003 fec1 	bl	801b4dc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 801775a:	4620      	mov	r0, r4
 801775c:	490d      	ldr	r1, [pc, #52]	; (8017794 <http_accept+0x6c>)
 801775e:	f003 fec1 	bl	801b4e4 <tcp_recv>
  altcp_err(pcb, http_err);
 8017762:	4620      	mov	r0, r4
 8017764:	490c      	ldr	r1, [pc, #48]	; (8017798 <http_accept+0x70>)
 8017766:	f003 fef5 	bl	801b554 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801776a:	2204      	movs	r2, #4
 801776c:	4620      	mov	r0, r4
 801776e:	490b      	ldr	r1, [pc, #44]	; (801779c <http_accept+0x74>)
 8017770:	f003 ff12 	bl	801b598 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8017774:	4620      	mov	r0, r4
 8017776:	490a      	ldr	r1, [pc, #40]	; (80177a0 <http_accept+0x78>)
 8017778:	f003 fed0 	bl	801b51c <tcp_sent>

  return ERR_OK;
 801777c:	4628      	mov	r0, r5
}
 801777e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8017780:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017784:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8017786:	f06f 0005 	mvn.w	r0, #5
}
 801778a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 801778c:	f06f 0005 	mvn.w	r0, #5
}
 8017790:	4770      	bx	lr
 8017792:	bf00      	nop
 8017794:	08018401 	.word	0x08018401
 8017798:	08017ce9 	.word	0x08017ce9
 801779c:	080183a9 	.word	0x080183a9
 80177a0:	08018391 	.word	0x08018391

080177a4 <http_init_file>:
{
 80177a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a8:	b087      	sub	sp, #28
 80177aa:	4604      	mov	r4, r0
  if (file != NULL) {
 80177ac:	460e      	mov	r6, r1
{
 80177ae:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80177b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80177b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 80177b8:	2900      	cmp	r1, #0
 80177ba:	f000 80aa 	beq.w	8017912 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80177be:	680b      	ldr	r3, [r1, #0]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	f000 80ac 	beq.w	801791e <http_init_file+0x17a>
    if (tag_check) {
 80177c6:	2f00      	cmp	r7, #0
 80177c8:	d16f      	bne.n	80178aa <http_init_file+0x106>
    hs->handle = file;
 80177ca:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 80177cc:	2d00      	cmp	r5, #0
 80177ce:	d04f      	beq.n	8017870 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 80177d0:	782b      	ldrb	r3, [r5, #0]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	f000 80c0 	beq.w	8017958 <http_init_file+0x1b4>
 80177d8:	4b61      	ldr	r3, [pc, #388]	; (8017960 <http_init_file+0x1bc>)
 80177da:	2701      	movs	r7, #1
 80177dc:	9405      	str	r4, [sp, #20]
 80177de:	462c      	mov	r4, r5
 80177e0:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8017964 <http_init_file+0x1c0>
 80177e4:	4698      	mov	r8, r3
 80177e6:	9304      	str	r3, [sp, #16]
 80177e8:	e017      	b.n	801781a <http_init_file+0x76>
 80177ea:	2d0e      	cmp	r5, #14
      *pair = '\0';
 80177ec:	f04f 0300 	mov.w	r3, #0
 80177f0:	bfcc      	ite	gt
 80177f2:	2500      	movgt	r5, #0
 80177f4:	2501      	movle	r5, #1
 80177f6:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 80177fa:	4620      	mov	r0, r4
 80177fc:	213d      	movs	r1, #61	; 0x3d
 80177fe:	f00d fc01 	bl	8025004 <strchr>
    if (equals) {
 8017802:	b320      	cbz	r0, 801784e <http_init_file+0xaa>
      *equals = '\0';
 8017804:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017808:	f108 0804 	add.w	r8, r8, #4
 801780c:	3701      	adds	r7, #1
 801780e:	465c      	mov	r4, fp
      *equals = '\0';
 8017810:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8017814:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017818:	b30d      	cbz	r5, 801785e <http_init_file+0xba>
    pair = strchr(pair, '&');
 801781a:	4620      	mov	r0, r4
 801781c:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 801781e:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 8017822:	1e7d      	subs	r5, r7, #1
 8017824:	f00d fbee 	bl	8025004 <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017828:	46ba      	mov	sl, r7
    if (pair) {
 801782a:	4683      	mov	fp, r0
 801782c:	2800      	cmp	r0, #0
 801782e:	d1dc      	bne.n	80177ea <http_init_file+0x46>
      pair = strchr(equals, ' ');
 8017830:	4620      	mov	r0, r4
 8017832:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017834:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 8017836:	f00d fbe5 	bl	8025004 <strchr>
      if (pair) {
 801783a:	2800      	cmp	r0, #0
 801783c:	d0dd      	beq.n	80177fa <http_init_file+0x56>
        *pair = '\0';
 801783e:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8017842:	213d      	movs	r1, #61	; 0x3d
 8017844:	4620      	mov	r0, r4
 8017846:	f00d fbdd 	bl	8025004 <strchr>
    if (equals) {
 801784a:	2800      	cmp	r0, #0
 801784c:	d1da      	bne.n	8017804 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 801784e:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017852:	3701      	adds	r7, #1
 8017854:	f108 0804 	add.w	r8, r8, #4
 8017858:	465c      	mov	r4, fp
 801785a:	2d00      	cmp	r5, #0
 801785c:	d1dd      	bne.n	801781a <http_init_file+0x76>
 801785e:	4652      	mov	r2, sl
 8017860:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 8017862:	9b04      	ldr	r3, [sp, #16]
 8017864:	4630      	mov	r0, r6
 8017866:	9903      	ldr	r1, [sp, #12]
 8017868:	9300      	str	r3, [sp, #0]
 801786a:	4b3e      	ldr	r3, [pc, #248]	; (8017964 <http_init_file+0x1c0>)
 801786c:	f7ef f9e6 	bl	8006c3c <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017870:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017874:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8017876:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017878:	db5c      	blt.n	8017934 <http_init_file+0x190>
    hs->retries = 0;
 801787a:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 801787c:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 801787e:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 8017880:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8017884:	7c1b      	ldrb	r3, [r3, #16]
 8017886:	07d9      	lsls	r1, r3, #31
 8017888:	d526      	bpl.n	80178d8 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801788a:	9b02      	ldr	r3, [sp, #8]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d132      	bne.n	80178f6 <http_init_file+0x152>
  if (hs->keepalive) {
 8017890:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8017894:	b12b      	cbz	r3, 80178a2 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 8017896:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017898:	2b00      	cmp	r3, #0
 801789a:	d054      	beq.n	8017946 <http_init_file+0x1a2>
      hs->keepalive = 0;
 801789c:	2300      	movs	r3, #0
 801789e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80178a2:	2000      	movs	r0, #0
 80178a4:	b007      	add	sp, #28
 80178a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80178aa:	f44f 7090 	mov.w	r0, #288	; 0x120
 80178ae:	f002 f98f 	bl	8019bd0 <mem_malloc>
  if (ret != NULL) {
 80178b2:	4607      	mov	r7, r0
 80178b4:	2800      	cmp	r0, #0
 80178b6:	d088      	beq.n	80177ca <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80178b8:	f44f 7290 	mov.w	r2, #288	; 0x120
 80178bc:	2100      	movs	r1, #0
 80178be:	f00c f979 	bl	8023bb4 <memset>
        ssi->parsed = file->data;
 80178c2:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 80178c4:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 80178c6:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 80178c8:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 80178cc:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 80178ce:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 80178d0:	2d00      	cmp	r5, #0
 80178d2:	f47f af7d 	bne.w	80177d0 <http_init_file+0x2c>
 80178d6:	e7cb      	b.n	8017870 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 80178d8:	4b23      	ldr	r3, [pc, #140]	; (8017968 <http_init_file+0x1c4>)
 80178da:	f640 1243 	movw	r2, #2371	; 0x943
 80178de:	4923      	ldr	r1, [pc, #140]	; (801796c <http_init_file+0x1c8>)
 80178e0:	4823      	ldr	r0, [pc, #140]	; (8017970 <http_init_file+0x1cc>)
 80178e2:	f00d f903 	bl	8024aec <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80178e6:	9b02      	ldr	r3, [sp, #8]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d0d1      	beq.n	8017890 <http_init_file+0xec>
 80178ec:	6963      	ldr	r3, [r4, #20]
 80178ee:	7c1b      	ldrb	r3, [r3, #16]
 80178f0:	07db      	lsls	r3, r3, #31
 80178f2:	d5cd      	bpl.n	8017890 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80178f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80178f6:	491f      	ldr	r1, [pc, #124]	; (8017974 <http_init_file+0x1d0>)
 80178f8:	69a0      	ldr	r0, [r4, #24]
 80178fa:	f001 f823 	bl	8018944 <lwip_strnstr>
      if (file_start != NULL) {
 80178fe:	2800      	cmp	r0, #0
 8017900:	d0c6      	beq.n	8017890 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 8017902:	3004      	adds	r0, #4
 8017904:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8017906:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8017908:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 801790a:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 801790c:	1a9b      	subs	r3, r3, r2
 801790e:	6263      	str	r3, [r4, #36]	; 0x24
 8017910:	e7be      	b.n	8017890 <http_init_file+0xec>
    hs->file = NULL;
 8017912:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8017916:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8017918:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801791c:	e7b8      	b.n	8017890 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801791e:	4b12      	ldr	r3, [pc, #72]	; (8017968 <http_init_file+0x1c4>)
 8017920:	f640 120b 	movw	r2, #2315	; 0x90b
 8017924:	4914      	ldr	r1, [pc, #80]	; (8017978 <http_init_file+0x1d4>)
 8017926:	4812      	ldr	r0, [pc, #72]	; (8017970 <http_init_file+0x1cc>)
 8017928:	f00d f8e0 	bl	8024aec <iprintf>
    if (tag_check) {
 801792c:	2f00      	cmp	r7, #0
 801792e:	f43f af4c 	beq.w	80177ca <http_init_file+0x26>
 8017932:	e7ba      	b.n	80178aa <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017934:	f640 1234 	movw	r2, #2356	; 0x934
 8017938:	4b0b      	ldr	r3, [pc, #44]	; (8017968 <http_init_file+0x1c4>)
 801793a:	4910      	ldr	r1, [pc, #64]	; (801797c <http_init_file+0x1d8>)
 801793c:	480c      	ldr	r0, [pc, #48]	; (8017970 <http_init_file+0x1cc>)
 801793e:	f00d f8d5 	bl	8024aec <iprintf>
      hs->left = (u32_t)file->len;
 8017942:	6872      	ldr	r2, [r6, #4]
 8017944:	e799      	b.n	801787a <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 8017946:	6963      	ldr	r3, [r4, #20]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d0aa      	beq.n	80178a2 <http_init_file+0xfe>
 801794c:	7c1b      	ldrb	r3, [r3, #16]
 801794e:	f003 0303 	and.w	r3, r3, #3
 8017952:	2b01      	cmp	r3, #1
 8017954:	d1a5      	bne.n	80178a2 <http_init_file+0xfe>
 8017956:	e7a1      	b.n	801789c <http_init_file+0xf8>
    return (0);
 8017958:	461a      	mov	r2, r3
 801795a:	4b01      	ldr	r3, [pc, #4]	; (8017960 <http_init_file+0x1bc>)
 801795c:	9304      	str	r3, [sp, #16]
 801795e:	e780      	b.n	8017862 <http_init_file+0xbe>
 8017960:	2001e2d0 	.word	0x2001e2d0
 8017964:	2001e310 	.word	0x2001e310
 8017968:	08042188 	.word	0x08042188
 801796c:	080421f4 	.word	0x080421f4
 8017970:	0802b818 	.word	0x0802b818
 8017974:	0802945c 	.word	0x0802945c
 8017978:	080421c0 	.word	0x080421c0
 801797c:	080421d4 	.word	0x080421d4

08017980 <http_find_file>:
{
 8017980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017984:	ed2d 8b02 	vpush	{d8}
 8017988:	b087      	sub	sp, #28
 801798a:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 801798c:	4608      	mov	r0, r1
 801798e:	460c      	mov	r4, r1
{
 8017990:	4690      	mov	r8, r2
 8017992:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 8017994:	f7e8 fc5e 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017998:	4606      	mov	r6, r0
 801799a:	b148      	cbz	r0, 80179b0 <http_find_file+0x30>
 801799c:	f100 39ff 	add.w	r9, r0, #4294967295
 80179a0:	f814 3009 	ldrb.w	r3, [r4, r9]
 80179a4:	2b2f      	cmp	r3, #47	; 0x2f
 80179a6:	d06a      	beq.n	8017a7e <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 80179a8:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80179aa:	f04f 0900 	mov.w	r9, #0
 80179ae:	e001      	b.n	80179b4 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 80179b0:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80179b2:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 80179b4:	213f      	movs	r1, #63	; 0x3f
 80179b6:	4620      	mov	r0, r4
 80179b8:	f00d fb24 	bl	8025004 <strchr>
    if (params != NULL) {
 80179bc:	4606      	mov	r6, r0
 80179be:	b118      	cbz	r0, 80179c8 <http_find_file+0x48>
      *params = '\0';
 80179c0:	2300      	movs	r3, #0
 80179c2:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 80179c6:	9c05      	ldr	r4, [sp, #20]
 80179c8:	4621      	mov	r1, r4
 80179ca:	4628      	mov	r0, r5
 80179cc:	f7ff fe26 	bl	801761c <fs_open>
    if (err == ERR_OK) {
 80179d0:	b9b0      	cbnz	r0, 8017a00 <http_find_file+0x80>
    if (file != NULL) {
 80179d2:	b1e7      	cbz	r7, 8017a0e <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80179d4:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80179d8:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80179da:	f019 0908 	ands.w	r9, r9, #8
 80179de:	d01d      	beq.n	8017a1c <http_find_file+0x9c>
        tag_check = 1;
 80179e0:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80179e4:	4623      	mov	r3, r4
 80179e6:	4642      	mov	r2, r8
 80179e8:	4639      	mov	r1, r7
 80179ea:	4628      	mov	r0, r5
 80179ec:	9601      	str	r6, [sp, #4]
 80179ee:	f8cd 9000 	str.w	r9, [sp]
 80179f2:	f7ff fed7 	bl	80177a4 <http_init_file>
}
 80179f6:	b007      	add	sp, #28
 80179f8:	ecbd 8b02 	vpop	{d8}
 80179fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8017a00:	a905      	add	r1, sp, #20
 8017a02:	4628      	mov	r0, r5
 8017a04:	f7ff fe6c 	bl	80176e0 <http_get_404_file>
 8017a08:	4607      	mov	r7, r0
    if (file != NULL) {
 8017a0a:	2f00      	cmp	r7, #0
 8017a0c:	d1e2      	bne.n	80179d4 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 8017a0e:	a905      	add	r1, sp, #20
 8017a10:	4628      	mov	r0, r5
 8017a12:	f7ff fe65 	bl	80176e0 <http_get_404_file>
 8017a16:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017a18:	9c05      	ldr	r4, [sp, #20]
 8017a1a:	e7e3      	b.n	80179e4 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 8017a1c:	213f      	movs	r1, #63	; 0x3f
 8017a1e:	4620      	mov	r0, r4
 8017a20:	f00d faf0 	bl	8025004 <strchr>
    if (param != NULL) {
 8017a24:	4682      	mov	sl, r0
 8017a26:	b108      	cbz	r0, 8017a2c <http_find_file+0xac>
      *param = 0;
 8017a28:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8017a2c:	212e      	movs	r1, #46	; 0x2e
 8017a2e:	4620      	mov	r0, r4
 8017a30:	f00d fae8 	bl	8025004 <strchr>
 8017a34:	4603      	mov	r3, r0
 8017a36:	b138      	cbz	r0, 8017a48 <http_find_file+0xc8>
 8017a38:	1c58      	adds	r0, r3, #1
 8017a3a:	212e      	movs	r1, #46	; 0x2e
 8017a3c:	461c      	mov	r4, r3
 8017a3e:	f00d fae1 	bl	8025004 <strchr>
 8017a42:	4603      	mov	r3, r0
 8017a44:	2800      	cmp	r0, #0
 8017a46:	d1f7      	bne.n	8017a38 <http_find_file+0xb8>
  u8_t tag_check = 0;
 8017a48:	4940      	ldr	r1, [pc, #256]	; (8017b4c <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8017b5c <http_find_file+0x1dc>
 8017a50:	f000 ffa0 	bl	8018994 <lwip_stricmp>
 8017a54:	b148      	cbz	r0, 8017a6a <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8017a56:	4b3e      	ldr	r3, [pc, #248]	; (8017b50 <http_find_file+0x1d0>)
 8017a58:	459b      	cmp	fp, r3
 8017a5a:	d008      	beq.n	8017a6e <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8017a5c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8017a60:	4620      	mov	r0, r4
 8017a62:	f000 ff97 	bl	8018994 <lwip_stricmp>
 8017a66:	2800      	cmp	r0, #0
 8017a68:	d1f5      	bne.n	8017a56 <http_find_file+0xd6>
        tag_check = 1;
 8017a6a:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 8017a6e:	f1ba 0f00 	cmp.w	sl, #0
 8017a72:	d0d1      	beq.n	8017a18 <http_find_file+0x98>
      *param = '?';
 8017a74:	233f      	movs	r3, #63	; 0x3f
 8017a76:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017a7a:	9c05      	ldr	r4, [sp, #20]
 8017a7c:	e7b2      	b.n	80179e4 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017a7e:	4b35      	ldr	r3, [pc, #212]	; (8017b54 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8017a80:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017a82:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8017a84:	d106      	bne.n	8017a94 <http_find_file+0x114>
 8017a86:	f1a0 0001 	sub.w	r0, r0, #1
 8017a8a:	fab0 f080 	clz	r0, r0
 8017a8e:	0940      	lsrs	r0, r0, #5
 8017a90:	2800      	cmp	r0, #0
 8017a92:	d057      	beq.n	8017b44 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8017a94:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8017a98:	bf28      	it	cs
 8017a9a:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 8017a9e:	2e01      	cmp	r6, #1
 8017aa0:	d008      	beq.n	8017ab4 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 8017aa2:	464a      	mov	r2, r9
 8017aa4:	4621      	mov	r1, r4
 8017aa6:	482b      	ldr	r0, [pc, #172]	; (8017b54 <http_find_file+0x1d4>)
 8017aa8:	f00c f85c 	bl	8023b64 <memcpy>
      http_uri_buf[copy_len] = 0;
 8017aac:	2300      	movs	r3, #0
 8017aae:	9a02      	ldr	r2, [sp, #8]
 8017ab0:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 8017ab4:	462f      	mov	r7, r5
 8017ab6:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 8017aba:	f8df a098 	ldr.w	sl, [pc, #152]	; 8017b54 <http_find_file+0x1d4>
 8017abe:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 8017ac2:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 8017ac4:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 8017ac6:	d012      	beq.n	8017aee <http_find_file+0x16e>
        if (len_left > 0) {
 8017ac8:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 8017acc:	d113      	bne.n	8017af6 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 8017ace:	4641      	mov	r1, r8
 8017ad0:	4628      	mov	r0, r5
 8017ad2:	f7ff fda3 	bl	801761c <fs_open>
      if (err == ERR_OK) {
 8017ad6:	b338      	cbz	r0, 8017b28 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8017ad8:	f10b 0b01 	add.w	fp, fp, #1
 8017adc:	f1bb 0f05 	cmp.w	fp, #5
 8017ae0:	d1ef      	bne.n	8017ac2 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 8017ae2:	ee18 8a10 	vmov	r8, s16
 8017ae6:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8017ae8:	f04f 0900 	mov.w	r9, #0
 8017aec:	e762      	b.n	80179b4 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 8017aee:	4b1a      	ldr	r3, [pc, #104]	; (8017b58 <http_find_file+0x1d8>)
 8017af0:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 8017af4:	e7eb      	b.n	8017ace <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017af6:	4b18      	ldr	r3, [pc, #96]	; (8017b58 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017af8:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017afa:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 8017afe:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017b00:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017b02:	4608      	mov	r0, r1
 8017b04:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 8017b06:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017b0a:	f7e8 fba3 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8017b0e:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017b10:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8017b12:	4282      	cmp	r2, r0
 8017b14:	bf28      	it	cs
 8017b16:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017b18:	4620      	mov	r0, r4
 8017b1a:	9203      	str	r2, [sp, #12]
 8017b1c:	f00c f822 	bl	8023b64 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8017b20:	2300      	movs	r3, #0
 8017b22:	9a03      	ldr	r2, [sp, #12]
 8017b24:	54a3      	strb	r3, [r4, r2]
 8017b26:	e7d2      	b.n	8017ace <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 8017b28:	4a0b      	ldr	r2, [pc, #44]	; (8017b58 <http_find_file+0x1d8>)
        uri = file_name;
 8017b2a:	4644      	mov	r4, r8
 8017b2c:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 8017b30:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 8017b34:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8017b36:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 8017b3a:	2d00      	cmp	r5, #0
 8017b3c:	f43f af3a 	beq.w	80179b4 <http_find_file+0x34>
  char *params = NULL;
 8017b40:	4606      	mov	r6, r0
 8017b42:	e74f      	b.n	80179e4 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 8017b44:	462f      	mov	r7, r5
 8017b46:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 8017b48:	4681      	mov	r9, r0
 8017b4a:	e733      	b.n	80179b4 <http_find_file+0x34>
 8017b4c:	08042248 	.word	0x08042248
 8017b50:	080424a8 	.word	0x080424a8
 8017b54:	2001e350 	.word	0x2001e350
 8017b58:	080424b8 	.word	0x080424b8
 8017b5c:	08042498 	.word	0x08042498

08017b60 <http_post_rxpbuf>:
{
 8017b60:	b538      	push	{r3, r4, r5, lr}
 8017b62:	4604      	mov	r4, r0
  if (p != NULL) {
 8017b64:	b1c9      	cbz	r1, 8017b9a <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 8017b66:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017b68:	890a      	ldrh	r2, [r1, #8]
 8017b6a:	4293      	cmp	r3, r2
 8017b6c:	d31a      	bcc.n	8017ba4 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 8017b6e:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 8017b70:	4620      	mov	r0, r4
 8017b72:	6323      	str	r3, [r4, #48]	; 0x30
 8017b74:	f7ef f970 	bl	8006e58 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8017b78:	b178      	cbz	r0, 8017b9a <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 8017b7e:	490a      	ldr	r1, [pc, #40]	; (8017ba8 <http_post_rxpbuf+0x48>)
 8017b80:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017b82:	4620      	mov	r0, r4
 8017b84:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8017b86:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017b88:	f7ef f976 	bl	8006e78 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8017b8c:	462a      	mov	r2, r5
 8017b8e:	4620      	mov	r0, r4
 8017b90:	4905      	ldr	r1, [pc, #20]	; (8017ba8 <http_post_rxpbuf+0x48>)
}
 8017b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8017b96:	f7ff bef3 	b.w	8017980 <http_find_file>
  if (hs->post_content_len_left == 0) {
 8017b9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d0ee      	beq.n	8017b7e <http_post_rxpbuf+0x1e>
}
 8017ba0:	2000      	movs	r0, #0
 8017ba2:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	e7e3      	b.n	8017b70 <http_post_rxpbuf+0x10>
 8017ba8:	2001e350 	.word	0x2001e350

08017bac <http_find_error_file>:
  if (error_nr == 501) {
 8017bac:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 8017bb0:	4a17      	ldr	r2, [pc, #92]	; (8017c10 <http_find_error_file+0x64>)
 8017bb2:	4299      	cmp	r1, r3
 8017bb4:	4b17      	ldr	r3, [pc, #92]	; (8017c14 <http_find_error_file+0x68>)
 8017bb6:	4918      	ldr	r1, [pc, #96]	; (8017c18 <http_find_error_file+0x6c>)
{
 8017bb8:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 8017bba:	4e18      	ldr	r6, [pc, #96]	; (8017c1c <http_find_error_file+0x70>)
 8017bbc:	bf18      	it	ne
 8017bbe:	461e      	movne	r6, r3
 8017bc0:	4b17      	ldr	r3, [pc, #92]	; (8017c20 <http_find_error_file+0x74>)
 8017bc2:	bf18      	it	ne
 8017bc4:	460b      	movne	r3, r1
{
 8017bc6:	b084      	sub	sp, #16
 8017bc8:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8017bca:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 8017bcc:	4d15      	ldr	r5, [pc, #84]	; (8017c24 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8017bce:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 8017bd0:	bf08      	it	eq
 8017bd2:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8017bd4:	f7ff fd22 	bl	801761c <fs_open>
 8017bd8:	9b03      	ldr	r3, [sp, #12]
 8017bda:	b128      	cbz	r0, 8017be8 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 8017bdc:	4629      	mov	r1, r5
 8017bde:	4620      	mov	r0, r4
 8017be0:	f7ff fd1c 	bl	801761c <fs_open>
 8017be4:	b948      	cbnz	r0, 8017bfa <http_find_error_file+0x4e>
    uri = uri2;
 8017be6:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8017be8:	2200      	movs	r2, #0
 8017bea:	4621      	mov	r1, r4
 8017bec:	4620      	mov	r0, r4
 8017bee:	e9cd 2200 	strd	r2, r2, [sp]
 8017bf2:	f7ff fdd7 	bl	80177a4 <http_init_file>
}
 8017bf6:	b004      	add	sp, #16
 8017bf8:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 8017bfa:	4631      	mov	r1, r6
 8017bfc:	4620      	mov	r0, r4
 8017bfe:	f7ff fd0d 	bl	801761c <fs_open>
 8017c02:	b908      	cbnz	r0, 8017c08 <http_find_error_file+0x5c>
    uri = uri3;
 8017c04:	4633      	mov	r3, r6
 8017c06:	e7ef      	b.n	8017be8 <http_find_error_file+0x3c>
    return ERR_ARG;
 8017c08:	f06f 000f 	mvn.w	r0, #15
 8017c0c:	e7f3      	b.n	8017bf6 <http_find_error_file+0x4a>
 8017c0e:	bf00      	nop
 8017c10:	0804222c 	.word	0x0804222c
 8017c14:	08042244 	.word	0x08042244
 8017c18:	0804225c 	.word	0x0804225c
 8017c1c:	08042220 	.word	0x08042220
 8017c20:	08042238 	.word	0x08042238
 8017c24:	08042250 	.word	0x08042250

08017c28 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8017c28:	b538      	push	{r3, r4, r5, lr}
 8017c2a:	4605      	mov	r5, r0
  if (hs != NULL) {
 8017c2c:	460c      	mov	r4, r1
 8017c2e:	2900      	cmp	r1, #0
 8017c30:	d041      	beq.n	8017cb6 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 8017c32:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8017c34:	bb83      	cbnz	r3, 8017c98 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 8017c36:	2100      	movs	r1, #0
 8017c38:	4628      	mov	r0, r5
 8017c3a:	f003 fc4f 	bl	801b4dc <tcp_arg>
  altcp_recv(pcb, NULL);
 8017c3e:	2100      	movs	r1, #0
 8017c40:	4628      	mov	r0, r5
 8017c42:	f003 fc4f 	bl	801b4e4 <tcp_recv>
  altcp_err(pcb, NULL);
 8017c46:	2100      	movs	r1, #0
 8017c48:	4628      	mov	r0, r5
 8017c4a:	f003 fc83 	bl	801b554 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8017c4e:	2200      	movs	r2, #0
 8017c50:	4628      	mov	r0, r5
 8017c52:	4611      	mov	r1, r2
 8017c54:	f003 fca0 	bl	801b598 <tcp_poll>
  altcp_sent(pcb, NULL);
 8017c58:	4628      	mov	r0, r5
 8017c5a:	2100      	movs	r1, #0
 8017c5c:	f003 fc5e 	bl	801b51c <tcp_sent>
  if (hs->handle) {
 8017c60:	6960      	ldr	r0, [r4, #20]
 8017c62:	b118      	cbz	r0, 8017c6c <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 8017c64:	f7ff fd00 	bl	8017668 <fs_close>
    hs->handle = NULL;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8017c6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017c6e:	b118      	cbz	r0, 8017c78 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 8017c70:	f001 fdf2 	bl	8019858 <mem_free>
    hs->ssi = NULL;
 8017c74:	2300      	movs	r3, #0
 8017c76:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8017c78:	6a20      	ldr	r0, [r4, #32]
 8017c7a:	b118      	cbz	r0, 8017c84 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 8017c7c:	f002 fe7c 	bl	801a978 <pbuf_free>
    hs->req = NULL;
 8017c80:	2300      	movs	r3, #0
 8017c82:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8017c84:	4620      	mov	r0, r4
 8017c86:	f001 fde7 	bl	8019858 <mem_free>
  err = altcp_close(pcb);
 8017c8a:	4628      	mov	r0, r5
 8017c8c:	f004 fae2 	bl	801c254 <tcp_close>
  if (err != ERR_OK) {
 8017c90:	4604      	mov	r4, r0
 8017c92:	b948      	cbnz	r0, 8017ca8 <http_close_or_abort_conn.constprop.0+0x80>
}
 8017c94:	4620      	mov	r0, r4
 8017c96:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8017c98:	4911      	ldr	r1, [pc, #68]	; (8017ce0 <http_close_or_abort_conn.constprop.0+0xb8>)
 8017c9a:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017c9c:	223f      	movs	r2, #63	; 0x3f
 8017c9e:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 8017ca0:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017ca2:	f7ef f8e9 	bl	8006e78 <httpd_post_finished>
 8017ca6:	e7c6      	b.n	8017c36 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8017ca8:	4628      	mov	r0, r5
 8017caa:	2204      	movs	r2, #4
 8017cac:	490d      	ldr	r1, [pc, #52]	; (8017ce4 <http_close_or_abort_conn.constprop.0+0xbc>)
 8017cae:	f003 fc73 	bl	801b598 <tcp_poll>
}
 8017cb2:	4620      	mov	r0, r4
 8017cb4:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 8017cb6:	f003 fc11 	bl	801b4dc <tcp_arg>
  altcp_recv(pcb, NULL);
 8017cba:	4621      	mov	r1, r4
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	f003 fc11 	bl	801b4e4 <tcp_recv>
  altcp_err(pcb, NULL);
 8017cc2:	4621      	mov	r1, r4
 8017cc4:	4628      	mov	r0, r5
 8017cc6:	f003 fc45 	bl	801b554 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8017cca:	4621      	mov	r1, r4
 8017ccc:	4628      	mov	r0, r5
 8017cce:	4622      	mov	r2, r4
 8017cd0:	f003 fc62 	bl	801b598 <tcp_poll>
  altcp_sent(pcb, NULL);
 8017cd4:	4621      	mov	r1, r4
 8017cd6:	4628      	mov	r0, r5
 8017cd8:	f003 fc20 	bl	801b51c <tcp_sent>
  if (hs != NULL) {
 8017cdc:	e7d5      	b.n	8017c8a <http_close_or_abort_conn.constprop.0+0x62>
 8017cde:	bf00      	nop
 8017ce0:	2001e350 	.word	0x2001e350
 8017ce4:	080183a9 	.word	0x080183a9

08017ce8 <http_err>:
  if (hs != NULL) {
 8017ce8:	b1c0      	cbz	r0, 8017d1c <http_err+0x34>
{
 8017cea:	b510      	push	{r4, lr}
 8017cec:	4604      	mov	r4, r0
  if (hs->handle) {
 8017cee:	6940      	ldr	r0, [r0, #20]
 8017cf0:	b118      	cbz	r0, 8017cfa <http_err+0x12>
    fs_close(hs->handle);
 8017cf2:	f7ff fcb9 	bl	8017668 <fs_close>
    hs->handle = NULL;
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8017cfa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017cfc:	b118      	cbz	r0, 8017d06 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 8017cfe:	f001 fdab 	bl	8019858 <mem_free>
    hs->ssi = NULL;
 8017d02:	2300      	movs	r3, #0
 8017d04:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8017d06:	6a20      	ldr	r0, [r4, #32]
 8017d08:	b118      	cbz	r0, 8017d12 <http_err+0x2a>
    pbuf_free(hs->req);
 8017d0a:	f002 fe35 	bl	801a978 <pbuf_free>
    hs->req = NULL;
 8017d0e:	2300      	movs	r3, #0
 8017d10:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8017d12:	4620      	mov	r0, r4
}
 8017d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8017d18:	f001 bd9e 	b.w	8019858 <mem_free>
 8017d1c:	4770      	bx	lr
 8017d1e:	bf00      	nop

08017d20 <http_eof>:
{
 8017d20:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 8017d22:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8017d26:	b1fb      	cbz	r3, 8017d68 <http_eof+0x48>
 8017d28:	4605      	mov	r5, r0
  if (hs->handle) {
 8017d2a:	6948      	ldr	r0, [r1, #20]
 8017d2c:	460c      	mov	r4, r1
 8017d2e:	b118      	cbz	r0, 8017d38 <http_eof+0x18>
    fs_close(hs->handle);
 8017d30:	f7ff fc9a 	bl	8017668 <fs_close>
    hs->handle = NULL;
 8017d34:	2300      	movs	r3, #0
 8017d36:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8017d38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017d3a:	b118      	cbz	r0, 8017d44 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 8017d3c:	f001 fd8c 	bl	8019858 <mem_free>
    hs->ssi = NULL;
 8017d40:	2300      	movs	r3, #0
 8017d42:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8017d44:	6a20      	ldr	r0, [r4, #32]
 8017d46:	b108      	cbz	r0, 8017d4c <http_eof+0x2c>
    pbuf_free(hs->req);
 8017d48:	f002 fe16 	bl	801a978 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 8017d4c:	2234      	movs	r2, #52	; 0x34
 8017d4e:	2100      	movs	r1, #0
 8017d50:	4620      	mov	r0, r4
 8017d52:	f00b ff2f 	bl	8023bb4 <memset>
    hs->keepalive = 1;
 8017d56:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8017d58:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 8017d5a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 8017d5e:	8b6b      	ldrh	r3, [r5, #26]
 8017d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d64:	836b      	strh	r3, [r5, #26]
}
 8017d66:	bd38      	pop	{r3, r4, r5, pc}
 8017d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 8017d6c:	f7ff bf5c 	b.w	8017c28 <http_close_or_abort_conn.constprop.0>

08017d70 <http_send>:
{
 8017d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8017d74:	460d      	mov	r5, r1
{
 8017d76:	b087      	sub	sp, #28
  if (hs == NULL) {
 8017d78:	2900      	cmp	r1, #0
 8017d7a:	f000 824b 	beq.w	8018214 <http_send+0x4a4>
  if (hs->left == 0) {
 8017d7e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8017d80:	4607      	mov	r7, r0
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	f000 818c 	beq.w	80180a0 <http_send+0x330>
  if (hs->ssi) {
 8017d88:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8017d8a:	2c00      	cmp	r4, #0
 8017d8c:	f000 819a 	beq.w	80180c4 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 8017d90:	6823      	ldr	r3, [r4, #0]
 8017d92:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 8017d94:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8017d98:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 8017d9a:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 8017d9e:	f200 80c3 	bhi.w	8017f28 <http_send+0x1b8>
  u8_t data_to_send = 0;
 8017da2:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 8017da6:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017da8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 8017dac:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017db0:	2b04      	cmp	r3, #4
 8017db2:	d003      	beq.n	8017dbc <http_send+0x4c>
 8017db4:	68e1      	ldr	r1, [r4, #12]
 8017db6:	2900      	cmp	r1, #0
 8017db8:	f000 8091 	beq.w	8017ede <http_send+0x16e>
 8017dbc:	2e00      	cmp	r6, #0
 8017dbe:	f040 811b 	bne.w	8017ff8 <http_send+0x288>
    if (len == 0) {
 8017dc2:	2a00      	cmp	r2, #0
 8017dc4:	f000 811b 	beq.w	8017ffe <http_send+0x28e>
    switch (ssi->tag_state) {
 8017dc8:	2b04      	cmp	r3, #4
 8017dca:	d8f1      	bhi.n	8017db0 <http_send+0x40>
 8017dcc:	e8df f003 	tbb	[pc, r3]
 8017dd0:	23407466 	.word	0x23407466
 8017dd4:	03          	.byte	0x03
 8017dd5:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 8017dd6:	68a3      	ldr	r3, [r4, #8]
 8017dd8:	69a9      	ldr	r1, [r5, #24]
 8017dda:	428b      	cmp	r3, r1
 8017ddc:	f240 80f1 	bls.w	8017fc2 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8017de0:	6863      	ldr	r3, [r4, #4]
 8017de2:	4299      	cmp	r1, r3
 8017de4:	f200 81fc 	bhi.w	80181e0 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8017de8:	1a5a      	subs	r2, r3, r1
 8017dea:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8017dee:	4282      	cmp	r2, r0
 8017df0:	f340 8117 	ble.w	8018022 <http_send+0x2b2>
 8017df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017df8:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	f10d 0216 	add.w	r2, sp, #22
 8017e02:	4638      	mov	r0, r7
 8017e04:	f7ff fc36 	bl	8017674 <http_write>
          if (err == ERR_OK) {
 8017e08:	2800      	cmp	r0, #0
 8017e0a:	f000 81fe 	beq.w	801820a <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017e0e:	4606      	mov	r6, r0
    if (len == 0) {
 8017e10:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017e14:	e11a      	b.n	801804c <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8017e16:	6821      	ldr	r1, [r4, #0]
 8017e18:	8a20      	ldrh	r0, [r4, #16]
 8017e1a:	f891 e000 	ldrb.w	lr, [r1]
 8017e1e:	2800      	cmp	r0, #0
 8017e20:	f040 80b9 	bne.w	8017f96 <http_send+0x226>
 8017e24:	f1ae 0c09 	sub.w	ip, lr, #9
 8017e28:	fa5f fc8c 	uxtb.w	ip, ip
 8017e2c:	f1bc 0f17 	cmp.w	ip, #23
 8017e30:	f200 80b1 	bhi.w	8017f96 <http_send+0x226>
 8017e34:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 80181dc <http_send+0x46c>
 8017e38:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8017e3c:	f01c 0f01 	tst.w	ip, #1
 8017e40:	f000 80a9 	beq.w	8017f96 <http_send+0x226>
          ssi->parsed++;
 8017e44:	3101      	adds	r1, #1
 8017e46:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8017e48:	68e1      	ldr	r1, [r4, #12]
 8017e4a:	3901      	subs	r1, #1
 8017e4c:	60e1      	str	r1, [r4, #12]
          break;
 8017e4e:	e7af      	b.n	8017db0 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8017e50:	8a20      	ldrh	r0, [r4, #16]
 8017e52:	2800      	cmp	r0, #0
 8017e54:	f040 8083 	bne.w	8017f5e <http_send+0x1ee>
 8017e58:	6821      	ldr	r1, [r4, #0]
 8017e5a:	f891 e000 	ldrb.w	lr, [r1]
 8017e5e:	f1ae 0c09 	sub.w	ip, lr, #9
 8017e62:	fa5f fc8c 	uxtb.w	ip, ip
 8017e66:	f1bc 0f17 	cmp.w	ip, #23
 8017e6a:	f240 8110 	bls.w	801808e <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8017e6e:	f8df c350 	ldr.w	ip, [pc, #848]	; 80181c0 <http_send+0x450>
 8017e72:	f894 9014 	ldrb.w	r9, [r4, #20]
 8017e76:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8017e7a:	f8dc c004 	ldr.w	ip, [ip, #4]
 8017e7e:	f89c c000 	ldrb.w	ip, [ip]
 8017e82:	45f4      	cmp	ip, lr
 8017e84:	f000 8083 	beq.w	8017f8e <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8017e88:	f100 0c01 	add.w	ip, r0, #1
 8017e8c:	4420      	add	r0, r4
 8017e8e:	f8a4 c010 	strh.w	ip, [r4, #16]
 8017e92:	f891 c000 	ldrb.w	ip, [r1]
 8017e96:	f880 c016 	strb.w	ip, [r0, #22]
 8017e9a:	e7d3      	b.n	8017e44 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8017e9c:	6821      	ldr	r1, [r4, #0]
 8017e9e:	7808      	ldrb	r0, [r1, #0]
 8017ea0:	283c      	cmp	r0, #60	; 0x3c
 8017ea2:	d002      	beq.n	8017eaa <http_send+0x13a>
 8017ea4:	282f      	cmp	r0, #47	; 0x2f
 8017ea6:	d1cd      	bne.n	8017e44 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8017ea8:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 8017eaa:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 8017eac:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 8017eae:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 8017eb0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8017eb4:	8223      	strh	r3, [r4, #16]
            break;
 8017eb6:	e7c5      	b.n	8017e44 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8017eb8:	49c1      	ldr	r1, [pc, #772]	; (80181c0 <http_send+0x450>)
 8017eba:	7d20      	ldrb	r0, [r4, #20]
 8017ebc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017ec0:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8017ec4:	f811 100c 	ldrb.w	r1, [r1, ip]
 8017ec8:	2900      	cmp	r1, #0
 8017eca:	f040 8086 	bne.w	8017fda <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 8017ece:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8017ed0:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017ed2:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8017ed4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017ed8:	2900      	cmp	r1, #0
 8017eda:	f47f af6f 	bne.w	8017dbc <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8017ede:	6823      	ldr	r3, [r4, #0]
 8017ee0:	69a9      	ldr	r1, [r5, #24]
 8017ee2:	428b      	cmp	r3, r1
 8017ee4:	f240 808b 	bls.w	8017ffe <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8017ee8:	1a5b      	subs	r3, r3, r1
 8017eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017eee:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8017ef0:	4293      	cmp	r3, r2
 8017ef2:	bfa8      	it	ge
 8017ef4:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017ef6:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8017efa:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017efe:	2300      	movs	r3, #0
 8017f00:	f7ff fbb8 	bl	8017674 <http_write>
    if (err == ERR_OK) {
 8017f04:	2800      	cmp	r0, #0
 8017f06:	d17a      	bne.n	8017ffe <http_send+0x28e>
    hs->file += len;
 8017f08:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 8017f0c:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 8017f10:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8017f12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8017f14:	440a      	add	r2, r1
    hs->left -= len;
 8017f16:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8017f18:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 8017f1a:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d071      	beq.n	8018004 <http_send+0x294>
}
 8017f20:	4640      	mov	r0, r8
 8017f22:	b007      	add	sp, #28
 8017f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8017f28:	1a5b      	subs	r3, r3, r1
 8017f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017f2e:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8017f30:	4293      	cmp	r3, r2
 8017f32:	bfa8      	it	ge
 8017f34:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017f36:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8017f3a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017f3e:	2300      	movs	r3, #0
 8017f40:	f7ff fb98 	bl	8017674 <http_write>
    if (err == ERR_OK) {
 8017f44:	4606      	mov	r6, r0
 8017f46:	2800      	cmp	r0, #0
 8017f48:	f000 8154 	beq.w	80181f4 <http_send+0x484>
  u8_t data_to_send = 0;
 8017f4c:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 8017f50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d052      	beq.n	8017ffe <http_send+0x28e>
    if (len == 0) {
 8017f58:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017f5c:	e724      	b.n	8017da8 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8017f5e:	f8df 9260 	ldr.w	r9, [pc, #608]	; 80181c0 <http_send+0x450>
 8017f62:	7d21      	ldrb	r1, [r4, #20]
 8017f64:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 8017f68:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8017f6c:	6821      	ldr	r1, [r4, #0]
 8017f6e:	f89e a000 	ldrb.w	sl, [lr]
 8017f72:	f891 c000 	ldrb.w	ip, [r1]
 8017f76:	45e2      	cmp	sl, ip
 8017f78:	d072      	beq.n	8018060 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8017f7a:	f1ac 0c09 	sub.w	ip, ip, #9
 8017f7e:	fa5f fc8c 	uxtb.w	ip, ip
 8017f82:	f1bc 0f17 	cmp.w	ip, #23
 8017f86:	d964      	bls.n	8018052 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8017f88:	2807      	cmp	r0, #7
 8017f8a:	f67f af7d 	bls.w	8017e88 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 8017f94:	e756      	b.n	8017e44 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8017f96:	f894 9014 	ldrb.w	r9, [r4, #20]
 8017f9a:	f8df c224 	ldr.w	ip, [pc, #548]	; 80181c0 <http_send+0x450>
 8017f9e:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8017fa2:	f8dc c004 	ldr.w	ip, [ip, #4]
 8017fa6:	f81c 9000 	ldrb.w	r9, [ip, r0]
 8017faa:	45f1      	cmp	r9, lr
 8017fac:	f000 80a1 	beq.w	80180f2 <http_send+0x382>
          ssi->parse_left--;
 8017fb0:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 8017fb2:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8017fb4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8017fb8:	3b01      	subs	r3, #1
          ssi->parsed++;
 8017fba:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8017fbc:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	e6f8      	b.n	8017db4 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8017fc2:	8a21      	ldrh	r1, [r4, #16]
 8017fc4:	8a60      	ldrh	r0, [r4, #18]
 8017fc6:	4281      	cmp	r1, r0
 8017fc8:	f0c0 80e0 	bcc.w	801818c <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 8017fcc:	6023      	str	r3, [r4, #0]
 8017fce:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 8017fd0:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 8017fd4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8017fd8:	e6ec      	b.n	8017db4 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8017fda:	6820      	ldr	r0, [r4, #0]
 8017fdc:	f890 e000 	ldrb.w	lr, [r0]
 8017fe0:	458e      	cmp	lr, r1
 8017fe2:	f000 80ce 	beq.w	8018182 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8017fec:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 8017fee:	3001      	adds	r0, #1
          ssi->parse_left--;
 8017ff0:	3901      	subs	r1, #1
          ssi->parsed++;
 8017ff2:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8017ff4:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8017ff6:	e6db      	b.n	8017db0 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8017ff8:	2b04      	cmp	r3, #4
 8017ffa:	f47f af70 	bne.w	8017ede <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8017ffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018000:	2b00      	cmp	r3, #0
 8018002:	d18d      	bne.n	8017f20 <http_send+0x1b0>
 8018004:	6968      	ldr	r0, [r5, #20]
 8018006:	f7ff fb31 	bl	801766c <fs_bytes_left>
 801800a:	2800      	cmp	r0, #0
 801800c:	dc88      	bgt.n	8017f20 <http_send+0x1b0>
      return 0;
 801800e:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 8018012:	4638      	mov	r0, r7
 8018014:	4629      	mov	r1, r5
 8018016:	f7ff fe83 	bl	8017d20 <http_eof>
}
 801801a:	4640      	mov	r0, r8
 801801c:	b007      	add	sp, #28
 801801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018022:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018024:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 8018028:	2a00      	cmp	r2, #0
 801802a:	f47f aee7 	bne.w	8017dfc <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 801802e:	428b      	cmp	r3, r1
 8018030:	d805      	bhi.n	801803e <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018032:	68a0      	ldr	r0, [r4, #8]
 8018034:	1ac3      	subs	r3, r0, r3
 8018036:	441a      	add	r2, r3
 8018038:	b292      	uxth	r2, r2
 801803a:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 801803e:	4411      	add	r1, r2
 8018040:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8018042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 8018044:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 8018048:	1a9b      	subs	r3, r3, r2
 801804a:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801804c:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8018050:	e6ae      	b.n	8017db0 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8018052:	f8df a188 	ldr.w	sl, [pc, #392]	; 80181dc <http_send+0x46c>
 8018056:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 801805a:	f01c 0f01 	tst.w	ip, #1
 801805e:	d093      	beq.n	8017f88 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 8018060:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8018062:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8018064:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8018068:	f200 80e0 	bhi.w	801822c <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801806c:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 801806e:	4420      	add	r0, r4
 8018070:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8018074:	f89e 3000 	ldrb.w	r3, [lr]
 8018078:	780a      	ldrb	r2, [r1, #0]
 801807a:	429a      	cmp	r2, r3
 801807c:	f000 80cf 	beq.w	801821e <http_send+0x4ae>
              ssi->tag_index = 0;
 8018080:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018084:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8018088:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801808c:	e6da      	b.n	8017e44 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 801808e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80181dc <http_send+0x46c>
 8018092:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8018096:	f01c 0f01 	tst.w	ip, #1
 801809a:	f47f aed3 	bne.w	8017e44 <http_send+0xd4>
 801809e:	e6e6      	b.n	8017e6e <http_send+0xfe>
  if (hs->handle == NULL) {
 80180a0:	6948      	ldr	r0, [r1, #20]
 80180a2:	2800      	cmp	r0, #0
 80180a4:	d0b3      	beq.n	801800e <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 80180a6:	f7ff fae1 	bl	801766c <fs_bytes_left>
  if (bytes_left <= 0) {
 80180aa:	2800      	cmp	r0, #0
 80180ac:	ddaf      	ble.n	801800e <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80180ae:	4b45      	ldr	r3, [pc, #276]	; (80181c4 <http_send+0x454>)
 80180b0:	f240 429d 	movw	r2, #1181	; 0x49d
 80180b4:	4944      	ldr	r1, [pc, #272]	; (80181c8 <http_send+0x458>)
 80180b6:	4845      	ldr	r0, [pc, #276]	; (80181cc <http_send+0x45c>)
 80180b8:	f00c fd18 	bl	8024aec <iprintf>
  if (hs->ssi) {
 80180bc:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80180be:	2c00      	cmp	r4, #0
 80180c0:	f47f ae66 	bne.w	8017d90 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80180c4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80180c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80180cc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80180ce:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80180d0:	428a      	cmp	r2, r1
 80180d2:	bf88      	it	hi
 80180d4:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80180d6:	4623      	mov	r3, r4
 80180d8:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80180da:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80180de:	f10d 0216 	add.w	r2, sp, #22
 80180e2:	f7ff fac7 	bl	8017674 <http_write>
  if (err == ERR_OK) {
 80180e6:	2800      	cmp	r0, #0
 80180e8:	f43f af0e 	beq.w	8017f08 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80180ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 80180ee:	46a0      	mov	r8, r4
 80180f0:	e714      	b.n	8017f1c <http_send+0x1ac>
          ssi->parsed++;
 80180f2:	3101      	adds	r1, #1
          ssi->tag_index++;
 80180f4:	3001      	adds	r0, #1
          ssi->parsed++;
 80180f6:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 80180f8:	b280      	uxth	r0, r0
          ssi->parse_left--;
 80180fa:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 80180fc:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 80180fe:	3901      	subs	r1, #1
 8018100:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8018102:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8018106:	2900      	cmp	r1, #0
 8018108:	f47f ae52 	bne.w	8017db0 <http_send+0x40>
  ssi = hs->ssi;
 801810c:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8018110:	f1b9 0f00 	cmp.w	r9, #0
 8018114:	f000 8115 	beq.w	8018342 <http_send+0x5d2>
  if (httpd_ssi_handler
 8018118:	4b2d      	ldr	r3, [pc, #180]	; (80181d0 <http_send+0x460>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	9300      	str	r3, [sp, #0]
 801811e:	2b00      	cmp	r3, #0
 8018120:	f000 8093 	beq.w	801824a <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 8018124:	4b2b      	ldr	r3, [pc, #172]	; (80181d4 <http_send+0x464>)
 8018126:	681a      	ldr	r2, [r3, #0]
 8018128:	2a00      	cmp	r2, #0
 801812a:	f000 808e 	beq.w	801824a <http_send+0x4da>
 801812e:	4b2a      	ldr	r3, [pc, #168]	; (80181d8 <http_send+0x468>)
 8018130:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018132:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 8018134:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018136:	f340 8088 	ble.w	801824a <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801813a:	f109 0a16 	add.w	sl, r9, #22
 801813e:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018140:	2300      	movs	r3, #0
 8018142:	9503      	str	r5, [sp, #12]
 8018144:	460d      	mov	r5, r1
 8018146:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801814a:	4656      	mov	r6, sl
 801814c:	461c      	mov	r4, r3
 801814e:	4692      	mov	sl, r2
 8018150:	e003      	b.n	801815a <http_send+0x3ea>
 8018152:	3401      	adds	r4, #1
 8018154:	42a5      	cmp	r5, r4
 8018156:	f000 8105 	beq.w	8018364 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801815a:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 801815e:	4630      	mov	r0, r6
 8018160:	f7e8 f86e 	bl	8000240 <strcmp>
 8018164:	2800      	cmp	r0, #0
 8018166:	d1f4      	bne.n	8018152 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8018168:	4623      	mov	r3, r4
 801816a:	22fe      	movs	r2, #254	; 0xfe
 801816c:	f109 011f 	add.w	r1, r9, #31
 8018170:	9e02      	ldr	r6, [sp, #8]
 8018172:	4618      	mov	r0, r3
 8018174:	9b00      	ldr	r3, [sp, #0]
 8018176:	9c01      	ldr	r4, [sp, #4]
 8018178:	9d03      	ldr	r5, [sp, #12]
 801817a:	4798      	blx	r3
 801817c:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 8018180:	e0a6      	b.n	80182d0 <http_send+0x560>
            ssi->tag_index++;
 8018182:	f10c 0c01 	add.w	ip, ip, #1
 8018186:	f8a4 c010 	strh.w	ip, [r4, #16]
 801818a:	e72f      	b.n	8017fec <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 801818c:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801818e:	311f      	adds	r1, #31
 8018190:	f10d 0216 	add.w	r2, sp, #22
 8018194:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 8018196:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801819a:	4421      	add	r1, r4
 801819c:	4638      	mov	r0, r7
 801819e:	f7ff fa69 	bl	8017674 <http_write>
              ssi->tag_index += len;
 80181a2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 80181a6:	4606      	mov	r6, r0
 80181a8:	2800      	cmp	r0, #0
 80181aa:	f47f af4f 	bne.w	801804c <http_send+0x2dc>
              ssi->tag_index += len;
 80181ae:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 80181b0:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 80181b4:	4413      	add	r3, r2
 80181b6:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80181b8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80181bc:	e5f8      	b.n	8017db0 <http_send+0x40>
 80181be:	bf00      	nop
 80181c0:	080424a8 	.word	0x080424a8
 80181c4:	08042188 	.word	0x08042188
 80181c8:	08042268 	.word	0x08042268
 80181cc:	0802b818 	.word	0x0802b818
 80181d0:	2001e794 	.word	0x2001e794
 80181d4:	2001e798 	.word	0x2001e798
 80181d8:	2001e390 	.word	0x2001e390
 80181dc:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80181e0:	4b63      	ldr	r3, [pc, #396]	; (8018370 <http_send+0x600>)
 80181e2:	f240 52ac 	movw	r2, #1452	; 0x5ac
 80181e6:	4963      	ldr	r1, [pc, #396]	; (8018374 <http_send+0x604>)
 80181e8:	4863      	ldr	r0, [pc, #396]	; (8018378 <http_send+0x608>)
 80181ea:	f00c fc7f 	bl	8024aec <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80181ee:	6863      	ldr	r3, [r4, #4]
 80181f0:	69a9      	ldr	r1, [r5, #24]
 80181f2:	e5f9      	b.n	8017de8 <http_send+0x78>
      hs->file += len;
 80181f4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 80181f8:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 80181fc:	69ab      	ldr	r3, [r5, #24]
 80181fe:	4413      	add	r3, r2
 8018200:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8018202:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018204:	1a9b      	subs	r3, r3, r2
 8018206:	626b      	str	r3, [r5, #36]	; 0x24
 8018208:	e6a2      	b.n	8017f50 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 801820a:	6863      	ldr	r3, [r4, #4]
 801820c:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 801820e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018212:	e70c      	b.n	801802e <http_send+0x2be>
    return 0;
 8018214:	4688      	mov	r8, r1
}
 8018216:	4640      	mov	r0, r8
 8018218:	b007      	add	sp, #28
 801821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 801821e:	2301      	movs	r3, #1
 8018220:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018222:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8018226:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801822a:	e60b      	b.n	8017e44 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 801822c:	4b50      	ldr	r3, [pc, #320]	; (8018370 <http_send+0x600>)
 801822e:	f240 523a 	movw	r2, #1338	; 0x53a
 8018232:	4952      	ldr	r1, [pc, #328]	; (801837c <http_send+0x60c>)
 8018234:	4850      	ldr	r0, [pc, #320]	; (8018378 <http_send+0x608>)
 8018236:	f00c fc59 	bl	8024aec <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 801823a:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801823c:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 801823e:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8018242:	6821      	ldr	r1, [r4, #0]
 8018244:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8018248:	e710      	b.n	801806c <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801824a:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 801824e:	4650      	mov	r0, sl
 8018250:	f7e8 f800 	bl	8000254 <strlen>
 8018254:	28e4      	cmp	r0, #228	; 0xe4
 8018256:	d865      	bhi.n	8018324 <http_send+0x5b4>
 8018258:	2809      	cmp	r0, #9
 801825a:	bf28      	it	cs
 801825c:	2009      	movcs	r0, #9
 801825e:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8018262:	4686      	mov	lr, r0
 8018264:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018266:	f100 0319 	add.w	r3, r0, #25
 801826a:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 801826c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 801838c <http_send+0x61c>
 8018270:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018274:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8018278:	f8bc 3000 	ldrh.w	r3, [ip]
 801827c:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018280:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018284:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018288:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 801828a:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 801828e:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018290:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018294:	f00b fc66 	bl	8023b64 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018298:	4b39      	ldr	r3, [pc, #228]	; (8018380 <http_send+0x610>)
 801829a:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 801829c:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 801829e:	eb09 0e02 	add.w	lr, r9, r2
 80182a2:	6818      	ldr	r0, [r3, #0]
 80182a4:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80182a8:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80182aa:	799b      	ldrb	r3, [r3, #6]
 80182ac:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 80182b0:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80182b4:	f8ae c004 	strh.w	ip, [lr, #4]
 80182b8:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80182bc:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 80182c0:	f7e7 ffc8 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80182c4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 80182c8:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80182ca:	d232      	bcs.n	8018332 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 80182cc:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 80182d0:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 80182d2:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 80182d4:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 80182d6:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 80182da:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 80182dc:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 80182e0:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 80182e2:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 80182e4:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 80182e6:	d802      	bhi.n	80182ee <http_send+0x57e>
    if (len == 0) {
 80182e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80182ec:	e566      	b.n	8017dbc <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80182ee:	1a52      	subs	r2, r2, r1
 80182f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80182f4:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80182f6:	429a      	cmp	r2, r3
 80182f8:	bfa8      	it	ge
 80182fa:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80182fc:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80182fe:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018302:	f10d 0216 	add.w	r2, sp, #22
 8018306:	f7ff f9b5 	bl	8017674 <http_write>
              if (err == ERR_OK) {
 801830a:	4606      	mov	r6, r0
 801830c:	2800      	cmp	r0, #0
 801830e:	f47f ad7f 	bne.w	8017e10 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8018312:	6861      	ldr	r1, [r4, #4]
 8018314:	69ab      	ldr	r3, [r5, #24]
 8018316:	4299      	cmp	r1, r3
 8018318:	d91b      	bls.n	8018352 <http_send+0x5e2>
                hs->file += len;
 801831a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801831e:	4413      	add	r3, r2
 8018320:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8018322:	e68e      	b.n	8018042 <http_send+0x2d2>
 8018324:	233a      	movs	r3, #58	; 0x3a
 8018326:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8018328:	f04f 0e09 	mov.w	lr, #9
 801832c:	e9cd 3200 	strd	r3, r2, [sp]
 8018330:	e79c      	b.n	801826c <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8018332:	4b0f      	ldr	r3, [pc, #60]	; (8018370 <http_send+0x600>)
 8018334:	f240 323f 	movw	r2, #831	; 0x33f
 8018338:	4912      	ldr	r1, [pc, #72]	; (8018384 <http_send+0x614>)
 801833a:	480f      	ldr	r0, [pc, #60]	; (8018378 <http_send+0x608>)
 801833c:	f00c fbd6 	bl	8024aec <iprintf>
 8018340:	e7c4      	b.n	80182cc <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8018342:	4b0b      	ldr	r3, [pc, #44]	; (8018370 <http_send+0x600>)
 8018344:	f240 3206 	movw	r2, #774	; 0x306
 8018348:	490f      	ldr	r1, [pc, #60]	; (8018388 <http_send+0x618>)
 801834a:	480b      	ldr	r0, [pc, #44]	; (8018378 <http_send+0x608>)
 801834c:	f00c fbce 	bl	8024aec <iprintf>
 8018350:	e6e2      	b.n	8018118 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018352:	68a2      	ldr	r2, [r4, #8]
 8018354:	1a52      	subs	r2, r2, r1
 8018356:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801835a:	440a      	add	r2, r1
 801835c:	b292      	uxth	r2, r2
 801835e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018362:	e7dc      	b.n	801831e <http_send+0x5ae>
 8018364:	46b2      	mov	sl, r6
 8018366:	9c01      	ldr	r4, [sp, #4]
 8018368:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 801836c:	e76f      	b.n	801824e <http_send+0x4de>
 801836e:	bf00      	nop
 8018370:	08042188 	.word	0x08042188
 8018374:	080422f0 	.word	0x080422f0
 8018378:	0802b818 	.word	0x0802b818
 801837c:	080422a0 	.word	0x080422a0
 8018380:	080422d8 	.word	0x080422d8
 8018384:	080422e0 	.word	0x080422e0
 8018388:	080422b8 	.word	0x080422b8
 801838c:	080422c4 	.word	0x080422c4

08018390 <http_sent>:
{
 8018390:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8018392:	4603      	mov	r3, r0
 8018394:	b130      	cbz	r0, 80183a4 <http_sent+0x14>
  hs->retries = 0;
 8018396:	2200      	movs	r2, #0
 8018398:	4608      	mov	r0, r1
  http_send(pcb, hs);
 801839a:	4619      	mov	r1, r3
  hs->retries = 0;
 801839c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 80183a0:	f7ff fce6 	bl	8017d70 <http_send>
}
 80183a4:	2000      	movs	r0, #0
 80183a6:	bd08      	pop	{r3, pc}

080183a8 <http_poll>:
{
 80183a8:	b510      	push	{r4, lr}
 80183aa:	460c      	mov	r4, r1
  if (hs == NULL) {
 80183ac:	b1a8      	cbz	r0, 80183da <http_poll+0x32>
    hs->retries++;
 80183ae:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80183b2:	3301      	adds	r3, #1
 80183b4:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80183b6:	2b04      	cmp	r3, #4
    hs->retries++;
 80183b8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80183bc:	d019      	beq.n	80183f2 <http_poll+0x4a>
    if (hs->handle) {
 80183be:	6943      	ldr	r3, [r0, #20]
 80183c0:	b123      	cbz	r3, 80183cc <http_poll+0x24>
      if (http_send(pcb, hs)) {
 80183c2:	4601      	mov	r1, r0
 80183c4:	4620      	mov	r0, r4
 80183c6:	f7ff fcd3 	bl	8017d70 <http_send>
 80183ca:	b908      	cbnz	r0, 80183d0 <http_poll+0x28>
  return ERR_OK;
 80183cc:	2000      	movs	r0, #0
}
 80183ce:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 80183d0:	4620      	mov	r0, r4
 80183d2:	f006 fc75 	bl	801ecc0 <tcp_output>
  return ERR_OK;
 80183d6:	2000      	movs	r0, #0
 80183d8:	e7f9      	b.n	80183ce <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 80183da:	4601      	mov	r1, r0
 80183dc:	4620      	mov	r0, r4
 80183de:	f7ff fc23 	bl	8017c28 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 80183e2:	3001      	adds	r0, #1
 80183e4:	d1f2      	bne.n	80183cc <http_poll+0x24>
      altcp_abort(pcb);
 80183e6:	4620      	mov	r0, r4
 80183e8:	f003 fd3c 	bl	801be64 <tcp_abort>
      return ERR_ABRT;
 80183ec:	f06f 000c 	mvn.w	r0, #12
}
 80183f0:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 80183f2:	4601      	mov	r1, r0
 80183f4:	4620      	mov	r0, r4
 80183f6:	f7ff fc17 	bl	8017c28 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 80183fa:	2000      	movs	r0, #0
}
 80183fc:	bd10      	pop	{r4, pc}
 80183fe:	bf00      	nop

08018400 <http_recv>:
{
 8018400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018404:	4605      	mov	r5, r0
 8018406:	b08d      	sub	sp, #52	; 0x34
 8018408:	460e      	mov	r6, r1
 801840a:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 801840c:	b9ab      	cbnz	r3, 801843a <http_recv+0x3a>
 801840e:	fab2 f782 	clz	r7, r2
 8018412:	097f      	lsrs	r7, r7, #5
 8018414:	b1ca      	cbz	r2, 801844a <http_recv+0x4a>
 8018416:	b188      	cbz	r0, 801843c <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 8018418:	8911      	ldrh	r1, [r2, #8]
 801841a:	4630      	mov	r0, r6
 801841c:	f002 ff1e 	bl	801b25c <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8018420:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018422:	2b00      	cmp	r3, #0
 8018424:	f040 813c 	bne.w	80186a0 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 8018428:	696b      	ldr	r3, [r5, #20]
 801842a:	b1b3      	cbz	r3, 801845a <http_recv+0x5a>
      pbuf_free(p);
 801842c:	4620      	mov	r0, r4
 801842e:	f002 faa3 	bl	801a978 <pbuf_free>
}
 8018432:	2000      	movs	r0, #0
 8018434:	b00d      	add	sp, #52	; 0x34
 8018436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 801843a:	b132      	cbz	r2, 801844a <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 801843c:	4630      	mov	r0, r6
 801843e:	8921      	ldrh	r1, [r4, #8]
 8018440:	f002 ff0c 	bl	801b25c <tcp_recved>
      pbuf_free(p);
 8018444:	4620      	mov	r0, r4
 8018446:	f002 fa97 	bl	801a978 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 801844a:	4629      	mov	r1, r5
 801844c:	4630      	mov	r0, r6
 801844e:	f7ff fbeb 	bl	8017c28 <http_close_or_abort_conn.constprop.0>
}
 8018452:	2000      	movs	r0, #0
 8018454:	b00d      	add	sp, #52	; 0x34
 8018456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801845a:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 801845c:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801845e:	2b00      	cmp	r3, #0
 8018460:	f040 8173 	bne.w	801874a <http_recv+0x34a>
  if (hs->req == NULL) {
 8018464:	2800      	cmp	r0, #0
 8018466:	f000 8136 	beq.w	80186d6 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 801846a:	4621      	mov	r1, r4
 801846c:	f002 fab6 	bl	801a9dc <pbuf_cat>
  pbuf_ref(p);
 8018470:	4620      	mov	r0, r4
 8018472:	f002 fa9f 	bl	801a9b4 <pbuf_ref>
  if (hs->req->next != NULL) {
 8018476:	6a28      	ldr	r0, [r5, #32]
 8018478:	6803      	ldr	r3, [r0, #0]
 801847a:	2b00      	cmp	r3, #0
 801847c:	f000 812d 	beq.w	80186da <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018480:	8907      	ldrh	r7, [r0, #8]
 8018482:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8018486:	49bc      	ldr	r1, [pc, #752]	; (8018778 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018488:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 801848a:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801848c:	bf28      	it	cs
 801848e:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8018490:	2300      	movs	r3, #0
 8018492:	463a      	mov	r2, r7
 8018494:	f002 fb14 	bl	801aac0 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8018498:	2f06      	cmp	r7, #6
 801849a:	f240 80ef 	bls.w	801867c <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 801849e:	463a      	mov	r2, r7
 80184a0:	49b6      	ldr	r1, [pc, #728]	; (801877c <http_recv+0x37c>)
 80184a2:	4640      	mov	r0, r8
 80184a4:	f000 fa4e 	bl	8018944 <lwip_strnstr>
    if (crlf != NULL) {
 80184a8:	2800      	cmp	r0, #0
 80184aa:	f000 80e7 	beq.w	801867c <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 80184ae:	2204      	movs	r2, #4
 80184b0:	49b3      	ldr	r1, [pc, #716]	; (8018780 <http_recv+0x380>)
 80184b2:	4640      	mov	r0, r8
 80184b4:	f00d faf6 	bl	8025aa4 <strncmp>
 80184b8:	4682      	mov	sl, r0
 80184ba:	2800      	cmp	r0, #0
 80184bc:	f040 8118 	bne.w	80186f0 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80184c0:	1f3a      	subs	r2, r7, #4
 80184c2:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 80184c6:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80184ca:	49ae      	ldr	r1, [pc, #696]	; (8018784 <http_recv+0x384>)
 80184cc:	b292      	uxth	r2, r2
 80184ce:	4658      	mov	r0, fp
 80184d0:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80184d4:	f000 fa36 	bl	8018944 <lwip_strnstr>
      if (sp2 == NULL) {
 80184d8:	9a05      	ldr	r2, [sp, #20]
 80184da:	4681      	mov	r9, r0
 80184dc:	2800      	cmp	r0, #0
 80184de:	f000 8123 	beq.w	8018728 <http_recv+0x328>
      int is_09 = 0;
 80184e2:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 80184e4:	9305      	str	r3, [sp, #20]
 80184e6:	f1b9 0f00 	cmp.w	r9, #0
 80184ea:	f000 80c7 	beq.w	801867c <http_recv+0x27c>
 80184ee:	9b04      	ldr	r3, [sp, #16]
 80184f0:	4599      	cmp	r9, r3
 80184f2:	f240 80c3 	bls.w	801867c <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80184f6:	463a      	mov	r2, r7
 80184f8:	49a3      	ldr	r1, [pc, #652]	; (8018788 <http_recv+0x388>)
 80184fa:	4640      	mov	r0, r8
 80184fc:	f000 fa22 	bl	8018944 <lwip_strnstr>
 8018500:	2800      	cmp	r0, #0
 8018502:	f000 80bb 	beq.w	801867c <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8018506:	9b05      	ldr	r3, [sp, #20]
 8018508:	2b00      	cmp	r3, #0
 801850a:	f000 812b 	beq.w	8018764 <http_recv+0x364>
            hs->keepalive = 0;
 801850e:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8018510:	eba9 020b 	sub.w	r2, r9, fp
 8018514:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 8018518:	2100      	movs	r1, #0
 801851a:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 801851c:	b292      	uxth	r2, r2
          *sp1 = 0;
 801851e:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8018520:	f80b 1002 	strb.w	r1, [fp, r2]
 8018524:	445a      	add	r2, fp
 8018526:	9206      	str	r2, [sp, #24]
          if (is_post) {
 8018528:	f1ba 0f00 	cmp.w	sl, #0
 801852c:	f000 8113 	beq.w	8018756 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8018530:	f109 0301 	add.w	r3, r9, #1
 8018534:	4994      	ldr	r1, [pc, #592]	; (8018788 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 8018536:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801853a:	eba3 0208 	sub.w	r2, r3, r8
 801853e:	4618      	mov	r0, r3
 8018540:	9305      	str	r3, [sp, #20]
 8018542:	1aba      	subs	r2, r7, r2
 8018544:	f000 f9fe 	bl	8018944 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8018548:	9008      	str	r0, [sp, #32]
 801854a:	2800      	cmp	r0, #0
 801854c:	f000 8168 	beq.w	8018820 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8018550:	9b05      	ldr	r3, [sp, #20]
 8018552:	498e      	ldr	r1, [pc, #568]	; (801878c <http_recv+0x38c>)
 8018554:	1ac2      	subs	r2, r0, r3
 8018556:	4618      	mov	r0, r3
 8018558:	f000 f9f4 	bl	8018944 <lwip_strnstr>
    if (scontent_len != NULL) {
 801855c:	4603      	mov	r3, r0
 801855e:	9009      	str	r0, [sp, #36]	; 0x24
 8018560:	2800      	cmp	r0, #0
 8018562:	f000 812f 	beq.w	80187c4 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8018566:	3310      	adds	r3, #16
 8018568:	220a      	movs	r2, #10
 801856a:	4984      	ldr	r1, [pc, #528]	; (801877c <http_recv+0x37c>)
 801856c:	4618      	mov	r0, r3
 801856e:	9307      	str	r3, [sp, #28]
 8018570:	f000 f9e8 	bl	8018944 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8018574:	2800      	cmp	r0, #0
 8018576:	f000 8125 	beq.w	80187c4 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 801857a:	9b07      	ldr	r3, [sp, #28]
 801857c:	4618      	mov	r0, r3
 801857e:	f00b f893 	bl	80236a8 <atoi>
        if (content_len == 0) {
 8018582:	1e02      	subs	r2, r0, #0
 8018584:	9207      	str	r2, [sp, #28]
 8018586:	f040 811b 	bne.w	80187c0 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 801858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801858c:	7c1b      	ldrb	r3, [r3, #16]
 801858e:	2b30      	cmp	r3, #48	; 0x30
 8018590:	f040 8118 	bne.w	80187c4 <http_recv+0x3c4>
 8018594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018596:	7c5b      	ldrb	r3, [r3, #17]
 8018598:	2b0d      	cmp	r3, #13
 801859a:	f040 8113 	bne.w	80187c4 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801859e:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 80185a0:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80185a2:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80185a4:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80185a6:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 80185a8:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 80187a4 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 80185ac:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80185b0:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80185b4:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 80185b6:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80185b8:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80185ba:	9a05      	ldr	r2, [sp, #20]
 80185bc:	bfb4      	ite	lt
 80185be:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80185c0:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80185c4:	429f      	cmp	r7, r3
 80185c6:	bfa8      	it	ge
 80185c8:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80185ca:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 80185cc:	2700      	movs	r7, #0
 80185ce:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 80185d2:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80185d4:	9807      	ldr	r0, [sp, #28]
 80185d6:	f8cd b004 	str.w	fp, [sp, #4]
 80185da:	9000      	str	r0, [sp, #0]
 80185dc:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 80185e0:	9003      	str	r0, [sp, #12]
 80185e2:	203f      	movs	r0, #63	; 0x3f
 80185e4:	9002      	str	r0, [sp, #8]
 80185e6:	4628      	mov	r0, r5
 80185e8:	f7ee fc3e 	bl	8006e68 <httpd_post_begin>
          if (err == ERR_OK) {
 80185ec:	2800      	cmp	r0, #0
 80185ee:	f040 80f7 	bne.w	80187e0 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 80185f2:	9807      	ldr	r0, [sp, #28]
 80185f4:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 80185f6:	f1ba 0f00 	cmp.w	sl, #0
 80185fa:	f000 80d5 	beq.w	80187a8 <http_recv+0x3a8>
 80185fe:	4652      	mov	r2, sl
 8018600:	e005      	b.n	801860e <http_recv+0x20e>
              q = q->next;
 8018602:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8018604:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8018608:	2a00      	cmp	r2, #0
 801860a:	f000 80cd 	beq.w	80187a8 <http_recv+0x3a8>
 801860e:	8953      	ldrh	r3, [r2, #10]
 8018610:	4543      	cmp	r3, r8
              start_offset -= q->len;
 8018612:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8018616:	d9f4      	bls.n	8018602 <http_recv+0x202>
 8018618:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 801861a:	4641      	mov	r1, r8
 801861c:	4610      	mov	r0, r2
 801861e:	f002 f93b 	bl	801a898 <pbuf_remove_header>
              pbuf_ref(q);
 8018622:	4650      	mov	r0, sl
 8018624:	f002 f9c6 	bl	801a9b4 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8018628:	4651      	mov	r1, sl
 801862a:	4628      	mov	r0, r5
 801862c:	f7ff fa98 	bl	8017b60 <http_post_rxpbuf>
 8018630:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8018632:	2f00      	cmp	r7, #0
 8018634:	f000 80ba 	beq.w	80187ac <http_recv+0x3ac>
              *sp1 = ' ';
 8018638:	2320      	movs	r3, #32
 801863a:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 801863c:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8018640:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8018642:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8018644:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8018648:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801864a:	d022      	beq.n	8018692 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801864c:	2f00      	cmp	r7, #0
 801864e:	d048      	beq.n	80186e2 <http_recv+0x2e2>
 8018650:	1d7a      	adds	r2, r7, #5
 8018652:	f43f aeeb 	beq.w	801842c <http_recv+0x2c>
 8018656:	f027 0308 	bic.w	r3, r7, #8
 801865a:	b25b      	sxtb	r3, r3
 801865c:	3310      	adds	r3, #16
 801865e:	d12e      	bne.n	80186be <http_recv+0x2be>
        if (hs->req != NULL) {
 8018660:	6a28      	ldr	r0, [r5, #32]
 8018662:	b3a0      	cbz	r0, 80186ce <http_recv+0x2ce>
          pbuf_free(hs->req);
 8018664:	f002 f988 	bl	801a978 <pbuf_free>
          hs->req = NULL;
 8018668:	2300      	movs	r3, #0
 801866a:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 801866c:	4620      	mov	r0, r4
 801866e:	f002 f983 	bl	801a978 <pbuf_free>
      if (parsed == ERR_OK) {
 8018672:	b1df      	cbz	r7, 80186ac <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 8018674:	3710      	adds	r7, #16
 8018676:	f43f aee8 	beq.w	801844a <http_recv+0x4a>
 801867a:	e6ea      	b.n	8018452 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 801867c:	6a28      	ldr	r0, [r5, #32]
 801867e:	f002 f98f 	bl	801a9a0 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8018682:	6a2b      	ldr	r3, [r5, #32]
 8018684:	891b      	ldrh	r3, [r3, #8]
 8018686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801868a:	d202      	bcs.n	8018692 <http_recv+0x292>
 801868c:	2805      	cmp	r0, #5
 801868e:	f67f aecd 	bls.w	801842c <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 8018692:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8018696:	4628      	mov	r0, r5
 8018698:	f7ff fa88 	bl	8017bac <http_find_error_file>
 801869c:	4607      	mov	r7, r0
 801869e:	e7d5      	b.n	801864c <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 80186a0:	4621      	mov	r1, r4
 80186a2:	4628      	mov	r0, r5
    hs->retries = 0;
 80186a4:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 80186a8:	f7ff fa5a 	bl	8017b60 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 80186ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	f47f aecf 	bne.w	8018452 <http_recv+0x52>
      http_send(pcb, hs);
 80186b4:	4629      	mov	r1, r5
 80186b6:	4630      	mov	r0, r6
 80186b8:	f7ff fb5a 	bl	8017d70 <http_send>
 80186bc:	e6c9      	b.n	8018452 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80186be:	4b34      	ldr	r3, [pc, #208]	; (8018790 <http_recv+0x390>)
 80186c0:	f640 2204 	movw	r2, #2564	; 0xa04
 80186c4:	4933      	ldr	r1, [pc, #204]	; (8018794 <http_recv+0x394>)
 80186c6:	4834      	ldr	r0, [pc, #208]	; (8018798 <http_recv+0x398>)
 80186c8:	f00c fa10 	bl	8024aec <iprintf>
 80186cc:	e7c8      	b.n	8018660 <http_recv+0x260>
      pbuf_free(p);
 80186ce:	4620      	mov	r0, r4
 80186d0:	f002 f952 	bl	801a978 <pbuf_free>
      if (parsed == ERR_OK) {
 80186d4:	e7ce      	b.n	8018674 <http_recv+0x274>
    hs->req = p;
 80186d6:	622c      	str	r4, [r5, #32]
 80186d8:	e6ca      	b.n	8018470 <http_recv+0x70>
    data = (char *)p->payload;
 80186da:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 80186de:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 80186e0:	e6da      	b.n	8018498 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 80186e2:	1d7b      	adds	r3, r7, #5
 80186e4:	f43f aea2 	beq.w	801842c <http_recv+0x2c>
        if (hs->req != NULL) {
 80186e8:	6a28      	ldr	r0, [r5, #32]
 80186ea:	2800      	cmp	r0, #0
 80186ec:	d0be      	beq.n	801866c <http_recv+0x26c>
 80186ee:	e7b9      	b.n	8018664 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 80186f0:	2205      	movs	r2, #5
 80186f2:	492a      	ldr	r1, [pc, #168]	; (801879c <http_recv+0x39c>)
 80186f4:	4640      	mov	r0, r8
 80186f6:	f00d f9d5 	bl	8025aa4 <strncmp>
 80186fa:	9005      	str	r0, [sp, #20]
 80186fc:	b9d8      	cbnz	r0, 8018736 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80186fe:	f1a7 0a05 	sub.w	sl, r7, #5
 8018702:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 8018706:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801870a:	491e      	ldr	r1, [pc, #120]	; (8018784 <http_recv+0x384>)
 801870c:	fa1f fa8a 	uxth.w	sl, sl
 8018710:	4658      	mov	r0, fp
        sp1 = data + 4;
 8018712:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018714:	4652      	mov	r2, sl
 8018716:	f000 f915 	bl	8018944 <lwip_strnstr>
      if (sp2 == NULL) {
 801871a:	4681      	mov	r9, r0
 801871c:	2800      	cmp	r0, #0
 801871e:	d059      	beq.n	80187d4 <http_recv+0x3d4>
        is_post = 1;
 8018720:	f04f 0a01 	mov.w	sl, #1
 8018724:	9b05      	ldr	r3, [sp, #20]
 8018726:	e6dd      	b.n	80184e4 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018728:	4914      	ldr	r1, [pc, #80]	; (801877c <http_recv+0x37c>)
 801872a:	4658      	mov	r0, fp
 801872c:	f000 f90a 	bl	8018944 <lwip_strnstr>
        is_09 = 1;
 8018730:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018732:	4681      	mov	r9, r0
        if (is_post) {
 8018734:	e6d6      	b.n	80184e4 <http_recv+0xe4>
        data[4] = 0;
 8018736:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8018738:	f240 11f5 	movw	r1, #501	; 0x1f5
 801873c:	4628      	mov	r0, r5
        data[4] = 0;
 801873e:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8018742:	f7ff fa33 	bl	8017bac <http_find_error_file>
 8018746:	4607      	mov	r7, r0
 8018748:	e780      	b.n	801864c <http_recv+0x24c>
        if (hs->req != NULL) {
 801874a:	2800      	cmp	r0, #0
 801874c:	f43f ae6e 	beq.w	801842c <http_recv+0x2c>
 8018750:	f06f 0707 	mvn.w	r7, #7
 8018754:	e786      	b.n	8018664 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 8018756:	461a      	mov	r2, r3
 8018758:	4659      	mov	r1, fp
 801875a:	4628      	mov	r0, r5
 801875c:	f7ff f910 	bl	8017980 <http_find_file>
 8018760:	4607      	mov	r7, r0
 8018762:	e773      	b.n	801864c <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8018764:	463a      	mov	r2, r7
 8018766:	490e      	ldr	r1, [pc, #56]	; (80187a0 <http_recv+0x3a0>)
 8018768:	4640      	mov	r0, r8
 801876a:	f000 f8eb 	bl	8018944 <lwip_strnstr>
 801876e:	9b05      	ldr	r3, [sp, #20]
 8018770:	2800      	cmp	r0, #0
 8018772:	d047      	beq.n	8018804 <http_recv+0x404>
            hs->keepalive = 1;
 8018774:	2001      	movs	r0, #1
 8018776:	e6cb      	b.n	8018510 <http_recv+0x110>
 8018778:	2001e394 	.word	0x2001e394
 801877c:	0802a9d0 	.word	0x0802a9d0
 8018780:	08042308 	.word	0x08042308
 8018784:	0802b3e8 	.word	0x0802b3e8
 8018788:	0802945c 	.word	0x0802945c
 801878c:	08042348 	.word	0x08042348
 8018790:	08042188 	.word	0x08042188
 8018794:	0804235c 	.word	0x0804235c
 8018798:	0802b818 	.word	0x0802b818
 801879c:	08042310 	.word	0x08042310
 80187a0:	08042318 	.word	0x08042318
 80187a4:	2001e350 	.word	0x2001e350
            } else if (hs->post_content_len_left == 0) {
 80187a8:	9b07      	ldr	r3, [sp, #28]
 80187aa:	b303      	cbz	r3, 80187ee <http_recv+0x3ee>
        if (hs->req != NULL) {
 80187ac:	6a28      	ldr	r0, [r5, #32]
 80187ae:	b398      	cbz	r0, 8018818 <http_recv+0x418>
          pbuf_free(hs->req);
 80187b0:	f002 f8e2 	bl	801a978 <pbuf_free>
          hs->req = NULL;
 80187b4:	2300      	movs	r3, #0
      pbuf_free(p);
 80187b6:	4620      	mov	r0, r4
          hs->req = NULL;
 80187b8:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 80187ba:	f002 f8dd 	bl	801a978 <pbuf_free>
      if (parsed == ERR_OK) {
 80187be:	e775      	b.n	80186ac <http_recv+0x2ac>
        if (content_len >= 0) {
 80187c0:	f6bf aeed 	bge.w	801859e <http_recv+0x19e>
              *sp1 = ' ';
 80187c4:	2320      	movs	r3, #32
 80187c6:	9a04      	ldr	r2, [sp, #16]
 80187c8:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80187ca:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 80187cc:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 80187d0:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 80187d2:	e75e      	b.n	8018692 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80187d4:	4652      	mov	r2, sl
 80187d6:	4658      	mov	r0, fp
 80187d8:	4915      	ldr	r1, [pc, #84]	; (8018830 <http_recv+0x430>)
 80187da:	f000 f8b3 	bl	8018944 <lwip_strnstr>
        if (is_post) {
 80187de:	e758      	b.n	8018692 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 80187e0:	463a      	mov	r2, r7
 80187e2:	4659      	mov	r1, fp
 80187e4:	4628      	mov	r0, r5
 80187e6:	f7ff f8cb 	bl	8017980 <http_find_file>
 80187ea:	4607      	mov	r7, r0
 80187ec:	e721      	b.n	8018632 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 80187ee:	9907      	ldr	r1, [sp, #28]
 80187f0:	2241      	movs	r2, #65	; 0x41
 80187f2:	4608      	mov	r0, r1
 80187f4:	f001 ff0a 	bl	801a60c <pbuf_alloc>
 80187f8:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 80187fa:	4628      	mov	r0, r5
 80187fc:	f7ff f9b0 	bl	8017b60 <http_post_rxpbuf>
 8018800:	4607      	mov	r7, r0
 8018802:	e716      	b.n	8018632 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 8018804:	463a      	mov	r2, r7
 8018806:	490b      	ldr	r1, [pc, #44]	; (8018834 <http_recv+0x434>)
 8018808:	4640      	mov	r0, r8
 801880a:	f000 f89b 	bl	8018944 <lwip_strnstr>
            hs->keepalive = 1;
 801880e:	3800      	subs	r0, #0
 8018810:	9b05      	ldr	r3, [sp, #20]
 8018812:	bf18      	it	ne
 8018814:	2001      	movne	r0, #1
 8018816:	e67b      	b.n	8018510 <http_recv+0x110>
      pbuf_free(p);
 8018818:	4620      	mov	r0, r4
 801881a:	f002 f8ad 	bl	801a978 <pbuf_free>
      if (parsed == ERR_OK) {
 801881e:	e745      	b.n	80186ac <http_recv+0x2ac>
              *sp1 = ' ';
 8018820:	2320      	movs	r3, #32
 8018822:	9a04      	ldr	r2, [sp, #16]
 8018824:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8018826:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8018828:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801882c:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 801882e:	e5fd      	b.n	801842c <http_recv+0x2c>
 8018830:	0802a9d0 	.word	0x0802a9d0
 8018834:	08042330 	.word	0x08042330

08018838 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8018838:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801883a:	202e      	movs	r0, #46	; 0x2e
 801883c:	f003 fc36 	bl	801c0ac <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8018840:	b358      	cbz	r0, 801889a <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8018842:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8018844:	2101      	movs	r1, #1
 8018846:	f002 fe13 	bl	801b470 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801884a:	2250      	movs	r2, #80	; 0x50
 801884c:	4917      	ldr	r1, [pc, #92]	; (80188ac <httpd_init+0x74>)
 801884e:	4620      	mov	r0, r4
 8018850:	f002 fbe2 	bl	801b018 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8018854:	b958      	cbnz	r0, 801886e <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 8018856:	4620      	mov	r0, r4
 8018858:	21ff      	movs	r1, #255	; 0xff
 801885a:	f002 fcbf 	bl	801b1dc <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801885e:	4604      	mov	r4, r0
 8018860:	b198      	cbz	r0, 801888a <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 8018862:	4620      	mov	r0, r4
 8018864:	4912      	ldr	r1, [pc, #72]	; (80188b0 <httpd_init+0x78>)
}
 8018866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 801886a:	f002 be8f 	b.w	801b58c <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801886e:	4b11      	ldr	r3, [pc, #68]	; (80188b4 <httpd_init+0x7c>)
 8018870:	f640 2257 	movw	r2, #2647	; 0xa57
 8018874:	4910      	ldr	r1, [pc, #64]	; (80188b8 <httpd_init+0x80>)
 8018876:	4811      	ldr	r0, [pc, #68]	; (80188bc <httpd_init+0x84>)
 8018878:	f00c f938 	bl	8024aec <iprintf>
    pcb = altcp_listen(pcb);
 801887c:	4620      	mov	r0, r4
 801887e:	21ff      	movs	r1, #255	; 0xff
 8018880:	f002 fcac 	bl	801b1dc <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8018884:	4604      	mov	r4, r0
 8018886:	2800      	cmp	r0, #0
 8018888:	d1eb      	bne.n	8018862 <httpd_init+0x2a>
 801888a:	4b0a      	ldr	r3, [pc, #40]	; (80188b4 <httpd_init+0x7c>)
 801888c:	f640 2259 	movw	r2, #2649	; 0xa59
 8018890:	490b      	ldr	r1, [pc, #44]	; (80188c0 <httpd_init+0x88>)
 8018892:	480a      	ldr	r0, [pc, #40]	; (80188bc <httpd_init+0x84>)
 8018894:	f00c f92a 	bl	8024aec <iprintf>
 8018898:	e7e3      	b.n	8018862 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801889a:	4b06      	ldr	r3, [pc, #24]	; (80188b4 <httpd_init+0x7c>)
 801889c:	f640 2272 	movw	r2, #2674	; 0xa72
 80188a0:	4908      	ldr	r1, [pc, #32]	; (80188c4 <httpd_init+0x8c>)
 80188a2:	4806      	ldr	r0, [pc, #24]	; (80188bc <httpd_init+0x84>)
}
 80188a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80188a8:	f00c b920 	b.w	8024aec <iprintf>
 80188ac:	08044cb8 	.word	0x08044cb8
 80188b0:	08017729 	.word	0x08017729
 80188b4:	08042188 	.word	0x08042188
 80188b8:	080423a4 	.word	0x080423a4
 80188bc:	0802b818 	.word	0x0802b818
 80188c0:	080423c0 	.word	0x080423c0
 80188c4:	08042388 	.word	0x08042388

080188c8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 80188c8:	b570      	push	{r4, r5, r6, lr}
 80188ca:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80188cc:	4606      	mov	r6, r0
{
 80188ce:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80188d0:	b1c8      	cbz	r0, 8018906 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 80188d2:	4b11      	ldr	r3, [pc, #68]	; (8018918 <http_set_ssi_handler+0x50>)
 80188d4:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 80188d6:	b175      	cbz	r5, 80188f6 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80188d8:	2c00      	cmp	r4, #0
 80188da:	dd04      	ble.n	80188e6 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 80188dc:	4a0f      	ldr	r2, [pc, #60]	; (801891c <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 80188de:	4b10      	ldr	r3, [pc, #64]	; (8018920 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 80188e0:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 80188e2:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 80188e4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80188e6:	4b0f      	ldr	r3, [pc, #60]	; (8018924 <http_set_ssi_handler+0x5c>)
 80188e8:	f640 229f 	movw	r2, #2719	; 0xa9f
 80188ec:	490e      	ldr	r1, [pc, #56]	; (8018928 <http_set_ssi_handler+0x60>)
 80188ee:	480f      	ldr	r0, [pc, #60]	; (801892c <http_set_ssi_handler+0x64>)
 80188f0:	f00c f8fc 	bl	8024aec <iprintf>
 80188f4:	e7f2      	b.n	80188dc <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 80188f6:	4b0b      	ldr	r3, [pc, #44]	; (8018924 <http_set_ssi_handler+0x5c>)
 80188f8:	f640 229e 	movw	r2, #2718	; 0xa9e
 80188fc:	490c      	ldr	r1, [pc, #48]	; (8018930 <http_set_ssi_handler+0x68>)
 80188fe:	480b      	ldr	r0, [pc, #44]	; (801892c <http_set_ssi_handler+0x64>)
 8018900:	f00c f8f4 	bl	8024aec <iprintf>
 8018904:	e7e8      	b.n	80188d8 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8018906:	4b07      	ldr	r3, [pc, #28]	; (8018924 <http_set_ssi_handler+0x5c>)
 8018908:	f640 2297 	movw	r2, #2711	; 0xa97
 801890c:	4909      	ldr	r1, [pc, #36]	; (8018934 <http_set_ssi_handler+0x6c>)
 801890e:	4807      	ldr	r0, [pc, #28]	; (801892c <http_set_ssi_handler+0x64>)
 8018910:	f00c f8ec 	bl	8024aec <iprintf>
 8018914:	e7dd      	b.n	80188d2 <http_set_ssi_handler+0xa>
 8018916:	bf00      	nop
 8018918:	2001e794 	.word	0x2001e794
 801891c:	2001e798 	.word	0x2001e798
 8018920:	2001e390 	.word	0x2001e390
 8018924:	08042188 	.word	0x08042188
 8018928:	08042408 	.word	0x08042408
 801892c:	0802b818 	.word	0x0802b818
 8018930:	080423f8 	.word	0x080423f8
 8018934:	080423e0 	.word	0x080423e0

08018938 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8018938:	ba40      	rev16	r0, r0
}
 801893a:	b280      	uxth	r0, r0
 801893c:	4770      	bx	lr
 801893e:	bf00      	nop

08018940 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8018940:	ba00      	rev	r0, r0
 8018942:	4770      	bx	lr

08018944 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8018944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018948:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 801894a:	4608      	mov	r0, r1
{
 801894c:	4688      	mov	r8, r1
 801894e:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8018950:	f7e7 fc80 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8018954:	b1c0      	cbz	r0, 8018988 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8018956:	4605      	mov	r5, r0
 8018958:	7820      	ldrb	r0, [r4, #0]
 801895a:	b1b0      	cbz	r0, 801898a <lwip_strnstr+0x46>
 801895c:	4426      	add	r6, r4
 801895e:	1962      	adds	r2, r4, r5
 8018960:	4296      	cmp	r6, r2
 8018962:	d314      	bcc.n	801898e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8018964:	f898 7000 	ldrb.w	r7, [r8]
 8018968:	e005      	b.n	8018976 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801896a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801896e:	1962      	adds	r2, r4, r5
 8018970:	b158      	cbz	r0, 801898a <lwip_strnstr+0x46>
 8018972:	4296      	cmp	r6, r2
 8018974:	d30b      	bcc.n	801898e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8018976:	4287      	cmp	r7, r0
 8018978:	d1f7      	bne.n	801896a <lwip_strnstr+0x26>
 801897a:	4620      	mov	r0, r4
 801897c:	462a      	mov	r2, r5
 801897e:	4641      	mov	r1, r8
 8018980:	f00d f890 	bl	8025aa4 <strncmp>
 8018984:	2800      	cmp	r0, #0
 8018986:	d1f0      	bne.n	801896a <lwip_strnstr+0x26>
 8018988:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 801898a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 801898e:	2000      	movs	r0, #0
}
 8018990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018994 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8018994:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8018998:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801899c:	4293      	cmp	r3, r2
 801899e:	d01c      	beq.n	80189da <lwip_stricmp+0x46>
 80189a0:	f043 0c20 	orr.w	ip, r3, #32
{
 80189a4:	b500      	push	{lr}
 80189a6:	f042 0e20 	orr.w	lr, r2, #32
 80189aa:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80189ae:	2a19      	cmp	r2, #25
 80189b0:	d810      	bhi.n	80189d4 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 80189b2:	45f4      	cmp	ip, lr
 80189b4:	d10e      	bne.n	80189d4 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 80189b6:	b1a3      	cbz	r3, 80189e2 <lwip_stricmp+0x4e>
    c1 = *str1++;
 80189b8:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 80189bc:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 80189c0:	4293      	cmp	r3, r2
 80189c2:	d0f8      	beq.n	80189b6 <lwip_stricmp+0x22>
 80189c4:	f043 0c20 	orr.w	ip, r3, #32
 80189c8:	f042 0e20 	orr.w	lr, r2, #32
 80189cc:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80189d0:	2a19      	cmp	r2, #25
 80189d2:	d9ee      	bls.n	80189b2 <lwip_stricmp+0x1e>
        return 1;
 80189d4:	2001      	movs	r0, #1
  return 0;
}
 80189d6:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d1da      	bne.n	8018994 <lwip_stricmp>
  return 0;
 80189de:	4618      	mov	r0, r3
}
 80189e0:	4770      	bx	lr
  return 0;
 80189e2:	4618      	mov	r0, r3
}
 80189e4:	f85d fb04 	ldr.w	pc, [sp], #4

080189e8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 80189e8:	4684      	mov	ip, r0
 80189ea:	b570      	push	{r4, r5, r6, lr}
 80189ec:	e004      	b.n	80189f8 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 80189ee:	42b4      	cmp	r4, r6
 80189f0:	d113      	bne.n	8018a1a <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 80189f2:	42e8      	cmn	r0, r5
 80189f4:	d013      	beq.n	8018a1e <lwip_strnicmp+0x36>
 80189f6:	b193      	cbz	r3, 8018a1e <lwip_strnicmp+0x36>
    c1 = *str1++;
 80189f8:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 80189fc:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 8018a00:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018a04:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 8018a08:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 8018a0a:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018a0e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 8018a12:	d0ee      	beq.n	80189f2 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018a14:	f1be 0f19 	cmp.w	lr, #25
 8018a18:	d9e9      	bls.n	80189ee <lwip_strnicmp+0x6>
        return 1;
 8018a1a:	2001      	movs	r0, #1
  return 0;
}
 8018a1c:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 8018a1e:	2000      	movs	r0, #0
}
 8018a20:	bd70      	pop	{r4, r5, r6, pc}
 8018a22:	bf00      	nop

08018a24 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8018a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a28:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018a2a:	4f24      	ldr	r7, [pc, #144]	; (8018abc <dns_call_found+0x98>)
 8018a2c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8018a30:	4c23      	ldr	r4, [pc, #140]	; (8018ac0 <dns_call_found+0x9c>)
{
 8018a32:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018a34:	012e      	lsls	r6, r5, #4
 8018a36:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 8018a3a:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 8018a3e:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018a42:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8018a46:	6823      	ldr	r3, [r4, #0]
 8018a48:	b143      	cbz	r3, 8018a5c <dns_call_found+0x38>
 8018a4a:	7a22      	ldrb	r2, [r4, #8]
 8018a4c:	42aa      	cmp	r2, r5
 8018a4e:	d105      	bne.n	8018a5c <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018a50:	6862      	ldr	r2, [r4, #4]
 8018a52:	4651      	mov	r1, sl
 8018a54:	4640      	mov	r0, r8
 8018a56:	4798      	blx	r3
      dns_requests[i].found = NULL;
 8018a58:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8018a5c:	340c      	adds	r4, #12
 8018a5e:	454c      	cmp	r4, r9
 8018a60:	d1f1      	bne.n	8018a46 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8018a62:	1973      	adds	r3, r6, r5
 8018a64:	2400      	movs	r4, #0
 8018a66:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8018a6a:	4f14      	ldr	r7, [pc, #80]	; (8018abc <dns_call_found+0x98>)
 8018a6c:	7bd9      	ldrb	r1, [r3, #15]
 8018a6e:	463a      	mov	r2, r7
    if (i == idx) {
 8018a70:	b2e3      	uxtb	r3, r4
 8018a72:	3401      	adds	r4, #1
 8018a74:	429d      	cmp	r5, r3
 8018a76:	d002      	beq.n	8018a7e <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8018a78:	7a93      	ldrb	r3, [r2, #10]
 8018a7a:	2b02      	cmp	r3, #2
 8018a7c:	d015      	beq.n	8018aaa <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8018a7e:	2c04      	cmp	r4, #4
 8018a80:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8018a84:	d1f4      	bne.n	8018a70 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8018a86:	2903      	cmp	r1, #3
 8018a88:	d80d      	bhi.n	8018aa6 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018a8a:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8018a8c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8018ac4 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018a90:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8018a94:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8018a98:	f007 f836 	bl	801fb08 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8018aa0:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018aa2:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8018aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8018aaa:	7bd3      	ldrb	r3, [r2, #15]
 8018aac:	428b      	cmp	r3, r1
 8018aae:	d1e6      	bne.n	8018a7e <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8018ab0:	4435      	add	r5, r6
 8018ab2:	2304      	movs	r3, #4
 8018ab4:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8018ab8:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8018aba:	e7f4      	b.n	8018aa6 <dns_call_found+0x82>
 8018abc:	2001e7ec 	.word	0x2001e7ec
 8018ac0:	2001e7b0 	.word	0x2001e7b0
 8018ac4:	2001e7a0 	.word	0x2001e7a0

08018ac8 <dns_send.isra.0>:
dns_send(u8_t idx)
 8018ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018acc:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 8018ace:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018ad0:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 8018ad4:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018ad6:	9301      	str	r3, [sp, #4]
 8018ad8:	4b56      	ldr	r3, [pc, #344]	; (8018c34 <dns_send.isra.0+0x16c>)
 8018ada:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8018ade:	7ae3      	ldrb	r3, [r4, #11]
 8018ae0:	2b01      	cmp	r3, #1
 8018ae2:	d907      	bls.n	8018af4 <dns_send.isra.0+0x2c>
 8018ae4:	4b54      	ldr	r3, [pc, #336]	; (8018c38 <dns_send.isra.0+0x170>)
 8018ae6:	f240 22fa 	movw	r2, #762	; 0x2fa
 8018aea:	4954      	ldr	r1, [pc, #336]	; (8018c3c <dns_send.isra.0+0x174>)
 8018aec:	4854      	ldr	r0, [pc, #336]	; (8018c40 <dns_send.isra.0+0x178>)
 8018aee:	f00b fffd 	bl	8024aec <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8018af2:	7ae3      	ldrb	r3, [r4, #11]
 8018af4:	4a53      	ldr	r2, [pc, #332]	; (8018c44 <dns_send.isra.0+0x17c>)
 8018af6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018afa:	2c00      	cmp	r4, #0
 8018afc:	f000 808b 	beq.w	8018c16 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8018b00:	9b01      	ldr	r3, [sp, #4]
 8018b02:	4e4c      	ldr	r6, [pc, #304]	; (8018c34 <dns_send.isra.0+0x16c>)
 8018b04:	eb03 0409 	add.w	r4, r3, r9
 8018b08:	0124      	lsls	r4, r4, #4
 8018b0a:	f104 0510 	add.w	r5, r4, #16
 8018b0e:	4435      	add	r5, r6
 8018b10:	4628      	mov	r0, r5
 8018b12:	f7e7 fb9f 	bl	8000254 <strlen>
 8018b16:	3012      	adds	r0, #18
 8018b18:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018b1c:	b281      	uxth	r1, r0
 8018b1e:	2036      	movs	r0, #54	; 0x36
 8018b20:	f001 fd74 	bl	801a60c <pbuf_alloc>
  if (p != NULL) {
 8018b24:	4680      	mov	r8, r0
 8018b26:	2800      	cmp	r0, #0
 8018b28:	d06d      	beq.n	8018c06 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 8018b2a:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8018b2c:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 8018b2e:	260c      	movs	r6, #12
    --hostname;
 8018b30:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 8018b32:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 8018b34:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8018b38:	9305      	str	r3, [sp, #20]
 8018b3a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 8018b3e:	f7ff fefb 	bl	8018938 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 8018b42:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 8018b44:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8018b48:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 8018b4a:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 8018b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8018b52:	4632      	mov	r2, r6
 8018b54:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 8018b56:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8018b5a:	f002 f801 	bl	801ab60 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018b5e:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 8018b60:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018b62:	2b2e      	cmp	r3, #46	; 0x2e
 8018b64:	d052      	beq.n	8018c0c <dns_send.isra.0+0x144>
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d050      	beq.n	8018c0c <dns_send.isra.0+0x144>
      ++hostname;
 8018b6a:	463d      	mov	r5, r7
 8018b6c:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 8018b70:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018b72:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8018b76:	2b2e      	cmp	r3, #46	; 0x2e
 8018b78:	b2e4      	uxtb	r4, r4
 8018b7a:	d001      	beq.n	8018b80 <dns_send.isra.0+0xb8>
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d1f7      	bne.n	8018b70 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 8018b80:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8018b84:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 8018b86:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 8018b8a:	4433      	add	r3, r6
 8018b8c:	4553      	cmp	r3, sl
 8018b8e:	dc37      	bgt.n	8018c00 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 8018b90:	4622      	mov	r2, r4
 8018b92:	4631      	mov	r1, r6
 8018b94:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8018b96:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8018b98:	f002 f8ba 	bl	801ad10 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8018b9c:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 8018b9e:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8018ba0:	465a      	mov	r2, fp
 8018ba2:	4639      	mov	r1, r7
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8018ba8:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8018baa:	f002 f83f 	bl	801ac2c <pbuf_take_at>
    } while (*hostname != 0);
 8018bae:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8018bb0:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8018bb2:	2a00      	cmp	r2, #0
 8018bb4:	d1d3      	bne.n	8018b5e <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 8018bb6:	4631      	mov	r1, r6
 8018bb8:	4640      	mov	r0, r8
 8018bba:	f002 f8a9 	bl	801ad10 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8018bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 8018bc2:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8018bc4:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8018bc6:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8018bca:	4640      	mov	r0, r8
 8018bcc:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8018bce:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8018bd2:	2204      	movs	r2, #4
 8018bd4:	f002 f82a 	bl	801ac2c <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8018bd8:	9b01      	ldr	r3, [sp, #4]
 8018bda:	4a16      	ldr	r2, [pc, #88]	; (8018c34 <dns_send.isra.0+0x16c>)
 8018bdc:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8018bde:	4919      	ldr	r1, [pc, #100]	; (8018c44 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 8018be0:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8018be2:	4b19      	ldr	r3, [pc, #100]	; (8018c48 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 8018be4:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 8018be8:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8018bec:	f89b 000f 	ldrb.w	r0, [fp, #15]
 8018bf0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8018bf4:	4641      	mov	r1, r8
 8018bf6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018bfa:	2335      	movs	r3, #53	; 0x35
 8018bfc:	f006 fee2 	bl	801f9c4 <udp_sendto>
    pbuf_free(p);
 8018c00:	4640      	mov	r0, r8
 8018c02:	f001 feb9 	bl	801a978 <pbuf_free>
}
 8018c06:	b007      	add	sp, #28
 8018c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018c0c:	2300      	movs	r3, #0
      ++hostname;
 8018c0e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018c10:	469b      	mov	fp, r3
 8018c12:	461c      	mov	r4, r3
 8018c14:	e7b9      	b.n	8018b8a <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 8018c16:	4648      	mov	r0, r9
 8018c18:	4621      	mov	r1, r4
 8018c1a:	f7ff ff03 	bl	8018a24 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8018c1e:	9b01      	ldr	r3, [sp, #4]
 8018c20:	444b      	add	r3, r9
 8018c22:	4699      	mov	r9, r3
 8018c24:	4b03      	ldr	r3, [pc, #12]	; (8018c34 <dns_send.isra.0+0x16c>)
 8018c26:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 8018c2a:	f88b 400a 	strb.w	r4, [fp, #10]
}
 8018c2e:	b007      	add	sp, #28
 8018c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c34:	2001e7ec 	.word	0x2001e7ec
 8018c38:	080424e0 	.word	0x080424e0
 8018c3c:	08042510 	.word	0x08042510
 8018c40:	0802b818 	.word	0x0802b818
 8018c44:	2001e7e4 	.word	0x2001e7e4
 8018c48:	2001e7a0 	.word	0x2001e7a0

08018c4c <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8018c4c:	2803      	cmp	r0, #3
{
 8018c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c52:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8018c54:	d846      	bhi.n	8018ce4 <dns_check_entry+0x98>

  switch (entry->state) {
 8018c56:	4e3a      	ldr	r6, [pc, #232]	; (8018d40 <dns_check_entry+0xf4>)
 8018c58:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8018c5c:	0125      	lsls	r5, r4, #4
 8018c5e:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8018c62:	7a9b      	ldrb	r3, [r3, #10]
 8018c64:	2b03      	cmp	r3, #3
 8018c66:	d861      	bhi.n	8018d2c <dns_check_entry+0xe0>
 8018c68:	e8df f003 	tbb	[pc, r3]
 8018c6c:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8018c70:	192b      	adds	r3, r5, r4
 8018c72:	011b      	lsls	r3, r3, #4
 8018c74:	58f2      	ldr	r2, [r6, r3]
 8018c76:	2a00      	cmp	r2, #0
 8018c78:	d140      	bne.n	8018cfc <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8018c7a:	442c      	add	r4, r5
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8018c82:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8018c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c88:	4f2e      	ldr	r7, [pc, #184]	; (8018d44 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 8018c8a:	f00b ffd3 	bl	8024c34 <rand>
 8018c8e:	4b2c      	ldr	r3, [pc, #176]	; (8018d40 <dns_check_entry+0xf4>)
 8018c90:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8018c92:	7a9a      	ldrb	r2, [r3, #10]
 8018c94:	2a02      	cmp	r2, #2
 8018c96:	d02d      	beq.n	8018cf4 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8018c98:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8018c9c:	429f      	cmp	r7, r3
 8018c9e:	d1f8      	bne.n	8018c92 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 8018ca0:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 8018ca2:	2202      	movs	r2, #2
      entry->tmr = 1;
 8018ca4:	2301      	movs	r3, #1
      err = dns_send(i);
 8018ca6:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 8018ca8:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 8018cac:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 8018cae:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 8018cb0:	81b3      	strh	r3, [r6, #12]
}
 8018cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8018cb6:	f7ff bf07 	b.w	8018ac8 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 8018cba:	192a      	adds	r2, r5, r4
 8018cbc:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8018cc0:	7b13      	ldrb	r3, [r2, #12]
 8018cc2:	3b01      	subs	r3, #1
 8018cc4:	b2db      	uxtb	r3, r3
 8018cc6:	7313      	strb	r3, [r2, #12]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d1db      	bne.n	8018c84 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8018ccc:	7b53      	ldrb	r3, [r2, #13]
 8018cce:	3301      	adds	r3, #1
 8018cd0:	b2db      	uxtb	r3, r3
 8018cd2:	2b04      	cmp	r3, #4
 8018cd4:	7353      	strb	r3, [r2, #13]
 8018cd6:	d016      	beq.n	8018d06 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 8018cd8:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 8018cda:	4620      	mov	r0, r4
}
 8018cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 8018ce0:	f7ff bef2 	b.w	8018ac8 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8018ce4:	4b18      	ldr	r3, [pc, #96]	; (8018d48 <dns_check_entry+0xfc>)
 8018ce6:	f240 421c 	movw	r2, #1052	; 0x41c
 8018cea:	4918      	ldr	r1, [pc, #96]	; (8018d4c <dns_check_entry+0x100>)
 8018cec:	4818      	ldr	r0, [pc, #96]	; (8018d50 <dns_check_entry+0x104>)
 8018cee:	f00b fefd 	bl	8024aec <iprintf>
 8018cf2:	e7b0      	b.n	8018c56 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8018cf4:	891a      	ldrh	r2, [r3, #8]
 8018cf6:	428a      	cmp	r2, r1
 8018cf8:	d1ce      	bne.n	8018c98 <dns_check_entry+0x4c>
 8018cfa:	e7c6      	b.n	8018c8a <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8018cfc:	3a01      	subs	r2, #1
 8018cfe:	50f2      	str	r2, [r6, r3]
 8018d00:	2a00      	cmp	r2, #0
 8018d02:	d0ba      	beq.n	8018c7a <dns_check_entry+0x2e>
 8018d04:	e7be      	b.n	8018c84 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8018d06:	7ad3      	ldrb	r3, [r2, #11]
 8018d08:	b913      	cbnz	r3, 8018d10 <dns_check_entry+0xc4>
 8018d0a:	4b12      	ldr	r3, [pc, #72]	; (8018d54 <dns_check_entry+0x108>)
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	b94b      	cbnz	r3, 8018d24 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 8018d10:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 8018d12:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 8018d14:	2100      	movs	r1, #0
 8018d16:	f7ff fe85 	bl	8018a24 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8018d20:	72b3      	strb	r3, [r6, #10]
            break;
 8018d22:	e7af      	b.n	8018c84 <dns_check_entry+0x38>
            entry->server_idx++;
 8018d24:	2301      	movs	r3, #1
 8018d26:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 8018d28:	8193      	strh	r3, [r2, #12]
 8018d2a:	e7d6      	b.n	8018cda <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8018d2c:	4b06      	ldr	r3, [pc, #24]	; (8018d48 <dns_check_entry+0xfc>)
 8018d2e:	f240 425b 	movw	r2, #1115	; 0x45b
 8018d32:	4909      	ldr	r1, [pc, #36]	; (8018d58 <dns_check_entry+0x10c>)
 8018d34:	4806      	ldr	r0, [pc, #24]	; (8018d50 <dns_check_entry+0x104>)
}
 8018d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8018d3a:	f00b bed7 	b.w	8024aec <iprintf>
 8018d3e:	bf00      	nop
 8018d40:	2001e7ec 	.word	0x2001e7ec
 8018d44:	2001ec2c 	.word	0x2001ec2c
 8018d48:	080424e0 	.word	0x080424e0
 8018d4c:	08042528 	.word	0x08042528
 8018d50:	0802b818 	.word	0x0802b818
 8018d54:	2001e7e4 	.word	0x2001e7e4
 8018d58:	08042544 	.word	0x08042544

08018d5c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8018d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d60:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8018d62:	8912      	ldrh	r2, [r2, #8]
{
 8018d64:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8018d66:	2a0f      	cmp	r2, #15
 8018d68:	d805      	bhi.n	8018d76 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 8018d6a:	4620      	mov	r0, r4
 8018d6c:	f001 fe04 	bl	801a978 <pbuf_free>
  return;
}
 8018d70:	b00d      	add	sp, #52	; 0x34
 8018d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8018d76:	4699      	mov	r9, r3
 8018d78:	220c      	movs	r2, #12
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	a906      	add	r1, sp, #24
 8018d7e:	4620      	mov	r0, r4
 8018d80:	f001 fe9e 	bl	801aac0 <pbuf_copy_partial>
 8018d84:	280c      	cmp	r0, #12
 8018d86:	4605      	mov	r5, r0
 8018d88:	d1ef      	bne.n	8018d6a <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 8018d8a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8019080 <dns_recv+0x324>
 8018d8e:	2600      	movs	r6, #0
 8018d90:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8018d94:	f7ff fdd0 	bl	8018938 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8018d98:	4643      	mov	r3, r8
 8018d9a:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 8018d9c:	7a9a      	ldrb	r2, [r3, #10]
 8018d9e:	2a02      	cmp	r2, #2
 8018da0:	d008      	beq.n	8018db4 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8018da2:	3601      	adds	r6, #1
 8018da4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8018da8:	2e04      	cmp	r6, #4
 8018daa:	d0de      	beq.n	8018d6a <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 8018dac:	7a9a      	ldrb	r2, [r3, #10]
 8018dae:	b2f7      	uxtb	r7, r6
 8018db0:	2a02      	cmp	r2, #2
 8018db2:	d1f6      	bne.n	8018da2 <dns_recv+0x46>
 8018db4:	891a      	ldrh	r2, [r3, #8]
 8018db6:	4282      	cmp	r2, r0
 8018db8:	d1f3      	bne.n	8018da2 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 8018dba:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8018dbe:	f7ff fdbb 	bl	8018938 <lwip_htons>
 8018dc2:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8018dc4:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8018dc8:	f7ff fdb6 	bl	8018938 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8018dcc:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 8018dd0:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 8018dd2:	09db      	lsrs	r3, r3, #7
 8018dd4:	d0c9      	beq.n	8018d6a <dns_recv+0xe>
 8018dd6:	f1ba 0f01 	cmp.w	sl, #1
 8018dda:	d1c6      	bne.n	8018d6a <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8018ddc:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 8018de0:	49a5      	ldr	r1, [pc, #660]	; (8019078 <dns_recv+0x31c>)
 8018de2:	f8d9 2000 	ldr.w	r2, [r9]
 8018de6:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 8018dea:	7adb      	ldrb	r3, [r3, #11]
 8018dec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8018df0:	429a      	cmp	r2, r3
 8018df2:	d1ba      	bne.n	8018d6a <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8018df4:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8018df8:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8018dfc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8019084 <dns_recv+0x328>
 8018e00:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8018e04:	f103 0210 	add.w	r2, r3, #16
 8018e08:	9301      	str	r3, [sp, #4]
 8018e0a:	4442      	add	r2, r8
 8018e0c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8018e10:	462e      	mov	r6, r5
 8018e12:	4627      	mov	r7, r4
 8018e14:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 8018e16:	4631      	mov	r1, r6
 8018e18:	4638      	mov	r0, r7
 8018e1a:	f001 ff69 	bl	801acf0 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8018e1e:	2800      	cmp	r0, #0
 8018e20:	db2d      	blt.n	8018e7e <dns_recv+0x122>
 8018e22:	455e      	cmp	r6, fp
 8018e24:	d02b      	beq.n	8018e7e <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 8018e26:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 8018e2a:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 8018e2c:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 8018e2e:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 8018e30:	d025      	beq.n	8018e7e <dns_recv+0x122>
      while (n > 0) {
 8018e32:	b330      	cbz	r0, 8018e82 <dns_recv+0x126>
 8018e34:	46aa      	mov	sl, r5
 8018e36:	182c      	adds	r4, r5, r0
 8018e38:	e01b      	b.n	8018e72 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8018e3a:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 8018e3e:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8018e40:	f819 2000 	ldrb.w	r2, [r9, r0]
 8018e44:	4601      	mov	r1, r0
        ++query;
 8018e46:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8018e48:	f002 0203 	and.w	r2, r2, #3
 8018e4c:	2a01      	cmp	r2, #1
 8018e4e:	f819 2003 	ldrb.w	r2, [r9, r3]
 8018e52:	f002 0203 	and.w	r2, r2, #3
 8018e56:	bf08      	it	eq
 8018e58:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 8018e5c:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8018e5e:	2a01      	cmp	r2, #1
 8018e60:	bf08      	it	eq
 8018e62:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 8018e64:	455e      	cmp	r6, fp
        response_offset++;
 8018e66:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 8018e68:	d009      	beq.n	8018e7e <dns_recv+0x122>
 8018e6a:	4299      	cmp	r1, r3
 8018e6c:	d107      	bne.n	8018e7e <dns_recv+0x122>
      while (n > 0) {
 8018e6e:	4554      	cmp	r4, sl
 8018e70:	d007      	beq.n	8018e82 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 8018e72:	4631      	mov	r1, r6
 8018e74:	4638      	mov	r0, r7
 8018e76:	f001 ff3b 	bl	801acf0 <pbuf_try_get_at>
        if (c < 0) {
 8018e7a:	1e03      	subs	r3, r0, #0
 8018e7c:	dadd      	bge.n	8018e3a <dns_recv+0xde>
 8018e7e:	463c      	mov	r4, r7
 8018e80:	e773      	b.n	8018d6a <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 8018e82:	4631      	mov	r1, r6
 8018e84:	4638      	mov	r0, r7
 8018e86:	f001 ff33 	bl	801acf0 <pbuf_try_get_at>
    if (n < 0) {
 8018e8a:	2800      	cmp	r0, #0
      ++query;
 8018e8c:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 8018e90:	dbf5      	blt.n	8018e7e <dns_recv+0x122>
  } while (n != 0);
 8018e92:	d1c0      	bne.n	8018e16 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 8018e94:	4635      	mov	r5, r6
 8018e96:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8018e9a:	463c      	mov	r4, r7
 8018e9c:	9e03      	ldr	r6, [sp, #12]
 8018e9e:	454d      	cmp	r5, r9
 8018ea0:	9f02      	ldr	r7, [sp, #8]
 8018ea2:	f43f af62 	beq.w	8018d6a <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 8018ea6:	f105 0a01 	add.w	sl, r5, #1
 8018eaa:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 8018eae:	45ca      	cmp	sl, r9
 8018eb0:	f43f af5b 	beq.w	8018d6a <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8018eb4:	4653      	mov	r3, sl
 8018eb6:	2204      	movs	r2, #4
 8018eb8:	a904      	add	r1, sp, #16
 8018eba:	4620      	mov	r0, r4
 8018ebc:	f001 fe00 	bl	801aac0 <pbuf_copy_partial>
 8018ec0:	2804      	cmp	r0, #4
 8018ec2:	f47f af52 	bne.w	8018d6a <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8018ec6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018ece:	f47f af4c 	bne.w	8018d6a <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8018ed2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8018ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018eda:	f47f af46 	bne.w	8018d6a <dns_recv+0xe>
 8018ede:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8018ee2:	459a      	cmp	sl, r3
 8018ee4:	f63f af41 	bhi.w	8018d6a <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8018ee8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8018eec:	071b      	lsls	r3, r3, #28
 8018eee:	d017      	beq.n	8018f20 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8018ef0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8018ef4:	fb03 8306 	mla	r3, r3, r6, r8
 8018ef8:	7adb      	ldrb	r3, [r3, #11]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	f040 80ae 	bne.w	801905c <dns_recv+0x300>
 8018f00:	4b5d      	ldr	r3, [pc, #372]	; (8019078 <dns_recv+0x31c>)
 8018f02:	685b      	ldr	r3, [r3, #4]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	f000 80a9 	beq.w	801905c <dns_recv+0x300>
            entry->tmr     = 1;
 8018f0a:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 8018f0e:	4638      	mov	r0, r7
            entry->tmr     = 1;
 8018f10:	fb03 8606 	mla	r6, r3, r6, r8
 8018f14:	f240 3301 	movw	r3, #769	; 0x301
 8018f18:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 8018f1a:	f7ff fe97 	bl	8018c4c <dns_check_entry>
            goto ignore_packet;
 8018f1e:	e724      	b.n	8018d6a <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8018f20:	3505      	adds	r5, #5
 8018f22:	f8dd a000 	ldr.w	sl, [sp]
 8018f26:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8018f28:	f1ba 0f00 	cmp.w	sl, #0
 8018f2c:	f000 8096 	beq.w	801905c <dns_recv+0x300>
 8018f30:	8923      	ldrh	r3, [r4, #8]
 8018f32:	42ab      	cmp	r3, r5
 8018f34:	d80b      	bhi.n	8018f4e <dns_recv+0x1f2>
 8018f36:	e091      	b.n	801905c <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 8018f38:	8922      	ldrh	r2, [r4, #8]
 8018f3a:	4293      	cmp	r3, r2
 8018f3c:	f6bf af15 	bge.w	8018d6a <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 8018f40:	4629      	mov	r1, r5
 8018f42:	f001 fed5 	bl	801acf0 <pbuf_try_get_at>
    if (n < 0) {
 8018f46:	2800      	cmp	r0, #0
 8018f48:	f6ff af0f 	blt.w	8018d6a <dns_recv+0xe>
  } while (n != 0);
 8018f4c:	d017      	beq.n	8018f7e <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 8018f4e:	4629      	mov	r1, r5
 8018f50:	4620      	mov	r0, r4
 8018f52:	f001 fecd 	bl	801acf0 <pbuf_try_get_at>
 8018f56:	f105 0b01 	add.w	fp, r5, #1
 8018f5a:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 8018f5c:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 8018f5e:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 8018f62:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 8018f64:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 8018f68:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 8018f6a:	f6ff aefe 	blt.w	8018d6a <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 8018f6e:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 8018f70:	f1bb 0f00 	cmp.w	fp, #0
 8018f74:	f43f aef9 	beq.w	8018d6a <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 8018f78:	2ac0      	cmp	r2, #192	; 0xc0
 8018f7a:	d1dd      	bne.n	8018f38 <dns_recv+0x1dc>
 8018f7c:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 8018f7e:	454d      	cmp	r5, r9
 8018f80:	f43f aef3 	beq.w	8018d6a <dns_recv+0xe>
  return (u16_t)(offset + 1);
 8018f84:	f105 0b01 	add.w	fp, r5, #1
 8018f88:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 8018f8c:	45cb      	cmp	fp, r9
 8018f8e:	f43f aeec 	beq.w	8018d6a <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8018f92:	465b      	mov	r3, fp
 8018f94:	220a      	movs	r2, #10
 8018f96:	a909      	add	r1, sp, #36	; 0x24
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f001 fd91 	bl	801aac0 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8018f9e:	280a      	cmp	r0, #10
 8018fa0:	f47f aee3 	bne.w	8018d6a <dns_recv+0xe>
 8018fa4:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8018fa8:	459b      	cmp	fp, r3
 8018faa:	f63f aede 	bhi.w	8018d6a <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8018fae:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8018fb2:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8018fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8018fb8:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8018fba:	d013      	beq.n	8018fe4 <dns_recv+0x288>
 8018fbc:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8018fc0:	f7ff fcba 	bl	8018938 <lwip_htons>
 8018fc4:	4428      	add	r0, r5
 8018fc6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8018fca:	f6bf aece 	bge.w	8018d6a <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8018fce:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 8018fd2:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8018fd6:	f7ff fcaf 	bl	8018938 <lwip_htons>
 8018fda:	4405      	add	r5, r0
            --nanswers;
 8018fdc:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8018fe0:	b2ad      	uxth	r5, r5
            --nanswers;
 8018fe2:	e7a1      	b.n	8018f28 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8018fe4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018fe8:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8018fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018ff0:	d1e6      	bne.n	8018fc0 <dns_recv+0x264>
 8018ff2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018ff6:	d1e3      	bne.n	8018fc0 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8018ff8:	462b      	mov	r3, r5
 8018ffa:	2204      	movs	r2, #4
 8018ffc:	a905      	add	r1, sp, #20
 8018ffe:	4620      	mov	r0, r4
 8019000:	f001 fd5e 	bl	801aac0 <pbuf_copy_partial>
 8019004:	2804      	cmp	r0, #4
 8019006:	f47f aeb0 	bne.w	8018d6a <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801900a:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801900e:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8019010:	fb03 f606 	mul.w	r6, r3, r6
 8019014:	9b05      	ldr	r3, [sp, #20]
 8019016:	eb08 0406 	add.w	r4, r8, r6
 801901a:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 801901c:	f001 fcac 	bl	801a978 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8019020:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019022:	f7ff fc8d 	bl	8018940 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 8019026:	4a15      	ldr	r2, [pc, #84]	; (801907c <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8019028:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 801902a:	9901      	ldr	r1, [sp, #4]
 801902c:	4638      	mov	r0, r7
  entry->ttl = ttl;
 801902e:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 8019030:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 8019034:	bf28      	it	cs
 8019036:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 8019038:	4441      	add	r1, r8
  entry->ttl = ttl;
 801903a:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 801903e:	2303      	movs	r3, #3
 8019040:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 8019042:	f7ff fcef 	bl	8018a24 <dns_call_found>
  if (entry->ttl == 0) {
 8019046:	f858 3006 	ldr.w	r3, [r8, r6]
 801904a:	2b00      	cmp	r3, #0
 801904c:	f47f ae90 	bne.w	8018d70 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 8019050:	7aa2      	ldrb	r2, [r4, #10]
 8019052:	2a03      	cmp	r2, #3
 8019054:	f47f ae8c 	bne.w	8018d70 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 8019058:	72a3      	strb	r3, [r4, #10]
                  return;
 801905a:	e689      	b.n	8018d70 <dns_recv+0x14>
        pbuf_free(p);
 801905c:	4620      	mov	r0, r4
 801905e:	f001 fc8b 	bl	801a978 <pbuf_free>
        dns_call_found(i, NULL);
 8019062:	2100      	movs	r1, #0
 8019064:	4638      	mov	r0, r7
 8019066:	f7ff fcdd 	bl	8018a24 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 801906a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801906e:	2200      	movs	r2, #0
 8019070:	fb03 8606 	mla	r6, r3, r6, r8
 8019074:	72b2      	strb	r2, [r6, #10]
        return;
 8019076:	e67b      	b.n	8018d70 <dns_recv+0x14>
 8019078:	2001e7e4 	.word	0x2001e7e4
 801907c:	00093a80 	.word	0x00093a80
 8019080:	2001e7ec 	.word	0x2001e7ec
 8019084:	08044f15 	.word	0x08044f15

08019088 <dns_init>:
}
 8019088:	4770      	bx	lr
 801908a:	bf00      	nop

0801908c <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 801908c:	2801      	cmp	r0, #1
 801908e:	d900      	bls.n	8019092 <dns_setserver+0x6>
}
 8019090:	4770      	bx	lr
    if (dnsserver != NULL) {
 8019092:	b121      	cbz	r1, 801909e <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 8019094:	4b05      	ldr	r3, [pc, #20]	; (80190ac <dns_setserver+0x20>)
 8019096:	680a      	ldr	r2, [r1, #0]
 8019098:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 801909c:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 801909e:	4a04      	ldr	r2, [pc, #16]	; (80190b0 <dns_setserver+0x24>)
 80190a0:	4b02      	ldr	r3, [pc, #8]	; (80190ac <dns_setserver+0x20>)
 80190a2:	6812      	ldr	r2, [r2, #0]
 80190a4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 80190a8:	4770      	bx	lr
 80190aa:	bf00      	nop
 80190ac:	2001e7e4 	.word	0x2001e7e4
 80190b0:	08044cb8 	.word	0x08044cb8

080190b4 <dns_tmr>:
{
 80190b4:	b508      	push	{r3, lr}
    dns_check_entry(i);
 80190b6:	2000      	movs	r0, #0
 80190b8:	f7ff fdc8 	bl	8018c4c <dns_check_entry>
 80190bc:	2001      	movs	r0, #1
 80190be:	f7ff fdc5 	bl	8018c4c <dns_check_entry>
 80190c2:	2002      	movs	r0, #2
 80190c4:	f7ff fdc2 	bl	8018c4c <dns_check_entry>
 80190c8:	2003      	movs	r0, #3
}
 80190ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80190ce:	f7ff bdbd 	b.w	8018c4c <dns_check_entry>
 80190d2:	bf00      	nop

080190d4 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80190d4:	2900      	cmp	r1, #0
 80190d6:	f000 812e 	beq.w	8019336 <dns_gethostbyname_addrtype+0x262>
{
 80190da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 80190de:	fab0 f780 	clz	r7, r0
{
 80190e2:	b083      	sub	sp, #12
 80190e4:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 80190e6:	097f      	lsrs	r7, r7, #5
 80190e8:	2800      	cmp	r0, #0
 80190ea:	f000 8103 	beq.w	80192f4 <dns_gethostbyname_addrtype+0x220>
 80190ee:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 80190f0:	7803      	ldrb	r3, [r0, #0]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	f000 80fe 	beq.w	80192f4 <dns_gethostbyname_addrtype+0x220>
 80190f8:	4615      	mov	r5, r2
 80190fa:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 80190fc:	f7e7 f8aa 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8019100:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 8019102:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8019104:	f200 80f6 	bhi.w	80192f4 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8019108:	4641      	mov	r1, r8
 801910a:	4630      	mov	r0, r6
 801910c:	f009 fa1c 	bl	8022548 <ip4addr_aton>
 8019110:	b118      	cbz	r0, 801911a <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8019112:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8019114:	b003      	add	sp, #12
 8019116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801911a:	4f88      	ldr	r7, [pc, #544]	; (801933c <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 801911c:	4604      	mov	r4, r0
 801911e:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8019120:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 8019124:	2b03      	cmp	r3, #3
 8019126:	d03a      	beq.n	801919e <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019128:	3401      	adds	r4, #1
 801912a:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 801912e:	2c04      	cmp	r4, #4
 8019130:	d1f6      	bne.n	8019120 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 8019132:	4b83      	ldr	r3, [pc, #524]	; (8019340 <dns_gethostbyname_addrtype+0x26c>)
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	2b00      	cmp	r3, #0
 8019138:	f000 80f6 	beq.w	8019328 <dns_gethostbyname_addrtype+0x254>
 801913c:	2400      	movs	r4, #0
 801913e:	f8df a20c 	ldr.w	sl, [pc, #524]	; 801934c <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019142:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 8019146:	fa5f f884 	uxtb.w	r8, r4
 801914a:	2b02      	cmp	r3, #2
 801914c:	d040      	beq.n	80191d0 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801914e:	3401      	adds	r4, #1
 8019150:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8019154:	2c04      	cmp	r4, #4
 8019156:	d1f4      	bne.n	8019142 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8019158:	4a7a      	ldr	r2, [pc, #488]	; (8019344 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 801915a:	4623      	mov	r3, r4
 801915c:	4f7a      	ldr	r7, [pc, #488]	; (8019348 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801915e:	2400      	movs	r4, #0
 8019160:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 8019162:	46a4      	mov	ip, r4
 8019164:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 8019166:	7a90      	ldrb	r0, [r2, #10]
 8019168:	fa5f f884 	uxtb.w	r8, r4
 801916c:	2800      	cmp	r0, #0
 801916e:	d041      	beq.n	80191f4 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 8019170:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019172:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 8019176:	d023      	beq.n	80191c0 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019178:	2c04      	cmp	r4, #4
 801917a:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801917e:	d1f2      	bne.n	8019166 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8019180:	2b04      	cmp	r3, #4
 8019182:	d007      	beq.n	8019194 <dns_gethostbyname_addrtype+0xc0>
 8019184:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8019188:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 801918c:	7aa2      	ldrb	r2, [r4, #10]
 801918e:	2a03      	cmp	r2, #3
 8019190:	f000 80ae 	beq.w	80192f0 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 8019194:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019198:	b003      	add	sp, #12
 801919a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 801919e:	4651      	mov	r1, sl
 80191a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80191a4:	4630      	mov	r0, r6
 80191a6:	f7ff fc1f 	bl	80189e8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80191aa:	2800      	cmp	r0, #0
 80191ac:	d1bc      	bne.n	8019128 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 80191ae:	4b66      	ldr	r3, [pc, #408]	; (8019348 <dns_gethostbyname_addrtype+0x274>)
 80191b0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80191b4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80191b8:	6863      	ldr	r3, [r4, #4]
 80191ba:	f8c8 3000 	str.w	r3, [r8]
 80191be:	e7a9      	b.n	8019114 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80191c0:	7b90      	ldrb	r0, [r2, #14]
 80191c2:	1a08      	subs	r0, r1, r0
 80191c4:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 80191c6:	4560      	cmp	r0, ip
 80191c8:	d9d6      	bls.n	8019178 <dns_gethostbyname_addrtype+0xa4>
 80191ca:	4643      	mov	r3, r8
 80191cc:	4684      	mov	ip, r0
 80191ce:	e7d3      	b.n	8019178 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 80191d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80191d4:	4639      	mov	r1, r7
 80191d6:	4630      	mov	r0, r6
 80191d8:	f7ff fc06 	bl	80189e8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80191dc:	2800      	cmp	r0, #0
 80191de:	d1b6      	bne.n	801914e <dns_gethostbyname_addrtype+0x7a>
 80191e0:	4b5a      	ldr	r3, [pc, #360]	; (801934c <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 80191e2:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80191e4:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 80191e6:	2a00      	cmp	r2, #0
 80191e8:	f000 8091 	beq.w	801930e <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80191ec:	3001      	adds	r0, #1
 80191ee:	2804      	cmp	r0, #4
 80191f0:	d1f7      	bne.n	80191e2 <dns_gethostbyname_addrtype+0x10e>
 80191f2:	e7ac      	b.n	801914e <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 80191f4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80191f8:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80191fc:	f8df a14c 	ldr.w	sl, [pc, #332]	; 801934c <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 8019200:	2700      	movs	r7, #0
 8019202:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 8019204:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019206:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 8019208:	b12b      	cbz	r3, 8019216 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801920a:	3701      	adds	r7, #1
 801920c:	2f04      	cmp	r7, #4
 801920e:	d1f9      	bne.n	8019204 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 8019210:	f04f 30ff 	mov.w	r0, #4294967295
 8019214:	e7c0      	b.n	8019198 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 8019216:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 801921a:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 801921c:	f104 0010 	add.w	r0, r4, #16
 8019220:	4631      	mov	r1, r6
  req->found = found;
 8019222:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 8019226:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 801922a:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 801922c:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 8019230:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 8019234:	2201      	movs	r2, #1
 8019236:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 8019238:	464a      	mov	r2, r9
 801923a:	f00a fc93 	bl	8023b64 <memcpy>
  entry->name[namelen] = 0;
 801923e:	44a1      	add	r9, r4
 8019240:	9b01      	ldr	r3, [sp, #4]
 8019242:	461d      	mov	r5, r3
 8019244:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 8019248:	007b      	lsls	r3, r7, #1
 801924a:	9301      	str	r3, [sp, #4]
 801924c:	4b40      	ldr	r3, [pc, #256]	; (8019350 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 801924e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019252:	b2ee      	uxtb	r6, r5
 8019254:	b30a      	cbz	r2, 801929a <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8019256:	3501      	adds	r5, #1
 8019258:	2d04      	cmp	r5, #4
 801925a:	d1f8      	bne.n	801924e <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801925c:	483d      	ldr	r0, [pc, #244]	; (8019354 <dns_gethostbyname_addrtype+0x280>)
 801925e:	2304      	movs	r3, #4
 8019260:	7806      	ldrb	r6, [r0, #0]
 8019262:	3601      	adds	r6, #1
 8019264:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8019266:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 8019268:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801926a:	d901      	bls.n	8019270 <dns_gethostbyname_addrtype+0x19c>
 801926c:	2600      	movs	r6, #0
      idx = 0;
 801926e:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 8019270:	4d37      	ldr	r5, [pc, #220]	; (8019350 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8019272:	1c71      	adds	r1, r6, #1
 8019274:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 8019276:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801927a:	2a00      	cmp	r2, #0
 801927c:	d13d      	bne.n	80192fa <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801927e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019282:	b2ce      	uxtb	r6, r1
 8019284:	d1ef      	bne.n	8019266 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 8019286:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 8019288:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 801928c:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 801928e:	443a      	add	r2, r7
 8019290:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8019294:	2304      	movs	r3, #4
 8019296:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 8019298:	e73c      	b.n	8019114 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 801929a:	202e      	movs	r0, #46	; 0x2e
 801929c:	f006 fc72 	bl	801fb84 <udp_new_ip_type>
  if (pcb == NULL) {
 80192a0:	4681      	mov	r9, r0
 80192a2:	2800      	cmp	r0, #0
 80192a4:	d043      	beq.n	801932e <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80192a6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801935c <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 80192aa:	f00b fcc3 	bl	8024c34 <rand>
 80192ae:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 80192b0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80192b4:	d3f9      	bcc.n	80192aa <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80192b6:	4659      	mov	r1, fp
 80192b8:	4648      	mov	r0, r9
 80192ba:	f006 f9ff 	bl	801f6bc <udp_bind>
  } while (err == ERR_USE);
 80192be:	f110 0f08 	cmn.w	r0, #8
 80192c2:	d0f2      	beq.n	80192aa <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 80192c4:	b9d8      	cbnz	r0, 80192fe <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 80192c6:	4602      	mov	r2, r0
 80192c8:	4923      	ldr	r1, [pc, #140]	; (8019358 <dns_gethostbyname_addrtype+0x284>)
 80192ca:	4648      	mov	r0, r9
 80192cc:	f006 fc0a 	bl	801fae4 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 80192d0:	4b1f      	ldr	r3, [pc, #124]	; (8019350 <dns_gethostbyname_addrtype+0x27c>)
 80192d2:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 80192d6:	4b1f      	ldr	r3, [pc, #124]	; (8019354 <dns_gethostbyname_addrtype+0x280>)
 80192d8:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 80192da:	4a1a      	ldr	r2, [pc, #104]	; (8019344 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 80192dc:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 80192de:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 80192e0:	7813      	ldrb	r3, [r2, #0]
 80192e2:	3301      	adds	r3, #1
 80192e4:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 80192e6:	f7ff fcb1 	bl	8018c4c <dns_check_entry>
  return ERR_INPROGRESS;
 80192ea:	f06f 0004 	mvn.w	r0, #4
 80192ee:	e711      	b.n	8019114 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 80192f0:	4698      	mov	r8, r3
 80192f2:	e783      	b.n	80191fc <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 80192f4:	f06f 000f 	mvn.w	r0, #15
 80192f8:	e70c      	b.n	8019114 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 80192fa:	7006      	strb	r6, [r0, #0]
      return idx;
 80192fc:	e7ed      	b.n	80192da <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 80192fe:	4648      	mov	r0, r9
 8019300:	f006 fc02 	bl	801fb08 <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8019304:	2300      	movs	r3, #0
 8019306:	4a12      	ldr	r2, [pc, #72]	; (8019350 <dns_gethostbyname_addrtype+0x27c>)
 8019308:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801930c:	e7a6      	b.n	801925c <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 801930e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019312:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 8019316:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 801931a:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 801931e:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 8019322:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 8019326:	e6f5      	b.n	8019114 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 8019328:	f06f 0005 	mvn.w	r0, #5
 801932c:	e6f2      	b.n	8019114 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 801932e:	4b08      	ldr	r3, [pc, #32]	; (8019350 <dns_gethostbyname_addrtype+0x27c>)
 8019330:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8019334:	e792      	b.n	801925c <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 8019336:	f06f 000f 	mvn.w	r0, #15
}
 801933a:	4770      	bx	lr
 801933c:	2001e7fc 	.word	0x2001e7fc
 8019340:	2001e7e4 	.word	0x2001e7e4
 8019344:	2001e7e0 	.word	0x2001e7e0
 8019348:	2001e7ec 	.word	0x2001e7ec
 801934c:	2001e7b0 	.word	0x2001e7b0
 8019350:	2001e7a0 	.word	0x2001e7a0
 8019354:	2001e79c 	.word	0x2001e79c
 8019358:	08018d5d 	.word	0x08018d5d
 801935c:	08044cb8 	.word	0x08044cb8

08019360 <dns_gethostbyname>:
{
 8019360:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8019362:	2400      	movs	r4, #0
{
 8019364:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8019366:	9400      	str	r4, [sp, #0]
 8019368:	f7ff feb4 	bl	80190d4 <dns_gethostbyname_addrtype>
}
 801936c:	b002      	add	sp, #8
 801936e:	bd10      	pop	{r4, pc}

08019370 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8019370:	2300      	movs	r3, #0
{
 8019372:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8019374:	4299      	cmp	r1, r3
{
 8019376:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 8019378:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 801937c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8019380:	dd05      	ble.n	801938e <lwip_standard_chksum+0x1e>
 8019382:	b124      	cbz	r4, 801938e <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8019384:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8019388:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 801938a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 801938e:	2901      	cmp	r1, #1
 8019390:	dd28      	ble.n	80193e4 <lwip_standard_chksum+0x74>
 8019392:	3902      	subs	r1, #2
  u32_t sum = 0;
 8019394:	2300      	movs	r3, #0
 8019396:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 801939a:	f10e 0c01 	add.w	ip, lr, #1
 801939e:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 80193a2:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 80193a6:	4584      	cmp	ip, r0
    sum += *ps++;
 80193a8:	4413      	add	r3, r2
  while (len > 1) {
 80193aa:	d1fa      	bne.n	80193a2 <lwip_standard_chksum+0x32>
    len -= 2;
 80193ac:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 80193b0:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80193b4:	2901      	cmp	r1, #1
 80193b6:	d103      	bne.n	80193c0 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80193b8:	f89c 2000 	ldrb.w	r2, [ip]
 80193bc:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80193c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80193c4:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80193c6:	b298      	uxth	r0, r3
 80193c8:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80193cc:	b298      	uxth	r0, r3
 80193ce:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80193d2:	b124      	cbz	r4, 80193de <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 80193d4:	0203      	lsls	r3, r0, #8
 80193d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80193da:	b29b      	uxth	r3, r3
 80193dc:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80193de:	b280      	uxth	r0, r0
 80193e0:	b002      	add	sp, #8
 80193e2:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 80193e4:	4684      	mov	ip, r0
  u32_t sum = 0;
 80193e6:	2300      	movs	r3, #0
 80193e8:	e7e4      	b.n	80193b4 <lwip_standard_chksum+0x44>
 80193ea:	bf00      	nop

080193ec <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 80193ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193f0:	4688      	mov	r8, r1
 80193f2:	4617      	mov	r7, r2
 80193f4:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 80193f6:	b1f8      	cbz	r0, 8019438 <inet_cksum_pseudo_base+0x4c>
 80193f8:	4605      	mov	r5, r0
  int swapped = 0;
 80193fa:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 80193fc:	8969      	ldrh	r1, [r5, #10]
 80193fe:	6868      	ldr	r0, [r5, #4]
 8019400:	f7ff ffb6 	bl	8019370 <lwip_standard_chksum>
 8019404:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8019406:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 8019408:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 801940a:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 801940e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8019412:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8019416:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801941a:	d004      	beq.n	8019426 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 801941c:	b29b      	uxth	r3, r3
 801941e:	f086 0601 	eor.w	r6, r6, #1
 8019422:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8019426:	682d      	ldr	r5, [r5, #0]
 8019428:	2d00      	cmp	r5, #0
 801942a:	d1e7      	bne.n	80193fc <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 801942c:	b126      	cbz	r6, 8019438 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801942e:	0222      	lsls	r2, r4, #8
 8019430:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019434:	b292      	uxth	r2, r2
 8019436:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8019438:	4640      	mov	r0, r8
 801943a:	f7ff fa7d 	bl	8018938 <lwip_htons>
 801943e:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8019440:	4638      	mov	r0, r7
 8019442:	f7ff fa79 	bl	8018938 <lwip_htons>
 8019446:	4428      	add	r0, r5
 8019448:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 801944a:	b2a0      	uxth	r0, r4
 801944c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8019450:	b2a0      	uxth	r0, r4
 8019452:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8019456:	43c0      	mvns	r0, r0
}
 8019458:	b280      	uxth	r0, r0
 801945a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801945e:	bf00      	nop

08019460 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8019460:	b430      	push	{r4, r5}
 8019462:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 8019464:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 8019466:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8019468:	0c23      	lsrs	r3, r4, #16
 801946a:	fa13 f384 	uxtah	r3, r3, r4
 801946e:	fa13 f385 	uxtah	r3, r3, r5
 8019472:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 8019476:	b29c      	uxth	r4, r3
 8019478:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 801947c:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801947e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 8019482:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8019484:	f7ff bfb2 	b.w	80193ec <inet_cksum_pseudo_base>

08019488 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8019488:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801948a:	f7ff ff71 	bl	8019370 <lwip_standard_chksum>
 801948e:	43c0      	mvns	r0, r0
}
 8019490:	b280      	uxth	r0, r0
 8019492:	bd08      	pop	{r3, pc}

08019494 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8019494:	b338      	cbz	r0, 80194e6 <inet_chksum_pbuf+0x52>
{
 8019496:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 8019498:	2600      	movs	r6, #0
 801949a:	4605      	mov	r5, r0
  acc = 0;
 801949c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 801949e:	8969      	ldrh	r1, [r5, #10]
 80194a0:	6868      	ldr	r0, [r5, #4]
 80194a2:	f7ff ff65 	bl	8019370 <lwip_standard_chksum>
 80194a6:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 80194a8:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 80194aa:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 80194ac:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 80194b0:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80194b4:	ea4f 2304 	mov.w	r3, r4, lsl #8
 80194b8:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 80194bc:	d004      	beq.n	80194c8 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 80194be:	b29b      	uxth	r3, r3
 80194c0:	f086 0601 	eor.w	r6, r6, #1
 80194c4:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 80194c8:	682d      	ldr	r5, [r5, #0]
 80194ca:	2d00      	cmp	r5, #0
 80194cc:	d1e7      	bne.n	801949e <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 80194ce:	b13e      	cbz	r6, 80194e0 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 80194d0:	0220      	lsls	r0, r4, #8
 80194d2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80194d6:	b280      	uxth	r0, r0
 80194d8:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 80194da:	43c0      	mvns	r0, r0
 80194dc:	b280      	uxth	r0, r0
}
 80194de:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 80194e0:	43e0      	mvns	r0, r4
 80194e2:	b280      	uxth	r0, r0
}
 80194e4:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 80194e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80194ea:	4770      	bx	lr

080194ec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80194ec:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80194ee:	f009 fe0d 	bl	802310c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80194f2:	f000 f975 	bl	80197e0 <mem_init>
  memp_init();
 80194f6:	f000 fcf9 	bl	8019eec <memp_init>
  pbuf_init();
  netif_init();
 80194fa:	f000 fdbd 	bl	801a078 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80194fe:	f005 ffd3 	bl	801f4a8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8019502:	f001 fd5f 	bl	801afc4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8019506:	f7ff fdbf 	bl	8019088 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 801950a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 801950e:	f005 bf23 	b.w	801f358 <sys_timeouts_init>
 8019512:	bf00      	nop

08019514 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019514:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 8019518:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 801951a:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801951e:	4299      	cmp	r1, r3
 8019520:	d81b      	bhi.n	801955a <mem_link_valid+0x46>
 8019522:	459c      	cmp	ip, r3
 8019524:	bf94      	ite	ls
 8019526:	2200      	movls	r2, #0
 8019528:	2201      	movhi	r2, #1
 801952a:	b9b2      	cbnz	r2, 801955a <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 801952c:	4b0f      	ldr	r3, [pc, #60]	; (801956c <mem_link_valid+0x58>)
{
 801952e:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 8019530:	681c      	ldr	r4, [r3, #0]
 8019532:	1b03      	subs	r3, r0, r4
 8019534:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019536:	4299      	cmp	r1, r3
 8019538:	d002      	beq.n	8019540 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801953a:	5a61      	ldrh	r1, [r4, r1]
 801953c:	4299      	cmp	r1, r3
 801953e:	d10e      	bne.n	801955e <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019540:	4a0b      	ldr	r2, [pc, #44]	; (8019570 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 8019542:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019544:	6812      	ldr	r2, [r2, #0]
 8019546:	42a2      	cmp	r2, r4
 8019548:	d00d      	beq.n	8019566 <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801954a:	8860      	ldrh	r0, [r4, #2]
 801954c:	1ac0      	subs	r0, r0, r3
 801954e:	fab0 f080 	clz	r0, r0
 8019552:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 8019554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019558:	4770      	bx	lr
    return 0;
 801955a:	2000      	movs	r0, #0
}
 801955c:	4770      	bx	lr
    return 0;
 801955e:	4610      	mov	r0, r2
}
 8019560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019564:	4770      	bx	lr
  return 1;
 8019566:	2001      	movs	r0, #1
 8019568:	e7f4      	b.n	8019554 <mem_link_valid+0x40>
 801956a:	bf00      	nop
 801956c:	2001ec50 	.word	0x2001ec50
 8019570:	2001ec54 	.word	0x2001ec54

08019574 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8019574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 8019578:	4f5f      	ldr	r7, [pc, #380]	; (80196f8 <mem_sanity+0x184>)
 801957a:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 801957c:	7935      	ldrb	r5, [r6, #4]
 801957e:	2d01      	cmp	r5, #1
 8019580:	d907      	bls.n	8019592 <mem_sanity+0x1e>
 8019582:	4b5e      	ldr	r3, [pc, #376]	; (80196fc <mem_sanity+0x188>)
 8019584:	f240 223f 	movw	r2, #575	; 0x23f
 8019588:	495d      	ldr	r1, [pc, #372]	; (8019700 <mem_sanity+0x18c>)
 801958a:	485e      	ldr	r0, [pc, #376]	; (8019704 <mem_sanity+0x190>)
 801958c:	f00b faae 	bl	8024aec <iprintf>
  last_used = mem->used;
 8019590:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8019592:	8873      	ldrh	r3, [r6, #2]
 8019594:	2b00      	cmp	r3, #0
 8019596:	f040 80a7 	bne.w	80196e8 <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801959a:	8834      	ldrh	r4, [r6, #0]
 801959c:	f242 7310 	movw	r3, #10000	; 0x2710
 80195a0:	429c      	cmp	r4, r3
 80195a2:	f200 8098 	bhi.w	80196d6 <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 80195aa:	429c      	cmp	r4, r3
 80195ac:	d961      	bls.n	8019672 <mem_sanity+0xfe>
 80195ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8019720 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 80195b2:	f8df a148 	ldr.w	sl, [pc, #328]	; 80196fc <mem_sanity+0x188>
 80195b6:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8019724 <mem_sanity+0x1b0>
 80195ba:	4e52      	ldr	r6, [pc, #328]	; (8019704 <mem_sanity+0x190>)
 80195bc:	e012      	b.n	80195e4 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 80195be:	2b01      	cmp	r3, #1
 80195c0:	d006      	beq.n	80195d0 <mem_sanity+0x5c>
 80195c2:	4653      	mov	r3, sl
 80195c4:	f240 2251 	movw	r2, #593	; 0x251
 80195c8:	494f      	ldr	r1, [pc, #316]	; (8019708 <mem_sanity+0x194>)
 80195ca:	4630      	mov	r0, r6
 80195cc:	f00b fa8e 	bl	8024aec <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 80195d0:	4620      	mov	r0, r4
 80195d2:	f7ff ff9f 	bl	8019514 <mem_link_valid>
 80195d6:	b380      	cbz	r0, 801963a <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 80195dc:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 80195de:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 80195e0:	42a3      	cmp	r3, r4
 80195e2:	d246      	bcs.n	8019672 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 80195e4:	f8d8 2000 	ldr.w	r2, [r8]
 80195e8:	42a2      	cmp	r2, r4
 80195ea:	d942      	bls.n	8019672 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 80195ec:	1ce2      	adds	r2, r4, #3
 80195ee:	f022 0203 	bic.w	r2, r2, #3
 80195f2:	4294      	cmp	r4, r2
 80195f4:	d006      	beq.n	8019604 <mem_sanity+0x90>
 80195f6:	4653      	mov	r3, sl
 80195f8:	f240 2249 	movw	r2, #585	; 0x249
 80195fc:	4649      	mov	r1, r9
 80195fe:	4630      	mov	r0, r6
 8019600:	f00b fa74 	bl	8024aec <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8019604:	8862      	ldrh	r2, [r4, #2]
 8019606:	f242 7310 	movw	r3, #10000	; 0x2710
 801960a:	429a      	cmp	r2, r3
 801960c:	d81d      	bhi.n	801964a <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801960e:	8822      	ldrh	r2, [r4, #0]
 8019610:	f242 7310 	movw	r3, #10000	; 0x2710
 8019614:	429a      	cmp	r2, r3
 8019616:	d824      	bhi.n	8019662 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8019618:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 801961a:	2d00      	cmp	r5, #0
 801961c:	d0cf      	beq.n	80195be <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 801961e:	2b01      	cmp	r3, #1
 8019620:	d9d6      	bls.n	80195d0 <mem_sanity+0x5c>
 8019622:	4653      	mov	r3, sl
 8019624:	f240 2253 	movw	r2, #595	; 0x253
 8019628:	4938      	ldr	r1, [pc, #224]	; (801970c <mem_sanity+0x198>)
 801962a:	4630      	mov	r0, r6
 801962c:	f00b fa5e 	bl	8024aec <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8019630:	4620      	mov	r0, r4
 8019632:	f7ff ff6f 	bl	8019514 <mem_link_valid>
 8019636:	2800      	cmp	r0, #0
 8019638:	d1ce      	bne.n	80195d8 <mem_sanity+0x64>
 801963a:	4653      	mov	r3, sl
 801963c:	f240 2256 	movw	r2, #598	; 0x256
 8019640:	4933      	ldr	r1, [pc, #204]	; (8019710 <mem_sanity+0x19c>)
 8019642:	4630      	mov	r0, r6
 8019644:	f00b fa52 	bl	8024aec <iprintf>
 8019648:	e7c6      	b.n	80195d8 <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801964a:	4653      	mov	r3, sl
 801964c:	f240 224a 	movw	r2, #586	; 0x24a
 8019650:	4930      	ldr	r1, [pc, #192]	; (8019714 <mem_sanity+0x1a0>)
 8019652:	4630      	mov	r0, r6
 8019654:	f00b fa4a 	bl	8024aec <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019658:	8822      	ldrh	r2, [r4, #0]
 801965a:	f242 7310 	movw	r3, #10000	; 0x2710
 801965e:	429a      	cmp	r2, r3
 8019660:	d9da      	bls.n	8019618 <mem_sanity+0xa4>
 8019662:	4653      	mov	r3, sl
 8019664:	f240 224b 	movw	r2, #587	; 0x24b
 8019668:	492b      	ldr	r1, [pc, #172]	; (8019718 <mem_sanity+0x1a4>)
 801966a:	4630      	mov	r0, r6
 801966c:	f00b fa3e 	bl	8024aec <iprintf>
 8019670:	e7d2      	b.n	8019618 <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 8019672:	f242 7210 	movw	r2, #10000	; 0x2710
 8019676:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 8019678:	4294      	cmp	r4, r2
 801967a:	d006      	beq.n	801968a <mem_sanity+0x116>
 801967c:	4b1f      	ldr	r3, [pc, #124]	; (80196fc <mem_sanity+0x188>)
 801967e:	f240 225b 	movw	r2, #603	; 0x25b
 8019682:	4926      	ldr	r1, [pc, #152]	; (801971c <mem_sanity+0x1a8>)
 8019684:	481f      	ldr	r0, [pc, #124]	; (8019704 <mem_sanity+0x190>)
 8019686:	f00b fa31 	bl	8024aec <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 801968a:	7923      	ldrb	r3, [r4, #4]
 801968c:	2b01      	cmp	r3, #1
 801968e:	d006      	beq.n	801969e <mem_sanity+0x12a>
 8019690:	4b1a      	ldr	r3, [pc, #104]	; (80196fc <mem_sanity+0x188>)
 8019692:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8019696:	491a      	ldr	r1, [pc, #104]	; (8019700 <mem_sanity+0x18c>)
 8019698:	481a      	ldr	r0, [pc, #104]	; (8019704 <mem_sanity+0x190>)
 801969a:	f00b fa27 	bl	8024aec <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 801969e:	8862      	ldrh	r2, [r4, #2]
 80196a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80196a4:	429a      	cmp	r2, r3
 80196a6:	d006      	beq.n	80196b6 <mem_sanity+0x142>
 80196a8:	4b14      	ldr	r3, [pc, #80]	; (80196fc <mem_sanity+0x188>)
 80196aa:	f240 225d 	movw	r2, #605	; 0x25d
 80196ae:	4919      	ldr	r1, [pc, #100]	; (8019714 <mem_sanity+0x1a0>)
 80196b0:	4814      	ldr	r0, [pc, #80]	; (8019704 <mem_sanity+0x190>)
 80196b2:	f00b fa1b 	bl	8024aec <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80196b6:	8822      	ldrh	r2, [r4, #0]
 80196b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80196bc:	429a      	cmp	r2, r3
 80196be:	d101      	bne.n	80196c4 <mem_sanity+0x150>
}
 80196c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80196c4:	4b0d      	ldr	r3, [pc, #52]	; (80196fc <mem_sanity+0x188>)
 80196c6:	f240 225e 	movw	r2, #606	; 0x25e
 80196ca:	4913      	ldr	r1, [pc, #76]	; (8019718 <mem_sanity+0x1a4>)
 80196cc:	480d      	ldr	r0, [pc, #52]	; (8019704 <mem_sanity+0x190>)
}
 80196ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80196d2:	f00b ba0b 	b.w	8024aec <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 80196d6:	4b09      	ldr	r3, [pc, #36]	; (80196fc <mem_sanity+0x188>)
 80196d8:	f240 2242 	movw	r2, #578	; 0x242
 80196dc:	490e      	ldr	r1, [pc, #56]	; (8019718 <mem_sanity+0x1a4>)
 80196de:	4809      	ldr	r0, [pc, #36]	; (8019704 <mem_sanity+0x190>)
 80196e0:	f00b fa04 	bl	8024aec <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 80196e4:	8834      	ldrh	r4, [r6, #0]
 80196e6:	e75e      	b.n	80195a6 <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 80196e8:	4b04      	ldr	r3, [pc, #16]	; (80196fc <mem_sanity+0x188>)
 80196ea:	f240 2241 	movw	r2, #577	; 0x241
 80196ee:	4909      	ldr	r1, [pc, #36]	; (8019714 <mem_sanity+0x1a0>)
 80196f0:	4804      	ldr	r0, [pc, #16]	; (8019704 <mem_sanity+0x190>)
 80196f2:	f00b f9fb 	bl	8024aec <iprintf>
 80196f6:	e750      	b.n	801959a <mem_sanity+0x26>
 80196f8:	2001ec50 	.word	0x2001ec50
 80196fc:	08042564 	.word	0x08042564
 8019700:	08042594 	.word	0x08042594
 8019704:	0802b818 	.word	0x0802b818
 8019708:	080425fc 	.word	0x080425fc
 801970c:	08042614 	.word	0x08042614
 8019710:	08042630 	.word	0x08042630
 8019714:	080425ac 	.word	0x080425ac
 8019718:	080425c8 	.word	0x080425c8
 801971c:	08042648 	.word	0x08042648
 8019720:	2001ec54 	.word	0x2001ec54
 8019724:	080425e4 	.word	0x080425e4

08019728 <mem_overflow_check_raw>:
{
 8019728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801972c:	1e4c      	subs	r4, r1, #1
 801972e:	310f      	adds	r1, #15
 8019730:	b0a3      	sub	sp, #140	; 0x8c
 8019732:	4606      	mov	r6, r0
 8019734:	4615      	mov	r5, r2
 8019736:	4698      	mov	r8, r3
 8019738:	4404      	add	r4, r0
 801973a:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801973c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80197b4 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 8019740:	f8df b074 	ldr.w	fp, [pc, #116]	; 80197b8 <mem_overflow_check_raw+0x90>
 8019744:	f8df a074 	ldr.w	sl, [pc, #116]	; 80197bc <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8019748:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801974c:	464a      	mov	r2, r9
 801974e:	2180      	movs	r1, #128	; 0x80
 8019750:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8019752:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019754:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8019756:	d009      	beq.n	801976c <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019758:	f8cd 8000 	str.w	r8, [sp]
 801975c:	f00b fb84 	bl	8024e68 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8019760:	465b      	mov	r3, fp
 8019762:	226d      	movs	r2, #109	; 0x6d
 8019764:	a902      	add	r1, sp, #8
 8019766:	4650      	mov	r0, sl
 8019768:	f00b f9c0 	bl	8024aec <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 801976c:	42bc      	cmp	r4, r7
 801976e:	d1eb      	bne.n	8019748 <mem_overflow_check_raw+0x20>
 8019770:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019774:	4f0e      	ldr	r7, [pc, #56]	; (80197b0 <mem_overflow_check_raw+0x88>)
 8019776:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 8019778:	f8df a03c 	ldr.w	sl, [pc, #60]	; 80197b8 <mem_overflow_check_raw+0x90>
 801977c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80197bc <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8019780:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019784:	463a      	mov	r2, r7
 8019786:	2180      	movs	r1, #128	; 0x80
 8019788:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801978a:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801978c:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 801978e:	d009      	beq.n	80197a4 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019790:	f8cd 8000 	str.w	r8, [sp]
 8019794:	f00b fb68 	bl	8024e68 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8019798:	4653      	mov	r3, sl
 801979a:	2278      	movs	r2, #120	; 0x78
 801979c:	a902      	add	r1, sp, #8
 801979e:	4648      	mov	r0, r9
 80197a0:	f00b f9a4 	bl	8024aec <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 80197a4:	42b4      	cmp	r4, r6
 80197a6:	d1eb      	bne.n	8019780 <mem_overflow_check_raw+0x58>
}
 80197a8:	b023      	add	sp, #140	; 0x8c
 80197aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197ae:	bf00      	nop
 80197b0:	0804267c 	.word	0x0804267c
 80197b4:	0804265c 	.word	0x0804265c
 80197b8:	08042564 	.word	0x08042564
 80197bc:	0802b818 	.word	0x0802b818

080197c0 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80197c0:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 80197c4:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80197c6:	f840 3c10 	str.w	r3, [r0, #-16]
 80197ca:	f840 3c0c 	str.w	r3, [r0, #-12]
 80197ce:	f840 3c08 	str.w	r3, [r0, #-8]
 80197d2:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 80197d6:	5043      	str	r3, [r0, r1]
 80197d8:	6053      	str	r3, [r2, #4]
 80197da:	6093      	str	r3, [r2, #8]
 80197dc:	60d3      	str	r3, [r2, #12]
}
 80197de:	4770      	bx	lr

080197e0 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80197e0:	4b14      	ldr	r3, [pc, #80]	; (8019834 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 80197e2:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
 80197e6:	2000      	movs	r0, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80197e8:	4913      	ldr	r1, [pc, #76]	; (8019838 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80197ea:	f023 0303 	bic.w	r3, r3, #3
{
 80197ee:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 80197f0:	601a      	str	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 80197f2:	441a      	add	r2, r3
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80197f4:	4c11      	ldr	r4, [pc, #68]	; (801983c <mem_init+0x5c>)
  mem->used = 0;
 80197f6:	7118      	strb	r0, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80197f8:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 80197fa:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 80197fe:	4910      	ldr	r1, [pc, #64]	; (8019840 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019800:	6023      	str	r3, [r4, #0]
  ram_end->used = 1;
 8019802:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8019804:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  ram_end->used = 1;
 8019808:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  MEM_SANITY();
 801980c:	f7ff feb2 	bl	8019574 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 8019810:	6822      	ldr	r2, [r4, #0]
 8019812:	4b0c      	ldr	r3, [pc, #48]	; (8019844 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019814:	480c      	ldr	r0, [pc, #48]	; (8019848 <mem_init+0x68>)
  lfree = (struct mem *)(void *)ram;
 8019816:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019818:	f009 fc84 	bl	8023124 <sys_mutex_new>
 801981c:	b900      	cbnz	r0, 8019820 <mem_init+0x40>
}
 801981e:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8019820:	4b0a      	ldr	r3, [pc, #40]	; (801984c <mem_init+0x6c>)
 8019822:	f240 221f 	movw	r2, #543	; 0x21f
 8019826:	490a      	ldr	r1, [pc, #40]	; (8019850 <mem_init+0x70>)
 8019828:	480a      	ldr	r0, [pc, #40]	; (8019854 <mem_init+0x74>)
}
 801982a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801982e:	f00b b95d 	b.w	8024aec <iprintf>
 8019832:	bf00      	nop
 8019834:	2001ec5b 	.word	0x2001ec5b
 8019838:	2001ec54 	.word	0x2001ec54
 801983c:	2001ec50 	.word	0x2001ec50
 8019840:	27102710 	.word	0x27102710
 8019844:	2001ec44 	.word	0x2001ec44
 8019848:	2001ec4c 	.word	0x2001ec4c
 801984c:	08042564 	.word	0x08042564
 8019850:	0804269c 	.word	0x0804269c
 8019854:	0802b818 	.word	0x0802b818

08019858 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8019858:	2800      	cmp	r0, #0
 801985a:	d07f      	beq.n	801995c <mem_free+0x104>
{
 801985c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8019860:	f010 0803 	ands.w	r8, r0, #3
 8019864:	4604      	mov	r4, r0
 8019866:	d170      	bne.n	801994a <mem_free+0xf2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8019868:	4e5c      	ldr	r6, [pc, #368]	; (80199dc <mem_free+0x184>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801986a:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801986e:	6833      	ldr	r3, [r6, #0]
 8019870:	42ab      	cmp	r3, r5
 8019872:	d805      	bhi.n	8019880 <mem_free+0x28>
 8019874:	4f5a      	ldr	r7, [pc, #360]	; (80199e0 <mem_free+0x188>)
 8019876:	f100 030c 	add.w	r3, r0, #12
 801987a:	683a      	ldr	r2, [r7, #0]
 801987c:	429a      	cmp	r2, r3
 801987e:	d208      	bcs.n	8019892 <mem_free+0x3a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8019880:	4b58      	ldr	r3, [pc, #352]	; (80199e4 <mem_free+0x18c>)
 8019882:	f240 227f 	movw	r2, #639	; 0x27f
 8019886:	4958      	ldr	r1, [pc, #352]	; (80199e8 <mem_free+0x190>)
 8019888:	4858      	ldr	r0, [pc, #352]	; (80199ec <mem_free+0x194>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801988a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801988e:	f00b b92d 	b.w	8024aec <iprintf>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019892:	4b57      	ldr	r3, [pc, #348]	; (80199f0 <mem_free+0x198>)
 8019894:	4a57      	ldr	r2, [pc, #348]	; (80199f4 <mem_free+0x19c>)
 8019896:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801989a:	f7ff ff45 	bl	8019728 <mem_overflow_check_raw>
  if (!mem->used) {
 801989e:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	f000 8082 	beq.w	80199ac <mem_free+0x154>
  if (!mem_link_valid(mem)) {
 80198a8:	4628      	mov	r0, r5
 80198aa:	f7ff fe33 	bl	8019514 <mem_link_valid>
 80198ae:	2800      	cmp	r0, #0
 80198b0:	f000 8085 	beq.w	80199be <mem_free+0x166>
  mem->used = 0;
 80198b4:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 80198b8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8019a18 <mem_free+0x1c0>
 80198bc:	f8d8 3000 	ldr.w	r3, [r8]
 80198c0:	42ab      	cmp	r3, r5
 80198c2:	d901      	bls.n	80198c8 <mem_free+0x70>
    lfree = mem;
 80198c4:	f8c8 5000 	str.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80198c8:	6833      	ldr	r3, [r6, #0]
 80198ca:	429d      	cmp	r5, r3
 80198cc:	d351      	bcc.n	8019972 <mem_free+0x11a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80198ce:	683b      	ldr	r3, [r7, #0]
 80198d0:	429d      	cmp	r5, r3
 80198d2:	d258      	bcs.n	8019986 <mem_free+0x12e>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80198d4:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 80198d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80198dc:	4293      	cmp	r3, r2
 80198de:	d83e      	bhi.n	801995e <mem_free+0x106>
  return (struct mem *)(void *)&ram[ptr];
 80198e0:	6832      	ldr	r2, [r6, #0]
 80198e2:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80198e4:	429d      	cmp	r5, r3
 80198e6:	d013      	beq.n	8019910 <mem_free+0xb8>
 80198e8:	7919      	ldrb	r1, [r3, #4]
 80198ea:	b989      	cbnz	r1, 8019910 <mem_free+0xb8>
 80198ec:	6839      	ldr	r1, [r7, #0]
 80198ee:	428b      	cmp	r3, r1
 80198f0:	d00e      	beq.n	8019910 <mem_free+0xb8>
    if (lfree == nmem) {
 80198f2:	f8d8 1000 	ldr.w	r1, [r8]
 80198f6:	428b      	cmp	r3, r1
 80198f8:	d06d      	beq.n	80199d6 <mem_free+0x17e>
    mem->next = nmem->next;
 80198fa:	8819      	ldrh	r1, [r3, #0]
 80198fc:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8019900:	f242 7110 	movw	r1, #10000	; 0x2710
 8019904:	881b      	ldrh	r3, [r3, #0]
 8019906:	428b      	cmp	r3, r1
 8019908:	d002      	beq.n	8019910 <mem_free+0xb8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801990a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 801990c:	1aa9      	subs	r1, r5, r2
 801990e:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8019910:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 8019914:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8019916:	429d      	cmp	r5, r3
 8019918:	d010      	beq.n	801993c <mem_free+0xe4>
 801991a:	7918      	ldrb	r0, [r3, #4]
 801991c:	b970      	cbnz	r0, 801993c <mem_free+0xe4>
    if (lfree == mem) {
 801991e:	f8d8 0000 	ldr.w	r0, [r8]
 8019922:	4285      	cmp	r5, r0
 8019924:	d054      	beq.n	80199d0 <mem_free+0x178>
    pmem->next = mem->next;
 8019926:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801992a:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 801992e:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8019930:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8019934:	4283      	cmp	r3, r0
 8019936:	d001      	beq.n	801993c <mem_free+0xe4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8019938:	441a      	add	r2, r3
 801993a:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 801993c:	f7ff fe1a 	bl	8019574 <mem_sanity>
  mem_free_count = 1;
 8019940:	4b2d      	ldr	r3, [pc, #180]	; (80199f8 <mem_free+0x1a0>)
 8019942:	2201      	movs	r2, #1
 8019944:	701a      	strb	r2, [r3, #0]
}
 8019946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801994a:	4b26      	ldr	r3, [pc, #152]	; (80199e4 <mem_free+0x18c>)
 801994c:	f240 2273 	movw	r2, #627	; 0x273
 8019950:	492a      	ldr	r1, [pc, #168]	; (80199fc <mem_free+0x1a4>)
 8019952:	4826      	ldr	r0, [pc, #152]	; (80199ec <mem_free+0x194>)
}
 8019954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8019958:	f00b b8c8 	b.w	8024aec <iprintf>
 801995c:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801995e:	4b21      	ldr	r3, [pc, #132]	; (80199e4 <mem_free+0x18c>)
 8019960:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8019964:	4926      	ldr	r1, [pc, #152]	; (8019a00 <mem_free+0x1a8>)
 8019966:	4821      	ldr	r0, [pc, #132]	; (80199ec <mem_free+0x194>)
 8019968:	f00b f8c0 	bl	8024aec <iprintf>
  nmem = ptr_to_mem(mem->next);
 801996c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8019970:	e7b6      	b.n	80198e0 <mem_free+0x88>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8019972:	4b1c      	ldr	r3, [pc, #112]	; (80199e4 <mem_free+0x18c>)
 8019974:	f240 12df 	movw	r2, #479	; 0x1df
 8019978:	4922      	ldr	r1, [pc, #136]	; (8019a04 <mem_free+0x1ac>)
 801997a:	481c      	ldr	r0, [pc, #112]	; (80199ec <mem_free+0x194>)
 801997c:	f00b f8b6 	bl	8024aec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8019980:	683b      	ldr	r3, [r7, #0]
 8019982:	429d      	cmp	r5, r3
 8019984:	d306      	bcc.n	8019994 <mem_free+0x13c>
 8019986:	4b17      	ldr	r3, [pc, #92]	; (80199e4 <mem_free+0x18c>)
 8019988:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801998c:	491e      	ldr	r1, [pc, #120]	; (8019a08 <mem_free+0x1b0>)
 801998e:	4817      	ldr	r0, [pc, #92]	; (80199ec <mem_free+0x194>)
 8019990:	f00b f8ac 	bl	8024aec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8019994:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d09b      	beq.n	80198d4 <mem_free+0x7c>
 801999c:	4b11      	ldr	r3, [pc, #68]	; (80199e4 <mem_free+0x18c>)
 801999e:	f240 12e1 	movw	r2, #481	; 0x1e1
 80199a2:	491a      	ldr	r1, [pc, #104]	; (8019a0c <mem_free+0x1b4>)
 80199a4:	4811      	ldr	r0, [pc, #68]	; (80199ec <mem_free+0x194>)
 80199a6:	f00b f8a1 	bl	8024aec <iprintf>
 80199aa:	e793      	b.n	80198d4 <mem_free+0x7c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80199ac:	4b0d      	ldr	r3, [pc, #52]	; (80199e4 <mem_free+0x18c>)
 80199ae:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80199b2:	4917      	ldr	r1, [pc, #92]	; (8019a10 <mem_free+0x1b8>)
 80199b4:	480d      	ldr	r0, [pc, #52]	; (80199ec <mem_free+0x194>)
}
 80199b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80199ba:	f00b b897 	b.w	8024aec <iprintf>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80199be:	4b09      	ldr	r3, [pc, #36]	; (80199e4 <mem_free+0x18c>)
 80199c0:	f240 2295 	movw	r2, #661	; 0x295
 80199c4:	4913      	ldr	r1, [pc, #76]	; (8019a14 <mem_free+0x1bc>)
 80199c6:	4809      	ldr	r0, [pc, #36]	; (80199ec <mem_free+0x194>)
}
 80199c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80199cc:	f00b b88e 	b.w	8024aec <iprintf>
      lfree = pmem;
 80199d0:	f8c8 3000 	str.w	r3, [r8]
 80199d4:	e7a7      	b.n	8019926 <mem_free+0xce>
      lfree = mem;
 80199d6:	f8c8 5000 	str.w	r5, [r8]
 80199da:	e78e      	b.n	80198fa <mem_free+0xa2>
 80199dc:	2001ec50 	.word	0x2001ec50
 80199e0:	2001ec54 	.word	0x2001ec54
 80199e4:	08042564 	.word	0x08042564
 80199e8:	080426dc 	.word	0x080426dc
 80199ec:	0802b818 	.word	0x0802b818
 80199f0:	08029460 	.word	0x08029460
 80199f4:	080426f8 	.word	0x080426f8
 80199f8:	2001ec48 	.word	0x2001ec48
 80199fc:	080426b8 	.word	0x080426b8
 8019a00:	080427ac 	.word	0x080427ac
 8019a04:	0804275c 	.word	0x0804275c
 8019a08:	08042774 	.word	0x08042774
 8019a0c:	08042790 	.word	0x08042790
 8019a10:	08042700 	.word	0x08042700
 8019a14:	08042728 	.word	0x08042728
 8019a18:	2001ec44 	.word	0x2001ec44

08019a1c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8019a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019a20:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8019a22:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019a26:	f024 0403 	bic.w	r4, r4, #3
 8019a2a:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8019a2c:	2c0c      	cmp	r4, #12
 8019a2e:	bf38      	it	cc
 8019a30:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8019a32:	3420      	adds	r4, #32
 8019a34:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8019a36:	429c      	cmp	r4, r3
 8019a38:	d87a      	bhi.n	8019b30 <mem_trim+0x114>
 8019a3a:	42a1      	cmp	r1, r4
 8019a3c:	460e      	mov	r6, r1
 8019a3e:	d877      	bhi.n	8019b30 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8019a40:	4f58      	ldr	r7, [pc, #352]	; (8019ba4 <mem_trim+0x188>)
 8019a42:	4605      	mov	r5, r0
 8019a44:	683b      	ldr	r3, [r7, #0]
 8019a46:	4283      	cmp	r3, r0
 8019a48:	d803      	bhi.n	8019a52 <mem_trim+0x36>
 8019a4a:	4b57      	ldr	r3, [pc, #348]	; (8019ba8 <mem_trim+0x18c>)
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	4283      	cmp	r3, r0
 8019a50:	d810      	bhi.n	8019a74 <mem_trim+0x58>
 8019a52:	4b56      	ldr	r3, [pc, #344]	; (8019bac <mem_trim+0x190>)
 8019a54:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019a58:	4955      	ldr	r1, [pc, #340]	; (8019bb0 <mem_trim+0x194>)
 8019a5a:	4856      	ldr	r0, [pc, #344]	; (8019bb4 <mem_trim+0x198>)
 8019a5c:	f00b f846 	bl	8024aec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8019a60:	683b      	ldr	r3, [r7, #0]
 8019a62:	42ab      	cmp	r3, r5
 8019a64:	d902      	bls.n	8019a6c <mem_trim+0x50>
{
 8019a66:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8019a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8019a6c:	4b4e      	ldr	r3, [pc, #312]	; (8019ba8 <mem_trim+0x18c>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	429d      	cmp	r5, r3
 8019a72:	d2f8      	bcs.n	8019a66 <mem_trim+0x4a>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019a74:	4b50      	ldr	r3, [pc, #320]	; (8019bb8 <mem_trim+0x19c>)
 8019a76:	4628      	mov	r0, r5
 8019a78:	4a50      	ldr	r2, [pc, #320]	; (8019bbc <mem_trim+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019a7a:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019a7e:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 8019a82:	f7ff fe51 	bl	8019728 <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 8019a86:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019a88:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 8019a8c:	eba8 0802 	sub.w	r8, r8, r2
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019a90:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 8019a94:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019a98:	eba3 0308 	sub.w	r3, r3, r8
 8019a9c:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8019a9e:	429c      	cmp	r4, r3
 8019aa0:	d83d      	bhi.n	8019b1e <mem_trim+0x102>
  if (newsize == size) {
 8019aa2:	d0e0      	beq.n	8019a66 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 8019aa4:	eb02 0901 	add.w	r9, r2, r1
  if (mem2->used == 0) {
 8019aa8:	f899 0004 	ldrb.w	r0, [r9, #4]
 8019aac:	2800      	cmp	r0, #0
 8019aae:	d142      	bne.n	8019b36 <mem_trim+0x11a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019ab0:	f242 7310 	movw	r3, #10000	; 0x2710
 8019ab4:	4299      	cmp	r1, r3
 8019ab6:	d061      	beq.n	8019b7c <mem_trim+0x160>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019ab8:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 8019abc:	4940      	ldr	r1, [pc, #256]	; (8019bc0 <mem_trim+0x1a4>)
    next = mem2->next;
 8019abe:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019ac2:	441c      	add	r4, r3
    if (lfree == mem2) {
 8019ac4:	680b      	ldr	r3, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019ac6:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8019ac8:	454b      	cmp	r3, r9
  return (struct mem *)(void *)&ram[ptr];
 8019aca:	eb02 0304 	add.w	r3, r2, r4
    if (lfree == mem2) {
 8019ace:	d053      	beq.n	8019b78 <mem_trim+0x15c>
    mem2->used = 0;
 8019ad0:	2100      	movs	r1, #0
    mem2->next = next;
 8019ad2:	8018      	strh	r0, [r3, #0]
    mem2->prev = ptr;
 8019ad4:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 8019ad8:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019ada:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 8019ade:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019ae2:	881b      	ldrh	r3, [r3, #0]
 8019ae4:	428b      	cmp	r3, r1
 8019ae6:	d001      	beq.n	8019aec <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8019ae8:	4413      	add	r3, r2
 8019aea:	805c      	strh	r4, [r3, #2]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019aec:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 8019af0:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 8019af2:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019af6:	f845 3c10 	str.w	r3, [r5, #-16]
 8019afa:	f845 3c0c 	str.w	r3, [r5, #-12]
 8019afe:	f845 3c08 	str.w	r3, [r5, #-8]
 8019b02:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 8019b06:	51ab      	str	r3, [r5, r6]
 8019b08:	6053      	str	r3, [r2, #4]
 8019b0a:	6093      	str	r3, [r2, #8]
 8019b0c:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 8019b0e:	f7ff fd31 	bl	8019574 <mem_sanity>
  mem_free_count = 1;
 8019b12:	4b2c      	ldr	r3, [pc, #176]	; (8019bc4 <mem_trim+0x1a8>)
 8019b14:	2201      	movs	r2, #1
  return rmem;
 8019b16:	4628      	mov	r0, r5
  mem_free_count = 1;
 8019b18:	701a      	strb	r2, [r3, #0]
}
 8019b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8019b1e:	4b23      	ldr	r3, [pc, #140]	; (8019bac <mem_trim+0x190>)
 8019b20:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8019b24:	4928      	ldr	r1, [pc, #160]	; (8019bc8 <mem_trim+0x1ac>)
 8019b26:	4823      	ldr	r0, [pc, #140]	; (8019bb4 <mem_trim+0x198>)
 8019b28:	f00a ffe0 	bl	8024aec <iprintf>
    return NULL;
 8019b2c:	2000      	movs	r0, #0
 8019b2e:	e79b      	b.n	8019a68 <mem_trim+0x4c>
    return NULL;
 8019b30:	2000      	movs	r0, #0
}
 8019b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8019b36:	f104 0014 	add.w	r0, r4, #20
 8019b3a:	4298      	cmp	r0, r3
 8019b3c:	d8d6      	bhi.n	8019aec <mem_trim+0xd0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019b3e:	f108 0308 	add.w	r3, r8, #8
 8019b42:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019b44:	f242 7310 	movw	r3, #10000	; 0x2710
 8019b48:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019b4a:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019b4c:	d01f      	beq.n	8019b8e <mem_trim+0x172>
    if (mem2 < lfree) {
 8019b4e:	481c      	ldr	r0, [pc, #112]	; (8019bc0 <mem_trim+0x1a4>)
  return (struct mem *)(void *)&ram[ptr];
 8019b50:	1913      	adds	r3, r2, r4
    if (mem2 < lfree) {
 8019b52:	6807      	ldr	r7, [r0, #0]
 8019b54:	429f      	cmp	r7, r3
 8019b56:	d900      	bls.n	8019b5a <mem_trim+0x13e>
      lfree = mem2;
 8019b58:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 8019b5a:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 8019b5c:	2100      	movs	r1, #0
    mem2->prev = ptr;
 8019b5e:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 8019b62:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019b64:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 8019b68:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019b6c:	881b      	ldrh	r3, [r3, #0]
 8019b6e:	428b      	cmp	r3, r1
 8019b70:	d0bc      	beq.n	8019aec <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8019b72:	441a      	add	r2, r3
 8019b74:	8054      	strh	r4, [r2, #2]
 8019b76:	e7b9      	b.n	8019aec <mem_trim+0xd0>
      lfree = ptr_to_mem(ptr2);
 8019b78:	600b      	str	r3, [r1, #0]
 8019b7a:	e7a9      	b.n	8019ad0 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019b7c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8019b80:	4b0a      	ldr	r3, [pc, #40]	; (8019bac <mem_trim+0x190>)
 8019b82:	4912      	ldr	r1, [pc, #72]	; (8019bcc <mem_trim+0x1b0>)
 8019b84:	480b      	ldr	r0, [pc, #44]	; (8019bb4 <mem_trim+0x198>)
 8019b86:	f00a ffb1 	bl	8024aec <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8019b8a:	683a      	ldr	r2, [r7, #0]
 8019b8c:	e794      	b.n	8019ab8 <mem_trim+0x9c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019b8e:	f240 3216 	movw	r2, #790	; 0x316
 8019b92:	490e      	ldr	r1, [pc, #56]	; (8019bcc <mem_trim+0x1b0>)
 8019b94:	4b05      	ldr	r3, [pc, #20]	; (8019bac <mem_trim+0x190>)
 8019b96:	4807      	ldr	r0, [pc, #28]	; (8019bb4 <mem_trim+0x198>)
 8019b98:	f00a ffa8 	bl	8024aec <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8019b9c:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 8019b9e:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 8019ba2:	e7d4      	b.n	8019b4e <mem_trim+0x132>
 8019ba4:	2001ec50 	.word	0x2001ec50
 8019ba8:	2001ec54 	.word	0x2001ec54
 8019bac:	08042564 	.word	0x08042564
 8019bb0:	080427d8 	.word	0x080427d8
 8019bb4:	0802b818 	.word	0x0802b818
 8019bb8:	08029460 	.word	0x08029460
 8019bbc:	080426f8 	.word	0x080426f8
 8019bc0:	2001ec44 	.word	0x2001ec44
 8019bc4:	2001ec48 	.word	0x2001ec48
 8019bc8:	080427f0 	.word	0x080427f0
 8019bcc:	08042810 	.word	0x08042810

08019bd0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8019bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8019bd4:	4680      	mov	r8, r0
 8019bd6:	2800      	cmp	r0, #0
 8019bd8:	f000 80b2 	beq.w	8019d40 <mem_malloc+0x170>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8019bdc:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8019be0:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8019be4:	f02b 0b03 	bic.w	fp, fp, #3
 8019be8:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 8019bec:	f1bb 0f0c 	cmp.w	fp, #12
 8019bf0:	bf38      	it	cc
 8019bf2:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8019bf6:	f10b 0720 	add.w	r7, fp, #32
 8019bfa:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8019bfc:	42a7      	cmp	r7, r4
 8019bfe:	f200 809f 	bhi.w	8019d40 <mem_malloc+0x170>
 8019c02:	42b8      	cmp	r0, r7
 8019c04:	bf94      	ite	ls
 8019c06:	f04f 0a00 	movls.w	sl, #0
 8019c0a:	f04f 0a01 	movhi.w	sl, #1
 8019c0e:	f1ba 0f00 	cmp.w	sl, #0
 8019c12:	f040 8095 	bne.w	8019d40 <mem_malloc+0x170>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8019c16:	4866      	ldr	r0, [pc, #408]	; (8019db0 <mem_malloc+0x1e0>)
 8019c18:	f009 fa94 	bl	8023144 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8019c1c:	4b65      	ldr	r3, [pc, #404]	; (8019db4 <mem_malloc+0x1e4>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019c1e:	eba4 0c07 	sub.w	ip, r4, r7
 8019c22:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8019ddc <mem_malloc+0x20c>
  return (mem_size_t)((u8_t *)mem - ram);
 8019c26:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019c28:	f06f 0e07 	mvn.w	lr, #7
 8019c2c:	4d62      	ldr	r5, [pc, #392]	; (8019db8 <mem_malloc+0x1e8>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019c2e:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 8019c32:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019c34:	b2b3      	uxth	r3, r6
 8019c36:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8019c38:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019c3a:	d97a      	bls.n	8019d32 <mem_malloc+0x162>
      mem_free_count = 0;
 8019c3c:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019c40:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 8019c44:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 8019c46:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 8019c48:	2900      	cmp	r1, #0
 8019c4a:	d1f0      	bne.n	8019c2e <mem_malloc+0x5e>
      if ((!mem->used) &&
 8019c4c:	7923      	ldrb	r3, [r4, #4]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d16b      	bne.n	8019d2a <mem_malloc+0x15a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019c52:	8821      	ldrh	r1, [r4, #0]
 8019c54:	440a      	add	r2, r1
 8019c56:	460b      	mov	r3, r1
      if ((!mem->used) &&
 8019c58:	42ba      	cmp	r2, r7
 8019c5a:	d3ec      	bcc.n	8019c36 <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8019c5c:	f107 0314 	add.w	r3, r7, #20
 8019c60:	429a      	cmp	r2, r3
 8019c62:	d371      	bcc.n	8019d48 <mem_malloc+0x178>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8019c64:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019c68:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8019c6c:	44b2      	add	sl, r6
 8019c6e:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019c72:	459a      	cmp	sl, r3
 8019c74:	f000 808f 	beq.w	8019d96 <mem_malloc+0x1c6>
  return (struct mem *)(void *)&ram[ptr];
 8019c78:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8019c80:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 8019c84:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 8019c88:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 8019c8a:	2301      	movs	r3, #1
          mem->next = ptr2;
 8019c8c:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 8019c90:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8019c92:	f830 300a 	ldrh.w	r3, [r0, sl]
 8019c96:	4293      	cmp	r3, r2
 8019c98:	d002      	beq.n	8019ca0 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8019c9a:	4418      	add	r0, r3
 8019c9c:	f8a0 a002 	strh.w	sl, [r0, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8019ca0:	f8d9 3000 	ldr.w	r3, [r9]
 8019ca4:	42a3      	cmp	r3, r4
 8019ca6:	f040 8081 	bne.w	8019dac <mem_malloc+0x1dc>
  return (struct mem *)(void *)&ram[ptr];
 8019caa:	4b42      	ldr	r3, [pc, #264]	; (8019db4 <mem_malloc+0x1e4>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 8019cac:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 8019cae:	4e43      	ldr	r6, [pc, #268]	; (8019dbc <mem_malloc+0x1ec>)
  return (struct mem *)(void *)&ram[ptr];
 8019cb0:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 8019cb4:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 8019cb6:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 8019cba:	791a      	ldrb	r2, [r3, #4]
 8019cbc:	b942      	cbnz	r2, 8019cd0 <mem_malloc+0x100>
 8019cbe:	e009      	b.n	8019cd4 <mem_malloc+0x104>
            mem_free_count = 0;
 8019cc0:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 8019cc2:	782a      	ldrb	r2, [r5, #0]
 8019cc4:	2a00      	cmp	r2, #0
 8019cc6:	d142      	bne.n	8019d4e <mem_malloc+0x17e>
  return (struct mem *)(void *)&ram[ptr];
 8019cc8:	881b      	ldrh	r3, [r3, #0]
 8019cca:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 8019ccc:	791a      	ldrb	r2, [r3, #4]
 8019cce:	b10a      	cbz	r2, 8019cd4 <mem_malloc+0x104>
 8019cd0:	4299      	cmp	r1, r3
 8019cd2:	d1f5      	bne.n	8019cc0 <mem_malloc+0xf0>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 8019cd4:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8019cd8:	f8d9 3000 	ldr.w	r3, [r9]
 8019cdc:	4299      	cmp	r1, r3
 8019cde:	d004      	beq.n	8019cea <mem_malloc+0x11a>
 8019ce0:	f8d9 3000 	ldr.w	r3, [r9]
 8019ce4:	791b      	ldrb	r3, [r3, #4]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d14d      	bne.n	8019d86 <mem_malloc+0x1b6>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8019cea:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 8019cec:	4830      	ldr	r0, [pc, #192]	; (8019db0 <mem_malloc+0x1e0>)
 8019cee:	f009 fa2f 	bl	8023150 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8019cf2:	6833      	ldr	r3, [r6, #0]
 8019cf4:	4427      	add	r7, r4
 8019cf6:	42bb      	cmp	r3, r7
 8019cf8:	d33d      	bcc.n	8019d76 <mem_malloc+0x1a6>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8019cfa:	07a3      	lsls	r3, r4, #30
 8019cfc:	d12c      	bne.n	8019d58 <mem_malloc+0x188>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8019cfe:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019d02:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 8019d06:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 8019d0a:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019d0e:	60a3      	str	r3, [r4, #8]
 8019d10:	60e3      	str	r3, [r4, #12]
 8019d12:	6123      	str	r3, [r4, #16]
 8019d14:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 8019d16:	f845 3008 	str.w	r3, [r5, r8]
 8019d1a:	6053      	str	r3, [r2, #4]
 8019d1c:	6093      	str	r3, [r2, #8]
 8019d1e:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 8019d20:	f7ff fc28 	bl	8019574 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8019d24:	4628      	mov	r0, r5
 8019d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019d2a:	8826      	ldrh	r6, [r4, #0]
 8019d2c:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019d2e:	459c      	cmp	ip, r3
 8019d30:	d884      	bhi.n	8019c3c <mem_malloc+0x6c>
  return NULL;
 8019d32:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 8019d34:	481e      	ldr	r0, [pc, #120]	; (8019db0 <mem_malloc+0x1e0>)
 8019d36:	f009 fa0b 	bl	8023150 <sys_mutex_unlock>
}
 8019d3a:	4628      	mov	r0, r5
 8019d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 8019d40:	2500      	movs	r5, #0
}
 8019d42:	4628      	mov	r0, r5
 8019d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 8019d48:	2301      	movs	r3, #1
 8019d4a:	7123      	strb	r3, [r4, #4]
 8019d4c:	e7a8      	b.n	8019ca0 <mem_malloc+0xd0>
        if (mem == lfree) {
 8019d4e:	f8d9 3000 	ldr.w	r3, [r9]
 8019d52:	42a3      	cmp	r3, r4
 8019d54:	d0af      	beq.n	8019cb6 <mem_malloc+0xe6>
 8019d56:	e7c8      	b.n	8019cea <mem_malloc+0x11a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8019d58:	4b19      	ldr	r3, [pc, #100]	; (8019dc0 <mem_malloc+0x1f0>)
 8019d5a:	f240 32bb 	movw	r2, #955	; 0x3bb
 8019d5e:	4919      	ldr	r1, [pc, #100]	; (8019dc4 <mem_malloc+0x1f4>)
 8019d60:	4819      	ldr	r0, [pc, #100]	; (8019dc8 <mem_malloc+0x1f8>)
 8019d62:	f00a fec3 	bl	8024aec <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8019d66:	4b16      	ldr	r3, [pc, #88]	; (8019dc0 <mem_malloc+0x1f0>)
 8019d68:	f240 32bd 	movw	r2, #957	; 0x3bd
 8019d6c:	4917      	ldr	r1, [pc, #92]	; (8019dcc <mem_malloc+0x1fc>)
 8019d6e:	4816      	ldr	r0, [pc, #88]	; (8019dc8 <mem_malloc+0x1f8>)
 8019d70:	f00a febc 	bl	8024aec <iprintf>
 8019d74:	e7c3      	b.n	8019cfe <mem_malloc+0x12e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8019d76:	4b12      	ldr	r3, [pc, #72]	; (8019dc0 <mem_malloc+0x1f0>)
 8019d78:	f240 32b9 	movw	r2, #953	; 0x3b9
 8019d7c:	4914      	ldr	r1, [pc, #80]	; (8019dd0 <mem_malloc+0x200>)
 8019d7e:	4812      	ldr	r0, [pc, #72]	; (8019dc8 <mem_malloc+0x1f8>)
 8019d80:	f00a feb4 	bl	8024aec <iprintf>
 8019d84:	e7b9      	b.n	8019cfa <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8019d86:	4b0e      	ldr	r3, [pc, #56]	; (8019dc0 <mem_malloc+0x1f0>)
 8019d88:	f240 32b5 	movw	r2, #949	; 0x3b5
 8019d8c:	4911      	ldr	r1, [pc, #68]	; (8019dd4 <mem_malloc+0x204>)
 8019d8e:	480e      	ldr	r0, [pc, #56]	; (8019dc8 <mem_malloc+0x1f8>)
 8019d90:	f00a feac 	bl	8024aec <iprintf>
 8019d94:	e7a9      	b.n	8019cea <mem_malloc+0x11a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019d96:	4b0a      	ldr	r3, [pc, #40]	; (8019dc0 <mem_malloc+0x1f0>)
 8019d98:	f240 3287 	movw	r2, #903	; 0x387
 8019d9c:	490e      	ldr	r1, [pc, #56]	; (8019dd8 <mem_malloc+0x208>)
 8019d9e:	480a      	ldr	r0, [pc, #40]	; (8019dc8 <mem_malloc+0x1f8>)
 8019da0:	f00a fea4 	bl	8024aec <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8019da4:	4b03      	ldr	r3, [pc, #12]	; (8019db4 <mem_malloc+0x1e4>)
          mem2->next = mem->next;
 8019da6:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 8019da8:	6818      	ldr	r0, [r3, #0]
 8019daa:	e765      	b.n	8019c78 <mem_malloc+0xa8>
 8019dac:	4e03      	ldr	r6, [pc, #12]	; (8019dbc <mem_malloc+0x1ec>)
 8019dae:	e79c      	b.n	8019cea <mem_malloc+0x11a>
 8019db0:	2001ec4c 	.word	0x2001ec4c
 8019db4:	2001ec50 	.word	0x2001ec50
 8019db8:	2001ec48 	.word	0x2001ec48
 8019dbc:	2001ec54 	.word	0x2001ec54
 8019dc0:	08042564 	.word	0x08042564
 8019dc4:	08042870 	.word	0x08042870
 8019dc8:	0802b818 	.word	0x0802b818
 8019dcc:	080428a0 	.word	0x080428a0
 8019dd0:	08042840 	.word	0x08042840
 8019dd4:	08042824 	.word	0x08042824
 8019dd8:	08042810 	.word	0x08042810
 8019ddc:	2001ec44 	.word	0x2001ec44

08019de0 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 8019de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019de4:	4f12      	ldr	r7, [pc, #72]	; (8019e30 <memp_overflow_check_all+0x50>)
 8019de6:	2308      	movs	r3, #8
 8019de8:	4c12      	ldr	r4, [pc, #72]	; (8019e34 <memp_overflow_check_all+0x54>)
 8019dea:	4d13      	ldr	r5, [pc, #76]	; (8019e38 <memp_overflow_check_all+0x58>)
 8019dec:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8019df0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8019e3c <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 8019df4:	3403      	adds	r4, #3
 8019df6:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8019dfa:	b183      	cbz	r3, 8019e1e <memp_overflow_check_all+0x3e>
 8019dfc:	88a9      	ldrh	r1, [r5, #4]
 8019dfe:	2600      	movs	r6, #0
 8019e00:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8019e02:	f104 001c 	add.w	r0, r4, #28
 8019e06:	682b      	ldr	r3, [r5, #0]
 8019e08:	464a      	mov	r2, r9
 8019e0a:	f7ff fc8d 	bl	8019728 <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8019e0e:	88a9      	ldrh	r1, [r5, #4]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8019e10:	88e8      	ldrh	r0, [r5, #6]
 8019e12:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8019e14:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8019e18:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8019e1a:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8019e1c:	d8f0      	bhi.n	8019e00 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 8019e1e:	45b8      	cmp	r8, r7
 8019e20:	d004      	beq.n	8019e2c <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 8019e22:	f857 5b04 	ldr.w	r5, [r7], #4
 8019e26:	68ac      	ldr	r4, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8019e28:	88eb      	ldrh	r3, [r5, #6]
 8019e2a:	e7e3      	b.n	8019df4 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 8019e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e30:	08042b54 	.word	0x08042b54
 8019e34:	2002917c 	.word	0x2002917c
 8019e38:	08042ac0 	.word	0x08042ac0
 8019e3c:	080428c4 	.word	0x080428c4

08019e40 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8019e40:	078b      	lsls	r3, r1, #30
{
 8019e42:	b570      	push	{r4, r5, r6, lr}
 8019e44:	460c      	mov	r4, r1
 8019e46:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 8019e48:	d11f      	bne.n	8019e8a <do_memp_free_pool+0x4a>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8019e4a:	68ea      	ldr	r2, [r5, #12]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8019e4c:	f1a4 031c 	sub.w	r3, r4, #28
  memp->next = *desc->tab;
 8019e50:	6811      	ldr	r1, [r2, #0]
 8019e52:	f844 1c1c 	str.w	r1, [r4, #-28]
  *desc->tab = memp;
 8019e56:	6013      	str	r3, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8019e58:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 8019e5c:	b15a      	cbz	r2, 8019e76 <do_memp_free_pool+0x36>
      if (t == h) {
 8019e5e:	429a      	cmp	r2, r3
 8019e60:	d105      	bne.n	8019e6e <do_memp_free_pool+0x2e>
 8019e62:	e009      	b.n	8019e78 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8019e64:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8019e66:	b133      	cbz	r3, 8019e76 <do_memp_free_pool+0x36>
 8019e68:	b12a      	cbz	r2, 8019e76 <do_memp_free_pool+0x36>
      if (t == h) {
 8019e6a:	4293      	cmp	r3, r2
 8019e6c:	d004      	beq.n	8019e78 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8019e6e:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8019e70:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8019e72:	2a00      	cmp	r2, #0
 8019e74:	d1f6      	bne.n	8019e64 <do_memp_free_pool+0x24>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8019e76:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8019e78:	4b08      	ldr	r3, [pc, #32]	; (8019e9c <do_memp_free_pool+0x5c>)
 8019e7a:	f240 1285 	movw	r2, #389	; 0x185
 8019e7e:	4908      	ldr	r1, [pc, #32]	; (8019ea0 <do_memp_free_pool+0x60>)
 8019e80:	4808      	ldr	r0, [pc, #32]	; (8019ea4 <do_memp_free_pool+0x64>)
}
 8019e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8019e86:	f00a be31 	b.w	8024aec <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8019e8a:	4b04      	ldr	r3, [pc, #16]	; (8019e9c <do_memp_free_pool+0x5c>)
 8019e8c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8019e90:	4905      	ldr	r1, [pc, #20]	; (8019ea8 <do_memp_free_pool+0x68>)
 8019e92:	4804      	ldr	r0, [pc, #16]	; (8019ea4 <do_memp_free_pool+0x64>)
 8019e94:	f00a fe2a 	bl	8024aec <iprintf>
 8019e98:	e7d7      	b.n	8019e4a <do_memp_free_pool+0xa>
 8019e9a:	bf00      	nop
 8019e9c:	080428cc 	.word	0x080428cc
 8019ea0:	0804291c 	.word	0x0804291c
 8019ea4:	0802b818 	.word	0x0802b818
 8019ea8:	080428fc 	.word	0x080428fc

08019eac <memp_init_pool>:
{
 8019eac:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 8019eae:	2200      	movs	r2, #0
  for (i = 0; i < desc->num; ++i) {
 8019eb0:	88c1      	ldrh	r1, [r0, #6]
  *desc->tab = NULL;
 8019eb2:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 8019eb6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 8019eb8:	b1b1      	cbz	r1, 8019ee8 <memp_init_pool+0x3c>
 8019eba:	3403      	adds	r4, #3
 8019ebc:	4605      	mov	r5, r0
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8019ebe:	8881      	ldrh	r1, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 8019ec0:	4616      	mov	r6, r2
 8019ec2:	f024 0403 	bic.w	r4, r4, #3
 8019ec6:	e001      	b.n	8019ecc <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8019ec8:	68eb      	ldr	r3, [r5, #12]
 8019eca:	681a      	ldr	r2, [r3, #0]
 8019ecc:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8019ece:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 8019ed2:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 8019ed4:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8019ed6:	f7ff fc73 	bl	80197c0 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8019eda:	88a9      	ldrh	r1, [r5, #4]
  for (i = 0; i < desc->num; ++i) {
 8019edc:	88eb      	ldrh	r3, [r5, #6]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 8019ede:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 8019ee2:	42b3      	cmp	r3, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8019ee4:	4414      	add	r4, r2
  for (i = 0; i < desc->num; ++i) {
 8019ee6:	dcef      	bgt.n	8019ec8 <memp_init_pool+0x1c>
}
 8019ee8:	bd70      	pop	{r4, r5, r6, pc}
 8019eea:	bf00      	nop

08019eec <memp_init>:
{
 8019eec:	b538      	push	{r3, r4, r5, lr}
 8019eee:	4c07      	ldr	r4, [pc, #28]	; (8019f0c <memp_init+0x20>)
 8019ef0:	4807      	ldr	r0, [pc, #28]	; (8019f10 <memp_init+0x24>)
 8019ef2:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 8019ef6:	e001      	b.n	8019efc <memp_init+0x10>
    memp_init_pool(memp_pools[i]);
 8019ef8:	f854 0b04 	ldr.w	r0, [r4], #4
 8019efc:	f7ff ffd6 	bl	8019eac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8019f00:	42ac      	cmp	r4, r5
 8019f02:	d1f9      	bne.n	8019ef8 <memp_init+0xc>
}
 8019f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_overflow_check_all();
 8019f08:	f7ff bf6a 	b.w	8019de0 <memp_overflow_check_all>
 8019f0c:	08042b54 	.word	0x08042b54
 8019f10:	08042ac0 	.word	0x08042ac0

08019f14 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8019f14:	280f      	cmp	r0, #15
{
 8019f16:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8019f18:	d81d      	bhi.n	8019f56 <memp_malloc_fn+0x42>
  memp_overflow_check_all();
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	460e      	mov	r6, r1
 8019f1e:	4615      	mov	r5, r2
 8019f20:	f7ff ff5e 	bl	8019de0 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8019f24:	4b11      	ldr	r3, [pc, #68]	; (8019f6c <memp_malloc_fn+0x58>)
 8019f26:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019f2a:	68db      	ldr	r3, [r3, #12]
  memp = *desc->tab;
 8019f2c:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 8019f2e:	b144      	cbz	r4, 8019f42 <memp_malloc_fn+0x2e>
    *desc->tab = memp->next;
 8019f30:	6822      	ldr	r2, [r4, #0]
 8019f32:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 8019f34:	2300      	movs	r3, #0
 8019f36:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8019f38:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 8019f3a:	e9c4 6501 	strd	r6, r5, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8019f3e:	d102      	bne.n	8019f46 <memp_malloc_fn+0x32>
    return ((u8_t *)memp + MEMP_SIZE);
 8019f40:	341c      	adds	r4, #28
}
 8019f42:	4620      	mov	r0, r4
 8019f44:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8019f46:	4b0a      	ldr	r3, [pc, #40]	; (8019f70 <memp_malloc_fn+0x5c>)
 8019f48:	f44f 728c 	mov.w	r2, #280	; 0x118
 8019f4c:	4909      	ldr	r1, [pc, #36]	; (8019f74 <memp_malloc_fn+0x60>)
 8019f4e:	480a      	ldr	r0, [pc, #40]	; (8019f78 <memp_malloc_fn+0x64>)
 8019f50:	f00a fdcc 	bl	8024aec <iprintf>
 8019f54:	e7f4      	b.n	8019f40 <memp_malloc_fn+0x2c>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8019f56:	2400      	movs	r4, #0
 8019f58:	4b05      	ldr	r3, [pc, #20]	; (8019f70 <memp_malloc_fn+0x5c>)
 8019f5a:	f240 1257 	movw	r2, #343	; 0x157
 8019f5e:	4907      	ldr	r1, [pc, #28]	; (8019f7c <memp_malloc_fn+0x68>)
 8019f60:	4805      	ldr	r0, [pc, #20]	; (8019f78 <memp_malloc_fn+0x64>)
 8019f62:	f00a fdc3 	bl	8024aec <iprintf>
}
 8019f66:	4620      	mov	r0, r4
 8019f68:	bd70      	pop	{r4, r5, r6, pc}
 8019f6a:	bf00      	nop
 8019f6c:	08042b50 	.word	0x08042b50
 8019f70:	080428cc 	.word	0x080428cc
 8019f74:	0804293c 	.word	0x0804293c
 8019f78:	0802b818 	.word	0x0802b818
 8019f7c:	08042960 	.word	0x08042960

08019f80 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019f80:	280f      	cmp	r0, #15
 8019f82:	d80e      	bhi.n	8019fa2 <memp_free+0x22>
{
 8019f84:	b570      	push	{r4, r5, r6, lr}
 8019f86:	460d      	mov	r5, r1

  if (mem == NULL) {
 8019f88:	b151      	cbz	r1, 8019fa0 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 8019f8a:	4604      	mov	r4, r0
 8019f8c:	f7ff ff28 	bl	8019de0 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8019f90:	4b07      	ldr	r3, [pc, #28]	; (8019fb0 <memp_free+0x30>)
 8019f92:	4629      	mov	r1, r5
 8019f94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8019f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 8019f9c:	f7ff bf50 	b.w	8019e40 <do_memp_free_pool>
}
 8019fa0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019fa2:	4b04      	ldr	r3, [pc, #16]	; (8019fb4 <memp_free+0x34>)
 8019fa4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8019fa8:	4903      	ldr	r1, [pc, #12]	; (8019fb8 <memp_free+0x38>)
 8019faa:	4804      	ldr	r0, [pc, #16]	; (8019fbc <memp_free+0x3c>)
 8019fac:	f00a bd9e 	b.w	8024aec <iprintf>
 8019fb0:	08042b50 	.word	0x08042b50
 8019fb4:	080428cc 	.word	0x080428cc
 8019fb8:	08042980 	.word	0x08042980
 8019fbc:	0802b818 	.word	0x0802b818

08019fc0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8019fc0:	f06f 000b 	mvn.w	r0, #11
 8019fc4:	4770      	bx	lr
 8019fc6:	bf00      	nop

08019fc8 <netif_issue_reports>:
{
 8019fc8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8019fca:	4604      	mov	r4, r0
 8019fcc:	b150      	cbz	r0, 8019fe4 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8019fce:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8019fd2:	f003 0205 	and.w	r2, r3, #5
 8019fd6:	2a05      	cmp	r2, #5
 8019fd8:	d103      	bne.n	8019fe2 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019fda:	6862      	ldr	r2, [r4, #4]
 8019fdc:	b10a      	cbz	r2, 8019fe2 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8019fde:	071b      	lsls	r3, r3, #28
 8019fe0:	d408      	bmi.n	8019ff4 <netif_issue_reports+0x2c>
}
 8019fe2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8019fe4:	4b06      	ldr	r3, [pc, #24]	; (801a000 <netif_issue_reports+0x38>)
 8019fe6:	f240 326d 	movw	r2, #877	; 0x36d
 8019fea:	4906      	ldr	r1, [pc, #24]	; (801a004 <netif_issue_reports+0x3c>)
 8019fec:	4806      	ldr	r0, [pc, #24]	; (801a008 <netif_issue_reports+0x40>)
 8019fee:	f00a fd7d 	bl	8024aec <iprintf>
 8019ff2:	e7ec      	b.n	8019fce <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 8019ff4:	1d21      	adds	r1, r4, #4
 8019ff6:	4620      	mov	r0, r4
}
 8019ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8019ffc:	f007 bf82 	b.w	8021f04 <etharp_request>
 801a000:	08042b90 	.word	0x08042b90
 801a004:	08042bc4 	.word	0x08042bc4
 801a008:	0802b818 	.word	0x0802b818

0801a00c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801a00c:	b570      	push	{r4, r5, r6, lr}
 801a00e:	4605      	mov	r5, r0
 801a010:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a012:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801a014:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a016:	b301      	cbz	r1, 801a05a <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801a018:	686b      	ldr	r3, [r5, #4]
 801a01a:	6822      	ldr	r2, [r4, #0]
 801a01c:	429a      	cmp	r2, r3
 801a01e:	d101      	bne.n	801a024 <netif_do_set_ipaddr.isra.0+0x18>
}
 801a020:	b002      	add	sp, #8
 801a022:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801a024:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a026:	4630      	mov	r0, r6
 801a028:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 801a02a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a02c:	f002 fa30 	bl	801c490 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801a030:	a901      	add	r1, sp, #4
 801a032:	4630      	mov	r0, r6
 801a034:	f005 fdba 	bl	801fbac <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801a038:	a901      	add	r1, sp, #4
 801a03a:	4630      	mov	r0, r6
 801a03c:	f000 ff42 	bl	801aec4 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a040:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a042:	2101      	movs	r1, #1
 801a044:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a046:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a048:	f7ff ffbe 	bl	8019fc8 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 801a04c:	69eb      	ldr	r3, [r5, #28]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d0e6      	beq.n	801a020 <netif_do_set_ipaddr.isra.0+0x14>
 801a052:	4628      	mov	r0, r5
 801a054:	4798      	blx	r3
}
 801a056:	b002      	add	sp, #8
 801a058:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a05a:	4b04      	ldr	r3, [pc, #16]	; (801a06c <netif_do_set_ipaddr.isra.0+0x60>)
 801a05c:	f240 12cb 	movw	r2, #459	; 0x1cb
 801a060:	4903      	ldr	r1, [pc, #12]	; (801a070 <netif_do_set_ipaddr.isra.0+0x64>)
 801a062:	4804      	ldr	r0, [pc, #16]	; (801a074 <netif_do_set_ipaddr.isra.0+0x68>)
 801a064:	f00a fd42 	bl	8024aec <iprintf>
 801a068:	e7d6      	b.n	801a018 <netif_do_set_ipaddr.isra.0+0xc>
 801a06a:	bf00      	nop
 801a06c:	08042b90 	.word	0x08042b90
 801a070:	08042be8 	.word	0x08042be8
 801a074:	0802b818 	.word	0x0802b818

0801a078 <netif_init>:
}
 801a078:	4770      	bx	lr
 801a07a:	bf00      	nop

0801a07c <netif_set_addr>:
{
 801a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 801a07e:	2900      	cmp	r1, #0
{
 801a080:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 801a082:	4b16      	ldr	r3, [pc, #88]	; (801a0dc <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 801a084:	460c      	mov	r4, r1
{
 801a086:	b083      	sub	sp, #12
 801a088:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801a08a:	bf14      	ite	ne
 801a08c:	460c      	movne	r4, r1
 801a08e:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 801a090:	b30a      	cbz	r2, 801a0d6 <netif_set_addr+0x5a>
 801a092:	4616      	mov	r6, r2
  if (gw == NULL) {
 801a094:	b1ef      	cbz	r7, 801a0d2 <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 801a096:	6823      	ldr	r3, [r4, #0]
 801a098:	b993      	cbnz	r3, 801a0c0 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a09a:	4621      	mov	r1, r4
 801a09c:	aa01      	add	r2, sp, #4
 801a09e:	4628      	mov	r0, r5
 801a0a0:	f7ff ffb4 	bl	801a00c <netif_do_set_ipaddr.isra.0>
 801a0a4:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801a0a6:	6833      	ldr	r3, [r6, #0]
 801a0a8:	68aa      	ldr	r2, [r5, #8]
 801a0aa:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a0ac:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801a0ae:	bf18      	it	ne
 801a0b0:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a0b2:	683b      	ldr	r3, [r7, #0]
 801a0b4:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801a0b6:	bf18      	it	ne
 801a0b8:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801a0ba:	b119      	cbz	r1, 801a0c4 <netif_set_addr+0x48>
}
 801a0bc:	b003      	add	sp, #12
 801a0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 801a0c0:	2100      	movs	r1, #0
 801a0c2:	e7f0      	b.n	801a0a6 <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a0c4:	aa01      	add	r2, sp, #4
 801a0c6:	4621      	mov	r1, r4
 801a0c8:	4628      	mov	r0, r5
 801a0ca:	f7ff ff9f 	bl	801a00c <netif_do_set_ipaddr.isra.0>
}
 801a0ce:	b003      	add	sp, #12
 801a0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 801a0d2:	4f02      	ldr	r7, [pc, #8]	; (801a0dc <netif_set_addr+0x60>)
 801a0d4:	e7df      	b.n	801a096 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 801a0d6:	461e      	mov	r6, r3
 801a0d8:	e7dc      	b.n	801a094 <netif_set_addr+0x18>
 801a0da:	bf00      	nop
 801a0dc:	08044cb8 	.word	0x08044cb8

0801a0e0 <netif_add>:
{
 801a0e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801a0e6:	4606      	mov	r6, r0
 801a0e8:	2800      	cmp	r0, #0
 801a0ea:	f000 8081 	beq.w	801a1f0 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801a0ee:	2d00      	cmp	r5, #0
 801a0f0:	f000 8087 	beq.w	801a202 <netif_add+0x122>
  if (ipaddr == NULL) {
 801a0f4:	2900      	cmp	r1, #0
 801a0f6:	d06f      	beq.n	801a1d8 <netif_add+0xf8>
  if (netmask == NULL) {
 801a0f8:	2a00      	cmp	r2, #0
 801a0fa:	d068      	beq.n	801a1ce <netif_add+0xee>
  if (gw == NULL) {
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d069      	beq.n	801a1d4 <netif_add+0xf4>
  netif->state = state;
 801a100:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801a102:	2400      	movs	r4, #0
  netif->num = netif_num;
 801a104:	f8df a128 	ldr.w	sl, [pc, #296]	; 801a230 <netif_add+0x150>
  netif->state = state;
 801a108:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 801a10a:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 801a10c:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 801a10e:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 801a110:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 801a114:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 801a116:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 801a11a:	483e      	ldr	r0, [pc, #248]	; (801a214 <netif_add+0x134>)
  netif->flags = 0;
 801a11c:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 801a120:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a122:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801a124:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 801a126:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 801a12a:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a12e:	f7ff ffa5 	bl	801a07c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801a132:	4630      	mov	r0, r6
 801a134:	47a8      	blx	r5
 801a136:	2800      	cmp	r0, #0
 801a138:	d157      	bne.n	801a1ea <netif_add+0x10a>
      if (netif->num == 255) {
 801a13a:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801a13e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801a234 <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a142:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801a224 <netif_add+0x144>
 801a146:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801a238 <netif_add+0x158>
 801a14a:	4f33      	ldr	r7, [pc, #204]	; (801a218 <netif_add+0x138>)
      if (netif->num == 255) {
 801a14c:	2aff      	cmp	r2, #255	; 0xff
 801a14e:	d102      	bne.n	801a156 <netif_add+0x76>
        netif->num = 0;
 801a150:	2300      	movs	r3, #0
 801a152:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a156:	f8d8 4000 	ldr.w	r4, [r8]
 801a15a:	2c00      	cmp	r4, #0
 801a15c:	d042      	beq.n	801a1e4 <netif_add+0x104>
      num_netifs = 0;
 801a15e:	2500      	movs	r5, #0
 801a160:	e007      	b.n	801a172 <netif_add+0x92>
        if (netif2->num == netif->num) {
 801a162:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801a166:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a16a:	429a      	cmp	r2, r3
 801a16c:	d014      	beq.n	801a198 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a16e:	6824      	ldr	r4, [r4, #0]
 801a170:	b1fc      	cbz	r4, 801a1b2 <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a172:	42a6      	cmp	r6, r4
        num_netifs++;
 801a174:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a178:	d013      	beq.n	801a1a2 <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801a17a:	2dff      	cmp	r5, #255	; 0xff
 801a17c:	ddf1      	ble.n	801a162 <netif_add+0x82>
 801a17e:	465b      	mov	r3, fp
 801a180:	f240 128d 	movw	r2, #397	; 0x18d
 801a184:	4925      	ldr	r1, [pc, #148]	; (801a21c <netif_add+0x13c>)
 801a186:	4638      	mov	r0, r7
 801a188:	f00a fcb0 	bl	8024aec <iprintf>
        if (netif2->num == netif->num) {
 801a18c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801a190:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a194:	429a      	cmp	r2, r3
 801a196:	d1ea      	bne.n	801a16e <netif_add+0x8e>
          netif->num++;
 801a198:	3201      	adds	r2, #1
 801a19a:	b2d2      	uxtb	r2, r2
 801a19c:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 801a1a0:	e7d4      	b.n	801a14c <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a1a2:	465b      	mov	r3, fp
 801a1a4:	f240 128b 	movw	r2, #395	; 0x18b
 801a1a8:	4649      	mov	r1, r9
 801a1aa:	4638      	mov	r0, r7
 801a1ac:	f00a fc9e 	bl	8024aec <iprintf>
 801a1b0:	e7e3      	b.n	801a17a <netif_add+0x9a>
  netif->next = netif_list;
 801a1b2:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801a1b6:	2bfe      	cmp	r3, #254	; 0xfe
 801a1b8:	d012      	beq.n	801a1e0 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 801a1ba:	3301      	adds	r3, #1
 801a1bc:	b2db      	uxtb	r3, r3
  return netif;
 801a1be:	4630      	mov	r0, r6
  netif->next = netif_list;
 801a1c0:	6034      	str	r4, [r6, #0]
 801a1c2:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801a1c6:	f8c8 6000 	str.w	r6, [r8]
}
 801a1ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801a1ce:	4a14      	ldr	r2, [pc, #80]	; (801a220 <netif_add+0x140>)
  if (gw == NULL) {
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d195      	bne.n	801a100 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801a1d4:	4b12      	ldr	r3, [pc, #72]	; (801a220 <netif_add+0x140>)
 801a1d6:	e793      	b.n	801a100 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801a1d8:	4911      	ldr	r1, [pc, #68]	; (801a220 <netif_add+0x140>)
  if (netmask == NULL) {
 801a1da:	2a00      	cmp	r2, #0
 801a1dc:	d18e      	bne.n	801a0fc <netif_add+0x1c>
 801a1de:	e7f6      	b.n	801a1ce <netif_add+0xee>
    netif_num = 0;
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	e7ec      	b.n	801a1be <netif_add+0xde>
  if (netif->num == 254) {
 801a1e4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a1e8:	e7e5      	b.n	801a1b6 <netif_add+0xd6>
    return NULL;
 801a1ea:	4620      	mov	r0, r4
}
 801a1ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801a1f0:	4b0c      	ldr	r3, [pc, #48]	; (801a224 <netif_add+0x144>)
 801a1f2:	f240 1227 	movw	r2, #295	; 0x127
 801a1f6:	490c      	ldr	r1, [pc, #48]	; (801a228 <netif_add+0x148>)
 801a1f8:	4807      	ldr	r0, [pc, #28]	; (801a218 <netif_add+0x138>)
 801a1fa:	f00a fc77 	bl	8024aec <iprintf>
 801a1fe:	4630      	mov	r0, r6
 801a200:	e7e3      	b.n	801a1ca <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801a202:	4b08      	ldr	r3, [pc, #32]	; (801a224 <netif_add+0x144>)
 801a204:	f44f 7294 	mov.w	r2, #296	; 0x128
 801a208:	4908      	ldr	r1, [pc, #32]	; (801a22c <netif_add+0x14c>)
 801a20a:	4803      	ldr	r0, [pc, #12]	; (801a218 <netif_add+0x138>)
 801a20c:	f00a fc6e 	bl	8024aec <iprintf>
 801a210:	4628      	mov	r0, r5
 801a212:	e7da      	b.n	801a1ca <netif_add+0xea>
 801a214:	08019fc1 	.word	0x08019fc1
 801a218:	0802b818 	.word	0x0802b818
 801a21c:	08042c4c 	.word	0x08042c4c
 801a220:	08044cb8 	.word	0x08044cb8
 801a224:	08042b90 	.word	0x08042b90
 801a228:	08042bf8 	.word	0x08042bf8
 801a22c:	08042c14 	.word	0x08042c14
 801a230:	2002dba4 	.word	0x2002dba4
 801a234:	2002dba0 	.word	0x2002dba0
 801a238:	08042c38 	.word	0x08042c38

0801a23c <netif_set_default>:
  netif_default = netif;
 801a23c:	4b01      	ldr	r3, [pc, #4]	; (801a244 <netif_set_default+0x8>)
 801a23e:	6018      	str	r0, [r3, #0]
}
 801a240:	4770      	bx	lr
 801a242:	bf00      	nop
 801a244:	2002db9c 	.word	0x2002db9c

0801a248 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801a248:	b198      	cbz	r0, 801a272 <netif_set_up+0x2a>
{
 801a24a:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801a24c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801a250:	4604      	mov	r4, r0
 801a252:	07da      	lsls	r2, r3, #31
 801a254:	d40c      	bmi.n	801a270 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801a256:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 801a25a:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 801a25c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 801a260:	b102      	cbz	r2, 801a264 <netif_set_up+0x1c>
 801a262:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a264:	4620      	mov	r0, r4
 801a266:	2103      	movs	r1, #3
}
 801a268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a26c:	f7ff beac 	b.w	8019fc8 <netif_issue_reports>
}
 801a270:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801a272:	4b03      	ldr	r3, [pc, #12]	; (801a280 <netif_set_up+0x38>)
 801a274:	f44f 7254 	mov.w	r2, #848	; 0x350
 801a278:	4902      	ldr	r1, [pc, #8]	; (801a284 <netif_set_up+0x3c>)
 801a27a:	4803      	ldr	r0, [pc, #12]	; (801a288 <netif_set_up+0x40>)
 801a27c:	f00a bc36 	b.w	8024aec <iprintf>
 801a280:	08042b90 	.word	0x08042b90
 801a284:	08042c7c 	.word	0x08042c7c
 801a288:	0802b818 	.word	0x0802b818

0801a28c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801a28c:	b1a8      	cbz	r0, 801a2ba <netif_set_down+0x2e>
{
 801a28e:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801a290:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801a294:	4604      	mov	r4, r0
 801a296:	07da      	lsls	r2, r3, #31
 801a298:	d50b      	bpl.n	801a2b2 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801a29a:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801a29e:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801a2a0:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801a2a4:	d406      	bmi.n	801a2b4 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801a2a6:	69e3      	ldr	r3, [r4, #28]
 801a2a8:	b11b      	cbz	r3, 801a2b2 <netif_set_down+0x26>
 801a2aa:	4620      	mov	r0, r4
}
 801a2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 801a2b0:	4718      	bx	r3
}
 801a2b2:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 801a2b4:	f007 fb9e 	bl	80219f4 <etharp_cleanup_netif>
 801a2b8:	e7f5      	b.n	801a2a6 <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801a2ba:	4b03      	ldr	r3, [pc, #12]	; (801a2c8 <netif_set_down+0x3c>)
 801a2bc:	f240 329b 	movw	r2, #923	; 0x39b
 801a2c0:	4902      	ldr	r1, [pc, #8]	; (801a2cc <netif_set_down+0x40>)
 801a2c2:	4803      	ldr	r0, [pc, #12]	; (801a2d0 <netif_set_down+0x44>)
 801a2c4:	f00a bc12 	b.w	8024aec <iprintf>
 801a2c8:	08042b90 	.word	0x08042b90
 801a2cc:	08042c98 	.word	0x08042c98
 801a2d0:	0802b818 	.word	0x0802b818

0801a2d4 <netif_set_status_callback>:
  if (netif) {
 801a2d4:	b100      	cbz	r0, 801a2d8 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801a2d6:	61c1      	str	r1, [r0, #28]
}
 801a2d8:	4770      	bx	lr
 801a2da:	bf00      	nop

0801a2dc <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801a2dc:	b1b8      	cbz	r0, 801a30e <netif_set_link_up+0x32>
{
 801a2de:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801a2e0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801a2e4:	4604      	mov	r4, r0
 801a2e6:	075a      	lsls	r2, r3, #29
 801a2e8:	d500      	bpl.n	801a2ec <netif_set_link_up+0x10>
}
 801a2ea:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801a2ec:	f043 0304 	orr.w	r3, r3, #4
 801a2f0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 801a2f4:	f006 fd6c 	bl	8020dd0 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a2f8:	2103      	movs	r1, #3
 801a2fa:	4620      	mov	r0, r4
 801a2fc:	f7ff fe64 	bl	8019fc8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 801a300:	6a23      	ldr	r3, [r4, #32]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d0f1      	beq.n	801a2ea <netif_set_link_up+0xe>
 801a306:	4620      	mov	r0, r4
}
 801a308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801a30c:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801a30e:	4b03      	ldr	r3, [pc, #12]	; (801a31c <netif_set_link_up+0x40>)
 801a310:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801a314:	4902      	ldr	r1, [pc, #8]	; (801a320 <netif_set_link_up+0x44>)
 801a316:	4803      	ldr	r0, [pc, #12]	; (801a324 <netif_set_link_up+0x48>)
 801a318:	f00a bbe8 	b.w	8024aec <iprintf>
 801a31c:	08042b90 	.word	0x08042b90
 801a320:	08042cb8 	.word	0x08042cb8
 801a324:	0802b818 	.word	0x0802b818

0801a328 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801a328:	b158      	cbz	r0, 801a342 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801a32a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801a32e:	0751      	lsls	r1, r2, #29
 801a330:	d506      	bpl.n	801a340 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801a332:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801a336:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801a338:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 801a33c:	b101      	cbz	r1, 801a340 <netif_set_link_down+0x18>
 801a33e:	4708      	bx	r1
}
 801a340:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801a342:	4b03      	ldr	r3, [pc, #12]	; (801a350 <netif_set_link_down+0x28>)
 801a344:	f240 4206 	movw	r2, #1030	; 0x406
 801a348:	4902      	ldr	r1, [pc, #8]	; (801a354 <netif_set_link_down+0x2c>)
 801a34a:	4803      	ldr	r0, [pc, #12]	; (801a358 <netif_set_link_down+0x30>)
 801a34c:	f00a bbce 	b.w	8024aec <iprintf>
 801a350:	08042b90 	.word	0x08042b90
 801a354:	08042cdc 	.word	0x08042cdc
 801a358:	0802b818 	.word	0x0802b818

0801a35c <netif_set_link_callback>:
  if (netif) {
 801a35c:	b100      	cbz	r0, 801a360 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 801a35e:	6201      	str	r1, [r0, #32]
}
 801a360:	4770      	bx	lr
 801a362:	bf00      	nop

0801a364 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801a364:	4602      	mov	r2, r0
 801a366:	b158      	cbz	r0, 801a380 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 801a368:	4b06      	ldr	r3, [pc, #24]	; (801a384 <netif_get_by_index+0x20>)
 801a36a:	6818      	ldr	r0, [r3, #0]
 801a36c:	b910      	cbnz	r0, 801a374 <netif_get_by_index+0x10>
 801a36e:	e007      	b.n	801a380 <netif_get_by_index+0x1c>
 801a370:	6800      	ldr	r0, [r0, #0]
 801a372:	b130      	cbz	r0, 801a382 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 801a374:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801a378:	3301      	adds	r3, #1
 801a37a:	b2db      	uxtb	r3, r3
 801a37c:	4293      	cmp	r3, r2
 801a37e:	d1f7      	bne.n	801a370 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 801a380:	4770      	bx	lr
 801a382:	4770      	bx	lr
 801a384:	2002dba0 	.word	0x2002dba0

0801a388 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a388:	4907      	ldr	r1, [pc, #28]	; (801a3a8 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801a38a:	2200      	movs	r2, #0
 801a38c:	4b07      	ldr	r3, [pc, #28]	; (801a3ac <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a38e:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801a390:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a392:	b910      	cbnz	r0, 801a39a <pbuf_free_ooseq_callback+0x12>
 801a394:	e006      	b.n	801a3a4 <pbuf_free_ooseq_callback+0x1c>
 801a396:	68c0      	ldr	r0, [r0, #12]
 801a398:	b120      	cbz	r0, 801a3a4 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801a39a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d0fa      	beq.n	801a396 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801a3a0:	f002 b8a0 	b.w	801c4e4 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801a3a4:	4770      	bx	lr
 801a3a6:	bf00      	nop
 801a3a8:	2002dbac 	.word	0x2002dbac
 801a3ac:	2002dba5 	.word	0x2002dba5

0801a3b0 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 801a3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801a3b4:	4604      	mov	r4, r0
 801a3b6:	2800      	cmp	r0, #0
 801a3b8:	d052      	beq.n	801a460 <pbuf_free.part.0+0xb0>
  count = 0;
 801a3ba:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a3bc:	4f29      	ldr	r7, [pc, #164]	; (801a464 <pbuf_free.part.0+0xb4>)
 801a3be:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801a474 <pbuf_free.part.0+0xc4>
 801a3c2:	4e29      	ldr	r6, [pc, #164]	; (801a468 <pbuf_free.part.0+0xb8>)
 801a3c4:	e00a      	b.n	801a3dc <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a3c6:	6923      	ldr	r3, [r4, #16]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d03b      	beq.n	801a444 <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 801a3cc:	4620      	mov	r0, r4
 801a3ce:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801a3d0:	3501      	adds	r5, #1
 801a3d2:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801a3d4:	f1b9 0f00 	cmp.w	r9, #0
 801a3d8:	d01b      	beq.n	801a412 <pbuf_free.part.0+0x62>
 801a3da:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a3dc:	7ba3      	ldrb	r3, [r4, #14]
 801a3de:	b1db      	cbz	r3, 801a418 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 801a3e0:	3b01      	subs	r3, #1
 801a3e2:	b2db      	uxtb	r3, r3
 801a3e4:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801a3e6:	b9a3      	cbnz	r3, 801a412 <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a3e8:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801a3ea:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a3ee:	079b      	lsls	r3, r3, #30
 801a3f0:	d4e9      	bmi.n	801a3c6 <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 801a3f2:	7b23      	ldrb	r3, [r4, #12]
 801a3f4:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801a3f8:	2b02      	cmp	r3, #2
 801a3fa:	d01e      	beq.n	801a43a <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801a3fc:	2b01      	cmp	r3, #1
 801a3fe:	d02a      	beq.n	801a456 <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801a400:	b99b      	cbnz	r3, 801a42a <pbuf_free.part.0+0x7a>
      count++;
 801a402:	3501      	adds	r5, #1
          mem_free(p);
 801a404:	4620      	mov	r0, r4
 801a406:	f7ff fa27 	bl	8019858 <mem_free>
      count++;
 801a40a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801a40c:	f1b9 0f00 	cmp.w	r9, #0
 801a410:	d1e3      	bne.n	801a3da <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 801a412:	4628      	mov	r0, r5
 801a414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a418:	463b      	mov	r3, r7
 801a41a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801a41e:	4641      	mov	r1, r8
 801a420:	4630      	mov	r0, r6
 801a422:	f00a fb63 	bl	8024aec <iprintf>
    ref = --(p->ref);
 801a426:	7ba3      	ldrb	r3, [r4, #14]
 801a428:	e7da      	b.n	801a3e0 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801a42a:	463b      	mov	r3, r7
 801a42c:	f240 320f 	movw	r2, #783	; 0x30f
 801a430:	490e      	ldr	r1, [pc, #56]	; (801a46c <pbuf_free.part.0+0xbc>)
 801a432:	4630      	mov	r0, r6
 801a434:	f00a fb5a 	bl	8024aec <iprintf>
 801a438:	e7ca      	b.n	801a3d0 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801a43a:	4621      	mov	r1, r4
 801a43c:	200f      	movs	r0, #15
 801a43e:	f7ff fd9f 	bl	8019f80 <memp_free>
 801a442:	e7c5      	b.n	801a3d0 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a444:	463b      	mov	r3, r7
 801a446:	f240 22ff 	movw	r2, #767	; 0x2ff
 801a44a:	4909      	ldr	r1, [pc, #36]	; (801a470 <pbuf_free.part.0+0xc0>)
 801a44c:	4630      	mov	r0, r6
 801a44e:	f00a fb4d 	bl	8024aec <iprintf>
        pc->custom_free_function(p);
 801a452:	6923      	ldr	r3, [r4, #16]
 801a454:	e7ba      	b.n	801a3cc <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 801a456:	4621      	mov	r1, r4
 801a458:	200e      	movs	r0, #14
 801a45a:	f7ff fd91 	bl	8019f80 <memp_free>
 801a45e:	e7b7      	b.n	801a3d0 <pbuf_free.part.0+0x20>
  count = 0;
 801a460:	4605      	mov	r5, r0
 801a462:	e7d6      	b.n	801a412 <pbuf_free.part.0+0x62>
 801a464:	08042d00 	.word	0x08042d00
 801a468:	0802b818 	.word	0x0802b818
 801a46c:	08042d6c 	.word	0x08042d6c
 801a470:	08042d48 	.word	0x08042d48
 801a474:	08042d30 	.word	0x08042d30

0801a478 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801a478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 801a47c:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a47e:	f8df a124 	ldr.w	sl, [pc, #292]	; 801a5a4 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801a482:	4605      	mov	r5, r0
 801a484:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 801a486:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a488:	8944      	ldrh	r4, [r0, #10]
 801a48a:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a48c:	f8df b128 	ldr.w	fp, [pc, #296]	; 801a5b8 <pbuf_copy.part.0+0x140>
 801a490:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801a5ac <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a494:	1be4      	subs	r4, r4, r7
 801a496:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a498:	6868      	ldr	r0, [r5, #4]
 801a49a:	4294      	cmp	r4, r2
 801a49c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a4a0:	4438      	add	r0, r7
 801a4a2:	bf28      	it	cs
 801a4a4:	4614      	movcs	r4, r2
 801a4a6:	4431      	add	r1, r6
 801a4a8:	4622      	mov	r2, r4
    offset_to += len;
 801a4aa:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a4ac:	f009 fb5a 	bl	8023b64 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a4b0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 801a4b2:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a4b4:	429f      	cmp	r7, r3
 801a4b6:	d837      	bhi.n	801a528 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a4b8:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801a4bc:	4296      	cmp	r6, r2
 801a4be:	d829      	bhi.n	801a514 <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 801a4c0:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 801a4c2:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 801a4c4:	d317      	bcc.n	801a4f6 <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 801a4c6:	429f      	cmp	r7, r3
      p_from = p_from->next;
 801a4c8:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 801a4cc:	d04b      	beq.n	801a566 <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a4ce:	f1b8 0f00 	cmp.w	r8, #0
 801a4d2:	d144      	bne.n	801a55e <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a4d4:	892a      	ldrh	r2, [r5, #8]
 801a4d6:	896b      	ldrh	r3, [r5, #10]
 801a4d8:	429a      	cmp	r2, r3
 801a4da:	d14c      	bne.n	801a576 <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a4dc:	6828      	ldr	r0, [r5, #0]
 801a4de:	b140      	cbz	r0, 801a4f2 <pbuf_copy.part.0+0x7a>
 801a4e0:	4b30      	ldr	r3, [pc, #192]	; (801a5a4 <pbuf_copy.part.0+0x12c>)
 801a4e2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801a4e6:	4930      	ldr	r1, [pc, #192]	; (801a5a8 <pbuf_copy.part.0+0x130>)
 801a4e8:	4830      	ldr	r0, [pc, #192]	; (801a5ac <pbuf_copy.part.0+0x134>)
 801a4ea:	f00a faff 	bl	8024aec <iprintf>
 801a4ee:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 801a4f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 801a4f6:	429f      	cmp	r7, r3
 801a4f8:	d040      	beq.n	801a57c <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a4fa:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801a4fe:	4293      	cmp	r3, r2
 801a500:	d01a      	beq.n	801a538 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a502:	896c      	ldrh	r4, [r5, #10]
 801a504:	2d00      	cmp	r5, #0
 801a506:	d0c5      	beq.n	801a494 <pbuf_copy.part.0+0x1c>
 801a508:	892b      	ldrh	r3, [r5, #8]
 801a50a:	42a3      	cmp	r3, r4
 801a50c:	d045      	beq.n	801a59a <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a50e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801a512:	e7bf      	b.n	801a494 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a514:	f240 32da 	movw	r2, #986	; 0x3da
 801a518:	4653      	mov	r3, sl
 801a51a:	4925      	ldr	r1, [pc, #148]	; (801a5b0 <pbuf_copy.part.0+0x138>)
 801a51c:	4648      	mov	r0, r9
 801a51e:	f00a fae5 	bl	8024aec <iprintf>
    if (offset_from >= p_from->len) {
 801a522:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801a526:	e7cb      	b.n	801a4c0 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a528:	4653      	mov	r3, sl
 801a52a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801a52e:	4659      	mov	r1, fp
 801a530:	4648      	mov	r0, r9
 801a532:	f00a fadb 	bl	8024aec <iprintf>
 801a536:	e7bf      	b.n	801a4b8 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a538:	f8d8 3000 	ldr.w	r3, [r8]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d0e0      	beq.n	801a502 <pbuf_copy.part.0+0x8a>
 801a540:	4b18      	ldr	r3, [pc, #96]	; (801a5a4 <pbuf_copy.part.0+0x12c>)
 801a542:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801a546:	4918      	ldr	r1, [pc, #96]	; (801a5a8 <pbuf_copy.part.0+0x130>)
 801a548:	4818      	ldr	r0, [pc, #96]	; (801a5ac <pbuf_copy.part.0+0x134>)
 801a54a:	f00a facf 	bl	8024aec <iprintf>
 801a54e:	f06f 0005 	mvn.w	r0, #5
}
 801a552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a556:	f1b8 0f00 	cmp.w	r8, #0
 801a55a:	d00a      	beq.n	801a572 <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 801a55c:	2700      	movs	r7, #0
 801a55e:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a560:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801a564:	e7c9      	b.n	801a4fa <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 801a566:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a568:	2d00      	cmp	r5, #0
 801a56a:	d1f4      	bne.n	801a556 <pbuf_copy.part.0+0xde>
 801a56c:	f1b8 0f00 	cmp.w	r8, #0
 801a570:	d108      	bne.n	801a584 <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a572:	2d00      	cmp	r5, #0
 801a574:	d1ae      	bne.n	801a4d4 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 801a576:	2000      	movs	r0, #0
}
 801a578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801a57c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a57e:	b10d      	cbz	r5, 801a584 <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 801a580:	2700      	movs	r7, #0
 801a582:	e7ed      	b.n	801a560 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a584:	4b07      	ldr	r3, [pc, #28]	; (801a5a4 <pbuf_copy.part.0+0x12c>)
 801a586:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801a58a:	490a      	ldr	r1, [pc, #40]	; (801a5b4 <pbuf_copy.part.0+0x13c>)
 801a58c:	4807      	ldr	r0, [pc, #28]	; (801a5ac <pbuf_copy.part.0+0x134>)
 801a58e:	f00a faad 	bl	8024aec <iprintf>
 801a592:	f06f 000f 	mvn.w	r0, #15
}
 801a596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a59a:	682b      	ldr	r3, [r5, #0]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d0b6      	beq.n	801a50e <pbuf_copy.part.0+0x96>
 801a5a0:	e79e      	b.n	801a4e0 <pbuf_copy.part.0+0x68>
 801a5a2:	bf00      	nop
 801a5a4:	08042d00 	.word	0x08042d00
 801a5a8:	08042dc4 	.word	0x08042dc4
 801a5ac:	0802b818 	.word	0x0802b818
 801a5b0:	08042d98 	.word	0x08042d98
 801a5b4:	08042db4 	.word	0x08042db4
 801a5b8:	08042d80 	.word	0x08042d80

0801a5bc <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a5bc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 801a5c0:	2b01      	cmp	r3, #1
{
 801a5c2:	b570      	push	{r4, r5, r6, lr}
 801a5c4:	4614      	mov	r4, r2
 801a5c6:	4606      	mov	r6, r0
 801a5c8:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a5ca:	d110      	bne.n	801a5ee <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801a5cc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801a5d0:	490b      	ldr	r1, [pc, #44]	; (801a600 <pbuf_alloc_reference+0x44>)
 801a5d2:	200e      	movs	r0, #14
 801a5d4:	f7ff fc9e 	bl	8019f14 <memp_malloc_fn>
  if (p == NULL) {
 801a5d8:	b140      	cbz	r0, 801a5ec <pbuf_alloc_reference+0x30>
  p->next = NULL;
 801a5da:	2300      	movs	r3, #0
  p->ref = 1;
 801a5dc:	2201      	movs	r2, #1
  p->payload = payload;
 801a5de:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 801a5e0:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 801a5e2:	6003      	str	r3, [r0, #0]
  p->len = len;
 801a5e4:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 801a5e6:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 801a5e8:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 801a5ea:	81c2      	strh	r2, [r0, #14]
}
 801a5ec:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a5ee:	4b04      	ldr	r3, [pc, #16]	; (801a600 <pbuf_alloc_reference+0x44>)
 801a5f0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801a5f4:	4903      	ldr	r1, [pc, #12]	; (801a604 <pbuf_alloc_reference+0x48>)
 801a5f6:	4804      	ldr	r0, [pc, #16]	; (801a608 <pbuf_alloc_reference+0x4c>)
 801a5f8:	f00a fa78 	bl	8024aec <iprintf>
 801a5fc:	e7e6      	b.n	801a5cc <pbuf_alloc_reference+0x10>
 801a5fe:	bf00      	nop
 801a600:	08042d00 	.word	0x08042d00
 801a604:	08042df0 	.word	0x08042df0
 801a608:	0802b818 	.word	0x0802b818

0801a60c <pbuf_alloc>:
  switch (type) {
 801a60c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 801a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a614:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801a616:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801a61a:	d03d      	beq.n	801a698 <pbuf_alloc+0x8c>
 801a61c:	d80e      	bhi.n	801a63c <pbuf_alloc+0x30>
 801a61e:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 801a622:	2c01      	cmp	r4, #1
 801a624:	d033      	beq.n	801a68e <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801a626:	4b41      	ldr	r3, [pc, #260]	; (801a72c <pbuf_alloc+0x120>)
 801a628:	f240 1227 	movw	r2, #295	; 0x127
 801a62c:	4940      	ldr	r1, [pc, #256]	; (801a730 <pbuf_alloc+0x124>)
      return NULL;
 801a62e:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801a630:	4840      	ldr	r0, [pc, #256]	; (801a734 <pbuf_alloc+0x128>)
 801a632:	f00a fa5b 	bl	8024aec <iprintf>
}
 801a636:	4628      	mov	r0, r5
 801a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 801a63c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 801a640:	d1f1      	bne.n	801a626 <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801a642:	f10a 0303 	add.w	r3, sl, #3
 801a646:	1cca      	adds	r2, r1, #3
 801a648:	4606      	mov	r6, r0
 801a64a:	f022 0203 	bic.w	r2, r2, #3
 801a64e:	f023 0303 	bic.w	r3, r3, #3
 801a652:	4413      	add	r3, r2
 801a654:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801a656:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a65a:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801a65c:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a65e:	d34d      	bcc.n	801a6fc <pbuf_alloc+0xf0>
 801a660:	4282      	cmp	r2, r0
 801a662:	d84b      	bhi.n	801a6fc <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 801a664:	f7ff fab4 	bl	8019bd0 <mem_malloc>
      if (p == NULL) {
 801a668:	4605      	mov	r5, r0
 801a66a:	2800      	cmp	r0, #0
 801a66c:	d0e3      	beq.n	801a636 <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a66e:	1983      	adds	r3, r0, r6
  p->next = NULL;
 801a670:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 801a672:	4a31      	ldr	r2, [pc, #196]	; (801a738 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a674:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 801a676:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 801a67a:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a67c:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 801a680:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 801a684:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801a686:	6043      	str	r3, [r0, #4]
}
 801a688:	4628      	mov	r0, r5
 801a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 801a68e:	2000      	movs	r0, #0
}
 801a690:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 801a694:	f7ff bf92 	b.w	801a5bc <pbuf_alloc_reference>
  switch (type) {
 801a698:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801a69a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801a72c <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 801a69e:	4f27      	ldr	r7, [pc, #156]	; (801a73c <pbuf_alloc+0x130>)
  switch (type) {
 801a6a0:	4625      	mov	r5, r4
 801a6a2:	e009      	b.n	801a6b8 <pbuf_alloc+0xac>
          last->next = q;
 801a6a4:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801a6a6:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801a6aa:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 801a6ae:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 801a6b2:	f1b9 0f00 	cmp.w	r9, #0
 801a6b6:	d0be      	beq.n	801a636 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801a6b8:	22f3      	movs	r2, #243	; 0xf3
 801a6ba:	4641      	mov	r1, r8
 801a6bc:	200f      	movs	r0, #15
 801a6be:	4626      	mov	r6, r4
 801a6c0:	f7ff fc28 	bl	8019f14 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a6c4:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801a6c8:	2100      	movs	r1, #0
        if (q == NULL) {
 801a6ca:	4604      	mov	r4, r0
 801a6cc:	b1d0      	cbz	r0, 801a704 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a6ce:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801a6d2:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 801a6d6:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a6da:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801a6de:	3213      	adds	r2, #19
  p->next = NULL;
 801a6e0:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a6e2:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801a6e4:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801a6e8:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a6ea:	454b      	cmp	r3, r9
  p->payload = payload;
 801a6ec:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a6ee:	bf28      	it	cs
 801a6f0:	464b      	movcs	r3, r9
  p->len = len;
 801a6f2:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 801a6f4:	2d00      	cmp	r5, #0
 801a6f6:	d1d5      	bne.n	801a6a4 <pbuf_alloc+0x98>
 801a6f8:	4605      	mov	r5, r0
 801a6fa:	e7d4      	b.n	801a6a6 <pbuf_alloc+0x9a>
          return NULL;
 801a6fc:	2500      	movs	r5, #0
}
 801a6fe:	4628      	mov	r0, r5
 801a700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 801a704:	4e0e      	ldr	r6, [pc, #56]	; (801a740 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801a706:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801a708:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801a70a:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 801a70c:	b133      	cbz	r3, 801a71c <pbuf_alloc+0x110>
          if (p) {
 801a70e:	2d00      	cmp	r5, #0
 801a710:	d0f4      	beq.n	801a6fc <pbuf_alloc+0xf0>
  if (p == NULL) {
 801a712:	4628      	mov	r0, r5
          return NULL;
 801a714:	2500      	movs	r5, #0
 801a716:	f7ff fe4b 	bl	801a3b0 <pbuf_free.part.0>
 801a71a:	e78c      	b.n	801a636 <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801a71c:	4601      	mov	r1, r0
 801a71e:	4809      	ldr	r0, [pc, #36]	; (801a744 <pbuf_alloc+0x138>)
 801a720:	f7fc fefc 	bl	801751c <tcpip_try_callback>
 801a724:	2800      	cmp	r0, #0
 801a726:	d0f2      	beq.n	801a70e <pbuf_alloc+0x102>
 801a728:	7034      	strb	r4, [r6, #0]
 801a72a:	e7f0      	b.n	801a70e <pbuf_alloc+0x102>
 801a72c:	08042d00 	.word	0x08042d00
 801a730:	08042e04 	.word	0x08042e04
 801a734:	0802b818 	.word	0x0802b818
 801a738:	00010080 	.word	0x00010080
 801a73c:	00010082 	.word	0x00010082
 801a740:	2002dba5 	.word	0x2002dba5
 801a744:	0801a389 	.word	0x0801a389

0801a748 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801a748:	3003      	adds	r0, #3
 801a74a:	f020 0003 	bic.w	r0, r0, #3
{
 801a74e:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801a750:	eb01 0e00 	add.w	lr, r1, r0
{
 801a754:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801a758:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801a75a:	45e6      	cmp	lr, ip
 801a75c:	d80d      	bhi.n	801a77a <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 801a75e:	b104      	cbz	r4, 801a762 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801a760:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801a762:	4618      	mov	r0, r3
  p->next = NULL;
 801a764:	2300      	movs	r3, #0
  p->payload = payload;
 801a766:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 801a768:	2402      	movs	r4, #2
  p->next = NULL;
 801a76a:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 801a76c:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 801a76e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 801a770:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 801a772:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 801a774:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 801a776:	81c3      	strh	r3, [r0, #14]
}
 801a778:	bd10      	pop	{r4, pc}
    return NULL;
 801a77a:	2000      	movs	r0, #0
}
 801a77c:	bd10      	pop	{r4, pc}
 801a77e:	bf00      	nop

0801a780 <pbuf_realloc>:
{
 801a780:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801a782:	4604      	mov	r4, r0
{
 801a784:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801a786:	2800      	cmp	r0, #0
 801a788:	d037      	beq.n	801a7fa <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 801a78a:	8922      	ldrh	r2, [r4, #8]
 801a78c:	42aa      	cmp	r2, r5
 801a78e:	d91b      	bls.n	801a7c8 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 801a790:	8963      	ldrh	r3, [r4, #10]
 801a792:	429d      	cmp	r5, r3
 801a794:	d90d      	bls.n	801a7b2 <pbuf_realloc+0x32>
 801a796:	1aa9      	subs	r1, r5, r2
 801a798:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801a79a:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 801a79c:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801a79e:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801a7a0:	b29d      	uxth	r5, r3
    q = q->next;
 801a7a2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801a7a4:	2c00      	cmp	r4, #0
 801a7a6:	d030      	beq.n	801a80a <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 801a7a8:	8963      	ldrh	r3, [r4, #10]
 801a7aa:	42ab      	cmp	r3, r5
 801a7ac:	d201      	bcs.n	801a7b2 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801a7ae:	8922      	ldrh	r2, [r4, #8]
 801a7b0:	e7f3      	b.n	801a79a <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801a7b2:	7b22      	ldrb	r2, [r4, #12]
 801a7b4:	0712      	lsls	r2, r2, #28
 801a7b6:	d008      	beq.n	801a7ca <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 801a7b8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 801a7ba:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 801a7bc:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801a7be:	b108      	cbz	r0, 801a7c4 <pbuf_realloc+0x44>
  if (p == NULL) {
 801a7c0:	f7ff fdf6 	bl	801a3b0 <pbuf_free.part.0>
  q->next = NULL;
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	6023      	str	r3, [r4, #0]
}
 801a7c8:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801a7ca:	429d      	cmp	r5, r3
 801a7cc:	d0f4      	beq.n	801a7b8 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801a7ce:	7b63      	ldrb	r3, [r4, #13]
 801a7d0:	079b      	lsls	r3, r3, #30
 801a7d2:	d4f1      	bmi.n	801a7b8 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801a7d4:	6863      	ldr	r3, [r4, #4]
 801a7d6:	4620      	mov	r0, r4
 801a7d8:	1b1b      	subs	r3, r3, r4
 801a7da:	18e9      	adds	r1, r5, r3
 801a7dc:	b289      	uxth	r1, r1
 801a7de:	f7ff f91d 	bl	8019a1c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801a7e2:	4604      	mov	r4, r0
 801a7e4:	2800      	cmp	r0, #0
 801a7e6:	d1e7      	bne.n	801a7b8 <pbuf_realloc+0x38>
 801a7e8:	4b0c      	ldr	r3, [pc, #48]	; (801a81c <pbuf_realloc+0x9c>)
 801a7ea:	f240 12bd 	movw	r2, #445	; 0x1bd
 801a7ee:	490c      	ldr	r1, [pc, #48]	; (801a820 <pbuf_realloc+0xa0>)
 801a7f0:	480c      	ldr	r0, [pc, #48]	; (801a824 <pbuf_realloc+0xa4>)
 801a7f2:	f00a f97b 	bl	8024aec <iprintf>
  q->len = rem_len;
 801a7f6:	8164      	strh	r4, [r4, #10]
 801a7f8:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801a7fa:	4b08      	ldr	r3, [pc, #32]	; (801a81c <pbuf_realloc+0x9c>)
 801a7fc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801a800:	4909      	ldr	r1, [pc, #36]	; (801a828 <pbuf_realloc+0xa8>)
 801a802:	4808      	ldr	r0, [pc, #32]	; (801a824 <pbuf_realloc+0xa4>)
 801a804:	f00a f972 	bl	8024aec <iprintf>
 801a808:	e7bf      	b.n	801a78a <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801a80a:	4b04      	ldr	r3, [pc, #16]	; (801a81c <pbuf_realloc+0x9c>)
 801a80c:	f240 12af 	movw	r2, #431	; 0x1af
 801a810:	4906      	ldr	r1, [pc, #24]	; (801a82c <pbuf_realloc+0xac>)
 801a812:	4804      	ldr	r0, [pc, #16]	; (801a824 <pbuf_realloc+0xa4>)
 801a814:	f00a f96a 	bl	8024aec <iprintf>
  while (rem_len > q->len) {
 801a818:	8963      	ldrh	r3, [r4, #10]
 801a81a:	deff      	udf	#255	; 0xff
 801a81c:	08042d00 	.word	0x08042d00
 801a820:	08042e50 	.word	0x08042e50
 801a824:	0802b818 	.word	0x0802b818
 801a828:	08042e20 	.word	0x08042e20
 801a82c:	08042e38 	.word	0x08042e38

0801a830 <pbuf_add_header>:
{
 801a830:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801a832:	b310      	cbz	r0, 801a87a <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801a834:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801a838:	d20c      	bcs.n	801a854 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 801a83a:	b169      	cbz	r1, 801a858 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 801a83c:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801a840:	8902      	ldrh	r2, [r0, #8]
 801a842:	4603      	mov	r3, r0
 801a844:	4462      	add	r2, ip
 801a846:	b292      	uxth	r2, r2
 801a848:	4594      	cmp	ip, r2
 801a84a:	d803      	bhi.n	801a854 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a84c:	f990 000c 	ldrsb.w	r0, [r0, #12]
 801a850:	2800      	cmp	r0, #0
 801a852:	db03      	blt.n	801a85c <pbuf_add_header+0x2c>
    return 1;
 801a854:	2001      	movs	r0, #1
}
 801a856:	bd08      	pop	{r3, pc}
    return 0;
 801a858:	4608      	mov	r0, r1
}
 801a85a:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801a85c:	6858      	ldr	r0, [r3, #4]
 801a85e:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801a860:	f103 0010 	add.w	r0, r3, #16
 801a864:	4281      	cmp	r1, r0
 801a866:	d3f5      	bcc.n	801a854 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 801a868:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801a86c:	2000      	movs	r0, #0
  p->payload = payload;
 801a86e:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a870:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801a872:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a874:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801a878:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801a87a:	4b04      	ldr	r3, [pc, #16]	; (801a88c <pbuf_add_header+0x5c>)
 801a87c:	f240 12df 	movw	r2, #479	; 0x1df
 801a880:	4903      	ldr	r1, [pc, #12]	; (801a890 <pbuf_add_header+0x60>)
 801a882:	4804      	ldr	r0, [pc, #16]	; (801a894 <pbuf_add_header+0x64>)
 801a884:	f00a f932 	bl	8024aec <iprintf>
    return 1;
 801a888:	2001      	movs	r0, #1
}
 801a88a:	bd08      	pop	{r3, pc}
 801a88c:	08042d00 	.word	0x08042d00
 801a890:	0804472c 	.word	0x0804472c
 801a894:	0802b818 	.word	0x0802b818

0801a898 <pbuf_remove_header>:
{
 801a898:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801a89a:	b1c8      	cbz	r0, 801a8d0 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801a89c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801a8a0:	d21f      	bcs.n	801a8e2 <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 801a8a2:	b199      	cbz	r1, 801a8cc <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 801a8a4:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801a8a8:	8942      	ldrh	r2, [r0, #10]
 801a8aa:	4603      	mov	r3, r0
 801a8ac:	4594      	cmp	ip, r2
 801a8ae:	d81a      	bhi.n	801a8e6 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801a8b0:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 801a8b2:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801a8b6:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801a8ba:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801a8bc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801a8be:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 801a8c2:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801a8c4:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801a8c6:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 801a8ca:	bd08      	pop	{r3, pc}
    return 0;
 801a8cc:	4608      	mov	r0, r1
}
 801a8ce:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801a8d0:	4b09      	ldr	r3, [pc, #36]	; (801a8f8 <pbuf_remove_header+0x60>)
 801a8d2:	f240 224b 	movw	r2, #587	; 0x24b
 801a8d6:	4909      	ldr	r1, [pc, #36]	; (801a8fc <pbuf_remove_header+0x64>)
 801a8d8:	4809      	ldr	r0, [pc, #36]	; (801a900 <pbuf_remove_header+0x68>)
 801a8da:	f00a f907 	bl	8024aec <iprintf>
    return 1;
 801a8de:	2001      	movs	r0, #1
}
 801a8e0:	bd08      	pop	{r3, pc}
    return 1;
 801a8e2:	2001      	movs	r0, #1
}
 801a8e4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801a8e6:	4b04      	ldr	r3, [pc, #16]	; (801a8f8 <pbuf_remove_header+0x60>)
 801a8e8:	f240 2255 	movw	r2, #597	; 0x255
 801a8ec:	4905      	ldr	r1, [pc, #20]	; (801a904 <pbuf_remove_header+0x6c>)
 801a8ee:	4804      	ldr	r0, [pc, #16]	; (801a900 <pbuf_remove_header+0x68>)
 801a8f0:	f00a f8fc 	bl	8024aec <iprintf>
 801a8f4:	2001      	movs	r0, #1
}
 801a8f6:	bd08      	pop	{r3, pc}
 801a8f8:	08042d00 	.word	0x08042d00
 801a8fc:	0804472c 	.word	0x0804472c
 801a900:	0802b818 	.word	0x0802b818
 801a904:	08042e6c 	.word	0x08042e6c

0801a908 <pbuf_header_force>:
  if (header_size_increment < 0) {
 801a908:	2900      	cmp	r1, #0
 801a90a:	db1a      	blt.n	801a942 <pbuf_header_force+0x3a>
{
 801a90c:	b508      	push	{r3, lr}
 801a90e:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 801a910:	b1d0      	cbz	r0, 801a948 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 801a912:	b341      	cbz	r1, 801a966 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 801a914:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801a918:	891a      	ldrh	r2, [r3, #8]
 801a91a:	4462      	add	r2, ip
 801a91c:	b292      	uxth	r2, r2
 801a91e:	4594      	cmp	ip, r2
 801a920:	d81f      	bhi.n	801a962 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a922:	f993 000c 	ldrsb.w	r0, [r3, #12]
 801a926:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801a928:	6858      	ldr	r0, [r3, #4]
 801a92a:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a92e:	db14      	blt.n	801a95a <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 801a930:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801a934:	2000      	movs	r0, #0
  p->payload = payload;
 801a936:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a938:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801a93a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a93c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801a940:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801a942:	4249      	negs	r1, r1
 801a944:	f7ff bfa8 	b.w	801a898 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801a948:	4b08      	ldr	r3, [pc, #32]	; (801a96c <pbuf_header_force+0x64>)
 801a94a:	f240 12df 	movw	r2, #479	; 0x1df
 801a94e:	4908      	ldr	r1, [pc, #32]	; (801a970 <pbuf_header_force+0x68>)
 801a950:	4808      	ldr	r0, [pc, #32]	; (801a974 <pbuf_header_force+0x6c>)
 801a952:	f00a f8cb 	bl	8024aec <iprintf>
    return 1;
 801a956:	2001      	movs	r0, #1
}
 801a958:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801a95a:	f103 0010 	add.w	r0, r3, #16
 801a95e:	4281      	cmp	r1, r0
 801a960:	d2e6      	bcs.n	801a930 <pbuf_header_force+0x28>
    return 1;
 801a962:	2001      	movs	r0, #1
}
 801a964:	bd08      	pop	{r3, pc}
    return 0;
 801a966:	4608      	mov	r0, r1
}
 801a968:	bd08      	pop	{r3, pc}
 801a96a:	bf00      	nop
 801a96c:	08042d00 	.word	0x08042d00
 801a970:	0804472c 	.word	0x0804472c
 801a974:	0802b818 	.word	0x0802b818

0801a978 <pbuf_free>:
  if (p == NULL) {
 801a978:	b108      	cbz	r0, 801a97e <pbuf_free+0x6>
 801a97a:	f7ff bd19 	b.w	801a3b0 <pbuf_free.part.0>
{
 801a97e:	b510      	push	{r4, lr}
 801a980:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801a982:	4b04      	ldr	r3, [pc, #16]	; (801a994 <pbuf_free+0x1c>)
 801a984:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801a988:	4903      	ldr	r1, [pc, #12]	; (801a998 <pbuf_free+0x20>)
 801a98a:	4804      	ldr	r0, [pc, #16]	; (801a99c <pbuf_free+0x24>)
 801a98c:	f00a f8ae 	bl	8024aec <iprintf>
}
 801a990:	4620      	mov	r0, r4
 801a992:	bd10      	pop	{r4, pc}
 801a994:	08042d00 	.word	0x08042d00
 801a998:	0804472c 	.word	0x0804472c
 801a99c:	0802b818 	.word	0x0802b818

0801a9a0 <pbuf_clen>:
  while (p != NULL) {
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	b130      	cbz	r0, 801a9b2 <pbuf_clen+0x12>
  len = 0;
 801a9a4:	2000      	movs	r0, #0
    ++len;
 801a9a6:	3001      	adds	r0, #1
    p = p->next;
 801a9a8:	681b      	ldr	r3, [r3, #0]
    ++len;
 801a9aa:	b280      	uxth	r0, r0
  while (p != NULL) {
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d1fa      	bne.n	801a9a6 <pbuf_clen+0x6>
 801a9b0:	4770      	bx	lr
}
 801a9b2:	4770      	bx	lr

0801a9b4 <pbuf_ref>:
  if (p != NULL) {
 801a9b4:	b120      	cbz	r0, 801a9c0 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801a9b6:	7b83      	ldrb	r3, [r0, #14]
 801a9b8:	3301      	adds	r3, #1
 801a9ba:	b2db      	uxtb	r3, r3
 801a9bc:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a9be:	b103      	cbz	r3, 801a9c2 <pbuf_ref+0xe>
}
 801a9c0:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a9c2:	4b03      	ldr	r3, [pc, #12]	; (801a9d0 <pbuf_ref+0x1c>)
 801a9c4:	f240 3242 	movw	r2, #834	; 0x342
 801a9c8:	4902      	ldr	r1, [pc, #8]	; (801a9d4 <pbuf_ref+0x20>)
 801a9ca:	4803      	ldr	r0, [pc, #12]	; (801a9d8 <pbuf_ref+0x24>)
 801a9cc:	f00a b88e 	b.w	8024aec <iprintf>
 801a9d0:	08042d00 	.word	0x08042d00
 801a9d4:	08042e8c 	.word	0x08042e8c
 801a9d8:	0802b818 	.word	0x0802b818

0801a9dc <pbuf_cat>:
{
 801a9dc:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a9de:	b330      	cbz	r0, 801aa2e <pbuf_cat+0x52>
 801a9e0:	460d      	mov	r5, r1
 801a9e2:	b321      	cbz	r1, 801aa2e <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801a9e4:	6803      	ldr	r3, [r0, #0]
 801a9e6:	4604      	mov	r4, r0
 801a9e8:	b13b      	cbz	r3, 801a9fa <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a9ea:	8922      	ldrh	r2, [r4, #8]
 801a9ec:	8928      	ldrh	r0, [r5, #8]
 801a9ee:	4402      	add	r2, r0
 801a9f0:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801a9f2:	461c      	mov	r4, r3
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d1f7      	bne.n	801a9ea <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801a9fa:	8963      	ldrh	r3, [r4, #10]
 801a9fc:	8922      	ldrh	r2, [r4, #8]
 801a9fe:	429a      	cmp	r2, r3
 801aa00:	d010      	beq.n	801aa24 <pbuf_cat+0x48>
 801aa02:	4b0f      	ldr	r3, [pc, #60]	; (801aa40 <pbuf_cat+0x64>)
 801aa04:	f240 3262 	movw	r2, #866	; 0x362
 801aa08:	490e      	ldr	r1, [pc, #56]	; (801aa44 <pbuf_cat+0x68>)
 801aa0a:	480f      	ldr	r0, [pc, #60]	; (801aa48 <pbuf_cat+0x6c>)
 801aa0c:	f00a f86e 	bl	8024aec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801aa10:	6823      	ldr	r3, [r4, #0]
 801aa12:	b133      	cbz	r3, 801aa22 <pbuf_cat+0x46>
 801aa14:	4b0a      	ldr	r3, [pc, #40]	; (801aa40 <pbuf_cat+0x64>)
 801aa16:	f240 3263 	movw	r2, #867	; 0x363
 801aa1a:	490c      	ldr	r1, [pc, #48]	; (801aa4c <pbuf_cat+0x70>)
 801aa1c:	480a      	ldr	r0, [pc, #40]	; (801aa48 <pbuf_cat+0x6c>)
 801aa1e:	f00a f865 	bl	8024aec <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801aa22:	8923      	ldrh	r3, [r4, #8]
 801aa24:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801aa26:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801aa28:	4413      	add	r3, r2
 801aa2a:	8123      	strh	r3, [r4, #8]
}
 801aa2c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801aa2e:	4b04      	ldr	r3, [pc, #16]	; (801aa40 <pbuf_cat+0x64>)
 801aa30:	f240 3259 	movw	r2, #857	; 0x359
 801aa34:	4906      	ldr	r1, [pc, #24]	; (801aa50 <pbuf_cat+0x74>)
 801aa36:	4804      	ldr	r0, [pc, #16]	; (801aa48 <pbuf_cat+0x6c>)
}
 801aa38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801aa3c:	f00a b856 	b.w	8024aec <iprintf>
 801aa40:	08042d00 	.word	0x08042d00
 801aa44:	08042ed8 	.word	0x08042ed8
 801aa48:	0802b818 	.word	0x0802b818
 801aa4c:	08042f08 	.word	0x08042f08
 801aa50:	08042ea0 	.word	0x08042ea0

0801aa54 <pbuf_chain>:
{
 801aa54:	b510      	push	{r4, lr}
 801aa56:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801aa58:	f7ff ffc0 	bl	801a9dc <pbuf_cat>
  if (p != NULL) {
 801aa5c:	b124      	cbz	r4, 801aa68 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801aa5e:	7ba3      	ldrb	r3, [r4, #14]
 801aa60:	3301      	adds	r3, #1
 801aa62:	b2db      	uxtb	r3, r3
 801aa64:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801aa66:	b103      	cbz	r3, 801aa6a <pbuf_chain+0x16>
}
 801aa68:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801aa6a:	4b04      	ldr	r3, [pc, #16]	; (801aa7c <pbuf_chain+0x28>)
 801aa6c:	f240 3242 	movw	r2, #834	; 0x342
 801aa70:	4903      	ldr	r1, [pc, #12]	; (801aa80 <pbuf_chain+0x2c>)
 801aa72:	4804      	ldr	r0, [pc, #16]	; (801aa84 <pbuf_chain+0x30>)
}
 801aa74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801aa78:	f00a b838 	b.w	8024aec <iprintf>
 801aa7c:	08042d00 	.word	0x08042d00
 801aa80:	08042e8c 	.word	0x08042e8c
 801aa84:	0802b818 	.word	0x0802b818

0801aa88 <pbuf_copy>:
{
 801aa88:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801aa8a:	b140      	cbz	r0, 801aa9e <pbuf_copy+0x16>
 801aa8c:	b139      	cbz	r1, 801aa9e <pbuf_copy+0x16>
 801aa8e:	8902      	ldrh	r2, [r0, #8]
 801aa90:	890b      	ldrh	r3, [r1, #8]
 801aa92:	429a      	cmp	r2, r3
 801aa94:	d303      	bcc.n	801aa9e <pbuf_copy+0x16>
}
 801aa96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801aa9a:	f7ff bced 	b.w	801a478 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801aa9e:	4b05      	ldr	r3, [pc, #20]	; (801aab4 <pbuf_copy+0x2c>)
 801aaa0:	f240 32c9 	movw	r2, #969	; 0x3c9
 801aaa4:	4904      	ldr	r1, [pc, #16]	; (801aab8 <pbuf_copy+0x30>)
 801aaa6:	4805      	ldr	r0, [pc, #20]	; (801aabc <pbuf_copy+0x34>)
 801aaa8:	f00a f820 	bl	8024aec <iprintf>
}
 801aaac:	f06f 000f 	mvn.w	r0, #15
 801aab0:	bd08      	pop	{r3, pc}
 801aab2:	bf00      	nop
 801aab4:	08042d00 	.word	0x08042d00
 801aab8:	08042f18 	.word	0x08042f18
 801aabc:	0802b818 	.word	0x0802b818

0801aac0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801aac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801aac4:	4605      	mov	r5, r0
 801aac6:	b370      	cbz	r0, 801ab26 <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801aac8:	460f      	mov	r7, r1
 801aaca:	2900      	cmp	r1, #0
 801aacc:	d036      	beq.n	801ab3c <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801aace:	4690      	mov	r8, r2
 801aad0:	b392      	cbz	r2, 801ab38 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801aad2:	2600      	movs	r6, #0
 801aad4:	e005      	b.n	801aae2 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801aad6:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801aad8:	682d      	ldr	r5, [r5, #0]
 801aada:	f1b8 0f00 	cmp.w	r8, #0
 801aade:	d01f      	beq.n	801ab20 <pbuf_copy_partial+0x60>
 801aae0:	b1f5      	cbz	r5, 801ab20 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801aae2:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801aae4:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801aae8:	b11b      	cbz	r3, 801aaf2 <pbuf_copy_partial+0x32>
 801aaea:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801aaec:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801aaf0:	d2f1      	bcs.n	801aad6 <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801aaf2:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801aaf6:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801aaf8:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801aafc:	4419      	add	r1, r3
 801aafe:	4544      	cmp	r4, r8
 801ab00:	bf28      	it	cs
 801ab02:	4644      	movcs	r4, r8
 801ab04:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801ab06:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801ab08:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801ab0c:	f009 f82a 	bl	8023b64 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801ab10:	b2b6      	uxth	r6, r6
      offset = 0;
 801ab12:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801ab14:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801ab18:	682d      	ldr	r5, [r5, #0]
 801ab1a:	f1b8 0f00 	cmp.w	r8, #0
 801ab1e:	d1df      	bne.n	801aae0 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801ab20:	4630      	mov	r0, r6
 801ab22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801ab26:	4b0a      	ldr	r3, [pc, #40]	; (801ab50 <pbuf_copy_partial+0x90>)
 801ab28:	f240 420a 	movw	r2, #1034	; 0x40a
 801ab2c:	4909      	ldr	r1, [pc, #36]	; (801ab54 <pbuf_copy_partial+0x94>)
 801ab2e:	462e      	mov	r6, r5
 801ab30:	4809      	ldr	r0, [pc, #36]	; (801ab58 <pbuf_copy_partial+0x98>)
 801ab32:	f009 ffdb 	bl	8024aec <iprintf>
 801ab36:	e7f3      	b.n	801ab20 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801ab38:	4616      	mov	r6, r2
 801ab3a:	e7f1      	b.n	801ab20 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801ab3c:	4b04      	ldr	r3, [pc, #16]	; (801ab50 <pbuf_copy_partial+0x90>)
 801ab3e:	f240 420b 	movw	r2, #1035	; 0x40b
 801ab42:	4906      	ldr	r1, [pc, #24]	; (801ab5c <pbuf_copy_partial+0x9c>)
 801ab44:	463e      	mov	r6, r7
 801ab46:	4804      	ldr	r0, [pc, #16]	; (801ab58 <pbuf_copy_partial+0x98>)
 801ab48:	f009 ffd0 	bl	8024aec <iprintf>
 801ab4c:	e7e8      	b.n	801ab20 <pbuf_copy_partial+0x60>
 801ab4e:	bf00      	nop
 801ab50:	08042d00 	.word	0x08042d00
 801ab54:	08042f48 	.word	0x08042f48
 801ab58:	0802b818 	.word	0x0802b818
 801ab5c:	08042f68 	.word	0x08042f68

0801ab60 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801ab60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801ab64:	2800      	cmp	r0, #0
 801ab66:	d049      	beq.n	801abfc <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801ab68:	460f      	mov	r7, r1
 801ab6a:	2900      	cmp	r1, #0
 801ab6c:	d03c      	beq.n	801abe8 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801ab6e:	8903      	ldrh	r3, [r0, #8]
 801ab70:	4604      	mov	r4, r0
 801ab72:	4690      	mov	r8, r2
 801ab74:	4293      	cmp	r3, r2
 801ab76:	d32d      	bcc.n	801abd4 <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801ab78:	b34a      	cbz	r2, 801abce <pbuf_take+0x6e>
 801ab7a:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801ab7c:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801ab7e:	f8df b094 	ldr.w	fp, [pc, #148]	; 801ac14 <pbuf_take+0xb4>
 801ab82:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801ac28 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801ab86:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801ab88:	19b9      	adds	r1, r7, r6
 801ab8a:	6860      	ldr	r0, [r4, #4]
 801ab8c:	42aa      	cmp	r2, r5
 801ab8e:	bf28      	it	cs
 801ab90:	462a      	movcs	r2, r5
 801ab92:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801ab94:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801ab96:	f008 ffe5 	bl	8023b64 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801ab9a:	6824      	ldr	r4, [r4, #0]
 801ab9c:	ebb5 0509 	subs.w	r5, r5, r9
 801aba0:	d009      	beq.n	801abb6 <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801aba2:	2c00      	cmp	r4, #0
 801aba4:	d1ef      	bne.n	801ab86 <pbuf_take+0x26>
 801aba6:	465b      	mov	r3, fp
 801aba8:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801abac:	4651      	mov	r1, sl
 801abae:	4818      	ldr	r0, [pc, #96]	; (801ac10 <pbuf_take+0xb0>)
 801abb0:	f009 ff9c 	bl	8024aec <iprintf>
 801abb4:	e7e7      	b.n	801ab86 <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801abb6:	45b0      	cmp	r8, r6
 801abb8:	d009      	beq.n	801abce <pbuf_take+0x6e>
 801abba:	4b16      	ldr	r3, [pc, #88]	; (801ac14 <pbuf_take+0xb4>)
 801abbc:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801abc0:	4915      	ldr	r1, [pc, #84]	; (801ac18 <pbuf_take+0xb8>)
 801abc2:	4813      	ldr	r0, [pc, #76]	; (801ac10 <pbuf_take+0xb0>)
 801abc4:	f009 ff92 	bl	8024aec <iprintf>
  return ERR_OK;
 801abc8:	4628      	mov	r0, r5
}
 801abca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801abce:	2000      	movs	r0, #0
}
 801abd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801abd4:	4b0f      	ldr	r3, [pc, #60]	; (801ac14 <pbuf_take+0xb4>)
 801abd6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801abda:	4910      	ldr	r1, [pc, #64]	; (801ac1c <pbuf_take+0xbc>)
 801abdc:	480c      	ldr	r0, [pc, #48]	; (801ac10 <pbuf_take+0xb0>)
 801abde:	f009 ff85 	bl	8024aec <iprintf>
 801abe2:	f04f 30ff 	mov.w	r0, #4294967295
 801abe6:	e7f3      	b.n	801abd0 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801abe8:	4b0a      	ldr	r3, [pc, #40]	; (801ac14 <pbuf_take+0xb4>)
 801abea:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801abee:	490c      	ldr	r1, [pc, #48]	; (801ac20 <pbuf_take+0xc0>)
 801abf0:	4807      	ldr	r0, [pc, #28]	; (801ac10 <pbuf_take+0xb0>)
 801abf2:	f009 ff7b 	bl	8024aec <iprintf>
 801abf6:	f06f 000f 	mvn.w	r0, #15
 801abfa:	e7e9      	b.n	801abd0 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801abfc:	4b05      	ldr	r3, [pc, #20]	; (801ac14 <pbuf_take+0xb4>)
 801abfe:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801ac02:	4908      	ldr	r1, [pc, #32]	; (801ac24 <pbuf_take+0xc4>)
 801ac04:	4802      	ldr	r0, [pc, #8]	; (801ac10 <pbuf_take+0xb0>)
 801ac06:	f009 ff71 	bl	8024aec <iprintf>
 801ac0a:	f06f 000f 	mvn.w	r0, #15
 801ac0e:	e7df      	b.n	801abd0 <pbuf_take+0x70>
 801ac10:	0802b818 	.word	0x0802b818
 801ac14:	08042d00 	.word	0x08042d00
 801ac18:	08042ff8 	.word	0x08042ff8
 801ac1c:	08042fc0 	.word	0x08042fc0
 801ac20:	08042fa4 	.word	0x08042fa4
 801ac24:	08042f8c 	.word	0x08042f8c
 801ac28:	08042fe0 	.word	0x08042fe0

0801ac2c <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801ac2c:	b390      	cbz	r0, 801ac94 <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801ac2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac32:	460f      	mov	r7, r1
 801ac34:	4604      	mov	r4, r0
 801ac36:	e002      	b.n	801ac3e <pbuf_take_at+0x12>
    q = q->next;
 801ac38:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801ac3a:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801ac3c:	b334      	cbz	r4, 801ac8c <pbuf_take_at+0x60>
 801ac3e:	8965      	ldrh	r5, [r4, #10]
 801ac40:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801ac42:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801ac46:	d9f7      	bls.n	801ac38 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801ac48:	8921      	ldrh	r1, [r4, #8]
 801ac4a:	189e      	adds	r6, r3, r2
 801ac4c:	42b1      	cmp	r1, r6
 801ac4e:	db1d      	blt.n	801ac8c <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801ac50:	1ae9      	subs	r1, r5, r3
 801ac52:	428a      	cmp	r2, r1
 801ac54:	dc07      	bgt.n	801ac66 <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801ac56:	6860      	ldr	r0, [r4, #4]
 801ac58:	4639      	mov	r1, r7
 801ac5a:	4418      	add	r0, r3
 801ac5c:	f008 ff82 	bl	8023b64 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801ac60:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801ac62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801ac66:	fa1f f881 	uxth.w	r8, r1
 801ac6a:	6860      	ldr	r0, [r4, #4]
 801ac6c:	4639      	mov	r1, r7
 801ac6e:	4642      	mov	r2, r8
 801ac70:	4418      	add	r0, r3
 801ac72:	f008 ff77 	bl	8023b64 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801ac76:	1b70      	subs	r0, r6, r5
 801ac78:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801ac7a:	2a00      	cmp	r2, #0
 801ac7c:	d0f0      	beq.n	801ac60 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801ac7e:	eb07 0108 	add.w	r1, r7, r8
 801ac82:	6820      	ldr	r0, [r4, #0]
}
 801ac84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801ac88:	f7ff bf6a 	b.w	801ab60 <pbuf_take>
  return ERR_MEM;
 801ac8c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ac90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801ac94:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ac98:	4770      	bx	lr
 801ac9a:	bf00      	nop

0801ac9c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801ac9c:	b538      	push	{r3, r4, r5, lr}
 801ac9e:	4615      	mov	r5, r2
 801aca0:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801aca2:	8929      	ldrh	r1, [r5, #8]
 801aca4:	f7ff fcb2 	bl	801a60c <pbuf_alloc>
  if (q == NULL) {
 801aca8:	4604      	mov	r4, r0
 801acaa:	b138      	cbz	r0, 801acbc <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801acac:	8902      	ldrh	r2, [r0, #8]
 801acae:	892b      	ldrh	r3, [r5, #8]
 801acb0:	429a      	cmp	r2, r3
 801acb2:	d305      	bcc.n	801acc0 <pbuf_clone+0x24>
 801acb4:	4629      	mov	r1, r5
 801acb6:	f7ff fbdf 	bl	801a478 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801acba:	b940      	cbnz	r0, 801acce <pbuf_clone+0x32>
  return q;
}
 801acbc:	4620      	mov	r0, r4
 801acbe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801acc0:	4b07      	ldr	r3, [pc, #28]	; (801ace0 <pbuf_clone+0x44>)
 801acc2:	f240 32c9 	movw	r2, #969	; 0x3c9
 801acc6:	4907      	ldr	r1, [pc, #28]	; (801ace4 <pbuf_clone+0x48>)
 801acc8:	4807      	ldr	r0, [pc, #28]	; (801ace8 <pbuf_clone+0x4c>)
 801acca:	f009 ff0f 	bl	8024aec <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801acce:	4b04      	ldr	r3, [pc, #16]	; (801ace0 <pbuf_clone+0x44>)
 801acd0:	f240 5224 	movw	r2, #1316	; 0x524
 801acd4:	4905      	ldr	r1, [pc, #20]	; (801acec <pbuf_clone+0x50>)
 801acd6:	4804      	ldr	r0, [pc, #16]	; (801ace8 <pbuf_clone+0x4c>)
 801acd8:	f009 ff08 	bl	8024aec <iprintf>
}
 801acdc:	4620      	mov	r0, r4
 801acde:	bd38      	pop	{r3, r4, r5, pc}
 801ace0:	08042d00 	.word	0x08042d00
 801ace4:	08042f18 	.word	0x08042f18
 801ace8:	0802b818 	.word	0x0802b818
 801acec:	08043010 	.word	0x08043010

0801acf0 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801acf0:	b140      	cbz	r0, 801ad04 <pbuf_try_get_at+0x14>
 801acf2:	8943      	ldrh	r3, [r0, #10]
 801acf4:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801acf6:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801acfa:	d806      	bhi.n	801ad0a <pbuf_try_get_at+0x1a>
    q = q->next;
 801acfc:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801acfe:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801ad00:	2800      	cmp	r0, #0
 801ad02:	d1f6      	bne.n	801acf2 <pbuf_try_get_at+0x2>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
  }
  return -1;
 801ad04:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ad08:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801ad0a:	6843      	ldr	r3, [r0, #4]
 801ad0c:	5c58      	ldrb	r0, [r3, r1]
 801ad0e:	4770      	bx	lr

0801ad10 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801ad10:	b918      	cbnz	r0, 801ad1a <pbuf_put_at+0xa>
 801ad12:	e00a      	b.n	801ad2a <pbuf_put_at+0x1a>
    q = q->next;
 801ad14:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801ad16:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801ad18:	b130      	cbz	r0, 801ad28 <pbuf_put_at+0x18>
 801ad1a:	8943      	ldrh	r3, [r0, #10]
 801ad1c:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801ad1e:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801ad22:	d9f7      	bls.n	801ad14 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801ad24:	6843      	ldr	r3, [r0, #4]
 801ad26:	545a      	strb	r2, [r3, r1]
  }
}
 801ad28:	4770      	bx	lr
 801ad2a:	4770      	bx	lr

0801ad2c <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801ad2c:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801ad2e:	8905      	ldrh	r5, [r0, #8]
 801ad30:	18cc      	adds	r4, r1, r3
 801ad32:	42a5      	cmp	r5, r4
 801ad34:	db2e      	blt.n	801ad94 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801ad36:	8944      	ldrh	r4, [r0, #10]
 801ad38:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801ad3a:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801ad3e:	d803      	bhi.n	801ad48 <pbuf_memcmp+0x1c>
    q = q->next;
 801ad40:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801ad42:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801ad44:	2800      	cmp	r0, #0
 801ad46:	d1f6      	bne.n	801ad36 <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801ad48:	b1f3      	cbz	r3, 801ad88 <pbuf_memcmp+0x5c>
 801ad4a:	2500      	movs	r5, #0
 801ad4c:	1e56      	subs	r6, r2, #1
 801ad4e:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801ad50:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801ad54:	4604      	mov	r4, r0
 801ad56:	fa1f fc8c 	uxth.w	ip, ip
 801ad5a:	b920      	cbnz	r0, 801ad66 <pbuf_memcmp+0x3a>
 801ad5c:	e00b      	b.n	801ad76 <pbuf_memcmp+0x4a>
    q = q->next;
 801ad5e:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801ad60:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801ad64:	b13c      	cbz	r4, 801ad76 <pbuf_memcmp+0x4a>
 801ad66:	8962      	ldrh	r2, [r4, #10]
 801ad68:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801ad6a:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801ad6e:	d2f6      	bcs.n	801ad5e <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801ad70:	6862      	ldr	r2, [r4, #4]
 801ad72:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801ad76:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801ad7a:	42a2      	cmp	r2, r4
 801ad7c:	d106      	bne.n	801ad8c <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801ad7e:	3501      	adds	r5, #1
 801ad80:	fa1f fe85 	uxth.w	lr, r5
 801ad84:	4573      	cmp	r3, lr
 801ad86:	d8e3      	bhi.n	801ad50 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801ad88:	2000      	movs	r0, #0
}
 801ad8a:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801ad8c:	f10e 0001 	add.w	r0, lr, #1
 801ad90:	b280      	uxth	r0, r0
}
 801ad92:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801ad94:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801ad98:	bd70      	pop	{r4, r5, r6, pc}
 801ad9a:	bf00      	nop

0801ad9c <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad9e:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801ada0:	8905      	ldrh	r5, [r0, #8]
{
 801ada2:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801ada4:	4422      	add	r2, r4
 801ada6:	4295      	cmp	r5, r2
 801ada8:	db15      	blt.n	801add6 <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801adaa:	1aed      	subs	r5, r5, r3
 801adac:	4606      	mov	r6, r0
 801adae:	460f      	mov	r7, r1
 801adb0:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801adb2:	42a5      	cmp	r5, r4
 801adb4:	d204      	bcs.n	801adc0 <pbuf_memfind+0x24>
 801adb6:	e00e      	b.n	801add6 <pbuf_memfind+0x3a>
 801adb8:	fa1f f48c 	uxth.w	r4, ip
 801adbc:	42a5      	cmp	r5, r4
 801adbe:	d30a      	bcc.n	801add6 <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801adc0:	4621      	mov	r1, r4
 801adc2:	463a      	mov	r2, r7
 801adc4:	4630      	mov	r0, r6
 801adc6:	f7ff ffb1 	bl	801ad2c <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801adca:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801adce:	2800      	cmp	r0, #0
 801add0:	d1f2      	bne.n	801adb8 <pbuf_memfind+0x1c>
 801add2:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801add4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801add6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801adda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801addc <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801addc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ade0:	4e33      	ldr	r6, [pc, #204]	; (801aeb0 <raw_input+0xd4>)
{
 801ade2:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ade4:	6831      	ldr	r1, [r6, #0]
 801ade6:	6970      	ldr	r0, [r6, #20]
 801ade8:	f007 fb90 	bl	802250c <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801adec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801adf0:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801adf2:	4b30      	ldr	r3, [pc, #192]	; (801aeb4 <raw_input+0xd8>)
 801adf4:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801adf6:	2c00      	cmp	r4, #0
 801adf8:	d056      	beq.n	801aea8 <raw_input+0xcc>
 801adfa:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801adfc:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801adfe:	f106 0b10 	add.w	fp, r6, #16
 801ae02:	46ca      	mov	sl, r9
  prev = NULL;
 801ae04:	4606      	mov	r6, r0
 801ae06:	e004      	b.n	801ae12 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801ae08:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801ae0a:	4626      	mov	r6, r4
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d037      	beq.n	801ae80 <raw_input+0xa4>
 801ae10:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801ae12:	7c23      	ldrb	r3, [r4, #16]
 801ae14:	42ab      	cmp	r3, r5
 801ae16:	d1f7      	bne.n	801ae08 <raw_input+0x2c>
 801ae18:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae1a:	b13a      	cbz	r2, 801ae2c <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ae1c:	4b24      	ldr	r3, [pc, #144]	; (801aeb0 <raw_input+0xd4>)
 801ae1e:	685b      	ldr	r3, [r3, #4]
 801ae20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ae24:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae26:	b2db      	uxtb	r3, r3
 801ae28:	429a      	cmp	r2, r3
 801ae2a:	d1ed      	bne.n	801ae08 <raw_input+0x2c>
 801ae2c:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801ae2e:	f1ba 0f00 	cmp.w	sl, #0
 801ae32:	d027      	beq.n	801ae84 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d1e7      	bne.n	801ae08 <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801ae38:	7c63      	ldrb	r3, [r4, #17]
 801ae3a:	07db      	lsls	r3, r3, #31
 801ae3c:	d504      	bpl.n	801ae48 <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801ae3e:	4b1c      	ldr	r3, [pc, #112]	; (801aeb0 <raw_input+0xd4>)
 801ae40:	6862      	ldr	r2, [r4, #4]
 801ae42:	691b      	ldr	r3, [r3, #16]
 801ae44:	429a      	cmp	r2, r3
 801ae46:	d1df      	bne.n	801ae08 <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801ae48:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801ae4c:	f1b9 0f00 	cmp.w	r9, #0
 801ae50:	d0da      	beq.n	801ae08 <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801ae52:	465b      	mov	r3, fp
 801ae54:	4642      	mov	r2, r8
 801ae56:	4621      	mov	r1, r4
 801ae58:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801ae5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801ae5e:	47c8      	blx	r9
        if (eaten != 0) {
 801ae60:	b9c8      	cbnz	r0, 801ae96 <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801ae62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ae66:	42bb      	cmp	r3, r7
 801ae68:	d013      	beq.n	801ae92 <raw_input+0xb6>
 801ae6a:	4b13      	ldr	r3, [pc, #76]	; (801aeb8 <raw_input+0xdc>)
 801ae6c:	22c0      	movs	r2, #192	; 0xc0
 801ae6e:	4913      	ldr	r1, [pc, #76]	; (801aebc <raw_input+0xe0>)
 801ae70:	4626      	mov	r6, r4
 801ae72:	4813      	ldr	r0, [pc, #76]	; (801aec0 <raw_input+0xe4>)
 801ae74:	f009 fe3a 	bl	8024aec <iprintf>
    pcb = pcb->next;
 801ae78:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801ae7a:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d1c7      	bne.n	801ae10 <raw_input+0x34>
  }
  return ret;
}
 801ae80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d0d7      	beq.n	801ae38 <raw_input+0x5c>
 801ae88:	4a09      	ldr	r2, [pc, #36]	; (801aeb0 <raw_input+0xd4>)
 801ae8a:	6952      	ldr	r2, [r2, #20]
 801ae8c:	4293      	cmp	r3, r2
 801ae8e:	d1bb      	bne.n	801ae08 <raw_input+0x2c>
 801ae90:	e7d2      	b.n	801ae38 <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801ae92:	2002      	movs	r0, #2
 801ae94:	e7b8      	b.n	801ae08 <raw_input+0x2c>
          if (prev != NULL) {
 801ae96:	b14e      	cbz	r6, 801aeac <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801ae98:	4906      	ldr	r1, [pc, #24]	; (801aeb4 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801ae9a:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801ae9c:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801ae9e:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801aea0:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801aea2:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801aea4:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801aea6:	e7eb      	b.n	801ae80 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801aea8:	4620      	mov	r0, r4
 801aeaa:	e7e9      	b.n	801ae80 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801aeac:	2001      	movs	r0, #1
 801aeae:	e7e7      	b.n	801ae80 <raw_input+0xa4>
 801aeb0:	2001ec2c 	.word	0x2001ec2c
 801aeb4:	2002dba8 	.word	0x2002dba8
 801aeb8:	08043024 	.word	0x08043024
 801aebc:	08043054 	.word	0x08043054
 801aec0:	0802b818 	.word	0x0802b818

0801aec4 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801aec4:	b110      	cbz	r0, 801aecc <raw_netif_ip_addr_changed+0x8>
 801aec6:	6802      	ldr	r2, [r0, #0]
 801aec8:	b101      	cbz	r1, 801aecc <raw_netif_ip_addr_changed+0x8>
 801aeca:	b902      	cbnz	r2, 801aece <raw_netif_ip_addr_changed+0xa>
 801aecc:	4770      	bx	lr
 801aece:	680b      	ldr	r3, [r1, #0]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d0fb      	beq.n	801aecc <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801aed4:	4b08      	ldr	r3, [pc, #32]	; (801aef8 <raw_netif_ip_addr_changed+0x34>)
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d0f7      	beq.n	801aecc <raw_netif_ip_addr_changed+0x8>
{
 801aedc:	b410      	push	{r4}
 801aede:	e000      	b.n	801aee2 <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801aee0:	6802      	ldr	r2, [r0, #0]
 801aee2:	681c      	ldr	r4, [r3, #0]
 801aee4:	4294      	cmp	r4, r2
 801aee6:	d101      	bne.n	801aeec <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801aee8:	680a      	ldr	r2, [r1, #0]
 801aeea:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801aeec:	68db      	ldr	r3, [r3, #12]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d1f6      	bne.n	801aee0 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801aef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aef6:	4770      	bx	lr
 801aef8:	2002dba8 	.word	0x2002dba8

0801aefc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801aefc:	b4f0      	push	{r4, r5, r6, r7}
 801aefe:	4f13      	ldr	r7, [pc, #76]	; (801af4c <tcp_new_port+0x50>)
 801af00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801af04:	4e12      	ldr	r6, [pc, #72]	; (801af50 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801af06:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801af0a:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801af0c:	4d11      	ldr	r5, [pc, #68]	; (801af54 <tcp_new_port+0x58>)
  tcp_port++;
 801af0e:	3001      	adds	r0, #1
 801af10:	4c11      	ldr	r4, [pc, #68]	; (801af58 <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801af12:	462b      	mov	r3, r5
  tcp_port++;
 801af14:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801af16:	4560      	cmp	r0, ip
 801af18:	bf08      	it	eq
 801af1a:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	b913      	cbnz	r3, 801af28 <tcp_new_port+0x2c>
 801af22:	e00b      	b.n	801af3c <tcp_new_port+0x40>
 801af24:	68db      	ldr	r3, [r3, #12]
 801af26:	b14b      	cbz	r3, 801af3c <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801af28:	8ada      	ldrh	r2, [r3, #22]
 801af2a:	4282      	cmp	r2, r0
 801af2c:	d1fa      	bne.n	801af24 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801af2e:	3901      	subs	r1, #1
 801af30:	b289      	uxth	r1, r1
 801af32:	2900      	cmp	r1, #0
 801af34:	d1eb      	bne.n	801af0e <tcp_new_port+0x12>
 801af36:	8038      	strh	r0, [r7, #0]
          return 0;
 801af38:	4608      	mov	r0, r1
 801af3a:	e005      	b.n	801af48 <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801af3c:	42b4      	cmp	r4, r6
 801af3e:	d002      	beq.n	801af46 <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801af40:	f854 3b04 	ldr.w	r3, [r4], #4
 801af44:	e7eb      	b.n	801af1e <tcp_new_port+0x22>
 801af46:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801af48:	bcf0      	pop	{r4, r5, r6, r7}
 801af4a:	4770      	bx	lr
 801af4c:	20000410 	.word	0x20000410
 801af50:	08043794 	.word	0x08043794
 801af54:	2002dbb8 	.word	0x2002dbb8
 801af58:	08043788 	.word	0x08043788

0801af5c <tcp_close_shutdown_fin>:
{
 801af5c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801af5e:	4604      	mov	r4, r0
 801af60:	b310      	cbz	r0, 801afa8 <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801af62:	7d23      	ldrb	r3, [r4, #20]
 801af64:	2b04      	cmp	r3, #4
 801af66:	d005      	beq.n	801af74 <tcp_close_shutdown_fin+0x18>
 801af68:	2b07      	cmp	r3, #7
 801af6a:	d00e      	beq.n	801af8a <tcp_close_shutdown_fin+0x2e>
 801af6c:	2b03      	cmp	r3, #3
 801af6e:	d001      	beq.n	801af74 <tcp_close_shutdown_fin+0x18>
 801af70:	2000      	movs	r0, #0
}
 801af72:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801af74:	4620      	mov	r0, r4
 801af76:	f003 fd33 	bl	801e9e0 <tcp_send_fin>
      if (err == ERR_OK) {
 801af7a:	b950      	cbnz	r0, 801af92 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801af7c:	2305      	movs	r3, #5
 801af7e:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801af80:	4620      	mov	r0, r4
 801af82:	f003 fe9d 	bl	801ecc0 <tcp_output>
 801af86:	2000      	movs	r0, #0
}
 801af88:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801af8a:	4620      	mov	r0, r4
 801af8c:	f003 fd28 	bl	801e9e0 <tcp_send_fin>
      if (err == ERR_OK) {
 801af90:	b138      	cbz	r0, 801afa2 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801af92:	1c43      	adds	r3, r0, #1
 801af94:	d1ed      	bne.n	801af72 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801af96:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801af98:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801af9a:	f043 0308 	orr.w	r3, r3, #8
 801af9e:	8363      	strh	r3, [r4, #26]
}
 801afa0:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801afa2:	2309      	movs	r3, #9
 801afa4:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801afa6:	e7eb      	b.n	801af80 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801afa8:	4b03      	ldr	r3, [pc, #12]	; (801afb8 <tcp_close_shutdown_fin+0x5c>)
 801afaa:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801afae:	4903      	ldr	r1, [pc, #12]	; (801afbc <tcp_close_shutdown_fin+0x60>)
 801afb0:	4803      	ldr	r0, [pc, #12]	; (801afc0 <tcp_close_shutdown_fin+0x64>)
 801afb2:	f009 fd9b 	bl	8024aec <iprintf>
 801afb6:	e7d4      	b.n	801af62 <tcp_close_shutdown_fin+0x6>
 801afb8:	080430a0 	.word	0x080430a0
 801afbc:	080430d0 	.word	0x080430d0
 801afc0:	0802b818 	.word	0x0802b818

0801afc4 <tcp_init>:
{
 801afc4:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801afc6:	f009 fe35 	bl	8024c34 <rand>
 801afca:	4b02      	ldr	r3, [pc, #8]	; (801afd4 <tcp_init+0x10>)
 801afcc:	4a02      	ldr	r2, [pc, #8]	; (801afd8 <tcp_init+0x14>)
 801afce:	4303      	orrs	r3, r0
 801afd0:	8013      	strh	r3, [r2, #0]
}
 801afd2:	bd08      	pop	{r3, pc}
 801afd4:	ffffc000 	.word	0xffffc000
 801afd8:	20000410 	.word	0x20000410

0801afdc <tcp_free>:
{
 801afdc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801afde:	7d03      	ldrb	r3, [r0, #20]
{
 801afe0:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801afe2:	2b01      	cmp	r3, #1
 801afe4:	d005      	beq.n	801aff2 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801afe6:	4621      	mov	r1, r4
 801afe8:	2002      	movs	r0, #2
}
 801afea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801afee:	f7fe bfc7 	b.w	8019f80 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801aff2:	4906      	ldr	r1, [pc, #24]	; (801b00c <tcp_free+0x30>)
 801aff4:	22d4      	movs	r2, #212	; 0xd4
 801aff6:	4b06      	ldr	r3, [pc, #24]	; (801b010 <tcp_free+0x34>)
 801aff8:	4806      	ldr	r0, [pc, #24]	; (801b014 <tcp_free+0x38>)
 801affa:	f009 fd77 	bl	8024aec <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801affe:	4621      	mov	r1, r4
 801b000:	2002      	movs	r0, #2
}
 801b002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b006:	f7fe bfbb 	b.w	8019f80 <memp_free>
 801b00a:	bf00      	nop
 801b00c:	080430dc 	.word	0x080430dc
 801b010:	080430a0 	.word	0x080430a0
 801b014:	0802b818 	.word	0x0802b818

0801b018 <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801b018:	2900      	cmp	r1, #0
{
 801b01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801b01c:	4b26      	ldr	r3, [pc, #152]	; (801b0b8 <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801b01e:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801b020:	bf14      	ite	ne
 801b022:	460e      	movne	r6, r1
 801b024:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b026:	2800      	cmp	r0, #0
 801b028:	d03c      	beq.n	801b0a4 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b02a:	7d03      	ldrb	r3, [r0, #20]
 801b02c:	4607      	mov	r7, r0
 801b02e:	bb7b      	cbnz	r3, 801b090 <tcp_bind+0x78>
  if (port == 0) {
 801b030:	b31a      	cbz	r2, 801b07a <tcp_bind+0x62>
 801b032:	4922      	ldr	r1, [pc, #136]	; (801b0bc <tcp_bind+0xa4>)
 801b034:	4b22      	ldr	r3, [pc, #136]	; (801b0c0 <tcp_bind+0xa8>)
 801b036:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	b913      	cbnz	r3, 801b044 <tcp_bind+0x2c>
 801b03e:	e00e      	b.n	801b05e <tcp_bind+0x46>
 801b040:	68db      	ldr	r3, [r3, #12]
 801b042:	b163      	cbz	r3, 801b05e <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801b044:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801b048:	4594      	cmp	ip, r2
 801b04a:	d1f9      	bne.n	801b040 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b04c:	681c      	ldr	r4, [r3, #0]
 801b04e:	b11c      	cbz	r4, 801b058 <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801b050:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b052:	b10d      	cbz	r5, 801b058 <tcp_bind+0x40>
 801b054:	42ac      	cmp	r4, r5
 801b056:	d1f3      	bne.n	801b040 <tcp_bind+0x28>
              return ERR_USE;
 801b058:	f06f 0007 	mvn.w	r0, #7
}
 801b05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801b05e:	4281      	cmp	r1, r0
 801b060:	d113      	bne.n	801b08a <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801b062:	6833      	ldr	r3, [r6, #0]
 801b064:	b103      	cbz	r3, 801b068 <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b066:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b068:	4b16      	ldr	r3, [pc, #88]	; (801b0c4 <tcp_bind+0xac>)
  pcb->local_port = port;
 801b06a:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b06c:	681a      	ldr	r2, [r3, #0]
 801b06e:	601f      	str	r7, [r3, #0]
 801b070:	60fa      	str	r2, [r7, #12]
 801b072:	f004 f951 	bl	801f318 <tcp_timer_needed>
  return ERR_OK;
 801b076:	2000      	movs	r0, #0
}
 801b078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801b07a:	f7ff ff3f 	bl	801aefc <tcp_new_port>
    if (port == 0) {
 801b07e:	4602      	mov	r2, r0
 801b080:	2800      	cmp	r0, #0
 801b082:	d1ee      	bne.n	801b062 <tcp_bind+0x4a>
      return ERR_BUF;
 801b084:	f06f 0001 	mvn.w	r0, #1
}
 801b088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b08a:	f851 3b04 	ldr.w	r3, [r1], #4
 801b08e:	e7d4      	b.n	801b03a <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b090:	4b0d      	ldr	r3, [pc, #52]	; (801b0c8 <tcp_bind+0xb0>)
 801b092:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b096:	490d      	ldr	r1, [pc, #52]	; (801b0cc <tcp_bind+0xb4>)
 801b098:	480d      	ldr	r0, [pc, #52]	; (801b0d0 <tcp_bind+0xb8>)
 801b09a:	f009 fd27 	bl	8024aec <iprintf>
 801b09e:	f06f 0005 	mvn.w	r0, #5
}
 801b0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b0a4:	4b08      	ldr	r3, [pc, #32]	; (801b0c8 <tcp_bind+0xb0>)
 801b0a6:	f240 22a9 	movw	r2, #681	; 0x2a9
 801b0aa:	490a      	ldr	r1, [pc, #40]	; (801b0d4 <tcp_bind+0xbc>)
 801b0ac:	4808      	ldr	r0, [pc, #32]	; (801b0d0 <tcp_bind+0xb8>)
 801b0ae:	f009 fd1d 	bl	8024aec <iprintf>
 801b0b2:	f06f 000f 	mvn.w	r0, #15
}
 801b0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0b8:	08044cb8 	.word	0x08044cb8
 801b0bc:	08043788 	.word	0x08043788
 801b0c0:	2002dbb8 	.word	0x2002dbb8
 801b0c4:	2002dbb4 	.word	0x2002dbb4
 801b0c8:	080430a0 	.word	0x080430a0
 801b0cc:	08043108 	.word	0x08043108
 801b0d0:	0802b818 	.word	0x0802b818
 801b0d4:	080430f0 	.word	0x080430f0

0801b0d8 <tcp_listen_with_backlog_and_err>:
{
 801b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b0da:	4604      	mov	r4, r0
{
 801b0dc:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b0de:	2800      	cmp	r0, #0
 801b0e0:	d060      	beq.n	801b1a4 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b0e2:	7d05      	ldrb	r5, [r0, #20]
 801b0e4:	2d00      	cmp	r5, #0
 801b0e6:	d14a      	bne.n	801b17e <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801b0e8:	f240 3272 	movw	r2, #882	; 0x372
 801b0ec:	4933      	ldr	r1, [pc, #204]	; (801b1bc <tcp_listen_with_backlog_and_err+0xe4>)
 801b0ee:	2003      	movs	r0, #3
 801b0f0:	f7fe ff10 	bl	8019f14 <memp_malloc_fn>
  if (lpcb == NULL) {
 801b0f4:	4606      	mov	r6, r0
 801b0f6:	2800      	cmp	r0, #0
 801b0f8:	d051      	beq.n	801b19e <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801b0fa:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801b0fc:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801b0fe:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801b100:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801b102:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801b104:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801b106:	7d62      	ldrb	r2, [r4, #21]
 801b108:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801b10a:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801b10c:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801b10e:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801b110:	7ae2      	ldrb	r2, [r4, #11]
 801b112:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801b114:	7aa2      	ldrb	r2, [r4, #10]
 801b116:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801b118:	6822      	ldr	r2, [r4, #0]
 801b11a:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801b11c:	b99b      	cbnz	r3, 801b146 <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b11e:	7d23      	ldrb	r3, [r4, #20]
 801b120:	2b01      	cmp	r3, #1
 801b122:	d020      	beq.n	801b166 <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801b124:	4621      	mov	r1, r4
 801b126:	2002      	movs	r0, #2
 801b128:	f7fe ff2a 	bl	8019f80 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b12c:	4b24      	ldr	r3, [pc, #144]	; (801b1c0 <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801b12e:	4925      	ldr	r1, [pc, #148]	; (801b1c4 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b130:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801b132:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b134:	60f2      	str	r2, [r6, #12]
 801b136:	601e      	str	r6, [r3, #0]
 801b138:	f004 f8ee 	bl	801f318 <tcp_timer_needed>
  res = ERR_OK;
 801b13c:	2300      	movs	r3, #0
  if (err != NULL) {
 801b13e:	b107      	cbz	r7, 801b142 <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801b140:	703b      	strb	r3, [r7, #0]
}
 801b142:	4630      	mov	r0, r6
 801b144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b146:	4a20      	ldr	r2, [pc, #128]	; (801b1c8 <tcp_listen_with_backlog_and_err+0xf0>)
 801b148:	6813      	ldr	r3, [r2, #0]
 801b14a:	42a3      	cmp	r3, r4
 801b14c:	d012      	beq.n	801b174 <tcp_listen_with_backlog_and_err+0x9c>
 801b14e:	b12b      	cbz	r3, 801b15c <tcp_listen_with_backlog_and_err+0x84>
 801b150:	68d9      	ldr	r1, [r3, #12]
 801b152:	42a1      	cmp	r1, r4
 801b154:	d01e      	beq.n	801b194 <tcp_listen_with_backlog_and_err+0xbc>
 801b156:	460b      	mov	r3, r1
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d1f9      	bne.n	801b150 <tcp_listen_with_backlog_and_err+0x78>
 801b15c:	2300      	movs	r3, #0
 801b15e:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b160:	7d23      	ldrb	r3, [r4, #20]
 801b162:	2b01      	cmp	r3, #1
 801b164:	d1de      	bne.n	801b124 <tcp_listen_with_backlog_and_err+0x4c>
 801b166:	4b15      	ldr	r3, [pc, #84]	; (801b1bc <tcp_listen_with_backlog_and_err+0xe4>)
 801b168:	22d4      	movs	r2, #212	; 0xd4
 801b16a:	4918      	ldr	r1, [pc, #96]	; (801b1cc <tcp_listen_with_backlog_and_err+0xf4>)
 801b16c:	4818      	ldr	r0, [pc, #96]	; (801b1d0 <tcp_listen_with_backlog_and_err+0xf8>)
 801b16e:	f009 fcbd 	bl	8024aec <iprintf>
 801b172:	e7d7      	b.n	801b124 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b174:	68e3      	ldr	r3, [r4, #12]
 801b176:	6013      	str	r3, [r2, #0]
 801b178:	2300      	movs	r3, #0
 801b17a:	60e3      	str	r3, [r4, #12]
 801b17c:	e7f0      	b.n	801b160 <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b17e:	4b0f      	ldr	r3, [pc, #60]	; (801b1bc <tcp_listen_with_backlog_and_err+0xe4>)
 801b180:	f240 325a 	movw	r2, #858	; 0x35a
 801b184:	4913      	ldr	r1, [pc, #76]	; (801b1d4 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801b186:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b188:	4811      	ldr	r0, [pc, #68]	; (801b1d0 <tcp_listen_with_backlog_and_err+0xf8>)
 801b18a:	f009 fcaf 	bl	8024aec <iprintf>
 801b18e:	f06f 030e 	mvn.w	r3, #14
 801b192:	e7d4      	b.n	801b13e <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b194:	68e2      	ldr	r2, [r4, #12]
 801b196:	60da      	str	r2, [r3, #12]
 801b198:	2300      	movs	r3, #0
 801b19a:	60e3      	str	r3, [r4, #12]
 801b19c:	e7e0      	b.n	801b160 <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801b19e:	f04f 33ff 	mov.w	r3, #4294967295
 801b1a2:	e7cc      	b.n	801b13e <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b1a4:	4b05      	ldr	r3, [pc, #20]	; (801b1bc <tcp_listen_with_backlog_and_err+0xe4>)
 801b1a6:	f240 3259 	movw	r2, #857	; 0x359
 801b1aa:	490b      	ldr	r1, [pc, #44]	; (801b1d8 <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801b1ac:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b1ae:	4808      	ldr	r0, [pc, #32]	; (801b1d0 <tcp_listen_with_backlog_and_err+0xf8>)
 801b1b0:	f009 fc9c 	bl	8024aec <iprintf>
 801b1b4:	f06f 030f 	mvn.w	r3, #15
 801b1b8:	e7c1      	b.n	801b13e <tcp_listen_with_backlog_and_err+0x66>
 801b1ba:	bf00      	nop
 801b1bc:	080430a0 	.word	0x080430a0
 801b1c0:	2002dbb8 	.word	0x2002dbb8
 801b1c4:	0801be6d 	.word	0x0801be6d
 801b1c8:	2002dbb4 	.word	0x2002dbb4
 801b1cc:	080430dc 	.word	0x080430dc
 801b1d0:	0802b818 	.word	0x0802b818
 801b1d4:	08043160 	.word	0x08043160
 801b1d8:	08043130 	.word	0x08043130

0801b1dc <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801b1dc:	2200      	movs	r2, #0
 801b1de:	f7ff bf7b 	b.w	801b0d8 <tcp_listen_with_backlog_and_err>
 801b1e2:	bf00      	nop

0801b1e4 <tcp_update_rcv_ann_wnd>:
{
 801b1e4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b1e6:	4604      	mov	r4, r0
 801b1e8:	b1c0      	cbz	r0, 801b21c <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b1ea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b1ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b1ee:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b1f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b1f4:	1ad0      	subs	r0, r2, r3
 801b1f6:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801b1fa:	4428      	add	r0, r5
 801b1fc:	bf94      	ite	ls
 801b1fe:	eba0 010c 	subls.w	r1, r0, ip
 801b202:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801b206:	2900      	cmp	r1, #0
 801b208:	db01      	blt.n	801b20e <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801b20a:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801b20c:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801b20e:	1aea      	subs	r2, r5, r3
 801b210:	2a00      	cmp	r2, #0
 801b212:	dd0b      	ble.n	801b22c <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801b214:	2300      	movs	r3, #0
    return 0;
 801b216:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801b218:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801b21a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b21c:	4b0b      	ldr	r3, [pc, #44]	; (801b24c <tcp_update_rcv_ann_wnd+0x68>)
 801b21e:	f240 32a6 	movw	r2, #934	; 0x3a6
 801b222:	490b      	ldr	r1, [pc, #44]	; (801b250 <tcp_update_rcv_ann_wnd+0x6c>)
 801b224:	480b      	ldr	r0, [pc, #44]	; (801b254 <tcp_update_rcv_ann_wnd+0x70>)
 801b226:	f009 fc61 	bl	8024aec <iprintf>
 801b22a:	e7de      	b.n	801b1ea <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801b22c:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b22e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801b232:	d202      	bcs.n	801b23a <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801b234:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801b236:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801b238:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b23a:	4b04      	ldr	r3, [pc, #16]	; (801b24c <tcp_update_rcv_ann_wnd+0x68>)
 801b23c:	f240 32b6 	movw	r2, #950	; 0x3b6
 801b240:	4905      	ldr	r1, [pc, #20]	; (801b258 <tcp_update_rcv_ann_wnd+0x74>)
 801b242:	4804      	ldr	r0, [pc, #16]	; (801b254 <tcp_update_rcv_ann_wnd+0x70>)
 801b244:	f009 fc52 	bl	8024aec <iprintf>
 801b248:	e7f4      	b.n	801b234 <tcp_update_rcv_ann_wnd+0x50>
 801b24a:	bf00      	nop
 801b24c:	080430a0 	.word	0x080430a0
 801b250:	08043198 	.word	0x08043198
 801b254:	0802b818 	.word	0x0802b818
 801b258:	080431bc 	.word	0x080431bc

0801b25c <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b25c:	b340      	cbz	r0, 801b2b0 <tcp_recved+0x54>
{
 801b25e:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b260:	7d03      	ldrb	r3, [r0, #20]
 801b262:	4605      	mov	r5, r0
 801b264:	460c      	mov	r4, r1
 801b266:	2b01      	cmp	r3, #1
 801b268:	d01a      	beq.n	801b2a0 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801b26a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801b26c:	1919      	adds	r1, r3, r4
 801b26e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801b270:	428b      	cmp	r3, r1
 801b272:	d802      	bhi.n	801b27a <tcp_recved+0x1e>
 801b274:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801b278:	d901      	bls.n	801b27e <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801b27a:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801b27e:	4628      	mov	r0, r5
 801b280:	8529      	strh	r1, [r5, #40]	; 0x28
 801b282:	f7ff ffaf 	bl	801b1e4 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801b286:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801b28a:	d200      	bcs.n	801b28e <tcp_recved+0x32>
}
 801b28c:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801b28e:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801b290:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801b292:	f043 0302 	orr.w	r3, r3, #2
 801b296:	836b      	strh	r3, [r5, #26]
}
 801b298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801b29c:	f003 bd10 	b.w	801ecc0 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b2a0:	4b07      	ldr	r3, [pc, #28]	; (801b2c0 <tcp_recved+0x64>)
 801b2a2:	f240 32d2 	movw	r2, #978	; 0x3d2
 801b2a6:	4907      	ldr	r1, [pc, #28]	; (801b2c4 <tcp_recved+0x68>)
 801b2a8:	4807      	ldr	r0, [pc, #28]	; (801b2c8 <tcp_recved+0x6c>)
 801b2aa:	f009 fc1f 	bl	8024aec <iprintf>
 801b2ae:	e7dc      	b.n	801b26a <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b2b0:	4b03      	ldr	r3, [pc, #12]	; (801b2c0 <tcp_recved+0x64>)
 801b2b2:	f240 32cf 	movw	r2, #975	; 0x3cf
 801b2b6:	4905      	ldr	r1, [pc, #20]	; (801b2cc <tcp_recved+0x70>)
 801b2b8:	4803      	ldr	r0, [pc, #12]	; (801b2c8 <tcp_recved+0x6c>)
 801b2ba:	f009 bc17 	b.w	8024aec <iprintf>
 801b2be:	bf00      	nop
 801b2c0:	080430a0 	.word	0x080430a0
 801b2c4:	080431f0 	.word	0x080431f0
 801b2c8:	0802b818 	.word	0x0802b818
 801b2cc:	080431d8 	.word	0x080431d8

0801b2d0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b2d2:	2800      	cmp	r0, #0
 801b2d4:	f000 808c 	beq.w	801b3f0 <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b2d8:	2900      	cmp	r1, #0
 801b2da:	d07f      	beq.n	801b3dc <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801b2dc:	461e      	mov	r6, r3
 801b2de:	7d03      	ldrb	r3, [r0, #20]
 801b2e0:	4604      	mov	r4, r0
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d16a      	bne.n	801b3bc <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801b2e6:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b2e8:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801b2ea:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801b2ec:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b2ee:	2800      	cmp	r0, #0
 801b2f0:	d049      	beq.n	801b386 <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801b2f2:	f7ff f837 	bl	801a364 <netif_get_by_index>
 801b2f6:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801b2f8:	2d00      	cmp	r5, #0
 801b2fa:	d06c      	beq.n	801b3d6 <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b2fc:	6823      	ldr	r3, [r4, #0]
 801b2fe:	b90b      	cbnz	r3, 801b304 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b300:	686b      	ldr	r3, [r5, #4]
 801b302:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801b304:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801b306:	b927      	cbnz	r7, 801b312 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801b308:	f7ff fdf8 	bl	801aefc <tcp_new_port>
 801b30c:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801b30e:	2800      	cmp	r0, #0
 801b310:	d05e      	beq.n	801b3d0 <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801b312:	4b3c      	ldr	r3, [pc, #240]	; (801b404 <tcp_connect+0x134>)
 801b314:	4a3c      	ldr	r2, [pc, #240]	; (801b408 <tcp_connect+0x138>)
 801b316:	6811      	ldr	r1, [r2, #0]
 801b318:	681a      	ldr	r2, [r3, #0]
 801b31a:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801b31c:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801b320:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801b322:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801b324:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b326:	4b39      	ldr	r3, [pc, #228]	; (801b40c <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801b328:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b32a:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801b32c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801b32e:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801b332:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801b336:	2200      	movs	r2, #0
 801b338:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801b33a:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d037      	beq.n	801b3b0 <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801b340:	2b28      	cmp	r3, #40	; 0x28
 801b342:	d907      	bls.n	801b354 <tcp_connect+0x84>
 801b344:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801b348:	b292      	uxth	r2, r2
 801b34a:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801b34e:	bf28      	it	cs
 801b350:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801b354:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801b356:	2102      	movs	r1, #2
 801b358:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801b35a:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801b35c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801b360:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801b364:	f003 fa90 	bl	801e888 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801b368:	4605      	mov	r5, r0
 801b36a:	b9f8      	cbnz	r0, 801b3ac <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801b36c:	2302      	movs	r3, #2
 801b36e:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801b370:	b187      	cbz	r7, 801b394 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801b372:	4a27      	ldr	r2, [pc, #156]	; (801b410 <tcp_connect+0x140>)
 801b374:	6813      	ldr	r3, [r2, #0]
 801b376:	42a3      	cmp	r3, r4
 801b378:	d01d      	beq.n	801b3b6 <tcp_connect+0xe6>
 801b37a:	b15b      	cbz	r3, 801b394 <tcp_connect+0xc4>
 801b37c:	68da      	ldr	r2, [r3, #12]
 801b37e:	42a2      	cmp	r2, r4
 801b380:	d006      	beq.n	801b390 <tcp_connect+0xc0>
 801b382:	4613      	mov	r3, r2
 801b384:	e7f9      	b.n	801b37a <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b386:	1d20      	adds	r0, r4, #4
 801b388:	f006 fee4 	bl	8022154 <ip4_route>
 801b38c:	4605      	mov	r5, r0
 801b38e:	e7b3      	b.n	801b2f8 <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801b390:	68e2      	ldr	r2, [r4, #12]
 801b392:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801b394:	4b1f      	ldr	r3, [pc, #124]	; (801b414 <tcp_connect+0x144>)
 801b396:	681a      	ldr	r2, [r3, #0]
 801b398:	601c      	str	r4, [r3, #0]
 801b39a:	60e2      	str	r2, [r4, #12]
 801b39c:	f003 ffbc 	bl	801f318 <tcp_timer_needed>
 801b3a0:	4b1d      	ldr	r3, [pc, #116]	; (801b418 <tcp_connect+0x148>)
 801b3a2:	2201      	movs	r2, #1
    tcp_output(pcb);
 801b3a4:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801b3a6:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801b3a8:	f003 fc8a 	bl	801ecc0 <tcp_output>
}
 801b3ac:	4628      	mov	r0, r5
 801b3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3b0:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b3b4:	e7ce      	b.n	801b354 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801b3b6:	68e3      	ldr	r3, [r4, #12]
 801b3b8:	6013      	str	r3, [r2, #0]
 801b3ba:	e7eb      	b.n	801b394 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801b3bc:	4b17      	ldr	r3, [pc, #92]	; (801b41c <tcp_connect+0x14c>)
 801b3be:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801b3c2:	4917      	ldr	r1, [pc, #92]	; (801b420 <tcp_connect+0x150>)
 801b3c4:	f06f 0509 	mvn.w	r5, #9
 801b3c8:	4816      	ldr	r0, [pc, #88]	; (801b424 <tcp_connect+0x154>)
 801b3ca:	f009 fb8f 	bl	8024aec <iprintf>
 801b3ce:	e7ed      	b.n	801b3ac <tcp_connect+0xdc>
      return ERR_BUF;
 801b3d0:	f06f 0501 	mvn.w	r5, #1
 801b3d4:	e7ea      	b.n	801b3ac <tcp_connect+0xdc>
    return ERR_RTE;
 801b3d6:	f06f 0503 	mvn.w	r5, #3
 801b3da:	e7e7      	b.n	801b3ac <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b3dc:	4b0f      	ldr	r3, [pc, #60]	; (801b41c <tcp_connect+0x14c>)
 801b3de:	f240 4236 	movw	r2, #1078	; 0x436
 801b3e2:	4911      	ldr	r1, [pc, #68]	; (801b428 <tcp_connect+0x158>)
 801b3e4:	f06f 050f 	mvn.w	r5, #15
 801b3e8:	480e      	ldr	r0, [pc, #56]	; (801b424 <tcp_connect+0x154>)
 801b3ea:	f009 fb7f 	bl	8024aec <iprintf>
 801b3ee:	e7dd      	b.n	801b3ac <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b3f0:	4b0a      	ldr	r3, [pc, #40]	; (801b41c <tcp_connect+0x14c>)
 801b3f2:	f240 4235 	movw	r2, #1077	; 0x435
 801b3f6:	490d      	ldr	r1, [pc, #52]	; (801b42c <tcp_connect+0x15c>)
 801b3f8:	f06f 050f 	mvn.w	r5, #15
 801b3fc:	4809      	ldr	r0, [pc, #36]	; (801b424 <tcp_connect+0x154>)
 801b3fe:	f009 fb75 	bl	8024aec <iprintf>
 801b402:	e7d3      	b.n	801b3ac <tcp_connect+0xdc>
 801b404:	2000040c 	.word	0x2000040c
 801b408:	2002dbbc 	.word	0x2002dbbc
 801b40c:	08600860 	.word	0x08600860
 801b410:	2002dbb4 	.word	0x2002dbb4
 801b414:	2002dbac 	.word	0x2002dbac
 801b418:	2002dbb0 	.word	0x2002dbb0
 801b41c:	080430a0 	.word	0x080430a0
 801b420:	08043250 	.word	0x08043250
 801b424:	0802b818 	.word	0x0802b818
 801b428:	08043234 	.word	0x08043234
 801b42c:	08043218 	.word	0x08043218

0801b430 <tcp_segs_free>:
  while (seg != NULL) {
 801b430:	b170      	cbz	r0, 801b450 <tcp_segs_free+0x20>
{
 801b432:	b538      	push	{r3, r4, r5, lr}
 801b434:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801b436:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801b438:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b43a:	6868      	ldr	r0, [r5, #4]
 801b43c:	b108      	cbz	r0, 801b442 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801b43e:	f7ff fa9b 	bl	801a978 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b442:	4629      	mov	r1, r5
 801b444:	2004      	movs	r0, #4
 801b446:	f7fe fd9b 	bl	8019f80 <memp_free>
  while (seg != NULL) {
 801b44a:	2c00      	cmp	r4, #0
 801b44c:	d1f3      	bne.n	801b436 <tcp_segs_free+0x6>
}
 801b44e:	bd38      	pop	{r3, r4, r5, pc}
 801b450:	4770      	bx	lr
 801b452:	bf00      	nop

0801b454 <tcp_seg_free>:
  if (seg != NULL) {
 801b454:	b158      	cbz	r0, 801b46e <tcp_seg_free+0x1a>
{
 801b456:	b510      	push	{r4, lr}
 801b458:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801b45a:	6840      	ldr	r0, [r0, #4]
 801b45c:	b108      	cbz	r0, 801b462 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801b45e:	f7ff fa8b 	bl	801a978 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b462:	4621      	mov	r1, r4
 801b464:	2004      	movs	r0, #4
}
 801b466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801b46a:	f7fe bd89 	b.w	8019f80 <memp_free>
 801b46e:	4770      	bx	lr

0801b470 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801b470:	b108      	cbz	r0, 801b476 <tcp_setprio+0x6>
  pcb->prio = prio;
 801b472:	7541      	strb	r1, [r0, #21]
}
 801b474:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801b476:	4b03      	ldr	r3, [pc, #12]	; (801b484 <tcp_setprio+0x14>)
 801b478:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801b47c:	4902      	ldr	r1, [pc, #8]	; (801b488 <tcp_setprio+0x18>)
 801b47e:	4803      	ldr	r0, [pc, #12]	; (801b48c <tcp_setprio+0x1c>)
 801b480:	f009 bb34 	b.w	8024aec <iprintf>
 801b484:	080430a0 	.word	0x080430a0
 801b488:	08043280 	.word	0x08043280
 801b48c:	0802b818 	.word	0x0802b818

0801b490 <tcp_seg_copy>:
{
 801b490:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801b492:	4605      	mov	r5, r0
 801b494:	b1a0      	cbz	r0, 801b4c0 <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801b496:	f240 6284 	movw	r2, #1668	; 0x684
 801b49a:	490d      	ldr	r1, [pc, #52]	; (801b4d0 <tcp_seg_copy+0x40>)
 801b49c:	2004      	movs	r0, #4
 801b49e:	f7fe fd39 	bl	8019f14 <memp_malloc_fn>
  if (cseg == NULL) {
 801b4a2:	4604      	mov	r4, r0
 801b4a4:	b150      	cbz	r0, 801b4bc <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801b4a6:	6868      	ldr	r0, [r5, #4]
 801b4a8:	6829      	ldr	r1, [r5, #0]
 801b4aa:	68aa      	ldr	r2, [r5, #8]
 801b4ac:	68eb      	ldr	r3, [r5, #12]
 801b4ae:	6060      	str	r0, [r4, #4]
 801b4b0:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801b4b2:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801b4b4:	60a2      	str	r2, [r4, #8]
 801b4b6:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801b4b8:	f7ff fa7c 	bl	801a9b4 <pbuf_ref>
}
 801b4bc:	4620      	mov	r0, r4
 801b4be:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801b4c0:	4b03      	ldr	r3, [pc, #12]	; (801b4d0 <tcp_seg_copy+0x40>)
 801b4c2:	f240 6282 	movw	r2, #1666	; 0x682
 801b4c6:	4903      	ldr	r1, [pc, #12]	; (801b4d4 <tcp_seg_copy+0x44>)
 801b4c8:	4803      	ldr	r0, [pc, #12]	; (801b4d8 <tcp_seg_copy+0x48>)
 801b4ca:	f009 fb0f 	bl	8024aec <iprintf>
 801b4ce:	e7e2      	b.n	801b496 <tcp_seg_copy+0x6>
 801b4d0:	080430a0 	.word	0x080430a0
 801b4d4:	0804329c 	.word	0x0804329c
 801b4d8:	0802b818 	.word	0x0802b818

0801b4dc <tcp_arg>:
  if (pcb != NULL) {
 801b4dc:	b100      	cbz	r0, 801b4e0 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801b4de:	6101      	str	r1, [r0, #16]
}
 801b4e0:	4770      	bx	lr
 801b4e2:	bf00      	nop

0801b4e4 <tcp_recv>:
  if (pcb != NULL) {
 801b4e4:	b140      	cbz	r0, 801b4f8 <tcp_recv+0x14>
{
 801b4e6:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801b4e8:	7d03      	ldrb	r3, [r0, #20]
 801b4ea:	4604      	mov	r4, r0
 801b4ec:	460d      	mov	r5, r1
 801b4ee:	2b01      	cmp	r3, #1
 801b4f0:	d003      	beq.n	801b4fa <tcp_recv+0x16>
    pcb->recv = recv;
 801b4f2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801b4f6:	bd38      	pop	{r3, r4, r5, pc}
 801b4f8:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801b4fa:	4b05      	ldr	r3, [pc, #20]	; (801b510 <tcp_recv+0x2c>)
 801b4fc:	f240 72df 	movw	r2, #2015	; 0x7df
 801b500:	4904      	ldr	r1, [pc, #16]	; (801b514 <tcp_recv+0x30>)
 801b502:	4805      	ldr	r0, [pc, #20]	; (801b518 <tcp_recv+0x34>)
 801b504:	f009 faf2 	bl	8024aec <iprintf>
    pcb->recv = recv;
 801b508:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801b50c:	bd38      	pop	{r3, r4, r5, pc}
 801b50e:	bf00      	nop
 801b510:	080430a0 	.word	0x080430a0
 801b514:	080432b8 	.word	0x080432b8
 801b518:	0802b818 	.word	0x0802b818

0801b51c <tcp_sent>:
  if (pcb != NULL) {
 801b51c:	b140      	cbz	r0, 801b530 <tcp_sent+0x14>
{
 801b51e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801b520:	7d03      	ldrb	r3, [r0, #20]
 801b522:	4604      	mov	r4, r0
 801b524:	460d      	mov	r5, r1
 801b526:	2b01      	cmp	r3, #1
 801b528:	d003      	beq.n	801b532 <tcp_sent+0x16>
    pcb->sent = sent;
 801b52a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801b52e:	bd38      	pop	{r3, r4, r5, pc}
 801b530:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801b532:	4b05      	ldr	r3, [pc, #20]	; (801b548 <tcp_sent+0x2c>)
 801b534:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801b538:	4904      	ldr	r1, [pc, #16]	; (801b54c <tcp_sent+0x30>)
 801b53a:	4805      	ldr	r0, [pc, #20]	; (801b550 <tcp_sent+0x34>)
 801b53c:	f009 fad6 	bl	8024aec <iprintf>
    pcb->sent = sent;
 801b540:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801b544:	bd38      	pop	{r3, r4, r5, pc}
 801b546:	bf00      	nop
 801b548:	080430a0 	.word	0x080430a0
 801b54c:	080432e0 	.word	0x080432e0
 801b550:	0802b818 	.word	0x0802b818

0801b554 <tcp_err>:
  if (pcb != NULL) {
 801b554:	b140      	cbz	r0, 801b568 <tcp_err+0x14>
{
 801b556:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801b558:	7d03      	ldrb	r3, [r0, #20]
 801b55a:	4604      	mov	r4, r0
 801b55c:	460d      	mov	r5, r1
 801b55e:	2b01      	cmp	r3, #1
 801b560:	d003      	beq.n	801b56a <tcp_err+0x16>
    pcb->errf = err;
 801b562:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801b566:	bd38      	pop	{r3, r4, r5, pc}
 801b568:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801b56a:	4b05      	ldr	r3, [pc, #20]	; (801b580 <tcp_err+0x2c>)
 801b56c:	f640 020d 	movw	r2, #2061	; 0x80d
 801b570:	4904      	ldr	r1, [pc, #16]	; (801b584 <tcp_err+0x30>)
 801b572:	4805      	ldr	r0, [pc, #20]	; (801b588 <tcp_err+0x34>)
 801b574:	f009 faba 	bl	8024aec <iprintf>
    pcb->errf = err;
 801b578:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801b57c:	bd38      	pop	{r3, r4, r5, pc}
 801b57e:	bf00      	nop
 801b580:	080430a0 	.word	0x080430a0
 801b584:	08043308 	.word	0x08043308
 801b588:	0802b818 	.word	0x0802b818

0801b58c <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801b58c:	b118      	cbz	r0, 801b596 <tcp_accept+0xa>
 801b58e:	7d03      	ldrb	r3, [r0, #20]
 801b590:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801b592:	bf08      	it	eq
 801b594:	6181      	streq	r1, [r0, #24]
}
 801b596:	4770      	bx	lr

0801b598 <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801b598:	b1a8      	cbz	r0, 801b5c6 <tcp_poll+0x2e>
{
 801b59a:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801b59c:	7d03      	ldrb	r3, [r0, #20]
 801b59e:	460e      	mov	r6, r1
 801b5a0:	4604      	mov	r4, r0
 801b5a2:	4615      	mov	r5, r2
 801b5a4:	2b01      	cmp	r3, #1
 801b5a6:	d003      	beq.n	801b5b0 <tcp_poll+0x18>
  pcb->poll = poll;
 801b5a8:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801b5ac:	7765      	strb	r5, [r4, #29]
}
 801b5ae:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801b5b0:	4b08      	ldr	r3, [pc, #32]	; (801b5d4 <tcp_poll+0x3c>)
 801b5b2:	f640 023e 	movw	r2, #2110	; 0x83e
 801b5b6:	4908      	ldr	r1, [pc, #32]	; (801b5d8 <tcp_poll+0x40>)
 801b5b8:	4808      	ldr	r0, [pc, #32]	; (801b5dc <tcp_poll+0x44>)
 801b5ba:	f009 fa97 	bl	8024aec <iprintf>
  pcb->poll = poll;
 801b5be:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801b5c2:	7765      	strb	r5, [r4, #29]
}
 801b5c4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801b5c6:	4b03      	ldr	r3, [pc, #12]	; (801b5d4 <tcp_poll+0x3c>)
 801b5c8:	f640 023d 	movw	r2, #2109	; 0x83d
 801b5cc:	4904      	ldr	r1, [pc, #16]	; (801b5e0 <tcp_poll+0x48>)
 801b5ce:	4803      	ldr	r0, [pc, #12]	; (801b5dc <tcp_poll+0x44>)
 801b5d0:	f009 ba8c 	b.w	8024aec <iprintf>
 801b5d4:	080430a0 	.word	0x080430a0
 801b5d8:	08043348 	.word	0x08043348
 801b5dc:	0802b818 	.word	0x0802b818
 801b5e0:	08043330 	.word	0x08043330

0801b5e4 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801b5e4:	2800      	cmp	r0, #0
 801b5e6:	d041      	beq.n	801b66c <tcp_pcb_purge+0x88>
{
 801b5e8:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801b5ea:	7d03      	ldrb	r3, [r0, #20]
 801b5ec:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801b5ee:	2b0a      	cmp	r3, #10
 801b5f0:	d001      	beq.n	801b5f6 <tcp_pcb_purge+0x12>
 801b5f2:	2b01      	cmp	r3, #1
 801b5f4:	d800      	bhi.n	801b5f8 <tcp_pcb_purge+0x14>
}
 801b5f6:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801b5f8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801b5fa:	b118      	cbz	r0, 801b604 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801b5fc:	f7ff f9bc 	bl	801a978 <pbuf_free>
      pcb->refused_data = NULL;
 801b600:	2300      	movs	r3, #0
 801b602:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801b604:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801b606:	b164      	cbz	r4, 801b622 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801b608:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801b60a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b60c:	6870      	ldr	r0, [r6, #4]
 801b60e:	b108      	cbz	r0, 801b614 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801b610:	f7ff f9b2 	bl	801a978 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b614:	4631      	mov	r1, r6
 801b616:	2004      	movs	r0, #4
 801b618:	f7fe fcb2 	bl	8019f80 <memp_free>
  while (seg != NULL) {
 801b61c:	2c00      	cmp	r4, #0
 801b61e:	d1f3      	bne.n	801b608 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801b620:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801b622:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801b626:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801b628:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801b62a:	b15c      	cbz	r4, 801b644 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801b62c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801b62e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b630:	6870      	ldr	r0, [r6, #4]
 801b632:	b108      	cbz	r0, 801b638 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801b634:	f7ff f9a0 	bl	801a978 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b638:	4631      	mov	r1, r6
 801b63a:	2004      	movs	r0, #4
 801b63c:	f7fe fca0 	bl	8019f80 <memp_free>
  while (seg != NULL) {
 801b640:	2c00      	cmp	r4, #0
 801b642:	d1f3      	bne.n	801b62c <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801b644:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801b646:	b15c      	cbz	r4, 801b660 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801b648:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801b64a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b64c:	6870      	ldr	r0, [r6, #4]
 801b64e:	b108      	cbz	r0, 801b654 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801b650:	f7ff f992 	bl	801a978 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b654:	4631      	mov	r1, r6
 801b656:	2004      	movs	r0, #4
 801b658:	f7fe fc92 	bl	8019f80 <memp_free>
  while (seg != NULL) {
 801b65c:	2c00      	cmp	r4, #0
 801b65e:	d1f3      	bne.n	801b648 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801b660:	2300      	movs	r3, #0
 801b662:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801b666:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801b66a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801b66c:	4b03      	ldr	r3, [pc, #12]	; (801b67c <tcp_pcb_purge+0x98>)
 801b66e:	f640 0251 	movw	r2, #2129	; 0x851
 801b672:	4903      	ldr	r1, [pc, #12]	; (801b680 <tcp_pcb_purge+0x9c>)
 801b674:	4803      	ldr	r0, [pc, #12]	; (801b684 <tcp_pcb_purge+0xa0>)
 801b676:	f009 ba39 	b.w	8024aec <iprintf>
 801b67a:	bf00      	nop
 801b67c:	080430a0 	.word	0x080430a0
 801b680:	08043368 	.word	0x08043368
 801b684:	0802b818 	.word	0x0802b818

0801b688 <tcp_slowtmr>:
{
 801b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801b68c:	4da9      	ldr	r5, [pc, #676]	; (801b934 <tcp_slowtmr+0x2ac>)
{
 801b68e:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801b690:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801b960 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801b694:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801b696:	4fa8      	ldr	r7, [pc, #672]	; (801b938 <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801b698:	3301      	adds	r3, #1
 801b69a:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801b69c:	f89b 3000 	ldrb.w	r3, [fp]
 801b6a0:	3301      	adds	r3, #1
 801b6a2:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801b6a6:	4ba5      	ldr	r3, [pc, #660]	; (801b93c <tcp_slowtmr+0x2b4>)
 801b6a8:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801b6aa:	2c00      	cmp	r4, #0
 801b6ac:	f000 808a 	beq.w	801b7c4 <tcp_slowtmr+0x13c>
  prev = NULL;
 801b6b0:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801b6b2:	46b1      	mov	r9, r6
 801b6b4:	7d23      	ldrb	r3, [r4, #20]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	f000 80fc 	beq.w	801b8b4 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801b6bc:	2b01      	cmp	r3, #1
 801b6be:	f000 8104 	beq.w	801b8ca <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801b6c2:	2b0a      	cmp	r3, #10
 801b6c4:	f000 810c 	beq.w	801b8e0 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801b6c8:	f89b 2000 	ldrb.w	r2, [fp]
 801b6cc:	7fa3      	ldrb	r3, [r4, #30]
 801b6ce:	4293      	cmp	r3, r2
 801b6d0:	f000 8113 	beq.w	801b8fa <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801b6d4:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801b6d6:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801b6d8:	2b02      	cmp	r3, #2
 801b6da:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801b6de:	f000 8112 	beq.w	801b906 <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801b6e2:	2a0b      	cmp	r2, #11
 801b6e4:	f240 80cb 	bls.w	801b87e <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801b6e8:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801b6ec:	2b06      	cmp	r3, #6
 801b6ee:	f000 80b7 	beq.w	801b860 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b6f2:	f894 a009 	ldrb.w	sl, [r4, #9]
 801b6f6:	f01a 0a08 	ands.w	sl, sl, #8
 801b6fa:	d01d      	beq.n	801b738 <tcp_slowtmr+0xb0>
 801b6fc:	2b04      	cmp	r3, #4
 801b6fe:	d007      	beq.n	801b710 <tcp_slowtmr+0x88>
 801b700:	f1a3 0307 	sub.w	r3, r3, #7
 801b704:	fab3 f383 	clz	r3, r3
 801b708:	095b      	lsrs	r3, r3, #5
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	f000 80b4 	beq.w	801b878 <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801b710:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801b714:	4b8a      	ldr	r3, [pc, #552]	; (801b940 <tcp_slowtmr+0x2b8>)
 801b716:	488b      	ldr	r0, [pc, #556]	; (801b944 <tcp_slowtmr+0x2bc>)
 801b718:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b71a:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801b71c:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b720:	6a20      	ldr	r0, [r4, #32]
 801b722:	1a12      	subs	r2, r2, r0
 801b724:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801b728:	f240 8160 	bls.w	801b9ec <tcp_slowtmr+0x364>
        ++pcb_remove;
 801b72c:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801b730:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801b734:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801b738:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801b73a:	b156      	cbz	r6, 801b752 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801b73c:	682b      	ldr	r3, [r5, #0]
 801b73e:	6a22      	ldr	r2, [r4, #32]
 801b740:	1a9a      	subs	r2, r3, r2
 801b742:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801b746:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801b74a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801b74e:	f080 80e1 	bcs.w	801b914 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801b752:	7d23      	ldrb	r3, [r4, #20]
 801b754:	2b03      	cmp	r3, #3
 801b756:	d057      	beq.n	801b808 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801b758:	2b09      	cmp	r3, #9
 801b75a:	d15a      	bne.n	801b812 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b75c:	682b      	ldr	r3, [r5, #0]
 801b75e:	6a22      	ldr	r2, [r4, #32]
 801b760:	1a9b      	subs	r3, r3, r2
 801b762:	2bf0      	cmp	r3, #240	; 0xf0
 801b764:	d955      	bls.n	801b812 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801b766:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801b768:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801b76c:	f7ff ff3a 	bl	801b5e4 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b770:	4b72      	ldr	r3, [pc, #456]	; (801b93c <tcp_slowtmr+0x2b4>)
 801b772:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801b774:	f1b9 0f00 	cmp.w	r9, #0
 801b778:	f000 817e 	beq.w	801ba78 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b77c:	42a3      	cmp	r3, r4
 801b77e:	f000 81df 	beq.w	801bb40 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801b782:	68e3      	ldr	r3, [r4, #12]
 801b784:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801b788:	f1ba 0f00 	cmp.w	sl, #0
 801b78c:	f040 8147 	bne.w	801ba1e <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b790:	7d23      	ldrb	r3, [r4, #20]
 801b792:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801b794:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b798:	f000 8153 	beq.w	801ba42 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801b79c:	4621      	mov	r1, r4
 801b79e:	2002      	movs	r0, #2
 801b7a0:	f7fe fbee 	bl	8019f80 <memp_free>
      tcp_active_pcbs_changed = 0;
 801b7a4:	4c68      	ldr	r4, [pc, #416]	; (801b948 <tcp_slowtmr+0x2c0>)
 801b7a6:	2300      	movs	r3, #0
 801b7a8:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801b7aa:	b13e      	cbz	r6, 801b7bc <tcp_slowtmr+0x134>
 801b7ac:	f06f 010c 	mvn.w	r1, #12
 801b7b0:	4650      	mov	r0, sl
 801b7b2:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801b7b4:	7823      	ldrb	r3, [r4, #0]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	f47f af75 	bne.w	801b6a6 <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801b7bc:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801b7be:	2c00      	cmp	r4, #0
 801b7c0:	f47f af78 	bne.w	801b6b4 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801b7c4:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801b964 <tcp_slowtmr+0x2dc>
 801b7c8:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801b7cc:	b1cc      	cbz	r4, 801b802 <tcp_slowtmr+0x17a>
  prev = NULL;
 801b7ce:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b7d0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801b938 <tcp_slowtmr+0x2b0>
 801b7d4:	f8df a190 	ldr.w	sl, [pc, #400]	; 801b968 <tcp_slowtmr+0x2e0>
 801b7d8:	4f5c      	ldr	r7, [pc, #368]	; (801b94c <tcp_slowtmr+0x2c4>)
 801b7da:	7d23      	ldrb	r3, [r4, #20]
 801b7dc:	2b0a      	cmp	r3, #10
 801b7de:	d006      	beq.n	801b7ee <tcp_slowtmr+0x166>
 801b7e0:	4643      	mov	r3, r8
 801b7e2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801b7e6:	4651      	mov	r1, sl
 801b7e8:	4638      	mov	r0, r7
 801b7ea:	f009 f97f 	bl	8024aec <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b7ee:	682b      	ldr	r3, [r5, #0]
 801b7f0:	6a22      	ldr	r2, [r4, #32]
 801b7f2:	1a9b      	subs	r3, r3, r2
 801b7f4:	2bf0      	cmp	r3, #240	; 0xf0
 801b7f6:	f200 80d4 	bhi.w	801b9a2 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801b7fa:	4626      	mov	r6, r4
 801b7fc:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801b7fe:	2c00      	cmp	r4, #0
 801b800:	d1eb      	bne.n	801b7da <tcp_slowtmr+0x152>
}
 801b802:	b007      	add	sp, #28
 801b804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b808:	682b      	ldr	r3, [r5, #0]
 801b80a:	6a22      	ldr	r2, [r4, #32]
 801b80c:	1a9b      	subs	r3, r3, r2
 801b80e:	2b28      	cmp	r3, #40	; 0x28
 801b810:	d8a9      	bhi.n	801b766 <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801b812:	f1b8 0f00 	cmp.w	r8, #0
 801b816:	d1a6      	bne.n	801b766 <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801b818:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801b81a:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801b81c:	3301      	adds	r3, #1
      pcb = pcb->next;
 801b81e:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801b820:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801b822:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801b824:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801b826:	d815      	bhi.n	801b854 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801b828:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801b948 <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801b82c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801b830:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801b834:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801b838:	2b00      	cmp	r3, #0
 801b83a:	f000 80ce 	beq.w	801b9da <tcp_slowtmr+0x352>
 801b83e:	4621      	mov	r1, r4
 801b840:	6920      	ldr	r0, [r4, #16]
 801b842:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801b844:	f899 3000 	ldrb.w	r3, [r9]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	f47f af2c 	bne.w	801b6a6 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801b84e:	2800      	cmp	r0, #0
 801b850:	f000 80c3 	beq.w	801b9da <tcp_slowtmr+0x352>
 801b854:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801b856:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801b858:	2c00      	cmp	r4, #0
 801b85a:	f47f af2b 	bne.w	801b6b4 <tcp_slowtmr+0x2c>
 801b85e:	e7b1      	b.n	801b7c4 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801b860:	8b63      	ldrh	r3, [r4, #26]
 801b862:	06db      	lsls	r3, r3, #27
 801b864:	d508      	bpl.n	801b878 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b866:	682b      	ldr	r3, [r5, #0]
 801b868:	6a22      	ldr	r2, [r4, #32]
 801b86a:	1a9b      	subs	r3, r3, r2
 801b86c:	2b28      	cmp	r3, #40	; 0x28
 801b86e:	d903      	bls.n	801b878 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801b870:	f108 0801 	add.w	r8, r8, #1
 801b874:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801b878:	f04f 0a00 	mov.w	sl, #0
 801b87c:	e75c      	b.n	801b738 <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801b87e:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801b882:	f1b8 0f00 	cmp.w	r8, #0
 801b886:	d071      	beq.n	801b96c <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801b888:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b88a:	b133      	cbz	r3, 801b89a <tcp_slowtmr+0x212>
 801b88c:	463b      	mov	r3, r7
 801b88e:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801b892:	492f      	ldr	r1, [pc, #188]	; (801b950 <tcp_slowtmr+0x2c8>)
 801b894:	482d      	ldr	r0, [pc, #180]	; (801b94c <tcp_slowtmr+0x2c4>)
 801b896:	f009 f929 	bl	8024aec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801b89a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	f000 8171 	beq.w	801bb84 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801b8a2:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801b8a6:	2b0b      	cmp	r3, #11
 801b8a8:	f240 80d2 	bls.w	801ba50 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801b8ac:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801b8ae:	f04f 0801 	mov.w	r8, #1
 801b8b2:	e71b      	b.n	801b6ec <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801b8b4:	463b      	mov	r3, r7
 801b8b6:	f240 42be 	movw	r2, #1214	; 0x4be
 801b8ba:	4926      	ldr	r1, [pc, #152]	; (801b954 <tcp_slowtmr+0x2cc>)
 801b8bc:	4823      	ldr	r0, [pc, #140]	; (801b94c <tcp_slowtmr+0x2c4>)
 801b8be:	f009 f915 	bl	8024aec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801b8c2:	7d23      	ldrb	r3, [r4, #20]
 801b8c4:	2b01      	cmp	r3, #1
 801b8c6:	f47f aefc 	bne.w	801b6c2 <tcp_slowtmr+0x3a>
 801b8ca:	463b      	mov	r3, r7
 801b8cc:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801b8d0:	4921      	ldr	r1, [pc, #132]	; (801b958 <tcp_slowtmr+0x2d0>)
 801b8d2:	481e      	ldr	r0, [pc, #120]	; (801b94c <tcp_slowtmr+0x2c4>)
 801b8d4:	f009 f90a 	bl	8024aec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801b8d8:	7d23      	ldrb	r3, [r4, #20]
 801b8da:	2b0a      	cmp	r3, #10
 801b8dc:	f47f aef4 	bne.w	801b6c8 <tcp_slowtmr+0x40>
 801b8e0:	463b      	mov	r3, r7
 801b8e2:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801b8e6:	491d      	ldr	r1, [pc, #116]	; (801b95c <tcp_slowtmr+0x2d4>)
 801b8e8:	4818      	ldr	r0, [pc, #96]	; (801b94c <tcp_slowtmr+0x2c4>)
 801b8ea:	f009 f8ff 	bl	8024aec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801b8ee:	f89b 2000 	ldrb.w	r2, [fp]
 801b8f2:	7fa3      	ldrb	r3, [r4, #30]
 801b8f4:	4293      	cmp	r3, r2
 801b8f6:	f47f aeed 	bne.w	801b6d4 <tcp_slowtmr+0x4c>
      continue;
 801b8fa:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801b8fc:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801b8fe:	2c00      	cmp	r4, #0
 801b900:	f47f aed8 	bne.w	801b6b4 <tcp_slowtmr+0x2c>
 801b904:	e75e      	b.n	801b7c4 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801b906:	2a05      	cmp	r2, #5
 801b908:	d9b9      	bls.n	801b87e <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801b90a:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801b90e:	f04f 0801 	mov.w	r8, #1
 801b912:	e711      	b.n	801b738 <tcp_slowtmr+0xb0>
 801b914:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801b916:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801b918:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801b91a:	6860      	ldr	r0, [r4, #4]
 801b91c:	b108      	cbz	r0, 801b922 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801b91e:	f7ff f82b 	bl	801a978 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b922:	4621      	mov	r1, r4
 801b924:	2004      	movs	r0, #4
 801b926:	f7fe fb2b 	bl	8019f80 <memp_free>
  while (seg != NULL) {
 801b92a:	2e00      	cmp	r6, #0
 801b92c:	d1f3      	bne.n	801b916 <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801b92e:	9c05      	ldr	r4, [sp, #20]
 801b930:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801b932:	e70e      	b.n	801b752 <tcp_slowtmr+0xca>
 801b934:	2002dbbc 	.word	0x2002dbbc
 801b938:	080430a0 	.word	0x080430a0
 801b93c:	2002dbac 	.word	0x2002dbac
 801b940:	000a4cb8 	.word	0x000a4cb8
 801b944:	10624dd3 	.word	0x10624dd3
 801b948:	2002dbb0 	.word	0x2002dbb0
 801b94c:	0802b818 	.word	0x0802b818
 801b950:	0804340c 	.word	0x0804340c
 801b954:	08043384 	.word	0x08043384
 801b958:	080433b0 	.word	0x080433b0
 801b95c:	080433dc 	.word	0x080433dc
 801b960:	2002dbc1 	.word	0x2002dbc1
 801b964:	2002dbc4 	.word	0x2002dbc4
 801b968:	080434d0 	.word	0x080434d0
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801b96c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801b970:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801b974:	b291      	uxth	r1, r2
 801b976:	4281      	cmp	r1, r0
 801b978:	d802      	bhi.n	801b980 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801b97a:	1c4a      	adds	r2, r1, #1
 801b97c:	b212      	sxth	r2, r2
 801b97e:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801b980:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801b984:	4291      	cmp	r1, r2
 801b986:	f73f aeb1 	bgt.w	801b6ec <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801b98a:	4620      	mov	r0, r4
 801b98c:	f003 f85a 	bl	801ea44 <tcp_rexmit_rto_prepare>
 801b990:	2800      	cmp	r0, #0
 801b992:	f000 80a0 	beq.w	801bad6 <tcp_slowtmr+0x44e>
 801b996:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b998:	2b00      	cmp	r3, #0
 801b99a:	f000 8098 	beq.w	801bace <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801b99e:	7d23      	ldrb	r3, [r4, #20]
 801b9a0:	e6a4      	b.n	801b6ec <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801b9a2:	4620      	mov	r0, r4
 801b9a4:	f7ff fe1e 	bl	801b5e4 <tcp_pcb_purge>
      if (prev != NULL) {
 801b9a8:	2e00      	cmp	r6, #0
 801b9aa:	f000 80d1 	beq.w	801bb50 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801b9ae:	f8d9 3000 	ldr.w	r3, [r9]
 801b9b2:	42a3      	cmp	r3, r4
 801b9b4:	f000 80ee 	beq.w	801bb94 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801b9b8:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801b9bc:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b9c0:	7d23      	ldrb	r3, [r4, #20]
 801b9c2:	2b01      	cmp	r3, #1
 801b9c4:	f000 80d7 	beq.w	801bb76 <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801b9c8:	4621      	mov	r1, r4
      pcb = pcb->next;
 801b9ca:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801b9cc:	2002      	movs	r0, #2
 801b9ce:	f7fe fad7 	bl	8019f80 <memp_free>
  while (pcb != NULL) {
 801b9d2:	2c00      	cmp	r4, #0
 801b9d4:	f47f af01 	bne.w	801b7da <tcp_slowtmr+0x152>
 801b9d8:	e713      	b.n	801b802 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801b9da:	4620      	mov	r0, r4
 801b9dc:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801b9de:	4634      	mov	r4, r6
          tcp_output(prev);
 801b9e0:	f003 f96e 	bl	801ecc0 <tcp_output>
  while (pcb != NULL) {
 801b9e4:	2c00      	cmp	r4, #0
 801b9e6:	f47f ae65 	bne.w	801b6b4 <tcp_slowtmr+0x2c>
 801b9ea:	e6eb      	b.n	801b7c4 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801b9ec:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801b9f0:	4870      	ldr	r0, [pc, #448]	; (801bbb4 <tcp_slowtmr+0x52c>)
 801b9f2:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801b9f6:	4b70      	ldr	r3, [pc, #448]	; (801bbb8 <tcp_slowtmr+0x530>)
 801b9f8:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b9fc:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801ba00:	f67f af3a 	bls.w	801b878 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801ba04:	4620      	mov	r0, r4
 801ba06:	f003 fb91 	bl	801f12c <tcp_keepalive>
        if (err == ERR_OK) {
 801ba0a:	2800      	cmp	r0, #0
 801ba0c:	f47f af34 	bne.w	801b878 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801ba10:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801ba14:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801ba16:	3301      	adds	r3, #1
 801ba18:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801ba1c:	e68c      	b.n	801b738 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801ba1e:	8b23      	ldrh	r3, [r4, #24]
 801ba20:	4620      	mov	r0, r4
 801ba22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801ba24:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801ba26:	9302      	str	r3, [sp, #8]
 801ba28:	8ae3      	ldrh	r3, [r4, #22]
 801ba2a:	9301      	str	r3, [sp, #4]
 801ba2c:	1d23      	adds	r3, r4, #4
 801ba2e:	9300      	str	r3, [sp, #0]
 801ba30:	4623      	mov	r3, r4
 801ba32:	f003 f8cb 	bl	801ebcc <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ba36:	7d23      	ldrb	r3, [r4, #20]
 801ba38:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801ba3a:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ba3e:	f47f aead 	bne.w	801b79c <tcp_slowtmr+0x114>
 801ba42:	463b      	mov	r3, r7
 801ba44:	22d4      	movs	r2, #212	; 0xd4
 801ba46:	495d      	ldr	r1, [pc, #372]	; (801bbbc <tcp_slowtmr+0x534>)
 801ba48:	485d      	ldr	r0, [pc, #372]	; (801bbc0 <tcp_slowtmr+0x538>)
 801ba4a:	f009 f84f 	bl	8024aec <iprintf>
 801ba4e:	e6a5      	b.n	801b79c <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801ba50:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801ba54:	4a5b      	ldr	r2, [pc, #364]	; (801bbc4 <tcp_slowtmr+0x53c>)
 801ba56:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801ba58:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801ba5c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801ba60:	4293      	cmp	r3, r2
 801ba62:	d216      	bcs.n	801ba92 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801ba64:	3301      	adds	r3, #1
 801ba66:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801ba68:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801ba6a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801ba6e:	d210      	bcs.n	801ba92 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801ba70:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801ba72:	f04f 0800 	mov.w	r8, #0
 801ba76:	e639      	b.n	801b6ec <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801ba78:	42a3      	cmp	r3, r4
 801ba7a:	d006      	beq.n	801ba8a <tcp_slowtmr+0x402>
 801ba7c:	463b      	mov	r3, r7
 801ba7e:	f240 5271 	movw	r2, #1393	; 0x571
 801ba82:	4951      	ldr	r1, [pc, #324]	; (801bbc8 <tcp_slowtmr+0x540>)
 801ba84:	484e      	ldr	r0, [pc, #312]	; (801bbc0 <tcp_slowtmr+0x538>)
 801ba86:	f009 f831 	bl	8024aec <iprintf>
        tcp_active_pcbs = pcb->next;
 801ba8a:	68e3      	ldr	r3, [r4, #12]
 801ba8c:	4a4f      	ldr	r2, [pc, #316]	; (801bbcc <tcp_slowtmr+0x544>)
 801ba8e:	6013      	str	r3, [r2, #0]
 801ba90:	e67a      	b.n	801b788 <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801ba92:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801ba96:	b936      	cbnz	r6, 801baa6 <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801ba98:	4620      	mov	r0, r4
 801ba9a:	f003 fb6d 	bl	801f178 <tcp_zero_window_probe>
 801ba9e:	b140      	cbz	r0, 801bab2 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801baa0:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801baa2:	7d23      	ldrb	r3, [r4, #20]
 801baa4:	e622      	b.n	801b6ec <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801baa6:	4631      	mov	r1, r6
 801baa8:	4620      	mov	r0, r4
 801baaa:	f002 fe17 	bl	801e6dc <tcp_split_unsent_seg>
 801baae:	2800      	cmp	r0, #0
 801bab0:	d078      	beq.n	801bba4 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801bab2:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801bab6:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801baba:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801babc:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801bac0:	f63f af6d 	bhi.w	801b99e <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801bac4:	3301      	adds	r3, #1
 801bac6:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801baca:	7d23      	ldrb	r3, [r4, #20]
 801bacc:	e60e      	b.n	801b6ec <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801bace:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	f43f af64 	beq.w	801b99e <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801bad6:	7d23      	ldrb	r3, [r4, #20]
 801bad8:	2b02      	cmp	r3, #2
 801bada:	d014      	beq.n	801bb06 <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801badc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801bae0:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801bae4:	2a0c      	cmp	r2, #12
 801bae6:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801baea:	bf28      	it	cs
 801baec:	220c      	movcs	r2, #12
 801baee:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801baf2:	4937      	ldr	r1, [pc, #220]	; (801bbd0 <tcp_slowtmr+0x548>)
 801baf4:	5c8a      	ldrb	r2, [r1, r2]
 801baf6:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801baf8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801bafc:	4293      	cmp	r3, r2
 801bafe:	bfa8      	it	ge
 801bb00:	4613      	movge	r3, r2
 801bb02:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801bb06:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801bb0a:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801bb0c:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801bb10:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801bb12:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801bb14:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801bb18:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801bb1c:	bf28      	it	cs
 801bb1e:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801bb20:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801bb22:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801bb26:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801bb2a:	bf88      	it	hi
 801bb2c:	4613      	movhi	r3, r2
 801bb2e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801bb32:	2300      	movs	r3, #0
 801bb34:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801bb36:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801bb3a:	f003 faab 	bl	801f094 <tcp_rexmit_rto_commit>
 801bb3e:	e72e      	b.n	801b99e <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801bb40:	463b      	mov	r3, r7
 801bb42:	f240 526d 	movw	r2, #1389	; 0x56d
 801bb46:	4923      	ldr	r1, [pc, #140]	; (801bbd4 <tcp_slowtmr+0x54c>)
 801bb48:	481d      	ldr	r0, [pc, #116]	; (801bbc0 <tcp_slowtmr+0x538>)
 801bb4a:	f008 ffcf 	bl	8024aec <iprintf>
 801bb4e:	e618      	b.n	801b782 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801bb50:	f8d9 3000 	ldr.w	r3, [r9]
 801bb54:	42a3      	cmp	r3, r4
 801bb56:	d006      	beq.n	801bb66 <tcp_slowtmr+0x4de>
 801bb58:	4643      	mov	r3, r8
 801bb5a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801bb5e:	491e      	ldr	r1, [pc, #120]	; (801bbd8 <tcp_slowtmr+0x550>)
 801bb60:	4638      	mov	r0, r7
 801bb62:	f008 ffc3 	bl	8024aec <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bb66:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801bb68:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bb6c:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801bb6e:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bb72:	f47f af29 	bne.w	801b9c8 <tcp_slowtmr+0x340>
 801bb76:	4643      	mov	r3, r8
 801bb78:	22d4      	movs	r2, #212	; 0xd4
 801bb7a:	4910      	ldr	r1, [pc, #64]	; (801bbbc <tcp_slowtmr+0x534>)
 801bb7c:	4638      	mov	r0, r7
 801bb7e:	f008 ffb5 	bl	8024aec <iprintf>
 801bb82:	e721      	b.n	801b9c8 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801bb84:	463b      	mov	r3, r7
 801bb86:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801bb8a:	4914      	ldr	r1, [pc, #80]	; (801bbdc <tcp_slowtmr+0x554>)
 801bb8c:	480c      	ldr	r0, [pc, #48]	; (801bbc0 <tcp_slowtmr+0x538>)
 801bb8e:	f008 ffad 	bl	8024aec <iprintf>
 801bb92:	e686      	b.n	801b8a2 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801bb94:	4643      	mov	r3, r8
 801bb96:	f240 52af 	movw	r2, #1455	; 0x5af
 801bb9a:	4911      	ldr	r1, [pc, #68]	; (801bbe0 <tcp_slowtmr+0x558>)
 801bb9c:	4638      	mov	r0, r7
 801bb9e:	f008 ffa5 	bl	8024aec <iprintf>
 801bba2:	e709      	b.n	801b9b8 <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801bba4:	4620      	mov	r0, r4
 801bba6:	f003 f88b 	bl	801ecc0 <tcp_output>
 801bbaa:	2800      	cmp	r0, #0
 801bbac:	d181      	bne.n	801bab2 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801bbae:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801bbb0:	7d23      	ldrb	r3, [r4, #20]
 801bbb2:	e59b      	b.n	801b6ec <tcp_slowtmr+0x64>
 801bbb4:	000124f8 	.word	0x000124f8
 801bbb8:	10624dd3 	.word	0x10624dd3
 801bbbc:	080430dc 	.word	0x080430dc
 801bbc0:	0802b818 	.word	0x0802b818
 801bbc4:	08043794 	.word	0x08043794
 801bbc8:	080434a4 	.word	0x080434a4
 801bbcc:	2002dbac 	.word	0x2002dbac
 801bbd0:	08043774 	.word	0x08043774
 801bbd4:	08043478 	.word	0x08043478
 801bbd8:	08043528 	.word	0x08043528
 801bbdc:	08043440 	.word	0x08043440
 801bbe0:	08043500 	.word	0x08043500

0801bbe4 <tcp_pcb_remove>:
{
 801bbe4:	b538      	push	{r3, r4, r5, lr}
 801bbe6:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801bbe8:	460c      	mov	r4, r1
 801bbea:	2900      	cmp	r1, #0
 801bbec:	d04a      	beq.n	801bc84 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801bbee:	2d00      	cmp	r5, #0
 801bbf0:	d051      	beq.n	801bc96 <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801bbf2:	682b      	ldr	r3, [r5, #0]
 801bbf4:	42a3      	cmp	r3, r4
 801bbf6:	d032      	beq.n	801bc5e <tcp_pcb_remove+0x7a>
 801bbf8:	b12b      	cbz	r3, 801bc06 <tcp_pcb_remove+0x22>
 801bbfa:	68da      	ldr	r2, [r3, #12]
 801bbfc:	42a2      	cmp	r2, r4
 801bbfe:	d03e      	beq.n	801bc7e <tcp_pcb_remove+0x9a>
 801bc00:	4613      	mov	r3, r2
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d1f9      	bne.n	801bbfa <tcp_pcb_remove+0x16>
 801bc06:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801bc08:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801bc0a:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801bc0c:	f7ff fcea 	bl	801b5e4 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801bc10:	7d23      	ldrb	r3, [r4, #20]
 801bc12:	2b0a      	cmp	r3, #10
 801bc14:	d02d      	beq.n	801bc72 <tcp_pcb_remove+0x8e>
 801bc16:	2b01      	cmp	r3, #1
 801bc18:	d01d      	beq.n	801bc56 <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801bc1a:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801bc1c:	07da      	lsls	r2, r3, #31
 801bc1e:	d421      	bmi.n	801bc64 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801bc20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bc22:	b133      	cbz	r3, 801bc32 <tcp_pcb_remove+0x4e>
 801bc24:	4b20      	ldr	r3, [pc, #128]	; (801bca8 <tcp_pcb_remove+0xc4>)
 801bc26:	f640 0293 	movw	r2, #2195	; 0x893
 801bc2a:	4920      	ldr	r1, [pc, #128]	; (801bcac <tcp_pcb_remove+0xc8>)
 801bc2c:	4820      	ldr	r0, [pc, #128]	; (801bcb0 <tcp_pcb_remove+0xcc>)
 801bc2e:	f008 ff5d 	bl	8024aec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801bc32:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bc34:	b133      	cbz	r3, 801bc44 <tcp_pcb_remove+0x60>
 801bc36:	4b1c      	ldr	r3, [pc, #112]	; (801bca8 <tcp_pcb_remove+0xc4>)
 801bc38:	f640 0294 	movw	r2, #2196	; 0x894
 801bc3c:	491d      	ldr	r1, [pc, #116]	; (801bcb4 <tcp_pcb_remove+0xd0>)
 801bc3e:	481c      	ldr	r0, [pc, #112]	; (801bcb0 <tcp_pcb_remove+0xcc>)
 801bc40:	f008 ff54 	bl	8024aec <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801bc44:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801bc46:	b133      	cbz	r3, 801bc56 <tcp_pcb_remove+0x72>
 801bc48:	4b17      	ldr	r3, [pc, #92]	; (801bca8 <tcp_pcb_remove+0xc4>)
 801bc4a:	f640 0296 	movw	r2, #2198	; 0x896
 801bc4e:	491a      	ldr	r1, [pc, #104]	; (801bcb8 <tcp_pcb_remove+0xd4>)
 801bc50:	4817      	ldr	r0, [pc, #92]	; (801bcb0 <tcp_pcb_remove+0xcc>)
 801bc52:	f008 ff4b 	bl	8024aec <iprintf>
  pcb->state = CLOSED;
 801bc56:	2300      	movs	r3, #0
 801bc58:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801bc5a:	82e3      	strh	r3, [r4, #22]
}
 801bc5c:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801bc5e:	68e3      	ldr	r3, [r4, #12]
 801bc60:	602b      	str	r3, [r5, #0]
 801bc62:	e7d0      	b.n	801bc06 <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801bc64:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801bc68:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801bc6a:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801bc6c:	f003 f828 	bl	801ecc0 <tcp_output>
  if (pcb->state != LISTEN) {
 801bc70:	7d23      	ldrb	r3, [r4, #20]
 801bc72:	2b01      	cmp	r3, #1
 801bc74:	d0ef      	beq.n	801bc56 <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801bc76:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d1d3      	bne.n	801bc24 <tcp_pcb_remove+0x40>
 801bc7c:	e7d9      	b.n	801bc32 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801bc7e:	68e2      	ldr	r2, [r4, #12]
 801bc80:	60da      	str	r2, [r3, #12]
 801bc82:	e7c0      	b.n	801bc06 <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801bc84:	4b08      	ldr	r3, [pc, #32]	; (801bca8 <tcp_pcb_remove+0xc4>)
 801bc86:	f640 0283 	movw	r2, #2179	; 0x883
 801bc8a:	490c      	ldr	r1, [pc, #48]	; (801bcbc <tcp_pcb_remove+0xd8>)
 801bc8c:	4808      	ldr	r0, [pc, #32]	; (801bcb0 <tcp_pcb_remove+0xcc>)
 801bc8e:	f008 ff2d 	bl	8024aec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801bc92:	2d00      	cmp	r5, #0
 801bc94:	d1ad      	bne.n	801bbf2 <tcp_pcb_remove+0xe>
 801bc96:	4b04      	ldr	r3, [pc, #16]	; (801bca8 <tcp_pcb_remove+0xc4>)
 801bc98:	f640 0284 	movw	r2, #2180	; 0x884
 801bc9c:	4908      	ldr	r1, [pc, #32]	; (801bcc0 <tcp_pcb_remove+0xdc>)
 801bc9e:	4804      	ldr	r0, [pc, #16]	; (801bcb0 <tcp_pcb_remove+0xcc>)
 801bca0:	f008 ff24 	bl	8024aec <iprintf>
 801bca4:	e7a5      	b.n	801bbf2 <tcp_pcb_remove+0xe>
 801bca6:	bf00      	nop
 801bca8:	080430a0 	.word	0x080430a0
 801bcac:	0804358c 	.word	0x0804358c
 801bcb0:	0802b818 	.word	0x0802b818
 801bcb4:	080435a4 	.word	0x080435a4
 801bcb8:	080435c0 	.word	0x080435c0
 801bcbc:	08043550 	.word	0x08043550
 801bcc0:	0804356c 	.word	0x0804356c

0801bcc4 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801bcc4:	2800      	cmp	r0, #0
 801bcc6:	f000 80ad 	beq.w	801be24 <tcp_abandon+0x160>
{
 801bcca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801bcce:	7d03      	ldrb	r3, [r0, #20]
{
 801bcd0:	b087      	sub	sp, #28
 801bcd2:	4605      	mov	r5, r0
 801bcd4:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801bcd6:	2b01      	cmp	r3, #1
 801bcd8:	f000 808b 	beq.w	801bdf2 <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801bcdc:	2b0a      	cmp	r3, #10
 801bcde:	f000 8093 	beq.w	801be08 <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801bce2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801bce4:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801bce8:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801bcec:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801bcf0:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801bcf2:	b96b      	cbnz	r3, 801bd10 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801bcf4:	8aef      	ldrh	r7, [r5, #22]
 801bcf6:	2f00      	cmp	r7, #0
 801bcf8:	d052      	beq.n	801bda0 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801bcfa:	4a51      	ldr	r2, [pc, #324]	; (801be40 <tcp_abandon+0x17c>)
 801bcfc:	6813      	ldr	r3, [r2, #0]
 801bcfe:	42ab      	cmp	r3, r5
 801bd00:	d074      	beq.n	801bdec <tcp_abandon+0x128>
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d050      	beq.n	801bda8 <tcp_abandon+0xe4>
 801bd06:	68da      	ldr	r2, [r3, #12]
 801bd08:	42aa      	cmp	r2, r5
 801bd0a:	d04b      	beq.n	801bda4 <tcp_abandon+0xe0>
 801bd0c:	4613      	mov	r3, r2
 801bd0e:	e7f8      	b.n	801bd02 <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801bd10:	4629      	mov	r1, r5
 801bd12:	484c      	ldr	r0, [pc, #304]	; (801be44 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801bd14:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801bd16:	f7ff ff65 	bl	801bbe4 <tcp_pcb_remove>
 801bd1a:	4b4b      	ldr	r3, [pc, #300]	; (801be48 <tcp_abandon+0x184>)
 801bd1c:	2201      	movs	r2, #1
 801bd1e:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801bd20:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801bd22:	b164      	cbz	r4, 801bd3e <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801bd24:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801bd26:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bd28:	f8da 0004 	ldr.w	r0, [sl, #4]
 801bd2c:	b108      	cbz	r0, 801bd32 <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801bd2e:	f7fe fe23 	bl	801a978 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bd32:	4651      	mov	r1, sl
 801bd34:	2004      	movs	r0, #4
 801bd36:	f7fe f923 	bl	8019f80 <memp_free>
  while (seg != NULL) {
 801bd3a:	2c00      	cmp	r4, #0
 801bd3c:	d1f2      	bne.n	801bd24 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801bd3e:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801bd40:	b164      	cbz	r4, 801bd5c <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801bd42:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801bd44:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bd46:	f8da 0004 	ldr.w	r0, [sl, #4]
 801bd4a:	b108      	cbz	r0, 801bd50 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801bd4c:	f7fe fe14 	bl	801a978 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bd50:	4651      	mov	r1, sl
 801bd52:	2004      	movs	r0, #4
 801bd54:	f7fe f914 	bl	8019f80 <memp_free>
  while (seg != NULL) {
 801bd58:	2c00      	cmp	r4, #0
 801bd5a:	d1f2      	bne.n	801bd42 <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801bd5c:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801bd5e:	b164      	cbz	r4, 801bd7a <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801bd60:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801bd62:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bd64:	f8da 0004 	ldr.w	r0, [sl, #4]
 801bd68:	b108      	cbz	r0, 801bd6e <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801bd6a:	f7fe fe05 	bl	801a978 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bd6e:	4651      	mov	r1, sl
 801bd70:	2004      	movs	r0, #4
 801bd72:	f7fe f905 	bl	8019f80 <memp_free>
  while (seg != NULL) {
 801bd76:	2c00      	cmp	r4, #0
 801bd78:	d1f2      	bne.n	801bd60 <tcp_abandon+0x9c>
    if (send_rst) {
 801bd7a:	b9ce      	cbnz	r6, 801bdb0 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bd7c:	7d2b      	ldrb	r3, [r5, #20]
 801bd7e:	2b01      	cmp	r3, #1
 801bd80:	d024      	beq.n	801bdcc <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801bd82:	4629      	mov	r1, r5
 801bd84:	2002      	movs	r0, #2
 801bd86:	f7fe f8fb 	bl	8019f80 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801bd8a:	f1b8 0f00 	cmp.w	r8, #0
 801bd8e:	d02a      	beq.n	801bde6 <tcp_abandon+0x122>
 801bd90:	f06f 010c 	mvn.w	r1, #12
 801bd94:	4648      	mov	r0, r9
 801bd96:	4643      	mov	r3, r8
}
 801bd98:	b007      	add	sp, #28
 801bd9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801bd9e:	4718      	bx	r3
    int send_rst = 0;
 801bda0:	461e      	mov	r6, r3
 801bda2:	e7bd      	b.n	801bd20 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801bda4:	68ea      	ldr	r2, [r5, #12]
 801bda6:	60da      	str	r2, [r3, #12]
 801bda8:	2700      	movs	r7, #0
    int send_rst = 0;
 801bdaa:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801bdac:	60ef      	str	r7, [r5, #12]
 801bdae:	e7b7      	b.n	801bd20 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801bdb0:	9701      	str	r7, [sp, #4]
 801bdb2:	465a      	mov	r2, fp
 801bdb4:	8b2b      	ldrh	r3, [r5, #24]
 801bdb6:	4628      	mov	r0, r5
 801bdb8:	9905      	ldr	r1, [sp, #20]
 801bdba:	9302      	str	r3, [sp, #8]
 801bdbc:	1d2b      	adds	r3, r5, #4
 801bdbe:	9300      	str	r3, [sp, #0]
 801bdc0:	462b      	mov	r3, r5
 801bdc2:	f002 ff03 	bl	801ebcc <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bdc6:	7d2b      	ldrb	r3, [r5, #20]
 801bdc8:	2b01      	cmp	r3, #1
 801bdca:	d1da      	bne.n	801bd82 <tcp_abandon+0xbe>
 801bdcc:	491f      	ldr	r1, [pc, #124]	; (801be4c <tcp_abandon+0x188>)
 801bdce:	22d4      	movs	r2, #212	; 0xd4
 801bdd0:	4b1f      	ldr	r3, [pc, #124]	; (801be50 <tcp_abandon+0x18c>)
 801bdd2:	4820      	ldr	r0, [pc, #128]	; (801be54 <tcp_abandon+0x190>)
 801bdd4:	f008 fe8a 	bl	8024aec <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801bdd8:	4629      	mov	r1, r5
 801bdda:	2002      	movs	r0, #2
 801bddc:	f7fe f8d0 	bl	8019f80 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801bde0:	f1b8 0f00 	cmp.w	r8, #0
 801bde4:	d1d4      	bne.n	801bd90 <tcp_abandon+0xcc>
}
 801bde6:	b007      	add	sp, #28
 801bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801bdec:	68eb      	ldr	r3, [r5, #12]
 801bdee:	6013      	str	r3, [r2, #0]
 801bdf0:	e7da      	b.n	801bda8 <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801bdf2:	4b17      	ldr	r3, [pc, #92]	; (801be50 <tcp_abandon+0x18c>)
 801bdf4:	f44f 7210 	mov.w	r2, #576	; 0x240
 801bdf8:	4917      	ldr	r1, [pc, #92]	; (801be58 <tcp_abandon+0x194>)
 801bdfa:	4816      	ldr	r0, [pc, #88]	; (801be54 <tcp_abandon+0x190>)
 801bdfc:	f008 fe76 	bl	8024aec <iprintf>
  if (pcb->state == TIME_WAIT) {
 801be00:	7d2b      	ldrb	r3, [r5, #20]
 801be02:	2b0a      	cmp	r3, #10
 801be04:	f47f af6d 	bne.w	801bce2 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801be08:	4629      	mov	r1, r5
 801be0a:	4814      	ldr	r0, [pc, #80]	; (801be5c <tcp_abandon+0x198>)
 801be0c:	f7ff feea 	bl	801bbe4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801be10:	7d2b      	ldrb	r3, [r5, #20]
 801be12:	2b01      	cmp	r3, #1
 801be14:	d00d      	beq.n	801be32 <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801be16:	4629      	mov	r1, r5
 801be18:	2002      	movs	r0, #2
}
 801be1a:	b007      	add	sp, #28
 801be1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801be20:	f7fe b8ae 	b.w	8019f80 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801be24:	4b0a      	ldr	r3, [pc, #40]	; (801be50 <tcp_abandon+0x18c>)
 801be26:	f240 223d 	movw	r2, #573	; 0x23d
 801be2a:	490d      	ldr	r1, [pc, #52]	; (801be60 <tcp_abandon+0x19c>)
 801be2c:	4809      	ldr	r0, [pc, #36]	; (801be54 <tcp_abandon+0x190>)
 801be2e:	f008 be5d 	b.w	8024aec <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801be32:	4b07      	ldr	r3, [pc, #28]	; (801be50 <tcp_abandon+0x18c>)
 801be34:	22d4      	movs	r2, #212	; 0xd4
 801be36:	4905      	ldr	r1, [pc, #20]	; (801be4c <tcp_abandon+0x188>)
 801be38:	4806      	ldr	r0, [pc, #24]	; (801be54 <tcp_abandon+0x190>)
 801be3a:	f008 fe57 	bl	8024aec <iprintf>
 801be3e:	e7ea      	b.n	801be16 <tcp_abandon+0x152>
 801be40:	2002dbb4 	.word	0x2002dbb4
 801be44:	2002dbac 	.word	0x2002dbac
 801be48:	2002dbb0 	.word	0x2002dbb0
 801be4c:	080430dc 	.word	0x080430dc
 801be50:	080430a0 	.word	0x080430a0
 801be54:	0802b818 	.word	0x0802b818
 801be58:	080435f4 	.word	0x080435f4
 801be5c:	2002dbc4 	.word	0x2002dbc4
 801be60:	080435d8 	.word	0x080435d8

0801be64 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801be64:	2101      	movs	r1, #1
 801be66:	f7ff bf2d 	b.w	801bcc4 <tcp_abandon>
 801be6a:	bf00      	nop

0801be6c <tcp_accept_null>:
{
 801be6c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801be6e:	460c      	mov	r4, r1
 801be70:	b131      	cbz	r1, 801be80 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801be72:	4620      	mov	r0, r4
 801be74:	2101      	movs	r1, #1
 801be76:	f7ff ff25 	bl	801bcc4 <tcp_abandon>
}
 801be7a:	f06f 000c 	mvn.w	r0, #12
 801be7e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801be80:	4b06      	ldr	r3, [pc, #24]	; (801be9c <tcp_accept_null+0x30>)
 801be82:	f240 320f 	movw	r2, #783	; 0x30f
 801be86:	4906      	ldr	r1, [pc, #24]	; (801bea0 <tcp_accept_null+0x34>)
 801be88:	4806      	ldr	r0, [pc, #24]	; (801bea4 <tcp_accept_null+0x38>)
 801be8a:	f008 fe2f 	bl	8024aec <iprintf>
  tcp_abandon(pcb, 1);
 801be8e:	4620      	mov	r0, r4
 801be90:	2101      	movs	r1, #1
 801be92:	f7ff ff17 	bl	801bcc4 <tcp_abandon>
}
 801be96:	f06f 000c 	mvn.w	r0, #12
 801be9a:	bd10      	pop	{r4, pc}
 801be9c:	080430a0 	.word	0x080430a0
 801bea0:	08043628 	.word	0x08043628
 801bea4:	0802b818 	.word	0x0802b818

0801bea8 <tcp_netif_ip_addr_changed_pcblist>:
{
 801bea8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801beaa:	4605      	mov	r5, r0
{
 801beac:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801beae:	b178      	cbz	r0, 801bed0 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801beb0:	b134      	cbz	r4, 801bec0 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801beb2:	6822      	ldr	r2, [r4, #0]
 801beb4:	682b      	ldr	r3, [r5, #0]
 801beb6:	429a      	cmp	r2, r3
 801beb8:	d003      	beq.n	801bec2 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801beba:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801bebc:	2c00      	cmp	r4, #0
 801bebe:	d1f8      	bne.n	801beb2 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801bec0:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801bec2:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801bec4:	4620      	mov	r0, r4
 801bec6:	2101      	movs	r1, #1
      pcb = next;
 801bec8:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801beca:	f7ff fefb 	bl	801bcc4 <tcp_abandon>
      pcb = next;
 801bece:	e7ef      	b.n	801beb0 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801bed0:	4b03      	ldr	r3, [pc, #12]	; (801bee0 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801bed2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801bed6:	4903      	ldr	r1, [pc, #12]	; (801bee4 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801bed8:	4803      	ldr	r0, [pc, #12]	; (801bee8 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801beda:	f008 fe07 	bl	8024aec <iprintf>
 801bede:	e7e7      	b.n	801beb0 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801bee0:	080430a0 	.word	0x080430a0
 801bee4:	08043648 	.word	0x08043648
 801bee8:	0802b818 	.word	0x0802b818

0801beec <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801beec:	4b0f      	ldr	r3, [pc, #60]	; (801bf2c <tcp_kill_state+0x40>)
 801beee:	6819      	ldr	r1, [r3, #0]
 801bef0:	b1d1      	cbz	r1, 801bf28 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bef2:	4b0f      	ldr	r3, [pc, #60]	; (801bf30 <tcp_kill_state+0x44>)
  inactivity = 0;
 801bef4:	2200      	movs	r2, #0
{
 801bef6:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bef8:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801befa:	4614      	mov	r4, r2
 801befc:	e001      	b.n	801bf02 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801befe:	68c9      	ldr	r1, [r1, #12]
 801bf00:	b159      	cbz	r1, 801bf1a <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801bf02:	7d0b      	ldrb	r3, [r1, #20]
 801bf04:	4283      	cmp	r3, r0
 801bf06:	d1fa      	bne.n	801befe <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bf08:	6a0b      	ldr	r3, [r1, #32]
 801bf0a:	1aeb      	subs	r3, r5, r3
 801bf0c:	4293      	cmp	r3, r2
 801bf0e:	d3f6      	bcc.n	801befe <tcp_kill_state+0x12>
 801bf10:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf12:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bf14:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf16:	2900      	cmp	r1, #0
 801bf18:	d1f3      	bne.n	801bf02 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801bf1a:	b11c      	cbz	r4, 801bf24 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801bf1c:	4620      	mov	r0, r4
}
 801bf1e:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801bf20:	f7ff bed0 	b.w	801bcc4 <tcp_abandon>
}
 801bf24:	bc30      	pop	{r4, r5}
 801bf26:	4770      	bx	lr
 801bf28:	4770      	bx	lr
 801bf2a:	bf00      	nop
 801bf2c:	2002dbac 	.word	0x2002dbac
 801bf30:	2002dbbc 	.word	0x2002dbbc

0801bf34 <tcp_alloc>:
{
 801bf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801bf36:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801bf3a:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801bf3c:	494f      	ldr	r1, [pc, #316]	; (801c07c <tcp_alloc+0x148>)
 801bf3e:	2002      	movs	r0, #2
 801bf40:	f7fd ffe8 	bl	8019f14 <memp_malloc_fn>
  if (pcb == NULL) {
 801bf44:	4603      	mov	r3, r0
 801bf46:	b320      	cbz	r0, 801bf92 <tcp_alloc+0x5e>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801bf48:	229c      	movs	r2, #156	; 0x9c
 801bf4a:	2100      	movs	r1, #0
 801bf4c:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801bf4e:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801bf52:	f007 fe2f 	bl	8023bb4 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801bf56:	494a      	ldr	r1, [pc, #296]	; (801c080 <tcp_alloc+0x14c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801bf58:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801bf5a:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801bf5c:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801bf5e:	4849      	ldr	r0, [pc, #292]	; (801c084 <tcp_alloc+0x150>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801bf60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801bf64:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801bf66:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801bf68:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801bf6a:	4a47      	ldr	r2, [pc, #284]	; (801c088 <tcp_alloc+0x154>)
    pcb->recv = tcp_recv_null;
 801bf6c:	4947      	ldr	r1, [pc, #284]	; (801c08c <tcp_alloc+0x158>)
    pcb->snd_buf = TCP_SND_BUF;
 801bf6e:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801bf72:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801bf74:	4c46      	ldr	r4, [pc, #280]	; (801c090 <tcp_alloc+0x15c>)
    pcb->cwnd = 1;
 801bf76:	4847      	ldr	r0, [pc, #284]	; (801c094 <tcp_alloc+0x160>)
    pcb->recv = tcp_recv_null;
 801bf78:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801bf7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801bf80:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801bf82:	4945      	ldr	r1, [pc, #276]	; (801c098 <tcp_alloc+0x164>)
    pcb->cwnd = 1;
 801bf84:	6498      	str	r0, [r3, #72]	; 0x48
}
 801bf86:	4618      	mov	r0, r3
    pcb->prio = prio;
 801bf88:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801bf8a:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801bf8c:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801bf8e:	72da      	strb	r2, [r3, #11]
}
 801bf90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801bf92:	4e42      	ldr	r6, [pc, #264]	; (801c09c <tcp_alloc+0x168>)
 801bf94:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801bf96:	b15c      	cbz	r4, 801bfb0 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801bf98:	4620      	mov	r0, r4
 801bf9a:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801bf9c:	8b43      	ldrh	r3, [r0, #26]
 801bf9e:	0719      	lsls	r1, r3, #28
 801bfa0:	d5f9      	bpl.n	801bf96 <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801bfa2:	f023 0308 	bic.w	r3, r3, #8
 801bfa6:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801bfa8:	f7fe ffd8 	bl	801af5c <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801bfac:	2c00      	cmp	r4, #0
 801bfae:	d1f3      	bne.n	801bf98 <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bfb0:	4b3b      	ldr	r3, [pc, #236]	; (801c0a0 <tcp_alloc+0x16c>)
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	b193      	cbz	r3, 801bfdc <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bfb6:	4a33      	ldr	r2, [pc, #204]	; (801c084 <tcp_alloc+0x150>)
 801bfb8:	4618      	mov	r0, r3
 801bfba:	6a19      	ldr	r1, [r3, #32]
 801bfbc:	6814      	ldr	r4, [r2, #0]
 801bfbe:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bfc0:	68db      	ldr	r3, [r3, #12]
 801bfc2:	b143      	cbz	r3, 801bfd6 <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bfc4:	6a1a      	ldr	r2, [r3, #32]
 801bfc6:	1aa2      	subs	r2, r4, r2
 801bfc8:	428a      	cmp	r2, r1
 801bfca:	d3f9      	bcc.n	801bfc0 <tcp_alloc+0x8c>
 801bfcc:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bfce:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bfd0:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d1f6      	bne.n	801bfc4 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801bfd6:	2101      	movs	r1, #1
 801bfd8:	f7ff fe74 	bl	801bcc4 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801bfdc:	f240 7239 	movw	r2, #1849	; 0x739
 801bfe0:	4926      	ldr	r1, [pc, #152]	; (801c07c <tcp_alloc+0x148>)
 801bfe2:	2002      	movs	r0, #2
 801bfe4:	f7fd ff96 	bl	8019f14 <memp_malloc_fn>
    if (pcb == NULL) {
 801bfe8:	4603      	mov	r3, r0
 801bfea:	2800      	cmp	r0, #0
 801bfec:	d1ac      	bne.n	801bf48 <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801bfee:	2009      	movs	r0, #9
 801bff0:	f7ff ff7c 	bl	801beec <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801bff4:	f240 723f 	movw	r2, #1855	; 0x73f
 801bff8:	4920      	ldr	r1, [pc, #128]	; (801c07c <tcp_alloc+0x148>)
 801bffa:	2002      	movs	r0, #2
 801bffc:	f7fd ff8a 	bl	8019f14 <memp_malloc_fn>
      if (pcb == NULL) {
 801c000:	4603      	mov	r3, r0
 801c002:	2800      	cmp	r0, #0
 801c004:	d1a0      	bne.n	801bf48 <tcp_alloc+0x14>
        tcp_kill_state(CLOSING);
 801c006:	2008      	movs	r0, #8
 801c008:	f7ff ff70 	bl	801beec <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c00c:	f240 7245 	movw	r2, #1861	; 0x745
 801c010:	491a      	ldr	r1, [pc, #104]	; (801c07c <tcp_alloc+0x148>)
 801c012:	2002      	movs	r0, #2
 801c014:	f7fd ff7e 	bl	8019f14 <memp_malloc_fn>
        if (pcb == NULL) {
 801c018:	4603      	mov	r3, r0
 801c01a:	2800      	cmp	r0, #0
 801c01c:	d194      	bne.n	801bf48 <tcp_alloc+0x14>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c01e:	062a      	lsls	r2, r5, #24
 801c020:	d42a      	bmi.n	801c078 <tcp_alloc+0x144>
  if (mprio == 0) {
 801c022:	b1ed      	cbz	r5, 801c060 <tcp_alloc+0x12c>
 801c024:	462a      	mov	r2, r5
  mprio--;
 801c026:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c028:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801c02a:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c02c:	b1c2      	cbz	r2, 801c060 <tcp_alloc+0x12c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c02e:	4815      	ldr	r0, [pc, #84]	; (801c084 <tcp_alloc+0x150>)
  inactivity = 0;
 801c030:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c032:	6807      	ldr	r7, [r0, #0]
 801c034:	e005      	b.n	801c042 <tcp_alloc+0x10e>
 801c036:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801c038:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801c03a:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801c03c:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c03e:	68d2      	ldr	r2, [r2, #12]
 801c040:	b14a      	cbz	r2, 801c056 <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 801c042:	7d50      	ldrb	r0, [r2, #21]
 801c044:	4288      	cmp	r0, r1
 801c046:	d3f6      	bcc.n	801c036 <tcp_alloc+0x102>
 801c048:	d1f9      	bne.n	801c03e <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c04a:	6a14      	ldr	r4, [r2, #32]
 801c04c:	eba7 0e04 	sub.w	lr, r7, r4
 801c050:	45b6      	cmp	lr, r6
 801c052:	d3f4      	bcc.n	801c03e <tcp_alloc+0x10a>
 801c054:	e7f0      	b.n	801c038 <tcp_alloc+0x104>
  if (inactive != NULL) {
 801c056:	b11b      	cbz	r3, 801c060 <tcp_alloc+0x12c>
  tcp_abandon(pcb, 1);
 801c058:	2101      	movs	r1, #1
 801c05a:	4618      	mov	r0, r3
 801c05c:	f7ff fe32 	bl	801bcc4 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c060:	f240 724b 	movw	r2, #1867	; 0x74b
 801c064:	4905      	ldr	r1, [pc, #20]	; (801c07c <tcp_alloc+0x148>)
 801c066:	2002      	movs	r0, #2
 801c068:	f7fd ff54 	bl	8019f14 <memp_malloc_fn>
  if (pcb != NULL) {
 801c06c:	4603      	mov	r3, r0
 801c06e:	2800      	cmp	r0, #0
 801c070:	f47f af6a 	bne.w	801bf48 <tcp_alloc+0x14>
}
 801c074:	4618      	mov	r0, r3
 801c076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c078:	227f      	movs	r2, #127	; 0x7f
 801c07a:	e7d4      	b.n	801c026 <tcp_alloc+0xf2>
 801c07c:	080430a0 	.word	0x080430a0
 801c080:	2002dbc1 	.word	0x2002dbc1
 801c084:	2002dbbc 	.word	0x2002dbbc
 801c088:	006ddd00 	.word	0x006ddd00
 801c08c:	0801c291 	.word	0x0801c291
 801c090:	0218ffff 	.word	0x0218ffff
 801c094:	04300001 	.word	0x04300001
 801c098:	08600860 	.word	0x08600860
 801c09c:	2002dbac 	.word	0x2002dbac
 801c0a0:	2002dbc4 	.word	0x2002dbc4

0801c0a4 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801c0a4:	2040      	movs	r0, #64	; 0x40
 801c0a6:	f7ff bf45 	b.w	801bf34 <tcp_alloc>
 801c0aa:	bf00      	nop

0801c0ac <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801c0ac:	2040      	movs	r0, #64	; 0x40
 801c0ae:	f7ff bf41 	b.w	801bf34 <tcp_alloc>
 801c0b2:	bf00      	nop

0801c0b4 <tcp_close_shutdown>:
{
 801c0b4:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c0b6:	4604      	mov	r4, r0
{
 801c0b8:	b085      	sub	sp, #20
 801c0ba:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c0bc:	2800      	cmp	r0, #0
 801c0be:	d06a      	beq.n	801c196 <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801c0c0:	7d23      	ldrb	r3, [r4, #20]
 801c0c2:	b11d      	cbz	r5, 801c0cc <tcp_close_shutdown+0x18>
 801c0c4:	2b04      	cmp	r3, #4
 801c0c6:	d00c      	beq.n	801c0e2 <tcp_close_shutdown+0x2e>
 801c0c8:	2b07      	cmp	r3, #7
 801c0ca:	d00a      	beq.n	801c0e2 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801c0cc:	2b01      	cmp	r3, #1
 801c0ce:	d06a      	beq.n	801c1a6 <tcp_close_shutdown+0xf2>
 801c0d0:	2b02      	cmp	r3, #2
 801c0d2:	d030      	beq.n	801c136 <tcp_close_shutdown+0x82>
 801c0d4:	b333      	cbz	r3, 801c124 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801c0d6:	4620      	mov	r0, r4
}
 801c0d8:	b005      	add	sp, #20
 801c0da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801c0de:	f7fe bf3d 	b.w	801af5c <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801c0e2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801c0e4:	2a00      	cmp	r2, #0
 801c0e6:	d037      	beq.n	801c158 <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801c0e8:	8b63      	ldrh	r3, [r4, #26]
 801c0ea:	06db      	lsls	r3, r3, #27
 801c0ec:	f140 8084 	bpl.w	801c1f8 <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c0f0:	8b21      	ldrh	r1, [r4, #24]
 801c0f2:	1d20      	adds	r0, r4, #4
 801c0f4:	8ae2      	ldrh	r2, [r4, #22]
 801c0f6:	4623      	mov	r3, r4
 801c0f8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801c0fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c0fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801c100:	9000      	str	r0, [sp, #0]
 801c102:	4620      	mov	r0, r4
 801c104:	f002 fd62 	bl	801ebcc <tcp_rst>
      tcp_pcb_purge(pcb);
 801c108:	4620      	mov	r0, r4
 801c10a:	f7ff fa6b 	bl	801b5e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801c10e:	4a45      	ldr	r2, [pc, #276]	; (801c224 <tcp_close_shutdown+0x170>)
 801c110:	6813      	ldr	r3, [r2, #0]
 801c112:	42a3      	cmp	r3, r4
 801c114:	d030      	beq.n	801c178 <tcp_close_shutdown+0xc4>
 801c116:	2b00      	cmp	r3, #0
 801c118:	d030      	beq.n	801c17c <tcp_close_shutdown+0xc8>
 801c11a:	68da      	ldr	r2, [r3, #12]
 801c11c:	42a2      	cmp	r2, r4
 801c11e:	d068      	beq.n	801c1f2 <tcp_close_shutdown+0x13e>
 801c120:	4613      	mov	r3, r2
 801c122:	e7f8      	b.n	801c116 <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801c124:	8ae3      	ldrh	r3, [r4, #22]
 801c126:	b9e3      	cbnz	r3, 801c162 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801c128:	4621      	mov	r1, r4
 801c12a:	2002      	movs	r0, #2
 801c12c:	f7fd ff28 	bl	8019f80 <memp_free>
}
 801c130:	2000      	movs	r0, #0
 801c132:	b005      	add	sp, #20
 801c134:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c136:	4621      	mov	r1, r4
 801c138:	483a      	ldr	r0, [pc, #232]	; (801c224 <tcp_close_shutdown+0x170>)
 801c13a:	f7ff fd53 	bl	801bbe4 <tcp_pcb_remove>
 801c13e:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c140:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c142:	4a39      	ldr	r2, [pc, #228]	; (801c228 <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c144:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c146:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c148:	d1ee      	bne.n	801c128 <tcp_close_shutdown+0x74>
 801c14a:	4b38      	ldr	r3, [pc, #224]	; (801c22c <tcp_close_shutdown+0x178>)
 801c14c:	22d4      	movs	r2, #212	; 0xd4
 801c14e:	4938      	ldr	r1, [pc, #224]	; (801c230 <tcp_close_shutdown+0x17c>)
 801c150:	4838      	ldr	r0, [pc, #224]	; (801c234 <tcp_close_shutdown+0x180>)
 801c152:	f008 fccb 	bl	8024aec <iprintf>
 801c156:	e7e7      	b.n	801c128 <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801c158:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801c15a:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801c15e:	d0b5      	beq.n	801c0cc <tcp_close_shutdown+0x18>
 801c160:	e7c2      	b.n	801c0e8 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c162:	4a35      	ldr	r2, [pc, #212]	; (801c238 <tcp_close_shutdown+0x184>)
 801c164:	6813      	ldr	r3, [r2, #0]
 801c166:	42a3      	cmp	r3, r4
 801c168:	d051      	beq.n	801c20e <tcp_close_shutdown+0x15a>
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d03e      	beq.n	801c1ec <tcp_close_shutdown+0x138>
 801c16e:	68da      	ldr	r2, [r3, #12]
 801c170:	42a2      	cmp	r2, r4
 801c172:	d039      	beq.n	801c1e8 <tcp_close_shutdown+0x134>
 801c174:	4613      	mov	r3, r2
 801c176:	e7f8      	b.n	801c16a <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801c178:	68e3      	ldr	r3, [r4, #12]
 801c17a:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801c17c:	4b2f      	ldr	r3, [pc, #188]	; (801c23c <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801c17e:	2000      	movs	r0, #0
 801c180:	4a29      	ldr	r2, [pc, #164]	; (801c228 <tcp_close_shutdown+0x174>)
 801c182:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801c184:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801c186:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801c188:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801c18a:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801c18c:	d03c      	beq.n	801c208 <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c18e:	7d23      	ldrb	r3, [r4, #20]
 801c190:	2b01      	cmp	r3, #1
 801c192:	d1c9      	bne.n	801c128 <tcp_close_shutdown+0x74>
 801c194:	e7d9      	b.n	801c14a <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c196:	4b25      	ldr	r3, [pc, #148]	; (801c22c <tcp_close_shutdown+0x178>)
 801c198:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801c19c:	4928      	ldr	r1, [pc, #160]	; (801c240 <tcp_close_shutdown+0x18c>)
 801c19e:	4825      	ldr	r0, [pc, #148]	; (801c234 <tcp_close_shutdown+0x180>)
 801c1a0:	f008 fca4 	bl	8024aec <iprintf>
 801c1a4:	e78c      	b.n	801c0c0 <tcp_close_shutdown+0xc>
 801c1a6:	4927      	ldr	r1, [pc, #156]	; (801c244 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801c1a8:	2000      	movs	r0, #0
  switch (pcb->state) {
 801c1aa:	4b23      	ldr	r3, [pc, #140]	; (801c238 <tcp_close_shutdown+0x184>)
 801c1ac:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801c1b0:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801c1b2:	b133      	cbz	r3, 801c1c2 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801c1b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801c1b6:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801c1b8:	bf08      	it	eq
 801c1ba:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801c1bc:	68db      	ldr	r3, [r3, #12]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d1f8      	bne.n	801c1b4 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801c1c2:	42a9      	cmp	r1, r5
 801c1c4:	d002      	beq.n	801c1cc <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801c1c6:	f851 3b04 	ldr.w	r3, [r1], #4
 801c1ca:	e7f1      	b.n	801c1b0 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801c1cc:	4621      	mov	r1, r4
 801c1ce:	481e      	ldr	r0, [pc, #120]	; (801c248 <tcp_close_shutdown+0x194>)
 801c1d0:	f7ff fd08 	bl	801bbe4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801c1d4:	7d23      	ldrb	r3, [r4, #20]
 801c1d6:	2b01      	cmp	r3, #1
 801c1d8:	d01c      	beq.n	801c214 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801c1da:	4621      	mov	r1, r4
 801c1dc:	2003      	movs	r0, #3
 801c1de:	f7fd fecf 	bl	8019f80 <memp_free>
}
 801c1e2:	2000      	movs	r0, #0
 801c1e4:	b005      	add	sp, #20
 801c1e6:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c1e8:	68e2      	ldr	r2, [r4, #12]
 801c1ea:	60da      	str	r2, [r3, #12]
 801c1ec:	2300      	movs	r3, #0
 801c1ee:	60e3      	str	r3, [r4, #12]
 801c1f0:	e79a      	b.n	801c128 <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801c1f2:	68e2      	ldr	r2, [r4, #12]
 801c1f4:	60da      	str	r2, [r3, #12]
 801c1f6:	e7c1      	b.n	801c17c <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801c1f8:	4b0c      	ldr	r3, [pc, #48]	; (801c22c <tcp_close_shutdown+0x178>)
 801c1fa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801c1fe:	4913      	ldr	r1, [pc, #76]	; (801c24c <tcp_close_shutdown+0x198>)
 801c200:	480c      	ldr	r0, [pc, #48]	; (801c234 <tcp_close_shutdown+0x180>)
 801c202:	f008 fc73 	bl	8024aec <iprintf>
 801c206:	e773      	b.n	801c0f0 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801c208:	f001 fd9e 	bl	801dd48 <tcp_trigger_input_pcb_close>
 801c20c:	e790      	b.n	801c130 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c20e:	68e3      	ldr	r3, [r4, #12]
 801c210:	6013      	str	r3, [r2, #0]
 801c212:	e7eb      	b.n	801c1ec <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801c214:	4b05      	ldr	r3, [pc, #20]	; (801c22c <tcp_close_shutdown+0x178>)
 801c216:	22df      	movs	r2, #223	; 0xdf
 801c218:	490d      	ldr	r1, [pc, #52]	; (801c250 <tcp_close_shutdown+0x19c>)
 801c21a:	4806      	ldr	r0, [pc, #24]	; (801c234 <tcp_close_shutdown+0x180>)
 801c21c:	f008 fc66 	bl	8024aec <iprintf>
 801c220:	e7db      	b.n	801c1da <tcp_close_shutdown+0x126>
 801c222:	bf00      	nop
 801c224:	2002dbac 	.word	0x2002dbac
 801c228:	2002dbb0 	.word	0x2002dbb0
 801c22c:	080430a0 	.word	0x080430a0
 801c230:	080430dc 	.word	0x080430dc
 801c234:	0802b818 	.word	0x0802b818
 801c238:	2002dbb4 	.word	0x2002dbb4
 801c23c:	2002dbf0 	.word	0x2002dbf0
 801c240:	0804367c 	.word	0x0804367c
 801c244:	0804378c 	.word	0x0804378c
 801c248:	2002dbb8 	.word	0x2002dbb8
 801c24c:	0804369c 	.word	0x0804369c
 801c250:	080436b8 	.word	0x080436b8

0801c254 <tcp_close>:
{
 801c254:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801c256:	b158      	cbz	r0, 801c270 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801c258:	7d03      	ldrb	r3, [r0, #20]
 801c25a:	2b01      	cmp	r3, #1
 801c25c:	d003      	beq.n	801c266 <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801c25e:	8b43      	ldrh	r3, [r0, #26]
 801c260:	f043 0310 	orr.w	r3, r3, #16
 801c264:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801c266:	2101      	movs	r1, #1
}
 801c268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801c26c:	f7ff bf22 	b.w	801c0b4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801c270:	4b04      	ldr	r3, [pc, #16]	; (801c284 <tcp_close+0x30>)
 801c272:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801c276:	4904      	ldr	r1, [pc, #16]	; (801c288 <tcp_close+0x34>)
 801c278:	4804      	ldr	r0, [pc, #16]	; (801c28c <tcp_close+0x38>)
 801c27a:	f008 fc37 	bl	8024aec <iprintf>
}
 801c27e:	f06f 000f 	mvn.w	r0, #15
 801c282:	bd08      	pop	{r3, pc}
 801c284:	080430a0 	.word	0x080430a0
 801c288:	080436d4 	.word	0x080436d4
 801c28c:	0802b818 	.word	0x0802b818

0801c290 <tcp_recv_null>:
{
 801c290:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801c292:	b1c9      	cbz	r1, 801c2c8 <tcp_recv_null+0x38>
  if (p != NULL) {
 801c294:	4614      	mov	r4, r2
 801c296:	4608      	mov	r0, r1
 801c298:	b13a      	cbz	r2, 801c2aa <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801c29a:	8911      	ldrh	r1, [r2, #8]
 801c29c:	f7fe ffde 	bl	801b25c <tcp_recved>
    pbuf_free(p);
 801c2a0:	4620      	mov	r0, r4
 801c2a2:	f7fe fb69 	bl	801a978 <pbuf_free>
  return ERR_OK;
 801c2a6:	2000      	movs	r0, #0
}
 801c2a8:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801c2aa:	b10b      	cbz	r3, 801c2b0 <tcp_recv_null+0x20>
  return ERR_OK;
 801c2ac:	4610      	mov	r0, r2
}
 801c2ae:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801c2b0:	7d0b      	ldrb	r3, [r1, #20]
 801c2b2:	2b01      	cmp	r3, #1
 801c2b4:	d003      	beq.n	801c2be <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801c2b6:	8b4b      	ldrh	r3, [r1, #26]
 801c2b8:	f043 0310 	orr.w	r3, r3, #16
 801c2bc:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801c2be:	2101      	movs	r1, #1
}
 801c2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801c2c4:	f7ff bef6 	b.w	801c0b4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801c2c8:	4b04      	ldr	r3, [pc, #16]	; (801c2dc <tcp_recv_null+0x4c>)
 801c2ca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801c2ce:	4904      	ldr	r1, [pc, #16]	; (801c2e0 <tcp_recv_null+0x50>)
 801c2d0:	4804      	ldr	r0, [pc, #16]	; (801c2e4 <tcp_recv_null+0x54>)
 801c2d2:	f008 fc0b 	bl	8024aec <iprintf>
 801c2d6:	f06f 000f 	mvn.w	r0, #15
}
 801c2da:	bd10      	pop	{r4, pc}
 801c2dc:	080430a0 	.word	0x080430a0
 801c2e0:	080436ec 	.word	0x080436ec
 801c2e4:	0802b818 	.word	0x0802b818

0801c2e8 <tcp_process_refused_data>:
{
 801c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801c2ea:	b378      	cbz	r0, 801c34c <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801c2ec:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801c2ee:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801c2f0:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801c2f4:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801c2f6:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801c2f8:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801c2fa:	b156      	cbz	r6, 801c312 <tcp_process_refused_data+0x2a>
 801c2fc:	4601      	mov	r1, r0
 801c2fe:	462a      	mov	r2, r5
 801c300:	6900      	ldr	r0, [r0, #16]
 801c302:	47b0      	blx	r6
    if (err == ERR_OK) {
 801c304:	b158      	cbz	r0, 801c31e <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801c306:	300d      	adds	r0, #13
 801c308:	d01d      	beq.n	801c346 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801c30a:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801c30e:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801c310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801c312:	8929      	ldrh	r1, [r5, #8]
 801c314:	f7fe ffa2 	bl	801b25c <tcp_recved>
    pbuf_free(p);
 801c318:	4628      	mov	r0, r5
 801c31a:	f7fe fb2d 	bl	801a978 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801c31e:	06bb      	lsls	r3, r7, #26
 801c320:	d50f      	bpl.n	801c342 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801c322:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c324:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801c328:	d001      	beq.n	801c32e <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801c32a:	3301      	adds	r3, #1
 801c32c:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801c32e:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801c332:	b135      	cbz	r5, 801c342 <tcp_process_refused_data+0x5a>
 801c334:	2300      	movs	r3, #0
 801c336:	4621      	mov	r1, r4
 801c338:	6920      	ldr	r0, [r4, #16]
 801c33a:	461a      	mov	r2, r3
 801c33c:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801c33e:	300d      	adds	r0, #13
 801c340:	d001      	beq.n	801c346 <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801c342:	2000      	movs	r0, #0
}
 801c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801c346:	f06f 000c 	mvn.w	r0, #12
}
 801c34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801c34c:	4b04      	ldr	r3, [pc, #16]	; (801c360 <tcp_process_refused_data+0x78>)
 801c34e:	f240 6209 	movw	r2, #1545	; 0x609
 801c352:	4904      	ldr	r1, [pc, #16]	; (801c364 <tcp_process_refused_data+0x7c>)
 801c354:	4804      	ldr	r0, [pc, #16]	; (801c368 <tcp_process_refused_data+0x80>)
 801c356:	f008 fbc9 	bl	8024aec <iprintf>
 801c35a:	f06f 000f 	mvn.w	r0, #15
}
 801c35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c360:	080430a0 	.word	0x080430a0
 801c364:	08043708 	.word	0x08043708
 801c368:	0802b818 	.word	0x0802b818

0801c36c <tcp_fasttmr>:
{
 801c36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801c370:	4d1c      	ldr	r5, [pc, #112]	; (801c3e4 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801c372:	2700      	movs	r7, #0
 801c374:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801c3ec <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801c378:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801c37a:	4e1b      	ldr	r6, [pc, #108]	; (801c3e8 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801c37c:	3301      	adds	r3, #1
 801c37e:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801c380:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801c384:	b1bc      	cbz	r4, 801c3b6 <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801c386:	782a      	ldrb	r2, [r5, #0]
 801c388:	7fa3      	ldrb	r3, [r4, #30]
 801c38a:	4293      	cmp	r3, r2
 801c38c:	d015      	beq.n	801c3ba <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801c38e:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801c390:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801c392:	07d9      	lsls	r1, r3, #31
 801c394:	d41a      	bmi.n	801c3cc <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801c396:	071a      	lsls	r2, r3, #28
 801c398:	d411      	bmi.n	801c3be <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801c39a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801c39c:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801c3a0:	b133      	cbz	r3, 801c3b0 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801c3a2:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801c3a4:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801c3a6:	f7ff ff9f 	bl	801c2e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801c3aa:	7833      	ldrb	r3, [r6, #0]
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d1e7      	bne.n	801c380 <tcp_fasttmr+0x14>
      pcb = next;
 801c3b0:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801c3b2:	2c00      	cmp	r4, #0
 801c3b4:	d1e7      	bne.n	801c386 <tcp_fasttmr+0x1a>
}
 801c3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801c3ba:	68e4      	ldr	r4, [r4, #12]
 801c3bc:	e7e2      	b.n	801c384 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c3be:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801c3c2:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c3c4:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801c3c6:	f7fe fdc9 	bl	801af5c <tcp_close_shutdown_fin>
 801c3ca:	e7e6      	b.n	801c39a <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801c3cc:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801c3d0:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801c3d2:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801c3d4:	f002 fc74 	bl	801ecc0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c3d8:	8b63      	ldrh	r3, [r4, #26]
 801c3da:	f023 0303 	bic.w	r3, r3, #3
 801c3de:	b29b      	uxth	r3, r3
 801c3e0:	8363      	strh	r3, [r4, #26]
 801c3e2:	e7d8      	b.n	801c396 <tcp_fasttmr+0x2a>
 801c3e4:	2002dbc1 	.word	0x2002dbc1
 801c3e8:	2002dbb0 	.word	0x2002dbb0
 801c3ec:	2002dbac 	.word	0x2002dbac

0801c3f0 <tcp_tmr>:
{
 801c3f0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801c3f2:	f7ff ffbb 	bl	801c36c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801c3f6:	4a06      	ldr	r2, [pc, #24]	; (801c410 <tcp_tmr+0x20>)
 801c3f8:	7813      	ldrb	r3, [r2, #0]
 801c3fa:	3301      	adds	r3, #1
 801c3fc:	b2db      	uxtb	r3, r3
 801c3fe:	7013      	strb	r3, [r2, #0]
 801c400:	07db      	lsls	r3, r3, #31
 801c402:	d400      	bmi.n	801c406 <tcp_tmr+0x16>
}
 801c404:	bd08      	pop	{r3, pc}
 801c406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801c40a:	f7ff b93d 	b.w	801b688 <tcp_slowtmr>
 801c40e:	bf00      	nop
 801c410:	2002dbc0 	.word	0x2002dbc0

0801c414 <tcp_next_iss>:
{
 801c414:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c416:	b130      	cbz	r0, 801c426 <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801c418:	4b07      	ldr	r3, [pc, #28]	; (801c438 <tcp_next_iss+0x24>)
 801c41a:	4a08      	ldr	r2, [pc, #32]	; (801c43c <tcp_next_iss+0x28>)
 801c41c:	6818      	ldr	r0, [r3, #0]
 801c41e:	6812      	ldr	r2, [r2, #0]
 801c420:	4410      	add	r0, r2
 801c422:	6018      	str	r0, [r3, #0]
}
 801c424:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c426:	4b06      	ldr	r3, [pc, #24]	; (801c440 <tcp_next_iss+0x2c>)
 801c428:	f640 02af 	movw	r2, #2223	; 0x8af
 801c42c:	4905      	ldr	r1, [pc, #20]	; (801c444 <tcp_next_iss+0x30>)
 801c42e:	4806      	ldr	r0, [pc, #24]	; (801c448 <tcp_next_iss+0x34>)
 801c430:	f008 fb5c 	bl	8024aec <iprintf>
 801c434:	e7f0      	b.n	801c418 <tcp_next_iss+0x4>
 801c436:	bf00      	nop
 801c438:	2000040c 	.word	0x2000040c
 801c43c:	2002dbbc 	.word	0x2002dbbc
 801c440:	080430a0 	.word	0x080430a0
 801c444:	08043730 	.word	0x08043730
 801c448:	0802b818 	.word	0x0802b818

0801c44c <tcp_eff_send_mss_netif>:
{
 801c44c:	b538      	push	{r3, r4, r5, lr}
 801c44e:	4605      	mov	r5, r0
 801c450:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c452:	b172      	cbz	r2, 801c472 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801c454:	b144      	cbz	r4, 801c468 <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801c456:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801c458:	b133      	cbz	r3, 801c468 <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801c45a:	2b28      	cmp	r3, #40	; 0x28
 801c45c:	d906      	bls.n	801c46c <tcp_eff_send_mss_netif+0x20>
 801c45e:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801c460:	b29b      	uxth	r3, r3
 801c462:	429d      	cmp	r5, r3
 801c464:	bf28      	it	cs
 801c466:	461d      	movcs	r5, r3
}
 801c468:	4628      	mov	r0, r5
 801c46a:	bd38      	pop	{r3, r4, r5, pc}
 801c46c:	2500      	movs	r5, #0
 801c46e:	4628      	mov	r0, r5
 801c470:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c472:	4b04      	ldr	r3, [pc, #16]	; (801c484 <tcp_eff_send_mss_netif+0x38>)
 801c474:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801c478:	4903      	ldr	r1, [pc, #12]	; (801c488 <tcp_eff_send_mss_netif+0x3c>)
 801c47a:	4804      	ldr	r0, [pc, #16]	; (801c48c <tcp_eff_send_mss_netif+0x40>)
 801c47c:	f008 fb36 	bl	8024aec <iprintf>
 801c480:	e7e8      	b.n	801c454 <tcp_eff_send_mss_netif+0x8>
 801c482:	bf00      	nop
 801c484:	080430a0 	.word	0x080430a0
 801c488:	0804374c 	.word	0x0804374c
 801c48c:	0802b818 	.word	0x0802b818

0801c490 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801c490:	b308      	cbz	r0, 801c4d6 <tcp_netif_ip_addr_changed+0x46>
{
 801c492:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801c494:	6803      	ldr	r3, [r0, #0]
 801c496:	4604      	mov	r4, r0
 801c498:	b903      	cbnz	r3, 801c49c <tcp_netif_ip_addr_changed+0xc>
}
 801c49a:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801c49c:	4b0e      	ldr	r3, [pc, #56]	; (801c4d8 <tcp_netif_ip_addr_changed+0x48>)
 801c49e:	460d      	mov	r5, r1
 801c4a0:	6819      	ldr	r1, [r3, #0]
 801c4a2:	f7ff fd01 	bl	801bea8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801c4a6:	4b0d      	ldr	r3, [pc, #52]	; (801c4dc <tcp_netif_ip_addr_changed+0x4c>)
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	6819      	ldr	r1, [r3, #0]
 801c4ac:	f7ff fcfc 	bl	801bea8 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801c4b0:	2d00      	cmp	r5, #0
 801c4b2:	d0f2      	beq.n	801c49a <tcp_netif_ip_addr_changed+0xa>
 801c4b4:	682b      	ldr	r3, [r5, #0]
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d0ef      	beq.n	801c49a <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c4ba:	4b09      	ldr	r3, [pc, #36]	; (801c4e0 <tcp_netif_ip_addr_changed+0x50>)
 801c4bc:	681b      	ldr	r3, [r3, #0]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d0eb      	beq.n	801c49a <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801c4c2:	6819      	ldr	r1, [r3, #0]
 801c4c4:	6822      	ldr	r2, [r4, #0]
 801c4c6:	4291      	cmp	r1, r2
 801c4c8:	d101      	bne.n	801c4ce <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801c4ca:	682a      	ldr	r2, [r5, #0]
 801c4cc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c4ce:	68db      	ldr	r3, [r3, #12]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d1f6      	bne.n	801c4c2 <tcp_netif_ip_addr_changed+0x32>
}
 801c4d4:	bd38      	pop	{r3, r4, r5, pc}
 801c4d6:	4770      	bx	lr
 801c4d8:	2002dbac 	.word	0x2002dbac
 801c4dc:	2002dbb4 	.word	0x2002dbb4
 801c4e0:	2002dbb8 	.word	0x2002dbb8

0801c4e4 <tcp_free_ooseq>:
{
 801c4e4:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801c4e6:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801c4e8:	b16c      	cbz	r4, 801c506 <tcp_free_ooseq+0x22>
 801c4ea:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801c4ec:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801c4ee:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c4f0:	6868      	ldr	r0, [r5, #4]
 801c4f2:	b108      	cbz	r0, 801c4f8 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801c4f4:	f7fe fa40 	bl	801a978 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c4f8:	4629      	mov	r1, r5
 801c4fa:	2004      	movs	r0, #4
 801c4fc:	f7fd fd40 	bl	8019f80 <memp_free>
  while (seg != NULL) {
 801c500:	2c00      	cmp	r4, #0
 801c502:	d1f3      	bne.n	801c4ec <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801c504:	6774      	str	r4, [r6, #116]	; 0x74
}
 801c506:	bd70      	pop	{r4, r5, r6, pc}

0801c508 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c50a:	4605      	mov	r5, r0
{
 801c50c:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c50e:	2800      	cmp	r0, #0
 801c510:	d03e      	beq.n	801c590 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c512:	68eb      	ldr	r3, [r5, #12]
 801c514:	8998      	ldrh	r0, [r3, #12]
 801c516:	f7fc fa0f 	bl	8018938 <lwip_htons>
 801c51a:	07c2      	lsls	r2, r0, #31
 801c51c:	d432      	bmi.n	801c584 <tcp_oos_insert_segment+0x7c>
 801c51e:	4e20      	ldr	r6, [pc, #128]	; (801c5a0 <tcp_oos_insert_segment+0x98>)
 801c520:	e005      	b.n	801c52e <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801c522:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801c524:	4620      	mov	r0, r4
 801c526:	f7fe ff95 	bl	801b454 <tcp_seg_free>
    while (next &&
 801c52a:	463c      	mov	r4, r7
 801c52c:	b1ef      	cbz	r7, 801c56a <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c52e:	68e1      	ldr	r1, [r4, #12]
 801c530:	8923      	ldrh	r3, [r4, #8]
 801c532:	6837      	ldr	r7, [r6, #0]
 801c534:	892a      	ldrh	r2, [r5, #8]
 801c536:	6848      	ldr	r0, [r1, #4]
 801c538:	443a      	add	r2, r7
 801c53a:	4403      	add	r3, r0
 801c53c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c53e:	2b00      	cmp	r3, #0
 801c540:	db15      	blt.n	801c56e <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c542:	8988      	ldrh	r0, [r1, #12]
 801c544:	f7fc f9f8 	bl	8018938 <lwip_htons>
 801c548:	07c3      	lsls	r3, r0, #31
 801c54a:	d5ea      	bpl.n	801c522 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c54c:	68eb      	ldr	r3, [r5, #12]
 801c54e:	2001      	movs	r0, #1
 801c550:	899f      	ldrh	r7, [r3, #12]
 801c552:	f7fc f9f1 	bl	8018938 <lwip_htons>
 801c556:	68eb      	ldr	r3, [r5, #12]
 801c558:	4338      	orrs	r0, r7
      next = next->next;
 801c55a:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c55c:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801c55e:	4620      	mov	r0, r4
 801c560:	f7fe ff78 	bl	801b454 <tcp_seg_free>
    while (next &&
 801c564:	463c      	mov	r4, r7
 801c566:	2f00      	cmp	r7, #0
 801c568:	d1e1      	bne.n	801c52e <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801c56a:	602c      	str	r4, [r5, #0]
}
 801c56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c56e:	1a12      	subs	r2, r2, r0
    if (next &&
 801c570:	2a00      	cmp	r2, #0
 801c572:	ddfa      	ble.n	801c56a <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c574:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801c576:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c578:	b289      	uxth	r1, r1
 801c57a:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c57c:	f7fe f900 	bl	801a780 <pbuf_realloc>
  cseg->next = next;
 801c580:	602c      	str	r4, [r5, #0]
}
 801c582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801c584:	4620      	mov	r0, r4
    next = NULL;
 801c586:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801c588:	f7fe ff52 	bl	801b430 <tcp_segs_free>
  cseg->next = next;
 801c58c:	602c      	str	r4, [r5, #0]
}
 801c58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c590:	4b04      	ldr	r3, [pc, #16]	; (801c5a4 <tcp_oos_insert_segment+0x9c>)
 801c592:	f240 421f 	movw	r2, #1055	; 0x41f
 801c596:	4904      	ldr	r1, [pc, #16]	; (801c5a8 <tcp_oos_insert_segment+0xa0>)
 801c598:	4804      	ldr	r0, [pc, #16]	; (801c5ac <tcp_oos_insert_segment+0xa4>)
 801c59a:	f008 faa7 	bl	8024aec <iprintf>
 801c59e:	e7b8      	b.n	801c512 <tcp_oos_insert_segment+0xa>
 801c5a0:	2002dbec 	.word	0x2002dbec
 801c5a4:	0804379c 	.word	0x0804379c
 801c5a8:	080437d0 	.word	0x080437d0
 801c5ac:	0802b818 	.word	0x0802b818

0801c5b0 <tcp_input_delayed_close>:
{
 801c5b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801c5b2:	4604      	mov	r4, r0
 801c5b4:	b1c8      	cbz	r0, 801c5ea <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801c5b6:	4b11      	ldr	r3, [pc, #68]	; (801c5fc <tcp_input_delayed_close+0x4c>)
 801c5b8:	781b      	ldrb	r3, [r3, #0]
 801c5ba:	f013 0310 	ands.w	r3, r3, #16
 801c5be:	d101      	bne.n	801c5c4 <tcp_input_delayed_close+0x14>
  return 0;
 801c5c0:	4618      	mov	r0, r3
}
 801c5c2:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801c5c4:	8b63      	ldrh	r3, [r4, #26]
 801c5c6:	06db      	lsls	r3, r3, #27
 801c5c8:	d406      	bmi.n	801c5d8 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801c5ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801c5ce:	b11b      	cbz	r3, 801c5d8 <tcp_input_delayed_close+0x28>
 801c5d0:	f06f 010e 	mvn.w	r1, #14
 801c5d4:	6920      	ldr	r0, [r4, #16]
 801c5d6:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801c5d8:	4621      	mov	r1, r4
 801c5da:	4809      	ldr	r0, [pc, #36]	; (801c600 <tcp_input_delayed_close+0x50>)
 801c5dc:	f7ff fb02 	bl	801bbe4 <tcp_pcb_remove>
    tcp_free(pcb);
 801c5e0:	4620      	mov	r0, r4
 801c5e2:	f7fe fcfb 	bl	801afdc <tcp_free>
 801c5e6:	2001      	movs	r0, #1
}
 801c5e8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801c5ea:	4b06      	ldr	r3, [pc, #24]	; (801c604 <tcp_input_delayed_close+0x54>)
 801c5ec:	f240 225a 	movw	r2, #602	; 0x25a
 801c5f0:	4905      	ldr	r1, [pc, #20]	; (801c608 <tcp_input_delayed_close+0x58>)
 801c5f2:	4806      	ldr	r0, [pc, #24]	; (801c60c <tcp_input_delayed_close+0x5c>)
 801c5f4:	f008 fa7a 	bl	8024aec <iprintf>
 801c5f8:	e7dd      	b.n	801c5b6 <tcp_input_delayed_close+0x6>
 801c5fa:	bf00      	nop
 801c5fc:	2002dbe8 	.word	0x2002dbe8
 801c600:	2002dbac 	.word	0x2002dbac
 801c604:	0804379c 	.word	0x0804379c
 801c608:	080437f8 	.word	0x080437f8
 801c60c:	0802b818 	.word	0x0802b818

0801c610 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c614:	b083      	sub	sp, #12
 801c616:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c618:	2900      	cmp	r1, #0
 801c61a:	d03d      	beq.n	801c698 <tcp_free_acked_segments.constprop.0+0x88>
 801c61c:	4607      	mov	r7, r0
 801c61e:	460c      	mov	r4, r1
 801c620:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801c6e8 <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c624:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801c6dc <tcp_free_acked_segments.constprop.0+0xcc>
 801c628:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801c6ec <tcp_free_acked_segments.constprop.0+0xdc>
 801c62c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801c6e4 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c630:	68e3      	ldr	r3, [r4, #12]
 801c632:	6858      	ldr	r0, [r3, #4]
 801c634:	f7fc f984 	bl	8018940 <lwip_htonl>
 801c638:	68e3      	ldr	r3, [r4, #12]
 801c63a:	4605      	mov	r5, r0
 801c63c:	8926      	ldrh	r6, [r4, #8]
 801c63e:	8998      	ldrh	r0, [r3, #12]
 801c640:	f7fc f97a 	bl	8018938 <lwip_htons>
 801c644:	f8d8 3000 	ldr.w	r3, [r8]
 801c648:	f010 0003 	ands.w	r0, r0, #3
 801c64c:	eba5 0503 	sub.w	r5, r5, r3
 801c650:	bf18      	it	ne
 801c652:	2001      	movne	r0, #1
 801c654:	4435      	add	r5, r6
 801c656:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801c658:	2800      	cmp	r0, #0
 801c65a:	dc37      	bgt.n	801c6cc <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801c65c:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801c660:	f7fe f99e 	bl	801a9a0 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c664:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801c668:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c66a:	4298      	cmp	r0, r3
 801c66c:	d824      	bhi.n	801c6b8 <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c66e:	491a      	ldr	r1, [pc, #104]	; (801c6d8 <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c670:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c672:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801c674:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c676:	880d      	ldrh	r5, [r1, #0]
 801c678:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c67a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c67e:	1953      	adds	r3, r2, r5
 801c680:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801c682:	f7fe fee7 	bl	801b454 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c686:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801c68a:	b11b      	cbz	r3, 801c694 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c68c:	9b01      	ldr	r3, [sp, #4]
 801c68e:	ea56 0503 	orrs.w	r5, r6, r3
 801c692:	d006      	beq.n	801c6a2 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801c694:	2e00      	cmp	r6, #0
 801c696:	d1cb      	bne.n	801c630 <tcp_free_acked_segments.constprop.0+0x20>
 801c698:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801c69a:	4628      	mov	r0, r5
 801c69c:	b003      	add	sp, #12
 801c69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c6a2:	4b0e      	ldr	r3, [pc, #56]	; (801c6dc <tcp_free_acked_segments.constprop.0+0xcc>)
 801c6a4:	f240 4261 	movw	r2, #1121	; 0x461
 801c6a8:	490d      	ldr	r1, [pc, #52]	; (801c6e0 <tcp_free_acked_segments.constprop.0+0xd0>)
 801c6aa:	480e      	ldr	r0, [pc, #56]	; (801c6e4 <tcp_free_acked_segments.constprop.0+0xd4>)
 801c6ac:	f008 fa1e 	bl	8024aec <iprintf>
}
 801c6b0:	4628      	mov	r0, r5
 801c6b2:	b003      	add	sp, #12
 801c6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c6b8:	465b      	mov	r3, fp
 801c6ba:	f240 4257 	movw	r2, #1111	; 0x457
 801c6be:	4651      	mov	r1, sl
 801c6c0:	4648      	mov	r0, r9
 801c6c2:	f008 fa13 	bl	8024aec <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c6c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801c6ca:	e7d0      	b.n	801c66e <tcp_free_acked_segments.constprop.0+0x5e>
 801c6cc:	4625      	mov	r5, r4
}
 801c6ce:	4628      	mov	r0, r5
 801c6d0:	b003      	add	sp, #12
 801c6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6d6:	bf00      	nop
 801c6d8:	2002dbe0 	.word	0x2002dbe0
 801c6dc:	0804379c 	.word	0x0804379c
 801c6e0:	08043848 	.word	0x08043848
 801c6e4:	0802b818 	.word	0x0802b818
 801c6e8:	2002dbc8 	.word	0x2002dbc8
 801c6ec:	08043820 	.word	0x08043820

0801c6f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c6f4:	4604      	mov	r4, r0
 801c6f6:	2800      	cmp	r0, #0
 801c6f8:	f000 8200 	beq.w	801cafc <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c6fc:	7d23      	ldrb	r3, [r4, #20]
 801c6fe:	2b03      	cmp	r3, #3
 801c700:	f240 811e 	bls.w	801c940 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801c704:	4bb4      	ldr	r3, [pc, #720]	; (801c9d8 <tcp_receive+0x2e8>)
 801c706:	781b      	ldrb	r3, [r3, #0]
 801c708:	06dd      	lsls	r5, r3, #27
 801c70a:	f100 8097 	bmi.w	801c83c <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c70e:	4fb3      	ldr	r7, [pc, #716]	; (801c9dc <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c710:	4eb3      	ldr	r6, [pc, #716]	; (801c9e0 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c712:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c714:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c716:	2900      	cmp	r1, #0
 801c718:	d07f      	beq.n	801c81a <tcp_receive+0x12a>
 801c71a:	7d22      	ldrb	r2, [r4, #20]
 801c71c:	2a06      	cmp	r2, #6
 801c71e:	d87c      	bhi.n	801c81a <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c720:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c722:	eba2 0803 	sub.w	r8, r2, r3
 801c726:	f1b8 0f01 	cmp.w	r8, #1
 801c72a:	d405      	bmi.n	801c738 <tcp_receive+0x48>
 801c72c:	1c50      	adds	r0, r2, #1
 801c72e:	1ac0      	subs	r0, r0, r3
 801c730:	1a41      	subs	r1, r0, r1
 801c732:	2900      	cmp	r1, #0
 801c734:	f340 81f3 	ble.w	801cb1e <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801c738:	1a99      	subs	r1, r3, r2
 801c73a:	2900      	cmp	r1, #0
 801c73c:	f2c0 81ea 	blt.w	801cb14 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c740:	f103 0c01 	add.w	ip, r3, #1
 801c744:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801c746:	ebac 0102 	sub.w	r1, ip, r2
 801c74a:	1a09      	subs	r1, r1, r0
 801c74c:	2900      	cmp	r1, #0
 801c74e:	dc39      	bgt.n	801c7c4 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801c750:	429a      	cmp	r2, r3
 801c752:	f000 8470 	beq.w	801d036 <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801c756:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801c758:	2d00      	cmp	r5, #0
 801c75a:	f000 8378 	beq.w	801ce4e <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801c75e:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801c760:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801c764:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801c768:	6842      	ldr	r2, [r0, #4]
 801c76a:	429a      	cmp	r2, r3
 801c76c:	d019      	beq.n	801c7a2 <tcp_receive+0xb2>
              if (prev == NULL) {
 801c76e:	f1b8 0f00 	cmp.w	r8, #0
 801c772:	f000 815b 	beq.w	801ca2c <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801c776:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801c77a:	6849      	ldr	r1, [r1, #4]
 801c77c:	ebae 0101 	sub.w	r1, lr, r1
 801c780:	2900      	cmp	r1, #0
 801c782:	db04      	blt.n	801c78e <tcp_receive+0x9e>
 801c784:	ebac 0102 	sub.w	r1, ip, r2
 801c788:	2900      	cmp	r1, #0
 801c78a:	f340 8369 	ble.w	801ce60 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801c78e:	6829      	ldr	r1, [r5, #0]
 801c790:	46a8      	mov	r8, r5
 801c792:	2900      	cmp	r1, #0
 801c794:	f000 8159 	beq.w	801ca4a <tcp_receive+0x35a>
 801c798:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801c79a:	68e8      	ldr	r0, [r5, #12]
 801c79c:	6842      	ldr	r2, [r0, #4]
 801c79e:	429a      	cmp	r2, r3
 801c7a0:	d1e5      	bne.n	801c76e <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801c7a2:	4890      	ldr	r0, [pc, #576]	; (801c9e4 <tcp_receive+0x2f4>)
 801c7a4:	892b      	ldrh	r3, [r5, #8]
 801c7a6:	8902      	ldrh	r2, [r0, #8]
 801c7a8:	429a      	cmp	r2, r3
 801c7aa:	d90b      	bls.n	801c7c4 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c7ac:	f7fe fe70 	bl	801b490 <tcp_seg_copy>
                if (cseg != NULL) {
 801c7b0:	b140      	cbz	r0, 801c7c4 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801c7b2:	f1b8 0f00 	cmp.w	r8, #0
 801c7b6:	f000 8414 	beq.w	801cfe2 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801c7ba:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801c7be:	4629      	mov	r1, r5
 801c7c0:	f7ff fea2 	bl	801c508 <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801c7c4:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801c7c6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801c7ca:	f002 ba47 	b.w	801ec5c <tcp_send_empty_ack>
      if (tcplen == 0) {
 801c7ce:	4f83      	ldr	r7, [pc, #524]	; (801c9dc <tcp_receive+0x2ec>)
 801c7d0:	8839      	ldrh	r1, [r7, #0]
 801c7d2:	2900      	cmp	r1, #0
 801c7d4:	f040 8116 	bne.w	801ca04 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c7d8:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c7da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7dc:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801c7e0:	4470      	add	r0, lr
 801c7e2:	4560      	cmp	r0, ip
 801c7e4:	f040 810e 	bne.w	801ca04 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801c7e8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801c7ea:	0400      	lsls	r0, r0, #16
 801c7ec:	f100 810a 	bmi.w	801ca04 <tcp_receive+0x314>
 801c7f0:	4590      	cmp	r8, r2
 801c7f2:	f040 8107 	bne.w	801ca04 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c7f6:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801c7fa:	28ff      	cmp	r0, #255	; 0xff
 801c7fc:	f000 8393 	beq.w	801cf26 <tcp_receive+0x836>
                ++pcb->dupacks;
 801c800:	3001      	adds	r0, #1
 801c802:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801c804:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801c806:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801c80a:	f200 838c 	bhi.w	801cf26 <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801c80e:	f000 8396 	beq.w	801cf3e <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c812:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801c814:	2800      	cmp	r0, #0
 801c816:	f040 80b6 	bne.w	801c986 <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801c81a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c81c:	1a99      	subs	r1, r3, r2
 801c81e:	2900      	cmp	r1, #0
 801c820:	db06      	blt.n	801c830 <tcp_receive+0x140>
 801c822:	f1c2 0201 	rsb	r2, r2, #1
 801c826:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801c828:	1a52      	subs	r2, r2, r1
 801c82a:	4413      	add	r3, r2
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	dd03      	ble.n	801c838 <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801c830:	8b63      	ldrh	r3, [r4, #26]
 801c832:	f043 0302 	orr.w	r3, r3, #2
 801c836:	8363      	strh	r3, [r4, #26]
}
 801c838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c83c:	4e68      	ldr	r6, [pc, #416]	; (801c9e0 <tcp_receive+0x2f0>)
 801c83e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801c840:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c842:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c846:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c848:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c84c:	2900      	cmp	r1, #0
 801c84e:	db7f      	blt.n	801c950 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c850:	4d65      	ldr	r5, [pc, #404]	; (801c9e8 <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c852:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c854:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c856:	f000 80d9 	beq.w	801ca0c <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c85a:	4594      	cmp	ip, r2
 801c85c:	f000 80df 	beq.w	801ca1e <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c860:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801c864:	eba2 0108 	sub.w	r1, r2, r8
 801c868:	2900      	cmp	r1, #0
 801c86a:	ddb0      	ble.n	801c7ce <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c86c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c86e:	1ad3      	subs	r3, r2, r3
 801c870:	2b00      	cmp	r3, #0
 801c872:	dc7d      	bgt.n	801c970 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801c874:	8b63      	ldrh	r3, [r4, #26]
 801c876:	0758      	lsls	r0, r3, #29
 801c878:	d509      	bpl.n	801c88e <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801c87a:	f023 0304 	bic.w	r3, r3, #4
 801c87e:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801c880:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801c884:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801c888:	2300      	movs	r3, #0
 801c88a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c88e:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801c892:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801c894:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c896:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801c89a:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c89c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801c8a0:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801c8a2:	f04f 0300 	mov.w	r3, #0
 801c8a6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801c8aa:	d913      	bls.n	801c8d4 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801c8ac:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801c8b0:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801c8b2:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801c8b6:	429a      	cmp	r2, r3
 801c8b8:	f200 81c9 	bhi.w	801cc4e <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c8bc:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801c8c0:	4411      	add	r1, r2
 801c8c2:	b289      	uxth	r1, r1
 801c8c4:	428a      	cmp	r2, r1
 801c8c6:	f200 82a9 	bhi.w	801ce1c <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801c8ca:	428b      	cmp	r3, r1
 801c8cc:	f240 82a8 	bls.w	801ce20 <tcp_receive+0x730>
 801c8d0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c8d4:	4620      	mov	r0, r4
 801c8d6:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801c8da:	f7ff fe99 	bl	801c610 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c8de:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801c8e0:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c8e2:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c8e4:	4620      	mov	r0, r4
 801c8e6:	f7ff fe93 	bl	801c610 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801c8ea:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c8ec:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801c8ee:	fab2 f382 	clz	r3, r2
 801c8f2:	095b      	lsrs	r3, r3, #5
 801c8f4:	425b      	negs	r3, r3
 801c8f6:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801c8fc:	2800      	cmp	r0, #0
 801c8fe:	f000 81a3 	beq.w	801cc48 <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801c902:	4b3a      	ldr	r3, [pc, #232]	; (801c9ec <tcp_receive+0x2fc>)
 801c904:	8819      	ldrh	r1, [r3, #0]
 801c906:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801c90a:	440b      	add	r3, r1
 801c90c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801c910:	8b63      	ldrh	r3, [r4, #26]
 801c912:	0519      	lsls	r1, r3, #20
 801c914:	f140 80fa 	bpl.w	801cb0c <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801c918:	2a00      	cmp	r2, #0
 801c91a:	f000 81af 	beq.w	801cc7c <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801c91e:	68d3      	ldr	r3, [r2, #12]
 801c920:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801c922:	6858      	ldr	r0, [r3, #4]
 801c924:	f7fc f80c 	bl	8018940 <lwip_htonl>
 801c928:	1a38      	subs	r0, r7, r0
 801c92a:	2800      	cmp	r0, #0
 801c92c:	f300 80ee 	bgt.w	801cb0c <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801c930:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c932:	4f2a      	ldr	r7, [pc, #168]	; (801c9dc <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801c934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c938:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801c93a:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c93c:	6833      	ldr	r3, [r6, #0]
 801c93e:	e01d      	b.n	801c97c <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c940:	4b2b      	ldr	r3, [pc, #172]	; (801c9f0 <tcp_receive+0x300>)
 801c942:	f240 427c 	movw	r2, #1148	; 0x47c
 801c946:	492b      	ldr	r1, [pc, #172]	; (801c9f4 <tcp_receive+0x304>)
 801c948:	482b      	ldr	r0, [pc, #172]	; (801c9f8 <tcp_receive+0x308>)
 801c94a:	f008 f8cf 	bl	8024aec <iprintf>
 801c94e:	e6d9      	b.n	801c704 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c950:	4a2a      	ldr	r2, [pc, #168]	; (801c9fc <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c952:	4d25      	ldr	r5, [pc, #148]	; (801c9e8 <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c954:	6812      	ldr	r2, [r2, #0]
 801c956:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c958:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c95a:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c95e:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c962:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801c964:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c968:	bf38      	it	cc
 801c96a:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801c96e:	e777      	b.n	801c860 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c970:	4f1a      	ldr	r7, [pc, #104]	; (801c9dc <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801c972:	4620      	mov	r0, r4
 801c974:	f002 f972 	bl	801ec5c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c978:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c97a:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c97c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801c97e:	2800      	cmp	r0, #0
 801c980:	f43f aec9 	beq.w	801c716 <tcp_receive+0x26>
 801c984:	682a      	ldr	r2, [r5, #0]
 801c986:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801c988:	1aaa      	subs	r2, r5, r2
 801c98a:	2a00      	cmp	r2, #0
 801c98c:	f6bf aec3 	bge.w	801c716 <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801c990:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c994:	b280      	uxth	r0, r0
 801c996:	4a1a      	ldr	r2, [pc, #104]	; (801ca00 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801c998:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c99c:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801c9a0:	ebae 020c 	sub.w	r2, lr, ip
 801c9a4:	1a12      	subs	r2, r2, r0
 801c9a6:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801c9a8:	4415      	add	r5, r2
      if (m < 0) {
 801c9aa:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801c9ae:	b22d      	sxth	r5, r5
 801c9b0:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801c9b2:	d003      	beq.n	801c9bc <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801c9b4:	ebac 0c0e 	sub.w	ip, ip, lr
 801c9b8:	4460      	add	r0, ip
 801c9ba:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801c9bc:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801c9c0:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801c9c4:	4410      	add	r0, r2
      pcb->rttest = 0;
 801c9c6:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801c9c8:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801c9ca:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c9cc:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801c9d0:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c9d2:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801c9d6:	e69e      	b.n	801c716 <tcp_receive+0x26>
 801c9d8:	2002dbcc 	.word	0x2002dbcc
 801c9dc:	2002dc06 	.word	0x2002dc06
 801c9e0:	2002dbec 	.word	0x2002dbec
 801c9e4:	2002dbd0 	.word	0x2002dbd0
 801c9e8:	2002dbc8 	.word	0x2002dbc8
 801c9ec:	2002dbe0 	.word	0x2002dbe0
 801c9f0:	0804379c 	.word	0x0804379c
 801c9f4:	08043884 	.word	0x08043884
 801c9f8:	0802b818 	.word	0x0802b818
 801c9fc:	2002dbf8 	.word	0x2002dbf8
 801ca00:	2002dbbc 	.word	0x2002dbbc
        pcb->dupacks = 0;
 801ca04:	2200      	movs	r2, #0
 801ca06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801ca0a:	e7b7      	b.n	801c97c <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ca0c:	ebac 0102 	sub.w	r1, ip, r2
 801ca10:	2900      	cmp	r1, #0
 801ca12:	f6bf af22 	bge.w	801c85a <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ca16:	49ac      	ldr	r1, [pc, #688]	; (801ccc8 <tcp_receive+0x5d8>)
 801ca18:	6809      	ldr	r1, [r1, #0]
 801ca1a:	89c9      	ldrh	r1, [r1, #14]
 801ca1c:	e79d      	b.n	801c95a <tcp_receive+0x26a>
 801ca1e:	49aa      	ldr	r1, [pc, #680]	; (801ccc8 <tcp_receive+0x5d8>)
 801ca20:	6809      	ldr	r1, [r1, #0]
 801ca22:	89c9      	ldrh	r1, [r1, #14]
 801ca24:	458e      	cmp	lr, r1
 801ca26:	f4bf af1b 	bcs.w	801c860 <tcp_receive+0x170>
 801ca2a:	e796      	b.n	801c95a <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801ca2c:	1a99      	subs	r1, r3, r2
 801ca2e:	2900      	cmp	r1, #0
 801ca30:	f6bf aead 	bge.w	801c78e <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ca34:	48a5      	ldr	r0, [pc, #660]	; (801cccc <tcp_receive+0x5dc>)
 801ca36:	f7fe fd2b 	bl	801b490 <tcp_seg_copy>
                  if (cseg != NULL) {
 801ca3a:	2800      	cmp	r0, #0
 801ca3c:	f43f aec2 	beq.w	801c7c4 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801ca40:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801ca42:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801ca44:	f7ff fd60 	bl	801c508 <tcp_oos_insert_segment>
 801ca48:	e6bc      	b.n	801c7c4 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801ca4a:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	f77f aeb9 	ble.w	801c7c4 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801ca52:	8980      	ldrh	r0, [r0, #12]
 801ca54:	f7fb ff70 	bl	8018938 <lwip_htons>
 801ca58:	07c1      	lsls	r1, r0, #31
 801ca5a:	f53f aeb3 	bmi.w	801c7c4 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801ca5e:	489b      	ldr	r0, [pc, #620]	; (801cccc <tcp_receive+0x5dc>)
 801ca60:	f7fe fd16 	bl	801b490 <tcp_seg_copy>
 801ca64:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801ca66:	2800      	cmp	r0, #0
 801ca68:	f43f aeac 	beq.w	801c7c4 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801ca6c:	68eb      	ldr	r3, [r5, #12]
 801ca6e:	892a      	ldrh	r2, [r5, #8]
 801ca70:	6859      	ldr	r1, [r3, #4]
 801ca72:	6833      	ldr	r3, [r6, #0]
 801ca74:	440a      	add	r2, r1
 801ca76:	1ad2      	subs	r2, r2, r3
 801ca78:	2a00      	cmp	r2, #0
 801ca7a:	dd05      	ble.n	801ca88 <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801ca7c:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801ca7e:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801ca80:	b299      	uxth	r1, r3
 801ca82:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801ca84:	f7fd fe7c 	bl	801a780 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801ca88:	6832      	ldr	r2, [r6, #0]
 801ca8a:	883b      	ldrh	r3, [r7, #0]
 801ca8c:	4413      	add	r3, r2
 801ca8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801ca90:	1a9b      	subs	r3, r3, r2
 801ca92:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801ca94:	1a9b      	subs	r3, r3, r2
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	f77f ae94 	ble.w	801c7c4 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801ca9c:	682b      	ldr	r3, [r5, #0]
 801ca9e:	68db      	ldr	r3, [r3, #12]
 801caa0:	8998      	ldrh	r0, [r3, #12]
 801caa2:	f7fb ff49 	bl	8018938 <lwip_htons>
 801caa6:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801caa8:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801caaa:	f100 82b1 	bmi.w	801d010 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801caae:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801cab0:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801cab2:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801cab4:	1a89      	subs	r1, r1, r2
 801cab6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801cab8:	4411      	add	r1, r2
 801caba:	b289      	uxth	r1, r1
 801cabc:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801cabe:	f7fd fe5f 	bl	801a780 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801cac2:	682b      	ldr	r3, [r5, #0]
 801cac4:	891d      	ldrh	r5, [r3, #8]
 801cac6:	68db      	ldr	r3, [r3, #12]
 801cac8:	8998      	ldrh	r0, [r3, #12]
 801caca:	f7fb ff35 	bl	8018938 <lwip_htons>
 801cace:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cad2:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801cad4:	bf18      	it	ne
 801cad6:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cad8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801cada:	442b      	add	r3, r5
 801cadc:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cade:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801cae0:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cae4:	4413      	add	r3, r2
 801cae6:	4299      	cmp	r1, r3
 801cae8:	f43f ae6c 	beq.w	801c7c4 <tcp_receive+0xd4>
 801caec:	4b78      	ldr	r3, [pc, #480]	; (801ccd0 <tcp_receive+0x5e0>)
 801caee:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801caf2:	4978      	ldr	r1, [pc, #480]	; (801ccd4 <tcp_receive+0x5e4>)
 801caf4:	4878      	ldr	r0, [pc, #480]	; (801ccd8 <tcp_receive+0x5e8>)
 801caf6:	f007 fff9 	bl	8024aec <iprintf>
 801cafa:	e663      	b.n	801c7c4 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801cafc:	4b74      	ldr	r3, [pc, #464]	; (801ccd0 <tcp_receive+0x5e0>)
 801cafe:	f240 427b 	movw	r2, #1147	; 0x47b
 801cb02:	4976      	ldr	r1, [pc, #472]	; (801ccdc <tcp_receive+0x5ec>)
 801cb04:	4874      	ldr	r0, [pc, #464]	; (801ccd8 <tcp_receive+0x5e8>)
 801cb06:	f007 fff1 	bl	8024aec <iprintf>
 801cb0a:	e5f7      	b.n	801c6fc <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cb0c:	4f74      	ldr	r7, [pc, #464]	; (801cce0 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cb0e:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cb10:	8839      	ldrh	r1, [r7, #0]
 801cb12:	e733      	b.n	801c97c <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801cb14:	8b63      	ldrh	r3, [r4, #26]
 801cb16:	f043 0302 	orr.w	r3, r3, #2
 801cb1a:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cb1c:	e652      	b.n	801c7c4 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801cb1e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801cccc <tcp_receive+0x5dc>
 801cb22:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801cb26:	2d00      	cmp	r5, #0
 801cb28:	f000 8170 	beq.w	801ce0c <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801cb2c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801cb30:	4598      	cmp	r8, r3
 801cb32:	f200 80c0 	bhi.w	801ccb6 <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801cb36:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801cb3a:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801cb3e:	891a      	ldrh	r2, [r3, #8]
 801cb40:	4542      	cmp	r2, r8
 801cb42:	f0c0 80ad 	bcc.w	801cca0 <tcp_receive+0x5b0>
      inseg.len -= off;
 801cb46:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801cb4a:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801cb4e:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801cb52:	b292      	uxth	r2, r2
      inseg.len -= off;
 801cb54:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801cb58:	896b      	ldrh	r3, [r5, #10]
 801cb5a:	4543      	cmp	r3, r8
 801cb5c:	d20a      	bcs.n	801cb74 <tcp_receive+0x484>
        p->len = 0;
 801cb5e:	2100      	movs	r1, #0
        off -= p->len;
 801cb60:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801cb64:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801cb66:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801cb68:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801cb6a:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801cb6e:	896b      	ldrh	r3, [r5, #10]
 801cb70:	4543      	cmp	r3, r8
 801cb72:	d3f5      	bcc.n	801cb60 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801cb74:	4641      	mov	r1, r8
 801cb76:	4628      	mov	r0, r5
 801cb78:	f7fd fe8e 	bl	801a898 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801cb7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cb7e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801cb82:	6033      	str	r3, [r6, #0]
 801cb84:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cb86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	f43f ae1b 	beq.w	801c7c4 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801cb8e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cb92:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801cb96:	8998      	ldrh	r0, [r3, #12]
 801cb98:	f7fb fece 	bl	8018938 <lwip_htons>
 801cb9c:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801cba0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801cba2:	bf18      	it	ne
 801cba4:	2301      	movne	r3, #1
 801cba6:	442b      	add	r3, r5
 801cba8:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801cbaa:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801cbac:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801cbae:	f0c0 8181 	bcc.w	801ceb4 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801cbb2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	f000 80a0 	beq.w	801ccfa <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cbba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cbbe:	8998      	ldrh	r0, [r3, #12]
 801cbc0:	f7fb feba 	bl	8018938 <lwip_htons>
 801cbc4:	07c2      	lsls	r2, r0, #31
 801cbc6:	f100 8095 	bmi.w	801ccf4 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801cbca:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801cbcc:	b955      	cbnz	r5, 801cbe4 <tcp_receive+0x4f4>
 801cbce:	e1f4      	b.n	801cfba <tcp_receive+0x8ca>
              next = next->next;
 801cbd0:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801cbd4:	4628      	mov	r0, r5
 801cbd6:	f7fe fc3d 	bl	801b454 <tcp_seg_free>
            while (next &&
 801cbda:	4645      	mov	r5, r8
 801cbdc:	f1b8 0f00 	cmp.w	r8, #0
 801cbe0:	f000 81eb 	beq.w	801cfba <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801cbe4:	68e8      	ldr	r0, [r5, #12]
 801cbe6:	883a      	ldrh	r2, [r7, #0]
 801cbe8:	f8d6 e000 	ldr.w	lr, [r6]
 801cbec:	892b      	ldrh	r3, [r5, #8]
 801cbee:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801cbf2:	eb02 010e 	add.w	r1, r2, lr
 801cbf6:	4463      	add	r3, ip
 801cbf8:	1acb      	subs	r3, r1, r3
            while (next &&
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	f2c0 81a5 	blt.w	801cf4a <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cc00:	8980      	ldrh	r0, [r0, #12]
 801cc02:	f7fb fe99 	bl	8018938 <lwip_htons>
 801cc06:	07c3      	lsls	r3, r0, #31
 801cc08:	d5e2      	bpl.n	801cbd0 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801cc0a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cc0e:	8998      	ldrh	r0, [r3, #12]
 801cc10:	f7fb fe92 	bl	8018938 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cc14:	0780      	lsls	r0, r0, #30
 801cc16:	d4db      	bmi.n	801cbd0 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801cc18:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cc1c:	2001      	movs	r0, #1
 801cc1e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801cc22:	f7fb fe89 	bl	8018938 <lwip_htons>
 801cc26:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cc2a:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801cc2e:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801cc32:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801cc34:	b280      	uxth	r0, r0
 801cc36:	f7fb fe7f 	bl	8018938 <lwip_htons>
 801cc3a:	f010 0003 	ands.w	r0, r0, #3
 801cc3e:	bf18      	it	ne
 801cc40:	2001      	movne	r0, #1
 801cc42:	4440      	add	r0, r8
 801cc44:	8038      	strh	r0, [r7, #0]
 801cc46:	e7c3      	b.n	801cbd0 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801cc48:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801cc4c:	e659      	b.n	801c902 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801cc4e:	8b62      	ldrh	r2, [r4, #26]
 801cc50:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801cc54:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801cc56:	bf14      	ite	ne
 801cc58:	2001      	movne	r0, #1
 801cc5a:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801cc5c:	fb12 f200 	smulbb	r2, r2, r0
 801cc60:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801cc62:	428a      	cmp	r2, r1
 801cc64:	bf94      	ite	ls
 801cc66:	1898      	addls	r0, r3, r2
 801cc68:	1858      	addhi	r0, r3, r1
 801cc6a:	b282      	uxth	r2, r0
 801cc6c:	4293      	cmp	r3, r2
 801cc6e:	f240 80e0 	bls.w	801ce32 <tcp_receive+0x742>
 801cc72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc76:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801cc7a:	e62b      	b.n	801c8d4 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801cc7c:	b148      	cbz	r0, 801cc92 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801cc7e:	68c3      	ldr	r3, [r0, #12]
 801cc80:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801cc82:	6858      	ldr	r0, [r3, #4]
 801cc84:	f7fb fe5c 	bl	8018940 <lwip_htonl>
 801cc88:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801cc8a:	2800      	cmp	r0, #0
 801cc8c:	f73f af3e 	bgt.w	801cb0c <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801cc90:	8b63      	ldrh	r3, [r4, #26]
 801cc92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cc96:	4f12      	ldr	r7, [pc, #72]	; (801cce0 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801cc98:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cc9a:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cc9c:	6833      	ldr	r3, [r6, #0]
 801cc9e:	e66d      	b.n	801c97c <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801cca0:	4b0b      	ldr	r3, [pc, #44]	; (801ccd0 <tcp_receive+0x5e0>)
 801cca2:	f240 5297 	movw	r2, #1431	; 0x597
 801cca6:	490f      	ldr	r1, [pc, #60]	; (801cce4 <tcp_receive+0x5f4>)
 801cca8:	480b      	ldr	r0, [pc, #44]	; (801ccd8 <tcp_receive+0x5e8>)
 801ccaa:	f007 ff1f 	bl	8024aec <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801ccae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ccb2:	891a      	ldrh	r2, [r3, #8]
 801ccb4:	e747      	b.n	801cb46 <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801ccb6:	4b06      	ldr	r3, [pc, #24]	; (801ccd0 <tcp_receive+0x5e0>)
 801ccb8:	f240 5295 	movw	r2, #1429	; 0x595
 801ccbc:	490a      	ldr	r1, [pc, #40]	; (801cce8 <tcp_receive+0x5f8>)
 801ccbe:	4806      	ldr	r0, [pc, #24]	; (801ccd8 <tcp_receive+0x5e8>)
 801ccc0:	f007 ff14 	bl	8024aec <iprintf>
 801ccc4:	e737      	b.n	801cb36 <tcp_receive+0x446>
 801ccc6:	bf00      	nop
 801ccc8:	2002dbf8 	.word	0x2002dbf8
 801cccc:	2002dbd0 	.word	0x2002dbd0
 801ccd0:	0804379c 	.word	0x0804379c
 801ccd4:	080438d0 	.word	0x080438d0
 801ccd8:	0802b818 	.word	0x0802b818
 801ccdc:	08043868 	.word	0x08043868
 801cce0:	2002dc06 	.word	0x2002dc06
 801cce4:	080438c0 	.word	0x080438c0
 801cce8:	080438b0 	.word	0x080438b0
              pcb->ooseq = pcb->ooseq->next;
 801ccec:	6803      	ldr	r3, [r0, #0]
 801ccee:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801ccf0:	f7fe fbb0 	bl	801b454 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801ccf4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801ccf6:	2800      	cmp	r0, #0
 801ccf8:	d1f8      	bne.n	801ccec <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801ccfa:	883a      	ldrh	r2, [r7, #0]
 801ccfc:	6831      	ldr	r1, [r6, #0]
 801ccfe:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801cd00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801cd02:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801cd04:	4293      	cmp	r3, r2
 801cd06:	f0c0 80cb 	bcc.w	801cea0 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801cd0a:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801cd0c:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801cd0e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801cd10:	f7fe fa68 	bl	801b1e4 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801cd14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801cd18:	891a      	ldrh	r2, [r3, #8]
 801cd1a:	b122      	cbz	r2, 801cd26 <tcp_receive+0x636>
          recv_data = inseg.p;
 801cd1c:	4ab2      	ldr	r2, [pc, #712]	; (801cfe8 <tcp_receive+0x8f8>)
 801cd1e:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801cd20:	2300      	movs	r3, #0
 801cd22:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cd26:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cd2a:	8998      	ldrh	r0, [r3, #12]
 801cd2c:	f7fb fe04 	bl	8018938 <lwip_htons>
 801cd30:	07c2      	lsls	r2, r0, #31
 801cd32:	d504      	bpl.n	801cd3e <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801cd34:	4aad      	ldr	r2, [pc, #692]	; (801cfec <tcp_receive+0x8fc>)
 801cd36:	7813      	ldrb	r3, [r2, #0]
 801cd38:	f043 0320 	orr.w	r3, r3, #32
 801cd3c:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801cd3e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801cd40:	2d00      	cmp	r5, #0
 801cd42:	d07b      	beq.n	801ce3c <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cd44:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801cff4 <tcp_receive+0x904>
 801cd48:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801d00c <tcp_receive+0x91c>
 801cd4c:	4fa8      	ldr	r7, [pc, #672]	; (801cff0 <tcp_receive+0x900>)
 801cd4e:	e033      	b.n	801cdb8 <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801cd50:	68eb      	ldr	r3, [r5, #12]
 801cd52:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801cd56:	8998      	ldrh	r0, [r3, #12]
 801cd58:	f7fb fdee 	bl	8018938 <lwip_htons>
 801cd5c:	f010 0003 	ands.w	r0, r0, #3
 801cd60:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801cd62:	bf18      	it	ne
 801cd64:	2001      	movne	r0, #1
 801cd66:	4450      	add	r0, sl
 801cd68:	1a18      	subs	r0, r3, r0
 801cd6a:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	f7fe fa39 	bl	801b1e4 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801cd72:	6869      	ldr	r1, [r5, #4]
 801cd74:	890b      	ldrh	r3, [r1, #8]
 801cd76:	b13b      	cbz	r3, 801cd88 <tcp_receive+0x698>
            if (recv_data) {
 801cd78:	4b9b      	ldr	r3, [pc, #620]	; (801cfe8 <tcp_receive+0x8f8>)
 801cd7a:	6818      	ldr	r0, [r3, #0]
 801cd7c:	2800      	cmp	r0, #0
 801cd7e:	d05b      	beq.n	801ce38 <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801cd80:	f7fd fe2c 	bl	801a9dc <pbuf_cat>
            cseg->p = NULL;
 801cd84:	2300      	movs	r3, #0
 801cd86:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801cd88:	68eb      	ldr	r3, [r5, #12]
 801cd8a:	8998      	ldrh	r0, [r3, #12]
 801cd8c:	f7fb fdd4 	bl	8018938 <lwip_htons>
 801cd90:	07c3      	lsls	r3, r0, #31
 801cd92:	d509      	bpl.n	801cda8 <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801cd94:	4a95      	ldr	r2, [pc, #596]	; (801cfec <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801cd96:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801cd98:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801cd9a:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801cd9c:	f043 0320 	orr.w	r3, r3, #32
 801cda0:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801cda2:	d101      	bne.n	801cda8 <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801cda4:	2307      	movs	r3, #7
 801cda6:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801cda8:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801cdaa:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801cdac:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801cdae:	f7fe fb51 	bl	801b454 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801cdb2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801cdb4:	2d00      	cmp	r5, #0
 801cdb6:	d041      	beq.n	801ce3c <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801cdb8:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801cdba:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801cdbc:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801cdbe:	428b      	cmp	r3, r1
 801cdc0:	d13c      	bne.n	801ce3c <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801cdc2:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801cdc4:	8990      	ldrh	r0, [r2, #12]
 801cdc6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801cdca:	f7fb fdb5 	bl	8018938 <lwip_htons>
 801cdce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cdd0:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cdd4:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801cdd8:	bf18      	it	ne
 801cdda:	2001      	movne	r0, #1
 801cddc:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cdde:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801cde0:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cde2:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801cde6:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cde8:	8998      	ldrh	r0, [r3, #12]
 801cdea:	f7fb fda5 	bl	8018938 <lwip_htons>
 801cdee:	f010 0003 	ands.w	r0, r0, #3
 801cdf2:	bf18      	it	ne
 801cdf4:	2001      	movne	r0, #1
 801cdf6:	4458      	add	r0, fp
 801cdf8:	4582      	cmp	sl, r0
 801cdfa:	d2a9      	bcs.n	801cd50 <tcp_receive+0x660>
 801cdfc:	464b      	mov	r3, r9
 801cdfe:	f240 622b 	movw	r2, #1579	; 0x62b
 801ce02:	4641      	mov	r1, r8
 801ce04:	4638      	mov	r0, r7
 801ce06:	f007 fe71 	bl	8024aec <iprintf>
 801ce0a:	e7a1      	b.n	801cd50 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801ce0c:	4b79      	ldr	r3, [pc, #484]	; (801cff4 <tcp_receive+0x904>)
 801ce0e:	f240 5294 	movw	r2, #1428	; 0x594
 801ce12:	4979      	ldr	r1, [pc, #484]	; (801cff8 <tcp_receive+0x908>)
 801ce14:	4876      	ldr	r0, [pc, #472]	; (801cff0 <tcp_receive+0x900>)
 801ce16:	f007 fe69 	bl	8024aec <iprintf>
 801ce1a:	e687      	b.n	801cb2c <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801ce1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ce20:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801ce22:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ce24:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801ce26:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ce2a:	b292      	uxth	r2, r2
 801ce2c:	4293      	cmp	r3, r2
 801ce2e:	f63f af20 	bhi.w	801cc72 <tcp_receive+0x582>
 801ce32:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801ce36:	e54d      	b.n	801c8d4 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801ce38:	6019      	str	r1, [r3, #0]
 801ce3a:	e7a3      	b.n	801cd84 <tcp_receive+0x694>
        tcp_ack(pcb);
 801ce3c:	8b63      	ldrh	r3, [r4, #26]
 801ce3e:	07d8      	lsls	r0, r3, #31
 801ce40:	d50a      	bpl.n	801ce58 <tcp_receive+0x768>
 801ce42:	f023 0301 	bic.w	r3, r3, #1
 801ce46:	f043 0302 	orr.w	r3, r3, #2
 801ce4a:	8363      	strh	r3, [r4, #26]
 801ce4c:	e4f4      	b.n	801c838 <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801ce4e:	486b      	ldr	r0, [pc, #428]	; (801cffc <tcp_receive+0x90c>)
 801ce50:	f7fe fb1e 	bl	801b490 <tcp_seg_copy>
 801ce54:	6760      	str	r0, [r4, #116]	; 0x74
 801ce56:	e4b5      	b.n	801c7c4 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801ce58:	f043 0301 	orr.w	r3, r3, #1
 801ce5c:	8363      	strh	r3, [r4, #26]
 801ce5e:	e4eb      	b.n	801c838 <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ce60:	4866      	ldr	r0, [pc, #408]	; (801cffc <tcp_receive+0x90c>)
 801ce62:	f7fe fb15 	bl	801b490 <tcp_seg_copy>
                  if (cseg != NULL) {
 801ce66:	4607      	mov	r7, r0
 801ce68:	2800      	cmp	r0, #0
 801ce6a:	f43f acab 	beq.w	801c7c4 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801ce6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ce72:	6832      	ldr	r2, [r6, #0]
 801ce74:	6859      	ldr	r1, [r3, #4]
 801ce76:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801ce7a:	440b      	add	r3, r1
 801ce7c:	1a9b      	subs	r3, r3, r2
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	dd07      	ble.n	801ce92 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801ce82:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801ce84:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801ce88:	b291      	uxth	r1, r2
 801ce8a:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801ce8e:	f7fd fc77 	bl	801a780 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801ce92:	4629      	mov	r1, r5
 801ce94:	4638      	mov	r0, r7
                    prev->next = cseg;
 801ce96:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801ce9a:	f7ff fb35 	bl	801c508 <tcp_oos_insert_segment>
 801ce9e:	e491      	b.n	801c7c4 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801cea0:	4b54      	ldr	r3, [pc, #336]	; (801cff4 <tcp_receive+0x904>)
 801cea2:	f240 6207 	movw	r2, #1543	; 0x607
 801cea6:	4956      	ldr	r1, [pc, #344]	; (801d000 <tcp_receive+0x910>)
 801cea8:	4851      	ldr	r0, [pc, #324]	; (801cff0 <tcp_receive+0x900>)
 801ceaa:	f007 fe1f 	bl	8024aec <iprintf>
        pcb->rcv_wnd -= tcplen;
 801ceae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801ceb0:	883a      	ldrh	r2, [r7, #0]
 801ceb2:	e72a      	b.n	801cd0a <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ceb4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ceb8:	8998      	ldrh	r0, [r3, #12]
 801ceba:	f7fb fd3d 	bl	8018938 <lwip_htons>
 801cebe:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801cec0:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cec4:	d47d      	bmi.n	801cfc2 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cec6:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801cec8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801ceca:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cece:	f7fb fd33 	bl	8018938 <lwip_htons>
 801ced2:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801ced4:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ced8:	d503      	bpl.n	801cee2 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801ceda:	3901      	subs	r1, #1
 801cedc:	b289      	uxth	r1, r1
 801cede:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801cee2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801cee6:	f7fd fc4b 	bl	801a780 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801ceea:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ceee:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801cef2:	8998      	ldrh	r0, [r3, #12]
 801cef4:	f7fb fd20 	bl	8018938 <lwip_htons>
 801cef8:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cefc:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801cefe:	bf18      	it	ne
 801cf00:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cf02:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801cf04:	442b      	add	r3, r5
 801cf06:	b29b      	uxth	r3, r3
 801cf08:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cf0a:	4413      	add	r3, r2
 801cf0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801cf0e:	440a      	add	r2, r1
 801cf10:	4293      	cmp	r3, r2
 801cf12:	f43f ae4e 	beq.w	801cbb2 <tcp_receive+0x4c2>
 801cf16:	4b37      	ldr	r3, [pc, #220]	; (801cff4 <tcp_receive+0x904>)
 801cf18:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801cf1c:	4939      	ldr	r1, [pc, #228]	; (801d004 <tcp_receive+0x914>)
 801cf1e:	4834      	ldr	r0, [pc, #208]	; (801cff0 <tcp_receive+0x900>)
 801cf20:	f007 fde4 	bl	8024aec <iprintf>
 801cf24:	e645      	b.n	801cbb2 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801cf26:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801cf2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801cf2e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801cf30:	4413      	add	r3, r2
 801cf32:	b29b      	uxth	r3, r3
 801cf34:	429a      	cmp	r2, r3
 801cf36:	bf88      	it	hi
 801cf38:	460b      	movhi	r3, r1
 801cf3a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801cf3e:	4620      	mov	r0, r4
 801cf40:	f001 fe0a 	bl	801eb58 <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cf44:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cf46:	6833      	ldr	r3, [r6, #0]
 801cf48:	e518      	b.n	801c97c <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801cf4a:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	dc01      	bgt.n	801cf56 <tcp_receive+0x866>
            pcb->ooseq = next;
 801cf52:	6765      	str	r5, [r4, #116]	; 0x74
 801cf54:	e6d4      	b.n	801cd00 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801cf56:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cf5a:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801cf5e:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cf62:	8998      	ldrh	r0, [r3, #12]
 801cf64:	f7fb fce8 	bl	8018938 <lwip_htons>
 801cf68:	0781      	lsls	r1, r0, #30
 801cf6a:	d504      	bpl.n	801cf76 <tcp_receive+0x886>
                inseg.len -= 1;
 801cf6c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801cf70:	3b01      	subs	r3, #1
 801cf72:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801cf76:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801cf7a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801cf7e:	f7fd fbff 	bl	801a780 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801cf82:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cf86:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801cf8a:	8998      	ldrh	r0, [r3, #12]
 801cf8c:	f7fb fcd4 	bl	8018938 <lwip_htons>
 801cf90:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801cf94:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801cf96:	bf18      	it	ne
 801cf98:	2001      	movne	r0, #1
 801cf9a:	eb08 0200 	add.w	r2, r8, r0
 801cf9e:	b292      	uxth	r2, r2
 801cfa0:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801cfa2:	6859      	ldr	r1, [r3, #4]
 801cfa4:	6833      	ldr	r3, [r6, #0]
 801cfa6:	4413      	add	r3, r2
 801cfa8:	428b      	cmp	r3, r1
 801cfaa:	d0d2      	beq.n	801cf52 <tcp_receive+0x862>
 801cfac:	4b11      	ldr	r3, [pc, #68]	; (801cff4 <tcp_receive+0x904>)
 801cfae:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801cfb2:	4915      	ldr	r1, [pc, #84]	; (801d008 <tcp_receive+0x918>)
 801cfb4:	480e      	ldr	r0, [pc, #56]	; (801cff0 <tcp_receive+0x900>)
 801cfb6:	f007 fd99 	bl	8024aec <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801cfba:	883a      	ldrh	r2, [r7, #0]
 801cfbc:	6831      	ldr	r1, [r6, #0]
 801cfbe:	4411      	add	r1, r2
 801cfc0:	e7c7      	b.n	801cf52 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801cfc2:	899d      	ldrh	r5, [r3, #12]
 801cfc4:	4628      	mov	r0, r5
 801cfc6:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801cfca:	f7fb fcb5 	bl	8018938 <lwip_htons>
 801cfce:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801cfd2:	f7fb fcb1 	bl	8018938 <lwip_htons>
 801cfd6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cfda:	4328      	orrs	r0, r5
 801cfdc:	8198      	strh	r0, [r3, #12]
 801cfde:	b280      	uxth	r0, r0
 801cfe0:	e772      	b.n	801cec8 <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801cfe2:	6760      	str	r0, [r4, #116]	; 0x74
 801cfe4:	f7ff bbeb 	b.w	801c7be <tcp_receive+0xce>
 801cfe8:	2002dbe4 	.word	0x2002dbe4
 801cfec:	2002dbe8 	.word	0x2002dbe8
 801cff0:	0802b818 	.word	0x0802b818
 801cff4:	0804379c 	.word	0x0804379c
 801cff8:	080438a0 	.word	0x080438a0
 801cffc:	2002dbd0 	.word	0x2002dbd0
 801d000:	08043944 	.word	0x08043944
 801d004:	080438d0 	.word	0x080438d0
 801d008:	08043908 	.word	0x08043908
 801d00c:	08043964 	.word	0x08043964
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d010:	68db      	ldr	r3, [r3, #12]
 801d012:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801d016:	4640      	mov	r0, r8
 801d018:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801d01c:	f7fb fc8c 	bl	8018938 <lwip_htons>
 801d020:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801d024:	f7fb fc88 	bl	8018938 <lwip_htons>
 801d028:	682b      	ldr	r3, [r5, #0]
 801d02a:	ea48 0800 	orr.w	r8, r8, r0
 801d02e:	68da      	ldr	r2, [r3, #12]
 801d030:	f8a2 800c 	strh.w	r8, [r2, #12]
 801d034:	e53b      	b.n	801caae <tcp_receive+0x3be>
 801d036:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801d03c <tcp_receive+0x94c>
 801d03a:	e5a8      	b.n	801cb8e <tcp_receive+0x49e>
 801d03c:	2002dbd0 	.word	0x2002dbd0

0801d040 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d040:	494a      	ldr	r1, [pc, #296]	; (801d16c <tcp_parseopt.part.0+0x12c>)
 801d042:	4b4b      	ldr	r3, [pc, #300]	; (801d170 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d044:	4a4b      	ldr	r2, [pc, #300]	; (801d174 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801d046:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d04a:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d04e:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d050:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d052:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d056:	4b48      	ldr	r3, [pc, #288]	; (801d178 <tcp_parseopt.part.0+0x138>)
 801d058:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801d17c <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d05c:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801d05e:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d062:	681d      	ldr	r5, [r3, #0]
 801d064:	f8b9 2000 	ldrh.w	r2, [r9]
 801d068:	f102 0c14 	add.w	ip, r2, #20
 801d06c:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d06e:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801d070:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d074:	d96d      	bls.n	801d152 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801d076:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d078:	b1ac      	cbz	r4, 801d0a6 <tcp_parseopt.part.0+0x66>
 801d07a:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801d07c:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d080:	d811      	bhi.n	801d0a6 <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801d082:	b2c9      	uxtb	r1, r1
 801d084:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801d086:	2901      	cmp	r1, #1
 801d088:	d011      	beq.n	801d0ae <tcp_parseopt.part.0+0x6e>
 801d08a:	2902      	cmp	r1, #2
 801d08c:	d017      	beq.n	801d0be <tcp_parseopt.part.0+0x7e>
 801d08e:	b191      	cbz	r1, 801d0b6 <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d090:	b10c      	cbz	r4, 801d096 <tcp_parseopt.part.0+0x56>
 801d092:	4573      	cmp	r3, lr
 801d094:	d242      	bcs.n	801d11c <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801d096:	442b      	add	r3, r5
 801d098:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801d09a:	2b01      	cmp	r3, #1
 801d09c:	d961      	bls.n	801d162 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d09e:	441a      	add	r2, r3
 801d0a0:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d0a2:	2101      	movs	r1, #1
 801d0a4:	e7e0      	b.n	801d068 <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801d0a6:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801d0aa:	2901      	cmp	r1, #1
 801d0ac:	d1ed      	bne.n	801d08a <tcp_parseopt.part.0+0x4a>
 801d0ae:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801d0b2:	461a      	mov	r2, r3
 801d0b4:	e7db      	b.n	801d06e <tcp_parseopt.part.0+0x2e>
 801d0b6:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801d0ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801d0be:	1c91      	adds	r1, r2, #2
 801d0c0:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d0c2:	b10c      	cbz	r4, 801d0c8 <tcp_parseopt.part.0+0x88>
 801d0c4:	4573      	cmp	r3, lr
 801d0c6:	d224      	bcs.n	801d112 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801d0c8:	442b      	add	r3, r5
 801d0ca:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d0cc:	2b04      	cmp	r3, #4
 801d0ce:	d145      	bne.n	801d15c <tcp_parseopt.part.0+0x11c>
 801d0d0:	1c4b      	adds	r3, r1, #1
 801d0d2:	42b3      	cmp	r3, r6
 801d0d4:	da42      	bge.n	801d15c <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801d0d6:	1cd3      	adds	r3, r2, #3
 801d0d8:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d0da:	b384      	cbz	r4, 801d13e <tcp_parseopt.part.0+0xfe>
 801d0dc:	458e      	cmp	lr, r1
 801d0de:	d822      	bhi.n	801d126 <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d0e0:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801d0e4:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d0e6:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801d0e8:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801d0ea:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d0ec:	f814 c001 	ldrb.w	ip, [r4, r1]
 801d0f0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d0f4:	d820      	bhi.n	801d138 <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d0f6:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801d0fa:	b2c9      	uxtb	r1, r1
 801d0fc:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801d0fe:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d102:	1e59      	subs	r1, r3, #1
 801d104:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801d108:	bf28      	it	cs
 801d10a:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801d10e:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801d110:	e7c7      	b.n	801d0a2 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d112:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801d116:	b2db      	uxtb	r3, r3
 801d118:	5ce3      	ldrb	r3, [r4, r3]
 801d11a:	e7d7      	b.n	801d0cc <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d11c:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801d120:	b2db      	uxtb	r3, r3
 801d122:	5ce3      	ldrb	r3, [r4, r3]
 801d124:	e7b9      	b.n	801d09a <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801d126:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801d128:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d12a:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d12c:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801d130:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d132:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d136:	d9de      	bls.n	801d0f6 <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801d138:	442b      	add	r3, r5
 801d13a:	7d1b      	ldrb	r3, [r3, #20]
 801d13c:	e7df      	b.n	801d0fe <tcp_parseopt.part.0+0xbe>
 801d13e:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801d140:	3204      	adds	r2, #4
    return opts[optidx];
 801d142:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d144:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801d148:	b292      	uxth	r2, r2
    return opts[optidx];
 801d14a:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d14c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801d150:	e7d5      	b.n	801d0fe <tcp_parseopt.part.0+0xbe>
 801d152:	2900      	cmp	r1, #0
 801d154:	d0b1      	beq.n	801d0ba <tcp_parseopt.part.0+0x7a>
 801d156:	f8a9 2000 	strh.w	r2, [r9]
 801d15a:	e7ae      	b.n	801d0ba <tcp_parseopt.part.0+0x7a>
 801d15c:	f8a9 1000 	strh.w	r1, [r9]
 801d160:	e7ab      	b.n	801d0ba <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801d162:	3202      	adds	r2, #2
 801d164:	f8a9 2000 	strh.w	r2, [r9]
 801d168:	e7a7      	b.n	801d0ba <tcp_parseopt.part.0+0x7a>
 801d16a:	bf00      	nop
 801d16c:	2002dbfc 	.word	0x2002dbfc
 801d170:	2002dc00 	.word	0x2002dc00
 801d174:	2002dc04 	.word	0x2002dc04
 801d178:	2002dbf8 	.word	0x2002dbf8
 801d17c:	2002dbf4 	.word	0x2002dbf4

0801d180 <tcp_input>:
{
 801d180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d184:	4604      	mov	r4, r0
{
 801d186:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d188:	2800      	cmp	r0, #0
 801d18a:	f000 80d2 	beq.w	801d332 <tcp_input+0x1b2>
  if (p->len < TCP_HLEN) {
 801d18e:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 801d190:	4e6b      	ldr	r6, [pc, #428]	; (801d340 <tcp_input+0x1c0>)
 801d192:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 801d194:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801d196:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 801d198:	d805      	bhi.n	801d1a6 <tcp_input+0x26>
  pbuf_free(p);
 801d19a:	4620      	mov	r0, r4
}
 801d19c:	b009      	add	sp, #36	; 0x24
 801d19e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801d1a2:	f7fd bbe9 	b.w	801a978 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d1a6:	4f67      	ldr	r7, [pc, #412]	; (801d344 <tcp_input+0x1c4>)
 801d1a8:	6839      	ldr	r1, [r7, #0]
 801d1aa:	6978      	ldr	r0, [r7, #20]
 801d1ac:	f005 f9ae 	bl	802250c <ip4_addr_isbroadcast_u32>
 801d1b0:	2800      	cmp	r0, #0
 801d1b2:	d1f2      	bne.n	801d19a <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801d1b4:	697b      	ldr	r3, [r7, #20]
 801d1b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d1ba:	2be0      	cmp	r3, #224	; 0xe0
 801d1bc:	d0ed      	beq.n	801d19a <tcp_input+0x1a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d1be:	f107 0314 	add.w	r3, r7, #20
 801d1c2:	f107 0910 	add.w	r9, r7, #16
 801d1c6:	2106      	movs	r1, #6
 801d1c8:	4620      	mov	r0, r4
 801d1ca:	9300      	str	r3, [sp, #0]
 801d1cc:	464b      	mov	r3, r9
 801d1ce:	8922      	ldrh	r2, [r4, #8]
 801d1d0:	f7fc f946 	bl	8019460 <ip_chksum_pseudo>
    if (chksum != 0) {
 801d1d4:	4605      	mov	r5, r0
 801d1d6:	2800      	cmp	r0, #0
 801d1d8:	d1df      	bne.n	801d19a <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801d1da:	6833      	ldr	r3, [r6, #0]
 801d1dc:	8998      	ldrh	r0, [r3, #12]
 801d1de:	f7fb fbab 	bl	8018938 <lwip_htons>
 801d1e2:	0a80      	lsrs	r0, r0, #10
 801d1e4:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801d1e8:	2913      	cmp	r1, #19
 801d1ea:	d9d6      	bls.n	801d19a <tcp_input+0x1a>
 801d1ec:	8923      	ldrh	r3, [r4, #8]
 801d1ee:	b28a      	uxth	r2, r1
 801d1f0:	428b      	cmp	r3, r1
 801d1f2:	d3d2      	bcc.n	801d19a <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d1f4:	f1a2 0314 	sub.w	r3, r2, #20
 801d1f8:	4853      	ldr	r0, [pc, #332]	; (801d348 <tcp_input+0x1c8>)
  tcphdr_opt2 = NULL;
 801d1fa:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801d374 <tcp_input+0x1f4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d1fe:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801d200:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d204:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801d206:	8960      	ldrh	r0, [r4, #10]
 801d208:	4290      	cmp	r0, r2
 801d20a:	f080 819f 	bcs.w	801d54c <tcp_input+0x3cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801d20e:	6823      	ldr	r3, [r4, #0]
 801d210:	2b00      	cmp	r3, #0
 801d212:	f000 837b 	beq.w	801d90c <tcp_input+0x78c>
    pbuf_remove_header(p, TCP_HLEN);
 801d216:	2114      	movs	r1, #20
 801d218:	4620      	mov	r0, r4
 801d21a:	f7fd fb3d 	bl	801a898 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d21e:	4b4a      	ldr	r3, [pc, #296]	; (801d348 <tcp_input+0x1c8>)
    tcphdr_opt1len = p->len;
 801d220:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801d222:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d224:	f8b3 a000 	ldrh.w	sl, [r3]
    tcphdr_opt1len = p->len;
 801d228:	4b48      	ldr	r3, [pc, #288]	; (801d34c <tcp_input+0x1cc>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801d22a:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d22c:	ebaa 0b05 	sub.w	fp, sl, r5
    tcphdr_opt1len = p->len;
 801d230:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801d232:	f7fd fb31 	bl	801a898 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801d236:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d238:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801d23c:	8943      	ldrh	r3, [r0, #10]
 801d23e:	455b      	cmp	r3, fp
 801d240:	d3ab      	bcc.n	801d19a <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801d242:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801d244:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801d246:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 801d24a:	f7fd fb25 	bl	801a898 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801d24e:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d250:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801d252:	442b      	add	r3, r5
 801d254:	eba3 030a 	sub.w	r3, r3, sl
 801d258:	b29b      	uxth	r3, r3
 801d25a:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d25c:	2a00      	cmp	r2, #0
 801d25e:	f040 835c 	bne.w	801d91a <tcp_input+0x79a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801d262:	6822      	ldr	r2, [r4, #0]
 801d264:	8912      	ldrh	r2, [r2, #8]
 801d266:	429a      	cmp	r2, r3
 801d268:	d005      	beq.n	801d276 <tcp_input+0xf6>
 801d26a:	4b39      	ldr	r3, [pc, #228]	; (801d350 <tcp_input+0x1d0>)
 801d26c:	22e0      	movs	r2, #224	; 0xe0
 801d26e:	4939      	ldr	r1, [pc, #228]	; (801d354 <tcp_input+0x1d4>)
 801d270:	4839      	ldr	r0, [pc, #228]	; (801d358 <tcp_input+0x1d8>)
 801d272:	f007 fc3b 	bl	8024aec <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801d276:	6835      	ldr	r5, [r6, #0]
 801d278:	8828      	ldrh	r0, [r5, #0]
 801d27a:	f7fb fb5d 	bl	8018938 <lwip_htons>
 801d27e:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801d280:	6835      	ldr	r5, [r6, #0]
 801d282:	8868      	ldrh	r0, [r5, #2]
 801d284:	f7fb fb58 	bl	8018938 <lwip_htons>
 801d288:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801d28a:	6835      	ldr	r5, [r6, #0]
 801d28c:	6868      	ldr	r0, [r5, #4]
 801d28e:	f7fb fb57 	bl	8018940 <lwip_htonl>
 801d292:	4b32      	ldr	r3, [pc, #200]	; (801d35c <tcp_input+0x1dc>)
 801d294:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d296:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801d298:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d29a:	68a8      	ldr	r0, [r5, #8]
 801d29c:	f7fb fb50 	bl	8018940 <lwip_htonl>
 801d2a0:	4b2f      	ldr	r3, [pc, #188]	; (801d360 <tcp_input+0x1e0>)
 801d2a2:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d2a4:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d2a6:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d2a8:	89e8      	ldrh	r0, [r5, #14]
 801d2aa:	f7fb fb45 	bl	8018938 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801d2ae:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d2b0:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 801d2b2:	8998      	ldrh	r0, [r3, #12]
 801d2b4:	f7fb fb40 	bl	8018938 <lwip_htons>
 801d2b8:	492a      	ldr	r1, [pc, #168]	; (801d364 <tcp_input+0x1e4>)
 801d2ba:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801d2be:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801d2c0:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801d2c2:	0782      	lsls	r2, r0, #30
 801d2c4:	f040 8139 	bne.w	801d53a <tcp_input+0x3ba>
  tcplen = p->tot_len;
 801d2c8:	4a27      	ldr	r2, [pc, #156]	; (801d368 <tcp_input+0x1e8>)
 801d2ca:	9205      	str	r2, [sp, #20]
 801d2cc:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d2ce:	4b27      	ldr	r3, [pc, #156]	; (801d36c <tcp_input+0x1ec>)
 801d2d0:	681d      	ldr	r5, [r3, #0]
 801d2d2:	2d00      	cmp	r5, #0
 801d2d4:	f000 80e0 	beq.w	801d498 <tcp_input+0x318>
  prev = NULL;
 801d2d8:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801d2dc:	4b1c      	ldr	r3, [pc, #112]	; (801d350 <tcp_input+0x1d0>)
 801d2de:	f8df b098 	ldr.w	fp, [pc, #152]	; 801d378 <tcp_input+0x1f8>
 801d2e2:	f8df a074 	ldr.w	sl, [pc, #116]	; 801d358 <tcp_input+0x1d8>
 801d2e6:	e019      	b.n	801d31c <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d2e8:	2a0a      	cmp	r2, #10
 801d2ea:	f000 80cd 	beq.w	801d488 <tcp_input+0x308>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d2ee:	2a01      	cmp	r2, #1
 801d2f0:	f000 80c3 	beq.w	801d47a <tcp_input+0x2fa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d2f4:	7a29      	ldrb	r1, [r5, #8]
 801d2f6:	b131      	cbz	r1, 801d306 <tcp_input+0x186>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d2f8:	687a      	ldr	r2, [r7, #4]
 801d2fa:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801d2fe:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d300:	b2d2      	uxtb	r2, r2
 801d302:	4291      	cmp	r1, r2
 801d304:	d104      	bne.n	801d310 <tcp_input+0x190>
    if (pcb->remote_port == tcphdr->src &&
 801d306:	6832      	ldr	r2, [r6, #0]
 801d308:	8b28      	ldrh	r0, [r5, #24]
 801d30a:	8811      	ldrh	r1, [r2, #0]
 801d30c:	4288      	cmp	r0, r1
 801d30e:	d035      	beq.n	801d37c <tcp_input+0x1fc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d310:	68ea      	ldr	r2, [r5, #12]
 801d312:	46a8      	mov	r8, r5
 801d314:	2a00      	cmp	r2, #0
 801d316:	f000 80bf 	beq.w	801d498 <tcp_input+0x318>
 801d31a:	4615      	mov	r5, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801d31c:	7d2a      	ldrb	r2, [r5, #20]
 801d31e:	2a00      	cmp	r2, #0
 801d320:	d1e2      	bne.n	801d2e8 <tcp_input+0x168>
 801d322:	22fb      	movs	r2, #251	; 0xfb
 801d324:	4659      	mov	r1, fp
 801d326:	4650      	mov	r0, sl
 801d328:	f007 fbe0 	bl	8024aec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d32c:	7d2a      	ldrb	r2, [r5, #20]
 801d32e:	4b08      	ldr	r3, [pc, #32]	; (801d350 <tcp_input+0x1d0>)
 801d330:	e7da      	b.n	801d2e8 <tcp_input+0x168>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d332:	4b07      	ldr	r3, [pc, #28]	; (801d350 <tcp_input+0x1d0>)
 801d334:	2283      	movs	r2, #131	; 0x83
 801d336:	490e      	ldr	r1, [pc, #56]	; (801d370 <tcp_input+0x1f0>)
 801d338:	4807      	ldr	r0, [pc, #28]	; (801d358 <tcp_input+0x1d8>)
 801d33a:	f007 fbd7 	bl	8024aec <iprintf>
 801d33e:	e726      	b.n	801d18e <tcp_input+0xe>
 801d340:	2002dbf8 	.word	0x2002dbf8
 801d344:	2001ec2c 	.word	0x2001ec2c
 801d348:	2002dc04 	.word	0x2002dc04
 801d34c:	2002dbfc 	.word	0x2002dbfc
 801d350:	0804379c 	.word	0x0804379c
 801d354:	080439c0 	.word	0x080439c0
 801d358:	0802b818 	.word	0x0802b818
 801d35c:	2002dbec 	.word	0x2002dbec
 801d360:	2002dbc8 	.word	0x2002dbc8
 801d364:	2002dbcc 	.word	0x2002dbcc
 801d368:	2002dc06 	.word	0x2002dc06
 801d36c:	2002dbac 	.word	0x2002dbac
 801d370:	0804398c 	.word	0x0804398c
 801d374:	2002dc00 	.word	0x2002dc00
 801d378:	080439e0 	.word	0x080439e0
    if (pcb->remote_port == tcphdr->src &&
 801d37c:	8852      	ldrh	r2, [r2, #2]
 801d37e:	8ae9      	ldrh	r1, [r5, #22]
 801d380:	4291      	cmp	r1, r2
 801d382:	d1c5      	bne.n	801d310 <tcp_input+0x190>
        pcb->local_port == tcphdr->dest &&
 801d384:	6869      	ldr	r1, [r5, #4]
 801d386:	693a      	ldr	r2, [r7, #16]
 801d388:	4291      	cmp	r1, r2
 801d38a:	d1c1      	bne.n	801d310 <tcp_input+0x190>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d38c:	6829      	ldr	r1, [r5, #0]
 801d38e:	697a      	ldr	r2, [r7, #20]
 801d390:	4291      	cmp	r1, r2
 801d392:	d1bd      	bne.n	801d310 <tcp_input+0x190>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801d394:	68eb      	ldr	r3, [r5, #12]
 801d396:	42ab      	cmp	r3, r5
 801d398:	f000 846e 	beq.w	801dc78 <tcp_input+0xaf8>
      if (prev != NULL) {
 801d39c:	f1b8 0f00 	cmp.w	r8, #0
 801d3a0:	d009      	beq.n	801d3b6 <tcp_input+0x236>
        pcb->next = tcp_active_pcbs;
 801d3a2:	4a75      	ldr	r2, [pc, #468]	; (801d578 <tcp_input+0x3f8>)
        prev->next = pcb->next;
 801d3a4:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 801d3a8:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801d3aa:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801d3ac:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801d3ae:	68eb      	ldr	r3, [r5, #12]
 801d3b0:	42ab      	cmp	r3, r5
 801d3b2:	f000 8447 	beq.w	801dc44 <tcp_input+0xac4>
    inseg.next = NULL;
 801d3b6:	2300      	movs	r3, #0
 801d3b8:	4f70      	ldr	r7, [pc, #448]	; (801d57c <tcp_input+0x3fc>)
    recv_data = NULL;
 801d3ba:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 801d5a4 <tcp_input+0x424>
    recv_flags = 0;
 801d3be:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801d5a8 <tcp_input+0x428>
    recv_acked = 0;
 801d3c2:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801d5ac <tcp_input+0x42c>
    inseg.len = p->tot_len;
 801d3c6:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801d3c8:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 801d3ca:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 801d3ce:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801d3d2:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801d3d6:	4b6a      	ldr	r3, [pc, #424]	; (801d580 <tcp_input+0x400>)
    inseg.len = p->tot_len;
 801d3d8:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 801d3da:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801d3dc:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 801d3de:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 801d3e0:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 801d3e2:	071a      	lsls	r2, r3, #28
 801d3e4:	d503      	bpl.n	801d3ee <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 801d3e6:	7b62      	ldrb	r2, [r4, #13]
 801d3e8:	f042 0201 	orr.w	r2, r2, #1
 801d3ec:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801d3ee:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801d3f0:	b172      	cbz	r2, 801d410 <tcp_input+0x290>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801d3f2:	4628      	mov	r0, r5
 801d3f4:	f7fe ff78 	bl	801c2e8 <tcp_process_refused_data>
 801d3f8:	300d      	adds	r0, #13
 801d3fa:	f000 8296 	beq.w	801d92a <tcp_input+0x7aa>
 801d3fe:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801d400:	b123      	cbz	r3, 801d40c <tcp_input+0x28c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801d402:	9b05      	ldr	r3, [sp, #20]
 801d404:	881b      	ldrh	r3, [r3, #0]
 801d406:	2b00      	cmp	r3, #0
 801d408:	f040 828f 	bne.w	801d92a <tcp_input+0x7aa>
  if (flags & TCP_RST) {
 801d40c:	4b5c      	ldr	r3, [pc, #368]	; (801d580 <tcp_input+0x400>)
 801d40e:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801d410:	4c5c      	ldr	r4, [pc, #368]	; (801d584 <tcp_input+0x404>)
  if (flags & TCP_RST) {
 801d412:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 801d414:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 801d416:	f140 8163 	bpl.w	801d6e0 <tcp_input+0x560>
    if (pcb->state == SYN_SENT) {
 801d41a:	7d29      	ldrb	r1, [r5, #20]
 801d41c:	2902      	cmp	r1, #2
 801d41e:	f000 8350 	beq.w	801dac2 <tcp_input+0x942>
      if (seqno == pcb->rcv_nxt) {
 801d422:	4b59      	ldr	r3, [pc, #356]	; (801d588 <tcp_input+0x408>)
 801d424:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d426:	681b      	ldr	r3, [r3, #0]
 801d428:	429a      	cmp	r2, r3
 801d42a:	f000 844a 	beq.w	801dcc2 <tcp_input+0xb42>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d42e:	1a9b      	subs	r3, r3, r2
 801d430:	d404      	bmi.n	801d43c <tcp_input+0x2bc>
 801d432:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 801d434:	1a9b      	subs	r3, r3, r2
 801d436:	2b00      	cmp	r3, #0
 801d438:	f340 833e 	ble.w	801dab8 <tcp_input+0x938>
      if (recv_flags & TF_RESET) {
 801d43c:	f89a 3000 	ldrb.w	r3, [sl]
 801d440:	0718      	lsls	r0, r3, #28
 801d442:	f140 8278 	bpl.w	801d936 <tcp_input+0x7b6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801d446:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801d44a:	b11b      	cbz	r3, 801d454 <tcp_input+0x2d4>
 801d44c:	f06f 010d 	mvn.w	r1, #13
 801d450:	6928      	ldr	r0, [r5, #16]
 801d452:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801d454:	4848      	ldr	r0, [pc, #288]	; (801d578 <tcp_input+0x3f8>)
 801d456:	4629      	mov	r1, r5
 801d458:	f7fe fbc4 	bl	801bbe4 <tcp_pcb_remove>
        tcp_free(pcb);
 801d45c:	4628      	mov	r0, r5
 801d45e:	f7fd fdbd 	bl	801afdc <tcp_free>
    tcp_input_pcb = NULL;
 801d462:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801d464:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 801d466:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801d468:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 801d46c:	b110      	cbz	r0, 801d474 <tcp_input+0x2f4>
      pbuf_free(inseg.p);
 801d46e:	f7fd fa83 	bl	801a978 <pbuf_free>
      inseg.p = NULL;
 801d472:	607d      	str	r5, [r7, #4]
}
 801d474:	b009      	add	sp, #36	; 0x24
 801d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d47a:	22fd      	movs	r2, #253	; 0xfd
 801d47c:	4943      	ldr	r1, [pc, #268]	; (801d58c <tcp_input+0x40c>)
 801d47e:	4650      	mov	r0, sl
 801d480:	f007 fb34 	bl	8024aec <iprintf>
 801d484:	4b42      	ldr	r3, [pc, #264]	; (801d590 <tcp_input+0x410>)
 801d486:	e735      	b.n	801d2f4 <tcp_input+0x174>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d488:	22fc      	movs	r2, #252	; 0xfc
 801d48a:	4942      	ldr	r1, [pc, #264]	; (801d594 <tcp_input+0x414>)
 801d48c:	4650      	mov	r0, sl
 801d48e:	f007 fb2d 	bl	8024aec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d492:	7d2a      	ldrb	r2, [r5, #20]
 801d494:	4b3e      	ldr	r3, [pc, #248]	; (801d590 <tcp_input+0x410>)
 801d496:	e72a      	b.n	801d2ee <tcp_input+0x16e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d498:	4b3f      	ldr	r3, [pc, #252]	; (801d598 <tcp_input+0x418>)
 801d49a:	681d      	ldr	r5, [r3, #0]
 801d49c:	2d00      	cmp	r5, #0
 801d49e:	d05b      	beq.n	801d558 <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d4a0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801d590 <tcp_input+0x410>
 801d4a4:	f8df b108 	ldr.w	fp, [pc, #264]	; 801d5b0 <tcp_input+0x430>
 801d4a8:	f8df a108 	ldr.w	sl, [pc, #264]	; 801d5b4 <tcp_input+0x434>
 801d4ac:	e002      	b.n	801d4b4 <tcp_input+0x334>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d4ae:	68ed      	ldr	r5, [r5, #12]
 801d4b0:	2d00      	cmp	r5, #0
 801d4b2:	d051      	beq.n	801d558 <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d4b4:	7d2b      	ldrb	r3, [r5, #20]
 801d4b6:	2b0a      	cmp	r3, #10
 801d4b8:	4643      	mov	r3, r8
 801d4ba:	d005      	beq.n	801d4c8 <tcp_input+0x348>
 801d4bc:	f240 121f 	movw	r2, #287	; 0x11f
 801d4c0:	4659      	mov	r1, fp
 801d4c2:	4650      	mov	r0, sl
 801d4c4:	f007 fb12 	bl	8024aec <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d4c8:	7a2a      	ldrb	r2, [r5, #8]
 801d4ca:	b132      	cbz	r2, 801d4da <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801d4d2:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d4d4:	b2db      	uxtb	r3, r3
 801d4d6:	429a      	cmp	r2, r3
 801d4d8:	d1e9      	bne.n	801d4ae <tcp_input+0x32e>
      if (pcb->remote_port == tcphdr->src &&
 801d4da:	6832      	ldr	r2, [r6, #0]
 801d4dc:	8b2b      	ldrh	r3, [r5, #24]
 801d4de:	8811      	ldrh	r1, [r2, #0]
 801d4e0:	428b      	cmp	r3, r1
 801d4e2:	d1e4      	bne.n	801d4ae <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801d4e4:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801d4e6:	8ae8      	ldrh	r0, [r5, #22]
 801d4e8:	4290      	cmp	r0, r2
 801d4ea:	d1e0      	bne.n	801d4ae <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801d4ec:	6869      	ldr	r1, [r5, #4]
 801d4ee:	693a      	ldr	r2, [r7, #16]
 801d4f0:	4291      	cmp	r1, r2
 801d4f2:	d1dc      	bne.n	801d4ae <tcp_input+0x32e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d4f4:	6829      	ldr	r1, [r5, #0]
 801d4f6:	697a      	ldr	r2, [r7, #20]
 801d4f8:	4291      	cmp	r1, r2
 801d4fa:	d1d8      	bne.n	801d4ae <tcp_input+0x32e>
  if (flags & TCP_RST) {
 801d4fc:	4a20      	ldr	r2, [pc, #128]	; (801d580 <tcp_input+0x400>)
 801d4fe:	7812      	ldrb	r2, [r2, #0]
 801d500:	0757      	lsls	r7, r2, #29
 801d502:	f53f ae4a 	bmi.w	801d19a <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 801d506:	0796      	lsls	r6, r2, #30
 801d508:	f140 8395 	bpl.w	801dc36 <tcp_input+0xab6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801d50c:	4a1e      	ldr	r2, [pc, #120]	; (801d588 <tcp_input+0x408>)
 801d50e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801d510:	6812      	ldr	r2, [r2, #0]
 801d512:	1a51      	subs	r1, r2, r1
 801d514:	d404      	bmi.n	801d520 <tcp_input+0x3a0>
 801d516:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 801d518:	1b89      	subs	r1, r1, r6
 801d51a:	2900      	cmp	r1, #0
 801d51c:	f340 83ba 	ble.w	801dc94 <tcp_input+0xb14>
  if ((tcplen > 0)) {
 801d520:	9b05      	ldr	r3, [sp, #20]
 801d522:	881b      	ldrh	r3, [r3, #0]
 801d524:	2b00      	cmp	r3, #0
 801d526:	f43f ae38 	beq.w	801d19a <tcp_input+0x1a>
    tcp_ack_now(pcb);
 801d52a:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801d52c:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801d52e:	f043 0302 	orr.w	r3, r3, #2
 801d532:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 801d534:	f001 fbc4 	bl	801ecc0 <tcp_output>
        pbuf_free(p);
 801d538:	e62f      	b.n	801d19a <tcp_input+0x1a>
    tcplen++;
 801d53a:	1c5a      	adds	r2, r3, #1
 801d53c:	4917      	ldr	r1, [pc, #92]	; (801d59c <tcp_input+0x41c>)
 801d53e:	b292      	uxth	r2, r2
 801d540:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801d542:	4293      	cmp	r3, r2
    tcplen++;
 801d544:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801d546:	f67f aec2 	bls.w	801d2ce <tcp_input+0x14e>
 801d54a:	e626      	b.n	801d19a <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 801d54c:	4a14      	ldr	r2, [pc, #80]	; (801d5a0 <tcp_input+0x420>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801d54e:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801d550:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801d552:	f7fd f9a1 	bl	801a898 <pbuf_remove_header>
 801d556:	e68e      	b.n	801d276 <tcp_input+0xf6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d558:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801d5b8 <tcp_input+0x438>
 801d55c:	f8da 8000 	ldr.w	r8, [sl]
 801d560:	f1b8 0f00 	cmp.w	r8, #0
 801d564:	f000 8237 	beq.w	801d9d6 <tcp_input+0x856>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d568:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801d56c:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 801d56e:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 801d570:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801d572:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801d576:	e027      	b.n	801d5c8 <tcp_input+0x448>
 801d578:	2002dbac 	.word	0x2002dbac
 801d57c:	2002dbd0 	.word	0x2002dbd0
 801d580:	2002dbcc 	.word	0x2002dbcc
 801d584:	2002dbf0 	.word	0x2002dbf0
 801d588:	2002dbec 	.word	0x2002dbec
 801d58c:	08043a34 	.word	0x08043a34
 801d590:	0804379c 	.word	0x0804379c
 801d594:	08043a08 	.word	0x08043a08
 801d598:	2002dbc4 	.word	0x2002dbc4
 801d59c:	2002dc06 	.word	0x2002dc06
 801d5a0:	2002dbfc 	.word	0x2002dbfc
 801d5a4:	2002dbe4 	.word	0x2002dbe4
 801d5a8:	2002dbe8 	.word	0x2002dbe8
 801d5ac:	2002dbe0 	.word	0x2002dbe0
 801d5b0:	08043ab4 	.word	0x08043ab4
 801d5b4:	0802b818 	.word	0x0802b818
 801d5b8:	2002dbb8 	.word	0x2002dbb8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d5bc:	68eb      	ldr	r3, [r5, #12]
 801d5be:	4629      	mov	r1, r5
 801d5c0:	461d      	mov	r5, r3
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	f000 8208 	beq.w	801d9d8 <tcp_input+0x858>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801d5c8:	7a2a      	ldrb	r2, [r5, #8]
 801d5ca:	b12a      	cbz	r2, 801d5d8 <tcp_input+0x458>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d5cc:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801d5d0:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801d5d2:	b2db      	uxtb	r3, r3
 801d5d4:	429a      	cmp	r2, r3
 801d5d6:	d1f1      	bne.n	801d5bc <tcp_input+0x43c>
      if (lpcb->local_port == tcphdr->dest) {
 801d5d8:	8aea      	ldrh	r2, [r5, #22]
 801d5da:	8843      	ldrh	r3, [r0, #2]
 801d5dc:	429a      	cmp	r2, r3
 801d5de:	d1ed      	bne.n	801d5bc <tcp_input+0x43c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801d5e0:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801d5e2:	b10a      	cbz	r2, 801d5e8 <tcp_input+0x468>
 801d5e4:	4572      	cmp	r2, lr
 801d5e6:	d1e9      	bne.n	801d5bc <tcp_input+0x43c>
      if (prev != NULL) {
 801d5e8:	b129      	cbz	r1, 801d5f6 <tcp_input+0x476>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801d5ea:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801d5ec:	f8ca 5000 	str.w	r5, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801d5f0:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801d5f2:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801d5f6:	4a9d      	ldr	r2, [pc, #628]	; (801d86c <tcp_input+0x6ec>)
 801d5f8:	7812      	ldrb	r2, [r2, #0]
 801d5fa:	0751      	lsls	r1, r2, #29
 801d5fc:	f53f adcd 	bmi.w	801d19a <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 801d600:	f012 0810 	ands.w	r8, r2, #16
 801d604:	f040 8273 	bne.w	801daee <tcp_input+0x96e>
  } else if (flags & TCP_SYN) {
 801d608:	0791      	lsls	r1, r2, #30
 801d60a:	f57f adc6 	bpl.w	801d19a <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 801d60e:	7d68      	ldrb	r0, [r5, #21]
 801d610:	f7fe fc90 	bl	801bf34 <tcp_alloc>
    if (npcb == NULL) {
 801d614:	4681      	mov	r9, r0
 801d616:	2800      	cmp	r0, #0
 801d618:	f000 82ce 	beq.w	801dbb8 <tcp_input+0xa38>
    npcb->rcv_nxt = seqno + 1;
 801d61c:	4b94      	ldr	r3, [pc, #592]	; (801d870 <tcp_input+0x6f0>)
    npcb->remote_port = tcphdr->src;
 801d61e:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 801d620:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801d622:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801d624:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801d626:	7849      	ldrb	r1, [r1, #1]
 801d628:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801d62c:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 801d62e:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801d630:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801d632:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 801d634:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801d636:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801d638:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801d63a:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801d63c:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801d63e:	2303      	movs	r3, #3
 801d640:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801d642:	f7fe fee7 	bl	801c414 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801d646:	4b8a      	ldr	r3, [pc, #552]	; (801d870 <tcp_input+0x6f0>)
    npcb->snd_nxt = iss;
 801d648:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801d64c:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 801d64e:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801d652:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 801d654:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801d658:	4a86      	ldr	r2, [pc, #536]	; (801d874 <tcp_input+0x6f4>)
    npcb->snd_wl2 = iss;
 801d65a:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801d65e:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 801d660:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801d664:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801d668:	7a6b      	ldrb	r3, [r5, #9]
 801d66a:	f003 030c 	and.w	r3, r3, #12
 801d66e:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801d672:	7a2b      	ldrb	r3, [r5, #8]
 801d674:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801d678:	6813      	ldr	r3, [r2, #0]
 801d67a:	f8c2 9000 	str.w	r9, [r2]
 801d67e:	f8c9 300c 	str.w	r3, [r9, #12]
 801d682:	f001 fe49 	bl	801f318 <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801d686:	4b7c      	ldr	r3, [pc, #496]	; (801d878 <tcp_input+0x6f8>)
    TCP_REG_ACTIVE(npcb);
 801d688:	4a7c      	ldr	r2, [pc, #496]	; (801d87c <tcp_input+0x6fc>)
 801d68a:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801d68c:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801d68e:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801d690:	b12b      	cbz	r3, 801d69e <tcp_input+0x51e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d692:	4b7b      	ldr	r3, [pc, #492]	; (801d880 <tcp_input+0x700>)
 801d694:	4648      	mov	r0, r9
 801d696:	f8a3 8000 	strh.w	r8, [r3]
 801d69a:	f7ff fcd1 	bl	801d040 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801d69e:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801d6a0:	f109 0204 	add.w	r2, r9, #4
 801d6a4:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801d6a8:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801d6aa:	4610      	mov	r0, r2
 801d6ac:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801d6ae:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801d6b2:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801d6b6:	f004 fd4d 	bl	8022154 <ip4_route>
 801d6ba:	9a05      	ldr	r2, [sp, #20]
 801d6bc:	4601      	mov	r1, r0
 801d6be:	4628      	mov	r0, r5
 801d6c0:	f7fe fec4 	bl	801c44c <tcp_eff_send_mss_netif>
 801d6c4:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801d6c6:	2112      	movs	r1, #18
 801d6c8:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801d6ca:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801d6ce:	f001 f8db 	bl	801e888 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801d6d2:	2800      	cmp	r0, #0
 801d6d4:	f040 82ca 	bne.w	801dc6c <tcp_input+0xaec>
    tcp_output(npcb);
 801d6d8:	4648      	mov	r0, r9
 801d6da:	f001 faf1 	bl	801ecc0 <tcp_output>
 801d6de:	e55c      	b.n	801d19a <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801d6e0:	f013 0102 	ands.w	r1, r3, #2
 801d6e4:	d004      	beq.n	801d6f0 <tcp_input+0x570>
 801d6e6:	7d2a      	ldrb	r2, [r5, #20]
 801d6e8:	3a02      	subs	r2, #2
 801d6ea:	2a01      	cmp	r2, #1
 801d6ec:	f200 81e4 	bhi.w	801dab8 <tcp_input+0x938>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801d6f0:	8b6a      	ldrh	r2, [r5, #26]
 801d6f2:	06d0      	lsls	r0, r2, #27
 801d6f4:	d402      	bmi.n	801d6fc <tcp_input+0x57c>
    pcb->tmr = tcp_ticks;
 801d6f6:	4a63      	ldr	r2, [pc, #396]	; (801d884 <tcp_input+0x704>)
 801d6f8:	6812      	ldr	r2, [r2, #0]
 801d6fa:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 801d6fc:	4a5e      	ldr	r2, [pc, #376]	; (801d878 <tcp_input+0x6f8>)
 801d6fe:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 801d700:	2200      	movs	r2, #0
 801d702:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801d706:	b140      	cbz	r0, 801d71a <tcp_input+0x59a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d708:	485d      	ldr	r0, [pc, #372]	; (801d880 <tcp_input+0x700>)
 801d70a:	8002      	strh	r2, [r0, #0]
 801d70c:	4628      	mov	r0, r5
 801d70e:	e9cd 3106 	strd	r3, r1, [sp, #24]
 801d712:	f7ff fc95 	bl	801d040 <tcp_parseopt.part.0>
 801d716:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 801d71a:	7d2a      	ldrb	r2, [r5, #20]
 801d71c:	3a02      	subs	r2, #2
 801d71e:	2a07      	cmp	r2, #7
 801d720:	f63f ae8c 	bhi.w	801d43c <tcp_input+0x2bc>
 801d724:	e8df f002 	tbb	[pc, r2]
 801d728:	89041331 	.word	0x89041331
 801d72c:	55b4046e 	.word	0x55b4046e
      tcp_receive(pcb);
 801d730:	4628      	mov	r0, r5
 801d732:	f7fe ffdd 	bl	801c6f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801d736:	f89a 3000 	ldrb.w	r3, [sl]
 801d73a:	069e      	lsls	r6, r3, #26
 801d73c:	f57f ae7e 	bpl.w	801d43c <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801d740:	8b6b      	ldrh	r3, [r5, #26]
 801d742:	f043 0302 	orr.w	r3, r3, #2
 801d746:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801d748:	2307      	movs	r3, #7
 801d74a:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801d74c:	e676      	b.n	801d43c <tcp_input+0x2bc>
      if (flags & TCP_ACK) {
 801d74e:	06da      	lsls	r2, r3, #27
 801d750:	f140 821c 	bpl.w	801db8c <tcp_input+0xa0c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d754:	4b4c      	ldr	r3, [pc, #304]	; (801d888 <tcp_input+0x708>)
 801d756:	6819      	ldr	r1, [r3, #0]
 801d758:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801d75a:	43db      	mvns	r3, r3
 801d75c:	42cb      	cmn	r3, r1
 801d75e:	d404      	bmi.n	801d76a <tcp_input+0x5ea>
 801d760:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801d762:	1acb      	subs	r3, r1, r3
 801d764:	2b00      	cmp	r3, #0
 801d766:	f340 823a 	ble.w	801dbde <tcp_input+0xa5e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d76a:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d76c:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d76e:	8810      	ldrh	r0, [r2, #0]
 801d770:	4a3f      	ldr	r2, [pc, #252]	; (801d870 <tcp_input+0x6f0>)
 801d772:	6812      	ldr	r2, [r2, #0]
 801d774:	4402      	add	r2, r0
 801d776:	8818      	ldrh	r0, [r3, #0]
 801d778:	9002      	str	r0, [sp, #8]
 801d77a:	4628      	mov	r0, r5
 801d77c:	885b      	ldrh	r3, [r3, #2]
 801d77e:	e9cd 9300 	strd	r9, r3, [sp]
 801d782:	4b42      	ldr	r3, [pc, #264]	; (801d88c <tcp_input+0x70c>)
 801d784:	f001 fa22 	bl	801ebcc <tcp_rst>
    if (err != ERR_ABRT) {
 801d788:	e658      	b.n	801d43c <tcp_input+0x2bc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801d78a:	f003 0212 	and.w	r2, r3, #18
 801d78e:	2a12      	cmp	r2, #18
 801d790:	f000 813b 	beq.w	801da0a <tcp_input+0x88a>
      else if (flags & TCP_ACK) {
 801d794:	06d9      	lsls	r1, r3, #27
 801d796:	f57f ae51 	bpl.w	801d43c <tcp_input+0x2bc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d79a:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d79c:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d79e:	8811      	ldrh	r1, [r2, #0]
 801d7a0:	4a33      	ldr	r2, [pc, #204]	; (801d870 <tcp_input+0x6f0>)
 801d7a2:	8818      	ldrh	r0, [r3, #0]
 801d7a4:	6812      	ldr	r2, [r2, #0]
 801d7a6:	440a      	add	r2, r1
 801d7a8:	4937      	ldr	r1, [pc, #220]	; (801d888 <tcp_input+0x708>)
 801d7aa:	6809      	ldr	r1, [r1, #0]
 801d7ac:	9002      	str	r0, [sp, #8]
 801d7ae:	4628      	mov	r0, r5
 801d7b0:	885b      	ldrh	r3, [r3, #2]
 801d7b2:	e9cd 9300 	strd	r9, r3, [sp]
 801d7b6:	4b35      	ldr	r3, [pc, #212]	; (801d88c <tcp_input+0x70c>)
 801d7b8:	f001 fa08 	bl	801ebcc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801d7bc:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 801d7c0:	2b05      	cmp	r3, #5
 801d7c2:	f63f ae3b 	bhi.w	801d43c <tcp_input+0x2bc>
          pcb->rtime = 0;
 801d7c6:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801d7c8:	4628      	mov	r0, r5
          pcb->rtime = 0;
 801d7ca:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801d7cc:	f001 fc80 	bl	801f0d0 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801d7d0:	e634      	b.n	801d43c <tcp_input+0x2bc>
      tcp_receive(pcb);
 801d7d2:	4628      	mov	r0, r5
 801d7d4:	f7fe ff8c 	bl	801c6f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d7d8:	4b24      	ldr	r3, [pc, #144]	; (801d86c <tcp_input+0x6ec>)
 801d7da:	781b      	ldrb	r3, [r3, #0]
 801d7dc:	06de      	lsls	r6, r3, #27
 801d7de:	f57f ae2d 	bpl.w	801d43c <tcp_input+0x2bc>
 801d7e2:	4b29      	ldr	r3, [pc, #164]	; (801d888 <tcp_input+0x708>)
 801d7e4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801d7e6:	681b      	ldr	r3, [r3, #0]
 801d7e8:	429a      	cmp	r2, r3
 801d7ea:	f47f ae27 	bne.w	801d43c <tcp_input+0x2bc>
 801d7ee:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	f47f ae23 	bne.w	801d43c <tcp_input+0x2bc>
        recv_flags |= TF_CLOSED;
 801d7f6:	f89a 3000 	ldrb.w	r3, [sl]
 801d7fa:	f043 0310 	orr.w	r3, r3, #16
 801d7fe:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801d802:	e61b      	b.n	801d43c <tcp_input+0x2bc>
      tcp_receive(pcb);
 801d804:	4628      	mov	r0, r5
 801d806:	f7fe ff73 	bl	801c6f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d80a:	f89a 3000 	ldrb.w	r3, [sl]
 801d80e:	069a      	lsls	r2, r3, #26
 801d810:	f57f ae14 	bpl.w	801d43c <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801d814:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801d816:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 801d818:	f043 0302 	orr.w	r3, r3, #2
 801d81c:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801d81e:	f7fd fee1 	bl	801b5e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d822:	4b14      	ldr	r3, [pc, #80]	; (801d874 <tcp_input+0x6f4>)
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	42ab      	cmp	r3, r5
 801d828:	d061      	beq.n	801d8ee <tcp_input+0x76e>
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	d062      	beq.n	801d8f4 <tcp_input+0x774>
 801d82e:	68da      	ldr	r2, [r3, #12]
 801d830:	42aa      	cmp	r2, r5
 801d832:	f000 8210 	beq.w	801dc56 <tcp_input+0xad6>
 801d836:	4613      	mov	r3, r2
 801d838:	e7f7      	b.n	801d82a <tcp_input+0x6aa>
      tcp_receive(pcb);
 801d83a:	4628      	mov	r0, r5
 801d83c:	f7fe ff58 	bl	801c6f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d840:	f89a 3000 	ldrb.w	r3, [sl]
 801d844:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d848:	4b08      	ldr	r3, [pc, #32]	; (801d86c <tcp_input+0x6ec>)
 801d84a:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801d84c:	f000 818e 	beq.w	801db6c <tcp_input+0x9ec>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d850:	06d8      	lsls	r0, r3, #27
 801d852:	d504      	bpl.n	801d85e <tcp_input+0x6de>
 801d854:	4b0c      	ldr	r3, [pc, #48]	; (801d888 <tcp_input+0x708>)
 801d856:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801d858:	681b      	ldr	r3, [r3, #0]
 801d85a:	429a      	cmp	r2, r3
 801d85c:	d038      	beq.n	801d8d0 <tcp_input+0x750>
          tcp_ack_now(pcb);
 801d85e:	8b6b      	ldrh	r3, [r5, #26]
 801d860:	f043 0302 	orr.w	r3, r3, #2
 801d864:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801d866:	2308      	movs	r3, #8
 801d868:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801d86a:	e5e7      	b.n	801d43c <tcp_input+0x2bc>
 801d86c:	2002dbcc 	.word	0x2002dbcc
 801d870:	2002dbec 	.word	0x2002dbec
 801d874:	2002dbac 	.word	0x2002dbac
 801d878:	2002dc04 	.word	0x2002dc04
 801d87c:	2002dbb0 	.word	0x2002dbb0
 801d880:	2002dbf4 	.word	0x2002dbf4
 801d884:	2002dbbc 	.word	0x2002dbbc
 801d888:	2002dbc8 	.word	0x2002dbc8
 801d88c:	2001ec40 	.word	0x2001ec40
      tcp_receive(pcb);
 801d890:	4628      	mov	r0, r5
 801d892:	f7fe ff2d 	bl	801c6f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d896:	4ba8      	ldr	r3, [pc, #672]	; (801db38 <tcp_input+0x9b8>)
 801d898:	781b      	ldrb	r3, [r3, #0]
 801d89a:	06db      	lsls	r3, r3, #27
 801d89c:	f57f adce 	bpl.w	801d43c <tcp_input+0x2bc>
 801d8a0:	4ba6      	ldr	r3, [pc, #664]	; (801db3c <tcp_input+0x9bc>)
 801d8a2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	429a      	cmp	r2, r3
 801d8a8:	f47f adc8 	bne.w	801d43c <tcp_input+0x2bc>
 801d8ac:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	f47f adc4 	bne.w	801d43c <tcp_input+0x2bc>
        tcp_pcb_purge(pcb);
 801d8b4:	4628      	mov	r0, r5
 801d8b6:	f7fd fe95 	bl	801b5e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d8ba:	4ba1      	ldr	r3, [pc, #644]	; (801db40 <tcp_input+0x9c0>)
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	42ab      	cmp	r3, r5
 801d8c0:	d015      	beq.n	801d8ee <tcp_input+0x76e>
 801d8c2:	b1bb      	cbz	r3, 801d8f4 <tcp_input+0x774>
 801d8c4:	68da      	ldr	r2, [r3, #12]
 801d8c6:	42aa      	cmp	r2, r5
 801d8c8:	f000 81c5 	beq.w	801dc56 <tcp_input+0xad6>
 801d8cc:	4613      	mov	r3, r2
 801d8ce:	e7f8      	b.n	801d8c2 <tcp_input+0x742>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d8d0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d1c3      	bne.n	801d85e <tcp_input+0x6de>
          tcp_ack_now(pcb);
 801d8d6:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801d8d8:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 801d8da:	f043 0302 	orr.w	r3, r3, #2
 801d8de:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801d8e0:	f7fd fe80 	bl	801b5e4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801d8e4:	4b96      	ldr	r3, [pc, #600]	; (801db40 <tcp_input+0x9c0>)
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	42ab      	cmp	r3, r5
 801d8ea:	f040 81b7 	bne.w	801dc5c <tcp_input+0xadc>
        TCP_RMV_ACTIVE(pcb);
 801d8ee:	68eb      	ldr	r3, [r5, #12]
 801d8f0:	4a93      	ldr	r2, [pc, #588]	; (801db40 <tcp_input+0x9c0>)
 801d8f2:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d8f4:	4b93      	ldr	r3, [pc, #588]	; (801db44 <tcp_input+0x9c4>)
        pcb->state = TIME_WAIT;
 801d8f6:	220a      	movs	r2, #10
 801d8f8:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d8fa:	681a      	ldr	r2, [r3, #0]
 801d8fc:	601d      	str	r5, [r3, #0]
 801d8fe:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 801d900:	2201      	movs	r2, #1
 801d902:	4b91      	ldr	r3, [pc, #580]	; (801db48 <tcp_input+0x9c8>)
 801d904:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d906:	f001 fd07 	bl	801f318 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801d90a:	e597      	b.n	801d43c <tcp_input+0x2bc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801d90c:	4b8f      	ldr	r3, [pc, #572]	; (801db4c <tcp_input+0x9cc>)
 801d90e:	22c2      	movs	r2, #194	; 0xc2
 801d910:	498f      	ldr	r1, [pc, #572]	; (801db50 <tcp_input+0x9d0>)
 801d912:	4890      	ldr	r0, [pc, #576]	; (801db54 <tcp_input+0x9d4>)
 801d914:	f007 f8ea 	bl	8024aec <iprintf>
 801d918:	e47d      	b.n	801d216 <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d91a:	4b8c      	ldr	r3, [pc, #560]	; (801db4c <tcp_input+0x9cc>)
 801d91c:	22df      	movs	r2, #223	; 0xdf
 801d91e:	498e      	ldr	r1, [pc, #568]	; (801db58 <tcp_input+0x9d8>)
 801d920:	488c      	ldr	r0, [pc, #560]	; (801db54 <tcp_input+0x9d4>)
 801d922:	f007 f8e3 	bl	8024aec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801d926:	8923      	ldrh	r3, [r4, #8]
 801d928:	e49b      	b.n	801d262 <tcp_input+0xe2>
        if (pcb->rcv_ann_wnd == 0) {
 801d92a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	f000 80d9 	beq.w	801dae4 <tcp_input+0x964>
 801d932:	4c8a      	ldr	r4, [pc, #552]	; (801db5c <tcp_input+0x9dc>)
 801d934:	e595      	b.n	801d462 <tcp_input+0x2e2>
        if (recv_acked > 0) {
 801d936:	f8bb 2000 	ldrh.w	r2, [fp]
 801d93a:	b15a      	cbz	r2, 801d954 <tcp_input+0x7d4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801d93c:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801d940:	b12b      	cbz	r3, 801d94e <tcp_input+0x7ce>
 801d942:	4629      	mov	r1, r5
 801d944:	6928      	ldr	r0, [r5, #16]
 801d946:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801d948:	300d      	adds	r0, #13
 801d94a:	f43f ad8a 	beq.w	801d462 <tcp_input+0x2e2>
          recv_acked = 0;
 801d94e:	2300      	movs	r3, #0
 801d950:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801d954:	4628      	mov	r0, r5
 801d956:	f7fe fe2b 	bl	801c5b0 <tcp_input_delayed_close>
 801d95a:	2800      	cmp	r0, #0
 801d95c:	f47f ad81 	bne.w	801d462 <tcp_input+0x2e2>
        if (recv_data != NULL) {
 801d960:	f8d8 3000 	ldr.w	r3, [r8]
 801d964:	b1fb      	cbz	r3, 801d9a6 <tcp_input+0x826>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801d966:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801d968:	b133      	cbz	r3, 801d978 <tcp_input+0x7f8>
 801d96a:	4b78      	ldr	r3, [pc, #480]	; (801db4c <tcp_input+0x9cc>)
 801d96c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801d970:	497b      	ldr	r1, [pc, #492]	; (801db60 <tcp_input+0x9e0>)
 801d972:	4878      	ldr	r0, [pc, #480]	; (801db54 <tcp_input+0x9d4>)
 801d974:	f007 f8ba 	bl	8024aec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801d978:	8b6b      	ldrh	r3, [r5, #26]
 801d97a:	f013 0310 	ands.w	r3, r3, #16
 801d97e:	f040 8113 	bne.w	801dba8 <tcp_input+0xa28>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801d982:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801d986:	2e00      	cmp	r6, #0
 801d988:	f000 8121 	beq.w	801dbce <tcp_input+0xa4e>
 801d98c:	f8d8 2000 	ldr.w	r2, [r8]
 801d990:	4629      	mov	r1, r5
 801d992:	6928      	ldr	r0, [r5, #16]
 801d994:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801d996:	f110 0f0d 	cmn.w	r0, #13
 801d99a:	f43f ad62 	beq.w	801d462 <tcp_input+0x2e2>
          if (err != ERR_OK) {
 801d99e:	b110      	cbz	r0, 801d9a6 <tcp_input+0x826>
            pcb->refused_data = recv_data;
 801d9a0:	f8d8 3000 	ldr.w	r3, [r8]
 801d9a4:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801d9a6:	f89a 3000 	ldrb.w	r3, [sl]
 801d9aa:	0699      	lsls	r1, r3, #26
 801d9ac:	d507      	bpl.n	801d9be <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 801d9ae:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	f000 80ad 	beq.w	801db10 <tcp_input+0x990>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801d9b6:	7b5a      	ldrb	r2, [r3, #13]
 801d9b8:	f042 0220 	orr.w	r2, r2, #32
 801d9bc:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801d9be:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801d9c0:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 801d9c2:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801d9c4:	f7fe fdf4 	bl	801c5b0 <tcp_input_delayed_close>
 801d9c8:	2800      	cmp	r0, #0
 801d9ca:	f47f ad4a 	bne.w	801d462 <tcp_input+0x2e2>
        tcp_output(pcb);
 801d9ce:	4628      	mov	r0, r5
 801d9d0:	f001 f976 	bl	801ecc0 <tcp_output>
 801d9d4:	e545      	b.n	801d462 <tcp_input+0x2e2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801d9d6:	6830      	ldr	r0, [r6, #0]
 801d9d8:	8980      	ldrh	r0, [r0, #12]
 801d9da:	f7fa ffad 	bl	8018938 <lwip_htons>
 801d9de:	f010 0004 	ands.w	r0, r0, #4
 801d9e2:	f47f abda 	bne.w	801d19a <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d9e6:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d9e8:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d9ea:	8811      	ldrh	r1, [r2, #0]
 801d9ec:	4a5d      	ldr	r2, [pc, #372]	; (801db64 <tcp_input+0x9e4>)
 801d9ee:	881d      	ldrh	r5, [r3, #0]
 801d9f0:	6812      	ldr	r2, [r2, #0]
 801d9f2:	440a      	add	r2, r1
 801d9f4:	4951      	ldr	r1, [pc, #324]	; (801db3c <tcp_input+0x9bc>)
 801d9f6:	6809      	ldr	r1, [r1, #0]
 801d9f8:	9502      	str	r5, [sp, #8]
 801d9fa:	885b      	ldrh	r3, [r3, #2]
 801d9fc:	e9cd 9300 	strd	r9, r3, [sp]
 801da00:	4b59      	ldr	r3, [pc, #356]	; (801db68 <tcp_input+0x9e8>)
 801da02:	f001 f8e3 	bl	801ebcc <tcp_rst>
 801da06:	f7ff bbc8 	b.w	801d19a <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 801da0a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801da0c:	494b      	ldr	r1, [pc, #300]	; (801db3c <tcp_input+0x9bc>)
 801da0e:	3201      	adds	r2, #1
 801da10:	6809      	ldr	r1, [r1, #0]
 801da12:	428a      	cmp	r2, r1
 801da14:	f47f aebe 	bne.w	801d794 <tcp_input+0x614>
        pcb->rcv_nxt = seqno + 1;
 801da18:	4b52      	ldr	r3, [pc, #328]	; (801db64 <tcp_input+0x9e4>)
        pcb->snd_wnd = tcphdr->wnd;
 801da1a:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801da1c:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801da1e:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801da20:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 801da22:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801da24:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801da26:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801da28:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801da2a:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801da2c:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801da2e:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801da30:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801da32:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801da34:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801da38:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801da3a:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801da3e:	9205      	str	r2, [sp, #20]
 801da40:	f004 fb88 	bl	8022154 <ip4_route>
 801da44:	9a05      	ldr	r2, [sp, #20]
 801da46:	4601      	mov	r1, r0
 801da48:	4630      	mov	r0, r6
 801da4a:	f7fe fcff 	bl	801c44c <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801da4e:	f241 131c 	movw	r3, #4380	; 0x111c
 801da52:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801da54:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801da56:	0081      	lsls	r1, r0, #2
 801da58:	429a      	cmp	r2, r3
 801da5a:	4616      	mov	r6, r2
 801da5c:	bf38      	it	cc
 801da5e:	461e      	movcc	r6, r3
 801da60:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801da64:	f240 814d 	bls.w	801dd02 <tcp_input+0xb82>
 801da68:	b28b      	uxth	r3, r1
 801da6a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801da6e:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801da72:	2b00      	cmp	r3, #0
 801da74:	f000 813d 	beq.w	801dcf2 <tcp_input+0xb72>
        --pcb->snd_queuelen;
 801da78:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 801da7c:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 801da7e:	3b01      	subs	r3, #1
 801da80:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 801da84:	2e00      	cmp	r6, #0
 801da86:	f000 812f 	beq.w	801dce8 <tcp_input+0xb68>
          pcb->unacked = rseg->next;
 801da8a:	6833      	ldr	r3, [r6, #0]
 801da8c:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 801da8e:	4630      	mov	r0, r6
 801da90:	f7fd fce0 	bl	801b454 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801da94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801da96:	2b00      	cmp	r3, #0
 801da98:	f000 8122 	beq.w	801dce0 <tcp_input+0xb60>
          pcb->rtime = 0;
 801da9c:	2300      	movs	r3, #0
 801da9e:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 801daa0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801daa4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801daa8:	b133      	cbz	r3, 801dab8 <tcp_input+0x938>
 801daaa:	2200      	movs	r2, #0
 801daac:	4629      	mov	r1, r5
 801daae:	6928      	ldr	r0, [r5, #16]
 801dab0:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801dab2:	300d      	adds	r0, #13
 801dab4:	f43f acd5 	beq.w	801d462 <tcp_input+0x2e2>
        tcp_ack_now(pcb);
 801dab8:	8b6b      	ldrh	r3, [r5, #26]
 801daba:	f043 0302 	orr.w	r3, r3, #2
 801dabe:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801dac0:	e4bc      	b.n	801d43c <tcp_input+0x2bc>
      if (ackno == pcb->snd_nxt) {
 801dac2:	4b1e      	ldr	r3, [pc, #120]	; (801db3c <tcp_input+0x9bc>)
 801dac4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	429a      	cmp	r2, r3
 801daca:	f47f acb7 	bne.w	801d43c <tcp_input+0x2bc>
      recv_flags |= TF_RESET;
 801dace:	f89a 3000 	ldrb.w	r3, [sl]
 801dad2:	f043 0308 	orr.w	r3, r3, #8
 801dad6:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801dada:	8b6b      	ldrh	r3, [r5, #26]
 801dadc:	f023 0301 	bic.w	r3, r3, #1
 801dae0:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801dae2:	e4ab      	b.n	801d43c <tcp_input+0x2bc>
          tcp_send_empty_ack(pcb);
 801dae4:	4628      	mov	r0, r5
 801dae6:	4c1d      	ldr	r4, [pc, #116]	; (801db5c <tcp_input+0x9dc>)
 801dae8:	f001 f8b8 	bl	801ec5c <tcp_send_empty_ack>
 801daec:	e4b9      	b.n	801d462 <tcp_input+0x2e2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801daee:	8802      	ldrh	r2, [r0, #0]
 801daf0:	e9cd 9300 	strd	r9, r3, [sp]
 801daf4:	9b05      	ldr	r3, [sp, #20]
 801daf6:	9202      	str	r2, [sp, #8]
 801daf8:	881a      	ldrh	r2, [r3, #0]
 801dafa:	4b1a      	ldr	r3, [pc, #104]	; (801db64 <tcp_input+0x9e4>)
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	441a      	add	r2, r3
 801db00:	4b0e      	ldr	r3, [pc, #56]	; (801db3c <tcp_input+0x9bc>)
 801db02:	4628      	mov	r0, r5
 801db04:	6819      	ldr	r1, [r3, #0]
 801db06:	4b18      	ldr	r3, [pc, #96]	; (801db68 <tcp_input+0x9e8>)
 801db08:	f001 f860 	bl	801ebcc <tcp_rst>
 801db0c:	f7ff bb45 	b.w	801d19a <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801db10:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801db12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801db16:	d001      	beq.n	801db1c <tcp_input+0x99c>
              pcb->rcv_wnd++;
 801db18:	3301      	adds	r3, #1
 801db1a:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801db1c:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801db20:	2e00      	cmp	r6, #0
 801db22:	f43f af4c 	beq.w	801d9be <tcp_input+0x83e>
 801db26:	2300      	movs	r3, #0
 801db28:	4629      	mov	r1, r5
 801db2a:	6928      	ldr	r0, [r5, #16]
 801db2c:	461a      	mov	r2, r3
 801db2e:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801db30:	300d      	adds	r0, #13
 801db32:	f47f af44 	bne.w	801d9be <tcp_input+0x83e>
 801db36:	e494      	b.n	801d462 <tcp_input+0x2e2>
 801db38:	2002dbcc 	.word	0x2002dbcc
 801db3c:	2002dbc8 	.word	0x2002dbc8
 801db40:	2002dbac 	.word	0x2002dbac
 801db44:	2002dbc4 	.word	0x2002dbc4
 801db48:	2002dbb0 	.word	0x2002dbb0
 801db4c:	0804379c 	.word	0x0804379c
 801db50:	080439a4 	.word	0x080439a4
 801db54:	0802b818 	.word	0x0802b818
 801db58:	080439b4 	.word	0x080439b4
 801db5c:	2002dbf0 	.word	0x2002dbf0
 801db60:	08043b50 	.word	0x08043b50
 801db64:	2002dbec 	.word	0x2002dbec
 801db68:	2001ec40 	.word	0x2001ec40
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801db6c:	06d9      	lsls	r1, r3, #27
 801db6e:	f57f ac65 	bpl.w	801d43c <tcp_input+0x2bc>
 801db72:	4b6a      	ldr	r3, [pc, #424]	; (801dd1c <tcp_input+0xb9c>)
 801db74:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	429a      	cmp	r2, r3
 801db7a:	f47f ac5f 	bne.w	801d43c <tcp_input+0x2bc>
 801db7e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801db80:	2b00      	cmp	r3, #0
 801db82:	f47f ac5b 	bne.w	801d43c <tcp_input+0x2bc>
        pcb->state = FIN_WAIT_2;
 801db86:	2306      	movs	r3, #6
 801db88:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801db8a:	e457      	b.n	801d43c <tcp_input+0x2bc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801db8c:	2900      	cmp	r1, #0
 801db8e:	f43f ac55 	beq.w	801d43c <tcp_input+0x2bc>
 801db92:	4b63      	ldr	r3, [pc, #396]	; (801dd20 <tcp_input+0xba0>)
 801db94:	681a      	ldr	r2, [r3, #0]
 801db96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801db98:	3b01      	subs	r3, #1
 801db9a:	4293      	cmp	r3, r2
 801db9c:	f47f ac4e 	bne.w	801d43c <tcp_input+0x2bc>
        tcp_rexmit(pcb);
 801dba0:	4628      	mov	r0, r5
 801dba2:	f000 ff95 	bl	801ead0 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801dba6:	e449      	b.n	801d43c <tcp_input+0x2bc>
            pbuf_free(recv_data);
 801dba8:	f8d8 0000 	ldr.w	r0, [r8]
 801dbac:	f7fc fee4 	bl	801a978 <pbuf_free>
            tcp_abort(pcb);
 801dbb0:	4628      	mov	r0, r5
 801dbb2:	f7fe f957 	bl	801be64 <tcp_abort>
            goto aborted;
 801dbb6:	e454      	b.n	801d462 <tcp_input+0x2e2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801dbb8:	69ab      	ldr	r3, [r5, #24]
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	f43f aaed 	beq.w	801d19a <tcp_input+0x1a>
 801dbc0:	4601      	mov	r1, r0
 801dbc2:	f04f 32ff 	mov.w	r2, #4294967295
 801dbc6:	6928      	ldr	r0, [r5, #16]
 801dbc8:	4798      	blx	r3
 801dbca:	f7ff bae6 	b.w	801d19a <tcp_input+0x1a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801dbce:	4633      	mov	r3, r6
 801dbd0:	4630      	mov	r0, r6
 801dbd2:	f8d8 2000 	ldr.w	r2, [r8]
 801dbd6:	4629      	mov	r1, r5
 801dbd8:	f7fe fb5a 	bl	801c290 <tcp_recv_null>
 801dbdc:	e6db      	b.n	801d996 <tcp_input+0x816>
          pcb->state = ESTABLISHED;
 801dbde:	2304      	movs	r3, #4
 801dbe0:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801dbe2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d0e3      	beq.n	801dbb0 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801dbe8:	699b      	ldr	r3, [r3, #24]
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d05d      	beq.n	801dcaa <tcp_input+0xb2a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801dbee:	2200      	movs	r2, #0
 801dbf0:	4629      	mov	r1, r5
 801dbf2:	6928      	ldr	r0, [r5, #16]
 801dbf4:	4798      	blx	r3
          if (err != ERR_OK) {
 801dbf6:	2800      	cmp	r0, #0
 801dbf8:	d153      	bne.n	801dca2 <tcp_input+0xb22>
          tcp_receive(pcb);
 801dbfa:	4628      	mov	r0, r5
 801dbfc:	f7fe fd78 	bl	801c6f0 <tcp_receive>
          if (recv_acked != 0) {
 801dc00:	f8bb 3000 	ldrh.w	r3, [fp]
 801dc04:	b113      	cbz	r3, 801dc0c <tcp_input+0xa8c>
            recv_acked--;
 801dc06:	3b01      	subs	r3, #1
 801dc08:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801dc0c:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801dc0e:	f241 131c 	movw	r3, #4380	; 0x111c
 801dc12:	004a      	lsls	r2, r1, #1
 801dc14:	0088      	lsls	r0, r1, #2
 801dc16:	429a      	cmp	r2, r3
 801dc18:	4616      	mov	r6, r2
 801dc1a:	bf38      	it	cc
 801dc1c:	461e      	movcc	r6, r3
 801dc1e:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801dc22:	d959      	bls.n	801dcd8 <tcp_input+0xb58>
 801dc24:	b283      	uxth	r3, r0
 801dc26:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801dc2a:	f89a 3000 	ldrb.w	r3, [sl]
 801dc2e:	069b      	lsls	r3, r3, #26
 801dc30:	f57f ac04 	bpl.w	801d43c <tcp_input+0x2bc>
 801dc34:	e584      	b.n	801d740 <tcp_input+0x5c0>
  } else if (flags & TCP_FIN) {
 801dc36:	07d0      	lsls	r0, r2, #31
 801dc38:	f57f ac72 	bpl.w	801d520 <tcp_input+0x3a0>
    pcb->tmr = tcp_ticks;
 801dc3c:	4b39      	ldr	r3, [pc, #228]	; (801dd24 <tcp_input+0xba4>)
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	622b      	str	r3, [r5, #32]
 801dc42:	e46d      	b.n	801d520 <tcp_input+0x3a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801dc44:	4b38      	ldr	r3, [pc, #224]	; (801dd28 <tcp_input+0xba8>)
 801dc46:	f240 1215 	movw	r2, #277	; 0x115
 801dc4a:	4938      	ldr	r1, [pc, #224]	; (801dd2c <tcp_input+0xbac>)
 801dc4c:	4838      	ldr	r0, [pc, #224]	; (801dd30 <tcp_input+0xbb0>)
 801dc4e:	f006 ff4d 	bl	8024aec <iprintf>
 801dc52:	f7ff bbb0 	b.w	801d3b6 <tcp_input+0x236>
        TCP_RMV_ACTIVE(pcb);
 801dc56:	68ea      	ldr	r2, [r5, #12]
 801dc58:	60da      	str	r2, [r3, #12]
 801dc5a:	e64b      	b.n	801d8f4 <tcp_input+0x774>
          TCP_RMV_ACTIVE(pcb);
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	f43f ae49 	beq.w	801d8f4 <tcp_input+0x774>
 801dc62:	68da      	ldr	r2, [r3, #12]
 801dc64:	42aa      	cmp	r2, r5
 801dc66:	d0f6      	beq.n	801dc56 <tcp_input+0xad6>
 801dc68:	4613      	mov	r3, r2
 801dc6a:	e7f7      	b.n	801dc5c <tcp_input+0xadc>
      tcp_abandon(npcb, 0);
 801dc6c:	2100      	movs	r1, #0
 801dc6e:	4648      	mov	r0, r9
 801dc70:	f7fe f828 	bl	801bcc4 <tcp_abandon>
      return;
 801dc74:	f7ff ba91 	b.w	801d19a <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801dc78:	4b2b      	ldr	r3, [pc, #172]	; (801dd28 <tcp_input+0xba8>)
 801dc7a:	f240 120d 	movw	r2, #269	; 0x10d
 801dc7e:	492d      	ldr	r1, [pc, #180]	; (801dd34 <tcp_input+0xbb4>)
 801dc80:	482b      	ldr	r0, [pc, #172]	; (801dd30 <tcp_input+0xbb0>)
 801dc82:	f006 ff33 	bl	8024aec <iprintf>
      if (prev != NULL) {
 801dc86:	f1b8 0f00 	cmp.w	r8, #0
 801dc8a:	f43f ab90 	beq.w	801d3ae <tcp_input+0x22e>
 801dc8e:	68eb      	ldr	r3, [r5, #12]
 801dc90:	f7ff bb87 	b.w	801d3a2 <tcp_input+0x222>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dc94:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801dc98:	9b05      	ldr	r3, [sp, #20]
 801dc9a:	f8cd 9000 	str.w	r9, [sp]
 801dc9e:	881b      	ldrh	r3, [r3, #0]
 801dca0:	e72d      	b.n	801dafe <tcp_input+0x97e>
            if (err != ERR_ABRT) {
 801dca2:	300d      	adds	r0, #13
 801dca4:	f43f abdd 	beq.w	801d462 <tcp_input+0x2e2>
 801dca8:	e782      	b.n	801dbb0 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801dcaa:	4b1f      	ldr	r3, [pc, #124]	; (801dd28 <tcp_input+0xba8>)
 801dcac:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801dcb0:	4921      	ldr	r1, [pc, #132]	; (801dd38 <tcp_input+0xbb8>)
 801dcb2:	481f      	ldr	r0, [pc, #124]	; (801dd30 <tcp_input+0xbb0>)
 801dcb4:	f006 ff1a 	bl	8024aec <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801dcb8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801dcba:	699b      	ldr	r3, [r3, #24]
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d196      	bne.n	801dbee <tcp_input+0xa6e>
 801dcc0:	e776      	b.n	801dbb0 <tcp_input+0xa30>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801dcc2:	2900      	cmp	r1, #0
 801dcc4:	f47f af03 	bne.w	801dace <tcp_input+0x94e>
 801dcc8:	4b17      	ldr	r3, [pc, #92]	; (801dd28 <tcp_input+0xba8>)
 801dcca:	f44f 724e 	mov.w	r2, #824	; 0x338
 801dcce:	491b      	ldr	r1, [pc, #108]	; (801dd3c <tcp_input+0xbbc>)
 801dcd0:	4817      	ldr	r0, [pc, #92]	; (801dd30 <tcp_input+0xbb0>)
 801dcd2:	f006 ff0b 	bl	8024aec <iprintf>
 801dcd6:	e6fa      	b.n	801dace <tcp_input+0x94e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801dcd8:	429a      	cmp	r2, r3
 801dcda:	bf88      	it	hi
 801dcdc:	b293      	uxthhi	r3, r2
 801dcde:	e7a2      	b.n	801dc26 <tcp_input+0xaa6>
          pcb->rtime = -1;
 801dce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dce4:	862b      	strh	r3, [r5, #48]	; 0x30
 801dce6:	e6dd      	b.n	801daa4 <tcp_input+0x924>
          rseg = pcb->unsent;
 801dce8:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801dcea:	b176      	cbz	r6, 801dd0a <tcp_input+0xb8a>
          pcb->unsent = rseg->next;
 801dcec:	6833      	ldr	r3, [r6, #0]
 801dcee:	66eb      	str	r3, [r5, #108]	; 0x6c
 801dcf0:	e6cd      	b.n	801da8e <tcp_input+0x90e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801dcf2:	4b0d      	ldr	r3, [pc, #52]	; (801dd28 <tcp_input+0xba8>)
 801dcf4:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801dcf8:	4911      	ldr	r1, [pc, #68]	; (801dd40 <tcp_input+0xbc0>)
 801dcfa:	480d      	ldr	r0, [pc, #52]	; (801dd30 <tcp_input+0xbb0>)
 801dcfc:	f006 fef6 	bl	8024aec <iprintf>
 801dd00:	e6ba      	b.n	801da78 <tcp_input+0x8f8>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801dd02:	429a      	cmp	r2, r3
 801dd04:	bf88      	it	hi
 801dd06:	b293      	uxthhi	r3, r2
 801dd08:	e6af      	b.n	801da6a <tcp_input+0x8ea>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801dd0a:	4b07      	ldr	r3, [pc, #28]	; (801dd28 <tcp_input+0xba8>)
 801dd0c:	f44f 725d 	mov.w	r2, #884	; 0x374
 801dd10:	490c      	ldr	r1, [pc, #48]	; (801dd44 <tcp_input+0xbc4>)
 801dd12:	4807      	ldr	r0, [pc, #28]	; (801dd30 <tcp_input+0xbb0>)
 801dd14:	f006 feea 	bl	8024aec <iprintf>
 801dd18:	e7e8      	b.n	801dcec <tcp_input+0xb6c>
 801dd1a:	bf00      	nop
 801dd1c:	2002dbc8 	.word	0x2002dbc8
 801dd20:	2002dbec 	.word	0x2002dbec
 801dd24:	2002dbbc 	.word	0x2002dbbc
 801dd28:	0804379c 	.word	0x0804379c
 801dd2c:	08043a88 	.word	0x08043a88
 801dd30:	0802b818 	.word	0x0802b818
 801dd34:	08043a5c 	.word	0x08043a5c
 801dd38:	08043b30 	.word	0x08043b30
 801dd3c:	08043ae4 	.word	0x08043ae4
 801dd40:	08043b04 	.word	0x08043b04
 801dd44:	08043b1c 	.word	0x08043b1c

0801dd48 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801dd48:	4a02      	ldr	r2, [pc, #8]	; (801dd54 <tcp_trigger_input_pcb_close+0xc>)
 801dd4a:	7813      	ldrb	r3, [r2, #0]
 801dd4c:	f043 0310 	orr.w	r3, r3, #16
 801dd50:	7013      	strb	r3, [r2, #0]
}
 801dd52:	4770      	bx	lr
 801dd54:	2002dbe8 	.word	0x2002dbe8

0801dd58 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801dd58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd5c:	9f08      	ldr	r7, [sp, #32]
 801dd5e:	4680      	mov	r8, r0
 801dd60:	460d      	mov	r5, r1
 801dd62:	4614      	mov	r4, r2
 801dd64:	461e      	mov	r6, r3
 801dd66:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801dd6a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801dd6e:	2f00      	cmp	r7, #0
 801dd70:	d033      	beq.n	801ddda <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801dd72:	42a5      	cmp	r5, r4
 801dd74:	d20e      	bcs.n	801dd94 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801dd76:	f019 0f02 	tst.w	r9, #2
 801dd7a:	d008      	beq.n	801dd8e <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801dd7c:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801dd80:	f021 0103 	bic.w	r1, r1, #3
 801dd84:	428c      	cmp	r4, r1
 801dd86:	bf28      	it	cs
 801dd88:	460c      	movcs	r4, r1
 801dd8a:	b2a1      	uxth	r1, r4
 801dd8c:	e003      	b.n	801dd96 <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801dd8e:	8b7b      	ldrh	r3, [r7, #26]
 801dd90:	065b      	lsls	r3, r3, #25
 801dd92:	d518      	bpl.n	801ddc6 <tcp_pbuf_prealloc+0x6e>
 801dd94:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801dd96:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dd9a:	4640      	mov	r0, r8
 801dd9c:	f7fc fc36 	bl	801a60c <pbuf_alloc>
  if (p == NULL) {
 801dda0:	4604      	mov	r4, r0
 801dda2:	b168      	cbz	r0, 801ddc0 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801dda4:	6803      	ldr	r3, [r0, #0]
 801dda6:	b133      	cbz	r3, 801ddb6 <tcp_pbuf_prealloc+0x5e>
 801dda8:	4b0f      	ldr	r3, [pc, #60]	; (801dde8 <tcp_pbuf_prealloc+0x90>)
 801ddaa:	f240 120b 	movw	r2, #267	; 0x10b
 801ddae:	490f      	ldr	r1, [pc, #60]	; (801ddec <tcp_pbuf_prealloc+0x94>)
 801ddb0:	480f      	ldr	r0, [pc, #60]	; (801ddf0 <tcp_pbuf_prealloc+0x98>)
 801ddb2:	f006 fe9b 	bl	8024aec <iprintf>
  *oversize = p->len - length;
 801ddb6:	8963      	ldrh	r3, [r4, #10]
 801ddb8:	1b5b      	subs	r3, r3, r5
 801ddba:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801ddbc:	8125      	strh	r5, [r4, #8]
 801ddbe:	8165      	strh	r5, [r4, #10]
  return p;
}
 801ddc0:	4620      	mov	r0, r4
 801ddc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801ddc6:	f1ba 0f00 	cmp.w	sl, #0
 801ddca:	d0d7      	beq.n	801dd7c <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801ddcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d1d4      	bne.n	801dd7c <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801ddd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	d1d1      	bne.n	801dd7c <tcp_pbuf_prealloc+0x24>
 801ddd8:	e7dc      	b.n	801dd94 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801ddda:	4b03      	ldr	r3, [pc, #12]	; (801dde8 <tcp_pbuf_prealloc+0x90>)
 801dddc:	22e9      	movs	r2, #233	; 0xe9
 801ddde:	4905      	ldr	r1, [pc, #20]	; (801ddf4 <tcp_pbuf_prealloc+0x9c>)
 801dde0:	4803      	ldr	r0, [pc, #12]	; (801ddf0 <tcp_pbuf_prealloc+0x98>)
 801dde2:	f006 fe83 	bl	8024aec <iprintf>
 801dde6:	e7c4      	b.n	801dd72 <tcp_pbuf_prealloc+0x1a>
 801dde8:	08043b6c 	.word	0x08043b6c
 801ddec:	08043bc0 	.word	0x08043bc0
 801ddf0:	0802b818 	.word	0x0802b818
 801ddf4:	08043ba0 	.word	0x08043ba0

0801ddf8 <tcp_create_segment>:
{
 801ddf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddfc:	460e      	mov	r6, r1
 801ddfe:	f89d a020 	ldrb.w	sl, [sp, #32]
 801de02:	4690      	mov	r8, r2
 801de04:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801de06:	4607      	mov	r7, r0
 801de08:	2800      	cmp	r0, #0
 801de0a:	d04c      	beq.n	801dea6 <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801de0c:	2e00      	cmp	r6, #0
 801de0e:	d052      	beq.n	801deb6 <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801de10:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801de14:	22a8      	movs	r2, #168	; 0xa8
 801de16:	4931      	ldr	r1, [pc, #196]	; (801dedc <tcp_create_segment+0xe4>)
 801de18:	2004      	movs	r0, #4
 801de1a:	f7fc f87b 	bl	8019f14 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801de1e:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801de22:	4604      	mov	r4, r0
 801de24:	2800      	cmp	r0, #0
 801de26:	d054      	beq.n	801ded2 <tcp_create_segment+0xda>
  seg->flags = optflags;
 801de28:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801de2c:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801de2e:	8932      	ldrh	r2, [r6, #8]
 801de30:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801de34:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801de36:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801de38:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801de3a:	d32c      	bcc.n	801de96 <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801de3c:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801de40:	4630      	mov	r0, r6
 801de42:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801de44:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801de46:	f7fc fcf3 	bl	801a830 <pbuf_add_header>
 801de4a:	4606      	mov	r6, r0
 801de4c:	2800      	cmp	r0, #0
 801de4e:	d139      	bne.n	801dec4 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801de50:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801de52:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801de54:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801de56:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801de5a:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801de5e:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801de62:	f7fa fd69 	bl	8018938 <lwip_htons>
 801de66:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801de6a:	8b38      	ldrh	r0, [r7, #24]
 801de6c:	68e7      	ldr	r7, [r4, #12]
 801de6e:	f7fa fd63 	bl	8018938 <lwip_htons>
 801de72:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801de74:	4648      	mov	r0, r9
 801de76:	68e7      	ldr	r7, [r4, #12]
 801de78:	f7fa fd62 	bl	8018940 <lwip_htonl>
 801de7c:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801de7e:	ea45 0008 	orr.w	r0, r5, r8
 801de82:	68e7      	ldr	r7, [r4, #12]
 801de84:	f7fa fd58 	bl	8018938 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801de88:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801de8a:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801de8c:	749e      	strb	r6, [r3, #18]
 801de8e:	74de      	strb	r6, [r3, #19]
}
 801de90:	4620      	mov	r0, r4
 801de92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801de96:	22b0      	movs	r2, #176	; 0xb0
 801de98:	4b10      	ldr	r3, [pc, #64]	; (801dedc <tcp_create_segment+0xe4>)
 801de9a:	4911      	ldr	r1, [pc, #68]	; (801dee0 <tcp_create_segment+0xe8>)
 801de9c:	4811      	ldr	r0, [pc, #68]	; (801dee4 <tcp_create_segment+0xec>)
 801de9e:	f006 fe25 	bl	8024aec <iprintf>
  seg->len = p->tot_len - optlen;
 801dea2:	8932      	ldrh	r2, [r6, #8]
 801dea4:	e7ca      	b.n	801de3c <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801dea6:	4b0d      	ldr	r3, [pc, #52]	; (801dedc <tcp_create_segment+0xe4>)
 801dea8:	22a3      	movs	r2, #163	; 0xa3
 801deaa:	490f      	ldr	r1, [pc, #60]	; (801dee8 <tcp_create_segment+0xf0>)
 801deac:	480d      	ldr	r0, [pc, #52]	; (801dee4 <tcp_create_segment+0xec>)
 801deae:	f006 fe1d 	bl	8024aec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801deb2:	2e00      	cmp	r6, #0
 801deb4:	d1ac      	bne.n	801de10 <tcp_create_segment+0x18>
 801deb6:	4b09      	ldr	r3, [pc, #36]	; (801dedc <tcp_create_segment+0xe4>)
 801deb8:	22a4      	movs	r2, #164	; 0xa4
 801deba:	490c      	ldr	r1, [pc, #48]	; (801deec <tcp_create_segment+0xf4>)
 801debc:	4809      	ldr	r0, [pc, #36]	; (801dee4 <tcp_create_segment+0xec>)
 801debe:	f006 fe15 	bl	8024aec <iprintf>
 801dec2:	e7a5      	b.n	801de10 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 801dec4:	4620      	mov	r0, r4
    return NULL;
 801dec6:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 801dec8:	f7fd fac4 	bl	801b454 <tcp_seg_free>
}
 801decc:	4620      	mov	r0, r4
 801dece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801ded2:	4630      	mov	r0, r6
 801ded4:	f7fc fd50 	bl	801a978 <pbuf_free>
    return NULL;
 801ded8:	e7da      	b.n	801de90 <tcp_create_segment+0x98>
 801deda:	bf00      	nop
 801dedc:	08043b6c 	.word	0x08043b6c
 801dee0:	08043c18 	.word	0x08043c18
 801dee4:	0802b818 	.word	0x0802b818
 801dee8:	08043bd4 	.word	0x08043bd4
 801deec:	08043bf4 	.word	0x08043bf4

0801def0 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801def0:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801def2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801def6:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801def8:	4606      	mov	r6, r0
 801defa:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801defc:	2022      	movs	r0, #34	; 0x22
 801defe:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801df02:	461c      	mov	r4, r3
 801df04:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801df08:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801df0c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801df10:	f7fc fb7c 	bl	801a60c <pbuf_alloc>
  if (p != NULL) {
 801df14:	4605      	mov	r5, r0
 801df16:	b300      	cbz	r0, 801df5a <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801df18:	8943      	ldrh	r3, [r0, #10]
 801df1a:	2b13      	cmp	r3, #19
 801df1c:	d920      	bls.n	801df60 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801df1e:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801df20:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801df22:	f7fa fd09 	bl	8018938 <lwip_htons>
 801df26:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801df28:	4650      	mov	r0, sl
 801df2a:	f7fa fd05 	bl	8018938 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801df2e:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801df30:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801df32:	4630      	mov	r0, r6
 801df34:	f7fa fd04 	bl	8018940 <lwip_htonl>
 801df38:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801df3a:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801df3e:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801df40:	f7fa fcfa 	bl	8018938 <lwip_htons>
 801df44:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801df46:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801df48:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801df4a:	f7fa fcf5 	bl	8018938 <lwip_htons>
    tcphdr->chksum = 0;
 801df4e:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801df50:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801df52:	7423      	strb	r3, [r4, #16]
 801df54:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801df56:	74a3      	strb	r3, [r4, #18]
 801df58:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801df5a:	4628      	mov	r0, r5
 801df5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801df60:	4b03      	ldr	r3, [pc, #12]	; (801df70 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801df62:	f240 7223 	movw	r2, #1827	; 0x723
 801df66:	4903      	ldr	r1, [pc, #12]	; (801df74 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801df68:	4803      	ldr	r0, [pc, #12]	; (801df78 <tcp_output_alloc_header_common.constprop.0+0x88>)
 801df6a:	f006 fdbf 	bl	8024aec <iprintf>
 801df6e:	e7d6      	b.n	801df1e <tcp_output_alloc_header_common.constprop.0+0x2e>
 801df70:	08043b6c 	.word	0x08043b6c
 801df74:	08043c30 	.word	0x08043c30
 801df78:	0802b818 	.word	0x0802b818

0801df7c <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801df7c:	b570      	push	{r4, r5, r6, lr}
 801df7e:	460d      	mov	r5, r1
 801df80:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801df82:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801df84:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801df86:	b190      	cbz	r0, 801dfae <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801df88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801df8a:	2210      	movs	r2, #16
 801df8c:	8b21      	ldrh	r1, [r4, #24]
 801df8e:	9302      	str	r3, [sp, #8]
 801df90:	e9cd 1200 	strd	r1, r2, [sp]
 801df94:	4632      	mov	r2, r6
 801df96:	4629      	mov	r1, r5
 801df98:	8ae3      	ldrh	r3, [r4, #22]
 801df9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801df9c:	f7ff ffa8 	bl	801def0 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801dfa0:	b118      	cbz	r0, 801dfaa <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801dfa2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801dfa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dfa6:	4413      	add	r3, r2
 801dfa8:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801dfaa:	b004      	add	sp, #16
 801dfac:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801dfae:	4b04      	ldr	r3, [pc, #16]	; (801dfc0 <tcp_output_alloc_header.constprop.0+0x44>)
 801dfb0:	f240 7242 	movw	r2, #1858	; 0x742
 801dfb4:	4903      	ldr	r1, [pc, #12]	; (801dfc4 <tcp_output_alloc_header.constprop.0+0x48>)
 801dfb6:	4804      	ldr	r0, [pc, #16]	; (801dfc8 <tcp_output_alloc_header.constprop.0+0x4c>)
 801dfb8:	f006 fd98 	bl	8024aec <iprintf>
 801dfbc:	e7e4      	b.n	801df88 <tcp_output_alloc_header.constprop.0+0xc>
 801dfbe:	bf00      	nop
 801dfc0:	08043b6c 	.word	0x08043b6c
 801dfc4:	08043c60 	.word	0x08043c60
 801dfc8:	0802b818 	.word	0x0802b818

0801dfcc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801dfcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dfd0:	4605      	mov	r5, r0
 801dfd2:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801dfd4:	460c      	mov	r4, r1
{
 801dfd6:	4690      	mov	r8, r2
 801dfd8:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801dfda:	2900      	cmp	r1, #0
 801dfdc:	d034      	beq.n	801e048 <tcp_output_control_segment+0x7c>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801dfde:	2d00      	cmp	r5, #0
 801dfe0:	d03a      	beq.n	801e058 <tcp_output_control_segment+0x8c>
 801dfe2:	7a28      	ldrb	r0, [r5, #8]
 801dfe4:	bb10      	cbnz	r0, 801e02c <tcp_output_control_segment+0x60>
    return ip_route(src, dst);
 801dfe6:	4630      	mov	r0, r6
 801dfe8:	f004 f8b4 	bl	8022154 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801dfec:	4607      	mov	r7, r0
 801dfee:	b310      	cbz	r0, 801e036 <tcp_output_control_segment+0x6a>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801dff0:	9600      	str	r6, [sp, #0]
 801dff2:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801dff4:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801dff8:	2106      	movs	r1, #6
 801dffa:	8922      	ldrh	r2, [r4, #8]
 801dffc:	4620      	mov	r0, r4
 801dffe:	f7fb fa2f 	bl	8019460 <ip_chksum_pseudo>
 801e002:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801e006:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801e008:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801e00a:	9500      	str	r5, [sp, #0]
 801e00c:	2506      	movs	r5, #6
 801e00e:	4632      	mov	r2, r6
 801e010:	4641      	mov	r1, r8
 801e012:	9501      	str	r5, [sp, #4]
 801e014:	4620      	mov	r0, r4
 801e016:	9702      	str	r7, [sp, #8]
 801e018:	f004 fa66 	bl	80224e8 <ip4_output_if>
 801e01c:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801e01e:	4620      	mov	r0, r4
 801e020:	f7fc fcaa 	bl	801a978 <pbuf_free>
  return err;
}
 801e024:	4628      	mov	r0, r5
 801e026:	b005      	add	sp, #20
 801e028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801e02c:	f7fc f99a 	bl	801a364 <netif_get_by_index>
  if (netif == NULL) {
 801e030:	4607      	mov	r7, r0
 801e032:	2800      	cmp	r0, #0
 801e034:	d1dc      	bne.n	801dff0 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801e036:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801e03a:	4620      	mov	r0, r4
 801e03c:	f7fc fc9c 	bl	801a978 <pbuf_free>
}
 801e040:	4628      	mov	r0, r5
 801e042:	b005      	add	sp, #20
 801e044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e048:	4b0d      	ldr	r3, [pc, #52]	; (801e080 <tcp_output_control_segment+0xb4>)
 801e04a:	f240 7287 	movw	r2, #1927	; 0x787
 801e04e:	490d      	ldr	r1, [pc, #52]	; (801e084 <tcp_output_control_segment+0xb8>)
 801e050:	480d      	ldr	r0, [pc, #52]	; (801e088 <tcp_output_control_segment+0xbc>)
 801e052:	f006 fd4b 	bl	8024aec <iprintf>
 801e056:	e7c2      	b.n	801dfde <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801e058:	4630      	mov	r0, r6
 801e05a:	f004 f87b 	bl	8022154 <ip4_route>
  if (netif == NULL) {
 801e05e:	4607      	mov	r7, r0
 801e060:	2800      	cmp	r0, #0
 801e062:	d0e8      	beq.n	801e036 <tcp_output_control_segment+0x6a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e064:	9600      	str	r6, [sp, #0]
 801e066:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801e068:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e06c:	2106      	movs	r1, #6
 801e06e:	8922      	ldrh	r2, [r4, #8]
 801e070:	4620      	mov	r0, r4
 801e072:	f7fb f9f5 	bl	8019460 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801e076:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e078:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801e07c:	e7c5      	b.n	801e00a <tcp_output_control_segment+0x3e>
 801e07e:	bf00      	nop
 801e080:	08043b6c 	.word	0x08043b6c
 801e084:	08043c88 	.word	0x08043c88
 801e088:	0802b818 	.word	0x0802b818

0801e08c <tcp_write>:
{
 801e08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801e090:	2400      	movs	r4, #0
{
 801e092:	b091      	sub	sp, #68	; 0x44
 801e094:	9107      	str	r1, [sp, #28]
 801e096:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801e098:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801e09c:	2800      	cmp	r0, #0
 801e09e:	f000 82fc 	beq.w	801e69a <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801e0a2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801e0a6:	4692      	mov	sl, r2
 801e0a8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801e0aa:	4681      	mov	r9, r0
 801e0ac:	085b      	lsrs	r3, r3, #1
 801e0ae:	4293      	cmp	r3, r2
 801e0b0:	bf28      	it	cs
 801e0b2:	4613      	movcs	r3, r2
 801e0b4:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	bf08      	it	eq
 801e0ba:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801e0bc:	9b07      	ldr	r3, [sp, #28]
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	f000 82df 	beq.w	801e682 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 801e0c4:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801e0c6:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801e0c8:	2a02      	cmp	r2, #2
 801e0ca:	d902      	bls.n	801e0d2 <tcp_write+0x46>
 801e0cc:	2b07      	cmp	r3, #7
 801e0ce:	f040 829c 	bne.w	801e60a <tcp_write+0x57e>
  } else if (len == 0) {
 801e0d2:	f1ba 0f00 	cmp.w	sl, #0
 801e0d6:	f000 80ec 	beq.w	801e2b2 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801e0da:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801e0de:	4553      	cmp	r3, sl
 801e0e0:	f0c0 82b6 	bcc.w	801e650 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801e0e4:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801e0e8:	2e08      	cmp	r6, #8
 801e0ea:	f200 82b1 	bhi.w	801e650 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e0ee:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801e0f2:	2e00      	cmp	r6, #0
 801e0f4:	f000 80d3 	beq.w	801e29e <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	f040 80dc 	bne.w	801e2b6 <tcp_write+0x22a>
 801e0fe:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801e102:	f1b8 0f00 	cmp.w	r8, #0
 801e106:	f000 8263 	beq.w	801e5d0 <tcp_write+0x544>
 801e10a:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e10c:	461a      	mov	r2, r3
 801e10e:	681b      	ldr	r3, [r3, #0]
 801e110:	2b00      	cmp	r3, #0
 801e112:	d1fb      	bne.n	801e10c <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e114:	7a94      	ldrb	r4, [r2, #10]
 801e116:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e118:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e11a:	00a4      	lsls	r4, r4, #2
 801e11c:	920b      	str	r2, [sp, #44]	; 0x2c
 801e11e:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e122:	191a      	adds	r2, r3, r4
 801e124:	4593      	cmp	fp, r2
 801e126:	f2c0 81a6 	blt.w	801e476 <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e12a:	ebab 0404 	sub.w	r4, fp, r4
 801e12e:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801e130:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e134:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801e136:	930a      	str	r3, [sp, #40]	; 0x28
 801e138:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801e13c:	2b00      	cmp	r3, #0
 801e13e:	f000 80cf 	beq.w	801e2e0 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801e142:	42a3      	cmp	r3, r4
 801e144:	f200 818a 	bhi.w	801e45c <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801e148:	45a2      	cmp	sl, r4
 801e14a:	4653      	mov	r3, sl
 801e14c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e14e:	bf28      	it	cs
 801e150:	4623      	movcs	r3, r4
 801e152:	4293      	cmp	r3, r2
 801e154:	bf28      	it	cs
 801e156:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801e158:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801e15a:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e15c:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801e15e:	b292      	uxth	r2, r2
      space -= oversize_used;
 801e160:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801e162:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e166:	2a00      	cmp	r2, #0
 801e168:	f000 8183 	beq.w	801e472 <tcp_write+0x3e6>
 801e16c:	459a      	cmp	sl, r3
 801e16e:	f000 8180 	beq.w	801e472 <tcp_write+0x3e6>
 801e172:	4bb2      	ldr	r3, [pc, #712]	; (801e43c <tcp_write+0x3b0>)
 801e174:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e178:	49b1      	ldr	r1, [pc, #708]	; (801e440 <tcp_write+0x3b4>)
 801e17a:	48b2      	ldr	r0, [pc, #712]	; (801e444 <tcp_write+0x3b8>)
 801e17c:	f006 fcb6 	bl	8024aec <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e182:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e184:	459a      	cmp	sl, r3
 801e186:	f200 80b0 	bhi.w	801e2ea <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801e18a:	2300      	movs	r3, #0
 801e18c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e18e:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801e190:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801e192:	45a2      	cmp	sl, r4
 801e194:	f240 80ee 	bls.w	801e374 <tcp_write+0x2e8>
 801e198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e19a:	f04f 0800 	mov.w	r8, #0
 801e19e:	f003 0301 	and.w	r3, r3, #1
 801e1a2:	f8cd 8014 	str.w	r8, [sp, #20]
 801e1a6:	9308      	str	r3, [sp, #32]
 801e1a8:	4643      	mov	r3, r8
 801e1aa:	46d8      	mov	r8, fp
 801e1ac:	469b      	mov	fp, r3
 801e1ae:	e042      	b.n	801e236 <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801e1b0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	f040 80f0 	bne.w	801e39a <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801e1ba:	2201      	movs	r2, #1
 801e1bc:	4629      	mov	r1, r5
 801e1be:	2036      	movs	r0, #54	; 0x36
 801e1c0:	f7fc fa24 	bl	801a60c <pbuf_alloc>
 801e1c4:	2800      	cmp	r0, #0
 801e1c6:	f000 8100 	beq.w	801e3ca <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801e1ca:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e1cc:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801e1ce:	9006      	str	r0, [sp, #24]
 801e1d0:	4422      	add	r2, r4
 801e1d2:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e1d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e1d8:	2036      	movs	r0, #54	; 0x36
 801e1da:	f7fc fa17 	bl	801a60c <pbuf_alloc>
 801e1de:	9b06      	ldr	r3, [sp, #24]
 801e1e0:	4607      	mov	r7, r0
 801e1e2:	2800      	cmp	r0, #0
 801e1e4:	f000 8195 	beq.w	801e512 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 801e1e8:	4619      	mov	r1, r3
 801e1ea:	f7fc fbf7 	bl	801a9dc <pbuf_cat>
    queuelen += pbuf_clen(p);
 801e1ee:	4638      	mov	r0, r7
 801e1f0:	f7fc fbd6 	bl	801a9a0 <pbuf_clen>
 801e1f4:	4430      	add	r0, r6
 801e1f6:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801e1f8:	2e09      	cmp	r6, #9
 801e1fa:	d84a      	bhi.n	801e292 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801e1fc:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801e200:	2200      	movs	r2, #0
 801e202:	4639      	mov	r1, r7
 801e204:	4648      	mov	r0, r9
 801e206:	4423      	add	r3, r4
 801e208:	9200      	str	r2, [sp, #0]
 801e20a:	f7ff fdf5 	bl	801ddf8 <tcp_create_segment>
 801e20e:	4607      	mov	r7, r0
 801e210:	2800      	cmp	r0, #0
 801e212:	f000 80da 	beq.w	801e3ca <tcp_write+0x33e>
    if (queue == NULL) {
 801e216:	9b05      	ldr	r3, [sp, #20]
 801e218:	2b00      	cmp	r3, #0
 801e21a:	f000 80a3 	beq.w	801e364 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e21e:	f1bb 0f00 	cmp.w	fp, #0
 801e222:	f000 80c2 	beq.w	801e3aa <tcp_write+0x31e>
    pos += seglen;
 801e226:	442c      	add	r4, r5
      prev_seg->next = seg;
 801e228:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801e22c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801e22e:	45a2      	cmp	sl, r4
 801e230:	f240 809e 	bls.w	801e370 <tcp_write+0x2e4>
 801e234:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801e236:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e23a:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801e23c:	b2ad      	uxth	r5, r5
 801e23e:	4545      	cmp	r5, r8
 801e240:	bf28      	it	cs
 801e242:	4645      	movcs	r5, r8
 801e244:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e246:	2b00      	cmp	r3, #0
 801e248:	d0b2      	beq.n	801e1b0 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801e24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e24c:	4642      	mov	r2, r8
 801e24e:	4629      	mov	r1, r5
 801e250:	2036      	movs	r0, #54	; 0x36
 801e252:	e9cd 9300 	strd	r9, r3, [sp]
 801e256:	9b05      	ldr	r3, [sp, #20]
 801e258:	fab3 f383 	clz	r3, r3
 801e25c:	095b      	lsrs	r3, r3, #5
 801e25e:	9302      	str	r3, [sp, #8]
 801e260:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801e264:	f7ff fd78 	bl	801dd58 <tcp_pbuf_prealloc>
 801e268:	4607      	mov	r7, r0
 801e26a:	2800      	cmp	r0, #0
 801e26c:	f000 80ad 	beq.w	801e3ca <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801e270:	8943      	ldrh	r3, [r0, #10]
 801e272:	42ab      	cmp	r3, r5
 801e274:	f0c0 80a1 	bcc.w	801e3ba <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801e278:	9b07      	ldr	r3, [sp, #28]
 801e27a:	462a      	mov	r2, r5
 801e27c:	6878      	ldr	r0, [r7, #4]
 801e27e:	1919      	adds	r1, r3, r4
 801e280:	f005 fc70 	bl	8023b64 <memcpy>
    queuelen += pbuf_clen(p);
 801e284:	4638      	mov	r0, r7
 801e286:	f7fc fb8b 	bl	801a9a0 <pbuf_clen>
 801e28a:	4430      	add	r0, r6
 801e28c:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801e28e:	2e09      	cmp	r6, #9
 801e290:	d9b4      	bls.n	801e1fc <tcp_write+0x170>
      pbuf_free(p);
 801e292:	4638      	mov	r0, r7
 801e294:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e298:	f7fc fb6e 	bl	801a978 <pbuf_free>
      goto memerr;
 801e29c:	e097      	b.n	801e3ce <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	f000 80b6 	beq.w	801e410 <tcp_write+0x384>
 801e2a4:	4b65      	ldr	r3, [pc, #404]	; (801e43c <tcp_write+0x3b0>)
 801e2a6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801e2aa:	4967      	ldr	r1, [pc, #412]	; (801e448 <tcp_write+0x3bc>)
 801e2ac:	4865      	ldr	r0, [pc, #404]	; (801e444 <tcp_write+0x3b8>)
 801e2ae:	f006 fc1d 	bl	8024aec <iprintf>
  queuelen = pcb->snd_queuelen;
 801e2b2:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801e2b6:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801e2ba:	f1b8 0f00 	cmp.w	r8, #0
 801e2be:	f47f af24 	bne.w	801e10a <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801e2c2:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	f040 80ac 	bne.w	801e424 <tcp_write+0x398>
  while (pos < len) {
 801e2cc:	f1ba 0f00 	cmp.w	sl, #0
 801e2d0:	f000 81c7 	beq.w	801e662 <tcp_write+0x5d6>
          extendlen = seglen;
 801e2d4:	2400      	movs	r4, #0
 801e2d6:	940d      	str	r4, [sp, #52]	; 0x34
 801e2d8:	940c      	str	r4, [sp, #48]	; 0x30
 801e2da:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801e2de:	e75b      	b.n	801e198 <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801e2e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2e4:	459a      	cmp	sl, r3
 801e2e6:	f67f af50 	bls.w	801e18a <tcp_write+0xfe>
 801e2ea:	2c00      	cmp	r4, #0
 801e2ec:	f43f af4d 	beq.w	801e18a <tcp_write+0xfe>
 801e2f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e2f2:	8912      	ldrh	r2, [r2, #8]
 801e2f4:	920d      	str	r2, [sp, #52]	; 0x34
 801e2f6:	2a00      	cmp	r2, #0
 801e2f8:	f000 809c 	beq.w	801e434 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e2fc:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e300:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e302:	42a7      	cmp	r7, r4
 801e304:	bfa8      	it	ge
 801e306:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e308:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e30a:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e30c:	f100 8187 	bmi.w	801e61e <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801e310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e312:	685a      	ldr	r2, [r3, #4]
 801e314:	4613      	mov	r3, r2
 801e316:	6812      	ldr	r2, [r2, #0]
 801e318:	2a00      	cmp	r2, #0
 801e31a:	d1fb      	bne.n	801e314 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e31c:	920c      	str	r2, [sp, #48]	; 0x30
 801e31e:	7b1a      	ldrb	r2, [r3, #12]
 801e320:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801e324:	d106      	bne.n	801e334 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801e326:	895a      	ldrh	r2, [r3, #10]
 801e328:	685b      	ldr	r3, [r3, #4]
 801e32a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e32c:	9a07      	ldr	r2, [sp, #28]
 801e32e:	429a      	cmp	r2, r3
 801e330:	f000 8167 	beq.w	801e602 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801e334:	2201      	movs	r2, #1
 801e336:	4629      	mov	r1, r5
 801e338:	2000      	movs	r0, #0
 801e33a:	f7fc f967 	bl	801a60c <pbuf_alloc>
 801e33e:	900c      	str	r0, [sp, #48]	; 0x30
 801e340:	2800      	cmp	r0, #0
 801e342:	f000 813e 	beq.w	801e5c2 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801e346:	9b07      	ldr	r3, [sp, #28]
 801e348:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e34a:	440b      	add	r3, r1
 801e34c:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801e34e:	f7fc fb27 	bl	801a9a0 <pbuf_clen>
 801e352:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801e354:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801e356:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801e358:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801e35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e35c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e35e:	18ec      	adds	r4, r5, r3
 801e360:	b2a4      	uxth	r4, r4
 801e362:	e716      	b.n	801e192 <tcp_write+0x106>
    pos += seglen;
 801e364:	442c      	add	r4, r5
 801e366:	9005      	str	r0, [sp, #20]
 801e368:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801e36a:	45a2      	cmp	sl, r4
 801e36c:	f63f af62 	bhi.w	801e234 <tcp_write+0x1a8>
 801e370:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801e374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e376:	2b00      	cmp	r3, #0
 801e378:	f000 80db 	beq.w	801e532 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 801e37c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e37e:	6854      	ldr	r4, [r2, #4]
 801e380:	2c00      	cmp	r4, #0
 801e382:	f000 8090 	beq.w	801e4a6 <tcp_write+0x41a>
 801e386:	469b      	mov	fp, r3
 801e388:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801e38a:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801e38c:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801e38e:	445b      	add	r3, fp
 801e390:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801e392:	2a00      	cmp	r2, #0
 801e394:	d079      	beq.n	801e48a <tcp_write+0x3fe>
  u16_t extendlen = 0;
 801e396:	4614      	mov	r4, r2
 801e398:	e7f7      	b.n	801e38a <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801e39a:	4b28      	ldr	r3, [pc, #160]	; (801e43c <tcp_write+0x3b0>)
 801e39c:	f240 2271 	movw	r2, #625	; 0x271
 801e3a0:	492a      	ldr	r1, [pc, #168]	; (801e44c <tcp_write+0x3c0>)
 801e3a2:	4828      	ldr	r0, [pc, #160]	; (801e444 <tcp_write+0x3b8>)
 801e3a4:	f006 fba2 	bl	8024aec <iprintf>
 801e3a8:	e707      	b.n	801e1ba <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e3aa:	4b24      	ldr	r3, [pc, #144]	; (801e43c <tcp_write+0x3b0>)
 801e3ac:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e3b0:	4927      	ldr	r1, [pc, #156]	; (801e450 <tcp_write+0x3c4>)
 801e3b2:	4824      	ldr	r0, [pc, #144]	; (801e444 <tcp_write+0x3b8>)
 801e3b4:	f006 fb9a 	bl	8024aec <iprintf>
 801e3b8:	e735      	b.n	801e226 <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801e3ba:	4b20      	ldr	r3, [pc, #128]	; (801e43c <tcp_write+0x3b0>)
 801e3bc:	f240 2266 	movw	r2, #614	; 0x266
 801e3c0:	4924      	ldr	r1, [pc, #144]	; (801e454 <tcp_write+0x3c8>)
 801e3c2:	4820      	ldr	r0, [pc, #128]	; (801e444 <tcp_write+0x3b8>)
 801e3c4:	f006 fb92 	bl	8024aec <iprintf>
 801e3c8:	e756      	b.n	801e278 <tcp_write+0x1ec>
 801e3ca:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e3ce:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801e3d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e3d6:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801e3da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e3dc:	b113      	cbz	r3, 801e3e4 <tcp_write+0x358>
    pbuf_free(concat_p);
 801e3de:	4618      	mov	r0, r3
 801e3e0:	f7fc faca 	bl	801a978 <pbuf_free>
  if (queue != NULL) {
 801e3e4:	f1b8 0f00 	cmp.w	r8, #0
 801e3e8:	d002      	beq.n	801e3f0 <tcp_write+0x364>
    tcp_segs_free(queue);
 801e3ea:	4640      	mov	r0, r8
 801e3ec:	f7fd f820 	bl	801b430 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801e3f0:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801e3f4:	b13b      	cbz	r3, 801e406 <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e3f6:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801e3fa:	b923      	cbnz	r3, 801e406 <tcp_write+0x37a>
 801e3fc:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801e400:	2b00      	cmp	r3, #0
 801e402:	f000 808c 	beq.w	801e51e <tcp_write+0x492>
  return ERR_MEM;
 801e406:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e40a:	b011      	add	sp, #68	; 0x44
 801e40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801e410:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801e414:	2b00      	cmp	r3, #0
 801e416:	f47f af45 	bne.w	801e2a4 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801e41a:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801e41e:	2b00      	cmp	r3, #0
 801e420:	f43f af58 	beq.w	801e2d4 <tcp_write+0x248>
 801e424:	4b05      	ldr	r3, [pc, #20]	; (801e43c <tcp_write+0x3b0>)
 801e426:	f240 224a 	movw	r2, #586	; 0x24a
 801e42a:	490b      	ldr	r1, [pc, #44]	; (801e458 <tcp_write+0x3cc>)
 801e42c:	4805      	ldr	r0, [pc, #20]	; (801e444 <tcp_write+0x3b8>)
 801e42e:	f006 fb5d 	bl	8024aec <iprintf>
 801e432:	e74b      	b.n	801e2cc <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 801e434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e436:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e438:	930c      	str	r3, [sp, #48]	; 0x30
 801e43a:	e6ad      	b.n	801e198 <tcp_write+0x10c>
 801e43c:	08043b6c 	.word	0x08043b6c
 801e440:	08043da8 	.word	0x08043da8
 801e444:	0802b818 	.word	0x0802b818
 801e448:	08043d3c 	.word	0x08043d3c
 801e44c:	08043e64 	.word	0x08043e64
 801e450:	08043e74 	.word	0x08043e74
 801e454:	08043e24 	.word	0x08043e24
 801e458:	08043df4 	.word	0x08043df4
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801e45c:	4b94      	ldr	r3, [pc, #592]	; (801e6b0 <tcp_write+0x624>)
 801e45e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801e462:	4994      	ldr	r1, [pc, #592]	; (801e6b4 <tcp_write+0x628>)
 801e464:	4894      	ldr	r0, [pc, #592]	; (801e6b8 <tcp_write+0x62c>)
 801e466:	f006 fb41 	bl	8024aec <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801e46a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e46e:	930a      	str	r3, [sp, #40]	; 0x28
 801e470:	e66a      	b.n	801e148 <tcp_write+0xbc>
 801e472:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e474:	e735      	b.n	801e2e2 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e476:	4b8e      	ldr	r3, [pc, #568]	; (801e6b0 <tcp_write+0x624>)
 801e478:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801e47c:	498f      	ldr	r1, [pc, #572]	; (801e6bc <tcp_write+0x630>)
 801e47e:	488e      	ldr	r0, [pc, #568]	; (801e6b8 <tcp_write+0x62c>)
 801e480:	f006 fb34 	bl	8024aec <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e486:	891b      	ldrh	r3, [r3, #8]
 801e488:	e64f      	b.n	801e12a <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801e48a:	8963      	ldrh	r3, [r4, #10]
 801e48c:	465a      	mov	r2, fp
 801e48e:	6860      	ldr	r0, [r4, #4]
 801e490:	4629      	mov	r1, r5
 801e492:	4418      	add	r0, r3
 801e494:	f005 fb66 	bl	8023b64 <memcpy>
        p->len += oversize_used;
 801e498:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e49a:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801e49c:	445b      	add	r3, fp
 801e49e:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e4a0:	2a00      	cmp	r2, #0
 801e4a2:	f47f af78 	bne.w	801e396 <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 801e4a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e4a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e4aa:	8913      	ldrh	r3, [r2, #8]
 801e4ac:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 801e4ae:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801e4b2:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 801e4b4:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801e4b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d061      	beq.n	801e582 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 801e4be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e4c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e4c2:	6860      	ldr	r0, [r4, #4]
 801e4c4:	4629      	mov	r1, r5
 801e4c6:	f7fc fa89 	bl	801a9dc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801e4ca:	892a      	ldrh	r2, [r5, #8]
 801e4cc:	8923      	ldrh	r3, [r4, #8]
 801e4ce:	4413      	add	r3, r2
 801e4d0:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801e4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e4d4:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801e4d8:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 801e4dc:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 801e4e0:	4453      	add	r3, sl
 801e4e2:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801e4e6:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801e4ea:	eba3 0a0a 	sub.w	sl, r3, sl
 801e4ee:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801e4f2:	b11e      	cbz	r6, 801e4fc <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 801e4f4:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d036      	beq.n	801e56a <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801e4fc:	b12f      	cbz	r7, 801e50a <tcp_write+0x47e>
 801e4fe:	68fb      	ldr	r3, [r7, #12]
 801e500:	b11b      	cbz	r3, 801e50a <tcp_write+0x47e>
 801e502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e504:	f012 0502 	ands.w	r5, r2, #2
 801e508:	d025      	beq.n	801e556 <tcp_write+0x4ca>
  return ERR_OK;
 801e50a:	2000      	movs	r0, #0
}
 801e50c:	b011      	add	sp, #68	; 0x44
 801e50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801e512:	4618      	mov	r0, r3
 801e514:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e518:	f7fc fa2e 	bl	801a978 <pbuf_free>
        goto memerr;
 801e51c:	e757      	b.n	801e3ce <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e51e:	4b64      	ldr	r3, [pc, #400]	; (801e6b0 <tcp_write+0x624>)
 801e520:	f240 3227 	movw	r2, #807	; 0x327
 801e524:	4966      	ldr	r1, [pc, #408]	; (801e6c0 <tcp_write+0x634>)
 801e526:	4864      	ldr	r0, [pc, #400]	; (801e6b8 <tcp_write+0x62c>)
 801e528:	f006 fae0 	bl	8024aec <iprintf>
  return ERR_MEM;
 801e52c:	f04f 30ff 	mov.w	r0, #4294967295
 801e530:	e76b      	b.n	801e40a <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801e532:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e536:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801e53a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	d051      	beq.n	801e5e4 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801e540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e542:	2b00      	cmp	r3, #0
 801e544:	d1bb      	bne.n	801e4be <tcp_write+0x432>
 801e546:	4b5a      	ldr	r3, [pc, #360]	; (801e6b0 <tcp_write+0x624>)
 801e548:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801e54c:	495d      	ldr	r1, [pc, #372]	; (801e6c4 <tcp_write+0x638>)
 801e54e:	485a      	ldr	r0, [pc, #360]	; (801e6b8 <tcp_write+0x62c>)
 801e550:	f006 facc 	bl	8024aec <iprintf>
 801e554:	e7b3      	b.n	801e4be <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801e556:	2008      	movs	r0, #8
 801e558:	899c      	ldrh	r4, [r3, #12]
 801e55a:	f7fa f9ed 	bl	8018938 <lwip_htons>
 801e55e:	4602      	mov	r2, r0
 801e560:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801e562:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801e564:	4314      	orrs	r4, r2
 801e566:	819c      	strh	r4, [r3, #12]
 801e568:	e74f      	b.n	801e40a <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 801e56a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801e56e:	2b00      	cmp	r3, #0
 801e570:	d1c4      	bne.n	801e4fc <tcp_write+0x470>
 801e572:	4b4f      	ldr	r3, [pc, #316]	; (801e6b0 <tcp_write+0x624>)
 801e574:	f240 3212 	movw	r2, #786	; 0x312
 801e578:	4951      	ldr	r1, [pc, #324]	; (801e6c0 <tcp_write+0x634>)
 801e57a:	484f      	ldr	r0, [pc, #316]	; (801e6b8 <tcp_write+0x62c>)
 801e57c:	f006 fab6 	bl	8024aec <iprintf>
 801e580:	e7bc      	b.n	801e4fc <tcp_write+0x470>
  } else if (extendlen > 0) {
 801e582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e584:	2b00      	cmp	r3, #0
 801e586:	d0a4      	beq.n	801e4d2 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801e588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e58a:	6859      	ldr	r1, [r3, #4]
 801e58c:	2900      	cmp	r1, #0
 801e58e:	d02e      	beq.n	801e5ee <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e590:	680a      	ldr	r2, [r1, #0]
 801e592:	2a00      	cmp	r2, #0
 801e594:	d07f      	beq.n	801e696 <tcp_write+0x60a>
 801e596:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e598:	e000      	b.n	801e59c <tcp_write+0x510>
 801e59a:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801e59c:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e59e:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801e5a0:	4423      	add	r3, r4
 801e5a2:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e5a4:	4611      	mov	r1, r2
 801e5a6:	2800      	cmp	r0, #0
 801e5a8:	d1f7      	bne.n	801e59a <tcp_write+0x50e>
    p->tot_len += extendlen;
 801e5aa:	8913      	ldrh	r3, [r2, #8]
 801e5ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e5ae:	440b      	add	r3, r1
 801e5b0:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 801e5b2:	8953      	ldrh	r3, [r2, #10]
 801e5b4:	440b      	add	r3, r1
 801e5b6:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 801e5b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e5ba:	8913      	ldrh	r3, [r2, #8]
 801e5bc:	440b      	add	r3, r1
 801e5be:	8113      	strh	r3, [r2, #8]
 801e5c0:	e787      	b.n	801e4d2 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e5c2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801e5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e5ca:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801e5ce:	e70f      	b.n	801e3f0 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e5d0:	4b37      	ldr	r3, [pc, #220]	; (801e6b0 <tcp_write+0x624>)
 801e5d2:	f240 1255 	movw	r2, #341	; 0x155
 801e5d6:	493c      	ldr	r1, [pc, #240]	; (801e6c8 <tcp_write+0x63c>)
 801e5d8:	4837      	ldr	r0, [pc, #220]	; (801e6b8 <tcp_write+0x62c>)
 801e5da:	f006 fa87 	bl	8024aec <iprintf>
  queuelen = pcb->snd_queuelen;
 801e5de:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801e5e2:	e668      	b.n	801e2b6 <tcp_write+0x22a>
  } else if (extendlen > 0) {
 801e5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5e6:	b19b      	cbz	r3, 801e610 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801e5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d1cc      	bne.n	801e588 <tcp_write+0x4fc>
 801e5ee:	4b30      	ldr	r3, [pc, #192]	; (801e6b0 <tcp_write+0x624>)
 801e5f0:	f240 22e6 	movw	r2, #742	; 0x2e6
 801e5f4:	4935      	ldr	r1, [pc, #212]	; (801e6cc <tcp_write+0x640>)
 801e5f6:	4830      	ldr	r0, [pc, #192]	; (801e6b8 <tcp_write+0x62c>)
 801e5f8:	f006 fa78 	bl	8024aec <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e5fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5fe:	6859      	ldr	r1, [r3, #4]
 801e600:	e7c6      	b.n	801e590 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801e602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e604:	bba3      	cbnz	r3, 801e670 <tcp_write+0x5e4>
          extendlen = seglen;
 801e606:	950d      	str	r5, [sp, #52]	; 0x34
 801e608:	e6a7      	b.n	801e35a <tcp_write+0x2ce>
    return ERR_CONN;
 801e60a:	f06f 000a 	mvn.w	r0, #10
 801e60e:	e6fc      	b.n	801e40a <tcp_write+0x37e>
  if (last_unsent == NULL) {
 801e610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e612:	2b00      	cmp	r3, #0
 801e614:	f47f af5d 	bne.w	801e4d2 <tcp_write+0x446>
    pcb->unsent = queue;
 801e618:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801e61c:	e75c      	b.n	801e4d8 <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801e61e:	e9cd 9300 	strd	r9, r3, [sp]
 801e622:	2301      	movs	r3, #1
 801e624:	4622      	mov	r2, r4
 801e626:	4629      	mov	r1, r5
 801e628:	2000      	movs	r0, #0
 801e62a:	9302      	str	r3, [sp, #8]
 801e62c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801e630:	f7ff fb92 	bl	801dd58 <tcp_pbuf_prealloc>
 801e634:	4603      	mov	r3, r0
 801e636:	4604      	mov	r4, r0
 801e638:	900c      	str	r0, [sp, #48]	; 0x30
 801e63a:	2800      	cmp	r0, #0
 801e63c:	d0c1      	beq.n	801e5c2 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801e63e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e640:	462a      	mov	r2, r5
 801e642:	9907      	ldr	r1, [sp, #28]
 801e644:	4401      	add	r1, r0
 801e646:	6858      	ldr	r0, [r3, #4]
 801e648:	f005 fa8c 	bl	8023b64 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801e64c:	4620      	mov	r0, r4
 801e64e:	e67e      	b.n	801e34e <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e650:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801e654:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e65c:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801e660:	e6d3      	b.n	801e40a <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801e662:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e666:	46d0      	mov	r8, sl
 801e668:	4657      	mov	r7, sl
 801e66a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801e66e:	e7d3      	b.n	801e618 <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801e670:	4b0f      	ldr	r3, [pc, #60]	; (801e6b0 <tcp_write+0x624>)
 801e672:	f240 2231 	movw	r2, #561	; 0x231
 801e676:	4916      	ldr	r1, [pc, #88]	; (801e6d0 <tcp_write+0x644>)
 801e678:	480f      	ldr	r0, [pc, #60]	; (801e6b8 <tcp_write+0x62c>)
 801e67a:	f006 fa37 	bl	8024aec <iprintf>
          extendlen = seglen;
 801e67e:	950d      	str	r5, [sp, #52]	; 0x34
 801e680:	e66b      	b.n	801e35a <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801e682:	4b0b      	ldr	r3, [pc, #44]	; (801e6b0 <tcp_write+0x624>)
 801e684:	f240 12ad 	movw	r2, #429	; 0x1ad
 801e688:	4912      	ldr	r1, [pc, #72]	; (801e6d4 <tcp_write+0x648>)
 801e68a:	480b      	ldr	r0, [pc, #44]	; (801e6b8 <tcp_write+0x62c>)
 801e68c:	f006 fa2e 	bl	8024aec <iprintf>
 801e690:	f06f 000f 	mvn.w	r0, #15
 801e694:	e6b9      	b.n	801e40a <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e696:	460a      	mov	r2, r1
 801e698:	e787      	b.n	801e5aa <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801e69a:	4b05      	ldr	r3, [pc, #20]	; (801e6b0 <tcp_write+0x624>)
 801e69c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801e6a0:	490d      	ldr	r1, [pc, #52]	; (801e6d8 <tcp_write+0x64c>)
 801e6a2:	4805      	ldr	r0, [pc, #20]	; (801e6b8 <tcp_write+0x62c>)
 801e6a4:	f006 fa22 	bl	8024aec <iprintf>
 801e6a8:	f06f 000f 	mvn.w	r0, #15
 801e6ac:	e6ad      	b.n	801e40a <tcp_write+0x37e>
 801e6ae:	bf00      	nop
 801e6b0:	08043b6c 	.word	0x08043b6c
 801e6b4:	08043d88 	.word	0x08043d88
 801e6b8:	0802b818 	.word	0x0802b818
 801e6bc:	08043d70 	.word	0x08043d70
 801e6c0:	08043ef8 	.word	0x08043ef8
 801e6c4:	08043e88 	.word	0x08043e88
 801e6c8:	08043d00 	.word	0x08043d00
 801e6cc:	08043ec0 	.word	0x08043ec0
 801e6d0:	08043dc8 	.word	0x08043dc8
 801e6d4:	08043ccc 	.word	0x08043ccc
 801e6d8:	08043cb4 	.word	0x08043cb4

0801e6dc <tcp_split_unsent_seg>:
{
 801e6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e6e0:	4605      	mov	r5, r0
{
 801e6e2:	b083      	sub	sp, #12
 801e6e4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e6e6:	2800      	cmp	r0, #0
 801e6e8:	f000 80a7 	beq.w	801e83a <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 801e6ec:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801e6ee:	b376      	cbz	r6, 801e74e <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 801e6f0:	2c00      	cmp	r4, #0
 801e6f2:	f000 80b3 	beq.w	801e85c <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 801e6f6:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801e6fa:	45a1      	cmp	r9, r4
 801e6fc:	f240 8099 	bls.w	801e832 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801e700:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801e702:	42a3      	cmp	r3, r4
 801e704:	d328      	bcc.n	801e758 <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 801e706:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801e70a:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801e70e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e712:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801e714:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801e718:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801e71c:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801e720:	eb08 010b 	add.w	r1, r8, fp
 801e724:	b289      	uxth	r1, r1
 801e726:	f7fb ff71 	bl	801a60c <pbuf_alloc>
  if (p == NULL) {
 801e72a:	4607      	mov	r7, r0
 801e72c:	b178      	cbz	r0, 801e74e <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 801e72e:	6870      	ldr	r0, [r6, #4]
 801e730:	8932      	ldrh	r2, [r6, #8]
 801e732:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801e734:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 801e736:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801e738:	4642      	mov	r2, r8
 801e73a:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 801e73c:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801e73e:	b29b      	uxth	r3, r3
 801e740:	f7fc f9be 	bl	801aac0 <pbuf_copy_partial>
 801e744:	4540      	cmp	r0, r8
 801e746:	d01d      	beq.n	801e784 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 801e748:	4638      	mov	r0, r7
 801e74a:	f7fc f915 	bl	801a978 <pbuf_free>
  return ERR_MEM;
 801e74e:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e752:	b003      	add	sp, #12
 801e754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801e758:	4b45      	ldr	r3, [pc, #276]	; (801e870 <tcp_split_unsent_seg+0x194>)
 801e75a:	f240 325b 	movw	r2, #859	; 0x35b
 801e75e:	4945      	ldr	r1, [pc, #276]	; (801e874 <tcp_split_unsent_seg+0x198>)
 801e760:	4845      	ldr	r0, [pc, #276]	; (801e878 <tcp_split_unsent_seg+0x19c>)
 801e762:	f006 f9c3 	bl	8024aec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801e766:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801e76a:	f1b9 0f00 	cmp.w	r9, #0
 801e76e:	d1ca      	bne.n	801e706 <tcp_split_unsent_seg+0x2a>
 801e770:	4b3f      	ldr	r3, [pc, #252]	; (801e870 <tcp_split_unsent_seg+0x194>)
 801e772:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801e776:	4941      	ldr	r1, [pc, #260]	; (801e87c <tcp_split_unsent_seg+0x1a0>)
 801e778:	483f      	ldr	r0, [pc, #252]	; (801e878 <tcp_split_unsent_seg+0x19c>)
 801e77a:	f006 f9b7 	bl	8024aec <iprintf>
  remainder = useg->len - split;
 801e77e:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801e782:	e7c0      	b.n	801e706 <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801e784:	68f3      	ldr	r3, [r6, #12]
 801e786:	8998      	ldrh	r0, [r3, #12]
 801e788:	f7fa f8d6 	bl	8018938 <lwip_htons>
  if (split_flags & TCP_PSH) {
 801e78c:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801e790:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 801e794:	d159      	bne.n	801e84a <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801e796:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801e79a:	f018 0f01 	tst.w	r8, #1
 801e79e:	d003      	beq.n	801e7a8 <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 801e7a0:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801e7a4:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801e7a8:	68f3      	ldr	r3, [r6, #12]
 801e7aa:	6858      	ldr	r0, [r3, #4]
 801e7ac:	f7fa f8c8 	bl	8018940 <lwip_htonl>
 801e7b0:	f8cd a000 	str.w	sl, [sp]
 801e7b4:	1823      	adds	r3, r4, r0
 801e7b6:	465a      	mov	r2, fp
 801e7b8:	4639      	mov	r1, r7
 801e7ba:	4628      	mov	r0, r5
 801e7bc:	f7ff fb1c 	bl	801ddf8 <tcp_create_segment>
  if (seg == NULL) {
 801e7c0:	4682      	mov	sl, r0
 801e7c2:	2800      	cmp	r0, #0
 801e7c4:	d0c0      	beq.n	801e748 <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801e7c6:	6870      	ldr	r0, [r6, #4]
 801e7c8:	eba4 0409 	sub.w	r4, r4, r9
 801e7cc:	f7fc f8e8 	bl	801a9a0 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801e7d0:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801e7d2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801e7d6:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801e7d8:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801e7da:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801e7dc:	4610      	mov	r0, r2
 801e7de:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801e7e0:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801e7e4:	b289      	uxth	r1, r1
 801e7e6:	f7fb ffcb 	bl	801a780 <pbuf_realloc>
  useg->len -= remainder;
 801e7ea:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e7ec:	4640      	mov	r0, r8
  useg->len -= remainder;
 801e7ee:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e7f0:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 801e7f2:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e7f4:	899c      	ldrh	r4, [r3, #12]
 801e7f6:	f7fa f89f 	bl	8018938 <lwip_htons>
 801e7fa:	68f3      	ldr	r3, [r6, #12]
 801e7fc:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e7fe:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e800:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e802:	f7fc f8cd 	bl	801a9a0 <pbuf_clen>
 801e806:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801e80a:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e80c:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e810:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e814:	f7fc f8c4 	bl	801a9a0 <pbuf_clen>
 801e818:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801e81c:	4418      	add	r0, r3
  seg->next = useg->next;
 801e81e:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e820:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 801e824:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 801e828:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801e82c:	f8da 3000 	ldr.w	r3, [sl]
 801e830:	b183      	cbz	r3, 801e854 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 801e832:	2000      	movs	r0, #0
}
 801e834:	b003      	add	sp, #12
 801e836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e83a:	4b0d      	ldr	r3, [pc, #52]	; (801e870 <tcp_split_unsent_seg+0x194>)
 801e83c:	f240 324b 	movw	r2, #843	; 0x34b
 801e840:	490f      	ldr	r1, [pc, #60]	; (801e880 <tcp_split_unsent_seg+0x1a4>)
 801e842:	480d      	ldr	r0, [pc, #52]	; (801e878 <tcp_split_unsent_seg+0x19c>)
 801e844:	f006 f952 	bl	8024aec <iprintf>
 801e848:	e750      	b.n	801e6ec <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801e84a:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801e84e:	f04f 0b08 	mov.w	fp, #8
 801e852:	e7a2      	b.n	801e79a <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 801e854:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 801e856:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801e85a:	e77a      	b.n	801e752 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801e85c:	4b04      	ldr	r3, [pc, #16]	; (801e870 <tcp_split_unsent_seg+0x194>)
 801e85e:	f240 3253 	movw	r2, #851	; 0x353
 801e862:	4908      	ldr	r1, [pc, #32]	; (801e884 <tcp_split_unsent_seg+0x1a8>)
 801e864:	4804      	ldr	r0, [pc, #16]	; (801e878 <tcp_split_unsent_seg+0x19c>)
 801e866:	f006 f941 	bl	8024aec <iprintf>
    return ERR_VAL;
 801e86a:	f06f 0005 	mvn.w	r0, #5
 801e86e:	e770      	b.n	801e752 <tcp_split_unsent_seg+0x76>
 801e870:	08043b6c 	.word	0x08043b6c
 801e874:	08043f60 	.word	0x08043f60
 801e878:	0802b818 	.word	0x0802b818
 801e87c:	08043f70 	.word	0x08043f70
 801e880:	08043f18 	.word	0x08043f18
 801e884:	08043f3c 	.word	0x08043f3c

0801e888 <tcp_enqueue_flags>:
{
 801e888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e88c:	f011 0703 	ands.w	r7, r1, #3
{
 801e890:	b082      	sub	sp, #8
 801e892:	460d      	mov	r5, r1
 801e894:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e896:	d05e      	beq.n	801e956 <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e898:	2c00      	cmp	r4, #0
 801e89a:	d065      	beq.n	801e968 <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 801e89c:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e8a0:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 801e8a4:	d049      	beq.n	801e93a <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e8a6:	2104      	movs	r1, #4
 801e8a8:	2036      	movs	r0, #54	; 0x36
 801e8aa:	f7fb feaf 	bl	801a60c <pbuf_alloc>
 801e8ae:	4606      	mov	r6, r0
 801e8b0:	2800      	cmp	r0, #0
 801e8b2:	d049      	beq.n	801e948 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e8b4:	8943      	ldrh	r3, [r0, #10]
 801e8b6:	2b03      	cmp	r3, #3
 801e8b8:	d872      	bhi.n	801e9a0 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 801e8ba:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e8be:	4b40      	ldr	r3, [pc, #256]	; (801e9c0 <tcp_enqueue_flags+0x138>)
 801e8c0:	f240 4239 	movw	r2, #1081	; 0x439
 801e8c4:	493f      	ldr	r1, [pc, #252]	; (801e9c4 <tcp_enqueue_flags+0x13c>)
 801e8c6:	4840      	ldr	r0, [pc, #256]	; (801e9c8 <tcp_enqueue_flags+0x140>)
 801e8c8:	f006 f910 	bl	8024aec <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e8cc:	4631      	mov	r1, r6
 801e8ce:	f8cd 8000 	str.w	r8, [sp]
 801e8d2:	462a      	mov	r2, r5
 801e8d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801e8d6:	4620      	mov	r0, r4
 801e8d8:	f7ff fa8e 	bl	801ddf8 <tcp_create_segment>
 801e8dc:	4606      	mov	r6, r0
 801e8de:	2800      	cmp	r0, #0
 801e8e0:	d032      	beq.n	801e948 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e8e2:	68c3      	ldr	r3, [r0, #12]
 801e8e4:	079a      	lsls	r2, r3, #30
 801e8e6:	d153      	bne.n	801e990 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e8e8:	8933      	ldrh	r3, [r6, #8]
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	d144      	bne.n	801e978 <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 801e8ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d04b      	beq.n	801e98c <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e8f4:	461a      	mov	r2, r3
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	d1fb      	bne.n	801e8f4 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 801e8fc:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801e8fe:	2300      	movs	r3, #0
 801e900:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e904:	b117      	cbz	r7, 801e90c <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 801e906:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801e908:	3301      	adds	r3, #1
 801e90a:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801e90c:	07eb      	lsls	r3, r5, #31
 801e90e:	d503      	bpl.n	801e918 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 801e910:	8b63      	ldrh	r3, [r4, #26]
 801e912:	f043 0320 	orr.w	r3, r3, #32
 801e916:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e918:	6870      	ldr	r0, [r6, #4]
 801e91a:	f7fc f841 	bl	801a9a0 <pbuf_clen>
 801e91e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801e922:	4418      	add	r0, r3
 801e924:	b280      	uxth	r0, r0
 801e926:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801e92a:	b118      	cbz	r0, 801e934 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e92c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801e92e:	2800      	cmp	r0, #0
 801e930:	d039      	beq.n	801e9a6 <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 801e932:	2000      	movs	r0, #0
}
 801e934:	b002      	add	sp, #8
 801e936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e93a:	4641      	mov	r1, r8
 801e93c:	2036      	movs	r0, #54	; 0x36
 801e93e:	f7fb fe65 	bl	801a60c <pbuf_alloc>
 801e942:	4606      	mov	r6, r0
 801e944:	2800      	cmp	r0, #0
 801e946:	d1c1      	bne.n	801e8cc <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e948:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 801e94a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e952:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 801e954:	e7ee      	b.n	801e934 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e956:	4b1a      	ldr	r3, [pc, #104]	; (801e9c0 <tcp_enqueue_flags+0x138>)
 801e958:	f240 4211 	movw	r2, #1041	; 0x411
 801e95c:	491b      	ldr	r1, [pc, #108]	; (801e9cc <tcp_enqueue_flags+0x144>)
 801e95e:	481a      	ldr	r0, [pc, #104]	; (801e9c8 <tcp_enqueue_flags+0x140>)
 801e960:	f006 f8c4 	bl	8024aec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e964:	2c00      	cmp	r4, #0
 801e966:	d199      	bne.n	801e89c <tcp_enqueue_flags+0x14>
 801e968:	4b15      	ldr	r3, [pc, #84]	; (801e9c0 <tcp_enqueue_flags+0x138>)
 801e96a:	f240 4213 	movw	r2, #1043	; 0x413
 801e96e:	4918      	ldr	r1, [pc, #96]	; (801e9d0 <tcp_enqueue_flags+0x148>)
 801e970:	4815      	ldr	r0, [pc, #84]	; (801e9c8 <tcp_enqueue_flags+0x140>)
 801e972:	f006 f8bb 	bl	8024aec <iprintf>
 801e976:	e791      	b.n	801e89c <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e978:	4b11      	ldr	r3, [pc, #68]	; (801e9c0 <tcp_enqueue_flags+0x138>)
 801e97a:	f240 4243 	movw	r2, #1091	; 0x443
 801e97e:	4915      	ldr	r1, [pc, #84]	; (801e9d4 <tcp_enqueue_flags+0x14c>)
 801e980:	4811      	ldr	r0, [pc, #68]	; (801e9c8 <tcp_enqueue_flags+0x140>)
 801e982:	f006 f8b3 	bl	8024aec <iprintf>
  if (pcb->unsent == NULL) {
 801e986:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801e988:	2b00      	cmp	r3, #0
 801e98a:	d1b3      	bne.n	801e8f4 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801e98c:	66e6      	str	r6, [r4, #108]	; 0x6c
 801e98e:	e7b6      	b.n	801e8fe <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e990:	4b0b      	ldr	r3, [pc, #44]	; (801e9c0 <tcp_enqueue_flags+0x138>)
 801e992:	f240 4242 	movw	r2, #1090	; 0x442
 801e996:	4910      	ldr	r1, [pc, #64]	; (801e9d8 <tcp_enqueue_flags+0x150>)
 801e998:	480b      	ldr	r0, [pc, #44]	; (801e9c8 <tcp_enqueue_flags+0x140>)
 801e99a:	f006 f8a7 	bl	8024aec <iprintf>
 801e99e:	e7a3      	b.n	801e8e8 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 801e9a0:	f04f 0801 	mov.w	r8, #1
 801e9a4:	e792      	b.n	801e8cc <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e9a6:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801e9a8:	2c00      	cmp	r4, #0
 801e9aa:	d1c3      	bne.n	801e934 <tcp_enqueue_flags+0xac>
 801e9ac:	4b04      	ldr	r3, [pc, #16]	; (801e9c0 <tcp_enqueue_flags+0x138>)
 801e9ae:	f240 4265 	movw	r2, #1125	; 0x465
 801e9b2:	490a      	ldr	r1, [pc, #40]	; (801e9dc <tcp_enqueue_flags+0x154>)
 801e9b4:	4804      	ldr	r0, [pc, #16]	; (801e9c8 <tcp_enqueue_flags+0x140>)
 801e9b6:	f006 f899 	bl	8024aec <iprintf>
  return ERR_OK;
 801e9ba:	4620      	mov	r0, r4
 801e9bc:	e7ba      	b.n	801e934 <tcp_enqueue_flags+0xac>
 801e9be:	bf00      	nop
 801e9c0:	08043b6c 	.word	0x08043b6c
 801e9c4:	08043ff8 	.word	0x08043ff8
 801e9c8:	0802b818 	.word	0x0802b818
 801e9cc:	08043f80 	.word	0x08043f80
 801e9d0:	08043fd8 	.word	0x08043fd8
 801e9d4:	0804404c 	.word	0x0804404c
 801e9d8:	08044034 	.word	0x08044034
 801e9dc:	08044078 	.word	0x08044078

0801e9e0 <tcp_send_fin>:
{
 801e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e9e2:	4606      	mov	r6, r0
 801e9e4:	b188      	cbz	r0, 801ea0a <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801e9e6:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 801e9e8:	b14c      	cbz	r4, 801e9fe <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e9ea:	4625      	mov	r5, r4
 801e9ec:	6824      	ldr	r4, [r4, #0]
 801e9ee:	2c00      	cmp	r4, #0
 801e9f0:	d1fb      	bne.n	801e9ea <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e9f2:	68eb      	ldr	r3, [r5, #12]
 801e9f4:	8998      	ldrh	r0, [r3, #12]
 801e9f6:	f7f9 ff9f 	bl	8018938 <lwip_htons>
 801e9fa:	0743      	lsls	r3, r0, #29
 801e9fc:	d00d      	beq.n	801ea1a <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e9fe:	4630      	mov	r0, r6
 801ea00:	2101      	movs	r1, #1
}
 801ea02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ea06:	f7ff bf3f 	b.w	801e888 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ea0a:	4b0b      	ldr	r3, [pc, #44]	; (801ea38 <tcp_send_fin+0x58>)
 801ea0c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ea10:	490a      	ldr	r1, [pc, #40]	; (801ea3c <tcp_send_fin+0x5c>)
 801ea12:	480b      	ldr	r0, [pc, #44]	; (801ea40 <tcp_send_fin+0x60>)
 801ea14:	f006 f86a 	bl	8024aec <iprintf>
 801ea18:	e7e5      	b.n	801e9e6 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ea1a:	68eb      	ldr	r3, [r5, #12]
 801ea1c:	2001      	movs	r0, #1
 801ea1e:	899f      	ldrh	r7, [r3, #12]
 801ea20:	f7f9 ff8a 	bl	8018938 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801ea24:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ea26:	4338      	orrs	r0, r7
 801ea28:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ea2a:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ea2e:	8190      	strh	r0, [r2, #12]
}
 801ea30:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 801ea32:	8373      	strh	r3, [r6, #26]
}
 801ea34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea36:	bf00      	nop
 801ea38:	08043b6c 	.word	0x08043b6c
 801ea3c:	080440a0 	.word	0x080440a0
 801ea40:	0802b818 	.word	0x0802b818

0801ea44 <tcp_rexmit_rto_prepare>:
{
 801ea44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ea46:	4605      	mov	r5, r0
 801ea48:	2800      	cmp	r0, #0
 801ea4a:	d032      	beq.n	801eab2 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 801ea4c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 801ea4e:	b132      	cbz	r2, 801ea5e <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ea50:	6813      	ldr	r3, [r2, #0]
 801ea52:	4614      	mov	r4, r2
 801ea54:	b15b      	cbz	r3, 801ea6e <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 801ea56:	6863      	ldr	r3, [r4, #4]
 801ea58:	7b9b      	ldrb	r3, [r3, #14]
 801ea5a:	2b01      	cmp	r3, #1
 801ea5c:	d003      	beq.n	801ea66 <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 801ea5e:	f06f 0305 	mvn.w	r3, #5
}
 801ea62:	4618      	mov	r0, r3
 801ea64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ea66:	6824      	ldr	r4, [r4, #0]
 801ea68:	6823      	ldr	r3, [r4, #0]
 801ea6a:	2b00      	cmp	r3, #0
 801ea6c:	d1f3      	bne.n	801ea56 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 801ea6e:	6863      	ldr	r3, [r4, #4]
 801ea70:	7b9b      	ldrb	r3, [r3, #14]
 801ea72:	2b01      	cmp	r3, #1
 801ea74:	d1f3      	bne.n	801ea5e <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 801ea76:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 801ea78:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 801ea7a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 801ea7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801ea80:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 801ea82:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ea84:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 801ea86:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ea8a:	6858      	ldr	r0, [r3, #4]
 801ea8c:	f7f9 ff58 	bl	8018940 <lwip_htonl>
 801ea90:	68e3      	ldr	r3, [r4, #12]
 801ea92:	4606      	mov	r6, r0
 801ea94:	8924      	ldrh	r4, [r4, #8]
 801ea96:	8998      	ldrh	r0, [r3, #12]
 801ea98:	f7f9 ff4e 	bl	8018938 <lwip_htons>
 801ea9c:	f010 0003 	ands.w	r0, r0, #3
 801eaa0:	4426      	add	r6, r4
  return ERR_OK;
 801eaa2:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801eaa4:	bf18      	it	ne
 801eaa6:	2001      	movne	r0, #1
  pcb->rttest = 0;
 801eaa8:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801eaaa:	4430      	add	r0, r6
 801eaac:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 801eaae:	4618      	mov	r0, r3
 801eab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801eab2:	4b04      	ldr	r3, [pc, #16]	; (801eac4 <tcp_rexmit_rto_prepare+0x80>)
 801eab4:	f240 6263 	movw	r2, #1635	; 0x663
 801eab8:	4903      	ldr	r1, [pc, #12]	; (801eac8 <tcp_rexmit_rto_prepare+0x84>)
 801eaba:	4804      	ldr	r0, [pc, #16]	; (801eacc <tcp_rexmit_rto_prepare+0x88>)
 801eabc:	f006 f816 	bl	8024aec <iprintf>
 801eac0:	e7c4      	b.n	801ea4c <tcp_rexmit_rto_prepare+0x8>
 801eac2:	bf00      	nop
 801eac4:	08043b6c 	.word	0x08043b6c
 801eac8:	080440bc 	.word	0x080440bc
 801eacc:	0802b818 	.word	0x0802b818

0801ead0 <tcp_rexmit>:
{
 801ead0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ead2:	4607      	mov	r7, r0
 801ead4:	2800      	cmp	r0, #0
 801ead6:	d031      	beq.n	801eb3c <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 801ead8:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801eada:	b34e      	cbz	r6, 801eb30 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 801eadc:	6873      	ldr	r3, [r6, #4]
 801eade:	7b9b      	ldrb	r3, [r3, #14]
 801eae0:	2b01      	cmp	r3, #1
 801eae2:	d125      	bne.n	801eb30 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 801eae4:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801eae6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801eaea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801eaec:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801eaee:	b91b      	cbnz	r3, 801eaf8 <tcp_rexmit+0x28>
 801eaf0:	e00f      	b.n	801eb12 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801eaf2:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801eaf4:	682b      	ldr	r3, [r5, #0]
 801eaf6:	b163      	cbz	r3, 801eb12 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801eaf8:	68db      	ldr	r3, [r3, #12]
 801eafa:	6858      	ldr	r0, [r3, #4]
 801eafc:	f7f9 ff20 	bl	8018940 <lwip_htonl>
 801eb00:	68f3      	ldr	r3, [r6, #12]
 801eb02:	4604      	mov	r4, r0
 801eb04:	6858      	ldr	r0, [r3, #4]
 801eb06:	f7f9 ff1b 	bl	8018940 <lwip_htonl>
 801eb0a:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 801eb0c:	2c00      	cmp	r4, #0
 801eb0e:	dbf0      	blt.n	801eaf2 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 801eb10:	682b      	ldr	r3, [r5, #0]
 801eb12:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801eb14:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801eb16:	6833      	ldr	r3, [r6, #0]
 801eb18:	b16b      	cbz	r3, 801eb36 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 801eb1a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801eb1e:	2bff      	cmp	r3, #255	; 0xff
 801eb20:	d002      	beq.n	801eb28 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801eb22:	3301      	adds	r3, #1
 801eb24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801eb28:	2300      	movs	r3, #0
  return ERR_OK;
 801eb2a:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801eb2c:	637b      	str	r3, [r7, #52]	; 0x34
}
 801eb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801eb30:	f06f 0005 	mvn.w	r0, #5
}
 801eb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801eb36:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801eb3a:	e7ee      	b.n	801eb1a <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801eb3c:	4b03      	ldr	r3, [pc, #12]	; (801eb4c <tcp_rexmit+0x7c>)
 801eb3e:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801eb42:	4903      	ldr	r1, [pc, #12]	; (801eb50 <tcp_rexmit+0x80>)
 801eb44:	4803      	ldr	r0, [pc, #12]	; (801eb54 <tcp_rexmit+0x84>)
 801eb46:	f005 ffd1 	bl	8024aec <iprintf>
 801eb4a:	e7c5      	b.n	801ead8 <tcp_rexmit+0x8>
 801eb4c:	08043b6c 	.word	0x08043b6c
 801eb50:	080440e0 	.word	0x080440e0
 801eb54:	0802b818 	.word	0x0802b818

0801eb58 <tcp_rexmit_fast>:
{
 801eb58:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801eb5a:	4604      	mov	r4, r0
 801eb5c:	b340      	cbz	r0, 801ebb0 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801eb5e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801eb60:	b113      	cbz	r3, 801eb68 <tcp_rexmit_fast+0x10>
 801eb62:	8b63      	ldrh	r3, [r4, #26]
 801eb64:	075b      	lsls	r3, r3, #29
 801eb66:	d500      	bpl.n	801eb6a <tcp_rexmit_fast+0x12>
}
 801eb68:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801eb6a:	4620      	mov	r0, r4
 801eb6c:	f7ff ffb0 	bl	801ead0 <tcp_rexmit>
 801eb70:	2800      	cmp	r0, #0
 801eb72:	d1f9      	bne.n	801eb68 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eb74:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801eb78:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801eb7c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eb7e:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801eb80:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eb84:	bf28      	it	cs
 801eb86:	4619      	movcs	r1, r3
 801eb88:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801eb8a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eb8e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801eb92:	d902      	bls.n	801eb9a <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 801eb94:	b283      	uxth	r3, r0
 801eb96:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 801eb9a:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801eb9c:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801eb9e:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801eba2:	4413      	add	r3, r2
      pcb->rtime = 0;
 801eba4:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801eba6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ebaa:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 801ebac:	8622      	strh	r2, [r4, #48]	; 0x30
}
 801ebae:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ebb0:	4b03      	ldr	r3, [pc, #12]	; (801ebc0 <tcp_rexmit_fast+0x68>)
 801ebb2:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801ebb6:	4903      	ldr	r1, [pc, #12]	; (801ebc4 <tcp_rexmit_fast+0x6c>)
 801ebb8:	4803      	ldr	r0, [pc, #12]	; (801ebc8 <tcp_rexmit_fast+0x70>)
 801ebba:	f005 ff97 	bl	8024aec <iprintf>
 801ebbe:	e7ce      	b.n	801eb5e <tcp_rexmit_fast+0x6>
 801ebc0:	08043b6c 	.word	0x08043b6c
 801ebc4:	080440f8 	.word	0x080440f8
 801ebc8:	0802b818 	.word	0x0802b818

0801ebcc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ebcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ebd0:	b084      	sub	sp, #16
 801ebd2:	4607      	mov	r7, r0
 801ebd4:	460e      	mov	r6, r1
 801ebd6:	4615      	mov	r5, r2
 801ebd8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ebdc:	461c      	mov	r4, r3
{
 801ebde:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801ebe2:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ebe6:	b1fb      	cbz	r3, 801ec28 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ebe8:	f1b8 0f00 	cmp.w	r8, #0
 801ebec:	d026      	beq.n	801ec3c <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ebee:	4630      	mov	r0, r6
 801ebf0:	f7f9 fea6 	bl	8018940 <lwip_htonl>
 801ebf4:	2114      	movs	r1, #20
 801ebf6:	4602      	mov	r2, r0
 801ebf8:	4628      	mov	r0, r5
 801ebfa:	f246 0508 	movw	r5, #24584	; 0x6008
 801ebfe:	464b      	mov	r3, r9
 801ec00:	f8cd a000 	str.w	sl, [sp]
 801ec04:	e9cd 1501 	strd	r1, r5, [sp, #4]
 801ec08:	2100      	movs	r1, #0
 801ec0a:	f7ff f971 	bl	801def0 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ec0e:	4601      	mov	r1, r0
 801ec10:	b138      	cbz	r0, 801ec22 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ec12:	4643      	mov	r3, r8
 801ec14:	4622      	mov	r2, r4
 801ec16:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ec18:	b004      	add	sp, #16
 801ec1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ec1e:	f7ff b9d5 	b.w	801dfcc <tcp_output_control_segment>
}
 801ec22:	b004      	add	sp, #16
 801ec24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ec28:	4b08      	ldr	r3, [pc, #32]	; (801ec4c <tcp_rst+0x80>)
 801ec2a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801ec2e:	4908      	ldr	r1, [pc, #32]	; (801ec50 <tcp_rst+0x84>)
 801ec30:	4808      	ldr	r0, [pc, #32]	; (801ec54 <tcp_rst+0x88>)
 801ec32:	f005 ff5b 	bl	8024aec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ec36:	f1b8 0f00 	cmp.w	r8, #0
 801ec3a:	d1d8      	bne.n	801ebee <tcp_rst+0x22>
 801ec3c:	4b03      	ldr	r3, [pc, #12]	; (801ec4c <tcp_rst+0x80>)
 801ec3e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801ec42:	4905      	ldr	r1, [pc, #20]	; (801ec58 <tcp_rst+0x8c>)
 801ec44:	4803      	ldr	r0, [pc, #12]	; (801ec54 <tcp_rst+0x88>)
 801ec46:	f005 ff51 	bl	8024aec <iprintf>
 801ec4a:	e7d0      	b.n	801ebee <tcp_rst+0x22>
 801ec4c:	08043b6c 	.word	0x08043b6c
 801ec50:	08044118 	.word	0x08044118
 801ec54:	0802b818 	.word	0x0802b818
 801ec58:	08044134 	.word	0x08044134

0801ec5c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801ec5c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ec5e:	4604      	mov	r4, r0
 801ec60:	b1c0      	cbz	r0, 801ec94 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801ec62:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801ec64:	f7f9 fe6c 	bl	8018940 <lwip_htonl>
 801ec68:	2100      	movs	r1, #0
 801ec6a:	4602      	mov	r2, r0
 801ec6c:	4620      	mov	r0, r4
 801ec6e:	f7ff f985 	bl	801df7c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801ec72:	4601      	mov	r1, r0
 801ec74:	b1b0      	cbz	r0, 801eca4 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ec76:	1d23      	adds	r3, r4, #4
 801ec78:	4622      	mov	r2, r4
 801ec7a:	4620      	mov	r0, r4
 801ec7c:	f7ff f9a6 	bl	801dfcc <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ec80:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801ec82:	b118      	cbz	r0, 801ec8c <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ec84:	f043 0303 	orr.w	r3, r3, #3
 801ec88:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 801ec8a:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ec8c:	f023 0303 	bic.w	r3, r3, #3
 801ec90:	8363      	strh	r3, [r4, #26]
}
 801ec92:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ec94:	4b07      	ldr	r3, [pc, #28]	; (801ecb4 <tcp_send_empty_ack+0x58>)
 801ec96:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801ec9a:	4907      	ldr	r1, [pc, #28]	; (801ecb8 <tcp_send_empty_ack+0x5c>)
 801ec9c:	4807      	ldr	r0, [pc, #28]	; (801ecbc <tcp_send_empty_ack+0x60>)
 801ec9e:	f005 ff25 	bl	8024aec <iprintf>
 801eca2:	e7de      	b.n	801ec62 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801eca4:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801eca6:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ecaa:	f043 0303 	orr.w	r3, r3, #3
 801ecae:	8363      	strh	r3, [r4, #26]
}
 801ecb0:	bd10      	pop	{r4, pc}
 801ecb2:	bf00      	nop
 801ecb4:	08043b6c 	.word	0x08043b6c
 801ecb8:	08044150 	.word	0x08044150
 801ecbc:	0802b818 	.word	0x0802b818

0801ecc0 <tcp_output>:
{
 801ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ecc4:	4604      	mov	r4, r0
{
 801ecc6:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ecc8:	2800      	cmp	r0, #0
 801ecca:	f000 81bc 	beq.w	801f046 <tcp_output+0x386>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801ecce:	7d23      	ldrb	r3, [r4, #20]
 801ecd0:	2b01      	cmp	r3, #1
 801ecd2:	f000 8173 	beq.w	801efbc <tcp_output+0x2fc>
  if (tcp_input_pcb == pcb) {
 801ecd6:	4bb3      	ldr	r3, [pc, #716]	; (801efa4 <tcp_output+0x2e4>)
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	42a3      	cmp	r3, r4
 801ecdc:	f000 817a 	beq.w	801efd4 <tcp_output+0x314>
  seg = pcb->unsent;
 801ece0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801ece2:	b345      	cbz	r5, 801ed36 <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801ece4:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801ece6:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801ecea:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 801ecee:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801ecf2:	2800      	cmp	r0, #0
 801ecf4:	f040 81af 	bne.w	801f056 <tcp_output+0x396>
    return ip_route(src, dst);
 801ecf8:	4648      	mov	r0, r9
 801ecfa:	f003 fa2b 	bl	8022154 <ip4_route>
 801ecfe:	4682      	mov	sl, r0
  if (netif == NULL) {
 801ed00:	f1ba 0f00 	cmp.w	sl, #0
 801ed04:	f000 81b9 	beq.w	801f07a <tcp_output+0x3ba>
  if (ip_addr_isany(&pcb->local_ip)) {
 801ed08:	6823      	ldr	r3, [r4, #0]
 801ed0a:	b913      	cbnz	r3, 801ed12 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ed0c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ed10:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ed12:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801ed14:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ed16:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801ed18:	bf28      	it	cs
 801ed1a:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ed1c:	f7f9 fe10 	bl	8018940 <lwip_htonl>
 801ed20:	892b      	ldrh	r3, [r5, #8]
 801ed22:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801ed24:	1a9b      	subs	r3, r3, r2
 801ed26:	4418      	add	r0, r3
 801ed28:	42b8      	cmp	r0, r7
 801ed2a:	d90f      	bls.n	801ed4c <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ed2c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801ed30:	42bb      	cmp	r3, r7
 801ed32:	f000 8159 	beq.w	801efe8 <tcp_output+0x328>
    if (pcb->flags & TF_ACK_NOW) {
 801ed36:	8b62      	ldrh	r2, [r4, #26]
 801ed38:	0791      	lsls	r1, r2, #30
 801ed3a:	f100 814f 	bmi.w	801efdc <tcp_output+0x31c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ed3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 801ed42:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ed44:	8362      	strh	r2, [r4, #26]
}
 801ed46:	b005      	add	sp, #20
 801ed48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 801ed4c:	2300      	movs	r3, #0
 801ed4e:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 801ed52:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	f000 8157 	beq.w	801f008 <tcp_output+0x348>
    for (; useg->next != NULL; useg = useg->next);
 801ed5a:	4698      	mov	r8, r3
 801ed5c:	681b      	ldr	r3, [r3, #0]
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	d1fb      	bne.n	801ed5a <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 801ed62:	464e      	mov	r6, r9
 801ed64:	e0b7      	b.n	801eed6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ed66:	68eb      	ldr	r3, [r5, #12]
 801ed68:	2010      	movs	r0, #16
 801ed6a:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801ed6e:	f7f9 fde3 	bl	8018938 <lwip_htons>
 801ed72:	ea49 0000 	orr.w	r0, r9, r0
 801ed76:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801ed7a:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 801ed7e:	686b      	ldr	r3, [r5, #4]
 801ed80:	7b9b      	ldrb	r3, [r3, #14]
 801ed82:	2b01      	cmp	r3, #1
 801ed84:	d160      	bne.n	801ee48 <tcp_output+0x188>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ed86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ed88:	f7f9 fdda 	bl	8018940 <lwip_htonl>
 801ed8c:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ed90:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801ed92:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801ed96:	f7f9 fdcf 	bl	8018938 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ed9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801ed9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ed9e:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801eda2:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801eda4:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801eda8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801edaa:	7aab      	ldrb	r3, [r5, #10]
 801edac:	07db      	lsls	r3, r3, #31
 801edae:	f100 80d0 	bmi.w	801ef52 <tcp_output+0x292>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801edb2:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 801edb6:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801edba:	2b00      	cmp	r3, #0
 801edbc:	da01      	bge.n	801edc2 <tcp_output+0x102>
    pcb->rtime = 0;
 801edbe:	2300      	movs	r3, #0
 801edc0:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801edc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	f000 80b9 	beq.w	801ef3c <tcp_output+0x27c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801edca:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801edcc:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801edd0:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 801edd2:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801edd4:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 801edd8:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801edda:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801edde:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 801ede0:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 801ede2:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 801ede4:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801ede6:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 801ede8:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801edea:	f889 c010 	strb.w	ip, [r9, #16]
 801edee:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801edf2:	7aab      	ldrb	r3, [r5, #10]
 801edf4:	009b      	lsls	r3, r3, #2
 801edf6:	f003 0304 	and.w	r3, r3, #4
 801edfa:	3314      	adds	r3, #20
 801edfc:	444b      	add	r3, r9
 801edfe:	459b      	cmp	fp, r3
 801ee00:	d00a      	beq.n	801ee18 <tcp_output+0x158>
 801ee02:	f240 621c 	movw	r2, #1564	; 0x61c
 801ee06:	4b68      	ldr	r3, [pc, #416]	; (801efa8 <tcp_output+0x2e8>)
 801ee08:	4968      	ldr	r1, [pc, #416]	; (801efac <tcp_output+0x2ec>)
 801ee0a:	4869      	ldr	r0, [pc, #420]	; (801efb0 <tcp_output+0x2f0>)
 801ee0c:	f005 fe6e 	bl	8024aec <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801ee10:	6868      	ldr	r0, [r5, #4]
 801ee12:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801ee16:	8902      	ldrh	r2, [r0, #8]
 801ee18:	4623      	mov	r3, r4
 801ee1a:	2106      	movs	r1, #6
 801ee1c:	9600      	str	r6, [sp, #0]
 801ee1e:	f7fa fb1f 	bl	8019460 <ip_chksum_pseudo>
 801ee22:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ee26:	6868      	ldr	r0, [r5, #4]
 801ee28:	4632      	mov	r2, r6
 801ee2a:	f8cd a008 	str.w	sl, [sp, #8]
 801ee2e:	4621      	mov	r1, r4
 801ee30:	7aa3      	ldrb	r3, [r4, #10]
 801ee32:	9300      	str	r3, [sp, #0]
 801ee34:	2306      	movs	r3, #6
 801ee36:	9301      	str	r3, [sp, #4]
 801ee38:	7ae3      	ldrb	r3, [r4, #11]
 801ee3a:	f003 fb55 	bl	80224e8 <ip4_output_if>
    if (err != ERR_OK) {
 801ee3e:	2800      	cmp	r0, #0
 801ee40:	f040 8116 	bne.w	801f070 <tcp_output+0x3b0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ee44:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 801ee48:	682b      	ldr	r3, [r5, #0]
 801ee4a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801ee4c:	7d23      	ldrb	r3, [r4, #20]
 801ee4e:	2b02      	cmp	r3, #2
 801ee50:	d003      	beq.n	801ee5a <tcp_output+0x19a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ee52:	8b63      	ldrh	r3, [r4, #26]
 801ee54:	f023 0303 	bic.w	r3, r3, #3
 801ee58:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ee5a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801ee5e:	f7f9 fd6f 	bl	8018940 <lwip_htonl>
 801ee62:	68eb      	ldr	r3, [r5, #12]
 801ee64:	4681      	mov	r9, r0
 801ee66:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801ee6a:	8998      	ldrh	r0, [r3, #12]
 801ee6c:	f7f9 fd64 	bl	8018938 <lwip_htons>
 801ee70:	f010 0003 	ands.w	r0, r0, #3
 801ee74:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ee76:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ee78:	bf18      	it	ne
 801ee7a:	2001      	movne	r0, #1
 801ee7c:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801ee7e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ee82:	1a1b      	subs	r3, r3, r0
 801ee84:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 801ee86:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 801ee88:	bfb8      	it	lt
 801ee8a:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801ee8c:	8998      	ldrh	r0, [r3, #12]
 801ee8e:	f7f9 fd53 	bl	8018938 <lwip_htons>
 801ee92:	f010 0003 	ands.w	r0, r0, #3
 801ee96:	bf18      	it	ne
 801ee98:	2001      	movne	r0, #1
 801ee9a:	eb10 0f09 	cmn.w	r0, r9
 801ee9e:	d046      	beq.n	801ef2e <tcp_output+0x26e>
      seg->next = NULL;
 801eea0:	2300      	movs	r3, #0
 801eea2:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 801eea4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	d045      	beq.n	801ef36 <tcp_output+0x276>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801eeaa:	68eb      	ldr	r3, [r5, #12]
 801eeac:	6858      	ldr	r0, [r3, #4]
 801eeae:	f7f9 fd47 	bl	8018940 <lwip_htonl>
 801eeb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801eeb6:	4681      	mov	r9, r0
 801eeb8:	6858      	ldr	r0, [r3, #4]
 801eeba:	f7f9 fd41 	bl	8018940 <lwip_htonl>
 801eebe:	eba9 0000 	sub.w	r0, r9, r0
 801eec2:	2800      	cmp	r0, #0
 801eec4:	f2c0 80a2 	blt.w	801f00c <tcp_output+0x34c>
          useg->next = seg;
 801eec8:	f8c8 5000 	str.w	r5, [r8]
 801eecc:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801eece:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801eed0:	2d00      	cmp	r5, #0
 801eed2:	f000 80c4 	beq.w	801f05e <tcp_output+0x39e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801eed6:	68eb      	ldr	r3, [r5, #12]
 801eed8:	6858      	ldr	r0, [r3, #4]
 801eeda:	f7f9 fd31 	bl	8018940 <lwip_htonl>
 801eede:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801eee0:	1ac0      	subs	r0, r0, r3
 801eee2:	892b      	ldrh	r3, [r5, #8]
 801eee4:	4418      	add	r0, r3
  while (seg != NULL &&
 801eee6:	42b8      	cmp	r0, r7
 801eee8:	f200 80bb 	bhi.w	801f062 <tcp_output+0x3a2>
    LWIP_ASSERT("RST not expected here!",
 801eeec:	68eb      	ldr	r3, [r5, #12]
 801eeee:	8998      	ldrh	r0, [r3, #12]
 801eef0:	f7f9 fd22 	bl	8018938 <lwip_htons>
 801eef4:	0742      	lsls	r2, r0, #29
 801eef6:	d412      	bmi.n	801ef1e <tcp_output+0x25e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801eef8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801eefa:	b14b      	cbz	r3, 801ef10 <tcp_output+0x250>
 801eefc:	8b63      	ldrh	r3, [r4, #26]
 801eefe:	f013 0f44 	tst.w	r3, #68	; 0x44
 801ef02:	461a      	mov	r2, r3
 801ef04:	d104      	bne.n	801ef10 <tcp_output+0x250>
 801ef06:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801ef08:	2900      	cmp	r1, #0
 801ef0a:	d038      	beq.n	801ef7e <tcp_output+0x2be>
 801ef0c:	6808      	ldr	r0, [r1, #0]
 801ef0e:	b388      	cbz	r0, 801ef74 <tcp_output+0x2b4>
    if (pcb->state != SYN_SENT) {
 801ef10:	7d23      	ldrb	r3, [r4, #20]
 801ef12:	2b02      	cmp	r3, #2
 801ef14:	f47f af27 	bne.w	801ed66 <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ef18:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801ef1c:	e72f      	b.n	801ed7e <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 801ef1e:	4b22      	ldr	r3, [pc, #136]	; (801efa8 <tcp_output+0x2e8>)
 801ef20:	f240 5236 	movw	r2, #1334	; 0x536
 801ef24:	4923      	ldr	r1, [pc, #140]	; (801efb4 <tcp_output+0x2f4>)
 801ef26:	4822      	ldr	r0, [pc, #136]	; (801efb0 <tcp_output+0x2f0>)
 801ef28:	f005 fde0 	bl	8024aec <iprintf>
 801ef2c:	e7e4      	b.n	801eef8 <tcp_output+0x238>
      tcp_seg_free(seg);
 801ef2e:	4628      	mov	r0, r5
 801ef30:	f7fc fa90 	bl	801b454 <tcp_seg_free>
 801ef34:	e7cb      	b.n	801eece <tcp_output+0x20e>
        pcb->unacked = seg;
 801ef36:	46a8      	mov	r8, r5
 801ef38:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801ef3a:	e7c8      	b.n	801eece <tcp_output+0x20e>
    pcb->rttest = tcp_ticks;
 801ef3c:	4b1e      	ldr	r3, [pc, #120]	; (801efb8 <tcp_output+0x2f8>)
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801ef42:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801ef46:	f7f9 fcfb 	bl	8018940 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801ef4a:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801ef4e:	63a0      	str	r0, [r4, #56]	; 0x38
 801ef50:	e73b      	b.n	801edca <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ef52:	4632      	mov	r2, r6
 801ef54:	4651      	mov	r1, sl
 801ef56:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801ef5a:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ef5e:	f7fd fa75 	bl	801c44c <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ef62:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801ef66:	f7f9 fceb 	bl	8018940 <lwip_htonl>
 801ef6a:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801ef6e:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801ef72:	e720      	b.n	801edb6 <tcp_output+0xf6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ef74:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801ef78:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801ef7a:	4584      	cmp	ip, r0
 801ef7c:	d2c8      	bcs.n	801ef10 <tcp_output+0x250>
 801ef7e:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801ef82:	2800      	cmp	r0, #0
 801ef84:	d0c4      	beq.n	801ef10 <tcp_output+0x250>
 801ef86:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801ef8a:	2808      	cmp	r0, #8
 801ef8c:	d8c0      	bhi.n	801ef10 <tcp_output+0x250>
 801ef8e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801ef92:	d1bd      	bne.n	801ef10 <tcp_output+0x250>
  if (pcb->unsent == NULL) {
 801ef94:	2900      	cmp	r1, #0
 801ef96:	f47f aed2 	bne.w	801ed3e <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 801ef9a:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ef9c:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 801ef9e:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801efa2:	e6cc      	b.n	801ed3e <tcp_output+0x7e>
 801efa4:	2002dbf0 	.word	0x2002dbf0
 801efa8:	08043b6c 	.word	0x08043b6c
 801efac:	080441c8 	.word	0x080441c8
 801efb0:	0802b818 	.word	0x0802b818
 801efb4:	080441b0 	.word	0x080441b0
 801efb8:	2002dbbc 	.word	0x2002dbbc
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801efbc:	4b30      	ldr	r3, [pc, #192]	; (801f080 <tcp_output+0x3c0>)
 801efbe:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801efc2:	4930      	ldr	r1, [pc, #192]	; (801f084 <tcp_output+0x3c4>)
 801efc4:	4830      	ldr	r0, [pc, #192]	; (801f088 <tcp_output+0x3c8>)
 801efc6:	f005 fd91 	bl	8024aec <iprintf>
  if (tcp_input_pcb == pcb) {
 801efca:	4b30      	ldr	r3, [pc, #192]	; (801f08c <tcp_output+0x3cc>)
 801efcc:	681b      	ldr	r3, [r3, #0]
 801efce:	42a3      	cmp	r3, r4
 801efd0:	f47f ae86 	bne.w	801ece0 <tcp_output+0x20>
    return ERR_OK;
 801efd4:	2000      	movs	r0, #0
}
 801efd6:	b005      	add	sp, #20
 801efd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 801efdc:	4620      	mov	r0, r4
}
 801efde:	b005      	add	sp, #20
 801efe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801efe4:	f7ff be3a 	b.w	801ec5c <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801efe8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801efea:	2b00      	cmp	r3, #0
 801efec:	f47f aea3 	bne.w	801ed36 <tcp_output+0x76>
 801eff0:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801eff4:	2b00      	cmp	r3, #0
 801eff6:	f47f ae9e 	bne.w	801ed36 <tcp_output+0x76>
      pcb->persist_cnt = 0;
 801effa:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 801effe:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801f002:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801f006:	e696      	b.n	801ed36 <tcp_output+0x76>
 801f008:	4698      	mov	r8, r3
 801f00a:	e6aa      	b.n	801ed62 <tcp_output+0xa2>
          while (*cur_seg &&
 801f00c:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801f00e:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 801f012:	b92b      	cbnz	r3, 801f020 <tcp_output+0x360>
 801f014:	e013      	b.n	801f03e <tcp_output+0x37e>
            cur_seg = &((*cur_seg)->next );
 801f016:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 801f01a:	f8db 3000 	ldr.w	r3, [fp]
 801f01e:	b173      	cbz	r3, 801f03e <tcp_output+0x37e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f020:	68db      	ldr	r3, [r3, #12]
 801f022:	6858      	ldr	r0, [r3, #4]
 801f024:	f7f9 fc8c 	bl	8018940 <lwip_htonl>
 801f028:	68eb      	ldr	r3, [r5, #12]
 801f02a:	4681      	mov	r9, r0
 801f02c:	6858      	ldr	r0, [r3, #4]
 801f02e:	f7f9 fc87 	bl	8018940 <lwip_htonl>
 801f032:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801f036:	2800      	cmp	r0, #0
 801f038:	dbed      	blt.n	801f016 <tcp_output+0x356>
          seg->next = (*cur_seg);
 801f03a:	f8db 3000 	ldr.w	r3, [fp]
 801f03e:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801f040:	f8cb 5000 	str.w	r5, [fp]
 801f044:	e743      	b.n	801eece <tcp_output+0x20e>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f046:	4b0e      	ldr	r3, [pc, #56]	; (801f080 <tcp_output+0x3c0>)
 801f048:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801f04c:	4910      	ldr	r1, [pc, #64]	; (801f090 <tcp_output+0x3d0>)
 801f04e:	480e      	ldr	r0, [pc, #56]	; (801f088 <tcp_output+0x3c8>)
 801f050:	f005 fd4c 	bl	8024aec <iprintf>
 801f054:	e63b      	b.n	801ecce <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 801f056:	f7fb f985 	bl	801a364 <netif_get_by_index>
 801f05a:	4682      	mov	sl, r0
 801f05c:	e650      	b.n	801ed00 <tcp_output+0x40>
 801f05e:	8b63      	ldrh	r3, [r4, #26]
 801f060:	e79b      	b.n	801ef9a <tcp_output+0x2da>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f062:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 801f064:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f066:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 801f068:	2900      	cmp	r1, #0
 801f06a:	f47f ae68 	bne.w	801ed3e <tcp_output+0x7e>
 801f06e:	e794      	b.n	801ef9a <tcp_output+0x2da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f070:	8b63      	ldrh	r3, [r4, #26]
 801f072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f076:	8363      	strh	r3, [r4, #26]
      return err;
 801f078:	e665      	b.n	801ed46 <tcp_output+0x86>
    return ERR_RTE;
 801f07a:	f06f 0003 	mvn.w	r0, #3
 801f07e:	e662      	b.n	801ed46 <tcp_output+0x86>
 801f080:	08043b6c 	.word	0x08043b6c
 801f084:	08044188 	.word	0x08044188
 801f088:	0802b818 	.word	0x0802b818
 801f08c:	2002dbf0 	.word	0x2002dbf0
 801f090:	08044170 	.word	0x08044170

0801f094 <tcp_rexmit_rto_commit>:
{
 801f094:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f096:	4604      	mov	r4, r0
 801f098:	b158      	cbz	r0, 801f0b2 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801f09a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801f09e:	2bff      	cmp	r3, #255	; 0xff
 801f0a0:	d002      	beq.n	801f0a8 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801f0a2:	3301      	adds	r3, #1
 801f0a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801f0a8:	4620      	mov	r0, r4
}
 801f0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801f0ae:	f7ff be07 	b.w	801ecc0 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f0b2:	4b04      	ldr	r3, [pc, #16]	; (801f0c4 <tcp_rexmit_rto_commit+0x30>)
 801f0b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f0b8:	4903      	ldr	r1, [pc, #12]	; (801f0c8 <tcp_rexmit_rto_commit+0x34>)
 801f0ba:	4804      	ldr	r0, [pc, #16]	; (801f0cc <tcp_rexmit_rto_commit+0x38>)
 801f0bc:	f005 fd16 	bl	8024aec <iprintf>
 801f0c0:	e7eb      	b.n	801f09a <tcp_rexmit_rto_commit+0x6>
 801f0c2:	bf00      	nop
 801f0c4:	08043b6c 	.word	0x08043b6c
 801f0c8:	080441dc 	.word	0x080441dc
 801f0cc:	0802b818 	.word	0x0802b818

0801f0d0 <tcp_rexmit_rto>:
{
 801f0d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f0d2:	4604      	mov	r4, r0
 801f0d4:	b118      	cbz	r0, 801f0de <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f0d6:	f7ff fcb5 	bl	801ea44 <tcp_rexmit_rto_prepare>
 801f0da:	b198      	cbz	r0, 801f104 <tcp_rexmit_rto+0x34>
}
 801f0dc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f0de:	4b0f      	ldr	r3, [pc, #60]	; (801f11c <tcp_rexmit_rto+0x4c>)
 801f0e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801f0e4:	490e      	ldr	r1, [pc, #56]	; (801f120 <tcp_rexmit_rto+0x50>)
 801f0e6:	480f      	ldr	r0, [pc, #60]	; (801f124 <tcp_rexmit_rto+0x54>)
 801f0e8:	f005 fd00 	bl	8024aec <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f0ec:	4620      	mov	r0, r4
 801f0ee:	f7ff fca9 	bl	801ea44 <tcp_rexmit_rto_prepare>
 801f0f2:	2800      	cmp	r0, #0
 801f0f4:	d1f2      	bne.n	801f0dc <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f0f6:	4b09      	ldr	r3, [pc, #36]	; (801f11c <tcp_rexmit_rto+0x4c>)
 801f0f8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f0fc:	490a      	ldr	r1, [pc, #40]	; (801f128 <tcp_rexmit_rto+0x58>)
 801f0fe:	4809      	ldr	r0, [pc, #36]	; (801f124 <tcp_rexmit_rto+0x54>)
 801f100:	f005 fcf4 	bl	8024aec <iprintf>
  if (pcb->nrtx < 0xFF) {
 801f104:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801f108:	2bff      	cmp	r3, #255	; 0xff
 801f10a:	d002      	beq.n	801f112 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 801f10c:	3301      	adds	r3, #1
 801f10e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801f112:	4620      	mov	r0, r4
}
 801f114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801f118:	f7ff bdd2 	b.w	801ecc0 <tcp_output>
 801f11c:	08043b6c 	.word	0x08043b6c
 801f120:	08044200 	.word	0x08044200
 801f124:	0802b818 	.word	0x0802b818
 801f128:	080441dc 	.word	0x080441dc

0801f12c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801f12c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f12e:	4604      	mov	r4, r0
 801f130:	b188      	cbz	r0, 801f156 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f132:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f134:	3801      	subs	r0, #1
 801f136:	f7f9 fc03 	bl	8018940 <lwip_htonl>
 801f13a:	2100      	movs	r1, #0
 801f13c:	4602      	mov	r2, r0
 801f13e:	4620      	mov	r0, r4
 801f140:	f7fe ff1c 	bl	801df7c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f144:	4601      	mov	r1, r0
 801f146:	b170      	cbz	r0, 801f166 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f148:	1d23      	adds	r3, r4, #4
 801f14a:	4622      	mov	r2, r4
 801f14c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801f14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f152:	f7fe bf3b 	b.w	801dfcc <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f156:	4b05      	ldr	r3, [pc, #20]	; (801f16c <tcp_keepalive+0x40>)
 801f158:	f640 0224 	movw	r2, #2084	; 0x824
 801f15c:	4904      	ldr	r1, [pc, #16]	; (801f170 <tcp_keepalive+0x44>)
 801f15e:	4805      	ldr	r0, [pc, #20]	; (801f174 <tcp_keepalive+0x48>)
 801f160:	f005 fcc4 	bl	8024aec <iprintf>
 801f164:	e7e5      	b.n	801f132 <tcp_keepalive+0x6>
}
 801f166:	f04f 30ff 	mov.w	r0, #4294967295
 801f16a:	bd10      	pop	{r4, pc}
 801f16c:	08043b6c 	.word	0x08043b6c
 801f170:	0804421c 	.word	0x0804421c
 801f174:	0802b818 	.word	0x0802b818

0801f178 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801f178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f17c:	4604      	mov	r4, r0
 801f17e:	2800      	cmp	r0, #0
 801f180:	d051      	beq.n	801f226 <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f182:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801f184:	2d00      	cmp	r5, #0
 801f186:	d04b      	beq.n	801f220 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f188:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801f18c:	2bff      	cmp	r3, #255	; 0xff
 801f18e:	d002      	beq.n	801f196 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801f190:	3301      	adds	r3, #1
 801f192:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f196:	68eb      	ldr	r3, [r5, #12]
 801f198:	8998      	ldrh	r0, [r3, #12]
 801f19a:	f7f9 fbcd 	bl	8018938 <lwip_htons>
 801f19e:	07c3      	lsls	r3, r0, #31
 801f1a0:	d527      	bpl.n	801f1f2 <tcp_zero_window_probe+0x7a>
 801f1a2:	8929      	ldrh	r1, [r5, #8]
 801f1a4:	bb29      	cbnz	r1, 801f1f2 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f1a6:	68eb      	ldr	r3, [r5, #12]
 801f1a8:	4620      	mov	r0, r4
 801f1aa:	685a      	ldr	r2, [r3, #4]
 801f1ac:	f7fe fee6 	bl	801df7c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f1b0:	4606      	mov	r6, r0
 801f1b2:	b388      	cbz	r0, 801f218 <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f1b4:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f1b8:	2011      	movs	r0, #17
 801f1ba:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801f1be:	f7f9 fbbb 	bl	8018938 <lwip_htons>
 801f1c2:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801f1c6:	4338      	orrs	r0, r7
 801f1c8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f1cc:	68eb      	ldr	r3, [r5, #12]
 801f1ce:	6858      	ldr	r0, [r3, #4]
 801f1d0:	f7f9 fbb6 	bl	8018940 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f1d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f1d6:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f1d8:	4622      	mov	r2, r4
 801f1da:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f1dc:	1a1b      	subs	r3, r3, r0
 801f1de:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f1e0:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 801f1e4:	bfb8      	it	lt
 801f1e6:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f1e8:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801f1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f1ee:	f7fe beed 	b.w	801dfcc <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f1f2:	68eb      	ldr	r3, [r5, #12]
 801f1f4:	2101      	movs	r1, #1
 801f1f6:	4620      	mov	r0, r4
 801f1f8:	685a      	ldr	r2, [r3, #4]
 801f1fa:	f7fe febf 	bl	801df7c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f1fe:	4606      	mov	r6, r0
 801f200:	b150      	cbz	r0, 801f218 <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f202:	6868      	ldr	r0, [r5, #4]
 801f204:	892a      	ldrh	r2, [r5, #8]
 801f206:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801f208:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f20a:	1a9b      	subs	r3, r3, r2
 801f20c:	2201      	movs	r2, #1
 801f20e:	3114      	adds	r1, #20
 801f210:	b29b      	uxth	r3, r3
 801f212:	f7fb fc55 	bl	801aac0 <pbuf_copy_partial>
 801f216:	e7d9      	b.n	801f1cc <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 801f218:	f04f 30ff 	mov.w	r0, #4294967295
}
 801f21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 801f220:	4628      	mov	r0, r5
}
 801f222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f226:	4b04      	ldr	r3, [pc, #16]	; (801f238 <tcp_zero_window_probe+0xc0>)
 801f228:	f640 024f 	movw	r2, #2127	; 0x84f
 801f22c:	4903      	ldr	r1, [pc, #12]	; (801f23c <tcp_zero_window_probe+0xc4>)
 801f22e:	4804      	ldr	r0, [pc, #16]	; (801f240 <tcp_zero_window_probe+0xc8>)
 801f230:	f005 fc5c 	bl	8024aec <iprintf>
 801f234:	e7a5      	b.n	801f182 <tcp_zero_window_probe+0xa>
 801f236:	bf00      	nop
 801f238:	08043b6c 	.word	0x08043b6c
 801f23c:	08044238 	.word	0x08044238
 801f240:	0802b818 	.word	0x0802b818

0801f244 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f244:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f246:	22bc      	movs	r2, #188	; 0xbc
{
 801f248:	b570      	push	{r4, r5, r6, lr}
 801f24a:	460e      	mov	r6, r1
 801f24c:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f24e:	4910      	ldr	r1, [pc, #64]	; (801f290 <sys_timeout_abs+0x4c>)
 801f250:	200c      	movs	r0, #12
{
 801f252:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f254:	f7fa fe5e 	bl	8019f14 <memp_malloc_fn>
  if (timeout == NULL) {
 801f258:	b190      	cbz	r0, 801f280 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 801f25a:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f25c:	490d      	ldr	r1, [pc, #52]	; (801f294 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 801f25e:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 801f260:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 801f262:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 801f266:	680b      	ldr	r3, [r1, #0]
 801f268:	b91b      	cbnz	r3, 801f272 <sys_timeout_abs+0x2e>
 801f26a:	e007      	b.n	801f27c <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f26c:	4619      	mov	r1, r3
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	b11b      	cbz	r3, 801f27a <sys_timeout_abs+0x36>
 801f272:	685a      	ldr	r2, [r3, #4]
 801f274:	1aa2      	subs	r2, r4, r2
 801f276:	2a00      	cmp	r2, #0
 801f278:	daf8      	bge.n	801f26c <sys_timeout_abs+0x28>
        timeout->next = t->next;
 801f27a:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801f27c:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801f27e:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f280:	4b03      	ldr	r3, [pc, #12]	; (801f290 <sys_timeout_abs+0x4c>)
 801f282:	22be      	movs	r2, #190	; 0xbe
 801f284:	4904      	ldr	r1, [pc, #16]	; (801f298 <sys_timeout_abs+0x54>)
 801f286:	4805      	ldr	r0, [pc, #20]	; (801f29c <sys_timeout_abs+0x58>)
}
 801f288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f28c:	f005 bc2e 	b.w	8024aec <iprintf>
 801f290:	0804425c 	.word	0x0804425c
 801f294:	2002dc0c 	.word	0x2002dc0c
 801f298:	08044290 	.word	0x08044290
 801f29c:	0802b818 	.word	0x0802b818

0801f2a0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f2a0:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f2a2:	6843      	ldr	r3, [r0, #4]
{
 801f2a4:	4604      	mov	r4, r0
  cyclic->handler();
 801f2a6:	4798      	blx	r3

  now = sys_now();
 801f2a8:	f7f4 fd98 	bl	8013ddc <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f2ac:	4b09      	ldr	r3, [pc, #36]	; (801f2d4 <lwip_cyclic_timer+0x34>)
 801f2ae:	6825      	ldr	r5, [r4, #0]
 801f2b0:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f2b2:	4909      	ldr	r1, [pc, #36]	; (801f2d8 <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f2b4:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f2b6:	1a1a      	subs	r2, r3, r0
 801f2b8:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f2ba:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f2bc:	da04      	bge.n	801f2c8 <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f2be:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f2c4:	f7ff bfbe 	b.w	801f244 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f2c8:	4618      	mov	r0, r3
}
 801f2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f2ce:	f7ff bfb9 	b.w	801f244 <sys_timeout_abs>
 801f2d2:	bf00      	nop
 801f2d4:	2002dc08 	.word	0x2002dc08
 801f2d8:	0801f2a1 	.word	0x0801f2a1

0801f2dc <tcpip_tcp_timer>:
{
 801f2dc:	b508      	push	{r3, lr}
  tcp_tmr();
 801f2de:	f7fd f887 	bl	801c3f0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f2e2:	4b09      	ldr	r3, [pc, #36]	; (801f308 <tcpip_tcp_timer+0x2c>)
 801f2e4:	681b      	ldr	r3, [r3, #0]
 801f2e6:	b143      	cbz	r3, 801f2fa <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f2e8:	f7f4 fd78 	bl	8013ddc <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f2ec:	2200      	movs	r2, #0
 801f2ee:	4907      	ldr	r1, [pc, #28]	; (801f30c <tcpip_tcp_timer+0x30>)
 801f2f0:	30fa      	adds	r0, #250	; 0xfa
}
 801f2f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f2f6:	f7ff bfa5 	b.w	801f244 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f2fa:	4b05      	ldr	r3, [pc, #20]	; (801f310 <tcpip_tcp_timer+0x34>)
 801f2fc:	681b      	ldr	r3, [r3, #0]
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	d1f2      	bne.n	801f2e8 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801f302:	4a04      	ldr	r2, [pc, #16]	; (801f314 <tcpip_tcp_timer+0x38>)
 801f304:	6013      	str	r3, [r2, #0]
}
 801f306:	bd08      	pop	{r3, pc}
 801f308:	2002dbac 	.word	0x2002dbac
 801f30c:	0801f2dd 	.word	0x0801f2dd
 801f310:	2002dbc4 	.word	0x2002dbc4
 801f314:	2002dc10 	.word	0x2002dc10

0801f318 <tcp_timer_needed>:
{
 801f318:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f31a:	4b0b      	ldr	r3, [pc, #44]	; (801f348 <tcp_timer_needed+0x30>)
 801f31c:	681a      	ldr	r2, [r3, #0]
 801f31e:	b98a      	cbnz	r2, 801f344 <tcp_timer_needed+0x2c>
 801f320:	4a0a      	ldr	r2, [pc, #40]	; (801f34c <tcp_timer_needed+0x34>)
 801f322:	6812      	ldr	r2, [r2, #0]
 801f324:	b152      	cbz	r2, 801f33c <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801f326:	2201      	movs	r2, #1
 801f328:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f32a:	f7f4 fd57 	bl	8013ddc <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f32e:	2200      	movs	r2, #0
 801f330:	4907      	ldr	r1, [pc, #28]	; (801f350 <tcp_timer_needed+0x38>)
 801f332:	30fa      	adds	r0, #250	; 0xfa
}
 801f334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f338:	f7ff bf84 	b.w	801f244 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f33c:	4a05      	ldr	r2, [pc, #20]	; (801f354 <tcp_timer_needed+0x3c>)
 801f33e:	6812      	ldr	r2, [r2, #0]
 801f340:	2a00      	cmp	r2, #0
 801f342:	d1f0      	bne.n	801f326 <tcp_timer_needed+0xe>
}
 801f344:	bd08      	pop	{r3, pc}
 801f346:	bf00      	nop
 801f348:	2002dc10 	.word	0x2002dc10
 801f34c:	2002dbac 	.word	0x2002dbac
 801f350:	0801f2dd 	.word	0x0801f2dd
 801f354:	2002dbc4 	.word	0x2002dbc4

0801f358 <sys_timeouts_init>:
{
 801f358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f35c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801f360:	4c11      	ldr	r4, [pc, #68]	; (801f3a8 <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f362:	f8df 9050 	ldr.w	r9, [pc, #80]	; 801f3b4 <sys_timeouts_init+0x5c>
 801f366:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801f36a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801f3b8 <sys_timeouts_init+0x60>
 801f36e:	f104 0620 	add.w	r6, r4, #32
 801f372:	4f0e      	ldr	r7, [pc, #56]	; (801f3ac <sys_timeouts_init+0x54>)
 801f374:	d20d      	bcs.n	801f392 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f376:	f7f4 fd31 	bl	8013ddc <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f37a:	4622      	mov	r2, r4
 801f37c:	490c      	ldr	r1, [pc, #48]	; (801f3b0 <sys_timeouts_init+0x58>)
 801f37e:	4428      	add	r0, r5
 801f380:	f7ff ff60 	bl	801f244 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f384:	42b4      	cmp	r4, r6
 801f386:	d00c      	beq.n	801f3a2 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f388:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f38c:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801f390:	d3f1      	bcc.n	801f376 <sys_timeouts_init+0x1e>
 801f392:	464b      	mov	r3, r9
 801f394:	4641      	mov	r1, r8
 801f396:	f240 1229 	movw	r2, #297	; 0x129
 801f39a:	4638      	mov	r0, r7
 801f39c:	f005 fba6 	bl	8024aec <iprintf>
 801f3a0:	e7e9      	b.n	801f376 <sys_timeouts_init+0x1e>
}
 801f3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f3a6:	bf00      	nop
 801f3a8:	08044310 	.word	0x08044310
 801f3ac:	0802b818 	.word	0x0802b818
 801f3b0:	0801f2a1 	.word	0x0801f2a1
 801f3b4:	0804425c 	.word	0x0804425c
 801f3b8:	080442d0 	.word	0x080442d0

0801f3bc <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f3bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801f3c0:	b570      	push	{r4, r5, r6, lr}
 801f3c2:	4604      	mov	r4, r0
 801f3c4:	460d      	mov	r5, r1
 801f3c6:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f3c8:	d208      	bcs.n	801f3dc <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f3ca:	f7f4 fd07 	bl	8013ddc <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f3ce:	4632      	mov	r2, r6
 801f3d0:	4629      	mov	r1, r5
 801f3d2:	4420      	add	r0, r4
#endif
}
 801f3d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f3d8:	f7ff bf34 	b.w	801f244 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f3dc:	4b03      	ldr	r3, [pc, #12]	; (801f3ec <sys_timeout+0x30>)
 801f3de:	f240 1229 	movw	r2, #297	; 0x129
 801f3e2:	4903      	ldr	r1, [pc, #12]	; (801f3f0 <sys_timeout+0x34>)
 801f3e4:	4803      	ldr	r0, [pc, #12]	; (801f3f4 <sys_timeout+0x38>)
 801f3e6:	f005 fb81 	bl	8024aec <iprintf>
 801f3ea:	e7ee      	b.n	801f3ca <sys_timeout+0xe>
 801f3ec:	0804425c 	.word	0x0804425c
 801f3f0:	080442d0 	.word	0x080442d0
 801f3f4:	0802b818 	.word	0x0802b818

0801f3f8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801f3f8:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f3fa:	4d0d      	ldr	r5, [pc, #52]	; (801f430 <sys_untimeout+0x38>)
 801f3fc:	682b      	ldr	r3, [r5, #0]
 801f3fe:	b19b      	cbz	r3, 801f428 <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801f400:	2400      	movs	r4, #0
 801f402:	e003      	b.n	801f40c <sys_untimeout+0x14>
 801f404:	681a      	ldr	r2, [r3, #0]
 801f406:	461c      	mov	r4, r3
 801f408:	4613      	mov	r3, r2
 801f40a:	b16a      	cbz	r2, 801f428 <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801f40c:	689a      	ldr	r2, [r3, #8]
 801f40e:	4282      	cmp	r2, r0
 801f410:	d1f8      	bne.n	801f404 <sys_untimeout+0xc>
 801f412:	68da      	ldr	r2, [r3, #12]
 801f414:	428a      	cmp	r2, r1
 801f416:	d1f5      	bne.n	801f404 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 801f418:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 801f41a:	b13c      	cbz	r4, 801f42c <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 801f41c:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801f41e:	4619      	mov	r1, r3
 801f420:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801f422:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801f424:	f7fa bdac 	b.w	8019f80 <memp_free>
}
 801f428:	bc30      	pop	{r4, r5}
 801f42a:	4770      	bx	lr
        next_timeout = t->next;
 801f42c:	602a      	str	r2, [r5, #0]
 801f42e:	e7f6      	b.n	801f41e <sys_untimeout+0x26>
 801f430:	2002dc0c 	.word	0x2002dc0c

0801f434 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f438:	f7f4 fcd0 	bl	8013ddc <sys_now>
 801f43c:	4c0f      	ldr	r4, [pc, #60]	; (801f47c <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801f43e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 801f480 <sys_check_timeouts+0x4c>
  now = sys_now();
 801f442:	4607      	mov	r7, r0
 801f444:	e00f      	b.n	801f466 <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f446:	685a      	ldr	r2, [r3, #4]
 801f448:	eba7 0c02 	sub.w	ip, r7, r2
 801f44c:	f1bc 0f00 	cmp.w	ip, #0
 801f450:	db0e      	blt.n	801f470 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 801f452:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801f454:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 801f456:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 801f45a:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 801f45e:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f460:	f7fa fd8e 	bl	8019f80 <memp_free>
    if (handler != NULL) {
 801f464:	b935      	cbnz	r5, 801f474 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 801f466:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f468:	200c      	movs	r0, #12
 801f46a:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	d1ea      	bne.n	801f446 <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 801f474:	4648      	mov	r0, r9
 801f476:	47a8      	blx	r5
 801f478:	e7f5      	b.n	801f466 <sys_check_timeouts+0x32>
 801f47a:	bf00      	nop
 801f47c:	2002dc0c 	.word	0x2002dc0c
 801f480:	2002dc08 	.word	0x2002dc08

0801f484 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f484:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f486:	4c07      	ldr	r4, [pc, #28]	; (801f4a4 <sys_timeouts_sleeptime+0x20>)
 801f488:	6823      	ldr	r3, [r4, #0]
 801f48a:	b13b      	cbz	r3, 801f49c <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801f48c:	f7f4 fca6 	bl	8013ddc <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f490:	6823      	ldr	r3, [r4, #0]
 801f492:	685b      	ldr	r3, [r3, #4]
    return 0;
 801f494:	1a18      	subs	r0, r3, r0
 801f496:	bf48      	it	mi
 801f498:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801f49a:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f49c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801f4a0:	bd10      	pop	{r4, pc}
 801f4a2:	bf00      	nop
 801f4a4:	2002dc0c 	.word	0x2002dc0c

0801f4a8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f4a8:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f4aa:	f005 fbc3 	bl	8024c34 <rand>
 801f4ae:	4b02      	ldr	r3, [pc, #8]	; (801f4b8 <udp_init+0x10>)
 801f4b0:	4a02      	ldr	r2, [pc, #8]	; (801f4bc <udp_init+0x14>)
 801f4b2:	4303      	orrs	r3, r0
 801f4b4:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801f4b6:	bd08      	pop	{r3, pc}
 801f4b8:	ffffc000 	.word	0xffffc000
 801f4bc:	20000412 	.word	0x20000412

0801f4c0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f4c4:	4680      	mov	r8, r0
{
 801f4c6:	b085      	sub	sp, #20
 801f4c8:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f4ca:	2800      	cmp	r0, #0
 801f4cc:	f000 80af 	beq.w	801f62e <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f4d0:	2f00      	cmp	r7, #0
 801f4d2:	f000 80b5 	beq.w	801f640 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f4d6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 801f4da:	2b07      	cmp	r3, #7
 801f4dc:	f240 8091 	bls.w	801f602 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f4e0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801f6b8 <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 801f4e4:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f4e8:	f8d9 1000 	ldr.w	r1, [r9]
 801f4ec:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801f4f0:	f003 f80c 	bl	802250c <ip4_addr_isbroadcast_u32>
 801f4f4:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f4f6:	8820      	ldrh	r0, [r4, #0]
 801f4f8:	f7f9 fa1e 	bl	8018938 <lwip_htons>
 801f4fc:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 801f4fe:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 801f500:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 801f502:	f7f9 fa19 	bl	8018938 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f506:	4b64      	ldr	r3, [pc, #400]	; (801f698 <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 801f508:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f50a:	681c      	ldr	r4, [r3, #0]
 801f50c:	2c00      	cmp	r4, #0
 801f50e:	d064      	beq.n	801f5da <udp_input+0x11a>
  uncon_pcb = NULL;
 801f510:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f514:	f8df c190 	ldr.w	ip, [pc, #400]	; 801f6a8 <udp_input+0x1e8>
 801f518:	4960      	ldr	r1, [pc, #384]	; (801f69c <udp_input+0x1dc>)
  prev = NULL;
 801f51a:	465e      	mov	r6, fp
 801f51c:	e004      	b.n	801f528 <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f51e:	68e2      	ldr	r2, [r4, #12]
 801f520:	4626      	mov	r6, r4
 801f522:	2a00      	cmp	r2, #0
 801f524:	d056      	beq.n	801f5d4 <udp_input+0x114>
 801f526:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f528:	8a62      	ldrh	r2, [r4, #18]
 801f52a:	42aa      	cmp	r2, r5
 801f52c:	d1f7      	bne.n	801f51e <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f52e:	2f00      	cmp	r7, #0
 801f530:	d06d      	beq.n	801f60e <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f532:	7a20      	ldrb	r0, [r4, #8]
 801f534:	b138      	cbz	r0, 801f546 <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f536:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801f53a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801f53e:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f540:	b2d2      	uxtb	r2, r2
 801f542:	4290      	cmp	r0, r2
 801f544:	d1eb      	bne.n	801f51e <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f546:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 801f548:	f1ba 0f00 	cmp.w	sl, #0
 801f54c:	d038      	beq.n	801f5c0 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f54e:	b13a      	cbz	r2, 801f560 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f550:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f554:	1c43      	adds	r3, r0, #1
 801f556:	d003      	beq.n	801f560 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f558:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f55a:	68bb      	ldr	r3, [r7, #8]
 801f55c:	4218      	tst	r0, r3
 801f55e:	d1de      	bne.n	801f51e <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f560:	7c20      	ldrb	r0, [r4, #16]
 801f562:	0743      	lsls	r3, r0, #29
 801f564:	d409      	bmi.n	801f57a <udp_input+0xba>
        if (uncon_pcb == NULL) {
 801f566:	f1bb 0f00 	cmp.w	fp, #0
 801f56a:	d059      	beq.n	801f620 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f56c:	f1ba 0f00 	cmp.w	sl, #0
 801f570:	d003      	beq.n	801f57a <udp_input+0xba>
 801f572:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801f576:	3001      	adds	r0, #1
 801f578:	d069      	beq.n	801f64e <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f57a:	8aa2      	ldrh	r2, [r4, #20]
 801f57c:	9803      	ldr	r0, [sp, #12]
 801f57e:	4282      	cmp	r2, r0
 801f580:	d1cd      	bne.n	801f51e <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f582:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801f584:	b11a      	cbz	r2, 801f58e <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f586:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f58a:	4282      	cmp	r2, r0
 801f58c:	d1c7      	bne.n	801f51e <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f58e:	b12e      	cbz	r6, 801f59c <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f590:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 801f592:	4a41      	ldr	r2, [pc, #260]	; (801f698 <udp_input+0x1d8>)
          prev->next = pcb->next;
 801f594:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 801f596:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 801f598:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 801f59a:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f59c:	2108      	movs	r1, #8
 801f59e:	4640      	mov	r0, r8
 801f5a0:	f7fb f97a 	bl	801a898 <pbuf_remove_header>
 801f5a4:	2800      	cmp	r0, #0
 801f5a6:	d15b      	bne.n	801f660 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f5a8:	69a5      	ldr	r5, [r4, #24]
 801f5aa:	b355      	cbz	r5, 801f602 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f5ac:	9b03      	ldr	r3, [sp, #12]
 801f5ae:	4642      	mov	r2, r8
 801f5b0:	69e0      	ldr	r0, [r4, #28]
 801f5b2:	4621      	mov	r1, r4
 801f5b4:	9300      	str	r3, [sp, #0]
 801f5b6:	4b3a      	ldr	r3, [pc, #232]	; (801f6a0 <udp_input+0x1e0>)
 801f5b8:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f5ba:	b005      	add	sp, #20
 801f5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f5c0:	2a00      	cmp	r2, #0
 801f5c2:	d0cd      	beq.n	801f560 <udp_input+0xa0>
 801f5c4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801f5c8:	4282      	cmp	r2, r0
 801f5ca:	d0c9      	beq.n	801f560 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f5cc:	68e2      	ldr	r2, [r4, #12]
 801f5ce:	4626      	mov	r6, r4
 801f5d0:	2a00      	cmp	r2, #0
 801f5d2:	d1a8      	bne.n	801f526 <udp_input+0x66>
  if (pcb != NULL) {
 801f5d4:	f1bb 0f00 	cmp.w	fp, #0
 801f5d8:	d15b      	bne.n	801f692 <udp_input+0x1d2>
  if (for_us) {
 801f5da:	687a      	ldr	r2, [r7, #4]
 801f5dc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f5e0:	429a      	cmp	r2, r3
 801f5e2:	d10e      	bne.n	801f602 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f5e4:	2108      	movs	r1, #8
 801f5e6:	4640      	mov	r0, r8
 801f5e8:	f7fb f956 	bl	801a898 <pbuf_remove_header>
 801f5ec:	2800      	cmp	r0, #0
 801f5ee:	d137      	bne.n	801f660 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f5f0:	f1ba 0f00 	cmp.w	sl, #0
 801f5f4:	d105      	bne.n	801f602 <udp_input+0x142>
 801f5f6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f5fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f5fe:	2be0      	cmp	r3, #224	; 0xe0
 801f600:	d13b      	bne.n	801f67a <udp_input+0x1ba>
      pbuf_free(p);
 801f602:	4640      	mov	r0, r8
}
 801f604:	b005      	add	sp, #20
 801f606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801f60a:	f7fb b9b5 	b.w	801a978 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f60e:	4663      	mov	r3, ip
 801f610:	2288      	movs	r2, #136	; 0x88
 801f612:	4824      	ldr	r0, [pc, #144]	; (801f6a4 <udp_input+0x1e4>)
 801f614:	f005 fa6a 	bl	8024aec <iprintf>
 801f618:	f8df c08c 	ldr.w	ip, [pc, #140]	; 801f6a8 <udp_input+0x1e8>
 801f61c:	491f      	ldr	r1, [pc, #124]	; (801f69c <udp_input+0x1dc>)
 801f61e:	e788      	b.n	801f532 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 801f620:	8aa2      	ldrh	r2, [r4, #20]
 801f622:	46a3      	mov	fp, r4
 801f624:	9803      	ldr	r0, [sp, #12]
 801f626:	4282      	cmp	r2, r0
 801f628:	f47f af79 	bne.w	801f51e <udp_input+0x5e>
 801f62c:	e7a9      	b.n	801f582 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f62e:	4b1e      	ldr	r3, [pc, #120]	; (801f6a8 <udp_input+0x1e8>)
 801f630:	22cf      	movs	r2, #207	; 0xcf
 801f632:	491e      	ldr	r1, [pc, #120]	; (801f6ac <udp_input+0x1ec>)
 801f634:	481b      	ldr	r0, [pc, #108]	; (801f6a4 <udp_input+0x1e4>)
 801f636:	f005 fa59 	bl	8024aec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f63a:	2f00      	cmp	r7, #0
 801f63c:	f47f af4b 	bne.w	801f4d6 <udp_input+0x16>
 801f640:	4b19      	ldr	r3, [pc, #100]	; (801f6a8 <udp_input+0x1e8>)
 801f642:	22d0      	movs	r2, #208	; 0xd0
 801f644:	491a      	ldr	r1, [pc, #104]	; (801f6b0 <udp_input+0x1f0>)
 801f646:	4817      	ldr	r0, [pc, #92]	; (801f6a4 <udp_input+0x1e4>)
 801f648:	f005 fa50 	bl	8024aec <iprintf>
 801f64c:	e743      	b.n	801f4d6 <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f64e:	6878      	ldr	r0, [r7, #4]
 801f650:	f8db 3000 	ldr.w	r3, [fp]
 801f654:	4283      	cmp	r3, r0
 801f656:	d090      	beq.n	801f57a <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f658:	4290      	cmp	r0, r2
 801f65a:	bf08      	it	eq
 801f65c:	46a3      	moveq	fp, r4
 801f65e:	e78c      	b.n	801f57a <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f660:	4b11      	ldr	r3, [pc, #68]	; (801f6a8 <udp_input+0x1e8>)
 801f662:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f666:	4913      	ldr	r1, [pc, #76]	; (801f6b4 <udp_input+0x1f4>)
 801f668:	480e      	ldr	r0, [pc, #56]	; (801f6a4 <udp_input+0x1e4>)
 801f66a:	f005 fa3f 	bl	8024aec <iprintf>
      pbuf_free(p);
 801f66e:	4640      	mov	r0, r8
}
 801f670:	b005      	add	sp, #20
 801f672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801f676:	f7fb b97f 	b.w	801a978 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f67a:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 801f67e:	4640      	mov	r0, r8
 801f680:	3108      	adds	r1, #8
 801f682:	b209      	sxth	r1, r1
 801f684:	f7fb f940 	bl	801a908 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f688:	2103      	movs	r1, #3
 801f68a:	4640      	mov	r0, r8
 801f68c:	f002 fd5a 	bl	8022144 <icmp_dest_unreach>
 801f690:	e7b7      	b.n	801f602 <udp_input+0x142>
 801f692:	465c      	mov	r4, fp
 801f694:	e782      	b.n	801f59c <udp_input+0xdc>
 801f696:	bf00      	nop
 801f698:	2002dc14 	.word	0x2002dc14
 801f69c:	0804439c 	.word	0x0804439c
 801f6a0:	2001ec3c 	.word	0x2001ec3c
 801f6a4:	0802b818 	.word	0x0802b818
 801f6a8:	08044338 	.word	0x08044338
 801f6ac:	08044368 	.word	0x08044368
 801f6b0:	08044380 	.word	0x08044380
 801f6b4:	080443c4 	.word	0x080443c4
 801f6b8:	2001ec2c 	.word	0x2001ec2c

0801f6bc <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801f6bc:	4b38      	ldr	r3, [pc, #224]	; (801f7a0 <udp_bind+0xe4>)
 801f6be:	2900      	cmp	r1, #0
{
 801f6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801f6c4:	bf08      	it	eq
 801f6c6:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801f6c8:	2800      	cmp	r0, #0
 801f6ca:	d05e      	beq.n	801f78a <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f6cc:	4f35      	ldr	r7, [pc, #212]	; (801f7a4 <udp_bind+0xe8>)
 801f6ce:	683e      	ldr	r6, [r7, #0]
 801f6d0:	b34e      	cbz	r6, 801f726 <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801f6d2:	42b0      	cmp	r0, r6
 801f6d4:	d031      	beq.n	801f73a <udp_bind+0x7e>
 801f6d6:	4634      	mov	r4, r6
 801f6d8:	e001      	b.n	801f6de <udp_bind+0x22>
 801f6da:	42a0      	cmp	r0, r4
 801f6dc:	d02d      	beq.n	801f73a <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f6de:	68e4      	ldr	r4, [r4, #12]
 801f6e0:	2c00      	cmp	r4, #0
 801f6e2:	d1fa      	bne.n	801f6da <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801f6e4:	b362      	cbz	r2, 801f740 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f6e6:	680d      	ldr	r5, [r1, #0]
 801f6e8:	4633      	mov	r3, r6
 801f6ea:	e001      	b.n	801f6f0 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f6ec:	68db      	ldr	r3, [r3, #12]
 801f6ee:	b19b      	cbz	r3, 801f718 <udp_bind+0x5c>
      if (pcb != ipcb) {
 801f6f0:	4298      	cmp	r0, r3
 801f6f2:	d0fb      	beq.n	801f6ec <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 801f6f4:	8a59      	ldrh	r1, [r3, #18]
 801f6f6:	4291      	cmp	r1, r2
 801f6f8:	d1f8      	bne.n	801f6ec <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f6fa:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801f6fc:	2900      	cmp	r1, #0
 801f6fe:	bf18      	it	ne
 801f700:	42a9      	cmpne	r1, r5
 801f702:	d001      	beq.n	801f708 <udp_bind+0x4c>
 801f704:	2d00      	cmp	r5, #0
 801f706:	d1f1      	bne.n	801f6ec <udp_bind+0x30>
      return ERR_USE;
 801f708:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801f70c:	4618      	mov	r0, r3
 801f70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f712:	680d      	ldr	r5, [r1, #0]
 801f714:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801f718:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801f71a:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801f71c:	b13c      	cbz	r4, 801f72e <udp_bind+0x72>
  return ERR_OK;
 801f71e:	2300      	movs	r3, #0
}
 801f720:	4618      	mov	r0, r3
 801f722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801f726:	b372      	cbz	r2, 801f786 <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f728:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801f72a:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801f72c:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 801f72e:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801f730:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801f732:	6038      	str	r0, [r7, #0]
}
 801f734:	4618      	mov	r0, r3
 801f736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801f73a:	2401      	movs	r4, #1
  if (port == 0) {
 801f73c:	2a00      	cmp	r2, #0
 801f73e:	d1d2      	bne.n	801f6e6 <udp_bind+0x2a>
 801f740:	f8df e070 	ldr.w	lr, [pc, #112]	; 801f7b4 <udp_bind+0xf8>
  rebind = 0;
 801f744:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f748:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801f74c:	f8be 2000 	ldrh.w	r2, [lr]
 801f750:	4542      	cmp	r2, r8
 801f752:	d015      	beq.n	801f780 <udp_bind+0xc4>
 801f754:	3201      	adds	r2, #1
 801f756:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f758:	2e00      	cmp	r6, #0
 801f75a:	d0da      	beq.n	801f712 <udp_bind+0x56>
 801f75c:	4633      	mov	r3, r6
 801f75e:	e002      	b.n	801f766 <udp_bind+0xaa>
 801f760:	68db      	ldr	r3, [r3, #12]
 801f762:	2b00      	cmp	r3, #0
 801f764:	d0d5      	beq.n	801f712 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 801f766:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801f76a:	4594      	cmp	ip, r2
 801f76c:	d1f8      	bne.n	801f760 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f76e:	3d01      	subs	r5, #1
 801f770:	b2ad      	uxth	r5, r5
 801f772:	2d00      	cmp	r5, #0
 801f774:	d1ec      	bne.n	801f750 <udp_bind+0x94>
      return ERR_USE;
 801f776:	f06f 0307 	mvn.w	r3, #7
 801f77a:	f8ae 2000 	strh.w	r2, [lr]
 801f77e:	e7cf      	b.n	801f720 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f780:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f784:	e7e8      	b.n	801f758 <udp_bind+0x9c>
  rebind = 0;
 801f786:	4634      	mov	r4, r6
 801f788:	e7da      	b.n	801f740 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801f78a:	4b07      	ldr	r3, [pc, #28]	; (801f7a8 <udp_bind+0xec>)
 801f78c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801f790:	4906      	ldr	r1, [pc, #24]	; (801f7ac <udp_bind+0xf0>)
 801f792:	4807      	ldr	r0, [pc, #28]	; (801f7b0 <udp_bind+0xf4>)
 801f794:	f005 f9aa 	bl	8024aec <iprintf>
 801f798:	f06f 030f 	mvn.w	r3, #15
 801f79c:	e7c0      	b.n	801f720 <udp_bind+0x64>
 801f79e:	bf00      	nop
 801f7a0:	08044cb8 	.word	0x08044cb8
 801f7a4:	2002dc14 	.word	0x2002dc14
 801f7a8:	08044338 	.word	0x08044338
 801f7ac:	080443e0 	.word	0x080443e0
 801f7b0:	0802b818 	.word	0x0802b818
 801f7b4:	20000412 	.word	0x20000412

0801f7b8 <udp_sendto_if_src>:
{
 801f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7bc:	b085      	sub	sp, #20
 801f7be:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f7c2:	2800      	cmp	r0, #0
 801f7c4:	f000 8087 	beq.w	801f8d6 <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f7c8:	460d      	mov	r5, r1
 801f7ca:	2900      	cmp	r1, #0
 801f7cc:	d079      	beq.n	801f8c2 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f7ce:	4690      	mov	r8, r2
 801f7d0:	2a00      	cmp	r2, #0
 801f7d2:	d06c      	beq.n	801f8ae <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f7d4:	f1ba 0f00 	cmp.w	sl, #0
 801f7d8:	d05f      	beq.n	801f89a <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f7da:	f1bb 0f00 	cmp.w	fp, #0
 801f7de:	f000 8084 	beq.w	801f8ea <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 801f7e2:	8a42      	ldrh	r2, [r0, #18]
 801f7e4:	4699      	mov	r9, r3
 801f7e6:	4604      	mov	r4, r0
 801f7e8:	b39a      	cbz	r2, 801f852 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801f7ea:	892a      	ldrh	r2, [r5, #8]
 801f7ec:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801f7f0:	429a      	cmp	r2, r3
 801f7f2:	d84f      	bhi.n	801f894 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801f7f4:	2108      	movs	r1, #8
 801f7f6:	4628      	mov	r0, r5
 801f7f8:	f7fb f81a 	bl	801a830 <pbuf_add_header>
 801f7fc:	bb98      	cbnz	r0, 801f866 <udp_sendto_if_src+0xae>
 801f7fe:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f800:	8973      	ldrh	r3, [r6, #10]
 801f802:	2b07      	cmp	r3, #7
 801f804:	d93e      	bls.n	801f884 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 801f806:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801f808:	8a60      	ldrh	r0, [r4, #18]
 801f80a:	f7f9 f895 	bl	8018938 <lwip_htons>
 801f80e:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 801f810:	4648      	mov	r0, r9
 801f812:	f7f9 f891 	bl	8018938 <lwip_htons>
  udphdr->chksum = 0x0000;
 801f816:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801f818:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 801f81a:	71bb      	strb	r3, [r7, #6]
 801f81c:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801f81e:	8930      	ldrh	r0, [r6, #8]
 801f820:	f7f9 f88a 	bl	8018938 <lwip_htons>
 801f824:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f826:	f8cd b008 	str.w	fp, [sp, #8]
 801f82a:	2011      	movs	r0, #17
 801f82c:	7aa3      	ldrb	r3, [r4, #10]
 801f82e:	4642      	mov	r2, r8
 801f830:	4651      	mov	r1, sl
 801f832:	9300      	str	r3, [sp, #0]
 801f834:	7ae3      	ldrb	r3, [r4, #11]
 801f836:	9001      	str	r0, [sp, #4]
 801f838:	4630      	mov	r0, r6
 801f83a:	f002 fdb9 	bl	80223b0 <ip4_output_if_src>
  if (q != p) {
 801f83e:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f840:	4607      	mov	r7, r0
  if (q != p) {
 801f842:	d002      	beq.n	801f84a <udp_sendto_if_src+0x92>
    pbuf_free(q);
 801f844:	4630      	mov	r0, r6
 801f846:	f7fb f897 	bl	801a978 <pbuf_free>
}
 801f84a:	4638      	mov	r0, r7
 801f84c:	b005      	add	sp, #20
 801f84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f852:	4601      	mov	r1, r0
 801f854:	f7ff ff32 	bl	801f6bc <udp_bind>
    if (err != ERR_OK) {
 801f858:	4607      	mov	r7, r0
 801f85a:	2800      	cmp	r0, #0
 801f85c:	d0c5      	beq.n	801f7ea <udp_sendto_if_src+0x32>
}
 801f85e:	4638      	mov	r0, r7
 801f860:	b005      	add	sp, #20
 801f862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801f866:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f86a:	2108      	movs	r1, #8
 801f86c:	2022      	movs	r0, #34	; 0x22
 801f86e:	f7fa fecd 	bl	801a60c <pbuf_alloc>
    if (q == NULL) {
 801f872:	4606      	mov	r6, r0
 801f874:	b170      	cbz	r0, 801f894 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 801f876:	892b      	ldrh	r3, [r5, #8]
 801f878:	2b00      	cmp	r3, #0
 801f87a:	d0c1      	beq.n	801f800 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 801f87c:	4629      	mov	r1, r5
 801f87e:	f7fb f8e9 	bl	801aa54 <pbuf_chain>
 801f882:	e7bd      	b.n	801f800 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f884:	4b1e      	ldr	r3, [pc, #120]	; (801f900 <udp_sendto_if_src+0x148>)
 801f886:	f240 320d 	movw	r2, #781	; 0x30d
 801f88a:	491e      	ldr	r1, [pc, #120]	; (801f904 <udp_sendto_if_src+0x14c>)
 801f88c:	481e      	ldr	r0, [pc, #120]	; (801f908 <udp_sendto_if_src+0x150>)
 801f88e:	f005 f92d 	bl	8024aec <iprintf>
 801f892:	e7b8      	b.n	801f806 <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 801f894:	f04f 37ff 	mov.w	r7, #4294967295
 801f898:	e7d7      	b.n	801f84a <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f89a:	4b19      	ldr	r3, [pc, #100]	; (801f900 <udp_sendto_if_src+0x148>)
 801f89c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801f8a0:	491a      	ldr	r1, [pc, #104]	; (801f90c <udp_sendto_if_src+0x154>)
 801f8a2:	f06f 070f 	mvn.w	r7, #15
 801f8a6:	4818      	ldr	r0, [pc, #96]	; (801f908 <udp_sendto_if_src+0x150>)
 801f8a8:	f005 f920 	bl	8024aec <iprintf>
 801f8ac:	e7cd      	b.n	801f84a <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f8ae:	4b14      	ldr	r3, [pc, #80]	; (801f900 <udp_sendto_if_src+0x148>)
 801f8b0:	f240 22d3 	movw	r2, #723	; 0x2d3
 801f8b4:	4916      	ldr	r1, [pc, #88]	; (801f910 <udp_sendto_if_src+0x158>)
 801f8b6:	f06f 070f 	mvn.w	r7, #15
 801f8ba:	4813      	ldr	r0, [pc, #76]	; (801f908 <udp_sendto_if_src+0x150>)
 801f8bc:	f005 f916 	bl	8024aec <iprintf>
 801f8c0:	e7c3      	b.n	801f84a <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f8c2:	4b0f      	ldr	r3, [pc, #60]	; (801f900 <udp_sendto_if_src+0x148>)
 801f8c4:	f240 22d2 	movw	r2, #722	; 0x2d2
 801f8c8:	4912      	ldr	r1, [pc, #72]	; (801f914 <udp_sendto_if_src+0x15c>)
 801f8ca:	f06f 070f 	mvn.w	r7, #15
 801f8ce:	480e      	ldr	r0, [pc, #56]	; (801f908 <udp_sendto_if_src+0x150>)
 801f8d0:	f005 f90c 	bl	8024aec <iprintf>
 801f8d4:	e7b9      	b.n	801f84a <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f8d6:	4b0a      	ldr	r3, [pc, #40]	; (801f900 <udp_sendto_if_src+0x148>)
 801f8d8:	f240 22d1 	movw	r2, #721	; 0x2d1
 801f8dc:	490e      	ldr	r1, [pc, #56]	; (801f918 <udp_sendto_if_src+0x160>)
 801f8de:	f06f 070f 	mvn.w	r7, #15
 801f8e2:	4809      	ldr	r0, [pc, #36]	; (801f908 <udp_sendto_if_src+0x150>)
 801f8e4:	f005 f902 	bl	8024aec <iprintf>
 801f8e8:	e7af      	b.n	801f84a <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f8ea:	4b05      	ldr	r3, [pc, #20]	; (801f900 <udp_sendto_if_src+0x148>)
 801f8ec:	f240 22d5 	movw	r2, #725	; 0x2d5
 801f8f0:	490a      	ldr	r1, [pc, #40]	; (801f91c <udp_sendto_if_src+0x164>)
 801f8f2:	f06f 070f 	mvn.w	r7, #15
 801f8f6:	4804      	ldr	r0, [pc, #16]	; (801f908 <udp_sendto_if_src+0x150>)
 801f8f8:	f005 f8f8 	bl	8024aec <iprintf>
 801f8fc:	e7a5      	b.n	801f84a <udp_sendto_if_src+0x92>
 801f8fe:	bf00      	nop
 801f900:	08044338 	.word	0x08044338
 801f904:	080444a4 	.word	0x080444a4
 801f908:	0802b818 	.word	0x0802b818
 801f90c:	0804445c 	.word	0x0804445c
 801f910:	08044438 	.word	0x08044438
 801f914:	08044418 	.word	0x08044418
 801f918:	080443f8 	.word	0x080443f8
 801f91c:	08044480 	.word	0x08044480

0801f920 <udp_sendto_if>:
{
 801f920:	b570      	push	{r4, r5, r6, lr}
 801f922:	b082      	sub	sp, #8
 801f924:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f926:	2800      	cmp	r0, #0
 801f928:	d036      	beq.n	801f998 <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f92a:	b359      	cbz	r1, 801f984 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f92c:	b302      	cbz	r2, 801f970 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f92e:	b1ac      	cbz	r4, 801f95c <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f930:	6805      	ldr	r5, [r0, #0]
 801f932:	b935      	cbnz	r5, 801f942 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 801f934:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801f936:	e9cd 4500 	strd	r4, r5, [sp]
 801f93a:	f7ff ff3d 	bl	801f7b8 <udp_sendto_if_src>
}
 801f93e:	b002      	add	sp, #8
 801f940:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801f942:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f946:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 801f94a:	d0f3      	beq.n	801f934 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801f94c:	6866      	ldr	r6, [r4, #4]
 801f94e:	42b5      	cmp	r5, r6
 801f950:	d101      	bne.n	801f956 <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f952:	4605      	mov	r5, r0
 801f954:	e7ef      	b.n	801f936 <udp_sendto_if+0x16>
        return ERR_RTE;
 801f956:	f06f 0003 	mvn.w	r0, #3
 801f95a:	e7f0      	b.n	801f93e <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f95c:	4b13      	ldr	r3, [pc, #76]	; (801f9ac <udp_sendto_if+0x8c>)
 801f95e:	f240 2283 	movw	r2, #643	; 0x283
 801f962:	4913      	ldr	r1, [pc, #76]	; (801f9b0 <udp_sendto_if+0x90>)
 801f964:	4813      	ldr	r0, [pc, #76]	; (801f9b4 <udp_sendto_if+0x94>)
 801f966:	f005 f8c1 	bl	8024aec <iprintf>
 801f96a:	f06f 000f 	mvn.w	r0, #15
 801f96e:	e7e6      	b.n	801f93e <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f970:	4b0e      	ldr	r3, [pc, #56]	; (801f9ac <udp_sendto_if+0x8c>)
 801f972:	f240 2282 	movw	r2, #642	; 0x282
 801f976:	4910      	ldr	r1, [pc, #64]	; (801f9b8 <udp_sendto_if+0x98>)
 801f978:	480e      	ldr	r0, [pc, #56]	; (801f9b4 <udp_sendto_if+0x94>)
 801f97a:	f005 f8b7 	bl	8024aec <iprintf>
 801f97e:	f06f 000f 	mvn.w	r0, #15
 801f982:	e7dc      	b.n	801f93e <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f984:	4b09      	ldr	r3, [pc, #36]	; (801f9ac <udp_sendto_if+0x8c>)
 801f986:	f240 2281 	movw	r2, #641	; 0x281
 801f98a:	490c      	ldr	r1, [pc, #48]	; (801f9bc <udp_sendto_if+0x9c>)
 801f98c:	4809      	ldr	r0, [pc, #36]	; (801f9b4 <udp_sendto_if+0x94>)
 801f98e:	f005 f8ad 	bl	8024aec <iprintf>
 801f992:	f06f 000f 	mvn.w	r0, #15
 801f996:	e7d2      	b.n	801f93e <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f998:	4b04      	ldr	r3, [pc, #16]	; (801f9ac <udp_sendto_if+0x8c>)
 801f99a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f99e:	4908      	ldr	r1, [pc, #32]	; (801f9c0 <udp_sendto_if+0xa0>)
 801f9a0:	4804      	ldr	r0, [pc, #16]	; (801f9b4 <udp_sendto_if+0x94>)
 801f9a2:	f005 f8a3 	bl	8024aec <iprintf>
 801f9a6:	f06f 000f 	mvn.w	r0, #15
 801f9aa:	e7c8      	b.n	801f93e <udp_sendto_if+0x1e>
 801f9ac:	08044338 	.word	0x08044338
 801f9b0:	0804452c 	.word	0x0804452c
 801f9b4:	0802b818 	.word	0x0802b818
 801f9b8:	0804450c 	.word	0x0804450c
 801f9bc:	080444f0 	.word	0x080444f0
 801f9c0:	080444d4 	.word	0x080444d4

0801f9c4 <udp_sendto>:
{
 801f9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9c8:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f9ca:	b388      	cbz	r0, 801fa30 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f9cc:	460e      	mov	r6, r1
 801f9ce:	b329      	cbz	r1, 801fa1c <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f9d0:	4615      	mov	r5, r2
 801f9d2:	b1ca      	cbz	r2, 801fa08 <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f9d4:	4604      	mov	r4, r0
 801f9d6:	7a00      	ldrb	r0, [r0, #8]
 801f9d8:	4698      	mov	r8, r3
 801f9da:	b168      	cbz	r0, 801f9f8 <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 801f9dc:	f7fa fcc2 	bl	801a364 <netif_get_by_index>
 801f9e0:	4607      	mov	r7, r0
  if (netif == NULL) {
 801f9e2:	b177      	cbz	r7, 801fa02 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f9e4:	4643      	mov	r3, r8
 801f9e6:	462a      	mov	r2, r5
 801f9e8:	4631      	mov	r1, r6
 801f9ea:	4620      	mov	r0, r4
 801f9ec:	9700      	str	r7, [sp, #0]
 801f9ee:	f7ff ff97 	bl	801f920 <udp_sendto_if>
}
 801f9f2:	b002      	add	sp, #8
 801f9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f9f8:	4610      	mov	r0, r2
 801f9fa:	f002 fbab 	bl	8022154 <ip4_route>
 801f9fe:	4607      	mov	r7, r0
 801fa00:	e7ef      	b.n	801f9e2 <udp_sendto+0x1e>
    return ERR_RTE;
 801fa02:	f06f 0003 	mvn.w	r0, #3
 801fa06:	e7f4      	b.n	801f9f2 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fa08:	4b0e      	ldr	r3, [pc, #56]	; (801fa44 <udp_sendto+0x80>)
 801fa0a:	f240 221a 	movw	r2, #538	; 0x21a
 801fa0e:	490e      	ldr	r1, [pc, #56]	; (801fa48 <udp_sendto+0x84>)
 801fa10:	480e      	ldr	r0, [pc, #56]	; (801fa4c <udp_sendto+0x88>)
 801fa12:	f005 f86b 	bl	8024aec <iprintf>
 801fa16:	f06f 000f 	mvn.w	r0, #15
 801fa1a:	e7ea      	b.n	801f9f2 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801fa1c:	4b09      	ldr	r3, [pc, #36]	; (801fa44 <udp_sendto+0x80>)
 801fa1e:	f240 2219 	movw	r2, #537	; 0x219
 801fa22:	490b      	ldr	r1, [pc, #44]	; (801fa50 <udp_sendto+0x8c>)
 801fa24:	4809      	ldr	r0, [pc, #36]	; (801fa4c <udp_sendto+0x88>)
 801fa26:	f005 f861 	bl	8024aec <iprintf>
 801fa2a:	f06f 000f 	mvn.w	r0, #15
 801fa2e:	e7e0      	b.n	801f9f2 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801fa30:	4b04      	ldr	r3, [pc, #16]	; (801fa44 <udp_sendto+0x80>)
 801fa32:	f44f 7206 	mov.w	r2, #536	; 0x218
 801fa36:	4907      	ldr	r1, [pc, #28]	; (801fa54 <udp_sendto+0x90>)
 801fa38:	4804      	ldr	r0, [pc, #16]	; (801fa4c <udp_sendto+0x88>)
 801fa3a:	f005 f857 	bl	8024aec <iprintf>
 801fa3e:	f06f 000f 	mvn.w	r0, #15
 801fa42:	e7d6      	b.n	801f9f2 <udp_sendto+0x2e>
 801fa44:	08044338 	.word	0x08044338
 801fa48:	08044580 	.word	0x08044580
 801fa4c:	0802b818 	.word	0x0802b818
 801fa50:	08044564 	.word	0x08044564
 801fa54:	0804454c 	.word	0x0804454c

0801fa58 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fa58:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801fa5a:	b320      	cbz	r0, 801faa6 <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801fa5c:	460d      	mov	r5, r1
 801fa5e:	b361      	cbz	r1, 801faba <udp_connect+0x62>

  if (pcb->local_port == 0) {
 801fa60:	4616      	mov	r6, r2
 801fa62:	8a42      	ldrh	r2, [r0, #18]
 801fa64:	4604      	mov	r4, r0
 801fa66:	b1c2      	cbz	r2, 801fa9a <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fa68:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fa6a:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa6c:	4918      	ldr	r1, [pc, #96]	; (801fad0 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fa6e:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fa72:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa74:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 801fa76:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fa78:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa7a:	b142      	cbz	r2, 801fa8e <udp_connect+0x36>
    if (pcb == ipcb) {
 801fa7c:	4294      	cmp	r4, r2
 801fa7e:	d00a      	beq.n	801fa96 <udp_connect+0x3e>
 801fa80:	4613      	mov	r3, r2
 801fa82:	e001      	b.n	801fa88 <udp_connect+0x30>
 801fa84:	429c      	cmp	r4, r3
 801fa86:	d006      	beq.n	801fa96 <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa88:	68db      	ldr	r3, [r3, #12]
 801fa8a:	2b00      	cmp	r3, #0
 801fa8c:	d1fa      	bne.n	801fa84 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 801fa8e:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 801fa90:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 801fa92:	600c      	str	r4, [r1, #0]
}
 801fa94:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801fa96:	2000      	movs	r0, #0
}
 801fa98:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fa9a:	4601      	mov	r1, r0
 801fa9c:	f7ff fe0e 	bl	801f6bc <udp_bind>
    if (err != ERR_OK) {
 801faa0:	2800      	cmp	r0, #0
 801faa2:	d0e1      	beq.n	801fa68 <udp_connect+0x10>
}
 801faa4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801faa6:	4b0b      	ldr	r3, [pc, #44]	; (801fad4 <udp_connect+0x7c>)
 801faa8:	f240 4235 	movw	r2, #1077	; 0x435
 801faac:	490a      	ldr	r1, [pc, #40]	; (801fad8 <udp_connect+0x80>)
 801faae:	480b      	ldr	r0, [pc, #44]	; (801fadc <udp_connect+0x84>)
 801fab0:	f005 f81c 	bl	8024aec <iprintf>
 801fab4:	f06f 000f 	mvn.w	r0, #15
}
 801fab8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801faba:	4b06      	ldr	r3, [pc, #24]	; (801fad4 <udp_connect+0x7c>)
 801fabc:	f240 4236 	movw	r2, #1078	; 0x436
 801fac0:	4907      	ldr	r1, [pc, #28]	; (801fae0 <udp_connect+0x88>)
 801fac2:	4806      	ldr	r0, [pc, #24]	; (801fadc <udp_connect+0x84>)
 801fac4:	f005 f812 	bl	8024aec <iprintf>
 801fac8:	f06f 000f 	mvn.w	r0, #15
}
 801facc:	bd70      	pop	{r4, r5, r6, pc}
 801face:	bf00      	nop
 801fad0:	2002dc14 	.word	0x2002dc14
 801fad4:	08044338 	.word	0x08044338
 801fad8:	0804459c 	.word	0x0804459c
 801fadc:	0802b818 	.word	0x0802b818
 801fae0:	080445b8 	.word	0x080445b8

0801fae4 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fae4:	b110      	cbz	r0, 801faec <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801fae6:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801faea:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801faec:	4b03      	ldr	r3, [pc, #12]	; (801fafc <udp_recv+0x18>)
 801faee:	f240 428a 	movw	r2, #1162	; 0x48a
 801faf2:	4903      	ldr	r1, [pc, #12]	; (801fb00 <udp_recv+0x1c>)
 801faf4:	4803      	ldr	r0, [pc, #12]	; (801fb04 <udp_recv+0x20>)
 801faf6:	f004 bff9 	b.w	8024aec <iprintf>
 801fafa:	bf00      	nop
 801fafc:	08044338 	.word	0x08044338
 801fb00:	080445d4 	.word	0x080445d4
 801fb04:	0802b818 	.word	0x0802b818

0801fb08 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fb08:	4601      	mov	r1, r0
 801fb0a:	b1c0      	cbz	r0, 801fb3e <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801fb0c:	4b0f      	ldr	r3, [pc, #60]	; (801fb4c <udp_remove+0x44>)
 801fb0e:	681a      	ldr	r2, [r3, #0]
 801fb10:	4282      	cmp	r2, r0
 801fb12:	d00a      	beq.n	801fb2a <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fb14:	b132      	cbz	r2, 801fb24 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fb16:	68d3      	ldr	r3, [r2, #12]
 801fb18:	428b      	cmp	r3, r1
 801fb1a:	d100      	bne.n	801fb1e <udp_remove+0x16>
 801fb1c:	b953      	cbnz	r3, 801fb34 <udp_remove+0x2c>
 801fb1e:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fb20:	2a00      	cmp	r2, #0
 801fb22:	d1f8      	bne.n	801fb16 <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fb24:	2001      	movs	r0, #1
 801fb26:	f7fa ba2b 	b.w	8019f80 <memp_free>
    udp_pcbs = udp_pcbs->next;
 801fb2a:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801fb2c:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 801fb2e:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 801fb30:	f7fa ba26 	b.w	8019f80 <memp_free>
        pcb2->next = pcb->next;
 801fb34:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801fb36:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801fb38:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801fb3a:	f7fa ba21 	b.w	8019f80 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fb3e:	4b04      	ldr	r3, [pc, #16]	; (801fb50 <udp_remove+0x48>)
 801fb40:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801fb44:	4903      	ldr	r1, [pc, #12]	; (801fb54 <udp_remove+0x4c>)
 801fb46:	4804      	ldr	r0, [pc, #16]	; (801fb58 <udp_remove+0x50>)
 801fb48:	f004 bfd0 	b.w	8024aec <iprintf>
 801fb4c:	2002dc14 	.word	0x2002dc14
 801fb50:	08044338 	.word	0x08044338
 801fb54:	080445ec 	.word	0x080445ec
 801fb58:	0802b818 	.word	0x0802b818

0801fb5c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801fb5c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fb5e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801fb62:	4907      	ldr	r1, [pc, #28]	; (801fb80 <udp_new+0x24>)
 801fb64:	2001      	movs	r0, #1
 801fb66:	f7fa f9d5 	bl	8019f14 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801fb6a:	4604      	mov	r4, r0
 801fb6c:	b128      	cbz	r0, 801fb7a <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801fb6e:	2220      	movs	r2, #32
 801fb70:	2100      	movs	r1, #0
 801fb72:	f004 f81f 	bl	8023bb4 <memset>
    pcb->ttl = UDP_TTL;
 801fb76:	23ff      	movs	r3, #255	; 0xff
 801fb78:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801fb7a:	4620      	mov	r0, r4
 801fb7c:	bd10      	pop	{r4, pc}
 801fb7e:	bf00      	nop
 801fb80:	08044338 	.word	0x08044338

0801fb84 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801fb84:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fb86:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801fb8a:	4907      	ldr	r1, [pc, #28]	; (801fba8 <udp_new_ip_type+0x24>)
 801fb8c:	2001      	movs	r0, #1
 801fb8e:	f7fa f9c1 	bl	8019f14 <memp_malloc_fn>
  if (pcb != NULL) {
 801fb92:	4604      	mov	r4, r0
 801fb94:	b128      	cbz	r0, 801fba2 <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 801fb96:	2220      	movs	r2, #32
 801fb98:	2100      	movs	r1, #0
 801fb9a:	f004 f80b 	bl	8023bb4 <memset>
    pcb->ttl = UDP_TTL;
 801fb9e:	23ff      	movs	r3, #255	; 0xff
 801fba0:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 801fba2:	4620      	mov	r0, r4
 801fba4:	bd10      	pop	{r4, pc}
 801fba6:	bf00      	nop
 801fba8:	08044338 	.word	0x08044338

0801fbac <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801fbac:	b110      	cbz	r0, 801fbb4 <udp_netif_ip_addr_changed+0x8>
 801fbae:	6802      	ldr	r2, [r0, #0]
 801fbb0:	b101      	cbz	r1, 801fbb4 <udp_netif_ip_addr_changed+0x8>
 801fbb2:	b902      	cbnz	r2, 801fbb6 <udp_netif_ip_addr_changed+0xa>
 801fbb4:	4770      	bx	lr
 801fbb6:	680b      	ldr	r3, [r1, #0]
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	d0fb      	beq.n	801fbb4 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fbbc:	4b08      	ldr	r3, [pc, #32]	; (801fbe0 <udp_netif_ip_addr_changed+0x34>)
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	d0f7      	beq.n	801fbb4 <udp_netif_ip_addr_changed+0x8>
{
 801fbc4:	b410      	push	{r4}
 801fbc6:	e000      	b.n	801fbca <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801fbc8:	6802      	ldr	r2, [r0, #0]
 801fbca:	681c      	ldr	r4, [r3, #0]
 801fbcc:	4294      	cmp	r4, r2
 801fbce:	d101      	bne.n	801fbd4 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801fbd0:	680a      	ldr	r2, [r1, #0]
 801fbd2:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fbd4:	68db      	ldr	r3, [r3, #12]
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	d1f6      	bne.n	801fbc8 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801fbda:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fbde:	4770      	bx	lr
 801fbe0:	2002dc14 	.word	0x2002dc14

0801fbe4 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801fbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801fbe6:	1d07      	adds	r7, r0, #4
{
 801fbe8:	4604      	mov	r4, r0
 801fbea:	460d      	mov	r5, r1
 801fbec:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801fbee:	2f44      	cmp	r7, #68	; 0x44
 801fbf0:	d80e      	bhi.n	801fc10 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801fbf2:	0e33      	lsrs	r3, r6, #24
 801fbf4:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801fbf6:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801fbf8:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801fbfa:	b292      	uxth	r2, r2
 801fbfc:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801fbfe:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801fc00:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801fc02:	0a32      	lsrs	r2, r6, #8
 801fc04:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801fc06:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801fc08:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 801fc0a:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801fc0c:	552e      	strb	r6, [r5, r4]
}
 801fc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801fc10:	4b03      	ldr	r3, [pc, #12]	; (801fc20 <dhcp_option_long+0x3c>)
 801fc12:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801fc16:	4903      	ldr	r1, [pc, #12]	; (801fc24 <dhcp_option_long+0x40>)
 801fc18:	4803      	ldr	r0, [pc, #12]	; (801fc28 <dhcp_option_long+0x44>)
 801fc1a:	f004 ff67 	bl	8024aec <iprintf>
 801fc1e:	e7e8      	b.n	801fbf2 <dhcp_option_long+0xe>
 801fc20:	08044604 	.word	0x08044604
 801fc24:	0804463c 	.word	0x0804463c
 801fc28:	0802b818 	.word	0x0802b818

0801fc2c <dhcp_check>:
{
 801fc2c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801fc2e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 801fc30:	7963      	ldrb	r3, [r4, #5]
 801fc32:	2b08      	cmp	r3, #8
 801fc34:	d004      	beq.n	801fc40 <dhcp_check+0x14>
    dhcp->tries = 0;
 801fc36:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801fc38:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801fc3a:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 801fc3c:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801fc3e:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801fc40:	2200      	movs	r2, #0
 801fc42:	f104 011c 	add.w	r1, r4, #28
 801fc46:	f001 ffab 	bl	8021ba0 <etharp_query>
  if (dhcp->tries < 255) {
 801fc4a:	79a3      	ldrb	r3, [r4, #6]
 801fc4c:	2bff      	cmp	r3, #255	; 0xff
 801fc4e:	d001      	beq.n	801fc54 <dhcp_check+0x28>
    dhcp->tries++;
 801fc50:	3301      	adds	r3, #1
 801fc52:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fc54:	2301      	movs	r3, #1
 801fc56:	8123      	strh	r3, [r4, #8]
}
 801fc58:	bd10      	pop	{r4, pc}
 801fc5a:	bf00      	nop

0801fc5c <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801fc5c:	2800      	cmp	r0, #0
 801fc5e:	f000 808e 	beq.w	801fd7e <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 801fc62:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801fc64:	2900      	cmp	r1, #0
 801fc66:	f000 8091 	beq.w	801fd8c <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801fc6a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 801fc6c:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801fc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 801fc72:	b500      	push	{lr}
  dhcp->lease_used = 0;
 801fc74:	824a      	strh	r2, [r1, #18]
{
 801fc76:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801fc78:	d00e      	beq.n	801fc98 <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fc7a:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801fc7c:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801fc80:	d258      	bcs.n	801fd34 <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fc82:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 801fc86:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fc88:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 801fc8c:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 801fc90:	f200 8083 	bhi.w	801fd9a <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 801fc94:	2301      	movs	r3, #1
 801fc96:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801fc98:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801fc9a:	1c5a      	adds	r2, r3, #1
 801fc9c:	d050      	beq.n	801fd40 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fc9e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801fca0:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801fca4:	d241      	bcs.n	801fd2a <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fca6:	4a40      	ldr	r2, [pc, #256]	; (801fda8 <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 801fca8:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fcaa:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 801fcae:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 801fcb2:	d874      	bhi.n	801fd9e <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 801fcb4:	2301      	movs	r3, #1
 801fcb6:	469c      	mov	ip, r3
 801fcb8:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801fcba:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801fcbc:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801fcc0:	1c53      	adds	r3, r2, #1
 801fcc2:	d042      	beq.n	801fd4a <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fcc4:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 801fcc6:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 801fcca:	d24b      	bcs.n	801fd64 <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fccc:	4b36      	ldr	r3, [pc, #216]	; (801fda8 <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 801fcce:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fcd0:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 801fcd4:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 801fcd8:	d864      	bhi.n	801fda4 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 801fcda:	2201      	movs	r2, #1
 801fcdc:	4613      	mov	r3, r2
 801fcde:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801fce0:	2201      	movs	r2, #1
 801fce2:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801fce4:	459c      	cmp	ip, r3
 801fce6:	d302      	bcc.n	801fcee <dhcp_bind+0x92>
 801fce8:	b10a      	cbz	r2, 801fcee <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 801fcea:	2300      	movs	r3, #0
 801fcec:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 801fcee:	79cb      	ldrb	r3, [r1, #7]
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	d02f      	beq.n	801fd54 <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801fcf4:	6a0b      	ldr	r3, [r1, #32]
 801fcf6:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801fcf8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801fcfa:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 801fcfc:	b92b      	cbnz	r3, 801fd0a <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801fcfe:	69cb      	ldr	r3, [r1, #28]
 801fd00:	9a00      	ldr	r2, [sp, #0]
 801fd02:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801fd04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801fd08:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 801fd0a:	794b      	ldrb	r3, [r1, #5]
 801fd0c:	2b0a      	cmp	r3, #10
 801fd0e:	d004      	beq.n	801fd1a <dhcp_bind+0xbe>
    dhcp->tries = 0;
 801fd10:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801fd12:	220a      	movs	r2, #10
    dhcp->tries = 0;
 801fd14:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 801fd16:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 801fd18:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801fd1a:	ab01      	add	r3, sp, #4
 801fd1c:	466a      	mov	r2, sp
 801fd1e:	311c      	adds	r1, #28
 801fd20:	f7fa f9ac 	bl	801a07c <netif_set_addr>
}
 801fd24:	b003      	add	sp, #12
 801fd26:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 801fd2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fd2e:	469c      	mov	ip, r3
 801fd30:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 801fd32:	e7c2      	b.n	801fcba <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 801fd34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fd38:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801fd3a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801fd3c:	1c5a      	adds	r2, r3, #1
 801fd3e:	d1ae      	bne.n	801fc9e <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801fd40:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801fd42:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801fd46:	1c53      	adds	r3, r2, #1
 801fd48:	d1bc      	bne.n	801fcc4 <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801fd4a:	898b      	ldrh	r3, [r1, #12]
 801fd4c:	1e1a      	subs	r2, r3, #0
 801fd4e:	bf18      	it	ne
 801fd50:	2201      	movne	r2, #1
 801fd52:	e7c7      	b.n	801fce4 <dhcp_bind+0x88>
    if (first_octet <= 127) {
 801fd54:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801fd58:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	db07      	blt.n	801fd6e <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801fd5e:	23ff      	movs	r3, #255	; 0xff
 801fd60:	9300      	str	r3, [sp, #0]
 801fd62:	e7c9      	b.n	801fcf8 <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 801fd64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fd68:	4613      	mov	r3, r2
 801fd6a:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 801fd6c:	e7b8      	b.n	801fce0 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 801fd6e:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801fd70:	bf8c      	ite	hi
 801fd72:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801fd76:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 801fd7a:	9300      	str	r3, [sp, #0]
 801fd7c:	e7bc      	b.n	801fcf8 <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801fd7e:	4b0b      	ldr	r3, [pc, #44]	; (801fdac <dhcp_bind+0x150>)
 801fd80:	f240 4215 	movw	r2, #1045	; 0x415
 801fd84:	490a      	ldr	r1, [pc, #40]	; (801fdb0 <dhcp_bind+0x154>)
 801fd86:	480b      	ldr	r0, [pc, #44]	; (801fdb4 <dhcp_bind+0x158>)
 801fd88:	f004 beb0 	b.w	8024aec <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801fd8c:	4b07      	ldr	r3, [pc, #28]	; (801fdac <dhcp_bind+0x150>)
 801fd8e:	f240 4217 	movw	r2, #1047	; 0x417
 801fd92:	4909      	ldr	r1, [pc, #36]	; (801fdb8 <dhcp_bind+0x15c>)
 801fd94:	4807      	ldr	r0, [pc, #28]	; (801fdb4 <dhcp_bind+0x158>)
 801fd96:	f004 bea9 	b.w	8024aec <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 801fd9a:	828a      	strh	r2, [r1, #20]
 801fd9c:	e77c      	b.n	801fc98 <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 801fd9e:	f8a1 c00a 	strh.w	ip, [r1, #10]
 801fda2:	e78a      	b.n	801fcba <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 801fda4:	818b      	strh	r3, [r1, #12]
 801fda6:	e79b      	b.n	801fce0 <dhcp_bind+0x84>
 801fda8:	88888889 	.word	0x88888889
 801fdac:	08044604 	.word	0x08044604
 801fdb0:	08044678 	.word	0x08044678
 801fdb4:	0802b818 	.word	0x0802b818
 801fdb8:	08044694 	.word	0x08044694

0801fdbc <dhcp_inc_pcb_refcount>:
{
 801fdbc:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 801fdbe:	4c15      	ldr	r4, [pc, #84]	; (801fe14 <dhcp_inc_pcb_refcount+0x58>)
 801fdc0:	7823      	ldrb	r3, [r4, #0]
 801fdc2:	b9fb      	cbnz	r3, 801fe04 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801fdc4:	4d14      	ldr	r5, [pc, #80]	; (801fe18 <dhcp_inc_pcb_refcount+0x5c>)
 801fdc6:	682b      	ldr	r3, [r5, #0]
 801fdc8:	b12b      	cbz	r3, 801fdd6 <dhcp_inc_pcb_refcount+0x1a>
 801fdca:	4b14      	ldr	r3, [pc, #80]	; (801fe1c <dhcp_inc_pcb_refcount+0x60>)
 801fdcc:	22e5      	movs	r2, #229	; 0xe5
 801fdce:	4914      	ldr	r1, [pc, #80]	; (801fe20 <dhcp_inc_pcb_refcount+0x64>)
 801fdd0:	4814      	ldr	r0, [pc, #80]	; (801fe24 <dhcp_inc_pcb_refcount+0x68>)
 801fdd2:	f004 fe8b 	bl	8024aec <iprintf>
    dhcp_pcb = udp_new();
 801fdd6:	f7ff fec1 	bl	801fb5c <udp_new>
 801fdda:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 801fddc:	b1b0      	cbz	r0, 801fe0c <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801fdde:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801fde0:	4911      	ldr	r1, [pc, #68]	; (801fe28 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801fde2:	f042 0220 	orr.w	r2, r2, #32
 801fde6:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801fde8:	2244      	movs	r2, #68	; 0x44
 801fdea:	f7ff fc67 	bl	801f6bc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801fdee:	2243      	movs	r2, #67	; 0x43
 801fdf0:	490d      	ldr	r1, [pc, #52]	; (801fe28 <dhcp_inc_pcb_refcount+0x6c>)
 801fdf2:	6828      	ldr	r0, [r5, #0]
 801fdf4:	f7ff fe30 	bl	801fa58 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801fdf8:	2200      	movs	r2, #0
 801fdfa:	490c      	ldr	r1, [pc, #48]	; (801fe2c <dhcp_inc_pcb_refcount+0x70>)
 801fdfc:	6828      	ldr	r0, [r5, #0]
 801fdfe:	f7ff fe71 	bl	801fae4 <udp_recv>
  dhcp_pcb_refcount++;
 801fe02:	7823      	ldrb	r3, [r4, #0]
 801fe04:	3301      	adds	r3, #1
  return ERR_OK;
 801fe06:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 801fe08:	7023      	strb	r3, [r4, #0]
}
 801fe0a:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 801fe0c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801fe10:	bd38      	pop	{r3, r4, r5, pc}
 801fe12:	bf00      	nop
 801fe14:	2002dc1c 	.word	0x2002dc1c
 801fe18:	2002dc18 	.word	0x2002dc18
 801fe1c:	08044604 	.word	0x08044604
 801fe20:	080446ac 	.word	0x080446ac
 801fe24:	0802b818 	.word	0x0802b818
 801fe28:	08044cb8 	.word	0x08044cb8
 801fe2c:	080206d5 	.word	0x080206d5

0801fe30 <dhcp_dec_pcb_refcount>:
{
 801fe30:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801fe32:	4d0b      	ldr	r5, [pc, #44]	; (801fe60 <dhcp_dec_pcb_refcount+0x30>)
 801fe34:	782c      	ldrb	r4, [r5, #0]
 801fe36:	b154      	cbz	r4, 801fe4e <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801fe38:	3c01      	subs	r4, #1
 801fe3a:	b2e4      	uxtb	r4, r4
 801fe3c:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 801fe3e:	b104      	cbz	r4, 801fe42 <dhcp_dec_pcb_refcount+0x12>
}
 801fe40:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 801fe42:	4d08      	ldr	r5, [pc, #32]	; (801fe64 <dhcp_dec_pcb_refcount+0x34>)
 801fe44:	6828      	ldr	r0, [r5, #0]
 801fe46:	f7ff fe5f 	bl	801fb08 <udp_remove>
    dhcp_pcb = NULL;
 801fe4a:	602c      	str	r4, [r5, #0]
}
 801fe4c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801fe4e:	4b06      	ldr	r3, [pc, #24]	; (801fe68 <dhcp_dec_pcb_refcount+0x38>)
 801fe50:	22ff      	movs	r2, #255	; 0xff
 801fe52:	4906      	ldr	r1, [pc, #24]	; (801fe6c <dhcp_dec_pcb_refcount+0x3c>)
 801fe54:	4806      	ldr	r0, [pc, #24]	; (801fe70 <dhcp_dec_pcb_refcount+0x40>)
 801fe56:	f004 fe49 	bl	8024aec <iprintf>
  dhcp_pcb_refcount--;
 801fe5a:	782c      	ldrb	r4, [r5, #0]
 801fe5c:	e7ec      	b.n	801fe38 <dhcp_dec_pcb_refcount+0x8>
 801fe5e:	bf00      	nop
 801fe60:	2002dc1c 	.word	0x2002dc1c
 801fe64:	2002dc18 	.word	0x2002dc18
 801fe68:	08044604 	.word	0x08044604
 801fe6c:	080446d4 	.word	0x080446d4
 801fe70:	0802b818 	.word	0x0802b818

0801fe74 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801fe74:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801fe76:	4d29      	ldr	r5, [pc, #164]	; (801ff1c <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801fe78:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801fe7a:	b083      	sub	sp, #12
 801fe7c:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801fe7e:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801fe80:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801fe84:	b112      	cbz	r2, 801fe8c <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801fe86:	4b26      	ldr	r3, [pc, #152]	; (801ff20 <dhcp_handle_ack.isra.0+0xac>)
 801fe88:	68db      	ldr	r3, [r3, #12]
 801fe8a:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801fe8c:	792b      	ldrb	r3, [r5, #4]
 801fe8e:	2b00      	cmp	r3, #0
 801fe90:	d041      	beq.n	801ff16 <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801fe92:	4b23      	ldr	r3, [pc, #140]	; (801ff20 <dhcp_handle_ack.isra.0+0xac>)
 801fe94:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801fe96:	796a      	ldrb	r2, [r5, #5]
 801fe98:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fe9a:	b312      	cbz	r2, 801fee2 <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801fe9c:	4b20      	ldr	r3, [pc, #128]	; (801ff20 <dhcp_handle_ack.isra.0+0xac>)
 801fe9e:	695b      	ldr	r3, [r3, #20]
 801fea0:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801fea2:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801fea4:	690a      	ldr	r2, [r1, #16]
 801fea6:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801fea8:	bb2b      	cbnz	r3, 801fef6 <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 801feaa:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801feac:	79eb      	ldrb	r3, [r5, #7]
 801feae:	2b00      	cmp	r3, #0
 801feb0:	d12b      	bne.n	801ff0a <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801feb2:	7a2b      	ldrb	r3, [r5, #8]
 801feb4:	b19b      	cbz	r3, 801fede <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801feb6:	4c1a      	ldr	r4, [pc, #104]	; (801ff20 <dhcp_handle_ack.isra.0+0xac>)
 801feb8:	6a20      	ldr	r0, [r4, #32]
 801feba:	f7f8 fd41 	bl	8018940 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 801febe:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801fec0:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 801fec2:	2000      	movs	r0, #0
 801fec4:	f7f9 f8e2 	bl	801908c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801fec8:	7a6b      	ldrb	r3, [r5, #9]
 801feca:	b143      	cbz	r3, 801fede <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801fecc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fece:	f7f8 fd37 	bl	8018940 <lwip_htonl>
 801fed2:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 801fed4:	a901      	add	r1, sp, #4
 801fed6:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801fed8:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 801feda:	f7f9 f8d7 	bl	801908c <dns_setserver>
}
 801fede:	b003      	add	sp, #12
 801fee0:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801fee2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fee4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801fee8:	08db      	lsrs	r3, r3, #3
 801feea:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801feec:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801feee:	690a      	ldr	r2, [r1, #16]
 801fef0:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801fef2:	2b00      	cmp	r3, #0
 801fef4:	d0d9      	beq.n	801feaa <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801fef6:	4b0a      	ldr	r3, [pc, #40]	; (801ff20 <dhcp_handle_ack.isra.0+0xac>)
 801fef8:	6998      	ldr	r0, [r3, #24]
 801fefa:	f7f8 fd21 	bl	8018940 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 801fefe:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801ff00:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 801ff02:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801ff04:	79eb      	ldrb	r3, [r5, #7]
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d0d3      	beq.n	801feb2 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801ff0a:	4b05      	ldr	r3, [pc, #20]	; (801ff20 <dhcp_handle_ack.isra.0+0xac>)
 801ff0c:	69d8      	ldr	r0, [r3, #28]
 801ff0e:	f7f8 fd17 	bl	8018940 <lwip_htonl>
 801ff12:	6260      	str	r0, [r4, #36]	; 0x24
 801ff14:	e7cd      	b.n	801feb2 <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801ff16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ff18:	085b      	lsrs	r3, r3, #1
 801ff1a:	e7bc      	b.n	801fe96 <dhcp_handle_ack.isra.0+0x22>
 801ff1c:	2002dc20 	.word	0x2002dc20
 801ff20:	2002dc2c 	.word	0x2002dc2c

0801ff24 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801ff24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801ff28:	4681      	mov	r9, r0
 801ff2a:	2800      	cmp	r0, #0
 801ff2c:	f000 8097 	beq.w	802005e <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801ff30:	460c      	mov	r4, r1
 801ff32:	2900      	cmp	r1, #0
 801ff34:	f000 808a 	beq.w	802004c <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801ff38:	4616      	mov	r6, r2
 801ff3a:	f44f 719a 	mov.w	r1, #308	; 0x134
 801ff3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ff42:	2036      	movs	r0, #54	; 0x36
 801ff44:	461f      	mov	r7, r3
 801ff46:	f7fa fb61 	bl	801a60c <pbuf_alloc>
  if (p_out == NULL) {
 801ff4a:	4605      	mov	r5, r0
 801ff4c:	2800      	cmp	r0, #0
 801ff4e:	d049      	beq.n	801ffe4 <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801ff50:	8943      	ldrh	r3, [r0, #10]
 801ff52:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801ff56:	d371      	bcc.n	802003c <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801ff58:	2e03      	cmp	r6, #3
 801ff5a:	d051      	beq.n	8020000 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801ff5c:	79a3      	ldrb	r3, [r4, #6]
 801ff5e:	2b00      	cmp	r3, #0
 801ff60:	d043      	beq.n	801ffea <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801ff62:	4b43      	ldr	r3, [pc, #268]	; (8020070 <dhcp_create_msg+0x14c>)
 801ff64:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801ff66:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801ff6a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801ff6e:	2100      	movs	r1, #0
    dhcp->xid = xid;
 801ff70:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801ff72:	4640      	mov	r0, r8
 801ff74:	f003 fe1e 	bl	8023bb4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801ff78:	2301      	movs	r3, #1
 801ff7a:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801ff7e:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 801ff82:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 801ff86:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801ff8a:	6820      	ldr	r0, [r4, #0]
 801ff8c:	f7f8 fcd8 	bl	8018940 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801ff90:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 801ff92:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801ff96:	d12d      	bne.n	801fff4 <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801ff98:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ff9c:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ffa0:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 801ffa4:	f109 0434 	add.w	r4, r9, #52	; 0x34
 801ffa8:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801ffac:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ffb0:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 801ffb2:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ffb6:	d1f9      	bne.n	801ffac <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801ffb8:	2363      	movs	r3, #99	; 0x63
 801ffba:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 801ffbe:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801ffc2:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 801ffc6:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 801ffca:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801ffcc:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 801ffd0:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 801ffd2:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 801ffd6:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801ffd8:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 801ffdc:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 801ffe0:	2303      	movs	r3, #3
 801ffe2:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 801ffe4:	4628      	mov	r0, r5
 801ffe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 801ffea:	f004 fe23 	bl	8024c34 <rand>
 801ffee:	4b20      	ldr	r3, [pc, #128]	; (8020070 <dhcp_create_msg+0x14c>)
 801fff0:	6018      	str	r0, [r3, #0]
 801fff2:	e7b8      	b.n	801ff66 <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801fff4:	1ff3      	subs	r3, r6, #7
 801fff6:	2b01      	cmp	r3, #1
 801fff8:	d9ce      	bls.n	801ff98 <dhcp_create_msg+0x74>
 801fffa:	2e03      	cmp	r6, #3
 801fffc:	d1d0      	bne.n	801ffa0 <dhcp_create_msg+0x7c>
 801fffe:	e018      	b.n	8020032 <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8020000:	7963      	ldrb	r3, [r4, #5]
 8020002:	2b03      	cmp	r3, #3
 8020004:	d0aa      	beq.n	801ff5c <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 8020006:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 802000a:	f44f 729a 	mov.w	r2, #308	; 0x134
 802000e:	2100      	movs	r1, #0
 8020010:	4640      	mov	r0, r8
 8020012:	f003 fdcf 	bl	8023bb4 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8020016:	2301      	movs	r3, #1
 8020018:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 802001c:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8020020:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8020024:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8020028:	6820      	ldr	r0, [r4, #0]
 802002a:	f7f8 fc89 	bl	8018940 <lwip_htonl>
 802002e:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8020032:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8020034:	3b04      	subs	r3, #4
 8020036:	2b01      	cmp	r3, #1
 8020038:	d8b2      	bhi.n	801ffa0 <dhcp_create_msg+0x7c>
 802003a:	e7ad      	b.n	801ff98 <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 802003c:	4b0d      	ldr	r3, [pc, #52]	; (8020074 <dhcp_create_msg+0x150>)
 802003e:	f240 7271 	movw	r2, #1905	; 0x771
 8020042:	490d      	ldr	r1, [pc, #52]	; (8020078 <dhcp_create_msg+0x154>)
 8020044:	480d      	ldr	r0, [pc, #52]	; (802007c <dhcp_create_msg+0x158>)
 8020046:	f004 fd51 	bl	8024aec <iprintf>
 802004a:	e785      	b.n	801ff58 <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 802004c:	4b09      	ldr	r3, [pc, #36]	; (8020074 <dhcp_create_msg+0x150>)
 802004e:	f240 726a 	movw	r2, #1898	; 0x76a
 8020052:	490b      	ldr	r1, [pc, #44]	; (8020080 <dhcp_create_msg+0x15c>)
 8020054:	4625      	mov	r5, r4
 8020056:	4809      	ldr	r0, [pc, #36]	; (802007c <dhcp_create_msg+0x158>)
 8020058:	f004 fd48 	bl	8024aec <iprintf>
 802005c:	e7c2      	b.n	801ffe4 <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 802005e:	4b05      	ldr	r3, [pc, #20]	; (8020074 <dhcp_create_msg+0x150>)
 8020060:	f240 7269 	movw	r2, #1897	; 0x769
 8020064:	4907      	ldr	r1, [pc, #28]	; (8020084 <dhcp_create_msg+0x160>)
 8020066:	464d      	mov	r5, r9
 8020068:	4804      	ldr	r0, [pc, #16]	; (802007c <dhcp_create_msg+0x158>)
 802006a:	f004 fd3f 	bl	8024aec <iprintf>
 802006e:	e7b9      	b.n	801ffe4 <dhcp_create_msg+0xc0>
 8020070:	2002dc54 	.word	0x2002dc54
 8020074:	08044604 	.word	0x08044604
 8020078:	08044738 	.word	0x08044738
 802007c:	0802b818 	.word	0x0802b818
 8020080:	08044718 	.word	0x08044718
 8020084:	080446f8 	.word	0x080446f8

08020088 <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 8020088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802008c:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 8020090:	b087      	sub	sp, #28
 8020092:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 8020094:	f89a 3005 	ldrb.w	r3, [sl, #5]
 8020098:	2b03      	cmp	r3, #3
 802009a:	d007      	beq.n	80200ac <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 802009c:	2300      	movs	r3, #0
    dhcp->state = new_state;
 802009e:	2203      	movs	r2, #3
    dhcp->tries = 0;
 80200a0:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 80200a4:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 80200a8:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80200ac:	f10d 0316 	add.w	r3, sp, #22
 80200b0:	2203      	movs	r2, #3
 80200b2:	4651      	mov	r1, sl
 80200b4:	4648      	mov	r0, r9
 80200b6:	f7ff ff35 	bl	801ff24 <dhcp_create_msg>
  if (p_out != NULL) {
 80200ba:	4607      	mov	r7, r0
 80200bc:	2800      	cmp	r0, #0
 80200be:	f000 808d 	beq.w	80201dc <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80200c2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80200c6:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80200c8:	f104 0804 	add.w	r8, r4, #4
 80200cc:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80200ce:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80200d0:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 80200d4:	f200 80a3 	bhi.w	802021e <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 80200d8:	2239      	movs	r2, #57	; 0x39
 80200da:	1c63      	adds	r3, r4, #1
 80200dc:	fa1f fb85 	uxth.w	fp, r5
 80200e0:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 80200e2:	b29b      	uxth	r3, r3
 80200e4:	2202      	movs	r2, #2
 80200e6:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80200e8:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80200ec:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80200f0:	2b44      	cmp	r3, #68	; 0x44
 80200f2:	f200 80ac 	bhi.w	802024e <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80200f6:	2202      	movs	r2, #2
 80200f8:	1ce3      	adds	r3, r4, #3
 80200fa:	fa1f f588 	uxth.w	r5, r8
 80200fe:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020102:	b29b      	uxth	r3, r3
 8020104:	2240      	movs	r2, #64	; 0x40
 8020106:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020108:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 802010a:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802010e:	2b44      	cmp	r3, #68	; 0x44
 8020110:	f200 8095 	bhi.w	802023e <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 8020114:	1d63      	adds	r3, r4, #5
 8020116:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 8020118:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 802011a:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 802011c:	b29b      	uxth	r3, r3
 802011e:	2204      	movs	r2, #4
 8020120:	b2a4      	uxth	r4, r4
 8020122:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020124:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020128:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802012c:	f7f8 fc08 	bl	8018940 <lwip_htonl>
 8020130:	4631      	mov	r1, r6
 8020132:	4602      	mov	r2, r0
 8020134:	4620      	mov	r0, r4
 8020136:	f7ff fd55 	bl	801fbe4 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802013a:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802013c:	4605      	mov	r5, r0
 802013e:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020142:	2b44      	cmp	r3, #68	; 0x44
 8020144:	9303      	str	r3, [sp, #12]
 8020146:	d872      	bhi.n	802022e <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 8020148:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 802014a:	2237      	movs	r2, #55	; 0x37
 802014c:	1c6b      	adds	r3, r5, #1
 802014e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8020284 <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 8020152:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 8020154:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8020156:	b29b      	uxth	r3, r3
 8020158:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802015a:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802015c:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 8020160:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020162:	493f      	ldr	r1, [pc, #252]	; (8020260 <dhcp_reboot.isra.0+0x1d8>)
 8020164:	4b3f      	ldr	r3, [pc, #252]	; (8020264 <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020166:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802016a:	d80c      	bhi.n	8020186 <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 802016c:	1c62      	adds	r2, r4, #1
 802016e:	f806 b004 	strb.w	fp, [r6, r4]
 8020172:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020174:	4a3c      	ldr	r2, [pc, #240]	; (8020268 <dhcp_reboot.isra.0+0x1e0>)
 8020176:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020178:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802017c:	d00b      	beq.n	8020196 <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802017e:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020180:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020184:	d9f2      	bls.n	802016c <dhcp_reboot.isra.0+0xe4>
 8020186:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802018a:	4838      	ldr	r0, [pc, #224]	; (802026c <dhcp_reboot.isra.0+0x1e4>)
 802018c:	f004 fcae 	bl	8024aec <iprintf>
 8020190:	4b34      	ldr	r3, [pc, #208]	; (8020264 <dhcp_reboot.isra.0+0x1dc>)
 8020192:	4933      	ldr	r1, [pc, #204]	; (8020260 <dhcp_reboot.isra.0+0x1d8>)
 8020194:	e7ea      	b.n	802016c <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 8020196:	1de8      	adds	r0, r5, #7
 8020198:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802019c:	22ff      	movs	r2, #255	; 0xff
 802019e:	b280      	uxth	r0, r0
 80201a0:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80201a2:	2843      	cmp	r0, #67	; 0x43
 80201a4:	d808      	bhi.n	80201b8 <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80201a6:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 80201aa:	4430      	add	r0, r6
 80201ac:	2100      	movs	r1, #0
 80201ae:	b2ad      	uxth	r5, r5
 80201b0:	1c6a      	adds	r2, r5, #1
 80201b2:	f003 fcff 	bl	8023bb4 <memset>
 80201b6:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80201b8:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 80201bc:	4638      	mov	r0, r7
 80201be:	b289      	uxth	r1, r1
 80201c0:	f7fa fade 	bl	801a780 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80201c4:	482a      	ldr	r0, [pc, #168]	; (8020270 <dhcp_reboot.isra.0+0x1e8>)
 80201c6:	2343      	movs	r3, #67	; 0x43
 80201c8:	4a2a      	ldr	r2, [pc, #168]	; (8020274 <dhcp_reboot.isra.0+0x1ec>)
 80201ca:	6800      	ldr	r0, [r0, #0]
 80201cc:	4639      	mov	r1, r7
 80201ce:	f8cd 9000 	str.w	r9, [sp]
 80201d2:	f7ff fba5 	bl	801f920 <udp_sendto_if>
    pbuf_free(p_out);
 80201d6:	4638      	mov	r0, r7
 80201d8:	f7fa fbce 	bl	801a978 <pbuf_free>
  if (dhcp->tries < 255) {
 80201dc:	f89a 3006 	ldrb.w	r3, [sl, #6]
 80201e0:	2bff      	cmp	r3, #255	; 0xff
 80201e2:	d016      	beq.n	8020212 <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 80201e4:	3301      	adds	r3, #1
 80201e6:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80201e8:	2b09      	cmp	r3, #9
    dhcp->tries++;
 80201ea:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80201ee:	d810      	bhi.n	8020212 <dhcp_reboot.isra.0+0x18a>
 80201f0:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80201f4:	4a20      	ldr	r2, [pc, #128]	; (8020278 <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80201f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80201fa:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80201fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020200:	b29b      	uxth	r3, r3
 8020202:	fba2 2303 	umull	r2, r3, r2, r3
 8020206:	095b      	lsrs	r3, r3, #5
 8020208:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 802020c:	b007      	add	sp, #28
 802020e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020212:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020214:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8020218:	b007      	add	sp, #28
 802021a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802021e:	4b11      	ldr	r3, [pc, #68]	; (8020264 <dhcp_reboot.isra.0+0x1dc>)
 8020220:	f240 529a 	movw	r2, #1434	; 0x59a
 8020224:	4915      	ldr	r1, [pc, #84]	; (802027c <dhcp_reboot.isra.0+0x1f4>)
 8020226:	4811      	ldr	r0, [pc, #68]	; (802026c <dhcp_reboot.isra.0+0x1e4>)
 8020228:	f004 fc60 	bl	8024aec <iprintf>
 802022c:	e754      	b.n	80200d8 <dhcp_reboot.isra.0+0x50>
 802022e:	4b0d      	ldr	r3, [pc, #52]	; (8020264 <dhcp_reboot.isra.0+0x1dc>)
 8020230:	f240 529a 	movw	r2, #1434	; 0x59a
 8020234:	4911      	ldr	r1, [pc, #68]	; (802027c <dhcp_reboot.isra.0+0x1f4>)
 8020236:	480d      	ldr	r0, [pc, #52]	; (802026c <dhcp_reboot.isra.0+0x1e4>)
 8020238:	f004 fc58 	bl	8024aec <iprintf>
 802023c:	e784      	b.n	8020148 <dhcp_reboot.isra.0+0xc0>
 802023e:	4b09      	ldr	r3, [pc, #36]	; (8020264 <dhcp_reboot.isra.0+0x1dc>)
 8020240:	f240 529a 	movw	r2, #1434	; 0x59a
 8020244:	490d      	ldr	r1, [pc, #52]	; (802027c <dhcp_reboot.isra.0+0x1f4>)
 8020246:	4809      	ldr	r0, [pc, #36]	; (802026c <dhcp_reboot.isra.0+0x1e4>)
 8020248:	f004 fc50 	bl	8024aec <iprintf>
 802024c:	e762      	b.n	8020114 <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802024e:	4b05      	ldr	r3, [pc, #20]	; (8020264 <dhcp_reboot.isra.0+0x1dc>)
 8020250:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020254:	490a      	ldr	r1, [pc, #40]	; (8020280 <dhcp_reboot.isra.0+0x1f8>)
 8020256:	4805      	ldr	r0, [pc, #20]	; (802026c <dhcp_reboot.isra.0+0x1e4>)
 8020258:	f004 fc48 	bl	8024aec <iprintf>
 802025c:	e74b      	b.n	80200f6 <dhcp_reboot.isra.0+0x6e>
 802025e:	bf00      	nop
 8020260:	080447f8 	.word	0x080447f8
 8020264:	08044604 	.word	0x08044604
 8020268:	08044980 	.word	0x08044980
 802026c:	0802b818 	.word	0x0802b818
 8020270:	2002dc18 	.word	0x2002dc18
 8020274:	08044cbc 	.word	0x08044cbc
 8020278:	10624dd3 	.word	0x10624dd3
 802027c:	08044778 	.word	0x08044778
 8020280:	080447bc 	.word	0x080447bc
 8020284:	0804497d 	.word	0x0804497d

08020288 <dhcp_discover>:
{
 8020288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802028c:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 802028e:	2300      	movs	r3, #0
{
 8020290:	b087      	sub	sp, #28
 8020292:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8020294:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8020296:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 8020298:	2a06      	cmp	r2, #6
 802029a:	d003      	beq.n	80202a4 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 802029c:	2206      	movs	r2, #6
    dhcp->tries = 0;
 802029e:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 80202a0:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 80202a2:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80202a4:	f10d 0316 	add.w	r3, sp, #22
 80202a8:	2201      	movs	r2, #1
 80202aa:	4639      	mov	r1, r7
 80202ac:	4658      	mov	r0, fp
 80202ae:	f7ff fe39 	bl	801ff24 <dhcp_create_msg>
  if (p_out != NULL) {
 80202b2:	4605      	mov	r5, r0
 80202b4:	2800      	cmp	r0, #0
 80202b6:	f000 8081 	beq.w	80203bc <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80202ba:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80202be:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80202c0:	f104 0804 	add.w	r8, r4, #4
 80202c4:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80202c8:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80202ca:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 80202ce:	f200 809a 	bhi.w	8020406 <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 80202d2:	2239      	movs	r2, #57	; 0x39
 80202d4:	1c63      	adds	r3, r4, #1
 80202d6:	fa1f f189 	uxth.w	r1, r9
 80202da:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 80202dc:	b29b      	uxth	r3, r3
 80202de:	2202      	movs	r2, #2
 80202e0:	9103      	str	r1, [sp, #12]
 80202e2:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80202e4:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80202e6:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80202ea:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80202ec:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80202f0:	f200 8091 	bhi.w	8020416 <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80202f4:	1ce3      	adds	r3, r4, #3
 80202f6:	fa1f f988 	uxth.w	r9, r8
 80202fa:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80202fe:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020300:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020302:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020304:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020308:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802030c:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020310:	2b44      	cmp	r3, #68	; 0x44
 8020312:	d870      	bhi.n	80203f6 <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 8020314:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8020318:	2237      	movs	r2, #55	; 0x37
 802031a:	1d63      	adds	r3, r4, #5
 802031c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8020450 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 8020320:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8020324:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8020328:	b29b      	uxth	r3, r3
 802032a:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802032c:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020330:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8020334:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020336:	493c      	ldr	r1, [pc, #240]	; (8020428 <dhcp_discover+0x1a0>)
 8020338:	4b3c      	ldr	r3, [pc, #240]	; (802042c <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802033a:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802033e:	d80f      	bhi.n	8020360 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 8020340:	f108 0201 	add.w	r2, r8, #1
 8020344:	f806 9008 	strb.w	r9, [r6, r8]
 8020348:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802034c:	4a38      	ldr	r2, [pc, #224]	; (8020430 <dhcp_discover+0x1a8>)
 802034e:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020350:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020354:	d00c      	beq.n	8020370 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020356:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802035a:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802035e:	d9ef      	bls.n	8020340 <dhcp_discover+0xb8>
 8020360:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020364:	4833      	ldr	r0, [pc, #204]	; (8020434 <dhcp_discover+0x1ac>)
 8020366:	f004 fbc1 	bl	8024aec <iprintf>
 802036a:	4b30      	ldr	r3, [pc, #192]	; (802042c <dhcp_discover+0x1a4>)
 802036c:	492e      	ldr	r1, [pc, #184]	; (8020428 <dhcp_discover+0x1a0>)
 802036e:	e7e7      	b.n	8020340 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 8020370:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8020374:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8020378:	22ff      	movs	r2, #255	; 0xff
 802037a:	b280      	uxth	r0, r0
 802037c:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802037e:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8020380:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020382:	d808      	bhi.n	8020396 <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 8020384:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8020388:	4430      	add	r0, r6
 802038a:	2100      	movs	r1, #0
 802038c:	b2a4      	uxth	r4, r4
 802038e:	1c62      	adds	r2, r4, #1
 8020390:	f003 fc10 	bl	8023bb4 <memset>
 8020394:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020396:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 802039a:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802039c:	4c26      	ldr	r4, [pc, #152]	; (8020438 <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802039e:	b289      	uxth	r1, r1
 80203a0:	f7fa f9ee 	bl	801a780 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80203a4:	4825      	ldr	r0, [pc, #148]	; (802043c <dhcp_discover+0x1b4>)
 80203a6:	2343      	movs	r3, #67	; 0x43
 80203a8:	4a25      	ldr	r2, [pc, #148]	; (8020440 <dhcp_discover+0x1b8>)
 80203aa:	6800      	ldr	r0, [r0, #0]
 80203ac:	4629      	mov	r1, r5
 80203ae:	e9cd b400 	strd	fp, r4, [sp]
 80203b2:	f7ff fa01 	bl	801f7b8 <udp_sendto_if_src>
    pbuf_free(p_out);
 80203b6:	4628      	mov	r0, r5
 80203b8:	f7fa fade 	bl	801a978 <pbuf_free>
  if (dhcp->tries < 255) {
 80203bc:	79bb      	ldrb	r3, [r7, #6]
 80203be:	2bff      	cmp	r3, #255	; 0xff
 80203c0:	d013      	beq.n	80203ea <dhcp_discover+0x162>
    dhcp->tries++;
 80203c2:	3301      	adds	r3, #1
 80203c4:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80203c6:	2a05      	cmp	r2, #5
    dhcp->tries++;
 80203c8:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80203ca:	d80e      	bhi.n	80203ea <dhcp_discover+0x162>
 80203cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80203d0:	491c      	ldr	r1, [pc, #112]	; (8020444 <dhcp_discover+0x1bc>)
}
 80203d2:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80203d4:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80203d6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80203da:	b29b      	uxth	r3, r3
 80203dc:	fba1 2303 	umull	r2, r3, r1, r3
 80203e0:	095b      	lsrs	r3, r3, #5
 80203e2:	813b      	strh	r3, [r7, #8]
}
 80203e4:	b007      	add	sp, #28
 80203e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 80203ea:	2378      	movs	r3, #120	; 0x78
}
 80203ec:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80203ee:	813b      	strh	r3, [r7, #8]
}
 80203f0:	b007      	add	sp, #28
 80203f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80203f6:	4b0d      	ldr	r3, [pc, #52]	; (802042c <dhcp_discover+0x1a4>)
 80203f8:	f240 529a 	movw	r2, #1434	; 0x59a
 80203fc:	4912      	ldr	r1, [pc, #72]	; (8020448 <dhcp_discover+0x1c0>)
 80203fe:	480d      	ldr	r0, [pc, #52]	; (8020434 <dhcp_discover+0x1ac>)
 8020400:	f004 fb74 	bl	8024aec <iprintf>
 8020404:	e786      	b.n	8020314 <dhcp_discover+0x8c>
 8020406:	4b09      	ldr	r3, [pc, #36]	; (802042c <dhcp_discover+0x1a4>)
 8020408:	f240 529a 	movw	r2, #1434	; 0x59a
 802040c:	490e      	ldr	r1, [pc, #56]	; (8020448 <dhcp_discover+0x1c0>)
 802040e:	4809      	ldr	r0, [pc, #36]	; (8020434 <dhcp_discover+0x1ac>)
 8020410:	f004 fb6c 	bl	8024aec <iprintf>
 8020414:	e75d      	b.n	80202d2 <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020416:	4b05      	ldr	r3, [pc, #20]	; (802042c <dhcp_discover+0x1a4>)
 8020418:	f240 52ae 	movw	r2, #1454	; 0x5ae
 802041c:	490b      	ldr	r1, [pc, #44]	; (802044c <dhcp_discover+0x1c4>)
 802041e:	4805      	ldr	r0, [pc, #20]	; (8020434 <dhcp_discover+0x1ac>)
 8020420:	f004 fb64 	bl	8024aec <iprintf>
 8020424:	e766      	b.n	80202f4 <dhcp_discover+0x6c>
 8020426:	bf00      	nop
 8020428:	080447f8 	.word	0x080447f8
 802042c:	08044604 	.word	0x08044604
 8020430:	08044980 	.word	0x08044980
 8020434:	0802b818 	.word	0x0802b818
 8020438:	08044cb8 	.word	0x08044cb8
 802043c:	2002dc18 	.word	0x2002dc18
 8020440:	08044cbc 	.word	0x08044cbc
 8020444:	10624dd3 	.word	0x10624dd3
 8020448:	08044778 	.word	0x08044778
 802044c:	080447bc 	.word	0x080447bc
 8020450:	0804497d 	.word	0x0804497d

08020454 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8020454:	2800      	cmp	r0, #0
 8020456:	f000 8112 	beq.w	802067e <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 802045a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 802045e:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 8020460:	b087      	sub	sp, #28
 8020462:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020464:	2e00      	cmp	r6, #0
 8020466:	f000 8111 	beq.w	802068c <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 802046a:	7973      	ldrb	r3, [r6, #5]
 802046c:	2b01      	cmp	r3, #1
 802046e:	d004      	beq.n	802047a <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 8020470:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020472:	2201      	movs	r2, #1
    dhcp->tries = 0;
 8020474:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 8020476:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 8020478:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802047a:	f10d 0316 	add.w	r3, sp, #22
 802047e:	2203      	movs	r2, #3
 8020480:	4631      	mov	r1, r6
 8020482:	4658      	mov	r0, fp
 8020484:	f7ff fd4e 	bl	801ff24 <dhcp_create_msg>
  if (p_out != NULL) {
 8020488:	4605      	mov	r5, r0
 802048a:	2800      	cmp	r0, #0
 802048c:	f000 80b4 	beq.w	80205f8 <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020490:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8020494:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020496:	f107 0804 	add.w	r8, r7, #4
 802049a:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802049e:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80204a0:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 80204a4:	f200 80cb 	bhi.w	802063e <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 80204a8:	2239      	movs	r2, #57	; 0x39
 80204aa:	1c7b      	adds	r3, r7, #1
 80204ac:	fa1f f189 	uxth.w	r1, r9
 80204b0:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 80204b2:	b29b      	uxth	r3, r3
 80204b4:	2202      	movs	r2, #2
 80204b6:	9103      	str	r1, [sp, #12]
 80204b8:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80204ba:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80204bc:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80204c0:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80204c2:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80204c6:	f200 80c2 	bhi.w	802064e <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80204ca:	1cfb      	adds	r3, r7, #3
 80204cc:	fa1f f988 	uxth.w	r9, r8
 80204d0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80204d4:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80204d6:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80204d8:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80204da:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80204de:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80204e2:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80204e6:	2b44      	cmp	r3, #68	; 0x44
 80204e8:	f200 80b9 	bhi.w	802065e <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 80204ec:	1d7b      	adds	r3, r7, #5
 80204ee:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 80204f0:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 80204f2:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 80204f6:	b29b      	uxth	r3, r3
 80204f8:	2204      	movs	r2, #4
 80204fa:	b2bf      	uxth	r7, r7
 80204fc:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80204fe:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020500:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020504:	f7f8 fa1c 	bl	8018940 <lwip_htonl>
 8020508:	4621      	mov	r1, r4
 802050a:	4602      	mov	r2, r0
 802050c:	4638      	mov	r0, r7
 802050e:	f7ff fb69 	bl	801fbe4 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020512:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020514:	4607      	mov	r7, r0
 8020516:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802051a:	2b44      	cmp	r3, #68	; 0x44
 802051c:	f200 80a7 	bhi.w	802066e <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 8020520:	2236      	movs	r2, #54	; 0x36
 8020522:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 8020524:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 8020528:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 802052a:	b29b      	uxth	r3, r3
 802052c:	2204      	movs	r2, #4
 802052e:	fa1f f888 	uxth.w	r8, r8
 8020532:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020534:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8020536:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 802053a:	f7f8 fa01 	bl	8018940 <lwip_htonl>
 802053e:	4621      	mov	r1, r4
 8020540:	4602      	mov	r2, r0
 8020542:	4640      	mov	r0, r8
 8020544:	f7ff fb4e 	bl	801fbe4 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020548:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 802054a:	4680      	mov	r8, r0
 802054c:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020550:	2b44      	cmp	r3, #68	; 0x44
 8020552:	9303      	str	r3, [sp, #12]
 8020554:	d86b      	bhi.n	802062e <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 8020556:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 802055a:	2237      	movs	r2, #55	; 0x37
 802055c:	f108 0301 	add.w	r3, r8, #1
 8020560:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80206d0 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 8020564:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 8020566:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 802056a:	b29b      	uxth	r3, r3
 802056c:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802056e:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020570:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8020574:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020576:	494a      	ldr	r1, [pc, #296]	; (80206a0 <dhcp_select.isra.0+0x24c>)
 8020578:	4b4a      	ldr	r3, [pc, #296]	; (80206a4 <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802057a:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802057e:	d80c      	bhi.n	802059a <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 8020580:	1c7a      	adds	r2, r7, #1
 8020582:	f804 a007 	strb.w	sl, [r4, r7]
 8020586:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020588:	4a47      	ldr	r2, [pc, #284]	; (80206a8 <dhcp_select.isra.0+0x254>)
 802058a:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802058c:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020590:	d00b      	beq.n	80205aa <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020592:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020594:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020598:	d9f2      	bls.n	8020580 <dhcp_select.isra.0+0x12c>
 802059a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802059e:	4843      	ldr	r0, [pc, #268]	; (80206ac <dhcp_select.isra.0+0x258>)
 80205a0:	f004 faa4 	bl	8024aec <iprintf>
 80205a4:	4b3f      	ldr	r3, [pc, #252]	; (80206a4 <dhcp_select.isra.0+0x250>)
 80205a6:	493e      	ldr	r1, [pc, #248]	; (80206a0 <dhcp_select.isra.0+0x24c>)
 80205a8:	e7ea      	b.n	8020580 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 80205aa:	f108 0007 	add.w	r0, r8, #7
 80205ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80205b2:	22ff      	movs	r2, #255	; 0xff
 80205b4:	b280      	uxth	r0, r0
 80205b6:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80205b8:	2843      	cmp	r0, #67	; 0x43
 80205ba:	d80a      	bhi.n	80205d2 <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 80205bc:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 80205c0:	4420      	add	r0, r4
 80205c2:	2100      	movs	r1, #0
 80205c4:	fa1f f888 	uxth.w	r8, r8
 80205c8:	f108 0201 	add.w	r2, r8, #1
 80205cc:	f003 faf2 	bl	8023bb4 <memset>
 80205d0:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80205d2:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 80205d6:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80205d8:	4c35      	ldr	r4, [pc, #212]	; (80206b0 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80205da:	b289      	uxth	r1, r1
 80205dc:	f7fa f8d0 	bl	801a780 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80205e0:	4834      	ldr	r0, [pc, #208]	; (80206b4 <dhcp_select.isra.0+0x260>)
 80205e2:	2343      	movs	r3, #67	; 0x43
 80205e4:	4a34      	ldr	r2, [pc, #208]	; (80206b8 <dhcp_select.isra.0+0x264>)
 80205e6:	6800      	ldr	r0, [r0, #0]
 80205e8:	4629      	mov	r1, r5
 80205ea:	e9cd b400 	strd	fp, r4, [sp]
 80205ee:	f7ff f8e3 	bl	801f7b8 <udp_sendto_if_src>
    pbuf_free(p_out);
 80205f2:	4628      	mov	r0, r5
 80205f4:	f7fa f9c0 	bl	801a978 <pbuf_free>
  if (dhcp->tries < 255) {
 80205f8:	79b3      	ldrb	r3, [r6, #6]
 80205fa:	2bff      	cmp	r3, #255	; 0xff
 80205fc:	d012      	beq.n	8020624 <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 80205fe:	3301      	adds	r3, #1
 8020600:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020602:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8020604:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020606:	d80d      	bhi.n	8020624 <dhcp_select.isra.0+0x1d0>
 8020608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802060c:	492b      	ldr	r1, [pc, #172]	; (80206bc <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802060e:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020610:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020614:	b29b      	uxth	r3, r3
 8020616:	fba1 2303 	umull	r2, r3, r1, r3
 802061a:	095b      	lsrs	r3, r3, #5
 802061c:	8133      	strh	r3, [r6, #8]
}
 802061e:	b007      	add	sp, #28
 8020620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020624:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020626:	8133      	strh	r3, [r6, #8]
}
 8020628:	b007      	add	sp, #28
 802062a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802062e:	4b1d      	ldr	r3, [pc, #116]	; (80206a4 <dhcp_select.isra.0+0x250>)
 8020630:	f240 529a 	movw	r2, #1434	; 0x59a
 8020634:	4922      	ldr	r1, [pc, #136]	; (80206c0 <dhcp_select.isra.0+0x26c>)
 8020636:	481d      	ldr	r0, [pc, #116]	; (80206ac <dhcp_select.isra.0+0x258>)
 8020638:	f004 fa58 	bl	8024aec <iprintf>
 802063c:	e78b      	b.n	8020556 <dhcp_select.isra.0+0x102>
 802063e:	4b19      	ldr	r3, [pc, #100]	; (80206a4 <dhcp_select.isra.0+0x250>)
 8020640:	f240 529a 	movw	r2, #1434	; 0x59a
 8020644:	491e      	ldr	r1, [pc, #120]	; (80206c0 <dhcp_select.isra.0+0x26c>)
 8020646:	4819      	ldr	r0, [pc, #100]	; (80206ac <dhcp_select.isra.0+0x258>)
 8020648:	f004 fa50 	bl	8024aec <iprintf>
 802064c:	e72c      	b.n	80204a8 <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802064e:	4b15      	ldr	r3, [pc, #84]	; (80206a4 <dhcp_select.isra.0+0x250>)
 8020650:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020654:	491b      	ldr	r1, [pc, #108]	; (80206c4 <dhcp_select.isra.0+0x270>)
 8020656:	4815      	ldr	r0, [pc, #84]	; (80206ac <dhcp_select.isra.0+0x258>)
 8020658:	f004 fa48 	bl	8024aec <iprintf>
 802065c:	e735      	b.n	80204ca <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802065e:	4b11      	ldr	r3, [pc, #68]	; (80206a4 <dhcp_select.isra.0+0x250>)
 8020660:	f240 529a 	movw	r2, #1434	; 0x59a
 8020664:	4916      	ldr	r1, [pc, #88]	; (80206c0 <dhcp_select.isra.0+0x26c>)
 8020666:	4811      	ldr	r0, [pc, #68]	; (80206ac <dhcp_select.isra.0+0x258>)
 8020668:	f004 fa40 	bl	8024aec <iprintf>
 802066c:	e73e      	b.n	80204ec <dhcp_select.isra.0+0x98>
 802066e:	4b0d      	ldr	r3, [pc, #52]	; (80206a4 <dhcp_select.isra.0+0x250>)
 8020670:	f240 529a 	movw	r2, #1434	; 0x59a
 8020674:	4912      	ldr	r1, [pc, #72]	; (80206c0 <dhcp_select.isra.0+0x26c>)
 8020676:	480d      	ldr	r0, [pc, #52]	; (80206ac <dhcp_select.isra.0+0x258>)
 8020678:	f004 fa38 	bl	8024aec <iprintf>
 802067c:	e750      	b.n	8020520 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 802067e:	4b09      	ldr	r3, [pc, #36]	; (80206a4 <dhcp_select.isra.0+0x250>)
 8020680:	f240 1277 	movw	r2, #375	; 0x177
 8020684:	4910      	ldr	r1, [pc, #64]	; (80206c8 <dhcp_select.isra.0+0x274>)
 8020686:	4809      	ldr	r0, [pc, #36]	; (80206ac <dhcp_select.isra.0+0x258>)
 8020688:	f004 ba30 	b.w	8024aec <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 802068c:	4b05      	ldr	r3, [pc, #20]	; (80206a4 <dhcp_select.isra.0+0x250>)
 802068e:	f240 1279 	movw	r2, #377	; 0x179
 8020692:	490e      	ldr	r1, [pc, #56]	; (80206cc <dhcp_select.isra.0+0x278>)
 8020694:	4805      	ldr	r0, [pc, #20]	; (80206ac <dhcp_select.isra.0+0x258>)
}
 8020696:	b007      	add	sp, #28
 8020698:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 802069c:	f004 ba26 	b.w	8024aec <iprintf>
 80206a0:	080447f8 	.word	0x080447f8
 80206a4:	08044604 	.word	0x08044604
 80206a8:	08044980 	.word	0x08044980
 80206ac:	0802b818 	.word	0x0802b818
 80206b0:	08044cb8 	.word	0x08044cb8
 80206b4:	2002dc18 	.word	0x2002dc18
 80206b8:	08044cbc 	.word	0x08044cbc
 80206bc:	10624dd3 	.word	0x10624dd3
 80206c0:	08044778 	.word	0x08044778
 80206c4:	080447bc 	.word	0x080447bc
 80206c8:	08044830 	.word	0x08044830
 80206cc:	0804484c 	.word	0x0804484c
 80206d0:	0804497d 	.word	0x0804497d

080206d4 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 80206d4:	4ba5      	ldr	r3, [pc, #660]	; (802096c <dhcp_recv+0x298>)
{
 80206d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 80206da:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 80206de:	b08b      	sub	sp, #44	; 0x2c
 80206e0:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80206e2:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80206e6:	f1b9 0f00 	cmp.w	r9, #0
 80206ea:	d04b      	beq.n	8020784 <dhcp_recv+0xb0>
 80206ec:	f899 3004 	ldrb.w	r3, [r9, #4]
 80206f0:	2b00      	cmp	r3, #0
 80206f2:	d047      	beq.n	8020784 <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80206f4:	8953      	ldrh	r3, [r2, #10]
 80206f6:	2b2b      	cmp	r3, #43	; 0x2b
 80206f8:	d944      	bls.n	8020784 <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80206fa:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 80206fc:	782b      	ldrb	r3, [r5, #0]
 80206fe:	2b02      	cmp	r3, #2
 8020700:	d140      	bne.n	8020784 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020702:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 8020706:	b186      	cbz	r6, 802072a <dhcp_recv+0x56>
 8020708:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 802070c:	f105 021c 	add.w	r2, r5, #28
 8020710:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020712:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020716:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020718:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802071c:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 802071e:	4284      	cmp	r4, r0
 8020720:	d130      	bne.n	8020784 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020722:	2b06      	cmp	r3, #6
 8020724:	d001      	beq.n	802072a <dhcp_recv+0x56>
 8020726:	42b3      	cmp	r3, r6
 8020728:	d3f3      	bcc.n	8020712 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 802072a:	6868      	ldr	r0, [r5, #4]
 802072c:	f7f8 f908 	bl	8018940 <lwip_htonl>
 8020730:	f8d9 3000 	ldr.w	r3, [r9]
 8020734:	4298      	cmp	r0, r3
 8020736:	d125      	bne.n	8020784 <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 8020738:	4b8d      	ldr	r3, [pc, #564]	; (8020970 <dhcp_recv+0x29c>)
 802073a:	2200      	movs	r2, #0
 802073c:	605a      	str	r2, [r3, #4]
 802073e:	811a      	strh	r2, [r3, #8]
 8020740:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8020742:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8020746:	2b2b      	cmp	r3, #43	; 0x2b
 8020748:	d91c      	bls.n	8020784 <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 802074a:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 802074e:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 8020750:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8020754:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 8020758:	4693      	mov	fp, r2
 802075a:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 802075e:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 8020762:	e000      	b.n	8020766 <dhcp_recv+0x92>
 8020764:	896b      	ldrh	r3, [r5, #10]
 8020766:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 8020768:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 802076c:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8020770:	d80e      	bhi.n	8020790 <dhcp_recv+0xbc>
    q = q->next;
 8020772:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8020774:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8020778:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 802077c:	2d00      	cmp	r5, #0
 802077e:	d1f1      	bne.n	8020764 <dhcp_recv+0x90>
 8020780:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 8020784:	4658      	mov	r0, fp
}
 8020786:	b00b      	add	sp, #44	; 0x2c
 8020788:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 802078c:	f7fa b8f4 	b.w	801a978 <pbuf_free>
  options = (u8_t *)q->payload;
 8020790:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020792:	45d8      	cmp	r8, fp
 8020794:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 8020798:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802079a:	f080 8140 	bcs.w	8020a1e <dhcp_recv+0x34a>
 802079e:	9c02      	ldr	r4, [sp, #8]
 80207a0:	9b01      	ldr	r3, [sp, #4]
 80207a2:	5d1a      	ldrb	r2, [r3, r4]
 80207a4:	2aff      	cmp	r2, #255	; 0xff
 80207a6:	f000 813a 	beq.w	8020a1e <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 80207aa:	1ca7      	adds	r7, r4, #2
 80207ac:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 80207ae:	42bc      	cmp	r4, r7
 80207b0:	d8e6      	bhi.n	8020780 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 80207b2:	1c61      	adds	r1, r4, #1
 80207b4:	896b      	ldrh	r3, [r5, #10]
 80207b6:	4299      	cmp	r1, r3
 80207b8:	f280 8129 	bge.w	8020a0e <dhcp_recv+0x33a>
      len = options[offset + 1];
 80207bc:	9801      	ldr	r0, [sp, #4]
 80207be:	4420      	add	r0, r4
 80207c0:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 80207c2:	2a3b      	cmp	r2, #59	; 0x3b
 80207c4:	d83e      	bhi.n	8020844 <dhcp_recv+0x170>
 80207c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80207ca:	0040      	.short	0x0040
 80207cc:	003d0053 	.word	0x003d0053
 80207d0:	003d00b4 	.word	0x003d00b4
 80207d4:	009f003d 	.word	0x009f003d
 80207d8:	003d003d 	.word	0x003d003d
 80207dc:	003d003d 	.word	0x003d003d
 80207e0:	003d003d 	.word	0x003d003d
 80207e4:	003d003d 	.word	0x003d003d
 80207e8:	003d003d 	.word	0x003d003d
 80207ec:	003d003d 	.word	0x003d003d
 80207f0:	003d003d 	.word	0x003d003d
 80207f4:	003d003d 	.word	0x003d003d
 80207f8:	003d003d 	.word	0x003d003d
 80207fc:	003d003d 	.word	0x003d003d
 8020800:	003d003d 	.word	0x003d003d
 8020804:	003d003d 	.word	0x003d003d
 8020808:	003d003d 	.word	0x003d003d
 802080c:	003d003d 	.word	0x003d003d
 8020810:	003d003d 	.word	0x003d003d
 8020814:	003d003d 	.word	0x003d003d
 8020818:	003d003d 	.word	0x003d003d
 802081c:	003d003d 	.word	0x003d003d
 8020820:	003d003d 	.word	0x003d003d
 8020824:	003d003d 	.word	0x003d003d
 8020828:	003d003d 	.word	0x003d003d
 802082c:	003d003d 	.word	0x003d003d
 8020830:	00f80115 	.word	0x00f80115
 8020834:	00df0109 	.word	0x00df0109
 8020838:	003d003d 	.word	0x003d003d
 802083c:	00ec003d 	.word	0x00ec003d
 8020840:	00c3      	.short	0x00c3
 8020842:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 8020844:	2a00      	cmp	r2, #0
 8020846:	f040 82a2 	bne.w	8020d8e <dhcp_recv+0x6ba>
      offset++;
 802084a:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 802084c:	429c      	cmp	r4, r3
 802084e:	f0c0 80e3 	bcc.w	8020a18 <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 8020852:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8020854:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 8020858:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 802085a:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 802085e:	455c      	cmp	r4, fp
 8020860:	d28e      	bcs.n	8020780 <dhcp_recv+0xac>
        q = q->next;
 8020862:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8020864:	2d00      	cmp	r5, #0
 8020866:	f000 81e1 	beq.w	8020c2c <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 802086a:	686b      	ldr	r3, [r5, #4]
 802086c:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802086e:	e797      	b.n	80207a0 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020870:	2e04      	cmp	r6, #4
 8020872:	f040 81b5 	bne.w	8020be0 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 8020876:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 802087a:	429c      	cmp	r4, r3
 802087c:	dc80      	bgt.n	8020780 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802087e:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8020880:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 8020884:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 8020886:	2300      	movs	r3, #0
 8020888:	9405      	str	r4, [sp, #20]
 802088a:	9309      	str	r3, [sp, #36]	; 0x24
 802088c:	4b38      	ldr	r3, [pc, #224]	; (8020970 <dhcp_recv+0x29c>)
 802088e:	eb03 0908 	add.w	r9, r3, r8
 8020892:	4b38      	ldr	r3, [pc, #224]	; (8020974 <dhcp_recv+0x2a0>)
 8020894:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8020898:	e02b      	b.n	80208f2 <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 802089a:	f899 3000 	ldrb.w	r3, [r9]
 802089e:	2b00      	cmp	r3, #0
 80208a0:	f040 81a8 	bne.w	8020bf4 <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 80208a4:	2e04      	cmp	r6, #4
 80208a6:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80208a8:	463b      	mov	r3, r7
 80208aa:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 80208ac:	bf28      	it	cs
 80208ae:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80208b0:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 80208b2:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80208b4:	4622      	mov	r2, r4
 80208b6:	f7fa f903 	bl	801aac0 <pbuf_copy_partial>
 80208ba:	4284      	cmp	r4, r0
 80208bc:	f47f af60 	bne.w	8020780 <dhcp_recv+0xac>
          if (decode_len > 4) {
 80208c0:	2e04      	cmp	r6, #4
 80208c2:	f240 819a 	bls.w	8020bfa <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80208c6:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 80208ca:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80208ce:	f040 81a3 	bne.w	8020c18 <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 80208d2:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80208d4:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 80208d6:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 80208d8:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80208dc:	f7f8 f830 	bl	8018940 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 80208e0:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 80208e2:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80208e4:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 80208e8:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 80208ea:	429f      	cmp	r7, r3
            goto decode_next;
 80208ec:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 80208ee:	f63f af47 	bhi.w	8020780 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80208f2:	f1b8 0f09 	cmp.w	r8, #9
 80208f6:	d9d0      	bls.n	802089a <dhcp_recv+0x1c6>
 80208f8:	4b1f      	ldr	r3, [pc, #124]	; (8020978 <dhcp_recv+0x2a4>)
 80208fa:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80208fe:	491f      	ldr	r1, [pc, #124]	; (802097c <dhcp_recv+0x2a8>)
 8020900:	481f      	ldr	r0, [pc, #124]	; (8020980 <dhcp_recv+0x2ac>)
 8020902:	f004 f8f3 	bl	8024aec <iprintf>
 8020906:	e7c8      	b.n	802089a <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8020908:	07b2      	lsls	r2, r6, #30
 802090a:	f040 81ae 	bne.w	8020c6a <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 802090e:	2e08      	cmp	r6, #8
 8020910:	4632      	mov	r2, r6
 8020912:	bf28      	it	cs
 8020914:	2208      	movcs	r2, #8
 8020916:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020918:	42b2      	cmp	r2, r6
 802091a:	f240 8241 	bls.w	8020da0 <dhcp_recv+0x6cc>
 802091e:	4b16      	ldr	r3, [pc, #88]	; (8020978 <dhcp_recv+0x2a4>)
 8020920:	f240 623c 	movw	r2, #1596	; 0x63c
 8020924:	4917      	ldr	r1, [pc, #92]	; (8020984 <dhcp_recv+0x2b0>)
 8020926:	4816      	ldr	r0, [pc, #88]	; (8020980 <dhcp_recv+0x2ac>)
 8020928:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802092c:	f004 f8de 	bl	8024aec <iprintf>
 8020930:	e728      	b.n	8020784 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020932:	2e03      	cmp	r6, #3
 8020934:	f240 814a 	bls.w	8020bcc <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 8020938:	4434      	add	r4, r6
 802093a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 802093e:	429c      	cmp	r4, r3
 8020940:	f73f af1e 	bgt.w	8020780 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020944:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8020946:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 802094a:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 802094c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802094e:	e79a      	b.n	8020886 <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020950:	2e04      	cmp	r6, #4
 8020952:	f040 8131 	bne.w	8020bb8 <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 8020956:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 802095a:	429c      	cmp	r4, r3
 802095c:	f73f af10 	bgt.w	8020780 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020960:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 8020962:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 8020966:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020968:	e78d      	b.n	8020886 <dhcp_recv+0x1b2>
 802096a:	bf00      	nop
 802096c:	2001ec2c 	.word	0x2001ec2c
 8020970:	2002dc20 	.word	0x2002dc20
 8020974:	2002dc2c 	.word	0x2002dc2c
 8020978:	08044604 	.word	0x08044604
 802097c:	080448bc 	.word	0x080448bc
 8020980:	0802b818 	.word	0x0802b818
 8020984:	08044874 	.word	0x08044874
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020988:	2e04      	cmp	r6, #4
 802098a:	f040 80ed 	bne.w	8020b68 <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 802098e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020992:	429c      	cmp	r4, r3
 8020994:	f73f aef4 	bgt.w	8020780 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020998:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 802099a:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 802099e:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80209a0:	e771      	b.n	8020886 <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80209a2:	2e04      	cmp	r6, #4
 80209a4:	f040 80d6 	bne.w	8020b54 <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 80209a8:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80209ac:	429c      	cmp	r4, r3
 80209ae:	f73f aee7 	bgt.w	8020780 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80209b2:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 80209b4:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 80209b6:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80209b8:	e765      	b.n	8020886 <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80209ba:	2e01      	cmp	r6, #1
 80209bc:	f040 80e8 	bne.w	8020b90 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80209c0:	9b02      	ldr	r3, [sp, #8]
 80209c2:	2bf0      	cmp	r3, #240	; 0xf0
 80209c4:	f040 8147 	bne.w	8020c56 <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 80209c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80209cc:	4299      	cmp	r1, r3
 80209ce:	f43f aed7 	beq.w	8020780 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80209d2:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80209d4:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 80209d8:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80209da:	e754      	b.n	8020886 <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80209dc:	2e01      	cmp	r6, #1
 80209de:	f040 80cd 	bne.w	8020b7c <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 80209e2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80209e6:	4299      	cmp	r1, r3
 80209e8:	f43f aeca 	beq.w	8020780 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80209ec:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80209ee:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 80209f0:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80209f2:	e748      	b.n	8020886 <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80209f4:	2e04      	cmp	r6, #4
 80209f6:	f040 80d5 	bne.w	8020ba4 <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 80209fa:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80209fe:	429c      	cmp	r4, r3
 8020a00:	f73f aebe 	bgt.w	8020780 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020a04:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8020a06:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 8020a0a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020a0c:	e73b      	b.n	8020886 <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8020a0e:	6828      	ldr	r0, [r5, #0]
 8020a10:	b310      	cbz	r0, 8020a58 <dhcp_recv+0x384>
 8020a12:	6840      	ldr	r0, [r0, #4]
 8020a14:	7806      	ldrb	r6, [r0, #0]
 8020a16:	e6d4      	b.n	80207c2 <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020a18:	455c      	cmp	r4, fp
 8020a1a:	f4ff aec1 	bcc.w	80207a0 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8020a1e:	4bb7      	ldr	r3, [pc, #732]	; (8020cfc <dhcp_recv+0x628>)
 8020a20:	781b      	ldrb	r3, [r3, #0]
 8020a22:	b163      	cbz	r3, 8020a3e <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8020a24:	2300      	movs	r3, #0
 8020a26:	4ab5      	ldr	r2, [pc, #724]	; (8020cfc <dhcp_recv+0x628>)
 8020a28:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8020a2a:	4bb5      	ldr	r3, [pc, #724]	; (8020d00 <dhcp_recv+0x62c>)
 8020a2c:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8020a2e:	2b01      	cmp	r3, #1
 8020a30:	f000 8108 	beq.w	8020c44 <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8020a34:	2b02      	cmp	r3, #2
 8020a36:	d006      	beq.n	8020a46 <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8020a38:	2b03      	cmp	r3, #3
 8020a3a:	f000 8101 	beq.w	8020c40 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 8020a3e:	9b04      	ldr	r3, [sp, #16]
 8020a40:	2b00      	cmp	r3, #0
 8020a42:	f000 811c 	beq.w	8020c7e <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 8020a46:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8020a48:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 8020a4c:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 8020a4e:	232c      	movs	r3, #44	; 0x2c
 8020a50:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 8020a52:	9b03      	ldr	r3, [sp, #12]
 8020a54:	895b      	ldrh	r3, [r3, #10]
 8020a56:	e682      	b.n	802075e <dhcp_recv+0x8a>
    switch (op) {
 8020a58:	1e50      	subs	r0, r2, #1
 8020a5a:	283a      	cmp	r0, #58	; 0x3a
 8020a5c:	f63f aef1 	bhi.w	8020842 <dhcp_recv+0x16e>
 8020a60:	a601      	add	r6, pc, #4	; (adr r6, 8020a68 <dhcp_recv+0x394>)
 8020a62:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8020a66:	bf00      	nop
 8020a68:	08020be1 	.word	0x08020be1
 8020a6c:	08020843 	.word	0x08020843
 8020a70:	08020bcd 	.word	0x08020bcd
 8020a74:	08020843 	.word	0x08020843
 8020a78:	08020843 	.word	0x08020843
 8020a7c:	08020843 	.word	0x08020843
 8020a80:	08020843 	.word	0x08020843
 8020a84:	08020843 	.word	0x08020843
 8020a88:	08020843 	.word	0x08020843
 8020a8c:	08020843 	.word	0x08020843
 8020a90:	08020843 	.word	0x08020843
 8020a94:	08020843 	.word	0x08020843
 8020a98:	08020843 	.word	0x08020843
 8020a9c:	08020843 	.word	0x08020843
 8020aa0:	08020843 	.word	0x08020843
 8020aa4:	08020843 	.word	0x08020843
 8020aa8:	08020843 	.word	0x08020843
 8020aac:	08020843 	.word	0x08020843
 8020ab0:	08020843 	.word	0x08020843
 8020ab4:	08020843 	.word	0x08020843
 8020ab8:	08020843 	.word	0x08020843
 8020abc:	08020843 	.word	0x08020843
 8020ac0:	08020843 	.word	0x08020843
 8020ac4:	08020843 	.word	0x08020843
 8020ac8:	08020843 	.word	0x08020843
 8020acc:	08020843 	.word	0x08020843
 8020ad0:	08020843 	.word	0x08020843
 8020ad4:	08020843 	.word	0x08020843
 8020ad8:	08020843 	.word	0x08020843
 8020adc:	08020843 	.word	0x08020843
 8020ae0:	08020843 	.word	0x08020843
 8020ae4:	08020843 	.word	0x08020843
 8020ae8:	08020843 	.word	0x08020843
 8020aec:	08020843 	.word	0x08020843
 8020af0:	08020843 	.word	0x08020843
 8020af4:	08020843 	.word	0x08020843
 8020af8:	08020843 	.word	0x08020843
 8020afc:	08020843 	.word	0x08020843
 8020b00:	08020843 	.word	0x08020843
 8020b04:	08020843 	.word	0x08020843
 8020b08:	08020843 	.word	0x08020843
 8020b0c:	08020843 	.word	0x08020843
 8020b10:	08020843 	.word	0x08020843
 8020b14:	08020843 	.word	0x08020843
 8020b18:	08020843 	.word	0x08020843
 8020b1c:	08020843 	.word	0x08020843
 8020b20:	08020843 	.word	0x08020843
 8020b24:	08020843 	.word	0x08020843
 8020b28:	08020843 	.word	0x08020843
 8020b2c:	08020843 	.word	0x08020843
 8020b30:	08020ba5 	.word	0x08020ba5
 8020b34:	08020b91 	.word	0x08020b91
 8020b38:	08020b7d 	.word	0x08020b7d
 8020b3c:	08020b69 	.word	0x08020b69
 8020b40:	08020843 	.word	0x08020843
 8020b44:	08020843 	.word	0x08020843
 8020b48:	08020843 	.word	0x08020843
 8020b4c:	08020b55 	.word	0x08020b55
 8020b50:	08020bb9 	.word	0x08020bb9
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020b54:	4b6b      	ldr	r3, [pc, #428]	; (8020d04 <dhcp_recv+0x630>)
 8020b56:	f240 625d 	movw	r2, #1629	; 0x65d
 8020b5a:	496b      	ldr	r1, [pc, #428]	; (8020d08 <dhcp_recv+0x634>)
 8020b5c:	486b      	ldr	r0, [pc, #428]	; (8020d0c <dhcp_recv+0x638>)
 8020b5e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020b62:	f003 ffc3 	bl	8024aec <iprintf>
 8020b66:	e60d      	b.n	8020784 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020b68:	4b66      	ldr	r3, [pc, #408]	; (8020d04 <dhcp_recv+0x630>)
 8020b6a:	f240 6259 	movw	r2, #1625	; 0x659
 8020b6e:	4966      	ldr	r1, [pc, #408]	; (8020d08 <dhcp_recv+0x634>)
 8020b70:	4866      	ldr	r0, [pc, #408]	; (8020d0c <dhcp_recv+0x638>)
 8020b72:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020b76:	f003 ffb9 	bl	8024aec <iprintf>
 8020b7a:	e603      	b.n	8020784 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020b7c:	4b61      	ldr	r3, [pc, #388]	; (8020d04 <dhcp_recv+0x630>)
 8020b7e:	f240 6255 	movw	r2, #1621	; 0x655
 8020b82:	4963      	ldr	r1, [pc, #396]	; (8020d10 <dhcp_recv+0x63c>)
 8020b84:	4861      	ldr	r0, [pc, #388]	; (8020d0c <dhcp_recv+0x638>)
 8020b86:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020b8a:	f003 ffaf 	bl	8024aec <iprintf>
 8020b8e:	e5f9      	b.n	8020784 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020b90:	4b5c      	ldr	r3, [pc, #368]	; (8020d04 <dhcp_recv+0x630>)
 8020b92:	f240 624f 	movw	r2, #1615	; 0x64f
 8020b96:	495e      	ldr	r1, [pc, #376]	; (8020d10 <dhcp_recv+0x63c>)
 8020b98:	485c      	ldr	r0, [pc, #368]	; (8020d0c <dhcp_recv+0x638>)
 8020b9a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020b9e:	f003 ffa5 	bl	8024aec <iprintf>
 8020ba2:	e5ef      	b.n	8020784 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020ba4:	4b57      	ldr	r3, [pc, #348]	; (8020d04 <dhcp_recv+0x630>)
 8020ba6:	f240 6241 	movw	r2, #1601	; 0x641
 8020baa:	4957      	ldr	r1, [pc, #348]	; (8020d08 <dhcp_recv+0x634>)
 8020bac:	4857      	ldr	r0, [pc, #348]	; (8020d0c <dhcp_recv+0x638>)
 8020bae:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020bb2:	f003 ff9b 	bl	8024aec <iprintf>
 8020bb6:	e5e5      	b.n	8020784 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020bb8:	4b52      	ldr	r3, [pc, #328]	; (8020d04 <dhcp_recv+0x630>)
 8020bba:	f240 6261 	movw	r2, #1633	; 0x661
 8020bbe:	4952      	ldr	r1, [pc, #328]	; (8020d08 <dhcp_recv+0x634>)
 8020bc0:	4852      	ldr	r0, [pc, #328]	; (8020d0c <dhcp_recv+0x638>)
 8020bc2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020bc6:	f003 ff91 	bl	8024aec <iprintf>
 8020bca:	e5db      	b.n	8020784 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020bcc:	4b4d      	ldr	r3, [pc, #308]	; (8020d04 <dhcp_recv+0x630>)
 8020bce:	f240 6233 	movw	r2, #1587	; 0x633
 8020bd2:	4950      	ldr	r1, [pc, #320]	; (8020d14 <dhcp_recv+0x640>)
 8020bd4:	484d      	ldr	r0, [pc, #308]	; (8020d0c <dhcp_recv+0x638>)
 8020bd6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020bda:	f003 ff87 	bl	8024aec <iprintf>
 8020bde:	e5d1      	b.n	8020784 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020be0:	4b48      	ldr	r3, [pc, #288]	; (8020d04 <dhcp_recv+0x630>)
 8020be2:	f240 622e 	movw	r2, #1582	; 0x62e
 8020be6:	4948      	ldr	r1, [pc, #288]	; (8020d08 <dhcp_recv+0x634>)
 8020be8:	4848      	ldr	r0, [pc, #288]	; (8020d0c <dhcp_recv+0x638>)
 8020bea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020bee:	f003 ff7d 	bl	8024aec <iprintf>
 8020bf2:	e5c7      	b.n	8020784 <dhcp_recv+0xb0>
 8020bf4:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 8020bf6:	896b      	ldrh	r3, [r5, #10]
 8020bf8:	e628      	b.n	802084c <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 8020bfa:	9c05      	ldr	r4, [sp, #20]
 8020bfc:	d027      	beq.n	8020c4e <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8020bfe:	2e01      	cmp	r6, #1
 8020c00:	f040 80bb 	bne.w	8020d7a <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 8020c04:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 8020c08:	4b3d      	ldr	r3, [pc, #244]	; (8020d00 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 8020c0a:	4a3c      	ldr	r2, [pc, #240]	; (8020cfc <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 8020c0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 8020c10:	2301      	movs	r3, #1
 8020c12:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8020c16:	e7ee      	b.n	8020bf6 <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8020c18:	4b3a      	ldr	r3, [pc, #232]	; (8020d04 <dhcp_recv+0x630>)
 8020c1a:	f240 6281 	movw	r2, #1665	; 0x681
 8020c1e:	493e      	ldr	r1, [pc, #248]	; (8020d18 <dhcp_recv+0x644>)
 8020c20:	483a      	ldr	r0, [pc, #232]	; (8020d0c <dhcp_recv+0x638>)
 8020c22:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020c26:	f003 ff61 	bl	8024aec <iprintf>
 8020c2a:	e5ab      	b.n	8020784 <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8020c2c:	4b35      	ldr	r3, [pc, #212]	; (8020d04 <dhcp_recv+0x630>)
 8020c2e:	f240 629d 	movw	r2, #1693	; 0x69d
 8020c32:	493a      	ldr	r1, [pc, #232]	; (8020d1c <dhcp_recv+0x648>)
 8020c34:	4835      	ldr	r0, [pc, #212]	; (8020d0c <dhcp_recv+0x638>)
 8020c36:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020c3a:	f003 ff57 	bl	8024aec <iprintf>
 8020c3e:	e5a1      	b.n	8020784 <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 8020c40:	2301      	movs	r3, #1
 8020c42:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 8020c44:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8020c46:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8020c4a:	9302      	str	r3, [sp, #8]
 8020c4c:	e701      	b.n	8020a52 <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 8020c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020c50:	f7f7 fe76 	bl	8018940 <lwip_htonl>
 8020c54:	e7d8      	b.n	8020c08 <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8020c56:	4b2b      	ldr	r3, [pc, #172]	; (8020d04 <dhcp_recv+0x630>)
 8020c58:	f240 6251 	movw	r2, #1617	; 0x651
 8020c5c:	4930      	ldr	r1, [pc, #192]	; (8020d20 <dhcp_recv+0x64c>)
 8020c5e:	482b      	ldr	r0, [pc, #172]	; (8020d0c <dhcp_recv+0x638>)
 8020c60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020c64:	f003 ff42 	bl	8024aec <iprintf>
 8020c68:	e58c      	b.n	8020784 <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8020c6a:	4b26      	ldr	r3, [pc, #152]	; (8020d04 <dhcp_recv+0x630>)
 8020c6c:	f240 6239 	movw	r2, #1593	; 0x639
 8020c70:	492c      	ldr	r1, [pc, #176]	; (8020d24 <dhcp_recv+0x650>)
 8020c72:	4826      	ldr	r0, [pc, #152]	; (8020d0c <dhcp_recv+0x638>)
 8020c74:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020c78:	f003 ff38 	bl	8024aec <iprintf>
 8020c7c:	e582      	b.n	8020784 <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8020c7e:	4b1f      	ldr	r3, [pc, #124]	; (8020cfc <dhcp_recv+0x628>)
 8020c80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020c84:	785b      	ldrb	r3, [r3, #1]
 8020c86:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	f43f ad7a 	beq.w	8020784 <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8020c90:	4a1b      	ldr	r2, [pc, #108]	; (8020d00 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 8020c92:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8020c96:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8020c98:	2b05      	cmp	r3, #5
 8020c9a:	d01d      	beq.n	8020cd8 <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 8020c9c:	2b06      	cmp	r3, #6
 8020c9e:	d043      	beq.n	8020d28 <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8020ca0:	2b02      	cmp	r3, #2
 8020ca2:	f47f ad6f 	bne.w	8020784 <dhcp_recv+0xb0>
 8020ca6:	f899 3005 	ldrb.w	r3, [r9, #5]
 8020caa:	2b06      	cmp	r3, #6
 8020cac:	f47f ad6a 	bne.w	8020784 <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8020cb0:	4b12      	ldr	r3, [pc, #72]	; (8020cfc <dhcp_recv+0x628>)
 8020cb2:	789b      	ldrb	r3, [r3, #2]
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	f43f ad65 	beq.w	8020784 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020cba:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 8020cbe:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8020cc0:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 8020cc2:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8020cc4:	f7f7 fe3c 	bl	8018940 <lwip_htonl>
 8020cc8:	4603      	mov	r3, r0
    dhcp_select(netif);
 8020cca:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8020ccc:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8020cce:	6923      	ldr	r3, [r4, #16]
 8020cd0:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 8020cd2:	f7ff fbbf 	bl	8020454 <dhcp_select.isra.0>
 8020cd6:	e555      	b.n	8020784 <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8020cd8:	f899 3005 	ldrb.w	r3, [r9, #5]
 8020cdc:	2b01      	cmp	r3, #1
 8020cde:	d03f      	beq.n	8020d60 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8020ce0:	3b03      	subs	r3, #3
 8020ce2:	2b02      	cmp	r3, #2
 8020ce4:	f63f ad4e 	bhi.w	8020784 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 8020ce8:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8020cec:	4621      	mov	r1, r4
 8020cee:	f7ff f8c1 	bl	801fe74 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8020cf2:	4650      	mov	r0, sl
 8020cf4:	f7fe ffb2 	bl	801fc5c <dhcp_bind>
 8020cf8:	e544      	b.n	8020784 <dhcp_recv+0xb0>
 8020cfa:	bf00      	nop
 8020cfc:	2002dc20 	.word	0x2002dc20
 8020d00:	2002dc2c 	.word	0x2002dc2c
 8020d04:	08044604 	.word	0x08044604
 8020d08:	08044868 	.word	0x08044868
 8020d0c:	0802b818 	.word	0x0802b818
 8020d10:	08044898 	.word	0x08044898
 8020d14:	08044874 	.word	0x08044874
 8020d18:	080448d0 	.word	0x080448d0
 8020d1c:	080448fc 	.word	0x080448fc
 8020d20:	080448a4 	.word	0x080448a4
 8020d24:	08044888 	.word	0x08044888
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8020d28:	f899 3005 	ldrb.w	r3, [r9, #5]
 8020d2c:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8020d2e:	2a02      	cmp	r2, #2
 8020d30:	d902      	bls.n	8020d38 <dhcp_recv+0x664>
 8020d32:	2b01      	cmp	r3, #1
 8020d34:	f47f ad26 	bne.w	8020784 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020d38:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 8020d3c:	795a      	ldrb	r2, [r3, #5]
 8020d3e:	2a0c      	cmp	r2, #12
 8020d40:	d004      	beq.n	8020d4c <dhcp_recv+0x678>
    dhcp->tries = 0;
 8020d42:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8020d44:	210c      	movs	r1, #12
    dhcp->tries = 0;
 8020d46:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 8020d48:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 8020d4a:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8020d4c:	4b1c      	ldr	r3, [pc, #112]	; (8020dc0 <dhcp_recv+0x6ec>)
 8020d4e:	4650      	mov	r0, sl
 8020d50:	461a      	mov	r2, r3
 8020d52:	4619      	mov	r1, r3
 8020d54:	f7f9 f992 	bl	801a07c <netif_set_addr>
  dhcp_discover(netif);
 8020d58:	4650      	mov	r0, sl
 8020d5a:	f7ff fa95 	bl	8020288 <dhcp_discover>
}
 8020d5e:	e511      	b.n	8020784 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 8020d60:	4621      	mov	r1, r4
 8020d62:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8020d66:	f7ff f885 	bl	801fe74 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8020d6a:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 8020d6e:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8020d70:	0719      	lsls	r1, r3, #28
 8020d72:	d5bf      	bpl.n	8020cf4 <dhcp_recv+0x620>
        dhcp_check(netif);
 8020d74:	f7fe ff5a 	bl	801fc2c <dhcp_check>
 8020d78:	e504      	b.n	8020784 <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8020d7a:	4b12      	ldr	r3, [pc, #72]	; (8020dc4 <dhcp_recv+0x6f0>)
 8020d7c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8020d80:	4911      	ldr	r1, [pc, #68]	; (8020dc8 <dhcp_recv+0x6f4>)
 8020d82:	4812      	ldr	r0, [pc, #72]	; (8020dcc <dhcp_recv+0x6f8>)
 8020d84:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020d88:	f003 feb0 	bl	8024aec <iprintf>
 8020d8c:	e4fa      	b.n	8020784 <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 8020d8e:	4434      	add	r4, r6
 8020d90:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8020d94:	4294      	cmp	r4, r2
 8020d96:	f73f acf3 	bgt.w	8020780 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020d9a:	19bc      	adds	r4, r7, r6
 8020d9c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020d9e:	e555      	b.n	802084c <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 8020da0:	4434      	add	r4, r6
 8020da2:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8020da6:	428c      	cmp	r4, r1
 8020da8:	f73f acea 	bgt.w	8020780 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020dac:	19bc      	adds	r4, r7, r6
 8020dae:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020db0:	2e00      	cmp	r6, #0
 8020db2:	f43f ad4b 	beq.w	802084c <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8020db6:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8020db8:	f04f 0808 	mov.w	r8, #8
 8020dbc:	e563      	b.n	8020886 <dhcp_recv+0x1b2>
 8020dbe:	bf00      	nop
 8020dc0:	08044cb8 	.word	0x08044cb8
 8020dc4:	08044604 	.word	0x08044604
 8020dc8:	080448e8 	.word	0x080448e8
 8020dcc:	0802b818 	.word	0x0802b818

08020dd0 <dhcp_network_changed>:
{
 8020dd0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020dd2:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 8020dd4:	b135      	cbz	r5, 8020de4 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 8020dd6:	796b      	ldrb	r3, [r5, #5]
 8020dd8:	4604      	mov	r4, r0
 8020dda:	2b05      	cmp	r3, #5
 8020ddc:	d803      	bhi.n	8020de6 <dhcp_network_changed+0x16>
 8020dde:	2b02      	cmp	r3, #2
 8020de0:	d813      	bhi.n	8020e0a <dhcp_network_changed+0x3a>
 8020de2:	b95b      	cbnz	r3, 8020dfc <dhcp_network_changed+0x2c>
}
 8020de4:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 8020de6:	2b0a      	cmp	r3, #10
 8020de8:	d00f      	beq.n	8020e0a <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8020dea:	2b0c      	cmp	r3, #12
 8020dec:	d906      	bls.n	8020dfc <dhcp_network_changed+0x2c>
 8020dee:	4b0a      	ldr	r3, [pc, #40]	; (8020e18 <dhcp_network_changed+0x48>)
 8020df0:	f240 326d 	movw	r2, #877	; 0x36d
 8020df4:	4909      	ldr	r1, [pc, #36]	; (8020e1c <dhcp_network_changed+0x4c>)
 8020df6:	480a      	ldr	r0, [pc, #40]	; (8020e20 <dhcp_network_changed+0x50>)
 8020df8:	f003 fe78 	bl	8024aec <iprintf>
      dhcp->tries = 0;
 8020dfc:	2300      	movs	r3, #0
      dhcp_discover(netif);
 8020dfe:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8020e00:	71ab      	strb	r3, [r5, #6]
}
 8020e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 8020e06:	f7ff ba3f 	b.w	8020288 <dhcp_discover>
      dhcp->tries = 0;
 8020e0a:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 8020e0c:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8020e0e:	71ab      	strb	r3, [r5, #6]
}
 8020e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 8020e14:	f7ff b938 	b.w	8020088 <dhcp_reboot.isra.0>
 8020e18:	08044604 	.word	0x08044604
 8020e1c:	08044944 	.word	0x08044944
 8020e20:	0802b818 	.word	0x0802b818

08020e24 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8020e24:	2800      	cmp	r0, #0
 8020e26:	d066      	beq.n	8020ef6 <dhcp_arp_reply+0xd2>
{
 8020e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 8020e2c:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8020e2e:	b085      	sub	sp, #20
 8020e30:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8020e32:	b115      	cbz	r5, 8020e3a <dhcp_arp_reply+0x16>
 8020e34:	796b      	ldrb	r3, [r5, #5]
 8020e36:	2b08      	cmp	r3, #8
 8020e38:	d002      	beq.n	8020e40 <dhcp_arp_reply+0x1c>
}
 8020e3a:	b005      	add	sp, #20
 8020e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8020e40:	680a      	ldr	r2, [r1, #0]
 8020e42:	69eb      	ldr	r3, [r5, #28]
 8020e44:	429a      	cmp	r2, r3
 8020e46:	d1f8      	bne.n	8020e3a <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 8020e48:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8020e4a:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8020e4c:	4629      	mov	r1, r5
    dhcp->tries = 0;
 8020e4e:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 8020e50:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8020e52:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 8020e56:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8020e58:	2204      	movs	r2, #4
 8020e5a:	f7ff f863 	bl	801ff24 <dhcp_create_msg>
  if (p_out != NULL) {
 8020e5e:	4606      	mov	r6, r0
 8020e60:	2800      	cmp	r0, #0
 8020e62:	d040      	beq.n	8020ee6 <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020e64:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8020e68:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020e6a:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020e6e:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020e70:	2b44      	cmp	r3, #68	; 0x44
 8020e72:	d847      	bhi.n	8020f04 <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 8020e74:	2232      	movs	r2, #50	; 0x32
 8020e76:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 8020e7a:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 8020e7e:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 8020e82:	b29b      	uxth	r3, r3
 8020e84:	2204      	movs	r2, #4
 8020e86:	fa1f f888 	uxth.w	r8, r8
 8020e8a:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020e8c:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020e8e:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020e92:	f7f7 fd55 	bl	8018940 <lwip_htonl>
 8020e96:	4639      	mov	r1, r7
 8020e98:	4602      	mov	r2, r0
 8020e9a:	4640      	mov	r0, r8
 8020e9c:	f7fe fea2 	bl	801fbe4 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8020ea0:	1c41      	adds	r1, r0, #1
 8020ea2:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020ea4:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8020ea8:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020eaa:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8020eac:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020eae:	2943      	cmp	r1, #67	; 0x43
 8020eb0:	d807      	bhi.n	8020ec2 <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 8020eb2:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8020eb6:	1878      	adds	r0, r7, r1
 8020eb8:	2100      	movs	r1, #0
 8020eba:	b292      	uxth	r2, r2
 8020ebc:	f002 fe7a 	bl	8023bb4 <memset>
 8020ec0:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020ec2:	31f0      	adds	r1, #240	; 0xf0
 8020ec4:	4630      	mov	r0, r6
 8020ec6:	b289      	uxth	r1, r1
 8020ec8:	f7f9 fc5a 	bl	801a780 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020ecc:	4911      	ldr	r1, [pc, #68]	; (8020f14 <dhcp_arp_reply+0xf0>)
 8020ece:	4a12      	ldr	r2, [pc, #72]	; (8020f18 <dhcp_arp_reply+0xf4>)
 8020ed0:	2343      	movs	r3, #67	; 0x43
 8020ed2:	9400      	str	r4, [sp, #0]
 8020ed4:	6808      	ldr	r0, [r1, #0]
 8020ed6:	4631      	mov	r1, r6
 8020ed8:	9201      	str	r2, [sp, #4]
 8020eda:	4a10      	ldr	r2, [pc, #64]	; (8020f1c <dhcp_arp_reply+0xf8>)
 8020edc:	f7fe fc6c 	bl	801f7b8 <udp_sendto_if_src>
    pbuf_free(p_out);
 8020ee0:	4630      	mov	r0, r6
 8020ee2:	f7f9 fd49 	bl	801a978 <pbuf_free>
  if (dhcp->tries < 255) {
 8020ee6:	79ab      	ldrb	r3, [r5, #6]
 8020ee8:	2bff      	cmp	r3, #255	; 0xff
 8020eea:	d001      	beq.n	8020ef0 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 8020eec:	3301      	adds	r3, #1
 8020eee:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020ef0:	2314      	movs	r3, #20
 8020ef2:	812b      	strh	r3, [r5, #8]
  return result;
 8020ef4:	e7a1      	b.n	8020e3a <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8020ef6:	4b0a      	ldr	r3, [pc, #40]	; (8020f20 <dhcp_arp_reply+0xfc>)
 8020ef8:	f240 328b 	movw	r2, #907	; 0x38b
 8020efc:	4909      	ldr	r1, [pc, #36]	; (8020f24 <dhcp_arp_reply+0x100>)
 8020efe:	480a      	ldr	r0, [pc, #40]	; (8020f28 <dhcp_arp_reply+0x104>)
 8020f00:	f003 bdf4 	b.w	8024aec <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020f04:	4b06      	ldr	r3, [pc, #24]	; (8020f20 <dhcp_arp_reply+0xfc>)
 8020f06:	f240 529a 	movw	r2, #1434	; 0x59a
 8020f0a:	4908      	ldr	r1, [pc, #32]	; (8020f2c <dhcp_arp_reply+0x108>)
 8020f0c:	4806      	ldr	r0, [pc, #24]	; (8020f28 <dhcp_arp_reply+0x104>)
 8020f0e:	f003 fded 	bl	8024aec <iprintf>
 8020f12:	e7af      	b.n	8020e74 <dhcp_arp_reply+0x50>
 8020f14:	2002dc18 	.word	0x2002dc18
 8020f18:	08044cb8 	.word	0x08044cb8
 8020f1c:	08044cbc 	.word	0x08044cbc
 8020f20:	08044604 	.word	0x08044604
 8020f24:	0802c080 	.word	0x0802c080
 8020f28:	0802b818 	.word	0x0802b818
 8020f2c:	08044778 	.word	0x08044778

08020f30 <dhcp_renew>:
{
 8020f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020f34:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 8020f36:	b087      	sub	sp, #28
 8020f38:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8020f3a:	797b      	ldrb	r3, [r7, #5]
 8020f3c:	2b05      	cmp	r3, #5
 8020f3e:	d004      	beq.n	8020f4a <dhcp_renew+0x1a>
    dhcp->tries = 0;
 8020f40:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020f42:	2205      	movs	r2, #5
    dhcp->tries = 0;
 8020f44:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 8020f46:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 8020f48:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020f4a:	f10d 0316 	add.w	r3, sp, #22
 8020f4e:	2203      	movs	r2, #3
 8020f50:	4639      	mov	r1, r7
 8020f52:	4658      	mov	r0, fp
 8020f54:	f7fe ffe6 	bl	801ff24 <dhcp_create_msg>
  if (p_out != NULL) {
 8020f58:	4605      	mov	r5, r0
 8020f5a:	2800      	cmp	r0, #0
 8020f5c:	f000 80b9 	beq.w	80210d2 <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020f60:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020f64:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020f66:	f104 0804 	add.w	r8, r4, #4
 8020f6a:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020f6e:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020f70:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020f74:	f200 8095 	bhi.w	80210a2 <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 8020f78:	2239      	movs	r2, #57	; 0x39
 8020f7a:	1c63      	adds	r3, r4, #1
 8020f7c:	fa1f f189 	uxth.w	r1, r9
 8020f80:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8020f82:	b29b      	uxth	r3, r3
 8020f84:	2202      	movs	r2, #2
 8020f86:	9103      	str	r1, [sp, #12]
 8020f88:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020f8a:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020f8c:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020f90:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020f92:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020f96:	f200 8094 	bhi.w	80210c2 <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020f9a:	1ce3      	adds	r3, r4, #3
 8020f9c:	fa1f f988 	uxth.w	r9, r8
 8020fa0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020fa4:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020fa6:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020fa8:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020faa:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020fae:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020fb2:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020fb6:	2b44      	cmp	r3, #68	; 0x44
 8020fb8:	d87b      	bhi.n	80210b2 <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 8020fba:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8020fbe:	2237      	movs	r2, #55	; 0x37
 8020fc0:	1d63      	adds	r3, r4, #5
 8020fc2:	f8df a134 	ldr.w	sl, [pc, #308]	; 80210f8 <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 8020fc6:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8020fca:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8020fce:	b29b      	uxth	r3, r3
 8020fd0:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020fd2:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020fd6:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8020fda:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020fdc:	493e      	ldr	r1, [pc, #248]	; (80210d8 <dhcp_renew+0x1a8>)
 8020fde:	4b3f      	ldr	r3, [pc, #252]	; (80210dc <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020fe0:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020fe4:	d80f      	bhi.n	8021006 <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 8020fe6:	f108 0201 	add.w	r2, r8, #1
 8020fea:	f806 9008 	strb.w	r9, [r6, r8]
 8020fee:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020ff2:	4a3b      	ldr	r2, [pc, #236]	; (80210e0 <dhcp_renew+0x1b0>)
 8020ff4:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020ff6:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020ffa:	d00c      	beq.n	8021016 <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020ffc:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021000:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021004:	d9ef      	bls.n	8020fe6 <dhcp_renew+0xb6>
 8021006:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802100a:	4836      	ldr	r0, [pc, #216]	; (80210e4 <dhcp_renew+0x1b4>)
 802100c:	f003 fd6e 	bl	8024aec <iprintf>
 8021010:	4b32      	ldr	r3, [pc, #200]	; (80210dc <dhcp_renew+0x1ac>)
 8021012:	4931      	ldr	r1, [pc, #196]	; (80210d8 <dhcp_renew+0x1a8>)
 8021014:	e7e7      	b.n	8020fe6 <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 8021016:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 802101a:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 802101e:	22ff      	movs	r2, #255	; 0xff
 8021020:	b280      	uxth	r0, r0
 8021022:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021024:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8021026:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021028:	d808      	bhi.n	802103c <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 802102a:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 802102e:	4430      	add	r0, r6
 8021030:	2100      	movs	r1, #0
 8021032:	b2a4      	uxth	r4, r4
 8021034:	1c62      	adds	r2, r4, #1
 8021036:	f002 fdbd 	bl	8023bb4 <memset>
 802103a:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802103c:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021040:	4628      	mov	r0, r5
 8021042:	b289      	uxth	r1, r1
 8021044:	f7f9 fb9c 	bl	801a780 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021048:	4827      	ldr	r0, [pc, #156]	; (80210e8 <dhcp_renew+0x1b8>)
 802104a:	2343      	movs	r3, #67	; 0x43
 802104c:	f107 0218 	add.w	r2, r7, #24
 8021050:	6800      	ldr	r0, [r0, #0]
 8021052:	4629      	mov	r1, r5
 8021054:	f8cd b000 	str.w	fp, [sp]
 8021058:	f7fe fc62 	bl	801f920 <udp_sendto_if>
 802105c:	4604      	mov	r4, r0
    pbuf_free(p_out);
 802105e:	4628      	mov	r0, r5
 8021060:	f7f9 fc8a 	bl	801a978 <pbuf_free>
  if (dhcp->tries < 255) {
 8021064:	79bb      	ldrb	r3, [r7, #6]
 8021066:	2bff      	cmp	r3, #255	; 0xff
 8021068:	d015      	beq.n	8021096 <dhcp_renew+0x166>
    dhcp->tries++;
 802106a:	3301      	adds	r3, #1
 802106c:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 802106e:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021070:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8021072:	d810      	bhi.n	8021096 <dhcp_renew+0x166>
 8021074:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021078:	4a1c      	ldr	r2, [pc, #112]	; (80210ec <dhcp_renew+0x1bc>)
}
 802107a:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 802107c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8021080:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021082:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021086:	b29b      	uxth	r3, r3
 8021088:	fba2 2303 	umull	r2, r3, r2, r3
 802108c:	095b      	lsrs	r3, r3, #5
 802108e:	813b      	strh	r3, [r7, #8]
}
 8021090:	b007      	add	sp, #28
 8021092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 8021096:	2328      	movs	r3, #40	; 0x28
}
 8021098:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802109a:	813b      	strh	r3, [r7, #8]
}
 802109c:	b007      	add	sp, #28
 802109e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80210a2:	4b0e      	ldr	r3, [pc, #56]	; (80210dc <dhcp_renew+0x1ac>)
 80210a4:	f240 529a 	movw	r2, #1434	; 0x59a
 80210a8:	4911      	ldr	r1, [pc, #68]	; (80210f0 <dhcp_renew+0x1c0>)
 80210aa:	480e      	ldr	r0, [pc, #56]	; (80210e4 <dhcp_renew+0x1b4>)
 80210ac:	f003 fd1e 	bl	8024aec <iprintf>
 80210b0:	e762      	b.n	8020f78 <dhcp_renew+0x48>
 80210b2:	4b0a      	ldr	r3, [pc, #40]	; (80210dc <dhcp_renew+0x1ac>)
 80210b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80210b8:	490d      	ldr	r1, [pc, #52]	; (80210f0 <dhcp_renew+0x1c0>)
 80210ba:	480a      	ldr	r0, [pc, #40]	; (80210e4 <dhcp_renew+0x1b4>)
 80210bc:	f003 fd16 	bl	8024aec <iprintf>
 80210c0:	e77b      	b.n	8020fba <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80210c2:	4b06      	ldr	r3, [pc, #24]	; (80210dc <dhcp_renew+0x1ac>)
 80210c4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80210c8:	490a      	ldr	r1, [pc, #40]	; (80210f4 <dhcp_renew+0x1c4>)
 80210ca:	4806      	ldr	r0, [pc, #24]	; (80210e4 <dhcp_renew+0x1b4>)
 80210cc:	f003 fd0e 	bl	8024aec <iprintf>
 80210d0:	e763      	b.n	8020f9a <dhcp_renew+0x6a>
    result = ERR_MEM;
 80210d2:	f04f 34ff 	mov.w	r4, #4294967295
 80210d6:	e7c5      	b.n	8021064 <dhcp_renew+0x134>
 80210d8:	080447f8 	.word	0x080447f8
 80210dc:	08044604 	.word	0x08044604
 80210e0:	08044980 	.word	0x08044980
 80210e4:	0802b818 	.word	0x0802b818
 80210e8:	2002dc18 	.word	0x2002dc18
 80210ec:	10624dd3 	.word	0x10624dd3
 80210f0:	08044778 	.word	0x08044778
 80210f4:	080447bc 	.word	0x080447bc
 80210f8:	0804497d 	.word	0x0804497d

080210fc <dhcp_release_and_stop>:
{
 80210fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021100:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8021102:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 8021104:	2c00      	cmp	r4, #0
 8021106:	d06c      	beq.n	80211e2 <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 8021108:	7962      	ldrb	r2, [r4, #5]
 802110a:	2a00      	cmp	r2, #0
 802110c:	d069      	beq.n	80211e2 <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 802110e:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8021110:	2300      	movs	r3, #0
 8021112:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8021114:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8021116:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8021118:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802111a:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 802111c:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 802111e:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8021120:	81e3      	strh	r3, [r4, #14]
 8021122:	6123      	str	r3, [r4, #16]
 8021124:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8021126:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 802112a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802112e:	d901      	bls.n	8021134 <dhcp_release_and_stop+0x38>
 8021130:	2a0a      	cmp	r2, #10
 8021132:	d148      	bne.n	80211c6 <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8021134:	f10d 030a 	add.w	r3, sp, #10
 8021138:	2207      	movs	r2, #7
 802113a:	4621      	mov	r1, r4
 802113c:	4628      	mov	r0, r5
 802113e:	f7fe fef1 	bl	801ff24 <dhcp_create_msg>
    if (p_out != NULL) {
 8021142:	4606      	mov	r6, r0
 8021144:	2800      	cmp	r0, #0
 8021146:	d03e      	beq.n	80211c6 <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021148:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 802114c:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802114e:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021152:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021154:	2b44      	cmp	r3, #68	; 0x44
 8021156:	d84e      	bhi.n	80211f6 <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 8021158:	f108 0301 	add.w	r3, r8, #1
 802115c:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 802115e:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8021160:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 8021164:	2204      	movs	r2, #4
 8021166:	f108 0802 	add.w	r8, r8, #2
 802116a:	54fa      	strb	r2, [r7, r3]
 802116c:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021170:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021172:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021176:	f7f7 fbe3 	bl	8018940 <lwip_htonl>
 802117a:	4639      	mov	r1, r7
 802117c:	4602      	mov	r2, r0
 802117e:	4640      	mov	r0, r8
 8021180:	f7fe fd30 	bl	801fbe4 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8021184:	1c43      	adds	r3, r0, #1
 8021186:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021188:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 802118c:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 802118e:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8021190:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021192:	2b43      	cmp	r3, #67	; 0x43
 8021194:	d807      	bhi.n	80211a6 <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 8021196:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 802119a:	18f8      	adds	r0, r7, r3
 802119c:	2100      	movs	r1, #0
 802119e:	b292      	uxth	r2, r2
 80211a0:	f002 fd08 	bl	8023bb4 <memset>
 80211a4:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80211a6:	33f0      	adds	r3, #240	; 0xf0
 80211a8:	4630      	mov	r0, r6
 80211aa:	b299      	uxth	r1, r3
 80211ac:	f7f9 fae8 	bl	801a780 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80211b0:	4a15      	ldr	r2, [pc, #84]	; (8021208 <dhcp_release_and_stop+0x10c>)
 80211b2:	9500      	str	r5, [sp, #0]
 80211b4:	2343      	movs	r3, #67	; 0x43
 80211b6:	6810      	ldr	r0, [r2, #0]
 80211b8:	4631      	mov	r1, r6
 80211ba:	aa03      	add	r2, sp, #12
 80211bc:	f7fe fbb0 	bl	801f920 <udp_sendto_if>
      pbuf_free(p_out);
 80211c0:	4630      	mov	r0, r6
 80211c2:	f7f9 fbd9 	bl	801a978 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80211c6:	4b11      	ldr	r3, [pc, #68]	; (802120c <dhcp_release_and_stop+0x110>)
 80211c8:	4628      	mov	r0, r5
 80211ca:	461a      	mov	r2, r3
 80211cc:	4619      	mov	r1, r3
 80211ce:	f7f8 ff55 	bl	801a07c <netif_set_addr>
  if (new_state != dhcp->state) {
 80211d2:	7963      	ldrb	r3, [r4, #5]
 80211d4:	b11b      	cbz	r3, 80211de <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 80211d6:	2300      	movs	r3, #0
 80211d8:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 80211da:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 80211dc:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 80211de:	7923      	ldrb	r3, [r4, #4]
 80211e0:	b913      	cbnz	r3, 80211e8 <dhcp_release_and_stop+0xec>
}
 80211e2:	b004      	add	sp, #16
 80211e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80211e8:	f7fe fe22 	bl	801fe30 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80211ec:	2300      	movs	r3, #0
 80211ee:	7123      	strb	r3, [r4, #4]
}
 80211f0:	b004      	add	sp, #16
 80211f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80211f6:	4b06      	ldr	r3, [pc, #24]	; (8021210 <dhcp_release_and_stop+0x114>)
 80211f8:	f240 529a 	movw	r2, #1434	; 0x59a
 80211fc:	4905      	ldr	r1, [pc, #20]	; (8021214 <dhcp_release_and_stop+0x118>)
 80211fe:	4806      	ldr	r0, [pc, #24]	; (8021218 <dhcp_release_and_stop+0x11c>)
 8021200:	f003 fc74 	bl	8024aec <iprintf>
 8021204:	e7a8      	b.n	8021158 <dhcp_release_and_stop+0x5c>
 8021206:	bf00      	nop
 8021208:	2002dc18 	.word	0x2002dc18
 802120c:	08044cb8 	.word	0x08044cb8
 8021210:	08044604 	.word	0x08044604
 8021214:	08044778 	.word	0x08044778
 8021218:	0802b818 	.word	0x0802b818

0802121c <dhcp_start>:
{
 802121c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 802121e:	2800      	cmp	r0, #0
 8021220:	d046      	beq.n	80212b0 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8021222:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8021226:	4604      	mov	r4, r0
 8021228:	07da      	lsls	r2, r3, #31
 802122a:	d537      	bpl.n	802129c <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 802122c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 802122e:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8021230:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8021234:	d32f      	bcc.n	8021296 <dhcp_start+0x7a>
  if (dhcp == NULL) {
 8021236:	b33d      	cbz	r5, 8021288 <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 8021238:	792b      	ldrb	r3, [r5, #4]
 802123a:	bb13      	cbnz	r3, 8021282 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 802123c:	2234      	movs	r2, #52	; 0x34
 802123e:	2100      	movs	r1, #0
 8021240:	4628      	mov	r0, r5
 8021242:	f002 fcb7 	bl	8023bb4 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8021246:	f7fe fdb9 	bl	801fdbc <dhcp_inc_pcb_refcount>
 802124a:	4606      	mov	r6, r0
 802124c:	bb18      	cbnz	r0, 8021296 <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 802124e:	2301      	movs	r3, #1
 8021250:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8021252:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8021256:	075b      	lsls	r3, r3, #29
 8021258:	d408      	bmi.n	802126c <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 802125a:	796b      	ldrb	r3, [r5, #5]
 802125c:	2b02      	cmp	r3, #2
 802125e:	d003      	beq.n	8021268 <dhcp_start+0x4c>
    dhcp->state = new_state;
 8021260:	2302      	movs	r3, #2
    dhcp->tries = 0;
 8021262:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 8021264:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8021266:	716b      	strb	r3, [r5, #5]
}
 8021268:	4630      	mov	r0, r6
 802126a:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 802126c:	4620      	mov	r0, r4
 802126e:	f7ff f80b 	bl	8020288 <dhcp_discover>
  if (result != ERR_OK) {
 8021272:	2800      	cmp	r0, #0
 8021274:	d0f8      	beq.n	8021268 <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 8021276:	4620      	mov	r0, r4
    return ERR_MEM;
 8021278:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 802127c:	f7ff ff3e 	bl	80210fc <dhcp_release_and_stop>
    return ERR_MEM;
 8021280:	e7f2      	b.n	8021268 <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8021282:	f7fe fdd5 	bl	801fe30 <dhcp_dec_pcb_refcount>
 8021286:	e7d9      	b.n	802123c <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8021288:	2034      	movs	r0, #52	; 0x34
 802128a:	f7f8 fca1 	bl	8019bd0 <mem_malloc>
    if (dhcp == NULL) {
 802128e:	4605      	mov	r5, r0
 8021290:	b108      	cbz	r0, 8021296 <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8021292:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8021294:	e7d2      	b.n	802123c <dhcp_start+0x20>
    return ERR_MEM;
 8021296:	f04f 36ff 	mov.w	r6, #4294967295
 802129a:	e7e5      	b.n	8021268 <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 802129c:	4b09      	ldr	r3, [pc, #36]	; (80212c4 <dhcp_start+0xa8>)
 802129e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80212a2:	4909      	ldr	r1, [pc, #36]	; (80212c8 <dhcp_start+0xac>)
 80212a4:	f06f 060f 	mvn.w	r6, #15
 80212a8:	4808      	ldr	r0, [pc, #32]	; (80212cc <dhcp_start+0xb0>)
 80212aa:	f003 fc1f 	bl	8024aec <iprintf>
 80212ae:	e7db      	b.n	8021268 <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80212b0:	4b04      	ldr	r3, [pc, #16]	; (80212c4 <dhcp_start+0xa8>)
 80212b2:	f240 22e7 	movw	r2, #743	; 0x2e7
 80212b6:	4906      	ldr	r1, [pc, #24]	; (80212d0 <dhcp_start+0xb4>)
 80212b8:	f06f 060f 	mvn.w	r6, #15
 80212bc:	4803      	ldr	r0, [pc, #12]	; (80212cc <dhcp_start+0xb0>)
 80212be:	f003 fc15 	bl	8024aec <iprintf>
 80212c2:	e7d1      	b.n	8021268 <dhcp_start+0x4c>
 80212c4:	08044604 	.word	0x08044604
 80212c8:	08044958 	.word	0x08044958
 80212cc:	0802b818 	.word	0x0802b818
 80212d0:	0802c080 	.word	0x0802c080

080212d4 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 80212d4:	4b8a      	ldr	r3, [pc, #552]	; (8021500 <dhcp_coarse_tmr+0x22c>)
{
 80212d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80212da:	681d      	ldr	r5, [r3, #0]
{
 80212dc:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 80212de:	b1dd      	cbz	r5, 8021318 <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80212e0:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80212e2:	b1b4      	cbz	r4, 8021312 <dhcp_coarse_tmr+0x3e>
 80212e4:	7963      	ldrb	r3, [r4, #5]
 80212e6:	b1a3      	cbz	r3, 8021312 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80212e8:	8aa1      	ldrh	r1, [r4, #20]
 80212ea:	b129      	cbz	r1, 80212f8 <dhcp_coarse_tmr+0x24>
 80212ec:	8a62      	ldrh	r2, [r4, #18]
 80212ee:	3201      	adds	r2, #1
 80212f0:	b292      	uxth	r2, r2
 80212f2:	4291      	cmp	r1, r2
 80212f4:	8262      	strh	r2, [r4, #18]
 80212f6:	d012      	beq.n	802131e <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80212f8:	8a22      	ldrh	r2, [r4, #16]
 80212fa:	b11a      	cbz	r2, 8021304 <dhcp_coarse_tmr+0x30>
 80212fc:	1e51      	subs	r1, r2, #1
 80212fe:	2a01      	cmp	r2, #1
 8021300:	8221      	strh	r1, [r4, #16]
 8021302:	d013      	beq.n	802132c <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8021304:	89e2      	ldrh	r2, [r4, #14]
 8021306:	b122      	cbz	r2, 8021312 <dhcp_coarse_tmr+0x3e>
 8021308:	1e51      	subs	r1, r2, #1
 802130a:	2a01      	cmp	r2, #1
 802130c:	81e1      	strh	r1, [r4, #14]
 802130e:	f000 8087 	beq.w	8021420 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 8021312:	682d      	ldr	r5, [r5, #0]
 8021314:	2d00      	cmp	r5, #0
 8021316:	d1e3      	bne.n	80212e0 <dhcp_coarse_tmr+0xc>
}
 8021318:	b007      	add	sp, #28
 802131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 802131e:	4628      	mov	r0, r5
 8021320:	f7ff feec 	bl	80210fc <dhcp_release_and_stop>
        dhcp_start(netif);
 8021324:	4628      	mov	r0, r5
 8021326:	f7ff ff79 	bl	802121c <dhcp_start>
 802132a:	e7f2      	b.n	8021312 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 802132c:	1e5a      	subs	r2, r3, #1
 802132e:	b2d1      	uxtb	r1, r2
 8021330:	2909      	cmp	r1, #9
 8021332:	d8ee      	bhi.n	8021312 <dhcp_coarse_tmr+0x3e>
 8021334:	f240 2219 	movw	r2, #537	; 0x219
 8021338:	40ca      	lsrs	r2, r1
 802133a:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 802133c:	f012 0201 	ands.w	r2, r2, #1
 8021340:	d1e7      	bne.n	8021312 <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 8021342:	2b04      	cmp	r3, #4
 8021344:	d003      	beq.n	802134e <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 8021346:	2304      	movs	r3, #4
    dhcp->tries = 0;
 8021348:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 802134a:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 802134c:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802134e:	f10d 0316 	add.w	r3, sp, #22
 8021352:	2203      	movs	r2, #3
 8021354:	4621      	mov	r1, r4
 8021356:	4628      	mov	r0, r5
 8021358:	f7fe fde4 	bl	801ff24 <dhcp_create_msg>
  if (p_out != NULL) {
 802135c:	4607      	mov	r7, r0
 802135e:	2800      	cmp	r0, #0
 8021360:	f000 8096 	beq.w	8021490 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021364:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 8021368:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802136a:	f106 0904 	add.w	r9, r6, #4
 802136e:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021372:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021376:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 802137a:	f200 80b9 	bhi.w	80214f0 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 802137e:	2239      	movs	r2, #57	; 0x39
 8021380:	1c73      	adds	r3, r6, #1
 8021382:	fa1f fb8a 	uxth.w	fp, sl
 8021386:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 802138a:	b29b      	uxth	r3, r3
 802138c:	2202      	movs	r2, #2
 802138e:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021392:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021396:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021398:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802139a:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802139e:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80213a0:	f200 809e 	bhi.w	80214e0 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80213a4:	9903      	ldr	r1, [sp, #12]
 80213a6:	1cf3      	adds	r3, r6, #3
 80213a8:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80213ac:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80213ae:	0a0a      	lsrs	r2, r1, #8
 80213b0:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80213b4:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80213b8:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80213bc:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80213c0:	2b44      	cmp	r3, #68	; 0x44
 80213c2:	f200 8085 	bhi.w	80214d0 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 80213c6:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 80213ca:	2237      	movs	r2, #55	; 0x37
 80213cc:	1d73      	adds	r3, r6, #5
 80213ce:	f8df b158 	ldr.w	fp, [pc, #344]	; 8021528 <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 80213d2:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 80213d6:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 80213da:	b29b      	uxth	r3, r3
 80213dc:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80213de:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80213e2:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 80213e6:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80213ea:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80213ee:	d80f      	bhi.n	8021410 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 80213f0:	f808 a009 	strb.w	sl, [r8, r9]
 80213f4:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80213f8:	4b42      	ldr	r3, [pc, #264]	; (8021504 <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 80213fa:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80213fe:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021400:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021404:	d01f      	beq.n	8021446 <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021406:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802140a:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802140e:	d9ef      	bls.n	80213f0 <dhcp_coarse_tmr+0x11c>
 8021410:	4b3d      	ldr	r3, [pc, #244]	; (8021508 <dhcp_coarse_tmr+0x234>)
 8021412:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021416:	493d      	ldr	r1, [pc, #244]	; (802150c <dhcp_coarse_tmr+0x238>)
 8021418:	483d      	ldr	r0, [pc, #244]	; (8021510 <dhcp_coarse_tmr+0x23c>)
 802141a:	f003 fb67 	bl	8024aec <iprintf>
 802141e:	e7e7      	b.n	80213f0 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021420:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8021424:	2a01      	cmp	r2, #1
 8021426:	d002      	beq.n	802142e <dhcp_coarse_tmr+0x15a>
 8021428:	2b0a      	cmp	r3, #10
 802142a:	f47f af72 	bne.w	8021312 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 802142e:	4628      	mov	r0, r5
 8021430:	f7ff fd7e 	bl	8020f30 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021434:	89a3      	ldrh	r3, [r4, #12]
 8021436:	8a62      	ldrh	r2, [r4, #18]
 8021438:	1a9b      	subs	r3, r3, r2
 802143a:	2b01      	cmp	r3, #1
 802143c:	f77f af69 	ble.w	8021312 <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8021440:	105b      	asrs	r3, r3, #1
 8021442:	81e3      	strh	r3, [r4, #14]
 8021444:	e765      	b.n	8021312 <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 8021446:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 802144a:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 802144e:	22ff      	movs	r2, #255	; 0xff
 8021450:	b280      	uxth	r0, r0
 8021452:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021454:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8021456:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802145a:	d808      	bhi.n	802146e <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 802145c:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 8021460:	4440      	add	r0, r8
 8021462:	2100      	movs	r1, #0
 8021464:	b292      	uxth	r2, r2
 8021466:	3201      	adds	r2, #1
 8021468:	f002 fba4 	bl	8023bb4 <memset>
 802146c:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802146e:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021472:	4638      	mov	r0, r7
 8021474:	b289      	uxth	r1, r1
 8021476:	f7f9 f983 	bl	801a780 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 802147a:	4b26      	ldr	r3, [pc, #152]	; (8021514 <dhcp_coarse_tmr+0x240>)
 802147c:	9500      	str	r5, [sp, #0]
 802147e:	4639      	mov	r1, r7
 8021480:	6818      	ldr	r0, [r3, #0]
 8021482:	2343      	movs	r3, #67	; 0x43
 8021484:	4a24      	ldr	r2, [pc, #144]	; (8021518 <dhcp_coarse_tmr+0x244>)
 8021486:	f7fe fa4b 	bl	801f920 <udp_sendto_if>
    pbuf_free(p_out);
 802148a:	4638      	mov	r0, r7
 802148c:	f7f9 fa74 	bl	801a978 <pbuf_free>
  if (dhcp->tries < 255) {
 8021490:	79a3      	ldrb	r3, [r4, #6]
 8021492:	2bff      	cmp	r3, #255	; 0xff
 8021494:	d01a      	beq.n	80214cc <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 8021496:	3301      	adds	r3, #1
 8021498:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802149a:	2b09      	cmp	r3, #9
    dhcp->tries++;
 802149c:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802149e:	d815      	bhi.n	80214cc <dhcp_coarse_tmr+0x1f8>
 80214a0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80214a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80214a8:	4a1c      	ldr	r2, [pc, #112]	; (802151c <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80214aa:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80214ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80214b0:	b29b      	uxth	r3, r3
 80214b2:	fba2 2303 	umull	r2, r3, r2, r3
 80214b6:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80214b8:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80214ba:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80214bc:	8aa3      	ldrh	r3, [r4, #20]
 80214be:	1a9b      	subs	r3, r3, r2
 80214c0:	2b01      	cmp	r3, #1
 80214c2:	f77f af26 	ble.w	8021312 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80214c6:	105b      	asrs	r3, r3, #1
 80214c8:	8223      	strh	r3, [r4, #16]
 80214ca:	e722      	b.n	8021312 <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 80214cc:	2314      	movs	r3, #20
 80214ce:	e7f3      	b.n	80214b8 <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80214d0:	4b0d      	ldr	r3, [pc, #52]	; (8021508 <dhcp_coarse_tmr+0x234>)
 80214d2:	f240 529a 	movw	r2, #1434	; 0x59a
 80214d6:	4912      	ldr	r1, [pc, #72]	; (8021520 <dhcp_coarse_tmr+0x24c>)
 80214d8:	480d      	ldr	r0, [pc, #52]	; (8021510 <dhcp_coarse_tmr+0x23c>)
 80214da:	f003 fb07 	bl	8024aec <iprintf>
 80214de:	e772      	b.n	80213c6 <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80214e0:	4b09      	ldr	r3, [pc, #36]	; (8021508 <dhcp_coarse_tmr+0x234>)
 80214e2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80214e6:	490f      	ldr	r1, [pc, #60]	; (8021524 <dhcp_coarse_tmr+0x250>)
 80214e8:	4809      	ldr	r0, [pc, #36]	; (8021510 <dhcp_coarse_tmr+0x23c>)
 80214ea:	f003 faff 	bl	8024aec <iprintf>
 80214ee:	e759      	b.n	80213a4 <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80214f0:	4b05      	ldr	r3, [pc, #20]	; (8021508 <dhcp_coarse_tmr+0x234>)
 80214f2:	f240 529a 	movw	r2, #1434	; 0x59a
 80214f6:	490a      	ldr	r1, [pc, #40]	; (8021520 <dhcp_coarse_tmr+0x24c>)
 80214f8:	4805      	ldr	r0, [pc, #20]	; (8021510 <dhcp_coarse_tmr+0x23c>)
 80214fa:	f003 faf7 	bl	8024aec <iprintf>
 80214fe:	e73e      	b.n	802137e <dhcp_coarse_tmr+0xaa>
 8021500:	2002dba0 	.word	0x2002dba0
 8021504:	08044980 	.word	0x08044980
 8021508:	08044604 	.word	0x08044604
 802150c:	080447f8 	.word	0x080447f8
 8021510:	0802b818 	.word	0x0802b818
 8021514:	2002dc18 	.word	0x2002dc18
 8021518:	08044cbc 	.word	0x08044cbc
 802151c:	10624dd3 	.word	0x10624dd3
 8021520:	08044778 	.word	0x08044778
 8021524:	080447bc 	.word	0x080447bc
 8021528:	0804497d 	.word	0x0804497d

0802152c <dhcp_fine_tmr>:
{
 802152c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 802152e:	4b21      	ldr	r3, [pc, #132]	; (80215b4 <dhcp_fine_tmr+0x88>)
 8021530:	681c      	ldr	r4, [r3, #0]
 8021532:	b1fc      	cbz	r4, 8021574 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8021534:	2500      	movs	r5, #0
 8021536:	e003      	b.n	8021540 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 8021538:	3a01      	subs	r2, #1
 802153a:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 802153c:	6824      	ldr	r4, [r4, #0]
 802153e:	b1cc      	cbz	r4, 8021574 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8021540:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 8021542:	2b00      	cmp	r3, #0
 8021544:	d0fa      	beq.n	802153c <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 8021546:	891a      	ldrh	r2, [r3, #8]
 8021548:	2a01      	cmp	r2, #1
 802154a:	d8f5      	bhi.n	8021538 <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 802154c:	d1f6      	bne.n	802153c <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 802154e:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8021550:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8021552:	2a0c      	cmp	r2, #12
 8021554:	d016      	beq.n	8021584 <dhcp_fine_tmr+0x58>
 8021556:	2a06      	cmp	r2, #6
 8021558:	d014      	beq.n	8021584 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 802155a:	2a01      	cmp	r2, #1
 802155c:	d016      	beq.n	802158c <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 802155e:	2a08      	cmp	r2, #8
 8021560:	d009      	beq.n	8021576 <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8021562:	2a03      	cmp	r2, #3
 8021564:	d1ea      	bne.n	802153c <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 8021566:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8021568:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 802156a:	2b01      	cmp	r3, #1
 802156c:	d91e      	bls.n	80215ac <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 802156e:	f7fe fe8b 	bl	8020288 <dhcp_discover>
 8021572:	e7e3      	b.n	802153c <dhcp_fine_tmr+0x10>
}
 8021574:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 8021576:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8021578:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 802157a:	2b01      	cmp	r3, #1
 802157c:	d913      	bls.n	80215a6 <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 802157e:	f7fe fb6d 	bl	801fc5c <dhcp_bind>
 8021582:	e7db      	b.n	802153c <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 8021584:	4620      	mov	r0, r4
 8021586:	f7fe fe7f 	bl	8020288 <dhcp_discover>
 802158a:	e7d7      	b.n	802153c <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 802158c:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 802158e:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8021590:	2b05      	cmp	r3, #5
 8021592:	d802      	bhi.n	802159a <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 8021594:	f7fe ff5e 	bl	8020454 <dhcp_select.isra.0>
 8021598:	e7d0      	b.n	802153c <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 802159a:	f7ff fdaf 	bl	80210fc <dhcp_release_and_stop>
      dhcp_start(netif);
 802159e:	4620      	mov	r0, r4
 80215a0:	f7ff fe3c 	bl	802121c <dhcp_start>
 80215a4:	e7ca      	b.n	802153c <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 80215a6:	f7fe fb41 	bl	801fc2c <dhcp_check>
 80215aa:	e7c7      	b.n	802153c <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 80215ac:	f7fe fd6c 	bl	8020088 <dhcp_reboot.isra.0>
 80215b0:	e7c4      	b.n	802153c <dhcp_fine_tmr+0x10>
 80215b2:	bf00      	nop
 80215b4:	2002dba0 	.word	0x2002dba0

080215b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80215b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80215bc:	4f1a      	ldr	r7, [pc, #104]	; (8021628 <etharp_free_entry+0x70>)
 80215be:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 80215c2:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 80215c4:	ea4f 0840 	mov.w	r8, r0, lsl #1
 80215c8:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 80215cc:	b32c      	cbz	r4, 802161a <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 80215ce:	f8df b05c 	ldr.w	fp, [pc, #92]	; 802162c <etharp_free_entry+0x74>
 80215d2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8021630 <etharp_free_entry+0x78>
 80215d6:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8021634 <etharp_free_entry+0x7c>
 80215da:	e006      	b.n	80215ea <etharp_free_entry+0x32>
    pbuf_free(r->p);
 80215dc:	f7f9 f9cc 	bl	801a978 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 80215e0:	4629      	mov	r1, r5
 80215e2:	200b      	movs	r0, #11
 80215e4:	f7f8 fccc 	bl	8019f80 <memp_free>
  while (q) {
 80215e8:	b19c      	cbz	r4, 8021612 <etharp_free_entry+0x5a>
    q = q->next;
 80215ea:	4625      	mov	r5, r4
 80215ec:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 80215ee:	6868      	ldr	r0, [r5, #4]
 80215f0:	2800      	cmp	r0, #0
 80215f2:	d1f3      	bne.n	80215dc <etharp_free_entry+0x24>
 80215f4:	4651      	mov	r1, sl
 80215f6:	465b      	mov	r3, fp
 80215f8:	229a      	movs	r2, #154	; 0x9a
 80215fa:	4648      	mov	r0, r9
 80215fc:	f003 fa76 	bl	8024aec <iprintf>
    pbuf_free(r->p);
 8021600:	6868      	ldr	r0, [r5, #4]
 8021602:	f7f9 f9b9 	bl	801a978 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8021606:	4629      	mov	r1, r5
 8021608:	200b      	movs	r0, #11
 802160a:	f7f8 fcb9 	bl	8019f80 <memp_free>
  while (q) {
 802160e:	2c00      	cmp	r4, #0
 8021610:	d1eb      	bne.n	80215ea <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 8021612:	eb08 0306 	add.w	r3, r8, r6
 8021616:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 802161a:	4446      	add	r6, r8
 802161c:	2300      	movs	r3, #0
 802161e:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8021622:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8021624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021628:	2002dc58 	.word	0x2002dc58
 802162c:	08044980 	.word	0x08044980
 8021630:	080449b8 	.word	0x080449b8
 8021634:	0802b818 	.word	0x0802b818

08021638 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8021638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802163c:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 802163e:	f04f 0820 	mov.w	r8, #32
{
 8021642:	b083      	sub	sp, #12
 8021644:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8021646:	469e      	mov	lr, r3
 8021648:	469b      	mov	fp, r3
{
 802164a:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802164c:	469a      	mov	sl, r3
 802164e:	4948      	ldr	r1, [pc, #288]	; (8021770 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 8021650:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8021652:	46c4      	mov	ip, r8
 8021654:	4691      	mov	r9, r2
 8021656:	f8cd 8004 	str.w	r8, [sp, #4]
 802165a:	e004      	b.n	8021666 <etharp_find_entry+0x2e>
 802165c:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802165e:	3301      	adds	r3, #1
 8021660:	3118      	adds	r1, #24
 8021662:	2b20      	cmp	r3, #32
 8021664:	d015      	beq.n	8021692 <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8021666:	2c20      	cmp	r4, #32
 8021668:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 802166a:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802166c:	d134      	bne.n	80216d8 <etharp_find_entry+0xa0>
 802166e:	2800      	cmp	r0, #0
 8021670:	d0f4      	beq.n	802165c <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8021672:	b11d      	cbz	r5, 802167c <etharp_find_entry+0x44>
 8021674:	682f      	ldr	r7, [r5, #0]
 8021676:	684e      	ldr	r6, [r1, #4]
 8021678:	42b7      	cmp	r7, r6
 802167a:	d038      	beq.n	80216ee <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 802167c:	2801      	cmp	r0, #1
 802167e:	d02e      	beq.n	80216de <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8021680:	8a48      	ldrh	r0, [r1, #18]
 8021682:	4570      	cmp	r0, lr
 8021684:	d3eb      	bcc.n	802165e <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021686:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 8021688:	4686      	mov	lr, r0
 802168a:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802168c:	3118      	adds	r1, #24
 802168e:	2b20      	cmp	r3, #32
 8021690:	d1e9      	bne.n	8021666 <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8021692:	9b00      	ldr	r3, [sp, #0]
 8021694:	464e      	mov	r6, r9
 8021696:	2b01      	cmp	r3, #1
 8021698:	d166      	bne.n	8021768 <etharp_find_entry+0x130>
 802169a:	2c20      	cmp	r4, #32
 802169c:	d040      	beq.n	8021720 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802169e:	46a1      	mov	r9, r4
 80216a0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80216a4:	4a32      	ldr	r2, [pc, #200]	; (8021770 <etharp_find_entry+0x138>)
 80216a6:	ea4f 0849 	mov.w	r8, r9, lsl #1
 80216aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80216ae:	7d1b      	ldrb	r3, [r3, #20]
 80216b0:	bb73      	cbnz	r3, 8021710 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80216b2:	b135      	cbz	r5, 80216c2 <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80216b4:	eb08 0309 	add.w	r3, r8, r9
 80216b8:	492d      	ldr	r1, [pc, #180]	; (8021770 <etharp_find_entry+0x138>)
 80216ba:	682a      	ldr	r2, [r5, #0]
 80216bc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80216c0:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80216c2:	44c8      	add	r8, r9
 80216c4:	4a2a      	ldr	r2, [pc, #168]	; (8021770 <etharp_find_entry+0x138>)
 80216c6:	2300      	movs	r3, #0
 80216c8:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 80216cc:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80216ce:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 80216d0:	4620      	mov	r0, r4
 80216d2:	b003      	add	sp, #12
 80216d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 80216d8:	2800      	cmp	r0, #0
 80216da:	d0c0      	beq.n	802165e <etharp_find_entry+0x26>
 80216dc:	e7c9      	b.n	8021672 <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 80216de:	6808      	ldr	r0, [r1, #0]
 80216e0:	b180      	cbz	r0, 8021704 <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 80216e2:	8a48      	ldrh	r0, [r1, #18]
 80216e4:	4550      	cmp	r0, sl
 80216e6:	d3ba      	bcc.n	802165e <etharp_find_entry+0x26>
 80216e8:	4682      	mov	sl, r0
 80216ea:	4690      	mov	r8, r2
 80216ec:	e7b7      	b.n	802165e <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80216ee:	f1b9 0f00 	cmp.w	r9, #0
 80216f2:	d002      	beq.n	80216fa <etharp_find_entry+0xc2>
 80216f4:	688e      	ldr	r6, [r1, #8]
 80216f6:	454e      	cmp	r6, r9
 80216f8:	d1c0      	bne.n	802167c <etharp_find_entry+0x44>
 80216fa:	4614      	mov	r4, r2
}
 80216fc:	4620      	mov	r0, r4
 80216fe:	b003      	add	sp, #12
 8021700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8021704:	8a48      	ldrh	r0, [r1, #18]
 8021706:	4558      	cmp	r0, fp
 8021708:	d3a9      	bcc.n	802165e <etharp_find_entry+0x26>
 802170a:	4683      	mov	fp, r0
 802170c:	9201      	str	r2, [sp, #4]
 802170e:	e7a6      	b.n	802165e <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021710:	4b18      	ldr	r3, [pc, #96]	; (8021774 <etharp_find_entry+0x13c>)
 8021712:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8021716:	4918      	ldr	r1, [pc, #96]	; (8021778 <etharp_find_entry+0x140>)
 8021718:	4818      	ldr	r0, [pc, #96]	; (802177c <etharp_find_entry+0x144>)
 802171a:	f003 f9e7 	bl	8024aec <iprintf>
 802171e:	e7c8      	b.n	80216b2 <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8021720:	f1bc 0f20 	cmp.w	ip, #32
 8021724:	d012      	beq.n	802174c <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8021726:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 802172a:	4a11      	ldr	r2, [pc, #68]	; (8021770 <etharp_find_entry+0x138>)
 802172c:	46e1      	mov	r9, ip
 802172e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021732:	b1bb      	cbz	r3, 8021764 <etharp_find_entry+0x12c>
 8021734:	464c      	mov	r4, r9
 8021736:	4b0f      	ldr	r3, [pc, #60]	; (8021774 <etharp_find_entry+0x13c>)
 8021738:	f240 126d 	movw	r2, #365	; 0x16d
 802173c:	4910      	ldr	r1, [pc, #64]	; (8021780 <etharp_find_entry+0x148>)
 802173e:	480f      	ldr	r0, [pc, #60]	; (802177c <etharp_find_entry+0x144>)
 8021740:	f003 f9d4 	bl	8024aec <iprintf>
    etharp_free_entry(i);
 8021744:	4648      	mov	r0, r9
 8021746:	f7ff ff37 	bl	80215b8 <etharp_free_entry>
 802174a:	e7a9      	b.n	80216a0 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 802174c:	9b01      	ldr	r3, [sp, #4]
 802174e:	2b20      	cmp	r3, #32
 8021750:	d105      	bne.n	802175e <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8021752:	f1b8 0f20 	cmp.w	r8, #32
 8021756:	d007      	beq.n	8021768 <etharp_find_entry+0x130>
    etharp_free_entry(i);
 8021758:	4644      	mov	r4, r8
 802175a:	46c1      	mov	r9, r8
 802175c:	e7f2      	b.n	8021744 <etharp_find_entry+0x10c>
 802175e:	461c      	mov	r4, r3
 8021760:	4699      	mov	r9, r3
 8021762:	e7ef      	b.n	8021744 <etharp_find_entry+0x10c>
 8021764:	4664      	mov	r4, ip
 8021766:	e7ed      	b.n	8021744 <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 8021768:	f04f 34ff 	mov.w	r4, #4294967295
 802176c:	e7b0      	b.n	80216d0 <etharp_find_entry+0x98>
 802176e:	bf00      	nop
 8021770:	2002dc58 	.word	0x2002dc58
 8021774:	08044980 	.word	0x08044980
 8021778:	080449e0 	.word	0x080449e0
 802177c:	0802b818 	.word	0x0802b818
 8021780:	080449c8 	.word	0x080449c8

08021784 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8021784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021788:	b082      	sub	sp, #8
 802178a:	4688      	mov	r8, r1
 802178c:	4691      	mov	r9, r2
 802178e:	461f      	mov	r7, r3
 8021790:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021794:	4606      	mov	r6, r0
{
 8021796:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802179a:	2800      	cmp	r0, #0
 802179c:	d050      	beq.n	8021840 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 802179e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80217a2:	211c      	movs	r1, #28
 80217a4:	200e      	movs	r0, #14
 80217a6:	f7f8 ff31 	bl	801a60c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80217aa:	4605      	mov	r5, r0
 80217ac:	2800      	cmp	r0, #0
 80217ae:	d04f      	beq.n	8021850 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80217b0:	8943      	ldrh	r3, [r0, #10]
 80217b2:	2b1b      	cmp	r3, #27
 80217b4:	d93c      	bls.n	8021830 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80217b6:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 80217b8:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 80217ba:	f7f7 f8bd 	bl	8018938 <lwip_htons>
 80217be:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80217c0:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80217c4:	2b06      	cmp	r3, #6
 80217c6:	d006      	beq.n	80217d6 <etharp_raw+0x52>
 80217c8:	4b23      	ldr	r3, [pc, #140]	; (8021858 <etharp_raw+0xd4>)
 80217ca:	f240 4269 	movw	r2, #1129	; 0x469
 80217ce:	4923      	ldr	r1, [pc, #140]	; (802185c <etharp_raw+0xd8>)
 80217d0:	4823      	ldr	r0, [pc, #140]	; (8021860 <etharp_raw+0xdc>)
 80217d2:	f003 f98b 	bl	8024aec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80217d6:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80217d8:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80217da:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80217dc:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80217de:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80217e0:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80217e2:	88b9      	ldrh	r1, [r7, #4]
 80217e4:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80217e6:	f8da 1000 	ldr.w	r1, [sl]
 80217ea:	f8c4 1012 	str.w	r1, [r4, #18]
 80217ee:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 80217f2:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80217f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80217f6:	6809      	ldr	r1, [r1, #0]
 80217f8:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80217fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80217fe:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021800:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8021802:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021804:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8021806:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021808:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802180a:	2108      	movs	r1, #8
 802180c:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 802180e:	2106      	movs	r1, #6
 8021810:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8021812:	2104      	movs	r1, #4
 8021814:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021816:	f640 0106 	movw	r1, #2054	; 0x806
 802181a:	9100      	str	r1, [sp, #0]
 802181c:	4629      	mov	r1, r5
 802181e:	f001 fbf5 	bl	802300c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8021822:	4628      	mov	r0, r5
 8021824:	f7f9 f8a8 	bl	801a978 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8021828:	4630      	mov	r0, r6
}
 802182a:	b002      	add	sp, #8
 802182c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8021830:	4b09      	ldr	r3, [pc, #36]	; (8021858 <etharp_raw+0xd4>)
 8021832:	f240 4262 	movw	r2, #1122	; 0x462
 8021836:	490b      	ldr	r1, [pc, #44]	; (8021864 <etharp_raw+0xe0>)
 8021838:	4809      	ldr	r0, [pc, #36]	; (8021860 <etharp_raw+0xdc>)
 802183a:	f003 f957 	bl	8024aec <iprintf>
 802183e:	e7ba      	b.n	80217b6 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021840:	4b05      	ldr	r3, [pc, #20]	; (8021858 <etharp_raw+0xd4>)
 8021842:	f240 4257 	movw	r2, #1111	; 0x457
 8021846:	4908      	ldr	r1, [pc, #32]	; (8021868 <etharp_raw+0xe4>)
 8021848:	4805      	ldr	r0, [pc, #20]	; (8021860 <etharp_raw+0xdc>)
 802184a:	f003 f94f 	bl	8024aec <iprintf>
 802184e:	e7a6      	b.n	802179e <etharp_raw+0x1a>
    return ERR_MEM;
 8021850:	f04f 30ff 	mov.w	r0, #4294967295
 8021854:	e7e9      	b.n	802182a <etharp_raw+0xa6>
 8021856:	bf00      	nop
 8021858:	08044980 	.word	0x08044980
 802185c:	08044a40 	.word	0x08044a40
 8021860:	0802b818 	.word	0x0802b818
 8021864:	08044a0c 	.word	0x08044a0c
 8021868:	0802c080 	.word	0x0802c080

0802186c <etharp_output_to_arp_index>:
{
 802186c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021870:	4f37      	ldr	r7, [pc, #220]	; (8021950 <etharp_output_to_arp_index+0xe4>)
 8021872:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 8021876:	b085      	sub	sp, #20
 8021878:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802187a:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 802187e:	4605      	mov	r5, r0
 8021880:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021882:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021886:	f899 3014 	ldrb.w	r3, [r9, #20]
 802188a:	2b01      	cmp	r3, #1
 802188c:	d93c      	bls.n	8021908 <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802188e:	2b02      	cmp	r3, #2
 8021890:	d011      	beq.n	80218b6 <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021892:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021894:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021898:	fb02 7404 	mla	r4, r2, r4, r7
 802189c:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 802189e:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80218a2:	4623      	mov	r3, r4
 80218a4:	464a      	mov	r2, r9
 80218a6:	4631      	mov	r1, r6
 80218a8:	4628      	mov	r0, r5
 80218aa:	9700      	str	r7, [sp, #0]
 80218ac:	f001 fbae 	bl	802300c <ethernet_output>
}
 80218b0:	b005      	add	sp, #20
 80218b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80218b6:	44a0      	add	r8, r4
 80218b8:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 80218bc:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 80218c0:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80218c4:	d82a      	bhi.n	802191c <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80218c6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80218ca:	d3e2      	bcc.n	8021892 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80218cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80218d0:	2301      	movs	r3, #1
 80218d2:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 80218d6:	4628      	mov	r0, r5
 80218d8:	00e4      	lsls	r4, r4, #3
 80218da:	9303      	str	r3, [sp, #12]
 80218dc:	4b1d      	ldr	r3, [pc, #116]	; (8021954 <etharp_output_to_arp_index+0xe8>)
 80218de:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80218e0:	f104 020c 	add.w	r2, r4, #12
 80218e4:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80218e8:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80218ea:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80218ec:	18bc      	adds	r4, r7, r2
 80218ee:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80218f0:	9300      	str	r3, [sp, #0]
 80218f2:	464b      	mov	r3, r9
 80218f4:	4622      	mov	r2, r4
 80218f6:	9702      	str	r7, [sp, #8]
 80218f8:	f7ff ff44 	bl	8021784 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80218fc:	2800      	cmp	r0, #0
 80218fe:	d1ce      	bne.n	802189e <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8021900:	2303      	movs	r3, #3
 8021902:	f888 3014 	strb.w	r3, [r8, #20]
 8021906:	e7ca      	b.n	802189e <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021908:	4b13      	ldr	r3, [pc, #76]	; (8021958 <etharp_output_to_arp_index+0xec>)
 802190a:	f240 22ee 	movw	r2, #750	; 0x2ee
 802190e:	4913      	ldr	r1, [pc, #76]	; (802195c <etharp_output_to_arp_index+0xf0>)
 8021910:	4813      	ldr	r0, [pc, #76]	; (8021960 <etharp_output_to_arp_index+0xf4>)
 8021912:	f003 f8eb 	bl	8024aec <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8021916:	f899 3014 	ldrb.w	r3, [r9, #20]
 802191a:	e7b8      	b.n	802188e <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 802191c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021920:	2301      	movs	r3, #1
 8021922:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 8021926:	4a0f      	ldr	r2, [pc, #60]	; (8021964 <etharp_output_to_arp_index+0xf8>)
 8021928:	00e4      	lsls	r4, r4, #3
 802192a:	9303      	str	r3, [sp, #12]
 802192c:	4649      	mov	r1, r9
 802192e:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021930:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021932:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021934:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021936:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021938:	9302      	str	r3, [sp, #8]
 802193a:	4b06      	ldr	r3, [pc, #24]	; (8021954 <etharp_output_to_arp_index+0xe8>)
 802193c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802193e:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021940:	9300      	str	r3, [sp, #0]
 8021942:	464b      	mov	r3, r9
 8021944:	f7ff ff1e 	bl	8021784 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021948:	2800      	cmp	r0, #0
 802194a:	d0d9      	beq.n	8021900 <etharp_output_to_arp_index+0x94>
 802194c:	e7a7      	b.n	802189e <etharp_output_to_arp_index+0x32>
 802194e:	bf00      	nop
 8021950:	2002dc58 	.word	0x2002dc58
 8021954:	08044eb8 	.word	0x08044eb8
 8021958:	08044980 	.word	0x08044980
 802195c:	08044a84 	.word	0x08044a84
 8021960:	0802b818 	.word	0x0802b818
 8021964:	08044eb0 	.word	0x08044eb0

08021968 <etharp_tmr>:
{
 8021968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802196c:	4c1e      	ldr	r4, [pc, #120]	; (80219e8 <etharp_tmr+0x80>)
 802196e:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021970:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021972:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80219f0 <etharp_tmr+0x88>
 8021976:	4f1d      	ldr	r7, [pc, #116]	; (80219ec <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021978:	2602      	movs	r6, #2
 802197a:	e00d      	b.n	8021998 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802197c:	2a01      	cmp	r2, #1
 802197e:	d101      	bne.n	8021984 <etharp_tmr+0x1c>
 8021980:	2b04      	cmp	r3, #4
 8021982:	d813      	bhi.n	80219ac <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8021984:	2a03      	cmp	r2, #3
 8021986:	d01b      	beq.n	80219c0 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8021988:	2a04      	cmp	r2, #4
 802198a:	d01c      	beq.n	80219c6 <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802198c:	2a01      	cmp	r2, #1
 802198e:	d01c      	beq.n	80219ca <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021990:	3501      	adds	r5, #1
 8021992:	3418      	adds	r4, #24
 8021994:	2d20      	cmp	r5, #32
 8021996:	d010      	beq.n	80219ba <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 8021998:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 802199a:	2a00      	cmp	r2, #0
 802199c:	d0f8      	beq.n	8021990 <etharp_tmr+0x28>
      arp_table[i].ctime++;
 802199e:	89e3      	ldrh	r3, [r4, #14]
 80219a0:	3301      	adds	r3, #1
 80219a2:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80219a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80219a8:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80219aa:	d3e7      	bcc.n	802197c <etharp_tmr+0x14>
        etharp_free_entry(i);
 80219ac:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80219ae:	3501      	adds	r5, #1
        etharp_free_entry(i);
 80219b0:	f7ff fe02 	bl	80215b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80219b4:	3418      	adds	r4, #24
 80219b6:	2d20      	cmp	r5, #32
 80219b8:	d1ee      	bne.n	8021998 <etharp_tmr+0x30>
}
 80219ba:	b004      	add	sp, #16
 80219bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80219c0:	2304      	movs	r3, #4
 80219c2:	7423      	strb	r3, [r4, #16]
 80219c4:	e7e4      	b.n	8021990 <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80219c6:	7426      	strb	r6, [r4, #16]
 80219c8:	e7e2      	b.n	8021990 <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80219ca:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80219cc:	f8cd 8004 	str.w	r8, [sp, #4]
 80219d0:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80219d4:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80219d6:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80219da:	9100      	str	r1, [sp, #0]
 80219dc:	463a      	mov	r2, r7
 80219de:	4619      	mov	r1, r3
 80219e0:	f7ff fed0 	bl	8021784 <etharp_raw>
 80219e4:	e7d4      	b.n	8021990 <etharp_tmr+0x28>
 80219e6:	bf00      	nop
 80219e8:	2002dc5c 	.word	0x2002dc5c
 80219ec:	08044eb0 	.word	0x08044eb0
 80219f0:	08044eb8 	.word	0x08044eb8

080219f4 <etharp_cleanup_netif>:
{
 80219f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219f6:	4c0c      	ldr	r4, [pc, #48]	; (8021a28 <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80219f8:	2500      	movs	r5, #0
{
 80219fa:	4607      	mov	r7, r0
 80219fc:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8021a00:	e003      	b.n	8021a0a <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021a02:	3418      	adds	r4, #24
 8021a04:	3501      	adds	r5, #1
 8021a06:	42b4      	cmp	r4, r6
 8021a08:	d00c      	beq.n	8021a24 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8021a0a:	7d23      	ldrb	r3, [r4, #20]
 8021a0c:	2b00      	cmp	r3, #0
 8021a0e:	d0f8      	beq.n	8021a02 <etharp_cleanup_netif+0xe>
 8021a10:	68a3      	ldr	r3, [r4, #8]
 8021a12:	42bb      	cmp	r3, r7
 8021a14:	d1f5      	bne.n	8021a02 <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021a16:	3418      	adds	r4, #24
      etharp_free_entry(i);
 8021a18:	4628      	mov	r0, r5
 8021a1a:	f7ff fdcd 	bl	80215b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021a1e:	3501      	adds	r5, #1
 8021a20:	42b4      	cmp	r4, r6
 8021a22:	d1f2      	bne.n	8021a0a <etharp_cleanup_netif+0x16>
}
 8021a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a26:	bf00      	nop
 8021a28:	2002dc58 	.word	0x2002dc58

08021a2c <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021a2c:	2900      	cmp	r1, #0
 8021a2e:	f000 808e 	beq.w	8021b4e <etharp_input+0x122>
{
 8021a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 8021a36:	6846      	ldr	r6, [r0, #4]
{
 8021a38:	b087      	sub	sp, #28
 8021a3a:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021a3c:	8833      	ldrh	r3, [r6, #0]
 8021a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021a42:	d102      	bne.n	8021a4a <etharp_input+0x1e>
 8021a44:	7933      	ldrb	r3, [r6, #4]
 8021a46:	2b06      	cmp	r3, #6
 8021a48:	d005      	beq.n	8021a56 <etharp_input+0x2a>
    pbuf_free(p);
 8021a4a:	4620      	mov	r0, r4
}
 8021a4c:	b007      	add	sp, #28
 8021a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8021a52:	f7f8 bf91 	b.w	801a978 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8021a56:	7973      	ldrb	r3, [r6, #5]
 8021a58:	2b04      	cmp	r3, #4
 8021a5a:	d1f6      	bne.n	8021a4a <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021a5c:	8873      	ldrh	r3, [r6, #2]
 8021a5e:	2b08      	cmp	r3, #8
 8021a60:	d1f3      	bne.n	8021a4a <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021a62:	f8d6 000e 	ldr.w	r0, [r6, #14]
 8021a66:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021a68:	684b      	ldr	r3, [r1, #4]
 8021a6a:	f8d6 a018 	ldr.w	sl, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021a6e:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	d073      	beq.n	8021b5c <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021a74:	eba3 0a0a 	sub.w	sl, r3, sl
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021a78:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021a7c:	faba fa8a 	clz	sl, sl
 8021a80:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021a84:	f1ca 0702 	rsb	r7, sl, #2
 8021a88:	b2ff      	uxtb	r7, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8021a8a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8021a8e:	2b06      	cmp	r3, #6
 8021a90:	d007      	beq.n	8021aa2 <etharp_input+0x76>
 8021a92:	4b3e      	ldr	r3, [pc, #248]	; (8021b8c <etharp_input+0x160>)
 8021a94:	f240 12a9 	movw	r2, #425	; 0x1a9
 8021a98:	493d      	ldr	r1, [pc, #244]	; (8021b90 <etharp_input+0x164>)
 8021a9a:	483e      	ldr	r0, [pc, #248]	; (8021b94 <etharp_input+0x168>)
 8021a9c:	f003 f826 	bl	8024aec <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8021aa0:	9805      	ldr	r0, [sp, #20]
 8021aa2:	2800      	cmp	r0, #0
 8021aa4:	d042      	beq.n	8021b2c <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021aa6:	4629      	mov	r1, r5
 8021aa8:	f000 fd30 	bl	802250c <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8021aac:	4681      	mov	r9, r0
 8021aae:	2800      	cmp	r0, #0
 8021ab0:	d13c      	bne.n	8021b2c <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 8021ab2:	9b05      	ldr	r3, [sp, #20]
 8021ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021ab8:	2be0      	cmp	r3, #224	; 0xe0
 8021aba:	d037      	beq.n	8021b2c <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 8021abc:	4639      	mov	r1, r7
 8021abe:	462a      	mov	r2, r5
 8021ac0:	a805      	add	r0, sp, #20
 8021ac2:	f7ff fdb9 	bl	8021638 <etharp_find_entry>
  if (i < 0) {
 8021ac6:	2800      	cmp	r0, #0
 8021ac8:	db30      	blt.n	8021b2c <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021aca:	4a33      	ldr	r2, [pc, #204]	; (8021b98 <etharp_input+0x16c>)
 8021acc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8021ad0:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021ad2:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021ad6:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 8021ada:	753b      	strb	r3, [r7, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021adc:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 8021ade:	60bd      	str	r5, [r7, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021ae0:	fb10 330c 	smlabb	r3, r0, ip, r3
 8021ae4:	f8d8 0000 	ldr.w	r0, [r8]
 8021ae8:	50d0      	str	r0, [r2, r3]
 8021aea:	18d0      	adds	r0, r2, r3
 8021aec:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8021af0:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 8021af2:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 8021af6:	f8a7 9012 	strh.w	r9, [r7, #18]
  while (arp_table[i].q != NULL) {
 8021afa:	b1b9      	cbz	r1, 8021b2c <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021afc:	f105 092e 	add.w	r9, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 8021b00:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 8021b02:	200b      	movs	r0, #11
    p = q->p;
 8021b04:	f8d1 b004 	ldr.w	fp, [r1, #4]
    arp_table[i].q = q->next;
 8021b08:	603b      	str	r3, [r7, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 8021b0a:	f7f8 fa39 	bl	8019f80 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021b12:	4659      	mov	r1, fp
 8021b14:	464a      	mov	r2, r9
 8021b16:	9300      	str	r3, [sp, #0]
 8021b18:	4628      	mov	r0, r5
 8021b1a:	4643      	mov	r3, r8
 8021b1c:	f001 fa76 	bl	802300c <ethernet_output>
    pbuf_free(p);
 8021b20:	4658      	mov	r0, fp
 8021b22:	f7f8 ff29 	bl	801a978 <pbuf_free>
  while (arp_table[i].q != NULL) {
 8021b26:	6839      	ldr	r1, [r7, #0]
 8021b28:	2900      	cmp	r1, #0
 8021b2a:	d1e9      	bne.n	8021b00 <etharp_input+0xd4>
  switch (hdr->opcode) {
 8021b2c:	88f3      	ldrh	r3, [r6, #6]
 8021b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021b32:	d018      	beq.n	8021b66 <etharp_input+0x13a>
 8021b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021b38:	d103      	bne.n	8021b42 <etharp_input+0x116>
      dhcp_arp_reply(netif, &sipaddr);
 8021b3a:	a905      	add	r1, sp, #20
 8021b3c:	4628      	mov	r0, r5
 8021b3e:	f7ff f971 	bl	8020e24 <dhcp_arp_reply>
  pbuf_free(p);
 8021b42:	4620      	mov	r0, r4
 8021b44:	f7f8 ff18 	bl	801a978 <pbuf_free>
}
 8021b48:	b007      	add	sp, #28
 8021b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021b4e:	4b0f      	ldr	r3, [pc, #60]	; (8021b8c <etharp_input+0x160>)
 8021b50:	f240 228a 	movw	r2, #650	; 0x28a
 8021b54:	4911      	ldr	r1, [pc, #68]	; (8021b9c <etharp_input+0x170>)
 8021b56:	480f      	ldr	r0, [pc, #60]	; (8021b94 <etharp_input+0x168>)
 8021b58:	f002 bfc8 	b.w	8024aec <iprintf>
    for_us = 0;
 8021b5c:	469a      	mov	sl, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021b5e:	f106 0808 	add.w	r8, r6, #8
 8021b62:	2702      	movs	r7, #2
 8021b64:	e791      	b.n	8021a8a <etharp_input+0x5e>
      if (for_us) {
 8021b66:	f1ba 0f00 	cmp.w	sl, #0
 8021b6a:	d0ea      	beq.n	8021b42 <etharp_input+0x116>
        etharp_raw(netif,
 8021b6c:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8021b6e:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 8021b72:	4642      	mov	r2, r8
 8021b74:	4628      	mov	r0, r5
 8021b76:	9103      	str	r1, [sp, #12]
 8021b78:	a905      	add	r1, sp, #20
 8021b7a:	f8cd 8004 	str.w	r8, [sp, #4]
 8021b7e:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8021b80:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 8021b82:	9100      	str	r1, [sp, #0]
 8021b84:	4619      	mov	r1, r3
 8021b86:	f7ff fdfd 	bl	8021784 <etharp_raw>
 8021b8a:	e7da      	b.n	8021b42 <etharp_input+0x116>
 8021b8c:	08044980 	.word	0x08044980
 8021b90:	08044ad4 	.word	0x08044ad4
 8021b94:	0802b818 	.word	0x0802b818
 8021b98:	2002dc58 	.word	0x2002dc58
 8021b9c:	0802c080 	.word	0x0802c080

08021ba0 <etharp_query>:
{
 8021ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ba4:	468a      	mov	sl, r1
 8021ba6:	b085      	sub	sp, #20
 8021ba8:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8021baa:	4601      	mov	r1, r0
 8021bac:	f8da 0000 	ldr.w	r0, [sl]
{
 8021bb0:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8021bb2:	f000 fcab 	bl	802250c <ip4_addr_isbroadcast_u32>
 8021bb6:	2800      	cmp	r0, #0
 8021bb8:	f040 80d1 	bne.w	8021d5e <etharp_query+0x1be>
      ip4_addr_ismulticast(ipaddr) ||
 8021bbc:	f8da 3000 	ldr.w	r3, [sl]
 8021bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8021bc4:	2ae0      	cmp	r2, #224	; 0xe0
 8021bc6:	f000 80ca 	beq.w	8021d5e <etharp_query+0x1be>
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	f000 80c7 	beq.w	8021d5e <etharp_query+0x1be>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8021bd0:	462a      	mov	r2, r5
 8021bd2:	2101      	movs	r1, #1
 8021bd4:	4650      	mov	r0, sl
 8021bd6:	f7ff fd2f 	bl	8021638 <etharp_find_entry>
  if (i_err < 0) {
 8021bda:	1e07      	subs	r7, r0, #0
 8021bdc:	db52      	blt.n	8021c84 <etharp_query+0xe4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8021bde:	2f7e      	cmp	r7, #126	; 0x7e
 8021be0:	dc48      	bgt.n	8021c74 <etharp_query+0xd4>
  i = (netif_addr_idx_t)i_err;
 8021be2:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8021be4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8021d94 <etharp_query+0x1f4>
 8021be8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8021bec:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8021bf0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8021bf4:	7d1a      	ldrb	r2, [r3, #20]
 8021bf6:	b18a      	cbz	r2, 8021c1c <etharp_query+0x7c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8021bf8:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 8021bfc:	2e00      	cmp	r6, #0
 8021bfe:	f000 80a0 	beq.w	8021d42 <etharp_query+0x1a2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021c02:	eb09 0207 	add.w	r2, r9, r7
  err_t result = ERR_MEM;
 8021c06:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021c0a:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8021c0e:	7d13      	ldrb	r3, [r2, #20]
 8021c10:	2b01      	cmp	r3, #1
 8021c12:	d81e      	bhi.n	8021c52 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8021c14:	d03a      	beq.n	8021c8c <etharp_query+0xec>
}
 8021c16:	b005      	add	sp, #20
 8021c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 8021c1c:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021c1e:	f8cd a008 	str.w	sl, [sp, #8]
    arp_table[i].netif = netif;
 8021c22:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8021c24:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 8021c28:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021c2a:	4628      	mov	r0, r5
 8021c2c:	4b53      	ldr	r3, [pc, #332]	; (8021d7c <etharp_query+0x1dc>)
 8021c2e:	4659      	mov	r1, fp
 8021c30:	9203      	str	r2, [sp, #12]
 8021c32:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021c34:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021c36:	4a52      	ldr	r2, [pc, #328]	; (8021d80 <etharp_query+0x1e0>)
 8021c38:	9300      	str	r3, [sp, #0]
 8021c3a:	465b      	mov	r3, fp
 8021c3c:	f7ff fda2 	bl	8021784 <etharp_raw>
    if (q == NULL) {
 8021c40:	2e00      	cmp	r6, #0
 8021c42:	d0e8      	beq.n	8021c16 <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021c44:	eb09 0207 	add.w	r2, r9, r7
 8021c48:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8021c4c:	7d13      	ldrb	r3, [r2, #20]
 8021c4e:	2b01      	cmp	r3, #1
 8021c50:	d9e0      	bls.n	8021c14 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021c52:	2318      	movs	r3, #24
 8021c54:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8021c58:	465a      	mov	r2, fp
 8021c5a:	4631      	mov	r1, r6
 8021c5c:	fb03 8307 	mla	r3, r3, r7, r8
 8021c60:	4628      	mov	r0, r5
 8021c62:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 8021c64:	4c47      	ldr	r4, [pc, #284]	; (8021d84 <etharp_query+0x1e4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021c66:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 8021c68:	7027      	strb	r7, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021c6a:	f001 f9cf 	bl	802300c <ethernet_output>
}
 8021c6e:	b005      	add	sp, #20
 8021c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8021c74:	4b44      	ldr	r3, [pc, #272]	; (8021d88 <etharp_query+0x1e8>)
 8021c76:	f240 32c1 	movw	r2, #961	; 0x3c1
 8021c7a:	4944      	ldr	r1, [pc, #272]	; (8021d8c <etharp_query+0x1ec>)
 8021c7c:	4844      	ldr	r0, [pc, #272]	; (8021d90 <etharp_query+0x1f0>)
 8021c7e:	f002 ff35 	bl	8024aec <iprintf>
 8021c82:	e7ae      	b.n	8021be2 <etharp_query+0x42>
    return (err_t)i_err;
 8021c84:	b278      	sxtb	r0, r7
}
 8021c86:	b005      	add	sp, #20
 8021c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c8c:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8021c8e:	4d3e      	ldr	r5, [pc, #248]	; (8021d88 <etharp_query+0x1e8>)
 8021c90:	f8df b104 	ldr.w	fp, [pc, #260]	; 8021d98 <etharp_query+0x1f8>
 8021c94:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8021d90 <etharp_query+0x1f0>
 8021c98:	e005      	b.n	8021ca6 <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 8021c9a:	7b23      	ldrb	r3, [r4, #12]
 8021c9c:	065a      	lsls	r2, r3, #25
 8021c9e:	d413      	bmi.n	8021cc8 <etharp_query+0x128>
      p = p->next;
 8021ca0:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8021ca2:	2c00      	cmp	r4, #0
 8021ca4:	d038      	beq.n	8021d18 <etharp_query+0x178>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8021ca6:	8962      	ldrh	r2, [r4, #10]
 8021ca8:	8923      	ldrh	r3, [r4, #8]
 8021caa:	429a      	cmp	r2, r3
 8021cac:	d1f5      	bne.n	8021c9a <etharp_query+0xfa>
 8021cae:	6822      	ldr	r2, [r4, #0]
 8021cb0:	462b      	mov	r3, r5
 8021cb2:	b132      	cbz	r2, 8021cc2 <etharp_query+0x122>
 8021cb4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8021cb8:	4659      	mov	r1, fp
 8021cba:	4650      	mov	r0, sl
 8021cbc:	f002 ff16 	bl	8024aec <iprintf>
 8021cc0:	e7eb      	b.n	8021c9a <etharp_query+0xfa>
      if (PBUF_NEEDS_COPY(p)) {
 8021cc2:	7b23      	ldrb	r3, [r4, #12]
 8021cc4:	065b      	lsls	r3, r3, #25
 8021cc6:	d527      	bpl.n	8021d18 <etharp_query+0x178>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8021cc8:	4632      	mov	r2, r6
 8021cca:	f44f 7120 	mov.w	r1, #640	; 0x280
 8021cce:	200e      	movs	r0, #14
 8021cd0:	f7f8 ffe4 	bl	801ac9c <pbuf_clone>
    if (p != NULL) {
 8021cd4:	4606      	mov	r6, r0
 8021cd6:	2800      	cmp	r0, #0
 8021cd8:	d047      	beq.n	8021d6a <etharp_query+0x1ca>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 8021cda:	f240 4206 	movw	r2, #1030	; 0x406
 8021cde:	492a      	ldr	r1, [pc, #168]	; (8021d88 <etharp_query+0x1e8>)
 8021ce0:	200b      	movs	r0, #11
 8021ce2:	f7f8 f917 	bl	8019f14 <memp_malloc_fn>
      if (new_entry != NULL) {
 8021ce6:	4602      	mov	r2, r0
 8021ce8:	2800      	cmp	r0, #0
 8021cea:	d041      	beq.n	8021d70 <etharp_query+0x1d0>
        if (arp_table[i].q != NULL) {
 8021cec:	eb09 0307 	add.w	r3, r9, r7
        new_entry->next = 0;
 8021cf0:	2100      	movs	r1, #0
        new_entry->p = p;
 8021cf2:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 8021cf4:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 8021cf6:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 8021cf8:	f858 5003 	ldr.w	r5, [r8, r3]
 8021cfc:	b1ed      	cbz	r5, 8021d3a <etharp_query+0x19a>
          while (r->next != NULL) {
 8021cfe:	682c      	ldr	r4, [r5, #0]
 8021d00:	b384      	cbz	r4, 8021d64 <etharp_query+0x1c4>
          qlen++;
 8021d02:	2301      	movs	r3, #1
            qlen++;
 8021d04:	4620      	mov	r0, r4
          while (r->next != NULL) {
 8021d06:	6824      	ldr	r4, [r4, #0]
            qlen++;
 8021d08:	3301      	adds	r3, #1
          while (r->next != NULL) {
 8021d0a:	2c00      	cmp	r4, #0
 8021d0c:	d1fa      	bne.n	8021d04 <etharp_query+0x164>
        if (qlen >= ARP_QUEUE_LEN) {
 8021d0e:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 8021d10:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 8021d12:	d805      	bhi.n	8021d20 <etharp_query+0x180>
        result = ERR_OK;
 8021d14:	4620      	mov	r0, r4
 8021d16:	e77e      	b.n	8021c16 <etharp_query+0x76>
      pbuf_ref(p);
 8021d18:	4630      	mov	r0, r6
 8021d1a:	f7f8 fe4b 	bl	801a9b4 <pbuf_ref>
    if (p != NULL) {
 8021d1e:	e7dc      	b.n	8021cda <etharp_query+0x13a>
          arp_table[i].q = arp_table[i].q->next;
 8021d20:	682b      	ldr	r3, [r5, #0]
 8021d22:	444f      	add	r7, r9
          pbuf_free(old->p);
 8021d24:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 8021d26:	f848 3037 	str.w	r3, [r8, r7, lsl #3]
          pbuf_free(old->p);
 8021d2a:	f7f8 fe25 	bl	801a978 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8021d2e:	200b      	movs	r0, #11
 8021d30:	4629      	mov	r1, r5
 8021d32:	f7f8 f925 	bl	8019f80 <memp_free>
        result = ERR_OK;
 8021d36:	4620      	mov	r0, r4
 8021d38:	e76d      	b.n	8021c16 <etharp_query+0x76>
 8021d3a:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 8021d3c:	f848 2003 	str.w	r2, [r8, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 8021d40:	e769      	b.n	8021c16 <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021d42:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021d44:	2301      	movs	r3, #1
 8021d46:	4c0d      	ldr	r4, [pc, #52]	; (8021d7c <etharp_query+0x1dc>)
 8021d48:	4659      	mov	r1, fp
 8021d4a:	4628      	mov	r0, r5
 8021d4c:	e9cd a302 	strd	sl, r3, [sp, #8]
 8021d50:	e9cd 2400 	strd	r2, r4, [sp]
 8021d54:	465b      	mov	r3, fp
 8021d56:	4a0a      	ldr	r2, [pc, #40]	; (8021d80 <etharp_query+0x1e0>)
 8021d58:	f7ff fd14 	bl	8021784 <etharp_raw>
    if (q == NULL) {
 8021d5c:	e75b      	b.n	8021c16 <etharp_query+0x76>
    return ERR_ARG;
 8021d5e:	f06f 000f 	mvn.w	r0, #15
 8021d62:	e758      	b.n	8021c16 <etharp_query+0x76>
        result = ERR_OK;
 8021d64:	4620      	mov	r0, r4
          r->next = new_entry;
 8021d66:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 8021d68:	e755      	b.n	8021c16 <etharp_query+0x76>
      result = ERR_MEM;
 8021d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8021d6e:	e752      	b.n	8021c16 <etharp_query+0x76>
        pbuf_free(p);
 8021d70:	4630      	mov	r0, r6
 8021d72:	f7f8 fe01 	bl	801a978 <pbuf_free>
        result = ERR_MEM;
 8021d76:	f04f 30ff 	mov.w	r0, #4294967295
 8021d7a:	e74c      	b.n	8021c16 <etharp_query+0x76>
 8021d7c:	08044eb8 	.word	0x08044eb8
 8021d80:	08044eb0 	.word	0x08044eb0
 8021d84:	2002df58 	.word	0x2002df58
 8021d88:	08044980 	.word	0x08044980
 8021d8c:	08044af8 	.word	0x08044af8
 8021d90:	0802b818 	.word	0x0802b818
 8021d94:	2002dc58 	.word	0x2002dc58
 8021d98:	08044b08 	.word	0x08044b08

08021d9c <etharp_output>:
{
 8021d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021da0:	460f      	mov	r7, r1
 8021da2:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021da4:	4605      	mov	r5, r0
{
 8021da6:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021da8:	2800      	cmp	r0, #0
 8021daa:	f000 8086 	beq.w	8021eba <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8021dae:	2f00      	cmp	r7, #0
 8021db0:	d072      	beq.n	8021e98 <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8021db2:	2e00      	cmp	r6, #0
 8021db4:	d079      	beq.n	8021eaa <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8021db6:	4629      	mov	r1, r5
 8021db8:	6830      	ldr	r0, [r6, #0]
 8021dba:	f000 fba7 	bl	802250c <ip4_addr_isbroadcast_u32>
 8021dbe:	2800      	cmp	r0, #0
 8021dc0:	d160      	bne.n	8021e84 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8021dc2:	6833      	ldr	r3, [r6, #0]
 8021dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8021dc8:	2ae0      	cmp	r2, #224	; 0xe0
 8021dca:	d03b      	beq.n	8021e44 <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8021dcc:	686a      	ldr	r2, [r5, #4]
 8021dce:	68a9      	ldr	r1, [r5, #8]
 8021dd0:	405a      	eors	r2, r3
 8021dd2:	420a      	tst	r2, r1
 8021dd4:	d009      	beq.n	8021dea <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 8021dd6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8021dd8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8021ddc:	4293      	cmp	r3, r2
 8021dde:	d004      	beq.n	8021dea <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8021de0:	68eb      	ldr	r3, [r5, #12]
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	d07b      	beq.n	8021ede <etharp_output+0x142>
            dst_addr = netif_ip4_gw(netif);
 8021de6:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8021dea:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8021f00 <etharp_output+0x164>
 8021dee:	4b3d      	ldr	r3, [pc, #244]	; (8021ee4 <etharp_output+0x148>)
 8021df0:	f898 2000 	ldrb.w	r2, [r8]
 8021df4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8021df8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8021dfc:	7d19      	ldrb	r1, [r3, #20]
 8021dfe:	2901      	cmp	r1, #1
 8021e00:	d902      	bls.n	8021e08 <etharp_output+0x6c>
 8021e02:	6899      	ldr	r1, [r3, #8]
 8021e04:	42a9      	cmp	r1, r5
 8021e06:	d063      	beq.n	8021ed0 <etharp_output+0x134>
 8021e08:	4c36      	ldr	r4, [pc, #216]	; (8021ee4 <etharp_output+0x148>)
{
 8021e0a:	2300      	movs	r3, #0
 8021e0c:	e003      	b.n	8021e16 <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8021e0e:	2b20      	cmp	r3, #32
 8021e10:	f104 0418 	add.w	r4, r4, #24
 8021e14:	d038      	beq.n	8021e88 <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8021e16:	f894 c014 	ldrb.w	ip, [r4, #20]
 8021e1a:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8021e1c:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8021e1e:	f1bc 0f01 	cmp.w	ip, #1
 8021e22:	d9f4      	bls.n	8021e0e <etharp_output+0x72>
 8021e24:	68a0      	ldr	r0, [r4, #8]
 8021e26:	42a8      	cmp	r0, r5
 8021e28:	d1f1      	bne.n	8021e0e <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 8021e2a:	6860      	ldr	r0, [r4, #4]
 8021e2c:	6831      	ldr	r1, [r6, #0]
 8021e2e:	4281      	cmp	r1, r0
 8021e30:	d1ed      	bne.n	8021e0e <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 8021e32:	4639      	mov	r1, r7
 8021e34:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 8021e36:	f888 2000 	strb.w	r2, [r8]
}
 8021e3a:	b004      	add	sp, #16
 8021e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8021e40:	f7ff bd14 	b.w	802186c <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8021e44:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8021e46:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8021e48:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8021e4a:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8021e4e:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8021e52:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8021e54:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8021e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8021e5a:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8021e5e:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 8021e62:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8021e64:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8021e68:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8021e6c:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8021e70:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 8021e74:	4639      	mov	r1, r7
 8021e76:	4628      	mov	r0, r5
 8021e78:	9400      	str	r4, [sp, #0]
 8021e7a:	f001 f8c7 	bl	802300c <ethernet_output>
}
 8021e7e:	b004      	add	sp, #16
 8021e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 8021e84:	4b18      	ldr	r3, [pc, #96]	; (8021ee8 <etharp_output+0x14c>)
 8021e86:	e7f1      	b.n	8021e6c <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 8021e88:	463a      	mov	r2, r7
 8021e8a:	4631      	mov	r1, r6
 8021e8c:	4628      	mov	r0, r5
}
 8021e8e:	b004      	add	sp, #16
 8021e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 8021e94:	f7ff be84 	b.w	8021ba0 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 8021e98:	4b14      	ldr	r3, [pc, #80]	; (8021eec <etharp_output+0x150>)
 8021e9a:	f240 321f 	movw	r2, #799	; 0x31f
 8021e9e:	4914      	ldr	r1, [pc, #80]	; (8021ef0 <etharp_output+0x154>)
 8021ea0:	4814      	ldr	r0, [pc, #80]	; (8021ef4 <etharp_output+0x158>)
 8021ea2:	f002 fe23 	bl	8024aec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8021ea6:	2e00      	cmp	r6, #0
 8021ea8:	d185      	bne.n	8021db6 <etharp_output+0x1a>
 8021eaa:	4b10      	ldr	r3, [pc, #64]	; (8021eec <etharp_output+0x150>)
 8021eac:	f44f 7248 	mov.w	r2, #800	; 0x320
 8021eb0:	4911      	ldr	r1, [pc, #68]	; (8021ef8 <etharp_output+0x15c>)
 8021eb2:	4810      	ldr	r0, [pc, #64]	; (8021ef4 <etharp_output+0x158>)
 8021eb4:	f002 fe1a 	bl	8024aec <iprintf>
 8021eb8:	e77d      	b.n	8021db6 <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021eba:	4b0c      	ldr	r3, [pc, #48]	; (8021eec <etharp_output+0x150>)
 8021ebc:	f240 321e 	movw	r2, #798	; 0x31e
 8021ec0:	490e      	ldr	r1, [pc, #56]	; (8021efc <etharp_output+0x160>)
 8021ec2:	480c      	ldr	r0, [pc, #48]	; (8021ef4 <etharp_output+0x158>)
 8021ec4:	f002 fe12 	bl	8024aec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8021ec8:	2f00      	cmp	r7, #0
 8021eca:	f47f af72 	bne.w	8021db2 <etharp_output+0x16>
 8021ece:	e7e3      	b.n	8021e98 <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8021ed0:	685b      	ldr	r3, [r3, #4]
 8021ed2:	6831      	ldr	r1, [r6, #0]
 8021ed4:	4299      	cmp	r1, r3
 8021ed6:	d197      	bne.n	8021e08 <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8021ed8:	4639      	mov	r1, r7
 8021eda:	4628      	mov	r0, r5
 8021edc:	e7ad      	b.n	8021e3a <etharp_output+0x9e>
            return ERR_RTE;
 8021ede:	f06f 0003 	mvn.w	r0, #3
 8021ee2:	e7cc      	b.n	8021e7e <etharp_output+0xe2>
 8021ee4:	2002dc58 	.word	0x2002dc58
 8021ee8:	08044eb0 	.word	0x08044eb0
 8021eec:	08044980 	.word	0x08044980
 8021ef0:	08044b24 	.word	0x08044b24
 8021ef4:	0802b818 	.word	0x0802b818
 8021ef8:	08044ab4 	.word	0x08044ab4
 8021efc:	0802c080 	.word	0x0802c080
 8021f00:	2002df58 	.word	0x2002df58

08021f04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8021f04:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021f06:	2301      	movs	r3, #1
{
 8021f08:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021f0a:	4c07      	ldr	r4, [pc, #28]	; (8021f28 <etharp_request+0x24>)
 8021f0c:	4a07      	ldr	r2, [pc, #28]	; (8021f2c <etharp_request+0x28>)
 8021f0e:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021f10:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021f12:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8021f16:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 8021f1a:	9400      	str	r4, [sp, #0]
 8021f1c:	4619      	mov	r1, r3
 8021f1e:	f7ff fc31 	bl	8021784 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8021f22:	b004      	add	sp, #16
 8021f24:	bd10      	pop	{r4, pc}
 8021f26:	bf00      	nop
 8021f28:	08044eb8 	.word	0x08044eb8
 8021f2c:	08044eb0 	.word	0x08044eb0

08021f30 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8021f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f32:	460e      	mov	r6, r1
 8021f34:	b087      	sub	sp, #28
 8021f36:	4617      	mov	r7, r2
 8021f38:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8021f3a:	2124      	movs	r1, #36	; 0x24
 8021f3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021f40:	2022      	movs	r0, #34	; 0x22
 8021f42:	f7f8 fb63 	bl	801a60c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8021f46:	b3a8      	cbz	r0, 8021fb4 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8021f48:	8943      	ldrh	r3, [r0, #10]
 8021f4a:	4605      	mov	r5, r0
 8021f4c:	2b23      	cmp	r3, #35	; 0x23
 8021f4e:	d933      	bls.n	8021fb8 <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8021f50:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8021f52:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8021f54:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 8021f56:	2600      	movs	r6, #0
  icmphdr->code = code;
 8021f58:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8021f5a:	7126      	strb	r6, [r4, #4]
 8021f5c:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 8021f5e:	71a6      	strb	r6, [r4, #6]
 8021f60:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8021f62:	6818      	ldr	r0, [r3, #0]
 8021f64:	6859      	ldr	r1, [r3, #4]
 8021f66:	689a      	ldr	r2, [r3, #8]
 8021f68:	68df      	ldr	r7, [r3, #12]
 8021f6a:	60a0      	str	r0, [r4, #8]
 8021f6c:	6167      	str	r7, [r4, #20]
 8021f6e:	60e1      	str	r1, [r4, #12]
 8021f70:	6122      	str	r2, [r4, #16]
 8021f72:	6918      	ldr	r0, [r3, #16]
 8021f74:	6959      	ldr	r1, [r3, #20]
 8021f76:	699a      	ldr	r2, [r3, #24]
 8021f78:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8021f7a:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8021f7c:	61e1      	str	r1, [r4, #28]
 8021f7e:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8021f80:	68db      	ldr	r3, [r3, #12]
 8021f82:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8021f84:	f000 f8e6 	bl	8022154 <ip4_route>
#endif
  if (netif != NULL) {
 8021f88:	4607      	mov	r7, r0
 8021f8a:	b180      	cbz	r0, 8021fae <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8021f8c:	8969      	ldrh	r1, [r5, #10]
 8021f8e:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8021f90:	70a6      	strb	r6, [r4, #2]
 8021f92:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8021f94:	f7f7 fa78 	bl	8019488 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8021f98:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8021f9a:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8021f9c:	aa05      	add	r2, sp, #20
 8021f9e:	4631      	mov	r1, r6
 8021fa0:	4628      	mov	r0, r5
 8021fa2:	9600      	str	r6, [sp, #0]
 8021fa4:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8021fa8:	23ff      	movs	r3, #255	; 0xff
 8021faa:	f000 fa9d 	bl	80224e8 <ip4_output_if>
  }
  pbuf_free(q);
 8021fae:	4628      	mov	r0, r5
 8021fb0:	f7f8 fce2 	bl	801a978 <pbuf_free>
}
 8021fb4:	b007      	add	sp, #28
 8021fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8021fb8:	4b03      	ldr	r3, [pc, #12]	; (8021fc8 <icmp_send_response+0x98>)
 8021fba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8021fbe:	4903      	ldr	r1, [pc, #12]	; (8021fcc <icmp_send_response+0x9c>)
 8021fc0:	4803      	ldr	r0, [pc, #12]	; (8021fd0 <icmp_send_response+0xa0>)
 8021fc2:	f002 fd93 	bl	8024aec <iprintf>
 8021fc6:	e7c3      	b.n	8021f50 <icmp_send_response+0x20>
 8021fc8:	08044b30 	.word	0x08044b30
 8021fcc:	08044b68 	.word	0x08044b68
 8021fd0:	0802b818 	.word	0x0802b818

08021fd4 <icmp_input>:
{
 8021fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 8021fd8:	4f54      	ldr	r7, [pc, #336]	; (802212c <icmp_input+0x158>)
{
 8021fda:	b086      	sub	sp, #24
 8021fdc:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8021fde:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8021fe2:	f898 4000 	ldrb.w	r4, [r8]
 8021fe6:	f004 040f 	and.w	r4, r4, #15
 8021fea:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8021fec:	2c13      	cmp	r4, #19
 8021fee:	d913      	bls.n	8022018 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8021ff0:	8943      	ldrh	r3, [r0, #10]
 8021ff2:	2b03      	cmp	r3, #3
 8021ff4:	d910      	bls.n	8022018 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8021ff6:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8021ff8:	781b      	ldrb	r3, [r3, #0]
 8021ffa:	2b08      	cmp	r3, #8
 8021ffc:	d10c      	bne.n	8022018 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021ffe:	6978      	ldr	r0, [r7, #20]
 8022000:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8022004:	2be0      	cmp	r3, #224	; 0xe0
 8022006:	d007      	beq.n	8022018 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8022008:	460e      	mov	r6, r1
 802200a:	6839      	ldr	r1, [r7, #0]
 802200c:	f000 fa7e 	bl	802250c <ip4_addr_isbroadcast_u32>
 8022010:	b910      	cbnz	r0, 8022018 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8022012:	892b      	ldrh	r3, [r5, #8]
 8022014:	2b07      	cmp	r3, #7
 8022016:	d805      	bhi.n	8022024 <icmp_input+0x50>
  pbuf_free(p);
 8022018:	4628      	mov	r0, r5
}
 802201a:	b006      	add	sp, #24
 802201c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8022020:	f7f8 bcaa 	b.w	801a978 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8022024:	4628      	mov	r0, r5
 8022026:	f7f7 fa35 	bl	8019494 <inet_chksum_pbuf>
 802202a:	2800      	cmp	r0, #0
 802202c:	d1f4      	bne.n	8022018 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802202e:	f104 010e 	add.w	r1, r4, #14
 8022032:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 8022034:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8022038:	9105      	str	r1, [sp, #20]
 802203a:	f7f8 fbf9 	bl	801a830 <pbuf_add_header>
 802203e:	9905      	ldr	r1, [sp, #20]
 8022040:	2800      	cmp	r0, #0
 8022042:	d058      	beq.n	80220f6 <icmp_input+0x122>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8022044:	892b      	ldrh	r3, [r5, #8]
 8022046:	eb03 0109 	add.w	r1, r3, r9
 802204a:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 802204c:	428b      	cmp	r3, r1
 802204e:	d8e3      	bhi.n	8022018 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8022050:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022054:	200e      	movs	r0, #14
 8022056:	f7f8 fad9 	bl	801a60c <pbuf_alloc>
        if (r == NULL) {
 802205a:	4682      	mov	sl, r0
 802205c:	2800      	cmp	r0, #0
 802205e:	d0db      	beq.n	8022018 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8022060:	8942      	ldrh	r2, [r0, #10]
 8022062:	f104 0308 	add.w	r3, r4, #8
 8022066:	429a      	cmp	r2, r3
 8022068:	d351      	bcc.n	802210e <icmp_input+0x13a>
        MEMCPY(r->payload, iphdr_in, hlen);
 802206a:	4641      	mov	r1, r8
 802206c:	4622      	mov	r2, r4
 802206e:	6840      	ldr	r0, [r0, #4]
 8022070:	f001 fd78 	bl	8023b64 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8022074:	4621      	mov	r1, r4
 8022076:	4650      	mov	r0, sl
 8022078:	f7f8 fc0e 	bl	801a898 <pbuf_remove_header>
 802207c:	2800      	cmp	r0, #0
 802207e:	d14a      	bne.n	8022116 <icmp_input+0x142>
        if (pbuf_copy(r, p) != ERR_OK) {
 8022080:	4629      	mov	r1, r5
 8022082:	4650      	mov	r0, sl
 8022084:	f7f8 fd00 	bl	801aa88 <pbuf_copy>
 8022088:	2800      	cmp	r0, #0
 802208a:	d140      	bne.n	802210e <icmp_input+0x13a>
        pbuf_free(p);
 802208c:	4628      	mov	r0, r5
 802208e:	4655      	mov	r5, sl
 8022090:	f7f8 fc72 	bl	801a978 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8022094:	4621      	mov	r1, r4
 8022096:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 8022098:	f8d5 8004 	ldr.w	r8, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 802209c:	f7f8 fbc8 	bl	801a830 <pbuf_add_header>
 80220a0:	2800      	cmp	r0, #0
 80220a2:	d1b9      	bne.n	8022018 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80220a4:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80220a6:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 80220aa:	697b      	ldr	r3, [r7, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80220ac:	4649      	mov	r1, r9
        ip4_addr_copy(iphdr->src, *src);
 80220ae:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80220b0:	693b      	ldr	r3, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 80220b2:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80220b4:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80220b6:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80220ba:	f888 0000 	strb.w	r0, [r8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80220be:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80220c0:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80220c2:	bf8c      	ite	hi
 80220c4:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80220c6:	3308      	addls	r3, #8
 80220c8:	b29b      	uxth	r3, r3
 80220ca:	f8a8 3002 	strh.w	r3, [r8, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80220ce:	f04f 08ff 	mov.w	r8, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 80220d2:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80220d4:	f884 8008 	strb.w	r8, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80220d8:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80220da:	f7f7 f9d5 	bl	8019488 <inet_chksum>
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80220de:	2201      	movs	r2, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80220e0:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80220e2:	4643      	mov	r3, r8
 80220e4:	4912      	ldr	r1, [pc, #72]	; (8022130 <icmp_input+0x15c>)
 80220e6:	4628      	mov	r0, r5
 80220e8:	9700      	str	r7, [sp, #0]
 80220ea:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80220ee:	463a      	mov	r2, r7
 80220f0:	f000 f9fa 	bl	80224e8 <ip4_output_if>
  pbuf_free(p);
 80220f4:	e790      	b.n	8022018 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80220f6:	4628      	mov	r0, r5
 80220f8:	f7f8 fbce 	bl	801a898 <pbuf_remove_header>
 80220fc:	2800      	cmp	r0, #0
 80220fe:	d0c9      	beq.n	8022094 <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8022100:	4b0c      	ldr	r3, [pc, #48]	; (8022134 <icmp_input+0x160>)
 8022102:	22c7      	movs	r2, #199	; 0xc7
 8022104:	490c      	ldr	r1, [pc, #48]	; (8022138 <icmp_input+0x164>)
 8022106:	480d      	ldr	r0, [pc, #52]	; (802213c <icmp_input+0x168>)
 8022108:	f002 fcf0 	bl	8024aec <iprintf>
          goto icmperr;
 802210c:	e784      	b.n	8022018 <icmp_input+0x44>
          pbuf_free(r);
 802210e:	4650      	mov	r0, sl
 8022110:	f7f8 fc32 	bl	801a978 <pbuf_free>
          goto icmperr;
 8022114:	e780      	b.n	8022018 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8022116:	4b07      	ldr	r3, [pc, #28]	; (8022134 <icmp_input+0x160>)
 8022118:	22b6      	movs	r2, #182	; 0xb6
 802211a:	4909      	ldr	r1, [pc, #36]	; (8022140 <icmp_input+0x16c>)
 802211c:	4807      	ldr	r0, [pc, #28]	; (802213c <icmp_input+0x168>)
 802211e:	f002 fce5 	bl	8024aec <iprintf>
          pbuf_free(r);
 8022122:	4650      	mov	r0, sl
 8022124:	f7f8 fc28 	bl	801a978 <pbuf_free>
          goto icmperr;
 8022128:	e776      	b.n	8022018 <icmp_input+0x44>
 802212a:	bf00      	nop
 802212c:	2001ec2c 	.word	0x2001ec2c
 8022130:	2001ec40 	.word	0x2001ec40
 8022134:	08044b30 	.word	0x08044b30
 8022138:	08044bcc 	.word	0x08044bcc
 802213c:	0802b818 	.word	0x0802b818
 8022140:	08044b94 	.word	0x08044b94

08022144 <icmp_dest_unreach>:
{
 8022144:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8022146:	2103      	movs	r1, #3
 8022148:	f7ff bef2 	b.w	8021f30 <icmp_send_response>

0802214c <icmp_time_exceeded>:
{
 802214c:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 802214e:	210b      	movs	r1, #11
 8022150:	f7ff beee 	b.w	8021f30 <icmp_send_response>

08022154 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8022154:	4b19      	ldr	r3, [pc, #100]	; (80221bc <ip4_route+0x68>)
{
 8022156:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 8022158:	681b      	ldr	r3, [r3, #0]
 802215a:	b1ab      	cbz	r3, 8022188 <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802215c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8022160:	07d4      	lsls	r4, r2, #31
 8022162:	d5f9      	bpl.n	8022158 <ip4_route+0x4>
 8022164:	0751      	lsls	r1, r2, #29
 8022166:	d5f7      	bpl.n	8022158 <ip4_route+0x4>
 8022168:	6859      	ldr	r1, [r3, #4]
 802216a:	2900      	cmp	r1, #0
 802216c:	d0f4      	beq.n	8022158 <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 802216e:	6804      	ldr	r4, [r0, #0]
 8022170:	689d      	ldr	r5, [r3, #8]
 8022172:	4061      	eors	r1, r4
 8022174:	4229      	tst	r1, r5
 8022176:	d004      	beq.n	8022182 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8022178:	0792      	lsls	r2, r2, #30
 802217a:	d4ed      	bmi.n	8022158 <ip4_route+0x4>
 802217c:	68da      	ldr	r2, [r3, #12]
 802217e:	4294      	cmp	r4, r2
 8022180:	d1ea      	bne.n	8022158 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8022182:	4618      	mov	r0, r3
 8022184:	bc30      	pop	{r4, r5}
 8022186:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8022188:	4b0d      	ldr	r3, [pc, #52]	; (80221c0 <ip4_route+0x6c>)
 802218a:	681b      	ldr	r3, [r3, #0]
 802218c:	2b00      	cmp	r3, #0
 802218e:	d0f8      	beq.n	8022182 <ip4_route+0x2e>
 8022190:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8022194:	f002 0205 	and.w	r2, r2, #5
 8022198:	2a05      	cmp	r2, #5
 802219a:	d108      	bne.n	80221ae <ip4_route+0x5a>
 802219c:	685a      	ldr	r2, [r3, #4]
 802219e:	b152      	cbz	r2, 80221b6 <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80221a0:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 80221a2:	2a7f      	cmp	r2, #127	; 0x7f
 80221a4:	bf08      	it	eq
 80221a6:	2300      	moveq	r3, #0
}
 80221a8:	bc30      	pop	{r4, r5}
 80221aa:	4618      	mov	r0, r3
 80221ac:	4770      	bx	lr
    return NULL;
 80221ae:	2300      	movs	r3, #0
}
 80221b0:	bc30      	pop	{r4, r5}
 80221b2:	4618      	mov	r0, r3
 80221b4:	4770      	bx	lr
    return NULL;
 80221b6:	4613      	mov	r3, r2
 80221b8:	e7e3      	b.n	8022182 <ip4_route+0x2e>
 80221ba:	bf00      	nop
 80221bc:	2002dba0 	.word	0x2002dba0
 80221c0:	2002db9c 	.word	0x2002db9c

080221c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80221c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80221c8:	6847      	ldr	r7, [r0, #4]
{
 80221ca:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 80221cc:	783b      	ldrb	r3, [r7, #0]
 80221ce:	091a      	lsrs	r2, r3, #4
 80221d0:	2a04      	cmp	r2, #4
 80221d2:	f040 80a8 	bne.w	8022326 <ip4_input+0x162>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80221d6:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80221da:	8878      	ldrh	r0, [r7, #2]
 80221dc:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80221de:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80221e2:	f7f6 fba9 	bl	8018938 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80221e6:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80221e8:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80221ea:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 80221ec:	4283      	cmp	r3, r0
 80221ee:	f200 80a0 	bhi.w	8022332 <ip4_input+0x16e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80221f2:	8963      	ldrh	r3, [r4, #10]
 80221f4:	42ab      	cmp	r3, r5
 80221f6:	f0c0 8096 	bcc.w	8022326 <ip4_input+0x162>
 80221fa:	8923      	ldrh	r3, [r4, #8]
 80221fc:	4543      	cmp	r3, r8
 80221fe:	f0c0 8092 	bcc.w	8022326 <ip4_input+0x162>
 8022202:	2d13      	cmp	r5, #19
 8022204:	f240 808f 	bls.w	8022326 <ip4_input+0x162>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022208:	693b      	ldr	r3, [r7, #16]
 802220a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80223ac <ip4_input+0x1e8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802220e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022212:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022216:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8022218:	68f8      	ldr	r0, [r7, #12]
 802221a:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802221e:	d073      	beq.n	8022308 <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8022220:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8022224:	07d2      	lsls	r2, r2, #31
 8022226:	d503      	bpl.n	8022230 <ip4_input+0x6c>
 8022228:	6872      	ldr	r2, [r6, #4]
 802222a:	2a00      	cmp	r2, #0
 802222c:	f040 8094 	bne.w	8022358 <ip4_input+0x194>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022230:	b2db      	uxtb	r3, r3
 8022232:	2b7f      	cmp	r3, #127	; 0x7f
 8022234:	d06c      	beq.n	8022310 <ip4_input+0x14c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8022236:	4b5c      	ldr	r3, [pc, #368]	; (80223a8 <ip4_input+0x1e4>)
 8022238:	681d      	ldr	r5, [r3, #0]
 802223a:	b935      	cbnz	r5, 802224a <ip4_input+0x86>
 802223c:	e068      	b.n	8022310 <ip4_input+0x14c>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 802223e:	f000 f965 	bl	802250c <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022242:	b980      	cbnz	r0, 8022266 <ip4_input+0xa2>
        NETIF_FOREACH(netif) {
 8022244:	682d      	ldr	r5, [r5, #0]
 8022246:	2d00      	cmp	r5, #0
 8022248:	d062      	beq.n	8022310 <ip4_input+0x14c>
          if (netif == inp) {
 802224a:	42ae      	cmp	r6, r5
 802224c:	d0fa      	beq.n	8022244 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 802224e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8022252:	07db      	lsls	r3, r3, #31
 8022254:	d5f6      	bpl.n	8022244 <ip4_input+0x80>
 8022256:	686b      	ldr	r3, [r5, #4]
 8022258:	2b00      	cmp	r3, #0
 802225a:	d0f3      	beq.n	8022244 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802225c:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022260:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022262:	4283      	cmp	r3, r0
 8022264:	d1eb      	bne.n	802223e <ip4_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022266:	f8d8 0010 	ldr.w	r0, [r8, #16]
 802226a:	2800      	cmp	r0, #0
 802226c:	d157      	bne.n	802231e <ip4_input+0x15a>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 802226e:	88fb      	ldrh	r3, [r7, #6]
 8022270:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8022274:	b133      	cbz	r3, 8022284 <ip4_input+0xc0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8022276:	4620      	mov	r0, r4
 8022278:	f000 fb1c 	bl	80228b4 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802227c:	4604      	mov	r4, r0
 802227e:	2800      	cmp	r0, #0
 8022280:	d054      	beq.n	802232c <ip4_input+0x168>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8022282:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8022284:	f8c8 7008 	str.w	r7, [r8, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8022288:	4631      	mov	r1, r6
 802228a:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 802228c:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8022290:	783b      	ldrb	r3, [r7, #0]
 8022292:	f003 030f 	and.w	r3, r3, #15
 8022296:	009b      	lsls	r3, r3, #2
 8022298:	f8a8 300c 	strh.w	r3, [r8, #12]
  raw_status = raw_input(p, inp);
 802229c:	f7f8 fd9e 	bl	801addc <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 80222a0:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 80222a2:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
 80222a4:	d024      	beq.n	80222f0 <ip4_input+0x12c>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80222a6:	4649      	mov	r1, r9
 80222a8:	4620      	mov	r0, r4
 80222aa:	f7f8 faf5 	bl	801a898 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80222ae:	7a7b      	ldrb	r3, [r7, #9]
 80222b0:	2b06      	cmp	r3, #6
 80222b2:	d065      	beq.n	8022380 <ip4_input+0x1bc>
 80222b4:	2b11      	cmp	r3, #17
 80222b6:	d05e      	beq.n	8022376 <ip4_input+0x1b2>
 80222b8:	2b01      	cmp	r3, #1
 80222ba:	d057      	beq.n	802236c <ip4_input+0x1a8>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 80222bc:	f1ba 0f02 	cmp.w	sl, #2
 80222c0:	d013      	beq.n	80222ea <ip4_input+0x126>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80222c2:	4629      	mov	r1, r5
 80222c4:	f8d8 0014 	ldr.w	r0, [r8, #20]
 80222c8:	f000 f920 	bl	802250c <ip4_addr_isbroadcast_u32>
 80222cc:	b968      	cbnz	r0, 80222ea <ip4_input+0x126>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80222ce:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80222d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80222d6:	2be0      	cmp	r3, #224	; 0xe0
 80222d8:	d007      	beq.n	80222ea <ip4_input+0x126>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80222da:	4649      	mov	r1, r9
 80222dc:	4620      	mov	r0, r4
 80222de:	f7f8 fb13 	bl	801a908 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80222e2:	2102      	movs	r1, #2
 80222e4:	4620      	mov	r0, r4
 80222e6:	f7ff ff2d 	bl	8022144 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80222ea:	4620      	mov	r0, r4
 80222ec:	f7f8 fb44 	bl	801a978 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80222f0:	2300      	movs	r3, #0
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80222f2:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 80222f4:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 80222f8:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 80222fc:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8022300:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 8022304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8022308:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 802230c:	07d9      	lsls	r1, r3, #31
 802230e:	d41e      	bmi.n	802234e <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8022310:	7a7b      	ldrb	r3, [r7, #9]
 8022312:	2b11      	cmp	r3, #17
 8022314:	d039      	beq.n	802238a <ip4_input+0x1c6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022316:	f8d8 0010 	ldr.w	r0, [r8, #16]
 802231a:	b120      	cbz	r0, 8022326 <ip4_input+0x162>
 802231c:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802231e:	4631      	mov	r1, r6
 8022320:	f000 f8f4 	bl	802250c <ip4_addr_isbroadcast_u32>
 8022324:	b150      	cbz	r0, 802233c <ip4_input+0x178>
    pbuf_free(p);
 8022326:	4620      	mov	r0, r4
 8022328:	f7f8 fb26 	bl	801a978 <pbuf_free>
}
 802232c:	2000      	movs	r0, #0
 802232e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 8022332:	4601      	mov	r1, r0
 8022334:	4620      	mov	r0, r4
 8022336:	f7f8 fa23 	bl	801a780 <pbuf_realloc>
 802233a:	e75a      	b.n	80221f2 <ip4_input+0x2e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802233c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8022340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022344:	2be0      	cmp	r3, #224	; 0xe0
 8022346:	d0ee      	beq.n	8022326 <ip4_input+0x162>
  if (netif == NULL) {
 8022348:	2d00      	cmp	r5, #0
 802234a:	d190      	bne.n	802226e <ip4_input+0xaa>
 802234c:	e7eb      	b.n	8022326 <ip4_input+0x162>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802234e:	6873      	ldr	r3, [r6, #4]
 8022350:	2b00      	cmp	r3, #0
 8022352:	d0dd      	beq.n	8022310 <ip4_input+0x14c>
 8022354:	4635      	mov	r5, r6
 8022356:	e788      	b.n	802226a <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022358:	4293      	cmp	r3, r2
 802235a:	d0fb      	beq.n	8022354 <ip4_input+0x190>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 802235c:	4618      	mov	r0, r3
 802235e:	4631      	mov	r1, r6
 8022360:	f000 f8d4 	bl	802250c <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022364:	b9e0      	cbnz	r0, 80223a0 <ip4_input+0x1dc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022366:	f8d8 3014 	ldr.w	r3, [r8, #20]
 802236a:	e761      	b.n	8022230 <ip4_input+0x6c>
        icmp_input(p, inp);
 802236c:	4631      	mov	r1, r6
 802236e:	4620      	mov	r0, r4
 8022370:	f7ff fe30 	bl	8021fd4 <icmp_input>
        break;
 8022374:	e7bc      	b.n	80222f0 <ip4_input+0x12c>
        udp_input(p, inp);
 8022376:	4631      	mov	r1, r6
 8022378:	4620      	mov	r0, r4
 802237a:	f7fd f8a1 	bl	801f4c0 <udp_input>
        break;
 802237e:	e7b7      	b.n	80222f0 <ip4_input+0x12c>
        tcp_input(p, inp);
 8022380:	4631      	mov	r1, r6
 8022382:	4620      	mov	r0, r4
 8022384:	f7fa fefc 	bl	801d180 <tcp_input>
        break;
 8022388:	e7b2      	b.n	80222f0 <ip4_input+0x12c>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 802238a:	eb07 0309 	add.w	r3, r7, r9
 802238e:	885b      	ldrh	r3, [r3, #2]
 8022390:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8022394:	d1bf      	bne.n	8022316 <ip4_input+0x152>
 8022396:	4635      	mov	r5, r6
  if (netif == NULL) {
 8022398:	2d00      	cmp	r5, #0
 802239a:	f47f af68 	bne.w	802226e <ip4_input+0xaa>
 802239e:	e7c2      	b.n	8022326 <ip4_input+0x162>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80223a0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80223a4:	4635      	mov	r5, r6
 80223a6:	e760      	b.n	802226a <ip4_input+0xa6>
 80223a8:	2002dba0 	.word	0x2002dba0
 80223ac:	2001ec2c 	.word	0x2001ec2c

080223b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80223b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223b4:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80223b6:	7b83      	ldrb	r3, [r0, #14]
{
 80223b8:	b083      	sub	sp, #12
 80223ba:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80223bc:	2b01      	cmp	r3, #1
{
 80223be:	4689      	mov	r9, r1
 80223c0:	4617      	mov	r7, r2
 80223c2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80223c6:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 80223ca:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80223ce:	d158      	bne.n	8022482 <ip4_output_if_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80223d0:	2f00      	cmp	r7, #0
 80223d2:	d05f      	beq.n	8022494 <ip4_output_if_src+0xe4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80223d4:	2114      	movs	r1, #20
 80223d6:	4620      	mov	r0, r4
 80223d8:	f7f8 fa2a 	bl	801a830 <pbuf_add_header>
 80223dc:	2800      	cmp	r0, #0
 80223de:	d174      	bne.n	80224ca <ip4_output_if_src+0x11a>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80223e0:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 80223e2:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80223e4:	2b13      	cmp	r3, #19
 80223e6:	d95d      	bls.n	80224a4 <ip4_output_if_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80223e8:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80223ec:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 80223f0:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80223f4:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 80223f6:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80223f8:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80223fa:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 80223fc:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80223fe:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 8022402:	fa10 f383 	uxtah	r3, r0, r3
 8022406:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8022408:	ea4f 252a 	mov.w	r5, sl, asr #8
 802240c:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8022410:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022414:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8022416:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80224e4 <ip4_output_if_src+0x134>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 802241a:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802241c:	8920      	ldrh	r0, [r4, #8]
 802241e:	f7f6 fa8b 	bl	8018938 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8022422:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8022424:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8022426:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8022428:	71b3      	strb	r3, [r6, #6]
 802242a:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802242c:	f8ba 0000 	ldrh.w	r0, [sl]
 8022430:	f7f6 fa82 	bl	8018938 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8022434:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 8022438:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802243a:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 802243c:	3201      	adds	r2, #1
 802243e:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 8022442:	f1b9 0f00 	cmp.w	r9, #0
 8022446:	d035      	beq.n	80224b4 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8022448:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 802244c:	fa13 f382 	uxtah	r3, r3, r2
 8022450:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8022452:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8022456:	b29a      	uxth	r2, r3
 8022458:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 802245c:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 8022460:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8022462:	8173      	strh	r3, [r6, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8022464:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 8022468:	b113      	cbz	r3, 8022470 <ip4_output_if_src+0xc0>
 802246a:	8922      	ldrh	r2, [r4, #8]
 802246c:	429a      	cmp	r2, r3
 802246e:	d824      	bhi.n	80224ba <ip4_output_if_src+0x10a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8022470:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8022474:	463a      	mov	r2, r7
 8022476:	4621      	mov	r1, r4
 8022478:	4640      	mov	r0, r8
 802247a:	4798      	blx	r3
}
 802247c:	b003      	add	sp, #12
 802247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022482:	4b13      	ldr	r3, [pc, #76]	; (80224d0 <ip4_output_if_src+0x120>)
 8022484:	f44f 7255 	mov.w	r2, #852	; 0x354
 8022488:	4912      	ldr	r1, [pc, #72]	; (80224d4 <ip4_output_if_src+0x124>)
 802248a:	4813      	ldr	r0, [pc, #76]	; (80224d8 <ip4_output_if_src+0x128>)
 802248c:	f002 fb2e 	bl	8024aec <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8022490:	2f00      	cmp	r7, #0
 8022492:	d19f      	bne.n	80223d4 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 8022494:	8963      	ldrh	r3, [r4, #10]
 8022496:	2b13      	cmp	r3, #19
 8022498:	d917      	bls.n	80224ca <ip4_output_if_src+0x11a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 802249a:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 802249c:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 802249e:	691b      	ldr	r3, [r3, #16]
 80224a0:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80224a2:	e7df      	b.n	8022464 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80224a4:	4b0a      	ldr	r3, [pc, #40]	; (80224d0 <ip4_output_if_src+0x120>)
 80224a6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80224aa:	490c      	ldr	r1, [pc, #48]	; (80224dc <ip4_output_if_src+0x12c>)
 80224ac:	480a      	ldr	r0, [pc, #40]	; (80224d8 <ip4_output_if_src+0x128>)
 80224ae:	f002 fb1d 	bl	8024aec <iprintf>
 80224b2:	e799      	b.n	80223e8 <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80224b4:	4a0a      	ldr	r2, [pc, #40]	; (80224e0 <ip4_output_if_src+0x130>)
 80224b6:	6812      	ldr	r2, [r2, #0]
 80224b8:	e7c8      	b.n	802244c <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 80224ba:	463a      	mov	r2, r7
 80224bc:	4641      	mov	r1, r8
 80224be:	4620      	mov	r0, r4
 80224c0:	f000 fc36 	bl	8022d30 <ip4_frag>
}
 80224c4:	b003      	add	sp, #12
 80224c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 80224ca:	f06f 0001 	mvn.w	r0, #1
 80224ce:	e7d5      	b.n	802247c <ip4_output_if_src+0xcc>
 80224d0:	08044c00 	.word	0x08044c00
 80224d4:	08044c34 	.word	0x08044c34
 80224d8:	0802b818 	.word	0x0802b818
 80224dc:	08044c40 	.word	0x08044c40
 80224e0:	08044cb8 	.word	0x08044cb8
 80224e4:	2002df5a 	.word	0x2002df5a

080224e8 <ip4_output_if>:
{
 80224e8:	b4f0      	push	{r4, r5, r6, r7}
 80224ea:	9c06      	ldr	r4, [sp, #24]
 80224ec:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80224f0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80224f4:	b11a      	cbz	r2, 80224fe <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80224f6:	b109      	cbz	r1, 80224fc <ip4_output_if+0x14>
 80224f8:	680f      	ldr	r7, [r1, #0]
 80224fa:	b907      	cbnz	r7, 80224fe <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80224fc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80224fe:	9504      	str	r5, [sp, #16]
 8022500:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8022504:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8022506:	f7ff bf53 	b.w	80223b0 <ip4_output_if_src>
 802250a:	bf00      	nop

0802250c <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802250c:	1e43      	subs	r3, r0, #1
 802250e:	3303      	adds	r3, #3
 8022510:	d814      	bhi.n	802253c <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8022512:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8022516:	f013 0302 	ands.w	r3, r3, #2
 802251a:	d00d      	beq.n	8022538 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 802251c:	684b      	ldr	r3, [r1, #4]
 802251e:	4283      	cmp	r3, r0
 8022520:	d00f      	beq.n	8022542 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8022522:	688a      	ldr	r2, [r1, #8]
 8022524:	4043      	eors	r3, r0
 8022526:	4213      	tst	r3, r2
 8022528:	d10b      	bne.n	8022542 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802252a:	43d3      	mvns	r3, r2
 802252c:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8022530:	1ac3      	subs	r3, r0, r3
 8022532:	fab3 f383 	clz	r3, r3
 8022536:	095b      	lsrs	r3, r3, #5
  }
}
 8022538:	4618      	mov	r0, r3
 802253a:	4770      	bx	lr
    return 1;
 802253c:	2301      	movs	r3, #1
}
 802253e:	4618      	mov	r0, r3
 8022540:	4770      	bx	lr
    return 0;
 8022542:	2300      	movs	r3, #0
}
 8022544:	4618      	mov	r0, r3
 8022546:	4770      	bx	lr

08022548 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8022548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 802254c:	4e4f      	ldr	r6, [pc, #316]	; (802268c <ip4addr_aton+0x144>)
{
 802254e:	b085      	sub	sp, #20
  c = *cp;
 8022550:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 8022552:	5cf2      	ldrb	r2, [r6, r3]
 8022554:	0754      	lsls	r4, r2, #29
 8022556:	d538      	bpl.n	80225ca <ip4addr_aton+0x82>
  u32_t *pp = parts;
 8022558:	46e9      	mov	r9, sp
 802255a:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 802255c:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 8022560:	464f      	mov	r7, r9
    if (c == '0') {
 8022562:	2b30      	cmp	r3, #48	; 0x30
 8022564:	d035      	beq.n	80225d2 <ip4addr_aton+0x8a>
    base = 10;
 8022566:	210a      	movs	r1, #10
 8022568:	1c42      	adds	r2, r0, #1
 802256a:	2400      	movs	r4, #0
 802256c:	e003      	b.n	8022576 <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 802256e:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 8022572:	7813      	ldrb	r3, [r2, #0]
 8022574:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 8022576:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 802257a:	f103 0e0a 	add.w	lr, r3, #10
 802257e:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 8022582:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 8022586:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 802258a:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 802258e:	d1ee      	bne.n	802256e <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8022590:	2910      	cmp	r1, #16
 8022592:	d10d      	bne.n	80225b0 <ip4addr_aton+0x68>
 8022594:	f01c 0f44 	tst.w	ip, #68	; 0x44
 8022598:	d00a      	beq.n	80225b0 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 802259a:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 802259e:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80225a0:	bf0c      	ite	eq
 80225a2:	2061      	moveq	r0, #97	; 0x61
 80225a4:	2041      	movne	r0, #65	; 0x41
 80225a6:	ebae 0e00 	sub.w	lr, lr, r0
 80225aa:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 80225ae:	e7e1      	b.n	8022574 <ip4addr_aton+0x2c>
    if (c == '.') {
 80225b0:	2b2e      	cmp	r3, #46	; 0x2e
 80225b2:	d11a      	bne.n	80225ea <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 80225b4:	4547      	cmp	r7, r8
 80225b6:	d008      	beq.n	80225ca <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 80225b8:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80225bc:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 80225c0:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 80225c4:	5cf2      	ldrb	r2, [r6, r3]
 80225c6:	0752      	lsls	r2, r2, #29
 80225c8:	d4cb      	bmi.n	8022562 <ip4addr_aton+0x1a>
      return 0;
 80225ca:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 80225cc:	b005      	add	sp, #20
 80225ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 80225d2:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 80225d4:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 80225d8:	2a58      	cmp	r2, #88	; 0x58
 80225da:	d002      	beq.n	80225e2 <ip4addr_aton+0x9a>
      c = *++cp;
 80225dc:	3001      	adds	r0, #1
        base = 8;
 80225de:	2108      	movs	r1, #8
 80225e0:	e7c2      	b.n	8022568 <ip4addr_aton+0x20>
        c = *++cp;
 80225e2:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 80225e4:	2110      	movs	r1, #16
        c = *++cp;
 80225e6:	3002      	adds	r0, #2
 80225e8:	e7be      	b.n	8022568 <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 80225ea:	b113      	cbz	r3, 80225f2 <ip4addr_aton+0xaa>
 80225ec:	f01c 0f08 	tst.w	ip, #8
 80225f0:	d0eb      	beq.n	80225ca <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 80225f2:	eba7 0009 	sub.w	r0, r7, r9
 80225f6:	1080      	asrs	r0, r0, #2
 80225f8:	3001      	adds	r0, #1
 80225fa:	2804      	cmp	r0, #4
 80225fc:	d83e      	bhi.n	802267c <ip4addr_aton+0x134>
 80225fe:	a301      	add	r3, pc, #4	; (adr r3, 8022604 <ip4addr_aton+0xbc>)
 8022600:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8022604:	080225cd 	.word	0x080225cd
 8022608:	08022629 	.word	0x08022629
 802260c:	08022619 	.word	0x08022619
 8022610:	0802265d 	.word	0x0802265d
 8022614:	08022639 	.word	0x08022639
      if (val > 0xffffffUL) {
 8022618:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 802261c:	d2d5      	bcs.n	80225ca <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 802261e:	9b00      	ldr	r3, [sp, #0]
 8022620:	2bff      	cmp	r3, #255	; 0xff
 8022622:	d8d2      	bhi.n	80225ca <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8022624:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 8022628:	b335      	cbz	r5, 8022678 <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 802262a:	4620      	mov	r0, r4
 802262c:	f7f6 f988 	bl	8018940 <lwip_htonl>
 8022630:	4603      	mov	r3, r0
  return 1;
 8022632:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8022634:	602b      	str	r3, [r5, #0]
 8022636:	e7c9      	b.n	80225cc <ip4addr_aton+0x84>
      if (val > 0xff) {
 8022638:	2cff      	cmp	r4, #255	; 0xff
 802263a:	d8c6      	bhi.n	80225ca <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 802263c:	9900      	ldr	r1, [sp, #0]
 802263e:	29ff      	cmp	r1, #255	; 0xff
 8022640:	d8c3      	bhi.n	80225ca <ip4addr_aton+0x82>
 8022642:	9b01      	ldr	r3, [sp, #4]
 8022644:	2bff      	cmp	r3, #255	; 0xff
 8022646:	d8c0      	bhi.n	80225ca <ip4addr_aton+0x82>
 8022648:	9a02      	ldr	r2, [sp, #8]
 802264a:	2aff      	cmp	r2, #255	; 0xff
 802264c:	d8bd      	bhi.n	80225ca <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 802264e:	041b      	lsls	r3, r3, #16
 8022650:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8022654:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022658:	431c      	orrs	r4, r3
      break;
 802265a:	e7e5      	b.n	8022628 <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 802265c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8022660:	d2b3      	bcs.n	80225ca <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8022662:	9a00      	ldr	r2, [sp, #0]
 8022664:	2aff      	cmp	r2, #255	; 0xff
 8022666:	d8b0      	bhi.n	80225ca <ip4addr_aton+0x82>
 8022668:	9b01      	ldr	r3, [sp, #4]
 802266a:	2bff      	cmp	r3, #255	; 0xff
 802266c:	d8ad      	bhi.n	80225ca <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 802266e:	041b      	lsls	r3, r3, #16
 8022670:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8022674:	431c      	orrs	r4, r3
      break;
 8022676:	e7d7      	b.n	8022628 <ip4addr_aton+0xe0>
  return 1;
 8022678:	2001      	movs	r0, #1
 802267a:	e7a7      	b.n	80225cc <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 802267c:	4b04      	ldr	r3, [pc, #16]	; (8022690 <ip4addr_aton+0x148>)
 802267e:	22f9      	movs	r2, #249	; 0xf9
 8022680:	4904      	ldr	r1, [pc, #16]	; (8022694 <ip4addr_aton+0x14c>)
 8022682:	4805      	ldr	r0, [pc, #20]	; (8022698 <ip4addr_aton+0x150>)
 8022684:	f002 fa32 	bl	8024aec <iprintf>
      break;
 8022688:	e7ce      	b.n	8022628 <ip4addr_aton+0xe0>
 802268a:	bf00      	nop
 802268c:	08044f15 	.word	0x08044f15
 8022690:	08044c70 	.word	0x08044c70
 8022694:	08044cac 	.word	0x08044cac
 8022698:	0802b818 	.word	0x0802b818

0802269c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 802269c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802269e:	4604      	mov	r4, r0
 80226a0:	b148      	cbz	r0, 80226b6 <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80226a2:	6960      	ldr	r0, [r4, #20]
 80226a4:	b108      	cbz	r0, 80226aa <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80226a6:	f7f8 f967 	bl	801a978 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 80226aa:	4621      	mov	r1, r4
 80226ac:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 80226ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80226b2:	f7f7 bc65 	b.w	8019f80 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80226b6:	4b04      	ldr	r3, [pc, #16]	; (80226c8 <ipfrag_free_pbuf_custom+0x2c>)
 80226b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80226bc:	4903      	ldr	r1, [pc, #12]	; (80226cc <ipfrag_free_pbuf_custom+0x30>)
 80226be:	4804      	ldr	r0, [pc, #16]	; (80226d0 <ipfrag_free_pbuf_custom+0x34>)
 80226c0:	f002 fa14 	bl	8024aec <iprintf>
 80226c4:	e7ed      	b.n	80226a2 <ipfrag_free_pbuf_custom+0x6>
 80226c6:	bf00      	nop
 80226c8:	08044cc0 	.word	0x08044cc0
 80226cc:	08044cfc 	.word	0x08044cfc
 80226d0:	0802b818 	.word	0x0802b818

080226d4 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80226d4:	4281      	cmp	r1, r0
{
 80226d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226da:	4606      	mov	r6, r0
 80226dc:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80226de:	d075      	beq.n	80227cc <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 80226e0:	b147      	cbz	r7, 80226f4 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80226e2:	683b      	ldr	r3, [r7, #0]
 80226e4:	42b3      	cmp	r3, r6
 80226e6:	d005      	beq.n	80226f4 <ip_reass_free_complete_datagram+0x20>
 80226e8:	4b40      	ldr	r3, [pc, #256]	; (80227ec <ip_reass_free_complete_datagram+0x118>)
 80226ea:	22ad      	movs	r2, #173	; 0xad
 80226ec:	4940      	ldr	r1, [pc, #256]	; (80227f0 <ip_reass_free_complete_datagram+0x11c>)
 80226ee:	4841      	ldr	r0, [pc, #260]	; (80227f4 <ip_reass_free_complete_datagram+0x120>)
 80226f0:	f002 f9fc 	bl	8024aec <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80226f4:	6875      	ldr	r5, [r6, #4]
 80226f6:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 80226f8:	889a      	ldrh	r2, [r3, #4]
 80226fa:	2a00      	cmp	r2, #0
 80226fc:	d047      	beq.n	802278e <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 80226fe:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022702:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80227ec <ip_reass_free_complete_datagram+0x118>
 8022706:	f8df 9104 	ldr.w	r9, [pc, #260]	; 802280c <ip_reass_free_complete_datagram+0x138>
 802270a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80227f4 <ip_reass_free_complete_datagram+0x120>
 802270e:	e005      	b.n	802271c <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8022710:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8022712:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8022714:	f7f8 f930 	bl	801a978 <pbuf_free>
  while (p != NULL) {
 8022718:	b1b4      	cbz	r4, 8022748 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 802271a:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 802271c:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 802271e:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8022720:	f7f8 f93e 	bl	801a9a0 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022724:	4458      	add	r0, fp
 8022726:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 802272a:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 802272e:	dbef      	blt.n	8022710 <ip_reass_free_complete_datagram+0x3c>
 8022730:	4653      	mov	r3, sl
 8022732:	22cc      	movs	r2, #204	; 0xcc
 8022734:	4649      	mov	r1, r9
 8022736:	4640      	mov	r0, r8
 8022738:	f002 f9d8 	bl	8024aec <iprintf>
    pbuf_free(pcur);
 802273c:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 802273e:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8022740:	f7f8 f91a 	bl	801a978 <pbuf_free>
  while (p != NULL) {
 8022744:	2c00      	cmp	r4, #0
 8022746:	d1e8      	bne.n	802271a <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 8022748:	4b2b      	ldr	r3, [pc, #172]	; (80227f8 <ip_reass_free_complete_datagram+0x124>)
 802274a:	681a      	ldr	r2, [r3, #0]
 802274c:	4296      	cmp	r6, r2
 802274e:	d03a      	beq.n	80227c6 <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022750:	2f00      	cmp	r7, #0
 8022752:	d042      	beq.n	80227da <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8022754:	6833      	ldr	r3, [r6, #0]
 8022756:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022758:	4c28      	ldr	r4, [pc, #160]	; (80227fc <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 802275a:	4631      	mov	r1, r6
 802275c:	2005      	movs	r0, #5
 802275e:	f7f7 fc0f 	bl	8019f80 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022762:	8823      	ldrh	r3, [r4, #0]
 8022764:	455b      	cmp	r3, fp
 8022766:	d305      	bcc.n	8022774 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022768:	eba3 030b 	sub.w	r3, r3, fp
}
 802276c:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802276e:	8023      	strh	r3, [r4, #0]
}
 8022770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022774:	4b1d      	ldr	r3, [pc, #116]	; (80227ec <ip_reass_free_complete_datagram+0x118>)
 8022776:	22d2      	movs	r2, #210	; 0xd2
 8022778:	4921      	ldr	r1, [pc, #132]	; (8022800 <ip_reass_free_complete_datagram+0x12c>)
 802277a:	481e      	ldr	r0, [pc, #120]	; (80227f4 <ip_reass_free_complete_datagram+0x120>)
 802277c:	f002 f9b6 	bl	8024aec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022780:	8823      	ldrh	r3, [r4, #0]
}
 8022782:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022784:	eba3 030b 	sub.w	r3, r3, fp
 8022788:	8023      	strh	r3, [r4, #0]
}
 802278a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 802278e:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022790:	6930      	ldr	r0, [r6, #16]
 8022792:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 8022794:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022796:	68f4      	ldr	r4, [r6, #12]
 8022798:	68b2      	ldr	r2, [r6, #8]
 802279a:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802279c:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802279e:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80227a0:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80227a2:	601a      	str	r2, [r3, #0]
 80227a4:	605c      	str	r4, [r3, #4]
 80227a6:	69b2      	ldr	r2, [r6, #24]
 80227a8:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80227aa:	f7ff fccf 	bl	802214c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80227ae:	4628      	mov	r0, r5
 80227b0:	f7f8 f8f6 	bl	801a9a0 <pbuf_clen>
 80227b4:	4683      	mov	fp, r0
    pbuf_free(p);
 80227b6:	4628      	mov	r0, r5
 80227b8:	f7f8 f8de 	bl	801a978 <pbuf_free>
  p = ipr->p;
 80227bc:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 80227be:	2d00      	cmp	r5, #0
 80227c0:	d0c2      	beq.n	8022748 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 80227c2:	686b      	ldr	r3, [r5, #4]
 80227c4:	e79d      	b.n	8022702 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 80227c6:	6832      	ldr	r2, [r6, #0]
 80227c8:	601a      	str	r2, [r3, #0]
 80227ca:	e7c5      	b.n	8022758 <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80227cc:	4b07      	ldr	r3, [pc, #28]	; (80227ec <ip_reass_free_complete_datagram+0x118>)
 80227ce:	22ab      	movs	r2, #171	; 0xab
 80227d0:	490c      	ldr	r1, [pc, #48]	; (8022804 <ip_reass_free_complete_datagram+0x130>)
 80227d2:	4808      	ldr	r0, [pc, #32]	; (80227f4 <ip_reass_free_complete_datagram+0x120>)
 80227d4:	f002 f98a 	bl	8024aec <iprintf>
 80227d8:	e782      	b.n	80226e0 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80227da:	4b04      	ldr	r3, [pc, #16]	; (80227ec <ip_reass_free_complete_datagram+0x118>)
 80227dc:	f240 1245 	movw	r2, #325	; 0x145
 80227e0:	4909      	ldr	r1, [pc, #36]	; (8022808 <ip_reass_free_complete_datagram+0x134>)
 80227e2:	4804      	ldr	r0, [pc, #16]	; (80227f4 <ip_reass_free_complete_datagram+0x120>)
 80227e4:	f002 f982 	bl	8024aec <iprintf>
 80227e8:	e7b4      	b.n	8022754 <ip_reass_free_complete_datagram+0x80>
 80227ea:	bf00      	nop
 80227ec:	08044cc0 	.word	0x08044cc0
 80227f0:	08044d14 	.word	0x08044d14
 80227f4:	0802b818 	.word	0x0802b818
 80227f8:	2002df60 	.word	0x2002df60
 80227fc:	2002df5c 	.word	0x2002df5c
 8022800:	08044d64 	.word	0x08044d64
 8022804:	08044d08 	.word	0x08044d08
 8022808:	08044d48 	.word	0x08044d48
 802280c:	08044d28 	.word	0x08044d28

08022810 <ip_reass_remove_oldest_datagram>:
{
 8022810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8022814:	2700      	movs	r7, #0
 8022816:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8022880 <ip_reass_remove_oldest_datagram+0x70>
{
 802281a:	4605      	mov	r5, r0
 802281c:	460e      	mov	r6, r1
    r = reassdatagrams;
 802281e:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8022822:	b1f3      	cbz	r3, 8022862 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8022824:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022826:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 802282a:	4621      	mov	r1, r4
    prev = NULL;
 802282c:	46a4      	mov	ip, r4
    oldest = NULL;
 802282e:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022830:	695a      	ldr	r2, [r3, #20]
 8022832:	4572      	cmp	r2, lr
 8022834:	d018      	beq.n	8022868 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 8022836:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8022838:	b120      	cbz	r0, 8022844 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 802283a:	f893 901f 	ldrb.w	r9, [r3, #31]
 802283e:	7fc2      	ldrb	r2, [r0, #31]
 8022840:	4591      	cmp	r9, r2
 8022842:	d801      	bhi.n	8022848 <ip_reass_remove_oldest_datagram+0x38>
 8022844:	4661      	mov	r1, ip
 8022846:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8022848:	681a      	ldr	r2, [r3, #0]
 802284a:	469c      	mov	ip, r3
 802284c:	4613      	mov	r3, r2
 802284e:	2a00      	cmp	r2, #0
 8022850:	d1ee      	bne.n	8022830 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8022852:	b110      	cbz	r0, 802285a <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8022854:	f7ff ff3e 	bl	80226d4 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8022858:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802285a:	42b7      	cmp	r7, r6
 802285c:	da01      	bge.n	8022862 <ip_reass_remove_oldest_datagram+0x52>
 802285e:	2c01      	cmp	r4, #1
 8022860:	dcdd      	bgt.n	802281e <ip_reass_remove_oldest_datagram+0xe>
}
 8022862:	4638      	mov	r0, r7
 8022864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022868:	699a      	ldr	r2, [r3, #24]
 802286a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 802286e:	454a      	cmp	r2, r9
 8022870:	d1e1      	bne.n	8022836 <ip_reass_remove_oldest_datagram+0x26>
 8022872:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8022876:	88aa      	ldrh	r2, [r5, #4]
 8022878:	4591      	cmp	r9, r2
 802287a:	d1dc      	bne.n	8022836 <ip_reass_remove_oldest_datagram+0x26>
 802287c:	e7e4      	b.n	8022848 <ip_reass_remove_oldest_datagram+0x38>
 802287e:	bf00      	nop
 8022880:	2002df60 	.word	0x2002df60

08022884 <ip_reass_tmr>:
{
 8022884:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8022886:	4b0a      	ldr	r3, [pc, #40]	; (80228b0 <ip_reass_tmr+0x2c>)
 8022888:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 802288a:	b140      	cbz	r0, 802289e <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 802288c:	2400      	movs	r4, #0
    if (r->timer > 0) {
 802288e:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 8022890:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 8022892:	b12b      	cbz	r3, 80228a0 <ip_reass_tmr+0x1c>
 8022894:	4604      	mov	r4, r0
      r->timer--;
 8022896:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 8022898:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 802289a:	2800      	cmp	r0, #0
 802289c:	d1f7      	bne.n	802288e <ip_reass_tmr+0xa>
}
 802289e:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 80228a0:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 80228a2:	4621      	mov	r1, r4
 80228a4:	f7ff ff16 	bl	80226d4 <ip_reass_free_complete_datagram>
      r = r->next;
 80228a8:	4628      	mov	r0, r5
  while (r != NULL) {
 80228aa:	2800      	cmp	r0, #0
 80228ac:	d1ef      	bne.n	802288e <ip_reass_tmr+0xa>
 80228ae:	e7f6      	b.n	802289e <ip_reass_tmr+0x1a>
 80228b0:	2002df60 	.word	0x2002df60

080228b4 <ip4_reass>:
{
 80228b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 80228b8:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 80228bc:	b085      	sub	sp, #20
 80228be:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80228c0:	f89a 3000 	ldrb.w	r3, [sl]
 80228c4:	f003 030f 	and.w	r3, r3, #15
 80228c8:	2b05      	cmp	r3, #5
 80228ca:	f040 8089 	bne.w	80229e0 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80228ce:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80228d2:	f7f6 f831 	bl	8018938 <lwip_htons>
 80228d6:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80228d8:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80228dc:	f7f6 f82c 	bl	8018938 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80228e0:	f89a 2000 	ldrb.w	r2, [sl]
 80228e4:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80228e8:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80228ec:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80228f0:	d376      	bcc.n	80229e0 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 80228f2:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80228f4:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8022bec <ip4_reass+0x338>
  clen = pbuf_clen(p);
 80228f8:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 80228fa:	b29b      	uxth	r3, r3
 80228fc:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 80228fe:	f7f8 f84f 	bl	801a9a0 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022902:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 8022906:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022908:	4403      	add	r3, r0
 802290a:	2b0a      	cmp	r3, #10
 802290c:	f300 80e5 	bgt.w	8022ada <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022910:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8022bf0 <ip4_reass+0x33c>
 8022914:	f8d9 4000 	ldr.w	r4, [r9]
 8022918:	2c00      	cmp	r4, #0
 802291a:	f000 80ec 	beq.w	8022af6 <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 802291e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8022922:	e003      	b.n	802292c <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022924:	6824      	ldr	r4, [r4, #0]
 8022926:	2c00      	cmp	r4, #0
 8022928:	f000 80e5 	beq.w	8022af6 <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 802292c:	6963      	ldr	r3, [r4, #20]
 802292e:	4293      	cmp	r3, r2
 8022930:	d1f8      	bne.n	8022924 <ip4_reass+0x70>
 8022932:	f8da 3010 	ldr.w	r3, [sl, #16]
 8022936:	69a1      	ldr	r1, [r4, #24]
 8022938:	4299      	cmp	r1, r3
 802293a:	d1f3      	bne.n	8022924 <ip4_reass+0x70>
 802293c:	89a1      	ldrh	r1, [r4, #12]
 802293e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8022942:	4299      	cmp	r1, r3
 8022944:	d1ee      	bne.n	8022924 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022946:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 802294a:	f7f5 fff5 	bl	8018938 <lwip_htons>
 802294e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8022952:	2800      	cmp	r0, #0
 8022954:	f000 80a9 	beq.w	8022aaa <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8022958:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802295c:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 8022960:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022964:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 8022968:	9301      	str	r3, [sp, #4]
 802296a:	d108      	bne.n	802297e <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 802296c:	9b00      	ldr	r3, [sp, #0]
 802296e:	18f3      	adds	r3, r6, r3
 8022970:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8022972:	429e      	cmp	r6, r3
 8022974:	d812      	bhi.n	802299c <ip4_reass+0xe8>
 8022976:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802297a:	4293      	cmp	r3, r2
 802297c:	d80e      	bhi.n	802299c <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 802297e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022982:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8022986:	f7f5 ffd7 	bl	8018938 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 802298a:	f89a 2000 	ldrb.w	r2, [sl]
 802298e:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8022992:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8022996:	ea4f 0382 	mov.w	r3, r2, lsl #2
 802299a:	d229      	bcs.n	80229f0 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 802299c:	6866      	ldr	r6, [r4, #4]
 802299e:	b9fe      	cbnz	r6, 80229e0 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80229a0:	f8d9 3000 	ldr.w	r3, [r9]
 80229a4:	42a3      	cmp	r3, r4
 80229a6:	d014      	beq.n	80229d2 <ip4_reass+0x11e>
 80229a8:	4b8c      	ldr	r3, [pc, #560]	; (8022bdc <ip4_reass+0x328>)
 80229aa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80229ae:	498c      	ldr	r1, [pc, #560]	; (8022be0 <ip4_reass+0x32c>)
 80229b0:	488c      	ldr	r0, [pc, #560]	; (8022be4 <ip4_reass+0x330>)
 80229b2:	f002 f89b 	bl	8024aec <iprintf>
  if (reassdatagrams == ipr) {
 80229b6:	f8d9 3000 	ldr.w	r3, [r9]
 80229ba:	429c      	cmp	r4, r3
 80229bc:	d009      	beq.n	80229d2 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80229be:	4b87      	ldr	r3, [pc, #540]	; (8022bdc <ip4_reass+0x328>)
 80229c0:	f240 1245 	movw	r2, #325	; 0x145
 80229c4:	4988      	ldr	r1, [pc, #544]	; (8022be8 <ip4_reass+0x334>)
 80229c6:	4887      	ldr	r0, [pc, #540]	; (8022be4 <ip4_reass+0x330>)
 80229c8:	f002 f890 	bl	8024aec <iprintf>
    prev->next = ipr->next;
 80229cc:	6823      	ldr	r3, [r4, #0]
 80229ce:	6033      	str	r3, [r6, #0]
 80229d0:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 80229d2:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80229d4:	4621      	mov	r1, r4
 80229d6:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 80229d8:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 80229dc:	f7f7 fad0 	bl	8019f80 <memp_free>
  pbuf_free(p);
 80229e0:	4628      	mov	r0, r5
  return NULL;
 80229e2:	2600      	movs	r6, #0
  pbuf_free(p);
 80229e4:	f7f7 ffc8 	bl	801a978 <pbuf_free>
}
 80229e8:	4630      	mov	r0, r6
 80229ea:	b005      	add	sp, #20
 80229ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 80229f0:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80229f2:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 80229f6:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80229fa:	f7f5 ff9d 	bl	8018938 <lwip_htons>
 80229fe:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8022a02:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022a06:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8022a08:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 8022a0c:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8022a10:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 8022a14:	f8ab 3006 	strh.w	r3, [fp, #6]
 8022a18:	b29b      	uxth	r3, r3
 8022a1a:	4619      	mov	r1, r3
 8022a1c:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8022a1e:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8022a20:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8022a22:	f88b 3000 	strb.w	r3, [fp]
 8022a26:	f88b 3001 	strb.w	r3, [fp, #1]
 8022a2a:	f88b 3002 	strb.w	r3, [fp, #2]
 8022a2e:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 8022a32:	d8b3      	bhi.n	802299c <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8022a34:	6861      	ldr	r1, [r4, #4]
 8022a36:	2900      	cmp	r1, #0
 8022a38:	f000 80c4 	beq.w	8022bc4 <ip4_reass+0x310>
  int valid = 1;
 8022a3c:	f04f 0a01 	mov.w	sl, #1
 8022a40:	4694      	mov	ip, r2
 8022a42:	e00e      	b.n	8022a62 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 8022a44:	d0cc      	beq.n	80229e0 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 8022a46:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8022a4a:	45f4      	cmp	ip, lr
 8022a4c:	d3c8      	bcc.n	80229e0 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 8022a4e:	b122      	cbz	r2, 8022a5a <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 8022a50:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8022a52:	4282      	cmp	r2, r0
 8022a54:	bf18      	it	ne
 8022a56:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8022a5a:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8022a5c:	2900      	cmp	r1, #0
 8022a5e:	f000 808a 	beq.w	8022b76 <ip4_reass+0x2c2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8022a62:	461a      	mov	r2, r3
 8022a64:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8022a66:	8898      	ldrh	r0, [r3, #4]
 8022a68:	4584      	cmp	ip, r0
 8022a6a:	d2eb      	bcs.n	8022a44 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 8022a6c:	4613      	mov	r3, r2
 8022a6e:	f8cb 1000 	str.w	r1, [fp]
 8022a72:	4662      	mov	r2, ip
 8022a74:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 8022a76:	2b00      	cmp	r3, #0
 8022a78:	d066      	beq.n	8022b48 <ip4_reass+0x294>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8022a7a:	88db      	ldrh	r3, [r3, #6]
 8022a7c:	429a      	cmp	r2, r3
 8022a7e:	d3af      	bcc.n	80229e0 <ip4_reass+0x12c>
 8022a80:	9903      	ldr	r1, [sp, #12]
 8022a82:	4281      	cmp	r1, r0
 8022a84:	d8ac      	bhi.n	80229e0 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 8022a86:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 8022a88:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8022a8c:	d061      	beq.n	8022b52 <ip4_reass+0x29e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022a8e:	9b01      	ldr	r3, [sp, #4]
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	f000 808a 	beq.w	8022baa <ip4_reass+0x2f6>
 8022a96:	7fa3      	ldrb	r3, [r4, #30]
 8022a98:	07db      	lsls	r3, r3, #31
 8022a9a:	d462      	bmi.n	8022b62 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022a9c:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 8022aa0:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022aa2:	441f      	add	r7, r3
 8022aa4:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8022aa8:	e79e      	b.n	80229e8 <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8022aaa:	89e0      	ldrh	r0, [r4, #14]
 8022aac:	f7f5 ff44 	bl	8018938 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022ab0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8022ab4:	2800      	cmp	r0, #0
 8022ab6:	f43f af4f 	beq.w	8022958 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8022aba:	f8da 3000 	ldr.w	r3, [sl]
 8022abe:	f8da 0004 	ldr.w	r0, [sl, #4]
 8022ac2:	f8da 1008 	ldr.w	r1, [sl, #8]
 8022ac6:	f8da 200c 	ldr.w	r2, [sl, #12]
 8022aca:	60a3      	str	r3, [r4, #8]
 8022acc:	60e0      	str	r0, [r4, #12]
 8022ace:	6121      	str	r1, [r4, #16]
 8022ad0:	6162      	str	r2, [r4, #20]
 8022ad2:	f8da 3010 	ldr.w	r3, [sl, #16]
 8022ad6:	61a3      	str	r3, [r4, #24]
 8022ad8:	e73e      	b.n	8022958 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022ada:	4601      	mov	r1, r0
 8022adc:	4650      	mov	r0, sl
 8022ade:	f7ff fe97 	bl	8022810 <ip_reass_remove_oldest_datagram>
 8022ae2:	2800      	cmp	r0, #0
 8022ae4:	f43f af7c 	beq.w	80229e0 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8022ae8:	f8b8 3000 	ldrh.w	r3, [r8]
 8022aec:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022aee:	2b0a      	cmp	r3, #10
 8022af0:	f77f af0e 	ble.w	8022910 <ip4_reass+0x5c>
 8022af4:	e774      	b.n	80229e0 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022af6:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8022afa:	4938      	ldr	r1, [pc, #224]	; (8022bdc <ip4_reass+0x328>)
 8022afc:	2005      	movs	r0, #5
 8022afe:	f7f7 fa09 	bl	8019f14 <memp_malloc_fn>
  if (ipr == NULL) {
 8022b02:	4604      	mov	r4, r0
 8022b04:	b178      	cbz	r0, 8022b26 <ip4_reass+0x272>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8022b06:	2300      	movs	r3, #0
 8022b08:	61e3      	str	r3, [r4, #28]
 8022b0a:	60a3      	str	r3, [r4, #8]
 8022b0c:	60e3      	str	r3, [r4, #12]
 8022b0e:	6123      	str	r3, [r4, #16]
 8022b10:	6163      	str	r3, [r4, #20]
 8022b12:	61a3      	str	r3, [r4, #24]
 8022b14:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 8022b16:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 8022b1a:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8022b1e:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8022b20:	230f      	movs	r3, #15
 8022b22:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8022b24:	e7c9      	b.n	8022aba <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8022b26:	4639      	mov	r1, r7
 8022b28:	4650      	mov	r0, sl
 8022b2a:	f7ff fe71 	bl	8022810 <ip_reass_remove_oldest_datagram>
 8022b2e:	4287      	cmp	r7, r0
 8022b30:	f73f af56 	bgt.w	80229e0 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022b34:	f44f 7291 	mov.w	r2, #290	; 0x122
 8022b38:	4928      	ldr	r1, [pc, #160]	; (8022bdc <ip4_reass+0x328>)
 8022b3a:	2005      	movs	r0, #5
 8022b3c:	f7f7 f9ea 	bl	8019f14 <memp_malloc_fn>
    if (ipr == NULL)
 8022b40:	4604      	mov	r4, r0
 8022b42:	2800      	cmp	r0, #0
 8022b44:	d1df      	bne.n	8022b06 <ip4_reass+0x252>
 8022b46:	e74b      	b.n	80229e0 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 8022b48:	9b03      	ldr	r3, [sp, #12]
 8022b4a:	4283      	cmp	r3, r0
 8022b4c:	f63f af48 	bhi.w	80229e0 <ip4_reass+0x12c>
        ipr->p = new_p;
 8022b50:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022b52:	9b01      	ldr	r3, [sp, #4]
 8022b54:	b19b      	cbz	r3, 8022b7e <ip4_reass+0x2ca>
 8022b56:	7fa3      	ldrb	r3, [r4, #30]
 8022b58:	07d9      	lsls	r1, r3, #31
 8022b5a:	d59f      	bpl.n	8022a9c <ip4_reass+0x1e8>
    if (valid) {
 8022b5c:	f1ba 0f00 	cmp.w	sl, #0
 8022b60:	d138      	bne.n	8022bd4 <ip4_reass+0x320>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022b62:	f8b8 3000 	ldrh.w	r3, [r8]
 8022b66:	441f      	add	r7, r3
 8022b68:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 8022b6c:	2600      	movs	r6, #0
}
 8022b6e:	4630      	mov	r0, r6
 8022b70:	b005      	add	sp, #20
 8022b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 8022b76:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 8022b78:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8022b7a:	d188      	bne.n	8022a8e <ip4_reass+0x1da>
 8022b7c:	e7e9      	b.n	8022b52 <ip4_reass+0x29e>
    if (valid) {
 8022b7e:	f1ba 0f00 	cmp.w	sl, #0
 8022b82:	d012      	beq.n	8022baa <ip4_reass+0x2f6>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022b84:	6863      	ldr	r3, [r4, #4]
 8022b86:	b183      	cbz	r3, 8022baa <ip4_reass+0x2f6>
 8022b88:	6859      	ldr	r1, [r3, #4]
 8022b8a:	888b      	ldrh	r3, [r1, #4]
 8022b8c:	2b00      	cmp	r3, #0
 8022b8e:	d031      	beq.n	8022bf4 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022b90:	f8b8 3000 	ldrh.w	r3, [r8]
 8022b94:	441f      	add	r7, r3
  if (is_last) {
 8022b96:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022b98:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8022b9c:	2b00      	cmp	r3, #0
 8022b9e:	d1e5      	bne.n	8022b6c <ip4_reass+0x2b8>
 8022ba0:	e008      	b.n	8022bb4 <ip4_reass+0x300>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022ba2:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8022ba6:	4659      	mov	r1, fp
 8022ba8:	b323      	cbz	r3, 8022bf4 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022baa:	f8b8 3000 	ldrh.w	r3, [r8]
 8022bae:	441f      	add	r7, r3
 8022bb0:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022bb4:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8022bb6:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022bb8:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8022bbc:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022bbe:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8022bc0:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8022bc2:	e7d3      	b.n	8022b6c <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022bc4:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 8022bc6:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022bc8:	2b00      	cmp	r3, #0
 8022bca:	d0ea      	beq.n	8022ba2 <ip4_reass+0x2ee>
 8022bcc:	7fa3      	ldrb	r3, [r4, #30]
 8022bce:	07da      	lsls	r2, r3, #31
 8022bd0:	f57f af64 	bpl.w	8022a9c <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022bd4:	6863      	ldr	r3, [r4, #4]
 8022bd6:	2b00      	cmp	r3, #0
 8022bd8:	d0c3      	beq.n	8022b62 <ip4_reass+0x2ae>
 8022bda:	e7d5      	b.n	8022b88 <ip4_reass+0x2d4>
 8022bdc:	08044cc0 	.word	0x08044cc0
 8022be0:	08044dd8 	.word	0x08044dd8
 8022be4:	0802b818 	.word	0x0802b818
 8022be8:	08044d48 	.word	0x08044d48
 8022bec:	2002df5c 	.word	0x2002df5c
 8022bf0:	2002df60 	.word	0x2002df60
        q = iprh->next_pbuf;
 8022bf4:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 8022bf8:	b153      	cbz	r3, 8022c10 <ip4_reass+0x35c>
 8022bfa:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 8022bfc:	4610      	mov	r0, r2
 8022bfe:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8022c00:	88c0      	ldrh	r0, [r0, #6]
 8022c02:	8893      	ldrh	r3, [r2, #4]
 8022c04:	4298      	cmp	r0, r3
 8022c06:	d1c3      	bne.n	8022b90 <ip4_reass+0x2dc>
          q = iprh->next_pbuf;
 8022c08:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 8022c0a:	2b00      	cmp	r3, #0
 8022c0c:	d1f6      	bne.n	8022bfc <ip4_reass+0x348>
 8022c0e:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 8022c10:	9b02      	ldr	r3, [sp, #8]
 8022c12:	428b      	cmp	r3, r1
 8022c14:	d110      	bne.n	8022c38 <ip4_reass+0x384>
 8022c16:	4b40      	ldr	r3, [pc, #256]	; (8022d18 <ip4_reass+0x464>)
 8022c18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8022c1c:	493f      	ldr	r1, [pc, #252]	; (8022d1c <ip4_reass+0x468>)
 8022c1e:	4840      	ldr	r0, [pc, #256]	; (8022d20 <ip4_reass+0x46c>)
 8022c20:	f001 ff64 	bl	8024aec <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8022c24:	9b02      	ldr	r3, [sp, #8]
 8022c26:	681b      	ldr	r3, [r3, #0]
 8022c28:	b133      	cbz	r3, 8022c38 <ip4_reass+0x384>
 8022c2a:	4b3b      	ldr	r3, [pc, #236]	; (8022d18 <ip4_reass+0x464>)
 8022c2c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8022c30:	493c      	ldr	r1, [pc, #240]	; (8022d24 <ip4_reass+0x470>)
 8022c32:	483b      	ldr	r0, [pc, #236]	; (8022d20 <ip4_reass+0x46c>)
 8022c34:	f001 ff5a 	bl	8024aec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022c38:	f8b8 3000 	ldrh.w	r3, [r8]
 8022c3c:	441f      	add	r7, r3
  if (is_last) {
 8022c3e:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022c40:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8022c44:	2b00      	cmp	r3, #0
 8022c46:	d15b      	bne.n	8022d00 <ip4_reass+0x44c>
    u16_t datagram_len = (u16_t)(offset + len);
 8022c48:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022c4a:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8022c4c:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022c4e:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8022c52:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022c54:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8022c56:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022c58:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8022c5a:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022c5c:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022c5e:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022c60:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022c62:	68a3      	ldr	r3, [r4, #8]
 8022c64:	6921      	ldr	r1, [r4, #16]
 8022c66:	6962      	ldr	r2, [r4, #20]
 8022c68:	6075      	str	r5, [r6, #4]
 8022c6a:	60b1      	str	r1, [r6, #8]
 8022c6c:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022c6e:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022c70:	6033      	str	r3, [r6, #0]
 8022c72:	69a3      	ldr	r3, [r4, #24]
 8022c74:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022c76:	f7f5 fe5f 	bl	8018938 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8022c7a:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022c7c:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8022c7e:	2114      	movs	r1, #20
 8022c80:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 8022c82:	71b3      	strb	r3, [r6, #6]
 8022c84:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8022c86:	72b3      	strb	r3, [r6, #10]
 8022c88:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8022c8a:	f7f6 fbfd 	bl	8019488 <inet_chksum>
 8022c8e:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 8022c90:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8022c92:	b15d      	cbz	r5, 8022cac <ip4_reass+0x3f8>
      iprh = (struct ip_reass_helper *)r->payload;
 8022c94:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8022c96:	4628      	mov	r0, r5
 8022c98:	2114      	movs	r1, #20
 8022c9a:	f7f7 fdfd 	bl	801a898 <pbuf_remove_header>
      pbuf_cat(p, r);
 8022c9e:	4629      	mov	r1, r5
 8022ca0:	4630      	mov	r0, r6
 8022ca2:	f7f7 fe9b 	bl	801a9dc <pbuf_cat>
      r = iprh->next_pbuf;
 8022ca6:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 8022ca8:	2d00      	cmp	r5, #0
 8022caa:	d1f3      	bne.n	8022c94 <ip4_reass+0x3e0>
    if (ipr == reassdatagrams) {
 8022cac:	f8d9 5000 	ldr.w	r5, [r9]
 8022cb0:	42a5      	cmp	r5, r4
 8022cb2:	d005      	beq.n	8022cc0 <ip4_reass+0x40c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8022cb4:	b335      	cbz	r5, 8022d04 <ip4_reass+0x450>
        if (ipr_prev->next == ipr) {
 8022cb6:	682b      	ldr	r3, [r5, #0]
 8022cb8:	42a3      	cmp	r3, r4
 8022cba:	d014      	beq.n	8022ce6 <ip4_reass+0x432>
 8022cbc:	461d      	mov	r5, r3
 8022cbe:	e7f9      	b.n	8022cb4 <ip4_reass+0x400>
    reassdatagrams = ipr->next;
 8022cc0:	6823      	ldr	r3, [r4, #0]
 8022cc2:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8022cc6:	4621      	mov	r1, r4
 8022cc8:	2005      	movs	r0, #5
 8022cca:	f7f7 f959 	bl	8019f80 <memp_free>
    clen = pbuf_clen(p);
 8022cce:	4630      	mov	r0, r6
 8022cd0:	f7f7 fe66 	bl	801a9a0 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8022cd4:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 8022cd8:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8022cda:	4283      	cmp	r3, r0
 8022cdc:	d306      	bcc.n	8022cec <ip4_reass+0x438>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8022cde:	1b1b      	subs	r3, r3, r4
 8022ce0:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8022ce4:	e680      	b.n	80229e8 <ip4_reass+0x134>
    prev->next = ipr->next;
 8022ce6:	6823      	ldr	r3, [r4, #0]
 8022ce8:	602b      	str	r3, [r5, #0]
 8022cea:	e7ec      	b.n	8022cc6 <ip4_reass+0x412>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8022cec:	4b0a      	ldr	r3, [pc, #40]	; (8022d18 <ip4_reass+0x464>)
 8022cee:	f240 229b 	movw	r2, #667	; 0x29b
 8022cf2:	490d      	ldr	r1, [pc, #52]	; (8022d28 <ip4_reass+0x474>)
 8022cf4:	480a      	ldr	r0, [pc, #40]	; (8022d20 <ip4_reass+0x46c>)
 8022cf6:	f001 fef9 	bl	8024aec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8022cfa:	f8b8 3000 	ldrh.w	r3, [r8]
 8022cfe:	e7ee      	b.n	8022cde <ip4_reass+0x42a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8022d00:	8ba0      	ldrh	r0, [r4, #28]
 8022d02:	e7a9      	b.n	8022c58 <ip4_reass+0x3a4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022d04:	4b04      	ldr	r3, [pc, #16]	; (8022d18 <ip4_reass+0x464>)
 8022d06:	f240 1245 	movw	r2, #325	; 0x145
 8022d0a:	4908      	ldr	r1, [pc, #32]	; (8022d2c <ip4_reass+0x478>)
 8022d0c:	4804      	ldr	r0, [pc, #16]	; (8022d20 <ip4_reass+0x46c>)
 8022d0e:	f001 feed 	bl	8024aec <iprintf>
    prev->next = ipr->next;
 8022d12:	6823      	ldr	r3, [r4, #0]
 8022d14:	602b      	str	r3, [r5, #0]
 8022d16:	deff      	udf	#255	; 0xff
 8022d18:	08044cc0 	.word	0x08044cc0
 8022d1c:	08044d88 	.word	0x08044d88
 8022d20:	0802b818 	.word	0x0802b818
 8022d24:	08044d98 	.word	0x08044d98
 8022d28:	08044dbc 	.word	0x08044dbc
 8022d2c:	08044d48 	.word	0x08044d48

08022d30 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8022d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022d34:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 8022d36:	b08f      	sub	sp, #60	; 0x3c
 8022d38:	4605      	mov	r5, r0
 8022d3a:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022d3c:	f1b3 0214 	subs.w	r2, r3, #20
{
 8022d40:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022d42:	bf48      	it	mi
 8022d44:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8022d48:	6843      	ldr	r3, [r0, #4]
 8022d4a:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022d4c:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8022d50:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022d52:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8022d54:	f003 030f 	and.w	r3, r3, #15
 8022d58:	2b05      	cmp	r3, #5
 8022d5a:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8022d5e:	f040 80ea 	bne.w	8022f36 <ip4_frag+0x206>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8022d62:	8943      	ldrh	r3, [r0, #10]
 8022d64:	2b13      	cmp	r3, #19
 8022d66:	f240 80e9 	bls.w	8022f3c <ip4_frag+0x20c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8022d6a:	9b04      	ldr	r3, [sp, #16]
 8022d6c:	88d8      	ldrh	r0, [r3, #6]
 8022d6e:	f7f5 fde3 	bl	8018938 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8022d72:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8022d74:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 8022d78:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 8022d7a:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 8022d7c:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8022d80:	b29b      	uxth	r3, r3
 8022d82:	920d      	str	r2, [sp, #52]	; 0x34
 8022d84:	9305      	str	r3, [sp, #20]

  while (left) {
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	f000 809d 	beq.w	8022ec6 <ip4_frag+0x196>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8022d8c:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 8022d8e:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8022d90:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8022f5c <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8022d94:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8022d96:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8022f64 <ip4_frag+0x234>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8022d9a:	b29b      	uxth	r3, r3
 8022d9c:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8022d9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022da2:	2114      	movs	r1, #20
 8022da4:	200e      	movs	r0, #14
 8022da6:	f7f7 fc31 	bl	801a60c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8022daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022dac:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 8022dae:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8022db0:	4293      	cmp	r3, r2
 8022db2:	bf28      	it	cs
 8022db4:	4613      	movcs	r3, r2
 8022db6:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 8022db8:	2800      	cmp	r0, #0
 8022dba:	f000 80b9 	beq.w	8022f30 <ip4_frag+0x200>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8022dbe:	8943      	ldrh	r3, [r0, #10]
 8022dc0:	2b13      	cmp	r3, #19
 8022dc2:	f240 8091 	bls.w	8022ee8 <ip4_frag+0x1b8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8022dc6:	9904      	ldr	r1, [sp, #16]
 8022dc8:	9b03      	ldr	r3, [sp, #12]
 8022dca:	680a      	ldr	r2, [r1, #0]
 8022dcc:	685b      	ldr	r3, [r3, #4]
 8022dce:	684f      	ldr	r7, [r1, #4]
 8022dd0:	6888      	ldr	r0, [r1, #8]
 8022dd2:	68c9      	ldr	r1, [r1, #12]
 8022dd4:	605f      	str	r7, [r3, #4]
 8022dd6:	60d9      	str	r1, [r3, #12]
 8022dd8:	9904      	ldr	r1, [sp, #16]
 8022dda:	601a      	str	r2, [r3, #0]
 8022ddc:	6098      	str	r0, [r3, #8]
 8022dde:	690a      	ldr	r2, [r1, #16]
 8022de0:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8022de2:	9b03      	ldr	r3, [sp, #12]
 8022de4:	685b      	ldr	r3, [r3, #4]
 8022de6:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 8022de8:	9b06      	ldr	r3, [sp, #24]
 8022dea:	2b00      	cmp	r3, #0
 8022dec:	d034      	beq.n	8022e58 <ip4_frag+0x128>
 8022dee:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8022df0:	896b      	ldrh	r3, [r5, #10]
 8022df2:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022df4:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8022df6:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022df8:	d36e      	bcc.n	8022ed8 <ip4_frag+0x1a8>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8022dfa:	454c      	cmp	r4, r9
 8022dfc:	bf28      	it	cs
 8022dfe:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8022e00:	2c00      	cmp	r4, #0
 8022e02:	d062      	beq.n	8022eca <ip4_frag+0x19a>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8022e04:	4641      	mov	r1, r8
 8022e06:	f240 22bd 	movw	r2, #701	; 0x2bd
 8022e0a:	2006      	movs	r0, #6
 8022e0c:	f7f7 f882 	bl	8019f14 <memp_malloc_fn>
 8022e10:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022e12:	2241      	movs	r2, #65	; 0x41
 8022e14:	4621      	mov	r1, r4
 8022e16:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8022e18:	f1bb 0f00 	cmp.w	fp, #0
 8022e1c:	d06f      	beq.n	8022efe <ip4_frag+0x1ce>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022e1e:	9401      	str	r4, [sp, #4]
 8022e20:	465b      	mov	r3, fp
 8022e22:	686f      	ldr	r7, [r5, #4]
 8022e24:	4437      	add	r7, r6
 8022e26:	9700      	str	r7, [sp, #0]
 8022e28:	f7f7 fc8e 	bl	801a748 <pbuf_alloced_custom>
 8022e2c:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8022e2e:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 8022e30:	2f00      	cmp	r7, #0
 8022e32:	d06e      	beq.n	8022f12 <ip4_frag+0x1e2>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8022e34:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 8022e38:	f7f7 fdbc 	bl	801a9b4 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022e3c:	4a44      	ldr	r2, [pc, #272]	; (8022f50 <ip4_frag+0x220>)
      pbuf_cat(rambuf, newpbuf);
 8022e3e:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8022e40:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8022e44:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 8022e46:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022e4a:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 8022e4e:	f7f7 fdc5 	bl	801a9dc <pbuf_cat>
      if (left_to_copy) {
 8022e52:	f1b9 0f00 	cmp.w	r9, #0
 8022e56:	d138      	bne.n	8022eca <ip4_frag+0x19a>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8022e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 8022e5a:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8022e5c:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 8022e5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 8022e60:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8022e62:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8022e66:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 8022e68:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8022e6a:	4293      	cmp	r3, r2
 8022e6c:	dd44      	ble.n	8022ef8 <ip4_frag+0x1c8>
 8022e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	d141      	bne.n	8022ef8 <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8022e74:	f7f5 fd60 	bl	8018938 <lwip_htons>
 8022e78:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8022e7a:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8022e7c:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8022e7e:	f103 0014 	add.w	r0, r3, #20
 8022e82:	b280      	uxth	r0, r0
 8022e84:	f7f5 fd58 	bl	8018938 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8022e88:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8022e8a:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8022e8c:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 8022e8e:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8022e90:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 8022e92:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8022e94:	f7f6 faf8 	bl	8019488 <inet_chksum>
 8022e98:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8022e9a:	9f03      	ldr	r7, [sp, #12]
 8022e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022ea0:	4639      	mov	r1, r7
 8022ea2:	6943      	ldr	r3, [r0, #20]
 8022ea4:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8022ea6:	4638      	mov	r0, r7
 8022ea8:	f7f7 fd66 	bl	801a978 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8022eac:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8022eb0:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8022eb2:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 8022eb6:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 8022eb8:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 8022eba:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8022ebc:	b292      	uxth	r2, r2
 8022ebe:	9207      	str	r2, [sp, #28]
  while (left) {
 8022ec0:	2b00      	cmp	r3, #0
 8022ec2:	f47f af6c 	bne.w	8022d9e <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8022ec6:	2000      	movs	r0, #0
 8022ec8:	e020      	b.n	8022f0c <ip4_frag+0x1dc>
        p = p->next;
 8022eca:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 8022ecc:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 8022ece:	896b      	ldrh	r3, [r5, #10]
 8022ed0:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022ed2:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8022ed4:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022ed6:	d290      	bcs.n	8022dfa <ip4_frag+0xca>
 8022ed8:	4643      	mov	r3, r8
 8022eda:	f240 322d 	movw	r2, #813	; 0x32d
 8022ede:	491d      	ldr	r1, [pc, #116]	; (8022f54 <ip4_frag+0x224>)
 8022ee0:	4650      	mov	r0, sl
 8022ee2:	f001 fe03 	bl	8024aec <iprintf>
 8022ee6:	e788      	b.n	8022dfa <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8022ee8:	4643      	mov	r3, r8
 8022eea:	f44f 7249 	mov.w	r2, #804	; 0x324
 8022eee:	491a      	ldr	r1, [pc, #104]	; (8022f58 <ip4_frag+0x228>)
 8022ef0:	4650      	mov	r0, sl
 8022ef2:	f001 fdfb 	bl	8024aec <iprintf>
 8022ef6:	e766      	b.n	8022dc6 <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 8022ef8:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8022efc:	e7ba      	b.n	8022e74 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8022efe:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022f02:	4658      	mov	r0, fp
 8022f04:	f7f7 fd38 	bl	801a978 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8022f08:	f04f 30ff 	mov.w	r0, #4294967295
}
 8022f0c:	b00f      	add	sp, #60	; 0x3c
 8022f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 8022f12:	46d9      	mov	r9, fp
 8022f14:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022f18:	2006      	movs	r0, #6
 8022f1a:	4649      	mov	r1, r9
 8022f1c:	f7f7 f830 	bl	8019f80 <memp_free>
        pbuf_free(rambuf);
 8022f20:	4658      	mov	r0, fp
 8022f22:	f7f7 fd29 	bl	801a978 <pbuf_free>
  return ERR_MEM;
 8022f26:	f04f 30ff 	mov.w	r0, #4294967295
}
 8022f2a:	b00f      	add	sp, #60	; 0x3c
 8022f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8022f30:	f04f 30ff 	mov.w	r0, #4294967295
 8022f34:	e7ea      	b.n	8022f0c <ip4_frag+0x1dc>
    return ERR_VAL;
 8022f36:	f06f 0005 	mvn.w	r0, #5
 8022f3a:	e7e7      	b.n	8022f0c <ip4_frag+0x1dc>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8022f3c:	4b07      	ldr	r3, [pc, #28]	; (8022f5c <ip4_frag+0x22c>)
 8022f3e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8022f42:	4907      	ldr	r1, [pc, #28]	; (8022f60 <ip4_frag+0x230>)
 8022f44:	4807      	ldr	r0, [pc, #28]	; (8022f64 <ip4_frag+0x234>)
 8022f46:	f001 fdd1 	bl	8024aec <iprintf>
 8022f4a:	f06f 0005 	mvn.w	r0, #5
 8022f4e:	e7dd      	b.n	8022f0c <ip4_frag+0x1dc>
 8022f50:	0802269d 	.word	0x0802269d
 8022f54:	08044e34 	.word	0x08044e34
 8022f58:	08044e14 	.word	0x08044e14
 8022f5c:	08044cc0 	.word	0x08044cc0
 8022f60:	08044df8 	.word	0x08044df8
 8022f64:	0802b818 	.word	0x0802b818

08022f68 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8022f68:	8943      	ldrh	r3, [r0, #10]
 8022f6a:	2b0e      	cmp	r3, #14
{
 8022f6c:	b570      	push	{r4, r5, r6, lr}
 8022f6e:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8022f70:	d91b      	bls.n	8022faa <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8022f72:	7bc3      	ldrb	r3, [r0, #15]
 8022f74:	460d      	mov	r5, r1
 8022f76:	b91b      	cbnz	r3, 8022f80 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8022f78:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8022f7c:	3301      	adds	r3, #1
 8022f7e:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8022f80:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8022f82:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8022f84:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8022f86:	07d9      	lsls	r1, r3, #31
 8022f88:	d50a      	bpl.n	8022fa0 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8022f8a:	2b01      	cmp	r3, #1
 8022f8c:	d030      	beq.n	8022ff0 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8022f8e:	2206      	movs	r2, #6
 8022f90:	491d      	ldr	r1, [pc, #116]	; (8023008 <ethernet_input+0xa0>)
 8022f92:	f000 fdd7 	bl	8023b44 <memcmp>
 8022f96:	b918      	cbnz	r0, 8022fa0 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022f98:	7b63      	ldrb	r3, [r4, #13]
 8022f9a:	f043 0308 	orr.w	r3, r3, #8
 8022f9e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8022fa0:	2e08      	cmp	r6, #8
 8022fa2:	d016      	beq.n	8022fd2 <ethernet_input+0x6a>
 8022fa4:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8022fa8:	d004      	beq.n	8022fb4 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8022faa:	4620      	mov	r0, r4
 8022fac:	f7f7 fce4 	bl	801a978 <pbuf_free>
  return ERR_OK;
}
 8022fb0:	2000      	movs	r0, #0
 8022fb2:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022fb4:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8022fb8:	071b      	lsls	r3, r3, #28
 8022fba:	d5f6      	bpl.n	8022faa <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022fbc:	210e      	movs	r1, #14
 8022fbe:	4620      	mov	r0, r4
 8022fc0:	f7f7 fc6a 	bl	801a898 <pbuf_remove_header>
 8022fc4:	2800      	cmp	r0, #0
 8022fc6:	d1f0      	bne.n	8022faa <ethernet_input+0x42>
        etharp_input(p, netif);
 8022fc8:	4629      	mov	r1, r5
 8022fca:	4620      	mov	r0, r4
 8022fcc:	f7fe fd2e 	bl	8021a2c <etharp_input>
      break;
 8022fd0:	e7ee      	b.n	8022fb0 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022fd2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8022fd6:	071a      	lsls	r2, r3, #28
 8022fd8:	d5e7      	bpl.n	8022faa <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022fda:	210e      	movs	r1, #14
 8022fdc:	4620      	mov	r0, r4
 8022fde:	f7f7 fc5b 	bl	801a898 <pbuf_remove_header>
 8022fe2:	2800      	cmp	r0, #0
 8022fe4:	d1e1      	bne.n	8022faa <ethernet_input+0x42>
        ip4_input(p, netif);
 8022fe6:	4629      	mov	r1, r5
 8022fe8:	4620      	mov	r0, r4
 8022fea:	f7ff f8eb 	bl	80221c4 <ip4_input>
      break;
 8022fee:	e7df      	b.n	8022fb0 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022ff0:	7843      	ldrb	r3, [r0, #1]
 8022ff2:	2b00      	cmp	r3, #0
 8022ff4:	d1d4      	bne.n	8022fa0 <ethernet_input+0x38>
 8022ff6:	7883      	ldrb	r3, [r0, #2]
 8022ff8:	2b5e      	cmp	r3, #94	; 0x5e
 8022ffa:	d1d1      	bne.n	8022fa0 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8022ffc:	7b63      	ldrb	r3, [r4, #13]
 8022ffe:	f043 0310 	orr.w	r3, r3, #16
 8023002:	7363      	strb	r3, [r4, #13]
 8023004:	e7cc      	b.n	8022fa0 <ethernet_input+0x38>
 8023006:	bf00      	nop
 8023008:	08044eb0 	.word	0x08044eb0

0802300c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 802300c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023010:	460c      	mov	r4, r1
 8023012:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8023014:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8023018:	4616      	mov	r6, r2
 802301a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 802301c:	f7f5 fc8c 	bl	8018938 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8023020:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8023022:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8023024:	4620      	mov	r0, r4
 8023026:	f7f7 fc03 	bl	801a830 <pbuf_add_header>
 802302a:	b9e0      	cbnz	r0, 8023066 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 802302c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 802302e:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8023032:	683b      	ldr	r3, [r7, #0]
 8023034:	600b      	str	r3, [r1, #0]
 8023036:	88bb      	ldrh	r3, [r7, #4]
 8023038:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 802303a:	6833      	ldr	r3, [r6, #0]
 802303c:	f8c1 3006 	str.w	r3, [r1, #6]
 8023040:	88b3      	ldrh	r3, [r6, #4]
 8023042:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8023044:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8023048:	2b06      	cmp	r3, #6
 802304a:	d006      	beq.n	802305a <ethernet_output+0x4e>
 802304c:	4b08      	ldr	r3, [pc, #32]	; (8023070 <ethernet_output+0x64>)
 802304e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8023052:	4908      	ldr	r1, [pc, #32]	; (8023074 <ethernet_output+0x68>)
 8023054:	4808      	ldr	r0, [pc, #32]	; (8023078 <ethernet_output+0x6c>)
 8023056:	f001 fd49 	bl	8024aec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802305a:	69ab      	ldr	r3, [r5, #24]
 802305c:	4621      	mov	r1, r4
 802305e:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8023060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8023064:	4718      	bx	r3
}
 8023066:	f06f 0001 	mvn.w	r0, #1
 802306a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802306e:	bf00      	nop
 8023070:	08044e44 	.word	0x08044e44
 8023074:	08044e7c 	.word	0x08044e7c
 8023078:	0802b818 	.word	0x0802b818

0802307c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 802307c:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 802307e:	2300      	movs	r3, #0
{
 8023080:	b085      	sub	sp, #20
 8023082:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8023084:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023086:	4619      	mov	r1, r3
{
 8023088:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802308a:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 802308c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8023090:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023094:	f7f1 feb6 	bl	8014e04 <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8023098:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802309c:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 802309e:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 80230a0:	4258      	negs	r0, r3
 80230a2:	b005      	add	sp, #20
 80230a4:	bd30      	pop	{r4, r5, pc}
 80230a6:	bf00      	nop

080230a8 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80230a8:	2200      	movs	r2, #0
 80230aa:	6800      	ldr	r0, [r0, #0]
{
 80230ac:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80230ae:	f7f1 febd 	bl	8014e2c <osMessagePut>
 80230b2:	3800      	subs	r0, #0
 80230b4:	bf18      	it	ne
 80230b6:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 80230b8:	4240      	negs	r0, r0
 80230ba:	bd08      	pop	{r3, pc}

080230bc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80230bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230be:	4614      	mov	r4, r2
 80230c0:	b085      	sub	sp, #20
 80230c2:	4605      	mov	r5, r0
 80230c4:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80230c6:	f7f1 fd63 	bl	8014b90 <osKernelSysTick>
 80230ca:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80230cc:	b15c      	cbz	r4, 80230e6 <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80230ce:	4622      	mov	r2, r4
 80230d0:	6829      	ldr	r1, [r5, #0]
 80230d2:	a801      	add	r0, sp, #4
 80230d4:	f7f1 fed6 	bl	8014e84 <osMessageGet>

    if(event.status == osEventMessage)
 80230d8:	9b01      	ldr	r3, [sp, #4]
 80230da:	2b10      	cmp	r3, #16
 80230dc:	d009      	beq.n	80230f2 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80230de:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80230e2:	b005      	add	sp, #20
 80230e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 80230e6:	f04f 32ff 	mov.w	r2, #4294967295
 80230ea:	6829      	ldr	r1, [r5, #0]
 80230ec:	a801      	add	r0, sp, #4
 80230ee:	f7f1 fec9 	bl	8014e84 <osMessageGet>
    *msg = (void *)event.value.v;
 80230f2:	9b02      	ldr	r3, [sp, #8]
 80230f4:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 80230f6:	f7f1 fd4b 	bl	8014b90 <osKernelSysTick>
 80230fa:	1b80      	subs	r0, r0, r6
}
 80230fc:	b005      	add	sp, #20
 80230fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023100 <sys_mbox_valid>:
 8023100:	6800      	ldr	r0, [r0, #0]
 8023102:	3800      	subs	r0, #0
 8023104:	bf18      	it	ne
 8023106:	2001      	movne	r0, #1
 8023108:	4770      	bx	lr
 802310a:	bf00      	nop

0802310c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 802310c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 802310e:	4803      	ldr	r0, [pc, #12]	; (802311c <sys_init+0x10>)
 8023110:	f7f1 fda2 	bl	8014c58 <osMutexCreate>
 8023114:	4b02      	ldr	r3, [pc, #8]	; (8023120 <sys_init+0x14>)
 8023116:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8023118:	bd08      	pop	{r3, pc}
 802311a:	bf00      	nop
 802311c:	08044ec0 	.word	0x08044ec0
 8023120:	2002df64 	.word	0x2002df64

08023124 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8023124:	b510      	push	{r4, lr}
 8023126:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8023128:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 802312a:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 802312c:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 802312e:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8023132:	f7f1 fd91 	bl	8014c58 <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8023136:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 802313a:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 802313c:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 802313e:	4258      	negs	r0, r3
 8023140:	b002      	add	sp, #8
 8023142:	bd10      	pop	{r4, pc}

08023144 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8023144:	f04f 31ff 	mov.w	r1, #4294967295
 8023148:	6800      	ldr	r0, [r0, #0]
 802314a:	f7f1 bd8d 	b.w	8014c68 <osMutexWait>
 802314e:	bf00      	nop

08023150 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8023150:	6800      	ldr	r0, [r0, #0]
 8023152:	f7f1 bdb5 	b.w	8014cc0 <osMutexRelease>
 8023156:	bf00      	nop

08023158 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8023158:	b510      	push	{r4, lr}
 802315a:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802315c:	2400      	movs	r4, #0
 802315e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8023162:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8023164:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8023166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 8023168:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802316a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 802316e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8023172:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 8023176:	f7f1 fd13 	bl	8014ba0 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 802317a:	b008      	add	sp, #32
 802317c:	bd10      	pop	{r4, pc}
 802317e:	bf00      	nop

08023180 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8023180:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8023182:	2200      	movs	r2, #0
 8023184:	4917      	ldr	r1, [pc, #92]	; (80231e4 <MX_USB_DEVICE_Init+0x64>)
 8023186:	4818      	ldr	r0, [pc, #96]	; (80231e8 <MX_USB_DEVICE_Init+0x68>)
 8023188:	f7f1 f874 	bl	8014274 <USBD_Init>
 802318c:	b970      	cbnz	r0, 80231ac <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 802318e:	4917      	ldr	r1, [pc, #92]	; (80231ec <MX_USB_DEVICE_Init+0x6c>)
 8023190:	4815      	ldr	r0, [pc, #84]	; (80231e8 <MX_USB_DEVICE_Init+0x68>)
 8023192:	f7f1 f887 	bl	80142a4 <USBD_RegisterClass>
 8023196:	b988      	cbnz	r0, 80231bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023198:	4915      	ldr	r1, [pc, #84]	; (80231f0 <MX_USB_DEVICE_Init+0x70>)
 802319a:	4813      	ldr	r0, [pc, #76]	; (80231e8 <MX_USB_DEVICE_Init+0x68>)
 802319c:	f7f1 f834 	bl	8014208 <USBD_CDC_RegisterInterface>
 80231a0:	b9a0      	cbnz	r0, 80231cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80231a2:	4811      	ldr	r0, [pc, #68]	; (80231e8 <MX_USB_DEVICE_Init+0x68>)
 80231a4:	f7f1 f894 	bl	80142d0 <USBD_Start>
 80231a8:	b9b8      	cbnz	r0, 80231da <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80231aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80231ac:	f7df ffe4 	bl	8003178 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80231b0:	490e      	ldr	r1, [pc, #56]	; (80231ec <MX_USB_DEVICE_Init+0x6c>)
 80231b2:	480d      	ldr	r0, [pc, #52]	; (80231e8 <MX_USB_DEVICE_Init+0x68>)
 80231b4:	f7f1 f876 	bl	80142a4 <USBD_RegisterClass>
 80231b8:	2800      	cmp	r0, #0
 80231ba:	d0ed      	beq.n	8023198 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80231bc:	f7df ffdc 	bl	8003178 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80231c0:	490b      	ldr	r1, [pc, #44]	; (80231f0 <MX_USB_DEVICE_Init+0x70>)
 80231c2:	4809      	ldr	r0, [pc, #36]	; (80231e8 <MX_USB_DEVICE_Init+0x68>)
 80231c4:	f7f1 f820 	bl	8014208 <USBD_CDC_RegisterInterface>
 80231c8:	2800      	cmp	r0, #0
 80231ca:	d0ea      	beq.n	80231a2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80231cc:	f7df ffd4 	bl	8003178 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80231d0:	4805      	ldr	r0, [pc, #20]	; (80231e8 <MX_USB_DEVICE_Init+0x68>)
 80231d2:	f7f1 f87d 	bl	80142d0 <USBD_Start>
 80231d6:	2800      	cmp	r0, #0
 80231d8:	d0e7      	beq.n	80231aa <MX_USB_DEVICE_Init+0x2a>
}
 80231da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80231de:	f7df bfcb 	b.w	8003178 <Error_Handler>
 80231e2:	bf00      	nop
 80231e4:	20000428 	.word	0x20000428
 80231e8:	2002df68 	.word	0x2002df68
 80231ec:	200002f8 	.word	0x200002f8
 80231f0:	20000414 	.word	0x20000414

080231f4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80231f4:	2000      	movs	r0, #0
 80231f6:	4770      	bx	lr

080231f8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80231f8:	2000      	movs	r0, #0
 80231fa:	4770      	bx	lr

080231fc <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80231fc:	2000      	movs	r0, #0
 80231fe:	4770      	bx	lr

08023200 <CDC_Receive_FS>:
{
 8023200:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023202:	4c05      	ldr	r4, [pc, #20]	; (8023218 <CDC_Receive_FS+0x18>)
{
 8023204:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023206:	4620      	mov	r0, r4
 8023208:	f7f1 f810 	bl	801422c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802320c:	4620      	mov	r0, r4
 802320e:	f7f1 f815 	bl	801423c <USBD_CDC_ReceivePacket>
}
 8023212:	2000      	movs	r0, #0
 8023214:	bd10      	pop	{r4, pc}
 8023216:	bf00      	nop
 8023218:	2002df68 	.word	0x2002df68

0802321c <CDC_Init_FS>:
{
 802321c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 802321e:	4c06      	ldr	r4, [pc, #24]	; (8023238 <CDC_Init_FS+0x1c>)
 8023220:	2200      	movs	r2, #0
 8023222:	4906      	ldr	r1, [pc, #24]	; (802323c <CDC_Init_FS+0x20>)
 8023224:	4620      	mov	r0, r4
 8023226:	f7f0 fff7 	bl	8014218 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 802322a:	4905      	ldr	r1, [pc, #20]	; (8023240 <CDC_Init_FS+0x24>)
 802322c:	4620      	mov	r0, r4
 802322e:	f7f0 fffd 	bl	801422c <USBD_CDC_SetRxBuffer>
}
 8023232:	2000      	movs	r0, #0
 8023234:	bd10      	pop	{r4, pc}
 8023236:	bf00      	nop
 8023238:	2002df68 	.word	0x2002df68
 802323c:	2002ea38 	.word	0x2002ea38
 8023240:	2002e238 	.word	0x2002e238

08023244 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8023244:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8023246:	4801      	ldr	r0, [pc, #4]	; (802324c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8023248:	800b      	strh	r3, [r1, #0]
}
 802324a:	4770      	bx	lr
 802324c:	20000454 	.word	0x20000454

08023250 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8023250:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8023252:	4801      	ldr	r0, [pc, #4]	; (8023258 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8023254:	800b      	strh	r3, [r1, #0]
}
 8023256:	4770      	bx	lr
 8023258:	20000468 	.word	0x20000468

0802325c <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 802325c:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 802325e:	4801      	ldr	r0, [pc, #4]	; (8023264 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8023260:	800b      	strh	r3, [r1, #0]
}
 8023262:	4770      	bx	lr
 8023264:	20000448 	.word	0x20000448

08023268 <USBD_FS_ManufacturerStrDescriptor>:
{
 8023268:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802326a:	4c04      	ldr	r4, [pc, #16]	; (802327c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 802326c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802326e:	4804      	ldr	r0, [pc, #16]	; (8023280 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8023270:	4621      	mov	r1, r4
 8023272:	f7f1 fbf1 	bl	8014a58 <USBD_GetString>
}
 8023276:	4620      	mov	r0, r4
 8023278:	bd10      	pop	{r4, pc}
 802327a:	bf00      	nop
 802327c:	2002f238 	.word	0x2002f238
 8023280:	08044ec8 	.word	0x08044ec8

08023284 <USBD_FS_ProductStrDescriptor>:
{
 8023284:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023286:	4c04      	ldr	r4, [pc, #16]	; (8023298 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8023288:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802328a:	4804      	ldr	r0, [pc, #16]	; (802329c <USBD_FS_ProductStrDescriptor+0x18>)
 802328c:	4621      	mov	r1, r4
 802328e:	f7f1 fbe3 	bl	8014a58 <USBD_GetString>
}
 8023292:	4620      	mov	r0, r4
 8023294:	bd10      	pop	{r4, pc}
 8023296:	bf00      	nop
 8023298:	2002f238 	.word	0x2002f238
 802329c:	08044edc 	.word	0x08044edc

080232a0 <USBD_FS_ConfigStrDescriptor>:
{
 80232a0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80232a2:	4c04      	ldr	r4, [pc, #16]	; (80232b4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80232a4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80232a6:	4804      	ldr	r0, [pc, #16]	; (80232b8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80232a8:	4621      	mov	r1, r4
 80232aa:	f7f1 fbd5 	bl	8014a58 <USBD_GetString>
}
 80232ae:	4620      	mov	r0, r4
 80232b0:	bd10      	pop	{r4, pc}
 80232b2:	bf00      	nop
 80232b4:	2002f238 	.word	0x2002f238
 80232b8:	08044ef4 	.word	0x08044ef4

080232bc <USBD_FS_InterfaceStrDescriptor>:
{
 80232bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80232be:	4c04      	ldr	r4, [pc, #16]	; (80232d0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80232c0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80232c2:	4804      	ldr	r0, [pc, #16]	; (80232d4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80232c4:	4621      	mov	r1, r4
 80232c6:	f7f1 fbc7 	bl	8014a58 <USBD_GetString>
}
 80232ca:	4620      	mov	r0, r4
 80232cc:	bd10      	pop	{r4, pc}
 80232ce:	bf00      	nop
 80232d0:	2002f238 	.word	0x2002f238
 80232d4:	08044f00 	.word	0x08044f00

080232d8 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80232d8:	4b21      	ldr	r3, [pc, #132]	; (8023360 <USBD_FS_SerialStrDescriptor+0x88>)
 80232da:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 80232de:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 80232e2:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 80232e4:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 80232e6:	f04f 041a 	mov.w	r4, #26
 80232ea:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 80232ec:	d101      	bne.n	80232f2 <USBD_FS_SerialStrDescriptor+0x1a>
}
 80232ee:	481d      	ldr	r0, [pc, #116]	; (8023364 <USBD_FS_SerialStrDescriptor+0x8c>)
 80232f0:	bd30      	pop	{r4, r5, pc}
 80232f2:	491c      	ldr	r1, [pc, #112]	; (8023364 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80232f4:	f04f 0e00 	mov.w	lr, #0
 80232f8:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80232fc:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80232fe:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8023300:	0f13      	lsrs	r3, r2, #28
 8023302:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8023306:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 802330a:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 802330e:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023312:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8023316:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 802331a:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 802331e:	bf34      	ite	cc
 8023320:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023324:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 8023328:	f1be 0f10 	cmp.w	lr, #16
 802332c:	d1e8      	bne.n	8023300 <USBD_FS_SerialStrDescriptor+0x28>
 802332e:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 8023330:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 8023332:	0f03      	lsrs	r3, r0, #28
 8023334:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8023338:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 802333c:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 802333e:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023342:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8023346:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 802334a:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 802334e:	bf34      	ite	cc
 8023350:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023354:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 8023356:	2a08      	cmp	r2, #8
 8023358:	d1eb      	bne.n	8023332 <USBD_FS_SerialStrDescriptor+0x5a>
}
 802335a:	4802      	ldr	r0, [pc, #8]	; (8023364 <USBD_FS_SerialStrDescriptor+0x8c>)
 802335c:	bd30      	pop	{r4, r5, pc}
 802335e:	bf00      	nop
 8023360:	1ff0f000 	.word	0x1ff0f000
 8023364:	2000046c 	.word	0x2000046c

08023368 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8023368:	6803      	ldr	r3, [r0, #0]
{
 802336a:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 802336c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8023370:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023372:	f04f 0400 	mov.w	r4, #0
 8023376:	e9cd 4403 	strd	r4, r4, [sp, #12]
 802337a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 802337e:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8023380:	d001      	beq.n	8023386 <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8023382:	b009      	add	sp, #36	; 0x24
 8023384:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023386:	4d1e      	ldr	r5, [pc, #120]	; (8023400 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8023388:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802338c:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802338e:	481d      	ldr	r0, [pc, #116]	; (8023404 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023390:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8023392:	f043 0301 	orr.w	r3, r3, #1
 8023396:	632b      	str	r3, [r5, #48]	; 0x30
 8023398:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802339a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802339e:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80233a2:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80233a4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80233a6:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80233a8:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80233aa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80233ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80233b0:	f7e7 fd96 	bl	800aee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80233b4:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80233b8:	a903      	add	r1, sp, #12
 80233ba:	4812      	ldr	r0, [pc, #72]	; (8023404 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80233bc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80233be:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80233c2:	f7e7 fd8d 	bl	800aee0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80233c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80233c8:	4622      	mov	r2, r4
 80233ca:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80233cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80233d0:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80233d2:	636b      	str	r3, [r5, #52]	; 0x34
 80233d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80233d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80233da:	9301      	str	r3, [sp, #4]
 80233dc:	9b01      	ldr	r3, [sp, #4]
 80233de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80233e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80233e4:	646b      	str	r3, [r5, #68]	; 0x44
 80233e6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80233e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80233ec:	9302      	str	r3, [sp, #8]
 80233ee:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80233f0:	f7e5 f844 	bl	800847c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80233f4:	2043      	movs	r0, #67	; 0x43
 80233f6:	f7e5 f88b 	bl	8008510 <HAL_NVIC_EnableIRQ>
}
 80233fa:	b009      	add	sp, #36	; 0x24
 80233fc:	bd30      	pop	{r4, r5, pc}
 80233fe:	bf00      	nop
 8023400:	40023800 	.word	0x40023800
 8023404:	40020000 	.word	0x40020000

08023408 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8023408:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 802340c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023410:	f7f0 bf70 	b.w	80142f4 <USBD_LL_SetupStage>

08023414 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8023414:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8023418:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802341c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023420:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8023424:	f7f0 bf94 	b.w	8014350 <USBD_LL_DataOutStage>

08023428 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8023428:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 802342c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023430:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023436:	f7f0 bfc1 	b.w	80143bc <USBD_LL_DataInStage>
 802343a:	bf00      	nop

0802343c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802343c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023440:	f7f1 b858 	b.w	80144f4 <USBD_LL_SOF>

08023444 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8023444:	68c1      	ldr	r1, [r0, #12]
{
 8023446:	b510      	push	{r4, lr}
 8023448:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802344a:	b111      	cbz	r1, 8023452 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 802344c:	2902      	cmp	r1, #2
 802344e:	d10a      	bne.n	8023466 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8023450:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8023452:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8023456:	f7f1 f835 	bl	80144c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802345a:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 802345e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023462:	f7f1 b807 	b.w	8014474 <USBD_LL_Reset>
    Error_Handler();
 8023466:	f7df fe87 	bl	8003178 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802346a:	2101      	movs	r1, #1
 802346c:	e7f1      	b.n	8023452 <HAL_PCD_ResetCallback+0xe>
 802346e:	bf00      	nop

08023470 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023470:	b510      	push	{r4, lr}
 8023472:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8023474:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023478:	f7f1 f828 	bl	80144cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802347c:	6822      	ldr	r2, [r4, #0]
 802347e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023482:	f043 0301 	orr.w	r3, r3, #1
 8023486:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802348a:	6a23      	ldr	r3, [r4, #32]
 802348c:	b123      	cbz	r3, 8023498 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802348e:	4a03      	ldr	r2, [pc, #12]	; (802349c <HAL_PCD_SuspendCallback+0x2c>)
 8023490:	6913      	ldr	r3, [r2, #16]
 8023492:	f043 0306 	orr.w	r3, r3, #6
 8023496:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8023498:	bd10      	pop	{r4, pc}
 802349a:	bf00      	nop
 802349c:	e000ed00 	.word	0xe000ed00

080234a0 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80234a0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80234a4:	f7f1 b81c 	b.w	80144e0 <USBD_LL_Resume>

080234a8 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80234a8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80234ac:	f7f1 b832 	b.w	8014514 <USBD_LL_IsoOUTIncomplete>

080234b0 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80234b0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80234b4:	f7f1 b82c 	b.w	8014510 <USBD_LL_IsoINIncomplete>

080234b8 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80234b8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80234bc:	f7f1 b82c 	b.w	8014518 <USBD_LL_DevConnected>

080234c0 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80234c0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80234c4:	f7f1 b82a 	b.w	801451c <USBD_LL_DevDisconnected>

080234c8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80234c8:	7802      	ldrb	r2, [r0, #0]
 80234ca:	b10a      	cbz	r2, 80234d0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80234cc:	2000      	movs	r0, #0
 80234ce:	4770      	bx	lr
{
 80234d0:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80234d2:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 80234d4:	4b14      	ldr	r3, [pc, #80]	; (8023528 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80234d6:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80234d8:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80234dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80234de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 80234e0:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80234e4:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80234e8:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80234ea:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80234ec:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80234ee:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80234f0:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80234f4:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80234f8:	2206      	movs	r2, #6
 80234fa:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80234fc:	f7e8 fe28 	bl	800c150 <HAL_PCD_Init>
 8023500:	b978      	cbnz	r0, 8023522 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8023502:	2180      	movs	r1, #128	; 0x80
 8023504:	4808      	ldr	r0, [pc, #32]	; (8023528 <USBD_LL_Init+0x60>)
 8023506:	f7e9 fb8d 	bl	800cc24 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802350a:	2240      	movs	r2, #64	; 0x40
 802350c:	2100      	movs	r1, #0
 802350e:	4806      	ldr	r0, [pc, #24]	; (8023528 <USBD_LL_Init+0x60>)
 8023510:	f7e9 fb5e 	bl	800cbd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8023514:	2280      	movs	r2, #128	; 0x80
 8023516:	2101      	movs	r1, #1
 8023518:	4803      	ldr	r0, [pc, #12]	; (8023528 <USBD_LL_Init+0x60>)
 802351a:	f7e9 fb59 	bl	800cbd0 <HAL_PCDEx_SetTxFiFo>
}
 802351e:	2000      	movs	r0, #0
 8023520:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8023522:	f7df fe29 	bl	8003178 <Error_Handler>
 8023526:	e7ec      	b.n	8023502 <USBD_LL_Init+0x3a>
 8023528:	2002f438 	.word	0x2002f438

0802352c <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 802352c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023530:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8023532:	f7e8 febb 	bl	800c2ac <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8023536:	2803      	cmp	r0, #3
 8023538:	d802      	bhi.n	8023540 <USBD_LL_Start+0x14>
 802353a:	4b02      	ldr	r3, [pc, #8]	; (8023544 <USBD_LL_Start+0x18>)
 802353c:	5c18      	ldrb	r0, [r3, r0]
}
 802353e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8023540:	2003      	movs	r0, #3
}
 8023542:	bd08      	pop	{r3, pc}
 8023544:	08044f10 	.word	0x08044f10

08023548 <USBD_LL_OpenEP>:
{
 8023548:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802354a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802354e:	461a      	mov	r2, r3
 8023550:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023552:	4663      	mov	r3, ip
 8023554:	f7e9 f9ee 	bl	800c934 <HAL_PCD_EP_Open>
  switch (hal_status)
 8023558:	2803      	cmp	r0, #3
 802355a:	d802      	bhi.n	8023562 <USBD_LL_OpenEP+0x1a>
 802355c:	4b02      	ldr	r3, [pc, #8]	; (8023568 <USBD_LL_OpenEP+0x20>)
 802355e:	5c18      	ldrb	r0, [r3, r0]
}
 8023560:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023562:	2003      	movs	r0, #3
}
 8023564:	bd08      	pop	{r3, pc}
 8023566:	bf00      	nop
 8023568:	08044f10 	.word	0x08044f10

0802356c <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802356c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023570:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023572:	f7e9 fa1d 	bl	800c9b0 <HAL_PCD_EP_Close>
  switch (hal_status)
 8023576:	2803      	cmp	r0, #3
 8023578:	d802      	bhi.n	8023580 <USBD_LL_CloseEP+0x14>
 802357a:	4b02      	ldr	r3, [pc, #8]	; (8023584 <USBD_LL_CloseEP+0x18>)
 802357c:	5c18      	ldrb	r0, [r3, r0]
}
 802357e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023580:	2003      	movs	r0, #3
}
 8023582:	bd08      	pop	{r3, pc}
 8023584:	08044f10 	.word	0x08044f10

08023588 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023588:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802358c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802358e:	f7e9 fa9f 	bl	800cad0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8023592:	2803      	cmp	r0, #3
 8023594:	d802      	bhi.n	802359c <USBD_LL_StallEP+0x14>
 8023596:	4b02      	ldr	r3, [pc, #8]	; (80235a0 <USBD_LL_StallEP+0x18>)
 8023598:	5c18      	ldrb	r0, [r3, r0]
}
 802359a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802359c:	2003      	movs	r0, #3
}
 802359e:	bd08      	pop	{r3, pc}
 80235a0:	08044f10 	.word	0x08044f10

080235a4 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80235a4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80235a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80235aa:	f7e9 fad5 	bl	800cb58 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80235ae:	2803      	cmp	r0, #3
 80235b0:	d802      	bhi.n	80235b8 <USBD_LL_ClearStallEP+0x14>
 80235b2:	4b02      	ldr	r3, [pc, #8]	; (80235bc <USBD_LL_ClearStallEP+0x18>)
 80235b4:	5c18      	ldrb	r0, [r3, r0]
}
 80235b6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80235b8:	2003      	movs	r0, #3
}
 80235ba:	bd08      	pop	{r3, pc}
 80235bc:	08044f10 	.word	0x08044f10

080235c0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80235c0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80235c2:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80235c6:	d406      	bmi.n	80235d6 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80235c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80235cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80235d0:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 80235d4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80235d6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80235da:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80235de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80235e2:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 80235e6:	4770      	bx	lr

080235e8 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80235e8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80235ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80235ee:	f7e9 f98b 	bl	800c908 <HAL_PCD_SetAddress>
  switch (hal_status)
 80235f2:	2803      	cmp	r0, #3
 80235f4:	d802      	bhi.n	80235fc <USBD_LL_SetUSBAddress+0x14>
 80235f6:	4b02      	ldr	r3, [pc, #8]	; (8023600 <USBD_LL_SetUSBAddress+0x18>)
 80235f8:	5c18      	ldrb	r0, [r3, r0]
}
 80235fa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80235fc:	2003      	movs	r0, #3
}
 80235fe:	bd08      	pop	{r3, pc}
 8023600:	08044f10 	.word	0x08044f10

08023604 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023604:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023608:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802360a:	f7e9 fa39 	bl	800ca80 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 802360e:	2803      	cmp	r0, #3
 8023610:	d802      	bhi.n	8023618 <USBD_LL_Transmit+0x14>
 8023612:	4b02      	ldr	r3, [pc, #8]	; (802361c <USBD_LL_Transmit+0x18>)
 8023614:	5c18      	ldrb	r0, [r3, r0]
}
 8023616:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023618:	2003      	movs	r0, #3
}
 802361a:	bd08      	pop	{r3, pc}
 802361c:	08044f10 	.word	0x08044f10

08023620 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023620:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023624:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023626:	f7e9 f9f9 	bl	800ca1c <HAL_PCD_EP_Receive>
  switch (hal_status)
 802362a:	2803      	cmp	r0, #3
 802362c:	d802      	bhi.n	8023634 <USBD_LL_PrepareReceive+0x14>
 802362e:	4b02      	ldr	r3, [pc, #8]	; (8023638 <USBD_LL_PrepareReceive+0x18>)
 8023630:	5c18      	ldrb	r0, [r3, r0]
}
 8023632:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023634:	2003      	movs	r0, #3
}
 8023636:	bd08      	pop	{r3, pc}
 8023638:	08044f10 	.word	0x08044f10

0802363c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802363c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8023640:	f7e9 ba14 	b.w	800ca6c <HAL_PCD_EP_GetRxCount>

08023644 <HAL_PCDEx_LPM_Callback>:
{
 8023644:	b510      	push	{r4, lr}
 8023646:	4604      	mov	r4, r0
  switch (msg)
 8023648:	b1a1      	cbz	r1, 8023674 <HAL_PCDEx_LPM_Callback+0x30>
 802364a:	2901      	cmp	r1, #1
 802364c:	d111      	bne.n	8023672 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802364e:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8023650:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023654:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023658:	f043 0301 	orr.w	r3, r3, #1
 802365c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8023660:	f7f0 ff34 	bl	80144cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8023664:	6a23      	ldr	r3, [r4, #32]
 8023666:	b123      	cbz	r3, 8023672 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023668:	4a0e      	ldr	r2, [pc, #56]	; (80236a4 <HAL_PCDEx_LPM_Callback+0x60>)
 802366a:	6913      	ldr	r3, [r2, #16]
 802366c:	f043 0306 	orr.w	r3, r3, #6
 8023670:	6113      	str	r3, [r2, #16]
}
 8023672:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8023674:	6a03      	ldr	r3, [r0, #32]
 8023676:	b963      	cbnz	r3, 8023692 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023678:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 802367a:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802367e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023682:	f023 0301 	bic.w	r3, r3, #1
}
 8023686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802368a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 802368e:	f7f0 bf27 	b.w	80144e0 <USBD_LL_Resume>
  SystemClock_Config();
 8023692:	f7df fd79 	bl	8003188 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023696:	4a03      	ldr	r2, [pc, #12]	; (80236a4 <HAL_PCDEx_LPM_Callback+0x60>)
 8023698:	6913      	ldr	r3, [r2, #16]
 802369a:	f023 0306 	bic.w	r3, r3, #6
 802369e:	6113      	str	r3, [r2, #16]
 80236a0:	e7ea      	b.n	8023678 <HAL_PCDEx_LPM_Callback+0x34>
 80236a2:	bf00      	nop
 80236a4:	e000ed00 	.word	0xe000ed00

080236a8 <atoi>:
 80236a8:	220a      	movs	r2, #10
 80236aa:	2100      	movs	r1, #0
 80236ac:	f002 baa6 	b.w	8025bfc <strtol>

080236b0 <ctime>:
 80236b0:	b508      	push	{r3, lr}
 80236b2:	f000 f91f 	bl	80238f4 <localtime>
 80236b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80236ba:	f002 be39 	b.w	8026330 <asctime>
	...

080236c0 <std>:
 80236c0:	2300      	movs	r3, #0
 80236c2:	b510      	push	{r4, lr}
 80236c4:	4604      	mov	r4, r0
 80236c6:	e9c0 3300 	strd	r3, r3, [r0]
 80236ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80236ce:	6083      	str	r3, [r0, #8]
 80236d0:	8181      	strh	r1, [r0, #12]
 80236d2:	6643      	str	r3, [r0, #100]	; 0x64
 80236d4:	81c2      	strh	r2, [r0, #14]
 80236d6:	6183      	str	r3, [r0, #24]
 80236d8:	4619      	mov	r1, r3
 80236da:	2208      	movs	r2, #8
 80236dc:	305c      	adds	r0, #92	; 0x5c
 80236de:	f000 fa69 	bl	8023bb4 <memset>
 80236e2:	4b05      	ldr	r3, [pc, #20]	; (80236f8 <std+0x38>)
 80236e4:	6263      	str	r3, [r4, #36]	; 0x24
 80236e6:	4b05      	ldr	r3, [pc, #20]	; (80236fc <std+0x3c>)
 80236e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80236ea:	4b05      	ldr	r3, [pc, #20]	; (8023700 <std+0x40>)
 80236ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80236ee:	4b05      	ldr	r3, [pc, #20]	; (8023704 <std+0x44>)
 80236f0:	6224      	str	r4, [r4, #32]
 80236f2:	6323      	str	r3, [r4, #48]	; 0x30
 80236f4:	bd10      	pop	{r4, pc}
 80236f6:	bf00      	nop
 80236f8:	08024f69 	.word	0x08024f69
 80236fc:	08024f8f 	.word	0x08024f8f
 8023700:	08024fc7 	.word	0x08024fc7
 8023704:	08024feb 	.word	0x08024feb

08023708 <_cleanup_r>:
 8023708:	4901      	ldr	r1, [pc, #4]	; (8023710 <_cleanup_r+0x8>)
 802370a:	f000 b8af 	b.w	802386c <_fwalk_reent>
 802370e:	bf00      	nop
 8023710:	08027155 	.word	0x08027155

08023714 <__sfmoreglue>:
 8023714:	b570      	push	{r4, r5, r6, lr}
 8023716:	2268      	movs	r2, #104	; 0x68
 8023718:	1e4d      	subs	r5, r1, #1
 802371a:	4355      	muls	r5, r2
 802371c:	460e      	mov	r6, r1
 802371e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023722:	f000 fd2d 	bl	8024180 <_malloc_r>
 8023726:	4604      	mov	r4, r0
 8023728:	b140      	cbz	r0, 802373c <__sfmoreglue+0x28>
 802372a:	2100      	movs	r1, #0
 802372c:	e9c0 1600 	strd	r1, r6, [r0]
 8023730:	300c      	adds	r0, #12
 8023732:	60a0      	str	r0, [r4, #8]
 8023734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023738:	f000 fa3c 	bl	8023bb4 <memset>
 802373c:	4620      	mov	r0, r4
 802373e:	bd70      	pop	{r4, r5, r6, pc}

08023740 <__sfp_lock_acquire>:
 8023740:	4801      	ldr	r0, [pc, #4]	; (8023748 <__sfp_lock_acquire+0x8>)
 8023742:	f000 b9eb 	b.w	8023b1c <__retarget_lock_acquire_recursive>
 8023746:	bf00      	nop
 8023748:	2002f83e 	.word	0x2002f83e

0802374c <__sfp_lock_release>:
 802374c:	4801      	ldr	r0, [pc, #4]	; (8023754 <__sfp_lock_release+0x8>)
 802374e:	f000 b9e7 	b.w	8023b20 <__retarget_lock_release_recursive>
 8023752:	bf00      	nop
 8023754:	2002f83e 	.word	0x2002f83e

08023758 <__sinit_lock_acquire>:
 8023758:	4801      	ldr	r0, [pc, #4]	; (8023760 <__sinit_lock_acquire+0x8>)
 802375a:	f000 b9df 	b.w	8023b1c <__retarget_lock_acquire_recursive>
 802375e:	bf00      	nop
 8023760:	2002f83f 	.word	0x2002f83f

08023764 <__sinit_lock_release>:
 8023764:	4801      	ldr	r0, [pc, #4]	; (802376c <__sinit_lock_release+0x8>)
 8023766:	f000 b9db 	b.w	8023b20 <__retarget_lock_release_recursive>
 802376a:	bf00      	nop
 802376c:	2002f83f 	.word	0x2002f83f

08023770 <__sinit>:
 8023770:	b510      	push	{r4, lr}
 8023772:	4604      	mov	r4, r0
 8023774:	f7ff fff0 	bl	8023758 <__sinit_lock_acquire>
 8023778:	69a3      	ldr	r3, [r4, #24]
 802377a:	b11b      	cbz	r3, 8023784 <__sinit+0x14>
 802377c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023780:	f7ff bff0 	b.w	8023764 <__sinit_lock_release>
 8023784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023788:	6523      	str	r3, [r4, #80]	; 0x50
 802378a:	4b13      	ldr	r3, [pc, #76]	; (80237d8 <__sinit+0x68>)
 802378c:	4a13      	ldr	r2, [pc, #76]	; (80237dc <__sinit+0x6c>)
 802378e:	681b      	ldr	r3, [r3, #0]
 8023790:	62a2      	str	r2, [r4, #40]	; 0x28
 8023792:	42a3      	cmp	r3, r4
 8023794:	bf04      	itt	eq
 8023796:	2301      	moveq	r3, #1
 8023798:	61a3      	streq	r3, [r4, #24]
 802379a:	4620      	mov	r0, r4
 802379c:	f000 f820 	bl	80237e0 <__sfp>
 80237a0:	6060      	str	r0, [r4, #4]
 80237a2:	4620      	mov	r0, r4
 80237a4:	f000 f81c 	bl	80237e0 <__sfp>
 80237a8:	60a0      	str	r0, [r4, #8]
 80237aa:	4620      	mov	r0, r4
 80237ac:	f000 f818 	bl	80237e0 <__sfp>
 80237b0:	2200      	movs	r2, #0
 80237b2:	60e0      	str	r0, [r4, #12]
 80237b4:	2104      	movs	r1, #4
 80237b6:	6860      	ldr	r0, [r4, #4]
 80237b8:	f7ff ff82 	bl	80236c0 <std>
 80237bc:	68a0      	ldr	r0, [r4, #8]
 80237be:	2201      	movs	r2, #1
 80237c0:	2109      	movs	r1, #9
 80237c2:	f7ff ff7d 	bl	80236c0 <std>
 80237c6:	68e0      	ldr	r0, [r4, #12]
 80237c8:	2202      	movs	r2, #2
 80237ca:	2112      	movs	r1, #18
 80237cc:	f7ff ff78 	bl	80236c0 <std>
 80237d0:	2301      	movs	r3, #1
 80237d2:	61a3      	str	r3, [r4, #24]
 80237d4:	e7d2      	b.n	802377c <__sinit+0xc>
 80237d6:	bf00      	nop
 80237d8:	08045078 	.word	0x08045078
 80237dc:	08023709 	.word	0x08023709

080237e0 <__sfp>:
 80237e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237e2:	4607      	mov	r7, r0
 80237e4:	f7ff ffac 	bl	8023740 <__sfp_lock_acquire>
 80237e8:	4b1e      	ldr	r3, [pc, #120]	; (8023864 <__sfp+0x84>)
 80237ea:	681e      	ldr	r6, [r3, #0]
 80237ec:	69b3      	ldr	r3, [r6, #24]
 80237ee:	b913      	cbnz	r3, 80237f6 <__sfp+0x16>
 80237f0:	4630      	mov	r0, r6
 80237f2:	f7ff ffbd 	bl	8023770 <__sinit>
 80237f6:	3648      	adds	r6, #72	; 0x48
 80237f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80237fc:	3b01      	subs	r3, #1
 80237fe:	d503      	bpl.n	8023808 <__sfp+0x28>
 8023800:	6833      	ldr	r3, [r6, #0]
 8023802:	b30b      	cbz	r3, 8023848 <__sfp+0x68>
 8023804:	6836      	ldr	r6, [r6, #0]
 8023806:	e7f7      	b.n	80237f8 <__sfp+0x18>
 8023808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802380c:	b9d5      	cbnz	r5, 8023844 <__sfp+0x64>
 802380e:	4b16      	ldr	r3, [pc, #88]	; (8023868 <__sfp+0x88>)
 8023810:	60e3      	str	r3, [r4, #12]
 8023812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023816:	6665      	str	r5, [r4, #100]	; 0x64
 8023818:	f000 f97e 	bl	8023b18 <__retarget_lock_init_recursive>
 802381c:	f7ff ff96 	bl	802374c <__sfp_lock_release>
 8023820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023828:	6025      	str	r5, [r4, #0]
 802382a:	61a5      	str	r5, [r4, #24]
 802382c:	2208      	movs	r2, #8
 802382e:	4629      	mov	r1, r5
 8023830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023834:	f000 f9be 	bl	8023bb4 <memset>
 8023838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802383c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023840:	4620      	mov	r0, r4
 8023842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023844:	3468      	adds	r4, #104	; 0x68
 8023846:	e7d9      	b.n	80237fc <__sfp+0x1c>
 8023848:	2104      	movs	r1, #4
 802384a:	4638      	mov	r0, r7
 802384c:	f7ff ff62 	bl	8023714 <__sfmoreglue>
 8023850:	4604      	mov	r4, r0
 8023852:	6030      	str	r0, [r6, #0]
 8023854:	2800      	cmp	r0, #0
 8023856:	d1d5      	bne.n	8023804 <__sfp+0x24>
 8023858:	f7ff ff78 	bl	802374c <__sfp_lock_release>
 802385c:	230c      	movs	r3, #12
 802385e:	603b      	str	r3, [r7, #0]
 8023860:	e7ee      	b.n	8023840 <__sfp+0x60>
 8023862:	bf00      	nop
 8023864:	08045078 	.word	0x08045078
 8023868:	ffff0001 	.word	0xffff0001

0802386c <_fwalk_reent>:
 802386c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023870:	4606      	mov	r6, r0
 8023872:	4688      	mov	r8, r1
 8023874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023878:	2700      	movs	r7, #0
 802387a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802387e:	f1b9 0901 	subs.w	r9, r9, #1
 8023882:	d505      	bpl.n	8023890 <_fwalk_reent+0x24>
 8023884:	6824      	ldr	r4, [r4, #0]
 8023886:	2c00      	cmp	r4, #0
 8023888:	d1f7      	bne.n	802387a <_fwalk_reent+0xe>
 802388a:	4638      	mov	r0, r7
 802388c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023890:	89ab      	ldrh	r3, [r5, #12]
 8023892:	2b01      	cmp	r3, #1
 8023894:	d907      	bls.n	80238a6 <_fwalk_reent+0x3a>
 8023896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802389a:	3301      	adds	r3, #1
 802389c:	d003      	beq.n	80238a6 <_fwalk_reent+0x3a>
 802389e:	4629      	mov	r1, r5
 80238a0:	4630      	mov	r0, r6
 80238a2:	47c0      	blx	r8
 80238a4:	4307      	orrs	r7, r0
 80238a6:	3568      	adds	r5, #104	; 0x68
 80238a8:	e7e9      	b.n	802387e <_fwalk_reent+0x12>
	...

080238ac <__libc_init_array>:
 80238ac:	b570      	push	{r4, r5, r6, lr}
 80238ae:	4d0d      	ldr	r5, [pc, #52]	; (80238e4 <__libc_init_array+0x38>)
 80238b0:	4c0d      	ldr	r4, [pc, #52]	; (80238e8 <__libc_init_array+0x3c>)
 80238b2:	1b64      	subs	r4, r4, r5
 80238b4:	10a4      	asrs	r4, r4, #2
 80238b6:	2600      	movs	r6, #0
 80238b8:	42a6      	cmp	r6, r4
 80238ba:	d109      	bne.n	80238d0 <__libc_init_array+0x24>
 80238bc:	4d0b      	ldr	r5, [pc, #44]	; (80238ec <__libc_init_array+0x40>)
 80238be:	4c0c      	ldr	r4, [pc, #48]	; (80238f0 <__libc_init_array+0x44>)
 80238c0:	f005 f950 	bl	8028b64 <_init>
 80238c4:	1b64      	subs	r4, r4, r5
 80238c6:	10a4      	asrs	r4, r4, #2
 80238c8:	2600      	movs	r6, #0
 80238ca:	42a6      	cmp	r6, r4
 80238cc:	d105      	bne.n	80238da <__libc_init_array+0x2e>
 80238ce:	bd70      	pop	{r4, r5, r6, pc}
 80238d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80238d4:	4798      	blx	r3
 80238d6:	3601      	adds	r6, #1
 80238d8:	e7ee      	b.n	80238b8 <__libc_init_array+0xc>
 80238da:	f855 3b04 	ldr.w	r3, [r5], #4
 80238de:	4798      	blx	r3
 80238e0:	3601      	adds	r6, #1
 80238e2:	e7f2      	b.n	80238ca <__libc_init_array+0x1e>
 80238e4:	08045804 	.word	0x08045804
 80238e8:	08045804 	.word	0x08045804
 80238ec:	08045804 	.word	0x08045804
 80238f0:	08045808 	.word	0x08045808

080238f4 <localtime>:
 80238f4:	b538      	push	{r3, r4, r5, lr}
 80238f6:	4b0b      	ldr	r3, [pc, #44]	; (8023924 <localtime+0x30>)
 80238f8:	681d      	ldr	r5, [r3, #0]
 80238fa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80238fc:	4604      	mov	r4, r0
 80238fe:	b953      	cbnz	r3, 8023916 <localtime+0x22>
 8023900:	2024      	movs	r0, #36	; 0x24
 8023902:	f000 f90f 	bl	8023b24 <malloc>
 8023906:	4602      	mov	r2, r0
 8023908:	63e8      	str	r0, [r5, #60]	; 0x3c
 802390a:	b920      	cbnz	r0, 8023916 <localtime+0x22>
 802390c:	4b06      	ldr	r3, [pc, #24]	; (8023928 <localtime+0x34>)
 802390e:	4807      	ldr	r0, [pc, #28]	; (802392c <localtime+0x38>)
 8023910:	2132      	movs	r1, #50	; 0x32
 8023912:	f002 fd55 	bl	80263c0 <__assert_func>
 8023916:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8023918:	4620      	mov	r0, r4
 802391a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802391e:	f000 b807 	b.w	8023930 <localtime_r>
 8023922:	bf00      	nop
 8023924:	20000488 	.word	0x20000488
 8023928:	0804507c 	.word	0x0804507c
 802392c:	08045093 	.word	0x08045093

08023930 <localtime_r>:
 8023930:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8023934:	4680      	mov	r8, r0
 8023936:	9101      	str	r1, [sp, #4]
 8023938:	f003 fc9e 	bl	8027278 <__gettzinfo>
 802393c:	9901      	ldr	r1, [sp, #4]
 802393e:	4605      	mov	r5, r0
 8023940:	4640      	mov	r0, r8
 8023942:	f003 fc9d 	bl	8027280 <gmtime_r>
 8023946:	6943      	ldr	r3, [r0, #20]
 8023948:	0799      	lsls	r1, r3, #30
 802394a:	4604      	mov	r4, r0
 802394c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8023950:	d105      	bne.n	802395e <localtime_r+0x2e>
 8023952:	2264      	movs	r2, #100	; 0x64
 8023954:	fb97 f3f2 	sdiv	r3, r7, r2
 8023958:	fb02 7313 	mls	r3, r2, r3, r7
 802395c:	bb73      	cbnz	r3, 80239bc <localtime_r+0x8c>
 802395e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023962:	fb97 f6f3 	sdiv	r6, r7, r3
 8023966:	fb03 7616 	mls	r6, r3, r6, r7
 802396a:	fab6 f386 	clz	r3, r6
 802396e:	095b      	lsrs	r3, r3, #5
 8023970:	4e67      	ldr	r6, [pc, #412]	; (8023b10 <localtime_r+0x1e0>)
 8023972:	2230      	movs	r2, #48	; 0x30
 8023974:	fb02 6603 	mla	r6, r2, r3, r6
 8023978:	f002 fa72 	bl	8025e60 <__tz_lock>
 802397c:	f002 fa7c 	bl	8025e78 <_tzset_unlocked>
 8023980:	4b64      	ldr	r3, [pc, #400]	; (8023b14 <localtime_r+0x1e4>)
 8023982:	681b      	ldr	r3, [r3, #0]
 8023984:	b34b      	cbz	r3, 80239da <localtime_r+0xaa>
 8023986:	686b      	ldr	r3, [r5, #4]
 8023988:	42bb      	cmp	r3, r7
 802398a:	d119      	bne.n	80239c0 <localtime_r+0x90>
 802398c:	682f      	ldr	r7, [r5, #0]
 802398e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8023992:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8023996:	b9df      	cbnz	r7, 80239d0 <localtime_r+0xa0>
 8023998:	4282      	cmp	r2, r0
 802399a:	eb73 0101 	sbcs.w	r1, r3, r1
 802399e:	da23      	bge.n	80239e8 <localtime_r+0xb8>
 80239a0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80239a4:	4282      	cmp	r2, r0
 80239a6:	eb73 0701 	sbcs.w	r7, r3, r1
 80239aa:	bfb4      	ite	lt
 80239ac:	2701      	movlt	r7, #1
 80239ae:	2700      	movge	r7, #0
 80239b0:	4282      	cmp	r2, r0
 80239b2:	418b      	sbcs	r3, r1
 80239b4:	6227      	str	r7, [r4, #32]
 80239b6:	db19      	blt.n	80239ec <localtime_r+0xbc>
 80239b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80239ba:	e018      	b.n	80239ee <localtime_r+0xbe>
 80239bc:	2301      	movs	r3, #1
 80239be:	e7d7      	b.n	8023970 <localtime_r+0x40>
 80239c0:	4638      	mov	r0, r7
 80239c2:	f002 f9a3 	bl	8025d0c <__tzcalc_limits>
 80239c6:	2800      	cmp	r0, #0
 80239c8:	d1e0      	bne.n	802398c <localtime_r+0x5c>
 80239ca:	f04f 33ff 	mov.w	r3, #4294967295
 80239ce:	e004      	b.n	80239da <localtime_r+0xaa>
 80239d0:	4282      	cmp	r2, r0
 80239d2:	eb73 0101 	sbcs.w	r1, r3, r1
 80239d6:	da02      	bge.n	80239de <localtime_r+0xae>
 80239d8:	2300      	movs	r3, #0
 80239da:	6223      	str	r3, [r4, #32]
 80239dc:	e7ec      	b.n	80239b8 <localtime_r+0x88>
 80239de:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80239e2:	4282      	cmp	r2, r0
 80239e4:	418b      	sbcs	r3, r1
 80239e6:	daf7      	bge.n	80239d8 <localtime_r+0xa8>
 80239e8:	2301      	movs	r3, #1
 80239ea:	6223      	str	r3, [r4, #32]
 80239ec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80239ee:	6861      	ldr	r1, [r4, #4]
 80239f0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80239f4:	203c      	movs	r0, #60	; 0x3c
 80239f6:	fb93 f5f2 	sdiv	r5, r3, r2
 80239fa:	fb02 3315 	mls	r3, r2, r5, r3
 80239fe:	fb93 f2f0 	sdiv	r2, r3, r0
 8023a02:	fb00 3012 	mls	r0, r0, r2, r3
 8023a06:	6823      	ldr	r3, [r4, #0]
 8023a08:	1a89      	subs	r1, r1, r2
 8023a0a:	68a2      	ldr	r2, [r4, #8]
 8023a0c:	6061      	str	r1, [r4, #4]
 8023a0e:	1a1b      	subs	r3, r3, r0
 8023a10:	1b52      	subs	r2, r2, r5
 8023a12:	2b3b      	cmp	r3, #59	; 0x3b
 8023a14:	6023      	str	r3, [r4, #0]
 8023a16:	60a2      	str	r2, [r4, #8]
 8023a18:	dd35      	ble.n	8023a86 <localtime_r+0x156>
 8023a1a:	3101      	adds	r1, #1
 8023a1c:	6061      	str	r1, [r4, #4]
 8023a1e:	3b3c      	subs	r3, #60	; 0x3c
 8023a20:	6023      	str	r3, [r4, #0]
 8023a22:	6863      	ldr	r3, [r4, #4]
 8023a24:	2b3b      	cmp	r3, #59	; 0x3b
 8023a26:	dd34      	ble.n	8023a92 <localtime_r+0x162>
 8023a28:	3201      	adds	r2, #1
 8023a2a:	60a2      	str	r2, [r4, #8]
 8023a2c:	3b3c      	subs	r3, #60	; 0x3c
 8023a2e:	6063      	str	r3, [r4, #4]
 8023a30:	68a3      	ldr	r3, [r4, #8]
 8023a32:	2b17      	cmp	r3, #23
 8023a34:	dd33      	ble.n	8023a9e <localtime_r+0x16e>
 8023a36:	69e2      	ldr	r2, [r4, #28]
 8023a38:	3201      	adds	r2, #1
 8023a3a:	61e2      	str	r2, [r4, #28]
 8023a3c:	69a2      	ldr	r2, [r4, #24]
 8023a3e:	3201      	adds	r2, #1
 8023a40:	2a06      	cmp	r2, #6
 8023a42:	bfc8      	it	gt
 8023a44:	2200      	movgt	r2, #0
 8023a46:	61a2      	str	r2, [r4, #24]
 8023a48:	68e2      	ldr	r2, [r4, #12]
 8023a4a:	3b18      	subs	r3, #24
 8023a4c:	3201      	adds	r2, #1
 8023a4e:	60a3      	str	r3, [r4, #8]
 8023a50:	6923      	ldr	r3, [r4, #16]
 8023a52:	60e2      	str	r2, [r4, #12]
 8023a54:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8023a58:	428a      	cmp	r2, r1
 8023a5a:	dd0e      	ble.n	8023a7a <localtime_r+0x14a>
 8023a5c:	2b0b      	cmp	r3, #11
 8023a5e:	eba2 0201 	sub.w	r2, r2, r1
 8023a62:	60e2      	str	r2, [r4, #12]
 8023a64:	f103 0201 	add.w	r2, r3, #1
 8023a68:	bf09      	itett	eq
 8023a6a:	6963      	ldreq	r3, [r4, #20]
 8023a6c:	6122      	strne	r2, [r4, #16]
 8023a6e:	2200      	moveq	r2, #0
 8023a70:	3301      	addeq	r3, #1
 8023a72:	bf02      	ittt	eq
 8023a74:	6122      	streq	r2, [r4, #16]
 8023a76:	6163      	streq	r3, [r4, #20]
 8023a78:	61e2      	streq	r2, [r4, #28]
 8023a7a:	f002 f9f7 	bl	8025e6c <__tz_unlock>
 8023a7e:	4620      	mov	r0, r4
 8023a80:	b002      	add	sp, #8
 8023a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	dacb      	bge.n	8023a22 <localtime_r+0xf2>
 8023a8a:	3901      	subs	r1, #1
 8023a8c:	6061      	str	r1, [r4, #4]
 8023a8e:	333c      	adds	r3, #60	; 0x3c
 8023a90:	e7c6      	b.n	8023a20 <localtime_r+0xf0>
 8023a92:	2b00      	cmp	r3, #0
 8023a94:	dacc      	bge.n	8023a30 <localtime_r+0x100>
 8023a96:	3a01      	subs	r2, #1
 8023a98:	60a2      	str	r2, [r4, #8]
 8023a9a:	333c      	adds	r3, #60	; 0x3c
 8023a9c:	e7c7      	b.n	8023a2e <localtime_r+0xfe>
 8023a9e:	2b00      	cmp	r3, #0
 8023aa0:	daeb      	bge.n	8023a7a <localtime_r+0x14a>
 8023aa2:	69e2      	ldr	r2, [r4, #28]
 8023aa4:	3a01      	subs	r2, #1
 8023aa6:	61e2      	str	r2, [r4, #28]
 8023aa8:	69a2      	ldr	r2, [r4, #24]
 8023aaa:	3a01      	subs	r2, #1
 8023aac:	bf48      	it	mi
 8023aae:	2206      	movmi	r2, #6
 8023ab0:	61a2      	str	r2, [r4, #24]
 8023ab2:	68e2      	ldr	r2, [r4, #12]
 8023ab4:	3318      	adds	r3, #24
 8023ab6:	3a01      	subs	r2, #1
 8023ab8:	60e2      	str	r2, [r4, #12]
 8023aba:	60a3      	str	r3, [r4, #8]
 8023abc:	2a00      	cmp	r2, #0
 8023abe:	d1dc      	bne.n	8023a7a <localtime_r+0x14a>
 8023ac0:	6923      	ldr	r3, [r4, #16]
 8023ac2:	3b01      	subs	r3, #1
 8023ac4:	d405      	bmi.n	8023ad2 <localtime_r+0x1a2>
 8023ac6:	6123      	str	r3, [r4, #16]
 8023ac8:	6923      	ldr	r3, [r4, #16]
 8023aca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023ace:	60e3      	str	r3, [r4, #12]
 8023ad0:	e7d3      	b.n	8023a7a <localtime_r+0x14a>
 8023ad2:	230b      	movs	r3, #11
 8023ad4:	6123      	str	r3, [r4, #16]
 8023ad6:	6963      	ldr	r3, [r4, #20]
 8023ad8:	1e5a      	subs	r2, r3, #1
 8023ada:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8023ade:	6162      	str	r2, [r4, #20]
 8023ae0:	079a      	lsls	r2, r3, #30
 8023ae2:	d105      	bne.n	8023af0 <localtime_r+0x1c0>
 8023ae4:	2164      	movs	r1, #100	; 0x64
 8023ae6:	fb93 f2f1 	sdiv	r2, r3, r1
 8023aea:	fb01 3212 	mls	r2, r1, r2, r3
 8023aee:	b962      	cbnz	r2, 8023b0a <localtime_r+0x1da>
 8023af0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023af4:	fb93 f1f2 	sdiv	r1, r3, r2
 8023af8:	fb02 3311 	mls	r3, r2, r1, r3
 8023afc:	fab3 f383 	clz	r3, r3
 8023b00:	095b      	lsrs	r3, r3, #5
 8023b02:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8023b06:	61e3      	str	r3, [r4, #28]
 8023b08:	e7de      	b.n	8023ac8 <localtime_r+0x198>
 8023b0a:	2301      	movs	r3, #1
 8023b0c:	e7f9      	b.n	8023b02 <localtime_r+0x1d2>
 8023b0e:	bf00      	nop
 8023b10:	08045150 	.word	0x08045150
 8023b14:	2002f86c 	.word	0x2002f86c

08023b18 <__retarget_lock_init_recursive>:
 8023b18:	4770      	bx	lr

08023b1a <__retarget_lock_acquire>:
 8023b1a:	4770      	bx	lr

08023b1c <__retarget_lock_acquire_recursive>:
 8023b1c:	4770      	bx	lr

08023b1e <__retarget_lock_release>:
 8023b1e:	4770      	bx	lr

08023b20 <__retarget_lock_release_recursive>:
 8023b20:	4770      	bx	lr
	...

08023b24 <malloc>:
 8023b24:	4b02      	ldr	r3, [pc, #8]	; (8023b30 <malloc+0xc>)
 8023b26:	4601      	mov	r1, r0
 8023b28:	6818      	ldr	r0, [r3, #0]
 8023b2a:	f000 bb29 	b.w	8024180 <_malloc_r>
 8023b2e:	bf00      	nop
 8023b30:	20000488 	.word	0x20000488

08023b34 <free>:
 8023b34:	4b02      	ldr	r3, [pc, #8]	; (8023b40 <free+0xc>)
 8023b36:	4601      	mov	r1, r0
 8023b38:	6818      	ldr	r0, [r3, #0]
 8023b3a:	f000 bab5 	b.w	80240a8 <_free_r>
 8023b3e:	bf00      	nop
 8023b40:	20000488 	.word	0x20000488

08023b44 <memcmp>:
 8023b44:	b510      	push	{r4, lr}
 8023b46:	3901      	subs	r1, #1
 8023b48:	4402      	add	r2, r0
 8023b4a:	4290      	cmp	r0, r2
 8023b4c:	d101      	bne.n	8023b52 <memcmp+0xe>
 8023b4e:	2000      	movs	r0, #0
 8023b50:	e005      	b.n	8023b5e <memcmp+0x1a>
 8023b52:	7803      	ldrb	r3, [r0, #0]
 8023b54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023b58:	42a3      	cmp	r3, r4
 8023b5a:	d001      	beq.n	8023b60 <memcmp+0x1c>
 8023b5c:	1b18      	subs	r0, r3, r4
 8023b5e:	bd10      	pop	{r4, pc}
 8023b60:	3001      	adds	r0, #1
 8023b62:	e7f2      	b.n	8023b4a <memcmp+0x6>

08023b64 <memcpy>:
 8023b64:	440a      	add	r2, r1
 8023b66:	4291      	cmp	r1, r2
 8023b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8023b6c:	d100      	bne.n	8023b70 <memcpy+0xc>
 8023b6e:	4770      	bx	lr
 8023b70:	b510      	push	{r4, lr}
 8023b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023b7a:	4291      	cmp	r1, r2
 8023b7c:	d1f9      	bne.n	8023b72 <memcpy+0xe>
 8023b7e:	bd10      	pop	{r4, pc}

08023b80 <memmove>:
 8023b80:	4288      	cmp	r0, r1
 8023b82:	b510      	push	{r4, lr}
 8023b84:	eb01 0402 	add.w	r4, r1, r2
 8023b88:	d902      	bls.n	8023b90 <memmove+0x10>
 8023b8a:	4284      	cmp	r4, r0
 8023b8c:	4623      	mov	r3, r4
 8023b8e:	d807      	bhi.n	8023ba0 <memmove+0x20>
 8023b90:	1e43      	subs	r3, r0, #1
 8023b92:	42a1      	cmp	r1, r4
 8023b94:	d008      	beq.n	8023ba8 <memmove+0x28>
 8023b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023b9e:	e7f8      	b.n	8023b92 <memmove+0x12>
 8023ba0:	4402      	add	r2, r0
 8023ba2:	4601      	mov	r1, r0
 8023ba4:	428a      	cmp	r2, r1
 8023ba6:	d100      	bne.n	8023baa <memmove+0x2a>
 8023ba8:	bd10      	pop	{r4, pc}
 8023baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023bb2:	e7f7      	b.n	8023ba4 <memmove+0x24>

08023bb4 <memset>:
 8023bb4:	4402      	add	r2, r0
 8023bb6:	4603      	mov	r3, r0
 8023bb8:	4293      	cmp	r3, r2
 8023bba:	d100      	bne.n	8023bbe <memset+0xa>
 8023bbc:	4770      	bx	lr
 8023bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8023bc2:	e7f9      	b.n	8023bb8 <memset+0x4>

08023bc4 <validate_structure>:
 8023bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023bc6:	6801      	ldr	r1, [r0, #0]
 8023bc8:	293b      	cmp	r1, #59	; 0x3b
 8023bca:	4604      	mov	r4, r0
 8023bcc:	d911      	bls.n	8023bf2 <validate_structure+0x2e>
 8023bce:	223c      	movs	r2, #60	; 0x3c
 8023bd0:	4668      	mov	r0, sp
 8023bd2:	f002 fc23 	bl	802641c <div>
 8023bd6:	9a01      	ldr	r2, [sp, #4]
 8023bd8:	6863      	ldr	r3, [r4, #4]
 8023bda:	9900      	ldr	r1, [sp, #0]
 8023bdc:	2a00      	cmp	r2, #0
 8023bde:	440b      	add	r3, r1
 8023be0:	6063      	str	r3, [r4, #4]
 8023be2:	bfbb      	ittet	lt
 8023be4:	323c      	addlt	r2, #60	; 0x3c
 8023be6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023bea:	6022      	strge	r2, [r4, #0]
 8023bec:	6022      	strlt	r2, [r4, #0]
 8023bee:	bfb8      	it	lt
 8023bf0:	6063      	strlt	r3, [r4, #4]
 8023bf2:	6861      	ldr	r1, [r4, #4]
 8023bf4:	293b      	cmp	r1, #59	; 0x3b
 8023bf6:	d911      	bls.n	8023c1c <validate_structure+0x58>
 8023bf8:	223c      	movs	r2, #60	; 0x3c
 8023bfa:	4668      	mov	r0, sp
 8023bfc:	f002 fc0e 	bl	802641c <div>
 8023c00:	9a01      	ldr	r2, [sp, #4]
 8023c02:	68a3      	ldr	r3, [r4, #8]
 8023c04:	9900      	ldr	r1, [sp, #0]
 8023c06:	2a00      	cmp	r2, #0
 8023c08:	440b      	add	r3, r1
 8023c0a:	60a3      	str	r3, [r4, #8]
 8023c0c:	bfbb      	ittet	lt
 8023c0e:	323c      	addlt	r2, #60	; 0x3c
 8023c10:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023c14:	6062      	strge	r2, [r4, #4]
 8023c16:	6062      	strlt	r2, [r4, #4]
 8023c18:	bfb8      	it	lt
 8023c1a:	60a3      	strlt	r3, [r4, #8]
 8023c1c:	68a1      	ldr	r1, [r4, #8]
 8023c1e:	2917      	cmp	r1, #23
 8023c20:	d911      	bls.n	8023c46 <validate_structure+0x82>
 8023c22:	2218      	movs	r2, #24
 8023c24:	4668      	mov	r0, sp
 8023c26:	f002 fbf9 	bl	802641c <div>
 8023c2a:	9a01      	ldr	r2, [sp, #4]
 8023c2c:	68e3      	ldr	r3, [r4, #12]
 8023c2e:	9900      	ldr	r1, [sp, #0]
 8023c30:	2a00      	cmp	r2, #0
 8023c32:	440b      	add	r3, r1
 8023c34:	60e3      	str	r3, [r4, #12]
 8023c36:	bfbb      	ittet	lt
 8023c38:	3218      	addlt	r2, #24
 8023c3a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023c3e:	60a2      	strge	r2, [r4, #8]
 8023c40:	60a2      	strlt	r2, [r4, #8]
 8023c42:	bfb8      	it	lt
 8023c44:	60e3      	strlt	r3, [r4, #12]
 8023c46:	6921      	ldr	r1, [r4, #16]
 8023c48:	290b      	cmp	r1, #11
 8023c4a:	d911      	bls.n	8023c70 <validate_structure+0xac>
 8023c4c:	220c      	movs	r2, #12
 8023c4e:	4668      	mov	r0, sp
 8023c50:	f002 fbe4 	bl	802641c <div>
 8023c54:	9a01      	ldr	r2, [sp, #4]
 8023c56:	6963      	ldr	r3, [r4, #20]
 8023c58:	9900      	ldr	r1, [sp, #0]
 8023c5a:	2a00      	cmp	r2, #0
 8023c5c:	440b      	add	r3, r1
 8023c5e:	6163      	str	r3, [r4, #20]
 8023c60:	bfbb      	ittet	lt
 8023c62:	320c      	addlt	r2, #12
 8023c64:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023c68:	6122      	strge	r2, [r4, #16]
 8023c6a:	6122      	strlt	r2, [r4, #16]
 8023c6c:	bfb8      	it	lt
 8023c6e:	6163      	strlt	r3, [r4, #20]
 8023c70:	6963      	ldr	r3, [r4, #20]
 8023c72:	0798      	lsls	r0, r3, #30
 8023c74:	d120      	bne.n	8023cb8 <validate_structure+0xf4>
 8023c76:	2164      	movs	r1, #100	; 0x64
 8023c78:	fb93 f2f1 	sdiv	r2, r3, r1
 8023c7c:	fb01 3212 	mls	r2, r1, r2, r3
 8023c80:	b9e2      	cbnz	r2, 8023cbc <validate_structure+0xf8>
 8023c82:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8023c86:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023c8a:	fb93 f1f2 	sdiv	r1, r3, r2
 8023c8e:	fb02 3311 	mls	r3, r2, r1, r3
 8023c92:	2b00      	cmp	r3, #0
 8023c94:	bf14      	ite	ne
 8023c96:	231c      	movne	r3, #28
 8023c98:	231d      	moveq	r3, #29
 8023c9a:	68e2      	ldr	r2, [r4, #12]
 8023c9c:	2a00      	cmp	r2, #0
 8023c9e:	dc0f      	bgt.n	8023cc0 <validate_structure+0xfc>
 8023ca0:	4f33      	ldr	r7, [pc, #204]	; (8023d70 <validate_structure+0x1ac>)
 8023ca2:	260b      	movs	r6, #11
 8023ca4:	2064      	movs	r0, #100	; 0x64
 8023ca6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8023caa:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8023cae:	f1bc 0f00 	cmp.w	ip, #0
 8023cb2:	dd31      	ble.n	8023d18 <validate_structure+0x154>
 8023cb4:	b003      	add	sp, #12
 8023cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023cb8:	231c      	movs	r3, #28
 8023cba:	e7ee      	b.n	8023c9a <validate_structure+0xd6>
 8023cbc:	231d      	movs	r3, #29
 8023cbe:	e7ec      	b.n	8023c9a <validate_structure+0xd6>
 8023cc0:	4e2b      	ldr	r6, [pc, #172]	; (8023d70 <validate_structure+0x1ac>)
 8023cc2:	2700      	movs	r7, #0
 8023cc4:	2064      	movs	r0, #100	; 0x64
 8023cc6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8023cca:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8023cce:	2a01      	cmp	r2, #1
 8023cd0:	bf14      	ite	ne
 8023cd2:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8023cd6:	469c      	moveq	ip, r3
 8023cd8:	4561      	cmp	r1, ip
 8023cda:	ddeb      	ble.n	8023cb4 <validate_structure+0xf0>
 8023cdc:	3201      	adds	r2, #1
 8023cde:	eba1 010c 	sub.w	r1, r1, ip
 8023ce2:	2a0c      	cmp	r2, #12
 8023ce4:	60e1      	str	r1, [r4, #12]
 8023ce6:	6122      	str	r2, [r4, #16]
 8023ce8:	d1ef      	bne.n	8023cca <validate_structure+0x106>
 8023cea:	6963      	ldr	r3, [r4, #20]
 8023cec:	1c5a      	adds	r2, r3, #1
 8023cee:	0791      	lsls	r1, r2, #30
 8023cf0:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8023cf4:	d137      	bne.n	8023d66 <validate_structure+0x1a2>
 8023cf6:	fb92 f1f0 	sdiv	r1, r2, r0
 8023cfa:	fb00 2211 	mls	r2, r0, r1, r2
 8023cfe:	2a00      	cmp	r2, #0
 8023d00:	d133      	bne.n	8023d6a <validate_structure+0x1a6>
 8023d02:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8023d06:	fb93 f2f5 	sdiv	r2, r3, r5
 8023d0a:	fb05 3312 	mls	r3, r5, r2, r3
 8023d0e:	2b00      	cmp	r3, #0
 8023d10:	bf14      	ite	ne
 8023d12:	231c      	movne	r3, #28
 8023d14:	231d      	moveq	r3, #29
 8023d16:	e7d8      	b.n	8023cca <validate_structure+0x106>
 8023d18:	6921      	ldr	r1, [r4, #16]
 8023d1a:	3901      	subs	r1, #1
 8023d1c:	6121      	str	r1, [r4, #16]
 8023d1e:	3101      	adds	r1, #1
 8023d20:	d114      	bne.n	8023d4c <validate_structure+0x188>
 8023d22:	6963      	ldr	r3, [r4, #20]
 8023d24:	1e5a      	subs	r2, r3, #1
 8023d26:	0791      	lsls	r1, r2, #30
 8023d28:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8023d2c:	d117      	bne.n	8023d5e <validate_structure+0x19a>
 8023d2e:	fb92 f1f0 	sdiv	r1, r2, r0
 8023d32:	fb00 2211 	mls	r2, r0, r1, r2
 8023d36:	b9a2      	cbnz	r2, 8023d62 <validate_structure+0x19e>
 8023d38:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8023d3c:	fb93 f2f5 	sdiv	r2, r3, r5
 8023d40:	fb05 3312 	mls	r3, r5, r2, r3
 8023d44:	2b00      	cmp	r3, #0
 8023d46:	bf14      	ite	ne
 8023d48:	231c      	movne	r3, #28
 8023d4a:	231d      	moveq	r3, #29
 8023d4c:	6922      	ldr	r2, [r4, #16]
 8023d4e:	2a01      	cmp	r2, #1
 8023d50:	bf14      	ite	ne
 8023d52:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8023d56:	461a      	moveq	r2, r3
 8023d58:	4462      	add	r2, ip
 8023d5a:	60e2      	str	r2, [r4, #12]
 8023d5c:	e7a5      	b.n	8023caa <validate_structure+0xe6>
 8023d5e:	231c      	movs	r3, #28
 8023d60:	e7f4      	b.n	8023d4c <validate_structure+0x188>
 8023d62:	231d      	movs	r3, #29
 8023d64:	e7f2      	b.n	8023d4c <validate_structure+0x188>
 8023d66:	231c      	movs	r3, #28
 8023d68:	e7af      	b.n	8023cca <validate_structure+0x106>
 8023d6a:	231d      	movs	r3, #29
 8023d6c:	e7ad      	b.n	8023cca <validate_structure+0x106>
 8023d6e:	bf00      	nop
 8023d70:	080450f0 	.word	0x080450f0

08023d74 <mktime>:
 8023d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d78:	b085      	sub	sp, #20
 8023d7a:	4607      	mov	r7, r0
 8023d7c:	f003 fa7c 	bl	8027278 <__gettzinfo>
 8023d80:	4681      	mov	r9, r0
 8023d82:	4638      	mov	r0, r7
 8023d84:	f7ff ff1e 	bl	8023bc4 <validate_structure>
 8023d88:	e9d7 4000 	ldrd	r4, r0, [r7]
 8023d8c:	233c      	movs	r3, #60	; 0x3c
 8023d8e:	fb03 4400 	mla	r4, r3, r0, r4
 8023d92:	68b8      	ldr	r0, [r7, #8]
 8023d94:	4abc      	ldr	r2, [pc, #752]	; (8024088 <mktime+0x314>)
 8023d96:	697e      	ldr	r6, [r7, #20]
 8023d98:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8023d9c:	fb03 4400 	mla	r4, r3, r0, r4
 8023da0:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8023da4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8023da8:	3d01      	subs	r5, #1
 8023daa:	2b01      	cmp	r3, #1
 8023dac:	4415      	add	r5, r2
 8023dae:	dd11      	ble.n	8023dd4 <mktime+0x60>
 8023db0:	07b1      	lsls	r1, r6, #30
 8023db2:	d10f      	bne.n	8023dd4 <mktime+0x60>
 8023db4:	2264      	movs	r2, #100	; 0x64
 8023db6:	fb96 f3f2 	sdiv	r3, r6, r2
 8023dba:	fb02 6313 	mls	r3, r2, r3, r6
 8023dbe:	b943      	cbnz	r3, 8023dd2 <mktime+0x5e>
 8023dc0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8023dc4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023dc8:	fb93 f1f2 	sdiv	r1, r3, r2
 8023dcc:	fb02 3311 	mls	r3, r2, r1, r3
 8023dd0:	b903      	cbnz	r3, 8023dd4 <mktime+0x60>
 8023dd2:	3501      	adds	r5, #1
 8023dd4:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8023dd8:	3310      	adds	r3, #16
 8023dda:	f644 6220 	movw	r2, #20000	; 0x4e20
 8023dde:	4293      	cmp	r3, r2
 8023de0:	61fd      	str	r5, [r7, #28]
 8023de2:	f200 815d 	bhi.w	80240a0 <mktime+0x32c>
 8023de6:	2e46      	cmp	r6, #70	; 0x46
 8023de8:	dd71      	ble.n	8023ece <mktime+0x15a>
 8023dea:	2346      	movs	r3, #70	; 0x46
 8023dec:	f240 1c6d 	movw	ip, #365	; 0x16d
 8023df0:	2164      	movs	r1, #100	; 0x64
 8023df2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8023df6:	079a      	lsls	r2, r3, #30
 8023df8:	d163      	bne.n	8023ec2 <mktime+0x14e>
 8023dfa:	fb93 f2f1 	sdiv	r2, r3, r1
 8023dfe:	fb01 3212 	mls	r2, r1, r2, r3
 8023e02:	2a00      	cmp	r2, #0
 8023e04:	d160      	bne.n	8023ec8 <mktime+0x154>
 8023e06:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8023e0a:	fb92 fef0 	sdiv	lr, r2, r0
 8023e0e:	fb00 221e 	mls	r2, r0, lr, r2
 8023e12:	2a00      	cmp	r2, #0
 8023e14:	bf14      	ite	ne
 8023e16:	4662      	movne	r2, ip
 8023e18:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8023e1c:	3301      	adds	r3, #1
 8023e1e:	429e      	cmp	r6, r3
 8023e20:	4415      	add	r5, r2
 8023e22:	d1e8      	bne.n	8023df6 <mktime+0x82>
 8023e24:	4b99      	ldr	r3, [pc, #612]	; (802408c <mktime+0x318>)
 8023e26:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8023e2a:	fbc5 4803 	smlal	r4, r8, r5, r3
 8023e2e:	f002 f817 	bl	8025e60 <__tz_lock>
 8023e32:	f002 f821 	bl	8025e78 <_tzset_unlocked>
 8023e36:	4b96      	ldr	r3, [pc, #600]	; (8024090 <mktime+0x31c>)
 8023e38:	f8d3 b000 	ldr.w	fp, [r3]
 8023e3c:	f1bb 0f00 	cmp.w	fp, #0
 8023e40:	d039      	beq.n	8023eb6 <mktime+0x142>
 8023e42:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8023e46:	6978      	ldr	r0, [r7, #20]
 8023e48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8023e4c:	f1bb 0f01 	cmp.w	fp, #1
 8023e50:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8023e54:	46da      	mov	sl, fp
 8023e56:	bfa8      	it	ge
 8023e58:	f04f 0a01 	movge.w	sl, #1
 8023e5c:	4283      	cmp	r3, r0
 8023e5e:	d178      	bne.n	8023f52 <mktime+0x1de>
 8023e60:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8023e64:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8023e68:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8023e6c:	1a5b      	subs	r3, r3, r1
 8023e6e:	9302      	str	r3, [sp, #8]
 8023e70:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8023e74:	9303      	str	r3, [sp, #12]
 8023e76:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8023e7a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8023e7e:	9301      	str	r3, [sp, #4]
 8023e80:	ebb3 0c02 	subs.w	ip, r3, r2
 8023e84:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8023e88:	4564      	cmp	r4, ip
 8023e8a:	eb78 0300 	sbcs.w	r3, r8, r0
 8023e8e:	da66      	bge.n	8023f5e <mktime+0x1ea>
 8023e90:	f8d9 3000 	ldr.w	r3, [r9]
 8023e94:	2b00      	cmp	r3, #0
 8023e96:	d06f      	beq.n	8023f78 <mktime+0x204>
 8023e98:	9b02      	ldr	r3, [sp, #8]
 8023e9a:	429c      	cmp	r4, r3
 8023e9c:	9b03      	ldr	r3, [sp, #12]
 8023e9e:	eb78 0303 	sbcs.w	r3, r8, r3
 8023ea2:	db03      	blt.n	8023eac <mktime+0x138>
 8023ea4:	4564      	cmp	r4, ip
 8023ea6:	eb78 0300 	sbcs.w	r3, r8, r0
 8023eaa:	db6b      	blt.n	8023f84 <mktime+0x210>
 8023eac:	f1bb 0f00 	cmp.w	fp, #0
 8023eb0:	f04f 0b00 	mov.w	fp, #0
 8023eb4:	da6b      	bge.n	8023f8e <mktime+0x21a>
 8023eb6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8023eba:	190c      	adds	r4, r1, r4
 8023ebc:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8023ec0:	e0a9      	b.n	8024016 <mktime+0x2a2>
 8023ec2:	f240 126d 	movw	r2, #365	; 0x16d
 8023ec6:	e7a9      	b.n	8023e1c <mktime+0xa8>
 8023ec8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8023ecc:	e7a6      	b.n	8023e1c <mktime+0xa8>
 8023ece:	d0a9      	beq.n	8023e24 <mktime+0xb0>
 8023ed0:	2345      	movs	r3, #69	; 0x45
 8023ed2:	f240 1c6d 	movw	ip, #365	; 0x16d
 8023ed6:	2164      	movs	r1, #100	; 0x64
 8023ed8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8023edc:	e012      	b.n	8023f04 <mktime+0x190>
 8023ede:	bb62      	cbnz	r2, 8023f3a <mktime+0x1c6>
 8023ee0:	fb93 f2f1 	sdiv	r2, r3, r1
 8023ee4:	fb01 3212 	mls	r2, r1, r2, r3
 8023ee8:	bb52      	cbnz	r2, 8023f40 <mktime+0x1cc>
 8023eea:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8023eee:	fb92 fef0 	sdiv	lr, r2, r0
 8023ef2:	fb00 221e 	mls	r2, r0, lr, r2
 8023ef6:	2a00      	cmp	r2, #0
 8023ef8:	bf14      	ite	ne
 8023efa:	4662      	movne	r2, ip
 8023efc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8023f00:	1aad      	subs	r5, r5, r2
 8023f02:	3b01      	subs	r3, #1
 8023f04:	429e      	cmp	r6, r3
 8023f06:	f003 0203 	and.w	r2, r3, #3
 8023f0a:	dbe8      	blt.n	8023ede <mktime+0x16a>
 8023f0c:	b9da      	cbnz	r2, 8023f46 <mktime+0x1d2>
 8023f0e:	2264      	movs	r2, #100	; 0x64
 8023f10:	fb96 f3f2 	sdiv	r3, r6, r2
 8023f14:	fb02 6313 	mls	r3, r2, r3, r6
 8023f18:	b9c3      	cbnz	r3, 8023f4c <mktime+0x1d8>
 8023f1a:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8023f1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023f22:	fb93 f1f2 	sdiv	r1, r3, r2
 8023f26:	fb02 3311 	mls	r3, r2, r1, r3
 8023f2a:	2b00      	cmp	r3, #0
 8023f2c:	f240 136d 	movw	r3, #365	; 0x16d
 8023f30:	bf08      	it	eq
 8023f32:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8023f36:	1aed      	subs	r5, r5, r3
 8023f38:	e774      	b.n	8023e24 <mktime+0xb0>
 8023f3a:	f240 126d 	movw	r2, #365	; 0x16d
 8023f3e:	e7df      	b.n	8023f00 <mktime+0x18c>
 8023f40:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8023f44:	e7dc      	b.n	8023f00 <mktime+0x18c>
 8023f46:	f240 136d 	movw	r3, #365	; 0x16d
 8023f4a:	e7f4      	b.n	8023f36 <mktime+0x1c2>
 8023f4c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8023f50:	e7f1      	b.n	8023f36 <mktime+0x1c2>
 8023f52:	f001 fedb 	bl	8025d0c <__tzcalc_limits>
 8023f56:	2800      	cmp	r0, #0
 8023f58:	d182      	bne.n	8023e60 <mktime+0xec>
 8023f5a:	46d3      	mov	fp, sl
 8023f5c:	e050      	b.n	8024000 <mktime+0x28c>
 8023f5e:	9b01      	ldr	r3, [sp, #4]
 8023f60:	1a5b      	subs	r3, r3, r1
 8023f62:	9301      	str	r3, [sp, #4]
 8023f64:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8023f68:	eb6e 0e03 	sbc.w	lr, lr, r3
 8023f6c:	9b01      	ldr	r3, [sp, #4]
 8023f6e:	429c      	cmp	r4, r3
 8023f70:	eb78 030e 	sbcs.w	r3, r8, lr
 8023f74:	dbf1      	blt.n	8023f5a <mktime+0x1e6>
 8023f76:	e78b      	b.n	8023e90 <mktime+0x11c>
 8023f78:	9b02      	ldr	r3, [sp, #8]
 8023f7a:	429c      	cmp	r4, r3
 8023f7c:	9b03      	ldr	r3, [sp, #12]
 8023f7e:	eb78 0303 	sbcs.w	r3, r8, r3
 8023f82:	db8f      	blt.n	8023ea4 <mktime+0x130>
 8023f84:	f1bb 0f00 	cmp.w	fp, #0
 8023f88:	db3e      	blt.n	8024008 <mktime+0x294>
 8023f8a:	f04f 0b01 	mov.w	fp, #1
 8023f8e:	ea8a 0a0b 	eor.w	sl, sl, fp
 8023f92:	f1ba 0f01 	cmp.w	sl, #1
 8023f96:	d133      	bne.n	8024000 <mktime+0x28c>
 8023f98:	f1bb 0f00 	cmp.w	fp, #0
 8023f9c:	d04e      	beq.n	802403c <mktime+0x2c8>
 8023f9e:	1a52      	subs	r2, r2, r1
 8023fa0:	683b      	ldr	r3, [r7, #0]
 8023fa2:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8023fa6:	4413      	add	r3, r2
 8023fa8:	1914      	adds	r4, r2, r4
 8023faa:	603b      	str	r3, [r7, #0]
 8023fac:	4638      	mov	r0, r7
 8023fae:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8023fb2:	f7ff fe07 	bl	8023bc4 <validate_structure>
 8023fb6:	68fa      	ldr	r2, [r7, #12]
 8023fb8:	ebb2 020a 	subs.w	r2, r2, sl
 8023fbc:	d020      	beq.n	8024000 <mktime+0x28c>
 8023fbe:	2a01      	cmp	r2, #1
 8023fc0:	dc3e      	bgt.n	8024040 <mktime+0x2cc>
 8023fc2:	1c90      	adds	r0, r2, #2
 8023fc4:	bfd8      	it	le
 8023fc6:	2201      	movle	r2, #1
 8023fc8:	69fb      	ldr	r3, [r7, #28]
 8023fca:	18d3      	adds	r3, r2, r3
 8023fcc:	4415      	add	r5, r2
 8023fce:	d540      	bpl.n	8024052 <mktime+0x2de>
 8023fd0:	1e73      	subs	r3, r6, #1
 8023fd2:	0799      	lsls	r1, r3, #30
 8023fd4:	d137      	bne.n	8024046 <mktime+0x2d2>
 8023fd6:	2264      	movs	r2, #100	; 0x64
 8023fd8:	fb93 f1f2 	sdiv	r1, r3, r2
 8023fdc:	fb02 3311 	mls	r3, r2, r1, r3
 8023fe0:	bba3      	cbnz	r3, 802404c <mktime+0x2d8>
 8023fe2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023fe6:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8023fea:	fb96 f2f3 	sdiv	r2, r6, r3
 8023fee:	fb03 6612 	mls	r6, r3, r2, r6
 8023ff2:	2e00      	cmp	r6, #0
 8023ff4:	f240 136d 	movw	r3, #365	; 0x16d
 8023ff8:	bf18      	it	ne
 8023ffa:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8023ffe:	61fb      	str	r3, [r7, #28]
 8024000:	f1bb 0f01 	cmp.w	fp, #1
 8024004:	f47f af57 	bne.w	8023eb6 <mktime+0x142>
 8024008:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 802400c:	190c      	adds	r4, r1, r4
 802400e:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8024012:	f04f 0b01 	mov.w	fp, #1
 8024016:	f001 ff29 	bl	8025e6c <__tz_unlock>
 802401a:	3504      	adds	r5, #4
 802401c:	2307      	movs	r3, #7
 802401e:	fb95 f3f3 	sdiv	r3, r5, r3
 8024022:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8024026:	1aed      	subs	r5, r5, r3
 8024028:	bf48      	it	mi
 802402a:	3507      	addmi	r5, #7
 802402c:	f8c7 b020 	str.w	fp, [r7, #32]
 8024030:	61bd      	str	r5, [r7, #24]
 8024032:	4620      	mov	r0, r4
 8024034:	4641      	mov	r1, r8
 8024036:	b005      	add	sp, #20
 8024038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802403c:	1a8a      	subs	r2, r1, r2
 802403e:	e7af      	b.n	8023fa0 <mktime+0x22c>
 8024040:	f04f 32ff 	mov.w	r2, #4294967295
 8024044:	e7c0      	b.n	8023fc8 <mktime+0x254>
 8024046:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 802404a:	e7d8      	b.n	8023ffe <mktime+0x28a>
 802404c:	f240 136d 	movw	r3, #365	; 0x16d
 8024050:	e7d5      	b.n	8023ffe <mktime+0x28a>
 8024052:	07b2      	lsls	r2, r6, #30
 8024054:	d11e      	bne.n	8024094 <mktime+0x320>
 8024056:	2164      	movs	r1, #100	; 0x64
 8024058:	fb96 f2f1 	sdiv	r2, r6, r1
 802405c:	fb01 6212 	mls	r2, r1, r2, r6
 8024060:	b9da      	cbnz	r2, 802409a <mktime+0x326>
 8024062:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8024066:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 802406a:	fb96 f1f2 	sdiv	r1, r6, r2
 802406e:	fb02 6611 	mls	r6, r2, r1, r6
 8024072:	2e00      	cmp	r6, #0
 8024074:	f240 126d 	movw	r2, #365	; 0x16d
 8024078:	bf08      	it	eq
 802407a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802407e:	4293      	cmp	r3, r2
 8024080:	bfa8      	it	ge
 8024082:	1a9b      	subge	r3, r3, r2
 8024084:	e7bb      	b.n	8023ffe <mktime+0x28a>
 8024086:	bf00      	nop
 8024088:	08045120 	.word	0x08045120
 802408c:	00015180 	.word	0x00015180
 8024090:	2002f86c 	.word	0x2002f86c
 8024094:	f240 126d 	movw	r2, #365	; 0x16d
 8024098:	e7f1      	b.n	802407e <mktime+0x30a>
 802409a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802409e:	e7ee      	b.n	802407e <mktime+0x30a>
 80240a0:	f04f 34ff 	mov.w	r4, #4294967295
 80240a4:	46a0      	mov	r8, r4
 80240a6:	e7c4      	b.n	8024032 <mktime+0x2be>

080240a8 <_free_r>:
 80240a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80240aa:	2900      	cmp	r1, #0
 80240ac:	d044      	beq.n	8024138 <_free_r+0x90>
 80240ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80240b2:	9001      	str	r0, [sp, #4]
 80240b4:	2b00      	cmp	r3, #0
 80240b6:	f1a1 0404 	sub.w	r4, r1, #4
 80240ba:	bfb8      	it	lt
 80240bc:	18e4      	addlt	r4, r4, r3
 80240be:	f003 fa0b 	bl	80274d8 <__malloc_lock>
 80240c2:	4a1e      	ldr	r2, [pc, #120]	; (802413c <_free_r+0x94>)
 80240c4:	9801      	ldr	r0, [sp, #4]
 80240c6:	6813      	ldr	r3, [r2, #0]
 80240c8:	b933      	cbnz	r3, 80240d8 <_free_r+0x30>
 80240ca:	6063      	str	r3, [r4, #4]
 80240cc:	6014      	str	r4, [r2, #0]
 80240ce:	b003      	add	sp, #12
 80240d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80240d4:	f003 ba06 	b.w	80274e4 <__malloc_unlock>
 80240d8:	42a3      	cmp	r3, r4
 80240da:	d908      	bls.n	80240ee <_free_r+0x46>
 80240dc:	6825      	ldr	r5, [r4, #0]
 80240de:	1961      	adds	r1, r4, r5
 80240e0:	428b      	cmp	r3, r1
 80240e2:	bf01      	itttt	eq
 80240e4:	6819      	ldreq	r1, [r3, #0]
 80240e6:	685b      	ldreq	r3, [r3, #4]
 80240e8:	1949      	addeq	r1, r1, r5
 80240ea:	6021      	streq	r1, [r4, #0]
 80240ec:	e7ed      	b.n	80240ca <_free_r+0x22>
 80240ee:	461a      	mov	r2, r3
 80240f0:	685b      	ldr	r3, [r3, #4]
 80240f2:	b10b      	cbz	r3, 80240f8 <_free_r+0x50>
 80240f4:	42a3      	cmp	r3, r4
 80240f6:	d9fa      	bls.n	80240ee <_free_r+0x46>
 80240f8:	6811      	ldr	r1, [r2, #0]
 80240fa:	1855      	adds	r5, r2, r1
 80240fc:	42a5      	cmp	r5, r4
 80240fe:	d10b      	bne.n	8024118 <_free_r+0x70>
 8024100:	6824      	ldr	r4, [r4, #0]
 8024102:	4421      	add	r1, r4
 8024104:	1854      	adds	r4, r2, r1
 8024106:	42a3      	cmp	r3, r4
 8024108:	6011      	str	r1, [r2, #0]
 802410a:	d1e0      	bne.n	80240ce <_free_r+0x26>
 802410c:	681c      	ldr	r4, [r3, #0]
 802410e:	685b      	ldr	r3, [r3, #4]
 8024110:	6053      	str	r3, [r2, #4]
 8024112:	4421      	add	r1, r4
 8024114:	6011      	str	r1, [r2, #0]
 8024116:	e7da      	b.n	80240ce <_free_r+0x26>
 8024118:	d902      	bls.n	8024120 <_free_r+0x78>
 802411a:	230c      	movs	r3, #12
 802411c:	6003      	str	r3, [r0, #0]
 802411e:	e7d6      	b.n	80240ce <_free_r+0x26>
 8024120:	6825      	ldr	r5, [r4, #0]
 8024122:	1961      	adds	r1, r4, r5
 8024124:	428b      	cmp	r3, r1
 8024126:	bf04      	itt	eq
 8024128:	6819      	ldreq	r1, [r3, #0]
 802412a:	685b      	ldreq	r3, [r3, #4]
 802412c:	6063      	str	r3, [r4, #4]
 802412e:	bf04      	itt	eq
 8024130:	1949      	addeq	r1, r1, r5
 8024132:	6021      	streq	r1, [r4, #0]
 8024134:	6054      	str	r4, [r2, #4]
 8024136:	e7ca      	b.n	80240ce <_free_r+0x26>
 8024138:	b003      	add	sp, #12
 802413a:	bd30      	pop	{r4, r5, pc}
 802413c:	2002f844 	.word	0x2002f844

08024140 <sbrk_aligned>:
 8024140:	b570      	push	{r4, r5, r6, lr}
 8024142:	4e0e      	ldr	r6, [pc, #56]	; (802417c <sbrk_aligned+0x3c>)
 8024144:	460c      	mov	r4, r1
 8024146:	6831      	ldr	r1, [r6, #0]
 8024148:	4605      	mov	r5, r0
 802414a:	b911      	cbnz	r1, 8024152 <sbrk_aligned+0x12>
 802414c:	f000 fe7c 	bl	8024e48 <_sbrk_r>
 8024150:	6030      	str	r0, [r6, #0]
 8024152:	4621      	mov	r1, r4
 8024154:	4628      	mov	r0, r5
 8024156:	f000 fe77 	bl	8024e48 <_sbrk_r>
 802415a:	1c43      	adds	r3, r0, #1
 802415c:	d00a      	beq.n	8024174 <sbrk_aligned+0x34>
 802415e:	1cc4      	adds	r4, r0, #3
 8024160:	f024 0403 	bic.w	r4, r4, #3
 8024164:	42a0      	cmp	r0, r4
 8024166:	d007      	beq.n	8024178 <sbrk_aligned+0x38>
 8024168:	1a21      	subs	r1, r4, r0
 802416a:	4628      	mov	r0, r5
 802416c:	f000 fe6c 	bl	8024e48 <_sbrk_r>
 8024170:	3001      	adds	r0, #1
 8024172:	d101      	bne.n	8024178 <sbrk_aligned+0x38>
 8024174:	f04f 34ff 	mov.w	r4, #4294967295
 8024178:	4620      	mov	r0, r4
 802417a:	bd70      	pop	{r4, r5, r6, pc}
 802417c:	2002f848 	.word	0x2002f848

08024180 <_malloc_r>:
 8024180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024184:	1ccd      	adds	r5, r1, #3
 8024186:	f025 0503 	bic.w	r5, r5, #3
 802418a:	3508      	adds	r5, #8
 802418c:	2d0c      	cmp	r5, #12
 802418e:	bf38      	it	cc
 8024190:	250c      	movcc	r5, #12
 8024192:	2d00      	cmp	r5, #0
 8024194:	4607      	mov	r7, r0
 8024196:	db01      	blt.n	802419c <_malloc_r+0x1c>
 8024198:	42a9      	cmp	r1, r5
 802419a:	d905      	bls.n	80241a8 <_malloc_r+0x28>
 802419c:	230c      	movs	r3, #12
 802419e:	603b      	str	r3, [r7, #0]
 80241a0:	2600      	movs	r6, #0
 80241a2:	4630      	mov	r0, r6
 80241a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241a8:	4e2e      	ldr	r6, [pc, #184]	; (8024264 <_malloc_r+0xe4>)
 80241aa:	f003 f995 	bl	80274d8 <__malloc_lock>
 80241ae:	6833      	ldr	r3, [r6, #0]
 80241b0:	461c      	mov	r4, r3
 80241b2:	bb34      	cbnz	r4, 8024202 <_malloc_r+0x82>
 80241b4:	4629      	mov	r1, r5
 80241b6:	4638      	mov	r0, r7
 80241b8:	f7ff ffc2 	bl	8024140 <sbrk_aligned>
 80241bc:	1c43      	adds	r3, r0, #1
 80241be:	4604      	mov	r4, r0
 80241c0:	d14d      	bne.n	802425e <_malloc_r+0xde>
 80241c2:	6834      	ldr	r4, [r6, #0]
 80241c4:	4626      	mov	r6, r4
 80241c6:	2e00      	cmp	r6, #0
 80241c8:	d140      	bne.n	802424c <_malloc_r+0xcc>
 80241ca:	6823      	ldr	r3, [r4, #0]
 80241cc:	4631      	mov	r1, r6
 80241ce:	4638      	mov	r0, r7
 80241d0:	eb04 0803 	add.w	r8, r4, r3
 80241d4:	f000 fe38 	bl	8024e48 <_sbrk_r>
 80241d8:	4580      	cmp	r8, r0
 80241da:	d13a      	bne.n	8024252 <_malloc_r+0xd2>
 80241dc:	6821      	ldr	r1, [r4, #0]
 80241de:	3503      	adds	r5, #3
 80241e0:	1a6d      	subs	r5, r5, r1
 80241e2:	f025 0503 	bic.w	r5, r5, #3
 80241e6:	3508      	adds	r5, #8
 80241e8:	2d0c      	cmp	r5, #12
 80241ea:	bf38      	it	cc
 80241ec:	250c      	movcc	r5, #12
 80241ee:	4629      	mov	r1, r5
 80241f0:	4638      	mov	r0, r7
 80241f2:	f7ff ffa5 	bl	8024140 <sbrk_aligned>
 80241f6:	3001      	adds	r0, #1
 80241f8:	d02b      	beq.n	8024252 <_malloc_r+0xd2>
 80241fa:	6823      	ldr	r3, [r4, #0]
 80241fc:	442b      	add	r3, r5
 80241fe:	6023      	str	r3, [r4, #0]
 8024200:	e00e      	b.n	8024220 <_malloc_r+0xa0>
 8024202:	6822      	ldr	r2, [r4, #0]
 8024204:	1b52      	subs	r2, r2, r5
 8024206:	d41e      	bmi.n	8024246 <_malloc_r+0xc6>
 8024208:	2a0b      	cmp	r2, #11
 802420a:	d916      	bls.n	802423a <_malloc_r+0xba>
 802420c:	1961      	adds	r1, r4, r5
 802420e:	42a3      	cmp	r3, r4
 8024210:	6025      	str	r5, [r4, #0]
 8024212:	bf18      	it	ne
 8024214:	6059      	strne	r1, [r3, #4]
 8024216:	6863      	ldr	r3, [r4, #4]
 8024218:	bf08      	it	eq
 802421a:	6031      	streq	r1, [r6, #0]
 802421c:	5162      	str	r2, [r4, r5]
 802421e:	604b      	str	r3, [r1, #4]
 8024220:	4638      	mov	r0, r7
 8024222:	f104 060b 	add.w	r6, r4, #11
 8024226:	f003 f95d 	bl	80274e4 <__malloc_unlock>
 802422a:	f026 0607 	bic.w	r6, r6, #7
 802422e:	1d23      	adds	r3, r4, #4
 8024230:	1af2      	subs	r2, r6, r3
 8024232:	d0b6      	beq.n	80241a2 <_malloc_r+0x22>
 8024234:	1b9b      	subs	r3, r3, r6
 8024236:	50a3      	str	r3, [r4, r2]
 8024238:	e7b3      	b.n	80241a2 <_malloc_r+0x22>
 802423a:	6862      	ldr	r2, [r4, #4]
 802423c:	42a3      	cmp	r3, r4
 802423e:	bf0c      	ite	eq
 8024240:	6032      	streq	r2, [r6, #0]
 8024242:	605a      	strne	r2, [r3, #4]
 8024244:	e7ec      	b.n	8024220 <_malloc_r+0xa0>
 8024246:	4623      	mov	r3, r4
 8024248:	6864      	ldr	r4, [r4, #4]
 802424a:	e7b2      	b.n	80241b2 <_malloc_r+0x32>
 802424c:	4634      	mov	r4, r6
 802424e:	6876      	ldr	r6, [r6, #4]
 8024250:	e7b9      	b.n	80241c6 <_malloc_r+0x46>
 8024252:	230c      	movs	r3, #12
 8024254:	603b      	str	r3, [r7, #0]
 8024256:	4638      	mov	r0, r7
 8024258:	f003 f944 	bl	80274e4 <__malloc_unlock>
 802425c:	e7a1      	b.n	80241a2 <_malloc_r+0x22>
 802425e:	6025      	str	r5, [r4, #0]
 8024260:	e7de      	b.n	8024220 <_malloc_r+0xa0>
 8024262:	bf00      	nop
 8024264:	2002f844 	.word	0x2002f844

08024268 <__cvt>:
 8024268:	b5f0      	push	{r4, r5, r6, r7, lr}
 802426a:	ed2d 8b02 	vpush	{d8}
 802426e:	eeb0 8b40 	vmov.f64	d8, d0
 8024272:	b085      	sub	sp, #20
 8024274:	4617      	mov	r7, r2
 8024276:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024278:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802427a:	ee18 2a90 	vmov	r2, s17
 802427e:	f025 0520 	bic.w	r5, r5, #32
 8024282:	2a00      	cmp	r2, #0
 8024284:	bfb6      	itet	lt
 8024286:	222d      	movlt	r2, #45	; 0x2d
 8024288:	2200      	movge	r2, #0
 802428a:	eeb1 8b40 	vneglt.f64	d8, d0
 802428e:	2d46      	cmp	r5, #70	; 0x46
 8024290:	460c      	mov	r4, r1
 8024292:	701a      	strb	r2, [r3, #0]
 8024294:	d004      	beq.n	80242a0 <__cvt+0x38>
 8024296:	2d45      	cmp	r5, #69	; 0x45
 8024298:	d100      	bne.n	802429c <__cvt+0x34>
 802429a:	3401      	adds	r4, #1
 802429c:	2102      	movs	r1, #2
 802429e:	e000      	b.n	80242a2 <__cvt+0x3a>
 80242a0:	2103      	movs	r1, #3
 80242a2:	ab03      	add	r3, sp, #12
 80242a4:	9301      	str	r3, [sp, #4]
 80242a6:	ab02      	add	r3, sp, #8
 80242a8:	9300      	str	r3, [sp, #0]
 80242aa:	4622      	mov	r2, r4
 80242ac:	4633      	mov	r3, r6
 80242ae:	eeb0 0b48 	vmov.f64	d0, d8
 80242b2:	f002 f955 	bl	8026560 <_dtoa_r>
 80242b6:	2d47      	cmp	r5, #71	; 0x47
 80242b8:	d101      	bne.n	80242be <__cvt+0x56>
 80242ba:	07fb      	lsls	r3, r7, #31
 80242bc:	d51a      	bpl.n	80242f4 <__cvt+0x8c>
 80242be:	2d46      	cmp	r5, #70	; 0x46
 80242c0:	eb00 0204 	add.w	r2, r0, r4
 80242c4:	d10c      	bne.n	80242e0 <__cvt+0x78>
 80242c6:	7803      	ldrb	r3, [r0, #0]
 80242c8:	2b30      	cmp	r3, #48	; 0x30
 80242ca:	d107      	bne.n	80242dc <__cvt+0x74>
 80242cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80242d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242d4:	bf1c      	itt	ne
 80242d6:	f1c4 0401 	rsbne	r4, r4, #1
 80242da:	6034      	strne	r4, [r6, #0]
 80242dc:	6833      	ldr	r3, [r6, #0]
 80242de:	441a      	add	r2, r3
 80242e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80242e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242e8:	bf08      	it	eq
 80242ea:	9203      	streq	r2, [sp, #12]
 80242ec:	2130      	movs	r1, #48	; 0x30
 80242ee:	9b03      	ldr	r3, [sp, #12]
 80242f0:	4293      	cmp	r3, r2
 80242f2:	d307      	bcc.n	8024304 <__cvt+0x9c>
 80242f4:	9b03      	ldr	r3, [sp, #12]
 80242f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80242f8:	1a1b      	subs	r3, r3, r0
 80242fa:	6013      	str	r3, [r2, #0]
 80242fc:	b005      	add	sp, #20
 80242fe:	ecbd 8b02 	vpop	{d8}
 8024302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024304:	1c5c      	adds	r4, r3, #1
 8024306:	9403      	str	r4, [sp, #12]
 8024308:	7019      	strb	r1, [r3, #0]
 802430a:	e7f0      	b.n	80242ee <__cvt+0x86>

0802430c <__exponent>:
 802430c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802430e:	4603      	mov	r3, r0
 8024310:	2900      	cmp	r1, #0
 8024312:	bfb8      	it	lt
 8024314:	4249      	neglt	r1, r1
 8024316:	f803 2b02 	strb.w	r2, [r3], #2
 802431a:	bfb4      	ite	lt
 802431c:	222d      	movlt	r2, #45	; 0x2d
 802431e:	222b      	movge	r2, #43	; 0x2b
 8024320:	2909      	cmp	r1, #9
 8024322:	7042      	strb	r2, [r0, #1]
 8024324:	dd2a      	ble.n	802437c <__exponent+0x70>
 8024326:	f10d 0407 	add.w	r4, sp, #7
 802432a:	46a4      	mov	ip, r4
 802432c:	270a      	movs	r7, #10
 802432e:	46a6      	mov	lr, r4
 8024330:	460a      	mov	r2, r1
 8024332:	fb91 f6f7 	sdiv	r6, r1, r7
 8024336:	fb07 1516 	mls	r5, r7, r6, r1
 802433a:	3530      	adds	r5, #48	; 0x30
 802433c:	2a63      	cmp	r2, #99	; 0x63
 802433e:	f104 34ff 	add.w	r4, r4, #4294967295
 8024342:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8024346:	4631      	mov	r1, r6
 8024348:	dcf1      	bgt.n	802432e <__exponent+0x22>
 802434a:	3130      	adds	r1, #48	; 0x30
 802434c:	f1ae 0502 	sub.w	r5, lr, #2
 8024350:	f804 1c01 	strb.w	r1, [r4, #-1]
 8024354:	1c44      	adds	r4, r0, #1
 8024356:	4629      	mov	r1, r5
 8024358:	4561      	cmp	r1, ip
 802435a:	d30a      	bcc.n	8024372 <__exponent+0x66>
 802435c:	f10d 0209 	add.w	r2, sp, #9
 8024360:	eba2 020e 	sub.w	r2, r2, lr
 8024364:	4565      	cmp	r5, ip
 8024366:	bf88      	it	hi
 8024368:	2200      	movhi	r2, #0
 802436a:	4413      	add	r3, r2
 802436c:	1a18      	subs	r0, r3, r0
 802436e:	b003      	add	sp, #12
 8024370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024376:	f804 2f01 	strb.w	r2, [r4, #1]!
 802437a:	e7ed      	b.n	8024358 <__exponent+0x4c>
 802437c:	2330      	movs	r3, #48	; 0x30
 802437e:	3130      	adds	r1, #48	; 0x30
 8024380:	7083      	strb	r3, [r0, #2]
 8024382:	70c1      	strb	r1, [r0, #3]
 8024384:	1d03      	adds	r3, r0, #4
 8024386:	e7f1      	b.n	802436c <__exponent+0x60>

08024388 <_printf_float>:
 8024388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802438c:	b08b      	sub	sp, #44	; 0x2c
 802438e:	460c      	mov	r4, r1
 8024390:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8024394:	4616      	mov	r6, r2
 8024396:	461f      	mov	r7, r3
 8024398:	4605      	mov	r5, r0
 802439a:	f003 f821 	bl	80273e0 <_localeconv_r>
 802439e:	f8d0 b000 	ldr.w	fp, [r0]
 80243a2:	4658      	mov	r0, fp
 80243a4:	f7db ff56 	bl	8000254 <strlen>
 80243a8:	2300      	movs	r3, #0
 80243aa:	9308      	str	r3, [sp, #32]
 80243ac:	f8d8 3000 	ldr.w	r3, [r8]
 80243b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80243b4:	6822      	ldr	r2, [r4, #0]
 80243b6:	3307      	adds	r3, #7
 80243b8:	f023 0307 	bic.w	r3, r3, #7
 80243bc:	f103 0108 	add.w	r1, r3, #8
 80243c0:	f8c8 1000 	str.w	r1, [r8]
 80243c4:	4682      	mov	sl, r0
 80243c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80243ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80243ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8024630 <_printf_float+0x2a8>
 80243d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80243d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80243da:	eeb4 6b47 	vcmp.f64	d6, d7
 80243de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80243e2:	dd24      	ble.n	802442e <_printf_float+0xa6>
 80243e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80243e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80243ec:	d502      	bpl.n	80243f4 <_printf_float+0x6c>
 80243ee:	232d      	movs	r3, #45	; 0x2d
 80243f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80243f4:	4b90      	ldr	r3, [pc, #576]	; (8024638 <_printf_float+0x2b0>)
 80243f6:	4891      	ldr	r0, [pc, #580]	; (802463c <_printf_float+0x2b4>)
 80243f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80243fc:	bf94      	ite	ls
 80243fe:	4698      	movls	r8, r3
 8024400:	4680      	movhi	r8, r0
 8024402:	2303      	movs	r3, #3
 8024404:	6123      	str	r3, [r4, #16]
 8024406:	f022 0204 	bic.w	r2, r2, #4
 802440a:	2300      	movs	r3, #0
 802440c:	6022      	str	r2, [r4, #0]
 802440e:	9304      	str	r3, [sp, #16]
 8024410:	9700      	str	r7, [sp, #0]
 8024412:	4633      	mov	r3, r6
 8024414:	aa09      	add	r2, sp, #36	; 0x24
 8024416:	4621      	mov	r1, r4
 8024418:	4628      	mov	r0, r5
 802441a:	f000 f9d3 	bl	80247c4 <_printf_common>
 802441e:	3001      	adds	r0, #1
 8024420:	f040 808a 	bne.w	8024538 <_printf_float+0x1b0>
 8024424:	f04f 30ff 	mov.w	r0, #4294967295
 8024428:	b00b      	add	sp, #44	; 0x2c
 802442a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802442e:	eeb4 0b40 	vcmp.f64	d0, d0
 8024432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024436:	d709      	bvc.n	802444c <_printf_float+0xc4>
 8024438:	ee10 3a90 	vmov	r3, s1
 802443c:	2b00      	cmp	r3, #0
 802443e:	bfbc      	itt	lt
 8024440:	232d      	movlt	r3, #45	; 0x2d
 8024442:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8024446:	487e      	ldr	r0, [pc, #504]	; (8024640 <_printf_float+0x2b8>)
 8024448:	4b7e      	ldr	r3, [pc, #504]	; (8024644 <_printf_float+0x2bc>)
 802444a:	e7d5      	b.n	80243f8 <_printf_float+0x70>
 802444c:	6863      	ldr	r3, [r4, #4]
 802444e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8024452:	9104      	str	r1, [sp, #16]
 8024454:	1c59      	adds	r1, r3, #1
 8024456:	d13c      	bne.n	80244d2 <_printf_float+0x14a>
 8024458:	2306      	movs	r3, #6
 802445a:	6063      	str	r3, [r4, #4]
 802445c:	2300      	movs	r3, #0
 802445e:	9303      	str	r3, [sp, #12]
 8024460:	ab08      	add	r3, sp, #32
 8024462:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8024466:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802446a:	ab07      	add	r3, sp, #28
 802446c:	6861      	ldr	r1, [r4, #4]
 802446e:	9300      	str	r3, [sp, #0]
 8024470:	6022      	str	r2, [r4, #0]
 8024472:	f10d 031b 	add.w	r3, sp, #27
 8024476:	4628      	mov	r0, r5
 8024478:	f7ff fef6 	bl	8024268 <__cvt>
 802447c:	9b04      	ldr	r3, [sp, #16]
 802447e:	9907      	ldr	r1, [sp, #28]
 8024480:	2b47      	cmp	r3, #71	; 0x47
 8024482:	4680      	mov	r8, r0
 8024484:	d108      	bne.n	8024498 <_printf_float+0x110>
 8024486:	1cc8      	adds	r0, r1, #3
 8024488:	db02      	blt.n	8024490 <_printf_float+0x108>
 802448a:	6863      	ldr	r3, [r4, #4]
 802448c:	4299      	cmp	r1, r3
 802448e:	dd41      	ble.n	8024514 <_printf_float+0x18c>
 8024490:	f1a9 0902 	sub.w	r9, r9, #2
 8024494:	fa5f f989 	uxtb.w	r9, r9
 8024498:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802449c:	d820      	bhi.n	80244e0 <_printf_float+0x158>
 802449e:	3901      	subs	r1, #1
 80244a0:	464a      	mov	r2, r9
 80244a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80244a6:	9107      	str	r1, [sp, #28]
 80244a8:	f7ff ff30 	bl	802430c <__exponent>
 80244ac:	9a08      	ldr	r2, [sp, #32]
 80244ae:	9004      	str	r0, [sp, #16]
 80244b0:	1813      	adds	r3, r2, r0
 80244b2:	2a01      	cmp	r2, #1
 80244b4:	6123      	str	r3, [r4, #16]
 80244b6:	dc02      	bgt.n	80244be <_printf_float+0x136>
 80244b8:	6822      	ldr	r2, [r4, #0]
 80244ba:	07d2      	lsls	r2, r2, #31
 80244bc:	d501      	bpl.n	80244c2 <_printf_float+0x13a>
 80244be:	3301      	adds	r3, #1
 80244c0:	6123      	str	r3, [r4, #16]
 80244c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80244c6:	2b00      	cmp	r3, #0
 80244c8:	d0a2      	beq.n	8024410 <_printf_float+0x88>
 80244ca:	232d      	movs	r3, #45	; 0x2d
 80244cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80244d0:	e79e      	b.n	8024410 <_printf_float+0x88>
 80244d2:	9904      	ldr	r1, [sp, #16]
 80244d4:	2947      	cmp	r1, #71	; 0x47
 80244d6:	d1c1      	bne.n	802445c <_printf_float+0xd4>
 80244d8:	2b00      	cmp	r3, #0
 80244da:	d1bf      	bne.n	802445c <_printf_float+0xd4>
 80244dc:	2301      	movs	r3, #1
 80244de:	e7bc      	b.n	802445a <_printf_float+0xd2>
 80244e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80244e4:	d118      	bne.n	8024518 <_printf_float+0x190>
 80244e6:	2900      	cmp	r1, #0
 80244e8:	6863      	ldr	r3, [r4, #4]
 80244ea:	dd0b      	ble.n	8024504 <_printf_float+0x17c>
 80244ec:	6121      	str	r1, [r4, #16]
 80244ee:	b913      	cbnz	r3, 80244f6 <_printf_float+0x16e>
 80244f0:	6822      	ldr	r2, [r4, #0]
 80244f2:	07d0      	lsls	r0, r2, #31
 80244f4:	d502      	bpl.n	80244fc <_printf_float+0x174>
 80244f6:	3301      	adds	r3, #1
 80244f8:	440b      	add	r3, r1
 80244fa:	6123      	str	r3, [r4, #16]
 80244fc:	2300      	movs	r3, #0
 80244fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8024500:	9304      	str	r3, [sp, #16]
 8024502:	e7de      	b.n	80244c2 <_printf_float+0x13a>
 8024504:	b913      	cbnz	r3, 802450c <_printf_float+0x184>
 8024506:	6822      	ldr	r2, [r4, #0]
 8024508:	07d2      	lsls	r2, r2, #31
 802450a:	d501      	bpl.n	8024510 <_printf_float+0x188>
 802450c:	3302      	adds	r3, #2
 802450e:	e7f4      	b.n	80244fa <_printf_float+0x172>
 8024510:	2301      	movs	r3, #1
 8024512:	e7f2      	b.n	80244fa <_printf_float+0x172>
 8024514:	f04f 0967 	mov.w	r9, #103	; 0x67
 8024518:	9b08      	ldr	r3, [sp, #32]
 802451a:	4299      	cmp	r1, r3
 802451c:	db05      	blt.n	802452a <_printf_float+0x1a2>
 802451e:	6823      	ldr	r3, [r4, #0]
 8024520:	6121      	str	r1, [r4, #16]
 8024522:	07d8      	lsls	r0, r3, #31
 8024524:	d5ea      	bpl.n	80244fc <_printf_float+0x174>
 8024526:	1c4b      	adds	r3, r1, #1
 8024528:	e7e7      	b.n	80244fa <_printf_float+0x172>
 802452a:	2900      	cmp	r1, #0
 802452c:	bfd4      	ite	le
 802452e:	f1c1 0202 	rsble	r2, r1, #2
 8024532:	2201      	movgt	r2, #1
 8024534:	4413      	add	r3, r2
 8024536:	e7e0      	b.n	80244fa <_printf_float+0x172>
 8024538:	6823      	ldr	r3, [r4, #0]
 802453a:	055a      	lsls	r2, r3, #21
 802453c:	d407      	bmi.n	802454e <_printf_float+0x1c6>
 802453e:	6923      	ldr	r3, [r4, #16]
 8024540:	4642      	mov	r2, r8
 8024542:	4631      	mov	r1, r6
 8024544:	4628      	mov	r0, r5
 8024546:	47b8      	blx	r7
 8024548:	3001      	adds	r0, #1
 802454a:	d12a      	bne.n	80245a2 <_printf_float+0x21a>
 802454c:	e76a      	b.n	8024424 <_printf_float+0x9c>
 802454e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8024552:	f240 80e2 	bls.w	802471a <_printf_float+0x392>
 8024556:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 802455a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802455e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024562:	d133      	bne.n	80245cc <_printf_float+0x244>
 8024564:	4a38      	ldr	r2, [pc, #224]	; (8024648 <_printf_float+0x2c0>)
 8024566:	2301      	movs	r3, #1
 8024568:	4631      	mov	r1, r6
 802456a:	4628      	mov	r0, r5
 802456c:	47b8      	blx	r7
 802456e:	3001      	adds	r0, #1
 8024570:	f43f af58 	beq.w	8024424 <_printf_float+0x9c>
 8024574:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024578:	429a      	cmp	r2, r3
 802457a:	db02      	blt.n	8024582 <_printf_float+0x1fa>
 802457c:	6823      	ldr	r3, [r4, #0]
 802457e:	07d8      	lsls	r0, r3, #31
 8024580:	d50f      	bpl.n	80245a2 <_printf_float+0x21a>
 8024582:	4653      	mov	r3, sl
 8024584:	465a      	mov	r2, fp
 8024586:	4631      	mov	r1, r6
 8024588:	4628      	mov	r0, r5
 802458a:	47b8      	blx	r7
 802458c:	3001      	adds	r0, #1
 802458e:	f43f af49 	beq.w	8024424 <_printf_float+0x9c>
 8024592:	f04f 0800 	mov.w	r8, #0
 8024596:	f104 091a 	add.w	r9, r4, #26
 802459a:	9b08      	ldr	r3, [sp, #32]
 802459c:	3b01      	subs	r3, #1
 802459e:	4543      	cmp	r3, r8
 80245a0:	dc09      	bgt.n	80245b6 <_printf_float+0x22e>
 80245a2:	6823      	ldr	r3, [r4, #0]
 80245a4:	079b      	lsls	r3, r3, #30
 80245a6:	f100 8108 	bmi.w	80247ba <_printf_float+0x432>
 80245aa:	68e0      	ldr	r0, [r4, #12]
 80245ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245ae:	4298      	cmp	r0, r3
 80245b0:	bfb8      	it	lt
 80245b2:	4618      	movlt	r0, r3
 80245b4:	e738      	b.n	8024428 <_printf_float+0xa0>
 80245b6:	2301      	movs	r3, #1
 80245b8:	464a      	mov	r2, r9
 80245ba:	4631      	mov	r1, r6
 80245bc:	4628      	mov	r0, r5
 80245be:	47b8      	blx	r7
 80245c0:	3001      	adds	r0, #1
 80245c2:	f43f af2f 	beq.w	8024424 <_printf_float+0x9c>
 80245c6:	f108 0801 	add.w	r8, r8, #1
 80245ca:	e7e6      	b.n	802459a <_printf_float+0x212>
 80245cc:	9b07      	ldr	r3, [sp, #28]
 80245ce:	2b00      	cmp	r3, #0
 80245d0:	dc3c      	bgt.n	802464c <_printf_float+0x2c4>
 80245d2:	4a1d      	ldr	r2, [pc, #116]	; (8024648 <_printf_float+0x2c0>)
 80245d4:	2301      	movs	r3, #1
 80245d6:	4631      	mov	r1, r6
 80245d8:	4628      	mov	r0, r5
 80245da:	47b8      	blx	r7
 80245dc:	3001      	adds	r0, #1
 80245de:	f43f af21 	beq.w	8024424 <_printf_float+0x9c>
 80245e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80245e6:	4313      	orrs	r3, r2
 80245e8:	d102      	bne.n	80245f0 <_printf_float+0x268>
 80245ea:	6823      	ldr	r3, [r4, #0]
 80245ec:	07d9      	lsls	r1, r3, #31
 80245ee:	d5d8      	bpl.n	80245a2 <_printf_float+0x21a>
 80245f0:	4653      	mov	r3, sl
 80245f2:	465a      	mov	r2, fp
 80245f4:	4631      	mov	r1, r6
 80245f6:	4628      	mov	r0, r5
 80245f8:	47b8      	blx	r7
 80245fa:	3001      	adds	r0, #1
 80245fc:	f43f af12 	beq.w	8024424 <_printf_float+0x9c>
 8024600:	f04f 0900 	mov.w	r9, #0
 8024604:	f104 0a1a 	add.w	sl, r4, #26
 8024608:	9b07      	ldr	r3, [sp, #28]
 802460a:	425b      	negs	r3, r3
 802460c:	454b      	cmp	r3, r9
 802460e:	dc01      	bgt.n	8024614 <_printf_float+0x28c>
 8024610:	9b08      	ldr	r3, [sp, #32]
 8024612:	e795      	b.n	8024540 <_printf_float+0x1b8>
 8024614:	2301      	movs	r3, #1
 8024616:	4652      	mov	r2, sl
 8024618:	4631      	mov	r1, r6
 802461a:	4628      	mov	r0, r5
 802461c:	47b8      	blx	r7
 802461e:	3001      	adds	r0, #1
 8024620:	f43f af00 	beq.w	8024424 <_printf_float+0x9c>
 8024624:	f109 0901 	add.w	r9, r9, #1
 8024628:	e7ee      	b.n	8024608 <_printf_float+0x280>
 802462a:	bf00      	nop
 802462c:	f3af 8000 	nop.w
 8024630:	ffffffff 	.word	0xffffffff
 8024634:	7fefffff 	.word	0x7fefffff
 8024638:	080451b0 	.word	0x080451b0
 802463c:	080451b4 	.word	0x080451b4
 8024640:	080451bc 	.word	0x080451bc
 8024644:	080451b8 	.word	0x080451b8
 8024648:	080457d9 	.word	0x080457d9
 802464c:	9a08      	ldr	r2, [sp, #32]
 802464e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024650:	429a      	cmp	r2, r3
 8024652:	bfa8      	it	ge
 8024654:	461a      	movge	r2, r3
 8024656:	2a00      	cmp	r2, #0
 8024658:	4691      	mov	r9, r2
 802465a:	dc38      	bgt.n	80246ce <_printf_float+0x346>
 802465c:	2300      	movs	r3, #0
 802465e:	9305      	str	r3, [sp, #20]
 8024660:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024664:	f104 021a 	add.w	r2, r4, #26
 8024668:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802466a:	9905      	ldr	r1, [sp, #20]
 802466c:	9304      	str	r3, [sp, #16]
 802466e:	eba3 0309 	sub.w	r3, r3, r9
 8024672:	428b      	cmp	r3, r1
 8024674:	dc33      	bgt.n	80246de <_printf_float+0x356>
 8024676:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802467a:	429a      	cmp	r2, r3
 802467c:	db3c      	blt.n	80246f8 <_printf_float+0x370>
 802467e:	6823      	ldr	r3, [r4, #0]
 8024680:	07da      	lsls	r2, r3, #31
 8024682:	d439      	bmi.n	80246f8 <_printf_float+0x370>
 8024684:	9b08      	ldr	r3, [sp, #32]
 8024686:	9a04      	ldr	r2, [sp, #16]
 8024688:	9907      	ldr	r1, [sp, #28]
 802468a:	1a9a      	subs	r2, r3, r2
 802468c:	eba3 0901 	sub.w	r9, r3, r1
 8024690:	4591      	cmp	r9, r2
 8024692:	bfa8      	it	ge
 8024694:	4691      	movge	r9, r2
 8024696:	f1b9 0f00 	cmp.w	r9, #0
 802469a:	dc35      	bgt.n	8024708 <_printf_float+0x380>
 802469c:	f04f 0800 	mov.w	r8, #0
 80246a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80246a4:	f104 0a1a 	add.w	sl, r4, #26
 80246a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80246ac:	1a9b      	subs	r3, r3, r2
 80246ae:	eba3 0309 	sub.w	r3, r3, r9
 80246b2:	4543      	cmp	r3, r8
 80246b4:	f77f af75 	ble.w	80245a2 <_printf_float+0x21a>
 80246b8:	2301      	movs	r3, #1
 80246ba:	4652      	mov	r2, sl
 80246bc:	4631      	mov	r1, r6
 80246be:	4628      	mov	r0, r5
 80246c0:	47b8      	blx	r7
 80246c2:	3001      	adds	r0, #1
 80246c4:	f43f aeae 	beq.w	8024424 <_printf_float+0x9c>
 80246c8:	f108 0801 	add.w	r8, r8, #1
 80246cc:	e7ec      	b.n	80246a8 <_printf_float+0x320>
 80246ce:	4613      	mov	r3, r2
 80246d0:	4631      	mov	r1, r6
 80246d2:	4642      	mov	r2, r8
 80246d4:	4628      	mov	r0, r5
 80246d6:	47b8      	blx	r7
 80246d8:	3001      	adds	r0, #1
 80246da:	d1bf      	bne.n	802465c <_printf_float+0x2d4>
 80246dc:	e6a2      	b.n	8024424 <_printf_float+0x9c>
 80246de:	2301      	movs	r3, #1
 80246e0:	4631      	mov	r1, r6
 80246e2:	4628      	mov	r0, r5
 80246e4:	9204      	str	r2, [sp, #16]
 80246e6:	47b8      	blx	r7
 80246e8:	3001      	adds	r0, #1
 80246ea:	f43f ae9b 	beq.w	8024424 <_printf_float+0x9c>
 80246ee:	9b05      	ldr	r3, [sp, #20]
 80246f0:	9a04      	ldr	r2, [sp, #16]
 80246f2:	3301      	adds	r3, #1
 80246f4:	9305      	str	r3, [sp, #20]
 80246f6:	e7b7      	b.n	8024668 <_printf_float+0x2e0>
 80246f8:	4653      	mov	r3, sl
 80246fa:	465a      	mov	r2, fp
 80246fc:	4631      	mov	r1, r6
 80246fe:	4628      	mov	r0, r5
 8024700:	47b8      	blx	r7
 8024702:	3001      	adds	r0, #1
 8024704:	d1be      	bne.n	8024684 <_printf_float+0x2fc>
 8024706:	e68d      	b.n	8024424 <_printf_float+0x9c>
 8024708:	9a04      	ldr	r2, [sp, #16]
 802470a:	464b      	mov	r3, r9
 802470c:	4442      	add	r2, r8
 802470e:	4631      	mov	r1, r6
 8024710:	4628      	mov	r0, r5
 8024712:	47b8      	blx	r7
 8024714:	3001      	adds	r0, #1
 8024716:	d1c1      	bne.n	802469c <_printf_float+0x314>
 8024718:	e684      	b.n	8024424 <_printf_float+0x9c>
 802471a:	9a08      	ldr	r2, [sp, #32]
 802471c:	2a01      	cmp	r2, #1
 802471e:	dc01      	bgt.n	8024724 <_printf_float+0x39c>
 8024720:	07db      	lsls	r3, r3, #31
 8024722:	d537      	bpl.n	8024794 <_printf_float+0x40c>
 8024724:	2301      	movs	r3, #1
 8024726:	4642      	mov	r2, r8
 8024728:	4631      	mov	r1, r6
 802472a:	4628      	mov	r0, r5
 802472c:	47b8      	blx	r7
 802472e:	3001      	adds	r0, #1
 8024730:	f43f ae78 	beq.w	8024424 <_printf_float+0x9c>
 8024734:	4653      	mov	r3, sl
 8024736:	465a      	mov	r2, fp
 8024738:	4631      	mov	r1, r6
 802473a:	4628      	mov	r0, r5
 802473c:	47b8      	blx	r7
 802473e:	3001      	adds	r0, #1
 8024740:	f43f ae70 	beq.w	8024424 <_printf_float+0x9c>
 8024744:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8024748:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024750:	d01b      	beq.n	802478a <_printf_float+0x402>
 8024752:	9b08      	ldr	r3, [sp, #32]
 8024754:	f108 0201 	add.w	r2, r8, #1
 8024758:	3b01      	subs	r3, #1
 802475a:	4631      	mov	r1, r6
 802475c:	4628      	mov	r0, r5
 802475e:	47b8      	blx	r7
 8024760:	3001      	adds	r0, #1
 8024762:	d10e      	bne.n	8024782 <_printf_float+0x3fa>
 8024764:	e65e      	b.n	8024424 <_printf_float+0x9c>
 8024766:	2301      	movs	r3, #1
 8024768:	464a      	mov	r2, r9
 802476a:	4631      	mov	r1, r6
 802476c:	4628      	mov	r0, r5
 802476e:	47b8      	blx	r7
 8024770:	3001      	adds	r0, #1
 8024772:	f43f ae57 	beq.w	8024424 <_printf_float+0x9c>
 8024776:	f108 0801 	add.w	r8, r8, #1
 802477a:	9b08      	ldr	r3, [sp, #32]
 802477c:	3b01      	subs	r3, #1
 802477e:	4543      	cmp	r3, r8
 8024780:	dcf1      	bgt.n	8024766 <_printf_float+0x3de>
 8024782:	9b04      	ldr	r3, [sp, #16]
 8024784:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8024788:	e6db      	b.n	8024542 <_printf_float+0x1ba>
 802478a:	f04f 0800 	mov.w	r8, #0
 802478e:	f104 091a 	add.w	r9, r4, #26
 8024792:	e7f2      	b.n	802477a <_printf_float+0x3f2>
 8024794:	2301      	movs	r3, #1
 8024796:	4642      	mov	r2, r8
 8024798:	e7df      	b.n	802475a <_printf_float+0x3d2>
 802479a:	2301      	movs	r3, #1
 802479c:	464a      	mov	r2, r9
 802479e:	4631      	mov	r1, r6
 80247a0:	4628      	mov	r0, r5
 80247a2:	47b8      	blx	r7
 80247a4:	3001      	adds	r0, #1
 80247a6:	f43f ae3d 	beq.w	8024424 <_printf_float+0x9c>
 80247aa:	f108 0801 	add.w	r8, r8, #1
 80247ae:	68e3      	ldr	r3, [r4, #12]
 80247b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80247b2:	1a5b      	subs	r3, r3, r1
 80247b4:	4543      	cmp	r3, r8
 80247b6:	dcf0      	bgt.n	802479a <_printf_float+0x412>
 80247b8:	e6f7      	b.n	80245aa <_printf_float+0x222>
 80247ba:	f04f 0800 	mov.w	r8, #0
 80247be:	f104 0919 	add.w	r9, r4, #25
 80247c2:	e7f4      	b.n	80247ae <_printf_float+0x426>

080247c4 <_printf_common>:
 80247c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80247c8:	4616      	mov	r6, r2
 80247ca:	4699      	mov	r9, r3
 80247cc:	688a      	ldr	r2, [r1, #8]
 80247ce:	690b      	ldr	r3, [r1, #16]
 80247d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80247d4:	4293      	cmp	r3, r2
 80247d6:	bfb8      	it	lt
 80247d8:	4613      	movlt	r3, r2
 80247da:	6033      	str	r3, [r6, #0]
 80247dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80247e0:	4607      	mov	r7, r0
 80247e2:	460c      	mov	r4, r1
 80247e4:	b10a      	cbz	r2, 80247ea <_printf_common+0x26>
 80247e6:	3301      	adds	r3, #1
 80247e8:	6033      	str	r3, [r6, #0]
 80247ea:	6823      	ldr	r3, [r4, #0]
 80247ec:	0699      	lsls	r1, r3, #26
 80247ee:	bf42      	ittt	mi
 80247f0:	6833      	ldrmi	r3, [r6, #0]
 80247f2:	3302      	addmi	r3, #2
 80247f4:	6033      	strmi	r3, [r6, #0]
 80247f6:	6825      	ldr	r5, [r4, #0]
 80247f8:	f015 0506 	ands.w	r5, r5, #6
 80247fc:	d106      	bne.n	802480c <_printf_common+0x48>
 80247fe:	f104 0a19 	add.w	sl, r4, #25
 8024802:	68e3      	ldr	r3, [r4, #12]
 8024804:	6832      	ldr	r2, [r6, #0]
 8024806:	1a9b      	subs	r3, r3, r2
 8024808:	42ab      	cmp	r3, r5
 802480a:	dc26      	bgt.n	802485a <_printf_common+0x96>
 802480c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024810:	1e13      	subs	r3, r2, #0
 8024812:	6822      	ldr	r2, [r4, #0]
 8024814:	bf18      	it	ne
 8024816:	2301      	movne	r3, #1
 8024818:	0692      	lsls	r2, r2, #26
 802481a:	d42b      	bmi.n	8024874 <_printf_common+0xb0>
 802481c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024820:	4649      	mov	r1, r9
 8024822:	4638      	mov	r0, r7
 8024824:	47c0      	blx	r8
 8024826:	3001      	adds	r0, #1
 8024828:	d01e      	beq.n	8024868 <_printf_common+0xa4>
 802482a:	6823      	ldr	r3, [r4, #0]
 802482c:	68e5      	ldr	r5, [r4, #12]
 802482e:	6832      	ldr	r2, [r6, #0]
 8024830:	f003 0306 	and.w	r3, r3, #6
 8024834:	2b04      	cmp	r3, #4
 8024836:	bf08      	it	eq
 8024838:	1aad      	subeq	r5, r5, r2
 802483a:	68a3      	ldr	r3, [r4, #8]
 802483c:	6922      	ldr	r2, [r4, #16]
 802483e:	bf0c      	ite	eq
 8024840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024844:	2500      	movne	r5, #0
 8024846:	4293      	cmp	r3, r2
 8024848:	bfc4      	itt	gt
 802484a:	1a9b      	subgt	r3, r3, r2
 802484c:	18ed      	addgt	r5, r5, r3
 802484e:	2600      	movs	r6, #0
 8024850:	341a      	adds	r4, #26
 8024852:	42b5      	cmp	r5, r6
 8024854:	d11a      	bne.n	802488c <_printf_common+0xc8>
 8024856:	2000      	movs	r0, #0
 8024858:	e008      	b.n	802486c <_printf_common+0xa8>
 802485a:	2301      	movs	r3, #1
 802485c:	4652      	mov	r2, sl
 802485e:	4649      	mov	r1, r9
 8024860:	4638      	mov	r0, r7
 8024862:	47c0      	blx	r8
 8024864:	3001      	adds	r0, #1
 8024866:	d103      	bne.n	8024870 <_printf_common+0xac>
 8024868:	f04f 30ff 	mov.w	r0, #4294967295
 802486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024870:	3501      	adds	r5, #1
 8024872:	e7c6      	b.n	8024802 <_printf_common+0x3e>
 8024874:	18e1      	adds	r1, r4, r3
 8024876:	1c5a      	adds	r2, r3, #1
 8024878:	2030      	movs	r0, #48	; 0x30
 802487a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802487e:	4422      	add	r2, r4
 8024880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024888:	3302      	adds	r3, #2
 802488a:	e7c7      	b.n	802481c <_printf_common+0x58>
 802488c:	2301      	movs	r3, #1
 802488e:	4622      	mov	r2, r4
 8024890:	4649      	mov	r1, r9
 8024892:	4638      	mov	r0, r7
 8024894:	47c0      	blx	r8
 8024896:	3001      	adds	r0, #1
 8024898:	d0e6      	beq.n	8024868 <_printf_common+0xa4>
 802489a:	3601      	adds	r6, #1
 802489c:	e7d9      	b.n	8024852 <_printf_common+0x8e>
	...

080248a0 <_printf_i>:
 80248a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80248a4:	7e0f      	ldrb	r7, [r1, #24]
 80248a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80248a8:	2f78      	cmp	r7, #120	; 0x78
 80248aa:	4691      	mov	r9, r2
 80248ac:	4680      	mov	r8, r0
 80248ae:	460c      	mov	r4, r1
 80248b0:	469a      	mov	sl, r3
 80248b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80248b6:	d807      	bhi.n	80248c8 <_printf_i+0x28>
 80248b8:	2f62      	cmp	r7, #98	; 0x62
 80248ba:	d80a      	bhi.n	80248d2 <_printf_i+0x32>
 80248bc:	2f00      	cmp	r7, #0
 80248be:	f000 80d8 	beq.w	8024a72 <_printf_i+0x1d2>
 80248c2:	2f58      	cmp	r7, #88	; 0x58
 80248c4:	f000 80a3 	beq.w	8024a0e <_printf_i+0x16e>
 80248c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80248cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80248d0:	e03a      	b.n	8024948 <_printf_i+0xa8>
 80248d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80248d6:	2b15      	cmp	r3, #21
 80248d8:	d8f6      	bhi.n	80248c8 <_printf_i+0x28>
 80248da:	a101      	add	r1, pc, #4	; (adr r1, 80248e0 <_printf_i+0x40>)
 80248dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80248e0:	08024939 	.word	0x08024939
 80248e4:	0802494d 	.word	0x0802494d
 80248e8:	080248c9 	.word	0x080248c9
 80248ec:	080248c9 	.word	0x080248c9
 80248f0:	080248c9 	.word	0x080248c9
 80248f4:	080248c9 	.word	0x080248c9
 80248f8:	0802494d 	.word	0x0802494d
 80248fc:	080248c9 	.word	0x080248c9
 8024900:	080248c9 	.word	0x080248c9
 8024904:	080248c9 	.word	0x080248c9
 8024908:	080248c9 	.word	0x080248c9
 802490c:	08024a59 	.word	0x08024a59
 8024910:	0802497d 	.word	0x0802497d
 8024914:	08024a3b 	.word	0x08024a3b
 8024918:	080248c9 	.word	0x080248c9
 802491c:	080248c9 	.word	0x080248c9
 8024920:	08024a7b 	.word	0x08024a7b
 8024924:	080248c9 	.word	0x080248c9
 8024928:	0802497d 	.word	0x0802497d
 802492c:	080248c9 	.word	0x080248c9
 8024930:	080248c9 	.word	0x080248c9
 8024934:	08024a43 	.word	0x08024a43
 8024938:	682b      	ldr	r3, [r5, #0]
 802493a:	1d1a      	adds	r2, r3, #4
 802493c:	681b      	ldr	r3, [r3, #0]
 802493e:	602a      	str	r2, [r5, #0]
 8024940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024948:	2301      	movs	r3, #1
 802494a:	e0a3      	b.n	8024a94 <_printf_i+0x1f4>
 802494c:	6820      	ldr	r0, [r4, #0]
 802494e:	6829      	ldr	r1, [r5, #0]
 8024950:	0606      	lsls	r6, r0, #24
 8024952:	f101 0304 	add.w	r3, r1, #4
 8024956:	d50a      	bpl.n	802496e <_printf_i+0xce>
 8024958:	680e      	ldr	r6, [r1, #0]
 802495a:	602b      	str	r3, [r5, #0]
 802495c:	2e00      	cmp	r6, #0
 802495e:	da03      	bge.n	8024968 <_printf_i+0xc8>
 8024960:	232d      	movs	r3, #45	; 0x2d
 8024962:	4276      	negs	r6, r6
 8024964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024968:	485e      	ldr	r0, [pc, #376]	; (8024ae4 <_printf_i+0x244>)
 802496a:	230a      	movs	r3, #10
 802496c:	e019      	b.n	80249a2 <_printf_i+0x102>
 802496e:	680e      	ldr	r6, [r1, #0]
 8024970:	602b      	str	r3, [r5, #0]
 8024972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024976:	bf18      	it	ne
 8024978:	b236      	sxthne	r6, r6
 802497a:	e7ef      	b.n	802495c <_printf_i+0xbc>
 802497c:	682b      	ldr	r3, [r5, #0]
 802497e:	6820      	ldr	r0, [r4, #0]
 8024980:	1d19      	adds	r1, r3, #4
 8024982:	6029      	str	r1, [r5, #0]
 8024984:	0601      	lsls	r1, r0, #24
 8024986:	d501      	bpl.n	802498c <_printf_i+0xec>
 8024988:	681e      	ldr	r6, [r3, #0]
 802498a:	e002      	b.n	8024992 <_printf_i+0xf2>
 802498c:	0646      	lsls	r6, r0, #25
 802498e:	d5fb      	bpl.n	8024988 <_printf_i+0xe8>
 8024990:	881e      	ldrh	r6, [r3, #0]
 8024992:	4854      	ldr	r0, [pc, #336]	; (8024ae4 <_printf_i+0x244>)
 8024994:	2f6f      	cmp	r7, #111	; 0x6f
 8024996:	bf0c      	ite	eq
 8024998:	2308      	moveq	r3, #8
 802499a:	230a      	movne	r3, #10
 802499c:	2100      	movs	r1, #0
 802499e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80249a2:	6865      	ldr	r5, [r4, #4]
 80249a4:	60a5      	str	r5, [r4, #8]
 80249a6:	2d00      	cmp	r5, #0
 80249a8:	bfa2      	ittt	ge
 80249aa:	6821      	ldrge	r1, [r4, #0]
 80249ac:	f021 0104 	bicge.w	r1, r1, #4
 80249b0:	6021      	strge	r1, [r4, #0]
 80249b2:	b90e      	cbnz	r6, 80249b8 <_printf_i+0x118>
 80249b4:	2d00      	cmp	r5, #0
 80249b6:	d04d      	beq.n	8024a54 <_printf_i+0x1b4>
 80249b8:	4615      	mov	r5, r2
 80249ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80249be:	fb03 6711 	mls	r7, r3, r1, r6
 80249c2:	5dc7      	ldrb	r7, [r0, r7]
 80249c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80249c8:	4637      	mov	r7, r6
 80249ca:	42bb      	cmp	r3, r7
 80249cc:	460e      	mov	r6, r1
 80249ce:	d9f4      	bls.n	80249ba <_printf_i+0x11a>
 80249d0:	2b08      	cmp	r3, #8
 80249d2:	d10b      	bne.n	80249ec <_printf_i+0x14c>
 80249d4:	6823      	ldr	r3, [r4, #0]
 80249d6:	07de      	lsls	r6, r3, #31
 80249d8:	d508      	bpl.n	80249ec <_printf_i+0x14c>
 80249da:	6923      	ldr	r3, [r4, #16]
 80249dc:	6861      	ldr	r1, [r4, #4]
 80249de:	4299      	cmp	r1, r3
 80249e0:	bfde      	ittt	le
 80249e2:	2330      	movle	r3, #48	; 0x30
 80249e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80249e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80249ec:	1b52      	subs	r2, r2, r5
 80249ee:	6122      	str	r2, [r4, #16]
 80249f0:	f8cd a000 	str.w	sl, [sp]
 80249f4:	464b      	mov	r3, r9
 80249f6:	aa03      	add	r2, sp, #12
 80249f8:	4621      	mov	r1, r4
 80249fa:	4640      	mov	r0, r8
 80249fc:	f7ff fee2 	bl	80247c4 <_printf_common>
 8024a00:	3001      	adds	r0, #1
 8024a02:	d14c      	bne.n	8024a9e <_printf_i+0x1fe>
 8024a04:	f04f 30ff 	mov.w	r0, #4294967295
 8024a08:	b004      	add	sp, #16
 8024a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024a0e:	4835      	ldr	r0, [pc, #212]	; (8024ae4 <_printf_i+0x244>)
 8024a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8024a14:	6829      	ldr	r1, [r5, #0]
 8024a16:	6823      	ldr	r3, [r4, #0]
 8024a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8024a1c:	6029      	str	r1, [r5, #0]
 8024a1e:	061d      	lsls	r5, r3, #24
 8024a20:	d514      	bpl.n	8024a4c <_printf_i+0x1ac>
 8024a22:	07df      	lsls	r7, r3, #31
 8024a24:	bf44      	itt	mi
 8024a26:	f043 0320 	orrmi.w	r3, r3, #32
 8024a2a:	6023      	strmi	r3, [r4, #0]
 8024a2c:	b91e      	cbnz	r6, 8024a36 <_printf_i+0x196>
 8024a2e:	6823      	ldr	r3, [r4, #0]
 8024a30:	f023 0320 	bic.w	r3, r3, #32
 8024a34:	6023      	str	r3, [r4, #0]
 8024a36:	2310      	movs	r3, #16
 8024a38:	e7b0      	b.n	802499c <_printf_i+0xfc>
 8024a3a:	6823      	ldr	r3, [r4, #0]
 8024a3c:	f043 0320 	orr.w	r3, r3, #32
 8024a40:	6023      	str	r3, [r4, #0]
 8024a42:	2378      	movs	r3, #120	; 0x78
 8024a44:	4828      	ldr	r0, [pc, #160]	; (8024ae8 <_printf_i+0x248>)
 8024a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024a4a:	e7e3      	b.n	8024a14 <_printf_i+0x174>
 8024a4c:	0659      	lsls	r1, r3, #25
 8024a4e:	bf48      	it	mi
 8024a50:	b2b6      	uxthmi	r6, r6
 8024a52:	e7e6      	b.n	8024a22 <_printf_i+0x182>
 8024a54:	4615      	mov	r5, r2
 8024a56:	e7bb      	b.n	80249d0 <_printf_i+0x130>
 8024a58:	682b      	ldr	r3, [r5, #0]
 8024a5a:	6826      	ldr	r6, [r4, #0]
 8024a5c:	6961      	ldr	r1, [r4, #20]
 8024a5e:	1d18      	adds	r0, r3, #4
 8024a60:	6028      	str	r0, [r5, #0]
 8024a62:	0635      	lsls	r5, r6, #24
 8024a64:	681b      	ldr	r3, [r3, #0]
 8024a66:	d501      	bpl.n	8024a6c <_printf_i+0x1cc>
 8024a68:	6019      	str	r1, [r3, #0]
 8024a6a:	e002      	b.n	8024a72 <_printf_i+0x1d2>
 8024a6c:	0670      	lsls	r0, r6, #25
 8024a6e:	d5fb      	bpl.n	8024a68 <_printf_i+0x1c8>
 8024a70:	8019      	strh	r1, [r3, #0]
 8024a72:	2300      	movs	r3, #0
 8024a74:	6123      	str	r3, [r4, #16]
 8024a76:	4615      	mov	r5, r2
 8024a78:	e7ba      	b.n	80249f0 <_printf_i+0x150>
 8024a7a:	682b      	ldr	r3, [r5, #0]
 8024a7c:	1d1a      	adds	r2, r3, #4
 8024a7e:	602a      	str	r2, [r5, #0]
 8024a80:	681d      	ldr	r5, [r3, #0]
 8024a82:	6862      	ldr	r2, [r4, #4]
 8024a84:	2100      	movs	r1, #0
 8024a86:	4628      	mov	r0, r5
 8024a88:	f7db fbf2 	bl	8000270 <memchr>
 8024a8c:	b108      	cbz	r0, 8024a92 <_printf_i+0x1f2>
 8024a8e:	1b40      	subs	r0, r0, r5
 8024a90:	6060      	str	r0, [r4, #4]
 8024a92:	6863      	ldr	r3, [r4, #4]
 8024a94:	6123      	str	r3, [r4, #16]
 8024a96:	2300      	movs	r3, #0
 8024a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024a9c:	e7a8      	b.n	80249f0 <_printf_i+0x150>
 8024a9e:	6923      	ldr	r3, [r4, #16]
 8024aa0:	462a      	mov	r2, r5
 8024aa2:	4649      	mov	r1, r9
 8024aa4:	4640      	mov	r0, r8
 8024aa6:	47d0      	blx	sl
 8024aa8:	3001      	adds	r0, #1
 8024aaa:	d0ab      	beq.n	8024a04 <_printf_i+0x164>
 8024aac:	6823      	ldr	r3, [r4, #0]
 8024aae:	079b      	lsls	r3, r3, #30
 8024ab0:	d413      	bmi.n	8024ada <_printf_i+0x23a>
 8024ab2:	68e0      	ldr	r0, [r4, #12]
 8024ab4:	9b03      	ldr	r3, [sp, #12]
 8024ab6:	4298      	cmp	r0, r3
 8024ab8:	bfb8      	it	lt
 8024aba:	4618      	movlt	r0, r3
 8024abc:	e7a4      	b.n	8024a08 <_printf_i+0x168>
 8024abe:	2301      	movs	r3, #1
 8024ac0:	4632      	mov	r2, r6
 8024ac2:	4649      	mov	r1, r9
 8024ac4:	4640      	mov	r0, r8
 8024ac6:	47d0      	blx	sl
 8024ac8:	3001      	adds	r0, #1
 8024aca:	d09b      	beq.n	8024a04 <_printf_i+0x164>
 8024acc:	3501      	adds	r5, #1
 8024ace:	68e3      	ldr	r3, [r4, #12]
 8024ad0:	9903      	ldr	r1, [sp, #12]
 8024ad2:	1a5b      	subs	r3, r3, r1
 8024ad4:	42ab      	cmp	r3, r5
 8024ad6:	dcf2      	bgt.n	8024abe <_printf_i+0x21e>
 8024ad8:	e7eb      	b.n	8024ab2 <_printf_i+0x212>
 8024ada:	2500      	movs	r5, #0
 8024adc:	f104 0619 	add.w	r6, r4, #25
 8024ae0:	e7f5      	b.n	8024ace <_printf_i+0x22e>
 8024ae2:	bf00      	nop
 8024ae4:	080451c0 	.word	0x080451c0
 8024ae8:	080451d1 	.word	0x080451d1

08024aec <iprintf>:
 8024aec:	b40f      	push	{r0, r1, r2, r3}
 8024aee:	4b0a      	ldr	r3, [pc, #40]	; (8024b18 <iprintf+0x2c>)
 8024af0:	b513      	push	{r0, r1, r4, lr}
 8024af2:	681c      	ldr	r4, [r3, #0]
 8024af4:	b124      	cbz	r4, 8024b00 <iprintf+0x14>
 8024af6:	69a3      	ldr	r3, [r4, #24]
 8024af8:	b913      	cbnz	r3, 8024b00 <iprintf+0x14>
 8024afa:	4620      	mov	r0, r4
 8024afc:	f7fe fe38 	bl	8023770 <__sinit>
 8024b00:	ab05      	add	r3, sp, #20
 8024b02:	9a04      	ldr	r2, [sp, #16]
 8024b04:	68a1      	ldr	r1, [r4, #8]
 8024b06:	9301      	str	r3, [sp, #4]
 8024b08:	4620      	mov	r0, r4
 8024b0a:	f003 fc11 	bl	8028330 <_vfiprintf_r>
 8024b0e:	b002      	add	sp, #8
 8024b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b14:	b004      	add	sp, #16
 8024b16:	4770      	bx	lr
 8024b18:	20000488 	.word	0x20000488

08024b1c <putchar>:
 8024b1c:	4b09      	ldr	r3, [pc, #36]	; (8024b44 <putchar+0x28>)
 8024b1e:	b513      	push	{r0, r1, r4, lr}
 8024b20:	681c      	ldr	r4, [r3, #0]
 8024b22:	4601      	mov	r1, r0
 8024b24:	b134      	cbz	r4, 8024b34 <putchar+0x18>
 8024b26:	69a3      	ldr	r3, [r4, #24]
 8024b28:	b923      	cbnz	r3, 8024b34 <putchar+0x18>
 8024b2a:	9001      	str	r0, [sp, #4]
 8024b2c:	4620      	mov	r0, r4
 8024b2e:	f7fe fe1f 	bl	8023770 <__sinit>
 8024b32:	9901      	ldr	r1, [sp, #4]
 8024b34:	68a2      	ldr	r2, [r4, #8]
 8024b36:	4620      	mov	r0, r4
 8024b38:	b002      	add	sp, #8
 8024b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b3e:	f003 be79 	b.w	8028834 <_putc_r>
 8024b42:	bf00      	nop
 8024b44:	20000488 	.word	0x20000488

08024b48 <_puts_r>:
 8024b48:	b570      	push	{r4, r5, r6, lr}
 8024b4a:	460e      	mov	r6, r1
 8024b4c:	4605      	mov	r5, r0
 8024b4e:	b118      	cbz	r0, 8024b58 <_puts_r+0x10>
 8024b50:	6983      	ldr	r3, [r0, #24]
 8024b52:	b90b      	cbnz	r3, 8024b58 <_puts_r+0x10>
 8024b54:	f7fe fe0c 	bl	8023770 <__sinit>
 8024b58:	69ab      	ldr	r3, [r5, #24]
 8024b5a:	68ac      	ldr	r4, [r5, #8]
 8024b5c:	b913      	cbnz	r3, 8024b64 <_puts_r+0x1c>
 8024b5e:	4628      	mov	r0, r5
 8024b60:	f7fe fe06 	bl	8023770 <__sinit>
 8024b64:	4b2c      	ldr	r3, [pc, #176]	; (8024c18 <_puts_r+0xd0>)
 8024b66:	429c      	cmp	r4, r3
 8024b68:	d120      	bne.n	8024bac <_puts_r+0x64>
 8024b6a:	686c      	ldr	r4, [r5, #4]
 8024b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024b6e:	07db      	lsls	r3, r3, #31
 8024b70:	d405      	bmi.n	8024b7e <_puts_r+0x36>
 8024b72:	89a3      	ldrh	r3, [r4, #12]
 8024b74:	0598      	lsls	r0, r3, #22
 8024b76:	d402      	bmi.n	8024b7e <_puts_r+0x36>
 8024b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024b7a:	f7fe ffcf 	bl	8023b1c <__retarget_lock_acquire_recursive>
 8024b7e:	89a3      	ldrh	r3, [r4, #12]
 8024b80:	0719      	lsls	r1, r3, #28
 8024b82:	d51d      	bpl.n	8024bc0 <_puts_r+0x78>
 8024b84:	6923      	ldr	r3, [r4, #16]
 8024b86:	b1db      	cbz	r3, 8024bc0 <_puts_r+0x78>
 8024b88:	3e01      	subs	r6, #1
 8024b8a:	68a3      	ldr	r3, [r4, #8]
 8024b8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8024b90:	3b01      	subs	r3, #1
 8024b92:	60a3      	str	r3, [r4, #8]
 8024b94:	bb39      	cbnz	r1, 8024be6 <_puts_r+0x9e>
 8024b96:	2b00      	cmp	r3, #0
 8024b98:	da38      	bge.n	8024c0c <_puts_r+0xc4>
 8024b9a:	4622      	mov	r2, r4
 8024b9c:	210a      	movs	r1, #10
 8024b9e:	4628      	mov	r0, r5
 8024ba0:	f001 faf0 	bl	8026184 <__swbuf_r>
 8024ba4:	3001      	adds	r0, #1
 8024ba6:	d011      	beq.n	8024bcc <_puts_r+0x84>
 8024ba8:	250a      	movs	r5, #10
 8024baa:	e011      	b.n	8024bd0 <_puts_r+0x88>
 8024bac:	4b1b      	ldr	r3, [pc, #108]	; (8024c1c <_puts_r+0xd4>)
 8024bae:	429c      	cmp	r4, r3
 8024bb0:	d101      	bne.n	8024bb6 <_puts_r+0x6e>
 8024bb2:	68ac      	ldr	r4, [r5, #8]
 8024bb4:	e7da      	b.n	8024b6c <_puts_r+0x24>
 8024bb6:	4b1a      	ldr	r3, [pc, #104]	; (8024c20 <_puts_r+0xd8>)
 8024bb8:	429c      	cmp	r4, r3
 8024bba:	bf08      	it	eq
 8024bbc:	68ec      	ldreq	r4, [r5, #12]
 8024bbe:	e7d5      	b.n	8024b6c <_puts_r+0x24>
 8024bc0:	4621      	mov	r1, r4
 8024bc2:	4628      	mov	r0, r5
 8024bc4:	f001 fb42 	bl	802624c <__swsetup_r>
 8024bc8:	2800      	cmp	r0, #0
 8024bca:	d0dd      	beq.n	8024b88 <_puts_r+0x40>
 8024bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8024bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024bd2:	07da      	lsls	r2, r3, #31
 8024bd4:	d405      	bmi.n	8024be2 <_puts_r+0x9a>
 8024bd6:	89a3      	ldrh	r3, [r4, #12]
 8024bd8:	059b      	lsls	r3, r3, #22
 8024bda:	d402      	bmi.n	8024be2 <_puts_r+0x9a>
 8024bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024bde:	f7fe ff9f 	bl	8023b20 <__retarget_lock_release_recursive>
 8024be2:	4628      	mov	r0, r5
 8024be4:	bd70      	pop	{r4, r5, r6, pc}
 8024be6:	2b00      	cmp	r3, #0
 8024be8:	da04      	bge.n	8024bf4 <_puts_r+0xac>
 8024bea:	69a2      	ldr	r2, [r4, #24]
 8024bec:	429a      	cmp	r2, r3
 8024bee:	dc06      	bgt.n	8024bfe <_puts_r+0xb6>
 8024bf0:	290a      	cmp	r1, #10
 8024bf2:	d004      	beq.n	8024bfe <_puts_r+0xb6>
 8024bf4:	6823      	ldr	r3, [r4, #0]
 8024bf6:	1c5a      	adds	r2, r3, #1
 8024bf8:	6022      	str	r2, [r4, #0]
 8024bfa:	7019      	strb	r1, [r3, #0]
 8024bfc:	e7c5      	b.n	8024b8a <_puts_r+0x42>
 8024bfe:	4622      	mov	r2, r4
 8024c00:	4628      	mov	r0, r5
 8024c02:	f001 fabf 	bl	8026184 <__swbuf_r>
 8024c06:	3001      	adds	r0, #1
 8024c08:	d1bf      	bne.n	8024b8a <_puts_r+0x42>
 8024c0a:	e7df      	b.n	8024bcc <_puts_r+0x84>
 8024c0c:	6823      	ldr	r3, [r4, #0]
 8024c0e:	250a      	movs	r5, #10
 8024c10:	1c5a      	adds	r2, r3, #1
 8024c12:	6022      	str	r2, [r4, #0]
 8024c14:	701d      	strb	r5, [r3, #0]
 8024c16:	e7db      	b.n	8024bd0 <_puts_r+0x88>
 8024c18:	08045038 	.word	0x08045038
 8024c1c:	08045058 	.word	0x08045058
 8024c20:	08045018 	.word	0x08045018

08024c24 <puts>:
 8024c24:	4b02      	ldr	r3, [pc, #8]	; (8024c30 <puts+0xc>)
 8024c26:	4601      	mov	r1, r0
 8024c28:	6818      	ldr	r0, [r3, #0]
 8024c2a:	f7ff bf8d 	b.w	8024b48 <_puts_r>
 8024c2e:	bf00      	nop
 8024c30:	20000488 	.word	0x20000488

08024c34 <rand>:
 8024c34:	4b16      	ldr	r3, [pc, #88]	; (8024c90 <rand+0x5c>)
 8024c36:	b510      	push	{r4, lr}
 8024c38:	681c      	ldr	r4, [r3, #0]
 8024c3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024c3c:	b9b3      	cbnz	r3, 8024c6c <rand+0x38>
 8024c3e:	2018      	movs	r0, #24
 8024c40:	f7fe ff70 	bl	8023b24 <malloc>
 8024c44:	63a0      	str	r0, [r4, #56]	; 0x38
 8024c46:	b928      	cbnz	r0, 8024c54 <rand+0x20>
 8024c48:	4602      	mov	r2, r0
 8024c4a:	4b12      	ldr	r3, [pc, #72]	; (8024c94 <rand+0x60>)
 8024c4c:	4812      	ldr	r0, [pc, #72]	; (8024c98 <rand+0x64>)
 8024c4e:	214e      	movs	r1, #78	; 0x4e
 8024c50:	f001 fbb6 	bl	80263c0 <__assert_func>
 8024c54:	4a11      	ldr	r2, [pc, #68]	; (8024c9c <rand+0x68>)
 8024c56:	4b12      	ldr	r3, [pc, #72]	; (8024ca0 <rand+0x6c>)
 8024c58:	e9c0 2300 	strd	r2, r3, [r0]
 8024c5c:	4b11      	ldr	r3, [pc, #68]	; (8024ca4 <rand+0x70>)
 8024c5e:	6083      	str	r3, [r0, #8]
 8024c60:	230b      	movs	r3, #11
 8024c62:	8183      	strh	r3, [r0, #12]
 8024c64:	2201      	movs	r2, #1
 8024c66:	2300      	movs	r3, #0
 8024c68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8024c6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8024c6e:	4a0e      	ldr	r2, [pc, #56]	; (8024ca8 <rand+0x74>)
 8024c70:	6920      	ldr	r0, [r4, #16]
 8024c72:	6963      	ldr	r3, [r4, #20]
 8024c74:	490d      	ldr	r1, [pc, #52]	; (8024cac <rand+0x78>)
 8024c76:	4342      	muls	r2, r0
 8024c78:	fb01 2203 	mla	r2, r1, r3, r2
 8024c7c:	fba0 0101 	umull	r0, r1, r0, r1
 8024c80:	1c43      	adds	r3, r0, #1
 8024c82:	eb42 0001 	adc.w	r0, r2, r1
 8024c86:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8024c8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8024c8e:	bd10      	pop	{r4, pc}
 8024c90:	20000488 	.word	0x20000488
 8024c94:	0804507c 	.word	0x0804507c
 8024c98:	080451e2 	.word	0x080451e2
 8024c9c:	abcd330e 	.word	0xabcd330e
 8024ca0:	e66d1234 	.word	0xe66d1234
 8024ca4:	0005deec 	.word	0x0005deec
 8024ca8:	5851f42d 	.word	0x5851f42d
 8024cac:	4c957f2d 	.word	0x4c957f2d

08024cb0 <realloc>:
 8024cb0:	4b02      	ldr	r3, [pc, #8]	; (8024cbc <realloc+0xc>)
 8024cb2:	460a      	mov	r2, r1
 8024cb4:	4601      	mov	r1, r0
 8024cb6:	6818      	ldr	r0, [r3, #0]
 8024cb8:	f002 bfb4 	b.w	8027c24 <_realloc_r>
 8024cbc:	20000488 	.word	0x20000488

08024cc0 <cleanup_glue>:
 8024cc0:	b538      	push	{r3, r4, r5, lr}
 8024cc2:	460c      	mov	r4, r1
 8024cc4:	6809      	ldr	r1, [r1, #0]
 8024cc6:	4605      	mov	r5, r0
 8024cc8:	b109      	cbz	r1, 8024cce <cleanup_glue+0xe>
 8024cca:	f7ff fff9 	bl	8024cc0 <cleanup_glue>
 8024cce:	4621      	mov	r1, r4
 8024cd0:	4628      	mov	r0, r5
 8024cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024cd6:	f7ff b9e7 	b.w	80240a8 <_free_r>
	...

08024cdc <_reclaim_reent>:
 8024cdc:	4b2c      	ldr	r3, [pc, #176]	; (8024d90 <_reclaim_reent+0xb4>)
 8024cde:	681b      	ldr	r3, [r3, #0]
 8024ce0:	4283      	cmp	r3, r0
 8024ce2:	b570      	push	{r4, r5, r6, lr}
 8024ce4:	4604      	mov	r4, r0
 8024ce6:	d051      	beq.n	8024d8c <_reclaim_reent+0xb0>
 8024ce8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8024cea:	b143      	cbz	r3, 8024cfe <_reclaim_reent+0x22>
 8024cec:	68db      	ldr	r3, [r3, #12]
 8024cee:	2b00      	cmp	r3, #0
 8024cf0:	d14a      	bne.n	8024d88 <_reclaim_reent+0xac>
 8024cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024cf4:	6819      	ldr	r1, [r3, #0]
 8024cf6:	b111      	cbz	r1, 8024cfe <_reclaim_reent+0x22>
 8024cf8:	4620      	mov	r0, r4
 8024cfa:	f7ff f9d5 	bl	80240a8 <_free_r>
 8024cfe:	6961      	ldr	r1, [r4, #20]
 8024d00:	b111      	cbz	r1, 8024d08 <_reclaim_reent+0x2c>
 8024d02:	4620      	mov	r0, r4
 8024d04:	f7ff f9d0 	bl	80240a8 <_free_r>
 8024d08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8024d0a:	b111      	cbz	r1, 8024d12 <_reclaim_reent+0x36>
 8024d0c:	4620      	mov	r0, r4
 8024d0e:	f7ff f9cb 	bl	80240a8 <_free_r>
 8024d12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8024d14:	b111      	cbz	r1, 8024d1c <_reclaim_reent+0x40>
 8024d16:	4620      	mov	r0, r4
 8024d18:	f7ff f9c6 	bl	80240a8 <_free_r>
 8024d1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8024d1e:	b111      	cbz	r1, 8024d26 <_reclaim_reent+0x4a>
 8024d20:	4620      	mov	r0, r4
 8024d22:	f7ff f9c1 	bl	80240a8 <_free_r>
 8024d26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024d28:	b111      	cbz	r1, 8024d30 <_reclaim_reent+0x54>
 8024d2a:	4620      	mov	r0, r4
 8024d2c:	f7ff f9bc 	bl	80240a8 <_free_r>
 8024d30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8024d32:	b111      	cbz	r1, 8024d3a <_reclaim_reent+0x5e>
 8024d34:	4620      	mov	r0, r4
 8024d36:	f7ff f9b7 	bl	80240a8 <_free_r>
 8024d3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8024d3c:	b111      	cbz	r1, 8024d44 <_reclaim_reent+0x68>
 8024d3e:	4620      	mov	r0, r4
 8024d40:	f7ff f9b2 	bl	80240a8 <_free_r>
 8024d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024d46:	b111      	cbz	r1, 8024d4e <_reclaim_reent+0x72>
 8024d48:	4620      	mov	r0, r4
 8024d4a:	f7ff f9ad 	bl	80240a8 <_free_r>
 8024d4e:	69a3      	ldr	r3, [r4, #24]
 8024d50:	b1e3      	cbz	r3, 8024d8c <_reclaim_reent+0xb0>
 8024d52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024d54:	4620      	mov	r0, r4
 8024d56:	4798      	blx	r3
 8024d58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024d5a:	b1b9      	cbz	r1, 8024d8c <_reclaim_reent+0xb0>
 8024d5c:	4620      	mov	r0, r4
 8024d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024d62:	f7ff bfad 	b.w	8024cc0 <cleanup_glue>
 8024d66:	5949      	ldr	r1, [r1, r5]
 8024d68:	b941      	cbnz	r1, 8024d7c <_reclaim_reent+0xa0>
 8024d6a:	3504      	adds	r5, #4
 8024d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024d6e:	2d80      	cmp	r5, #128	; 0x80
 8024d70:	68d9      	ldr	r1, [r3, #12]
 8024d72:	d1f8      	bne.n	8024d66 <_reclaim_reent+0x8a>
 8024d74:	4620      	mov	r0, r4
 8024d76:	f7ff f997 	bl	80240a8 <_free_r>
 8024d7a:	e7ba      	b.n	8024cf2 <_reclaim_reent+0x16>
 8024d7c:	680e      	ldr	r6, [r1, #0]
 8024d7e:	4620      	mov	r0, r4
 8024d80:	f7ff f992 	bl	80240a8 <_free_r>
 8024d84:	4631      	mov	r1, r6
 8024d86:	e7ef      	b.n	8024d68 <_reclaim_reent+0x8c>
 8024d88:	2500      	movs	r5, #0
 8024d8a:	e7ef      	b.n	8024d6c <_reclaim_reent+0x90>
 8024d8c:	bd70      	pop	{r4, r5, r6, pc}
 8024d8e:	bf00      	nop
 8024d90:	20000488 	.word	0x20000488

08024d94 <modf>:
 8024d94:	b570      	push	{r4, r5, r6, lr}
 8024d96:	ed2d 8b02 	vpush	{d8}
 8024d9a:	eeb0 8b40 	vmov.f64	d8, d0
 8024d9e:	ee18 5a90 	vmov	r5, s17
 8024da2:	4604      	mov	r4, r0
 8024da4:	f3c5 500a 	ubfx	r0, r5, #20, #11
 8024da8:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 8024dac:	2b13      	cmp	r3, #19
 8024dae:	ee10 1a10 	vmov	r1, s0
 8024db2:	dc23      	bgt.n	8024dfc <modf+0x68>
 8024db4:	2b00      	cmp	r3, #0
 8024db6:	da09      	bge.n	8024dcc <modf+0x38>
 8024db8:	2200      	movs	r2, #0
 8024dba:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024dbe:	e9c4 2300 	strd	r2, r3, [r4]
 8024dc2:	eeb0 0b48 	vmov.f64	d0, d8
 8024dc6:	ecbd 8b02 	vpop	{d8}
 8024dca:	bd70      	pop	{r4, r5, r6, pc}
 8024dcc:	481d      	ldr	r0, [pc, #116]	; (8024e44 <modf+0xb0>)
 8024dce:	4118      	asrs	r0, r3
 8024dd0:	ea05 0300 	and.w	r3, r5, r0
 8024dd4:	4319      	orrs	r1, r3
 8024dd6:	d107      	bne.n	8024de8 <modf+0x54>
 8024dd8:	ed84 0b00 	vstr	d0, [r4]
 8024ddc:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024de0:	460a      	mov	r2, r1
 8024de2:	ec43 2b18 	vmov	d8, r2, r3
 8024de6:	e7ec      	b.n	8024dc2 <modf+0x2e>
 8024de8:	2200      	movs	r2, #0
 8024dea:	ea25 0300 	bic.w	r3, r5, r0
 8024dee:	ec43 2b17 	vmov	d7, r2, r3
 8024df2:	e9c4 2300 	strd	r2, r3, [r4]
 8024df6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8024dfa:	e7e2      	b.n	8024dc2 <modf+0x2e>
 8024dfc:	2b33      	cmp	r3, #51	; 0x33
 8024dfe:	dd0d      	ble.n	8024e1c <modf+0x88>
 8024e00:	ed84 0b00 	vstr	d0, [r4]
 8024e04:	f003 fd70 	bl	80288e8 <__fpclassifyd>
 8024e08:	b920      	cbnz	r0, 8024e14 <modf+0x80>
 8024e0a:	ee38 8b08 	vadd.f64	d8, d8, d8
 8024e0e:	ed84 8b00 	vstr	d8, [r4]
 8024e12:	e7d6      	b.n	8024dc2 <modf+0x2e>
 8024e14:	2200      	movs	r2, #0
 8024e16:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024e1a:	e7e2      	b.n	8024de2 <modf+0x4e>
 8024e1c:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 8024e20:	f04f 30ff 	mov.w	r0, #4294967295
 8024e24:	40d8      	lsrs	r0, r3
 8024e26:	ea11 0600 	ands.w	r6, r1, r0
 8024e2a:	d105      	bne.n	8024e38 <modf+0xa4>
 8024e2c:	ed84 0b00 	vstr	d0, [r4]
 8024e30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024e34:	4632      	mov	r2, r6
 8024e36:	e7d4      	b.n	8024de2 <modf+0x4e>
 8024e38:	ee18 3a90 	vmov	r3, s17
 8024e3c:	ea21 0200 	bic.w	r2, r1, r0
 8024e40:	e7d5      	b.n	8024dee <modf+0x5a>
 8024e42:	bf00      	nop
 8024e44:	000fffff 	.word	0x000fffff

08024e48 <_sbrk_r>:
 8024e48:	b538      	push	{r3, r4, r5, lr}
 8024e4a:	4d06      	ldr	r5, [pc, #24]	; (8024e64 <_sbrk_r+0x1c>)
 8024e4c:	2300      	movs	r3, #0
 8024e4e:	4604      	mov	r4, r0
 8024e50:	4608      	mov	r0, r1
 8024e52:	602b      	str	r3, [r5, #0]
 8024e54:	f7e1 fb7a 	bl	800654c <_sbrk>
 8024e58:	1c43      	adds	r3, r0, #1
 8024e5a:	d102      	bne.n	8024e62 <_sbrk_r+0x1a>
 8024e5c:	682b      	ldr	r3, [r5, #0]
 8024e5e:	b103      	cbz	r3, 8024e62 <_sbrk_r+0x1a>
 8024e60:	6023      	str	r3, [r4, #0]
 8024e62:	bd38      	pop	{r3, r4, r5, pc}
 8024e64:	2002f84c 	.word	0x2002f84c

08024e68 <sniprintf>:
 8024e68:	b40c      	push	{r2, r3}
 8024e6a:	b530      	push	{r4, r5, lr}
 8024e6c:	4b17      	ldr	r3, [pc, #92]	; (8024ecc <sniprintf+0x64>)
 8024e6e:	1e0c      	subs	r4, r1, #0
 8024e70:	681d      	ldr	r5, [r3, #0]
 8024e72:	b09d      	sub	sp, #116	; 0x74
 8024e74:	da08      	bge.n	8024e88 <sniprintf+0x20>
 8024e76:	238b      	movs	r3, #139	; 0x8b
 8024e78:	602b      	str	r3, [r5, #0]
 8024e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8024e7e:	b01d      	add	sp, #116	; 0x74
 8024e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024e84:	b002      	add	sp, #8
 8024e86:	4770      	bx	lr
 8024e88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024e8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8024e90:	bf14      	ite	ne
 8024e92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8024e96:	4623      	moveq	r3, r4
 8024e98:	9304      	str	r3, [sp, #16]
 8024e9a:	9307      	str	r3, [sp, #28]
 8024e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024ea0:	9002      	str	r0, [sp, #8]
 8024ea2:	9006      	str	r0, [sp, #24]
 8024ea4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8024ea8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024eaa:	ab21      	add	r3, sp, #132	; 0x84
 8024eac:	a902      	add	r1, sp, #8
 8024eae:	4628      	mov	r0, r5
 8024eb0:	9301      	str	r3, [sp, #4]
 8024eb2:	f002 ff41 	bl	8027d38 <_svfiprintf_r>
 8024eb6:	1c43      	adds	r3, r0, #1
 8024eb8:	bfbc      	itt	lt
 8024eba:	238b      	movlt	r3, #139	; 0x8b
 8024ebc:	602b      	strlt	r3, [r5, #0]
 8024ebe:	2c00      	cmp	r4, #0
 8024ec0:	d0dd      	beq.n	8024e7e <sniprintf+0x16>
 8024ec2:	9b02      	ldr	r3, [sp, #8]
 8024ec4:	2200      	movs	r2, #0
 8024ec6:	701a      	strb	r2, [r3, #0]
 8024ec8:	e7d9      	b.n	8024e7e <sniprintf+0x16>
 8024eca:	bf00      	nop
 8024ecc:	20000488 	.word	0x20000488

08024ed0 <siprintf>:
 8024ed0:	b40e      	push	{r1, r2, r3}
 8024ed2:	b500      	push	{lr}
 8024ed4:	b09c      	sub	sp, #112	; 0x70
 8024ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8024ed8:	9002      	str	r0, [sp, #8]
 8024eda:	9006      	str	r0, [sp, #24]
 8024edc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024ee0:	4809      	ldr	r0, [pc, #36]	; (8024f08 <siprintf+0x38>)
 8024ee2:	9107      	str	r1, [sp, #28]
 8024ee4:	9104      	str	r1, [sp, #16]
 8024ee6:	4909      	ldr	r1, [pc, #36]	; (8024f0c <siprintf+0x3c>)
 8024ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8024eec:	9105      	str	r1, [sp, #20]
 8024eee:	6800      	ldr	r0, [r0, #0]
 8024ef0:	9301      	str	r3, [sp, #4]
 8024ef2:	a902      	add	r1, sp, #8
 8024ef4:	f002 ff20 	bl	8027d38 <_svfiprintf_r>
 8024ef8:	9b02      	ldr	r3, [sp, #8]
 8024efa:	2200      	movs	r2, #0
 8024efc:	701a      	strb	r2, [r3, #0]
 8024efe:	b01c      	add	sp, #112	; 0x70
 8024f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8024f04:	b003      	add	sp, #12
 8024f06:	4770      	bx	lr
 8024f08:	20000488 	.word	0x20000488
 8024f0c:	ffff0208 	.word	0xffff0208

08024f10 <siscanf>:
 8024f10:	b40e      	push	{r1, r2, r3}
 8024f12:	b510      	push	{r4, lr}
 8024f14:	b09f      	sub	sp, #124	; 0x7c
 8024f16:	ac21      	add	r4, sp, #132	; 0x84
 8024f18:	f44f 7101 	mov.w	r1, #516	; 0x204
 8024f1c:	f854 2b04 	ldr.w	r2, [r4], #4
 8024f20:	9201      	str	r2, [sp, #4]
 8024f22:	f8ad 101c 	strh.w	r1, [sp, #28]
 8024f26:	9004      	str	r0, [sp, #16]
 8024f28:	9008      	str	r0, [sp, #32]
 8024f2a:	f7db f993 	bl	8000254 <strlen>
 8024f2e:	4b0c      	ldr	r3, [pc, #48]	; (8024f60 <siscanf+0x50>)
 8024f30:	9005      	str	r0, [sp, #20]
 8024f32:	9009      	str	r0, [sp, #36]	; 0x24
 8024f34:	930d      	str	r3, [sp, #52]	; 0x34
 8024f36:	480b      	ldr	r0, [pc, #44]	; (8024f64 <siscanf+0x54>)
 8024f38:	9a01      	ldr	r2, [sp, #4]
 8024f3a:	6800      	ldr	r0, [r0, #0]
 8024f3c:	9403      	str	r4, [sp, #12]
 8024f3e:	2300      	movs	r3, #0
 8024f40:	9311      	str	r3, [sp, #68]	; 0x44
 8024f42:	9316      	str	r3, [sp, #88]	; 0x58
 8024f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024f48:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024f4c:	a904      	add	r1, sp, #16
 8024f4e:	4623      	mov	r3, r4
 8024f50:	f003 f84c 	bl	8027fec <__ssvfiscanf_r>
 8024f54:	b01f      	add	sp, #124	; 0x7c
 8024f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024f5a:	b003      	add	sp, #12
 8024f5c:	4770      	bx	lr
 8024f5e:	bf00      	nop
 8024f60:	08024f8b 	.word	0x08024f8b
 8024f64:	20000488 	.word	0x20000488

08024f68 <__sread>:
 8024f68:	b510      	push	{r4, lr}
 8024f6a:	460c      	mov	r4, r1
 8024f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f70:	f003 fca8 	bl	80288c4 <_read_r>
 8024f74:	2800      	cmp	r0, #0
 8024f76:	bfab      	itete	ge
 8024f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8024f7c:	181b      	addge	r3, r3, r0
 8024f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024f82:	bfac      	ite	ge
 8024f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8024f86:	81a3      	strhlt	r3, [r4, #12]
 8024f88:	bd10      	pop	{r4, pc}

08024f8a <__seofread>:
 8024f8a:	2000      	movs	r0, #0
 8024f8c:	4770      	bx	lr

08024f8e <__swrite>:
 8024f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024f92:	461f      	mov	r7, r3
 8024f94:	898b      	ldrh	r3, [r1, #12]
 8024f96:	05db      	lsls	r3, r3, #23
 8024f98:	4605      	mov	r5, r0
 8024f9a:	460c      	mov	r4, r1
 8024f9c:	4616      	mov	r6, r2
 8024f9e:	d505      	bpl.n	8024fac <__swrite+0x1e>
 8024fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024fa4:	2302      	movs	r3, #2
 8024fa6:	2200      	movs	r2, #0
 8024fa8:	f002 fa1e 	bl	80273e8 <_lseek_r>
 8024fac:	89a3      	ldrh	r3, [r4, #12]
 8024fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024fb6:	81a3      	strh	r3, [r4, #12]
 8024fb8:	4632      	mov	r2, r6
 8024fba:	463b      	mov	r3, r7
 8024fbc:	4628      	mov	r0, r5
 8024fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024fc2:	f001 b931 	b.w	8026228 <_write_r>

08024fc6 <__sseek>:
 8024fc6:	b510      	push	{r4, lr}
 8024fc8:	460c      	mov	r4, r1
 8024fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024fce:	f002 fa0b 	bl	80273e8 <_lseek_r>
 8024fd2:	1c43      	adds	r3, r0, #1
 8024fd4:	89a3      	ldrh	r3, [r4, #12]
 8024fd6:	bf15      	itete	ne
 8024fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8024fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024fe2:	81a3      	strheq	r3, [r4, #12]
 8024fe4:	bf18      	it	ne
 8024fe6:	81a3      	strhne	r3, [r4, #12]
 8024fe8:	bd10      	pop	{r4, pc}

08024fea <__sclose>:
 8024fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024fee:	f001 ba05 	b.w	80263fc <_close_r>

08024ff2 <stpcpy>:
 8024ff2:	4603      	mov	r3, r0
 8024ff4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024ff8:	4618      	mov	r0, r3
 8024ffa:	f803 2b01 	strb.w	r2, [r3], #1
 8024ffe:	2a00      	cmp	r2, #0
 8025000:	d1f8      	bne.n	8024ff4 <stpcpy+0x2>
 8025002:	4770      	bx	lr

08025004 <strchr>:
 8025004:	b2c9      	uxtb	r1, r1
 8025006:	4603      	mov	r3, r0
 8025008:	f810 2b01 	ldrb.w	r2, [r0], #1
 802500c:	b11a      	cbz	r2, 8025016 <strchr+0x12>
 802500e:	428a      	cmp	r2, r1
 8025010:	d1f9      	bne.n	8025006 <strchr+0x2>
 8025012:	4618      	mov	r0, r3
 8025014:	4770      	bx	lr
 8025016:	2900      	cmp	r1, #0
 8025018:	bf18      	it	ne
 802501a:	2300      	movne	r3, #0
 802501c:	e7f9      	b.n	8025012 <strchr+0xe>

0802501e <strcpy>:
 802501e:	4603      	mov	r3, r0
 8025020:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025024:	f803 2b01 	strb.w	r2, [r3], #1
 8025028:	2a00      	cmp	r2, #0
 802502a:	d1f9      	bne.n	8025020 <strcpy+0x2>
 802502c:	4770      	bx	lr
	...

08025030 <iso_year_adjust>:
 8025030:	6942      	ldr	r2, [r0, #20]
 8025032:	2a00      	cmp	r2, #0
 8025034:	f240 736c 	movw	r3, #1900	; 0x76c
 8025038:	bfa8      	it	ge
 802503a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 802503e:	4413      	add	r3, r2
 8025040:	0792      	lsls	r2, r2, #30
 8025042:	d105      	bne.n	8025050 <iso_year_adjust+0x20>
 8025044:	2164      	movs	r1, #100	; 0x64
 8025046:	fb93 f2f1 	sdiv	r2, r3, r1
 802504a:	fb01 3212 	mls	r2, r1, r2, r3
 802504e:	b9da      	cbnz	r2, 8025088 <iso_year_adjust+0x58>
 8025050:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025054:	fb93 f1f2 	sdiv	r1, r3, r2
 8025058:	fb02 3311 	mls	r3, r2, r1, r3
 802505c:	fab3 f383 	clz	r3, r3
 8025060:	095b      	lsrs	r3, r3, #5
 8025062:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8025066:	0040      	lsls	r0, r0, #1
 8025068:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802506c:	4418      	add	r0, r3
 802506e:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8025072:	4298      	cmp	r0, r3
 8025074:	d03a      	beq.n	80250ec <iso_year_adjust+0xbc>
 8025076:	dc21      	bgt.n	80250bc <iso_year_adjust+0x8c>
 8025078:	2801      	cmp	r0, #1
 802507a:	dc1a      	bgt.n	80250b2 <iso_year_adjust+0x82>
 802507c:	2800      	cmp	r0, #0
 802507e:	bfb4      	ite	lt
 8025080:	2000      	movlt	r0, #0
 8025082:	f04f 30ff 	movge.w	r0, #4294967295
 8025086:	4770      	bx	lr
 8025088:	2301      	movs	r3, #1
 802508a:	e7ea      	b.n	8025062 <iso_year_adjust+0x32>
 802508c:	2817      	cmp	r0, #23
 802508e:	d813      	bhi.n	80250b8 <iso_year_adjust+0x88>
 8025090:	e8df f000 	tbb	[pc, r0]
 8025094:	0c0c0c0c 	.word	0x0c0c0c0c
 8025098:	0c0c1212 	.word	0x0c0c1212
 802509c:	12121212 	.word	0x12121212
 80250a0:	12121212 	.word	0x12121212
 80250a4:	0c0c1212 	.word	0x0c0c1212
 80250a8:	0c0c1212 	.word	0x0c0c1212
 80250ac:	f04f 30ff 	mov.w	r0, #4294967295
 80250b0:	4770      	bx	lr
 80250b2:	380a      	subs	r0, #10
 80250b4:	2817      	cmp	r0, #23
 80250b6:	d9e9      	bls.n	802508c <iso_year_adjust+0x5c>
 80250b8:	2000      	movs	r0, #0
 80250ba:	4770      	bx	lr
 80250bc:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80250c0:	4298      	cmp	r0, r3
 80250c2:	dc06      	bgt.n	80250d2 <iso_year_adjust+0xa2>
 80250c4:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80250c8:	4298      	cmp	r0, r3
 80250ca:	bfd4      	ite	le
 80250cc:	2000      	movle	r0, #0
 80250ce:	2001      	movgt	r0, #1
 80250d0:	4770      	bx	lr
 80250d2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80250d6:	3802      	subs	r0, #2
 80250d8:	2815      	cmp	r0, #21
 80250da:	d8ed      	bhi.n	80250b8 <iso_year_adjust+0x88>
 80250dc:	2301      	movs	r3, #1
 80250de:	4083      	lsls	r3, r0
 80250e0:	4803      	ldr	r0, [pc, #12]	; (80250f0 <iso_year_adjust+0xc0>)
 80250e2:	4018      	ands	r0, r3
 80250e4:	3800      	subs	r0, #0
 80250e6:	bf18      	it	ne
 80250e8:	2001      	movne	r0, #1
 80250ea:	4770      	bx	lr
 80250ec:	2001      	movs	r0, #1
 80250ee:	4770      	bx	lr
 80250f0:	002a001f 	.word	0x002a001f

080250f4 <__strftime.isra.0>:
 80250f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250f8:	b08f      	sub	sp, #60	; 0x3c
 80250fa:	461e      	mov	r6, r3
 80250fc:	2300      	movs	r3, #0
 80250fe:	4607      	mov	r7, r0
 8025100:	460d      	mov	r5, r1
 8025102:	9302      	str	r3, [sp, #8]
 8025104:	461c      	mov	r4, r3
 8025106:	7813      	ldrb	r3, [r2, #0]
 8025108:	2b00      	cmp	r3, #0
 802510a:	f000 84ba 	beq.w	8025a82 <__strftime.isra.0+0x98e>
 802510e:	2b25      	cmp	r3, #37	; 0x25
 8025110:	d11f      	bne.n	8025152 <__strftime.isra.0+0x5e>
 8025112:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025116:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 802511a:	d024      	beq.n	8025166 <__strftime.isra.0+0x72>
 802511c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025120:	d021      	beq.n	8025166 <__strftime.isra.0+0x72>
 8025122:	f102 0801 	add.w	r8, r2, #1
 8025126:	f04f 0b00 	mov.w	fp, #0
 802512a:	f898 2000 	ldrb.w	r2, [r8]
 802512e:	3a31      	subs	r2, #49	; 0x31
 8025130:	2a08      	cmp	r2, #8
 8025132:	d81b      	bhi.n	802516c <__strftime.isra.0+0x78>
 8025134:	4640      	mov	r0, r8
 8025136:	220a      	movs	r2, #10
 8025138:	a906      	add	r1, sp, #24
 802513a:	f000 fddd 	bl	8025cf8 <strtoul>
 802513e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8025142:	4681      	mov	r9, r0
 8025144:	f898 2000 	ldrb.w	r2, [r8]
 8025148:	2a45      	cmp	r2, #69	; 0x45
 802514a:	d112      	bne.n	8025172 <__strftime.isra.0+0x7e>
 802514c:	f108 0801 	add.w	r8, r8, #1
 8025150:	e011      	b.n	8025176 <__strftime.isra.0+0x82>
 8025152:	1e69      	subs	r1, r5, #1
 8025154:	42a1      	cmp	r1, r4
 8025156:	d802      	bhi.n	802515e <__strftime.isra.0+0x6a>
 8025158:	2400      	movs	r4, #0
 802515a:	f000 bc95 	b.w	8025a88 <__strftime.isra.0+0x994>
 802515e:	553b      	strb	r3, [r7, r4]
 8025160:	3201      	adds	r2, #1
 8025162:	3401      	adds	r4, #1
 8025164:	e7cf      	b.n	8025106 <__strftime.isra.0+0x12>
 8025166:	f102 0802 	add.w	r8, r2, #2
 802516a:	e7de      	b.n	802512a <__strftime.isra.0+0x36>
 802516c:	f04f 0900 	mov.w	r9, #0
 8025170:	e7e8      	b.n	8025144 <__strftime.isra.0+0x50>
 8025172:	2a4f      	cmp	r2, #79	; 0x4f
 8025174:	d0ea      	beq.n	802514c <__strftime.isra.0+0x58>
 8025176:	f898 0000 	ldrb.w	r0, [r8]
 802517a:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 802517e:	2a55      	cmp	r2, #85	; 0x55
 8025180:	d8ea      	bhi.n	8025158 <__strftime.isra.0+0x64>
 8025182:	a301      	add	r3, pc, #4	; (adr r3, 8025188 <__strftime.isra.0+0x94>)
 8025184:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8025188:	08025a77 	.word	0x08025a77
 802518c:	08025159 	.word	0x08025159
 8025190:	08025159 	.word	0x08025159
 8025194:	08025159 	.word	0x08025159
 8025198:	08025159 	.word	0x08025159
 802519c:	08025159 	.word	0x08025159
 80251a0:	08025159 	.word	0x08025159
 80251a4:	08025159 	.word	0x08025159
 80251a8:	08025159 	.word	0x08025159
 80251ac:	08025159 	.word	0x08025159
 80251b0:	08025159 	.word	0x08025159
 80251b4:	08025159 	.word	0x08025159
 80251b8:	08025159 	.word	0x08025159
 80251bc:	08025159 	.word	0x08025159
 80251c0:	08025159 	.word	0x08025159
 80251c4:	08025159 	.word	0x08025159
 80251c8:	08025159 	.word	0x08025159
 80251cc:	08025159 	.word	0x08025159
 80251d0:	08025159 	.word	0x08025159
 80251d4:	08025159 	.word	0x08025159
 80251d8:	08025159 	.word	0x08025159
 80251dc:	08025159 	.word	0x08025159
 80251e0:	08025159 	.word	0x08025159
 80251e4:	08025159 	.word	0x08025159
 80251e8:	08025159 	.word	0x08025159
 80251ec:	08025159 	.word	0x08025159
 80251f0:	08025159 	.word	0x08025159
 80251f4:	08025159 	.word	0x08025159
 80251f8:	0802531d 	.word	0x0802531d
 80251fc:	08025375 	.word	0x08025375
 8025200:	080253e3 	.word	0x080253e3
 8025204:	08025481 	.word	0x08025481
 8025208:	08025159 	.word	0x08025159
 802520c:	080254cd 	.word	0x080254cd
 8025210:	080255b9 	.word	0x080255b9
 8025214:	08025693 	.word	0x08025693
 8025218:	080256a1 	.word	0x080256a1
 802521c:	08025159 	.word	0x08025159
 8025220:	08025159 	.word	0x08025159
 8025224:	08025159 	.word	0x08025159
 8025228:	080256d1 	.word	0x080256d1
 802522c:	08025159 	.word	0x08025159
 8025230:	08025159 	.word	0x08025159
 8025234:	080256e5 	.word	0x080256e5
 8025238:	08025159 	.word	0x08025159
 802523c:	08025737 	.word	0x08025737
 8025240:	0802584b 	.word	0x0802584b
 8025244:	0802585b 	.word	0x0802585b
 8025248:	08025883 	.word	0x08025883
 802524c:	080258bd 	.word	0x080258bd
 8025250:	08025931 	.word	0x08025931
 8025254:	080253db 	.word	0x080253db
 8025258:	0802595d 	.word	0x0802595d
 802525c:	08025a25 	.word	0x08025a25
 8025260:	08025159 	.word	0x08025159
 8025264:	08025159 	.word	0x08025159
 8025268:	08025159 	.word	0x08025159
 802526c:	08025159 	.word	0x08025159
 8025270:	08025159 	.word	0x08025159
 8025274:	08025159 	.word	0x08025159
 8025278:	080252e1 	.word	0x080252e1
 802527c:	0802534b 	.word	0x0802534b
 8025280:	080253a1 	.word	0x080253a1
 8025284:	0802545d 	.word	0x0802545d
 8025288:	0802545d 	.word	0x0802545d
 802528c:	08025159 	.word	0x08025159
 8025290:	0802551f 	.word	0x0802551f
 8025294:	0802534b 	.word	0x0802534b
 8025298:	08025159 	.word	0x08025159
 802529c:	080256c3 	.word	0x080256c3
 80252a0:	08025693 	.word	0x08025693
 80252a4:	080256a1 	.word	0x080256a1
 80252a8:	080256cb 	.word	0x080256cb
 80252ac:	080256d5 	.word	0x080256d5
 80252b0:	08025159 	.word	0x08025159
 80252b4:	080256e5 	.word	0x080256e5
 80252b8:	08025159 	.word	0x08025159
 80252bc:	080253cb 	.word	0x080253cb
 80252c0:	08025749 	.word	0x08025749
 80252c4:	0802584f 	.word	0x0802584f
 80252c8:	08025869 	.word	0x08025869
 80252cc:	08025159 	.word	0x08025159
 80252d0:	08025923 	.word	0x08025923
 80252d4:	080253d3 	.word	0x080253d3
 80252d8:	08025941 	.word	0x08025941
 80252dc:	080259af 	.word	0x080259af
 80252e0:	69b3      	ldr	r3, [r6, #24]
 80252e2:	4aa9      	ldr	r2, [pc, #676]	; (8025588 <__strftime.isra.0+0x494>)
 80252e4:	3318      	adds	r3, #24
 80252e6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80252ea:	4648      	mov	r0, r9
 80252ec:	f7da ffb2 	bl	8000254 <strlen>
 80252f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80252f4:	4420      	add	r0, r4
 80252f6:	1e6b      	subs	r3, r5, #1
 80252f8:	42a0      	cmp	r0, r4
 80252fa:	d107      	bne.n	802530c <__strftime.isra.0+0x218>
 80252fc:	f898 3000 	ldrb.w	r3, [r8]
 8025300:	2b00      	cmp	r3, #0
 8025302:	f000 83be 	beq.w	8025a82 <__strftime.isra.0+0x98e>
 8025306:	f108 0201 	add.w	r2, r8, #1
 802530a:	e6fc      	b.n	8025106 <__strftime.isra.0+0x12>
 802530c:	42a3      	cmp	r3, r4
 802530e:	f67f af23 	bls.w	8025158 <__strftime.isra.0+0x64>
 8025312:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025316:	553a      	strb	r2, [r7, r4]
 8025318:	3401      	adds	r4, #1
 802531a:	e7ed      	b.n	80252f8 <__strftime.isra.0+0x204>
 802531c:	69b2      	ldr	r2, [r6, #24]
 802531e:	4b9a      	ldr	r3, [pc, #616]	; (8025588 <__strftime.isra.0+0x494>)
 8025320:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025324:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8025328:	4648      	mov	r0, r9
 802532a:	f7da ff93 	bl	8000254 <strlen>
 802532e:	f109 39ff 	add.w	r9, r9, #4294967295
 8025332:	4420      	add	r0, r4
 8025334:	1e6b      	subs	r3, r5, #1
 8025336:	42a0      	cmp	r0, r4
 8025338:	d0e0      	beq.n	80252fc <__strftime.isra.0+0x208>
 802533a:	42a3      	cmp	r3, r4
 802533c:	f67f af0c 	bls.w	8025158 <__strftime.isra.0+0x64>
 8025340:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025344:	553a      	strb	r2, [r7, r4]
 8025346:	3401      	adds	r4, #1
 8025348:	e7f5      	b.n	8025336 <__strftime.isra.0+0x242>
 802534a:	4b8f      	ldr	r3, [pc, #572]	; (8025588 <__strftime.isra.0+0x494>)
 802534c:	6932      	ldr	r2, [r6, #16]
 802534e:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8025352:	4648      	mov	r0, r9
 8025354:	f7da ff7e 	bl	8000254 <strlen>
 8025358:	f109 39ff 	add.w	r9, r9, #4294967295
 802535c:	4420      	add	r0, r4
 802535e:	1e6b      	subs	r3, r5, #1
 8025360:	42a0      	cmp	r0, r4
 8025362:	d0cb      	beq.n	80252fc <__strftime.isra.0+0x208>
 8025364:	42a3      	cmp	r3, r4
 8025366:	f67f aef7 	bls.w	8025158 <__strftime.isra.0+0x64>
 802536a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802536e:	553a      	strb	r2, [r7, r4]
 8025370:	3401      	adds	r4, #1
 8025372:	e7f5      	b.n	8025360 <__strftime.isra.0+0x26c>
 8025374:	6933      	ldr	r3, [r6, #16]
 8025376:	4a84      	ldr	r2, [pc, #528]	; (8025588 <__strftime.isra.0+0x494>)
 8025378:	330c      	adds	r3, #12
 802537a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802537e:	4648      	mov	r0, r9
 8025380:	f7da ff68 	bl	8000254 <strlen>
 8025384:	f109 39ff 	add.w	r9, r9, #4294967295
 8025388:	4420      	add	r0, r4
 802538a:	1e6b      	subs	r3, r5, #1
 802538c:	42a0      	cmp	r0, r4
 802538e:	d0b5      	beq.n	80252fc <__strftime.isra.0+0x208>
 8025390:	42a3      	cmp	r3, r4
 8025392:	f67f aee1 	bls.w	8025158 <__strftime.isra.0+0x64>
 8025396:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802539a:	553a      	strb	r2, [r7, r4]
 802539c:	3401      	adds	r4, #1
 802539e:	e7f5      	b.n	802538c <__strftime.isra.0+0x298>
 80253a0:	4b79      	ldr	r3, [pc, #484]	; (8025588 <__strftime.isra.0+0x494>)
 80253a2:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80253a6:	4648      	mov	r0, r9
 80253a8:	f7da ff54 	bl	8000254 <strlen>
 80253ac:	f899 3000 	ldrb.w	r3, [r9]
 80253b0:	2b00      	cmp	r3, #0
 80253b2:	d0a3      	beq.n	80252fc <__strftime.isra.0+0x208>
 80253b4:	4633      	mov	r3, r6
 80253b6:	464a      	mov	r2, r9
 80253b8:	1b29      	subs	r1, r5, r4
 80253ba:	1938      	adds	r0, r7, r4
 80253bc:	f7ff fe9a 	bl	80250f4 <__strftime.isra.0>
 80253c0:	2800      	cmp	r0, #0
 80253c2:	f77f aec9 	ble.w	8025158 <__strftime.isra.0+0x64>
 80253c6:	4404      	add	r4, r0
 80253c8:	e798      	b.n	80252fc <__strftime.isra.0+0x208>
 80253ca:	4b6f      	ldr	r3, [pc, #444]	; (8025588 <__strftime.isra.0+0x494>)
 80253cc:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80253d0:	e7e9      	b.n	80253a6 <__strftime.isra.0+0x2b2>
 80253d2:	4b6d      	ldr	r3, [pc, #436]	; (8025588 <__strftime.isra.0+0x494>)
 80253d4:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80253d8:	e7e5      	b.n	80253a6 <__strftime.isra.0+0x2b2>
 80253da:	4b6b      	ldr	r3, [pc, #428]	; (8025588 <__strftime.isra.0+0x494>)
 80253dc:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80253e0:	e7e1      	b.n	80253a6 <__strftime.isra.0+0x2b2>
 80253e2:	496a      	ldr	r1, [pc, #424]	; (802558c <__strftime.isra.0+0x498>)
 80253e4:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80253e8:	458a      	cmp	sl, r1
 80253ea:	bfac      	ite	ge
 80253ec:	2100      	movge	r1, #0
 80253ee:	2101      	movlt	r1, #1
 80253f0:	f1ba 0f00 	cmp.w	sl, #0
 80253f4:	db11      	blt.n	802541a <__strftime.isra.0+0x326>
 80253f6:	2064      	movs	r0, #100	; 0x64
 80253f8:	fb9a f0f0 	sdiv	r0, sl, r0
 80253fc:	3013      	adds	r0, #19
 80253fe:	f1bb 0f00 	cmp.w	fp, #0
 8025402:	d014      	beq.n	802542e <__strftime.isra.0+0x33a>
 8025404:	2863      	cmp	r0, #99	; 0x63
 8025406:	dd27      	ble.n	8025458 <__strftime.isra.0+0x364>
 8025408:	4b61      	ldr	r3, [pc, #388]	; (8025590 <__strftime.isra.0+0x49c>)
 802540a:	4a62      	ldr	r2, [pc, #392]	; (8025594 <__strftime.isra.0+0x4a0>)
 802540c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025410:	bf18      	it	ne
 8025412:	461a      	movne	r2, r3
 8025414:	f8df c198 	ldr.w	ip, [pc, #408]	; 80255b0 <__strftime.isra.0+0x4bc>
 8025418:	e00c      	b.n	8025434 <__strftime.isra.0+0x340>
 802541a:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 802541e:	9103      	str	r1, [sp, #12]
 8025420:	f000 ff82 	bl	8026328 <abs>
 8025424:	2264      	movs	r2, #100	; 0x64
 8025426:	9903      	ldr	r1, [sp, #12]
 8025428:	fb90 f0f2 	sdiv	r0, r0, r2
 802542c:	e7e7      	b.n	80253fe <__strftime.isra.0+0x30a>
 802542e:	4a58      	ldr	r2, [pc, #352]	; (8025590 <__strftime.isra.0+0x49c>)
 8025430:	f8df c180 	ldr.w	ip, [pc, #384]	; 80255b4 <__strftime.isra.0+0x4c0>
 8025434:	4b58      	ldr	r3, [pc, #352]	; (8025598 <__strftime.isra.0+0x4a4>)
 8025436:	9001      	str	r0, [sp, #4]
 8025438:	f1b9 0f02 	cmp.w	r9, #2
 802543c:	bf2c      	ite	cs
 802543e:	ebc1 0109 	rsbcs	r1, r1, r9
 8025442:	f1c1 0102 	rsbcc	r1, r1, #2
 8025446:	9100      	str	r1, [sp, #0]
 8025448:	4950      	ldr	r1, [pc, #320]	; (802558c <__strftime.isra.0+0x498>)
 802544a:	458a      	cmp	sl, r1
 802544c:	bfa8      	it	ge
 802544e:	4613      	movge	r3, r2
 8025450:	4662      	mov	r2, ip
 8025452:	1b29      	subs	r1, r5, r4
 8025454:	1938      	adds	r0, r7, r4
 8025456:	e028      	b.n	80254aa <__strftime.isra.0+0x3b6>
 8025458:	4a4d      	ldr	r2, [pc, #308]	; (8025590 <__strftime.isra.0+0x49c>)
 802545a:	e7db      	b.n	8025414 <__strftime.isra.0+0x320>
 802545c:	494f      	ldr	r1, [pc, #316]	; (802559c <__strftime.isra.0+0x4a8>)
 802545e:	4a50      	ldr	r2, [pc, #320]	; (80255a0 <__strftime.isra.0+0x4ac>)
 8025460:	68f3      	ldr	r3, [r6, #12]
 8025462:	2864      	cmp	r0, #100	; 0x64
 8025464:	bf08      	it	eq
 8025466:	460a      	moveq	r2, r1
 8025468:	1b29      	subs	r1, r5, r4
 802546a:	1938      	adds	r0, r7, r4
 802546c:	f7ff fcfc 	bl	8024e68 <sniprintf>
 8025470:	2800      	cmp	r0, #0
 8025472:	f6ff ae71 	blt.w	8025158 <__strftime.isra.0+0x64>
 8025476:	4404      	add	r4, r0
 8025478:	42a5      	cmp	r5, r4
 802547a:	f63f af3f 	bhi.w	80252fc <__strftime.isra.0+0x208>
 802547e:	e66b      	b.n	8025158 <__strftime.isra.0+0x64>
 8025480:	6970      	ldr	r0, [r6, #20]
 8025482:	6933      	ldr	r3, [r6, #16]
 8025484:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8025488:	2800      	cmp	r0, #0
 802548a:	eb07 0904 	add.w	r9, r7, r4
 802548e:	eba5 0104 	sub.w	r1, r5, r4
 8025492:	f103 0301 	add.w	r3, r3, #1
 8025496:	db0b      	blt.n	80254b0 <__strftime.isra.0+0x3bc>
 8025498:	2264      	movs	r2, #100	; 0x64
 802549a:	fb90 fcf2 	sdiv	ip, r0, r2
 802549e:	fb02 001c 	mls	r0, r2, ip, r0
 80254a2:	4a40      	ldr	r2, [pc, #256]	; (80255a4 <__strftime.isra.0+0x4b0>)
 80254a4:	e9cd a000 	strd	sl, r0, [sp]
 80254a8:	4648      	mov	r0, r9
 80254aa:	f7ff fcdd 	bl	8024e68 <sniprintf>
 80254ae:	e7df      	b.n	8025470 <__strftime.isra.0+0x37c>
 80254b0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80254b4:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80254b8:	f000 ff36 	bl	8026328 <abs>
 80254bc:	2264      	movs	r2, #100	; 0x64
 80254be:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 80254c2:	fb90 fcf2 	sdiv	ip, r0, r2
 80254c6:	fb0c 0012 	mls	r0, ip, r2, r0
 80254ca:	e7ea      	b.n	80254a2 <__strftime.isra.0+0x3ae>
 80254cc:	2225      	movs	r2, #37	; 0x25
 80254ce:	f88d 2018 	strb.w	r2, [sp, #24]
 80254d2:	f1bb 0f00 	cmp.w	fp, #0
 80254d6:	d011      	beq.n	80254fc <__strftime.isra.0+0x408>
 80254d8:	f1b9 0f06 	cmp.w	r9, #6
 80254dc:	bf38      	it	cc
 80254de:	f04f 0906 	movcc.w	r9, #6
 80254e2:	f1b9 0306 	subs.w	r3, r9, #6
 80254e6:	f88d b019 	strb.w	fp, [sp, #25]
 80254ea:	d10c      	bne.n	8025506 <__strftime.isra.0+0x412>
 80254ec:	f10d 001a 	add.w	r0, sp, #26
 80254f0:	492d      	ldr	r1, [pc, #180]	; (80255a8 <__strftime.isra.0+0x4b4>)
 80254f2:	f7ff fd94 	bl	802501e <strcpy>
 80254f6:	4633      	mov	r3, r6
 80254f8:	aa06      	add	r2, sp, #24
 80254fa:	e75d      	b.n	80253b8 <__strftime.isra.0+0x2c4>
 80254fc:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8025500:	f04f 090a 	mov.w	r9, #10
 8025504:	e7ed      	b.n	80254e2 <__strftime.isra.0+0x3ee>
 8025506:	4a29      	ldr	r2, [pc, #164]	; (80255ac <__strftime.isra.0+0x4b8>)
 8025508:	211e      	movs	r1, #30
 802550a:	f10d 001a 	add.w	r0, sp, #26
 802550e:	f7ff fcab 	bl	8024e68 <sniprintf>
 8025512:	2800      	cmp	r0, #0
 8025514:	ddea      	ble.n	80254ec <__strftime.isra.0+0x3f8>
 8025516:	f10d 031a 	add.w	r3, sp, #26
 802551a:	4418      	add	r0, r3
 802551c:	e7e8      	b.n	80254f0 <__strftime.isra.0+0x3fc>
 802551e:	4630      	mov	r0, r6
 8025520:	f7ff fd86 	bl	8025030 <iso_year_adjust>
 8025524:	4681      	mov	r9, r0
 8025526:	6970      	ldr	r0, [r6, #20]
 8025528:	2800      	cmp	r0, #0
 802552a:	db11      	blt.n	8025550 <__strftime.isra.0+0x45c>
 802552c:	2364      	movs	r3, #100	; 0x64
 802552e:	fb90 f2f3 	sdiv	r2, r0, r3
 8025532:	fb03 0012 	mls	r0, r3, r2, r0
 8025536:	2264      	movs	r2, #100	; 0x64
 8025538:	4481      	add	r9, r0
 802553a:	fb99 f3f2 	sdiv	r3, r9, r2
 802553e:	fb02 9913 	mls	r9, r2, r3, r9
 8025542:	4491      	add	r9, r2
 8025544:	fbb9 f3f2 	udiv	r3, r9, r2
 8025548:	fb02 9313 	mls	r3, r2, r3, r9
 802554c:	4a13      	ldr	r2, [pc, #76]	; (802559c <__strftime.isra.0+0x4a8>)
 802554e:	e78b      	b.n	8025468 <__strftime.isra.0+0x374>
 8025550:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025554:	f000 fee8 	bl	8026328 <abs>
 8025558:	2364      	movs	r3, #100	; 0x64
 802555a:	f1b9 0f00 	cmp.w	r9, #0
 802555e:	fb90 f2f3 	sdiv	r2, r0, r3
 8025562:	fb02 0013 	mls	r0, r2, r3, r0
 8025566:	da07      	bge.n	8025578 <__strftime.isra.0+0x484>
 8025568:	6972      	ldr	r2, [r6, #20]
 802556a:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 802556e:	429a      	cmp	r2, r3
 8025570:	bfb8      	it	lt
 8025572:	f04f 0901 	movlt.w	r9, #1
 8025576:	e7de      	b.n	8025536 <__strftime.isra.0+0x442>
 8025578:	d0dd      	beq.n	8025536 <__strftime.isra.0+0x442>
 802557a:	6972      	ldr	r2, [r6, #20]
 802557c:	4b03      	ldr	r3, [pc, #12]	; (802558c <__strftime.isra.0+0x498>)
 802557e:	429a      	cmp	r2, r3
 8025580:	bfb8      	it	lt
 8025582:	f04f 39ff 	movlt.w	r9, #4294967295
 8025586:	e7d6      	b.n	8025536 <__strftime.isra.0+0x442>
 8025588:	080453c4 	.word	0x080453c4
 802558c:	fffff894 	.word	0xfffff894
 8025590:	08045577 	.word	0x08045577
 8025594:	0804524c 	.word	0x0804524c
 8025598:	080457d6 	.word	0x080457d6
 802559c:	0804525c 	.word	0x0804525c
 80255a0:	0804524e 	.word	0x0804524e
 80255a4:	08045252 	.word	0x08045252
 80255a8:	08045265 	.word	0x08045265
 80255ac:	08045261 	.word	0x08045261
 80255b0:	08045244 	.word	0x08045244
 80255b4:	0804523d 	.word	0x0804523d
 80255b8:	6971      	ldr	r1, [r6, #20]
 80255ba:	4ab6      	ldr	r2, [pc, #728]	; (8025894 <__strftime.isra.0+0x7a0>)
 80255bc:	4291      	cmp	r1, r2
 80255be:	bfac      	ite	ge
 80255c0:	2300      	movge	r3, #0
 80255c2:	2301      	movlt	r3, #1
 80255c4:	4630      	mov	r0, r6
 80255c6:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80255ca:	f7ff fd31 	bl	8025030 <iso_year_adjust>
 80255ce:	9904      	ldr	r1, [sp, #16]
 80255d0:	2900      	cmp	r1, #0
 80255d2:	4682      	mov	sl, r0
 80255d4:	db2c      	blt.n	8025630 <__strftime.isra.0+0x53c>
 80255d6:	2264      	movs	r2, #100	; 0x64
 80255d8:	fb91 f2f2 	sdiv	r2, r1, r2
 80255dc:	3213      	adds	r2, #19
 80255de:	6970      	ldr	r0, [r6, #20]
 80255e0:	2800      	cmp	r0, #0
 80255e2:	db30      	blt.n	8025646 <__strftime.isra.0+0x552>
 80255e4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80255e8:	fb90 fefc 	sdiv	lr, r0, ip
 80255ec:	fb0c 001e 	mls	r0, ip, lr, r0
 80255f0:	f1ba 0f00 	cmp.w	sl, #0
 80255f4:	da36      	bge.n	8025664 <__strftime.isra.0+0x570>
 80255f6:	6971      	ldr	r1, [r6, #20]
 80255f8:	4ba7      	ldr	r3, [pc, #668]	; (8025898 <__strftime.isra.0+0x7a4>)
 80255fa:	4299      	cmp	r1, r3
 80255fc:	db3d      	blt.n	802567a <__strftime.isra.0+0x586>
 80255fe:	4482      	add	sl, r0
 8025600:	f1ba 3fff 	cmp.w	sl, #4294967295
 8025604:	d13e      	bne.n	8025684 <__strftime.isra.0+0x590>
 8025606:	3a01      	subs	r2, #1
 8025608:	f04f 0a63 	mov.w	sl, #99	; 0x63
 802560c:	9b03      	ldr	r3, [sp, #12]
 802560e:	2064      	movs	r0, #100	; 0x64
 8025610:	fb00 aa02 	mla	sl, r0, r2, sl
 8025614:	2b00      	cmp	r3, #0
 8025616:	f000 81ad 	beq.w	8025974 <__strftime.isra.0+0x880>
 802561a:	222d      	movs	r2, #45	; 0x2d
 802561c:	f88d 2018 	strb.w	r2, [sp, #24]
 8025620:	f1b9 0f00 	cmp.w	r9, #0
 8025624:	d001      	beq.n	802562a <__strftime.isra.0+0x536>
 8025626:	f109 39ff 	add.w	r9, r9, #4294967295
 802562a:	f10d 0219 	add.w	r2, sp, #25
 802562e:	e1ac      	b.n	802598a <__strftime.isra.0+0x896>
 8025630:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8025634:	9104      	str	r1, [sp, #16]
 8025636:	f000 fe77 	bl	8026328 <abs>
 802563a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802563e:	9904      	ldr	r1, [sp, #16]
 8025640:	fb90 f2fc 	sdiv	r2, r0, ip
 8025644:	e7cb      	b.n	80255de <__strftime.isra.0+0x4ea>
 8025646:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802564a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 802564e:	f000 fe6b 	bl	8026328 <abs>
 8025652:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025656:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802565a:	fb90 fefc 	sdiv	lr, r0, ip
 802565e:	fb0e 001c 	mls	r0, lr, ip, r0
 8025662:	e7c5      	b.n	80255f0 <__strftime.isra.0+0x4fc>
 8025664:	d0cb      	beq.n	80255fe <__strftime.isra.0+0x50a>
 8025666:	4b8b      	ldr	r3, [pc, #556]	; (8025894 <__strftime.isra.0+0x7a0>)
 8025668:	4299      	cmp	r1, r3
 802566a:	bfb4      	ite	lt
 802566c:	2301      	movlt	r3, #1
 802566e:	2300      	movge	r3, #0
 8025670:	9303      	str	r3, [sp, #12]
 8025672:	bfb8      	it	lt
 8025674:	f04f 3aff 	movlt.w	sl, #4294967295
 8025678:	e7c1      	b.n	80255fe <__strftime.isra.0+0x50a>
 802567a:	f04f 0a01 	mov.w	sl, #1
 802567e:	f8cd a00c 	str.w	sl, [sp, #12]
 8025682:	e7bc      	b.n	80255fe <__strftime.isra.0+0x50a>
 8025684:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8025688:	bf04      	itt	eq
 802568a:	3201      	addeq	r2, #1
 802568c:	f04f 0a00 	moveq.w	sl, #0
 8025690:	e7bc      	b.n	802560c <__strftime.isra.0+0x518>
 8025692:	4982      	ldr	r1, [pc, #520]	; (802589c <__strftime.isra.0+0x7a8>)
 8025694:	4a82      	ldr	r2, [pc, #520]	; (80258a0 <__strftime.isra.0+0x7ac>)
 8025696:	68b3      	ldr	r3, [r6, #8]
 8025698:	286b      	cmp	r0, #107	; 0x6b
 802569a:	bf08      	it	eq
 802569c:	460a      	moveq	r2, r1
 802569e:	e6e3      	b.n	8025468 <__strftime.isra.0+0x374>
 80256a0:	68b3      	ldr	r3, [r6, #8]
 80256a2:	b163      	cbz	r3, 80256be <__strftime.isra.0+0x5ca>
 80256a4:	2b0c      	cmp	r3, #12
 80256a6:	d004      	beq.n	80256b2 <__strftime.isra.0+0x5be>
 80256a8:	210c      	movs	r1, #12
 80256aa:	fb93 f2f1 	sdiv	r2, r3, r1
 80256ae:	fb01 3312 	mls	r3, r1, r2, r3
 80256b2:	497b      	ldr	r1, [pc, #492]	; (80258a0 <__strftime.isra.0+0x7ac>)
 80256b4:	4a79      	ldr	r2, [pc, #484]	; (802589c <__strftime.isra.0+0x7a8>)
 80256b6:	2849      	cmp	r0, #73	; 0x49
 80256b8:	bf08      	it	eq
 80256ba:	460a      	moveq	r2, r1
 80256bc:	e6d4      	b.n	8025468 <__strftime.isra.0+0x374>
 80256be:	230c      	movs	r3, #12
 80256c0:	e7f7      	b.n	80256b2 <__strftime.isra.0+0x5be>
 80256c2:	69f3      	ldr	r3, [r6, #28]
 80256c4:	4a77      	ldr	r2, [pc, #476]	; (80258a4 <__strftime.isra.0+0x7b0>)
 80256c6:	3301      	adds	r3, #1
 80256c8:	e6ce      	b.n	8025468 <__strftime.isra.0+0x374>
 80256ca:	6933      	ldr	r3, [r6, #16]
 80256cc:	3301      	adds	r3, #1
 80256ce:	e73d      	b.n	802554c <__strftime.isra.0+0x458>
 80256d0:	6873      	ldr	r3, [r6, #4]
 80256d2:	e73b      	b.n	802554c <__strftime.isra.0+0x458>
 80256d4:	1e6b      	subs	r3, r5, #1
 80256d6:	429c      	cmp	r4, r3
 80256d8:	f4bf ad3e 	bcs.w	8025158 <__strftime.isra.0+0x64>
 80256dc:	230a      	movs	r3, #10
 80256de:	553b      	strb	r3, [r7, r4]
 80256e0:	3401      	adds	r4, #1
 80256e2:	e60b      	b.n	80252fc <__strftime.isra.0+0x208>
 80256e4:	68b3      	ldr	r3, [r6, #8]
 80256e6:	2b0b      	cmp	r3, #11
 80256e8:	4b6f      	ldr	r3, [pc, #444]	; (80258a8 <__strftime.isra.0+0x7b4>)
 80256ea:	bfd4      	ite	le
 80256ec:	2200      	movle	r2, #0
 80256ee:	2201      	movgt	r2, #1
 80256f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80256f4:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 80256f8:	4648      	mov	r0, r9
 80256fa:	f7da fdab 	bl	8000254 <strlen>
 80256fe:	f109 32ff 	add.w	r2, r9, #4294967295
 8025702:	4420      	add	r0, r4
 8025704:	f105 3cff 	add.w	ip, r5, #4294967295
 8025708:	42a0      	cmp	r0, r4
 802570a:	f43f adf7 	beq.w	80252fc <__strftime.isra.0+0x208>
 802570e:	45a4      	cmp	ip, r4
 8025710:	f67f ad22 	bls.w	8025158 <__strftime.isra.0+0x64>
 8025714:	f898 1000 	ldrb.w	r1, [r8]
 8025718:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802571c:	2950      	cmp	r1, #80	; 0x50
 802571e:	d107      	bne.n	8025730 <__strftime.isra.0+0x63c>
 8025720:	4962      	ldr	r1, [pc, #392]	; (80258ac <__strftime.isra.0+0x7b8>)
 8025722:	5cc9      	ldrb	r1, [r1, r3]
 8025724:	f001 0103 	and.w	r1, r1, #3
 8025728:	2901      	cmp	r1, #1
 802572a:	bf08      	it	eq
 802572c:	3320      	addeq	r3, #32
 802572e:	b2db      	uxtb	r3, r3
 8025730:	553b      	strb	r3, [r7, r4]
 8025732:	3401      	adds	r4, #1
 8025734:	e7e8      	b.n	8025708 <__strftime.isra.0+0x614>
 8025736:	6873      	ldr	r3, [r6, #4]
 8025738:	9300      	str	r3, [sp, #0]
 802573a:	4a5d      	ldr	r2, [pc, #372]	; (80258b0 <__strftime.isra.0+0x7bc>)
 802573c:	68b3      	ldr	r3, [r6, #8]
 802573e:	1b29      	subs	r1, r5, r4
 8025740:	1938      	adds	r0, r7, r4
 8025742:	f7ff fb91 	bl	8024e68 <sniprintf>
 8025746:	e693      	b.n	8025470 <__strftime.isra.0+0x37c>
 8025748:	6a33      	ldr	r3, [r6, #32]
 802574a:	2b00      	cmp	r3, #0
 802574c:	db7a      	blt.n	8025844 <__strftime.isra.0+0x750>
 802574e:	f000 fb87 	bl	8025e60 <__tz_lock>
 8025752:	9b02      	ldr	r3, [sp, #8]
 8025754:	b90b      	cbnz	r3, 802575a <__strftime.isra.0+0x666>
 8025756:	f000 fb8f 	bl	8025e78 <_tzset_unlocked>
 802575a:	f001 fd8d 	bl	8027278 <__gettzinfo>
 802575e:	6a33      	ldr	r3, [r6, #32]
 8025760:	2b00      	cmp	r3, #0
 8025762:	bfd4      	ite	le
 8025764:	2200      	movle	r2, #0
 8025766:	2201      	movgt	r2, #1
 8025768:	2328      	movs	r3, #40	; 0x28
 802576a:	fb02 3303 	mla	r3, r2, r3, r3
 802576e:	58c3      	ldr	r3, [r0, r3]
 8025770:	f1c3 0900 	rsb	r9, r3, #0
 8025774:	f000 fb7a 	bl	8025e6c <__tz_unlock>
 8025778:	2301      	movs	r3, #1
 802577a:	9302      	str	r3, [sp, #8]
 802577c:	6972      	ldr	r2, [r6, #20]
 802577e:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8025782:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8025786:	f16c 0c00 	sbc.w	ip, ip, #0
 802578a:	f1bc 0f00 	cmp.w	ip, #0
 802578e:	eba5 0104 	sub.w	r1, r5, r4
 8025792:	eb07 0004 	add.w	r0, r7, r4
 8025796:	da02      	bge.n	802579e <__strftime.isra.0+0x6aa>
 8025798:	3303      	adds	r3, #3
 802579a:	f14c 0c00 	adc.w	ip, ip, #0
 802579e:	089b      	lsrs	r3, r3, #2
 80257a0:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 80257a4:	f102 3aff 	add.w	sl, r2, #4294967295
 80257a8:	ea4f 0cac 	mov.w	ip, ip, asr #2
 80257ac:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80257b0:	fb9a fefe 	sdiv	lr, sl, lr
 80257b4:	ebb3 030e 	subs.w	r3, r3, lr
 80257b8:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 80257bc:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 80257c0:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 80257c4:	fb9a fefe 	sdiv	lr, sl, lr
 80257c8:	eb13 030e 	adds.w	r3, r3, lr
 80257cc:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 80257d0:	3a46      	subs	r2, #70	; 0x46
 80257d2:	f240 1c6d 	movw	ip, #365	; 0x16d
 80257d6:	fb0c f202 	mul.w	r2, ip, r2
 80257da:	189b      	adds	r3, r3, r2
 80257dc:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 80257e0:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 80257e4:	f04f 0c18 	mov.w	ip, #24
 80257e8:	eb13 030e 	adds.w	r3, r3, lr
 80257ec:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80257f0:	fba3 3e0c 	umull	r3, lr, r3, ip
 80257f4:	fb0c e202 	mla	r2, ip, r2, lr
 80257f8:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80257fc:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8025800:	eb13 030e 	adds.w	r3, r3, lr
 8025804:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8025808:	fba3 320c 	umull	r3, r2, r3, ip
 802580c:	fb0c 220e 	mla	r2, ip, lr, r2
 8025810:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8025814:	eb13 030e 	adds.w	r3, r3, lr
 8025818:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 802581c:	fba3 3e0c 	umull	r3, lr, r3, ip
 8025820:	fb0c e202 	mla	r2, ip, r2, lr
 8025824:	f8d6 e000 	ldr.w	lr, [r6]
 8025828:	eb13 030e 	adds.w	r3, r3, lr
 802582c:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025830:	ebb3 0309 	subs.w	r3, r3, r9
 8025834:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8025838:	e9cd 3200 	strd	r3, r2, [sp]
 802583c:	4a1d      	ldr	r2, [pc, #116]	; (80258b4 <__strftime.isra.0+0x7c0>)
 802583e:	f7ff fb13 	bl	8024e68 <sniprintf>
 8025842:	e615      	b.n	8025470 <__strftime.isra.0+0x37c>
 8025844:	f04f 0900 	mov.w	r9, #0
 8025848:	e798      	b.n	802577c <__strftime.isra.0+0x688>
 802584a:	6833      	ldr	r3, [r6, #0]
 802584c:	e67e      	b.n	802554c <__strftime.isra.0+0x458>
 802584e:	1e6b      	subs	r3, r5, #1
 8025850:	429c      	cmp	r4, r3
 8025852:	f4bf ac81 	bcs.w	8025158 <__strftime.isra.0+0x64>
 8025856:	2309      	movs	r3, #9
 8025858:	e741      	b.n	80256de <__strftime.isra.0+0x5ea>
 802585a:	6833      	ldr	r3, [r6, #0]
 802585c:	9301      	str	r3, [sp, #4]
 802585e:	6873      	ldr	r3, [r6, #4]
 8025860:	9300      	str	r3, [sp, #0]
 8025862:	4a15      	ldr	r2, [pc, #84]	; (80258b8 <__strftime.isra.0+0x7c4>)
 8025864:	68b3      	ldr	r3, [r6, #8]
 8025866:	e5f4      	b.n	8025452 <__strftime.isra.0+0x35e>
 8025868:	1e6b      	subs	r3, r5, #1
 802586a:	429c      	cmp	r4, r3
 802586c:	f4bf ac74 	bcs.w	8025158 <__strftime.isra.0+0x64>
 8025870:	69b3      	ldr	r3, [r6, #24]
 8025872:	1c62      	adds	r2, r4, #1
 8025874:	b91b      	cbnz	r3, 802587e <__strftime.isra.0+0x78a>
 8025876:	2337      	movs	r3, #55	; 0x37
 8025878:	553b      	strb	r3, [r7, r4]
 802587a:	4614      	mov	r4, r2
 802587c:	e53e      	b.n	80252fc <__strftime.isra.0+0x208>
 802587e:	3330      	adds	r3, #48	; 0x30
 8025880:	e7fa      	b.n	8025878 <__strftime.isra.0+0x784>
 8025882:	69f3      	ldr	r3, [r6, #28]
 8025884:	69b2      	ldr	r2, [r6, #24]
 8025886:	3307      	adds	r3, #7
 8025888:	1a9b      	subs	r3, r3, r2
 802588a:	2207      	movs	r2, #7
 802588c:	fb93 f3f2 	sdiv	r3, r3, r2
 8025890:	e65c      	b.n	802554c <__strftime.isra.0+0x458>
 8025892:	bf00      	nop
 8025894:	fffff894 	.word	0xfffff894
 8025898:	fffff895 	.word	0xfffff895
 802589c:	0804524e 	.word	0x0804524e
 80258a0:	0804525c 	.word	0x0804525c
 80258a4:	08045271 	.word	0x08045271
 80258a8:	080453c4 	.word	0x080453c4
 80258ac:	08044f15 	.word	0x08044f15
 80258b0:	08045280 	.word	0x08045280
 80258b4:	08045276 	.word	0x08045276
 80258b8:	0804527b 	.word	0x0804527b
 80258bc:	4630      	mov	r0, r6
 80258be:	f7ff fbb7 	bl	8025030 <iso_year_adjust>
 80258c2:	69b2      	ldr	r2, [r6, #24]
 80258c4:	b132      	cbz	r2, 80258d4 <__strftime.isra.0+0x7e0>
 80258c6:	3a01      	subs	r2, #1
 80258c8:	2800      	cmp	r0, #0
 80258ca:	dc28      	bgt.n	802591e <__strftime.isra.0+0x82a>
 80258cc:	69f3      	ldr	r3, [r6, #28]
 80258ce:	d103      	bne.n	80258d8 <__strftime.isra.0+0x7e4>
 80258d0:	330a      	adds	r3, #10
 80258d2:	e7d9      	b.n	8025888 <__strftime.isra.0+0x794>
 80258d4:	2206      	movs	r2, #6
 80258d6:	e7f7      	b.n	80258c8 <__strftime.isra.0+0x7d4>
 80258d8:	6971      	ldr	r1, [r6, #20]
 80258da:	2900      	cmp	r1, #0
 80258dc:	eba2 0203 	sub.w	r2, r2, r3
 80258e0:	f240 736b 	movw	r3, #1899	; 0x76b
 80258e4:	bfa8      	it	ge
 80258e6:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 80258ea:	440b      	add	r3, r1
 80258ec:	0799      	lsls	r1, r3, #30
 80258ee:	d105      	bne.n	80258fc <__strftime.isra.0+0x808>
 80258f0:	2064      	movs	r0, #100	; 0x64
 80258f2:	fb93 f1f0 	sdiv	r1, r3, r0
 80258f6:	fb00 3111 	mls	r1, r0, r1, r3
 80258fa:	b971      	cbnz	r1, 802591a <__strftime.isra.0+0x826>
 80258fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8025900:	fb93 f0f1 	sdiv	r0, r3, r1
 8025904:	fb01 3310 	mls	r3, r1, r0, r3
 8025908:	fab3 f383 	clz	r3, r3
 802590c:	095b      	lsrs	r3, r3, #5
 802590e:	1ad3      	subs	r3, r2, r3
 8025910:	2b05      	cmp	r3, #5
 8025912:	bfb4      	ite	lt
 8025914:	2335      	movlt	r3, #53	; 0x35
 8025916:	2334      	movge	r3, #52	; 0x34
 8025918:	e618      	b.n	802554c <__strftime.isra.0+0x458>
 802591a:	2301      	movs	r3, #1
 802591c:	e7f7      	b.n	802590e <__strftime.isra.0+0x81a>
 802591e:	2301      	movs	r3, #1
 8025920:	e614      	b.n	802554c <__strftime.isra.0+0x458>
 8025922:	1e6b      	subs	r3, r5, #1
 8025924:	429c      	cmp	r4, r3
 8025926:	f4bf ac17 	bcs.w	8025158 <__strftime.isra.0+0x64>
 802592a:	69b3      	ldr	r3, [r6, #24]
 802592c:	3330      	adds	r3, #48	; 0x30
 802592e:	e6d6      	b.n	80256de <__strftime.isra.0+0x5ea>
 8025930:	69b2      	ldr	r2, [r6, #24]
 8025932:	b11a      	cbz	r2, 802593c <__strftime.isra.0+0x848>
 8025934:	3a01      	subs	r2, #1
 8025936:	69f3      	ldr	r3, [r6, #28]
 8025938:	3307      	adds	r3, #7
 802593a:	e7a5      	b.n	8025888 <__strftime.isra.0+0x794>
 802593c:	2206      	movs	r2, #6
 802593e:	e7fa      	b.n	8025936 <__strftime.isra.0+0x842>
 8025940:	6970      	ldr	r0, [r6, #20]
 8025942:	2800      	cmp	r0, #0
 8025944:	db05      	blt.n	8025952 <__strftime.isra.0+0x85e>
 8025946:	2364      	movs	r3, #100	; 0x64
 8025948:	fb90 f2f3 	sdiv	r2, r0, r3
 802594c:	fb02 0313 	mls	r3, r2, r3, r0
 8025950:	e5fc      	b.n	802554c <__strftime.isra.0+0x458>
 8025952:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025956:	f000 fce7 	bl	8026328 <abs>
 802595a:	e7f4      	b.n	8025946 <__strftime.isra.0+0x852>
 802595c:	6972      	ldr	r2, [r6, #20]
 802595e:	494c      	ldr	r1, [pc, #304]	; (8025a90 <__strftime.isra.0+0x99c>)
 8025960:	428a      	cmp	r2, r1
 8025962:	da05      	bge.n	8025970 <__strftime.isra.0+0x87c>
 8025964:	202d      	movs	r0, #45	; 0x2d
 8025966:	f88d 0018 	strb.w	r0, [sp, #24]
 802596a:	eba1 0a02 	sub.w	sl, r1, r2
 802596e:	e657      	b.n	8025620 <__strftime.isra.0+0x52c>
 8025970:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8025974:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025978:	d106      	bne.n	8025988 <__strftime.isra.0+0x894>
 802597a:	f242 720f 	movw	r2, #9999	; 0x270f
 802597e:	4592      	cmp	sl, r2
 8025980:	d902      	bls.n	8025988 <__strftime.isra.0+0x894>
 8025982:	f88d b018 	strb.w	fp, [sp, #24]
 8025986:	e64b      	b.n	8025620 <__strftime.isra.0+0x52c>
 8025988:	aa06      	add	r2, sp, #24
 802598a:	2125      	movs	r1, #37	; 0x25
 802598c:	7011      	strb	r1, [r2, #0]
 802598e:	f1bb 0f00 	cmp.w	fp, #0
 8025992:	d108      	bne.n	80259a6 <__strftime.isra.0+0x8b2>
 8025994:	1c50      	adds	r0, r2, #1
 8025996:	493f      	ldr	r1, [pc, #252]	; (8025a94 <__strftime.isra.0+0x9a0>)
 8025998:	f7ff fb41 	bl	802501e <strcpy>
 802599c:	f8cd a000 	str.w	sl, [sp]
 80259a0:	464b      	mov	r3, r9
 80259a2:	aa06      	add	r2, sp, #24
 80259a4:	e6cb      	b.n	802573e <__strftime.isra.0+0x64a>
 80259a6:	2330      	movs	r3, #48	; 0x30
 80259a8:	1c90      	adds	r0, r2, #2
 80259aa:	7053      	strb	r3, [r2, #1]
 80259ac:	e7f3      	b.n	8025996 <__strftime.isra.0+0x8a2>
 80259ae:	6a33      	ldr	r3, [r6, #32]
 80259b0:	2b00      	cmp	r3, #0
 80259b2:	f6ff aca3 	blt.w	80252fc <__strftime.isra.0+0x208>
 80259b6:	f000 fa53 	bl	8025e60 <__tz_lock>
 80259ba:	9b02      	ldr	r3, [sp, #8]
 80259bc:	b90b      	cbnz	r3, 80259c2 <__strftime.isra.0+0x8ce>
 80259be:	f000 fa5b 	bl	8025e78 <_tzset_unlocked>
 80259c2:	f001 fc59 	bl	8027278 <__gettzinfo>
 80259c6:	6a33      	ldr	r3, [r6, #32]
 80259c8:	2b00      	cmp	r3, #0
 80259ca:	bfd4      	ite	le
 80259cc:	2200      	movle	r2, #0
 80259ce:	2201      	movgt	r2, #1
 80259d0:	2328      	movs	r3, #40	; 0x28
 80259d2:	fb02 3303 	mla	r3, r2, r3, r3
 80259d6:	eb07 0a04 	add.w	sl, r7, r4
 80259da:	58c3      	ldr	r3, [r0, r3]
 80259dc:	f1c3 0900 	rsb	r9, r3, #0
 80259e0:	f000 fa44 	bl	8025e6c <__tz_unlock>
 80259e4:	233c      	movs	r3, #60	; 0x3c
 80259e6:	fb99 f0f3 	sdiv	r0, r9, r3
 80259ea:	f001 fcf5 	bl	80273d8 <labs>
 80259ee:	233c      	movs	r3, #60	; 0x3c
 80259f0:	eba5 0b04 	sub.w	fp, r5, r4
 80259f4:	fb90 f2f3 	sdiv	r2, r0, r3
 80259f8:	fb02 0013 	mls	r0, r2, r3, r0
 80259fc:	9000      	str	r0, [sp, #0]
 80259fe:	4a26      	ldr	r2, [pc, #152]	; (8025a98 <__strftime.isra.0+0x9a4>)
 8025a00:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8025a04:	4659      	mov	r1, fp
 8025a06:	4650      	mov	r0, sl
 8025a08:	fb99 f3f3 	sdiv	r3, r9, r3
 8025a0c:	f7ff fa2c 	bl	8024e68 <sniprintf>
 8025a10:	2800      	cmp	r0, #0
 8025a12:	f6ff aba1 	blt.w	8025158 <__strftime.isra.0+0x64>
 8025a16:	4404      	add	r4, r0
 8025a18:	42a5      	cmp	r5, r4
 8025a1a:	f67f ab9d 	bls.w	8025158 <__strftime.isra.0+0x64>
 8025a1e:	2301      	movs	r3, #1
 8025a20:	9302      	str	r3, [sp, #8]
 8025a22:	e46b      	b.n	80252fc <__strftime.isra.0+0x208>
 8025a24:	6a33      	ldr	r3, [r6, #32]
 8025a26:	2b00      	cmp	r3, #0
 8025a28:	f6ff ac68 	blt.w	80252fc <__strftime.isra.0+0x208>
 8025a2c:	f000 fa18 	bl	8025e60 <__tz_lock>
 8025a30:	9b02      	ldr	r3, [sp, #8]
 8025a32:	b90b      	cbnz	r3, 8025a38 <__strftime.isra.0+0x944>
 8025a34:	f000 fa20 	bl	8025e78 <_tzset_unlocked>
 8025a38:	6a33      	ldr	r3, [r6, #32]
 8025a3a:	4a18      	ldr	r2, [pc, #96]	; (8025a9c <__strftime.isra.0+0x9a8>)
 8025a3c:	2b00      	cmp	r3, #0
 8025a3e:	bfd4      	ite	le
 8025a40:	2300      	movle	r3, #0
 8025a42:	2301      	movgt	r3, #1
 8025a44:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025a48:	4648      	mov	r0, r9
 8025a4a:	f7da fc03 	bl	8000254 <strlen>
 8025a4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8025a52:	4420      	add	r0, r4
 8025a54:	1e6b      	subs	r3, r5, #1
 8025a56:	42a0      	cmp	r0, r4
 8025a58:	d102      	bne.n	8025a60 <__strftime.isra.0+0x96c>
 8025a5a:	f000 fa07 	bl	8025e6c <__tz_unlock>
 8025a5e:	e7de      	b.n	8025a1e <__strftime.isra.0+0x92a>
 8025a60:	42a3      	cmp	r3, r4
 8025a62:	d904      	bls.n	8025a6e <__strftime.isra.0+0x97a>
 8025a64:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025a68:	553a      	strb	r2, [r7, r4]
 8025a6a:	3401      	adds	r4, #1
 8025a6c:	e7f3      	b.n	8025a56 <__strftime.isra.0+0x962>
 8025a6e:	f000 f9fd 	bl	8025e6c <__tz_unlock>
 8025a72:	f7ff bb71 	b.w	8025158 <__strftime.isra.0+0x64>
 8025a76:	1e6b      	subs	r3, r5, #1
 8025a78:	429c      	cmp	r4, r3
 8025a7a:	f4bf ab6d 	bcs.w	8025158 <__strftime.isra.0+0x64>
 8025a7e:	2325      	movs	r3, #37	; 0x25
 8025a80:	e62d      	b.n	80256de <__strftime.isra.0+0x5ea>
 8025a82:	b10d      	cbz	r5, 8025a88 <__strftime.isra.0+0x994>
 8025a84:	2300      	movs	r3, #0
 8025a86:	553b      	strb	r3, [r7, r4]
 8025a88:	4620      	mov	r0, r4
 8025a8a:	b00f      	add	sp, #60	; 0x3c
 8025a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a90:	fffff894 	.word	0xfffff894
 8025a94:	0804526d 	.word	0x0804526d
 8025a98:	0804528a 	.word	0x0804528a
 8025a9c:	200004ec 	.word	0x200004ec

08025aa0 <strftime>:
 8025aa0:	f7ff bb28 	b.w	80250f4 <__strftime.isra.0>

08025aa4 <strncmp>:
 8025aa4:	b510      	push	{r4, lr}
 8025aa6:	b17a      	cbz	r2, 8025ac8 <strncmp+0x24>
 8025aa8:	4603      	mov	r3, r0
 8025aaa:	3901      	subs	r1, #1
 8025aac:	1884      	adds	r4, r0, r2
 8025aae:	f813 0b01 	ldrb.w	r0, [r3], #1
 8025ab2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8025ab6:	4290      	cmp	r0, r2
 8025ab8:	d101      	bne.n	8025abe <strncmp+0x1a>
 8025aba:	42a3      	cmp	r3, r4
 8025abc:	d101      	bne.n	8025ac2 <strncmp+0x1e>
 8025abe:	1a80      	subs	r0, r0, r2
 8025ac0:	bd10      	pop	{r4, pc}
 8025ac2:	2800      	cmp	r0, #0
 8025ac4:	d1f3      	bne.n	8025aae <strncmp+0xa>
 8025ac6:	e7fa      	b.n	8025abe <strncmp+0x1a>
 8025ac8:	4610      	mov	r0, r2
 8025aca:	e7f9      	b.n	8025ac0 <strncmp+0x1c>

08025acc <strncpy>:
 8025acc:	b510      	push	{r4, lr}
 8025ace:	3901      	subs	r1, #1
 8025ad0:	4603      	mov	r3, r0
 8025ad2:	b132      	cbz	r2, 8025ae2 <strncpy+0x16>
 8025ad4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025ad8:	f803 4b01 	strb.w	r4, [r3], #1
 8025adc:	3a01      	subs	r2, #1
 8025ade:	2c00      	cmp	r4, #0
 8025ae0:	d1f7      	bne.n	8025ad2 <strncpy+0x6>
 8025ae2:	441a      	add	r2, r3
 8025ae4:	2100      	movs	r1, #0
 8025ae6:	4293      	cmp	r3, r2
 8025ae8:	d100      	bne.n	8025aec <strncpy+0x20>
 8025aea:	bd10      	pop	{r4, pc}
 8025aec:	f803 1b01 	strb.w	r1, [r3], #1
 8025af0:	e7f9      	b.n	8025ae6 <strncpy+0x1a>
	...

08025af4 <_strtol_l.constprop.0>:
 8025af4:	2b01      	cmp	r3, #1
 8025af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025afa:	d001      	beq.n	8025b00 <_strtol_l.constprop.0+0xc>
 8025afc:	2b24      	cmp	r3, #36	; 0x24
 8025afe:	d906      	bls.n	8025b0e <_strtol_l.constprop.0+0x1a>
 8025b00:	f001 fa9c 	bl	802703c <__errno>
 8025b04:	2316      	movs	r3, #22
 8025b06:	6003      	str	r3, [r0, #0]
 8025b08:	2000      	movs	r0, #0
 8025b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025b0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8025bf4 <_strtol_l.constprop.0+0x100>
 8025b12:	460d      	mov	r5, r1
 8025b14:	462e      	mov	r6, r5
 8025b16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025b1a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8025b1e:	f017 0708 	ands.w	r7, r7, #8
 8025b22:	d1f7      	bne.n	8025b14 <_strtol_l.constprop.0+0x20>
 8025b24:	2c2d      	cmp	r4, #45	; 0x2d
 8025b26:	d132      	bne.n	8025b8e <_strtol_l.constprop.0+0x9a>
 8025b28:	782c      	ldrb	r4, [r5, #0]
 8025b2a:	2701      	movs	r7, #1
 8025b2c:	1cb5      	adds	r5, r6, #2
 8025b2e:	2b00      	cmp	r3, #0
 8025b30:	d05b      	beq.n	8025bea <_strtol_l.constprop.0+0xf6>
 8025b32:	2b10      	cmp	r3, #16
 8025b34:	d109      	bne.n	8025b4a <_strtol_l.constprop.0+0x56>
 8025b36:	2c30      	cmp	r4, #48	; 0x30
 8025b38:	d107      	bne.n	8025b4a <_strtol_l.constprop.0+0x56>
 8025b3a:	782c      	ldrb	r4, [r5, #0]
 8025b3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8025b40:	2c58      	cmp	r4, #88	; 0x58
 8025b42:	d14d      	bne.n	8025be0 <_strtol_l.constprop.0+0xec>
 8025b44:	786c      	ldrb	r4, [r5, #1]
 8025b46:	2310      	movs	r3, #16
 8025b48:	3502      	adds	r5, #2
 8025b4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8025b4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8025b52:	f04f 0c00 	mov.w	ip, #0
 8025b56:	fbb8 f9f3 	udiv	r9, r8, r3
 8025b5a:	4666      	mov	r6, ip
 8025b5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8025b60:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8025b64:	f1be 0f09 	cmp.w	lr, #9
 8025b68:	d816      	bhi.n	8025b98 <_strtol_l.constprop.0+0xa4>
 8025b6a:	4674      	mov	r4, lr
 8025b6c:	42a3      	cmp	r3, r4
 8025b6e:	dd24      	ble.n	8025bba <_strtol_l.constprop.0+0xc6>
 8025b70:	f1bc 0f00 	cmp.w	ip, #0
 8025b74:	db1e      	blt.n	8025bb4 <_strtol_l.constprop.0+0xc0>
 8025b76:	45b1      	cmp	r9, r6
 8025b78:	d31c      	bcc.n	8025bb4 <_strtol_l.constprop.0+0xc0>
 8025b7a:	d101      	bne.n	8025b80 <_strtol_l.constprop.0+0x8c>
 8025b7c:	45a2      	cmp	sl, r4
 8025b7e:	db19      	blt.n	8025bb4 <_strtol_l.constprop.0+0xc0>
 8025b80:	fb06 4603 	mla	r6, r6, r3, r4
 8025b84:	f04f 0c01 	mov.w	ip, #1
 8025b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025b8c:	e7e8      	b.n	8025b60 <_strtol_l.constprop.0+0x6c>
 8025b8e:	2c2b      	cmp	r4, #43	; 0x2b
 8025b90:	bf04      	itt	eq
 8025b92:	782c      	ldrbeq	r4, [r5, #0]
 8025b94:	1cb5      	addeq	r5, r6, #2
 8025b96:	e7ca      	b.n	8025b2e <_strtol_l.constprop.0+0x3a>
 8025b98:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8025b9c:	f1be 0f19 	cmp.w	lr, #25
 8025ba0:	d801      	bhi.n	8025ba6 <_strtol_l.constprop.0+0xb2>
 8025ba2:	3c37      	subs	r4, #55	; 0x37
 8025ba4:	e7e2      	b.n	8025b6c <_strtol_l.constprop.0+0x78>
 8025ba6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8025baa:	f1be 0f19 	cmp.w	lr, #25
 8025bae:	d804      	bhi.n	8025bba <_strtol_l.constprop.0+0xc6>
 8025bb0:	3c57      	subs	r4, #87	; 0x57
 8025bb2:	e7db      	b.n	8025b6c <_strtol_l.constprop.0+0x78>
 8025bb4:	f04f 3cff 	mov.w	ip, #4294967295
 8025bb8:	e7e6      	b.n	8025b88 <_strtol_l.constprop.0+0x94>
 8025bba:	f1bc 0f00 	cmp.w	ip, #0
 8025bbe:	da05      	bge.n	8025bcc <_strtol_l.constprop.0+0xd8>
 8025bc0:	2322      	movs	r3, #34	; 0x22
 8025bc2:	6003      	str	r3, [r0, #0]
 8025bc4:	4646      	mov	r6, r8
 8025bc6:	b942      	cbnz	r2, 8025bda <_strtol_l.constprop.0+0xe6>
 8025bc8:	4630      	mov	r0, r6
 8025bca:	e79e      	b.n	8025b0a <_strtol_l.constprop.0+0x16>
 8025bcc:	b107      	cbz	r7, 8025bd0 <_strtol_l.constprop.0+0xdc>
 8025bce:	4276      	negs	r6, r6
 8025bd0:	2a00      	cmp	r2, #0
 8025bd2:	d0f9      	beq.n	8025bc8 <_strtol_l.constprop.0+0xd4>
 8025bd4:	f1bc 0f00 	cmp.w	ip, #0
 8025bd8:	d000      	beq.n	8025bdc <_strtol_l.constprop.0+0xe8>
 8025bda:	1e69      	subs	r1, r5, #1
 8025bdc:	6011      	str	r1, [r2, #0]
 8025bde:	e7f3      	b.n	8025bc8 <_strtol_l.constprop.0+0xd4>
 8025be0:	2430      	movs	r4, #48	; 0x30
 8025be2:	2b00      	cmp	r3, #0
 8025be4:	d1b1      	bne.n	8025b4a <_strtol_l.constprop.0+0x56>
 8025be6:	2308      	movs	r3, #8
 8025be8:	e7af      	b.n	8025b4a <_strtol_l.constprop.0+0x56>
 8025bea:	2c30      	cmp	r4, #48	; 0x30
 8025bec:	d0a5      	beq.n	8025b3a <_strtol_l.constprop.0+0x46>
 8025bee:	230a      	movs	r3, #10
 8025bf0:	e7ab      	b.n	8025b4a <_strtol_l.constprop.0+0x56>
 8025bf2:	bf00      	nop
 8025bf4:	08044f15 	.word	0x08044f15

08025bf8 <_strtol_r>:
 8025bf8:	f7ff bf7c 	b.w	8025af4 <_strtol_l.constprop.0>

08025bfc <strtol>:
 8025bfc:	4613      	mov	r3, r2
 8025bfe:	460a      	mov	r2, r1
 8025c00:	4601      	mov	r1, r0
 8025c02:	4802      	ldr	r0, [pc, #8]	; (8025c0c <strtol+0x10>)
 8025c04:	6800      	ldr	r0, [r0, #0]
 8025c06:	f7ff bf75 	b.w	8025af4 <_strtol_l.constprop.0>
 8025c0a:	bf00      	nop
 8025c0c:	20000488 	.word	0x20000488

08025c10 <_strtoul_l.constprop.0>:
 8025c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025c14:	4f36      	ldr	r7, [pc, #216]	; (8025cf0 <_strtoul_l.constprop.0+0xe0>)
 8025c16:	4686      	mov	lr, r0
 8025c18:	460d      	mov	r5, r1
 8025c1a:	4628      	mov	r0, r5
 8025c1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025c20:	5de6      	ldrb	r6, [r4, r7]
 8025c22:	f016 0608 	ands.w	r6, r6, #8
 8025c26:	d1f8      	bne.n	8025c1a <_strtoul_l.constprop.0+0xa>
 8025c28:	2c2d      	cmp	r4, #45	; 0x2d
 8025c2a:	d12f      	bne.n	8025c8c <_strtoul_l.constprop.0+0x7c>
 8025c2c:	782c      	ldrb	r4, [r5, #0]
 8025c2e:	2601      	movs	r6, #1
 8025c30:	1c85      	adds	r5, r0, #2
 8025c32:	2b00      	cmp	r3, #0
 8025c34:	d057      	beq.n	8025ce6 <_strtoul_l.constprop.0+0xd6>
 8025c36:	2b10      	cmp	r3, #16
 8025c38:	d109      	bne.n	8025c4e <_strtoul_l.constprop.0+0x3e>
 8025c3a:	2c30      	cmp	r4, #48	; 0x30
 8025c3c:	d107      	bne.n	8025c4e <_strtoul_l.constprop.0+0x3e>
 8025c3e:	7828      	ldrb	r0, [r5, #0]
 8025c40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8025c44:	2858      	cmp	r0, #88	; 0x58
 8025c46:	d149      	bne.n	8025cdc <_strtoul_l.constprop.0+0xcc>
 8025c48:	786c      	ldrb	r4, [r5, #1]
 8025c4a:	2310      	movs	r3, #16
 8025c4c:	3502      	adds	r5, #2
 8025c4e:	f04f 38ff 	mov.w	r8, #4294967295
 8025c52:	2700      	movs	r7, #0
 8025c54:	fbb8 f8f3 	udiv	r8, r8, r3
 8025c58:	fb03 f908 	mul.w	r9, r3, r8
 8025c5c:	ea6f 0909 	mvn.w	r9, r9
 8025c60:	4638      	mov	r0, r7
 8025c62:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8025c66:	f1bc 0f09 	cmp.w	ip, #9
 8025c6a:	d814      	bhi.n	8025c96 <_strtoul_l.constprop.0+0x86>
 8025c6c:	4664      	mov	r4, ip
 8025c6e:	42a3      	cmp	r3, r4
 8025c70:	dd22      	ble.n	8025cb8 <_strtoul_l.constprop.0+0xa8>
 8025c72:	2f00      	cmp	r7, #0
 8025c74:	db1d      	blt.n	8025cb2 <_strtoul_l.constprop.0+0xa2>
 8025c76:	4580      	cmp	r8, r0
 8025c78:	d31b      	bcc.n	8025cb2 <_strtoul_l.constprop.0+0xa2>
 8025c7a:	d101      	bne.n	8025c80 <_strtoul_l.constprop.0+0x70>
 8025c7c:	45a1      	cmp	r9, r4
 8025c7e:	db18      	blt.n	8025cb2 <_strtoul_l.constprop.0+0xa2>
 8025c80:	fb00 4003 	mla	r0, r0, r3, r4
 8025c84:	2701      	movs	r7, #1
 8025c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025c8a:	e7ea      	b.n	8025c62 <_strtoul_l.constprop.0+0x52>
 8025c8c:	2c2b      	cmp	r4, #43	; 0x2b
 8025c8e:	bf04      	itt	eq
 8025c90:	782c      	ldrbeq	r4, [r5, #0]
 8025c92:	1c85      	addeq	r5, r0, #2
 8025c94:	e7cd      	b.n	8025c32 <_strtoul_l.constprop.0+0x22>
 8025c96:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8025c9a:	f1bc 0f19 	cmp.w	ip, #25
 8025c9e:	d801      	bhi.n	8025ca4 <_strtoul_l.constprop.0+0x94>
 8025ca0:	3c37      	subs	r4, #55	; 0x37
 8025ca2:	e7e4      	b.n	8025c6e <_strtoul_l.constprop.0+0x5e>
 8025ca4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8025ca8:	f1bc 0f19 	cmp.w	ip, #25
 8025cac:	d804      	bhi.n	8025cb8 <_strtoul_l.constprop.0+0xa8>
 8025cae:	3c57      	subs	r4, #87	; 0x57
 8025cb0:	e7dd      	b.n	8025c6e <_strtoul_l.constprop.0+0x5e>
 8025cb2:	f04f 37ff 	mov.w	r7, #4294967295
 8025cb6:	e7e6      	b.n	8025c86 <_strtoul_l.constprop.0+0x76>
 8025cb8:	2f00      	cmp	r7, #0
 8025cba:	da07      	bge.n	8025ccc <_strtoul_l.constprop.0+0xbc>
 8025cbc:	2322      	movs	r3, #34	; 0x22
 8025cbe:	f8ce 3000 	str.w	r3, [lr]
 8025cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8025cc6:	b932      	cbnz	r2, 8025cd6 <_strtoul_l.constprop.0+0xc6>
 8025cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025ccc:	b106      	cbz	r6, 8025cd0 <_strtoul_l.constprop.0+0xc0>
 8025cce:	4240      	negs	r0, r0
 8025cd0:	2a00      	cmp	r2, #0
 8025cd2:	d0f9      	beq.n	8025cc8 <_strtoul_l.constprop.0+0xb8>
 8025cd4:	b107      	cbz	r7, 8025cd8 <_strtoul_l.constprop.0+0xc8>
 8025cd6:	1e69      	subs	r1, r5, #1
 8025cd8:	6011      	str	r1, [r2, #0]
 8025cda:	e7f5      	b.n	8025cc8 <_strtoul_l.constprop.0+0xb8>
 8025cdc:	2430      	movs	r4, #48	; 0x30
 8025cde:	2b00      	cmp	r3, #0
 8025ce0:	d1b5      	bne.n	8025c4e <_strtoul_l.constprop.0+0x3e>
 8025ce2:	2308      	movs	r3, #8
 8025ce4:	e7b3      	b.n	8025c4e <_strtoul_l.constprop.0+0x3e>
 8025ce6:	2c30      	cmp	r4, #48	; 0x30
 8025ce8:	d0a9      	beq.n	8025c3e <_strtoul_l.constprop.0+0x2e>
 8025cea:	230a      	movs	r3, #10
 8025cec:	e7af      	b.n	8025c4e <_strtoul_l.constprop.0+0x3e>
 8025cee:	bf00      	nop
 8025cf0:	08044f15 	.word	0x08044f15

08025cf4 <_strtoul_r>:
 8025cf4:	f7ff bf8c 	b.w	8025c10 <_strtoul_l.constprop.0>

08025cf8 <strtoul>:
 8025cf8:	4613      	mov	r3, r2
 8025cfa:	460a      	mov	r2, r1
 8025cfc:	4601      	mov	r1, r0
 8025cfe:	4802      	ldr	r0, [pc, #8]	; (8025d08 <strtoul+0x10>)
 8025d00:	6800      	ldr	r0, [r0, #0]
 8025d02:	f7ff bf85 	b.w	8025c10 <_strtoul_l.constprop.0>
 8025d06:	bf00      	nop
 8025d08:	20000488 	.word	0x20000488

08025d0c <__tzcalc_limits>:
 8025d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d10:	4605      	mov	r5, r0
 8025d12:	f001 fab1 	bl	8027278 <__gettzinfo>
 8025d16:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8025d1a:	429d      	cmp	r5, r3
 8025d1c:	f340 8099 	ble.w	8025e52 <__tzcalc_limits+0x146>
 8025d20:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8025d24:	18ac      	adds	r4, r5, r2
 8025d26:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8025d2a:	f240 126d 	movw	r2, #365	; 0x16d
 8025d2e:	10a4      	asrs	r4, r4, #2
 8025d30:	fb02 4403 	mla	r4, r2, r3, r4
 8025d34:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8025d38:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8025d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8025d40:	441c      	add	r4, r3
 8025d42:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8025d46:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8025d4a:	fb95 fcf3 	sdiv	ip, r5, r3
 8025d4e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8025d52:	186a      	adds	r2, r5, r1
 8025d54:	fabc f68c 	clz	r6, ip
 8025d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8025d5c:	f005 0303 	and.w	r3, r5, #3
 8025d60:	4414      	add	r4, r2
 8025d62:	2264      	movs	r2, #100	; 0x64
 8025d64:	6045      	str	r5, [r0, #4]
 8025d66:	fb95 f7f2 	sdiv	r7, r5, r2
 8025d6a:	0976      	lsrs	r6, r6, #5
 8025d6c:	fb02 5717 	mls	r7, r2, r7, r5
 8025d70:	4601      	mov	r1, r0
 8025d72:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8025d76:	9300      	str	r3, [sp, #0]
 8025d78:	f04f 0a07 	mov.w	sl, #7
 8025d7c:	7a0d      	ldrb	r5, [r1, #8]
 8025d7e:	694b      	ldr	r3, [r1, #20]
 8025d80:	2d4a      	cmp	r5, #74	; 0x4a
 8025d82:	d12d      	bne.n	8025de0 <__tzcalc_limits+0xd4>
 8025d84:	9a00      	ldr	r2, [sp, #0]
 8025d86:	eb04 0e03 	add.w	lr, r4, r3
 8025d8a:	b902      	cbnz	r2, 8025d8e <__tzcalc_limits+0x82>
 8025d8c:	b917      	cbnz	r7, 8025d94 <__tzcalc_limits+0x88>
 8025d8e:	f1bc 0f00 	cmp.w	ip, #0
 8025d92:	d123      	bne.n	8025ddc <__tzcalc_limits+0xd0>
 8025d94:	2b3b      	cmp	r3, #59	; 0x3b
 8025d96:	bfd4      	ite	le
 8025d98:	2300      	movle	r3, #0
 8025d9a:	2301      	movgt	r3, #1
 8025d9c:	4473      	add	r3, lr
 8025d9e:	3b01      	subs	r3, #1
 8025da0:	698d      	ldr	r5, [r1, #24]
 8025da2:	4a2d      	ldr	r2, [pc, #180]	; (8025e58 <__tzcalc_limits+0x14c>)
 8025da4:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8025da8:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8025dac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8025dae:	18ed      	adds	r5, r5, r3
 8025db0:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8025db4:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8025db8:	3128      	adds	r1, #40	; 0x28
 8025dba:	458b      	cmp	fp, r1
 8025dbc:	d1de      	bne.n	8025d7c <__tzcalc_limits+0x70>
 8025dbe:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8025dc2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8025dc6:	428c      	cmp	r4, r1
 8025dc8:	eb72 0303 	sbcs.w	r3, r2, r3
 8025dcc:	bfb4      	ite	lt
 8025dce:	2301      	movlt	r3, #1
 8025dd0:	2300      	movge	r3, #0
 8025dd2:	6003      	str	r3, [r0, #0]
 8025dd4:	2001      	movs	r0, #1
 8025dd6:	b003      	add	sp, #12
 8025dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ddc:	2300      	movs	r3, #0
 8025dde:	e7dd      	b.n	8025d9c <__tzcalc_limits+0x90>
 8025de0:	2d44      	cmp	r5, #68	; 0x44
 8025de2:	d101      	bne.n	8025de8 <__tzcalc_limits+0xdc>
 8025de4:	4423      	add	r3, r4
 8025de6:	e7db      	b.n	8025da0 <__tzcalc_limits+0x94>
 8025de8:	9a00      	ldr	r2, [sp, #0]
 8025dea:	bb62      	cbnz	r2, 8025e46 <__tzcalc_limits+0x13a>
 8025dec:	2f00      	cmp	r7, #0
 8025dee:	bf0c      	ite	eq
 8025df0:	4635      	moveq	r5, r6
 8025df2:	2501      	movne	r5, #1
 8025df4:	68ca      	ldr	r2, [r1, #12]
 8025df6:	9201      	str	r2, [sp, #4]
 8025df8:	4a18      	ldr	r2, [pc, #96]	; (8025e5c <__tzcalc_limits+0x150>)
 8025dfa:	f04f 0930 	mov.w	r9, #48	; 0x30
 8025dfe:	fb09 2505 	mla	r5, r9, r5, r2
 8025e02:	46a6      	mov	lr, r4
 8025e04:	f04f 0800 	mov.w	r8, #0
 8025e08:	3d04      	subs	r5, #4
 8025e0a:	9a01      	ldr	r2, [sp, #4]
 8025e0c:	f108 0801 	add.w	r8, r8, #1
 8025e10:	4542      	cmp	r2, r8
 8025e12:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8025e16:	dc18      	bgt.n	8025e4a <__tzcalc_limits+0x13e>
 8025e18:	f10e 0504 	add.w	r5, lr, #4
 8025e1c:	fb95 f8fa 	sdiv	r8, r5, sl
 8025e20:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8025e24:	eba5 0808 	sub.w	r8, r5, r8
 8025e28:	ebb3 0808 	subs.w	r8, r3, r8
 8025e2c:	690b      	ldr	r3, [r1, #16]
 8025e2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8025e32:	bf48      	it	mi
 8025e34:	f108 0807 	addmi.w	r8, r8, #7
 8025e38:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8025e3c:	4443      	add	r3, r8
 8025e3e:	454b      	cmp	r3, r9
 8025e40:	da05      	bge.n	8025e4e <__tzcalc_limits+0x142>
 8025e42:	4473      	add	r3, lr
 8025e44:	e7ac      	b.n	8025da0 <__tzcalc_limits+0x94>
 8025e46:	4635      	mov	r5, r6
 8025e48:	e7d4      	b.n	8025df4 <__tzcalc_limits+0xe8>
 8025e4a:	44ce      	add	lr, r9
 8025e4c:	e7dd      	b.n	8025e0a <__tzcalc_limits+0xfe>
 8025e4e:	3b07      	subs	r3, #7
 8025e50:	e7f5      	b.n	8025e3e <__tzcalc_limits+0x132>
 8025e52:	2000      	movs	r0, #0
 8025e54:	e7bf      	b.n	8025dd6 <__tzcalc_limits+0xca>
 8025e56:	bf00      	nop
 8025e58:	00015180 	.word	0x00015180
 8025e5c:	08045150 	.word	0x08045150

08025e60 <__tz_lock>:
 8025e60:	4801      	ldr	r0, [pc, #4]	; (8025e68 <__tz_lock+0x8>)
 8025e62:	f7fd be5a 	b.w	8023b1a <__retarget_lock_acquire>
 8025e66:	bf00      	nop
 8025e68:	2002f840 	.word	0x2002f840

08025e6c <__tz_unlock>:
 8025e6c:	4801      	ldr	r0, [pc, #4]	; (8025e74 <__tz_unlock+0x8>)
 8025e6e:	f7fd be56 	b.w	8023b1e <__retarget_lock_release>
 8025e72:	bf00      	nop
 8025e74:	2002f840 	.word	0x2002f840

08025e78 <_tzset_unlocked>:
 8025e78:	4b01      	ldr	r3, [pc, #4]	; (8025e80 <_tzset_unlocked+0x8>)
 8025e7a:	6818      	ldr	r0, [r3, #0]
 8025e7c:	f000 b802 	b.w	8025e84 <_tzset_unlocked_r>
 8025e80:	20000488 	.word	0x20000488

08025e84 <_tzset_unlocked_r>:
 8025e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e88:	b08d      	sub	sp, #52	; 0x34
 8025e8a:	4607      	mov	r7, r0
 8025e8c:	f001 f9f4 	bl	8027278 <__gettzinfo>
 8025e90:	49b0      	ldr	r1, [pc, #704]	; (8026154 <_tzset_unlocked_r+0x2d0>)
 8025e92:	4eb1      	ldr	r6, [pc, #708]	; (8026158 <_tzset_unlocked_r+0x2d4>)
 8025e94:	4605      	mov	r5, r0
 8025e96:	4638      	mov	r0, r7
 8025e98:	f001 f9e6 	bl	8027268 <_getenv_r>
 8025e9c:	4604      	mov	r4, r0
 8025e9e:	b970      	cbnz	r0, 8025ebe <_tzset_unlocked_r+0x3a>
 8025ea0:	4bae      	ldr	r3, [pc, #696]	; (802615c <_tzset_unlocked_r+0x2d8>)
 8025ea2:	4aaf      	ldr	r2, [pc, #700]	; (8026160 <_tzset_unlocked_r+0x2dc>)
 8025ea4:	6018      	str	r0, [r3, #0]
 8025ea6:	4baf      	ldr	r3, [pc, #700]	; (8026164 <_tzset_unlocked_r+0x2e0>)
 8025ea8:	6018      	str	r0, [r3, #0]
 8025eaa:	4baf      	ldr	r3, [pc, #700]	; (8026168 <_tzset_unlocked_r+0x2e4>)
 8025eac:	6830      	ldr	r0, [r6, #0]
 8025eae:	e9c3 2200 	strd	r2, r2, [r3]
 8025eb2:	f7fd fe3f 	bl	8023b34 <free>
 8025eb6:	6034      	str	r4, [r6, #0]
 8025eb8:	b00d      	add	sp, #52	; 0x34
 8025eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ebe:	6831      	ldr	r1, [r6, #0]
 8025ec0:	2900      	cmp	r1, #0
 8025ec2:	d162      	bne.n	8025f8a <_tzset_unlocked_r+0x106>
 8025ec4:	6830      	ldr	r0, [r6, #0]
 8025ec6:	f7fd fe35 	bl	8023b34 <free>
 8025eca:	4620      	mov	r0, r4
 8025ecc:	f7da f9c2 	bl	8000254 <strlen>
 8025ed0:	1c41      	adds	r1, r0, #1
 8025ed2:	4638      	mov	r0, r7
 8025ed4:	f7fe f954 	bl	8024180 <_malloc_r>
 8025ed8:	6030      	str	r0, [r6, #0]
 8025eda:	2800      	cmp	r0, #0
 8025edc:	d15a      	bne.n	8025f94 <_tzset_unlocked_r+0x110>
 8025ede:	7823      	ldrb	r3, [r4, #0]
 8025ee0:	4aa2      	ldr	r2, [pc, #648]	; (802616c <_tzset_unlocked_r+0x2e8>)
 8025ee2:	49a3      	ldr	r1, [pc, #652]	; (8026170 <_tzset_unlocked_r+0x2ec>)
 8025ee4:	2b3a      	cmp	r3, #58	; 0x3a
 8025ee6:	bf08      	it	eq
 8025ee8:	3401      	addeq	r4, #1
 8025eea:	ae0a      	add	r6, sp, #40	; 0x28
 8025eec:	4633      	mov	r3, r6
 8025eee:	4620      	mov	r0, r4
 8025ef0:	f7ff f80e 	bl	8024f10 <siscanf>
 8025ef4:	2800      	cmp	r0, #0
 8025ef6:	dddf      	ble.n	8025eb8 <_tzset_unlocked_r+0x34>
 8025ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025efa:	18e7      	adds	r7, r4, r3
 8025efc:	5ce3      	ldrb	r3, [r4, r3]
 8025efe:	2b2d      	cmp	r3, #45	; 0x2d
 8025f00:	d14c      	bne.n	8025f9c <_tzset_unlocked_r+0x118>
 8025f02:	3701      	adds	r7, #1
 8025f04:	f04f 38ff 	mov.w	r8, #4294967295
 8025f08:	f10d 0a20 	add.w	sl, sp, #32
 8025f0c:	f10d 0b1e 	add.w	fp, sp, #30
 8025f10:	2400      	movs	r4, #0
 8025f12:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8025f16:	4997      	ldr	r1, [pc, #604]	; (8026174 <_tzset_unlocked_r+0x2f0>)
 8025f18:	9603      	str	r6, [sp, #12]
 8025f1a:	f8cd b000 	str.w	fp, [sp]
 8025f1e:	4633      	mov	r3, r6
 8025f20:	aa07      	add	r2, sp, #28
 8025f22:	4638      	mov	r0, r7
 8025f24:	f8ad 401e 	strh.w	r4, [sp, #30]
 8025f28:	f8ad 4020 	strh.w	r4, [sp, #32]
 8025f2c:	f7fe fff0 	bl	8024f10 <siscanf>
 8025f30:	42a0      	cmp	r0, r4
 8025f32:	ddc1      	ble.n	8025eb8 <_tzset_unlocked_r+0x34>
 8025f34:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8025f38:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8025f3c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8026180 <_tzset_unlocked_r+0x2fc>
 8025f40:	213c      	movs	r1, #60	; 0x3c
 8025f42:	fb01 3302 	mla	r3, r1, r2, r3
 8025f46:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8025f4a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8025f4e:	fb01 3302 	mla	r3, r1, r2, r3
 8025f52:	fb08 f303 	mul.w	r3, r8, r3
 8025f56:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8026168 <_tzset_unlocked_r+0x2e4>
 8025f5a:	62ab      	str	r3, [r5, #40]	; 0x28
 8025f5c:	4b83      	ldr	r3, [pc, #524]	; (802616c <_tzset_unlocked_r+0x2e8>)
 8025f5e:	f8c8 3000 	str.w	r3, [r8]
 8025f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025f64:	4982      	ldr	r1, [pc, #520]	; (8026170 <_tzset_unlocked_r+0x2ec>)
 8025f66:	441f      	add	r7, r3
 8025f68:	464a      	mov	r2, r9
 8025f6a:	4633      	mov	r3, r6
 8025f6c:	4638      	mov	r0, r7
 8025f6e:	f7fe ffcf 	bl	8024f10 <siscanf>
 8025f72:	42a0      	cmp	r0, r4
 8025f74:	dc18      	bgt.n	8025fa8 <_tzset_unlocked_r+0x124>
 8025f76:	f8d8 3000 	ldr.w	r3, [r8]
 8025f7a:	f8c8 3004 	str.w	r3, [r8, #4]
 8025f7e:	4b77      	ldr	r3, [pc, #476]	; (802615c <_tzset_unlocked_r+0x2d8>)
 8025f80:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8025f82:	601a      	str	r2, [r3, #0]
 8025f84:	4b77      	ldr	r3, [pc, #476]	; (8026164 <_tzset_unlocked_r+0x2e0>)
 8025f86:	601c      	str	r4, [r3, #0]
 8025f88:	e796      	b.n	8025eb8 <_tzset_unlocked_r+0x34>
 8025f8a:	f7da f959 	bl	8000240 <strcmp>
 8025f8e:	2800      	cmp	r0, #0
 8025f90:	d198      	bne.n	8025ec4 <_tzset_unlocked_r+0x40>
 8025f92:	e791      	b.n	8025eb8 <_tzset_unlocked_r+0x34>
 8025f94:	4621      	mov	r1, r4
 8025f96:	f7ff f842 	bl	802501e <strcpy>
 8025f9a:	e7a0      	b.n	8025ede <_tzset_unlocked_r+0x5a>
 8025f9c:	2b2b      	cmp	r3, #43	; 0x2b
 8025f9e:	bf08      	it	eq
 8025fa0:	3701      	addeq	r7, #1
 8025fa2:	f04f 0801 	mov.w	r8, #1
 8025fa6:	e7af      	b.n	8025f08 <_tzset_unlocked_r+0x84>
 8025fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025faa:	f8c8 9004 	str.w	r9, [r8, #4]
 8025fae:	18fc      	adds	r4, r7, r3
 8025fb0:	5cfb      	ldrb	r3, [r7, r3]
 8025fb2:	2b2d      	cmp	r3, #45	; 0x2d
 8025fb4:	f040 808b 	bne.w	80260ce <_tzset_unlocked_r+0x24a>
 8025fb8:	3401      	adds	r4, #1
 8025fba:	f04f 37ff 	mov.w	r7, #4294967295
 8025fbe:	2300      	movs	r3, #0
 8025fc0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8025fc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025fc8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8025fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8025fce:	e9cd a602 	strd	sl, r6, [sp, #8]
 8025fd2:	e9cd b600 	strd	fp, r6, [sp]
 8025fd6:	4967      	ldr	r1, [pc, #412]	; (8026174 <_tzset_unlocked_r+0x2f0>)
 8025fd8:	4633      	mov	r3, r6
 8025fda:	aa07      	add	r2, sp, #28
 8025fdc:	4620      	mov	r0, r4
 8025fde:	f7fe ff97 	bl	8024f10 <siscanf>
 8025fe2:	2800      	cmp	r0, #0
 8025fe4:	dc78      	bgt.n	80260d8 <_tzset_unlocked_r+0x254>
 8025fe6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8025fe8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8025fec:	652b      	str	r3, [r5, #80]	; 0x50
 8025fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ff0:	462f      	mov	r7, r5
 8025ff2:	441c      	add	r4, r3
 8025ff4:	f04f 0900 	mov.w	r9, #0
 8025ff8:	7823      	ldrb	r3, [r4, #0]
 8025ffa:	2b2c      	cmp	r3, #44	; 0x2c
 8025ffc:	bf08      	it	eq
 8025ffe:	3401      	addeq	r4, #1
 8026000:	f894 8000 	ldrb.w	r8, [r4]
 8026004:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8026008:	d178      	bne.n	80260fc <_tzset_unlocked_r+0x278>
 802600a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802600e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8026012:	ab09      	add	r3, sp, #36	; 0x24
 8026014:	9300      	str	r3, [sp, #0]
 8026016:	4958      	ldr	r1, [pc, #352]	; (8026178 <_tzset_unlocked_r+0x2f4>)
 8026018:	9603      	str	r6, [sp, #12]
 802601a:	4633      	mov	r3, r6
 802601c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8026020:	4620      	mov	r0, r4
 8026022:	f7fe ff75 	bl	8024f10 <siscanf>
 8026026:	2803      	cmp	r0, #3
 8026028:	f47f af46 	bne.w	8025eb8 <_tzset_unlocked_r+0x34>
 802602c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8026030:	1e4b      	subs	r3, r1, #1
 8026032:	2b0b      	cmp	r3, #11
 8026034:	f63f af40 	bhi.w	8025eb8 <_tzset_unlocked_r+0x34>
 8026038:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802603c:	1e53      	subs	r3, r2, #1
 802603e:	2b04      	cmp	r3, #4
 8026040:	f63f af3a 	bhi.w	8025eb8 <_tzset_unlocked_r+0x34>
 8026044:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8026048:	2b06      	cmp	r3, #6
 802604a:	f63f af35 	bhi.w	8025eb8 <_tzset_unlocked_r+0x34>
 802604e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8026052:	f887 8008 	strb.w	r8, [r7, #8]
 8026056:	617b      	str	r3, [r7, #20]
 8026058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802605a:	eb04 0803 	add.w	r8, r4, r3
 802605e:	2302      	movs	r3, #2
 8026060:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026064:	2300      	movs	r3, #0
 8026066:	f8ad 301e 	strh.w	r3, [sp, #30]
 802606a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802606e:	930a      	str	r3, [sp, #40]	; 0x28
 8026070:	f898 3000 	ldrb.w	r3, [r8]
 8026074:	2b2f      	cmp	r3, #47	; 0x2f
 8026076:	d109      	bne.n	802608c <_tzset_unlocked_r+0x208>
 8026078:	e9cd a602 	strd	sl, r6, [sp, #8]
 802607c:	e9cd b600 	strd	fp, r6, [sp]
 8026080:	493e      	ldr	r1, [pc, #248]	; (802617c <_tzset_unlocked_r+0x2f8>)
 8026082:	4633      	mov	r3, r6
 8026084:	aa07      	add	r2, sp, #28
 8026086:	4640      	mov	r0, r8
 8026088:	f7fe ff42 	bl	8024f10 <siscanf>
 802608c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026090:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026094:	213c      	movs	r1, #60	; 0x3c
 8026096:	fb01 3302 	mla	r3, r1, r2, r3
 802609a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802609e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80260a2:	fb01 3302 	mla	r3, r1, r2, r3
 80260a6:	61bb      	str	r3, [r7, #24]
 80260a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80260aa:	3728      	adds	r7, #40	; 0x28
 80260ac:	4444      	add	r4, r8
 80260ae:	f1b9 0f00 	cmp.w	r9, #0
 80260b2:	d020      	beq.n	80260f6 <_tzset_unlocked_r+0x272>
 80260b4:	6868      	ldr	r0, [r5, #4]
 80260b6:	f7ff fe29 	bl	8025d0c <__tzcalc_limits>
 80260ba:	4b28      	ldr	r3, [pc, #160]	; (802615c <_tzset_unlocked_r+0x2d8>)
 80260bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80260be:	601a      	str	r2, [r3, #0]
 80260c0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80260c2:	1a9b      	subs	r3, r3, r2
 80260c4:	4a27      	ldr	r2, [pc, #156]	; (8026164 <_tzset_unlocked_r+0x2e0>)
 80260c6:	bf18      	it	ne
 80260c8:	2301      	movne	r3, #1
 80260ca:	6013      	str	r3, [r2, #0]
 80260cc:	e6f4      	b.n	8025eb8 <_tzset_unlocked_r+0x34>
 80260ce:	2b2b      	cmp	r3, #43	; 0x2b
 80260d0:	bf08      	it	eq
 80260d2:	3401      	addeq	r4, #1
 80260d4:	2701      	movs	r7, #1
 80260d6:	e772      	b.n	8025fbe <_tzset_unlocked_r+0x13a>
 80260d8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80260dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80260e0:	213c      	movs	r1, #60	; 0x3c
 80260e2:	fb01 3302 	mla	r3, r1, r2, r3
 80260e6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80260ea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80260ee:	fb01 3302 	mla	r3, r1, r2, r3
 80260f2:	437b      	muls	r3, r7
 80260f4:	e77a      	b.n	8025fec <_tzset_unlocked_r+0x168>
 80260f6:	f04f 0901 	mov.w	r9, #1
 80260fa:	e77d      	b.n	8025ff8 <_tzset_unlocked_r+0x174>
 80260fc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8026100:	bf06      	itte	eq
 8026102:	3401      	addeq	r4, #1
 8026104:	4643      	moveq	r3, r8
 8026106:	2344      	movne	r3, #68	; 0x44
 8026108:	220a      	movs	r2, #10
 802610a:	a90b      	add	r1, sp, #44	; 0x2c
 802610c:	4620      	mov	r0, r4
 802610e:	9305      	str	r3, [sp, #20]
 8026110:	f7ff fdf2 	bl	8025cf8 <strtoul>
 8026114:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8026118:	9b05      	ldr	r3, [sp, #20]
 802611a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802611e:	45a0      	cmp	r8, r4
 8026120:	d114      	bne.n	802614c <_tzset_unlocked_r+0x2c8>
 8026122:	234d      	movs	r3, #77	; 0x4d
 8026124:	f1b9 0f00 	cmp.w	r9, #0
 8026128:	d107      	bne.n	802613a <_tzset_unlocked_r+0x2b6>
 802612a:	722b      	strb	r3, [r5, #8]
 802612c:	2103      	movs	r1, #3
 802612e:	2302      	movs	r3, #2
 8026130:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8026134:	f8c5 9014 	str.w	r9, [r5, #20]
 8026138:	e791      	b.n	802605e <_tzset_unlocked_r+0x1da>
 802613a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802613e:	220b      	movs	r2, #11
 8026140:	2301      	movs	r3, #1
 8026142:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8026146:	2300      	movs	r3, #0
 8026148:	63eb      	str	r3, [r5, #60]	; 0x3c
 802614a:	e788      	b.n	802605e <_tzset_unlocked_r+0x1da>
 802614c:	b280      	uxth	r0, r0
 802614e:	723b      	strb	r3, [r7, #8]
 8026150:	6178      	str	r0, [r7, #20]
 8026152:	e784      	b.n	802605e <_tzset_unlocked_r+0x1da>
 8026154:	080454c0 	.word	0x080454c0
 8026158:	2002f868 	.word	0x2002f868
 802615c:	2002f870 	.word	0x2002f870
 8026160:	080454c3 	.word	0x080454c3
 8026164:	2002f86c 	.word	0x2002f86c
 8026168:	200004ec 	.word	0x200004ec
 802616c:	2002f85b 	.word	0x2002f85b
 8026170:	080454c7 	.word	0x080454c7
 8026174:	080454ea 	.word	0x080454ea
 8026178:	080454d6 	.word	0x080454d6
 802617c:	080454e9 	.word	0x080454e9
 8026180:	2002f850 	.word	0x2002f850

08026184 <__swbuf_r>:
 8026184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026186:	460e      	mov	r6, r1
 8026188:	4614      	mov	r4, r2
 802618a:	4605      	mov	r5, r0
 802618c:	b118      	cbz	r0, 8026196 <__swbuf_r+0x12>
 802618e:	6983      	ldr	r3, [r0, #24]
 8026190:	b90b      	cbnz	r3, 8026196 <__swbuf_r+0x12>
 8026192:	f7fd faed 	bl	8023770 <__sinit>
 8026196:	4b21      	ldr	r3, [pc, #132]	; (802621c <__swbuf_r+0x98>)
 8026198:	429c      	cmp	r4, r3
 802619a:	d12b      	bne.n	80261f4 <__swbuf_r+0x70>
 802619c:	686c      	ldr	r4, [r5, #4]
 802619e:	69a3      	ldr	r3, [r4, #24]
 80261a0:	60a3      	str	r3, [r4, #8]
 80261a2:	89a3      	ldrh	r3, [r4, #12]
 80261a4:	071a      	lsls	r2, r3, #28
 80261a6:	d52f      	bpl.n	8026208 <__swbuf_r+0x84>
 80261a8:	6923      	ldr	r3, [r4, #16]
 80261aa:	b36b      	cbz	r3, 8026208 <__swbuf_r+0x84>
 80261ac:	6923      	ldr	r3, [r4, #16]
 80261ae:	6820      	ldr	r0, [r4, #0]
 80261b0:	1ac0      	subs	r0, r0, r3
 80261b2:	6963      	ldr	r3, [r4, #20]
 80261b4:	b2f6      	uxtb	r6, r6
 80261b6:	4283      	cmp	r3, r0
 80261b8:	4637      	mov	r7, r6
 80261ba:	dc04      	bgt.n	80261c6 <__swbuf_r+0x42>
 80261bc:	4621      	mov	r1, r4
 80261be:	4628      	mov	r0, r5
 80261c0:	f000 ffc8 	bl	8027154 <_fflush_r>
 80261c4:	bb30      	cbnz	r0, 8026214 <__swbuf_r+0x90>
 80261c6:	68a3      	ldr	r3, [r4, #8]
 80261c8:	3b01      	subs	r3, #1
 80261ca:	60a3      	str	r3, [r4, #8]
 80261cc:	6823      	ldr	r3, [r4, #0]
 80261ce:	1c5a      	adds	r2, r3, #1
 80261d0:	6022      	str	r2, [r4, #0]
 80261d2:	701e      	strb	r6, [r3, #0]
 80261d4:	6963      	ldr	r3, [r4, #20]
 80261d6:	3001      	adds	r0, #1
 80261d8:	4283      	cmp	r3, r0
 80261da:	d004      	beq.n	80261e6 <__swbuf_r+0x62>
 80261dc:	89a3      	ldrh	r3, [r4, #12]
 80261de:	07db      	lsls	r3, r3, #31
 80261e0:	d506      	bpl.n	80261f0 <__swbuf_r+0x6c>
 80261e2:	2e0a      	cmp	r6, #10
 80261e4:	d104      	bne.n	80261f0 <__swbuf_r+0x6c>
 80261e6:	4621      	mov	r1, r4
 80261e8:	4628      	mov	r0, r5
 80261ea:	f000 ffb3 	bl	8027154 <_fflush_r>
 80261ee:	b988      	cbnz	r0, 8026214 <__swbuf_r+0x90>
 80261f0:	4638      	mov	r0, r7
 80261f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80261f4:	4b0a      	ldr	r3, [pc, #40]	; (8026220 <__swbuf_r+0x9c>)
 80261f6:	429c      	cmp	r4, r3
 80261f8:	d101      	bne.n	80261fe <__swbuf_r+0x7a>
 80261fa:	68ac      	ldr	r4, [r5, #8]
 80261fc:	e7cf      	b.n	802619e <__swbuf_r+0x1a>
 80261fe:	4b09      	ldr	r3, [pc, #36]	; (8026224 <__swbuf_r+0xa0>)
 8026200:	429c      	cmp	r4, r3
 8026202:	bf08      	it	eq
 8026204:	68ec      	ldreq	r4, [r5, #12]
 8026206:	e7ca      	b.n	802619e <__swbuf_r+0x1a>
 8026208:	4621      	mov	r1, r4
 802620a:	4628      	mov	r0, r5
 802620c:	f000 f81e 	bl	802624c <__swsetup_r>
 8026210:	2800      	cmp	r0, #0
 8026212:	d0cb      	beq.n	80261ac <__swbuf_r+0x28>
 8026214:	f04f 37ff 	mov.w	r7, #4294967295
 8026218:	e7ea      	b.n	80261f0 <__swbuf_r+0x6c>
 802621a:	bf00      	nop
 802621c:	08045038 	.word	0x08045038
 8026220:	08045058 	.word	0x08045058
 8026224:	08045018 	.word	0x08045018

08026228 <_write_r>:
 8026228:	b538      	push	{r3, r4, r5, lr}
 802622a:	4d07      	ldr	r5, [pc, #28]	; (8026248 <_write_r+0x20>)
 802622c:	4604      	mov	r4, r0
 802622e:	4608      	mov	r0, r1
 8026230:	4611      	mov	r1, r2
 8026232:	2200      	movs	r2, #0
 8026234:	602a      	str	r2, [r5, #0]
 8026236:	461a      	mov	r2, r3
 8026238:	f7dc f914 	bl	8002464 <_write>
 802623c:	1c43      	adds	r3, r0, #1
 802623e:	d102      	bne.n	8026246 <_write_r+0x1e>
 8026240:	682b      	ldr	r3, [r5, #0]
 8026242:	b103      	cbz	r3, 8026246 <_write_r+0x1e>
 8026244:	6023      	str	r3, [r4, #0]
 8026246:	bd38      	pop	{r3, r4, r5, pc}
 8026248:	2002f84c 	.word	0x2002f84c

0802624c <__swsetup_r>:
 802624c:	4b32      	ldr	r3, [pc, #200]	; (8026318 <__swsetup_r+0xcc>)
 802624e:	b570      	push	{r4, r5, r6, lr}
 8026250:	681d      	ldr	r5, [r3, #0]
 8026252:	4606      	mov	r6, r0
 8026254:	460c      	mov	r4, r1
 8026256:	b125      	cbz	r5, 8026262 <__swsetup_r+0x16>
 8026258:	69ab      	ldr	r3, [r5, #24]
 802625a:	b913      	cbnz	r3, 8026262 <__swsetup_r+0x16>
 802625c:	4628      	mov	r0, r5
 802625e:	f7fd fa87 	bl	8023770 <__sinit>
 8026262:	4b2e      	ldr	r3, [pc, #184]	; (802631c <__swsetup_r+0xd0>)
 8026264:	429c      	cmp	r4, r3
 8026266:	d10f      	bne.n	8026288 <__swsetup_r+0x3c>
 8026268:	686c      	ldr	r4, [r5, #4]
 802626a:	89a3      	ldrh	r3, [r4, #12]
 802626c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026270:	0719      	lsls	r1, r3, #28
 8026272:	d42c      	bmi.n	80262ce <__swsetup_r+0x82>
 8026274:	06dd      	lsls	r5, r3, #27
 8026276:	d411      	bmi.n	802629c <__swsetup_r+0x50>
 8026278:	2309      	movs	r3, #9
 802627a:	6033      	str	r3, [r6, #0]
 802627c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026280:	81a3      	strh	r3, [r4, #12]
 8026282:	f04f 30ff 	mov.w	r0, #4294967295
 8026286:	e03e      	b.n	8026306 <__swsetup_r+0xba>
 8026288:	4b25      	ldr	r3, [pc, #148]	; (8026320 <__swsetup_r+0xd4>)
 802628a:	429c      	cmp	r4, r3
 802628c:	d101      	bne.n	8026292 <__swsetup_r+0x46>
 802628e:	68ac      	ldr	r4, [r5, #8]
 8026290:	e7eb      	b.n	802626a <__swsetup_r+0x1e>
 8026292:	4b24      	ldr	r3, [pc, #144]	; (8026324 <__swsetup_r+0xd8>)
 8026294:	429c      	cmp	r4, r3
 8026296:	bf08      	it	eq
 8026298:	68ec      	ldreq	r4, [r5, #12]
 802629a:	e7e6      	b.n	802626a <__swsetup_r+0x1e>
 802629c:	0758      	lsls	r0, r3, #29
 802629e:	d512      	bpl.n	80262c6 <__swsetup_r+0x7a>
 80262a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80262a2:	b141      	cbz	r1, 80262b6 <__swsetup_r+0x6a>
 80262a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80262a8:	4299      	cmp	r1, r3
 80262aa:	d002      	beq.n	80262b2 <__swsetup_r+0x66>
 80262ac:	4630      	mov	r0, r6
 80262ae:	f7fd fefb 	bl	80240a8 <_free_r>
 80262b2:	2300      	movs	r3, #0
 80262b4:	6363      	str	r3, [r4, #52]	; 0x34
 80262b6:	89a3      	ldrh	r3, [r4, #12]
 80262b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80262bc:	81a3      	strh	r3, [r4, #12]
 80262be:	2300      	movs	r3, #0
 80262c0:	6063      	str	r3, [r4, #4]
 80262c2:	6923      	ldr	r3, [r4, #16]
 80262c4:	6023      	str	r3, [r4, #0]
 80262c6:	89a3      	ldrh	r3, [r4, #12]
 80262c8:	f043 0308 	orr.w	r3, r3, #8
 80262cc:	81a3      	strh	r3, [r4, #12]
 80262ce:	6923      	ldr	r3, [r4, #16]
 80262d0:	b94b      	cbnz	r3, 80262e6 <__swsetup_r+0x9a>
 80262d2:	89a3      	ldrh	r3, [r4, #12]
 80262d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80262d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80262dc:	d003      	beq.n	80262e6 <__swsetup_r+0x9a>
 80262de:	4621      	mov	r1, r4
 80262e0:	4630      	mov	r0, r6
 80262e2:	f001 f8b9 	bl	8027458 <__smakebuf_r>
 80262e6:	89a0      	ldrh	r0, [r4, #12]
 80262e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80262ec:	f010 0301 	ands.w	r3, r0, #1
 80262f0:	d00a      	beq.n	8026308 <__swsetup_r+0xbc>
 80262f2:	2300      	movs	r3, #0
 80262f4:	60a3      	str	r3, [r4, #8]
 80262f6:	6963      	ldr	r3, [r4, #20]
 80262f8:	425b      	negs	r3, r3
 80262fa:	61a3      	str	r3, [r4, #24]
 80262fc:	6923      	ldr	r3, [r4, #16]
 80262fe:	b943      	cbnz	r3, 8026312 <__swsetup_r+0xc6>
 8026300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026304:	d1ba      	bne.n	802627c <__swsetup_r+0x30>
 8026306:	bd70      	pop	{r4, r5, r6, pc}
 8026308:	0781      	lsls	r1, r0, #30
 802630a:	bf58      	it	pl
 802630c:	6963      	ldrpl	r3, [r4, #20]
 802630e:	60a3      	str	r3, [r4, #8]
 8026310:	e7f4      	b.n	80262fc <__swsetup_r+0xb0>
 8026312:	2000      	movs	r0, #0
 8026314:	e7f7      	b.n	8026306 <__swsetup_r+0xba>
 8026316:	bf00      	nop
 8026318:	20000488 	.word	0x20000488
 802631c:	08045038 	.word	0x08045038
 8026320:	08045058 	.word	0x08045058
 8026324:	08045018 	.word	0x08045018

08026328 <abs>:
 8026328:	2800      	cmp	r0, #0
 802632a:	bfb8      	it	lt
 802632c:	4240      	neglt	r0, r0
 802632e:	4770      	bx	lr

08026330 <asctime>:
 8026330:	4b0d      	ldr	r3, [pc, #52]	; (8026368 <asctime+0x38>)
 8026332:	b570      	push	{r4, r5, r6, lr}
 8026334:	681d      	ldr	r5, [r3, #0]
 8026336:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8026338:	4604      	mov	r4, r0
 802633a:	b976      	cbnz	r6, 802635a <asctime+0x2a>
 802633c:	201a      	movs	r0, #26
 802633e:	f7fd fbf1 	bl	8023b24 <malloc>
 8026342:	4602      	mov	r2, r0
 8026344:	6428      	str	r0, [r5, #64]	; 0x40
 8026346:	b920      	cbnz	r0, 8026352 <asctime+0x22>
 8026348:	4b08      	ldr	r3, [pc, #32]	; (802636c <asctime+0x3c>)
 802634a:	4809      	ldr	r0, [pc, #36]	; (8026370 <asctime+0x40>)
 802634c:	2137      	movs	r1, #55	; 0x37
 802634e:	f000 f837 	bl	80263c0 <__assert_func>
 8026352:	221a      	movs	r2, #26
 8026354:	4631      	mov	r1, r6
 8026356:	f7fd fc2d 	bl	8023bb4 <memset>
 802635a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 802635c:	4620      	mov	r0, r4
 802635e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026362:	f000 b807 	b.w	8026374 <asctime_r>
 8026366:	bf00      	nop
 8026368:	20000488 	.word	0x20000488
 802636c:	0804507c 	.word	0x0804507c
 8026370:	080454fc 	.word	0x080454fc

08026374 <asctime_r>:
 8026374:	b510      	push	{r4, lr}
 8026376:	460c      	mov	r4, r1
 8026378:	6941      	ldr	r1, [r0, #20]
 802637a:	6903      	ldr	r3, [r0, #16]
 802637c:	6982      	ldr	r2, [r0, #24]
 802637e:	b086      	sub	sp, #24
 8026380:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8026384:	9104      	str	r1, [sp, #16]
 8026386:	6801      	ldr	r1, [r0, #0]
 8026388:	9103      	str	r1, [sp, #12]
 802638a:	6841      	ldr	r1, [r0, #4]
 802638c:	9102      	str	r1, [sp, #8]
 802638e:	6881      	ldr	r1, [r0, #8]
 8026390:	9101      	str	r1, [sp, #4]
 8026392:	68c1      	ldr	r1, [r0, #12]
 8026394:	9100      	str	r1, [sp, #0]
 8026396:	4907      	ldr	r1, [pc, #28]	; (80263b4 <asctime_r+0x40>)
 8026398:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802639c:	440b      	add	r3, r1
 802639e:	4906      	ldr	r1, [pc, #24]	; (80263b8 <asctime_r+0x44>)
 80263a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80263a4:	440a      	add	r2, r1
 80263a6:	4620      	mov	r0, r4
 80263a8:	4904      	ldr	r1, [pc, #16]	; (80263bc <asctime_r+0x48>)
 80263aa:	f7fe fd91 	bl	8024ed0 <siprintf>
 80263ae:	4620      	mov	r0, r4
 80263b0:	b006      	add	sp, #24
 80263b2:	bd10      	pop	{r4, pc}
 80263b4:	0804558d 	.word	0x0804558d
 80263b8:	08045578 	.word	0x08045578
 80263bc:	08045558 	.word	0x08045558

080263c0 <__assert_func>:
 80263c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80263c2:	4614      	mov	r4, r2
 80263c4:	461a      	mov	r2, r3
 80263c6:	4b09      	ldr	r3, [pc, #36]	; (80263ec <__assert_func+0x2c>)
 80263c8:	681b      	ldr	r3, [r3, #0]
 80263ca:	4605      	mov	r5, r0
 80263cc:	68d8      	ldr	r0, [r3, #12]
 80263ce:	b14c      	cbz	r4, 80263e4 <__assert_func+0x24>
 80263d0:	4b07      	ldr	r3, [pc, #28]	; (80263f0 <__assert_func+0x30>)
 80263d2:	9100      	str	r1, [sp, #0]
 80263d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80263d8:	4906      	ldr	r1, [pc, #24]	; (80263f4 <__assert_func+0x34>)
 80263da:	462b      	mov	r3, r5
 80263dc:	f000 fef6 	bl	80271cc <fiprintf>
 80263e0:	f002 fb1e 	bl	8028a20 <abort>
 80263e4:	4b04      	ldr	r3, [pc, #16]	; (80263f8 <__assert_func+0x38>)
 80263e6:	461c      	mov	r4, r3
 80263e8:	e7f3      	b.n	80263d2 <__assert_func+0x12>
 80263ea:	bf00      	nop
 80263ec:	20000488 	.word	0x20000488
 80263f0:	080455b1 	.word	0x080455b1
 80263f4:	080455be 	.word	0x080455be
 80263f8:	08045577 	.word	0x08045577

080263fc <_close_r>:
 80263fc:	b538      	push	{r3, r4, r5, lr}
 80263fe:	4d06      	ldr	r5, [pc, #24]	; (8026418 <_close_r+0x1c>)
 8026400:	2300      	movs	r3, #0
 8026402:	4604      	mov	r4, r0
 8026404:	4608      	mov	r0, r1
 8026406:	602b      	str	r3, [r5, #0]
 8026408:	f7e0 f892 	bl	8006530 <_close>
 802640c:	1c43      	adds	r3, r0, #1
 802640e:	d102      	bne.n	8026416 <_close_r+0x1a>
 8026410:	682b      	ldr	r3, [r5, #0]
 8026412:	b103      	cbz	r3, 8026416 <_close_r+0x1a>
 8026414:	6023      	str	r3, [r4, #0]
 8026416:	bd38      	pop	{r3, r4, r5, pc}
 8026418:	2002f84c 	.word	0x2002f84c

0802641c <div>:
 802641c:	2900      	cmp	r1, #0
 802641e:	b510      	push	{r4, lr}
 8026420:	fb91 f4f2 	sdiv	r4, r1, r2
 8026424:	fb02 1314 	mls	r3, r2, r4, r1
 8026428:	db06      	blt.n	8026438 <div+0x1c>
 802642a:	2b00      	cmp	r3, #0
 802642c:	da01      	bge.n	8026432 <div+0x16>
 802642e:	3401      	adds	r4, #1
 8026430:	1a9b      	subs	r3, r3, r2
 8026432:	e9c0 4300 	strd	r4, r3, [r0]
 8026436:	bd10      	pop	{r4, pc}
 8026438:	2b00      	cmp	r3, #0
 802643a:	bfc4      	itt	gt
 802643c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8026440:	189b      	addgt	r3, r3, r2
 8026442:	e7f6      	b.n	8026432 <div+0x16>

08026444 <quorem>:
 8026444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026448:	6903      	ldr	r3, [r0, #16]
 802644a:	690c      	ldr	r4, [r1, #16]
 802644c:	42a3      	cmp	r3, r4
 802644e:	4607      	mov	r7, r0
 8026450:	f2c0 8081 	blt.w	8026556 <quorem+0x112>
 8026454:	3c01      	subs	r4, #1
 8026456:	f101 0814 	add.w	r8, r1, #20
 802645a:	f100 0514 	add.w	r5, r0, #20
 802645e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026462:	9301      	str	r3, [sp, #4]
 8026464:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802646c:	3301      	adds	r3, #1
 802646e:	429a      	cmp	r2, r3
 8026470:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026474:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026478:	fbb2 f6f3 	udiv	r6, r2, r3
 802647c:	d331      	bcc.n	80264e2 <quorem+0x9e>
 802647e:	f04f 0e00 	mov.w	lr, #0
 8026482:	4640      	mov	r0, r8
 8026484:	46ac      	mov	ip, r5
 8026486:	46f2      	mov	sl, lr
 8026488:	f850 2b04 	ldr.w	r2, [r0], #4
 802648c:	b293      	uxth	r3, r2
 802648e:	fb06 e303 	mla	r3, r6, r3, lr
 8026492:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8026496:	b29b      	uxth	r3, r3
 8026498:	ebaa 0303 	sub.w	r3, sl, r3
 802649c:	f8dc a000 	ldr.w	sl, [ip]
 80264a0:	0c12      	lsrs	r2, r2, #16
 80264a2:	fa13 f38a 	uxtah	r3, r3, sl
 80264a6:	fb06 e202 	mla	r2, r6, r2, lr
 80264aa:	9300      	str	r3, [sp, #0]
 80264ac:	9b00      	ldr	r3, [sp, #0]
 80264ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80264b2:	b292      	uxth	r2, r2
 80264b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80264b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80264bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80264c0:	4581      	cmp	r9, r0
 80264c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80264c6:	f84c 3b04 	str.w	r3, [ip], #4
 80264ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80264ce:	d2db      	bcs.n	8026488 <quorem+0x44>
 80264d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80264d4:	b92b      	cbnz	r3, 80264e2 <quorem+0x9e>
 80264d6:	9b01      	ldr	r3, [sp, #4]
 80264d8:	3b04      	subs	r3, #4
 80264da:	429d      	cmp	r5, r3
 80264dc:	461a      	mov	r2, r3
 80264de:	d32e      	bcc.n	802653e <quorem+0xfa>
 80264e0:	613c      	str	r4, [r7, #16]
 80264e2:	4638      	mov	r0, r7
 80264e4:	f001 fa86 	bl	80279f4 <__mcmp>
 80264e8:	2800      	cmp	r0, #0
 80264ea:	db24      	blt.n	8026536 <quorem+0xf2>
 80264ec:	3601      	adds	r6, #1
 80264ee:	4628      	mov	r0, r5
 80264f0:	f04f 0c00 	mov.w	ip, #0
 80264f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80264f8:	f8d0 e000 	ldr.w	lr, [r0]
 80264fc:	b293      	uxth	r3, r2
 80264fe:	ebac 0303 	sub.w	r3, ip, r3
 8026502:	0c12      	lsrs	r2, r2, #16
 8026504:	fa13 f38e 	uxtah	r3, r3, lr
 8026508:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802650c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026510:	b29b      	uxth	r3, r3
 8026512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026516:	45c1      	cmp	r9, r8
 8026518:	f840 3b04 	str.w	r3, [r0], #4
 802651c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8026520:	d2e8      	bcs.n	80264f4 <quorem+0xb0>
 8026522:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802652a:	b922      	cbnz	r2, 8026536 <quorem+0xf2>
 802652c:	3b04      	subs	r3, #4
 802652e:	429d      	cmp	r5, r3
 8026530:	461a      	mov	r2, r3
 8026532:	d30a      	bcc.n	802654a <quorem+0x106>
 8026534:	613c      	str	r4, [r7, #16]
 8026536:	4630      	mov	r0, r6
 8026538:	b003      	add	sp, #12
 802653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802653e:	6812      	ldr	r2, [r2, #0]
 8026540:	3b04      	subs	r3, #4
 8026542:	2a00      	cmp	r2, #0
 8026544:	d1cc      	bne.n	80264e0 <quorem+0x9c>
 8026546:	3c01      	subs	r4, #1
 8026548:	e7c7      	b.n	80264da <quorem+0x96>
 802654a:	6812      	ldr	r2, [r2, #0]
 802654c:	3b04      	subs	r3, #4
 802654e:	2a00      	cmp	r2, #0
 8026550:	d1f0      	bne.n	8026534 <quorem+0xf0>
 8026552:	3c01      	subs	r4, #1
 8026554:	e7eb      	b.n	802652e <quorem+0xea>
 8026556:	2000      	movs	r0, #0
 8026558:	e7ee      	b.n	8026538 <quorem+0xf4>
 802655a:	0000      	movs	r0, r0
 802655c:	0000      	movs	r0, r0
	...

08026560 <_dtoa_r>:
 8026560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026564:	ed2d 8b02 	vpush	{d8}
 8026568:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802656a:	b091      	sub	sp, #68	; 0x44
 802656c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026570:	ec59 8b10 	vmov	r8, r9, d0
 8026574:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026576:	9106      	str	r1, [sp, #24]
 8026578:	4606      	mov	r6, r0
 802657a:	9208      	str	r2, [sp, #32]
 802657c:	930c      	str	r3, [sp, #48]	; 0x30
 802657e:	b975      	cbnz	r5, 802659e <_dtoa_r+0x3e>
 8026580:	2010      	movs	r0, #16
 8026582:	f7fd facf 	bl	8023b24 <malloc>
 8026586:	4602      	mov	r2, r0
 8026588:	6270      	str	r0, [r6, #36]	; 0x24
 802658a:	b920      	cbnz	r0, 8026596 <_dtoa_r+0x36>
 802658c:	4baa      	ldr	r3, [pc, #680]	; (8026838 <_dtoa_r+0x2d8>)
 802658e:	21ea      	movs	r1, #234	; 0xea
 8026590:	48aa      	ldr	r0, [pc, #680]	; (802683c <_dtoa_r+0x2dc>)
 8026592:	f7ff ff15 	bl	80263c0 <__assert_func>
 8026596:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802659a:	6005      	str	r5, [r0, #0]
 802659c:	60c5      	str	r5, [r0, #12]
 802659e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80265a0:	6819      	ldr	r1, [r3, #0]
 80265a2:	b151      	cbz	r1, 80265ba <_dtoa_r+0x5a>
 80265a4:	685a      	ldr	r2, [r3, #4]
 80265a6:	604a      	str	r2, [r1, #4]
 80265a8:	2301      	movs	r3, #1
 80265aa:	4093      	lsls	r3, r2
 80265ac:	608b      	str	r3, [r1, #8]
 80265ae:	4630      	mov	r0, r6
 80265b0:	f000 ffde 	bl	8027570 <_Bfree>
 80265b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80265b6:	2200      	movs	r2, #0
 80265b8:	601a      	str	r2, [r3, #0]
 80265ba:	f1b9 0300 	subs.w	r3, r9, #0
 80265be:	bfbb      	ittet	lt
 80265c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80265c4:	9303      	strlt	r3, [sp, #12]
 80265c6:	2300      	movge	r3, #0
 80265c8:	2201      	movlt	r2, #1
 80265ca:	bfac      	ite	ge
 80265cc:	6023      	strge	r3, [r4, #0]
 80265ce:	6022      	strlt	r2, [r4, #0]
 80265d0:	4b9b      	ldr	r3, [pc, #620]	; (8026840 <_dtoa_r+0x2e0>)
 80265d2:	9c03      	ldr	r4, [sp, #12]
 80265d4:	43a3      	bics	r3, r4
 80265d6:	d11c      	bne.n	8026612 <_dtoa_r+0xb2>
 80265d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80265da:	f242 730f 	movw	r3, #9999	; 0x270f
 80265de:	6013      	str	r3, [r2, #0]
 80265e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80265e4:	ea53 0308 	orrs.w	r3, r3, r8
 80265e8:	f000 84fd 	beq.w	8026fe6 <_dtoa_r+0xa86>
 80265ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80265ee:	b963      	cbnz	r3, 802660a <_dtoa_r+0xaa>
 80265f0:	4b94      	ldr	r3, [pc, #592]	; (8026844 <_dtoa_r+0x2e4>)
 80265f2:	e01f      	b.n	8026634 <_dtoa_r+0xd4>
 80265f4:	4b94      	ldr	r3, [pc, #592]	; (8026848 <_dtoa_r+0x2e8>)
 80265f6:	9301      	str	r3, [sp, #4]
 80265f8:	3308      	adds	r3, #8
 80265fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80265fc:	6013      	str	r3, [r2, #0]
 80265fe:	9801      	ldr	r0, [sp, #4]
 8026600:	b011      	add	sp, #68	; 0x44
 8026602:	ecbd 8b02 	vpop	{d8}
 8026606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802660a:	4b8e      	ldr	r3, [pc, #568]	; (8026844 <_dtoa_r+0x2e4>)
 802660c:	9301      	str	r3, [sp, #4]
 802660e:	3303      	adds	r3, #3
 8026610:	e7f3      	b.n	80265fa <_dtoa_r+0x9a>
 8026612:	ed9d 8b02 	vldr	d8, [sp, #8]
 8026616:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802661a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802661e:	d10b      	bne.n	8026638 <_dtoa_r+0xd8>
 8026620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026622:	2301      	movs	r3, #1
 8026624:	6013      	str	r3, [r2, #0]
 8026626:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026628:	2b00      	cmp	r3, #0
 802662a:	f000 84d9 	beq.w	8026fe0 <_dtoa_r+0xa80>
 802662e:	4887      	ldr	r0, [pc, #540]	; (802684c <_dtoa_r+0x2ec>)
 8026630:	6018      	str	r0, [r3, #0]
 8026632:	1e43      	subs	r3, r0, #1
 8026634:	9301      	str	r3, [sp, #4]
 8026636:	e7e2      	b.n	80265fe <_dtoa_r+0x9e>
 8026638:	a90f      	add	r1, sp, #60	; 0x3c
 802663a:	aa0e      	add	r2, sp, #56	; 0x38
 802663c:	4630      	mov	r0, r6
 802663e:	eeb0 0b48 	vmov.f64	d0, d8
 8026642:	f001 fa7d 	bl	8027b40 <__d2b>
 8026646:	f3c4 510a 	ubfx	r1, r4, #20, #11
 802664a:	4605      	mov	r5, r0
 802664c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802664e:	2900      	cmp	r1, #0
 8026650:	d046      	beq.n	80266e0 <_dtoa_r+0x180>
 8026652:	ee18 4a90 	vmov	r4, s17
 8026656:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802665a:	ec53 2b18 	vmov	r2, r3, d8
 802665e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8026662:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026666:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802666a:	2400      	movs	r4, #0
 802666c:	ec43 2b16 	vmov	d6, r2, r3
 8026670:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8026674:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026820 <_dtoa_r+0x2c0>
 8026678:	ee36 7b47 	vsub.f64	d7, d6, d7
 802667c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8026828 <_dtoa_r+0x2c8>
 8026680:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026684:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026830 <_dtoa_r+0x2d0>
 8026688:	ee07 1a90 	vmov	s15, r1
 802668c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8026690:	eeb0 7b46 	vmov.f64	d7, d6
 8026694:	eea4 7b05 	vfma.f64	d7, d4, d5
 8026698:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802669c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80266a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266a4:	ee16 ba90 	vmov	fp, s13
 80266a8:	940a      	str	r4, [sp, #40]	; 0x28
 80266aa:	d508      	bpl.n	80266be <_dtoa_r+0x15e>
 80266ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80266b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80266b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266b8:	bf18      	it	ne
 80266ba:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80266be:	f1bb 0f16 	cmp.w	fp, #22
 80266c2:	d82f      	bhi.n	8026724 <_dtoa_r+0x1c4>
 80266c4:	4b62      	ldr	r3, [pc, #392]	; (8026850 <_dtoa_r+0x2f0>)
 80266c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80266ca:	ed93 7b00 	vldr	d7, [r3]
 80266ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80266d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266d6:	d501      	bpl.n	80266dc <_dtoa_r+0x17c>
 80266d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80266dc:	2300      	movs	r3, #0
 80266de:	e022      	b.n	8026726 <_dtoa_r+0x1c6>
 80266e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80266e2:	4401      	add	r1, r0
 80266e4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80266e8:	2b20      	cmp	r3, #32
 80266ea:	bfc1      	itttt	gt
 80266ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80266f0:	fa04 f303 	lslgt.w	r3, r4, r3
 80266f4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80266f8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80266fc:	bfd6      	itet	le
 80266fe:	f1c3 0320 	rsble	r3, r3, #32
 8026702:	ea43 0808 	orrgt.w	r8, r3, r8
 8026706:	fa08 f803 	lslle.w	r8, r8, r3
 802670a:	ee07 8a90 	vmov	s15, r8
 802670e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8026712:	3901      	subs	r1, #1
 8026714:	ee17 4a90 	vmov	r4, s15
 8026718:	ec53 2b17 	vmov	r2, r3, d7
 802671c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8026720:	2401      	movs	r4, #1
 8026722:	e7a3      	b.n	802666c <_dtoa_r+0x10c>
 8026724:	2301      	movs	r3, #1
 8026726:	930b      	str	r3, [sp, #44]	; 0x2c
 8026728:	1a43      	subs	r3, r0, r1
 802672a:	1e5a      	subs	r2, r3, #1
 802672c:	bf45      	ittet	mi
 802672e:	f1c3 0301 	rsbmi	r3, r3, #1
 8026732:	9304      	strmi	r3, [sp, #16]
 8026734:	2300      	movpl	r3, #0
 8026736:	2300      	movmi	r3, #0
 8026738:	9205      	str	r2, [sp, #20]
 802673a:	bf54      	ite	pl
 802673c:	9304      	strpl	r3, [sp, #16]
 802673e:	9305      	strmi	r3, [sp, #20]
 8026740:	f1bb 0f00 	cmp.w	fp, #0
 8026744:	db18      	blt.n	8026778 <_dtoa_r+0x218>
 8026746:	9b05      	ldr	r3, [sp, #20]
 8026748:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 802674c:	445b      	add	r3, fp
 802674e:	9305      	str	r3, [sp, #20]
 8026750:	2300      	movs	r3, #0
 8026752:	9a06      	ldr	r2, [sp, #24]
 8026754:	2a09      	cmp	r2, #9
 8026756:	d849      	bhi.n	80267ec <_dtoa_r+0x28c>
 8026758:	2a05      	cmp	r2, #5
 802675a:	bfc4      	itt	gt
 802675c:	3a04      	subgt	r2, #4
 802675e:	9206      	strgt	r2, [sp, #24]
 8026760:	9a06      	ldr	r2, [sp, #24]
 8026762:	f1a2 0202 	sub.w	r2, r2, #2
 8026766:	bfcc      	ite	gt
 8026768:	2400      	movgt	r4, #0
 802676a:	2401      	movle	r4, #1
 802676c:	2a03      	cmp	r2, #3
 802676e:	d848      	bhi.n	8026802 <_dtoa_r+0x2a2>
 8026770:	e8df f002 	tbb	[pc, r2]
 8026774:	3a2c2e0b 	.word	0x3a2c2e0b
 8026778:	9b04      	ldr	r3, [sp, #16]
 802677a:	2200      	movs	r2, #0
 802677c:	eba3 030b 	sub.w	r3, r3, fp
 8026780:	9304      	str	r3, [sp, #16]
 8026782:	9209      	str	r2, [sp, #36]	; 0x24
 8026784:	f1cb 0300 	rsb	r3, fp, #0
 8026788:	e7e3      	b.n	8026752 <_dtoa_r+0x1f2>
 802678a:	2200      	movs	r2, #0
 802678c:	9207      	str	r2, [sp, #28]
 802678e:	9a08      	ldr	r2, [sp, #32]
 8026790:	2a00      	cmp	r2, #0
 8026792:	dc39      	bgt.n	8026808 <_dtoa_r+0x2a8>
 8026794:	f04f 0a01 	mov.w	sl, #1
 8026798:	46d1      	mov	r9, sl
 802679a:	4652      	mov	r2, sl
 802679c:	f8cd a020 	str.w	sl, [sp, #32]
 80267a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80267a2:	2100      	movs	r1, #0
 80267a4:	6079      	str	r1, [r7, #4]
 80267a6:	2004      	movs	r0, #4
 80267a8:	f100 0c14 	add.w	ip, r0, #20
 80267ac:	4594      	cmp	ip, r2
 80267ae:	6879      	ldr	r1, [r7, #4]
 80267b0:	d92f      	bls.n	8026812 <_dtoa_r+0x2b2>
 80267b2:	4630      	mov	r0, r6
 80267b4:	930d      	str	r3, [sp, #52]	; 0x34
 80267b6:	f000 fe9b 	bl	80274f0 <_Balloc>
 80267ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80267bc:	9001      	str	r0, [sp, #4]
 80267be:	4602      	mov	r2, r0
 80267c0:	2800      	cmp	r0, #0
 80267c2:	d149      	bne.n	8026858 <_dtoa_r+0x2f8>
 80267c4:	4b23      	ldr	r3, [pc, #140]	; (8026854 <_dtoa_r+0x2f4>)
 80267c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80267ca:	e6e1      	b.n	8026590 <_dtoa_r+0x30>
 80267cc:	2201      	movs	r2, #1
 80267ce:	e7dd      	b.n	802678c <_dtoa_r+0x22c>
 80267d0:	2200      	movs	r2, #0
 80267d2:	9207      	str	r2, [sp, #28]
 80267d4:	9a08      	ldr	r2, [sp, #32]
 80267d6:	eb0b 0a02 	add.w	sl, fp, r2
 80267da:	f10a 0901 	add.w	r9, sl, #1
 80267de:	464a      	mov	r2, r9
 80267e0:	2a01      	cmp	r2, #1
 80267e2:	bfb8      	it	lt
 80267e4:	2201      	movlt	r2, #1
 80267e6:	e7db      	b.n	80267a0 <_dtoa_r+0x240>
 80267e8:	2201      	movs	r2, #1
 80267ea:	e7f2      	b.n	80267d2 <_dtoa_r+0x272>
 80267ec:	2401      	movs	r4, #1
 80267ee:	2200      	movs	r2, #0
 80267f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80267f4:	f04f 3aff 	mov.w	sl, #4294967295
 80267f8:	2100      	movs	r1, #0
 80267fa:	46d1      	mov	r9, sl
 80267fc:	2212      	movs	r2, #18
 80267fe:	9108      	str	r1, [sp, #32]
 8026800:	e7ce      	b.n	80267a0 <_dtoa_r+0x240>
 8026802:	2201      	movs	r2, #1
 8026804:	9207      	str	r2, [sp, #28]
 8026806:	e7f5      	b.n	80267f4 <_dtoa_r+0x294>
 8026808:	f8dd a020 	ldr.w	sl, [sp, #32]
 802680c:	46d1      	mov	r9, sl
 802680e:	4652      	mov	r2, sl
 8026810:	e7c6      	b.n	80267a0 <_dtoa_r+0x240>
 8026812:	3101      	adds	r1, #1
 8026814:	6079      	str	r1, [r7, #4]
 8026816:	0040      	lsls	r0, r0, #1
 8026818:	e7c6      	b.n	80267a8 <_dtoa_r+0x248>
 802681a:	bf00      	nop
 802681c:	f3af 8000 	nop.w
 8026820:	636f4361 	.word	0x636f4361
 8026824:	3fd287a7 	.word	0x3fd287a7
 8026828:	8b60c8b3 	.word	0x8b60c8b3
 802682c:	3fc68a28 	.word	0x3fc68a28
 8026830:	509f79fb 	.word	0x509f79fb
 8026834:	3fd34413 	.word	0x3fd34413
 8026838:	0804507c 	.word	0x0804507c
 802683c:	080455fa 	.word	0x080455fa
 8026840:	7ff00000 	.word	0x7ff00000
 8026844:	080455f6 	.word	0x080455f6
 8026848:	080455ed 	.word	0x080455ed
 802684c:	080457da 	.word	0x080457da
 8026850:	080456f0 	.word	0x080456f0
 8026854:	08045655 	.word	0x08045655
 8026858:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802685a:	9901      	ldr	r1, [sp, #4]
 802685c:	6011      	str	r1, [r2, #0]
 802685e:	f1b9 0f0e 	cmp.w	r9, #14
 8026862:	d86c      	bhi.n	802693e <_dtoa_r+0x3de>
 8026864:	2c00      	cmp	r4, #0
 8026866:	d06a      	beq.n	802693e <_dtoa_r+0x3de>
 8026868:	f1bb 0f00 	cmp.w	fp, #0
 802686c:	f340 80a0 	ble.w	80269b0 <_dtoa_r+0x450>
 8026870:	49c1      	ldr	r1, [pc, #772]	; (8026b78 <_dtoa_r+0x618>)
 8026872:	f00b 020f 	and.w	r2, fp, #15
 8026876:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802687a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802687e:	ed92 7b00 	vldr	d7, [r2]
 8026882:	ea4f 112b 	mov.w	r1, fp, asr #4
 8026886:	f000 8087 	beq.w	8026998 <_dtoa_r+0x438>
 802688a:	4abc      	ldr	r2, [pc, #752]	; (8026b7c <_dtoa_r+0x61c>)
 802688c:	ed92 6b08 	vldr	d6, [r2, #32]
 8026890:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8026894:	ed8d 6b02 	vstr	d6, [sp, #8]
 8026898:	f001 010f 	and.w	r1, r1, #15
 802689c:	2203      	movs	r2, #3
 802689e:	48b7      	ldr	r0, [pc, #732]	; (8026b7c <_dtoa_r+0x61c>)
 80268a0:	2900      	cmp	r1, #0
 80268a2:	d17b      	bne.n	802699c <_dtoa_r+0x43c>
 80268a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80268a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80268ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80268b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80268b2:	2900      	cmp	r1, #0
 80268b4:	f000 80a2 	beq.w	80269fc <_dtoa_r+0x49c>
 80268b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80268bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80268c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80268c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268c8:	f140 8098 	bpl.w	80269fc <_dtoa_r+0x49c>
 80268cc:	f1b9 0f00 	cmp.w	r9, #0
 80268d0:	f000 8094 	beq.w	80269fc <_dtoa_r+0x49c>
 80268d4:	f1ba 0f00 	cmp.w	sl, #0
 80268d8:	dd2f      	ble.n	802693a <_dtoa_r+0x3da>
 80268da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80268de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80268e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80268e6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80268ea:	3201      	adds	r2, #1
 80268ec:	4650      	mov	r0, sl
 80268ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80268f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80268f6:	ee07 2a90 	vmov	s15, r2
 80268fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80268fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8026902:	ee15 4a90 	vmov	r4, s11
 8026906:	ec52 1b15 	vmov	r1, r2, d5
 802690a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802690e:	2800      	cmp	r0, #0
 8026910:	d177      	bne.n	8026a02 <_dtoa_r+0x4a2>
 8026912:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026916:	ee36 6b47 	vsub.f64	d6, d6, d7
 802691a:	ec42 1b17 	vmov	d7, r1, r2
 802691e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026926:	f300 8263 	bgt.w	8026df0 <_dtoa_r+0x890>
 802692a:	eeb1 7b47 	vneg.f64	d7, d7
 802692e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026936:	f100 8258 	bmi.w	8026dea <_dtoa_r+0x88a>
 802693a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802693e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026940:	2a00      	cmp	r2, #0
 8026942:	f2c0 811d 	blt.w	8026b80 <_dtoa_r+0x620>
 8026946:	f1bb 0f0e 	cmp.w	fp, #14
 802694a:	f300 8119 	bgt.w	8026b80 <_dtoa_r+0x620>
 802694e:	4b8a      	ldr	r3, [pc, #552]	; (8026b78 <_dtoa_r+0x618>)
 8026950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026954:	ed93 6b00 	vldr	d6, [r3]
 8026958:	9b08      	ldr	r3, [sp, #32]
 802695a:	2b00      	cmp	r3, #0
 802695c:	f280 80b7 	bge.w	8026ace <_dtoa_r+0x56e>
 8026960:	f1b9 0f00 	cmp.w	r9, #0
 8026964:	f300 80b3 	bgt.w	8026ace <_dtoa_r+0x56e>
 8026968:	f040 823f 	bne.w	8026dea <_dtoa_r+0x88a>
 802696c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026970:	ee26 6b07 	vmul.f64	d6, d6, d7
 8026974:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026978:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802697c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026980:	464c      	mov	r4, r9
 8026982:	464f      	mov	r7, r9
 8026984:	f280 8215 	bge.w	8026db2 <_dtoa_r+0x852>
 8026988:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802698c:	2331      	movs	r3, #49	; 0x31
 802698e:	f808 3b01 	strb.w	r3, [r8], #1
 8026992:	f10b 0b01 	add.w	fp, fp, #1
 8026996:	e211      	b.n	8026dbc <_dtoa_r+0x85c>
 8026998:	2202      	movs	r2, #2
 802699a:	e780      	b.n	802689e <_dtoa_r+0x33e>
 802699c:	07cc      	lsls	r4, r1, #31
 802699e:	d504      	bpl.n	80269aa <_dtoa_r+0x44a>
 80269a0:	ed90 6b00 	vldr	d6, [r0]
 80269a4:	3201      	adds	r2, #1
 80269a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80269aa:	1049      	asrs	r1, r1, #1
 80269ac:	3008      	adds	r0, #8
 80269ae:	e777      	b.n	80268a0 <_dtoa_r+0x340>
 80269b0:	d022      	beq.n	80269f8 <_dtoa_r+0x498>
 80269b2:	f1cb 0100 	rsb	r1, fp, #0
 80269b6:	4a70      	ldr	r2, [pc, #448]	; (8026b78 <_dtoa_r+0x618>)
 80269b8:	f001 000f 	and.w	r0, r1, #15
 80269bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80269c0:	ed92 7b00 	vldr	d7, [r2]
 80269c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80269c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80269cc:	486b      	ldr	r0, [pc, #428]	; (8026b7c <_dtoa_r+0x61c>)
 80269ce:	1109      	asrs	r1, r1, #4
 80269d0:	2400      	movs	r4, #0
 80269d2:	2202      	movs	r2, #2
 80269d4:	b929      	cbnz	r1, 80269e2 <_dtoa_r+0x482>
 80269d6:	2c00      	cmp	r4, #0
 80269d8:	f43f af6a 	beq.w	80268b0 <_dtoa_r+0x350>
 80269dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80269e0:	e766      	b.n	80268b0 <_dtoa_r+0x350>
 80269e2:	07cf      	lsls	r7, r1, #31
 80269e4:	d505      	bpl.n	80269f2 <_dtoa_r+0x492>
 80269e6:	ed90 6b00 	vldr	d6, [r0]
 80269ea:	3201      	adds	r2, #1
 80269ec:	2401      	movs	r4, #1
 80269ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80269f2:	1049      	asrs	r1, r1, #1
 80269f4:	3008      	adds	r0, #8
 80269f6:	e7ed      	b.n	80269d4 <_dtoa_r+0x474>
 80269f8:	2202      	movs	r2, #2
 80269fa:	e759      	b.n	80268b0 <_dtoa_r+0x350>
 80269fc:	465f      	mov	r7, fp
 80269fe:	4648      	mov	r0, r9
 8026a00:	e775      	b.n	80268ee <_dtoa_r+0x38e>
 8026a02:	ec42 1b17 	vmov	d7, r1, r2
 8026a06:	4a5c      	ldr	r2, [pc, #368]	; (8026b78 <_dtoa_r+0x618>)
 8026a08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8026a0c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8026a10:	9a01      	ldr	r2, [sp, #4]
 8026a12:	1814      	adds	r4, r2, r0
 8026a14:	9a07      	ldr	r2, [sp, #28]
 8026a16:	b352      	cbz	r2, 8026a6e <_dtoa_r+0x50e>
 8026a18:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8026a1c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8026a20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026a24:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8026a28:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8026a2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026a30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026a34:	ee14 2a90 	vmov	r2, s9
 8026a38:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026a3c:	3230      	adds	r2, #48	; 0x30
 8026a3e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026a42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a4a:	f808 2b01 	strb.w	r2, [r8], #1
 8026a4e:	d439      	bmi.n	8026ac4 <_dtoa_r+0x564>
 8026a50:	ee32 5b46 	vsub.f64	d5, d2, d6
 8026a54:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8026a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a5c:	d472      	bmi.n	8026b44 <_dtoa_r+0x5e4>
 8026a5e:	45a0      	cmp	r8, r4
 8026a60:	f43f af6b 	beq.w	802693a <_dtoa_r+0x3da>
 8026a64:	ee27 7b03 	vmul.f64	d7, d7, d3
 8026a68:	ee26 6b03 	vmul.f64	d6, d6, d3
 8026a6c:	e7e0      	b.n	8026a30 <_dtoa_r+0x4d0>
 8026a6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026a72:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026a76:	4621      	mov	r1, r4
 8026a78:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8026a7c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026a80:	ee14 2a90 	vmov	r2, s9
 8026a84:	3230      	adds	r2, #48	; 0x30
 8026a86:	f808 2b01 	strb.w	r2, [r8], #1
 8026a8a:	45a0      	cmp	r8, r4
 8026a8c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026a90:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026a94:	d118      	bne.n	8026ac8 <_dtoa_r+0x568>
 8026a96:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8026a9a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8026a9e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8026aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026aa6:	dc4d      	bgt.n	8026b44 <_dtoa_r+0x5e4>
 8026aa8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026aac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026ab4:	f57f af41 	bpl.w	802693a <_dtoa_r+0x3da>
 8026ab8:	4688      	mov	r8, r1
 8026aba:	3901      	subs	r1, #1
 8026abc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8026ac0:	2b30      	cmp	r3, #48	; 0x30
 8026ac2:	d0f9      	beq.n	8026ab8 <_dtoa_r+0x558>
 8026ac4:	46bb      	mov	fp, r7
 8026ac6:	e02a      	b.n	8026b1e <_dtoa_r+0x5be>
 8026ac8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8026acc:	e7d6      	b.n	8026a7c <_dtoa_r+0x51c>
 8026ace:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026ad2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8026ad6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026ada:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8026ade:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8026ae2:	ee15 3a10 	vmov	r3, s10
 8026ae6:	3330      	adds	r3, #48	; 0x30
 8026ae8:	f808 3b01 	strb.w	r3, [r8], #1
 8026aec:	9b01      	ldr	r3, [sp, #4]
 8026aee:	eba8 0303 	sub.w	r3, r8, r3
 8026af2:	4599      	cmp	r9, r3
 8026af4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8026af8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8026afc:	d133      	bne.n	8026b66 <_dtoa_r+0x606>
 8026afe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8026b02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8026b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b0a:	dc1a      	bgt.n	8026b42 <_dtoa_r+0x5e2>
 8026b0c:	eeb4 7b46 	vcmp.f64	d7, d6
 8026b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b14:	d103      	bne.n	8026b1e <_dtoa_r+0x5be>
 8026b16:	ee15 3a10 	vmov	r3, s10
 8026b1a:	07d9      	lsls	r1, r3, #31
 8026b1c:	d411      	bmi.n	8026b42 <_dtoa_r+0x5e2>
 8026b1e:	4629      	mov	r1, r5
 8026b20:	4630      	mov	r0, r6
 8026b22:	f000 fd25 	bl	8027570 <_Bfree>
 8026b26:	2300      	movs	r3, #0
 8026b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026b2a:	f888 3000 	strb.w	r3, [r8]
 8026b2e:	f10b 0301 	add.w	r3, fp, #1
 8026b32:	6013      	str	r3, [r2, #0]
 8026b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026b36:	2b00      	cmp	r3, #0
 8026b38:	f43f ad61 	beq.w	80265fe <_dtoa_r+0x9e>
 8026b3c:	f8c3 8000 	str.w	r8, [r3]
 8026b40:	e55d      	b.n	80265fe <_dtoa_r+0x9e>
 8026b42:	465f      	mov	r7, fp
 8026b44:	4643      	mov	r3, r8
 8026b46:	4698      	mov	r8, r3
 8026b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026b4c:	2a39      	cmp	r2, #57	; 0x39
 8026b4e:	d106      	bne.n	8026b5e <_dtoa_r+0x5fe>
 8026b50:	9a01      	ldr	r2, [sp, #4]
 8026b52:	429a      	cmp	r2, r3
 8026b54:	d1f7      	bne.n	8026b46 <_dtoa_r+0x5e6>
 8026b56:	9901      	ldr	r1, [sp, #4]
 8026b58:	2230      	movs	r2, #48	; 0x30
 8026b5a:	3701      	adds	r7, #1
 8026b5c:	700a      	strb	r2, [r1, #0]
 8026b5e:	781a      	ldrb	r2, [r3, #0]
 8026b60:	3201      	adds	r2, #1
 8026b62:	701a      	strb	r2, [r3, #0]
 8026b64:	e7ae      	b.n	8026ac4 <_dtoa_r+0x564>
 8026b66:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026b6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b72:	d1b2      	bne.n	8026ada <_dtoa_r+0x57a>
 8026b74:	e7d3      	b.n	8026b1e <_dtoa_r+0x5be>
 8026b76:	bf00      	nop
 8026b78:	080456f0 	.word	0x080456f0
 8026b7c:	080456c8 	.word	0x080456c8
 8026b80:	9907      	ldr	r1, [sp, #28]
 8026b82:	2900      	cmp	r1, #0
 8026b84:	f000 80d0 	beq.w	8026d28 <_dtoa_r+0x7c8>
 8026b88:	9906      	ldr	r1, [sp, #24]
 8026b8a:	2901      	cmp	r1, #1
 8026b8c:	f300 80b4 	bgt.w	8026cf8 <_dtoa_r+0x798>
 8026b90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026b92:	2900      	cmp	r1, #0
 8026b94:	f000 80ac 	beq.w	8026cf0 <_dtoa_r+0x790>
 8026b98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8026b9c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026ba0:	461c      	mov	r4, r3
 8026ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8026ba4:	9b04      	ldr	r3, [sp, #16]
 8026ba6:	4413      	add	r3, r2
 8026ba8:	9304      	str	r3, [sp, #16]
 8026baa:	9b05      	ldr	r3, [sp, #20]
 8026bac:	2101      	movs	r1, #1
 8026bae:	4413      	add	r3, r2
 8026bb0:	4630      	mov	r0, r6
 8026bb2:	9305      	str	r3, [sp, #20]
 8026bb4:	f000 fd94 	bl	80276e0 <__i2b>
 8026bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026bba:	4607      	mov	r7, r0
 8026bbc:	f1b8 0f00 	cmp.w	r8, #0
 8026bc0:	dd0d      	ble.n	8026bde <_dtoa_r+0x67e>
 8026bc2:	9a05      	ldr	r2, [sp, #20]
 8026bc4:	2a00      	cmp	r2, #0
 8026bc6:	dd0a      	ble.n	8026bde <_dtoa_r+0x67e>
 8026bc8:	4542      	cmp	r2, r8
 8026bca:	9904      	ldr	r1, [sp, #16]
 8026bcc:	bfa8      	it	ge
 8026bce:	4642      	movge	r2, r8
 8026bd0:	1a89      	subs	r1, r1, r2
 8026bd2:	9104      	str	r1, [sp, #16]
 8026bd4:	9905      	ldr	r1, [sp, #20]
 8026bd6:	eba8 0802 	sub.w	r8, r8, r2
 8026bda:	1a8a      	subs	r2, r1, r2
 8026bdc:	9205      	str	r2, [sp, #20]
 8026bde:	b303      	cbz	r3, 8026c22 <_dtoa_r+0x6c2>
 8026be0:	9a07      	ldr	r2, [sp, #28]
 8026be2:	2a00      	cmp	r2, #0
 8026be4:	f000 80a5 	beq.w	8026d32 <_dtoa_r+0x7d2>
 8026be8:	2c00      	cmp	r4, #0
 8026bea:	dd13      	ble.n	8026c14 <_dtoa_r+0x6b4>
 8026bec:	4639      	mov	r1, r7
 8026bee:	4622      	mov	r2, r4
 8026bf0:	4630      	mov	r0, r6
 8026bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8026bf4:	f000 fe34 	bl	8027860 <__pow5mult>
 8026bf8:	462a      	mov	r2, r5
 8026bfa:	4601      	mov	r1, r0
 8026bfc:	4607      	mov	r7, r0
 8026bfe:	4630      	mov	r0, r6
 8026c00:	f000 fd84 	bl	802770c <__multiply>
 8026c04:	4629      	mov	r1, r5
 8026c06:	900a      	str	r0, [sp, #40]	; 0x28
 8026c08:	4630      	mov	r0, r6
 8026c0a:	f000 fcb1 	bl	8027570 <_Bfree>
 8026c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026c12:	4615      	mov	r5, r2
 8026c14:	1b1a      	subs	r2, r3, r4
 8026c16:	d004      	beq.n	8026c22 <_dtoa_r+0x6c2>
 8026c18:	4629      	mov	r1, r5
 8026c1a:	4630      	mov	r0, r6
 8026c1c:	f000 fe20 	bl	8027860 <__pow5mult>
 8026c20:	4605      	mov	r5, r0
 8026c22:	2101      	movs	r1, #1
 8026c24:	4630      	mov	r0, r6
 8026c26:	f000 fd5b 	bl	80276e0 <__i2b>
 8026c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026c2c:	2b00      	cmp	r3, #0
 8026c2e:	4604      	mov	r4, r0
 8026c30:	f340 8081 	ble.w	8026d36 <_dtoa_r+0x7d6>
 8026c34:	461a      	mov	r2, r3
 8026c36:	4601      	mov	r1, r0
 8026c38:	4630      	mov	r0, r6
 8026c3a:	f000 fe11 	bl	8027860 <__pow5mult>
 8026c3e:	9b06      	ldr	r3, [sp, #24]
 8026c40:	2b01      	cmp	r3, #1
 8026c42:	4604      	mov	r4, r0
 8026c44:	dd7a      	ble.n	8026d3c <_dtoa_r+0x7dc>
 8026c46:	2300      	movs	r3, #0
 8026c48:	930a      	str	r3, [sp, #40]	; 0x28
 8026c4a:	6922      	ldr	r2, [r4, #16]
 8026c4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8026c50:	6910      	ldr	r0, [r2, #16]
 8026c52:	f000 fcf5 	bl	8027640 <__hi0bits>
 8026c56:	f1c0 0020 	rsb	r0, r0, #32
 8026c5a:	9b05      	ldr	r3, [sp, #20]
 8026c5c:	4418      	add	r0, r3
 8026c5e:	f010 001f 	ands.w	r0, r0, #31
 8026c62:	f000 808c 	beq.w	8026d7e <_dtoa_r+0x81e>
 8026c66:	f1c0 0220 	rsb	r2, r0, #32
 8026c6a:	2a04      	cmp	r2, #4
 8026c6c:	f340 8085 	ble.w	8026d7a <_dtoa_r+0x81a>
 8026c70:	f1c0 001c 	rsb	r0, r0, #28
 8026c74:	9b04      	ldr	r3, [sp, #16]
 8026c76:	4403      	add	r3, r0
 8026c78:	9304      	str	r3, [sp, #16]
 8026c7a:	9b05      	ldr	r3, [sp, #20]
 8026c7c:	4403      	add	r3, r0
 8026c7e:	4480      	add	r8, r0
 8026c80:	9305      	str	r3, [sp, #20]
 8026c82:	9b04      	ldr	r3, [sp, #16]
 8026c84:	2b00      	cmp	r3, #0
 8026c86:	dd05      	ble.n	8026c94 <_dtoa_r+0x734>
 8026c88:	4629      	mov	r1, r5
 8026c8a:	461a      	mov	r2, r3
 8026c8c:	4630      	mov	r0, r6
 8026c8e:	f000 fe41 	bl	8027914 <__lshift>
 8026c92:	4605      	mov	r5, r0
 8026c94:	9b05      	ldr	r3, [sp, #20]
 8026c96:	2b00      	cmp	r3, #0
 8026c98:	dd05      	ble.n	8026ca6 <_dtoa_r+0x746>
 8026c9a:	4621      	mov	r1, r4
 8026c9c:	461a      	mov	r2, r3
 8026c9e:	4630      	mov	r0, r6
 8026ca0:	f000 fe38 	bl	8027914 <__lshift>
 8026ca4:	4604      	mov	r4, r0
 8026ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026ca8:	2b00      	cmp	r3, #0
 8026caa:	d06a      	beq.n	8026d82 <_dtoa_r+0x822>
 8026cac:	4621      	mov	r1, r4
 8026cae:	4628      	mov	r0, r5
 8026cb0:	f000 fea0 	bl	80279f4 <__mcmp>
 8026cb4:	2800      	cmp	r0, #0
 8026cb6:	da64      	bge.n	8026d82 <_dtoa_r+0x822>
 8026cb8:	2300      	movs	r3, #0
 8026cba:	4629      	mov	r1, r5
 8026cbc:	220a      	movs	r2, #10
 8026cbe:	4630      	mov	r0, r6
 8026cc0:	f000 fc78 	bl	80275b4 <__multadd>
 8026cc4:	9b07      	ldr	r3, [sp, #28]
 8026cc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026cca:	4605      	mov	r5, r0
 8026ccc:	2b00      	cmp	r3, #0
 8026cce:	f000 8191 	beq.w	8026ff4 <_dtoa_r+0xa94>
 8026cd2:	4639      	mov	r1, r7
 8026cd4:	2300      	movs	r3, #0
 8026cd6:	220a      	movs	r2, #10
 8026cd8:	4630      	mov	r0, r6
 8026cda:	f000 fc6b 	bl	80275b4 <__multadd>
 8026cde:	f1ba 0f00 	cmp.w	sl, #0
 8026ce2:	4607      	mov	r7, r0
 8026ce4:	f300 808d 	bgt.w	8026e02 <_dtoa_r+0x8a2>
 8026ce8:	9b06      	ldr	r3, [sp, #24]
 8026cea:	2b02      	cmp	r3, #2
 8026cec:	dc50      	bgt.n	8026d90 <_dtoa_r+0x830>
 8026cee:	e088      	b.n	8026e02 <_dtoa_r+0x8a2>
 8026cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026cf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8026cf6:	e751      	b.n	8026b9c <_dtoa_r+0x63c>
 8026cf8:	f109 34ff 	add.w	r4, r9, #4294967295
 8026cfc:	42a3      	cmp	r3, r4
 8026cfe:	bfbf      	itttt	lt
 8026d00:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8026d02:	1ae3      	sublt	r3, r4, r3
 8026d04:	18d2      	addlt	r2, r2, r3
 8026d06:	9209      	strlt	r2, [sp, #36]	; 0x24
 8026d08:	bfb6      	itet	lt
 8026d0a:	4623      	movlt	r3, r4
 8026d0c:	1b1c      	subge	r4, r3, r4
 8026d0e:	2400      	movlt	r4, #0
 8026d10:	f1b9 0f00 	cmp.w	r9, #0
 8026d14:	bfb5      	itete	lt
 8026d16:	9a04      	ldrlt	r2, [sp, #16]
 8026d18:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8026d1c:	eba2 0809 	sublt.w	r8, r2, r9
 8026d20:	464a      	movge	r2, r9
 8026d22:	bfb8      	it	lt
 8026d24:	2200      	movlt	r2, #0
 8026d26:	e73c      	b.n	8026ba2 <_dtoa_r+0x642>
 8026d28:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026d2c:	9f07      	ldr	r7, [sp, #28]
 8026d2e:	461c      	mov	r4, r3
 8026d30:	e744      	b.n	8026bbc <_dtoa_r+0x65c>
 8026d32:	461a      	mov	r2, r3
 8026d34:	e770      	b.n	8026c18 <_dtoa_r+0x6b8>
 8026d36:	9b06      	ldr	r3, [sp, #24]
 8026d38:	2b01      	cmp	r3, #1
 8026d3a:	dc18      	bgt.n	8026d6e <_dtoa_r+0x80e>
 8026d3c:	9b02      	ldr	r3, [sp, #8]
 8026d3e:	b9b3      	cbnz	r3, 8026d6e <_dtoa_r+0x80e>
 8026d40:	9b03      	ldr	r3, [sp, #12]
 8026d42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8026d46:	b9a2      	cbnz	r2, 8026d72 <_dtoa_r+0x812>
 8026d48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8026d4c:	0d12      	lsrs	r2, r2, #20
 8026d4e:	0512      	lsls	r2, r2, #20
 8026d50:	b18a      	cbz	r2, 8026d76 <_dtoa_r+0x816>
 8026d52:	9b04      	ldr	r3, [sp, #16]
 8026d54:	3301      	adds	r3, #1
 8026d56:	9304      	str	r3, [sp, #16]
 8026d58:	9b05      	ldr	r3, [sp, #20]
 8026d5a:	3301      	adds	r3, #1
 8026d5c:	9305      	str	r3, [sp, #20]
 8026d5e:	2301      	movs	r3, #1
 8026d60:	930a      	str	r3, [sp, #40]	; 0x28
 8026d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d64:	2b00      	cmp	r3, #0
 8026d66:	f47f af70 	bne.w	8026c4a <_dtoa_r+0x6ea>
 8026d6a:	2001      	movs	r0, #1
 8026d6c:	e775      	b.n	8026c5a <_dtoa_r+0x6fa>
 8026d6e:	2300      	movs	r3, #0
 8026d70:	e7f6      	b.n	8026d60 <_dtoa_r+0x800>
 8026d72:	9b02      	ldr	r3, [sp, #8]
 8026d74:	e7f4      	b.n	8026d60 <_dtoa_r+0x800>
 8026d76:	920a      	str	r2, [sp, #40]	; 0x28
 8026d78:	e7f3      	b.n	8026d62 <_dtoa_r+0x802>
 8026d7a:	d082      	beq.n	8026c82 <_dtoa_r+0x722>
 8026d7c:	4610      	mov	r0, r2
 8026d7e:	301c      	adds	r0, #28
 8026d80:	e778      	b.n	8026c74 <_dtoa_r+0x714>
 8026d82:	f1b9 0f00 	cmp.w	r9, #0
 8026d86:	dc37      	bgt.n	8026df8 <_dtoa_r+0x898>
 8026d88:	9b06      	ldr	r3, [sp, #24]
 8026d8a:	2b02      	cmp	r3, #2
 8026d8c:	dd34      	ble.n	8026df8 <_dtoa_r+0x898>
 8026d8e:	46ca      	mov	sl, r9
 8026d90:	f1ba 0f00 	cmp.w	sl, #0
 8026d94:	d10d      	bne.n	8026db2 <_dtoa_r+0x852>
 8026d96:	4621      	mov	r1, r4
 8026d98:	4653      	mov	r3, sl
 8026d9a:	2205      	movs	r2, #5
 8026d9c:	4630      	mov	r0, r6
 8026d9e:	f000 fc09 	bl	80275b4 <__multadd>
 8026da2:	4601      	mov	r1, r0
 8026da4:	4604      	mov	r4, r0
 8026da6:	4628      	mov	r0, r5
 8026da8:	f000 fe24 	bl	80279f4 <__mcmp>
 8026dac:	2800      	cmp	r0, #0
 8026dae:	f73f adeb 	bgt.w	8026988 <_dtoa_r+0x428>
 8026db2:	9b08      	ldr	r3, [sp, #32]
 8026db4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026db8:	ea6f 0b03 	mvn.w	fp, r3
 8026dbc:	f04f 0900 	mov.w	r9, #0
 8026dc0:	4621      	mov	r1, r4
 8026dc2:	4630      	mov	r0, r6
 8026dc4:	f000 fbd4 	bl	8027570 <_Bfree>
 8026dc8:	2f00      	cmp	r7, #0
 8026dca:	f43f aea8 	beq.w	8026b1e <_dtoa_r+0x5be>
 8026dce:	f1b9 0f00 	cmp.w	r9, #0
 8026dd2:	d005      	beq.n	8026de0 <_dtoa_r+0x880>
 8026dd4:	45b9      	cmp	r9, r7
 8026dd6:	d003      	beq.n	8026de0 <_dtoa_r+0x880>
 8026dd8:	4649      	mov	r1, r9
 8026dda:	4630      	mov	r0, r6
 8026ddc:	f000 fbc8 	bl	8027570 <_Bfree>
 8026de0:	4639      	mov	r1, r7
 8026de2:	4630      	mov	r0, r6
 8026de4:	f000 fbc4 	bl	8027570 <_Bfree>
 8026de8:	e699      	b.n	8026b1e <_dtoa_r+0x5be>
 8026dea:	2400      	movs	r4, #0
 8026dec:	4627      	mov	r7, r4
 8026dee:	e7e0      	b.n	8026db2 <_dtoa_r+0x852>
 8026df0:	46bb      	mov	fp, r7
 8026df2:	4604      	mov	r4, r0
 8026df4:	4607      	mov	r7, r0
 8026df6:	e5c7      	b.n	8026988 <_dtoa_r+0x428>
 8026df8:	9b07      	ldr	r3, [sp, #28]
 8026dfa:	46ca      	mov	sl, r9
 8026dfc:	2b00      	cmp	r3, #0
 8026dfe:	f000 8100 	beq.w	8027002 <_dtoa_r+0xaa2>
 8026e02:	f1b8 0f00 	cmp.w	r8, #0
 8026e06:	dd05      	ble.n	8026e14 <_dtoa_r+0x8b4>
 8026e08:	4639      	mov	r1, r7
 8026e0a:	4642      	mov	r2, r8
 8026e0c:	4630      	mov	r0, r6
 8026e0e:	f000 fd81 	bl	8027914 <__lshift>
 8026e12:	4607      	mov	r7, r0
 8026e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e16:	2b00      	cmp	r3, #0
 8026e18:	d05d      	beq.n	8026ed6 <_dtoa_r+0x976>
 8026e1a:	6879      	ldr	r1, [r7, #4]
 8026e1c:	4630      	mov	r0, r6
 8026e1e:	f000 fb67 	bl	80274f0 <_Balloc>
 8026e22:	4680      	mov	r8, r0
 8026e24:	b928      	cbnz	r0, 8026e32 <_dtoa_r+0x8d2>
 8026e26:	4b82      	ldr	r3, [pc, #520]	; (8027030 <_dtoa_r+0xad0>)
 8026e28:	4602      	mov	r2, r0
 8026e2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8026e2e:	f7ff bbaf 	b.w	8026590 <_dtoa_r+0x30>
 8026e32:	693a      	ldr	r2, [r7, #16]
 8026e34:	3202      	adds	r2, #2
 8026e36:	0092      	lsls	r2, r2, #2
 8026e38:	f107 010c 	add.w	r1, r7, #12
 8026e3c:	300c      	adds	r0, #12
 8026e3e:	f7fc fe91 	bl	8023b64 <memcpy>
 8026e42:	2201      	movs	r2, #1
 8026e44:	4641      	mov	r1, r8
 8026e46:	4630      	mov	r0, r6
 8026e48:	f000 fd64 	bl	8027914 <__lshift>
 8026e4c:	9b01      	ldr	r3, [sp, #4]
 8026e4e:	3301      	adds	r3, #1
 8026e50:	9304      	str	r3, [sp, #16]
 8026e52:	9b01      	ldr	r3, [sp, #4]
 8026e54:	4453      	add	r3, sl
 8026e56:	9308      	str	r3, [sp, #32]
 8026e58:	9b02      	ldr	r3, [sp, #8]
 8026e5a:	f003 0301 	and.w	r3, r3, #1
 8026e5e:	46b9      	mov	r9, r7
 8026e60:	9307      	str	r3, [sp, #28]
 8026e62:	4607      	mov	r7, r0
 8026e64:	9b04      	ldr	r3, [sp, #16]
 8026e66:	4621      	mov	r1, r4
 8026e68:	3b01      	subs	r3, #1
 8026e6a:	4628      	mov	r0, r5
 8026e6c:	9302      	str	r3, [sp, #8]
 8026e6e:	f7ff fae9 	bl	8026444 <quorem>
 8026e72:	4603      	mov	r3, r0
 8026e74:	3330      	adds	r3, #48	; 0x30
 8026e76:	9005      	str	r0, [sp, #20]
 8026e78:	4649      	mov	r1, r9
 8026e7a:	4628      	mov	r0, r5
 8026e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8026e7e:	f000 fdb9 	bl	80279f4 <__mcmp>
 8026e82:	463a      	mov	r2, r7
 8026e84:	4682      	mov	sl, r0
 8026e86:	4621      	mov	r1, r4
 8026e88:	4630      	mov	r0, r6
 8026e8a:	f000 fdcf 	bl	8027a2c <__mdiff>
 8026e8e:	68c2      	ldr	r2, [r0, #12]
 8026e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e92:	4680      	mov	r8, r0
 8026e94:	bb0a      	cbnz	r2, 8026eda <_dtoa_r+0x97a>
 8026e96:	4601      	mov	r1, r0
 8026e98:	4628      	mov	r0, r5
 8026e9a:	f000 fdab 	bl	80279f4 <__mcmp>
 8026e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ea0:	4602      	mov	r2, r0
 8026ea2:	4641      	mov	r1, r8
 8026ea4:	4630      	mov	r0, r6
 8026ea6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8026eaa:	f000 fb61 	bl	8027570 <_Bfree>
 8026eae:	9b06      	ldr	r3, [sp, #24]
 8026eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026eb2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026eb6:	ea43 0102 	orr.w	r1, r3, r2
 8026eba:	9b07      	ldr	r3, [sp, #28]
 8026ebc:	430b      	orrs	r3, r1
 8026ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ec0:	d10d      	bne.n	8026ede <_dtoa_r+0x97e>
 8026ec2:	2b39      	cmp	r3, #57	; 0x39
 8026ec4:	d029      	beq.n	8026f1a <_dtoa_r+0x9ba>
 8026ec6:	f1ba 0f00 	cmp.w	sl, #0
 8026eca:	dd01      	ble.n	8026ed0 <_dtoa_r+0x970>
 8026ecc:	9b05      	ldr	r3, [sp, #20]
 8026ece:	3331      	adds	r3, #49	; 0x31
 8026ed0:	9a02      	ldr	r2, [sp, #8]
 8026ed2:	7013      	strb	r3, [r2, #0]
 8026ed4:	e774      	b.n	8026dc0 <_dtoa_r+0x860>
 8026ed6:	4638      	mov	r0, r7
 8026ed8:	e7b8      	b.n	8026e4c <_dtoa_r+0x8ec>
 8026eda:	2201      	movs	r2, #1
 8026edc:	e7e1      	b.n	8026ea2 <_dtoa_r+0x942>
 8026ede:	f1ba 0f00 	cmp.w	sl, #0
 8026ee2:	db06      	blt.n	8026ef2 <_dtoa_r+0x992>
 8026ee4:	9906      	ldr	r1, [sp, #24]
 8026ee6:	ea41 0a0a 	orr.w	sl, r1, sl
 8026eea:	9907      	ldr	r1, [sp, #28]
 8026eec:	ea5a 0101 	orrs.w	r1, sl, r1
 8026ef0:	d120      	bne.n	8026f34 <_dtoa_r+0x9d4>
 8026ef2:	2a00      	cmp	r2, #0
 8026ef4:	ddec      	ble.n	8026ed0 <_dtoa_r+0x970>
 8026ef6:	4629      	mov	r1, r5
 8026ef8:	2201      	movs	r2, #1
 8026efa:	4630      	mov	r0, r6
 8026efc:	9304      	str	r3, [sp, #16]
 8026efe:	f000 fd09 	bl	8027914 <__lshift>
 8026f02:	4621      	mov	r1, r4
 8026f04:	4605      	mov	r5, r0
 8026f06:	f000 fd75 	bl	80279f4 <__mcmp>
 8026f0a:	2800      	cmp	r0, #0
 8026f0c:	9b04      	ldr	r3, [sp, #16]
 8026f0e:	dc02      	bgt.n	8026f16 <_dtoa_r+0x9b6>
 8026f10:	d1de      	bne.n	8026ed0 <_dtoa_r+0x970>
 8026f12:	07da      	lsls	r2, r3, #31
 8026f14:	d5dc      	bpl.n	8026ed0 <_dtoa_r+0x970>
 8026f16:	2b39      	cmp	r3, #57	; 0x39
 8026f18:	d1d8      	bne.n	8026ecc <_dtoa_r+0x96c>
 8026f1a:	9a02      	ldr	r2, [sp, #8]
 8026f1c:	2339      	movs	r3, #57	; 0x39
 8026f1e:	7013      	strb	r3, [r2, #0]
 8026f20:	4643      	mov	r3, r8
 8026f22:	4698      	mov	r8, r3
 8026f24:	3b01      	subs	r3, #1
 8026f26:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8026f2a:	2a39      	cmp	r2, #57	; 0x39
 8026f2c:	d051      	beq.n	8026fd2 <_dtoa_r+0xa72>
 8026f2e:	3201      	adds	r2, #1
 8026f30:	701a      	strb	r2, [r3, #0]
 8026f32:	e745      	b.n	8026dc0 <_dtoa_r+0x860>
 8026f34:	2a00      	cmp	r2, #0
 8026f36:	dd03      	ble.n	8026f40 <_dtoa_r+0x9e0>
 8026f38:	2b39      	cmp	r3, #57	; 0x39
 8026f3a:	d0ee      	beq.n	8026f1a <_dtoa_r+0x9ba>
 8026f3c:	3301      	adds	r3, #1
 8026f3e:	e7c7      	b.n	8026ed0 <_dtoa_r+0x970>
 8026f40:	9a04      	ldr	r2, [sp, #16]
 8026f42:	9908      	ldr	r1, [sp, #32]
 8026f44:	f802 3c01 	strb.w	r3, [r2, #-1]
 8026f48:	428a      	cmp	r2, r1
 8026f4a:	d02b      	beq.n	8026fa4 <_dtoa_r+0xa44>
 8026f4c:	4629      	mov	r1, r5
 8026f4e:	2300      	movs	r3, #0
 8026f50:	220a      	movs	r2, #10
 8026f52:	4630      	mov	r0, r6
 8026f54:	f000 fb2e 	bl	80275b4 <__multadd>
 8026f58:	45b9      	cmp	r9, r7
 8026f5a:	4605      	mov	r5, r0
 8026f5c:	f04f 0300 	mov.w	r3, #0
 8026f60:	f04f 020a 	mov.w	r2, #10
 8026f64:	4649      	mov	r1, r9
 8026f66:	4630      	mov	r0, r6
 8026f68:	d107      	bne.n	8026f7a <_dtoa_r+0xa1a>
 8026f6a:	f000 fb23 	bl	80275b4 <__multadd>
 8026f6e:	4681      	mov	r9, r0
 8026f70:	4607      	mov	r7, r0
 8026f72:	9b04      	ldr	r3, [sp, #16]
 8026f74:	3301      	adds	r3, #1
 8026f76:	9304      	str	r3, [sp, #16]
 8026f78:	e774      	b.n	8026e64 <_dtoa_r+0x904>
 8026f7a:	f000 fb1b 	bl	80275b4 <__multadd>
 8026f7e:	4639      	mov	r1, r7
 8026f80:	4681      	mov	r9, r0
 8026f82:	2300      	movs	r3, #0
 8026f84:	220a      	movs	r2, #10
 8026f86:	4630      	mov	r0, r6
 8026f88:	f000 fb14 	bl	80275b4 <__multadd>
 8026f8c:	4607      	mov	r7, r0
 8026f8e:	e7f0      	b.n	8026f72 <_dtoa_r+0xa12>
 8026f90:	f1ba 0f00 	cmp.w	sl, #0
 8026f94:	9a01      	ldr	r2, [sp, #4]
 8026f96:	bfcc      	ite	gt
 8026f98:	46d0      	movgt	r8, sl
 8026f9a:	f04f 0801 	movle.w	r8, #1
 8026f9e:	4490      	add	r8, r2
 8026fa0:	f04f 0900 	mov.w	r9, #0
 8026fa4:	4629      	mov	r1, r5
 8026fa6:	2201      	movs	r2, #1
 8026fa8:	4630      	mov	r0, r6
 8026faa:	9302      	str	r3, [sp, #8]
 8026fac:	f000 fcb2 	bl	8027914 <__lshift>
 8026fb0:	4621      	mov	r1, r4
 8026fb2:	4605      	mov	r5, r0
 8026fb4:	f000 fd1e 	bl	80279f4 <__mcmp>
 8026fb8:	2800      	cmp	r0, #0
 8026fba:	dcb1      	bgt.n	8026f20 <_dtoa_r+0x9c0>
 8026fbc:	d102      	bne.n	8026fc4 <_dtoa_r+0xa64>
 8026fbe:	9b02      	ldr	r3, [sp, #8]
 8026fc0:	07db      	lsls	r3, r3, #31
 8026fc2:	d4ad      	bmi.n	8026f20 <_dtoa_r+0x9c0>
 8026fc4:	4643      	mov	r3, r8
 8026fc6:	4698      	mov	r8, r3
 8026fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026fcc:	2a30      	cmp	r2, #48	; 0x30
 8026fce:	d0fa      	beq.n	8026fc6 <_dtoa_r+0xa66>
 8026fd0:	e6f6      	b.n	8026dc0 <_dtoa_r+0x860>
 8026fd2:	9a01      	ldr	r2, [sp, #4]
 8026fd4:	429a      	cmp	r2, r3
 8026fd6:	d1a4      	bne.n	8026f22 <_dtoa_r+0x9c2>
 8026fd8:	f10b 0b01 	add.w	fp, fp, #1
 8026fdc:	2331      	movs	r3, #49	; 0x31
 8026fde:	e778      	b.n	8026ed2 <_dtoa_r+0x972>
 8026fe0:	4b14      	ldr	r3, [pc, #80]	; (8027034 <_dtoa_r+0xad4>)
 8026fe2:	f7ff bb27 	b.w	8026634 <_dtoa_r+0xd4>
 8026fe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026fe8:	2b00      	cmp	r3, #0
 8026fea:	f47f ab03 	bne.w	80265f4 <_dtoa_r+0x94>
 8026fee:	4b12      	ldr	r3, [pc, #72]	; (8027038 <_dtoa_r+0xad8>)
 8026ff0:	f7ff bb20 	b.w	8026634 <_dtoa_r+0xd4>
 8026ff4:	f1ba 0f00 	cmp.w	sl, #0
 8026ff8:	dc03      	bgt.n	8027002 <_dtoa_r+0xaa2>
 8026ffa:	9b06      	ldr	r3, [sp, #24]
 8026ffc:	2b02      	cmp	r3, #2
 8026ffe:	f73f aec7 	bgt.w	8026d90 <_dtoa_r+0x830>
 8027002:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027006:	4621      	mov	r1, r4
 8027008:	4628      	mov	r0, r5
 802700a:	f7ff fa1b 	bl	8026444 <quorem>
 802700e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8027012:	f808 3b01 	strb.w	r3, [r8], #1
 8027016:	9a01      	ldr	r2, [sp, #4]
 8027018:	eba8 0202 	sub.w	r2, r8, r2
 802701c:	4592      	cmp	sl, r2
 802701e:	ddb7      	ble.n	8026f90 <_dtoa_r+0xa30>
 8027020:	4629      	mov	r1, r5
 8027022:	2300      	movs	r3, #0
 8027024:	220a      	movs	r2, #10
 8027026:	4630      	mov	r0, r6
 8027028:	f000 fac4 	bl	80275b4 <__multadd>
 802702c:	4605      	mov	r5, r0
 802702e:	e7ea      	b.n	8027006 <_dtoa_r+0xaa6>
 8027030:	08045655 	.word	0x08045655
 8027034:	080457d9 	.word	0x080457d9
 8027038:	080455ed 	.word	0x080455ed

0802703c <__errno>:
 802703c:	4b01      	ldr	r3, [pc, #4]	; (8027044 <__errno+0x8>)
 802703e:	6818      	ldr	r0, [r3, #0]
 8027040:	4770      	bx	lr
 8027042:	bf00      	nop
 8027044:	20000488 	.word	0x20000488

08027048 <__sflush_r>:
 8027048:	898a      	ldrh	r2, [r1, #12]
 802704a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802704e:	4605      	mov	r5, r0
 8027050:	0710      	lsls	r0, r2, #28
 8027052:	460c      	mov	r4, r1
 8027054:	d458      	bmi.n	8027108 <__sflush_r+0xc0>
 8027056:	684b      	ldr	r3, [r1, #4]
 8027058:	2b00      	cmp	r3, #0
 802705a:	dc05      	bgt.n	8027068 <__sflush_r+0x20>
 802705c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802705e:	2b00      	cmp	r3, #0
 8027060:	dc02      	bgt.n	8027068 <__sflush_r+0x20>
 8027062:	2000      	movs	r0, #0
 8027064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802706a:	2e00      	cmp	r6, #0
 802706c:	d0f9      	beq.n	8027062 <__sflush_r+0x1a>
 802706e:	2300      	movs	r3, #0
 8027070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027074:	682f      	ldr	r7, [r5, #0]
 8027076:	602b      	str	r3, [r5, #0]
 8027078:	d032      	beq.n	80270e0 <__sflush_r+0x98>
 802707a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802707c:	89a3      	ldrh	r3, [r4, #12]
 802707e:	075a      	lsls	r2, r3, #29
 8027080:	d505      	bpl.n	802708e <__sflush_r+0x46>
 8027082:	6863      	ldr	r3, [r4, #4]
 8027084:	1ac0      	subs	r0, r0, r3
 8027086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027088:	b10b      	cbz	r3, 802708e <__sflush_r+0x46>
 802708a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802708c:	1ac0      	subs	r0, r0, r3
 802708e:	2300      	movs	r3, #0
 8027090:	4602      	mov	r2, r0
 8027092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027094:	6a21      	ldr	r1, [r4, #32]
 8027096:	4628      	mov	r0, r5
 8027098:	47b0      	blx	r6
 802709a:	1c43      	adds	r3, r0, #1
 802709c:	89a3      	ldrh	r3, [r4, #12]
 802709e:	d106      	bne.n	80270ae <__sflush_r+0x66>
 80270a0:	6829      	ldr	r1, [r5, #0]
 80270a2:	291d      	cmp	r1, #29
 80270a4:	d82c      	bhi.n	8027100 <__sflush_r+0xb8>
 80270a6:	4a2a      	ldr	r2, [pc, #168]	; (8027150 <__sflush_r+0x108>)
 80270a8:	40ca      	lsrs	r2, r1
 80270aa:	07d6      	lsls	r6, r2, #31
 80270ac:	d528      	bpl.n	8027100 <__sflush_r+0xb8>
 80270ae:	2200      	movs	r2, #0
 80270b0:	6062      	str	r2, [r4, #4]
 80270b2:	04d9      	lsls	r1, r3, #19
 80270b4:	6922      	ldr	r2, [r4, #16]
 80270b6:	6022      	str	r2, [r4, #0]
 80270b8:	d504      	bpl.n	80270c4 <__sflush_r+0x7c>
 80270ba:	1c42      	adds	r2, r0, #1
 80270bc:	d101      	bne.n	80270c2 <__sflush_r+0x7a>
 80270be:	682b      	ldr	r3, [r5, #0]
 80270c0:	b903      	cbnz	r3, 80270c4 <__sflush_r+0x7c>
 80270c2:	6560      	str	r0, [r4, #84]	; 0x54
 80270c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80270c6:	602f      	str	r7, [r5, #0]
 80270c8:	2900      	cmp	r1, #0
 80270ca:	d0ca      	beq.n	8027062 <__sflush_r+0x1a>
 80270cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80270d0:	4299      	cmp	r1, r3
 80270d2:	d002      	beq.n	80270da <__sflush_r+0x92>
 80270d4:	4628      	mov	r0, r5
 80270d6:	f7fc ffe7 	bl	80240a8 <_free_r>
 80270da:	2000      	movs	r0, #0
 80270dc:	6360      	str	r0, [r4, #52]	; 0x34
 80270de:	e7c1      	b.n	8027064 <__sflush_r+0x1c>
 80270e0:	6a21      	ldr	r1, [r4, #32]
 80270e2:	2301      	movs	r3, #1
 80270e4:	4628      	mov	r0, r5
 80270e6:	47b0      	blx	r6
 80270e8:	1c41      	adds	r1, r0, #1
 80270ea:	d1c7      	bne.n	802707c <__sflush_r+0x34>
 80270ec:	682b      	ldr	r3, [r5, #0]
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	d0c4      	beq.n	802707c <__sflush_r+0x34>
 80270f2:	2b1d      	cmp	r3, #29
 80270f4:	d001      	beq.n	80270fa <__sflush_r+0xb2>
 80270f6:	2b16      	cmp	r3, #22
 80270f8:	d101      	bne.n	80270fe <__sflush_r+0xb6>
 80270fa:	602f      	str	r7, [r5, #0]
 80270fc:	e7b1      	b.n	8027062 <__sflush_r+0x1a>
 80270fe:	89a3      	ldrh	r3, [r4, #12]
 8027100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027104:	81a3      	strh	r3, [r4, #12]
 8027106:	e7ad      	b.n	8027064 <__sflush_r+0x1c>
 8027108:	690f      	ldr	r7, [r1, #16]
 802710a:	2f00      	cmp	r7, #0
 802710c:	d0a9      	beq.n	8027062 <__sflush_r+0x1a>
 802710e:	0793      	lsls	r3, r2, #30
 8027110:	680e      	ldr	r6, [r1, #0]
 8027112:	bf08      	it	eq
 8027114:	694b      	ldreq	r3, [r1, #20]
 8027116:	600f      	str	r7, [r1, #0]
 8027118:	bf18      	it	ne
 802711a:	2300      	movne	r3, #0
 802711c:	eba6 0807 	sub.w	r8, r6, r7
 8027120:	608b      	str	r3, [r1, #8]
 8027122:	f1b8 0f00 	cmp.w	r8, #0
 8027126:	dd9c      	ble.n	8027062 <__sflush_r+0x1a>
 8027128:	6a21      	ldr	r1, [r4, #32]
 802712a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802712c:	4643      	mov	r3, r8
 802712e:	463a      	mov	r2, r7
 8027130:	4628      	mov	r0, r5
 8027132:	47b0      	blx	r6
 8027134:	2800      	cmp	r0, #0
 8027136:	dc06      	bgt.n	8027146 <__sflush_r+0xfe>
 8027138:	89a3      	ldrh	r3, [r4, #12]
 802713a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802713e:	81a3      	strh	r3, [r4, #12]
 8027140:	f04f 30ff 	mov.w	r0, #4294967295
 8027144:	e78e      	b.n	8027064 <__sflush_r+0x1c>
 8027146:	4407      	add	r7, r0
 8027148:	eba8 0800 	sub.w	r8, r8, r0
 802714c:	e7e9      	b.n	8027122 <__sflush_r+0xda>
 802714e:	bf00      	nop
 8027150:	20400001 	.word	0x20400001

08027154 <_fflush_r>:
 8027154:	b538      	push	{r3, r4, r5, lr}
 8027156:	690b      	ldr	r3, [r1, #16]
 8027158:	4605      	mov	r5, r0
 802715a:	460c      	mov	r4, r1
 802715c:	b913      	cbnz	r3, 8027164 <_fflush_r+0x10>
 802715e:	2500      	movs	r5, #0
 8027160:	4628      	mov	r0, r5
 8027162:	bd38      	pop	{r3, r4, r5, pc}
 8027164:	b118      	cbz	r0, 802716e <_fflush_r+0x1a>
 8027166:	6983      	ldr	r3, [r0, #24]
 8027168:	b90b      	cbnz	r3, 802716e <_fflush_r+0x1a>
 802716a:	f7fc fb01 	bl	8023770 <__sinit>
 802716e:	4b14      	ldr	r3, [pc, #80]	; (80271c0 <_fflush_r+0x6c>)
 8027170:	429c      	cmp	r4, r3
 8027172:	d11b      	bne.n	80271ac <_fflush_r+0x58>
 8027174:	686c      	ldr	r4, [r5, #4]
 8027176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802717a:	2b00      	cmp	r3, #0
 802717c:	d0ef      	beq.n	802715e <_fflush_r+0xa>
 802717e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027180:	07d0      	lsls	r0, r2, #31
 8027182:	d404      	bmi.n	802718e <_fflush_r+0x3a>
 8027184:	0599      	lsls	r1, r3, #22
 8027186:	d402      	bmi.n	802718e <_fflush_r+0x3a>
 8027188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802718a:	f7fc fcc7 	bl	8023b1c <__retarget_lock_acquire_recursive>
 802718e:	4628      	mov	r0, r5
 8027190:	4621      	mov	r1, r4
 8027192:	f7ff ff59 	bl	8027048 <__sflush_r>
 8027196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027198:	07da      	lsls	r2, r3, #31
 802719a:	4605      	mov	r5, r0
 802719c:	d4e0      	bmi.n	8027160 <_fflush_r+0xc>
 802719e:	89a3      	ldrh	r3, [r4, #12]
 80271a0:	059b      	lsls	r3, r3, #22
 80271a2:	d4dd      	bmi.n	8027160 <_fflush_r+0xc>
 80271a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80271a6:	f7fc fcbb 	bl	8023b20 <__retarget_lock_release_recursive>
 80271aa:	e7d9      	b.n	8027160 <_fflush_r+0xc>
 80271ac:	4b05      	ldr	r3, [pc, #20]	; (80271c4 <_fflush_r+0x70>)
 80271ae:	429c      	cmp	r4, r3
 80271b0:	d101      	bne.n	80271b6 <_fflush_r+0x62>
 80271b2:	68ac      	ldr	r4, [r5, #8]
 80271b4:	e7df      	b.n	8027176 <_fflush_r+0x22>
 80271b6:	4b04      	ldr	r3, [pc, #16]	; (80271c8 <_fflush_r+0x74>)
 80271b8:	429c      	cmp	r4, r3
 80271ba:	bf08      	it	eq
 80271bc:	68ec      	ldreq	r4, [r5, #12]
 80271be:	e7da      	b.n	8027176 <_fflush_r+0x22>
 80271c0:	08045038 	.word	0x08045038
 80271c4:	08045058 	.word	0x08045058
 80271c8:	08045018 	.word	0x08045018

080271cc <fiprintf>:
 80271cc:	b40e      	push	{r1, r2, r3}
 80271ce:	b503      	push	{r0, r1, lr}
 80271d0:	4601      	mov	r1, r0
 80271d2:	ab03      	add	r3, sp, #12
 80271d4:	4805      	ldr	r0, [pc, #20]	; (80271ec <fiprintf+0x20>)
 80271d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80271da:	6800      	ldr	r0, [r0, #0]
 80271dc:	9301      	str	r3, [sp, #4]
 80271de:	f001 f8a7 	bl	8028330 <_vfiprintf_r>
 80271e2:	b002      	add	sp, #8
 80271e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80271e8:	b003      	add	sp, #12
 80271ea:	4770      	bx	lr
 80271ec:	20000488 	.word	0x20000488

080271f0 <_findenv_r>:
 80271f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271f4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8027264 <_findenv_r+0x74>
 80271f8:	4607      	mov	r7, r0
 80271fa:	4689      	mov	r9, r1
 80271fc:	4616      	mov	r6, r2
 80271fe:	f001 fc17 	bl	8028a30 <__env_lock>
 8027202:	f8da 4000 	ldr.w	r4, [sl]
 8027206:	b134      	cbz	r4, 8027216 <_findenv_r+0x26>
 8027208:	464b      	mov	r3, r9
 802720a:	4698      	mov	r8, r3
 802720c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027210:	b13a      	cbz	r2, 8027222 <_findenv_r+0x32>
 8027212:	2a3d      	cmp	r2, #61	; 0x3d
 8027214:	d1f9      	bne.n	802720a <_findenv_r+0x1a>
 8027216:	4638      	mov	r0, r7
 8027218:	f001 fc10 	bl	8028a3c <__env_unlock>
 802721c:	2000      	movs	r0, #0
 802721e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027222:	eba8 0809 	sub.w	r8, r8, r9
 8027226:	46a3      	mov	fp, r4
 8027228:	f854 0b04 	ldr.w	r0, [r4], #4
 802722c:	2800      	cmp	r0, #0
 802722e:	d0f2      	beq.n	8027216 <_findenv_r+0x26>
 8027230:	4642      	mov	r2, r8
 8027232:	4649      	mov	r1, r9
 8027234:	f7fe fc36 	bl	8025aa4 <strncmp>
 8027238:	2800      	cmp	r0, #0
 802723a:	d1f4      	bne.n	8027226 <_findenv_r+0x36>
 802723c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8027240:	eb03 0508 	add.w	r5, r3, r8
 8027244:	f813 3008 	ldrb.w	r3, [r3, r8]
 8027248:	2b3d      	cmp	r3, #61	; 0x3d
 802724a:	d1ec      	bne.n	8027226 <_findenv_r+0x36>
 802724c:	f8da 3000 	ldr.w	r3, [sl]
 8027250:	ebab 0303 	sub.w	r3, fp, r3
 8027254:	109b      	asrs	r3, r3, #2
 8027256:	4638      	mov	r0, r7
 8027258:	6033      	str	r3, [r6, #0]
 802725a:	f001 fbef 	bl	8028a3c <__env_unlock>
 802725e:	1c68      	adds	r0, r5, #1
 8027260:	e7dd      	b.n	802721e <_findenv_r+0x2e>
 8027262:	bf00      	nop
 8027264:	20000278 	.word	0x20000278

08027268 <_getenv_r>:
 8027268:	b507      	push	{r0, r1, r2, lr}
 802726a:	aa01      	add	r2, sp, #4
 802726c:	f7ff ffc0 	bl	80271f0 <_findenv_r>
 8027270:	b003      	add	sp, #12
 8027272:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08027278 <__gettzinfo>:
 8027278:	4800      	ldr	r0, [pc, #0]	; (802727c <__gettzinfo+0x4>)
 802727a:	4770      	bx	lr
 802727c:	200004f8 	.word	0x200004f8

08027280 <gmtime_r>:
 8027280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027284:	e9d0 6700 	ldrd	r6, r7, [r0]
 8027288:	460c      	mov	r4, r1
 802728a:	4a4f      	ldr	r2, [pc, #316]	; (80273c8 <gmtime_r+0x148>)
 802728c:	2300      	movs	r3, #0
 802728e:	4630      	mov	r0, r6
 8027290:	4639      	mov	r1, r7
 8027292:	f7d9 f83d 	bl	8000310 <__aeabi_ldivmod>
 8027296:	4639      	mov	r1, r7
 8027298:	4605      	mov	r5, r0
 802729a:	4a4b      	ldr	r2, [pc, #300]	; (80273c8 <gmtime_r+0x148>)
 802729c:	4630      	mov	r0, r6
 802729e:	2300      	movs	r3, #0
 80272a0:	f7d9 f836 	bl	8000310 <__aeabi_ldivmod>
 80272a4:	2a00      	cmp	r2, #0
 80272a6:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80272aa:	bfb7      	itett	lt
 80272ac:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80272b0:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 80272b4:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 80272b8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80272bc:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80272c0:	fbb2 f1f0 	udiv	r1, r2, r0
 80272c4:	fb00 2211 	mls	r2, r0, r1, r2
 80272c8:	203c      	movs	r0, #60	; 0x3c
 80272ca:	60a1      	str	r1, [r4, #8]
 80272cc:	fbb2 f1f0 	udiv	r1, r2, r0
 80272d0:	fb00 2211 	mls	r2, r0, r1, r2
 80272d4:	6061      	str	r1, [r4, #4]
 80272d6:	6022      	str	r2, [r4, #0]
 80272d8:	2107      	movs	r1, #7
 80272da:	1cda      	adds	r2, r3, #3
 80272dc:	fb92 f1f1 	sdiv	r1, r2, r1
 80272e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80272e4:	1a52      	subs	r2, r2, r1
 80272e6:	bf48      	it	mi
 80272e8:	3207      	addmi	r2, #7
 80272ea:	4d38      	ldr	r5, [pc, #224]	; (80273cc <gmtime_r+0x14c>)
 80272ec:	4838      	ldr	r0, [pc, #224]	; (80273d0 <gmtime_r+0x150>)
 80272ee:	61a2      	str	r2, [r4, #24]
 80272f0:	2b00      	cmp	r3, #0
 80272f2:	bfb7      	itett	lt
 80272f4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80272f8:	fb93 f5f5 	sdivge	r5, r3, r5
 80272fc:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8027300:	fb92 f5f5 	sdivlt	r5, r2, r5
 8027304:	fb00 3005 	mla	r0, r0, r5, r3
 8027308:	f648 62ac 	movw	r2, #36524	; 0x8eac
 802730c:	fbb0 f2f2 	udiv	r2, r0, r2
 8027310:	4402      	add	r2, r0
 8027312:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8027316:	fbb0 f1f3 	udiv	r1, r0, r3
 802731a:	1a52      	subs	r2, r2, r1
 802731c:	f240 1c6d 	movw	ip, #365	; 0x16d
 8027320:	492c      	ldr	r1, [pc, #176]	; (80273d4 <gmtime_r+0x154>)
 8027322:	fbb0 f1f1 	udiv	r1, r0, r1
 8027326:	2764      	movs	r7, #100	; 0x64
 8027328:	1a52      	subs	r2, r2, r1
 802732a:	fbb2 f1fc 	udiv	r1, r2, ip
 802732e:	fbb2 f3f3 	udiv	r3, r2, r3
 8027332:	fbb1 f6f7 	udiv	r6, r1, r7
 8027336:	1af3      	subs	r3, r6, r3
 8027338:	4403      	add	r3, r0
 802733a:	fb0c 3311 	mls	r3, ip, r1, r3
 802733e:	2299      	movs	r2, #153	; 0x99
 8027340:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8027344:	f10e 0e02 	add.w	lr, lr, #2
 8027348:	f103 0c01 	add.w	ip, r3, #1
 802734c:	fbbe f0f2 	udiv	r0, lr, r2
 8027350:	4342      	muls	r2, r0
 8027352:	3202      	adds	r2, #2
 8027354:	f04f 0805 	mov.w	r8, #5
 8027358:	fbb2 f2f8 	udiv	r2, r2, r8
 802735c:	ebac 0c02 	sub.w	ip, ip, r2
 8027360:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8027364:	4596      	cmp	lr, r2
 8027366:	bf94      	ite	ls
 8027368:	2202      	movls	r2, #2
 802736a:	f06f 0209 	mvnhi.w	r2, #9
 802736e:	4410      	add	r0, r2
 8027370:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8027374:	fb02 1505 	mla	r5, r2, r5, r1
 8027378:	2801      	cmp	r0, #1
 802737a:	bf98      	it	ls
 802737c:	3501      	addls	r5, #1
 802737e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8027382:	d30d      	bcc.n	80273a0 <gmtime_r+0x120>
 8027384:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8027388:	61e3      	str	r3, [r4, #28]
 802738a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 802738e:	2300      	movs	r3, #0
 8027390:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8027394:	f8c4 c00c 	str.w	ip, [r4, #12]
 8027398:	6223      	str	r3, [r4, #32]
 802739a:	4620      	mov	r0, r4
 802739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80273a0:	078a      	lsls	r2, r1, #30
 80273a2:	d102      	bne.n	80273aa <gmtime_r+0x12a>
 80273a4:	fb07 1616 	mls	r6, r7, r6, r1
 80273a8:	b95e      	cbnz	r6, 80273c2 <gmtime_r+0x142>
 80273aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80273ae:	fbb1 f6f2 	udiv	r6, r1, r2
 80273b2:	fb02 1216 	mls	r2, r2, r6, r1
 80273b6:	fab2 f282 	clz	r2, r2
 80273ba:	0952      	lsrs	r2, r2, #5
 80273bc:	333b      	adds	r3, #59	; 0x3b
 80273be:	4413      	add	r3, r2
 80273c0:	e7e2      	b.n	8027388 <gmtime_r+0x108>
 80273c2:	2201      	movs	r2, #1
 80273c4:	e7fa      	b.n	80273bc <gmtime_r+0x13c>
 80273c6:	bf00      	nop
 80273c8:	00015180 	.word	0x00015180
 80273cc:	00023ab1 	.word	0x00023ab1
 80273d0:	fffdc54f 	.word	0xfffdc54f
 80273d4:	00023ab0 	.word	0x00023ab0

080273d8 <labs>:
 80273d8:	2800      	cmp	r0, #0
 80273da:	bfb8      	it	lt
 80273dc:	4240      	neglt	r0, r0
 80273de:	4770      	bx	lr

080273e0 <_localeconv_r>:
 80273e0:	4800      	ldr	r0, [pc, #0]	; (80273e4 <_localeconv_r+0x4>)
 80273e2:	4770      	bx	lr
 80273e4:	20000640 	.word	0x20000640

080273e8 <_lseek_r>:
 80273e8:	b538      	push	{r3, r4, r5, lr}
 80273ea:	4d07      	ldr	r5, [pc, #28]	; (8027408 <_lseek_r+0x20>)
 80273ec:	4604      	mov	r4, r0
 80273ee:	4608      	mov	r0, r1
 80273f0:	4611      	mov	r1, r2
 80273f2:	2200      	movs	r2, #0
 80273f4:	602a      	str	r2, [r5, #0]
 80273f6:	461a      	mov	r2, r3
 80273f8:	f7df f8a6 	bl	8006548 <_lseek>
 80273fc:	1c43      	adds	r3, r0, #1
 80273fe:	d102      	bne.n	8027406 <_lseek_r+0x1e>
 8027400:	682b      	ldr	r3, [r5, #0]
 8027402:	b103      	cbz	r3, 8027406 <_lseek_r+0x1e>
 8027404:	6023      	str	r3, [r4, #0]
 8027406:	bd38      	pop	{r3, r4, r5, pc}
 8027408:	2002f84c 	.word	0x2002f84c

0802740c <__swhatbuf_r>:
 802740c:	b570      	push	{r4, r5, r6, lr}
 802740e:	460e      	mov	r6, r1
 8027410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027414:	2900      	cmp	r1, #0
 8027416:	b096      	sub	sp, #88	; 0x58
 8027418:	4614      	mov	r4, r2
 802741a:	461d      	mov	r5, r3
 802741c:	da08      	bge.n	8027430 <__swhatbuf_r+0x24>
 802741e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8027422:	2200      	movs	r2, #0
 8027424:	602a      	str	r2, [r5, #0]
 8027426:	061a      	lsls	r2, r3, #24
 8027428:	d410      	bmi.n	802744c <__swhatbuf_r+0x40>
 802742a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802742e:	e00e      	b.n	802744e <__swhatbuf_r+0x42>
 8027430:	466a      	mov	r2, sp
 8027432:	f001 fb09 	bl	8028a48 <_fstat_r>
 8027436:	2800      	cmp	r0, #0
 8027438:	dbf1      	blt.n	802741e <__swhatbuf_r+0x12>
 802743a:	9a01      	ldr	r2, [sp, #4]
 802743c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027440:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027444:	425a      	negs	r2, r3
 8027446:	415a      	adcs	r2, r3
 8027448:	602a      	str	r2, [r5, #0]
 802744a:	e7ee      	b.n	802742a <__swhatbuf_r+0x1e>
 802744c:	2340      	movs	r3, #64	; 0x40
 802744e:	2000      	movs	r0, #0
 8027450:	6023      	str	r3, [r4, #0]
 8027452:	b016      	add	sp, #88	; 0x58
 8027454:	bd70      	pop	{r4, r5, r6, pc}
	...

08027458 <__smakebuf_r>:
 8027458:	898b      	ldrh	r3, [r1, #12]
 802745a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802745c:	079d      	lsls	r5, r3, #30
 802745e:	4606      	mov	r6, r0
 8027460:	460c      	mov	r4, r1
 8027462:	d507      	bpl.n	8027474 <__smakebuf_r+0x1c>
 8027464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027468:	6023      	str	r3, [r4, #0]
 802746a:	6123      	str	r3, [r4, #16]
 802746c:	2301      	movs	r3, #1
 802746e:	6163      	str	r3, [r4, #20]
 8027470:	b002      	add	sp, #8
 8027472:	bd70      	pop	{r4, r5, r6, pc}
 8027474:	ab01      	add	r3, sp, #4
 8027476:	466a      	mov	r2, sp
 8027478:	f7ff ffc8 	bl	802740c <__swhatbuf_r>
 802747c:	9900      	ldr	r1, [sp, #0]
 802747e:	4605      	mov	r5, r0
 8027480:	4630      	mov	r0, r6
 8027482:	f7fc fe7d 	bl	8024180 <_malloc_r>
 8027486:	b948      	cbnz	r0, 802749c <__smakebuf_r+0x44>
 8027488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802748c:	059a      	lsls	r2, r3, #22
 802748e:	d4ef      	bmi.n	8027470 <__smakebuf_r+0x18>
 8027490:	f023 0303 	bic.w	r3, r3, #3
 8027494:	f043 0302 	orr.w	r3, r3, #2
 8027498:	81a3      	strh	r3, [r4, #12]
 802749a:	e7e3      	b.n	8027464 <__smakebuf_r+0xc>
 802749c:	4b0d      	ldr	r3, [pc, #52]	; (80274d4 <__smakebuf_r+0x7c>)
 802749e:	62b3      	str	r3, [r6, #40]	; 0x28
 80274a0:	89a3      	ldrh	r3, [r4, #12]
 80274a2:	6020      	str	r0, [r4, #0]
 80274a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80274a8:	81a3      	strh	r3, [r4, #12]
 80274aa:	9b00      	ldr	r3, [sp, #0]
 80274ac:	6163      	str	r3, [r4, #20]
 80274ae:	9b01      	ldr	r3, [sp, #4]
 80274b0:	6120      	str	r0, [r4, #16]
 80274b2:	b15b      	cbz	r3, 80274cc <__smakebuf_r+0x74>
 80274b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80274b8:	4630      	mov	r0, r6
 80274ba:	f001 fad7 	bl	8028a6c <_isatty_r>
 80274be:	b128      	cbz	r0, 80274cc <__smakebuf_r+0x74>
 80274c0:	89a3      	ldrh	r3, [r4, #12]
 80274c2:	f023 0303 	bic.w	r3, r3, #3
 80274c6:	f043 0301 	orr.w	r3, r3, #1
 80274ca:	81a3      	strh	r3, [r4, #12]
 80274cc:	89a0      	ldrh	r0, [r4, #12]
 80274ce:	4305      	orrs	r5, r0
 80274d0:	81a5      	strh	r5, [r4, #12]
 80274d2:	e7cd      	b.n	8027470 <__smakebuf_r+0x18>
 80274d4:	08023709 	.word	0x08023709

080274d8 <__malloc_lock>:
 80274d8:	4801      	ldr	r0, [pc, #4]	; (80274e0 <__malloc_lock+0x8>)
 80274da:	f7fc bb1f 	b.w	8023b1c <__retarget_lock_acquire_recursive>
 80274de:	bf00      	nop
 80274e0:	2002f83d 	.word	0x2002f83d

080274e4 <__malloc_unlock>:
 80274e4:	4801      	ldr	r0, [pc, #4]	; (80274ec <__malloc_unlock+0x8>)
 80274e6:	f7fc bb1b 	b.w	8023b20 <__retarget_lock_release_recursive>
 80274ea:	bf00      	nop
 80274ec:	2002f83d 	.word	0x2002f83d

080274f0 <_Balloc>:
 80274f0:	b570      	push	{r4, r5, r6, lr}
 80274f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80274f4:	4604      	mov	r4, r0
 80274f6:	460d      	mov	r5, r1
 80274f8:	b976      	cbnz	r6, 8027518 <_Balloc+0x28>
 80274fa:	2010      	movs	r0, #16
 80274fc:	f7fc fb12 	bl	8023b24 <malloc>
 8027500:	4602      	mov	r2, r0
 8027502:	6260      	str	r0, [r4, #36]	; 0x24
 8027504:	b920      	cbnz	r0, 8027510 <_Balloc+0x20>
 8027506:	4b18      	ldr	r3, [pc, #96]	; (8027568 <_Balloc+0x78>)
 8027508:	4818      	ldr	r0, [pc, #96]	; (802756c <_Balloc+0x7c>)
 802750a:	2166      	movs	r1, #102	; 0x66
 802750c:	f7fe ff58 	bl	80263c0 <__assert_func>
 8027510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027514:	6006      	str	r6, [r0, #0]
 8027516:	60c6      	str	r6, [r0, #12]
 8027518:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802751a:	68f3      	ldr	r3, [r6, #12]
 802751c:	b183      	cbz	r3, 8027540 <_Balloc+0x50>
 802751e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027520:	68db      	ldr	r3, [r3, #12]
 8027522:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8027526:	b9b8      	cbnz	r0, 8027558 <_Balloc+0x68>
 8027528:	2101      	movs	r1, #1
 802752a:	fa01 f605 	lsl.w	r6, r1, r5
 802752e:	1d72      	adds	r2, r6, #5
 8027530:	0092      	lsls	r2, r2, #2
 8027532:	4620      	mov	r0, r4
 8027534:	f000 fb60 	bl	8027bf8 <_calloc_r>
 8027538:	b160      	cbz	r0, 8027554 <_Balloc+0x64>
 802753a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802753e:	e00e      	b.n	802755e <_Balloc+0x6e>
 8027540:	2221      	movs	r2, #33	; 0x21
 8027542:	2104      	movs	r1, #4
 8027544:	4620      	mov	r0, r4
 8027546:	f000 fb57 	bl	8027bf8 <_calloc_r>
 802754a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802754c:	60f0      	str	r0, [r6, #12]
 802754e:	68db      	ldr	r3, [r3, #12]
 8027550:	2b00      	cmp	r3, #0
 8027552:	d1e4      	bne.n	802751e <_Balloc+0x2e>
 8027554:	2000      	movs	r0, #0
 8027556:	bd70      	pop	{r4, r5, r6, pc}
 8027558:	6802      	ldr	r2, [r0, #0]
 802755a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802755e:	2300      	movs	r3, #0
 8027560:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027564:	e7f7      	b.n	8027556 <_Balloc+0x66>
 8027566:	bf00      	nop
 8027568:	0804507c 	.word	0x0804507c
 802756c:	08045666 	.word	0x08045666

08027570 <_Bfree>:
 8027570:	b570      	push	{r4, r5, r6, lr}
 8027572:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027574:	4605      	mov	r5, r0
 8027576:	460c      	mov	r4, r1
 8027578:	b976      	cbnz	r6, 8027598 <_Bfree+0x28>
 802757a:	2010      	movs	r0, #16
 802757c:	f7fc fad2 	bl	8023b24 <malloc>
 8027580:	4602      	mov	r2, r0
 8027582:	6268      	str	r0, [r5, #36]	; 0x24
 8027584:	b920      	cbnz	r0, 8027590 <_Bfree+0x20>
 8027586:	4b09      	ldr	r3, [pc, #36]	; (80275ac <_Bfree+0x3c>)
 8027588:	4809      	ldr	r0, [pc, #36]	; (80275b0 <_Bfree+0x40>)
 802758a:	218a      	movs	r1, #138	; 0x8a
 802758c:	f7fe ff18 	bl	80263c0 <__assert_func>
 8027590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027594:	6006      	str	r6, [r0, #0]
 8027596:	60c6      	str	r6, [r0, #12]
 8027598:	b13c      	cbz	r4, 80275aa <_Bfree+0x3a>
 802759a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802759c:	6862      	ldr	r2, [r4, #4]
 802759e:	68db      	ldr	r3, [r3, #12]
 80275a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80275a4:	6021      	str	r1, [r4, #0]
 80275a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80275aa:	bd70      	pop	{r4, r5, r6, pc}
 80275ac:	0804507c 	.word	0x0804507c
 80275b0:	08045666 	.word	0x08045666

080275b4 <__multadd>:
 80275b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80275b8:	690d      	ldr	r5, [r1, #16]
 80275ba:	4607      	mov	r7, r0
 80275bc:	460c      	mov	r4, r1
 80275be:	461e      	mov	r6, r3
 80275c0:	f101 0c14 	add.w	ip, r1, #20
 80275c4:	2000      	movs	r0, #0
 80275c6:	f8dc 3000 	ldr.w	r3, [ip]
 80275ca:	b299      	uxth	r1, r3
 80275cc:	fb02 6101 	mla	r1, r2, r1, r6
 80275d0:	0c1e      	lsrs	r6, r3, #16
 80275d2:	0c0b      	lsrs	r3, r1, #16
 80275d4:	fb02 3306 	mla	r3, r2, r6, r3
 80275d8:	b289      	uxth	r1, r1
 80275da:	3001      	adds	r0, #1
 80275dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80275e0:	4285      	cmp	r5, r0
 80275e2:	f84c 1b04 	str.w	r1, [ip], #4
 80275e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80275ea:	dcec      	bgt.n	80275c6 <__multadd+0x12>
 80275ec:	b30e      	cbz	r6, 8027632 <__multadd+0x7e>
 80275ee:	68a3      	ldr	r3, [r4, #8]
 80275f0:	42ab      	cmp	r3, r5
 80275f2:	dc19      	bgt.n	8027628 <__multadd+0x74>
 80275f4:	6861      	ldr	r1, [r4, #4]
 80275f6:	4638      	mov	r0, r7
 80275f8:	3101      	adds	r1, #1
 80275fa:	f7ff ff79 	bl	80274f0 <_Balloc>
 80275fe:	4680      	mov	r8, r0
 8027600:	b928      	cbnz	r0, 802760e <__multadd+0x5a>
 8027602:	4602      	mov	r2, r0
 8027604:	4b0c      	ldr	r3, [pc, #48]	; (8027638 <__multadd+0x84>)
 8027606:	480d      	ldr	r0, [pc, #52]	; (802763c <__multadd+0x88>)
 8027608:	21b5      	movs	r1, #181	; 0xb5
 802760a:	f7fe fed9 	bl	80263c0 <__assert_func>
 802760e:	6922      	ldr	r2, [r4, #16]
 8027610:	3202      	adds	r2, #2
 8027612:	f104 010c 	add.w	r1, r4, #12
 8027616:	0092      	lsls	r2, r2, #2
 8027618:	300c      	adds	r0, #12
 802761a:	f7fc faa3 	bl	8023b64 <memcpy>
 802761e:	4621      	mov	r1, r4
 8027620:	4638      	mov	r0, r7
 8027622:	f7ff ffa5 	bl	8027570 <_Bfree>
 8027626:	4644      	mov	r4, r8
 8027628:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802762c:	3501      	adds	r5, #1
 802762e:	615e      	str	r6, [r3, #20]
 8027630:	6125      	str	r5, [r4, #16]
 8027632:	4620      	mov	r0, r4
 8027634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027638:	08045655 	.word	0x08045655
 802763c:	08045666 	.word	0x08045666

08027640 <__hi0bits>:
 8027640:	0c03      	lsrs	r3, r0, #16
 8027642:	041b      	lsls	r3, r3, #16
 8027644:	b9d3      	cbnz	r3, 802767c <__hi0bits+0x3c>
 8027646:	0400      	lsls	r0, r0, #16
 8027648:	2310      	movs	r3, #16
 802764a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802764e:	bf04      	itt	eq
 8027650:	0200      	lsleq	r0, r0, #8
 8027652:	3308      	addeq	r3, #8
 8027654:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8027658:	bf04      	itt	eq
 802765a:	0100      	lsleq	r0, r0, #4
 802765c:	3304      	addeq	r3, #4
 802765e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8027662:	bf04      	itt	eq
 8027664:	0080      	lsleq	r0, r0, #2
 8027666:	3302      	addeq	r3, #2
 8027668:	2800      	cmp	r0, #0
 802766a:	db05      	blt.n	8027678 <__hi0bits+0x38>
 802766c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8027670:	f103 0301 	add.w	r3, r3, #1
 8027674:	bf08      	it	eq
 8027676:	2320      	moveq	r3, #32
 8027678:	4618      	mov	r0, r3
 802767a:	4770      	bx	lr
 802767c:	2300      	movs	r3, #0
 802767e:	e7e4      	b.n	802764a <__hi0bits+0xa>

08027680 <__lo0bits>:
 8027680:	6803      	ldr	r3, [r0, #0]
 8027682:	f013 0207 	ands.w	r2, r3, #7
 8027686:	4601      	mov	r1, r0
 8027688:	d00b      	beq.n	80276a2 <__lo0bits+0x22>
 802768a:	07da      	lsls	r2, r3, #31
 802768c:	d423      	bmi.n	80276d6 <__lo0bits+0x56>
 802768e:	0798      	lsls	r0, r3, #30
 8027690:	bf49      	itett	mi
 8027692:	085b      	lsrmi	r3, r3, #1
 8027694:	089b      	lsrpl	r3, r3, #2
 8027696:	2001      	movmi	r0, #1
 8027698:	600b      	strmi	r3, [r1, #0]
 802769a:	bf5c      	itt	pl
 802769c:	600b      	strpl	r3, [r1, #0]
 802769e:	2002      	movpl	r0, #2
 80276a0:	4770      	bx	lr
 80276a2:	b298      	uxth	r0, r3
 80276a4:	b9a8      	cbnz	r0, 80276d2 <__lo0bits+0x52>
 80276a6:	0c1b      	lsrs	r3, r3, #16
 80276a8:	2010      	movs	r0, #16
 80276aa:	b2da      	uxtb	r2, r3
 80276ac:	b90a      	cbnz	r2, 80276b2 <__lo0bits+0x32>
 80276ae:	3008      	adds	r0, #8
 80276b0:	0a1b      	lsrs	r3, r3, #8
 80276b2:	071a      	lsls	r2, r3, #28
 80276b4:	bf04      	itt	eq
 80276b6:	091b      	lsreq	r3, r3, #4
 80276b8:	3004      	addeq	r0, #4
 80276ba:	079a      	lsls	r2, r3, #30
 80276bc:	bf04      	itt	eq
 80276be:	089b      	lsreq	r3, r3, #2
 80276c0:	3002      	addeq	r0, #2
 80276c2:	07da      	lsls	r2, r3, #31
 80276c4:	d403      	bmi.n	80276ce <__lo0bits+0x4e>
 80276c6:	085b      	lsrs	r3, r3, #1
 80276c8:	f100 0001 	add.w	r0, r0, #1
 80276cc:	d005      	beq.n	80276da <__lo0bits+0x5a>
 80276ce:	600b      	str	r3, [r1, #0]
 80276d0:	4770      	bx	lr
 80276d2:	4610      	mov	r0, r2
 80276d4:	e7e9      	b.n	80276aa <__lo0bits+0x2a>
 80276d6:	2000      	movs	r0, #0
 80276d8:	4770      	bx	lr
 80276da:	2020      	movs	r0, #32
 80276dc:	4770      	bx	lr
	...

080276e0 <__i2b>:
 80276e0:	b510      	push	{r4, lr}
 80276e2:	460c      	mov	r4, r1
 80276e4:	2101      	movs	r1, #1
 80276e6:	f7ff ff03 	bl	80274f0 <_Balloc>
 80276ea:	4602      	mov	r2, r0
 80276ec:	b928      	cbnz	r0, 80276fa <__i2b+0x1a>
 80276ee:	4b05      	ldr	r3, [pc, #20]	; (8027704 <__i2b+0x24>)
 80276f0:	4805      	ldr	r0, [pc, #20]	; (8027708 <__i2b+0x28>)
 80276f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80276f6:	f7fe fe63 	bl	80263c0 <__assert_func>
 80276fa:	2301      	movs	r3, #1
 80276fc:	6144      	str	r4, [r0, #20]
 80276fe:	6103      	str	r3, [r0, #16]
 8027700:	bd10      	pop	{r4, pc}
 8027702:	bf00      	nop
 8027704:	08045655 	.word	0x08045655
 8027708:	08045666 	.word	0x08045666

0802770c <__multiply>:
 802770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027710:	4691      	mov	r9, r2
 8027712:	690a      	ldr	r2, [r1, #16]
 8027714:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8027718:	429a      	cmp	r2, r3
 802771a:	bfb8      	it	lt
 802771c:	460b      	movlt	r3, r1
 802771e:	460c      	mov	r4, r1
 8027720:	bfbc      	itt	lt
 8027722:	464c      	movlt	r4, r9
 8027724:	4699      	movlt	r9, r3
 8027726:	6927      	ldr	r7, [r4, #16]
 8027728:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802772c:	68a3      	ldr	r3, [r4, #8]
 802772e:	6861      	ldr	r1, [r4, #4]
 8027730:	eb07 060a 	add.w	r6, r7, sl
 8027734:	42b3      	cmp	r3, r6
 8027736:	b085      	sub	sp, #20
 8027738:	bfb8      	it	lt
 802773a:	3101      	addlt	r1, #1
 802773c:	f7ff fed8 	bl	80274f0 <_Balloc>
 8027740:	b930      	cbnz	r0, 8027750 <__multiply+0x44>
 8027742:	4602      	mov	r2, r0
 8027744:	4b44      	ldr	r3, [pc, #272]	; (8027858 <__multiply+0x14c>)
 8027746:	4845      	ldr	r0, [pc, #276]	; (802785c <__multiply+0x150>)
 8027748:	f240 115d 	movw	r1, #349	; 0x15d
 802774c:	f7fe fe38 	bl	80263c0 <__assert_func>
 8027750:	f100 0514 	add.w	r5, r0, #20
 8027754:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027758:	462b      	mov	r3, r5
 802775a:	2200      	movs	r2, #0
 802775c:	4543      	cmp	r3, r8
 802775e:	d321      	bcc.n	80277a4 <__multiply+0x98>
 8027760:	f104 0314 	add.w	r3, r4, #20
 8027764:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027768:	f109 0314 	add.w	r3, r9, #20
 802776c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8027770:	9202      	str	r2, [sp, #8]
 8027772:	1b3a      	subs	r2, r7, r4
 8027774:	3a15      	subs	r2, #21
 8027776:	f022 0203 	bic.w	r2, r2, #3
 802777a:	3204      	adds	r2, #4
 802777c:	f104 0115 	add.w	r1, r4, #21
 8027780:	428f      	cmp	r7, r1
 8027782:	bf38      	it	cc
 8027784:	2204      	movcc	r2, #4
 8027786:	9201      	str	r2, [sp, #4]
 8027788:	9a02      	ldr	r2, [sp, #8]
 802778a:	9303      	str	r3, [sp, #12]
 802778c:	429a      	cmp	r2, r3
 802778e:	d80c      	bhi.n	80277aa <__multiply+0x9e>
 8027790:	2e00      	cmp	r6, #0
 8027792:	dd03      	ble.n	802779c <__multiply+0x90>
 8027794:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027798:	2b00      	cmp	r3, #0
 802779a:	d05a      	beq.n	8027852 <__multiply+0x146>
 802779c:	6106      	str	r6, [r0, #16]
 802779e:	b005      	add	sp, #20
 80277a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80277a4:	f843 2b04 	str.w	r2, [r3], #4
 80277a8:	e7d8      	b.n	802775c <__multiply+0x50>
 80277aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80277ae:	f1ba 0f00 	cmp.w	sl, #0
 80277b2:	d024      	beq.n	80277fe <__multiply+0xf2>
 80277b4:	f104 0e14 	add.w	lr, r4, #20
 80277b8:	46a9      	mov	r9, r5
 80277ba:	f04f 0c00 	mov.w	ip, #0
 80277be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80277c2:	f8d9 1000 	ldr.w	r1, [r9]
 80277c6:	fa1f fb82 	uxth.w	fp, r2
 80277ca:	b289      	uxth	r1, r1
 80277cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80277d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80277d4:	f8d9 2000 	ldr.w	r2, [r9]
 80277d8:	4461      	add	r1, ip
 80277da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80277de:	fb0a c20b 	mla	r2, sl, fp, ip
 80277e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80277e6:	b289      	uxth	r1, r1
 80277e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80277ec:	4577      	cmp	r7, lr
 80277ee:	f849 1b04 	str.w	r1, [r9], #4
 80277f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80277f6:	d8e2      	bhi.n	80277be <__multiply+0xb2>
 80277f8:	9a01      	ldr	r2, [sp, #4]
 80277fa:	f845 c002 	str.w	ip, [r5, r2]
 80277fe:	9a03      	ldr	r2, [sp, #12]
 8027800:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8027804:	3304      	adds	r3, #4
 8027806:	f1b9 0f00 	cmp.w	r9, #0
 802780a:	d020      	beq.n	802784e <__multiply+0x142>
 802780c:	6829      	ldr	r1, [r5, #0]
 802780e:	f104 0c14 	add.w	ip, r4, #20
 8027812:	46ae      	mov	lr, r5
 8027814:	f04f 0a00 	mov.w	sl, #0
 8027818:	f8bc b000 	ldrh.w	fp, [ip]
 802781c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027820:	fb09 220b 	mla	r2, r9, fp, r2
 8027824:	4492      	add	sl, r2
 8027826:	b289      	uxth	r1, r1
 8027828:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802782c:	f84e 1b04 	str.w	r1, [lr], #4
 8027830:	f85c 2b04 	ldr.w	r2, [ip], #4
 8027834:	f8be 1000 	ldrh.w	r1, [lr]
 8027838:	0c12      	lsrs	r2, r2, #16
 802783a:	fb09 1102 	mla	r1, r9, r2, r1
 802783e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8027842:	4567      	cmp	r7, ip
 8027844:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027848:	d8e6      	bhi.n	8027818 <__multiply+0x10c>
 802784a:	9a01      	ldr	r2, [sp, #4]
 802784c:	50a9      	str	r1, [r5, r2]
 802784e:	3504      	adds	r5, #4
 8027850:	e79a      	b.n	8027788 <__multiply+0x7c>
 8027852:	3e01      	subs	r6, #1
 8027854:	e79c      	b.n	8027790 <__multiply+0x84>
 8027856:	bf00      	nop
 8027858:	08045655 	.word	0x08045655
 802785c:	08045666 	.word	0x08045666

08027860 <__pow5mult>:
 8027860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027864:	4615      	mov	r5, r2
 8027866:	f012 0203 	ands.w	r2, r2, #3
 802786a:	4606      	mov	r6, r0
 802786c:	460f      	mov	r7, r1
 802786e:	d007      	beq.n	8027880 <__pow5mult+0x20>
 8027870:	4c25      	ldr	r4, [pc, #148]	; (8027908 <__pow5mult+0xa8>)
 8027872:	3a01      	subs	r2, #1
 8027874:	2300      	movs	r3, #0
 8027876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802787a:	f7ff fe9b 	bl	80275b4 <__multadd>
 802787e:	4607      	mov	r7, r0
 8027880:	10ad      	asrs	r5, r5, #2
 8027882:	d03d      	beq.n	8027900 <__pow5mult+0xa0>
 8027884:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8027886:	b97c      	cbnz	r4, 80278a8 <__pow5mult+0x48>
 8027888:	2010      	movs	r0, #16
 802788a:	f7fc f94b 	bl	8023b24 <malloc>
 802788e:	4602      	mov	r2, r0
 8027890:	6270      	str	r0, [r6, #36]	; 0x24
 8027892:	b928      	cbnz	r0, 80278a0 <__pow5mult+0x40>
 8027894:	4b1d      	ldr	r3, [pc, #116]	; (802790c <__pow5mult+0xac>)
 8027896:	481e      	ldr	r0, [pc, #120]	; (8027910 <__pow5mult+0xb0>)
 8027898:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802789c:	f7fe fd90 	bl	80263c0 <__assert_func>
 80278a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80278a4:	6004      	str	r4, [r0, #0]
 80278a6:	60c4      	str	r4, [r0, #12]
 80278a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80278ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80278b0:	b94c      	cbnz	r4, 80278c6 <__pow5mult+0x66>
 80278b2:	f240 2171 	movw	r1, #625	; 0x271
 80278b6:	4630      	mov	r0, r6
 80278b8:	f7ff ff12 	bl	80276e0 <__i2b>
 80278bc:	2300      	movs	r3, #0
 80278be:	f8c8 0008 	str.w	r0, [r8, #8]
 80278c2:	4604      	mov	r4, r0
 80278c4:	6003      	str	r3, [r0, #0]
 80278c6:	f04f 0900 	mov.w	r9, #0
 80278ca:	07eb      	lsls	r3, r5, #31
 80278cc:	d50a      	bpl.n	80278e4 <__pow5mult+0x84>
 80278ce:	4639      	mov	r1, r7
 80278d0:	4622      	mov	r2, r4
 80278d2:	4630      	mov	r0, r6
 80278d4:	f7ff ff1a 	bl	802770c <__multiply>
 80278d8:	4639      	mov	r1, r7
 80278da:	4680      	mov	r8, r0
 80278dc:	4630      	mov	r0, r6
 80278de:	f7ff fe47 	bl	8027570 <_Bfree>
 80278e2:	4647      	mov	r7, r8
 80278e4:	106d      	asrs	r5, r5, #1
 80278e6:	d00b      	beq.n	8027900 <__pow5mult+0xa0>
 80278e8:	6820      	ldr	r0, [r4, #0]
 80278ea:	b938      	cbnz	r0, 80278fc <__pow5mult+0x9c>
 80278ec:	4622      	mov	r2, r4
 80278ee:	4621      	mov	r1, r4
 80278f0:	4630      	mov	r0, r6
 80278f2:	f7ff ff0b 	bl	802770c <__multiply>
 80278f6:	6020      	str	r0, [r4, #0]
 80278f8:	f8c0 9000 	str.w	r9, [r0]
 80278fc:	4604      	mov	r4, r0
 80278fe:	e7e4      	b.n	80278ca <__pow5mult+0x6a>
 8027900:	4638      	mov	r0, r7
 8027902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027906:	bf00      	nop
 8027908:	080457b8 	.word	0x080457b8
 802790c:	0804507c 	.word	0x0804507c
 8027910:	08045666 	.word	0x08045666

08027914 <__lshift>:
 8027914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027918:	460c      	mov	r4, r1
 802791a:	6849      	ldr	r1, [r1, #4]
 802791c:	6923      	ldr	r3, [r4, #16]
 802791e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8027922:	68a3      	ldr	r3, [r4, #8]
 8027924:	4607      	mov	r7, r0
 8027926:	4691      	mov	r9, r2
 8027928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802792c:	f108 0601 	add.w	r6, r8, #1
 8027930:	42b3      	cmp	r3, r6
 8027932:	db0b      	blt.n	802794c <__lshift+0x38>
 8027934:	4638      	mov	r0, r7
 8027936:	f7ff fddb 	bl	80274f0 <_Balloc>
 802793a:	4605      	mov	r5, r0
 802793c:	b948      	cbnz	r0, 8027952 <__lshift+0x3e>
 802793e:	4602      	mov	r2, r0
 8027940:	4b2a      	ldr	r3, [pc, #168]	; (80279ec <__lshift+0xd8>)
 8027942:	482b      	ldr	r0, [pc, #172]	; (80279f0 <__lshift+0xdc>)
 8027944:	f240 11d9 	movw	r1, #473	; 0x1d9
 8027948:	f7fe fd3a 	bl	80263c0 <__assert_func>
 802794c:	3101      	adds	r1, #1
 802794e:	005b      	lsls	r3, r3, #1
 8027950:	e7ee      	b.n	8027930 <__lshift+0x1c>
 8027952:	2300      	movs	r3, #0
 8027954:	f100 0114 	add.w	r1, r0, #20
 8027958:	f100 0210 	add.w	r2, r0, #16
 802795c:	4618      	mov	r0, r3
 802795e:	4553      	cmp	r3, sl
 8027960:	db37      	blt.n	80279d2 <__lshift+0xbe>
 8027962:	6920      	ldr	r0, [r4, #16]
 8027964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027968:	f104 0314 	add.w	r3, r4, #20
 802796c:	f019 091f 	ands.w	r9, r9, #31
 8027970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027974:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8027978:	d02f      	beq.n	80279da <__lshift+0xc6>
 802797a:	f1c9 0e20 	rsb	lr, r9, #32
 802797e:	468a      	mov	sl, r1
 8027980:	f04f 0c00 	mov.w	ip, #0
 8027984:	681a      	ldr	r2, [r3, #0]
 8027986:	fa02 f209 	lsl.w	r2, r2, r9
 802798a:	ea42 020c 	orr.w	r2, r2, ip
 802798e:	f84a 2b04 	str.w	r2, [sl], #4
 8027992:	f853 2b04 	ldr.w	r2, [r3], #4
 8027996:	4298      	cmp	r0, r3
 8027998:	fa22 fc0e 	lsr.w	ip, r2, lr
 802799c:	d8f2      	bhi.n	8027984 <__lshift+0x70>
 802799e:	1b03      	subs	r3, r0, r4
 80279a0:	3b15      	subs	r3, #21
 80279a2:	f023 0303 	bic.w	r3, r3, #3
 80279a6:	3304      	adds	r3, #4
 80279a8:	f104 0215 	add.w	r2, r4, #21
 80279ac:	4290      	cmp	r0, r2
 80279ae:	bf38      	it	cc
 80279b0:	2304      	movcc	r3, #4
 80279b2:	f841 c003 	str.w	ip, [r1, r3]
 80279b6:	f1bc 0f00 	cmp.w	ip, #0
 80279ba:	d001      	beq.n	80279c0 <__lshift+0xac>
 80279bc:	f108 0602 	add.w	r6, r8, #2
 80279c0:	3e01      	subs	r6, #1
 80279c2:	4638      	mov	r0, r7
 80279c4:	612e      	str	r6, [r5, #16]
 80279c6:	4621      	mov	r1, r4
 80279c8:	f7ff fdd2 	bl	8027570 <_Bfree>
 80279cc:	4628      	mov	r0, r5
 80279ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80279d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80279d6:	3301      	adds	r3, #1
 80279d8:	e7c1      	b.n	802795e <__lshift+0x4a>
 80279da:	3904      	subs	r1, #4
 80279dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80279e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80279e4:	4298      	cmp	r0, r3
 80279e6:	d8f9      	bhi.n	80279dc <__lshift+0xc8>
 80279e8:	e7ea      	b.n	80279c0 <__lshift+0xac>
 80279ea:	bf00      	nop
 80279ec:	08045655 	.word	0x08045655
 80279f0:	08045666 	.word	0x08045666

080279f4 <__mcmp>:
 80279f4:	b530      	push	{r4, r5, lr}
 80279f6:	6902      	ldr	r2, [r0, #16]
 80279f8:	690c      	ldr	r4, [r1, #16]
 80279fa:	1b12      	subs	r2, r2, r4
 80279fc:	d10e      	bne.n	8027a1c <__mcmp+0x28>
 80279fe:	f100 0314 	add.w	r3, r0, #20
 8027a02:	3114      	adds	r1, #20
 8027a04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8027a08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027a0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8027a10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027a14:	42a5      	cmp	r5, r4
 8027a16:	d003      	beq.n	8027a20 <__mcmp+0x2c>
 8027a18:	d305      	bcc.n	8027a26 <__mcmp+0x32>
 8027a1a:	2201      	movs	r2, #1
 8027a1c:	4610      	mov	r0, r2
 8027a1e:	bd30      	pop	{r4, r5, pc}
 8027a20:	4283      	cmp	r3, r0
 8027a22:	d3f3      	bcc.n	8027a0c <__mcmp+0x18>
 8027a24:	e7fa      	b.n	8027a1c <__mcmp+0x28>
 8027a26:	f04f 32ff 	mov.w	r2, #4294967295
 8027a2a:	e7f7      	b.n	8027a1c <__mcmp+0x28>

08027a2c <__mdiff>:
 8027a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a30:	460c      	mov	r4, r1
 8027a32:	4606      	mov	r6, r0
 8027a34:	4611      	mov	r1, r2
 8027a36:	4620      	mov	r0, r4
 8027a38:	4690      	mov	r8, r2
 8027a3a:	f7ff ffdb 	bl	80279f4 <__mcmp>
 8027a3e:	1e05      	subs	r5, r0, #0
 8027a40:	d110      	bne.n	8027a64 <__mdiff+0x38>
 8027a42:	4629      	mov	r1, r5
 8027a44:	4630      	mov	r0, r6
 8027a46:	f7ff fd53 	bl	80274f0 <_Balloc>
 8027a4a:	b930      	cbnz	r0, 8027a5a <__mdiff+0x2e>
 8027a4c:	4b3a      	ldr	r3, [pc, #232]	; (8027b38 <__mdiff+0x10c>)
 8027a4e:	4602      	mov	r2, r0
 8027a50:	f240 2132 	movw	r1, #562	; 0x232
 8027a54:	4839      	ldr	r0, [pc, #228]	; (8027b3c <__mdiff+0x110>)
 8027a56:	f7fe fcb3 	bl	80263c0 <__assert_func>
 8027a5a:	2301      	movs	r3, #1
 8027a5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027a60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a64:	bfa4      	itt	ge
 8027a66:	4643      	movge	r3, r8
 8027a68:	46a0      	movge	r8, r4
 8027a6a:	4630      	mov	r0, r6
 8027a6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8027a70:	bfa6      	itte	ge
 8027a72:	461c      	movge	r4, r3
 8027a74:	2500      	movge	r5, #0
 8027a76:	2501      	movlt	r5, #1
 8027a78:	f7ff fd3a 	bl	80274f0 <_Balloc>
 8027a7c:	b920      	cbnz	r0, 8027a88 <__mdiff+0x5c>
 8027a7e:	4b2e      	ldr	r3, [pc, #184]	; (8027b38 <__mdiff+0x10c>)
 8027a80:	4602      	mov	r2, r0
 8027a82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8027a86:	e7e5      	b.n	8027a54 <__mdiff+0x28>
 8027a88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027a8c:	6926      	ldr	r6, [r4, #16]
 8027a8e:	60c5      	str	r5, [r0, #12]
 8027a90:	f104 0914 	add.w	r9, r4, #20
 8027a94:	f108 0514 	add.w	r5, r8, #20
 8027a98:	f100 0e14 	add.w	lr, r0, #20
 8027a9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8027aa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8027aa4:	f108 0210 	add.w	r2, r8, #16
 8027aa8:	46f2      	mov	sl, lr
 8027aaa:	2100      	movs	r1, #0
 8027aac:	f859 3b04 	ldr.w	r3, [r9], #4
 8027ab0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8027ab4:	fa1f f883 	uxth.w	r8, r3
 8027ab8:	fa11 f18b 	uxtah	r1, r1, fp
 8027abc:	0c1b      	lsrs	r3, r3, #16
 8027abe:	eba1 0808 	sub.w	r8, r1, r8
 8027ac2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8027ac6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8027aca:	fa1f f888 	uxth.w	r8, r8
 8027ace:	1419      	asrs	r1, r3, #16
 8027ad0:	454e      	cmp	r6, r9
 8027ad2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8027ad6:	f84a 3b04 	str.w	r3, [sl], #4
 8027ada:	d8e7      	bhi.n	8027aac <__mdiff+0x80>
 8027adc:	1b33      	subs	r3, r6, r4
 8027ade:	3b15      	subs	r3, #21
 8027ae0:	f023 0303 	bic.w	r3, r3, #3
 8027ae4:	3304      	adds	r3, #4
 8027ae6:	3415      	adds	r4, #21
 8027ae8:	42a6      	cmp	r6, r4
 8027aea:	bf38      	it	cc
 8027aec:	2304      	movcc	r3, #4
 8027aee:	441d      	add	r5, r3
 8027af0:	4473      	add	r3, lr
 8027af2:	469e      	mov	lr, r3
 8027af4:	462e      	mov	r6, r5
 8027af6:	4566      	cmp	r6, ip
 8027af8:	d30e      	bcc.n	8027b18 <__mdiff+0xec>
 8027afa:	f10c 0203 	add.w	r2, ip, #3
 8027afe:	1b52      	subs	r2, r2, r5
 8027b00:	f022 0203 	bic.w	r2, r2, #3
 8027b04:	3d03      	subs	r5, #3
 8027b06:	45ac      	cmp	ip, r5
 8027b08:	bf38      	it	cc
 8027b0a:	2200      	movcc	r2, #0
 8027b0c:	441a      	add	r2, r3
 8027b0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8027b12:	b17b      	cbz	r3, 8027b34 <__mdiff+0x108>
 8027b14:	6107      	str	r7, [r0, #16]
 8027b16:	e7a3      	b.n	8027a60 <__mdiff+0x34>
 8027b18:	f856 8b04 	ldr.w	r8, [r6], #4
 8027b1c:	fa11 f288 	uxtah	r2, r1, r8
 8027b20:	1414      	asrs	r4, r2, #16
 8027b22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027b26:	b292      	uxth	r2, r2
 8027b28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027b2c:	f84e 2b04 	str.w	r2, [lr], #4
 8027b30:	1421      	asrs	r1, r4, #16
 8027b32:	e7e0      	b.n	8027af6 <__mdiff+0xca>
 8027b34:	3f01      	subs	r7, #1
 8027b36:	e7ea      	b.n	8027b0e <__mdiff+0xe2>
 8027b38:	08045655 	.word	0x08045655
 8027b3c:	08045666 	.word	0x08045666

08027b40 <__d2b>:
 8027b40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027b44:	4689      	mov	r9, r1
 8027b46:	2101      	movs	r1, #1
 8027b48:	ec57 6b10 	vmov	r6, r7, d0
 8027b4c:	4690      	mov	r8, r2
 8027b4e:	f7ff fccf 	bl	80274f0 <_Balloc>
 8027b52:	4604      	mov	r4, r0
 8027b54:	b930      	cbnz	r0, 8027b64 <__d2b+0x24>
 8027b56:	4602      	mov	r2, r0
 8027b58:	4b25      	ldr	r3, [pc, #148]	; (8027bf0 <__d2b+0xb0>)
 8027b5a:	4826      	ldr	r0, [pc, #152]	; (8027bf4 <__d2b+0xb4>)
 8027b5c:	f240 310a 	movw	r1, #778	; 0x30a
 8027b60:	f7fe fc2e 	bl	80263c0 <__assert_func>
 8027b64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8027b68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027b6c:	bb35      	cbnz	r5, 8027bbc <__d2b+0x7c>
 8027b6e:	2e00      	cmp	r6, #0
 8027b70:	9301      	str	r3, [sp, #4]
 8027b72:	d028      	beq.n	8027bc6 <__d2b+0x86>
 8027b74:	4668      	mov	r0, sp
 8027b76:	9600      	str	r6, [sp, #0]
 8027b78:	f7ff fd82 	bl	8027680 <__lo0bits>
 8027b7c:	9900      	ldr	r1, [sp, #0]
 8027b7e:	b300      	cbz	r0, 8027bc2 <__d2b+0x82>
 8027b80:	9a01      	ldr	r2, [sp, #4]
 8027b82:	f1c0 0320 	rsb	r3, r0, #32
 8027b86:	fa02 f303 	lsl.w	r3, r2, r3
 8027b8a:	430b      	orrs	r3, r1
 8027b8c:	40c2      	lsrs	r2, r0
 8027b8e:	6163      	str	r3, [r4, #20]
 8027b90:	9201      	str	r2, [sp, #4]
 8027b92:	9b01      	ldr	r3, [sp, #4]
 8027b94:	61a3      	str	r3, [r4, #24]
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	bf14      	ite	ne
 8027b9a:	2202      	movne	r2, #2
 8027b9c:	2201      	moveq	r2, #1
 8027b9e:	6122      	str	r2, [r4, #16]
 8027ba0:	b1d5      	cbz	r5, 8027bd8 <__d2b+0x98>
 8027ba2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8027ba6:	4405      	add	r5, r0
 8027ba8:	f8c9 5000 	str.w	r5, [r9]
 8027bac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027bb0:	f8c8 0000 	str.w	r0, [r8]
 8027bb4:	4620      	mov	r0, r4
 8027bb6:	b003      	add	sp, #12
 8027bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027bc0:	e7d5      	b.n	8027b6e <__d2b+0x2e>
 8027bc2:	6161      	str	r1, [r4, #20]
 8027bc4:	e7e5      	b.n	8027b92 <__d2b+0x52>
 8027bc6:	a801      	add	r0, sp, #4
 8027bc8:	f7ff fd5a 	bl	8027680 <__lo0bits>
 8027bcc:	9b01      	ldr	r3, [sp, #4]
 8027bce:	6163      	str	r3, [r4, #20]
 8027bd0:	2201      	movs	r2, #1
 8027bd2:	6122      	str	r2, [r4, #16]
 8027bd4:	3020      	adds	r0, #32
 8027bd6:	e7e3      	b.n	8027ba0 <__d2b+0x60>
 8027bd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8027bdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8027be0:	f8c9 0000 	str.w	r0, [r9]
 8027be4:	6918      	ldr	r0, [r3, #16]
 8027be6:	f7ff fd2b 	bl	8027640 <__hi0bits>
 8027bea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8027bee:	e7df      	b.n	8027bb0 <__d2b+0x70>
 8027bf0:	08045655 	.word	0x08045655
 8027bf4:	08045666 	.word	0x08045666

08027bf8 <_calloc_r>:
 8027bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027bfa:	fba1 2402 	umull	r2, r4, r1, r2
 8027bfe:	b94c      	cbnz	r4, 8027c14 <_calloc_r+0x1c>
 8027c00:	4611      	mov	r1, r2
 8027c02:	9201      	str	r2, [sp, #4]
 8027c04:	f7fc fabc 	bl	8024180 <_malloc_r>
 8027c08:	9a01      	ldr	r2, [sp, #4]
 8027c0a:	4605      	mov	r5, r0
 8027c0c:	b930      	cbnz	r0, 8027c1c <_calloc_r+0x24>
 8027c0e:	4628      	mov	r0, r5
 8027c10:	b003      	add	sp, #12
 8027c12:	bd30      	pop	{r4, r5, pc}
 8027c14:	220c      	movs	r2, #12
 8027c16:	6002      	str	r2, [r0, #0]
 8027c18:	2500      	movs	r5, #0
 8027c1a:	e7f8      	b.n	8027c0e <_calloc_r+0x16>
 8027c1c:	4621      	mov	r1, r4
 8027c1e:	f7fb ffc9 	bl	8023bb4 <memset>
 8027c22:	e7f4      	b.n	8027c0e <_calloc_r+0x16>

08027c24 <_realloc_r>:
 8027c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027c28:	4680      	mov	r8, r0
 8027c2a:	4614      	mov	r4, r2
 8027c2c:	460e      	mov	r6, r1
 8027c2e:	b921      	cbnz	r1, 8027c3a <_realloc_r+0x16>
 8027c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027c34:	4611      	mov	r1, r2
 8027c36:	f7fc baa3 	b.w	8024180 <_malloc_r>
 8027c3a:	b92a      	cbnz	r2, 8027c48 <_realloc_r+0x24>
 8027c3c:	f7fc fa34 	bl	80240a8 <_free_r>
 8027c40:	4625      	mov	r5, r4
 8027c42:	4628      	mov	r0, r5
 8027c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027c48:	f000 ff32 	bl	8028ab0 <_malloc_usable_size_r>
 8027c4c:	4284      	cmp	r4, r0
 8027c4e:	4607      	mov	r7, r0
 8027c50:	d802      	bhi.n	8027c58 <_realloc_r+0x34>
 8027c52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8027c56:	d812      	bhi.n	8027c7e <_realloc_r+0x5a>
 8027c58:	4621      	mov	r1, r4
 8027c5a:	4640      	mov	r0, r8
 8027c5c:	f7fc fa90 	bl	8024180 <_malloc_r>
 8027c60:	4605      	mov	r5, r0
 8027c62:	2800      	cmp	r0, #0
 8027c64:	d0ed      	beq.n	8027c42 <_realloc_r+0x1e>
 8027c66:	42bc      	cmp	r4, r7
 8027c68:	4622      	mov	r2, r4
 8027c6a:	4631      	mov	r1, r6
 8027c6c:	bf28      	it	cs
 8027c6e:	463a      	movcs	r2, r7
 8027c70:	f7fb ff78 	bl	8023b64 <memcpy>
 8027c74:	4631      	mov	r1, r6
 8027c76:	4640      	mov	r0, r8
 8027c78:	f7fc fa16 	bl	80240a8 <_free_r>
 8027c7c:	e7e1      	b.n	8027c42 <_realloc_r+0x1e>
 8027c7e:	4635      	mov	r5, r6
 8027c80:	e7df      	b.n	8027c42 <_realloc_r+0x1e>

08027c82 <__ssputs_r>:
 8027c82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027c86:	688e      	ldr	r6, [r1, #8]
 8027c88:	429e      	cmp	r6, r3
 8027c8a:	4682      	mov	sl, r0
 8027c8c:	460c      	mov	r4, r1
 8027c8e:	4690      	mov	r8, r2
 8027c90:	461f      	mov	r7, r3
 8027c92:	d838      	bhi.n	8027d06 <__ssputs_r+0x84>
 8027c94:	898a      	ldrh	r2, [r1, #12]
 8027c96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027c9a:	d032      	beq.n	8027d02 <__ssputs_r+0x80>
 8027c9c:	6825      	ldr	r5, [r4, #0]
 8027c9e:	6909      	ldr	r1, [r1, #16]
 8027ca0:	eba5 0901 	sub.w	r9, r5, r1
 8027ca4:	6965      	ldr	r5, [r4, #20]
 8027ca6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027caa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027cae:	3301      	adds	r3, #1
 8027cb0:	444b      	add	r3, r9
 8027cb2:	106d      	asrs	r5, r5, #1
 8027cb4:	429d      	cmp	r5, r3
 8027cb6:	bf38      	it	cc
 8027cb8:	461d      	movcc	r5, r3
 8027cba:	0553      	lsls	r3, r2, #21
 8027cbc:	d531      	bpl.n	8027d22 <__ssputs_r+0xa0>
 8027cbe:	4629      	mov	r1, r5
 8027cc0:	f7fc fa5e 	bl	8024180 <_malloc_r>
 8027cc4:	4606      	mov	r6, r0
 8027cc6:	b950      	cbnz	r0, 8027cde <__ssputs_r+0x5c>
 8027cc8:	230c      	movs	r3, #12
 8027cca:	f8ca 3000 	str.w	r3, [sl]
 8027cce:	89a3      	ldrh	r3, [r4, #12]
 8027cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027cd4:	81a3      	strh	r3, [r4, #12]
 8027cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8027cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027cde:	6921      	ldr	r1, [r4, #16]
 8027ce0:	464a      	mov	r2, r9
 8027ce2:	f7fb ff3f 	bl	8023b64 <memcpy>
 8027ce6:	89a3      	ldrh	r3, [r4, #12]
 8027ce8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027cf0:	81a3      	strh	r3, [r4, #12]
 8027cf2:	6126      	str	r6, [r4, #16]
 8027cf4:	6165      	str	r5, [r4, #20]
 8027cf6:	444e      	add	r6, r9
 8027cf8:	eba5 0509 	sub.w	r5, r5, r9
 8027cfc:	6026      	str	r6, [r4, #0]
 8027cfe:	60a5      	str	r5, [r4, #8]
 8027d00:	463e      	mov	r6, r7
 8027d02:	42be      	cmp	r6, r7
 8027d04:	d900      	bls.n	8027d08 <__ssputs_r+0x86>
 8027d06:	463e      	mov	r6, r7
 8027d08:	6820      	ldr	r0, [r4, #0]
 8027d0a:	4632      	mov	r2, r6
 8027d0c:	4641      	mov	r1, r8
 8027d0e:	f7fb ff37 	bl	8023b80 <memmove>
 8027d12:	68a3      	ldr	r3, [r4, #8]
 8027d14:	1b9b      	subs	r3, r3, r6
 8027d16:	60a3      	str	r3, [r4, #8]
 8027d18:	6823      	ldr	r3, [r4, #0]
 8027d1a:	4433      	add	r3, r6
 8027d1c:	6023      	str	r3, [r4, #0]
 8027d1e:	2000      	movs	r0, #0
 8027d20:	e7db      	b.n	8027cda <__ssputs_r+0x58>
 8027d22:	462a      	mov	r2, r5
 8027d24:	f7ff ff7e 	bl	8027c24 <_realloc_r>
 8027d28:	4606      	mov	r6, r0
 8027d2a:	2800      	cmp	r0, #0
 8027d2c:	d1e1      	bne.n	8027cf2 <__ssputs_r+0x70>
 8027d2e:	6921      	ldr	r1, [r4, #16]
 8027d30:	4650      	mov	r0, sl
 8027d32:	f7fc f9b9 	bl	80240a8 <_free_r>
 8027d36:	e7c7      	b.n	8027cc8 <__ssputs_r+0x46>

08027d38 <_svfiprintf_r>:
 8027d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d3c:	4698      	mov	r8, r3
 8027d3e:	898b      	ldrh	r3, [r1, #12]
 8027d40:	061b      	lsls	r3, r3, #24
 8027d42:	b09d      	sub	sp, #116	; 0x74
 8027d44:	4607      	mov	r7, r0
 8027d46:	460d      	mov	r5, r1
 8027d48:	4614      	mov	r4, r2
 8027d4a:	d50e      	bpl.n	8027d6a <_svfiprintf_r+0x32>
 8027d4c:	690b      	ldr	r3, [r1, #16]
 8027d4e:	b963      	cbnz	r3, 8027d6a <_svfiprintf_r+0x32>
 8027d50:	2140      	movs	r1, #64	; 0x40
 8027d52:	f7fc fa15 	bl	8024180 <_malloc_r>
 8027d56:	6028      	str	r0, [r5, #0]
 8027d58:	6128      	str	r0, [r5, #16]
 8027d5a:	b920      	cbnz	r0, 8027d66 <_svfiprintf_r+0x2e>
 8027d5c:	230c      	movs	r3, #12
 8027d5e:	603b      	str	r3, [r7, #0]
 8027d60:	f04f 30ff 	mov.w	r0, #4294967295
 8027d64:	e0d1      	b.n	8027f0a <_svfiprintf_r+0x1d2>
 8027d66:	2340      	movs	r3, #64	; 0x40
 8027d68:	616b      	str	r3, [r5, #20]
 8027d6a:	2300      	movs	r3, #0
 8027d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8027d6e:	2320      	movs	r3, #32
 8027d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8027d78:	2330      	movs	r3, #48	; 0x30
 8027d7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8027f24 <_svfiprintf_r+0x1ec>
 8027d7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027d82:	f04f 0901 	mov.w	r9, #1
 8027d86:	4623      	mov	r3, r4
 8027d88:	469a      	mov	sl, r3
 8027d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027d8e:	b10a      	cbz	r2, 8027d94 <_svfiprintf_r+0x5c>
 8027d90:	2a25      	cmp	r2, #37	; 0x25
 8027d92:	d1f9      	bne.n	8027d88 <_svfiprintf_r+0x50>
 8027d94:	ebba 0b04 	subs.w	fp, sl, r4
 8027d98:	d00b      	beq.n	8027db2 <_svfiprintf_r+0x7a>
 8027d9a:	465b      	mov	r3, fp
 8027d9c:	4622      	mov	r2, r4
 8027d9e:	4629      	mov	r1, r5
 8027da0:	4638      	mov	r0, r7
 8027da2:	f7ff ff6e 	bl	8027c82 <__ssputs_r>
 8027da6:	3001      	adds	r0, #1
 8027da8:	f000 80aa 	beq.w	8027f00 <_svfiprintf_r+0x1c8>
 8027dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027dae:	445a      	add	r2, fp
 8027db0:	9209      	str	r2, [sp, #36]	; 0x24
 8027db2:	f89a 3000 	ldrb.w	r3, [sl]
 8027db6:	2b00      	cmp	r3, #0
 8027db8:	f000 80a2 	beq.w	8027f00 <_svfiprintf_r+0x1c8>
 8027dbc:	2300      	movs	r3, #0
 8027dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8027dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027dc6:	f10a 0a01 	add.w	sl, sl, #1
 8027dca:	9304      	str	r3, [sp, #16]
 8027dcc:	9307      	str	r3, [sp, #28]
 8027dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8027dd4:	4654      	mov	r4, sl
 8027dd6:	2205      	movs	r2, #5
 8027dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027ddc:	4851      	ldr	r0, [pc, #324]	; (8027f24 <_svfiprintf_r+0x1ec>)
 8027dde:	f7d8 fa47 	bl	8000270 <memchr>
 8027de2:	9a04      	ldr	r2, [sp, #16]
 8027de4:	b9d8      	cbnz	r0, 8027e1e <_svfiprintf_r+0xe6>
 8027de6:	06d0      	lsls	r0, r2, #27
 8027de8:	bf44      	itt	mi
 8027dea:	2320      	movmi	r3, #32
 8027dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027df0:	0711      	lsls	r1, r2, #28
 8027df2:	bf44      	itt	mi
 8027df4:	232b      	movmi	r3, #43	; 0x2b
 8027df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8027dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8027e00:	d015      	beq.n	8027e2e <_svfiprintf_r+0xf6>
 8027e02:	9a07      	ldr	r2, [sp, #28]
 8027e04:	4654      	mov	r4, sl
 8027e06:	2000      	movs	r0, #0
 8027e08:	f04f 0c0a 	mov.w	ip, #10
 8027e0c:	4621      	mov	r1, r4
 8027e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027e12:	3b30      	subs	r3, #48	; 0x30
 8027e14:	2b09      	cmp	r3, #9
 8027e16:	d94e      	bls.n	8027eb6 <_svfiprintf_r+0x17e>
 8027e18:	b1b0      	cbz	r0, 8027e48 <_svfiprintf_r+0x110>
 8027e1a:	9207      	str	r2, [sp, #28]
 8027e1c:	e014      	b.n	8027e48 <_svfiprintf_r+0x110>
 8027e1e:	eba0 0308 	sub.w	r3, r0, r8
 8027e22:	fa09 f303 	lsl.w	r3, r9, r3
 8027e26:	4313      	orrs	r3, r2
 8027e28:	9304      	str	r3, [sp, #16]
 8027e2a:	46a2      	mov	sl, r4
 8027e2c:	e7d2      	b.n	8027dd4 <_svfiprintf_r+0x9c>
 8027e2e:	9b03      	ldr	r3, [sp, #12]
 8027e30:	1d19      	adds	r1, r3, #4
 8027e32:	681b      	ldr	r3, [r3, #0]
 8027e34:	9103      	str	r1, [sp, #12]
 8027e36:	2b00      	cmp	r3, #0
 8027e38:	bfbb      	ittet	lt
 8027e3a:	425b      	neglt	r3, r3
 8027e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8027e40:	9307      	strge	r3, [sp, #28]
 8027e42:	9307      	strlt	r3, [sp, #28]
 8027e44:	bfb8      	it	lt
 8027e46:	9204      	strlt	r2, [sp, #16]
 8027e48:	7823      	ldrb	r3, [r4, #0]
 8027e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8027e4c:	d10c      	bne.n	8027e68 <_svfiprintf_r+0x130>
 8027e4e:	7863      	ldrb	r3, [r4, #1]
 8027e50:	2b2a      	cmp	r3, #42	; 0x2a
 8027e52:	d135      	bne.n	8027ec0 <_svfiprintf_r+0x188>
 8027e54:	9b03      	ldr	r3, [sp, #12]
 8027e56:	1d1a      	adds	r2, r3, #4
 8027e58:	681b      	ldr	r3, [r3, #0]
 8027e5a:	9203      	str	r2, [sp, #12]
 8027e5c:	2b00      	cmp	r3, #0
 8027e5e:	bfb8      	it	lt
 8027e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8027e64:	3402      	adds	r4, #2
 8027e66:	9305      	str	r3, [sp, #20]
 8027e68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8027f34 <_svfiprintf_r+0x1fc>
 8027e6c:	7821      	ldrb	r1, [r4, #0]
 8027e6e:	2203      	movs	r2, #3
 8027e70:	4650      	mov	r0, sl
 8027e72:	f7d8 f9fd 	bl	8000270 <memchr>
 8027e76:	b140      	cbz	r0, 8027e8a <_svfiprintf_r+0x152>
 8027e78:	2340      	movs	r3, #64	; 0x40
 8027e7a:	eba0 000a 	sub.w	r0, r0, sl
 8027e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8027e82:	9b04      	ldr	r3, [sp, #16]
 8027e84:	4303      	orrs	r3, r0
 8027e86:	3401      	adds	r4, #1
 8027e88:	9304      	str	r3, [sp, #16]
 8027e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027e8e:	4826      	ldr	r0, [pc, #152]	; (8027f28 <_svfiprintf_r+0x1f0>)
 8027e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027e94:	2206      	movs	r2, #6
 8027e96:	f7d8 f9eb 	bl	8000270 <memchr>
 8027e9a:	2800      	cmp	r0, #0
 8027e9c:	d038      	beq.n	8027f10 <_svfiprintf_r+0x1d8>
 8027e9e:	4b23      	ldr	r3, [pc, #140]	; (8027f2c <_svfiprintf_r+0x1f4>)
 8027ea0:	bb1b      	cbnz	r3, 8027eea <_svfiprintf_r+0x1b2>
 8027ea2:	9b03      	ldr	r3, [sp, #12]
 8027ea4:	3307      	adds	r3, #7
 8027ea6:	f023 0307 	bic.w	r3, r3, #7
 8027eaa:	3308      	adds	r3, #8
 8027eac:	9303      	str	r3, [sp, #12]
 8027eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027eb0:	4433      	add	r3, r6
 8027eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8027eb4:	e767      	b.n	8027d86 <_svfiprintf_r+0x4e>
 8027eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8027eba:	460c      	mov	r4, r1
 8027ebc:	2001      	movs	r0, #1
 8027ebe:	e7a5      	b.n	8027e0c <_svfiprintf_r+0xd4>
 8027ec0:	2300      	movs	r3, #0
 8027ec2:	3401      	adds	r4, #1
 8027ec4:	9305      	str	r3, [sp, #20]
 8027ec6:	4619      	mov	r1, r3
 8027ec8:	f04f 0c0a 	mov.w	ip, #10
 8027ecc:	4620      	mov	r0, r4
 8027ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027ed2:	3a30      	subs	r2, #48	; 0x30
 8027ed4:	2a09      	cmp	r2, #9
 8027ed6:	d903      	bls.n	8027ee0 <_svfiprintf_r+0x1a8>
 8027ed8:	2b00      	cmp	r3, #0
 8027eda:	d0c5      	beq.n	8027e68 <_svfiprintf_r+0x130>
 8027edc:	9105      	str	r1, [sp, #20]
 8027ede:	e7c3      	b.n	8027e68 <_svfiprintf_r+0x130>
 8027ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8027ee4:	4604      	mov	r4, r0
 8027ee6:	2301      	movs	r3, #1
 8027ee8:	e7f0      	b.n	8027ecc <_svfiprintf_r+0x194>
 8027eea:	ab03      	add	r3, sp, #12
 8027eec:	9300      	str	r3, [sp, #0]
 8027eee:	462a      	mov	r2, r5
 8027ef0:	4b0f      	ldr	r3, [pc, #60]	; (8027f30 <_svfiprintf_r+0x1f8>)
 8027ef2:	a904      	add	r1, sp, #16
 8027ef4:	4638      	mov	r0, r7
 8027ef6:	f7fc fa47 	bl	8024388 <_printf_float>
 8027efa:	1c42      	adds	r2, r0, #1
 8027efc:	4606      	mov	r6, r0
 8027efe:	d1d6      	bne.n	8027eae <_svfiprintf_r+0x176>
 8027f00:	89ab      	ldrh	r3, [r5, #12]
 8027f02:	065b      	lsls	r3, r3, #25
 8027f04:	f53f af2c 	bmi.w	8027d60 <_svfiprintf_r+0x28>
 8027f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027f0a:	b01d      	add	sp, #116	; 0x74
 8027f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f10:	ab03      	add	r3, sp, #12
 8027f12:	9300      	str	r3, [sp, #0]
 8027f14:	462a      	mov	r2, r5
 8027f16:	4b06      	ldr	r3, [pc, #24]	; (8027f30 <_svfiprintf_r+0x1f8>)
 8027f18:	a904      	add	r1, sp, #16
 8027f1a:	4638      	mov	r0, r7
 8027f1c:	f7fc fcc0 	bl	80248a0 <_printf_i>
 8027f20:	e7eb      	b.n	8027efa <_svfiprintf_r+0x1c2>
 8027f22:	bf00      	nop
 8027f24:	080457c4 	.word	0x080457c4
 8027f28:	080457ce 	.word	0x080457ce
 8027f2c:	08024389 	.word	0x08024389
 8027f30:	08027c83 	.word	0x08027c83
 8027f34:	080457ca 	.word	0x080457ca

08027f38 <_sungetc_r>:
 8027f38:	b538      	push	{r3, r4, r5, lr}
 8027f3a:	1c4b      	adds	r3, r1, #1
 8027f3c:	4614      	mov	r4, r2
 8027f3e:	d103      	bne.n	8027f48 <_sungetc_r+0x10>
 8027f40:	f04f 35ff 	mov.w	r5, #4294967295
 8027f44:	4628      	mov	r0, r5
 8027f46:	bd38      	pop	{r3, r4, r5, pc}
 8027f48:	8993      	ldrh	r3, [r2, #12]
 8027f4a:	f023 0320 	bic.w	r3, r3, #32
 8027f4e:	8193      	strh	r3, [r2, #12]
 8027f50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027f52:	6852      	ldr	r2, [r2, #4]
 8027f54:	b2cd      	uxtb	r5, r1
 8027f56:	b18b      	cbz	r3, 8027f7c <_sungetc_r+0x44>
 8027f58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8027f5a:	4293      	cmp	r3, r2
 8027f5c:	dd08      	ble.n	8027f70 <_sungetc_r+0x38>
 8027f5e:	6823      	ldr	r3, [r4, #0]
 8027f60:	1e5a      	subs	r2, r3, #1
 8027f62:	6022      	str	r2, [r4, #0]
 8027f64:	f803 5c01 	strb.w	r5, [r3, #-1]
 8027f68:	6863      	ldr	r3, [r4, #4]
 8027f6a:	3301      	adds	r3, #1
 8027f6c:	6063      	str	r3, [r4, #4]
 8027f6e:	e7e9      	b.n	8027f44 <_sungetc_r+0xc>
 8027f70:	4621      	mov	r1, r4
 8027f72:	f000 fd1b 	bl	80289ac <__submore>
 8027f76:	2800      	cmp	r0, #0
 8027f78:	d0f1      	beq.n	8027f5e <_sungetc_r+0x26>
 8027f7a:	e7e1      	b.n	8027f40 <_sungetc_r+0x8>
 8027f7c:	6921      	ldr	r1, [r4, #16]
 8027f7e:	6823      	ldr	r3, [r4, #0]
 8027f80:	b151      	cbz	r1, 8027f98 <_sungetc_r+0x60>
 8027f82:	4299      	cmp	r1, r3
 8027f84:	d208      	bcs.n	8027f98 <_sungetc_r+0x60>
 8027f86:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8027f8a:	42a9      	cmp	r1, r5
 8027f8c:	d104      	bne.n	8027f98 <_sungetc_r+0x60>
 8027f8e:	3b01      	subs	r3, #1
 8027f90:	3201      	adds	r2, #1
 8027f92:	6023      	str	r3, [r4, #0]
 8027f94:	6062      	str	r2, [r4, #4]
 8027f96:	e7d5      	b.n	8027f44 <_sungetc_r+0xc>
 8027f98:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8027f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8027fa2:	2303      	movs	r3, #3
 8027fa4:	63a3      	str	r3, [r4, #56]	; 0x38
 8027fa6:	4623      	mov	r3, r4
 8027fa8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027fac:	6023      	str	r3, [r4, #0]
 8027fae:	2301      	movs	r3, #1
 8027fb0:	e7dc      	b.n	8027f6c <_sungetc_r+0x34>

08027fb2 <__ssrefill_r>:
 8027fb2:	b510      	push	{r4, lr}
 8027fb4:	460c      	mov	r4, r1
 8027fb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8027fb8:	b169      	cbz	r1, 8027fd6 <__ssrefill_r+0x24>
 8027fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027fbe:	4299      	cmp	r1, r3
 8027fc0:	d001      	beq.n	8027fc6 <__ssrefill_r+0x14>
 8027fc2:	f7fc f871 	bl	80240a8 <_free_r>
 8027fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027fc8:	6063      	str	r3, [r4, #4]
 8027fca:	2000      	movs	r0, #0
 8027fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8027fce:	b113      	cbz	r3, 8027fd6 <__ssrefill_r+0x24>
 8027fd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027fd2:	6023      	str	r3, [r4, #0]
 8027fd4:	bd10      	pop	{r4, pc}
 8027fd6:	6923      	ldr	r3, [r4, #16]
 8027fd8:	6023      	str	r3, [r4, #0]
 8027fda:	2300      	movs	r3, #0
 8027fdc:	6063      	str	r3, [r4, #4]
 8027fde:	89a3      	ldrh	r3, [r4, #12]
 8027fe0:	f043 0320 	orr.w	r3, r3, #32
 8027fe4:	81a3      	strh	r3, [r4, #12]
 8027fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8027fea:	e7f3      	b.n	8027fd4 <__ssrefill_r+0x22>

08027fec <__ssvfiscanf_r>:
 8027fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027ff0:	460c      	mov	r4, r1
 8027ff2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8027ff6:	2100      	movs	r1, #0
 8027ff8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8027ffc:	49a6      	ldr	r1, [pc, #664]	; (8028298 <__ssvfiscanf_r+0x2ac>)
 8027ffe:	91a0      	str	r1, [sp, #640]	; 0x280
 8028000:	f10d 0804 	add.w	r8, sp, #4
 8028004:	49a5      	ldr	r1, [pc, #660]	; (802829c <__ssvfiscanf_r+0x2b0>)
 8028006:	4fa6      	ldr	r7, [pc, #664]	; (80282a0 <__ssvfiscanf_r+0x2b4>)
 8028008:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80282a4 <__ssvfiscanf_r+0x2b8>
 802800c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8028010:	4606      	mov	r6, r0
 8028012:	91a1      	str	r1, [sp, #644]	; 0x284
 8028014:	9300      	str	r3, [sp, #0]
 8028016:	7813      	ldrb	r3, [r2, #0]
 8028018:	2b00      	cmp	r3, #0
 802801a:	f000 815a 	beq.w	80282d2 <__ssvfiscanf_r+0x2e6>
 802801e:	5dd9      	ldrb	r1, [r3, r7]
 8028020:	f011 0108 	ands.w	r1, r1, #8
 8028024:	f102 0501 	add.w	r5, r2, #1
 8028028:	d019      	beq.n	802805e <__ssvfiscanf_r+0x72>
 802802a:	6863      	ldr	r3, [r4, #4]
 802802c:	2b00      	cmp	r3, #0
 802802e:	dd0f      	ble.n	8028050 <__ssvfiscanf_r+0x64>
 8028030:	6823      	ldr	r3, [r4, #0]
 8028032:	781a      	ldrb	r2, [r3, #0]
 8028034:	5cba      	ldrb	r2, [r7, r2]
 8028036:	0712      	lsls	r2, r2, #28
 8028038:	d401      	bmi.n	802803e <__ssvfiscanf_r+0x52>
 802803a:	462a      	mov	r2, r5
 802803c:	e7eb      	b.n	8028016 <__ssvfiscanf_r+0x2a>
 802803e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028040:	3201      	adds	r2, #1
 8028042:	9245      	str	r2, [sp, #276]	; 0x114
 8028044:	6862      	ldr	r2, [r4, #4]
 8028046:	3301      	adds	r3, #1
 8028048:	3a01      	subs	r2, #1
 802804a:	6062      	str	r2, [r4, #4]
 802804c:	6023      	str	r3, [r4, #0]
 802804e:	e7ec      	b.n	802802a <__ssvfiscanf_r+0x3e>
 8028050:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028052:	4621      	mov	r1, r4
 8028054:	4630      	mov	r0, r6
 8028056:	4798      	blx	r3
 8028058:	2800      	cmp	r0, #0
 802805a:	d0e9      	beq.n	8028030 <__ssvfiscanf_r+0x44>
 802805c:	e7ed      	b.n	802803a <__ssvfiscanf_r+0x4e>
 802805e:	2b25      	cmp	r3, #37	; 0x25
 8028060:	d012      	beq.n	8028088 <__ssvfiscanf_r+0x9c>
 8028062:	469a      	mov	sl, r3
 8028064:	6863      	ldr	r3, [r4, #4]
 8028066:	2b00      	cmp	r3, #0
 8028068:	f340 8091 	ble.w	802818e <__ssvfiscanf_r+0x1a2>
 802806c:	6822      	ldr	r2, [r4, #0]
 802806e:	7813      	ldrb	r3, [r2, #0]
 8028070:	4553      	cmp	r3, sl
 8028072:	f040 812e 	bne.w	80282d2 <__ssvfiscanf_r+0x2e6>
 8028076:	6863      	ldr	r3, [r4, #4]
 8028078:	3b01      	subs	r3, #1
 802807a:	6063      	str	r3, [r4, #4]
 802807c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802807e:	3201      	adds	r2, #1
 8028080:	3301      	adds	r3, #1
 8028082:	6022      	str	r2, [r4, #0]
 8028084:	9345      	str	r3, [sp, #276]	; 0x114
 8028086:	e7d8      	b.n	802803a <__ssvfiscanf_r+0x4e>
 8028088:	9141      	str	r1, [sp, #260]	; 0x104
 802808a:	9143      	str	r1, [sp, #268]	; 0x10c
 802808c:	7853      	ldrb	r3, [r2, #1]
 802808e:	2b2a      	cmp	r3, #42	; 0x2a
 8028090:	bf02      	ittt	eq
 8028092:	2310      	moveq	r3, #16
 8028094:	1c95      	addeq	r5, r2, #2
 8028096:	9341      	streq	r3, [sp, #260]	; 0x104
 8028098:	220a      	movs	r2, #10
 802809a:	46aa      	mov	sl, r5
 802809c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80280a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80280a4:	2b09      	cmp	r3, #9
 80280a6:	d91d      	bls.n	80280e4 <__ssvfiscanf_r+0xf8>
 80280a8:	487e      	ldr	r0, [pc, #504]	; (80282a4 <__ssvfiscanf_r+0x2b8>)
 80280aa:	2203      	movs	r2, #3
 80280ac:	f7d8 f8e0 	bl	8000270 <memchr>
 80280b0:	b140      	cbz	r0, 80280c4 <__ssvfiscanf_r+0xd8>
 80280b2:	2301      	movs	r3, #1
 80280b4:	eba0 0009 	sub.w	r0, r0, r9
 80280b8:	fa03 f000 	lsl.w	r0, r3, r0
 80280bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80280be:	4318      	orrs	r0, r3
 80280c0:	9041      	str	r0, [sp, #260]	; 0x104
 80280c2:	4655      	mov	r5, sl
 80280c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80280c8:	2b78      	cmp	r3, #120	; 0x78
 80280ca:	d806      	bhi.n	80280da <__ssvfiscanf_r+0xee>
 80280cc:	2b57      	cmp	r3, #87	; 0x57
 80280ce:	d810      	bhi.n	80280f2 <__ssvfiscanf_r+0x106>
 80280d0:	2b25      	cmp	r3, #37	; 0x25
 80280d2:	d0c6      	beq.n	8028062 <__ssvfiscanf_r+0x76>
 80280d4:	d856      	bhi.n	8028184 <__ssvfiscanf_r+0x198>
 80280d6:	2b00      	cmp	r3, #0
 80280d8:	d064      	beq.n	80281a4 <__ssvfiscanf_r+0x1b8>
 80280da:	2303      	movs	r3, #3
 80280dc:	9347      	str	r3, [sp, #284]	; 0x11c
 80280de:	230a      	movs	r3, #10
 80280e0:	9342      	str	r3, [sp, #264]	; 0x108
 80280e2:	e071      	b.n	80281c8 <__ssvfiscanf_r+0x1dc>
 80280e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80280e6:	fb02 1103 	mla	r1, r2, r3, r1
 80280ea:	3930      	subs	r1, #48	; 0x30
 80280ec:	9143      	str	r1, [sp, #268]	; 0x10c
 80280ee:	4655      	mov	r5, sl
 80280f0:	e7d3      	b.n	802809a <__ssvfiscanf_r+0xae>
 80280f2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80280f6:	2a20      	cmp	r2, #32
 80280f8:	d8ef      	bhi.n	80280da <__ssvfiscanf_r+0xee>
 80280fa:	a101      	add	r1, pc, #4	; (adr r1, 8028100 <__ssvfiscanf_r+0x114>)
 80280fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8028100:	080281b3 	.word	0x080281b3
 8028104:	080280db 	.word	0x080280db
 8028108:	080280db 	.word	0x080280db
 802810c:	08028211 	.word	0x08028211
 8028110:	080280db 	.word	0x080280db
 8028114:	080280db 	.word	0x080280db
 8028118:	080280db 	.word	0x080280db
 802811c:	080280db 	.word	0x080280db
 8028120:	080280db 	.word	0x080280db
 8028124:	080280db 	.word	0x080280db
 8028128:	080280db 	.word	0x080280db
 802812c:	08028227 	.word	0x08028227
 8028130:	080281fd 	.word	0x080281fd
 8028134:	0802818b 	.word	0x0802818b
 8028138:	0802818b 	.word	0x0802818b
 802813c:	0802818b 	.word	0x0802818b
 8028140:	080280db 	.word	0x080280db
 8028144:	08028201 	.word	0x08028201
 8028148:	080280db 	.word	0x080280db
 802814c:	080280db 	.word	0x080280db
 8028150:	080280db 	.word	0x080280db
 8028154:	080280db 	.word	0x080280db
 8028158:	08028237 	.word	0x08028237
 802815c:	08028209 	.word	0x08028209
 8028160:	080281ab 	.word	0x080281ab
 8028164:	080280db 	.word	0x080280db
 8028168:	080280db 	.word	0x080280db
 802816c:	08028233 	.word	0x08028233
 8028170:	080280db 	.word	0x080280db
 8028174:	080281fd 	.word	0x080281fd
 8028178:	080280db 	.word	0x080280db
 802817c:	080280db 	.word	0x080280db
 8028180:	080281b3 	.word	0x080281b3
 8028184:	3b45      	subs	r3, #69	; 0x45
 8028186:	2b02      	cmp	r3, #2
 8028188:	d8a7      	bhi.n	80280da <__ssvfiscanf_r+0xee>
 802818a:	2305      	movs	r3, #5
 802818c:	e01b      	b.n	80281c6 <__ssvfiscanf_r+0x1da>
 802818e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028190:	4621      	mov	r1, r4
 8028192:	4630      	mov	r0, r6
 8028194:	4798      	blx	r3
 8028196:	2800      	cmp	r0, #0
 8028198:	f43f af68 	beq.w	802806c <__ssvfiscanf_r+0x80>
 802819c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802819e:	2800      	cmp	r0, #0
 80281a0:	f040 808d 	bne.w	80282be <__ssvfiscanf_r+0x2d2>
 80281a4:	f04f 30ff 	mov.w	r0, #4294967295
 80281a8:	e08f      	b.n	80282ca <__ssvfiscanf_r+0x2de>
 80281aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80281ac:	f042 0220 	orr.w	r2, r2, #32
 80281b0:	9241      	str	r2, [sp, #260]	; 0x104
 80281b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80281b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80281b8:	9241      	str	r2, [sp, #260]	; 0x104
 80281ba:	2210      	movs	r2, #16
 80281bc:	2b6f      	cmp	r3, #111	; 0x6f
 80281be:	9242      	str	r2, [sp, #264]	; 0x108
 80281c0:	bf34      	ite	cc
 80281c2:	2303      	movcc	r3, #3
 80281c4:	2304      	movcs	r3, #4
 80281c6:	9347      	str	r3, [sp, #284]	; 0x11c
 80281c8:	6863      	ldr	r3, [r4, #4]
 80281ca:	2b00      	cmp	r3, #0
 80281cc:	dd42      	ble.n	8028254 <__ssvfiscanf_r+0x268>
 80281ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80281d0:	0659      	lsls	r1, r3, #25
 80281d2:	d404      	bmi.n	80281de <__ssvfiscanf_r+0x1f2>
 80281d4:	6823      	ldr	r3, [r4, #0]
 80281d6:	781a      	ldrb	r2, [r3, #0]
 80281d8:	5cba      	ldrb	r2, [r7, r2]
 80281da:	0712      	lsls	r2, r2, #28
 80281dc:	d441      	bmi.n	8028262 <__ssvfiscanf_r+0x276>
 80281de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80281e0:	2b02      	cmp	r3, #2
 80281e2:	dc50      	bgt.n	8028286 <__ssvfiscanf_r+0x29a>
 80281e4:	466b      	mov	r3, sp
 80281e6:	4622      	mov	r2, r4
 80281e8:	a941      	add	r1, sp, #260	; 0x104
 80281ea:	4630      	mov	r0, r6
 80281ec:	f000 f9d0 	bl	8028590 <_scanf_chars>
 80281f0:	2801      	cmp	r0, #1
 80281f2:	d06e      	beq.n	80282d2 <__ssvfiscanf_r+0x2e6>
 80281f4:	2802      	cmp	r0, #2
 80281f6:	f47f af20 	bne.w	802803a <__ssvfiscanf_r+0x4e>
 80281fa:	e7cf      	b.n	802819c <__ssvfiscanf_r+0x1b0>
 80281fc:	220a      	movs	r2, #10
 80281fe:	e7dd      	b.n	80281bc <__ssvfiscanf_r+0x1d0>
 8028200:	2300      	movs	r3, #0
 8028202:	9342      	str	r3, [sp, #264]	; 0x108
 8028204:	2303      	movs	r3, #3
 8028206:	e7de      	b.n	80281c6 <__ssvfiscanf_r+0x1da>
 8028208:	2308      	movs	r3, #8
 802820a:	9342      	str	r3, [sp, #264]	; 0x108
 802820c:	2304      	movs	r3, #4
 802820e:	e7da      	b.n	80281c6 <__ssvfiscanf_r+0x1da>
 8028210:	4629      	mov	r1, r5
 8028212:	4640      	mov	r0, r8
 8028214:	f000 fb92 	bl	802893c <__sccl>
 8028218:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802821a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802821e:	9341      	str	r3, [sp, #260]	; 0x104
 8028220:	4605      	mov	r5, r0
 8028222:	2301      	movs	r3, #1
 8028224:	e7cf      	b.n	80281c6 <__ssvfiscanf_r+0x1da>
 8028226:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802822c:	9341      	str	r3, [sp, #260]	; 0x104
 802822e:	2300      	movs	r3, #0
 8028230:	e7c9      	b.n	80281c6 <__ssvfiscanf_r+0x1da>
 8028232:	2302      	movs	r3, #2
 8028234:	e7c7      	b.n	80281c6 <__ssvfiscanf_r+0x1da>
 8028236:	9841      	ldr	r0, [sp, #260]	; 0x104
 8028238:	06c3      	lsls	r3, r0, #27
 802823a:	f53f aefe 	bmi.w	802803a <__ssvfiscanf_r+0x4e>
 802823e:	9b00      	ldr	r3, [sp, #0]
 8028240:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028242:	1d19      	adds	r1, r3, #4
 8028244:	9100      	str	r1, [sp, #0]
 8028246:	681b      	ldr	r3, [r3, #0]
 8028248:	f010 0f01 	tst.w	r0, #1
 802824c:	bf14      	ite	ne
 802824e:	801a      	strhne	r2, [r3, #0]
 8028250:	601a      	streq	r2, [r3, #0]
 8028252:	e6f2      	b.n	802803a <__ssvfiscanf_r+0x4e>
 8028254:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028256:	4621      	mov	r1, r4
 8028258:	4630      	mov	r0, r6
 802825a:	4798      	blx	r3
 802825c:	2800      	cmp	r0, #0
 802825e:	d0b6      	beq.n	80281ce <__ssvfiscanf_r+0x1e2>
 8028260:	e79c      	b.n	802819c <__ssvfiscanf_r+0x1b0>
 8028262:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028264:	3201      	adds	r2, #1
 8028266:	9245      	str	r2, [sp, #276]	; 0x114
 8028268:	6862      	ldr	r2, [r4, #4]
 802826a:	3a01      	subs	r2, #1
 802826c:	2a00      	cmp	r2, #0
 802826e:	6062      	str	r2, [r4, #4]
 8028270:	dd02      	ble.n	8028278 <__ssvfiscanf_r+0x28c>
 8028272:	3301      	adds	r3, #1
 8028274:	6023      	str	r3, [r4, #0]
 8028276:	e7ad      	b.n	80281d4 <__ssvfiscanf_r+0x1e8>
 8028278:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802827a:	4621      	mov	r1, r4
 802827c:	4630      	mov	r0, r6
 802827e:	4798      	blx	r3
 8028280:	2800      	cmp	r0, #0
 8028282:	d0a7      	beq.n	80281d4 <__ssvfiscanf_r+0x1e8>
 8028284:	e78a      	b.n	802819c <__ssvfiscanf_r+0x1b0>
 8028286:	2b04      	cmp	r3, #4
 8028288:	dc0e      	bgt.n	80282a8 <__ssvfiscanf_r+0x2bc>
 802828a:	466b      	mov	r3, sp
 802828c:	4622      	mov	r2, r4
 802828e:	a941      	add	r1, sp, #260	; 0x104
 8028290:	4630      	mov	r0, r6
 8028292:	f000 f9d7 	bl	8028644 <_scanf_i>
 8028296:	e7ab      	b.n	80281f0 <__ssvfiscanf_r+0x204>
 8028298:	08027f39 	.word	0x08027f39
 802829c:	08027fb3 	.word	0x08027fb3
 80282a0:	08044f15 	.word	0x08044f15
 80282a4:	080457ca 	.word	0x080457ca
 80282a8:	4b0b      	ldr	r3, [pc, #44]	; (80282d8 <__ssvfiscanf_r+0x2ec>)
 80282aa:	2b00      	cmp	r3, #0
 80282ac:	f43f aec5 	beq.w	802803a <__ssvfiscanf_r+0x4e>
 80282b0:	466b      	mov	r3, sp
 80282b2:	4622      	mov	r2, r4
 80282b4:	a941      	add	r1, sp, #260	; 0x104
 80282b6:	4630      	mov	r0, r6
 80282b8:	f3af 8000 	nop.w
 80282bc:	e798      	b.n	80281f0 <__ssvfiscanf_r+0x204>
 80282be:	89a3      	ldrh	r3, [r4, #12]
 80282c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80282c4:	bf18      	it	ne
 80282c6:	f04f 30ff 	movne.w	r0, #4294967295
 80282ca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80282ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80282d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80282d4:	e7f9      	b.n	80282ca <__ssvfiscanf_r+0x2de>
 80282d6:	bf00      	nop
 80282d8:	00000000 	.word	0x00000000

080282dc <__sfputc_r>:
 80282dc:	6893      	ldr	r3, [r2, #8]
 80282de:	3b01      	subs	r3, #1
 80282e0:	2b00      	cmp	r3, #0
 80282e2:	b410      	push	{r4}
 80282e4:	6093      	str	r3, [r2, #8]
 80282e6:	da08      	bge.n	80282fa <__sfputc_r+0x1e>
 80282e8:	6994      	ldr	r4, [r2, #24]
 80282ea:	42a3      	cmp	r3, r4
 80282ec:	db01      	blt.n	80282f2 <__sfputc_r+0x16>
 80282ee:	290a      	cmp	r1, #10
 80282f0:	d103      	bne.n	80282fa <__sfputc_r+0x1e>
 80282f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80282f6:	f7fd bf45 	b.w	8026184 <__swbuf_r>
 80282fa:	6813      	ldr	r3, [r2, #0]
 80282fc:	1c58      	adds	r0, r3, #1
 80282fe:	6010      	str	r0, [r2, #0]
 8028300:	7019      	strb	r1, [r3, #0]
 8028302:	4608      	mov	r0, r1
 8028304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028308:	4770      	bx	lr

0802830a <__sfputs_r>:
 802830a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802830c:	4606      	mov	r6, r0
 802830e:	460f      	mov	r7, r1
 8028310:	4614      	mov	r4, r2
 8028312:	18d5      	adds	r5, r2, r3
 8028314:	42ac      	cmp	r4, r5
 8028316:	d101      	bne.n	802831c <__sfputs_r+0x12>
 8028318:	2000      	movs	r0, #0
 802831a:	e007      	b.n	802832c <__sfputs_r+0x22>
 802831c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028320:	463a      	mov	r2, r7
 8028322:	4630      	mov	r0, r6
 8028324:	f7ff ffda 	bl	80282dc <__sfputc_r>
 8028328:	1c43      	adds	r3, r0, #1
 802832a:	d1f3      	bne.n	8028314 <__sfputs_r+0xa>
 802832c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028330 <_vfiprintf_r>:
 8028330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028334:	460d      	mov	r5, r1
 8028336:	b09d      	sub	sp, #116	; 0x74
 8028338:	4614      	mov	r4, r2
 802833a:	4698      	mov	r8, r3
 802833c:	4606      	mov	r6, r0
 802833e:	b118      	cbz	r0, 8028348 <_vfiprintf_r+0x18>
 8028340:	6983      	ldr	r3, [r0, #24]
 8028342:	b90b      	cbnz	r3, 8028348 <_vfiprintf_r+0x18>
 8028344:	f7fb fa14 	bl	8023770 <__sinit>
 8028348:	4b89      	ldr	r3, [pc, #548]	; (8028570 <_vfiprintf_r+0x240>)
 802834a:	429d      	cmp	r5, r3
 802834c:	d11b      	bne.n	8028386 <_vfiprintf_r+0x56>
 802834e:	6875      	ldr	r5, [r6, #4]
 8028350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028352:	07d9      	lsls	r1, r3, #31
 8028354:	d405      	bmi.n	8028362 <_vfiprintf_r+0x32>
 8028356:	89ab      	ldrh	r3, [r5, #12]
 8028358:	059a      	lsls	r2, r3, #22
 802835a:	d402      	bmi.n	8028362 <_vfiprintf_r+0x32>
 802835c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802835e:	f7fb fbdd 	bl	8023b1c <__retarget_lock_acquire_recursive>
 8028362:	89ab      	ldrh	r3, [r5, #12]
 8028364:	071b      	lsls	r3, r3, #28
 8028366:	d501      	bpl.n	802836c <_vfiprintf_r+0x3c>
 8028368:	692b      	ldr	r3, [r5, #16]
 802836a:	b9eb      	cbnz	r3, 80283a8 <_vfiprintf_r+0x78>
 802836c:	4629      	mov	r1, r5
 802836e:	4630      	mov	r0, r6
 8028370:	f7fd ff6c 	bl	802624c <__swsetup_r>
 8028374:	b1c0      	cbz	r0, 80283a8 <_vfiprintf_r+0x78>
 8028376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028378:	07dc      	lsls	r4, r3, #31
 802837a:	d50e      	bpl.n	802839a <_vfiprintf_r+0x6a>
 802837c:	f04f 30ff 	mov.w	r0, #4294967295
 8028380:	b01d      	add	sp, #116	; 0x74
 8028382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028386:	4b7b      	ldr	r3, [pc, #492]	; (8028574 <_vfiprintf_r+0x244>)
 8028388:	429d      	cmp	r5, r3
 802838a:	d101      	bne.n	8028390 <_vfiprintf_r+0x60>
 802838c:	68b5      	ldr	r5, [r6, #8]
 802838e:	e7df      	b.n	8028350 <_vfiprintf_r+0x20>
 8028390:	4b79      	ldr	r3, [pc, #484]	; (8028578 <_vfiprintf_r+0x248>)
 8028392:	429d      	cmp	r5, r3
 8028394:	bf08      	it	eq
 8028396:	68f5      	ldreq	r5, [r6, #12]
 8028398:	e7da      	b.n	8028350 <_vfiprintf_r+0x20>
 802839a:	89ab      	ldrh	r3, [r5, #12]
 802839c:	0598      	lsls	r0, r3, #22
 802839e:	d4ed      	bmi.n	802837c <_vfiprintf_r+0x4c>
 80283a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80283a2:	f7fb fbbd 	bl	8023b20 <__retarget_lock_release_recursive>
 80283a6:	e7e9      	b.n	802837c <_vfiprintf_r+0x4c>
 80283a8:	2300      	movs	r3, #0
 80283aa:	9309      	str	r3, [sp, #36]	; 0x24
 80283ac:	2320      	movs	r3, #32
 80283ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80283b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80283b6:	2330      	movs	r3, #48	; 0x30
 80283b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802857c <_vfiprintf_r+0x24c>
 80283bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80283c0:	f04f 0901 	mov.w	r9, #1
 80283c4:	4623      	mov	r3, r4
 80283c6:	469a      	mov	sl, r3
 80283c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80283cc:	b10a      	cbz	r2, 80283d2 <_vfiprintf_r+0xa2>
 80283ce:	2a25      	cmp	r2, #37	; 0x25
 80283d0:	d1f9      	bne.n	80283c6 <_vfiprintf_r+0x96>
 80283d2:	ebba 0b04 	subs.w	fp, sl, r4
 80283d6:	d00b      	beq.n	80283f0 <_vfiprintf_r+0xc0>
 80283d8:	465b      	mov	r3, fp
 80283da:	4622      	mov	r2, r4
 80283dc:	4629      	mov	r1, r5
 80283de:	4630      	mov	r0, r6
 80283e0:	f7ff ff93 	bl	802830a <__sfputs_r>
 80283e4:	3001      	adds	r0, #1
 80283e6:	f000 80aa 	beq.w	802853e <_vfiprintf_r+0x20e>
 80283ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80283ec:	445a      	add	r2, fp
 80283ee:	9209      	str	r2, [sp, #36]	; 0x24
 80283f0:	f89a 3000 	ldrb.w	r3, [sl]
 80283f4:	2b00      	cmp	r3, #0
 80283f6:	f000 80a2 	beq.w	802853e <_vfiprintf_r+0x20e>
 80283fa:	2300      	movs	r3, #0
 80283fc:	f04f 32ff 	mov.w	r2, #4294967295
 8028400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028404:	f10a 0a01 	add.w	sl, sl, #1
 8028408:	9304      	str	r3, [sp, #16]
 802840a:	9307      	str	r3, [sp, #28]
 802840c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028410:	931a      	str	r3, [sp, #104]	; 0x68
 8028412:	4654      	mov	r4, sl
 8028414:	2205      	movs	r2, #5
 8028416:	f814 1b01 	ldrb.w	r1, [r4], #1
 802841a:	4858      	ldr	r0, [pc, #352]	; (802857c <_vfiprintf_r+0x24c>)
 802841c:	f7d7 ff28 	bl	8000270 <memchr>
 8028420:	9a04      	ldr	r2, [sp, #16]
 8028422:	b9d8      	cbnz	r0, 802845c <_vfiprintf_r+0x12c>
 8028424:	06d1      	lsls	r1, r2, #27
 8028426:	bf44      	itt	mi
 8028428:	2320      	movmi	r3, #32
 802842a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802842e:	0713      	lsls	r3, r2, #28
 8028430:	bf44      	itt	mi
 8028432:	232b      	movmi	r3, #43	; 0x2b
 8028434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028438:	f89a 3000 	ldrb.w	r3, [sl]
 802843c:	2b2a      	cmp	r3, #42	; 0x2a
 802843e:	d015      	beq.n	802846c <_vfiprintf_r+0x13c>
 8028440:	9a07      	ldr	r2, [sp, #28]
 8028442:	4654      	mov	r4, sl
 8028444:	2000      	movs	r0, #0
 8028446:	f04f 0c0a 	mov.w	ip, #10
 802844a:	4621      	mov	r1, r4
 802844c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028450:	3b30      	subs	r3, #48	; 0x30
 8028452:	2b09      	cmp	r3, #9
 8028454:	d94e      	bls.n	80284f4 <_vfiprintf_r+0x1c4>
 8028456:	b1b0      	cbz	r0, 8028486 <_vfiprintf_r+0x156>
 8028458:	9207      	str	r2, [sp, #28]
 802845a:	e014      	b.n	8028486 <_vfiprintf_r+0x156>
 802845c:	eba0 0308 	sub.w	r3, r0, r8
 8028460:	fa09 f303 	lsl.w	r3, r9, r3
 8028464:	4313      	orrs	r3, r2
 8028466:	9304      	str	r3, [sp, #16]
 8028468:	46a2      	mov	sl, r4
 802846a:	e7d2      	b.n	8028412 <_vfiprintf_r+0xe2>
 802846c:	9b03      	ldr	r3, [sp, #12]
 802846e:	1d19      	adds	r1, r3, #4
 8028470:	681b      	ldr	r3, [r3, #0]
 8028472:	9103      	str	r1, [sp, #12]
 8028474:	2b00      	cmp	r3, #0
 8028476:	bfbb      	ittet	lt
 8028478:	425b      	neglt	r3, r3
 802847a:	f042 0202 	orrlt.w	r2, r2, #2
 802847e:	9307      	strge	r3, [sp, #28]
 8028480:	9307      	strlt	r3, [sp, #28]
 8028482:	bfb8      	it	lt
 8028484:	9204      	strlt	r2, [sp, #16]
 8028486:	7823      	ldrb	r3, [r4, #0]
 8028488:	2b2e      	cmp	r3, #46	; 0x2e
 802848a:	d10c      	bne.n	80284a6 <_vfiprintf_r+0x176>
 802848c:	7863      	ldrb	r3, [r4, #1]
 802848e:	2b2a      	cmp	r3, #42	; 0x2a
 8028490:	d135      	bne.n	80284fe <_vfiprintf_r+0x1ce>
 8028492:	9b03      	ldr	r3, [sp, #12]
 8028494:	1d1a      	adds	r2, r3, #4
 8028496:	681b      	ldr	r3, [r3, #0]
 8028498:	9203      	str	r2, [sp, #12]
 802849a:	2b00      	cmp	r3, #0
 802849c:	bfb8      	it	lt
 802849e:	f04f 33ff 	movlt.w	r3, #4294967295
 80284a2:	3402      	adds	r4, #2
 80284a4:	9305      	str	r3, [sp, #20]
 80284a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802858c <_vfiprintf_r+0x25c>
 80284aa:	7821      	ldrb	r1, [r4, #0]
 80284ac:	2203      	movs	r2, #3
 80284ae:	4650      	mov	r0, sl
 80284b0:	f7d7 fede 	bl	8000270 <memchr>
 80284b4:	b140      	cbz	r0, 80284c8 <_vfiprintf_r+0x198>
 80284b6:	2340      	movs	r3, #64	; 0x40
 80284b8:	eba0 000a 	sub.w	r0, r0, sl
 80284bc:	fa03 f000 	lsl.w	r0, r3, r0
 80284c0:	9b04      	ldr	r3, [sp, #16]
 80284c2:	4303      	orrs	r3, r0
 80284c4:	3401      	adds	r4, #1
 80284c6:	9304      	str	r3, [sp, #16]
 80284c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80284cc:	482c      	ldr	r0, [pc, #176]	; (8028580 <_vfiprintf_r+0x250>)
 80284ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80284d2:	2206      	movs	r2, #6
 80284d4:	f7d7 fecc 	bl	8000270 <memchr>
 80284d8:	2800      	cmp	r0, #0
 80284da:	d03f      	beq.n	802855c <_vfiprintf_r+0x22c>
 80284dc:	4b29      	ldr	r3, [pc, #164]	; (8028584 <_vfiprintf_r+0x254>)
 80284de:	bb1b      	cbnz	r3, 8028528 <_vfiprintf_r+0x1f8>
 80284e0:	9b03      	ldr	r3, [sp, #12]
 80284e2:	3307      	adds	r3, #7
 80284e4:	f023 0307 	bic.w	r3, r3, #7
 80284e8:	3308      	adds	r3, #8
 80284ea:	9303      	str	r3, [sp, #12]
 80284ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80284ee:	443b      	add	r3, r7
 80284f0:	9309      	str	r3, [sp, #36]	; 0x24
 80284f2:	e767      	b.n	80283c4 <_vfiprintf_r+0x94>
 80284f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80284f8:	460c      	mov	r4, r1
 80284fa:	2001      	movs	r0, #1
 80284fc:	e7a5      	b.n	802844a <_vfiprintf_r+0x11a>
 80284fe:	2300      	movs	r3, #0
 8028500:	3401      	adds	r4, #1
 8028502:	9305      	str	r3, [sp, #20]
 8028504:	4619      	mov	r1, r3
 8028506:	f04f 0c0a 	mov.w	ip, #10
 802850a:	4620      	mov	r0, r4
 802850c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028510:	3a30      	subs	r2, #48	; 0x30
 8028512:	2a09      	cmp	r2, #9
 8028514:	d903      	bls.n	802851e <_vfiprintf_r+0x1ee>
 8028516:	2b00      	cmp	r3, #0
 8028518:	d0c5      	beq.n	80284a6 <_vfiprintf_r+0x176>
 802851a:	9105      	str	r1, [sp, #20]
 802851c:	e7c3      	b.n	80284a6 <_vfiprintf_r+0x176>
 802851e:	fb0c 2101 	mla	r1, ip, r1, r2
 8028522:	4604      	mov	r4, r0
 8028524:	2301      	movs	r3, #1
 8028526:	e7f0      	b.n	802850a <_vfiprintf_r+0x1da>
 8028528:	ab03      	add	r3, sp, #12
 802852a:	9300      	str	r3, [sp, #0]
 802852c:	462a      	mov	r2, r5
 802852e:	4b16      	ldr	r3, [pc, #88]	; (8028588 <_vfiprintf_r+0x258>)
 8028530:	a904      	add	r1, sp, #16
 8028532:	4630      	mov	r0, r6
 8028534:	f7fb ff28 	bl	8024388 <_printf_float>
 8028538:	4607      	mov	r7, r0
 802853a:	1c78      	adds	r0, r7, #1
 802853c:	d1d6      	bne.n	80284ec <_vfiprintf_r+0x1bc>
 802853e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028540:	07d9      	lsls	r1, r3, #31
 8028542:	d405      	bmi.n	8028550 <_vfiprintf_r+0x220>
 8028544:	89ab      	ldrh	r3, [r5, #12]
 8028546:	059a      	lsls	r2, r3, #22
 8028548:	d402      	bmi.n	8028550 <_vfiprintf_r+0x220>
 802854a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802854c:	f7fb fae8 	bl	8023b20 <__retarget_lock_release_recursive>
 8028550:	89ab      	ldrh	r3, [r5, #12]
 8028552:	065b      	lsls	r3, r3, #25
 8028554:	f53f af12 	bmi.w	802837c <_vfiprintf_r+0x4c>
 8028558:	9809      	ldr	r0, [sp, #36]	; 0x24
 802855a:	e711      	b.n	8028380 <_vfiprintf_r+0x50>
 802855c:	ab03      	add	r3, sp, #12
 802855e:	9300      	str	r3, [sp, #0]
 8028560:	462a      	mov	r2, r5
 8028562:	4b09      	ldr	r3, [pc, #36]	; (8028588 <_vfiprintf_r+0x258>)
 8028564:	a904      	add	r1, sp, #16
 8028566:	4630      	mov	r0, r6
 8028568:	f7fc f99a 	bl	80248a0 <_printf_i>
 802856c:	e7e4      	b.n	8028538 <_vfiprintf_r+0x208>
 802856e:	bf00      	nop
 8028570:	08045038 	.word	0x08045038
 8028574:	08045058 	.word	0x08045058
 8028578:	08045018 	.word	0x08045018
 802857c:	080457c4 	.word	0x080457c4
 8028580:	080457ce 	.word	0x080457ce
 8028584:	08024389 	.word	0x08024389
 8028588:	0802830b 	.word	0x0802830b
 802858c:	080457ca 	.word	0x080457ca

08028590 <_scanf_chars>:
 8028590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028594:	4615      	mov	r5, r2
 8028596:	688a      	ldr	r2, [r1, #8]
 8028598:	4680      	mov	r8, r0
 802859a:	460c      	mov	r4, r1
 802859c:	b932      	cbnz	r2, 80285ac <_scanf_chars+0x1c>
 802859e:	698a      	ldr	r2, [r1, #24]
 80285a0:	2a00      	cmp	r2, #0
 80285a2:	bf0c      	ite	eq
 80285a4:	2201      	moveq	r2, #1
 80285a6:	f04f 32ff 	movne.w	r2, #4294967295
 80285aa:	608a      	str	r2, [r1, #8]
 80285ac:	6822      	ldr	r2, [r4, #0]
 80285ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8028640 <_scanf_chars+0xb0>
 80285b2:	06d1      	lsls	r1, r2, #27
 80285b4:	bf5f      	itttt	pl
 80285b6:	681a      	ldrpl	r2, [r3, #0]
 80285b8:	1d11      	addpl	r1, r2, #4
 80285ba:	6019      	strpl	r1, [r3, #0]
 80285bc:	6816      	ldrpl	r6, [r2, #0]
 80285be:	2700      	movs	r7, #0
 80285c0:	69a0      	ldr	r0, [r4, #24]
 80285c2:	b188      	cbz	r0, 80285e8 <_scanf_chars+0x58>
 80285c4:	2801      	cmp	r0, #1
 80285c6:	d107      	bne.n	80285d8 <_scanf_chars+0x48>
 80285c8:	682a      	ldr	r2, [r5, #0]
 80285ca:	7811      	ldrb	r1, [r2, #0]
 80285cc:	6962      	ldr	r2, [r4, #20]
 80285ce:	5c52      	ldrb	r2, [r2, r1]
 80285d0:	b952      	cbnz	r2, 80285e8 <_scanf_chars+0x58>
 80285d2:	2f00      	cmp	r7, #0
 80285d4:	d031      	beq.n	802863a <_scanf_chars+0xaa>
 80285d6:	e022      	b.n	802861e <_scanf_chars+0x8e>
 80285d8:	2802      	cmp	r0, #2
 80285da:	d120      	bne.n	802861e <_scanf_chars+0x8e>
 80285dc:	682b      	ldr	r3, [r5, #0]
 80285de:	781b      	ldrb	r3, [r3, #0]
 80285e0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80285e4:	071b      	lsls	r3, r3, #28
 80285e6:	d41a      	bmi.n	802861e <_scanf_chars+0x8e>
 80285e8:	6823      	ldr	r3, [r4, #0]
 80285ea:	06da      	lsls	r2, r3, #27
 80285ec:	bf5e      	ittt	pl
 80285ee:	682b      	ldrpl	r3, [r5, #0]
 80285f0:	781b      	ldrbpl	r3, [r3, #0]
 80285f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80285f6:	682a      	ldr	r2, [r5, #0]
 80285f8:	686b      	ldr	r3, [r5, #4]
 80285fa:	3201      	adds	r2, #1
 80285fc:	602a      	str	r2, [r5, #0]
 80285fe:	68a2      	ldr	r2, [r4, #8]
 8028600:	3b01      	subs	r3, #1
 8028602:	3a01      	subs	r2, #1
 8028604:	606b      	str	r3, [r5, #4]
 8028606:	3701      	adds	r7, #1
 8028608:	60a2      	str	r2, [r4, #8]
 802860a:	b142      	cbz	r2, 802861e <_scanf_chars+0x8e>
 802860c:	2b00      	cmp	r3, #0
 802860e:	dcd7      	bgt.n	80285c0 <_scanf_chars+0x30>
 8028610:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028614:	4629      	mov	r1, r5
 8028616:	4640      	mov	r0, r8
 8028618:	4798      	blx	r3
 802861a:	2800      	cmp	r0, #0
 802861c:	d0d0      	beq.n	80285c0 <_scanf_chars+0x30>
 802861e:	6823      	ldr	r3, [r4, #0]
 8028620:	f013 0310 	ands.w	r3, r3, #16
 8028624:	d105      	bne.n	8028632 <_scanf_chars+0xa2>
 8028626:	68e2      	ldr	r2, [r4, #12]
 8028628:	3201      	adds	r2, #1
 802862a:	60e2      	str	r2, [r4, #12]
 802862c:	69a2      	ldr	r2, [r4, #24]
 802862e:	b102      	cbz	r2, 8028632 <_scanf_chars+0xa2>
 8028630:	7033      	strb	r3, [r6, #0]
 8028632:	6923      	ldr	r3, [r4, #16]
 8028634:	443b      	add	r3, r7
 8028636:	6123      	str	r3, [r4, #16]
 8028638:	2000      	movs	r0, #0
 802863a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802863e:	bf00      	nop
 8028640:	08044f15 	.word	0x08044f15

08028644 <_scanf_i>:
 8028644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028648:	4698      	mov	r8, r3
 802864a:	4b76      	ldr	r3, [pc, #472]	; (8028824 <_scanf_i+0x1e0>)
 802864c:	460c      	mov	r4, r1
 802864e:	4682      	mov	sl, r0
 8028650:	4616      	mov	r6, r2
 8028652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028656:	b087      	sub	sp, #28
 8028658:	ab03      	add	r3, sp, #12
 802865a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802865e:	4b72      	ldr	r3, [pc, #456]	; (8028828 <_scanf_i+0x1e4>)
 8028660:	69a1      	ldr	r1, [r4, #24]
 8028662:	4a72      	ldr	r2, [pc, #456]	; (802882c <_scanf_i+0x1e8>)
 8028664:	2903      	cmp	r1, #3
 8028666:	bf18      	it	ne
 8028668:	461a      	movne	r2, r3
 802866a:	68a3      	ldr	r3, [r4, #8]
 802866c:	9201      	str	r2, [sp, #4]
 802866e:	1e5a      	subs	r2, r3, #1
 8028670:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8028674:	bf88      	it	hi
 8028676:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802867a:	4627      	mov	r7, r4
 802867c:	bf82      	ittt	hi
 802867e:	eb03 0905 	addhi.w	r9, r3, r5
 8028682:	f240 135d 	movwhi	r3, #349	; 0x15d
 8028686:	60a3      	strhi	r3, [r4, #8]
 8028688:	f857 3b1c 	ldr.w	r3, [r7], #28
 802868c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8028690:	bf98      	it	ls
 8028692:	f04f 0900 	movls.w	r9, #0
 8028696:	6023      	str	r3, [r4, #0]
 8028698:	463d      	mov	r5, r7
 802869a:	f04f 0b00 	mov.w	fp, #0
 802869e:	6831      	ldr	r1, [r6, #0]
 80286a0:	ab03      	add	r3, sp, #12
 80286a2:	7809      	ldrb	r1, [r1, #0]
 80286a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80286a8:	2202      	movs	r2, #2
 80286aa:	f7d7 fde1 	bl	8000270 <memchr>
 80286ae:	b328      	cbz	r0, 80286fc <_scanf_i+0xb8>
 80286b0:	f1bb 0f01 	cmp.w	fp, #1
 80286b4:	d159      	bne.n	802876a <_scanf_i+0x126>
 80286b6:	6862      	ldr	r2, [r4, #4]
 80286b8:	b92a      	cbnz	r2, 80286c6 <_scanf_i+0x82>
 80286ba:	6822      	ldr	r2, [r4, #0]
 80286bc:	2308      	movs	r3, #8
 80286be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80286c2:	6063      	str	r3, [r4, #4]
 80286c4:	6022      	str	r2, [r4, #0]
 80286c6:	6822      	ldr	r2, [r4, #0]
 80286c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80286cc:	6022      	str	r2, [r4, #0]
 80286ce:	68a2      	ldr	r2, [r4, #8]
 80286d0:	1e51      	subs	r1, r2, #1
 80286d2:	60a1      	str	r1, [r4, #8]
 80286d4:	b192      	cbz	r2, 80286fc <_scanf_i+0xb8>
 80286d6:	6832      	ldr	r2, [r6, #0]
 80286d8:	1c51      	adds	r1, r2, #1
 80286da:	6031      	str	r1, [r6, #0]
 80286dc:	7812      	ldrb	r2, [r2, #0]
 80286de:	f805 2b01 	strb.w	r2, [r5], #1
 80286e2:	6872      	ldr	r2, [r6, #4]
 80286e4:	3a01      	subs	r2, #1
 80286e6:	2a00      	cmp	r2, #0
 80286e8:	6072      	str	r2, [r6, #4]
 80286ea:	dc07      	bgt.n	80286fc <_scanf_i+0xb8>
 80286ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80286f0:	4631      	mov	r1, r6
 80286f2:	4650      	mov	r0, sl
 80286f4:	4790      	blx	r2
 80286f6:	2800      	cmp	r0, #0
 80286f8:	f040 8085 	bne.w	8028806 <_scanf_i+0x1c2>
 80286fc:	f10b 0b01 	add.w	fp, fp, #1
 8028700:	f1bb 0f03 	cmp.w	fp, #3
 8028704:	d1cb      	bne.n	802869e <_scanf_i+0x5a>
 8028706:	6863      	ldr	r3, [r4, #4]
 8028708:	b90b      	cbnz	r3, 802870e <_scanf_i+0xca>
 802870a:	230a      	movs	r3, #10
 802870c:	6063      	str	r3, [r4, #4]
 802870e:	6863      	ldr	r3, [r4, #4]
 8028710:	4947      	ldr	r1, [pc, #284]	; (8028830 <_scanf_i+0x1ec>)
 8028712:	6960      	ldr	r0, [r4, #20]
 8028714:	1ac9      	subs	r1, r1, r3
 8028716:	f000 f911 	bl	802893c <__sccl>
 802871a:	f04f 0b00 	mov.w	fp, #0
 802871e:	68a3      	ldr	r3, [r4, #8]
 8028720:	6822      	ldr	r2, [r4, #0]
 8028722:	2b00      	cmp	r3, #0
 8028724:	d03d      	beq.n	80287a2 <_scanf_i+0x15e>
 8028726:	6831      	ldr	r1, [r6, #0]
 8028728:	6960      	ldr	r0, [r4, #20]
 802872a:	f891 c000 	ldrb.w	ip, [r1]
 802872e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028732:	2800      	cmp	r0, #0
 8028734:	d035      	beq.n	80287a2 <_scanf_i+0x15e>
 8028736:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802873a:	d124      	bne.n	8028786 <_scanf_i+0x142>
 802873c:	0510      	lsls	r0, r2, #20
 802873e:	d522      	bpl.n	8028786 <_scanf_i+0x142>
 8028740:	f10b 0b01 	add.w	fp, fp, #1
 8028744:	f1b9 0f00 	cmp.w	r9, #0
 8028748:	d003      	beq.n	8028752 <_scanf_i+0x10e>
 802874a:	3301      	adds	r3, #1
 802874c:	f109 39ff 	add.w	r9, r9, #4294967295
 8028750:	60a3      	str	r3, [r4, #8]
 8028752:	6873      	ldr	r3, [r6, #4]
 8028754:	3b01      	subs	r3, #1
 8028756:	2b00      	cmp	r3, #0
 8028758:	6073      	str	r3, [r6, #4]
 802875a:	dd1b      	ble.n	8028794 <_scanf_i+0x150>
 802875c:	6833      	ldr	r3, [r6, #0]
 802875e:	3301      	adds	r3, #1
 8028760:	6033      	str	r3, [r6, #0]
 8028762:	68a3      	ldr	r3, [r4, #8]
 8028764:	3b01      	subs	r3, #1
 8028766:	60a3      	str	r3, [r4, #8]
 8028768:	e7d9      	b.n	802871e <_scanf_i+0xda>
 802876a:	f1bb 0f02 	cmp.w	fp, #2
 802876e:	d1ae      	bne.n	80286ce <_scanf_i+0x8a>
 8028770:	6822      	ldr	r2, [r4, #0]
 8028772:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8028776:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802877a:	d1bf      	bne.n	80286fc <_scanf_i+0xb8>
 802877c:	2310      	movs	r3, #16
 802877e:	6063      	str	r3, [r4, #4]
 8028780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028784:	e7a2      	b.n	80286cc <_scanf_i+0x88>
 8028786:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802878a:	6022      	str	r2, [r4, #0]
 802878c:	780b      	ldrb	r3, [r1, #0]
 802878e:	f805 3b01 	strb.w	r3, [r5], #1
 8028792:	e7de      	b.n	8028752 <_scanf_i+0x10e>
 8028794:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028798:	4631      	mov	r1, r6
 802879a:	4650      	mov	r0, sl
 802879c:	4798      	blx	r3
 802879e:	2800      	cmp	r0, #0
 80287a0:	d0df      	beq.n	8028762 <_scanf_i+0x11e>
 80287a2:	6823      	ldr	r3, [r4, #0]
 80287a4:	05db      	lsls	r3, r3, #23
 80287a6:	d50d      	bpl.n	80287c4 <_scanf_i+0x180>
 80287a8:	42bd      	cmp	r5, r7
 80287aa:	d909      	bls.n	80287c0 <_scanf_i+0x17c>
 80287ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80287b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80287b4:	4632      	mov	r2, r6
 80287b6:	4650      	mov	r0, sl
 80287b8:	4798      	blx	r3
 80287ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80287be:	464d      	mov	r5, r9
 80287c0:	42bd      	cmp	r5, r7
 80287c2:	d02d      	beq.n	8028820 <_scanf_i+0x1dc>
 80287c4:	6822      	ldr	r2, [r4, #0]
 80287c6:	f012 0210 	ands.w	r2, r2, #16
 80287ca:	d113      	bne.n	80287f4 <_scanf_i+0x1b0>
 80287cc:	702a      	strb	r2, [r5, #0]
 80287ce:	6863      	ldr	r3, [r4, #4]
 80287d0:	9e01      	ldr	r6, [sp, #4]
 80287d2:	4639      	mov	r1, r7
 80287d4:	4650      	mov	r0, sl
 80287d6:	47b0      	blx	r6
 80287d8:	6821      	ldr	r1, [r4, #0]
 80287da:	f8d8 3000 	ldr.w	r3, [r8]
 80287de:	f011 0f20 	tst.w	r1, #32
 80287e2:	d013      	beq.n	802880c <_scanf_i+0x1c8>
 80287e4:	1d1a      	adds	r2, r3, #4
 80287e6:	f8c8 2000 	str.w	r2, [r8]
 80287ea:	681b      	ldr	r3, [r3, #0]
 80287ec:	6018      	str	r0, [r3, #0]
 80287ee:	68e3      	ldr	r3, [r4, #12]
 80287f0:	3301      	adds	r3, #1
 80287f2:	60e3      	str	r3, [r4, #12]
 80287f4:	1bed      	subs	r5, r5, r7
 80287f6:	44ab      	add	fp, r5
 80287f8:	6925      	ldr	r5, [r4, #16]
 80287fa:	445d      	add	r5, fp
 80287fc:	6125      	str	r5, [r4, #16]
 80287fe:	2000      	movs	r0, #0
 8028800:	b007      	add	sp, #28
 8028802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028806:	f04f 0b00 	mov.w	fp, #0
 802880a:	e7ca      	b.n	80287a2 <_scanf_i+0x15e>
 802880c:	1d1a      	adds	r2, r3, #4
 802880e:	f8c8 2000 	str.w	r2, [r8]
 8028812:	681b      	ldr	r3, [r3, #0]
 8028814:	f011 0f01 	tst.w	r1, #1
 8028818:	bf14      	ite	ne
 802881a:	8018      	strhne	r0, [r3, #0]
 802881c:	6018      	streq	r0, [r3, #0]
 802881e:	e7e6      	b.n	80287ee <_scanf_i+0x1aa>
 8028820:	2001      	movs	r0, #1
 8028822:	e7ed      	b.n	8028800 <_scanf_i+0x1bc>
 8028824:	08028d60 	.word	0x08028d60
 8028828:	08025cf5 	.word	0x08025cf5
 802882c:	08025bf9 	.word	0x08025bf9
 8028830:	080457ee 	.word	0x080457ee

08028834 <_putc_r>:
 8028834:	b570      	push	{r4, r5, r6, lr}
 8028836:	460d      	mov	r5, r1
 8028838:	4614      	mov	r4, r2
 802883a:	4606      	mov	r6, r0
 802883c:	b118      	cbz	r0, 8028846 <_putc_r+0x12>
 802883e:	6983      	ldr	r3, [r0, #24]
 8028840:	b90b      	cbnz	r3, 8028846 <_putc_r+0x12>
 8028842:	f7fa ff95 	bl	8023770 <__sinit>
 8028846:	4b1c      	ldr	r3, [pc, #112]	; (80288b8 <_putc_r+0x84>)
 8028848:	429c      	cmp	r4, r3
 802884a:	d124      	bne.n	8028896 <_putc_r+0x62>
 802884c:	6874      	ldr	r4, [r6, #4]
 802884e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028850:	07d8      	lsls	r0, r3, #31
 8028852:	d405      	bmi.n	8028860 <_putc_r+0x2c>
 8028854:	89a3      	ldrh	r3, [r4, #12]
 8028856:	0599      	lsls	r1, r3, #22
 8028858:	d402      	bmi.n	8028860 <_putc_r+0x2c>
 802885a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802885c:	f7fb f95e 	bl	8023b1c <__retarget_lock_acquire_recursive>
 8028860:	68a3      	ldr	r3, [r4, #8]
 8028862:	3b01      	subs	r3, #1
 8028864:	2b00      	cmp	r3, #0
 8028866:	60a3      	str	r3, [r4, #8]
 8028868:	da05      	bge.n	8028876 <_putc_r+0x42>
 802886a:	69a2      	ldr	r2, [r4, #24]
 802886c:	4293      	cmp	r3, r2
 802886e:	db1c      	blt.n	80288aa <_putc_r+0x76>
 8028870:	b2eb      	uxtb	r3, r5
 8028872:	2b0a      	cmp	r3, #10
 8028874:	d019      	beq.n	80288aa <_putc_r+0x76>
 8028876:	6823      	ldr	r3, [r4, #0]
 8028878:	1c5a      	adds	r2, r3, #1
 802887a:	6022      	str	r2, [r4, #0]
 802887c:	701d      	strb	r5, [r3, #0]
 802887e:	b2ed      	uxtb	r5, r5
 8028880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028882:	07da      	lsls	r2, r3, #31
 8028884:	d405      	bmi.n	8028892 <_putc_r+0x5e>
 8028886:	89a3      	ldrh	r3, [r4, #12]
 8028888:	059b      	lsls	r3, r3, #22
 802888a:	d402      	bmi.n	8028892 <_putc_r+0x5e>
 802888c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802888e:	f7fb f947 	bl	8023b20 <__retarget_lock_release_recursive>
 8028892:	4628      	mov	r0, r5
 8028894:	bd70      	pop	{r4, r5, r6, pc}
 8028896:	4b09      	ldr	r3, [pc, #36]	; (80288bc <_putc_r+0x88>)
 8028898:	429c      	cmp	r4, r3
 802889a:	d101      	bne.n	80288a0 <_putc_r+0x6c>
 802889c:	68b4      	ldr	r4, [r6, #8]
 802889e:	e7d6      	b.n	802884e <_putc_r+0x1a>
 80288a0:	4b07      	ldr	r3, [pc, #28]	; (80288c0 <_putc_r+0x8c>)
 80288a2:	429c      	cmp	r4, r3
 80288a4:	bf08      	it	eq
 80288a6:	68f4      	ldreq	r4, [r6, #12]
 80288a8:	e7d1      	b.n	802884e <_putc_r+0x1a>
 80288aa:	4629      	mov	r1, r5
 80288ac:	4622      	mov	r2, r4
 80288ae:	4630      	mov	r0, r6
 80288b0:	f7fd fc68 	bl	8026184 <__swbuf_r>
 80288b4:	4605      	mov	r5, r0
 80288b6:	e7e3      	b.n	8028880 <_putc_r+0x4c>
 80288b8:	08045038 	.word	0x08045038
 80288bc:	08045058 	.word	0x08045058
 80288c0:	08045018 	.word	0x08045018

080288c4 <_read_r>:
 80288c4:	b538      	push	{r3, r4, r5, lr}
 80288c6:	4d07      	ldr	r5, [pc, #28]	; (80288e4 <_read_r+0x20>)
 80288c8:	4604      	mov	r4, r0
 80288ca:	4608      	mov	r0, r1
 80288cc:	4611      	mov	r1, r2
 80288ce:	2200      	movs	r2, #0
 80288d0:	602a      	str	r2, [r5, #0]
 80288d2:	461a      	mov	r2, r3
 80288d4:	f7dd fe1e 	bl	8006514 <_read>
 80288d8:	1c43      	adds	r3, r0, #1
 80288da:	d102      	bne.n	80288e2 <_read_r+0x1e>
 80288dc:	682b      	ldr	r3, [r5, #0]
 80288de:	b103      	cbz	r3, 80288e2 <_read_r+0x1e>
 80288e0:	6023      	str	r3, [r4, #0]
 80288e2:	bd38      	pop	{r3, r4, r5, pc}
 80288e4:	2002f84c 	.word	0x2002f84c

080288e8 <__fpclassifyd>:
 80288e8:	ec51 0b10 	vmov	r0, r1, d0
 80288ec:	b510      	push	{r4, lr}
 80288ee:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80288f2:	460b      	mov	r3, r1
 80288f4:	d019      	beq.n	802892a <__fpclassifyd+0x42>
 80288f6:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80288fa:	490e      	ldr	r1, [pc, #56]	; (8028934 <__fpclassifyd+0x4c>)
 80288fc:	428a      	cmp	r2, r1
 80288fe:	d90e      	bls.n	802891e <__fpclassifyd+0x36>
 8028900:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8028904:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8028908:	428a      	cmp	r2, r1
 802890a:	d908      	bls.n	802891e <__fpclassifyd+0x36>
 802890c:	4a0a      	ldr	r2, [pc, #40]	; (8028938 <__fpclassifyd+0x50>)
 802890e:	4213      	tst	r3, r2
 8028910:	d007      	beq.n	8028922 <__fpclassifyd+0x3a>
 8028912:	4294      	cmp	r4, r2
 8028914:	d107      	bne.n	8028926 <__fpclassifyd+0x3e>
 8028916:	fab0 f080 	clz	r0, r0
 802891a:	0940      	lsrs	r0, r0, #5
 802891c:	bd10      	pop	{r4, pc}
 802891e:	2004      	movs	r0, #4
 8028920:	e7fc      	b.n	802891c <__fpclassifyd+0x34>
 8028922:	2003      	movs	r0, #3
 8028924:	e7fa      	b.n	802891c <__fpclassifyd+0x34>
 8028926:	2000      	movs	r0, #0
 8028928:	e7f8      	b.n	802891c <__fpclassifyd+0x34>
 802892a:	2800      	cmp	r0, #0
 802892c:	d1ee      	bne.n	802890c <__fpclassifyd+0x24>
 802892e:	2002      	movs	r0, #2
 8028930:	e7f4      	b.n	802891c <__fpclassifyd+0x34>
 8028932:	bf00      	nop
 8028934:	7fdfffff 	.word	0x7fdfffff
 8028938:	7ff00000 	.word	0x7ff00000

0802893c <__sccl>:
 802893c:	b570      	push	{r4, r5, r6, lr}
 802893e:	780b      	ldrb	r3, [r1, #0]
 8028940:	4604      	mov	r4, r0
 8028942:	2b5e      	cmp	r3, #94	; 0x5e
 8028944:	bf0b      	itete	eq
 8028946:	784b      	ldrbeq	r3, [r1, #1]
 8028948:	1c48      	addne	r0, r1, #1
 802894a:	1c88      	addeq	r0, r1, #2
 802894c:	2200      	movne	r2, #0
 802894e:	bf08      	it	eq
 8028950:	2201      	moveq	r2, #1
 8028952:	1e61      	subs	r1, r4, #1
 8028954:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8028958:	f801 2f01 	strb.w	r2, [r1, #1]!
 802895c:	42a9      	cmp	r1, r5
 802895e:	d1fb      	bne.n	8028958 <__sccl+0x1c>
 8028960:	b90b      	cbnz	r3, 8028966 <__sccl+0x2a>
 8028962:	3801      	subs	r0, #1
 8028964:	bd70      	pop	{r4, r5, r6, pc}
 8028966:	f082 0201 	eor.w	r2, r2, #1
 802896a:	54e2      	strb	r2, [r4, r3]
 802896c:	4605      	mov	r5, r0
 802896e:	4628      	mov	r0, r5
 8028970:	f810 1b01 	ldrb.w	r1, [r0], #1
 8028974:	292d      	cmp	r1, #45	; 0x2d
 8028976:	d006      	beq.n	8028986 <__sccl+0x4a>
 8028978:	295d      	cmp	r1, #93	; 0x5d
 802897a:	d0f3      	beq.n	8028964 <__sccl+0x28>
 802897c:	b909      	cbnz	r1, 8028982 <__sccl+0x46>
 802897e:	4628      	mov	r0, r5
 8028980:	e7f0      	b.n	8028964 <__sccl+0x28>
 8028982:	460b      	mov	r3, r1
 8028984:	e7f1      	b.n	802896a <__sccl+0x2e>
 8028986:	786e      	ldrb	r6, [r5, #1]
 8028988:	2e5d      	cmp	r6, #93	; 0x5d
 802898a:	d0fa      	beq.n	8028982 <__sccl+0x46>
 802898c:	42b3      	cmp	r3, r6
 802898e:	dcf8      	bgt.n	8028982 <__sccl+0x46>
 8028990:	3502      	adds	r5, #2
 8028992:	4619      	mov	r1, r3
 8028994:	3101      	adds	r1, #1
 8028996:	428e      	cmp	r6, r1
 8028998:	5462      	strb	r2, [r4, r1]
 802899a:	dcfb      	bgt.n	8028994 <__sccl+0x58>
 802899c:	1af1      	subs	r1, r6, r3
 802899e:	3901      	subs	r1, #1
 80289a0:	1c58      	adds	r0, r3, #1
 80289a2:	42b3      	cmp	r3, r6
 80289a4:	bfa8      	it	ge
 80289a6:	2100      	movge	r1, #0
 80289a8:	1843      	adds	r3, r0, r1
 80289aa:	e7e0      	b.n	802896e <__sccl+0x32>

080289ac <__submore>:
 80289ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80289b0:	460c      	mov	r4, r1
 80289b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80289b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80289b8:	4299      	cmp	r1, r3
 80289ba:	d11d      	bne.n	80289f8 <__submore+0x4c>
 80289bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80289c0:	f7fb fbde 	bl	8024180 <_malloc_r>
 80289c4:	b918      	cbnz	r0, 80289ce <__submore+0x22>
 80289c6:	f04f 30ff 	mov.w	r0, #4294967295
 80289ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80289ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80289d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80289d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80289d8:	6360      	str	r0, [r4, #52]	; 0x34
 80289da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80289de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80289e2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80289e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80289ea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80289ee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80289f2:	6020      	str	r0, [r4, #0]
 80289f4:	2000      	movs	r0, #0
 80289f6:	e7e8      	b.n	80289ca <__submore+0x1e>
 80289f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80289fa:	0077      	lsls	r7, r6, #1
 80289fc:	463a      	mov	r2, r7
 80289fe:	f7ff f911 	bl	8027c24 <_realloc_r>
 8028a02:	4605      	mov	r5, r0
 8028a04:	2800      	cmp	r0, #0
 8028a06:	d0de      	beq.n	80289c6 <__submore+0x1a>
 8028a08:	eb00 0806 	add.w	r8, r0, r6
 8028a0c:	4601      	mov	r1, r0
 8028a0e:	4632      	mov	r2, r6
 8028a10:	4640      	mov	r0, r8
 8028a12:	f7fb f8a7 	bl	8023b64 <memcpy>
 8028a16:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8028a1a:	f8c4 8000 	str.w	r8, [r4]
 8028a1e:	e7e9      	b.n	80289f4 <__submore+0x48>

08028a20 <abort>:
 8028a20:	b508      	push	{r3, lr}
 8028a22:	2006      	movs	r0, #6
 8028a24:	f000 f874 	bl	8028b10 <raise>
 8028a28:	2001      	movs	r0, #1
 8028a2a:	f7dd fd6d 	bl	8006508 <_exit>
	...

08028a30 <__env_lock>:
 8028a30:	4801      	ldr	r0, [pc, #4]	; (8028a38 <__env_lock+0x8>)
 8028a32:	f7fb b873 	b.w	8023b1c <__retarget_lock_acquire_recursive>
 8028a36:	bf00      	nop
 8028a38:	2002f83c 	.word	0x2002f83c

08028a3c <__env_unlock>:
 8028a3c:	4801      	ldr	r0, [pc, #4]	; (8028a44 <__env_unlock+0x8>)
 8028a3e:	f7fb b86f 	b.w	8023b20 <__retarget_lock_release_recursive>
 8028a42:	bf00      	nop
 8028a44:	2002f83c 	.word	0x2002f83c

08028a48 <_fstat_r>:
 8028a48:	b538      	push	{r3, r4, r5, lr}
 8028a4a:	4d07      	ldr	r5, [pc, #28]	; (8028a68 <_fstat_r+0x20>)
 8028a4c:	2300      	movs	r3, #0
 8028a4e:	4604      	mov	r4, r0
 8028a50:	4608      	mov	r0, r1
 8028a52:	4611      	mov	r1, r2
 8028a54:	602b      	str	r3, [r5, #0]
 8028a56:	f7dd fd6f 	bl	8006538 <_fstat>
 8028a5a:	1c43      	adds	r3, r0, #1
 8028a5c:	d102      	bne.n	8028a64 <_fstat_r+0x1c>
 8028a5e:	682b      	ldr	r3, [r5, #0]
 8028a60:	b103      	cbz	r3, 8028a64 <_fstat_r+0x1c>
 8028a62:	6023      	str	r3, [r4, #0]
 8028a64:	bd38      	pop	{r3, r4, r5, pc}
 8028a66:	bf00      	nop
 8028a68:	2002f84c 	.word	0x2002f84c

08028a6c <_isatty_r>:
 8028a6c:	b538      	push	{r3, r4, r5, lr}
 8028a6e:	4d06      	ldr	r5, [pc, #24]	; (8028a88 <_isatty_r+0x1c>)
 8028a70:	2300      	movs	r3, #0
 8028a72:	4604      	mov	r4, r0
 8028a74:	4608      	mov	r0, r1
 8028a76:	602b      	str	r3, [r5, #0]
 8028a78:	f7dd fd64 	bl	8006544 <_isatty>
 8028a7c:	1c43      	adds	r3, r0, #1
 8028a7e:	d102      	bne.n	8028a86 <_isatty_r+0x1a>
 8028a80:	682b      	ldr	r3, [r5, #0]
 8028a82:	b103      	cbz	r3, 8028a86 <_isatty_r+0x1a>
 8028a84:	6023      	str	r3, [r4, #0]
 8028a86:	bd38      	pop	{r3, r4, r5, pc}
 8028a88:	2002f84c 	.word	0x2002f84c

08028a8c <__ascii_mbtowc>:
 8028a8c:	b082      	sub	sp, #8
 8028a8e:	b901      	cbnz	r1, 8028a92 <__ascii_mbtowc+0x6>
 8028a90:	a901      	add	r1, sp, #4
 8028a92:	b142      	cbz	r2, 8028aa6 <__ascii_mbtowc+0x1a>
 8028a94:	b14b      	cbz	r3, 8028aaa <__ascii_mbtowc+0x1e>
 8028a96:	7813      	ldrb	r3, [r2, #0]
 8028a98:	600b      	str	r3, [r1, #0]
 8028a9a:	7812      	ldrb	r2, [r2, #0]
 8028a9c:	1e10      	subs	r0, r2, #0
 8028a9e:	bf18      	it	ne
 8028aa0:	2001      	movne	r0, #1
 8028aa2:	b002      	add	sp, #8
 8028aa4:	4770      	bx	lr
 8028aa6:	4610      	mov	r0, r2
 8028aa8:	e7fb      	b.n	8028aa2 <__ascii_mbtowc+0x16>
 8028aaa:	f06f 0001 	mvn.w	r0, #1
 8028aae:	e7f8      	b.n	8028aa2 <__ascii_mbtowc+0x16>

08028ab0 <_malloc_usable_size_r>:
 8028ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028ab4:	1f18      	subs	r0, r3, #4
 8028ab6:	2b00      	cmp	r3, #0
 8028ab8:	bfbc      	itt	lt
 8028aba:	580b      	ldrlt	r3, [r1, r0]
 8028abc:	18c0      	addlt	r0, r0, r3
 8028abe:	4770      	bx	lr

08028ac0 <_raise_r>:
 8028ac0:	291f      	cmp	r1, #31
 8028ac2:	b538      	push	{r3, r4, r5, lr}
 8028ac4:	4604      	mov	r4, r0
 8028ac6:	460d      	mov	r5, r1
 8028ac8:	d904      	bls.n	8028ad4 <_raise_r+0x14>
 8028aca:	2316      	movs	r3, #22
 8028acc:	6003      	str	r3, [r0, #0]
 8028ace:	f04f 30ff 	mov.w	r0, #4294967295
 8028ad2:	bd38      	pop	{r3, r4, r5, pc}
 8028ad4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028ad6:	b112      	cbz	r2, 8028ade <_raise_r+0x1e>
 8028ad8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028adc:	b94b      	cbnz	r3, 8028af2 <_raise_r+0x32>
 8028ade:	4620      	mov	r0, r4
 8028ae0:	f000 f830 	bl	8028b44 <_getpid_r>
 8028ae4:	462a      	mov	r2, r5
 8028ae6:	4601      	mov	r1, r0
 8028ae8:	4620      	mov	r0, r4
 8028aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028aee:	f000 b817 	b.w	8028b20 <_kill_r>
 8028af2:	2b01      	cmp	r3, #1
 8028af4:	d00a      	beq.n	8028b0c <_raise_r+0x4c>
 8028af6:	1c59      	adds	r1, r3, #1
 8028af8:	d103      	bne.n	8028b02 <_raise_r+0x42>
 8028afa:	2316      	movs	r3, #22
 8028afc:	6003      	str	r3, [r0, #0]
 8028afe:	2001      	movs	r0, #1
 8028b00:	e7e7      	b.n	8028ad2 <_raise_r+0x12>
 8028b02:	2400      	movs	r4, #0
 8028b04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028b08:	4628      	mov	r0, r5
 8028b0a:	4798      	blx	r3
 8028b0c:	2000      	movs	r0, #0
 8028b0e:	e7e0      	b.n	8028ad2 <_raise_r+0x12>

08028b10 <raise>:
 8028b10:	4b02      	ldr	r3, [pc, #8]	; (8028b1c <raise+0xc>)
 8028b12:	4601      	mov	r1, r0
 8028b14:	6818      	ldr	r0, [r3, #0]
 8028b16:	f7ff bfd3 	b.w	8028ac0 <_raise_r>
 8028b1a:	bf00      	nop
 8028b1c:	20000488 	.word	0x20000488

08028b20 <_kill_r>:
 8028b20:	b538      	push	{r3, r4, r5, lr}
 8028b22:	4d07      	ldr	r5, [pc, #28]	; (8028b40 <_kill_r+0x20>)
 8028b24:	2300      	movs	r3, #0
 8028b26:	4604      	mov	r4, r0
 8028b28:	4608      	mov	r0, r1
 8028b2a:	4611      	mov	r1, r2
 8028b2c:	602b      	str	r3, [r5, #0]
 8028b2e:	f7dd fce3 	bl	80064f8 <_kill>
 8028b32:	1c43      	adds	r3, r0, #1
 8028b34:	d102      	bne.n	8028b3c <_kill_r+0x1c>
 8028b36:	682b      	ldr	r3, [r5, #0]
 8028b38:	b103      	cbz	r3, 8028b3c <_kill_r+0x1c>
 8028b3a:	6023      	str	r3, [r4, #0]
 8028b3c:	bd38      	pop	{r3, r4, r5, pc}
 8028b3e:	bf00      	nop
 8028b40:	2002f84c 	.word	0x2002f84c

08028b44 <_getpid_r>:
 8028b44:	f7dd bcd6 	b.w	80064f4 <_getpid>

08028b48 <__ascii_wctomb>:
 8028b48:	b149      	cbz	r1, 8028b5e <__ascii_wctomb+0x16>
 8028b4a:	2aff      	cmp	r2, #255	; 0xff
 8028b4c:	bf85      	ittet	hi
 8028b4e:	238a      	movhi	r3, #138	; 0x8a
 8028b50:	6003      	strhi	r3, [r0, #0]
 8028b52:	700a      	strbls	r2, [r1, #0]
 8028b54:	f04f 30ff 	movhi.w	r0, #4294967295
 8028b58:	bf98      	it	ls
 8028b5a:	2001      	movls	r0, #1
 8028b5c:	4770      	bx	lr
 8028b5e:	4608      	mov	r0, r1
 8028b60:	4770      	bx	lr
	...

08028b64 <_init>:
 8028b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028b66:	bf00      	nop
 8028b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028b6a:	bc08      	pop	{r3}
 8028b6c:	469e      	mov	lr, r3
 8028b6e:	4770      	bx	lr

08028b70 <_fini>:
 8028b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028b72:	bf00      	nop
 8028b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028b76:	bc08      	pop	{r3}
 8028b78:	469e      	mov	lr, r3
 8028b7a:	4770      	bx	lr
